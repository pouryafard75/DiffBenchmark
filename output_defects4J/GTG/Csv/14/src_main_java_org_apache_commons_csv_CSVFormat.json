{
  "matchedElements" : [
 {
    "left" : "class : CSVFormat",
    "right" : "class : CSVFormat",
    "info" : "TypeDeclaration[1807-65391]:TypeDeclaration[1807-65397]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "FieldDeclaration[5398-5429]:FieldDeclaration[5398-5429]"
  }, {
    "left" : "package Predefined(format )",
    "right" : "package Predefined(format )",
    "info" : "MethodDeclaration[5439-5519]:MethodDeclaration[5439-5519]"
  }, {
    "left" : "public getFormat() : ",
    "right" : "public getFormat() : ",
    "info" : "MethodDeclaration[5529-5690]:MethodDeclaration[5529-5690]"
  }, {
    "left" : "DEFAULT",
    "right" : "DEFAULT",
    "info" : "FieldDeclaration[5702-6257]:FieldDeclaration[5702-6257]"
  }, {
    "left" : "EXCEL",
    "right" : "EXCEL",
    "info" : "FieldDeclaration[6263-7510]:FieldDeclaration[6263-7510]"
  }, {
    "left" : "INFORMIX_UNLOAD",
    "right" : "INFORMIX_UNLOAD",
    "info" : "FieldDeclaration[7516-8558]:FieldDeclaration[7516-8558]"
  }, {
    "left" : "INFORMIX_UNLOAD_CSV",
    "right" : "INFORMIX_UNLOAD_CSV",
    "info" : "FieldDeclaration[8564-9579]:FieldDeclaration[8564-9579]"
  }, {
    "left" : "MYSQL",
    "right" : "MYSQL",
    "info" : "FieldDeclaration[9585-10620]:FieldDeclaration[9585-10620]"
  }, {
    "left" : "RFC4180",
    "right" : "RFC4180",
    "info" : "FieldDeclaration[10626-11089]:FieldDeclaration[10626-11089]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[11095-11143]:FieldDeclaration[11095-11143]"
  }, {
    "left" : "TDF",
    "right" : "TDF",
    "info" : "FieldDeclaration[11149-11558]:FieldDeclaration[11149-11558]"
  }, {
    "left" : "private isLineBreak(c char) : boolean",
    "right" : "private isLineBreak(c char) : boolean",
    "info" : "MethodDeclaration[11564-11876]:MethodDeclaration[11564-11876]"
  }, {
    "left" : "private isLineBreak(c ) : boolean",
    "right" : "private isLineBreak(c ) : boolean",
    "info" : "MethodDeclaration[11882-12248]:MethodDeclaration[11882-12248]"
  }, {
    "left" : "public newFormat(delimiter char) : ",
    "right" : "public newFormat(delimiter char) : ",
    "info" : "MethodDeclaration[12254-13082]:MethodDeclaration[12254-13082]"
  }, {
    "left" : "public valueOf(format ) : ",
    "right" : "public valueOf(format ) : ",
    "info" : "MethodDeclaration[13088-13420]:MethodDeclaration[13088-13420]"
  }, {
    "left" : "allowMissingColumnNames",
    "right" : "allowMissingColumnNames",
    "info" : "FieldDeclaration[13426-13472]:FieldDeclaration[13426-13472]"
  }, {
    "left" : "commentMarker",
    "right" : "commentMarker",
    "info" : "FieldDeclaration[13478-13516]:FieldDeclaration[13478-13516]"
  }, {
    "left" : "delimiter",
    "right" : "delimiter",
    "info" : "FieldDeclaration[13556-13585]:FieldDeclaration[13556-13585]"
  }, {
    "left" : "escapeCharacter",
    "right" : "escapeCharacter",
    "info" : "FieldDeclaration[13591-13631]:FieldDeclaration[13591-13631]"
  }, {
    "left" : "header",
    "right" : "header",
    "info" : "FieldDeclaration[13669-13699]:FieldDeclaration[13669-13699]"
  }, {
    "left" : "headerComments",
    "right" : "headerComments",
    "info" : "FieldDeclaration[13737-13775]:FieldDeclaration[13737-13775]"
  }, {
    "left" : "ignoreEmptyLines",
    "right" : "ignoreEmptyLines",
    "info" : "FieldDeclaration[13814-13853]:FieldDeclaration[13814-13853]"
  }, {
    "left" : "ignoreHeaderCase",
    "right" : "ignoreHeaderCase",
    "info" : "FieldDeclaration[13859-13898]:FieldDeclaration[13859-13898]"
  }, {
    "left" : "ignoreSurroundingSpaces",
    "right" : "ignoreSurroundingSpaces",
    "info" : "FieldDeclaration[13939-13985]:FieldDeclaration[13939-13985]"
  }, {
    "left" : "nullString",
    "right" : "nullString",
    "info" : "FieldDeclaration[14051-14083]:FieldDeclaration[14051-14083]"
  }, {
    "left" : "quoteCharacter",
    "right" : "quoteCharacter",
    "info" : "FieldDeclaration[14130-14169]:FieldDeclaration[14130-14169]"
  }, {
    "left" : "quoteMode",
    "right" : "quoteMode",
    "info" : "FieldDeclaration[14206-14240]:FieldDeclaration[14206-14240]"
  }, {
    "left" : "recordSeparator",
    "right" : "recordSeparator",
    "info" : "FieldDeclaration[14246-14283]:FieldDeclaration[14246-14283]"
  }, {
    "left" : "skipHeaderRecord",
    "right" : "skipHeaderRecord",
    "info" : "FieldDeclaration[14304-14343]:FieldDeclaration[14304-14343]"
  }, {
    "left" : "trailingDelimiter",
    "right" : "trailingDelimiter",
    "info" : "FieldDeclaration[14349-14389]:FieldDeclaration[14349-14389]"
  }, {
    "left" : "trim",
    "right" : "trim",
    "info" : "FieldDeclaration[14395-14422]:FieldDeclaration[14395-14422]"
  }, {
    "left" : "private CSVFormat(delimiter char, quoteChar , quoteMode , commentStart , escape , ignoreSurroundingSpaces boolean, ignoreEmptyLines boolean, recordSeparator , nullString , headerComments , header , skipHeaderRecord boolean, allowMissingColumnNames boolean, ignoreHeaderCase boolean, trim boolean, trailingDelimiter boolean)",
    "right" : "private CSVFormat(delimiter char, quoteChar , quoteMode , commentStart , escape , ignoreSurroundingSpaces boolean, ignoreEmptyLines boolean, recordSeparator , nullString , headerComments , header , skipHeaderRecord boolean, allowMissingColumnNames boolean, ignoreHeaderCase boolean, trim boolean, trailingDelimiter boolean)",
    "info" : "MethodDeclaration[14428-17289]:MethodDeclaration[14428-17289]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[17295-19329]:MethodDeclaration[17295-19329]"
  }, {
    "left" : "public format() : ",
    "right" : "public format() : ",
    "info" : "MethodDeclaration[19335-19924]:MethodDeclaration[19335-19924]"
  }, {
    "left" : "public getAllowMissingColumnNames() : boolean",
    "right" : "public getAllowMissingColumnNames() : boolean",
    "info" : "MethodDeclaration[19930-20301]:MethodDeclaration[19930-20301]"
  }, {
    "left" : "public getCommentMarker() : ",
    "right" : "public getCommentMarker() : ",
    "info" : "MethodDeclaration[20307-20530]:MethodDeclaration[20307-20530]"
  }, {
    "left" : "public getDelimiter() : char",
    "right" : "public getDelimiter() : char",
    "info" : "MethodDeclaration[20536-20739]:MethodDeclaration[20536-20739]"
  }, {
    "left" : "public getEscapeCharacter() : ",
    "right" : "public getEscapeCharacter() : ",
    "info" : "MethodDeclaration[20745-20939]:MethodDeclaration[20745-20939]"
  }, {
    "left" : "public getHeader() : ",
    "right" : "public getHeader() : ",
    "info" : "MethodDeclaration[20945-21214]:MethodDeclaration[20945-21214]"
  }, {
    "left" : "public getHeaderComments() : ",
    "right" : "public getHeaderComments() : ",
    "info" : "MethodDeclaration[21220-21485]:MethodDeclaration[21220-21485]"
  }, {
    "left" : "public getIgnoreEmptyLines() : boolean",
    "right" : "public getIgnoreEmptyLines() : boolean",
    "info" : "MethodDeclaration[21491-21816]:MethodDeclaration[21491-21816]"
  }, {
    "left" : "public getIgnoreHeaderCase() : boolean",
    "right" : "public getIgnoreHeaderCase() : boolean",
    "info" : "MethodDeclaration[21822-22115]:MethodDeclaration[21822-22115]"
  }, {
    "left" : "public getIgnoreSurroundingSpaces() : boolean",
    "right" : "public getIgnoreSurroundingSpaces() : boolean",
    "info" : "MethodDeclaration[22121-22434]:MethodDeclaration[22121-22434]"
  }, {
    "left" : "public getNullString() : ",
    "right" : "public getNullString() : ",
    "info" : "MethodDeclaration[22440-22972]:MethodDeclaration[22440-22972]"
  }, {
    "left" : "public getQuoteCharacter() : ",
    "right" : "public getQuoteCharacter() : ",
    "info" : "MethodDeclaration[22978-23223]:MethodDeclaration[22978-23223]"
  }, {
    "left" : "public getQuoteMode() : ",
    "right" : "public getQuoteMode() : ",
    "info" : "MethodDeclaration[23229-23396]:MethodDeclaration[23229-23396]"
  }, {
    "left" : "public getRecordSeparator() : ",
    "right" : "public getRecordSeparator() : ",
    "info" : "MethodDeclaration[23402-23598]:MethodDeclaration[23402-23598]"
  }, {
    "left" : "public getSkipHeaderRecord() : boolean",
    "right" : "public getSkipHeaderRecord() : boolean",
    "info" : "MethodDeclaration[23604-23804]:MethodDeclaration[23604-23804]"
  }, {
    "left" : "public getTrailingDelimiter() : boolean",
    "right" : "public getTrailingDelimiter() : boolean",
    "info" : "MethodDeclaration[23810-24034]:MethodDeclaration[23810-24034]"
  }, {
    "left" : "public getTrim() : boolean",
    "right" : "public getTrim() : boolean",
    "info" : "MethodDeclaration[24040-24236]:MethodDeclaration[24040-24236]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[24242-25294]:MethodDeclaration[24242-25294]"
  }, {
    "left" : "public isCommentMarkerSet() : boolean",
    "right" : "public isCommentMarkerSet() : boolean",
    "info" : "MethodDeclaration[25300-25647]:MethodDeclaration[25300-25647]"
  }, {
    "left" : "public isEscapeCharacterSet() : boolean",
    "right" : "public isEscapeCharacterSet() : boolean",
    "info" : "MethodDeclaration[25653-25865]:MethodDeclaration[25653-25865]"
  }, {
    "left" : "public isNullStringSet() : boolean",
    "right" : "public isNullStringSet() : boolean",
    "info" : "MethodDeclaration[25871-26078]:MethodDeclaration[25871-26078]"
  }, {
    "left" : "public isQuoteCharacterSet() : boolean",
    "right" : "public isQuoteCharacterSet() : boolean",
    "info" : "MethodDeclaration[26084-26297]:MethodDeclaration[26084-26297]"
  }, {
    "left" : "public parse(in ) : ",
    "right" : "public parse(in ) : ",
    "info" : "MethodDeclaration[26303-26752]:MethodDeclaration[26303-26752]"
  }, {
    "left" : "public print(out ) : ",
    "right" : "public print(out ) : ",
    "info" : "MethodDeclaration[26758-27182]:MethodDeclaration[26758-27182]"
  }, {
    "left" : "public print(out , charset ) : ",
    "right" : "public print(out , charset ) : ",
    "info" : "MethodDeclaration[27188-27842]:MethodDeclaration[27188-27842]"
  }, {
    "left" : "public print(out , charset ) : ",
    "right" : "public print(out , charset ) : ",
    "info" : "MethodDeclaration[27848-28356]:MethodDeclaration[27848-28356]"
  }, {
    "left" : "public print(value , out , newRecord boolean) : void",
    "right" : "public print(value , out , newRecord boolean) : void",
    "info" : "MethodDeclaration[28362-29508]:MethodDeclaration[28362-29508]"
  }, {
    "left" : "private print(object , value , offset int, len int, out , newRecord boolean) : void",
    "right" : "private print(object , value , offset int, len int, out , newRecord boolean) : void",
    "info" : "MethodDeclaration[29514-30197]:MethodDeclaration[29514-30197]"
  }, {
    "left" : "private printAndEscape(value , offset int, len int, out ) : void",
    "right" : "private printAndEscape(value , offset int, len int, out ) : void",
    "info" : "MethodDeclaration[30303-31390]:MethodDeclaration[30303-31390]"
  }, {
    "left" : "private printAndQuote(object , value , offset int, len int, out , newRecord boolean) : void",
    "right" : "private printAndQuote(object , value , offset int, len int, out , newRecord boolean) : void",
    "info" : "MethodDeclaration[31556-35644]:MethodDeclaration[31556-35650]"
  }, {
    "left" : "public println(out ) : void",
    "right" : "public println(out ) : void",
    "info" : "MethodDeclaration[35650-36094]:MethodDeclaration[35656-36100]"
  }, {
    "left" : "public printRecord(out , ) : void",
    "right" : "public printRecord(out , ) : void",
    "info" : "MethodDeclaration[36100-36951]:MethodDeclaration[36106-36957]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[36957-38550]:MethodDeclaration[36963-38556]"
  }, {
    "left" : "private toStringArray(values ...) : ",
    "right" : "private toStringArray(values ...) : ",
    "info" : "MethodDeclaration[38556-38936]:MethodDeclaration[38562-38942]"
  }, {
    "left" : "private trim(charSequence ) : ",
    "right" : "private trim(charSequence ) : ",
    "info" : "MethodDeclaration[38942-39488]:MethodDeclaration[38948-39494]"
  }, {
    "left" : "private validate() : void",
    "right" : "private validate() : void",
    "info" : "MethodDeclaration[39494-41718]:MethodDeclaration[39500-41724]"
  }, {
    "left" : "public withAllowMissingColumnNames() : ",
    "right" : "public withAllowMissingColumnNames() : ",
    "info" : "MethodDeclaration[41724-42143]:MethodDeclaration[41730-42149]"
  }, {
    "left" : "public withAllowMissingColumnNames(allowMissingColumnNames boolean) : ",
    "right" : "public withAllowMissingColumnNames(allowMissingColumnNames boolean) : ",
    "info" : "MethodDeclaration[42149-43045]:MethodDeclaration[42155-43051]"
  }, {
    "left" : "public withCommentMarker(commentMarker char) : ",
    "right" : "public withCommentMarker(commentMarker char) : ",
    "info" : "MethodDeclaration[43051-43718]:MethodDeclaration[43057-43724]"
  }, {
    "left" : "public withCommentMarker(commentMarker ) : ",
    "right" : "public withCommentMarker(commentMarker ) : ",
    "info" : "MethodDeclaration[43724-44832]:MethodDeclaration[43730-44838]"
  }, {
    "left" : "public withDelimiter(delimiter char) : ",
    "right" : "public withDelimiter(delimiter char) : ",
    "info" : "MethodDeclaration[44838-45745]:MethodDeclaration[44844-45751]"
  }, {
    "left" : "public withEscape(escape char) : ",
    "right" : "public withEscape(escape char) : ",
    "info" : "MethodDeclaration[45751-46271]:MethodDeclaration[45757-46277]"
  }, {
    "left" : "public withEscape(escape ) : ",
    "right" : "public withEscape(escape ) : ",
    "info" : "MethodDeclaration[46277-47223]:MethodDeclaration[46283-47229]"
  }, {
    "left" : "public withFirstRecordAsHeader() : ",
    "right" : "public withFirstRecordAsHeader() : ",
    "info" : "MethodDeclaration[47229-47802]:MethodDeclaration[47235-47808]"
  }, {
    "left" : "public withHeader(headerEnum ) : ",
    "right" : "public withHeader(headerEnum ) : ",
    "info" : "MethodDeclaration[47808-49010]:MethodDeclaration[47814-49016]"
  }, {
    "left" : "public withHeader(resultSet ) : ",
    "right" : "public withHeader(resultSet ) : ",
    "info" : "MethodDeclaration[49016-50102]:MethodDeclaration[49022-50108]"
  }, {
    "left" : "public withHeader(metaData ) : ",
    "right" : "public withHeader(metaData ) : ",
    "info" : "MethodDeclaration[50108-51463]:MethodDeclaration[50114-51469]"
  }, {
    "left" : "public withHeader() : ",
    "right" : "public withHeader() : ",
    "info" : "MethodDeclaration[51469-52646]:MethodDeclaration[51475-52652]"
  }, {
    "left" : "public withHeaderComments() : ",
    "right" : "public withHeaderComments() : ",
    "info" : "MethodDeclaration[52652-53701]:MethodDeclaration[52658-53707]"
  }, {
    "left" : "public withIgnoreEmptyLines() : ",
    "right" : "public withIgnoreEmptyLines() : ",
    "info" : "MethodDeclaration[53707-54114]:MethodDeclaration[53713-54120]"
  }, {
    "left" : "public withIgnoreEmptyLines(ignoreEmptyLines boolean) : ",
    "right" : "public withIgnoreEmptyLines(ignoreEmptyLines boolean) : ",
    "info" : "MethodDeclaration[54120-54973]:MethodDeclaration[54126-54979]"
  }, {
    "left" : "public withIgnoreHeaderCase() : ",
    "right" : "public withIgnoreHeaderCase() : ",
    "info" : "MethodDeclaration[54979-55321]:MethodDeclaration[54985-55327]"
  }, {
    "left" : "public withIgnoreHeaderCase(ignoreHeaderCase boolean) : ",
    "right" : "public withIgnoreHeaderCase(ignoreHeaderCase boolean) : ",
    "info" : "MethodDeclaration[55327-56124]:MethodDeclaration[55333-56130]"
  }, {
    "left" : "public withIgnoreSurroundingSpaces() : ",
    "right" : "public withIgnoreSurroundingSpaces() : ",
    "info" : "MethodDeclaration[56130-56526]:MethodDeclaration[56136-56532]"
  }, {
    "left" : "public withIgnoreSurroundingSpaces(ignoreSurroundingSpaces boolean) : ",
    "right" : "public withIgnoreSurroundingSpaces(ignoreSurroundingSpaces boolean) : ",
    "info" : "MethodDeclaration[56532-57344]:MethodDeclaration[56538-57350]"
  }, {
    "left" : "public withNullString(nullString ) : ",
    "right" : "public withNullString(nullString ) : ",
    "info" : "MethodDeclaration[57350-58377]:MethodDeclaration[57356-58383]"
  }, {
    "left" : "public withQuote(quoteChar char) : ",
    "right" : "public withQuote(quoteChar char) : ",
    "info" : "MethodDeclaration[58383-58896]:MethodDeclaration[58389-58902]"
  }, {
    "left" : "public withQuote(quoteChar ) : ",
    "right" : "public withQuote(quoteChar ) : ",
    "info" : "MethodDeclaration[58902-59838]:MethodDeclaration[58908-59844]"
  }, {
    "left" : "public withQuoteMode(quoteModePolicy ) : ",
    "right" : "public withQuoteMode(quoteModePolicy ) : ",
    "info" : "MethodDeclaration[59844-60548]:MethodDeclaration[59850-60554]"
  }, {
    "left" : "public withRecordSeparator(recordSeparator char) : ",
    "right" : "public withRecordSeparator(recordSeparator char) : ",
    "info" : "MethodDeclaration[60554-61233]:MethodDeclaration[60560-61239]"
  }, {
    "left" : "public withRecordSeparator(recordSeparator ) : ",
    "right" : "public withRecordSeparator(recordSeparator ) : ",
    "info" : "MethodDeclaration[61239-62266]:MethodDeclaration[61245-62272]"
  }, {
    "left" : "public withSkipHeaderRecord() : ",
    "right" : "public withSkipHeaderRecord() : ",
    "info" : "MethodDeclaration[62272-62684]:MethodDeclaration[62278-62690]"
  }, {
    "left" : "public withSkipHeaderRecord(skipHeaderRecord boolean) : ",
    "right" : "public withSkipHeaderRecord(skipHeaderRecord boolean) : ",
    "info" : "MethodDeclaration[62690-63415]:MethodDeclaration[62696-63421]"
  }, {
    "left" : "public withTrailingDelimiter() : ",
    "right" : "public withTrailingDelimiter() : ",
    "info" : "MethodDeclaration[63421-63716]:MethodDeclaration[63427-63722]"
  }, {
    "left" : "public withTrailingDelimiter(trailingDelimiter boolean) : ",
    "right" : "public withTrailingDelimiter(trailingDelimiter boolean) : ",
    "info" : "MethodDeclaration[63722-64435]:MethodDeclaration[63728-64441]"
  }, {
    "left" : "public withTrim() : ",
    "right" : "public withTrim() : ",
    "info" : "MethodDeclaration[64441-64707]:MethodDeclaration[64447-64713]"
  }, {
    "left" : "public withTrim(trim boolean) : ",
    "right" : "public withTrim(trim boolean) : ",
    "info" : "MethodDeclaration[64713-65389]:MethodDeclaration[64719-65395]"
  } ],
  "mappings" : [
 {
    "left" : "Predefined",
    "right" : "Predefined",
    "info" : "SimpleName[5439-5449]:SimpleName[5439-5449]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[5450-5472]:SingleVariableDeclaration[5450-5472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5474-5519]:Block[5474-5519]"
  }, {
    "left" : "this.format = format;",
    "right" : "this.format = format;",
    "info" : "ExpressionStatement[5488-5509]:ExpressionStatement[5488-5509]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5623-5629]:Modifier[5623-5629]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[5630-5639]:SimpleType[5630-5639]"
  }, {
    "left" : "getFormat",
    "right" : "getFormat",
    "info" : "SimpleName[5640-5649]:SimpleName[5640-5649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5652-5690]:Block[5652-5690]"
  }, {
    "left" : "return format;",
    "right" : "return format;",
    "info" : "ReturnStatement[5666-5680]:ReturnStatement[5666-5680]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11785-11792]:Modifier[11785-11792]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11793-11799]:Modifier[11793-11799]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11800-11807]:PrimitiveType[11800-11807]"
  }, {
    "left" : "isLineBreak",
    "right" : "isLineBreak",
    "info" : "SimpleName[11808-11819]:SimpleName[11808-11819]"
  }, {
    "left" : "final char c",
    "right" : "final char c",
    "info" : "SingleVariableDeclaration[11820-11832]:SingleVariableDeclaration[11820-11832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11834-11876]:Block[11834-11876]"
  }, {
    "left" : "return c == LF || c == CR;",
    "right" : "return c == LF || c == CR;",
    "info" : "ReturnStatement[11844-11870]:ReturnStatement[11844-11870]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12131-12138]:Modifier[12131-12138]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12139-12145]:Modifier[12139-12145]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12146-12153]:PrimitiveType[12146-12153]"
  }, {
    "left" : "isLineBreak",
    "right" : "isLineBreak",
    "info" : "SimpleName[12154-12165]:SimpleName[12154-12165]"
  }, {
    "left" : "final Character c",
    "right" : "final Character c",
    "info" : "SingleVariableDeclaration[12166-12183]:SingleVariableDeclaration[12166-12183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12185-12248]:Block[12185-12248]"
  }, {
    "left" : "return c != null && isLineBreak(c.charValue());",
    "right" : "return c != null && isLineBreak(c.charValue());",
    "info" : "ReturnStatement[12195-12242]:ReturnStatement[12195-12242]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12865-12871]:Modifier[12865-12871]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12872-12878]:Modifier[12872-12878]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[12879-12888]:SimpleType[12879-12888]"
  }, {
    "left" : "newFormat",
    "right" : "newFormat",
    "info" : "SimpleName[12889-12898]:SimpleName[12889-12898]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[12899-12919]:SingleVariableDeclaration[12899-12919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12921-13082]:Block[12921-13082]"
  }, {
    "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n                false, false, false);",
    "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n                false, false, false);",
    "info" : "ReturnStatement[12931-13076]:ReturnStatement[12931-13076]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13295-13301]:Modifier[13295-13301]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13302-13308]:Modifier[13302-13308]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[13309-13318]:SimpleType[13309-13318]"
  }, {
    "left" : "valueOf",
    "right" : "valueOf",
    "info" : "SimpleName[13319-13326]:SimpleName[13319-13326]"
  }, {
    "left" : "final String format",
    "right" : "final String format",
    "info" : "SingleVariableDeclaration[13327-13346]:SingleVariableDeclaration[13327-13346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13348-13420]:Block[13348-13420]"
  }, {
    "left" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
    "right" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
    "info" : "ReturnStatement[13358-13414]:ReturnStatement[13358-13414]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15958-15965]:Modifier[15958-15965]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleName[15966-15975]:SimpleName[15966-15975]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[15976-15996]:SingleVariableDeclaration[15976-15996]"
  }, {
    "left" : "final Character quoteChar",
    "right" : "final Character quoteChar",
    "info" : "SingleVariableDeclaration[15998-16023]:SingleVariableDeclaration[15998-16023]"
  }, {
    "left" : "final QuoteMode quoteMode",
    "right" : "final QuoteMode quoteMode",
    "info" : "SingleVariableDeclaration[16025-16050]:SingleVariableDeclaration[16025-16050]"
  }, {
    "left" : "final Character commentStart",
    "right" : "final Character commentStart",
    "info" : "SingleVariableDeclaration[16064-16092]:SingleVariableDeclaration[16064-16092]"
  }, {
    "left" : "final Character escape",
    "right" : "final Character escape",
    "info" : "SingleVariableDeclaration[16094-16116]:SingleVariableDeclaration[16094-16116]"
  }, {
    "left" : "final boolean ignoreSurroundingSpaces",
    "right" : "final boolean ignoreSurroundingSpaces",
    "info" : "SingleVariableDeclaration[16118-16155]:SingleVariableDeclaration[16118-16155]"
  }, {
    "left" : "final boolean ignoreEmptyLines",
    "right" : "final boolean ignoreEmptyLines",
    "info" : "SingleVariableDeclaration[16169-16199]:SingleVariableDeclaration[16169-16199]"
  }, {
    "left" : "final String recordSeparator",
    "right" : "final String recordSeparator",
    "info" : "SingleVariableDeclaration[16201-16229]:SingleVariableDeclaration[16201-16229]"
  }, {
    "left" : "final String nullString",
    "right" : "final String nullString",
    "info" : "SingleVariableDeclaration[16231-16254]:SingleVariableDeclaration[16231-16254]"
  }, {
    "left" : "final Object[] headerComments",
    "right" : "final Object[] headerComments",
    "info" : "SingleVariableDeclaration[16268-16297]:SingleVariableDeclaration[16268-16297]"
  }, {
    "left" : "final String[] header",
    "right" : "final String[] header",
    "info" : "SingleVariableDeclaration[16299-16320]:SingleVariableDeclaration[16299-16320]"
  }, {
    "left" : "final boolean skipHeaderRecord",
    "right" : "final boolean skipHeaderRecord",
    "info" : "SingleVariableDeclaration[16322-16352]:SingleVariableDeclaration[16322-16352]"
  }, {
    "left" : "final boolean allowMissingColumnNames",
    "right" : "final boolean allowMissingColumnNames",
    "info" : "SingleVariableDeclaration[16366-16403]:SingleVariableDeclaration[16366-16403]"
  }, {
    "left" : "final boolean ignoreHeaderCase",
    "right" : "final boolean ignoreHeaderCase",
    "info" : "SingleVariableDeclaration[16405-16435]:SingleVariableDeclaration[16405-16435]"
  }, {
    "left" : "final boolean trim",
    "right" : "final boolean trim",
    "info" : "SingleVariableDeclaration[16437-16455]:SingleVariableDeclaration[16437-16455]"
  }, {
    "left" : "final boolean trailingDelimiter",
    "right" : "final boolean trailingDelimiter",
    "info" : "SingleVariableDeclaration[16469-16500]:SingleVariableDeclaration[16469-16500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16502-17289]:Block[16502-17289]"
  }, {
    "left" : "this.delimiter = delimiter;",
    "right" : "this.delimiter = delimiter;",
    "info" : "ExpressionStatement[16512-16539]:ExpressionStatement[16512-16539]"
  }, {
    "left" : "this.quoteCharacter = quoteChar;",
    "right" : "this.quoteCharacter = quoteChar;",
    "info" : "ExpressionStatement[16548-16580]:ExpressionStatement[16548-16580]"
  }, {
    "left" : "this.quoteMode = quoteMode;",
    "right" : "this.quoteMode = quoteMode;",
    "info" : "ExpressionStatement[16589-16616]:ExpressionStatement[16589-16616]"
  }, {
    "left" : "this.commentMarker = commentStart;",
    "right" : "this.commentMarker = commentStart;",
    "info" : "ExpressionStatement[16625-16659]:ExpressionStatement[16625-16659]"
  }, {
    "left" : "this.escapeCharacter = escape;",
    "right" : "this.escapeCharacter = escape;",
    "info" : "ExpressionStatement[16668-16698]:ExpressionStatement[16668-16698]"
  }, {
    "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
    "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
    "info" : "ExpressionStatement[16707-16762]:ExpressionStatement[16707-16762]"
  }, {
    "left" : "this.allowMissingColumnNames = allowMissingColumnNames;",
    "right" : "this.allowMissingColumnNames = allowMissingColumnNames;",
    "info" : "ExpressionStatement[16771-16826]:ExpressionStatement[16771-16826]"
  }, {
    "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
    "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
    "info" : "ExpressionStatement[16835-16876]:ExpressionStatement[16835-16876]"
  }, {
    "left" : "this.recordSeparator = recordSeparator;",
    "right" : "this.recordSeparator = recordSeparator;",
    "info" : "ExpressionStatement[16885-16924]:ExpressionStatement[16885-16924]"
  }, {
    "left" : "this.nullString = nullString;",
    "right" : "this.nullString = nullString;",
    "info" : "ExpressionStatement[16933-16962]:ExpressionStatement[16933-16962]"
  }, {
    "left" : "this.headerComments = toStringArray(headerComments);",
    "right" : "this.headerComments = toStringArray(headerComments);",
    "info" : "ExpressionStatement[16971-17023]:ExpressionStatement[16971-17023]"
  }, {
    "left" : "this.header = header == null ? null : header.clone();",
    "right" : "this.header = header == null ? null : header.clone();",
    "info" : "ExpressionStatement[17032-17085]:ExpressionStatement[17032-17085]"
  }, {
    "left" : "this.skipHeaderRecord = skipHeaderRecord;",
    "right" : "this.skipHeaderRecord = skipHeaderRecord;",
    "info" : "ExpressionStatement[17094-17135]:ExpressionStatement[17094-17135]"
  }, {
    "left" : "this.ignoreHeaderCase = ignoreHeaderCase;",
    "right" : "this.ignoreHeaderCase = ignoreHeaderCase;",
    "info" : "ExpressionStatement[17144-17185]:ExpressionStatement[17144-17185]"
  }, {
    "left" : "this.trailingDelimiter = trailingDelimiter;",
    "right" : "this.trailingDelimiter = trailingDelimiter;",
    "info" : "ExpressionStatement[17194-17237]:ExpressionStatement[17194-17237]"
  }, {
    "left" : "this.trim = trim;",
    "right" : "this.trim = trim;",
    "info" : "ExpressionStatement[17246-17263]:ExpressionStatement[17246-17263]"
  }, {
    "left" : "validate();",
    "right" : "validate();",
    "info" : "ExpressionStatement[17272-17283]:ExpressionStatement[17272-17283]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17295-17304]:MarkerAnnotation[17295-17304]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17309-17315]:Modifier[17309-17315]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17316-17323]:PrimitiveType[17316-17323]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[17324-17330]:SimpleName[17324-17330]"
  }, {
    "left" : "final Object obj",
    "right" : "final Object obj",
    "info" : "SingleVariableDeclaration[17331-17347]:SingleVariableDeclaration[17331-17347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17349-19329]:Block[17349-19329]"
  }, {
    "left" : "if (this == obj)",
    "right" : "if (this == obj)",
    "info" : "IfStatement[17359-17412]:IfStatement[17359-17412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17376-17412]:Block[17376-17412]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17390-17402]:ReturnStatement[17390-17402]"
  }, {
    "left" : "if (obj == null)",
    "right" : "if (obj == null)",
    "info" : "IfStatement[17421-17475]:IfStatement[17421-17475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17438-17475]:Block[17438-17475]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17452-17465]:ReturnStatement[17452-17465]"
  }, {
    "left" : "if (getClass() != obj.getClass())",
    "right" : "if (getClass() != obj.getClass())",
    "info" : "IfStatement[17484-17555]:IfStatement[17484-17555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17518-17555]:Block[17518-17555]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17532-17545]:ReturnStatement[17532-17545]"
  }, {
    "left" : "final CSVFormat other = (CSVFormat) obj;",
    "right" : "final CSVFormat other = (CSVFormat) obj;",
    "info" : "VariableDeclarationStatement[17565-17605]:VariableDeclarationStatement[17565-17605]"
  }, {
    "left" : "if (delimiter != other.delimiter)",
    "right" : "if (delimiter != other.delimiter)",
    "info" : "IfStatement[17614-17685]:IfStatement[17614-17685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17648-17685]:Block[17648-17685]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17662-17675]:ReturnStatement[17662-17675]"
  }, {
    "left" : "if (quoteMode != other.quoteMode)",
    "right" : "if (quoteMode != other.quoteMode)",
    "info" : "IfStatement[17694-17765]:IfStatement[17694-17765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17728-17765]:Block[17728-17765]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17742-17755]:ReturnStatement[17742-17755]"
  }, {
    "left" : "if (quoteCharacter == null)",
    "right" : "if (quoteCharacter == null)",
    "info" : "IfStatement[17774-17998]:IfStatement[17774-17998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17802-17905]:Block[17802-17905]"
  }, {
    "left" : "if (other.quoteCharacter != null)",
    "right" : "if (other.quoteCharacter != null)",
    "info" : "IfStatement[17816-17895]:IfStatement[17816-17895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17850-17895]:Block[17850-17895]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17868-17881]:ReturnStatement[17868-17881]"
  }, {
    "left" : "if (!quoteCharacter.equals(other.quoteCharacter))",
    "right" : "if (!quoteCharacter.equals(other.quoteCharacter))",
    "info" : "IfStatement[17911-17998]:IfStatement[17911-17998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17961-17998]:Block[17961-17998]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17975-17988]:ReturnStatement[17975-17988]"
  }, {
    "left" : "if (commentMarker == null)",
    "right" : "if (commentMarker == null)",
    "info" : "IfStatement[18007-18227]:IfStatement[18007-18227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18034-18136]:Block[18034-18136]"
  }, {
    "left" : "if (other.commentMarker != null)",
    "right" : "if (other.commentMarker != null)",
    "info" : "IfStatement[18048-18126]:IfStatement[18048-18126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18081-18126]:Block[18081-18126]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18099-18112]:ReturnStatement[18099-18112]"
  }, {
    "left" : "if (!commentMarker.equals(other.commentMarker))",
    "right" : "if (!commentMarker.equals(other.commentMarker))",
    "info" : "IfStatement[18142-18227]:IfStatement[18142-18227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18190-18227]:Block[18190-18227]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18204-18217]:ReturnStatement[18204-18217]"
  }, {
    "left" : "if (escapeCharacter == null)",
    "right" : "if (escapeCharacter == null)",
    "info" : "IfStatement[18236-18464]:IfStatement[18236-18464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18265-18369]:Block[18265-18369]"
  }, {
    "left" : "if (other.escapeCharacter != null)",
    "right" : "if (other.escapeCharacter != null)",
    "info" : "IfStatement[18279-18359]:IfStatement[18279-18359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18314-18359]:Block[18314-18359]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18332-18345]:ReturnStatement[18332-18345]"
  }, {
    "left" : "if (!escapeCharacter.equals(other.escapeCharacter))",
    "right" : "if (!escapeCharacter.equals(other.escapeCharacter))",
    "info" : "IfStatement[18375-18464]:IfStatement[18375-18464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18427-18464]:Block[18427-18464]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18441-18454]:ReturnStatement[18441-18454]"
  }, {
    "left" : "if (nullString == null)",
    "right" : "if (nullString == null)",
    "info" : "IfStatement[18473-18681]:IfStatement[18473-18681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18497-18596]:Block[18497-18596]"
  }, {
    "left" : "if (other.nullString != null)",
    "right" : "if (other.nullString != null)",
    "info" : "IfStatement[18511-18586]:IfStatement[18511-18586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18541-18586]:Block[18541-18586]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18559-18572]:ReturnStatement[18559-18572]"
  }, {
    "left" : "if (!nullString.equals(other.nullString))",
    "right" : "if (!nullString.equals(other.nullString))",
    "info" : "IfStatement[18602-18681]:IfStatement[18602-18681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18644-18681]:Block[18644-18681]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18658-18671]:ReturnStatement[18658-18671]"
  }, {
    "left" : "if (!Arrays.equals(header, other.header))",
    "right" : "if (!Arrays.equals(header, other.header))",
    "info" : "IfStatement[18690-18769]:IfStatement[18690-18769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18732-18769]:Block[18732-18769]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18746-18759]:ReturnStatement[18746-18759]"
  }, {
    "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
    "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
    "info" : "IfStatement[18778-18877]:IfStatement[18778-18877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18840-18877]:Block[18840-18877]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18854-18867]:ReturnStatement[18854-18867]"
  }, {
    "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
    "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
    "info" : "IfStatement[18886-18971]:IfStatement[18886-18971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18934-18971]:Block[18934-18971]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18948-18961]:ReturnStatement[18948-18961]"
  }, {
    "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
    "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
    "info" : "IfStatement[18980-19065]:IfStatement[18980-19065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19028-19065]:Block[19028-19065]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19042-19055]:ReturnStatement[19042-19055]"
  }, {
    "left" : "if (recordSeparator == null)",
    "right" : "if (recordSeparator == null)",
    "info" : "IfStatement[19074-19302]:IfStatement[19074-19302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19103-19207]:Block[19103-19207]"
  }, {
    "left" : "if (other.recordSeparator != null)",
    "right" : "if (other.recordSeparator != null)",
    "info" : "IfStatement[19117-19197]:IfStatement[19117-19197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19152-19197]:Block[19152-19197]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19170-19183]:ReturnStatement[19170-19183]"
  }, {
    "left" : "if (!recordSeparator.equals(other.recordSeparator))",
    "right" : "if (!recordSeparator.equals(other.recordSeparator))",
    "info" : "IfStatement[19213-19302]:IfStatement[19213-19302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19265-19302]:Block[19265-19302]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19279-19292]:ReturnStatement[19279-19292]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19311-19323]:ReturnStatement[19311-19323]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19491-19497]:Modifier[19491-19497]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[19498-19504]:SimpleType[19498-19504]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[19505-19511]:SimpleName[19505-19511]"
  }, {
    "left" : "final Object... values",
    "right" : "final Object... values",
    "info" : "SingleVariableDeclaration[19512-19534]:SingleVariableDeclaration[19512-19534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19536-19924]:Block[19536-19924]"
  }, {
    "left" : "final StringWriter out = new StringWriter();",
    "right" : "final StringWriter out = new StringWriter();",
    "info" : "VariableDeclarationStatement[19546-19590]:VariableDeclarationStatement[19546-19590]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[19599-19918]:TryStatement[19599-19918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19661-19758]:Block[19661-19758]"
  }, {
    "left" : "csvPrinter.printRecord(values);",
    "right" : "csvPrinter.printRecord(values);",
    "info" : "ExpressionStatement[19675-19706]:ExpressionStatement[19675-19706]"
  }, {
    "left" : "return out.toString().trim();",
    "right" : "return out.toString().trim();",
    "info" : "ReturnStatement[19719-19748]:ReturnStatement[19719-19748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19787-19918]:Block[19787-19918]"
  }, {
    "left" : "throw new IllegalStateException(e);",
    "right" : "throw new IllegalStateException(e);",
    "info" : "ThrowStatement[19873-19908]:ThrowStatement[19873-19908]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20210-20216]:Modifier[20210-20216]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20217-20224]:PrimitiveType[20217-20224]"
  }, {
    "left" : "getAllowMissingColumnNames",
    "right" : "getAllowMissingColumnNames",
    "info" : "SimpleName[20225-20251]:SimpleName[20225-20251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20254-20301]:Block[20254-20301]"
  }, {
    "left" : "return allowMissingColumnNames;",
    "right" : "return allowMissingColumnNames;",
    "info" : "ReturnStatement[20264-20295]:ReturnStatement[20264-20295]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20457-20463]:Modifier[20457-20463]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[20464-20473]:SimpleType[20464-20473]"
  }, {
    "left" : "getCommentMarker",
    "right" : "getCommentMarker",
    "info" : "SimpleName[20474-20490]:SimpleName[20474-20490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20493-20530]:Block[20493-20530]"
  }, {
    "left" : "return commentMarker;",
    "right" : "return commentMarker;",
    "info" : "ReturnStatement[20503-20524]:ReturnStatement[20503-20524]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20679-20685]:Modifier[20679-20685]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[20686-20690]:PrimitiveType[20686-20690]"
  }, {
    "left" : "getDelimiter",
    "right" : "getDelimiter",
    "info" : "SimpleName[20691-20703]:SimpleName[20691-20703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20706-20739]:Block[20706-20739]"
  }, {
    "left" : "return delimiter;",
    "right" : "return delimiter;",
    "info" : "ReturnStatement[20716-20733]:ReturnStatement[20716-20733]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20862-20868]:Modifier[20862-20868]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[20869-20878]:SimpleType[20869-20878]"
  }, {
    "left" : "getEscapeCharacter",
    "right" : "getEscapeCharacter",
    "info" : "SimpleName[20879-20897]:SimpleName[20879-20897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20900-20939]:Block[20900-20939]"
  }, {
    "left" : "return escapeCharacter;",
    "right" : "return escapeCharacter;",
    "info" : "ReturnStatement[20910-20933]:ReturnStatement[20910-20933]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21124-21130]:Modifier[21124-21130]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[21131-21139]:ArrayType[21131-21139]"
  }, {
    "left" : "getHeader",
    "right" : "getHeader",
    "info" : "SimpleName[21140-21149]:SimpleName[21140-21149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21152-21214]:Block[21152-21214]"
  }, {
    "left" : "return header != null ? header.clone() : null;",
    "right" : "return header != null ? header.clone() : null;",
    "info" : "ReturnStatement[21162-21208]:ReturnStatement[21162-21208]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21371-21377]:Modifier[21371-21377]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[21378-21386]:ArrayType[21378-21386]"
  }, {
    "left" : "getHeaderComments",
    "right" : "getHeaderComments",
    "info" : "SimpleName[21387-21404]:SimpleName[21387-21404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21407-21485]:Block[21407-21485]"
  }, {
    "left" : "return headerComments != null ? headerComments.clone() : null;",
    "right" : "return headerComments != null ? headerComments.clone() : null;",
    "info" : "ReturnStatement[21417-21479]:ReturnStatement[21417-21479]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21739-21745]:Modifier[21739-21745]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[21746-21753]:PrimitiveType[21746-21753]"
  }, {
    "left" : "getIgnoreEmptyLines",
    "right" : "getIgnoreEmptyLines",
    "info" : "SimpleName[21754-21773]:SimpleName[21754-21773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21776-21816]:Block[21776-21816]"
  }, {
    "left" : "return ignoreEmptyLines;",
    "right" : "return ignoreEmptyLines;",
    "info" : "ReturnStatement[21786-21810]:ReturnStatement[21786-21810]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22038-22044]:Modifier[22038-22044]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[22045-22052]:PrimitiveType[22045-22052]"
  }, {
    "left" : "getIgnoreHeaderCase",
    "right" : "getIgnoreHeaderCase",
    "info" : "SimpleName[22053-22072]:SimpleName[22053-22072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22075-22115]:Block[22075-22115]"
  }, {
    "left" : "return ignoreHeaderCase;",
    "right" : "return ignoreHeaderCase;",
    "info" : "ReturnStatement[22085-22109]:ReturnStatement[22085-22109]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22343-22349]:Modifier[22343-22349]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[22350-22357]:PrimitiveType[22350-22357]"
  }, {
    "left" : "getIgnoreSurroundingSpaces",
    "right" : "getIgnoreSurroundingSpaces",
    "info" : "SimpleName[22358-22384]:SimpleName[22358-22384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22387-22434]:Block[22387-22434]"
  }, {
    "left" : "return ignoreSurroundingSpaces;",
    "right" : "return ignoreSurroundingSpaces;",
    "info" : "ReturnStatement[22397-22428]:ReturnStatement[22397-22428]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22908-22914]:Modifier[22908-22914]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[22915-22921]:SimpleType[22915-22921]"
  }, {
    "left" : "getNullString",
    "right" : "getNullString",
    "info" : "SimpleName[22922-22935]:SimpleName[22922-22935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22938-22972]:Block[22938-22972]"
  }, {
    "left" : "return nullString;",
    "right" : "return nullString;",
    "info" : "ReturnStatement[22948-22966]:ReturnStatement[22948-22966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23148-23154]:Modifier[23148-23154]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[23155-23164]:SimpleType[23155-23164]"
  }, {
    "left" : "getQuoteCharacter",
    "right" : "getQuoteCharacter",
    "info" : "SimpleName[23165-23182]:SimpleName[23165-23182]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23185-23223]:Block[23185-23223]"
  }, {
    "left" : "return quoteCharacter;",
    "right" : "return quoteCharacter;",
    "info" : "ReturnStatement[23195-23217]:ReturnStatement[23195-23217]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23331-23337]:Modifier[23331-23337]"
  }, {
    "left" : "QuoteMode",
    "right" : "QuoteMode",
    "info" : "SimpleType[23338-23347]:SimpleType[23338-23347]"
  }, {
    "left" : "getQuoteMode",
    "right" : "getQuoteMode",
    "info" : "SimpleName[23348-23360]:SimpleName[23348-23360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23363-23396]:Block[23363-23396]"
  }, {
    "left" : "return quoteMode;",
    "right" : "return quoteMode;",
    "info" : "ReturnStatement[23373-23390]:ReturnStatement[23373-23390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23524-23530]:Modifier[23524-23530]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[23531-23537]:SimpleType[23531-23537]"
  }, {
    "left" : "getRecordSeparator",
    "right" : "getRecordSeparator",
    "info" : "SimpleName[23538-23556]:SimpleName[23538-23556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23559-23598]:Block[23559-23598]"
  }, {
    "left" : "return recordSeparator;",
    "right" : "return recordSeparator;",
    "info" : "ReturnStatement[23569-23592]:ReturnStatement[23569-23592]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23727-23733]:Modifier[23727-23733]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23734-23741]:PrimitiveType[23734-23741]"
  }, {
    "left" : "getSkipHeaderRecord",
    "right" : "getSkipHeaderRecord",
    "info" : "SimpleName[23742-23761]:SimpleName[23742-23761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23764-23804]:Block[23764-23804]"
  }, {
    "left" : "return skipHeaderRecord;",
    "right" : "return skipHeaderRecord;",
    "info" : "ReturnStatement[23774-23798]:ReturnStatement[23774-23798]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23955-23961]:Modifier[23955-23961]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23962-23969]:PrimitiveType[23962-23969]"
  }, {
    "left" : "getTrailingDelimiter",
    "right" : "getTrailingDelimiter",
    "info" : "SimpleName[23970-23990]:SimpleName[23970-23990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23993-24034]:Block[23993-24034]"
  }, {
    "left" : "return trailingDelimiter;",
    "right" : "return trailingDelimiter;",
    "info" : "ReturnStatement[24003-24028]:ReturnStatement[24003-24028]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24183-24189]:Modifier[24183-24189]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24190-24197]:PrimitiveType[24190-24197]"
  }, {
    "left" : "getTrim",
    "right" : "getTrim",
    "info" : "SimpleName[24198-24205]:SimpleName[24198-24205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24208-24236]:Block[24208-24236]"
  }, {
    "left" : "return trim;",
    "right" : "return trim;",
    "info" : "ReturnStatement[24218-24230]:ReturnStatement[24218-24230]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24242-24251]:MarkerAnnotation[24242-24251]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24256-24262]:Modifier[24256-24262]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[24263-24266]:PrimitiveType[24263-24266]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[24267-24275]:SimpleName[24267-24275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24278-25294]:Block[24278-25294]"
  }, {
    "left" : "final int prime = 31;",
    "right" : "final int prime = 31;",
    "info" : "VariableDeclarationStatement[24288-24309]:VariableDeclarationStatement[24288-24309]"
  }, {
    "left" : "int result = 1;",
    "right" : "int result = 1;",
    "info" : "VariableDeclarationStatement[24318-24333]:VariableDeclarationStatement[24318-24333]"
  }, {
    "left" : "result = prime * result + delimiter;",
    "right" : "result = prime * result + delimiter;",
    "info" : "ExpressionStatement[24343-24379]:ExpressionStatement[24343-24379]"
  }, {
    "left" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
    "right" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
    "info" : "ExpressionStatement[24388-24463]:ExpressionStatement[24388-24463]"
  }, {
    "left" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
    "right" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
    "info" : "ExpressionStatement[24472-24557]:ExpressionStatement[24472-24557]"
  }, {
    "left" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
    "right" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
    "info" : "ExpressionStatement[24566-24649]:ExpressionStatement[24566-24649]"
  }, {
    "left" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
    "right" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
    "info" : "ExpressionStatement[24658-24745]:ExpressionStatement[24658-24745]"
  }, {
    "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
    "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
    "info" : "ExpressionStatement[24754-24831]:ExpressionStatement[24754-24831]"
  }, {
    "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
    "info" : "ExpressionStatement[24840-24906]:ExpressionStatement[24840-24906]"
  }, {
    "left" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
    "info" : "ExpressionStatement[24915-24974]:ExpressionStatement[24915-24974]"
  }, {
    "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
    "info" : "ExpressionStatement[24983-25042]:ExpressionStatement[24983-25042]"
  }, {
    "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
    "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
    "info" : "ExpressionStatement[25051-25110]:ExpressionStatement[25051-25110]"
  }, {
    "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
    "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
    "info" : "ExpressionStatement[25119-25206]:ExpressionStatement[25119-25206]"
  }, {
    "left" : "result = prime * result + Arrays.hashCode(header);",
    "right" : "result = prime * result + Arrays.hashCode(header);",
    "info" : "ExpressionStatement[25215-25265]:ExpressionStatement[25215-25265]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[25274-25288]:ReturnStatement[25274-25288]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25566-25572]:Modifier[25566-25572]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25573-25580]:PrimitiveType[25573-25580]"
  }, {
    "left" : "isCommentMarkerSet",
    "right" : "isCommentMarkerSet",
    "info" : "SimpleName[25581-25599]:SimpleName[25581-25599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25602-25647]:Block[25602-25647]"
  }, {
    "left" : "return commentMarker != null;",
    "right" : "return commentMarker != null;",
    "info" : "ReturnStatement[25612-25641]:ReturnStatement[25612-25641]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25780-25786]:Modifier[25780-25786]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25787-25794]:PrimitiveType[25787-25794]"
  }, {
    "left" : "isEscapeCharacterSet",
    "right" : "isEscapeCharacterSet",
    "info" : "SimpleName[25795-25815]:SimpleName[25795-25815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25818-25865]:Block[25818-25865]"
  }, {
    "left" : "return escapeCharacter != null;",
    "right" : "return escapeCharacter != null;",
    "info" : "ReturnStatement[25828-25859]:ReturnStatement[25828-25859]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26003-26009]:Modifier[26003-26009]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26010-26017]:PrimitiveType[26010-26017]"
  }, {
    "left" : "isNullStringSet",
    "right" : "isNullStringSet",
    "info" : "SimpleName[26018-26033]:SimpleName[26018-26033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26036-26078]:Block[26036-26078]"
  }, {
    "left" : "return nullString != null;",
    "right" : "return nullString != null;",
    "info" : "ReturnStatement[26046-26072]:ReturnStatement[26046-26072]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26214-26220]:Modifier[26214-26220]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26221-26228]:PrimitiveType[26221-26228]"
  }, {
    "left" : "isQuoteCharacterSet",
    "right" : "isQuoteCharacterSet",
    "info" : "SimpleName[26229-26248]:SimpleName[26229-26248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26251-26297]:Block[26251-26297]"
  }, {
    "left" : "return quoteCharacter != null;",
    "right" : "return quoteCharacter != null;",
    "info" : "ReturnStatement[26261-26291]:ReturnStatement[26261-26291]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26646-26652]:Modifier[26646-26652]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[26653-26662]:SimpleType[26653-26662]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[26663-26668]:SimpleName[26663-26668]"
  }, {
    "left" : "final Reader in",
    "right" : "final Reader in",
    "info" : "SingleVariableDeclaration[26669-26684]:SingleVariableDeclaration[26669-26684]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[26693-26704]:SimpleType[26693-26704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26705-26752]:Block[26705-26752]"
  }, {
    "left" : "return new CSVParser(in, this);",
    "right" : "return new CSVParser(in, this);",
    "info" : "ReturnStatement[26715-26746]:ReturnStatement[26715-26746]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27068-27074]:Modifier[27068-27074]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[27075-27085]:SimpleType[27075-27085]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[27086-27091]:SimpleName[27086-27091]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[27092-27112]:SingleVariableDeclaration[27092-27112]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27121-27132]:SimpleType[27121-27132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27133-27182]:Block[27133-27182]"
  }, {
    "left" : "return new CSVPrinter(out, this);",
    "right" : "return new CSVPrinter(out, this);",
    "info" : "ReturnStatement[27143-27176]:ReturnStatement[27143-27176]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[27567-27596]:SingleMemberAnnotation[27567-27596]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27601-27607]:Modifier[27601-27607]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[27608-27618]:SimpleType[27608-27618]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[27619-27624]:SimpleName[27619-27624]"
  }, {
    "left" : "final File out",
    "right" : "final File out",
    "info" : "SingleVariableDeclaration[27625-27639]:SingleVariableDeclaration[27625-27639]"
  }, {
    "left" : "Charset charset",
    "right" : "Charset charset",
    "info" : "SingleVariableDeclaration[27641-27656]:SingleVariableDeclaration[27641-27656]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27665-27676]:SimpleType[27665-27676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27677-27842]:Block[27677-27842]"
  }, {
    "left" : "return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
    "right" : "return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
    "info" : "ReturnStatement[27748-27836]:ReturnStatement[27748-27836]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28228-28234]:Modifier[28228-28234]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[28235-28245]:SimpleType[28235-28245]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[28246-28251]:SimpleName[28246-28251]"
  }, {
    "left" : "final Path out",
    "right" : "final Path out",
    "info" : "SingleVariableDeclaration[28252-28266]:SingleVariableDeclaration[28252-28266]"
  }, {
    "left" : "Charset charset",
    "right" : "Charset charset",
    "info" : "SingleVariableDeclaration[28268-28283]:SingleVariableDeclaration[28268-28283]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[28292-28303]:SimpleType[28292-28303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28304-28356]:Block[28304-28356]"
  }, {
    "left" : "return print(out.toFile(), charset);",
    "right" : "return print(out.toFile(), charset);",
    "info" : "ReturnStatement[28314-28350]:ReturnStatement[28314-28350]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28845-28851]:Modifier[28845-28851]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28852-28856]:PrimitiveType[28852-28856]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[28857-28862]:SimpleName[28857-28862]"
  }, {
    "left" : "final Object value",
    "right" : "final Object value",
    "info" : "SingleVariableDeclaration[28863-28881]:SingleVariableDeclaration[28863-28881]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[28883-28903]:SingleVariableDeclaration[28883-28903]"
  }, {
    "left" : "final boolean newRecord",
    "right" : "final boolean newRecord",
    "info" : "SingleVariableDeclaration[28905-28928]:SingleVariableDeclaration[28905-28928]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[28937-28948]:SimpleType[28937-28948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28949-29508]:Block[28949-29508]"
  }, {
    "left" : "CharSequence charSequence;",
    "right" : "CharSequence charSequence;",
    "info" : "VariableDeclarationStatement[29089-29115]:VariableDeclarationStatement[29089-29115]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[29124-29349]:IfStatement[29124-29349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29143-29232]:Block[29143-29232]"
  }, {
    "left" : "charSequence = nullString == null ? Constants.EMPTY : nullString;",
    "right" : "charSequence = nullString == null ? Constants.EMPTY : nullString;",
    "info" : "ExpressionStatement[29157-29222]:ExpressionStatement[29157-29222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29238-29349]:Block[29238-29349]"
  }, {
    "left" : "charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
    "right" : "charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
    "info" : "ExpressionStatement[29252-29339]:ExpressionStatement[29252-29339]"
  }, {
    "left" : "charSequence = getTrim() ? trim(charSequence) : charSequence;",
    "right" : "charSequence = getTrim() ? trim(charSequence) : charSequence;",
    "info" : "ExpressionStatement[29358-29419]:ExpressionStatement[29358-29419]"
  }, {
    "left" : "this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
    "right" : "this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
    "info" : "ExpressionStatement[29428-29502]:ExpressionStatement[29428-29502]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29514-29521]:Modifier[29514-29521]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29522-29526]:PrimitiveType[29522-29526]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[29527-29532]:SimpleName[29527-29532]"
  }, {
    "left" : "final Object object",
    "right" : "final Object object",
    "info" : "SingleVariableDeclaration[29533-29552]:SingleVariableDeclaration[29533-29552]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[29554-29578]:SingleVariableDeclaration[29554-29578]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[29580-29596]:SingleVariableDeclaration[29580-29596]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[29598-29611]:SingleVariableDeclaration[29598-29611]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[29625-29645]:SingleVariableDeclaration[29625-29645]"
  }, {
    "left" : "final boolean newRecord",
    "right" : "final boolean newRecord",
    "info" : "SingleVariableDeclaration[29647-29670]:SingleVariableDeclaration[29647-29670]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[29679-29690]:SimpleType[29679-29690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29691-30197]:Block[29691-30197]"
  }, {
    "left" : "if (!newRecord)",
    "right" : "if (!newRecord)",
    "info" : "IfStatement[29701-29768]:IfStatement[29701-29768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29717-29768]:Block[29717-29768]"
  }, {
    "left" : "out.append(getDelimiter());",
    "right" : "out.append(getDelimiter());",
    "info" : "ExpressionStatement[29731-29758]:ExpressionStatement[29731-29758]"
  }, {
    "left" : "if (object == null)",
    "right" : "if (object == null)",
    "info" : "IfStatement[29777-30191]:IfStatement[29777-30191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29797-29839]:Block[29797-29839]"
  }, {
    "left" : "out.append(value);",
    "right" : "out.append(value);",
    "info" : "ExpressionStatement[29811-29829]:ExpressionStatement[29811-29829]"
  }, {
    "left" : "if (isQuoteCharacterSet())",
    "right" : "if (isQuoteCharacterSet())",
    "info" : "IfStatement[29845-30191]:IfStatement[29845-30191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29872-30023]:Block[29872-30023]"
  }, {
    "left" : "printAndQuote(object, value, offset, len, out, newRecord);",
    "right" : "printAndQuote(object, value, offset, len, out, newRecord);",
    "info" : "ExpressionStatement[29955-30013]:ExpressionStatement[29955-30013]"
  }, {
    "left" : "if (isEscapeCharacterSet())",
    "right" : "if (isEscapeCharacterSet())",
    "info" : "IfStatement[30029-30191]:IfStatement[30029-30191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30057-30121]:Block[30057-30121]"
  }, {
    "left" : "printAndEscape(value, offset, len, out);",
    "right" : "printAndEscape(value, offset, len, out);",
    "info" : "ExpressionStatement[30071-30111]:ExpressionStatement[30071-30111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30127-30191]:Block[30127-30191]"
  }, {
    "left" : "out.append(value, offset, offset + len);",
    "right" : "out.append(value, offset, offset + len);",
    "info" : "ExpressionStatement[30141-30181]:ExpressionStatement[30141-30181]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30303-30310]:Modifier[30303-30310]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30311-30315]:PrimitiveType[30311-30315]"
  }, {
    "left" : "printAndEscape",
    "right" : "printAndEscape",
    "info" : "SimpleName[30316-30330]:SimpleName[30316-30330]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[30331-30355]:SingleVariableDeclaration[30331-30355]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[30357-30373]:SingleVariableDeclaration[30357-30373]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[30375-30388]:SingleVariableDeclaration[30375-30388]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[30390-30410]:SingleVariableDeclaration[30390-30410]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[30431-30442]:SimpleType[30431-30442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30443-31390]:Block[30443-31390]"
  }, {
    "left" : "int start = offset;",
    "right" : "int start = offset;",
    "info" : "VariableDeclarationStatement[30453-30472]:VariableDeclarationStatement[30453-30472]"
  }, {
    "left" : "int pos = offset;",
    "right" : "int pos = offset;",
    "info" : "VariableDeclarationStatement[30481-30498]:VariableDeclarationStatement[30481-30498]"
  }, {
    "left" : "final int end = offset + len;",
    "right" : "final int end = offset + len;",
    "info" : "VariableDeclarationStatement[30507-30536]:VariableDeclarationStatement[30507-30536]"
  }, {
    "left" : "final char delim = getDelimiter();",
    "right" : "final char delim = getDelimiter();",
    "info" : "VariableDeclarationStatement[30546-30580]:VariableDeclarationStatement[30546-30580]"
  }, {
    "left" : "final char escape = getEscapeCharacter().charValue();",
    "right" : "final char escape = getEscapeCharacter().charValue();",
    "info" : "VariableDeclarationStatement[30589-30642]:VariableDeclarationStatement[30589-30642]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[30652-31273]:WhileStatement[30652-31273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30670-31273]:Block[30670-31273]"
  }, {
    "left" : "char c = value.charAt(pos);",
    "right" : "char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[30684-30711]:VariableDeclarationStatement[30684-30711]"
  }, {
    "left" : "if (c == CR || c == LF || c == delim || c == escape)",
    "right" : "if (c == CR || c == LF || c == delim || c == escape)",
    "info" : "IfStatement[30724-31243]:IfStatement[30724-31243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30777-31243]:Block[30777-31243]"
  }, {
    "left" : "if (pos > start)",
    "right" : "if (pos > start)",
    "info" : "IfStatement[30851-30938]:IfStatement[30851-30938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30868-30938]:Block[30868-30938]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[30890-30920]:ExpressionStatement[30890-30920]"
  }, {
    "left" : "if (c == LF)",
    "right" : "if (c == LF)",
    "info" : "IfStatement[30955-31083]:IfStatement[30955-31083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30968-31016]:Block[30968-31016]"
  }, {
    "left" : "c = 'n';",
    "right" : "c = 'n';",
    "info" : "ExpressionStatement[30990-30998]:ExpressionStatement[30990-30998]"
  }, {
    "left" : "if (c == CR)",
    "right" : "if (c == CR)",
    "info" : "IfStatement[31022-31083]:IfStatement[31022-31083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31035-31083]:Block[31035-31083]"
  }, {
    "left" : "c = 'r';",
    "right" : "c = 'r';",
    "info" : "ExpressionStatement[31057-31065]:ExpressionStatement[31057-31065]"
  }, {
    "left" : "out.append(escape);",
    "right" : "out.append(escape);",
    "info" : "ExpressionStatement[31101-31120]:ExpressionStatement[31101-31120]"
  }, {
    "left" : "out.append(c);",
    "right" : "out.append(c);",
    "info" : "ExpressionStatement[31137-31151]:ExpressionStatement[31137-31151]"
  }, {
    "left" : "start = pos + 1;",
    "right" : "start = pos + 1;",
    "info" : "ExpressionStatement[31169-31185]:ExpressionStatement[31169-31185]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[31257-31263]:ExpressionStatement[31257-31263]"
  }, {
    "left" : "if (pos > start)",
    "right" : "if (pos > start)",
    "info" : "IfStatement[31313-31384]:IfStatement[31313-31384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31330-31384]:Block[31330-31384]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[31344-31374]:ExpressionStatement[31344-31374]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31556-31563]:Modifier[31556-31563]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31564-31568]:PrimitiveType[31564-31568]"
  }, {
    "left" : "printAndQuote",
    "right" : "printAndQuote",
    "info" : "SimpleName[31569-31582]:SimpleName[31569-31582]"
  }, {
    "left" : "final Object object",
    "right" : "final Object object",
    "info" : "SingleVariableDeclaration[31583-31602]:SingleVariableDeclaration[31583-31602]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[31604-31628]:SingleVariableDeclaration[31604-31628]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[31630-31646]:SingleVariableDeclaration[31630-31646]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[31648-31661]:SingleVariableDeclaration[31648-31661]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[31675-31695]:SingleVariableDeclaration[31675-31695]"
  }, {
    "left" : "final boolean newRecord",
    "right" : "final boolean newRecord",
    "info" : "SingleVariableDeclaration[31697-31720]:SingleVariableDeclaration[31697-31720]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[31729-31740]:SimpleType[31729-31740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31741-35644]:Block[31741-35650]"
  }, {
    "left" : "boolean quote = false;",
    "right" : "boolean quote = false;",
    "info" : "VariableDeclarationStatement[31751-31773]:VariableDeclarationStatement[31751-31773]"
  }, {
    "left" : "int start = offset;",
    "right" : "int start = offset;",
    "info" : "VariableDeclarationStatement[31782-31801]:VariableDeclarationStatement[31782-31801]"
  }, {
    "left" : "int pos = offset;",
    "right" : "int pos = offset;",
    "info" : "VariableDeclarationStatement[31810-31827]:VariableDeclarationStatement[31810-31827]"
  }, {
    "left" : "final int end = offset + len;",
    "right" : "final int end = offset + len;",
    "info" : "VariableDeclarationStatement[31836-31865]:VariableDeclarationStatement[31836-31865]"
  }, {
    "left" : "final char delimChar = getDelimiter();",
    "right" : "final char delimChar = getDelimiter();",
    "info" : "VariableDeclarationStatement[31875-31913]:VariableDeclarationStatement[31875-31913]"
  }, {
    "left" : "final char quoteChar = getQuoteCharacter().charValue();",
    "right" : "final char quoteChar = getQuoteCharacter().charValue();",
    "info" : "VariableDeclarationStatement[31922-31977]:VariableDeclarationStatement[31922-31977]"
  }, {
    "left" : "QuoteMode quoteModePolicy = getQuoteMode();",
    "right" : "QuoteMode quoteModePolicy = getQuoteMode();",
    "info" : "VariableDeclarationStatement[31987-32030]:VariableDeclarationStatement[31987-32030]"
  }, {
    "left" : "if (quoteModePolicy == null)",
    "right" : "if (quoteModePolicy == null)",
    "info" : "IfStatement[32039-32128]:IfStatement[32039-32128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32068-32128]:Block[32068-32128]"
  }, {
    "left" : "quoteModePolicy = QuoteMode.MINIMAL;",
    "right" : "quoteModePolicy = QuoteMode.MINIMAL;",
    "info" : "ExpressionStatement[32082-32118]:ExpressionStatement[32082-32118]"
  }, {
    "left" : "switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\n                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                    quote = true;\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }",
    "right" : "switch (quoteModePolicy) {\n        case ALL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\n                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                    quote = true;\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }",
    "info" : "SwitchStatement[32137-34612]:SwitchStatement[32137-34618]"
  }, {
    "left" : "case ALL:",
    "right" : "case ALL:",
    "info" : "SwitchCase[32172-32181]:SwitchCase[32172-32181]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[32194-32207]:ExpressionStatement[32194-32207]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32220-32226]:BreakStatement[32220-32226]"
  }, {
    "left" : "case NON_NUMERIC:",
    "right" : "case NON_NUMERIC:",
    "info" : "SwitchCase[32235-32252]:SwitchCase[32235-32252]"
  }, {
    "left" : "quote = !(object instanceof Number);",
    "right" : "quote = !(object instanceof Number);",
    "info" : "ExpressionStatement[32265-32301]:ExpressionStatement[32265-32301]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32314-32320]:BreakStatement[32314-32320]"
  }, {
    "left" : "case NONE:",
    "right" : "case NONE:",
    "info" : "SwitchCase[32329-32339]:SwitchCase[32329-32339]"
  }, {
    "left" : "printAndEscape(value, offset, len, out);",
    "right" : "printAndEscape(value, offset, len, out);",
    "info" : "ExpressionStatement[32398-32438]:ExpressionStatement[32398-32438]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32451-32458]:ReturnStatement[32451-32458]"
  }, {
    "left" : "case MINIMAL:",
    "right" : "case MINIMAL:",
    "info" : "SwitchCase[32467-32480]:SwitchCase[32467-32480]"
  }, {
    "left" : "if (len <= 0)",
    "right" : "if (len <= 0)",
    "info" : "IfStatement[32493-34289]:IfStatement[32493-34295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32507-32848]:Block[32507-32848]"
  }, {
    "left" : "if (newRecord)",
    "right" : "if (newRecord)",
    "info" : "IfStatement[32766-32834]:IfStatement[32766-32834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32781-32834]:Block[32781-32834]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[32803-32816]:ExpressionStatement[32803-32816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32854-34289]:Block[32854-34295]"
  }, {
    "left" : "char c = value.charAt(pos);",
    "right" : "char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[32872-32899]:VariableDeclarationStatement[32872-32899]"
  }, {
    "left" : "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z'))",
    "right" : "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E))",
    "info" : "IfStatement[33022-34275]:IfStatement[33022-34281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33105-33158]:Block[33111-33164]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[33127-33140]:ExpressionStatement[33133-33146]"
  }, {
    "left" : "if (c <= COMMENT)",
    "right" : "if (c <= COMMENT)",
    "info" : "IfStatement[33164-34275]:IfStatement[33170-34281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33182-33503]:Block[33188-33509]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[33472-33485]:ExpressionStatement[33478-33491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33509-34275]:Block[33515-34281]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[33531-33839]:WhileStatement[33537-33845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33549-33839]:Block[33555-33845]"
  }, {
    "left" : "c = value.charAt(pos);",
    "right" : "c = value.charAt(pos);",
    "info" : "ExpressionStatement[33575-33597]:ExpressionStatement[33581-33603]"
  }, {
    "left" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
    "right" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
    "info" : "IfStatement[33622-33786]:IfStatement[33628-33792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33682-33786]:Block[33688-33792]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[33712-33725]:ExpressionStatement[33718-33731]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33754-33760]:BreakStatement[33760-33766]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[33811-33817]:ExpressionStatement[33817-33823]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[33861-34257]:IfStatement[33867-34263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33873-34257]:Block[33879-34263]"
  }, {
    "left" : "pos = end - 1;",
    "right" : "pos = end - 1;",
    "info" : "ExpressionStatement[33899-33913]:ExpressionStatement[33905-33919]"
  }, {
    "left" : "c = value.charAt(pos);",
    "right" : "c = value.charAt(pos);",
    "info" : "ExpressionStatement[33938-33960]:ExpressionStatement[33944-33966]"
  }, {
    "left" : "if (c <= SP)",
    "right" : "if (c <= SP)",
    "info" : "IfStatement[34153-34235]:IfStatement[34159-34241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34166-34235]:Block[34172-34241]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[34196-34209]:ExpressionStatement[34202-34215]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[34303-34475]:IfStatement[34309-34481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34315-34475]:Block[34321-34481]"
  }, {
    "left" : "out.append(value, start, end);",
    "right" : "out.append(value, start, end);",
    "info" : "ExpressionStatement[34407-34437]:ExpressionStatement[34413-34443]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34454-34461]:ReturnStatement[34460-34467]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34488-34494]:BreakStatement[34494-34500]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34503-34511]:SwitchCase[34509-34517]"
  }, {
    "left" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
    "right" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
    "info" : "ThrowStatement[34524-34602]:ThrowStatement[34530-34608]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[34622-34778]:IfStatement[34628-34784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34634-34778]:Block[34640-34784]"
  }, {
    "left" : "out.append(value, start, end);",
    "right" : "out.append(value, start, end);",
    "info" : "ExpressionStatement[34718-34748]:ExpressionStatement[34724-34754]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34761-34768]:ReturnStatement[34767-34774]"
  }, {
    "left" : "out.append(quoteChar);",
    "right" : "out.append(quoteChar);",
    "info" : "ExpressionStatement[34842-34864]:ExpressionStatement[34848-34870]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[35011-35533]:WhileStatement[35017-35539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35029-35533]:Block[35035-35539]"
  }, {
    "left" : "final char c = value.charAt(pos);",
    "right" : "final char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[35043-35076]:VariableDeclarationStatement[35049-35082]"
  }, {
    "left" : "if (c == quoteChar)",
    "right" : "if (c == quoteChar)",
    "info" : "IfStatement[35089-35504]:IfStatement[35095-35510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35109-35504]:Block[35115-35510]"
  }, {
    "left" : "out.append(value, start, pos + 1);",
    "right" : "out.append(value, start, pos + 1);",
    "info" : "ExpressionStatement[35261-35295]:ExpressionStatement[35267-35301]"
  }, {
    "left" : "start = pos;",
    "right" : "start = pos;",
    "info" : "ExpressionStatement[35478-35490]:ExpressionStatement[35484-35496]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[35517-35523]:ExpressionStatement[35523-35529]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[35577-35607]:ExpressionStatement[35583-35613]"
  }, {
    "left" : "out.append(quoteChar);",
    "right" : "out.append(quoteChar);",
    "info" : "ExpressionStatement[35616-35638]:ExpressionStatement[35622-35644]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35848-35854]:Modifier[35854-35860]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35855-35859]:PrimitiveType[35861-35865]"
  }, {
    "left" : "println",
    "right" : "println",
    "info" : "SimpleName[35860-35867]:SimpleName[35866-35873]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[35868-35888]:SingleVariableDeclaration[35874-35894]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[35897-35908]:SimpleType[35903-35914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35909-36094]:Block[35915-36100]"
  }, {
    "left" : "if (getTrailingDelimiter())",
    "right" : "if (getTrailingDelimiter())",
    "info" : "IfStatement[35919-35998]:IfStatement[35925-36004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35947-35998]:Block[35953-36004]"
  }, {
    "left" : "out.append(getDelimiter());",
    "right" : "out.append(getDelimiter());",
    "info" : "ExpressionStatement[35961-35988]:ExpressionStatement[35967-35994]"
  }, {
    "left" : "if (recordSeparator != null)",
    "right" : "if (recordSeparator != null)",
    "info" : "IfStatement[36007-36088]:IfStatement[36013-36094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36036-36088]:Block[36042-36094]"
  }, {
    "left" : "out.append(recordSeparator);",
    "right" : "out.append(recordSeparator);",
    "info" : "ExpressionStatement[36050-36078]:ExpressionStatement[36056-36084]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36730-36736]:Modifier[36736-36742]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36737-36741]:PrimitiveType[36743-36747]"
  }, {
    "left" : "printRecord",
    "right" : "printRecord",
    "info" : "SimpleName[36742-36753]:SimpleName[36748-36759]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[36754-36774]:SingleVariableDeclaration[36760-36780]"
  }, {
    "left" : "final Object... values",
    "right" : "final Object... values",
    "info" : "SingleVariableDeclaration[36776-36798]:SingleVariableDeclaration[36782-36804]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36807-36818]:SimpleType[36813-36824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36819-36951]:Block[36825-36957]"
  }, {
    "left" : "for (int i = 0; i < values.length; i++)",
    "right" : "for (int i = 0; i < values.length; i++)",
    "info" : "ForStatement[36829-36923]:ForStatement[36835-36929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36869-36923]:Block[36875-36929]"
  }, {
    "left" : "print(values[i], out, i == 0);",
    "right" : "print(values[i], out, i == 0);",
    "info" : "ExpressionStatement[36883-36913]:ExpressionStatement[36889-36919]"
  }, {
    "left" : "println(out);",
    "right" : "println(out);",
    "info" : "ExpressionStatement[36932-36945]:ExpressionStatement[36938-36951]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[36957-36966]:MarkerAnnotation[36963-36972]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36971-36977]:Modifier[36977-36983]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[36978-36984]:SimpleType[36984-36990]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[36985-36993]:SimpleName[36991-36999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36996-38550]:Block[37002-38556]"
  }, {
    "left" : "final StringBuilder sb = new StringBuilder();",
    "right" : "final StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[37006-37051]:VariableDeclarationStatement[37012-37057]"
  }, {
    "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
    "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
    "info" : "ExpressionStatement[37060-37115]:ExpressionStatement[37066-37121]"
  }, {
    "left" : "if (isEscapeCharacterSet())",
    "right" : "if (isEscapeCharacterSet())",
    "info" : "IfStatement[37124-37262]:IfStatement[37130-37268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37152-37262]:Block[37158-37268]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[37166-37181]:ExpressionStatement[37172-37187]"
  }, {
    "left" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
    "right" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
    "info" : "ExpressionStatement[37194-37252]:ExpressionStatement[37200-37258]"
  }, {
    "left" : "if (isQuoteCharacterSet())",
    "right" : "if (isQuoteCharacterSet())",
    "info" : "IfStatement[37271-37410]:IfStatement[37277-37416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37298-37410]:Block[37304-37416]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[37312-37327]:ExpressionStatement[37318-37333]"
  }, {
    "left" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
    "right" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
    "info" : "ExpressionStatement[37340-37400]:ExpressionStatement[37346-37406]"
  }, {
    "left" : "if (isCommentMarkerSet())",
    "right" : "if (isCommentMarkerSet())",
    "info" : "IfStatement[37419-37559]:IfStatement[37425-37565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37445-37559]:Block[37451-37565]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[37459-37474]:ExpressionStatement[37465-37480]"
  }, {
    "left" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
    "right" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
    "info" : "ExpressionStatement[37487-37549]:ExpressionStatement[37493-37555]"
  }, {
    "left" : "if (isNullStringSet())",
    "right" : "if (isNullStringSet())",
    "info" : "IfStatement[37568-37700]:IfStatement[37574-37706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37591-37700]:Block[37597-37706]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[37605-37620]:ExpressionStatement[37611-37626]"
  }, {
    "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
    "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
    "info" : "ExpressionStatement[37633-37690]:ExpressionStatement[37639-37696]"
  }, {
    "left" : "if (recordSeparator != null)",
    "right" : "if (recordSeparator != null)",
    "info" : "IfStatement[37709-37857]:IfStatement[37715-37863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37738-37857]:Block[37744-37863]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[37752-37767]:ExpressionStatement[37758-37773]"
  }, {
    "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
    "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
    "info" : "ExpressionStatement[37780-37847]:ExpressionStatement[37786-37853]"
  }, {
    "left" : "if (getIgnoreEmptyLines())",
    "right" : "if (getIgnoreEmptyLines())",
    "info" : "IfStatement[37866-37950]:IfStatement[37872-37956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37893-37950]:Block[37899-37956]"
  }, {
    "left" : "sb.append(\" EmptyLines:ignored\");",
    "right" : "sb.append(\" EmptyLines:ignored\");",
    "info" : "ExpressionStatement[37907-37940]:ExpressionStatement[37913-37946]"
  }, {
    "left" : "if (getIgnoreSurroundingSpaces())",
    "right" : "if (getIgnoreSurroundingSpaces())",
    "info" : "IfStatement[37959-38057]:IfStatement[37965-38063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37993-38057]:Block[37999-38063]"
  }, {
    "left" : "sb.append(\" SurroundingSpaces:ignored\");",
    "right" : "sb.append(\" SurroundingSpaces:ignored\");",
    "info" : "ExpressionStatement[38007-38047]:ExpressionStatement[38013-38053]"
  }, {
    "left" : "if (getIgnoreHeaderCase())",
    "right" : "if (getIgnoreHeaderCase())",
    "info" : "IfStatement[38066-38156]:IfStatement[38072-38162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38093-38156]:Block[38099-38162]"
  }, {
    "left" : "sb.append(\" IgnoreHeaderCase:ignored\");",
    "right" : "sb.append(\" IgnoreHeaderCase:ignored\");",
    "info" : "ExpressionStatement[38107-38146]:ExpressionStatement[38113-38152]"
  }, {
    "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
    "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
    "info" : "ExpressionStatement[38165-38222]:ExpressionStatement[38171-38228]"
  }, {
    "left" : "if (headerComments != null)",
    "right" : "if (headerComments != null)",
    "info" : "IfStatement[38231-38380]:IfStatement[38237-38386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38259-38380]:Block[38265-38386]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[38273-38288]:ExpressionStatement[38279-38294]"
  }, {
    "left" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
    "right" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
    "info" : "ExpressionStatement[38301-38370]:ExpressionStatement[38307-38376]"
  }, {
    "left" : "if (header != null)",
    "right" : "if (header != null)",
    "info" : "IfStatement[38389-38514]:IfStatement[38395-38520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38409-38514]:Block[38415-38520]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[38423-38438]:ExpressionStatement[38429-38444]"
  }, {
    "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
    "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
    "info" : "ExpressionStatement[38451-38504]:ExpressionStatement[38457-38510]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[38523-38544]:ReturnStatement[38529-38550]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38556-38563]:Modifier[38562-38569]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[38564-38572]:ArrayType[38570-38578]"
  }, {
    "left" : "toStringArray",
    "right" : "toStringArray",
    "info" : "SimpleName[38573-38586]:SimpleName[38579-38592]"
  }, {
    "left" : "final Object[] values",
    "right" : "final Object[] values",
    "info" : "SingleVariableDeclaration[38587-38608]:SingleVariableDeclaration[38593-38614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38610-38936]:Block[38616-38942]"
  }, {
    "left" : "if (values == null)",
    "right" : "if (values == null)",
    "info" : "IfStatement[38620-38676]:IfStatement[38626-38682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38640-38676]:Block[38646-38682]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[38654-38666]:ReturnStatement[38660-38672]"
  }, {
    "left" : "final String[] strings = new String[values.length];",
    "right" : "final String[] strings = new String[values.length];",
    "info" : "VariableDeclarationStatement[38685-38736]:VariableDeclarationStatement[38691-38742]"
  }, {
    "left" : "for (int i = 0; i < values.length; i++)",
    "right" : "for (int i = 0; i < values.length; i++)",
    "info" : "ForStatement[38745-38906]:ForStatement[38751-38912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38785-38906]:Block[38791-38912]"
  }, {
    "left" : "final Object value = values[i];",
    "right" : "final Object value = values[i];",
    "info" : "VariableDeclarationStatement[38799-38830]:VariableDeclarationStatement[38805-38836]"
  }, {
    "left" : "strings[i] = value == null ? null : value.toString();",
    "right" : "strings[i] = value == null ? null : value.toString();",
    "info" : "ExpressionStatement[38843-38896]:ExpressionStatement[38849-38902]"
  }, {
    "left" : "return strings;",
    "right" : "return strings;",
    "info" : "ReturnStatement[38915-38930]:ReturnStatement[38921-38936]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38942-38949]:Modifier[38948-38955]"
  }, {
    "left" : "CharSequence",
    "right" : "CharSequence",
    "info" : "SimpleType[38950-38962]:SimpleType[38956-38968]"
  }, {
    "left" : "trim",
    "right" : "trim",
    "info" : "SimpleName[38963-38967]:SimpleName[38969-38973]"
  }, {
    "left" : "final CharSequence charSequence",
    "right" : "final CharSequence charSequence",
    "info" : "SingleVariableDeclaration[38968-38999]:SingleVariableDeclaration[38974-39005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39001-39488]:Block[39007-39494]"
  }, {
    "left" : "if (charSequence instanceof String)",
    "right" : "if (charSequence instanceof String)",
    "info" : "IfStatement[39011-39109]:IfStatement[39017-39115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39047-39109]:Block[39053-39115]"
  }, {
    "left" : "return ((String) charSequence).trim();",
    "right" : "return ((String) charSequence).trim();",
    "info" : "ReturnStatement[39061-39099]:ReturnStatement[39067-39105]"
  }, {
    "left" : "final int count = charSequence.length();",
    "right" : "final int count = charSequence.length();",
    "info" : "VariableDeclarationStatement[39118-39158]:VariableDeclarationStatement[39124-39164]"
  }, {
    "left" : "int len = count;",
    "right" : "int len = count;",
    "info" : "VariableDeclarationStatement[39167-39183]:VariableDeclarationStatement[39173-39189]"
  }, {
    "left" : "int pos = 0;",
    "right" : "int pos = 0;",
    "info" : "VariableDeclarationStatement[39192-39204]:VariableDeclarationStatement[39198-39210]"
  }, {
    "left" : "while (pos < len && charSequence.charAt(pos) <= SP)",
    "right" : "while (pos < len && charSequence.charAt(pos) <= SP)",
    "info" : "WhileStatement[39214-39296]:WhileStatement[39220-39302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39266-39296]:Block[39272-39302]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[39280-39286]:ExpressionStatement[39286-39292]"
  }, {
    "left" : "while (pos < len && charSequence.charAt(len - 1) <= SP)",
    "right" : "while (pos < len && charSequence.charAt(len - 1) <= SP)",
    "info" : "WhileStatement[39305-39391]:WhileStatement[39311-39397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39361-39391]:Block[39367-39397]"
  }, {
    "left" : "len--;",
    "right" : "len--;",
    "info" : "ExpressionStatement[39375-39381]:ExpressionStatement[39381-39387]"
  }, {
    "left" : "return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
    "right" : "return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
    "info" : "ReturnStatement[39400-39482]:ReturnStatement[39406-39488]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39660-39667]:Modifier[39666-39673]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39668-39672]:PrimitiveType[39674-39678]"
  }, {
    "left" : "validate",
    "right" : "validate",
    "info" : "SimpleName[39673-39681]:SimpleName[39679-39687]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[39691-39715]:SimpleType[39697-39721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39716-41718]:Block[39722-41724]"
  }, {
    "left" : "if (isLineBreak(delimiter))",
    "right" : "if (isLineBreak(delimiter))",
    "info" : "IfStatement[39726-39853]:IfStatement[39732-39859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39754-39853]:Block[39760-39859]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "info" : "ThrowStatement[39768-39843]:ThrowStatement[39774-39849]"
  }, {
    "left" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
    "right" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
    "info" : "IfStatement[39863-40105]:IfStatement[39869-40111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39934-40105]:Block[39940-40111]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
    "info" : "ThrowStatement[39948-40095]:ThrowStatement[39954-40101]"
  }, {
    "left" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
    "right" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
    "info" : "IfStatement[40115-40357]:IfStatement[40121-40363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40188-40357]:Block[40194-40363]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
    "info" : "ThrowStatement[40202-40347]:ThrowStatement[40208-40353]"
  }, {
    "left" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
    "right" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
    "info" : "IfStatement[40367-40610]:IfStatement[40373-40616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40436-40610]:Block[40442-40616]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
    "info" : "ThrowStatement[40450-40600]:ThrowStatement[40456-40606]"
  }, {
    "left" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
    "right" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
    "info" : "IfStatement[40620-40862]:IfStatement[40626-40868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40688-40862]:Block[40694-40868]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
    "info" : "ThrowStatement[40702-40852]:ThrowStatement[40708-40858]"
  }, {
    "left" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
    "right" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
    "info" : "IfStatement[40872-41113]:IfStatement[40878-41119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40942-41113]:Block[40948-41119]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
    "info" : "ThrowStatement[40956-41103]:ThrowStatement[40962-41109]"
  }, {
    "left" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
    "right" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
    "info" : "IfStatement[41123-41295]:IfStatement[41129-41301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41183-41295]:Block[41189-41301]"
  }, {
    "left" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
    "right" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
    "info" : "ThrowStatement[41197-41285]:ThrowStatement[41203-41291]"
  }, {
    "left" : "if (header != null)",
    "right" : "if (header != null)",
    "info" : "IfStatement[41332-41712]:IfStatement[41338-41718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41352-41712]:Block[41358-41718]"
  }, {
    "left" : "final Set<String> dupCheck = new HashSet<>();",
    "right" : "final Set<String> dupCheck = new HashSet<>();",
    "info" : "VariableDeclarationStatement[41366-41411]:VariableDeclarationStatement[41372-41417]"
  }, {
    "left" : "for (final String hdr : header)",
    "right" : "for (final String hdr : header)",
    "info" : "EnhancedForStatement[41424-41702]:EnhancedForStatement[41430-41708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41456-41702]:Block[41462-41708]"
  }, {
    "left" : "if (!dupCheck.add(hdr))",
    "right" : "if (!dupCheck.add(hdr))",
    "info" : "IfStatement[41474-41688]:IfStatement[41480-41694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41498-41688]:Block[41504-41694]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
    "right" : "throw new IllegalArgumentException(\n                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
    "info" : "ThrowStatement[41520-41670]:ThrowStatement[41526-41676]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42034-42040]:Modifier[42040-42046]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[42041-42050]:SimpleType[42047-42056]"
  }, {
    "left" : "withAllowMissingColumnNames",
    "right" : "withAllowMissingColumnNames",
    "info" : "SimpleName[42051-42078]:SimpleName[42057-42084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42081-42143]:Block[42087-42149]"
  }, {
    "left" : "return this.withAllowMissingColumnNames(true);",
    "right" : "return this.withAllowMissingColumnNames(true);",
    "info" : "ReturnStatement[42091-42137]:ReturnStatement[42097-42143]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42640-42646]:Modifier[42646-42652]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[42647-42656]:SimpleType[42653-42662]"
  }, {
    "left" : "withAllowMissingColumnNames",
    "right" : "withAllowMissingColumnNames",
    "info" : "SimpleName[42657-42684]:SimpleName[42663-42690]"
  }, {
    "left" : "final boolean allowMissingColumnNames",
    "right" : "final boolean allowMissingColumnNames",
    "info" : "SingleVariableDeclaration[42685-42722]:SingleVariableDeclaration[42691-42728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42724-43045]:Block[42730-43051]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[42734-43039]:ReturnStatement[42740-43045]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43582-43588]:Modifier[43588-43594]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[43589-43598]:SimpleType[43595-43604]"
  }, {
    "left" : "withCommentMarker",
    "right" : "withCommentMarker",
    "info" : "SimpleName[43599-43616]:SimpleName[43605-43622]"
  }, {
    "left" : "final char commentMarker",
    "right" : "final char commentMarker",
    "info" : "SingleVariableDeclaration[43617-43641]:SingleVariableDeclaration[43623-43647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43643-43718]:Block[43649-43724]"
  }, {
    "left" : "return withCommentMarker(Character.valueOf(commentMarker));",
    "right" : "return withCommentMarker(Character.valueOf(commentMarker));",
    "info" : "ReturnStatement[43653-43712]:ReturnStatement[43659-43718]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44284-44290]:Modifier[44290-44296]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[44291-44300]:SimpleType[44297-44306]"
  }, {
    "left" : "withCommentMarker",
    "right" : "withCommentMarker",
    "info" : "SimpleName[44301-44318]:SimpleName[44307-44324]"
  }, {
    "left" : "final Character commentMarker",
    "right" : "final Character commentMarker",
    "info" : "SingleVariableDeclaration[44319-44348]:SingleVariableDeclaration[44325-44354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44350-44832]:Block[44356-44838]"
  }, {
    "left" : "if (isLineBreak(commentMarker))",
    "right" : "if (isLineBreak(commentMarker))",
    "info" : "IfStatement[44360-44512]:IfStatement[44366-44518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44392-44512]:Block[44398-44518]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
    "info" : "ThrowStatement[44406-44502]:ThrowStatement[44412-44508]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[44521-44826]:ReturnStatement[44527-44832]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45235-45241]:Modifier[45241-45247]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[45242-45251]:SimpleType[45248-45257]"
  }, {
    "left" : "withDelimiter",
    "right" : "withDelimiter",
    "info" : "SimpleName[45252-45265]:SimpleName[45258-45271]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[45266-45286]:SingleVariableDeclaration[45272-45292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45288-45745]:Block[45294-45751]"
  }, {
    "left" : "if (isLineBreak(delimiter))",
    "right" : "if (isLineBreak(delimiter))",
    "info" : "IfStatement[45298-45425]:IfStatement[45304-45431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45326-45425]:Block[45332-45431]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "info" : "ThrowStatement[45340-45415]:ThrowStatement[45346-45421]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[45434-45739]:ReturnStatement[45440-45745]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46163-46169]:Modifier[46169-46175]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[46170-46179]:SimpleType[46176-46185]"
  }, {
    "left" : "withEscape",
    "right" : "withEscape",
    "info" : "SimpleName[46180-46190]:SimpleName[46186-46196]"
  }, {
    "left" : "final char escape",
    "right" : "final char escape",
    "info" : "SingleVariableDeclaration[46191-46208]:SingleVariableDeclaration[46197-46214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46210-46271]:Block[46216-46277]"
  }, {
    "left" : "return withEscape(Character.valueOf(escape));",
    "right" : "return withEscape(Character.valueOf(escape));",
    "info" : "ReturnStatement[46220-46265]:ReturnStatement[46226-46271]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46719-46725]:Modifier[46725-46731]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[46726-46735]:SimpleType[46732-46741]"
  }, {
    "left" : "withEscape",
    "right" : "withEscape",
    "info" : "SimpleName[46736-46746]:SimpleName[46742-46752]"
  }, {
    "left" : "final Character escape",
    "right" : "final Character escape",
    "info" : "SingleVariableDeclaration[46747-46769]:SingleVariableDeclaration[46753-46775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46771-47223]:Block[46777-47229]"
  }, {
    "left" : "if (isLineBreak(escape))",
    "right" : "if (isLineBreak(escape))",
    "info" : "IfStatement[46781-46912]:IfStatement[46787-46918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46806-46912]:Block[46812-46918]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
    "info" : "ThrowStatement[46820-46902]:ThrowStatement[46826-46908]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[46921-47217]:ReturnStatement[46927-47223]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47700-47706]:Modifier[47706-47712]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[47707-47716]:SimpleType[47713-47722]"
  }, {
    "left" : "withFirstRecordAsHeader",
    "right" : "withFirstRecordAsHeader",
    "info" : "SimpleName[47717-47740]:SimpleName[47723-47746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47743-47802]:Block[47749-47808]"
  }, {
    "left" : "return withHeader().withSkipHeaderRecord();",
    "right" : "return withHeader().withSkipHeaderRecord();",
    "info" : "ReturnStatement[47753-47796]:ReturnStatement[47759-47802]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48575-48581]:Modifier[48581-48587]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[48582-48591]:SimpleType[48588-48597]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[48592-48602]:SimpleName[48598-48608]"
  }, {
    "left" : "final Class<? extends Enum<?>> headerEnum",
    "right" : "final Class<? extends Enum<?>> headerEnum",
    "info" : "SingleVariableDeclaration[48603-48644]:SingleVariableDeclaration[48609-48650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48646-49010]:Block[48652-49016]"
  }, {
    "left" : "String[] header = null;",
    "right" : "String[] header = null;",
    "info" : "VariableDeclarationStatement[48656-48679]:VariableDeclarationStatement[48662-48685]"
  }, {
    "left" : "if (headerEnum != null)",
    "right" : "if (headerEnum != null)",
    "info" : "IfStatement[48688-48969]:IfStatement[48694-48975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48712-48969]:Block[48718-48975]"
  }, {
    "left" : "final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
    "right" : "final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
    "info" : "VariableDeclarationStatement[48726-48785]:VariableDeclarationStatement[48732-48791]"
  }, {
    "left" : "header = new String[enumValues.length];",
    "right" : "header = new String[enumValues.length];",
    "info" : "ExpressionStatement[48798-48837]:ExpressionStatement[48804-48843]"
  }, {
    "left" : "for (int i = 0; i < enumValues.length; i++)",
    "right" : "for (int i = 0; i < enumValues.length; i++)",
    "info" : "ForStatement[48850-48959]:ForStatement[48856-48965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48894-48959]:Block[48900-48965]"
  }, {
    "left" : "header[i] = enumValues[i].name();",
    "right" : "header[i] = enumValues[i].name();",
    "info" : "ExpressionStatement[48912-48945]:ExpressionStatement[48918-48951]"
  }, {
    "left" : "return withHeader(header);",
    "right" : "return withHeader(header);",
    "info" : "ReturnStatement[48978-49004]:ReturnStatement[48984-49010]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49941-49947]:Modifier[49947-49953]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[49948-49957]:SimpleType[49954-49963]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[49958-49968]:SimpleName[49964-49974]"
  }, {
    "left" : "final ResultSet resultSet",
    "right" : "final ResultSet resultSet",
    "info" : "SingleVariableDeclaration[49969-49994]:SingleVariableDeclaration[49975-50000]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[50003-50015]:SimpleType[50009-50021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50016-50102]:Block[50022-50108]"
  }, {
    "left" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
    "right" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
    "info" : "ReturnStatement[50026-50096]:ReturnStatement[50032-50102]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[51030-51036]:Modifier[51036-51042]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[51037-51046]:SimpleType[51043-51052]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[51047-51057]:SimpleName[51053-51063]"
  }, {
    "left" : "final ResultSetMetaData metaData",
    "right" : "final ResultSetMetaData metaData",
    "info" : "SingleVariableDeclaration[51058-51090]:SingleVariableDeclaration[51064-51096]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[51099-51111]:SimpleType[51105-51117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51112-51463]:Block[51118-51469]"
  }, {
    "left" : "String[] labels = null;",
    "right" : "String[] labels = null;",
    "info" : "VariableDeclarationStatement[51122-51145]:VariableDeclarationStatement[51128-51151]"
  }, {
    "left" : "if (metaData != null)",
    "right" : "if (metaData != null)",
    "info" : "IfStatement[51154-51422]:IfStatement[51160-51428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51176-51422]:Block[51182-51428]"
  }, {
    "left" : "final int columnCount = metaData.getColumnCount();",
    "right" : "final int columnCount = metaData.getColumnCount();",
    "info" : "VariableDeclarationStatement[51190-51240]:VariableDeclarationStatement[51196-51246]"
  }, {
    "left" : "labels = new String[columnCount];",
    "right" : "labels = new String[columnCount];",
    "info" : "ExpressionStatement[51253-51286]:ExpressionStatement[51259-51292]"
  }, {
    "left" : "for (int i = 0; i < columnCount; i++)",
    "right" : "for (int i = 0; i < columnCount; i++)",
    "info" : "ForStatement[51299-51412]:ForStatement[51305-51418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51337-51412]:Block[51343-51418]"
  }, {
    "left" : "labels[i] = metaData.getColumnLabel(i + 1);",
    "right" : "labels[i] = metaData.getColumnLabel(i + 1);",
    "info" : "ExpressionStatement[51355-51398]:ExpressionStatement[51361-51404]"
  }, {
    "left" : "return withHeader(labels);",
    "right" : "return withHeader(labels);",
    "info" : "ReturnStatement[51431-51457]:ReturnStatement[51437-51463]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[52273-52279]:Modifier[52279-52285]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[52280-52289]:SimpleType[52286-52295]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[52290-52300]:SimpleName[52296-52306]"
  }, {
    "left" : "final String... header",
    "right" : "final String... header",
    "info" : "SingleVariableDeclaration[52301-52323]:SingleVariableDeclaration[52307-52329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52325-52646]:Block[52331-52652]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[52335-52640]:ReturnStatement[52341-52646]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53312-53318]:Modifier[53318-53324]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[53319-53328]:SimpleType[53325-53334]"
  }, {
    "left" : "withHeaderComments",
    "right" : "withHeaderComments",
    "info" : "SimpleName[53329-53347]:SimpleName[53335-53353]"
  }, {
    "left" : "final Object... headerComments",
    "right" : "final Object... headerComments",
    "info" : "SingleVariableDeclaration[53348-53378]:SingleVariableDeclaration[53354-53384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53380-53701]:Block[53386-53707]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[53390-53695]:ReturnStatement[53396-53701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54019-54025]:Modifier[54025-54031]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[54026-54035]:SimpleType[54032-54041]"
  }, {
    "left" : "withIgnoreEmptyLines",
    "right" : "withIgnoreEmptyLines",
    "info" : "SimpleName[54036-54056]:SimpleName[54042-54062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54059-54114]:Block[54065-54120]"
  }, {
    "left" : "return this.withIgnoreEmptyLines(true);",
    "right" : "return this.withIgnoreEmptyLines(true);",
    "info" : "ReturnStatement[54069-54108]:ReturnStatement[54075-54114]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54582-54588]:Modifier[54588-54594]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[54589-54598]:SimpleType[54595-54604]"
  }, {
    "left" : "withIgnoreEmptyLines",
    "right" : "withIgnoreEmptyLines",
    "info" : "SimpleName[54599-54619]:SimpleName[54605-54625]"
  }, {
    "left" : "final boolean ignoreEmptyLines",
    "right" : "final boolean ignoreEmptyLines",
    "info" : "SingleVariableDeclaration[54620-54650]:SingleVariableDeclaration[54626-54656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54652-54973]:Block[54658-54979]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[54662-54967]:ReturnStatement[54668-54973]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55226-55232]:Modifier[55232-55238]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[55233-55242]:SimpleType[55239-55248]"
  }, {
    "left" : "withIgnoreHeaderCase",
    "right" : "withIgnoreHeaderCase",
    "info" : "SimpleName[55243-55263]:SimpleName[55249-55269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55266-55321]:Block[55272-55327]"
  }, {
    "left" : "return this.withIgnoreHeaderCase(true);",
    "right" : "return this.withIgnoreHeaderCase(true);",
    "info" : "ReturnStatement[55276-55315]:ReturnStatement[55282-55321]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55733-55739]:Modifier[55739-55745]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[55740-55749]:SimpleType[55746-55755]"
  }, {
    "left" : "withIgnoreHeaderCase",
    "right" : "withIgnoreHeaderCase",
    "info" : "SimpleName[55750-55770]:SimpleName[55756-55776]"
  }, {
    "left" : "final boolean ignoreHeaderCase",
    "right" : "final boolean ignoreHeaderCase",
    "info" : "SingleVariableDeclaration[55771-55801]:SingleVariableDeclaration[55777-55807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55803-56124]:Block[55809-56130]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[55813-56118]:ReturnStatement[55819-56124]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56417-56423]:Modifier[56423-56429]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[56424-56433]:SimpleType[56430-56439]"
  }, {
    "left" : "withIgnoreSurroundingSpaces",
    "right" : "withIgnoreSurroundingSpaces",
    "info" : "SimpleName[56434-56461]:SimpleName[56440-56467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56464-56526]:Block[56470-56532]"
  }, {
    "left" : "return this.withIgnoreSurroundingSpaces(true);",
    "right" : "return this.withIgnoreSurroundingSpaces(true);",
    "info" : "ReturnStatement[56474-56520]:ReturnStatement[56480-56526]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56939-56945]:Modifier[56945-56951]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[56946-56955]:SimpleType[56952-56961]"
  }, {
    "left" : "withIgnoreSurroundingSpaces",
    "right" : "withIgnoreSurroundingSpaces",
    "info" : "SimpleName[56956-56983]:SimpleName[56962-56989]"
  }, {
    "left" : "final boolean ignoreSurroundingSpaces",
    "right" : "final boolean ignoreSurroundingSpaces",
    "info" : "SingleVariableDeclaration[56984-57021]:SingleVariableDeclaration[56990-57027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57023-57344]:Block[57029-57350]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[57033-57338]:ReturnStatement[57039-57344]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[57999-58005]:Modifier[58005-58011]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[58006-58015]:SimpleType[58012-58021]"
  }, {
    "left" : "withNullString",
    "right" : "withNullString",
    "info" : "SimpleName[58016-58030]:SimpleName[58022-58036]"
  }, {
    "left" : "final String nullString",
    "right" : "final String nullString",
    "info" : "SingleVariableDeclaration[58031-58054]:SingleVariableDeclaration[58037-58060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58056-58377]:Block[58062-58383]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[58066-58371]:ReturnStatement[58072-58377]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[58784-58790]:Modifier[58790-58796]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[58791-58800]:SimpleType[58797-58806]"
  }, {
    "left" : "withQuote",
    "right" : "withQuote",
    "info" : "SimpleName[58801-58810]:SimpleName[58807-58816]"
  }, {
    "left" : "final char quoteChar",
    "right" : "final char quoteChar",
    "info" : "SingleVariableDeclaration[58811-58831]:SingleVariableDeclaration[58817-58837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58833-58896]:Block[58839-58902]"
  }, {
    "left" : "return withQuote(Character.valueOf(quoteChar));",
    "right" : "return withQuote(Character.valueOf(quoteChar));",
    "info" : "ReturnStatement[58843-58890]:ReturnStatement[58849-58896]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59332-59338]:Modifier[59338-59344]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[59339-59348]:SimpleType[59345-59354]"
  }, {
    "left" : "withQuote",
    "right" : "withQuote",
    "info" : "SimpleName[59349-59358]:SimpleName[59355-59364]"
  }, {
    "left" : "final Character quoteChar",
    "right" : "final Character quoteChar",
    "info" : "SingleVariableDeclaration[59359-59384]:SingleVariableDeclaration[59365-59390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59386-59838]:Block[59392-59844]"
  }, {
    "left" : "if (isLineBreak(quoteChar))",
    "right" : "if (isLineBreak(quoteChar))",
    "info" : "IfStatement[59396-59523]:IfStatement[59402-59529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59424-59523]:Block[59430-59529]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
    "info" : "ThrowStatement[59438-59513]:ThrowStatement[59444-59519]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[59532-59832]:ReturnStatement[59538-59838]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60157-60163]:Modifier[60163-60169]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[60164-60173]:SimpleType[60170-60179]"
  }, {
    "left" : "withQuoteMode",
    "right" : "withQuoteMode",
    "info" : "SimpleName[60174-60187]:SimpleName[60180-60193]"
  }, {
    "left" : "final QuoteMode quoteModePolicy",
    "right" : "final QuoteMode quoteModePolicy",
    "info" : "SingleVariableDeclaration[60188-60219]:SingleVariableDeclaration[60194-60225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60221-60548]:Block[60227-60554]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[60231-60542]:ReturnStatement[60237-60548]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[61092-61098]:Modifier[61098-61104]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[61099-61108]:SimpleType[61105-61114]"
  }, {
    "left" : "withRecordSeparator",
    "right" : "withRecordSeparator",
    "info" : "SimpleName[61109-61128]:SimpleName[61115-61134]"
  }, {
    "left" : "final char recordSeparator",
    "right" : "final char recordSeparator",
    "info" : "SingleVariableDeclaration[61129-61155]:SingleVariableDeclaration[61135-61161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61157-61233]:Block[61163-61239]"
  }, {
    "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
    "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
    "info" : "ReturnStatement[61167-61227]:ReturnStatement[61173-61233]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[61878-61884]:Modifier[61884-61890]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[61885-61894]:SimpleType[61891-61900]"
  }, {
    "left" : "withRecordSeparator",
    "right" : "withRecordSeparator",
    "info" : "SimpleName[61895-61914]:SimpleName[61901-61920]"
  }, {
    "left" : "final String recordSeparator",
    "right" : "final String recordSeparator",
    "info" : "SingleVariableDeclaration[61915-61943]:SingleVariableDeclaration[61921-61949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61945-62266]:Block[61951-62272]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[61955-62260]:ReturnStatement[61961-62266]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62589-62595]:Modifier[62595-62601]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[62596-62605]:SimpleType[62602-62611]"
  }, {
    "left" : "withSkipHeaderRecord",
    "right" : "withSkipHeaderRecord",
    "info" : "SimpleName[62606-62626]:SimpleName[62612-62632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62629-62684]:Block[62635-62690]"
  }, {
    "left" : "return this.withSkipHeaderRecord(true);",
    "right" : "return this.withSkipHeaderRecord(true);",
    "info" : "ReturnStatement[62639-62678]:ReturnStatement[62645-62684]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63024-63030]:Modifier[63030-63036]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[63031-63040]:SimpleType[63037-63046]"
  }, {
    "left" : "withSkipHeaderRecord",
    "right" : "withSkipHeaderRecord",
    "info" : "SimpleName[63041-63061]:SimpleName[63047-63067]"
  }, {
    "left" : "final boolean skipHeaderRecord",
    "right" : "final boolean skipHeaderRecord",
    "info" : "SingleVariableDeclaration[63062-63092]:SingleVariableDeclaration[63068-63098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63094-63415]:Block[63100-63421]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[63104-63409]:ReturnStatement[63110-63415]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63624-63630]:Modifier[63630-63636]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[63631-63640]:SimpleType[63637-63646]"
  }, {
    "left" : "withTrailingDelimiter",
    "right" : "withTrailingDelimiter",
    "info" : "SimpleName[63641-63662]:SimpleName[63647-63668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63665-63716]:Block[63671-63722]"
  }, {
    "left" : "return withTrailingDelimiter(true);",
    "right" : "return withTrailingDelimiter(true);",
    "info" : "ReturnStatement[63675-63710]:ReturnStatement[63681-63716]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64042-64048]:Modifier[64048-64054]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[64049-64058]:SimpleType[64055-64064]"
  }, {
    "left" : "withTrailingDelimiter",
    "right" : "withTrailingDelimiter",
    "info" : "SimpleName[64059-64080]:SimpleName[64065-64086]"
  }, {
    "left" : "final boolean trailingDelimiter",
    "right" : "final boolean trailingDelimiter",
    "info" : "SingleVariableDeclaration[64081-64112]:SingleVariableDeclaration[64087-64118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64114-64435]:Block[64120-64441]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[64124-64429]:ReturnStatement[64130-64435]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64641-64647]:Modifier[64647-64653]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[64648-64657]:SimpleType[64654-64663]"
  }, {
    "left" : "withTrim",
    "right" : "withTrim",
    "info" : "SimpleName[64658-64666]:SimpleName[64664-64672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64669-64707]:Block[64675-64713]"
  }, {
    "left" : "return withTrim(true);",
    "right" : "return withTrim(true);",
    "info" : "ReturnStatement[64679-64701]:ReturnStatement[64685-64707]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65022-65028]:Modifier[65028-65034]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[65029-65038]:SimpleType[65035-65044]"
  }, {
    "left" : "withTrim",
    "right" : "withTrim",
    "info" : "SimpleName[65039-65047]:SimpleName[65045-65053]"
  }, {
    "left" : "final boolean trim",
    "right" : "final boolean trim",
    "info" : "SingleVariableDeclaration[65048-65066]:SingleVariableDeclaration[65054-65072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65068-65389]:Block[65074-65395]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);",
    "info" : "ReturnStatement[65078-65383]:ReturnStatement[65084-65389]"
  } ]
}