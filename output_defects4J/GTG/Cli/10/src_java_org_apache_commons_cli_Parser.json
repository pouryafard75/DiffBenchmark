{
  "matchedElements" : [
 {
    "left" : "class : Parser",
    "right" : "class : Parser",
    "info" : "TypeDeclaration[1002-13290]:TypeDeclaration[1030-13333]"
  }, {
    "left" : "cmd",
    "right" : "cmd",
    "info" : "FieldDeclaration[1227-1285]:FieldDeclaration[1255-1313]"
  }, {
    "left" : "options",
    "right" : "options",
    "info" : "FieldDeclaration[1291-1342]:FieldDeclaration[1319-1370]"
  }, {
    "left" : "requiredOptions",
    "right" : "requiredOptions",
    "info" : "FieldDeclaration[1348-1421]:FieldDeclaration[1376-1449]"
  }, {
    "left" : "protected setOptions(options ...) : void",
    "right" : "protected setOptions(options ...) : void",
    "info" : "MethodDeclaration[1427-1576]:MethodDeclaration[1455-1619]"
  }, {
    "left" : "protected getOptions() : ",
    "right" : "protected getOptions() : ",
    "info" : "MethodDeclaration[1582-1644]:MethodDeclaration[1625-1687]"
  }, {
    "left" : "protected getRequiredOptions() : ",
    "right" : "protected getRequiredOptions() : ",
    "info" : "MethodDeclaration[1650-1725]:MethodDeclaration[1693-1768]"
  }, {
    "left" : "protected abstract flatten(opts , arguments , stopAtNonOption boolean) : ",
    "right" : "protected abstract flatten(opts , arguments , stopAtNonOption boolean) : ",
    "info" : "MethodDeclaration[1732-2332]:MethodDeclaration[1775-2375]"
  }, {
    "left" : "public parse(options , arguments ) : ",
    "right" : "public parse(options , arguments ) : ",
    "info" : "MethodDeclaration[2338-2864]:MethodDeclaration[2381-2907]"
  }, {
    "left" : "public parse(options , arguments , properties ) : ",
    "right" : "public parse(options , arguments , properties ) : ",
    "info" : "MethodDeclaration[2870-3531]:MethodDeclaration[2913-3574]"
  }, {
    "left" : "public parse(options , arguments , stopAtNonOption boolean) : ",
    "right" : "public parse(options , arguments , stopAtNonOption boolean) : ",
    "info" : "MethodDeclaration[3537-4313]:MethodDeclaration[3580-4356]"
  }, {
    "left" : "public parse(options , arguments , properties , stopAtNonOption boolean) : ",
    "right" : "public parse(options , arguments , properties , stopAtNonOption boolean) : ",
    "info" : "MethodDeclaration[4319-7502]:MethodDeclaration[4362-7545]"
  }, {
    "left" : "protected processProperties(properties ...) : void",
    "right" : "protected processProperties(properties ...) : void",
    "info" : "MethodDeclaration[7508-9193]:MethodDeclaration[7551-9236]"
  }, {
    "left" : "protected checkRequiredOptions() : void",
    "right" : "protected checkRequiredOptions() : void",
    "info" : "MethodDeclaration[9199-10172]:MethodDeclaration[9242-10215]"
  }, {
    "left" : "public processArgs(opt , iter ) : void",
    "right" : "public processArgs(opt , iter ) : void",
    "info" : "MethodDeclaration[10178-11542]:MethodDeclaration[10221-11585]"
  }, {
    "left" : "protected processOption(arg , iter ) : void",
    "right" : "protected processOption(arg , iter ) : void",
    "info" : "MethodDeclaration[11548-13288]:MethodDeclaration[11591-13331]"
  } ],
  "mappings" : [
 {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1427-1436]:Modifier[1455-1464]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1437-1441]:PrimitiveType[1465-1469]"
  }, {
    "left" : "setOptions",
    "right" : "setOptions",
    "info" : "SimpleName[1442-1452]:SimpleName[1470-1480]"
  }, {
    "left" : "final Options options",
    "right" : "final Options options",
    "info" : "SingleVariableDeclaration[1453-1474]:SingleVariableDeclaration[1481-1502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1476-1576]:Block[1504-1619]"
  }, {
    "left" : "this.options = options;",
    "right" : "this.options = options;",
    "info" : "ExpressionStatement[1486-1509]:ExpressionStatement[1514-1537]"
  }, {
    "left" : "this.requiredOptions = options.getRequiredOptions();",
    "right" : "this.requiredOptions = new ArrayList(options.getRequiredOptions());",
    "info" : "ExpressionStatement[1518-1570]:ExpressionStatement[1546-1613]"
  }, {
    "left" : "options.getRequiredOptions()",
    "right" : "options.getRequiredOptions()",
    "info" : "MethodInvocation[1541-1569]:MethodInvocation[1583-1611]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1582-1591]:Modifier[1625-1634]"
  }, {
    "left" : "Options",
    "right" : "Options",
    "info" : "SimpleType[1592-1599]:SimpleType[1635-1642]"
  }, {
    "left" : "getOptions",
    "right" : "getOptions",
    "info" : "SimpleName[1600-1610]:SimpleName[1643-1653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1613-1644]:Block[1656-1687]"
  }, {
    "left" : "return options;",
    "right" : "return options;",
    "info" : "ReturnStatement[1623-1638]:ReturnStatement[1666-1681]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1650-1659]:Modifier[1693-1702]"
  }, {
    "left" : "List",
    "right" : "List",
    "info" : "SimpleType[1660-1664]:SimpleType[1703-1707]"
  }, {
    "left" : "getRequiredOptions",
    "right" : "getRequiredOptions",
    "info" : "SimpleName[1665-1683]:SimpleName[1708-1726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1686-1725]:Block[1729-1768]"
  }, {
    "left" : "return requiredOptions;",
    "right" : "return requiredOptions;",
    "info" : "ReturnStatement[1696-1719]:ReturnStatement[1739-1762]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[2196-2205]:Modifier[2239-2248]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[2206-2214]:Modifier[2249-2257]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[2215-2223]:ArrayType[2258-2266]"
  }, {
    "left" : "flatten",
    "right" : "flatten",
    "info" : "SimpleName[2224-2231]:SimpleName[2267-2274]"
  }, {
    "left" : "Options opts",
    "right" : "Options opts",
    "info" : "SingleVariableDeclaration[2232-2244]:SingleVariableDeclaration[2275-2287]"
  }, {
    "left" : "String[] arguments",
    "right" : "String[] arguments",
    "info" : "SingleVariableDeclaration[2246-2264]:SingleVariableDeclaration[2289-2307]"
  }, {
    "left" : "boolean stopAtNonOption",
    "right" : "boolean stopAtNonOption",
    "info" : "SingleVariableDeclaration[2307-2330]:SingleVariableDeclaration[2350-2373]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2692-2698]:Modifier[2735-2741]"
  }, {
    "left" : "CommandLine",
    "right" : "CommandLine",
    "info" : "SimpleType[2699-2710]:SimpleType[2742-2753]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[2711-2716]:SimpleName[2754-2759]"
  }, {
    "left" : "Options options",
    "right" : "Options options",
    "info" : "SingleVariableDeclaration[2717-2732]:SingleVariableDeclaration[2760-2775]"
  }, {
    "left" : "String[] arguments",
    "right" : "String[] arguments",
    "info" : "SingleVariableDeclaration[2734-2752]:SingleVariableDeclaration[2777-2795]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[2783-2797]:SimpleType[2826-2840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2802-2864]:Block[2845-2907]"
  }, {
    "left" : "return parse(options, arguments, null, false);",
    "right" : "return parse(options, arguments, null, false);",
    "info" : "ReturnStatement[2812-2858]:ReturnStatement[2855-2901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3314-3320]:Modifier[3357-3363]"
  }, {
    "left" : "CommandLine",
    "right" : "CommandLine",
    "info" : "SimpleType[3321-3332]:SimpleType[3364-3375]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[3333-3338]:SimpleName[3376-3381]"
  }, {
    "left" : "Options options",
    "right" : "Options options",
    "info" : "SingleVariableDeclaration[3339-3354]:SingleVariableDeclaration[3382-3397]"
  }, {
    "left" : "String[] arguments",
    "right" : "String[] arguments",
    "info" : "SingleVariableDeclaration[3356-3374]:SingleVariableDeclaration[3399-3417]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[3406-3427]:SingleVariableDeclaration[3449-3470]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[3444-3458]:SimpleType[3487-3501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3463-3531]:Block[3506-3574]"
  }, {
    "left" : "return parse(options, arguments, properties, false);",
    "right" : "return parse(options, arguments, properties, false);",
    "info" : "ReturnStatement[3473-3525]:ReturnStatement[3516-3568]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4090-4096]:Modifier[4133-4139]"
  }, {
    "left" : "CommandLine",
    "right" : "CommandLine",
    "info" : "SimpleType[4097-4108]:SimpleType[4140-4151]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[4109-4114]:SimpleName[4152-4157]"
  }, {
    "left" : "Options options",
    "right" : "Options options",
    "info" : "SingleVariableDeclaration[4115-4130]:SingleVariableDeclaration[4158-4173]"
  }, {
    "left" : "String[] arguments",
    "right" : "String[] arguments",
    "info" : "SingleVariableDeclaration[4132-4150]:SingleVariableDeclaration[4175-4193]"
  }, {
    "left" : "boolean stopAtNonOption",
    "right" : "boolean stopAtNonOption",
    "info" : "SingleVariableDeclaration[4182-4205]:SingleVariableDeclaration[4225-4248]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[4222-4236]:SimpleType[4265-4279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4241-4313]:Block[4284-4356]"
  }, {
    "left" : "return parse(options, arguments, null, stopAtNonOption);",
    "right" : "return parse(options, arguments, null, stopAtNonOption);",
    "info" : "ReturnStatement[4251-4307]:ReturnStatement[4294-4350]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4876-4882]:Modifier[4919-4925]"
  }, {
    "left" : "CommandLine",
    "right" : "CommandLine",
    "info" : "SimpleType[4883-4894]:SimpleType[4926-4937]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[4895-4900]:SimpleName[4938-4943]"
  }, {
    "left" : "Options options",
    "right" : "Options options",
    "info" : "SingleVariableDeclaration[4901-4916]:SingleVariableDeclaration[4944-4959]"
  }, {
    "left" : "String[] arguments",
    "right" : "String[] arguments",
    "info" : "SingleVariableDeclaration[4918-4936]:SingleVariableDeclaration[4961-4979]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[4968-4989]:SingleVariableDeclaration[5011-5032]"
  }, {
    "left" : "boolean stopAtNonOption",
    "right" : "boolean stopAtNonOption",
    "info" : "SingleVariableDeclaration[4991-5014]:SingleVariableDeclaration[5034-5057]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[5031-5045]:SimpleType[5074-5088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5050-7502]:Block[5093-7545]"
  }, {
    "left" : "for (Iterator it = options.helpOptions().iterator(); it.hasNext())",
    "right" : "for (Iterator it = options.helpOptions().iterator(); it.hasNext())",
    "info" : "ForStatement[5140-5295]:ForStatement[5183-5338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5208-5295]:Block[5251-5338]"
  }, {
    "left" : "Option opt = (Option) it.next();",
    "right" : "Option opt = (Option) it.next();",
    "info" : "VariableDeclarationStatement[5222-5254]:VariableDeclarationStatement[5265-5297]"
  }, {
    "left" : "opt.clearValues();",
    "right" : "opt.clearValues();",
    "info" : "ExpressionStatement[5267-5285]:ExpressionStatement[5310-5328]"
  }, {
    "left" : "setOptions(options);",
    "right" : "setOptions(options);",
    "info" : "ExpressionStatement[5335-5355]:ExpressionStatement[5378-5398]"
  }, {
    "left" : "cmd = new CommandLine();",
    "right" : "cmd = new CommandLine();",
    "info" : "ExpressionStatement[5365-5389]:ExpressionStatement[5408-5432]"
  }, {
    "left" : "boolean eatTheRest = false;",
    "right" : "boolean eatTheRest = false;",
    "info" : "VariableDeclarationStatement[5399-5426]:VariableDeclarationStatement[5442-5469]"
  }, {
    "left" : "if (arguments == null)",
    "right" : "if (arguments == null)",
    "info" : "IfStatement[5436-5517]:IfStatement[5479-5560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5467-5517]:Block[5510-5560]"
  }, {
    "left" : "arguments = new String[0];",
    "right" : "arguments = new String[0];",
    "info" : "ExpressionStatement[5481-5507]:ExpressionStatement[5524-5550]"
  }, {
    "left" : "List tokenList = Arrays.asList(flatten(getOptions(), \n                                               arguments, \n                                               stopAtNonOption));",
    "right" : "List tokenList = Arrays.asList(flatten(getOptions(), \n                                               arguments, \n                                               stopAtNonOption));",
    "info" : "VariableDeclarationStatement[5527-5705]:VariableDeclarationStatement[5570-5748]"
  }, {
    "left" : "ListIterator iterator = tokenList.listIterator();",
    "right" : "ListIterator iterator = tokenList.listIterator();",
    "info" : "VariableDeclarationStatement[5715-5764]:VariableDeclarationStatement[5758-5807]"
  }, {
    "left" : "while (iterator.hasNext())",
    "right" : "while (iterator.hasNext())",
    "info" : "WhileStatement[5814-7403]:WhileStatement[5857-7446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5849-7403]:Block[5892-7446]"
  }, {
    "left" : "String t = (String) iterator.next();",
    "right" : "String t = (String) iterator.next();",
    "info" : "VariableDeclarationStatement[5863-5899]:VariableDeclarationStatement[5906-5942]"
  }, {
    "left" : "if (\"--\".equals(t))",
    "right" : "if (\"--\".equals(t))",
    "info" : "IfStatement[5957-6969]:IfStatement[6000-7012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5989-6039]:Block[6032-6082]"
  }, {
    "left" : "eatTheRest = true;",
    "right" : "eatTheRest = true;",
    "info" : "ExpressionStatement[6007-6025]:ExpressionStatement[6050-6068]"
  }, {
    "left" : "if (\"-\".equals(t))",
    "right" : "if (\"-\".equals(t))",
    "info" : "IfStatement[6100-6969]:IfStatement[6143-7012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6131-6350]:Block[6174-6393]"
  }, {
    "left" : "if (stopAtNonOption)",
    "right" : "if (stopAtNonOption)",
    "info" : "IfStatement[6149-6336]:IfStatement[6192-6379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6186-6244]:Block[6229-6287]"
  }, {
    "left" : "eatTheRest = true;",
    "right" : "eatTheRest = true;",
    "info" : "ExpressionStatement[6208-6226]:ExpressionStatement[6251-6269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6282-6336]:Block[6325-6379]"
  }, {
    "left" : "cmd.addArg(t);",
    "right" : "cmd.addArg(t);",
    "info" : "ExpressionStatement[6304-6318]:ExpressionStatement[6347-6361]"
  }, {
    "left" : "if (t.startsWith(\"-\"))",
    "right" : "if (t.startsWith(\"-\"))",
    "info" : "IfStatement[6407-6969]:IfStatement[6450-7012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6442-6739]:Block[6485-6782]"
  }, {
    "left" : "if (stopAtNonOption && !getOptions().hasOption(t))",
    "right" : "if (stopAtNonOption && !getOptions().hasOption(t))",
    "info" : "IfStatement[6460-6725]:IfStatement[6503-6768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6527-6620]:Block[6570-6663]"
  }, {
    "left" : "eatTheRest = true;",
    "right" : "eatTheRest = true;",
    "info" : "ExpressionStatement[6549-6567]:ExpressionStatement[6592-6610]"
  }, {
    "left" : "cmd.addArg(t);",
    "right" : "cmd.addArg(t);",
    "info" : "ExpressionStatement[6588-6602]:ExpressionStatement[6631-6645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6658-6725]:Block[6701-6768]"
  }, {
    "left" : "processOption(t, iterator);",
    "right" : "processOption(t, iterator);",
    "info" : "ExpressionStatement[6680-6707]:ExpressionStatement[6723-6750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6810-6969]:Block[6853-7012]"
  }, {
    "left" : "cmd.addArg(t);",
    "right" : "cmd.addArg(t);",
    "info" : "ExpressionStatement[6828-6842]:ExpressionStatement[6871-6885]"
  }, {
    "left" : "if (stopAtNonOption)",
    "right" : "if (stopAtNonOption)",
    "info" : "IfStatement[6860-6955]:IfStatement[6903-6998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6897-6955]:Block[6940-6998]"
  }, {
    "left" : "eatTheRest = true;",
    "right" : "eatTheRest = true;",
    "info" : "ExpressionStatement[6919-6937]:ExpressionStatement[6962-6980]"
  }, {
    "left" : "if (eatTheRest)",
    "right" : "if (eatTheRest)",
    "info" : "IfStatement[7023-7393]:IfStatement[7066-7436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7051-7393]:Block[7094-7436]"
  }, {
    "left" : "while (iterator.hasNext())",
    "right" : "while (iterator.hasNext())",
    "info" : "WhileStatement[7069-7379]:WhileStatement[7112-7422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7112-7379]:Block[7155-7422]"
  }, {
    "left" : "String str = (String) iterator.next();",
    "right" : "String str = (String) iterator.next();",
    "info" : "VariableDeclarationStatement[7134-7172]:VariableDeclarationStatement[7177-7215]"
  }, {
    "left" : "if (!\"--\".equals(str))",
    "right" : "if (!\"--\".equals(str))",
    "info" : "IfStatement[7254-7361]:IfStatement[7297-7404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7297-7361]:Block[7340-7404]"
  }, {
    "left" : "cmd.addArg(str);",
    "right" : "cmd.addArg(str);",
    "info" : "ExpressionStatement[7323-7339]:ExpressionStatement[7366-7382]"
  }, {
    "left" : "processProperties(properties);",
    "right" : "processProperties(properties);",
    "info" : "ExpressionStatement[7413-7443]:ExpressionStatement[7456-7486]"
  }, {
    "left" : "checkRequiredOptions();",
    "right" : "checkRequiredOptions();",
    "info" : "ExpressionStatement[7452-7475]:ExpressionStatement[7495-7518]"
  }, {
    "left" : "return cmd;",
    "right" : "return cmd;",
    "info" : "ReturnStatement[7485-7496]:ReturnStatement[7528-7539]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7688-7697]:Modifier[7731-7740]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7698-7702]:PrimitiveType[7741-7745]"
  }, {
    "left" : "processProperties",
    "right" : "processProperties",
    "info" : "SimpleName[7703-7720]:SimpleName[7746-7763]"
  }, {
    "left" : "Properties properties",
    "right" : "Properties properties",
    "info" : "SingleVariableDeclaration[7721-7742]:SingleVariableDeclaration[7764-7785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7748-9193]:Block[7791-9236]"
  }, {
    "left" : "if (properties == null)",
    "right" : "if (properties == null)",
    "info" : "IfStatement[7758-7821]:IfStatement[7801-7864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7790-7821]:Block[7833-7864]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7804-7811]:ReturnStatement[7847-7854]"
  }, {
    "left" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
    "right" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
    "info" : "ForStatement[7831-9187]:ForStatement[7874-9230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7910-9187]:Block[7953-9230]"
  }, {
    "left" : "String option = e.nextElement().toString();",
    "right" : "String option = e.nextElement().toString();",
    "info" : "VariableDeclarationStatement[7924-7967]:VariableDeclarationStatement[7967-8010]"
  }, {
    "left" : "if (!cmd.hasOption(option))",
    "right" : "if (!cmd.hasOption(option))",
    "info" : "IfStatement[7981-9177]:IfStatement[8024-9220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8021-9177]:Block[8064-9220]"
  }, {
    "left" : "Option opt = getOptions().getOption(option);",
    "right" : "Option opt = getOptions().getOption(option);",
    "info" : "VariableDeclarationStatement[8039-8083]:VariableDeclarationStatement[8082-8126]"
  }, {
    "left" : "String value = properties.getProperty(option);",
    "right" : "String value = properties.getProperty(option);",
    "info" : "VariableDeclarationStatement[8163-8209]:VariableDeclarationStatement[8206-8252]"
  }, {
    "left" : "if (opt.hasArg())",
    "right" : "if (opt.hasArg())",
    "info" : "IfStatement[8227-9126]:IfStatement[8270-9169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8261-8758]:Block[8304-8801]"
  }, {
    "left" : "if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))",
    "right" : "if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))",
    "info" : "IfStatement[8283-8740]:IfStatement[8326-8783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8391-8740]:Block[8434-8783]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8417-8718]:TryStatement[8460-8761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8445-8534]:Block[8488-8577]"
  }, {
    "left" : "opt.addValueForProcessing(value);",
    "right" : "opt.addValueForProcessing(value);",
    "info" : "ExpressionStatement[8475-8508]:ExpressionStatement[8518-8551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8612-8718]:Block[8655-8761]"
  }, {
    "left" : "if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))",
    "right" : "if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))",
    "info" : "IfStatement[8780-9126]:IfStatement[8823-9169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8954-9126]:Block[8997-9169]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9102-9108]:BreakStatement[9145-9151]"
  }, {
    "left" : "cmd.addOption(opt);",
    "right" : "cmd.addOption(opt);",
    "info" : "ExpressionStatement[9144-9163]:ExpressionStatement[9187-9206]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9423-9432]:Modifier[9466-9475]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9433-9437]:PrimitiveType[9476-9480]"
  }, {
    "left" : "checkRequiredOptions",
    "right" : "checkRequiredOptions",
    "info" : "SimpleName[9438-9458]:SimpleName[9481-9501]"
  }, {
    "left" : "MissingOptionException",
    "right" : "MissingOptionException",
    "info" : "SimpleType[9476-9498]:SimpleType[9519-9541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9503-10172]:Block[9546-10215]"
  }, {
    "left" : "if (getRequiredOptions().size() > 0)",
    "right" : "if (getRequiredOptions().size() > 0)",
    "info" : "IfStatement[9595-10166]:IfStatement[9638-10209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9640-10166]:Block[9683-10209]"
  }, {
    "left" : "Iterator iter = getRequiredOptions().iterator();",
    "right" : "Iterator iter = getRequiredOptions().iterator();",
    "info" : "VariableDeclarationStatement[9654-9702]:VariableDeclarationStatement[9697-9745]"
  }, {
    "left" : "StringBuffer buff = new StringBuffer(\"Missing required option\");",
    "right" : "StringBuffer buff = new StringBuffer(\"Missing required option\");",
    "info" : "VariableDeclarationStatement[9715-9779]:VariableDeclarationStatement[9758-9822]"
  }, {
    "left" : "buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");",
    "right" : "buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");",
    "info" : "ExpressionStatement[9792-9849]:ExpressionStatement[9835-9892]"
  }, {
    "left" : "buff.append(\": \");",
    "right" : "buff.append(\": \");",
    "info" : "ExpressionStatement[9862-9880]:ExpressionStatement[9905-9923]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[9944-10071]:WhileStatement[9987-10114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9979-10071]:Block[10022-10114]"
  }, {
    "left" : "buff.append(iter.next());",
    "right" : "buff.append(iter.next());",
    "info" : "ExpressionStatement[9997-10022]:ExpressionStatement[10040-10065]"
  }, {
    "left" : "buff.append(\", \");",
    "right" : "buff.append(\", \");",
    "info" : "ExpressionStatement[10039-10057]:ExpressionStatement[10082-10100]"
  }, {
    "left" : "throw new MissingOptionException(buff.substring(0, buff.length() - 2));",
    "right" : "throw new MissingOptionException(buff.substring(0, buff.length() - 2));",
    "info" : "ThrowStatement[10085-10156]:ThrowStatement[10128-10199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10594-10600]:Modifier[10637-10643]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10601-10605]:PrimitiveType[10644-10648]"
  }, {
    "left" : "processArgs",
    "right" : "processArgs",
    "info" : "SimpleName[10606-10617]:SimpleName[10649-10660]"
  }, {
    "left" : "Option opt",
    "right" : "Option opt",
    "info" : "SingleVariableDeclaration[10618-10628]:SingleVariableDeclaration[10661-10671]"
  }, {
    "left" : "ListIterator iter",
    "right" : "ListIterator iter",
    "info" : "SingleVariableDeclaration[10630-10647]:SingleVariableDeclaration[10673-10690]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[10664-10678]:SimpleType[10707-10721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10683-11542]:Block[10726-11585]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[10734-11309]:WhileStatement[10777-11352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10765-11309]:Block[10808-11352]"
  }, {
    "left" : "String str = (String) iter.next();",
    "right" : "String str = (String) iter.next();",
    "info" : "VariableDeclarationStatement[10779-10813]:VariableDeclarationStatement[10822-10856]"
  }, {
    "left" : "if (getOptions().hasOption(str) && str.startsWith(\"-\"))",
    "right" : "if (getOptions().hasOption(str) && str.startsWith(\"-\"))",
    "info" : "IfStatement[10875-11014]:IfStatement[10918-11057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10943-11014]:Block[10986-11057]"
  }, {
    "left" : "iter.previous();",
    "right" : "iter.previous();",
    "info" : "ExpressionStatement[10961-10977]:ExpressionStatement[11004-11020]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10994-11000]:BreakStatement[11037-11043]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[11057-11299]:TryStatement[11100-11342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11073-11174]:Block[11116-11217]"
  }, {
    "left" : "opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) );",
    "right" : "opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) );",
    "info" : "ExpressionStatement[11091-11160]:ExpressionStatement[11134-11203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11228-11299]:Block[11271-11342]"
  }, {
    "left" : "iter.previous();",
    "right" : "iter.previous();",
    "info" : "ExpressionStatement[11246-11262]:ExpressionStatement[11289-11305]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11279-11285]:BreakStatement[11322-11328]"
  }, {
    "left" : "if ((opt.getValues() == null) && !opt.hasOptionalArg())",
    "right" : "if ((opt.getValues() == null) && !opt.hasOptionalArg())",
    "info" : "IfStatement[11319-11536]:IfStatement[11362-11579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11383-11536]:Block[11426-11579]"
  }, {
    "left" : "throw new MissingArgumentException(\"Missing argument for option:\"\n                                               + opt.getKey());",
    "right" : "throw new MissingArgumentException(\"Missing argument for option:\"\n                                               + opt.getKey());",
    "info" : "ThrowStatement[11397-11526]:ThrowStatement[11440-11569]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[11951-11960]:Modifier[11994-12003]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11961-11965]:PrimitiveType[12004-12008]"
  }, {
    "left" : "processOption",
    "right" : "processOption",
    "info" : "SimpleName[11966-11979]:SimpleName[12009-12022]"
  }, {
    "left" : "String arg",
    "right" : "String arg",
    "info" : "SingleVariableDeclaration[11980-11990]:SingleVariableDeclaration[12023-12033]"
  }, {
    "left" : "ListIterator iter",
    "right" : "ListIterator iter",
    "info" : "SingleVariableDeclaration[11992-12009]:SingleVariableDeclaration[12035-12052]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[12026-12040]:SimpleType[12069-12083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12045-13288]:Block[12088-13331]"
  }, {
    "left" : "boolean hasOption = getOptions().hasOption(arg);",
    "right" : "boolean hasOption = getOptions().hasOption(arg);",
    "info" : "VariableDeclarationStatement[12055-12103]:VariableDeclarationStatement[12098-12146]"
  }, {
    "left" : "if (!hasOption)",
    "right" : "if (!hasOption)",
    "info" : "IfStatement[12183-12351]:IfStatement[12226-12394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12207-12351]:Block[12250-12394]"
  }, {
    "left" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                  + arg);",
    "right" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                  + arg);",
    "info" : "ThrowStatement[12221-12341]:ThrowStatement[12264-12384]"
  }, {
    "left" : "final Option opt = getOptions().getOption(arg);",
    "right" : "final Option opt = getOptions().getOption(arg);",
    "info" : "VariableDeclarationStatement[12414-12461]:VariableDeclarationStatement[12457-12504]"
  }, {
    "left" : "if (opt.isRequired())",
    "right" : "if (opt.isRequired())",
    "info" : "IfStatement[12576-12672]:IfStatement[12619-12715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12606-12672]:Block[12649-12715]"
  }, {
    "left" : "getRequiredOptions().remove(opt.getKey());",
    "right" : "getRequiredOptions().remove(opt.getKey());",
    "info" : "ExpressionStatement[12620-12662]:ExpressionStatement[12663-12705]"
  }, {
    "left" : "if (getOptions().getOptionGroup(opt) != null)",
    "right" : "if (getOptions().getOptionGroup(opt) != null)",
    "info" : "IfStatement[12789-13074]:IfStatement[12832-13117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12843-13074]:Block[12886-13117]"
  }, {
    "left" : "OptionGroup group = getOptions().getOptionGroup(opt);",
    "right" : "OptionGroup group = getOptions().getOptionGroup(opt);",
    "info" : "VariableDeclarationStatement[12857-12910]:VariableDeclarationStatement[12900-12953]"
  }, {
    "left" : "if (group.isRequired())",
    "right" : "if (group.isRequired())",
    "info" : "IfStatement[12924-13027]:IfStatement[12967-13070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12960-13027]:Block[13003-13070]"
  }, {
    "left" : "getRequiredOptions().remove(group);",
    "right" : "getRequiredOptions().remove(group);",
    "info" : "ExpressionStatement[12978-13013]:ExpressionStatement[13021-13056]"
  }, {
    "left" : "group.setSelected(opt);",
    "right" : "group.setSelected(opt);",
    "info" : "ExpressionStatement[13041-13064]:ExpressionStatement[13084-13107]"
  }, {
    "left" : "if (opt.hasArg())",
    "right" : "if (opt.hasArg())",
    "info" : "IfStatement[13133-13206]:IfStatement[13176-13249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13159-13206]:Block[13202-13249]"
  }, {
    "left" : "processArgs(opt, iter);",
    "right" : "processArgs(opt, iter);",
    "info" : "ExpressionStatement[13173-13196]:ExpressionStatement[13216-13239]"
  }, {
    "left" : "cmd.addOption(opt);",
    "right" : "cmd.addOption(opt);",
    "info" : "ExpressionStatement[13263-13282]:ExpressionStatement[13306-13325]"
  } ]
}