{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "TypeDeclaration[1463-26377]:TypeDeclaration[1463-26438]"
    }, {
      "left" : "public static final int LONGFILE_ERROR = 0;",
      "right" : "public static final int LONGFILE_ERROR = 0;",
      "info" : "FieldDeclaration[1742-1849]:FieldDeclaration[1742-1849]"
    }, {
      "left" : "public static final int LONGFILE_TRUNCATE = 1;",
      "right" : "public static final int LONGFILE_TRUNCATE = 1;",
      "info" : "FieldDeclaration[1855-1957]:FieldDeclaration[1855-1957]"
    }, {
      "left" : "public static final int LONGFILE_GNU = 2;",
      "right" : "public static final int LONGFILE_GNU = 2;",
      "info" : "FieldDeclaration[1963-2084]:FieldDeclaration[1963-2084]"
    }, {
      "left" : "public static final int LONGFILE_POSIX = 3;",
      "right" : "public static final int LONGFILE_POSIX = 3;",
      "info" : "FieldDeclaration[2090-2215]:FieldDeclaration[2090-2215]"
    }, {
      "left" : "public static final int BIGNUMBER_ERROR = 0;",
      "right" : "public static final int BIGNUMBER_ERROR = 0;",
      "info" : "FieldDeclaration[2221-2347]:FieldDeclaration[2221-2347]"
    }, {
      "left" : "public static final int BIGNUMBER_STAR = 1;",
      "right" : "public static final int BIGNUMBER_STAR = 1;",
      "info" : "FieldDeclaration[2353-2484]:FieldDeclaration[2353-2484]"
    }, {
      "left" : "public static final int BIGNUMBER_POSIX = 2;",
      "right" : "public static final int BIGNUMBER_POSIX = 2;",
      "info" : "FieldDeclaration[2490-2612]:FieldDeclaration[2490-2612]"
    }, {
      "left" : "private long      currSize;",
      "right" : "private long      currSize;",
      "info" : "FieldDeclaration[2618-2645]:FieldDeclaration[2618-2645]"
    }, {
      "left" : "private String    currName;",
      "right" : "private String    currName;",
      "info" : "FieldDeclaration[2650-2677]:FieldDeclaration[2650-2677]"
    }, {
      "left" : "private long      currBytes;",
      "right" : "private long      currBytes;",
      "info" : "FieldDeclaration[2682-2710]:FieldDeclaration[2682-2710]"
    }, {
      "left" : "private final byte[]    recordBuf;",
      "right" : "private final byte[]    recordBuf;",
      "info" : "FieldDeclaration[2715-2749]:FieldDeclaration[2715-2749]"
    }, {
      "left" : "private int       assemLen;",
      "right" : "private int       assemLen;",
      "info" : "FieldDeclaration[2754-2781]:FieldDeclaration[2754-2781]"
    }, {
      "left" : "private final byte[]    assemBuf;",
      "right" : "private final byte[]    assemBuf;",
      "info" : "FieldDeclaration[2786-2819]:FieldDeclaration[2786-2819]"
    }, {
      "left" : "private int       longFileMode = LONGFILE_ERROR;",
      "right" : "private int       longFileMode = LONGFILE_ERROR;",
      "info" : "FieldDeclaration[2824-2872]:FieldDeclaration[2824-2872]"
    }, {
      "left" : "private int       bigNumberMode = BIGNUMBER_ERROR;",
      "right" : "private int       bigNumberMode = BIGNUMBER_ERROR;",
      "info" : "FieldDeclaration[2877-2927]:FieldDeclaration[2877-2927]"
    }, {
      "left" : "private int recordsWritten;",
      "right" : "private int recordsWritten;",
      "info" : "FieldDeclaration[2932-2959]:FieldDeclaration[2932-2959]"
    }, {
      "left" : "private final int recordsPerBlock;",
      "right" : "private final int recordsPerBlock;",
      "info" : "FieldDeclaration[2964-2998]:FieldDeclaration[2964-2998]"
    }, {
      "left" : "private final int recordSize;",
      "right" : "private final int recordSize;",
      "info" : "FieldDeclaration[3003-3032]:FieldDeclaration[3003-3032]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[3038-3069]:FieldDeclaration[3038-3069]"
    }, {
      "left" : "private boolean haveUnclosedEntry = false;",
      "right" : "private boolean haveUnclosedEntry = false;",
      "info" : "FieldDeclaration[3075-3199]:FieldDeclaration[3075-3199]"
    }, {
      "left" : "private boolean finished = false;",
      "right" : "private boolean finished = false;",
      "info" : "FieldDeclaration[3205-3287]:FieldDeclaration[3205-3287]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[3293-3324]:FieldDeclaration[3293-3324]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[3330-3368]:FieldDeclaration[3330-3368]"
    }, {
      "left" : "private boolean addPaxHeadersForNonAsciiNames = false;",
      "right" : "private boolean addPaxHeadersForNonAsciiNames = false;",
      "info" : "FieldDeclaration[3421-3475]:FieldDeclaration[3448-3502]"
    }, {
      "left" : "private static final ZipEncoding ASCII =\n        ZipEncodingHelper.getZipEncoding(\"ASCII\");",
      "right" : "private static final ZipEncoding ASCII =\n        ZipEncodingHelper.getZipEncoding(\"ASCII\");",
      "info" : "FieldDeclaration[3480-3571]:FieldDeclaration[3507-3598]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os)",
      "right" : "public TarArchiveOutputStream(OutputStream os)",
      "info" : "MethodDeclaration[3577-3806]:MethodDeclaration[3604-3833]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, String encoding)",
      "right" : "public TarArchiveOutputStream(OutputStream os, String encoding)",
      "info" : "MethodDeclaration[3812-4152]:MethodDeclaration[3839-4179]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "info" : "MethodDeclaration[4158-4429]:MethodDeclaration[4185-4456]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  String encoding)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  String encoding)",
      "info" : "MethodDeclaration[4435-4851]:MethodDeclaration[4462-4878]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[4857-5180]:MethodDeclaration[4884-5207]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  int recordSize, String encoding)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                  int recordSize, String encoding)",
      "info" : "MethodDeclaration[5186-5926]:MethodDeclaration[5213-5987]"
    }, {
      "left" : "public void setLongFileMode(int longFileMode)",
      "right" : "public void setLongFileMode(int longFileMode)",
      "info" : "MethodDeclaration[5932-6321]:MethodDeclaration[5993-6382]"
    }, {
      "left" : "public void setBigNumberMode(int bigNumberMode)",
      "right" : "public void setBigNumberMode(int bigNumberMode)",
      "info" : "MethodDeclaration[6327-6804]:MethodDeclaration[6388-6865]"
    }, {
      "left" : "public void setAddPaxHeadersForNonAsciiNames(boolean b)",
      "right" : "public void setAddPaxHeadersForNonAsciiNames(boolean b)",
      "info" : "MethodDeclaration[6810-7021]:MethodDeclaration[6871-7082]"
    }, {
      "left" : "public int getCount()",
      "right" : "public int getCount()",
      "info" : "MethodDeclaration[7027-7126]:MethodDeclaration[7088-7187]"
    }, {
      "left" : "public long getBytesWritten()",
      "right" : "public long getBytesWritten()",
      "info" : "MethodDeclaration[7132-7246]:MethodDeclaration[7193-7307]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[7252-8033]:MethodDeclaration[7313-8094]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[8039-8337]:MethodDeclaration[8100-8398]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[8343-8540]:MethodDeclaration[8404-8601]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "info" : "MethodDeclaration[8546-11172]:MethodDeclaration[8607-11233]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[11178-12511]:MethodDeclaration[11239-12572]"
    }, {
      "left" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
      "right" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
      "info" : "MethodDeclaration[12517-15531]:MethodDeclaration[12578-15592]"
    }, {
      "left" : "void writePaxHeaders(TarArchiveEntry entry,\n                         String entryName,\n                         Map<String, String> headers) throws IOException",
      "right" : "void writePaxHeaders(TarArchiveEntry entry,\n                         String entryName,\n                         Map<String, String> headers) throws IOException",
      "info" : "MethodDeclaration[15537-17395]:MethodDeclaration[15598-17456]"
    }, {
      "left" : "private String stripTo7Bits(String name)",
      "right" : "private String stripTo7Bits(String name)",
      "info" : "MethodDeclaration[17401-17854]:MethodDeclaration[17462-17915]"
    }, {
      "left" : "private boolean shouldBeReplaced(char c)",
      "right" : "private boolean shouldBeReplaced(char c)",
      "info" : "MethodDeclaration[17860-18285]:MethodDeclaration[17921-18346]"
    }, {
      "left" : "private void writeEOFRecord() throws IOException",
      "right" : "private void writeEOFRecord() throws IOException",
      "info" : "MethodDeclaration[18291-18557]:MethodDeclaration[18352-18618]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[18563-18644]:MethodDeclaration[18624-18705]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[18650-18937]:MethodDeclaration[18711-18998]"
    }, {
      "left" : "private void writeRecord(byte[] record) throws IOException",
      "right" : "private void writeRecord(byte[] record) throws IOException",
      "info" : "MethodDeclaration[18947-19532]:MethodDeclaration[19008-19593]"
    }, {
      "left" : "private void writeRecord(byte[] buf, int offset) throws IOException",
      "right" : "private void writeRecord(byte[] buf, int offset) throws IOException",
      "info" : "MethodDeclaration[19542-20372]:MethodDeclaration[19603-20433]"
    }, {
      "left" : "private void padAsNeeded() throws IOException",
      "right" : "private void padAsNeeded() throws IOException",
      "info" : "MethodDeclaration[20378-20629]:MethodDeclaration[20439-20690]"
    }, {
      "left" : "private void addPaxHeadersForBigNumbers(Map<String, String> paxHeaders,\n                                            TarArchiveEntry entry)",
      "right" : "private void addPaxHeadersForBigNumbers(Map<String, String> paxHeaders,\n                                            TarArchiveEntry entry)",
      "info" : "MethodDeclaration[20635-21785]:MethodDeclaration[20696-21846]"
    }, {
      "left" : "private void addPaxHeaderForBigNumber(Map<String, String> paxHeaders,\n                                          String header, long value,\n                                          long maxValue)",
      "right" : "private void addPaxHeaderForBigNumber(Map<String, String> paxHeaders,\n                                          String header, long value,\n                                          long maxValue)",
      "info" : "MethodDeclaration[21791-22108]:MethodDeclaration[21852-22169]"
    }, {
      "left" : "private void failForBigNumbers(TarArchiveEntry entry)",
      "right" : "private void failForBigNumbers(TarArchiveEntry entry)",
      "info" : "MethodDeclaration[22114-22886]:MethodDeclaration[22175-22947]"
    }, {
      "left" : "private void failForBigNumber(String field, long value, long maxValue)",
      "right" : "private void failForBigNumber(String field, long value, long maxValue)",
      "info" : "MethodDeclaration[22892-23024]:MethodDeclaration[22953-23085]"
    }, {
      "left" : "private void failForBigNumberWithPosixMessage(String field, long value, long maxValue)",
      "right" : "private void failForBigNumberWithPosixMessage(String field, long value, long maxValue)",
      "info" : "MethodDeclaration[23030-23230]:MethodDeclaration[23091-23291]"
    }, {
      "left" : "private void failForBigNumber(String field, long value, long maxValue, String additionalMsg)",
      "right" : "private void failForBigNumber(String field, long value, long maxValue, String additionalMsg)",
      "info" : "MethodDeclaration[23236-23550]:MethodDeclaration[23297-23611]"
    }, {
      "left" : "private boolean handleLongName(TarArchiveEntry entry , String name,\n                                   Map<String, String> paxHeaders,\n                                   String paxHeaderName, byte linkType, String fieldName)\n        throws IOException",
      "right" : "private boolean handleLongName(TarArchiveEntry entry , String name,\n                                   Map<String, String> paxHeaders,\n                                   String paxHeaderName, byte linkType, String fieldName)\n        throws IOException",
      "info" : "MethodDeclaration[23556-26013]:MethodDeclaration[23617-26074]"
    }, {
      "left" : "private void transferModTime(TarArchiveEntry from, TarArchiveEntry to)",
      "right" : "private void transferModTime(TarArchiveEntry from, TarArchiveEntry to)",
      "info" : "MethodDeclaration[26019-26375]:MethodDeclaration[26080-26436]"
    } ],
    "mappings" : [
 {
      "left" : "ArchiveOutputStream",
      "right" : "ArchiveOutputStream",
      "info" : "SimpleType[1716-1735]:SimpleType[1716-1735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3674-3680]:Modifier[3701-3707]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[3681-3703]:SimpleName[3708-3730]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[3704-3719]:SingleVariableDeclaration[3731-3746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3721-3806]:Block[3748-3833]"
    }, {
      "left" : "this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[3731-3800]:ConstructorInvocation[3758-3827]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3993-3999]:Modifier[4020-4026]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[4000-4022]:SimpleName[4027-4049]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[4023-4038]:SingleVariableDeclaration[4050-4065]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[4040-4055]:SingleVariableDeclaration[4067-4082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4057-4152]:Block[4084-4179]"
    }, {
      "left" : "this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[4067-4146]:ConstructorInvocation[4094-4173]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4301-4307]:Modifier[4328-4334]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[4308-4330]:SimpleName[4335-4357]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[4331-4346]:SingleVariableDeclaration[4358-4373]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4348-4361]:SingleVariableDeclaration[4375-4388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4363-4429]:Block[4390-4456]"
    }, {
      "left" : "this(os, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(os, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[4373-4423]:ConstructorInvocation[4400-4450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4662-4668]:Modifier[4689-4695]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[4669-4691]:SimpleName[4696-4718]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[4692-4707]:SingleVariableDeclaration[4719-4734]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4709-4722]:SingleVariableDeclaration[4736-4749]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[4758-4773]:SingleVariableDeclaration[4785-4800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4775-4851]:Block[4802-4878]"
    }, {
      "left" : "this(os, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(os, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[4785-4845]:ConstructorInvocation[4812-4872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5048-5054]:Modifier[5075-5081]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[5055-5077]:SimpleName[5082-5104]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[5078-5093]:SingleVariableDeclaration[5105-5120]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[5095-5108]:SingleVariableDeclaration[5122-5135]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[5110-5124]:SingleVariableDeclaration[5137-5151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5126-5180]:Block[5153-5207]"
    }, {
      "left" : "this(os, blockSize, recordSize, null);",
      "right" : "this(os, blockSize, recordSize, null);",
      "info" : "ConstructorInvocation[5136-5174]:ConstructorInvocation[5163-5201]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5461-5467]:Modifier[5488-5494]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[5468-5490]:SimpleName[5495-5517]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[5491-5506]:SingleVariableDeclaration[5518-5533]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[5508-5521]:SingleVariableDeclaration[5535-5548]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[5557-5571]:SingleVariableDeclaration[5584-5598]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[5573-5588]:SingleVariableDeclaration[5600-5615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5590-5926]:Block[5617-5987]"
    }, {
      "left" : "out = new CountingOutputStream(os);",
      "right" : "out = new CountingOutputStream(os);",
      "info" : "ExpressionStatement[5600-5635]:ExpressionStatement[5627-5662]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[5644-5706]:ExpressionStatement[5705-5767]"
    }, {
      "left" : "this.assemLen = 0;",
      "right" : "this.assemLen = 0;",
      "info" : "ExpressionStatement[5716-5734]:ExpressionStatement[5777-5795]"
    }, {
      "left" : "this.assemBuf = new byte[recordSize];",
      "right" : "this.assemBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[5743-5780]:ExpressionStatement[5804-5841]"
    }, {
      "left" : "this.recordBuf = new byte[recordSize];",
      "right" : "this.recordBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[5789-5827]:ExpressionStatement[5850-5888]"
    }, {
      "left" : "this.recordSize = recordSize;",
      "right" : "this.recordSize = recordSize;",
      "info" : "ExpressionStatement[5836-5865]:ExpressionStatement[5897-5926]"
    }, {
      "left" : "this.recordsPerBlock = blockSize / recordSize;",
      "right" : "this.recordsPerBlock = blockSize / recordSize;",
      "info" : "ExpressionStatement[5874-5920]:ExpressionStatement[5935-5981]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6226-6232]:Modifier[6287-6293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6233-6237]:PrimitiveType[6294-6298]"
    }, {
      "left" : "setLongFileMode",
      "right" : "setLongFileMode",
      "info" : "SimpleName[6238-6253]:SimpleName[6299-6314]"
    }, {
      "left" : "int longFileMode",
      "right" : "int longFileMode",
      "info" : "SingleVariableDeclaration[6254-6270]:SingleVariableDeclaration[6315-6331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6272-6321]:Block[6333-6382]"
    }, {
      "left" : "this.longFileMode = longFileMode;",
      "right" : "this.longFileMode = longFileMode;",
      "info" : "ExpressionStatement[6282-6315]:ExpressionStatement[6343-6376]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6705-6711]:Modifier[6766-6772]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6712-6716]:PrimitiveType[6773-6777]"
    }, {
      "left" : "setBigNumberMode",
      "right" : "setBigNumberMode",
      "info" : "SimpleName[6717-6733]:SimpleName[6778-6794]"
    }, {
      "left" : "int bigNumberMode",
      "right" : "int bigNumberMode",
      "info" : "SingleVariableDeclaration[6734-6751]:SingleVariableDeclaration[6795-6812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6753-6804]:Block[6814-6865]"
    }, {
      "left" : "this.bigNumberMode = bigNumberMode;",
      "right" : "this.bigNumberMode = bigNumberMode;",
      "info" : "ExpressionStatement[6763-6798]:ExpressionStatement[6824-6859]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6915-6921]:Modifier[6976-6982]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6922-6926]:PrimitiveType[6983-6987]"
    }, {
      "left" : "setAddPaxHeadersForNonAsciiNames",
      "right" : "setAddPaxHeadersForNonAsciiNames",
      "info" : "SimpleName[6927-6959]:SimpleName[6988-7020]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[6960-6969]:SingleVariableDeclaration[7021-7030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6971-7021]:Block[7032-7082]"
    }, {
      "left" : "addPaxHeadersForNonAsciiNames = b;",
      "right" : "addPaxHeadersForNonAsciiNames = b;",
      "info" : "ExpressionStatement[6981-7015]:ExpressionStatement[7042-7076]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[7027-7038]:MarkerAnnotation[7088-7099]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7043-7052]:MarkerAnnotation[7104-7113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7057-7063]:Modifier[7118-7124]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7064-7067]:PrimitiveType[7125-7128]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[7068-7076]:SimpleName[7129-7137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7079-7126]:Block[7140-7187]"
    }, {
      "left" : "return (int) getBytesWritten();",
      "right" : "return (int) getBytesWritten();",
      "info" : "ReturnStatement[7089-7120]:ReturnStatement[7150-7181]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7132-7141]:MarkerAnnotation[7193-7202]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7146-7152]:Modifier[7207-7213]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[7153-7157]:PrimitiveType[7214-7218]"
    }, {
      "left" : "getBytesWritten",
      "right" : "getBytesWritten",
      "info" : "SimpleName[7158-7173]:SimpleName[7219-7234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7176-7246]:Block[7237-7307]"
    }, {
      "left" : "return ((CountingOutputStream) out).getBytesWritten();",
      "right" : "return ((CountingOutputStream) out).getBytesWritten();",
      "info" : "ReturnStatement[7186-7240]:ReturnStatement[7247-7301]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7617-7626]:MarkerAnnotation[7678-7687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7631-7637]:Modifier[7692-7698]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7638-7642]:PrimitiveType[7699-7703]"
    }, {
      "left" : "finish",
      "right" : "finish",
      "info" : "SimpleName[7643-7649]:SimpleName[7704-7710]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7659-7670]:SimpleType[7720-7731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7671-8033]:Block[7732-8094]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[7681-7783]:IfStatement[7742-7844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7695-7783]:Block[7756-7844]"
    }, {
      "left" : "throw new IOException(\"This archive has already been finished\");",
      "right" : "throw new IOException(\"This archive has already been finished\");",
      "info" : "ThrowStatement[7709-7773]:ThrowStatement[7770-7834]"
    }, {
      "left" : "if (haveUnclosedEntry)",
      "right" : "if (haveUnclosedEntry)",
      "info" : "IfStatement[7793-7906]:IfStatement[7854-7967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7816-7906]:Block[7877-7967]"
    }, {
      "left" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "info" : "ThrowStatement[7830-7896]:ThrowStatement[7891-7957]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[7915-7932]:ExpressionStatement[7976-7993]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[7941-7958]:ExpressionStatement[8002-8019]"
    }, {
      "left" : "padAsNeeded();",
      "right" : "padAsNeeded();",
      "info" : "ExpressionStatement[7967-7981]:ExpressionStatement[8028-8042]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[7990-8002]:ExpressionStatement[8051-8063]"
    }, {
      "left" : "finished = true;",
      "right" : "finished = true;",
      "info" : "ExpressionStatement[8011-8027]:ExpressionStatement[8072-8088]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8134-8143]:MarkerAnnotation[8195-8204]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8148-8154]:Modifier[8209-8215]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8155-8159]:PrimitiveType[8216-8220]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[8160-8165]:SimpleName[8221-8226]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8175-8186]:SimpleType[8236-8247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8187-8337]:Block[8248-8398]"
    }, {
      "left" : "if (!finished)",
      "right" : "if (!finished)",
      "info" : "IfStatement[8197-8245]:IfStatement[8258-8306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8212-8245]:Block[8273-8306]"
    }, {
      "left" : "finish();",
      "right" : "finish();",
      "info" : "ExpressionStatement[8226-8235]:ExpressionStatement[8287-8296]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[8255-8331]:IfStatement[8316-8392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8268-8331]:Block[8329-8392]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[8282-8294]:ExpressionStatement[8343-8355]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[8307-8321]:ExpressionStatement[8368-8382]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8474-8480]:Modifier[8535-8541]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8481-8484]:PrimitiveType[8542-8545]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[8485-8498]:SimpleName[8546-8559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8501-8540]:Block[8562-8601]"
    }, {
      "left" : "return this.recordSize;",
      "right" : "return this.recordSize;",
      "info" : "ReturnStatement[8511-8534]:ReturnStatement[8572-8595]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9206-9215]:MarkerAnnotation[9267-9276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9220-9226]:Modifier[9281-9287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9227-9231]:PrimitiveType[9288-9292]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[9232-9247]:SimpleName[9293-9308]"
    }, {
      "left" : "ArchiveEntry archiveEntry",
      "right" : "ArchiveEntry archiveEntry",
      "info" : "SingleVariableDeclaration[9248-9273]:SingleVariableDeclaration[9309-9334]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9282-9293]:SimpleType[9343-9354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9294-11172]:Block[9355-11233]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[9304-9400]:IfStatement[9365-9461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9318-9400]:Block[9379-9461]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[9332-9390]:ThrowStatement[9393-9451]"
    }, {
      "left" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "right" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "info" : "VariableDeclarationStatement[9409-9464]:VariableDeclarationStatement[9470-9525]"
    }, {
      "left" : "Map<String, String> paxHeaders = new HashMap<String, String>();",
      "right" : "Map<String, String> paxHeaders = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[9473-9536]:VariableDeclarationStatement[9534-9597]"
    }, {
      "left" : "final String entryName = entry.getName();",
      "right" : "final String entryName = entry.getName();",
      "info" : "VariableDeclarationStatement[9545-9586]:VariableDeclarationStatement[9606-9647]"
    }, {
      "left" : "boolean paxHeaderContainsPath = handleLongName(entry, entryName, paxHeaders, \"path\",\n                                                       TarConstants.LF_GNUTYPE_LONGNAME, \"file name\");",
      "right" : "boolean paxHeaderContainsPath = handleLongName(entry, entryName, paxHeaders, \"path\",\n                                                       TarConstants.LF_GNUTYPE_LONGNAME, \"file name\");",
      "info" : "VariableDeclarationStatement[9595-9782]:VariableDeclarationStatement[9656-9843]"
    }, {
      "left" : "final String linkName = entry.getLinkName();",
      "right" : "final String linkName = entry.getLinkName();",
      "info" : "VariableDeclarationStatement[9792-9836]:VariableDeclarationStatement[9853-9897]"
    }, {
      "left" : "boolean paxHeaderContainsLinkPath = linkName != null && linkName.length() > 0\n            && handleLongName(entry, linkName, paxHeaders, \"linkpath\",\n                              TarConstants.LF_GNUTYPE_LONGLINK, \"link name\");",
      "right" : "boolean paxHeaderContainsLinkPath = linkName != null && linkName.length() > 0\n            && handleLongName(entry, linkName, paxHeaders, \"linkpath\",\n                              TarConstants.LF_GNUTYPE_LONGLINK, \"link name\");",
      "info" : "VariableDeclarationStatement[9845-10071]:VariableDeclarationStatement[9906-10132]"
    }, {
      "left" : "if (bigNumberMode == BIGNUMBER_POSIX)",
      "right" : "if (bigNumberMode == BIGNUMBER_POSIX)",
      "info" : "IfStatement[10081-10281]:IfStatement[10142-10342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10119-10189]:Block[10180-10250]"
    }, {
      "left" : "addPaxHeadersForBigNumbers(paxHeaders, entry);",
      "right" : "addPaxHeadersForBigNumbers(paxHeaders, entry);",
      "info" : "ExpressionStatement[10133-10179]:ExpressionStatement[10194-10240]"
    }, {
      "left" : "if (bigNumberMode != BIGNUMBER_STAR)",
      "right" : "if (bigNumberMode != BIGNUMBER_STAR)",
      "info" : "IfStatement[10195-10281]:IfStatement[10256-10342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10232-10281]:Block[10293-10342]"
    }, {
      "left" : "failForBigNumbers(entry);",
      "right" : "failForBigNumbers(entry);",
      "info" : "ExpressionStatement[10246-10271]:ExpressionStatement[10307-10332]"
    }, {
      "left" : "if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath\n            && !ASCII.canEncode(entryName))",
      "right" : "if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath\n            && !ASCII.canEncode(entryName))",
      "info" : "IfStatement[10291-10453]:IfStatement[10352-10514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10395-10453]:Block[10456-10514]"
    }, {
      "left" : "paxHeaders.put(\"path\", entryName);",
      "right" : "paxHeaders.put(\"path\", entryName);",
      "info" : "ExpressionStatement[10409-10443]:ExpressionStatement[10470-10504]"
    }, {
      "left" : "if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath\n            && (entry.isLink() || entry.isSymbolicLink())\n            && !ASCII.canEncode(linkName))",
      "right" : "if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath\n            && (entry.isLink() || entry.isSymbolicLink())\n            && !ASCII.canEncode(linkName))",
      "info" : "IfStatement[10463-10689]:IfStatement[10524-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10628-10689]:Block[10689-10750]"
    }, {
      "left" : "paxHeaders.put(\"linkpath\", linkName);",
      "right" : "paxHeaders.put(\"linkpath\", linkName);",
      "info" : "ExpressionStatement[10642-10679]:ExpressionStatement[10703-10740]"
    }, {
      "left" : "if (paxHeaders.size() > 0)",
      "right" : "if (paxHeaders.size() > 0)",
      "info" : "IfStatement[10699-10796]:IfStatement[10760-10857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10726-10796]:Block[10787-10857]"
    }, {
      "left" : "writePaxHeaders(entry, entryName, paxHeaders);",
      "right" : "writePaxHeaders(entry, entryName, paxHeaders);",
      "info" : "ExpressionStatement[10740-10786]:ExpressionStatement[10801-10847]"
    }, {
      "left" : "entry.writeEntryHeader(recordBuf, zipEncoding,\n                               bigNumberMode == BIGNUMBER_STAR);",
      "right" : "entry.writeEntryHeader(recordBuf, zipEncoding,\n                               bigNumberMode == BIGNUMBER_STAR);",
      "info" : "ExpressionStatement[10806-10917]:ExpressionStatement[10867-10978]"
    }, {
      "left" : "writeRecord(recordBuf);",
      "right" : "writeRecord(recordBuf);",
      "info" : "ExpressionStatement[10926-10949]:ExpressionStatement[10987-11010]"
    }, {
      "left" : "currBytes = 0;",
      "right" : "currBytes = 0;",
      "info" : "ExpressionStatement[10959-10973]:ExpressionStatement[11020-11034]"
    }, {
      "left" : "if (entry.isDirectory())",
      "right" : "if (entry.isDirectory())",
      "info" : "IfStatement[10983-11102]:IfStatement[11044-11163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11008-11045]:Block[11069-11106]"
    }, {
      "left" : "currSize = 0;",
      "right" : "currSize = 0;",
      "info" : "ExpressionStatement[11022-11035]:ExpressionStatement[11083-11096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11051-11102]:Block[11112-11163]"
    }, {
      "left" : "currSize = entry.getSize();",
      "right" : "currSize = entry.getSize();",
      "info" : "ExpressionStatement[11065-11092]:ExpressionStatement[11126-11153]"
    }, {
      "left" : "currName = entryName;",
      "right" : "currName = entryName;",
      "info" : "ExpressionStatement[11111-11132]:ExpressionStatement[11172-11193]"
    }, {
      "left" : "haveUnclosedEntry = true;",
      "right" : "haveUnclosedEntry = true;",
      "info" : "ExpressionStatement[11141-11166]:ExpressionStatement[11202-11227]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11631-11640]:MarkerAnnotation[11692-11701]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11645-11651]:Modifier[11706-11712]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11652-11656]:PrimitiveType[11713-11717]"
    }, {
      "left" : "closeArchiveEntry",
      "right" : "closeArchiveEntry",
      "info" : "SimpleName[11657-11674]:SimpleName[11718-11735]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11684-11695]:SimpleType[11745-11756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11696-12511]:Block[11757-12572]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[11706-11802]:IfStatement[11767-11863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11720-11802]:Block[11781-11863]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[11734-11792]:ThrowStatement[11795-11853]"
    }, {
      "left" : "if (!haveUnclosedEntry)",
      "right" : "if (!haveUnclosedEntry)",
      "info" : "IfStatement[11811-11909]:IfStatement[11872-11970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11834-11909]:Block[11895-11970]"
    }, {
      "left" : "throw new IOException(\"No current entry to close\");",
      "right" : "throw new IOException(\"No current entry to close\");",
      "info" : "ThrowStatement[11848-11899]:ThrowStatement[11909-11960]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[11918-12155]:IfStatement[11979-12216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11936-12155]:Block[11997-12216]"
    }, {
      "left" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "right" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "info" : "ForStatement[11950-12047]:ForStatement[12011-12108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11999-12047]:Block[12060-12108]"
    }, {
      "left" : "assemBuf[i] = 0;",
      "right" : "assemBuf[i] = 0;",
      "info" : "ExpressionStatement[12017-12033]:ExpressionStatement[12078-12094]"
    }, {
      "left" : "writeRecord(assemBuf);",
      "right" : "writeRecord(assemBuf);",
      "info" : "ExpressionStatement[12061-12083]:ExpressionStatement[12122-12144]"
    }, {
      "left" : "currBytes += assemLen;",
      "right" : "currBytes += assemLen;",
      "info" : "ExpressionStatement[12097-12119]:ExpressionStatement[12158-12180]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[12132-12145]:ExpressionStatement[12193-12206]"
    }, {
      "left" : "if (currBytes < currSize)",
      "right" : "if (currBytes < currSize)",
      "info" : "IfStatement[12165-12470]:IfStatement[12226-12531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12191-12470]:Block[12252-12531]"
    }, {
      "left" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "right" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "info" : "ThrowStatement[12205-12460]:ThrowStatement[12266-12521]"
    }, {
      "left" : "haveUnclosedEntry = false;",
      "right" : "haveUnclosedEntry = false;",
      "info" : "ExpressionStatement[12479-12505]:ExpressionStatement[12540-12566]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13205-13214]:MarkerAnnotation[13266-13275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13219-13225]:Modifier[13280-13286]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13226-13230]:PrimitiveType[13287-13291]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[13231-13236]:SimpleName[13292-13297]"
    }, {
      "left" : "byte[] wBuf",
      "right" : "byte[] wBuf",
      "info" : "SingleVariableDeclaration[13237-13248]:SingleVariableDeclaration[13298-13309]"
    }, {
      "left" : "int wOffset",
      "right" : "int wOffset",
      "info" : "SingleVariableDeclaration[13250-13261]:SingleVariableDeclaration[13311-13322]"
    }, {
      "left" : "int numToWrite",
      "right" : "int numToWrite",
      "info" : "SingleVariableDeclaration[13263-13277]:SingleVariableDeclaration[13324-13338]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13286-13297]:SimpleType[13347-13358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13298-15531]:Block[13359-15592]"
    }, {
      "left" : "if (!haveUnclosedEntry)",
      "right" : "if (!haveUnclosedEntry)",
      "info" : "IfStatement[13308-13412]:IfStatement[13369-13473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13332-13412]:Block[13393-13473]"
    }, {
      "left" : "throw new IllegalStateException(\"No current tar entry\");",
      "right" : "throw new IllegalStateException(\"No current tar entry\");",
      "info" : "ThrowStatement[13346-13402]:ThrowStatement[13407-13463]"
    }, {
      "left" : "if (currBytes + numToWrite > currSize)",
      "right" : "if (currBytes + numToWrite > currSize)",
      "info" : "IfStatement[13421-14093]:IfStatement[13482-14154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13460-14093]:Block[13521-14154]"
    }, {
      "left" : "throw new IOException(\"request to write '\" + numToWrite\n                                  + \"' bytes exceeds size in header of '\"\n                                  + currSize + \"' bytes for entry '\"\n                                  + currName + \"'\");",
      "right" : "throw new IOException(\"request to write '\" + numToWrite\n                                  + \"' bytes exceeds size in header of '\"\n                                  + currSize + \"' bytes for entry '\"\n                                  + currName + \"'\");",
      "info" : "ThrowStatement[13474-13725]:ThrowStatement[13535-13786]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[14103-14911]:IfStatement[14164-14972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14121-14911]:Block[14182-14972]"
    }, {
      "left" : "if (assemLen + numToWrite >= recordBuf.length)",
      "right" : "if (assemLen + numToWrite >= recordBuf.length)",
      "info" : "IfStatement[14135-14901]:IfStatement[14196-14962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14182-14654]:Block[14243-14715]"
    }, {
      "left" : "int aLen = recordBuf.length - assemLen;",
      "right" : "int aLen = recordBuf.length - assemLen;",
      "info" : "VariableDeclarationStatement[14200-14239]:VariableDeclarationStatement[14261-14300]"
    }, {
      "left" : "System.arraycopy(assemBuf, 0, recordBuf, 0,\n                                 assemLen);",
      "right" : "System.arraycopy(assemBuf, 0, recordBuf, 0,\n                                 assemLen);",
      "info" : "ExpressionStatement[14257-14344]:ExpressionStatement[14318-14405]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, recordBuf,\n                                 assemLen, aLen);",
      "right" : "System.arraycopy(wBuf, wOffset, recordBuf,\n                                 assemLen, aLen);",
      "info" : "ExpressionStatement[14361-14453]:ExpressionStatement[14422-14514]"
    }, {
      "left" : "writeRecord(recordBuf);",
      "right" : "writeRecord(recordBuf);",
      "info" : "ExpressionStatement[14470-14493]:ExpressionStatement[14531-14554]"
    }, {
      "left" : "currBytes += recordBuf.length;",
      "right" : "currBytes += recordBuf.length;",
      "info" : "ExpressionStatement[14511-14541]:ExpressionStatement[14572-14602]"
    }, {
      "left" : "wOffset += aLen;",
      "right" : "wOffset += aLen;",
      "info" : "ExpressionStatement[14558-14574]:ExpressionStatement[14619-14635]"
    }, {
      "left" : "numToWrite -= aLen;",
      "right" : "numToWrite -= aLen;",
      "info" : "ExpressionStatement[14591-14610]:ExpressionStatement[14652-14671]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[14627-14640]:ExpressionStatement[14688-14701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14660-14901]:Block[14721-14962]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "right" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "info" : "ExpressionStatement[14678-14775]:ExpressionStatement[14739-14836]"
    }, {
      "left" : "wOffset += numToWrite;",
      "right" : "wOffset += numToWrite;",
      "info" : "ExpressionStatement[14793-14815]:ExpressionStatement[14854-14876]"
    }, {
      "left" : "assemLen += numToWrite;",
      "right" : "assemLen += numToWrite;",
      "info" : "ExpressionStatement[14832-14855]:ExpressionStatement[14893-14916]"
    }, {
      "left" : "numToWrite = 0;",
      "right" : "numToWrite = 0;",
      "info" : "ExpressionStatement[14872-14887]:ExpressionStatement[14933-14948]"
    }, {
      "left" : "while (numToWrite > 0)",
      "right" : "while (numToWrite > 0)",
      "info" : "WhileStatement[15077-15525]:WhileStatement[15138-15586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15100-15525]:Block[15161-15586]"
    }, {
      "left" : "if (numToWrite < recordBuf.length)",
      "right" : "if (numToWrite < recordBuf.length)",
      "info" : "IfStatement[15114-15343]:IfStatement[15175-15404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15149-15343]:Block[15210-15404]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "right" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "info" : "ExpressionStatement[15167-15264]:ExpressionStatement[15228-15325]"
    }, {
      "left" : "assemLen += numToWrite;",
      "right" : "assemLen += numToWrite;",
      "info" : "ExpressionStatement[15282-15305]:ExpressionStatement[15343-15366]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15323-15329]:BreakStatement[15384-15390]"
    }, {
      "left" : "writeRecord(wBuf, wOffset);",
      "right" : "writeRecord(wBuf, wOffset);",
      "info" : "ExpressionStatement[15357-15384]:ExpressionStatement[15418-15445]"
    }, {
      "left" : "int num = recordBuf.length;",
      "right" : "int num = recordBuf.length;",
      "info" : "VariableDeclarationStatement[15398-15425]:VariableDeclarationStatement[15459-15486]"
    }, {
      "left" : "currBytes += num;",
      "right" : "currBytes += num;",
      "info" : "ExpressionStatement[15439-15456]:ExpressionStatement[15500-15517]"
    }, {
      "left" : "numToWrite -= num;",
      "right" : "numToWrite -= num;",
      "info" : "ExpressionStatement[15469-15487]:ExpressionStatement[15530-15548]"
    }, {
      "left" : "wOffset += num;",
      "right" : "wOffset += num;",
      "info" : "ExpressionStatement[15500-15515]:ExpressionStatement[15561-15576]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15639-15643]:PrimitiveType[15700-15704]"
    }, {
      "left" : "writePaxHeaders",
      "right" : "writePaxHeaders",
      "info" : "SimpleName[15644-15659]:SimpleName[15705-15720]"
    }, {
      "left" : "TarArchiveEntry entry",
      "right" : "TarArchiveEntry entry",
      "info" : "SingleVariableDeclaration[15660-15681]:SingleVariableDeclaration[15721-15742]"
    }, {
      "left" : "String entryName",
      "right" : "String entryName",
      "info" : "SingleVariableDeclaration[15708-15724]:SingleVariableDeclaration[15769-15785]"
    }, {
      "left" : "Map<String, String> headers",
      "right" : "Map<String, String> headers",
      "info" : "SingleVariableDeclaration[15751-15778]:SingleVariableDeclaration[15812-15839]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15787-15798]:SimpleType[15848-15859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15799-17395]:Block[15860-17456]"
    }, {
      "left" : "String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);",
      "right" : "String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);",
      "info" : "VariableDeclarationStatement[15809-15867]:VariableDeclarationStatement[15870-15928]"
    }, {
      "left" : "if (name.length() >= TarConstants.NAMELEN)",
      "right" : "if (name.length() >= TarConstants.NAMELEN)",
      "info" : "IfStatement[15876-15994]:IfStatement[15937-16055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15919-15994]:Block[15980-16055]"
    }, {
      "left" : "name = name.substring(0, TarConstants.NAMELEN - 1);",
      "right" : "name = name.substring(0, TarConstants.NAMELEN - 1);",
      "info" : "ExpressionStatement[15933-15984]:ExpressionStatement[15994-16045]"
    }, {
      "left" : "TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);",
      "right" : "TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);",
      "info" : "VariableDeclarationStatement[16003-16141]:VariableDeclarationStatement[16064-16202]"
    }, {
      "left" : "transferModTime(entry, pex);",
      "right" : "transferModTime(entry, pex);",
      "info" : "ExpressionStatement[16150-16178]:ExpressionStatement[16211-16239]"
    }, {
      "left" : "StringWriter w = new StringWriter();",
      "right" : "StringWriter w = new StringWriter();",
      "info" : "VariableDeclarationStatement[16188-16224]:VariableDeclarationStatement[16249-16285]"
    }, {
      "left" : "for (Map.Entry<String, String> h : headers.entrySet())",
      "right" : "for (Map.Entry<String, String> h : headers.entrySet())",
      "info" : "EnhancedForStatement[16233-17210]:EnhancedForStatement[16294-17271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16288-17210]:Block[16349-17271]"
    }, {
      "left" : "String key = h.getKey();",
      "right" : "String key = h.getKey();",
      "info" : "VariableDeclarationStatement[16302-16326]:VariableDeclarationStatement[16363-16387]"
    }, {
      "left" : "String value = h.getValue();",
      "right" : "String value = h.getValue();",
      "info" : "VariableDeclarationStatement[16339-16367]:VariableDeclarationStatement[16400-16428]"
    }, {
      "left" : "int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + 2 /* guess 9 < actual length < 100 */;",
      "right" : "int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + 2 /* guess 9 < actual length < 100 */;",
      "info" : "VariableDeclarationStatement[16380-16528]:VariableDeclarationStatement[16441-16589]"
    }, {
      "left" : "String line = len + \" \" + key + \"=\" + value + \"\\n\";",
      "right" : "String line = len + \" \" + key + \"=\" + value + \"\\n\";",
      "info" : "VariableDeclarationStatement[16541-16592]:VariableDeclarationStatement[16602-16653]"
    }, {
      "left" : "int actualLength = line.getBytes(CharsetNames.UTF_8).length;",
      "right" : "int actualLength = line.getBytes(CharsetNames.UTF_8).length;",
      "info" : "VariableDeclarationStatement[16605-16665]:VariableDeclarationStatement[16666-16726]"
    }, {
      "left" : "while (len != actualLength)",
      "right" : "while (len != actualLength)",
      "info" : "WhileStatement[16678-17173]:WhileStatement[16739-17234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16706-17173]:Block[16767-17234]"
    }, {
      "left" : "len = actualLength;",
      "right" : "len = actualLength;",
      "info" : "ExpressionStatement[17006-17025]:ExpressionStatement[17067-17086]"
    }, {
      "left" : "line = len + \" \" + key + \"=\" + value + \"\\n\";",
      "right" : "line = len + \" \" + key + \"=\" + value + \"\\n\";",
      "info" : "ExpressionStatement[17042-17086]:ExpressionStatement[17103-17147]"
    }, {
      "left" : "actualLength = line.getBytes(CharsetNames.UTF_8).length;",
      "right" : "actualLength = line.getBytes(CharsetNames.UTF_8).length;",
      "info" : "ExpressionStatement[17103-17159]:ExpressionStatement[17164-17220]"
    }, {
      "left" : "w.write(line);",
      "right" : "w.write(line);",
      "info" : "ExpressionStatement[17186-17200]:ExpressionStatement[17247-17261]"
    }, {
      "left" : "byte[] data = w.toString().getBytes(CharsetNames.UTF_8);",
      "right" : "byte[] data = w.toString().getBytes(CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[17219-17275]:VariableDeclarationStatement[17280-17336]"
    }, {
      "left" : "pex.setSize(data.length);",
      "right" : "pex.setSize(data.length);",
      "info" : "ExpressionStatement[17284-17309]:ExpressionStatement[17345-17370]"
    }, {
      "left" : "putArchiveEntry(pex);",
      "right" : "putArchiveEntry(pex);",
      "info" : "ExpressionStatement[17318-17339]:ExpressionStatement[17379-17400]"
    }, {
      "left" : "write(data);",
      "right" : "write(data);",
      "info" : "ExpressionStatement[17348-17360]:ExpressionStatement[17409-17421]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[17369-17389]:ExpressionStatement[17430-17450]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17401-17408]:Modifier[17462-17469]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[17409-17415]:SimpleType[17470-17476]"
    }, {
      "left" : "stripTo7Bits",
      "right" : "stripTo7Bits",
      "info" : "SimpleName[17416-17428]:SimpleName[17477-17489]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[17429-17440]:SingleVariableDeclaration[17490-17501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17442-17854]:Block[17503-17915]"
    }, {
      "left" : "final int length = name.length();",
      "right" : "final int length = name.length();",
      "info" : "VariableDeclarationStatement[17452-17485]:VariableDeclarationStatement[17513-17546]"
    }, {
      "left" : "StringBuilder result = new StringBuilder(length);",
      "right" : "StringBuilder result = new StringBuilder(length);",
      "info" : "VariableDeclarationStatement[17494-17543]:VariableDeclarationStatement[17555-17604]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[17552-17814]:ForStatement[17613-17875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17585-17814]:Block[17646-17875]"
    }, {
      "left" : "char stripped = (char) (name.charAt(i) & 0x7F);",
      "right" : "char stripped = (char) (name.charAt(i) & 0x7F);",
      "info" : "VariableDeclarationStatement[17599-17646]:VariableDeclarationStatement[17660-17707]"
    }, {
      "left" : "if (shouldBeReplaced(stripped))",
      "right" : "if (shouldBeReplaced(stripped))",
      "info" : "IfStatement[17659-17804]:IfStatement[17720-17865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17691-17742]:Block[17752-17803]"
    }, {
      "left" : "result.append(\"_\");",
      "right" : "result.append(\"_\");",
      "info" : "ExpressionStatement[17709-17728]:ExpressionStatement[17770-17789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17748-17804]:Block[17809-17865]"
    }, {
      "left" : "result.append(stripped);",
      "right" : "result.append(stripped);",
      "info" : "ExpressionStatement[17766-17790]:ExpressionStatement[17827-17851]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[17823-17848]:ReturnStatement[17884-17909]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18001-18008]:Modifier[18062-18069]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18009-18016]:PrimitiveType[18070-18077]"
    }, {
      "left" : "shouldBeReplaced",
      "right" : "shouldBeReplaced",
      "info" : "SimpleName[18017-18033]:SimpleName[18078-18094]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[18034-18040]:SingleVariableDeclaration[18095-18101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18042-18285]:Block[18103-18346]"
    }, {
      "left" : "return c == 0 // would be read as Trailing null\n            || c == '/' // when used as last character TAE will consider the PAX header a directory\n            || c == '\\\\';",
      "right" : "return c == 0 // would be read as Trailing null\n            || c == '/' // when used as last character TAE will consider the PAX header a directory\n            || c == '\\\\';",
      "info" : "ReturnStatement[18052-18225]:ReturnStatement[18113-18286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18427-18434]:Modifier[18488-18495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18435-18439]:PrimitiveType[18496-18500]"
    }, {
      "left" : "writeEOFRecord",
      "right" : "writeEOFRecord",
      "info" : "SimpleName[18440-18454]:SimpleName[18501-18515]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18464-18475]:SimpleType[18525-18536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18476-18557]:Block[18537-18618]"
    }, {
      "left" : "Arrays.fill(recordBuf, (byte) 0);",
      "right" : "Arrays.fill(recordBuf, (byte) 0);",
      "info" : "ExpressionStatement[18486-18519]:ExpressionStatement[18547-18580]"
    }, {
      "left" : "writeRecord(recordBuf);",
      "right" : "writeRecord(recordBuf);",
      "info" : "ExpressionStatement[18528-18551]:ExpressionStatement[18589-18612]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18563-18572]:MarkerAnnotation[18624-18633]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18577-18583]:Modifier[18638-18644]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18584-18588]:PrimitiveType[18645-18649]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[18589-18594]:SimpleName[18650-18655]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18604-18615]:SimpleType[18665-18676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18616-18644]:Block[18677-18705]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[18626-18638]:ExpressionStatement[18687-18699]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18650-18659]:MarkerAnnotation[18711-18720]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18664-18670]:Modifier[18725-18731]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[18671-18683]:SimpleType[18732-18744]"
    }, {
      "left" : "createArchiveEntry",
      "right" : "createArchiveEntry",
      "info" : "SimpleName[18684-18702]:SimpleName[18745-18763]"
    }, {
      "left" : "File inputFile",
      "right" : "File inputFile",
      "info" : "SingleVariableDeclaration[18703-18717]:SingleVariableDeclaration[18764-18778]"
    }, {
      "left" : "String entryName",
      "right" : "String entryName",
      "info" : "SingleVariableDeclaration[18719-18735]:SingleVariableDeclaration[18780-18796]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18756-18767]:SimpleType[18817-18828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18768-18937]:Block[18829-18998]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[18778-18873]:IfStatement[18839-18934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18791-18873]:Block[18852-18934]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[18805-18863]:ThrowStatement[18866-18924]"
    }, {
      "left" : "return new TarArchiveEntry(inputFile, entryName);",
      "right" : "return new TarArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[18882-18931]:ReturnStatement[18943-18992]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19115-19122]:Modifier[19176-19183]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19123-19127]:PrimitiveType[19184-19188]"
    }, {
      "left" : "writeRecord",
      "right" : "writeRecord",
      "info" : "SimpleName[19128-19139]:SimpleName[19189-19200]"
    }, {
      "left" : "byte[] record",
      "right" : "byte[] record",
      "info" : "SingleVariableDeclaration[19140-19153]:SingleVariableDeclaration[19201-19214]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19162-19173]:SimpleType[19223-19234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19174-19532]:Block[19235-19593]"
    }, {
      "left" : "if (record.length != recordSize)",
      "right" : "if (record.length != recordSize)",
      "info" : "IfStatement[19184-19472]:IfStatement[19245-19533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19217-19472]:Block[19278-19533]"
    }, {
      "left" : "throw new IOException(\"record to write has length '\"\n                                  + record.length\n                                  + \"' which is not the record size of '\"\n                                  + recordSize + \"'\");",
      "right" : "throw new IOException(\"record to write has length '\"\n                                  + record.length\n                                  + \"' which is not the record size of '\"\n                                  + recordSize + \"'\");",
      "info" : "ThrowStatement[19231-19462]:ThrowStatement[19292-19523]"
    }, {
      "left" : "out.write(record);",
      "right" : "out.write(record);",
      "info" : "ExpressionStatement[19482-19500]:ExpressionStatement[19543-19561]"
    }, {
      "left" : "recordsWritten++;",
      "right" : "recordsWritten++;",
      "info" : "ExpressionStatement[19509-19526]:ExpressionStatement[19570-19587]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19899-19906]:Modifier[19960-19967]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19907-19911]:PrimitiveType[19968-19972]"
    }, {
      "left" : "writeRecord",
      "right" : "writeRecord",
      "info" : "SimpleName[19912-19923]:SimpleName[19973-19984]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[19924-19934]:SingleVariableDeclaration[19985-19995]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[19936-19946]:SingleVariableDeclaration[19997-20007]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19955-19966]:SimpleType[20016-20027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19967-20372]:Block[20028-20433]"
    }, {
      "left" : "if (offset + recordSize > buf.length)",
      "right" : "if (offset + recordSize > buf.length)",
      "info" : "IfStatement[19979-20295]:IfStatement[20040-20356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20017-20295]:Block[20078-20356]"
    }, {
      "left" : "throw new IOException(\"record has length '\" + buf.length\n                                  + \"' with offset '\" + offset\n                                  + \"' which is less than the record size of '\"\n                                  + recordSize + \"'\");",
      "right" : "throw new IOException(\"record has length '\" + buf.length\n                                  + \"' with offset '\" + offset\n                                  + \"' which is less than the record size of '\"\n                                  + recordSize + \"'\");",
      "info" : "ThrowStatement[20031-20285]:ThrowStatement[20092-20346]"
    }, {
      "left" : "out.write(buf, offset, recordSize);",
      "right" : "out.write(buf, offset, recordSize);",
      "info" : "ExpressionStatement[20305-20340]:ExpressionStatement[20366-20401]"
    }, {
      "left" : "recordsWritten++;",
      "right" : "recordsWritten++;",
      "info" : "ExpressionStatement[20349-20366]:ExpressionStatement[20410-20427]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20378-20385]:Modifier[20439-20446]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20386-20390]:PrimitiveType[20447-20451]"
    }, {
      "left" : "padAsNeeded",
      "right" : "padAsNeeded",
      "info" : "SimpleName[20391-20402]:SimpleName[20452-20463]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20412-20423]:SimpleType[20473-20484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20424-20629]:Block[20485-20690]"
    }, {
      "left" : "int start = recordsWritten % recordsPerBlock;",
      "right" : "int start = recordsWritten % recordsPerBlock;",
      "info" : "VariableDeclarationStatement[20434-20479]:VariableDeclarationStatement[20495-20540]"
    }, {
      "left" : "if (start != 0)",
      "right" : "if (start != 0)",
      "info" : "IfStatement[20488-20623]:IfStatement[20549-20684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20504-20623]:Block[20565-20684]"
    }, {
      "left" : "for (int i = start; i < recordsPerBlock; i++)",
      "right" : "for (int i = start; i < recordsPerBlock; i++)",
      "info" : "ForStatement[20518-20613]:ForStatement[20579-20674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20564-20613]:Block[20625-20674]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[20582-20599]:ExpressionStatement[20643-20660]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20635-20642]:Modifier[20696-20703]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20643-20647]:PrimitiveType[20704-20708]"
    }, {
      "left" : "addPaxHeadersForBigNumbers",
      "right" : "addPaxHeadersForBigNumbers",
      "info" : "SimpleName[20648-20674]:SimpleName[20709-20735]"
    }, {
      "left" : "Map<String, String> paxHeaders",
      "right" : "Map<String, String> paxHeaders",
      "info" : "SingleVariableDeclaration[20675-20705]:SingleVariableDeclaration[20736-20766]"
    }, {
      "left" : "TarArchiveEntry entry",
      "right" : "TarArchiveEntry entry",
      "info" : "SingleVariableDeclaration[20751-20772]:SingleVariableDeclaration[20812-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20774-21785]:Block[20835-21846]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"size\", entry.getSize(),\n                                 TarConstants.MAXSIZE);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"size\", entry.getSize(),\n                                 TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[20784-20901]:ExpressionStatement[20845-20962]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"gid\", entry.getGroupId(),\n                                 TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"gid\", entry.getGroupId(),\n                                 TarConstants.MAXID);",
      "info" : "ExpressionStatement[20910-21027]:ExpressionStatement[20971-21088]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"mtime\",\n                                 entry.getModTime().getTime() / 1000,\n                                 TarConstants.MAXSIZE);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"mtime\",\n                                 entry.getModTime().getTime() / 1000,\n                                 TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[21036-21207]:ExpressionStatement[21097-21268]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"uid\", entry.getUserId(),\n                                 TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"uid\", entry.getUserId(),\n                                 TarConstants.MAXID);",
      "info" : "ExpressionStatement[21216-21332]:ExpressionStatement[21277-21393]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devmajor\",\n                                 entry.getDevMajor(), TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devmajor\",\n                                 entry.getDevMajor(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[21391-21521]:ExpressionStatement[21452-21582]"
    }, {
      "left" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devminor\",\n                                 entry.getDevMinor(), TarConstants.MAXID);",
      "right" : "addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devminor\",\n                                 entry.getDevMinor(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[21530-21660]:ExpressionStatement[21591-21721]"
    }, {
      "left" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[21717-21779]:ExpressionStatement[21778-21840]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21791-21798]:Modifier[21852-21859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21799-21803]:PrimitiveType[21860-21864]"
    }, {
      "left" : "addPaxHeaderForBigNumber",
      "right" : "addPaxHeaderForBigNumber",
      "info" : "SimpleName[21804-21828]:SimpleName[21865-21889]"
    }, {
      "left" : "Map<String, String> paxHeaders",
      "right" : "Map<String, String> paxHeaders",
      "info" : "SingleVariableDeclaration[21829-21859]:SingleVariableDeclaration[21890-21920]"
    }, {
      "left" : "String header",
      "right" : "String header",
      "info" : "SingleVariableDeclaration[21903-21916]:SingleVariableDeclaration[21964-21977]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[21918-21928]:SingleVariableDeclaration[21979-21989]"
    }, {
      "left" : "long maxValue",
      "right" : "long maxValue",
      "info" : "SingleVariableDeclaration[21972-21985]:SingleVariableDeclaration[22033-22046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21987-22108]:Block[22048-22169]"
    }, {
      "left" : "if (value < 0 || value > maxValue)",
      "right" : "if (value < 0 || value > maxValue)",
      "info" : "IfStatement[21997-22102]:IfStatement[22058-22163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22032-22102]:Block[22093-22163]"
    }, {
      "left" : "paxHeaders.put(header, String.valueOf(value));",
      "right" : "paxHeaders.put(header, String.valueOf(value));",
      "info" : "ExpressionStatement[22046-22092]:ExpressionStatement[22107-22153]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22114-22121]:Modifier[22175-22182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22122-22126]:PrimitiveType[22183-22187]"
    }, {
      "left" : "failForBigNumbers",
      "right" : "failForBigNumbers",
      "info" : "SimpleName[22127-22144]:SimpleName[22188-22205]"
    }, {
      "left" : "TarArchiveEntry entry",
      "right" : "TarArchiveEntry entry",
      "info" : "SingleVariableDeclaration[22145-22166]:SingleVariableDeclaration[22206-22227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22168-22886]:Block[22229-22947]"
    }, {
      "left" : "failForBigNumber(\"entry size\", entry.getSize(), TarConstants.MAXSIZE);",
      "right" : "failForBigNumber(\"entry size\", entry.getSize(), TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[22178-22248]:ExpressionStatement[22239-22309]"
    }, {
      "left" : "failForBigNumberWithPosixMessage(\"group id\", entry.getGroupId(), TarConstants.MAXID);",
      "right" : "failForBigNumberWithPosixMessage(\"group id\", entry.getGroupId(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[22257-22342]:ExpressionStatement[22318-22403]"
    }, {
      "left" : "failForBigNumber(\"last modification time\",\n                         entry.getModTime().getTime() / 1000,\n                         TarConstants.MAXSIZE);",
      "right" : "failForBigNumber(\"last modification time\",\n                         entry.getModTime().getTime() / 1000,\n                         TarConstants.MAXSIZE);",
      "info" : "ExpressionStatement[22351-22503]:ExpressionStatement[22412-22564]"
    }, {
      "left" : "failForBigNumber(\"user id\", entry.getUserId(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"user id\", entry.getUserId(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[22512-22579]:ExpressionStatement[22573-22640]"
    }, {
      "left" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "right" : "failForBigNumber(\"mode\", entry.getMode(), TarConstants.MAXID);",
      "info" : "ExpressionStatement[22588-22650]:ExpressionStatement[22649-22711]"
    }, {
      "left" : "failForBigNumber(\"major device number\", entry.getDevMajor(),\n                         TarConstants.MAXID);",
      "right" : "failForBigNumber(\"major device number\", entry.getDevMajor(),\n                         TarConstants.MAXID);",
      "info" : "ExpressionStatement[22659-22765]:ExpressionStatement[22720-22826]"
    }, {
      "left" : "failForBigNumber(\"minor device number\", entry.getDevMinor(),\n                         TarConstants.MAXID);",
      "right" : "failForBigNumber(\"minor device number\", entry.getDevMinor(),\n                         TarConstants.MAXID);",
      "info" : "ExpressionStatement[22774-22880]:ExpressionStatement[22835-22941]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22892-22899]:Modifier[22953-22960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22900-22904]:PrimitiveType[22961-22965]"
    }, {
      "left" : "failForBigNumber",
      "right" : "failForBigNumber",
      "info" : "SimpleName[22905-22921]:SimpleName[22966-22982]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[22922-22934]:SingleVariableDeclaration[22983-22995]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[22936-22946]:SingleVariableDeclaration[22997-23007]"
    }, {
      "left" : "long maxValue",
      "right" : "long maxValue",
      "info" : "SingleVariableDeclaration[22948-22961]:SingleVariableDeclaration[23009-23022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22963-23024]:Block[23024-23085]"
    }, {
      "left" : "failForBigNumber(field, value, maxValue, \"\");",
      "right" : "failForBigNumber(field, value, maxValue, \"\");",
      "info" : "ExpressionStatement[22973-23018]:ExpressionStatement[23034-23079]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23030-23037]:Modifier[23091-23098]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23038-23042]:PrimitiveType[23099-23103]"
    }, {
      "left" : "failForBigNumberWithPosixMessage",
      "right" : "failForBigNumberWithPosixMessage",
      "info" : "SimpleName[23043-23075]:SimpleName[23104-23136]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[23076-23088]:SingleVariableDeclaration[23137-23149]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[23090-23100]:SingleVariableDeclaration[23151-23161]"
    }, {
      "left" : "long maxValue",
      "right" : "long maxValue",
      "info" : "SingleVariableDeclaration[23102-23115]:SingleVariableDeclaration[23163-23176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23117-23230]:Block[23178-23291]"
    }, {
      "left" : "failForBigNumber(field, value, maxValue, \" Use STAR or POSIX extensions to overcome this limit\");",
      "right" : "failForBigNumber(field, value, maxValue, \" Use STAR or POSIX extensions to overcome this limit\");",
      "info" : "ExpressionStatement[23127-23224]:ExpressionStatement[23188-23285]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23236-23243]:Modifier[23297-23304]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23244-23248]:PrimitiveType[23305-23309]"
    }, {
      "left" : "failForBigNumber",
      "right" : "failForBigNumber",
      "info" : "SimpleName[23249-23265]:SimpleName[23310-23326]"
    }, {
      "left" : "String field",
      "right" : "String field",
      "info" : "SingleVariableDeclaration[23266-23278]:SingleVariableDeclaration[23327-23339]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[23280-23290]:SingleVariableDeclaration[23341-23351]"
    }, {
      "left" : "long maxValue",
      "right" : "long maxValue",
      "info" : "SingleVariableDeclaration[23292-23305]:SingleVariableDeclaration[23353-23366]"
    }, {
      "left" : "String additionalMsg",
      "right" : "String additionalMsg",
      "info" : "SingleVariableDeclaration[23307-23327]:SingleVariableDeclaration[23368-23388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23329-23550]:Block[23390-23611]"
    }, {
      "left" : "if (value < 0 || value > maxValue)",
      "right" : "if (value < 0 || value > maxValue)",
      "info" : "IfStatement[23339-23544]:IfStatement[23400-23605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23374-23544]:Block[23435-23605]"
    }, {
      "left" : "throw new RuntimeException(field + \" '\" + value\n                    + \"' is too big ( > \"\n                    + maxValue + \" ).\" + additionalMsg);",
      "right" : "throw new RuntimeException(field + \" '\" + value\n                    + \"' is too big ( > \"\n                    + maxValue + \" ).\" + additionalMsg);",
      "info" : "ThrowStatement[23388-23534]:ThrowStatement[23449-23595]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24524-24531]:Modifier[24585-24592]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24532-24539]:PrimitiveType[24593-24600]"
    }, {
      "left" : "handleLongName",
      "right" : "handleLongName",
      "info" : "SimpleName[24540-24554]:SimpleName[24601-24615]"
    }, {
      "left" : "TarArchiveEntry entry",
      "right" : "TarArchiveEntry entry",
      "info" : "SingleVariableDeclaration[24555-24576]:SingleVariableDeclaration[24616-24637]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[24579-24590]:SingleVariableDeclaration[24640-24651]"
    }, {
      "left" : "Map<String, String> paxHeaders",
      "right" : "Map<String, String> paxHeaders",
      "info" : "SingleVariableDeclaration[24627-24657]:SingleVariableDeclaration[24688-24718]"
    }, {
      "left" : "String paxHeaderName",
      "right" : "String paxHeaderName",
      "info" : "SingleVariableDeclaration[24694-24714]:SingleVariableDeclaration[24755-24775]"
    }, {
      "left" : "byte linkType",
      "right" : "byte linkType",
      "info" : "SingleVariableDeclaration[24716-24729]:SingleVariableDeclaration[24777-24790]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[24731-24747]:SingleVariableDeclaration[24792-24808]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24764-24775]:SimpleType[24825-24836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24776-26013]:Block[24837-26074]"
    }, {
      "left" : "final ByteBuffer encodedName = zipEncoding.encode(name);",
      "right" : "final ByteBuffer encodedName = zipEncoding.encode(name);",
      "info" : "VariableDeclarationStatement[24786-24842]:VariableDeclarationStatement[24847-24903]"
    }, {
      "left" : "final int len = encodedName.limit() - encodedName.position();",
      "right" : "final int len = encodedName.limit() - encodedName.position();",
      "info" : "VariableDeclarationStatement[24851-24912]:VariableDeclarationStatement[24912-24973]"
    }, {
      "left" : "if (len >= TarConstants.NAMELEN)",
      "right" : "if (len >= TarConstants.NAMELEN)",
      "info" : "IfStatement[24921-25985]:IfStatement[24982-26046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24954-25985]:Block[25015-26046]"
    }, {
      "left" : "if (longFileMode == LONGFILE_POSIX)",
      "right" : "if (longFileMode == LONGFILE_POSIX)",
      "info" : "IfStatement[24969-25975]:IfStatement[25030-26036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25005-25102]:Block[25066-25163]"
    }, {
      "left" : "paxHeaders.put(paxHeaderName, name);",
      "right" : "paxHeaders.put(paxHeaderName, name);",
      "info" : "ExpressionStatement[25023-25059]:ExpressionStatement[25084-25120]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25076-25088]:ReturnStatement[25137-25149]"
    }, {
      "left" : "if (longFileMode == LONGFILE_GNU)",
      "right" : "if (longFileMode == LONGFILE_GNU)",
      "info" : "IfStatement[25108-25975]:IfStatement[25169-26036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25142-25702]:Block[25203-25763]"
    }, {
      "left" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);",
      "right" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);",
      "info" : "VariableDeclarationStatement[25276-25365]:VariableDeclarationStatement[25337-25426]"
    }, {
      "left" : "longLinkEntry.setSize(len + 1);",
      "right" : "longLinkEntry.setSize(len + 1);",
      "info" : "ExpressionStatement[25383-25414]:ExpressionStatement[25444-25475]"
    }, {
      "left" : "transferModTime(entry, longLinkEntry);",
      "right" : "transferModTime(entry, longLinkEntry);",
      "info" : "ExpressionStatement[25445-25483]:ExpressionStatement[25506-25544]"
    }, {
      "left" : "putArchiveEntry(longLinkEntry);",
      "right" : "putArchiveEntry(longLinkEntry);",
      "info" : "ExpressionStatement[25500-25531]:ExpressionStatement[25561-25592]"
    }, {
      "left" : "write(encodedName.array(), encodedName.arrayOffset(), len);",
      "right" : "write(encodedName.array(), encodedName.arrayOffset(), len);",
      "info" : "ExpressionStatement[25548-25607]:ExpressionStatement[25609-25668]"
    }, {
      "left" : "write(0);",
      "right" : "write(0);",
      "info" : "ExpressionStatement[25624-25633]:ExpressionStatement[25685-25694]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[25668-25688]:ExpressionStatement[25729-25749]"
    }, {
      "left" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "right" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "info" : "IfStatement[25708-25975]:IfStatement[25769-26036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25747-25975]:Block[25808-26036]"
    }, {
      "left" : "throw new RuntimeException(fieldName + \" '\" + name\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "right" : "throw new RuntimeException(fieldName + \" '\" + name\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "info" : "ThrowStatement[25765-25961]:ThrowStatement[25826-26022]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25994-26007]:ReturnStatement[26055-26068]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26019-26026]:Modifier[26080-26087]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26027-26031]:PrimitiveType[26088-26092]"
    }, {
      "left" : "transferModTime",
      "right" : "transferModTime",
      "info" : "SimpleName[26032-26047]:SimpleName[26093-26108]"
    }, {
      "left" : "TarArchiveEntry from",
      "right" : "TarArchiveEntry from",
      "info" : "SingleVariableDeclaration[26048-26068]:SingleVariableDeclaration[26109-26129]"
    }, {
      "left" : "TarArchiveEntry to",
      "right" : "TarArchiveEntry to",
      "info" : "SingleVariableDeclaration[26070-26088]:SingleVariableDeclaration[26131-26149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26090-26375]:Block[26151-26436]"
    }, {
      "left" : "Date fromModTime = from.getModTime();",
      "right" : "Date fromModTime = from.getModTime();",
      "info" : "VariableDeclarationStatement[26100-26137]:VariableDeclarationStatement[26161-26198]"
    }, {
      "left" : "long fromModTimeSeconds = fromModTime.getTime() / 1000;",
      "right" : "long fromModTimeSeconds = fromModTime.getTime() / 1000;",
      "info" : "VariableDeclarationStatement[26146-26201]:VariableDeclarationStatement[26207-26262]"
    }, {
      "left" : "if (fromModTimeSeconds < 0 || fromModTimeSeconds > TarConstants.MAXSIZE)",
      "right" : "if (fromModTimeSeconds < 0 || fromModTimeSeconds > TarConstants.MAXSIZE)",
      "info" : "IfStatement[26210-26333]:IfStatement[26271-26394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26283-26333]:Block[26344-26394]"
    }, {
      "left" : "fromModTime = new Date(0);",
      "right" : "fromModTime = new Date(0);",
      "info" : "ExpressionStatement[26297-26323]:ExpressionStatement[26358-26384]"
    }, {
      "left" : "to.setModTime(fromModTime);",
      "right" : "to.setModTime(fromModTime);",
      "info" : "ExpressionStatement[26342-26369]:ExpressionStatement[26403-26430]"
    } ]
  },
  "interFileMappings" : { }
}