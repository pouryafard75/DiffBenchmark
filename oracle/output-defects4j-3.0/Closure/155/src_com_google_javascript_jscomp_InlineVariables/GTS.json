{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "InlineVariables",
      "right" : "InlineVariables",
      "info" : "TypeDeclaration[1395-24648]:TypeDeclaration[1395-25814]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2166-2206]:FieldDeclaration[2166-2206]"
    }, {
      "left" : "enum : Mode",
      "right" : "enum : Mode",
      "info" : "EnumDeclaration[2210-2346]:EnumDeclaration[2210-2346]"
    }, {
      "left" : "private final Mode mode;",
      "right" : "private final Mode mode;",
      "info" : "FieldDeclaration[2350-2374]:FieldDeclaration[2350-2374]"
    }, {
      "left" : "private final boolean inlineAllStrings;",
      "right" : "private final boolean inlineAllStrings;",
      "info" : "FieldDeclaration[2458-2497]:FieldDeclaration[2458-2497]"
    }, {
      "left" : "private final IdentifyConstants identifyConstants = new IdentifyConstants();",
      "right" : "private final IdentifyConstants identifyConstants = new IdentifyConstants();",
      "info" : "FieldDeclaration[2501-2577]:FieldDeclaration[2501-2577]"
    }, {
      "left" : "InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings)",
      "right" : "InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings)",
      "info" : "MethodDeclaration[2581-2783]:MethodDeclaration[2581-2783]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2787-3025]:MethodDeclaration[2787-3025]"
    }, {
      "left" : "private Predicate<Var> getFilterForMode()",
      "right" : "private Predicate<Var> getFilterForMode()",
      "info" : "MethodDeclaration[3029-3349]:MethodDeclaration[3029-3349]"
    }, {
      "left" : "IdentifyConstants",
      "right" : "IdentifyConstants",
      "info" : "TypeDeclaration[3353-3835]:TypeDeclaration[3353-3835]"
    }, {
      "left" : "public boolean apply(Var var)",
      "right" : "public boolean apply(Var var)",
      "info" : "MethodDeclaration[3752-3831]:MethodDeclaration[3752-3831]"
    }, {
      "left" : "IdentifyLocals",
      "right" : "IdentifyLocals",
      "info" : "TypeDeclaration[3839-4036]:TypeDeclaration[3839-4036]"
    }, {
      "left" : "public boolean apply(Var var)",
      "right" : "public boolean apply(Var var)",
      "info" : "MethodDeclaration[3947-4032]:MethodDeclaration[3947-4032]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "TypeDeclaration[4040-4281]:TypeDeclaration[4040-4281]"
    }, {
      "left" : "private final Var alias;",
      "right" : "private final Var alias;",
      "info" : "FieldDeclaration[4082-4106]:FieldDeclaration[4082-4106]"
    }, {
      "left" : "private final ReferenceCollection refInfo;",
      "right" : "private final ReferenceCollection refInfo;",
      "info" : "FieldDeclaration[4111-4153]:FieldDeclaration[4111-4153]"
    }, {
      "left" : "AliasCandidate(Var alias, ReferenceCollection refInfo)",
      "right" : "AliasCandidate(Var alias, ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[4159-4277]:MethodDeclaration[4159-4277]"
    }, {
      "left" : "InliningBehavior",
      "right" : "InliningBehavior",
      "info" : "TypeDeclaration[4285-24646]:TypeDeclaration[4285-25812]"
    }, {
      "left" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "right" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[4510-4719]:FieldDeclaration[4510-4719]"
    }, {
      "left" : "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
      "right" : "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
      "info" : "FieldDeclaration[4725-4992]:FieldDeclaration[4725-4992]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "info" : "MethodDeclaration[4998-5204]:MethodDeclaration[4998-5204]"
    }, {
      "left" : "private void collectAliasCandidates(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "right" : "private void collectAliasCandidates(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "info" : "MethodDeclaration[5210-6386]:MethodDeclaration[5210-6386]"
    }, {
      "left" : "private void doInlinesForScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "right" : "private void doInlinesForScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "info" : "MethodDeclaration[6392-7728]:MethodDeclaration[6392-7862]"
    }, {
      "left" : "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo)",
      "right" : "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments)",
      "info" : "MethodDeclaration[7868-10967]:MethodDeclaration[8968-12133]"
    }, {
      "left" : "private void blacklistVarReferencesInTree(Node root, Scope scope)",
      "right" : "private void blacklistVarReferencesInTree(Node root, Scope scope)",
      "info" : "MethodDeclaration[10973-11442]:MethodDeclaration[12139-12608]"
    }, {
      "left" : "private boolean isVarInlineForbidden(Var var)",
      "right" : "private boolean isVarInlineForbidden(Var var)",
      "info" : "MethodDeclaration[11448-12132]:MethodDeclaration[12614-13298]"
    }, {
      "left" : "private void inline(Var v, Reference declaration,\n                        Reference init, Reference reference)",
      "right" : "private void inline(Var v, Reference declaration,\n                        Reference init, Reference reference)",
      "info" : "MethodDeclaration[12138-13102]:MethodDeclaration[13304-14268]"
    }, {
      "left" : "private void inlineWellDefinedVariable(Var v, Node value,\n        List<Reference> refSet)",
      "right" : "private void inlineWellDefinedVariable(Var v, Node value,\n        List<Reference> refSet)",
      "info" : "MethodDeclaration[13108-13468]:MethodDeclaration[14274-14634]"
    }, {
      "left" : "private void inlineDeclaredConstant(Var v, Node value,\n        List<Reference> refSet)",
      "right" : "private void inlineDeclaredConstant(Var v, Node value,\n        List<Reference> refSet)",
      "info" : "MethodDeclaration[13474-13925]:MethodDeclaration[14640-15091]"
    }, {
      "left" : "private void removeDeclaration(Reference declaration)",
      "right" : "private void removeDeclaration(Reference declaration)",
      "info" : "MethodDeclaration[13931-14440]:MethodDeclaration[15097-15606]"
    }, {
      "left" : "private void inlineValue(Var v, Reference ref, Node value)",
      "right" : "private void inlineValue(Var v, Reference ref, Node value)",
      "info" : "MethodDeclaration[14446-15122]:MethodDeclaration[15612-16288]"
    }, {
      "left" : "private boolean isInlineableDeclaredConstant(Var var,\n        ReferenceCollection refInfo)",
      "right" : "private boolean isInlineableDeclaredConstant(Var var,\n        ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[15128-16228]:MethodDeclaration[16294-17394]"
    }, {
      "left" : "private boolean isStringWorthInlining(Var var, List<Reference> refs)",
      "right" : "private boolean isStringWorthInlining(Var var, List<Reference> refs)",
      "info" : "MethodDeclaration[16234-17296]:MethodDeclaration[17400-18462]"
    }, {
      "left" : "private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference)",
      "right" : "private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference)",
      "info" : "MethodDeclaration[17302-19589]:MethodDeclaration[18468-20755]"
    }, {
      "left" : "private boolean canMoveAggressively(Node value)",
      "right" : "private boolean canMoveAggressively(Node value)",
      "info" : "MethodDeclaration[19595-19944]:MethodDeclaration[20761-21110]"
    }, {
      "left" : "private boolean canMoveModerately(\n        Reference initialization,\n        Reference reference)",
      "right" : "private boolean canMoveModerately(\n        Reference initialization,\n        Reference reference)",
      "info" : "MethodDeclaration[19950-21550]:MethodDeclaration[21116-22716]"
    }, {
      "left" : "private boolean isValidDeclaration(Reference declaration)",
      "right" : "private boolean isValidDeclaration(Reference declaration)",
      "info" : "MethodDeclaration[21556-21912]:MethodDeclaration[22722-23078]"
    }, {
      "left" : "private boolean isValidInitialization(Reference initialization)",
      "right" : "private boolean isValidInitialization(Reference initialization)",
      "info" : "MethodDeclaration[21918-22653]:MethodDeclaration[23084-23819]"
    }, {
      "left" : "private boolean isValidReference(Reference reference)",
      "right" : "private boolean isValidReference(Reference reference)",
      "info" : "MethodDeclaration[22659-22867]:MethodDeclaration[23825-24033]"
    }, {
      "left" : "private boolean isImmutableAndWellDefinedVariable(Var v,\n        ReferenceCollection refInfo)",
      "right" : "private boolean isImmutableAndWellDefinedVariable(Var v,\n        ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[22873-24642]:MethodDeclaration[24039-25808]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2115-2120]:TYPE_DECLARATION_KIND[2115-2120]"
    }, {
      "left" : "InlineVariables",
      "right" : "InlineVariables",
      "info" : "SimpleName[2121-2136]:SimpleName[2121-2136]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[2148-2160]:SimpleType[2148-2160]"
    }, {
      "left" : "InlineVariables",
      "right" : "InlineVariables",
      "info" : "SimpleName[2581-2596]:SimpleName[2581-2596]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2604-2629]:SingleVariableDeclaration[2604-2629]"
    }, {
      "left" : "Mode mode",
      "right" : "Mode mode",
      "info" : "SingleVariableDeclaration[2637-2646]:SingleVariableDeclaration[2637-2646]"
    }, {
      "left" : "boolean inlineAllStrings",
      "right" : "boolean inlineAllStrings",
      "info" : "SingleVariableDeclaration[2654-2678]:SingleVariableDeclaration[2654-2678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2680-2783]:Block[2680-2783]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2686-2711]:ExpressionStatement[2686-2711]"
    }, {
      "left" : "this.mode = mode;",
      "right" : "this.mode = mode;",
      "info" : "ExpressionStatement[2716-2733]:ExpressionStatement[2716-2733]"
    }, {
      "left" : "this.inlineAllStrings = inlineAllStrings;",
      "right" : "this.inlineAllStrings = inlineAllStrings;",
      "info" : "ExpressionStatement[2738-2779]:ExpressionStatement[2738-2779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2787-2796]:MarkerAnnotation[2787-2796]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2799-2805]:Modifier[2799-2805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2806-2810]:PrimitiveType[2806-2810]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2811-2818]:SimpleName[2811-2818]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2819-2831]:SingleVariableDeclaration[2819-2831]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2833-2842]:SingleVariableDeclaration[2833-2842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2844-3025]:Block[2844-3025]"
    }, {
      "left" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());",
      "right" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());",
      "info" : "VariableDeclarationStatement[2850-2984]:VariableDeclarationStatement[2850-2984]"
    }, {
      "left" : "callback.process(externs, root);",
      "right" : "callback.process(externs, root);",
      "info" : "ExpressionStatement[2989-3021]:ExpressionStatement[2989-3021]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3029-3036]:Modifier[3029-3036]"
    }, {
      "left" : "Predicate<Var>",
      "right" : "Predicate<Var>",
      "info" : "ParameterizedType[3037-3051]:ParameterizedType[3037-3051]"
    }, {
      "left" : "getFilterForMode",
      "right" : "getFilterForMode",
      "info" : "SimpleName[3052-3068]:SimpleName[3052-3068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3071-3349]:Block[3071-3349]"
    }, {
      "left" : "switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }",
      "right" : "switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }",
      "info" : "SwitchStatement[3077-3345]:SwitchStatement[3077-3345]"
    }, {
      "left" : "case ALL:",
      "right" : "case ALL:",
      "info" : "SwitchCase[3099-3108]:SwitchCase[3099-3108]"
    }, {
      "left" : "return Predicates.<Var>alwaysTrue();",
      "right" : "return Predicates.<Var>alwaysTrue();",
      "info" : "ReturnStatement[3117-3153]:ReturnStatement[3117-3153]"
    }, {
      "left" : "case LOCALS_ONLY:",
      "right" : "case LOCALS_ONLY:",
      "info" : "SwitchCase[3160-3177]:SwitchCase[3160-3177]"
    }, {
      "left" : "return new IdentifyLocals();",
      "right" : "return new IdentifyLocals();",
      "info" : "ReturnStatement[3186-3214]:ReturnStatement[3186-3214]"
    }, {
      "left" : "case CONSTANTS_ONLY:",
      "right" : "case CONSTANTS_ONLY:",
      "info" : "SwitchCase[3221-3241]:SwitchCase[3221-3241]"
    }, {
      "left" : "return new IdentifyConstants();",
      "right" : "return new IdentifyConstants();",
      "info" : "ReturnStatement[3250-3281]:ReturnStatement[3250-3281]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3288-3296]:SwitchCase[3288-3296]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3305-3339]:ThrowStatement[3305-3339]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3688-3695]:Modifier[3688-3695]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3696-3701]:TYPE_DECLARATION_KIND[3696-3701]"
    }, {
      "left" : "IdentifyConstants",
      "right" : "IdentifyConstants",
      "info" : "SimpleName[3702-3719]:SimpleName[3702-3719]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3752-3761]:MarkerAnnotation[3752-3761]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3766-3772]:Modifier[3766-3772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3773-3780]:PrimitiveType[3773-3780]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[3781-3786]:SimpleName[3781-3786]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[3787-3794]:SingleVariableDeclaration[3787-3794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3796-3831]:Block[3796-3831]"
    }, {
      "left" : "return var.isConst();",
      "right" : "return var.isConst();",
      "info" : "ReturnStatement[3804-3825]:ReturnStatement[3804-3825]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3886-3893]:Modifier[3886-3893]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3894-3899]:TYPE_DECLARATION_KIND[3894-3899]"
    }, {
      "left" : "IdentifyLocals",
      "right" : "IdentifyLocals",
      "info" : "SimpleName[3900-3914]:SimpleName[3900-3914]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3947-3956]:MarkerAnnotation[3947-3956]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3961-3967]:Modifier[3961-3967]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3968-3975]:PrimitiveType[3968-3975]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[3976-3981]:SimpleName[3976-3981]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[3982-3989]:SingleVariableDeclaration[3982-3989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3991-4032]:Block[3991-4032]"
    }, {
      "left" : "return var.scope.isLocal();",
      "right" : "return var.scope.isLocal();",
      "info" : "ReturnStatement[3999-4026]:ReturnStatement[3999-4026]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4040-4047]:Modifier[4040-4047]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4048-4054]:Modifier[4048-4054]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4055-4060]:TYPE_DECLARATION_KIND[4055-4060]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "SimpleName[4061-4075]:SimpleName[4061-4075]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "SimpleName[4159-4173]:SimpleName[4159-4173]"
    }, {
      "left" : "Var alias",
      "right" : "Var alias",
      "info" : "SingleVariableDeclaration[4174-4183]:SingleVariableDeclaration[4174-4183]"
    }, {
      "left" : "ReferenceCollection refInfo",
      "right" : "ReferenceCollection refInfo",
      "info" : "SingleVariableDeclaration[4185-4212]:SingleVariableDeclaration[4185-4212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4214-4277]:Block[4214-4277]"
    }, {
      "left" : "this.alias = alias;",
      "right" : "this.alias = alias;",
      "info" : "ExpressionStatement[4222-4241]:ExpressionStatement[4222-4241]"
    }, {
      "left" : "this.refInfo = refInfo;",
      "right" : "this.refInfo = refInfo;",
      "info" : "ExpressionStatement[4248-4271]:ExpressionStatement[4248-4271]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4452-4459]:Modifier[4452-4459]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4460-4465]:TYPE_DECLARATION_KIND[4460-4465]"
    }, {
      "left" : "InliningBehavior",
      "right" : "InliningBehavior",
      "info" : "SimpleName[4466-4482]:SimpleName[4466-4482]"
    }, {
      "left" : "Behavior",
      "right" : "Behavior",
      "info" : "SimpleType[4494-4502]:SimpleType[4494-4502]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4998-5007]:MarkerAnnotation[4998-5007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5012-5018]:Modifier[5012-5018]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5019-5023]:PrimitiveType[5019-5023]"
    }, {
      "left" : "afterExitScope",
      "right" : "afterExitScope",
      "info" : "SimpleName[5024-5038]:SimpleName[5024-5038]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5039-5054]:SingleVariableDeclaration[5039-5054]"
    }, {
      "left" : "Map<Var, ReferenceCollection> referenceMap",
      "right" : "Map<Var, ReferenceCollection> referenceMap",
      "info" : "SingleVariableDeclaration[5064-5106]:SingleVariableDeclaration[5064-5106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5108-5204]:Block[5108-5204]"
    }, {
      "left" : "collectAliasCandidates(t, referenceMap);",
      "right" : "collectAliasCandidates(t, referenceMap);",
      "info" : "ExpressionStatement[5116-5156]:ExpressionStatement[5116-5156]"
    }, {
      "left" : "doInlinesForScope(t, referenceMap);",
      "right" : "doInlinesForScope(t, referenceMap);",
      "info" : "ExpressionStatement[5163-5198]:ExpressionStatement[5163-5198]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5342-5349]:Modifier[5342-5349]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5350-5354]:PrimitiveType[5350-5354]"
    }, {
      "left" : "collectAliasCandidates",
      "right" : "collectAliasCandidates",
      "info" : "SimpleName[5355-5377]:SimpleName[5355-5377]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5378-5393]:SingleVariableDeclaration[5378-5393]"
    }, {
      "left" : "Map<Var, ReferenceCollection> referenceMap",
      "right" : "Map<Var, ReferenceCollection> referenceMap",
      "info" : "SingleVariableDeclaration[5403-5445]:SingleVariableDeclaration[5403-5445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5447-6386]:Block[5447-6386]"
    }, {
      "left" : "if (mode != Mode.CONSTANTS_ONLY)",
      "right" : "if (mode != Mode.CONSTANTS_ONLY)",
      "info" : "IfStatement[5455-6380]:IfStatement[5455-6380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5488-6380]:Block[5488-6380]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[5498-6372]:ForStatement[5498-6372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5561-6372]:Block[5561-6372]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[5573-5591]:VariableDeclarationStatement[5573-5591]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "info" : "VariableDeclarationStatement[5602-5658]:VariableDeclarationStatement[5602-5658]"
    }, {
      "left" : "if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime())",
      "right" : "if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[5896-6362]:IfStatement[5896-6362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6068-6362]:Block[6068-6362]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[6082-6140]:VariableDeclarationStatement[6082-6140]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[6153-6190]:VariableDeclarationStatement[6153-6190]"
    }, {
      "left" : "if (value != null && value.getType() == Token.NAME)",
      "right" : "if (value != null && value.getType() == Token.NAME)",
      "info" : "IfStatement[6203-6350]:IfStatement[6203-6350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6255-6350]:Block[6255-6350]"
    }, {
      "left" : "aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));",
      "right" : "aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));",
      "info" : "ExpressionStatement[6271-6336]:ExpressionStatement[6271-6336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6527-6534]:Modifier[6527-6534]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6535-6539]:PrimitiveType[6535-6539]"
    }, {
      "left" : "doInlinesForScope",
      "right" : "doInlinesForScope",
      "info" : "SimpleName[6540-6557]:SimpleName[6540-6557]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6558-6573]:SingleVariableDeclaration[6558-6573]"
    }, {
      "left" : "Map<Var, ReferenceCollection> referenceMap",
      "right" : "Map<Var, ReferenceCollection> referenceMap",
      "info" : "SingleVariableDeclaration[6583-6625]:SingleVariableDeclaration[6583-6625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6627-7728]:Block[6627-7862]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[6636-7722]:ForStatement[6746-7856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-7722]:Block[6809-7856]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[6709-6727]:VariableDeclarationStatement[6819-6837]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "info" : "VariableDeclarationStatement[6737-6793]:VariableDeclarationStatement[6847-6903]"
    }, {
      "left" : "if (referenceInfo == null || isVarInlineForbidden(v))",
      "right" : "if (referenceInfo == null || isVarInlineForbidden(v))",
      "info" : "IfStatement[6920-7714]:IfStatement[7030-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6974-7152]:Block[7084-7262]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7133-7142]:ContinueStatement[7243-7252]"
    }, {
      "left" : "if (isInlineableDeclaredConstant(v, referenceInfo))",
      "right" : "if (isInlineableDeclaredConstant(v, referenceInfo))",
      "info" : "IfStatement[7158-7714]:IfStatement[7268-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7210-7448]:Block[7320-7558]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReferenceForConstants();",
      "right" : "Reference init = referenceInfo.getInitializingReferenceForConstants();",
      "info" : "VariableDeclarationStatement[7222-7292]:VariableDeclarationStatement[7332-7402]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[7303-7340]:VariableDeclarationStatement[7413-7450]"
    }, {
      "left" : "inlineDeclaredConstant(v, value, referenceInfo.references);",
      "right" : "inlineDeclaredConstant(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[7351-7410]:ExpressionStatement[7461-7520]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[7421-7438]:ExpressionStatement[7531-7548]"
    }, {
      "left" : "if (mode == Mode.CONSTANTS_ONLY)",
      "right" : "if (mode == Mode.CONSTANTS_ONLY)",
      "info" : "IfStatement[7454-7714]:IfStatement[7564-7848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7487-7649]:Block[7597-7759]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7630-7639]:ContinueStatement[7740-7749]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7868-7875]:Modifier[8968-8975]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7876-7880]:PrimitiveType[8976-8980]"
    }, {
      "left" : "inlineNonConstants",
      "right" : "inlineNonConstants",
      "info" : "SimpleName[7881-7899]:SimpleName[8981-8999]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[7909-7914]:SingleVariableDeclaration[9009-9014]"
    }, {
      "left" : "ReferenceCollection referenceInfo",
      "right" : "ReferenceCollection referenceInfo",
      "info" : "SingleVariableDeclaration[7916-7949]:SingleVariableDeclaration[9016-9049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7951-10967]:Block[9091-12133]"
    }, {
      "left" : "int refCount = referenceInfo.references.size();",
      "right" : "int refCount = referenceInfo.references.size();",
      "info" : "VariableDeclarationStatement[7959-8006]:VariableDeclarationStatement[9099-9146]"
    }, {
      "left" : "Reference declaration = referenceInfo.references.get(0);",
      "right" : "Reference declaration = referenceInfo.references.get(0);",
      "info" : "VariableDeclarationStatement[8013-8069]:VariableDeclarationStatement[9153-9209]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[8076-8134]:VariableDeclarationStatement[9216-9274]"
    }, {
      "left" : "int firstRefAfterInit = (declaration == init) ? 2 : 3;",
      "right" : "int firstRefAfterInit = (declaration == init) ? 2 : 3;",
      "info" : "VariableDeclarationStatement[8141-8195]:VariableDeclarationStatement[9281-9335]"
    }, {
      "left" : "if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo))",
      "right" : "if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo))",
      "info" : "IfStatement[8203-9733]:IfStatement[9343-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8286-8883]:Block[9426-10023]"
    }, {
      "left" : "Node value;",
      "right" : "Node value;",
      "info" : "VariableDeclarationStatement[8441-8452]:VariableDeclarationStatement[9581-9592]"
    }, {
      "left" : "if (init != null)",
      "right" : "if (init != null)",
      "info" : "IfStatement[8461-8735]:IfStatement[9601-9875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8479-8533]:Block[9619-9673]"
    }, {
      "left" : "value = init.getAssignedValue();",
      "right" : "value = init.getAssignedValue();",
      "info" : "ExpressionStatement[8491-8523]:ExpressionStatement[9631-9663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8539-8735]:Block[9679-9875]"
    }, {
      "left" : "Node srcLocation = declaration.getNameNode();",
      "right" : "Node srcLocation = declaration.getNameNode();",
      "info" : "VariableDeclarationStatement[8622-8667]:VariableDeclarationStatement[9762-9807]"
    }, {
      "left" : "value = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "value = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "ExpressionStatement[8678-8725]:ExpressionStatement[9818-9865]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[8744-8778]:ExpressionStatement[9884-9918]"
    }, {
      "left" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "right" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[8787-8849]:ExpressionStatement[9927-9989]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[8858-8875]:ExpressionStatement[9998-10015]"
    }, {
      "left" : "if (refCount == firstRefAfterInit)",
      "right" : "if (refCount == firstRefAfterInit)",
      "info" : "IfStatement[8889-9733]:IfStatement[10029-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8924-9274]:Block[10064-10414]"
    }, {
      "left" : "Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);",
      "right" : "Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);",
      "info" : "VariableDeclarationStatement[9035-9122]:VariableDeclarationStatement[10175-10262]"
    }, {
      "left" : "if (canInline(declaration, init, reference))",
      "right" : "if (canInline(declaration, init, reference))",
      "info" : "IfStatement[9131-9266]:IfStatement[10271-10406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9176-9266]:Block[10316-10406]"
    }, {
      "left" : "inline(v, declaration, init, reference);",
      "right" : "inline(v, declaration, init, reference);",
      "info" : "ExpressionStatement[9188-9228]:ExpressionStatement[10328-10368]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[9239-9256]:ExpressionStatement[10379-10396]"
    }, {
      "left" : "if (declaration != init && refCount == 2)",
      "right" : "if (declaration != init && refCount == 2)",
      "info" : "IfStatement[9280-9733]:IfStatement[10420-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9322-9733]:Block[10462-10873]"
    }, {
      "left" : "if (isValidDeclaration(declaration) && isValidInitialization(init))",
      "right" : "if (isValidDeclaration(declaration) && isValidInitialization(init))",
      "info" : "IfStatement[9332-9725]:IfStatement[10472-10865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9400-9725]:Block[10540-10865]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[9532-9569]:VariableDeclarationStatement[10672-10709]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[9580-9614]:ExpressionStatement[10720-10754]"
    }, {
      "left" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "right" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[9625-9687]:ExpressionStatement[10765-10827]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[9698-9715]:ExpressionStatement[10838-10855]"
    }, {
      "left" : "if (\n          !staleVars.contains(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime())",
      "right" : "if (!maybeModifiedArguments &&\n          !staleVars.contains(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[9979-10961]:IfStatement[11119-12127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10105-10961]:Block[11271-12127]"
    }, {
      "left" : "List<Reference> refs = referenceInfo.references;",
      "right" : "List<Reference> refs = referenceInfo.references;",
      "info" : "VariableDeclarationStatement[10115-10163]:VariableDeclarationStatement[11281-11329]"
    }, {
      "left" : "for (int i = 1 /* start from a read */; i < refs.size(); i++)",
      "right" : "for (int i = 1 /* start from a read */; i < refs.size(); i++)",
      "info" : "ForStatement[10172-10953]:ForStatement[11338-12119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10234-10953]:Block[11400-12119]"
    }, {
      "left" : "Node nameNode = refs.get(i).getNameNode();",
      "right" : "Node nameNode = refs.get(i).getNameNode();",
      "info" : "VariableDeclarationStatement[10246-10288]:VariableDeclarationStatement[11412-11454]"
    }, {
      "left" : "if (aliasCandidates.containsKey(nameNode))",
      "right" : "if (aliasCandidates.containsKey(nameNode))",
      "info" : "IfStatement[10299-10943]:IfStatement[11465-12109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10342-10943]:Block[11508-12109]"
    }, {
      "left" : "AliasCandidate candidate = aliasCandidates.get(nameNode);",
      "right" : "AliasCandidate candidate = aliasCandidates.get(nameNode);",
      "info" : "VariableDeclarationStatement[10356-10413]:VariableDeclarationStatement[11522-11579]"
    }, {
      "left" : "if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias))",
      "right" : "if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias))",
      "info" : "IfStatement[10426-10931]:IfStatement[11592-12097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10526-10931]:Block[11692-12097]"
    }, {
      "left" : "Reference aliasInit;",
      "right" : "Reference aliasInit;",
      "info" : "VariableDeclarationStatement[10542-10562]:VariableDeclarationStatement[11708-11728]"
    }, {
      "left" : "aliasInit = candidate.refInfo.getInitializingReference();",
      "right" : "aliasInit = candidate.refInfo.getInitializingReference();",
      "info" : "ExpressionStatement[10577-10634]:ExpressionStatement[11743-11800]"
    }, {
      "left" : "Node value = aliasInit.getAssignedValue();",
      "right" : "Node value = aliasInit.getAssignedValue();",
      "info" : "VariableDeclarationStatement[10649-10691]:VariableDeclarationStatement[11815-11857]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[10706-10740]:ExpressionStatement[11872-11906]"
    }, {
      "left" : "inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);",
      "right" : "inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);",
      "info" : "ExpressionStatement[10755-10871]:ExpressionStatement[11921-12037]"
    }, {
      "left" : "staleVars.add(candidate.alias);",
      "right" : "staleVars.add(candidate.alias);",
      "info" : "ExpressionStatement[10886-10917]:ExpressionStatement[12052-12083]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11135-11142]:Modifier[12301-12308]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11143-11147]:PrimitiveType[12309-12313]"
    }, {
      "left" : "blacklistVarReferencesInTree",
      "right" : "blacklistVarReferencesInTree",
      "info" : "SimpleName[11148-11176]:SimpleName[12314-12342]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[11177-11186]:SingleVariableDeclaration[12343-12352]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[11188-11199]:SingleVariableDeclaration[12354-12365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11201-11442]:Block[12367-12608]"
    }, {
      "left" : "for (Node c = root.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = root.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[11209-11330]:ForStatement[12375-12496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11273-11330]:Block[12439-12496]"
    }, {
      "left" : "blacklistVarReferencesInTree(c, scope);",
      "right" : "blacklistVarReferencesInTree(c, scope);",
      "info" : "ExpressionStatement[11283-11322]:ExpressionStatement[12449-12488]"
    }, {
      "left" : "if (root.getType() == Token.NAME)",
      "right" : "if (root.getType() == Token.NAME)",
      "info" : "IfStatement[11338-11436]:IfStatement[12504-12602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11372-11436]:Block[12538-12602]"
    }, {
      "left" : "staleVars.add(scope.getVar(root.getString()));",
      "right" : "staleVars.add(scope.getVar(root.getString()));",
      "info" : "ExpressionStatement[11382-11428]:ExpressionStatement[12548-12594]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11531-11538]:Modifier[12697-12704]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11539-11546]:PrimitiveType[12705-12712]"
    }, {
      "left" : "isVarInlineForbidden",
      "right" : "isVarInlineForbidden",
      "info" : "SimpleName[11547-11567]:SimpleName[12713-12733]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[11568-11575]:SingleVariableDeclaration[12734-12741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11577-12132]:Block[12743-13298]"
    }, {
      "left" : "return compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "right" : "return compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "info" : "ReturnStatement[11953-12126]:ReturnStatement[13119-13292]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12245-12252]:Modifier[13411-13418]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12253-12257]:PrimitiveType[13419-13423]"
    }, {
      "left" : "inline",
      "right" : "inline",
      "info" : "SimpleName[12258-12264]:SimpleName[13424-13430]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[12265-12270]:SingleVariableDeclaration[13431-13436]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[12272-12293]:SingleVariableDeclaration[13438-13459]"
    }, {
      "left" : "Reference init",
      "right" : "Reference init",
      "info" : "SingleVariableDeclaration[12319-12333]:SingleVariableDeclaration[13485-13499]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[12335-12354]:SingleVariableDeclaration[13501-13520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12356-13102]:Block[13522-14268]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[12364-12401]:VariableDeclarationStatement[13530-13567]"
    }, {
      "left" : "Preconditions.checkState(value != null);",
      "right" : "Preconditions.checkState(value != null);",
      "info" : "ExpressionStatement[12408-12448]:ExpressionStatement[13574-13614]"
    }, {
      "left" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);",
      "right" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);",
      "info" : "VariableDeclarationStatement[12534-12604]:VariableDeclarationStatement[13700-13770]"
    }, {
      "left" : "inlineValue(v, reference, value.detachFromParent());",
      "right" : "inlineValue(v, reference, value.detachFromParent());",
      "info" : "ExpressionStatement[12612-12664]:ExpressionStatement[13778-13830]"
    }, {
      "left" : "if (declaration != init)",
      "right" : "if (declaration != init)",
      "info" : "IfStatement[12671-12901]:IfStatement[13837-14067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12696-12901]:Block[13862-14067]"
    }, {
      "left" : "Node expressRoot = init.getGrandparent();",
      "right" : "Node expressRoot = init.getGrandparent();",
      "info" : "VariableDeclarationStatement[12706-12747]:VariableDeclarationStatement[13872-13913]"
    }, {
      "left" : "Preconditions.checkState(expressRoot.getType() == Token.EXPR_RESULT);",
      "right" : "Preconditions.checkState(expressRoot.getType() == Token.EXPR_RESULT);",
      "info" : "ExpressionStatement[12756-12825]:ExpressionStatement[13922-13991]"
    }, {
      "left" : "NodeUtil.removeChild(expressRoot.getParent(), expressRoot);",
      "right" : "NodeUtil.removeChild(expressRoot.getParent(), expressRoot);",
      "info" : "ExpressionStatement[12834-12893]:ExpressionStatement[14000-14059]"
    }, {
      "left" : "if (!isFunctionDeclaration)",
      "right" : "if (!isFunctionDeclaration)",
      "info" : "IfStatement[12967-13096]:IfStatement[14133-14262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12995-13044]:Block[14161-14210]"
    }, {
      "left" : "removeDeclaration(declaration);",
      "right" : "removeDeclaration(declaration);",
      "info" : "ExpressionStatement[13005-13036]:ExpressionStatement[14171-14202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13050-13096]:Block[14216-14262]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[13060-13088]:ExpressionStatement[14226-14254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13188-13195]:Modifier[14354-14361]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13196-13200]:PrimitiveType[14362-14366]"
    }, {
      "left" : "inlineWellDefinedVariable",
      "right" : "inlineWellDefinedVariable",
      "info" : "SimpleName[13201-13226]:SimpleName[14367-14392]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[13227-13232]:SingleVariableDeclaration[14393-14398]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[13234-13244]:SingleVariableDeclaration[14400-14410]"
    }, {
      "left" : "List<Reference> refSet",
      "right" : "List<Reference> refSet",
      "info" : "SingleVariableDeclaration[13254-13276]:SingleVariableDeclaration[14420-14442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13278-13468]:Block[14444-14634]"
    }, {
      "left" : "Reference decl = refSet.get(0);",
      "right" : "Reference decl = refSet.get(0);",
      "info" : "VariableDeclarationStatement[13286-13317]:VariableDeclarationStatement[14452-14483]"
    }, {
      "left" : "for (int i = 1; i < refSet.size(); i++)",
      "right" : "for (int i = 1; i < refSet.size(); i++)",
      "info" : "ForStatement[13324-13431]:ForStatement[14490-14597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13364-13431]:Block[14530-14597]"
    }, {
      "left" : "inlineValue(v, refSet.get(i), value.cloneTree());",
      "right" : "inlineValue(v, refSet.get(i), value.cloneTree());",
      "info" : "ExpressionStatement[13374-13423]:ExpressionStatement[14540-14589]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[13438-13462]:ExpressionStatement[14604-14628]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13525-13532]:Modifier[14691-14698]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13533-13537]:PrimitiveType[14699-14703]"
    }, {
      "left" : "inlineDeclaredConstant",
      "right" : "inlineDeclaredConstant",
      "info" : "SimpleName[13538-13560]:SimpleName[14704-14726]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[13561-13566]:SingleVariableDeclaration[14727-14732]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[13568-13578]:SingleVariableDeclaration[14734-14744]"
    }, {
      "left" : "List<Reference> refSet",
      "right" : "List<Reference> refSet",
      "info" : "SingleVariableDeclaration[13588-13610]:SingleVariableDeclaration[14754-14776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13612-13925]:Block[14778-15091]"
    }, {
      "left" : "Reference decl = null;",
      "right" : "Reference decl = null;",
      "info" : "VariableDeclarationStatement[13676-13698]:VariableDeclarationStatement[14842-14864]"
    }, {
      "left" : "for (Reference r : refSet)",
      "right" : "for (Reference r : refSet)",
      "info" : "EnhancedForStatement[13706-13887]:EnhancedForStatement[14872-15053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13733-13887]:Block[14899-15053]"
    }, {
      "left" : "if (r.getNameNode() == v.getNameNode())",
      "right" : "if (r.getNameNode() == v.getNameNode())",
      "info" : "IfStatement[13743-13879]:IfStatement[14909-15045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13783-13814]:Block[14949-14980]"
    }, {
      "left" : "decl = r;",
      "right" : "decl = r;",
      "info" : "ExpressionStatement[13795-13804]:ExpressionStatement[14961-14970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13820-13879]:Block[14986-15045]"
    }, {
      "left" : "inlineValue(v, r, value.cloneTree());",
      "right" : "inlineValue(v, r, value.cloneTree());",
      "info" : "ExpressionStatement[13832-13869]:ExpressionStatement[14998-15035]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[13895-13919]:ExpressionStatement[15061-15085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13988-13995]:Modifier[15154-15161]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13996-14000]:PrimitiveType[15162-15166]"
    }, {
      "left" : "removeDeclaration",
      "right" : "removeDeclaration",
      "info" : "SimpleName[14001-14018]:SimpleName[15167-15184]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[14019-14040]:SingleVariableDeclaration[15185-15206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14042-14440]:Block[15208-15606]"
    }, {
      "left" : "Node varNode = declaration.getParent();",
      "right" : "Node varNode = declaration.getParent();",
      "info" : "VariableDeclarationStatement[14050-14089]:VariableDeclarationStatement[15216-15255]"
    }, {
      "left" : "varNode.removeChild(declaration.getNameNode());",
      "right" : "varNode.removeChild(declaration.getNameNode());",
      "info" : "ExpressionStatement[14096-14143]:ExpressionStatement[15262-15309]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[14185-14398]:IfStatement[15351-15564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14213-14398]:Block[15379-15564]"
    }, {
      "left" : "Preconditions.checkState(varNode.getType() == Token.VAR);",
      "right" : "Preconditions.checkState(varNode.getType() == Token.VAR);",
      "info" : "ExpressionStatement[14223-14280]:ExpressionStatement[15389-15446]"
    }, {
      "left" : "Node grandparent = declaration.getGrandparent();",
      "right" : "Node grandparent = declaration.getGrandparent();",
      "info" : "VariableDeclarationStatement[14290-14338]:VariableDeclarationStatement[15456-15504]"
    }, {
      "left" : "NodeUtil.removeChild(grandparent, varNode);",
      "right" : "NodeUtil.removeChild(grandparent, varNode);",
      "info" : "ExpressionStatement[14347-14390]:ExpressionStatement[15513-15556]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[14406-14434]:ExpressionStatement[15572-15600]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14727-14734]:Modifier[15893-15900]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14735-14739]:PrimitiveType[15901-15905]"
    }, {
      "left" : "inlineValue",
      "right" : "inlineValue",
      "info" : "SimpleName[14740-14751]:SimpleName[15906-15917]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[14752-14757]:SingleVariableDeclaration[15918-15923]"
    }, {
      "left" : "Reference ref",
      "right" : "Reference ref",
      "info" : "SingleVariableDeclaration[14759-14772]:SingleVariableDeclaration[15925-15938]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[14774-14784]:SingleVariableDeclaration[15940-15950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14786-15122]:Block[15952-16288]"
    }, {
      "left" : "if (ref.isSimpleAssignmentToName())",
      "right" : "if (ref.isSimpleAssignmentToName())",
      "info" : "IfStatement[14794-15028]:IfStatement[15960-16194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14830-14949]:Block[15996-16115]"
    }, {
      "left" : "ref.getGrandparent().replaceChild(ref.getParent(), value);",
      "right" : "ref.getGrandparent().replaceChild(ref.getParent(), value);",
      "info" : "ExpressionStatement[14883-14941]:ExpressionStatement[16049-16107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14955-15028]:Block[16121-16194]"
    }, {
      "left" : "ref.getParent().replaceChild(ref.getNameNode(), value);",
      "right" : "ref.getParent().replaceChild(ref.getNameNode(), value);",
      "info" : "ExpressionStatement[14965-15020]:ExpressionStatement[16131-16186]"
    }, {
      "left" : "blacklistVarReferencesInTree(value, v.scope);",
      "right" : "blacklistVarReferencesInTree(value, v.scope);",
      "info" : "ExpressionStatement[15036-15081]:ExpressionStatement[16202-16247]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[15088-15116]:ExpressionStatement[16254-16282]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15242-15249]:Modifier[16408-16415]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15250-15257]:PrimitiveType[16416-16423]"
    }, {
      "left" : "isInlineableDeclaredConstant",
      "right" : "isInlineableDeclaredConstant",
      "info" : "SimpleName[15258-15286]:SimpleName[16424-16452]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[15287-15294]:SingleVariableDeclaration[16453-16460]"
    }, {
      "left" : "ReferenceCollection refInfo",
      "right" : "ReferenceCollection refInfo",
      "info" : "SingleVariableDeclaration[15304-15331]:SingleVariableDeclaration[16470-16497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15333-16228]:Block[16499-17394]"
    }, {
      "left" : "if (!identifyConstants.apply(var))",
      "right" : "if (!identifyConstants.apply(var))",
      "info" : "IfStatement[15341-15407]:IfStatement[16507-16573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15376-15407]:Block[16542-16573]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15386-15399]:ReturnStatement[16552-16565]"
    }, {
      "left" : "if (!refInfo.isAssignedOnceInLifetime())",
      "right" : "if (!refInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[15415-15487]:IfStatement[16581-16653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15456-15487]:Block[16622-16653]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15466-15479]:ReturnStatement[16632-16645]"
    }, {
      "left" : "Reference init = refInfo.getInitializingReferenceForConstants();",
      "right" : "Reference init = refInfo.getInitializingReferenceForConstants();",
      "info" : "VariableDeclarationStatement[15495-15559]:VariableDeclarationStatement[16661-16725]"
    }, {
      "left" : "if (init == null)",
      "right" : "if (init == null)",
      "info" : "IfStatement[15566-15615]:IfStatement[16732-16781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15584-15615]:Block[16750-16781]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15594-15607]:ReturnStatement[16760-16773]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[15623-15660]:VariableDeclarationStatement[16789-16826]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[15667-15930]:IfStatement[16833-17096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15686-15930]:Block[16852-17096]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15909-15922]:ReturnStatement[17075-17088]"
    }, {
      "left" : "if (!NodeUtil.isImmutableValue(value))",
      "right" : "if (!NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[15982-16052]:IfStatement[17148-17218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16021-16052]:Block[17187-17218]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16031-16044]:ReturnStatement[17197-17210]"
    }, {
      "left" : "return value.getType() != Token.STRING ||\n          isStringWorthInlining(var, refInfo.references);",
      "right" : "return value.getType() != Token.STRING ||\n          isStringWorthInlining(var, refInfo.references);",
      "info" : "ReturnStatement[16123-16222]:ReturnStatement[17289-17388]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16309-16316]:Modifier[17475-17482]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16317-16324]:PrimitiveType[17483-17490]"
    }, {
      "left" : "isStringWorthInlining",
      "right" : "isStringWorthInlining",
      "info" : "SimpleName[16325-16346]:SimpleName[17491-17512]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[16347-16354]:SingleVariableDeclaration[17513-17520]"
    }, {
      "left" : "List<Reference> refs",
      "right" : "List<Reference> refs",
      "info" : "SingleVariableDeclaration[16356-16376]:SingleVariableDeclaration[17522-17542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16378-17296]:Block[17544-18462]"
    }, {
      "left" : "if (!inlineAllStrings && !var.isDefine())",
      "right" : "if (!inlineAllStrings && !var.isDefine())",
      "info" : "IfStatement[16386-17270]:IfStatement[17552-18436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16428-17270]:Block[17594-18436]"
    }, {
      "left" : "int len = var.getInitialValue().getString().length() + \"''\".length();",
      "right" : "int len = var.getInitialValue().getString().length() + \"''\".length();",
      "info" : "VariableDeclarationStatement[16438-16507]:VariableDeclarationStatement[17604-17673]"
    }, {
      "left" : "int noInlineBytes = \"var xx=;\".length() + len +\n                            4 * (refs.size() - 1);",
      "right" : "int noInlineBytes = \"var xx=;\".length() + len +\n                            4 * (refs.size() - 1);",
      "info" : "VariableDeclarationStatement[16759-16857]:VariableDeclarationStatement[17925-18023]"
    }, {
      "left" : "int inlineBytes = (len - 1) * (refs.size() - 1);",
      "right" : "int inlineBytes = (len - 1) * (refs.size() - 1);",
      "info" : "VariableDeclarationStatement[17069-17117]:VariableDeclarationStatement[18235-18283]"
    }, {
      "left" : "return noInlineBytes >= inlineBytes;",
      "right" : "return noInlineBytes >= inlineBytes;",
      "info" : "ReturnStatement[17226-17262]:ReturnStatement[18392-18428]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17278-17290]:ReturnStatement[18444-18456]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17443-17450]:Modifier[18609-18616]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17451-17458]:PrimitiveType[18617-18624]"
    }, {
      "left" : "canInline",
      "right" : "canInline",
      "info" : "SimpleName[17459-17468]:SimpleName[18625-18634]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[17478-17499]:SingleVariableDeclaration[18644-18665]"
    }, {
      "left" : "Reference initialization",
      "right" : "Reference initialization",
      "info" : "SingleVariableDeclaration[17509-17533]:SingleVariableDeclaration[18675-18699]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[17543-17562]:SingleVariableDeclaration[18709-18728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17564-19589]:Block[18730-20755]"
    }, {
      "left" : "if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference))",
      "right" : "if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference))",
      "info" : "IfStatement[17572-17735]:IfStatement[18738-18901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17704-17735]:Block[18870-18901]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17714-17727]:ReturnStatement[18880-18893]"
    }, {
      "left" : "if (declaration != initialization &&\n          initialization.getGrandparent().getType() != Token.EXPR_RESULT)",
      "right" : "if (declaration != initialization &&\n          initialization.getGrandparent().getType() != Token.EXPR_RESULT)",
      "info" : "IfStatement[17912-18054]:IfStatement[19078-19220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18023-18054]:Block[19189-19220]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18033-18046]:ReturnStatement[19199-19212]"
    }, {
      "left" : "if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock())",
      "right" : "if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock())",
      "info" : "IfStatement[18156-18324]:IfStatement[19322-19490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18293-18324]:Block[19459-19490]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18303-18316]:ReturnStatement[19469-19482]"
    }, {
      "left" : "Node value = initialization.getAssignedValue();",
      "right" : "Node value = initialization.getAssignedValue();",
      "info" : "VariableDeclarationStatement[18670-18717]:VariableDeclarationStatement[19836-19883]"
    }, {
      "left" : "Preconditions.checkState(value != null);",
      "right" : "Preconditions.checkState(value != null);",
      "info" : "ExpressionStatement[18724-18764]:ExpressionStatement[19890-19930]"
    }, {
      "left" : "if (value.getType() == Token.GETPROP\n          && reference.getParent().getType() == Token.CALL\n          && reference.getParent().getFirstChild() == reference.getNameNode())",
      "right" : "if (value.getType() == Token.GETPROP\n          && reference.getParent().getType() == Token.CALL\n          && reference.getParent().getFirstChild() == reference.getNameNode())",
      "info" : "IfStatement[18771-18977]:IfStatement[19937-20143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18946-18977]:Block[20112-20143]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18956-18969]:ReturnStatement[20122-20135]"
    }, {
      "left" : "if (value.getType() == Token.FUNCTION)",
      "right" : "if (value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[19115-19483]:IfStatement[20281-20649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19154-19483]:Block[20320-20649]"
    }, {
      "left" : "Node callNode = reference.getParent();",
      "right" : "Node callNode = reference.getParent();",
      "info" : "VariableDeclarationStatement[19164-19202]:VariableDeclarationStatement[20330-20368]"
    }, {
      "left" : "if (reference.getParent().getType() == Token.CALL)",
      "right" : "if (reference.getParent().getType() == Token.CALL)",
      "info" : "IfStatement[19211-19475]:IfStatement[20377-20641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19262-19475]:Block[20428-20641]"
    }, {
      "left" : "SubclassRelationship relationship =\n              compiler.getCodingConvention().getClassesDefinedByCall(callNode);",
      "right" : "SubclassRelationship relationship =\n              compiler.getCodingConvention().getClassesDefinedByCall(callNode);",
      "info" : "VariableDeclarationStatement[19274-19389]:VariableDeclarationStatement[20440-20555]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[19400-19465]:IfStatement[20566-20631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19426-19465]:Block[20592-20631]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19440-19453]:ReturnStatement[20606-20619]"
    }, {
      "left" : "return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);",
      "right" : "return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);",
      "info" : "ReturnStatement[19491-19583]:ReturnStatement[20657-20749]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19688-19695]:Modifier[20854-20861]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19696-19703]:PrimitiveType[20862-20869]"
    }, {
      "left" : "canMoveAggressively",
      "right" : "canMoveAggressively",
      "info" : "SimpleName[19704-19723]:SimpleName[20870-20889]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[19724-19734]:SingleVariableDeclaration[20890-20900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19736-19944]:Block[20902-21110]"
    }, {
      "left" : "return NodeUtil.isLiteralValue(value, true)\n          || value.getType() == Token.FUNCTION;",
      "right" : "return NodeUtil.isLiteralValue(value, true)\n          || value.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[19847-19938]:ReturnStatement[21013-21104]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20184-20191]:Modifier[21350-21357]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20192-20199]:PrimitiveType[21358-21365]"
    }, {
      "left" : "canMoveModerately",
      "right" : "canMoveModerately",
      "info" : "SimpleName[20200-20217]:SimpleName[21366-21383]"
    }, {
      "left" : "Reference initialization",
      "right" : "Reference initialization",
      "info" : "SingleVariableDeclaration[20227-20251]:SingleVariableDeclaration[21393-21417]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[20261-20280]:SingleVariableDeclaration[21427-21446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20282-21550]:Block[21448-22716]"
    }, {
      "left" : "Iterator<Node> it;",
      "right" : "Iterator<Node> it;",
      "info" : "VariableDeclarationStatement[20391-20409]:VariableDeclarationStatement[21557-21575]"
    }, {
      "left" : "if (initialization.getParent().getType() == Token.VAR)",
      "right" : "if (initialization.getParent().getType() == Token.VAR)",
      "info" : "IfStatement[20416-21333]:IfStatement[21582-22499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20471-20700]:Block[21637-21866]"
    }, {
      "left" : "it = NodeIterators.LocalVarMotion.forVar(\n            initialization.getNameNode(),     // NAME\n            initialization.getParent(),       // VAR\n            initialization.getGrandparent());",
      "right" : "it = NodeIterators.LocalVarMotion.forVar(\n            initialization.getNameNode(),     // NAME\n            initialization.getParent(),       // VAR\n            initialization.getGrandparent());",
      "info" : "ExpressionStatement[20481-20675]:ExpressionStatement[21647-21841]"
    }, {
      "left" : "if (initialization.getParent().getType() == Token.ASSIGN)",
      "right" : "if (initialization.getParent().getType() == Token.ASSIGN)",
      "info" : "IfStatement[20706-21333]:IfStatement[21872-22499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20764-21184]:Block[21930-22350]"
    }, {
      "left" : "Preconditions.checkState(\n            initialization.getGrandparent().getType() == Token.EXPR_RESULT);",
      "right" : "Preconditions.checkState(\n            initialization.getGrandparent().getType() == Token.EXPR_RESULT);",
      "info" : "ExpressionStatement[20774-20876]:ExpressionStatement[21940-22042]"
    }, {
      "left" : "it = NodeIterators.LocalVarMotion.forAssign(\n            initialization.getNameNode(),     // NAME\n            initialization.getParent(),       // ASSIGN\n            initialization.getGrandparent(),  // EXPR_RESULT\n            initialization.getGrandparent().getParent());",
      "right" : "it = NodeIterators.LocalVarMotion.forAssign(\n            initialization.getNameNode(),     // NAME\n            initialization.getParent(),       // ASSIGN\n            initialization.getGrandparent(),  // EXPR_RESULT\n            initialization.getGrandparent().getParent());",
      "info" : "ExpressionStatement[20885-21158]:ExpressionStatement[22051-22324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21190-21333]:Block[22356-22499]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected initialization parent \" +\n            initialization.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\"Unexpected initialization parent \" +\n            initialization.getParent().toStringTree());",
      "info" : "ThrowStatement[21200-21325]:ThrowStatement[22366-22491]"
    }, {
      "left" : "Node targetName = reference.getNameNode();",
      "right" : "Node targetName = reference.getNameNode();",
      "info" : "VariableDeclarationStatement[21340-21382]:VariableDeclarationStatement[22506-22548]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[21389-21523]:WhileStatement[22555-22689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21410-21523]:Block[22576-22689]"
    }, {
      "left" : "Node curNode = it.next();",
      "right" : "Node curNode = it.next();",
      "info" : "VariableDeclarationStatement[21420-21445]:VariableDeclarationStatement[22586-22611]"
    }, {
      "left" : "if (curNode == targetName)",
      "right" : "if (curNode == targetName)",
      "info" : "IfStatement[21454-21515]:IfStatement[22620-22681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21481-21515]:Block[22647-22681]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21493-21505]:ReturnStatement[22659-22671]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21531-21544]:ReturnStatement[22697-22710]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21650-21657]:Modifier[22816-22823]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21658-21665]:PrimitiveType[22824-22831]"
    }, {
      "left" : "isValidDeclaration",
      "right" : "isValidDeclaration",
      "info" : "SimpleName[21666-21684]:SimpleName[22832-22850]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[21685-21706]:SingleVariableDeclaration[22851-22872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21708-21912]:Block[22874-23078]"
    }, {
      "left" : "return (declaration.getParent().getType() == Token.VAR\n          && declaration.getGrandparent().getType() != Token.FOR)\n          || NodeUtil.isFunctionDeclaration(declaration.getParent());",
      "right" : "return (declaration.getParent().getType() == Token.VAR\n          && declaration.getGrandparent().getType() != Token.FOR)\n          || NodeUtil.isFunctionDeclaration(declaration.getParent());",
      "info" : "ReturnStatement[21716-21906]:ReturnStatement[22882-23072]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21983-21990]:Modifier[23149-23156]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21991-21998]:PrimitiveType[23157-23164]"
    }, {
      "left" : "isValidInitialization",
      "right" : "isValidInitialization",
      "info" : "SimpleName[21999-22020]:SimpleName[23165-23186]"
    }, {
      "left" : "Reference initialization",
      "right" : "Reference initialization",
      "info" : "SingleVariableDeclaration[22021-22045]:SingleVariableDeclaration[23187-23211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22047-22653]:Block[23213-23819]"
    }, {
      "left" : "if (initialization == null)",
      "right" : "if (initialization == null)",
      "info" : "IfStatement[22055-22647]:IfStatement[23221-23813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22083-22114]:Block[23249-23280]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22093-22106]:ReturnStatement[23259-23272]"
    }, {
      "left" : "if (initialization.isDeclaration())",
      "right" : "if (initialization.isDeclaration())",
      "info" : "IfStatement[22120-22647]:IfStatement[23286-23813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22156-22410]:Block[23322-23576]"
    }, {
      "left" : "return NodeUtil.isFunctionDeclaration(initialization.getParent())\n            || initialization.getNameNode().getFirstChild() != null;",
      "right" : "return NodeUtil.isFunctionDeclaration(initialization.getParent())\n            || initialization.getNameNode().getFirstChild() != null;",
      "info" : "ReturnStatement[22268-22402]:ReturnStatement[23434-23568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22416-22647]:Block[23582-23813]"
    }, {
      "left" : "Node parent = initialization.getParent();",
      "right" : "Node parent = initialization.getParent();",
      "info" : "VariableDeclarationStatement[22426-22467]:VariableDeclarationStatement[23592-23633]"
    }, {
      "left" : "Preconditions.checkState(\n            parent.getType() == Token.ASSIGN\n            && parent.getFirstChild() == initialization.getNameNode());",
      "right" : "Preconditions.checkState(\n            parent.getType() == Token.ASSIGN\n            && parent.getFirstChild() == initialization.getNameNode());",
      "info" : "ExpressionStatement[22476-22618]:ExpressionStatement[23642-23784]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22627-22639]:ReturnStatement[23793-23805]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22740-22747]:Modifier[23906-23913]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22748-22755]:PrimitiveType[23914-23921]"
    }, {
      "left" : "isValidReference",
      "right" : "isValidReference",
      "info" : "SimpleName[22756-22772]:SimpleName[23922-23938]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[22773-22792]:SingleVariableDeclaration[23939-23958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22794-22867]:Block[23960-24033]"
    }, {
      "left" : "return !reference.isDeclaration() && !reference.isLvalue();",
      "right" : "return !reference.isDeclaration() && !reference.isLvalue();",
      "info" : "ReturnStatement[22802-22861]:ReturnStatement[23968-24027]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23070-23077]:Modifier[24236-24243]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23078-23085]:PrimitiveType[24244-24251]"
    }, {
      "left" : "isImmutableAndWellDefinedVariable",
      "right" : "isImmutableAndWellDefinedVariable",
      "info" : "SimpleName[23086-23119]:SimpleName[24252-24285]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[23120-23125]:SingleVariableDeclaration[24286-24291]"
    }, {
      "left" : "ReferenceCollection refInfo",
      "right" : "ReferenceCollection refInfo",
      "info" : "SingleVariableDeclaration[23135-23162]:SingleVariableDeclaration[24301-24328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23164-24642]:Block[24330-25808]"
    }, {
      "left" : "List<Reference> refSet = refInfo.references;",
      "right" : "List<Reference> refSet = refInfo.references;",
      "info" : "VariableDeclarationStatement[23172-23216]:VariableDeclarationStatement[24338-24382]"
    }, {
      "left" : "int startingReadRef = 1;",
      "right" : "int startingReadRef = 1;",
      "info" : "VariableDeclarationStatement[23223-23247]:VariableDeclarationStatement[24389-24413]"
    }, {
      "left" : "Reference refDecl = refSet.get(0);",
      "right" : "Reference refDecl = refSet.get(0);",
      "info" : "VariableDeclarationStatement[23254-23288]:VariableDeclarationStatement[24420-24454]"
    }, {
      "left" : "if (!isValidDeclaration(refDecl))",
      "right" : "if (!isValidDeclaration(refDecl))",
      "info" : "IfStatement[23295-23360]:IfStatement[24461-24526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23329-23360]:Block[24495-24526]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23339-23352]:ReturnStatement[24505-24518]"
    }, {
      "left" : "boolean isNeverAssigned = refInfo.isNeverAssigned();",
      "right" : "boolean isNeverAssigned = refInfo.isNeverAssigned();",
      "info" : "VariableDeclarationStatement[23368-23420]:VariableDeclarationStatement[24534-24586]"
    }, {
      "left" : "if (!isNeverAssigned)",
      "right" : "if (!isNeverAssigned)",
      "info" : "IfStatement[23521-24434]:IfStatement[24687-25600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23543-24434]:Block[24709-25600]"
    }, {
      "left" : "Reference refInit = refInfo.getInitializingReference();",
      "right" : "Reference refInit = refInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[23553-23608]:VariableDeclarationStatement[24719-24774]"
    }, {
      "left" : "if (!isValidInitialization(refInit))",
      "right" : "if (!isValidInitialization(refInit))",
      "info" : "IfStatement[23617-23689]:IfStatement[24783-24855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23654-23689]:Block[24820-24855]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23666-23679]:ReturnStatement[24832-24845]"
    }, {
      "left" : "if (refDecl != refInit)",
      "right" : "if (refDecl != refInit)",
      "info" : "IfStatement[23699-23827]:IfStatement[24865-24993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23723-23827]:Block[24889-24993]"
    }, {
      "left" : "Preconditions.checkState(refInit == refSet.get(1));",
      "right" : "Preconditions.checkState(refInit == refSet.get(1));",
      "info" : "ExpressionStatement[23735-23786]:ExpressionStatement[24901-24952]"
    }, {
      "left" : "startingReadRef = 2;",
      "right" : "startingReadRef = 2;",
      "info" : "ExpressionStatement[23797-23817]:ExpressionStatement[24963-24983]"
    }, {
      "left" : "if (!refInfo.isWellDefined())",
      "right" : "if (!refInfo.isWellDefined())",
      "info" : "IfStatement[23837-23902]:IfStatement[25003-25068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23867-23902]:Block[25033-25068]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23879-23892]:ReturnStatement[25045-25058]"
    }, {
      "left" : "Node value = refInit.getAssignedValue();",
      "right" : "Node value = refInit.getAssignedValue();",
      "info" : "VariableDeclarationStatement[23912-23952]:VariableDeclarationStatement[25078-25118]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[23961-23995]:ExpressionStatement[25127-25161]"
    }, {
      "left" : "boolean isImmutableValueWorthInlining =\n            NodeUtil.isImmutableValue(value) &&\n            (value.getType() != Token.STRING ||\n                isStringWorthInlining(v, refInfo.references));",
      "right" : "boolean isImmutableValueWorthInlining =\n            NodeUtil.isImmutableValue(value) &&\n            (value.getType() != Token.STRING ||\n                isStringWorthInlining(v, refInfo.references));",
      "info" : "VariableDeclarationStatement[24005-24203]:VariableDeclarationStatement[25171-25369]"
    }, {
      "left" : "boolean isInlinableThisAlias =\n            value.getType() == Token.THIS &&\n            !refInfo.isEscaped();",
      "right" : "boolean isInlinableThisAlias =\n            value.getType() == Token.THIS &&\n            !refInfo.isEscaped();",
      "info" : "VariableDeclarationStatement[24212-24321]:VariableDeclarationStatement[25378-25487]"
    }, {
      "left" : "if (!isImmutableValueWorthInlining && !isInlinableThisAlias)",
      "right" : "if (!isImmutableValueWorthInlining && !isInlinableThisAlias)",
      "info" : "IfStatement[24330-24426]:IfStatement[25496-25592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24391-24426]:Block[25557-25592]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24403-24416]:ReturnStatement[25569-25582]"
    }, {
      "left" : "for (int i = startingReadRef; i < refSet.size(); i++)",
      "right" : "for (int i = startingReadRef; i < refSet.size(); i++)",
      "info" : "ForStatement[24442-24616]:ForStatement[25608-25782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24496-24616]:Block[25662-25782]"
    }, {
      "left" : "Reference ref = refSet.get(i);",
      "right" : "Reference ref = refSet.get(i);",
      "info" : "VariableDeclarationStatement[24506-24536]:VariableDeclarationStatement[25672-25702]"
    }, {
      "left" : "if (!isValidReference(ref))",
      "right" : "if (!isValidReference(ref))",
      "info" : "IfStatement[24545-24608]:IfStatement[25711-25774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24573-24608]:Block[25739-25774]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24585-24598]:ReturnStatement[25751-25764]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24624-24636]:ReturnStatement[25790-25802]"
    } ]
  },
  "interFileMappings" : { }
}