{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "OpenMapRealVector",
      "right" : "OpenMapRealVector",
      "info" : "TypeDeclaration[1180-28283]:TypeDeclaration[1180-28267]"
    }, {
      "left" : "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;",
      "right" : "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;",
      "info" : "FieldDeclaration[1442-1567]:FieldDeclaration[1442-1567]"
    }, {
      "left" : "private static final long serialVersionUID = 8772222695580707260L;",
      "right" : "private static final long serialVersionUID = 8772222695580707260L;",
      "info" : "FieldDeclaration[1572-1682]:FieldDeclaration[1572-1682]"
    }, {
      "left" : "private final OpenIntToDoubleHashMap entries;",
      "right" : "private final OpenIntToDoubleHashMap entries;",
      "info" : "FieldDeclaration[1687-1766]:FieldDeclaration[1687-1766]"
    }, {
      "left" : "private final int virtualSize;",
      "right" : "private final int virtualSize;",
      "info" : "FieldDeclaration[1771-1837]:FieldDeclaration[1771-1837]"
    }, {
      "left" : "private final double epsilon;",
      "right" : "private final double epsilon;",
      "info" : "FieldDeclaration[1842-1928]:FieldDeclaration[1842-1928]"
    }, {
      "left" : "public OpenMapRealVector()",
      "right" : "public OpenMapRealVector()",
      "info" : "MethodDeclaration[1934-2448]:MethodDeclaration[1934-2448]"
    }, {
      "left" : "public OpenMapRealVector(int dimension)",
      "right" : "public OpenMapRealVector(int dimension)",
      "info" : "MethodDeclaration[2454-2654]:MethodDeclaration[2454-2654]"
    }, {
      "left" : "public OpenMapRealVector(int dimension, double epsilon)",
      "right" : "public OpenMapRealVector(int dimension, double epsilon)",
      "info" : "MethodDeclaration[2660-3039]:MethodDeclaration[2660-3039]"
    }, {
      "left" : "protected OpenMapRealVector(OpenMapRealVector v, int resize)",
      "right" : "protected OpenMapRealVector(OpenMapRealVector v, int resize)",
      "info" : "MethodDeclaration[3045-3392]:MethodDeclaration[3045-3392]"
    }, {
      "left" : "public OpenMapRealVector(int dimension, int expectedSize)",
      "right" : "public OpenMapRealVector(int dimension, int expectedSize)",
      "info" : "MethodDeclaration[3398-3734]:MethodDeclaration[3398-3734]"
    }, {
      "left" : "public OpenMapRealVector(int dimension, int expectedSize, double epsilon)",
      "right" : "public OpenMapRealVector(int dimension, int expectedSize, double epsilon)",
      "info" : "MethodDeclaration[3740-4261]:MethodDeclaration[3740-4261]"
    }, {
      "left" : "public OpenMapRealVector(double[] values)",
      "right" : "public OpenMapRealVector(double[] values)",
      "info" : "MethodDeclaration[4267-4510]:MethodDeclaration[4267-4510]"
    }, {
      "left" : "public OpenMapRealVector(double[] values, double epsilon)",
      "right" : "public OpenMapRealVector(double[] values, double epsilon)",
      "info" : "MethodDeclaration[4516-5151]:MethodDeclaration[4516-5151]"
    }, {
      "left" : "public OpenMapRealVector(Double[] values)",
      "right" : "public OpenMapRealVector(Double[] values)",
      "info" : "MethodDeclaration[5157-5403]:MethodDeclaration[5157-5403]"
    }, {
      "left" : "public OpenMapRealVector(Double[] values, double epsilon)",
      "right" : "public OpenMapRealVector(Double[] values, double epsilon)",
      "info" : "MethodDeclaration[5409-6031]:MethodDeclaration[5409-6031]"
    }, {
      "left" : "public OpenMapRealVector(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector(OpenMapRealVector v)",
      "info" : "MethodDeclaration[6037-6308]:MethodDeclaration[6037-6308]"
    }, {
      "left" : "public OpenMapRealVector(RealVector v)",
      "right" : "public OpenMapRealVector(RealVector v)",
      "info" : "MethodDeclaration[6314-6793]:MethodDeclaration[6314-6793]"
    }, {
      "left" : "private OpenIntToDoubleHashMap getEntries()",
      "right" : "private OpenIntToDoubleHashMap getEntries()",
      "info" : "MethodDeclaration[6799-6983]:MethodDeclaration[6799-6983]"
    }, {
      "left" : "protected boolean isDefaultValue(double value)",
      "right" : "protected boolean isDefaultValue(double value)",
      "info" : "MethodDeclaration[6989-7323]:MethodDeclaration[6989-7323]"
    }, {
      "left" : "public RealVector add(RealVector v)",
      "right" : "public RealVector add(RealVector v)",
      "info" : "MethodDeclaration[7329-7617]:MethodDeclaration[7329-7617]"
    }, {
      "left" : "public OpenMapRealVector add(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector add(OpenMapRealVector v)",
      "info" : "MethodDeclaration[7623-8691]:MethodDeclaration[7623-8691]"
    }, {
      "left" : "public OpenMapRealVector append(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector append(OpenMapRealVector v)",
      "info" : "MethodDeclaration[8697-9200]:MethodDeclaration[8697-9200]"
    }, {
      "left" : "public OpenMapRealVector append(RealVector v)",
      "right" : "public OpenMapRealVector append(RealVector v)",
      "info" : "MethodDeclaration[9206-9426]:MethodDeclaration[9206-9426]"
    }, {
      "left" : "public OpenMapRealVector append(double d)",
      "right" : "public OpenMapRealVector append(double d)",
      "info" : "MethodDeclaration[9432-9628]:MethodDeclaration[9432-9628]"
    }, {
      "left" : "public OpenMapRealVector append(double[] a)",
      "right" : "public OpenMapRealVector append(double[] a)",
      "info" : "MethodDeclaration[9634-9905]:MethodDeclaration[9634-9905]"
    }, {
      "left" : "public OpenMapRealVector copy()",
      "right" : "public OpenMapRealVector copy()",
      "info" : "MethodDeclaration[9911-10063]:MethodDeclaration[9911-10063]"
    }, {
      "left" : "public double dotProduct(OpenMapRealVector v)",
      "right" : "public double dotProduct(OpenMapRealVector v)",
      "info" : "MethodDeclaration[10069-10950]:MethodDeclaration[10069-10950]"
    }, {
      "left" : "public double dotProduct(RealVector v)",
      "right" : "public double dotProduct(RealVector v)",
      "info" : "MethodDeclaration[10956-11206]:MethodDeclaration[10956-11206]"
    }, {
      "left" : "public OpenMapRealVector ebeDivide(RealVector v)",
      "right" : "public OpenMapRealVector ebeDivide(RealVector v)",
      "info" : "MethodDeclaration[11212-11619]:MethodDeclaration[11212-11615]"
    }, {
      "left" : "public OpenMapRealVector ebeDivide(double[] v)",
      "right" : "public OpenMapRealVector ebeDivide(double[] v)",
      "info" : "MethodDeclaration[11625-12027]:MethodDeclaration[11621-12019]"
    }, {
      "left" : "public OpenMapRealVector ebeMultiply(RealVector v)",
      "right" : "public OpenMapRealVector ebeMultiply(RealVector v)",
      "info" : "MethodDeclaration[12033-12442]:MethodDeclaration[12025-12430]"
    }, {
      "left" : "public OpenMapRealVector ebeMultiply(double[] v)",
      "right" : "public OpenMapRealVector ebeMultiply(double[] v)",
      "info" : "MethodDeclaration[12448-12852]:MethodDeclaration[12436-12836]"
    }, {
      "left" : "public OpenMapRealVector getSubVector(int index, int n)",
      "right" : "public OpenMapRealVector getSubVector(int index, int n)",
      "info" : "MethodDeclaration[12858-13380]:MethodDeclaration[12842-13364]"
    }, {
      "left" : "public double[] getData()",
      "right" : "public double[] getData()",
      "info" : "MethodDeclaration[13386-13685]:MethodDeclaration[13370-13669]"
    }, {
      "left" : "public int getDimension()",
      "right" : "public int getDimension()",
      "info" : "MethodDeclaration[13691-13777]:MethodDeclaration[13675-13761]"
    }, {
      "left" : "public double getDistance(OpenMapRealVector v)",
      "right" : "public double getDistance(OpenMapRealVector v)",
      "info" : "MethodDeclaration[13783-14743]:MethodDeclaration[13767-14727]"
    }, {
      "left" : "public double getDistance(RealVector v)",
      "right" : "public double getDistance(RealVector v)",
      "info" : "MethodDeclaration[14749-15036]:MethodDeclaration[14733-15020]"
    }, {
      "left" : "public double getDistance(double[] v)",
      "right" : "public double getDistance(double[] v)",
      "info" : "MethodDeclaration[15042-15365]:MethodDeclaration[15026-15349]"
    }, {
      "left" : "public double getEntry(int index)",
      "right" : "public double getEntry(int index)",
      "info" : "MethodDeclaration[15371-15499]:MethodDeclaration[15355-15483]"
    }, {
      "left" : "public double getL1Distance(OpenMapRealVector v)",
      "right" : "public double getL1Distance(OpenMapRealVector v)",
      "info" : "MethodDeclaration[15505-16462]:MethodDeclaration[15489-16446]"
    }, {
      "left" : "public double getL1Distance(RealVector v)",
      "right" : "public double getL1Distance(RealVector v)",
      "info" : "MethodDeclaration[16468-16761]:MethodDeclaration[16452-16745]"
    }, {
      "left" : "public double getL1Distance(double[] v)",
      "right" : "public double getL1Distance(double[] v)",
      "info" : "MethodDeclaration[16767-17080]:MethodDeclaration[16751-17064]"
    }, {
      "left" : "private double getLInfDistance(OpenMapRealVector v)",
      "right" : "private double getLInfDistance(OpenMapRealVector v)",
      "info" : "MethodDeclaration[17086-17918]:MethodDeclaration[17070-17902]"
    }, {
      "left" : "public double getLInfDistance(RealVector v)",
      "right" : "public double getLInfDistance(RealVector v)",
      "info" : "MethodDeclaration[17924-18223]:MethodDeclaration[17908-18207]"
    }, {
      "left" : "public double getLInfDistance(double[] v)",
      "right" : "public double getLInfDistance(double[] v)",
      "info" : "MethodDeclaration[18229-18592]:MethodDeclaration[18213-18576]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[18598-19068]:MethodDeclaration[18582-19052]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[19074-19355]:MethodDeclaration[19058-19339]"
    }, {
      "left" : "public OpenMapRealVector mapAdd(double d)",
      "right" : "public OpenMapRealVector mapAdd(double d)",
      "info" : "MethodDeclaration[19361-19488]:MethodDeclaration[19345-19472]"
    }, {
      "left" : "public OpenMapRealVector mapAddToSelf(double d)",
      "right" : "public OpenMapRealVector mapAddToSelf(double d)",
      "info" : "MethodDeclaration[19494-19709]:MethodDeclaration[19478-19693]"
    }, {
      "left" : "public RealMatrix outerProduct(double[] v)",
      "right" : "public RealMatrix outerProduct(double[] v)",
      "info" : "MethodDeclaration[19716-20229]:MethodDeclaration[19700-20213]"
    }, {
      "left" : "public RealVector projection(RealVector v)",
      "right" : "public RealVector projection(RealVector v)",
      "info" : "MethodDeclaration[20235-20422]:MethodDeclaration[20219-20406]"
    }, {
      "left" : "public OpenMapRealVector projection(double[] v)",
      "right" : "public OpenMapRealVector projection(double[] v)",
      "info" : "MethodDeclaration[20428-20636]:MethodDeclaration[20412-20620]"
    }, {
      "left" : "public void setEntry(int index, double value)",
      "right" : "public void setEntry(int index, double value)",
      "info" : "MethodDeclaration[20642-20918]:MethodDeclaration[20626-20902]"
    }, {
      "left" : "public void setSubVector(int index, RealVector v)",
      "right" : "public void setSubVector(int index, RealVector v)",
      "info" : "MethodDeclaration[20924-21139]:MethodDeclaration[20908-21123]"
    }, {
      "left" : "public void setSubVector(int index, double[] v)",
      "right" : "public void setSubVector(int index, double[] v)",
      "info" : "MethodDeclaration[21145-21402]:MethodDeclaration[21129-21386]"
    }, {
      "left" : "public void set(double value)",
      "right" : "public void set(double value)",
      "info" : "MethodDeclaration[21408-21574]:MethodDeclaration[21392-21558]"
    }, {
      "left" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
      "right" : "public OpenMapRealVector subtract(OpenMapRealVector v)",
      "info" : "MethodDeclaration[21580-22413]:MethodDeclaration[21564-22397]"
    }, {
      "left" : "public OpenMapRealVector subtract(RealVector v)",
      "right" : "public OpenMapRealVector subtract(RealVector v)",
      "info" : "MethodDeclaration[22419-22708]:MethodDeclaration[22403-22692]"
    }, {
      "left" : "public OpenMapRealVector subtract(double[] v)",
      "right" : "public OpenMapRealVector subtract(double[] v)",
      "info" : "MethodDeclaration[22714-23156]:MethodDeclaration[22698-23140]"
    }, {
      "left" : "public OpenMapRealVector unitVector()",
      "right" : "public OpenMapRealVector unitVector()",
      "info" : "MethodDeclaration[23163-23330]:MethodDeclaration[23147-23314]"
    }, {
      "left" : "public void unitize()",
      "right" : "public void unitize()",
      "info" : "MethodDeclaration[23336-23731]:MethodDeclaration[23320-23715]"
    }, {
      "left" : "public double[] toArray()",
      "right" : "public double[] toArray()",
      "info" : "MethodDeclaration[23737-23835]:MethodDeclaration[23721-23819]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[23841-24610]:MethodDeclaration[23825-24594]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[24616-25955]:MethodDeclaration[24600-25939]"
    }, {
      "left" : "public double getSparsity()",
      "right" : "public double getSparsity()",
      "info" : "MethodDeclaration[25961-26173]:MethodDeclaration[25945-26157]"
    }, {
      "left" : "public java.util.Iterator<Entry> sparseIterator()",
      "right" : "public java.util.Iterator<Entry> sparseIterator()",
      "info" : "MethodDeclaration[26179-26319]:MethodDeclaration[26163-26303]"
    }, {
      "left" : "OpenMapEntry",
      "right" : "OpenMapEntry",
      "info" : "TypeDeclaration[26325-27320]:TypeDeclaration[26309-27304]"
    }, {
      "left" : "private final Iterator iter;",
      "right" : "private final Iterator iter;",
      "info" : "FieldDeclaration[26601-26676]:FieldDeclaration[26585-26660]"
    }, {
      "left" : "protected OpenMapEntry(Iterator iter)",
      "right" : "protected OpenMapEntry(Iterator iter)",
      "info" : "MethodDeclaration[26686-26919]:MethodDeclaration[26670-26903]"
    }, {
      "left" : "public double getValue()",
      "right" : "public double getValue()",
      "info" : "MethodDeclaration[26929-27045]:MethodDeclaration[26913-27029]"
    }, {
      "left" : "public void setValue(double value)",
      "right" : "public void setValue(double value)",
      "info" : "MethodDeclaration[27055-27192]:MethodDeclaration[27039-27176]"
    }, {
      "left" : "public int getIndex()",
      "right" : "public int getIndex()",
      "info" : "MethodDeclaration[27202-27313]:MethodDeclaration[27186-27297]"
    }, {
      "left" : "OpenMapSparseIterator",
      "right" : "OpenMapSparseIterator",
      "info" : "TypeDeclaration[27326-28281]:TypeDeclaration[27310-28265]"
    }, {
      "left" : "private final Iterator iter;",
      "right" : "private final Iterator iter;",
      "info" : "FieldDeclaration[27592-27656]:FieldDeclaration[27576-27640]"
    }, {
      "left" : "private final Entry current;",
      "right" : "private final Entry current;",
      "info" : "FieldDeclaration[27665-27723]:FieldDeclaration[27649-27707]"
    }, {
      "left" : "protected OpenMapSparseIterator()",
      "right" : "protected OpenMapSparseIterator()",
      "info" : "MethodDeclaration[27733-27898]:MethodDeclaration[27717-27882]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[27908-28008]:MethodDeclaration[27892-27992]"
    }, {
      "left" : "public Entry next()",
      "right" : "public Entry next()",
      "info" : "MethodDeclaration[28018-28134]:MethodDeclaration[28002-28118]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[28144-28275]:MethodDeclaration[28128-28259]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2400-2448]:Block[2400-2448]"
    }, {
      "left" : "this(0, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(0, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[2410-2442]:ConstructorInvocation[2410-2442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2598-2654]:Block[2598-2654]"
    }, {
      "left" : "this(dimension, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(dimension, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[2608-2648]:ConstructorInvocation[2608-2648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-3039]:Block[2916-3039]"
    }, {
      "left" : "virtualSize = dimension;",
      "right" : "virtualSize = dimension;",
      "info" : "ExpressionStatement[2926-2950]:ExpressionStatement[2926-2950]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[2959-3001]:ExpressionStatement[2959-3001]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[3010-3033]:ExpressionStatement[3010-3033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3250-3392]:Block[3250-3392]"
    }, {
      "left" : "virtualSize = v.getDimension() + resize;",
      "right" : "virtualSize = v.getDimension() + resize;",
      "info" : "ExpressionStatement[3260-3300]:ExpressionStatement[3260-3300]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(v.entries);",
      "right" : "entries = new OpenIntToDoubleHashMap(v.entries);",
      "info" : "ExpressionStatement[3309-3357]:ExpressionStatement[3309-3357]"
    }, {
      "left" : "epsilon = v.epsilon;",
      "right" : "epsilon = v.epsilon;",
      "info" : "ExpressionStatement[3366-3386]:ExpressionStatement[3366-3386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3664-3734]:Block[3664-3734]"
    }, {
      "left" : "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[3674-3728]:ConstructorInvocation[3674-3728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4124-4261]:Block[4124-4261]"
    }, {
      "left" : "virtualSize = dimension;",
      "right" : "virtualSize = dimension;",
      "info" : "ExpressionStatement[4134-4158]:ExpressionStatement[4134-4158]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",
      "info" : "ExpressionStatement[4167-4223]:ExpressionStatement[4167-4223]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[4232-4255]:ExpressionStatement[4232-4255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4457-4510]:Block[4457-4510]"
    }, {
      "left" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[4467-4504]:ConstructorInvocation[4467-4504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4821-5151]:Block[4821-5151]"
    }, {
      "left" : "virtualSize = values.length;",
      "right" : "virtualSize = values.length;",
      "info" : "ExpressionStatement[4831-4859]:ExpressionStatement[4831-4859]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[4868-4910]:ExpressionStatement[4868-4910]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[4919-4942]:ExpressionStatement[4919-4942]"
    }, {
      "left" : "for (int key = 0; key < values.length; key++)",
      "right" : "for (int key = 0; key < values.length; key++)",
      "info" : "ForStatement[4951-5145]:ForStatement[4951-5145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4997-5145]:Block[4997-5145]"
    }, {
      "left" : "double value = values[key];",
      "right" : "double value = values[key];",
      "info" : "VariableDeclarationStatement[5011-5038]:VariableDeclarationStatement[5011-5038]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[5051-5135]:IfStatement[5051-5135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5079-5135]:Block[5079-5135]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[5097-5121]:ExpressionStatement[5097-5121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5403]:Block[5350-5403]"
    }, {
      "left" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "right" : "this(values, DEFAULT_ZERO_TOLERANCE);",
      "info" : "ConstructorInvocation[5360-5397]:ConstructorInvocation[5360-5397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5687-6031]:Block[5687-6031]"
    }, {
      "left" : "virtualSize = values.length;",
      "right" : "virtualSize = values.length;",
      "info" : "ExpressionStatement[5697-5725]:ExpressionStatement[5697-5725]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[5734-5776]:ExpressionStatement[5734-5776]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[5785-5808]:ExpressionStatement[5785-5808]"
    }, {
      "left" : "for (int key = 0; key < values.length; key++)",
      "right" : "for (int key = 0; key < values.length; key++)",
      "info" : "ForStatement[5817-6025]:ForStatement[5817-6025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5863-6025]:Block[5863-6025]"
    }, {
      "left" : "double value = values[key].doubleValue();",
      "right" : "double value = values[key].doubleValue();",
      "info" : "VariableDeclarationStatement[5877-5918]:VariableDeclarationStatement[5877-5918]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[5931-6015]:IfStatement[5931-6015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5959-6015]:Block[5959-6015]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[5977-6001]:ExpressionStatement[5977-6001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6170-6308]:Block[6170-6308]"
    }, {
      "left" : "virtualSize = v.getDimension();",
      "right" : "virtualSize = v.getDimension();",
      "info" : "ExpressionStatement[6180-6211]:ExpressionStatement[6180-6211]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(v.getEntries());",
      "right" : "entries = new OpenIntToDoubleHashMap(v.getEntries());",
      "info" : "ExpressionStatement[6220-6273]:ExpressionStatement[6220-6273]"
    }, {
      "left" : "epsilon = v.epsilon;",
      "right" : "epsilon = v.epsilon;",
      "info" : "ExpressionStatement[6282-6302]:ExpressionStatement[6282-6302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6448-6793]:Block[6448-6793]"
    }, {
      "left" : "virtualSize = v.getDimension();",
      "right" : "virtualSize = v.getDimension();",
      "info" : "ExpressionStatement[6458-6489]:ExpressionStatement[6458-6489]"
    }, {
      "left" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "right" : "entries = new OpenIntToDoubleHashMap(0.0);",
      "info" : "ExpressionStatement[6498-6540]:ExpressionStatement[6498-6540]"
    }, {
      "left" : "epsilon = DEFAULT_ZERO_TOLERANCE;",
      "right" : "epsilon = DEFAULT_ZERO_TOLERANCE;",
      "info" : "ExpressionStatement[6549-6582]:ExpressionStatement[6549-6582]"
    }, {
      "left" : "for (int key = 0; key < virtualSize; key++)",
      "right" : "for (int key = 0; key < virtualSize; key++)",
      "info" : "ForStatement[6591-6787]:ForStatement[6591-6787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6635-6787]:Block[6635-6787]"
    }, {
      "left" : "double value = v.getEntry(key);",
      "right" : "double value = v.getEntry(key);",
      "info" : "VariableDeclarationStatement[6649-6680]:VariableDeclarationStatement[6649-6680]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[6693-6777]:IfStatement[6693-6777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6721-6777]:Block[6721-6777]"
    }, {
      "left" : "entries.put(key, value);",
      "right" : "entries.put(key, value);",
      "info" : "ExpressionStatement[6739-6763]:ExpressionStatement[6739-6763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6952-6983]:Block[6952-6983]"
    }, {
      "left" : "return entries;",
      "right" : "return entries;",
      "info" : "ReturnStatement[6962-6977]:ReturnStatement[6962-6977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7270-7323]:Block[7270-7323]"
    }, {
      "left" : "return FastMath.abs(value) < epsilon;",
      "right" : "return FastMath.abs(value) < epsilon;",
      "info" : "ReturnStatement[7280-7317]:ReturnStatement[7280-7317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7408-7617]:Block[7408-7617]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[7418-7458]:ExpressionStatement[7418-7458]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[7467-7611]:IfStatement[7467-7611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7503-7561]:Block[7503-7561]"
    }, {
      "left" : "return add((OpenMapRealVector) v);",
      "right" : "return add((OpenMapRealVector) v);",
      "info" : "ReturnStatement[7517-7551]:ReturnStatement[7517-7551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7567-7611]:Block[7567-7611]"
    }, {
      "left" : "return super.add(v);",
      "right" : "return super.add(v);",
      "info" : "ReturnStatement[7581-7601]:ReturnStatement[7581-7601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8019-8691]:Block[8019-8691]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[8029-8069]:ExpressionStatement[8029-8069]"
    }, {
      "left" : "boolean copyThis = entries.size() > v.entries.size();",
      "right" : "boolean copyThis = entries.size() > v.entries.size();",
      "info" : "VariableDeclarationStatement[8078-8131]:VariableDeclarationStatement[8078-8131]"
    }, {
      "left" : "OpenMapRealVector res = copyThis ? this.copy() : v.copy();",
      "right" : "OpenMapRealVector res = copyThis ? this.copy() : v.copy();",
      "info" : "VariableDeclarationStatement[8140-8198]:VariableDeclarationStatement[8140-8198]"
    }, {
      "left" : "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();",
      "right" : "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();",
      "info" : "VariableDeclarationStatement[8207-8276]:VariableDeclarationStatement[8207-8276]"
    }, {
      "left" : "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;",
      "right" : "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;",
      "info" : "VariableDeclarationStatement[8285-8354]:VariableDeclarationStatement[8285-8354]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[8363-8665]:WhileStatement[8363-8665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8386-8665]:Block[8386-8665]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[8400-8415]:ExpressionStatement[8400-8415]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[8428-8449]:VariableDeclarationStatement[8428-8449]"
    }, {
      "left" : "if (randomAccess.containsKey(key))",
      "right" : "if (randomAccess.containsKey(key))",
      "info" : "IfStatement[8462-8655]:IfStatement[8462-8655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8497-8585]:Block[8497-8585]"
    }, {
      "left" : "res.setEntry(key, randomAccess.get(key) + iter.value());",
      "right" : "res.setEntry(key, randomAccess.get(key) + iter.value());",
      "info" : "ExpressionStatement[8515-8571]:ExpressionStatement[8515-8571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8591-8655]:Block[8591-8655]"
    }, {
      "left" : "res.setEntry(key, iter.value());",
      "right" : "res.setEntry(key, iter.value());",
      "info" : "ExpressionStatement[8609-8641]:ExpressionStatement[8609-8641]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[8674-8685]:ReturnStatement[8674-8685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8911-9200]:Block[8911-9200]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",
      "info" : "VariableDeclarationStatement[8921-8991]:VariableDeclarationStatement[8921-8991]"
    }, {
      "left" : "Iterator iter = v.entries.iterator();",
      "right" : "Iterator iter = v.entries.iterator();",
      "info" : "VariableDeclarationStatement[9000-9037]:VariableDeclarationStatement[9000-9037]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[9046-9174]:WhileStatement[9046-9174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9069-9174]:Block[9069-9174]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[9083-9098]:ExpressionStatement[9083-9098]"
    }, {
      "left" : "res.setEntry(iter.key() + virtualSize, iter.value());",
      "right" : "res.setEntry(iter.key() + virtualSize, iter.value());",
      "info" : "ExpressionStatement[9111-9164]:ExpressionStatement[9111-9164]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9183-9194]:ReturnStatement[9183-9194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9277-9426]:Block[9277-9426]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[9287-9384]:IfStatement[9287-9384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9323-9384]:Block[9323-9384]"
    }, {
      "left" : "return append((OpenMapRealVector) v);",
      "right" : "return append((OpenMapRealVector) v);",
      "info" : "ReturnStatement[9337-9374]:ReturnStatement[9337-9374]"
    }, {
      "left" : "return append(v.getData());",
      "right" : "return append(v.getData());",
      "info" : "ReturnStatement[9393-9420]:ReturnStatement[9393-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9499-9628]:Block[9499-9628]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this, 1);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this, 1);",
      "info" : "VariableDeclarationStatement[9509-9564]:VariableDeclarationStatement[9509-9564]"
    }, {
      "left" : "res.setEntry(virtualSize, d);",
      "right" : "res.setEntry(virtualSize, d);",
      "info" : "ExpressionStatement[9573-9602]:ExpressionStatement[9573-9602]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9611-9622]:ReturnStatement[9611-9622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9703-9905]:Block[9703-9905]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this, a.length);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this, a.length);",
      "info" : "VariableDeclarationStatement[9713-9775]:VariableDeclarationStatement[9713-9775]"
    }, {
      "left" : "for (int i = 0; i < a.length; i++)",
      "right" : "for (int i = 0; i < a.length; i++)",
      "info" : "ForStatement[9784-9879]:ForStatement[9784-9879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9819-9879]:Block[9819-9879]"
    }, {
      "left" : "res.setEntry(i + virtualSize, a[i]);",
      "right" : "res.setEntry(i + virtualSize, a[i]);",
      "info" : "ExpressionStatement[9833-9869]:ExpressionStatement[9833-9869]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[9888-9899]:ReturnStatement[9888-9899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10012-10063]:Block[10012-10063]"
    }, {
      "left" : "return new OpenMapRealVector(this);",
      "right" : "return new OpenMapRealVector(this);",
      "info" : "ReturnStatement[10022-10057]:ReturnStatement[10022-10057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10498-10950]:Block[10498-10950]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[10508-10548]:ExpressionStatement[10508-10548]"
    }, {
      "left" : "boolean thisIsSmaller  = entries.size() < v.entries.size();",
      "right" : "boolean thisIsSmaller  = entries.size() < v.entries.size();",
      "info" : "VariableDeclarationStatement[10557-10616]:VariableDeclarationStatement[10557-10616]"
    }, {
      "left" : "Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();",
      "right" : "Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();",
      "info" : "VariableDeclarationStatement[10625-10700]:VariableDeclarationStatement[10625-10700]"
    }, {
      "left" : "OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;",
      "right" : "OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;",
      "info" : "VariableDeclarationStatement[10709-10778]:VariableDeclarationStatement[10709-10778]"
    }, {
      "left" : "double d = 0;",
      "right" : "double d = 0;",
      "info" : "VariableDeclarationStatement[10787-10800]:VariableDeclarationStatement[10787-10800]"
    }, {
      "left" : "while(iter.hasNext())",
      "right" : "while(iter.hasNext())",
      "info" : "WhileStatement[10809-10926]:WhileStatement[10809-10926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10831-10926]:Block[10831-10926]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[10845-10860]:ExpressionStatement[10845-10860]"
    }, {
      "left" : "d += iter.value() * larger.get(iter.key());",
      "right" : "d += iter.value() * larger.get(iter.key());",
      "info" : "ExpressionStatement[10873-10916]:ExpressionStatement[10873-10916]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[10935-10944]:ReturnStatement[10935-10944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11034-11206]:Block[11034-11206]"
    }, {
      "left" : "if(v instanceof OpenMapRealVector)",
      "right" : "if(v instanceof OpenMapRealVector)",
      "info" : "IfStatement[11044-11200]:IfStatement[11044-11200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11079-11143]:Block[11079-11143]"
    }, {
      "left" : "return dotProduct((OpenMapRealVector)v);",
      "right" : "return dotProduct((OpenMapRealVector)v);",
      "info" : "ReturnStatement[11093-11133]:ReturnStatement[11093-11133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11149-11200]:Block[11149-11200]"
    }, {
      "left" : "return super.dotProduct(v);",
      "right" : "return super.dotProduct(v);",
      "info" : "ReturnStatement[11163-11190]:ReturnStatement[11163-11190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11286-11619]:Block[11286-11615]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[11296-11336]:ExpressionStatement[11296-11336]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[11345-11397]:VariableDeclarationStatement[11345-11397]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[11454-11593]:WhileStatement[11450-11589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11477-11593]:Block[11473-11589]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[11491-11506]:ExpressionStatement[11487-11502]"
    }, {
      "left" : "res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",
      "right" : "res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",
      "info" : "ExpressionStatement[11519-11583]:ExpressionStatement[11515-11579]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[11602-11613]:ReturnStatement[11598-11609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11711-12027]:Block[11707-12019]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[11721-11753]:ExpressionStatement[11717-11749]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[11762-11814]:VariableDeclarationStatement[11758-11810]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[11871-12001]:WhileStatement[11863-11993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11894-12001]:Block[11886-11993]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[11908-11923]:ExpressionStatement[11900-11915]"
    }, {
      "left" : "res.setEntry(iter.key(), iter.value() / v[iter.key()]);",
      "right" : "res.setEntry(iter.key(), iter.value() / v[iter.key()]);",
      "info" : "ExpressionStatement[11936-11991]:ExpressionStatement[11928-11983]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[12010-12021]:ReturnStatement[12002-12013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12109-12442]:Block[12101-12430]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[12119-12159]:ExpressionStatement[12111-12151]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[12168-12220]:VariableDeclarationStatement[12160-12212]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[12277-12416]:WhileStatement[12265-12404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12300-12416]:Block[12288-12404]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[12314-12329]:ExpressionStatement[12302-12317]"
    }, {
      "left" : "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
      "right" : "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",
      "info" : "ExpressionStatement[12342-12406]:ExpressionStatement[12330-12394]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[12425-12436]:ReturnStatement[12413-12424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12536-12852]:Block[12524-12836]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[12546-12578]:ExpressionStatement[12534-12566]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[12587-12639]:VariableDeclarationStatement[12575-12627]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[12696-12826]:WhileStatement[12680-12810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12719-12826]:Block[12703-12810]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[12733-12748]:ExpressionStatement[12717-12732]"
    }, {
      "left" : "res.setEntry(iter.key(), iter.value() * v[iter.key()]);",
      "right" : "res.setEntry(iter.key(), iter.value() * v[iter.key()]);",
      "info" : "ExpressionStatement[12761-12816]:ExpressionStatement[12745-12800]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[12835-12846]:ReturnStatement[12819-12830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12939-13380]:Block[12923-13364]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[12949-12967]:ExpressionStatement[12933-12951]"
    }, {
      "left" : "checkIndex(index + n - 1);",
      "right" : "checkIndex(index + n - 1);",
      "info" : "ExpressionStatement[12976-13002]:ExpressionStatement[12960-12986]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(n);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(n);",
      "info" : "VariableDeclarationStatement[13011-13060]:VariableDeclarationStatement[12995-13044]"
    }, {
      "left" : "int end = index + n;",
      "right" : "int end = index + n;",
      "info" : "VariableDeclarationStatement[13069-13089]:VariableDeclarationStatement[13053-13073]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[13098-13133]:VariableDeclarationStatement[13082-13117]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[13142-13354]:WhileStatement[13126-13338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13165-13354]:Block[13149-13338]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[13179-13194]:ExpressionStatement[13163-13178]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[13207-13228]:VariableDeclarationStatement[13191-13212]"
    }, {
      "left" : "if (key >= index && key < end)",
      "right" : "if (key >= index && key < end)",
      "info" : "IfStatement[13241-13344]:IfStatement[13225-13328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13272-13344]:Block[13256-13328]"
    }, {
      "left" : "res.setEntry(key - index, iter.value());",
      "right" : "res.setEntry(key - index, iter.value());",
      "info" : "ExpressionStatement[13290-13330]:ExpressionStatement[13274-13314]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[13363-13374]:ReturnStatement[13347-13358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13451-13685]:Block[13435-13669]"
    }, {
      "left" : "double[] res = new double[virtualSize];",
      "right" : "double[] res = new double[virtualSize];",
      "info" : "VariableDeclarationStatement[13461-13500]:VariableDeclarationStatement[13445-13484]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[13509-13544]:VariableDeclarationStatement[13493-13528]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[13553-13659]:WhileStatement[13537-13643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13576-13659]:Block[13560-13643]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[13590-13605]:ExpressionStatement[13574-13589]"
    }, {
      "left" : "res[iter.key()] = iter.value();",
      "right" : "res[iter.key()] = iter.value();",
      "info" : "ExpressionStatement[13618-13649]:ExpressionStatement[13602-13633]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[13668-13679]:ReturnStatement[13652-13663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13742-13777]:Block[13726-13761]"
    }, {
      "left" : "return virtualSize;",
      "right" : "return virtualSize;",
      "info" : "ReturnStatement[13752-13771]:ReturnStatement[13736-13755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14121-14743]:Block[14105-14727]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[14131-14166]:VariableDeclarationStatement[14115-14150]"
    }, {
      "left" : "double res = 0;",
      "right" : "double res = 0;",
      "info" : "VariableDeclarationStatement[14175-14190]:VariableDeclarationStatement[14159-14174]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[14199-14407]:WhileStatement[14183-14391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14222-14407]:Block[14206-14391]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[14236-14251]:ExpressionStatement[14220-14235]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[14264-14285]:VariableDeclarationStatement[14248-14269]"
    }, {
      "left" : "double delta;",
      "right" : "double delta;",
      "info" : "VariableDeclarationStatement[14298-14311]:VariableDeclarationStatement[14282-14295]"
    }, {
      "left" : "delta = iter.value() - v.getEntry(key);",
      "right" : "delta = iter.value() - v.getEntry(key);",
      "info" : "ExpressionStatement[14324-14363]:ExpressionStatement[14308-14347]"
    }, {
      "left" : "res += delta * delta;",
      "right" : "res += delta * delta;",
      "info" : "ExpressionStatement[14376-14397]:ExpressionStatement[14360-14381]"
    }, {
      "left" : "iter = v.getEntries().iterator();",
      "right" : "iter = v.getEntries().iterator();",
      "info" : "ExpressionStatement[14416-14449]:ExpressionStatement[14400-14433]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[14458-14702]:WhileStatement[14442-14686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14481-14702]:Block[14465-14686]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[14495-14510]:ExpressionStatement[14479-14494]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[14523-14544]:VariableDeclarationStatement[14507-14528]"
    }, {
      "left" : "if (!entries.containsKey(key))",
      "right" : "if (!entries.containsKey(key))",
      "info" : "IfStatement[14557-14692]:IfStatement[14541-14676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14588-14692]:Block[14572-14676]"
    }, {
      "left" : "final double value = iter.value();",
      "right" : "final double value = iter.value();",
      "info" : "VariableDeclarationStatement[14606-14640]:VariableDeclarationStatement[14590-14624]"
    }, {
      "left" : "res += value * value;",
      "right" : "res += value * value;",
      "info" : "ExpressionStatement[14657-14678]:ExpressionStatement[14641-14662]"
    }, {
      "left" : "return FastMath.sqrt(res);",
      "right" : "return FastMath.sqrt(res);",
      "info" : "ReturnStatement[14711-14737]:ReturnStatement[14695-14721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14828-15036]:Block[14812-15020]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[14838-14878]:ExpressionStatement[14822-14862]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[14887-14989]:IfStatement[14871-14973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14923-14989]:Block[14907-14973]"
    }, {
      "left" : "return getDistance((OpenMapRealVector) v);",
      "right" : "return getDistance((OpenMapRealVector) v);",
      "info" : "ReturnStatement[14937-14979]:ReturnStatement[14921-14963]"
    }, {
      "left" : "return getDistance(v.getData());",
      "right" : "return getDistance(v.getData());",
      "info" : "ReturnStatement[14998-15030]:ReturnStatement[14982-15014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15119-15365]:Block[15103-15349]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[15129-15161]:ExpressionStatement[15113-15145]"
    }, {
      "left" : "double res = 0;",
      "right" : "double res = 0;",
      "info" : "VariableDeclarationStatement[15170-15185]:VariableDeclarationStatement[15154-15169]"
    }, {
      "left" : "for (int i = 0; i < v.length; i++)",
      "right" : "for (int i = 0; i < v.length; i++)",
      "info" : "ForStatement[15194-15324]:ForStatement[15178-15308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15229-15324]:Block[15213-15308]"
    }, {
      "left" : "double delta = entries.get(i) - v[i];",
      "right" : "double delta = entries.get(i) - v[i];",
      "info" : "VariableDeclarationStatement[15243-15280]:VariableDeclarationStatement[15227-15264]"
    }, {
      "left" : "res += delta * delta;",
      "right" : "res += delta * delta;",
      "info" : "ExpressionStatement[15293-15314]:ExpressionStatement[15277-15298]"
    }, {
      "left" : "return FastMath.sqrt(res);",
      "right" : "return FastMath.sqrt(res);",
      "info" : "ReturnStatement[15333-15359]:ReturnStatement[15317-15343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15430-15499]:Block[15414-15483]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[15440-15458]:ExpressionStatement[15424-15442]"
    }, {
      "left" : "return entries.get(index);",
      "right" : "return entries.get(index);",
      "info" : "ReturnStatement[15467-15493]:ReturnStatement[15451-15477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15880-16462]:Block[15864-16446]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[15890-15905]:VariableDeclarationStatement[15874-15889]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[15914-15949]:VariableDeclarationStatement[15898-15933]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[15958-16126]:WhileStatement[15942-16110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15981-16126]:Block[15965-16110]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[15995-16010]:ExpressionStatement[15979-15994]"
    }, {
      "left" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "right" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "info" : "VariableDeclarationStatement[16023-16090]:VariableDeclarationStatement[16007-16074]"
    }, {
      "left" : "max += delta;",
      "right" : "max += delta;",
      "info" : "ExpressionStatement[16103-16116]:ExpressionStatement[16087-16100]"
    }, {
      "left" : "iter = v.getEntries().iterator();",
      "right" : "iter = v.getEntries().iterator();",
      "info" : "ExpressionStatement[16135-16168]:ExpressionStatement[16119-16152]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[16177-16436]:WhileStatement[16161-16420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16200-16436]:Block[16184-16420]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[16214-16229]:ExpressionStatement[16198-16213]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[16242-16263]:VariableDeclarationStatement[16226-16247]"
    }, {
      "left" : "if (!entries.containsKey(key))",
      "right" : "if (!entries.containsKey(key))",
      "info" : "IfStatement[16276-16426]:IfStatement[16260-16410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16307-16426]:Block[16291-16410]"
    }, {
      "left" : "double delta = FastMath.abs(iter.value());",
      "right" : "double delta = FastMath.abs(iter.value());",
      "info" : "VariableDeclarationStatement[16325-16367]:VariableDeclarationStatement[16309-16351]"
    }, {
      "left" : "max +=  FastMath.abs(delta);",
      "right" : "max +=  FastMath.abs(delta);",
      "info" : "ExpressionStatement[16384-16412]:ExpressionStatement[16368-16396]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[16445-16456]:ReturnStatement[16429-16440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16549-16761]:Block[16533-16745]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[16559-16599]:ExpressionStatement[16543-16583]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[16608-16712]:IfStatement[16592-16696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16644-16712]:Block[16628-16696]"
    }, {
      "left" : "return getL1Distance((OpenMapRealVector) v);",
      "right" : "return getL1Distance((OpenMapRealVector) v);",
      "info" : "ReturnStatement[16658-16702]:ReturnStatement[16642-16686]"
    }, {
      "left" : "return getL1Distance(v.getData());",
      "right" : "return getL1Distance(v.getData());",
      "info" : "ReturnStatement[16721-16755]:ReturnStatement[16705-16739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16846-17080]:Block[16830-17064]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[16856-16888]:ExpressionStatement[16840-16872]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[16897-16912]:VariableDeclarationStatement[16881-16896]"
    }, {
      "left" : "for (int i = 0; i < v.length; i++)",
      "right" : "for (int i = 0; i < v.length; i++)",
      "info" : "ForStatement[16921-17054]:ForStatement[16905-17038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16956-17054]:Block[16940-17038]"
    }, {
      "left" : "double delta = FastMath.abs(getEntry(i) - v[i]);",
      "right" : "double delta = FastMath.abs(getEntry(i) - v[i]);",
      "info" : "VariableDeclarationStatement[16970-17018]:VariableDeclarationStatement[16954-17002]"
    }, {
      "left" : "max += delta;",
      "right" : "max += delta;",
      "info" : "ExpressionStatement[17031-17044]:ExpressionStatement[17015-17028]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[17063-17074]:ReturnStatement[17047-17058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17292-17918]:Block[17276-17902]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[17302-17317]:VariableDeclarationStatement[17286-17301]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[17326-17361]:VariableDeclarationStatement[17310-17345]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[17370-17586]:WhileStatement[17354-17570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17393-17586]:Block[17377-17570]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[17407-17422]:ExpressionStatement[17391-17406]"
    }, {
      "left" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "right" : "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));",
      "info" : "VariableDeclarationStatement[17435-17502]:VariableDeclarationStatement[17419-17486]"
    }, {
      "left" : "if (delta > max)",
      "right" : "if (delta > max)",
      "info" : "IfStatement[17515-17576]:IfStatement[17499-17560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17532-17576]:Block[17516-17560]"
    }, {
      "left" : "max = delta;",
      "right" : "max = delta;",
      "info" : "ExpressionStatement[17550-17562]:ExpressionStatement[17534-17546]"
    }, {
      "left" : "iter = v.getEntries().iterator();",
      "right" : "iter = v.getEntries().iterator();",
      "info" : "ExpressionStatement[17595-17628]:ExpressionStatement[17579-17612]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[17637-17892]:WhileStatement[17621-17876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17660-17892]:Block[17644-17876]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[17674-17689]:ExpressionStatement[17658-17673]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[17702-17723]:VariableDeclarationStatement[17686-17707]"
    }, {
      "left" : "if (!entries.containsKey(key))",
      "right" : "if (!entries.containsKey(key))",
      "info" : "IfStatement[17736-17882]:IfStatement[17720-17866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17767-17882]:Block[17751-17866]"
    }, {
      "left" : "if (iter.value() > max)",
      "right" : "if (iter.value() > max)",
      "info" : "IfStatement[17785-17868]:IfStatement[17769-17852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17809-17868]:Block[17793-17852]"
    }, {
      "left" : "max = iter.value();",
      "right" : "max = iter.value();",
      "info" : "ExpressionStatement[17831-17850]:ExpressionStatement[17815-17834]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[17901-17912]:ReturnStatement[17885-17896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18007-18223]:Block[17991-18207]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[18017-18057]:ExpressionStatement[18001-18041]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[18066-18172]:IfStatement[18050-18156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18102-18172]:Block[18086-18156]"
    }, {
      "left" : "return getLInfDistance((OpenMapRealVector) v);",
      "right" : "return getLInfDistance((OpenMapRealVector) v);",
      "info" : "ReturnStatement[18116-18162]:ReturnStatement[18100-18146]"
    }, {
      "left" : "return getLInfDistance(v.getData());",
      "right" : "return getLInfDistance(v.getData());",
      "info" : "ReturnStatement[18181-18217]:ReturnStatement[18165-18201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18310-18592]:Block[18294-18576]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[18320-18352]:ExpressionStatement[18304-18336]"
    }, {
      "left" : "double max = 0;",
      "right" : "double max = 0;",
      "info" : "VariableDeclarationStatement[18361-18376]:VariableDeclarationStatement[18345-18360]"
    }, {
      "left" : "for (int i = 0; i < v.length; i++)",
      "right" : "for (int i = 0; i < v.length; i++)",
      "info" : "ForStatement[18385-18566]:ForStatement[18369-18550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18420-18566]:Block[18404-18550]"
    }, {
      "left" : "double delta = FastMath.abs(getEntry(i) - v[i]);",
      "right" : "double delta = FastMath.abs(getEntry(i) - v[i]);",
      "info" : "VariableDeclarationStatement[18434-18482]:VariableDeclarationStatement[18418-18466]"
    }, {
      "left" : "if (delta > max)",
      "right" : "if (delta > max)",
      "info" : "IfStatement[18495-18556]:IfStatement[18479-18540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18512-18556]:Block[18496-18540]"
    }, {
      "left" : "max = delta;",
      "right" : "max = delta;",
      "info" : "ExpressionStatement[18530-18542]:ExpressionStatement[18514-18526]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[18575-18586]:ReturnStatement[18559-18570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18651-19068]:Block[18635-19052]"
    }, {
      "left" : "boolean infiniteFound = false;",
      "right" : "boolean infiniteFound = false;",
      "info" : "VariableDeclarationStatement[18661-18691]:VariableDeclarationStatement[18645-18675]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[18700-18735]:VariableDeclarationStatement[18684-18719]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[18744-19032]:WhileStatement[18728-19016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18767-19032]:Block[18751-19016]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[18781-18796]:ExpressionStatement[18765-18780]"
    }, {
      "left" : "final double value = iter.value();",
      "right" : "final double value = iter.value();",
      "info" : "VariableDeclarationStatement[18809-18843]:VariableDeclarationStatement[18793-18827]"
    }, {
      "left" : "if (Double.isNaN(value))",
      "right" : "if (Double.isNaN(value))",
      "info" : "IfStatement[18856-18926]:IfStatement[18840-18910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18881-18926]:Block[18865-18910]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18899-18912]:ReturnStatement[18883-18896]"
    }, {
      "left" : "if (Double.isInfinite(value))",
      "right" : "if (Double.isInfinite(value))",
      "info" : "IfStatement[18939-19022]:IfStatement[18923-19006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18969-19022]:Block[18953-19006]"
    }, {
      "left" : "infiniteFound = true;",
      "right" : "infiniteFound = true;",
      "info" : "ExpressionStatement[18987-19008]:ExpressionStatement[18971-18992]"
    }, {
      "left" : "return infiniteFound;",
      "right" : "return infiniteFound;",
      "info" : "ReturnStatement[19041-19062]:ReturnStatement[19025-19046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19122-19355]:Block[19106-19339]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[19132-19167]:VariableDeclarationStatement[19116-19151]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[19176-19327]:WhileStatement[19160-19311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19199-19327]:Block[19183-19311]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[19213-19228]:ExpressionStatement[19197-19212]"
    }, {
      "left" : "if (Double.isNaN(iter.value()))",
      "right" : "if (Double.isNaN(iter.value()))",
      "info" : "IfStatement[19241-19317]:IfStatement[19225-19301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19273-19317]:Block[19257-19301]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19291-19303]:ReturnStatement[19275-19287]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19336-19349]:ReturnStatement[19320-19333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19442-19488]:Block[19426-19472]"
    }, {
      "left" : "return copy().mapAddToSelf(d);",
      "right" : "return copy().mapAddToSelf(d);",
      "info" : "ReturnStatement[19452-19482]:ReturnStatement[19436-19466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19581-19709]:Block[19565-19693]"
    }, {
      "left" : "for (int i = 0; i < virtualSize; i++)",
      "right" : "for (int i = 0; i < virtualSize; i++)",
      "info" : "ForStatement[19591-19682]:ForStatement[19575-19666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19629-19682]:Block[19613-19666]"
    }, {
      "left" : "setEntry(i, getEntry(i) + d);",
      "right" : "setEntry(i, getEntry(i) + d);",
      "info" : "ExpressionStatement[19643-19672]:ExpressionStatement[19627-19656]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19691-19703]:ReturnStatement[19675-19687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19798-20229]:Block[19782-20213]"
    }, {
      "left" : "final int n = v.length;",
      "right" : "final int n = v.length;",
      "info" : "VariableDeclarationStatement[19808-19831]:VariableDeclarationStatement[19792-19815]"
    }, {
      "left" : "RealMatrix res = new OpenMapRealMatrix(virtualSize, n);",
      "right" : "RealMatrix res = new OpenMapRealMatrix(virtualSize, n);",
      "info" : "VariableDeclarationStatement[19840-19895]:VariableDeclarationStatement[19824-19879]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[19904-19939]:VariableDeclarationStatement[19888-19923]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[19948-20203]:WhileStatement[19932-20187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19971-20203]:Block[19955-20187]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[19985-20000]:ExpressionStatement[19969-19984]"
    }, {
      "left" : "int row = iter.key();",
      "right" : "int row = iter.key();",
      "info" : "VariableDeclarationStatement[20013-20034]:VariableDeclarationStatement[19997-20018]"
    }, {
      "left" : "double value = iter.value();",
      "right" : "double value = iter.value();",
      "info" : "VariableDeclarationStatement[20047-20075]:VariableDeclarationStatement[20031-20059]"
    }, {
      "left" : "for (int col = 0; col < n; col++)",
      "right" : "for (int col = 0; col < n; col++)",
      "info" : "ForStatement[20088-20193]:ForStatement[20072-20177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20122-20193]:Block[20106-20177]"
    }, {
      "left" : "res.setEntry(row, col, value * v[col]);",
      "right" : "res.setEntry(row, col, value * v[col]);",
      "info" : "ExpressionStatement[20140-20179]:ExpressionStatement[20124-20163]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[20212-20223]:ReturnStatement[20196-20207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20303-20422]:Block[20287-20406]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[20313-20353]:ExpressionStatement[20297-20337]"
    }, {
      "left" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "right" : "return v.mapMultiply(dotProduct(v) / v.dotProduct(v));",
      "info" : "ReturnStatement[20362-20416]:ReturnStatement[20346-20400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20515-20636]:Block[20499-20620]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[20525-20557]:ExpressionStatement[20509-20541]"
    }, {
      "left" : "return (OpenMapRealVector) projection(new OpenMapRealVector(v));",
      "right" : "return (OpenMapRealVector) projection(new OpenMapRealVector(v));",
      "info" : "ReturnStatement[20566-20630]:ReturnStatement[20550-20614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20713-20918]:Block[20697-20902]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[20723-20741]:ExpressionStatement[20707-20725]"
    }, {
      "left" : "if (!isDefaultValue(value))",
      "right" : "if (!isDefaultValue(value))",
      "info" : "IfStatement[20750-20912]:IfStatement[20734-20896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20778-20828]:Block[20762-20812]"
    }, {
      "left" : "entries.put(index, value);",
      "right" : "entries.put(index, value);",
      "info" : "ExpressionStatement[20792-20818]:ExpressionStatement[20776-20802]"
    }, {
      "left" : "if (entries.containsKey(index))",
      "right" : "if (entries.containsKey(index))",
      "info" : "IfStatement[20834-20912]:IfStatement[20818-20896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20866-20912]:Block[20850-20896]"
    }, {
      "left" : "entries.remove(index);",
      "right" : "entries.remove(index);",
      "info" : "ExpressionStatement[20880-20902]:ExpressionStatement[20864-20886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21013-21139]:Block[20997-21123]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[21023-21041]:ExpressionStatement[21007-21025]"
    }, {
      "left" : "checkIndex(index + v.getDimension() - 1);",
      "right" : "checkIndex(index + v.getDimension() - 1);",
      "info" : "ExpressionStatement[21050-21091]:ExpressionStatement[21034-21075]"
    }, {
      "left" : "setSubVector(index, v.getData());",
      "right" : "setSubVector(index, v.getData());",
      "info" : "ExpressionStatement[21100-21133]:ExpressionStatement[21084-21117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21232-21402]:Block[21216-21386]"
    }, {
      "left" : "checkIndex(index);",
      "right" : "checkIndex(index);",
      "info" : "ExpressionStatement[21242-21260]:ExpressionStatement[21226-21244]"
    }, {
      "left" : "checkIndex(index + v.length - 1);",
      "right" : "checkIndex(index + v.length - 1);",
      "info" : "ExpressionStatement[21269-21302]:ExpressionStatement[21253-21286]"
    }, {
      "left" : "for (int i = 0; i < v.length; i++)",
      "right" : "for (int i = 0; i < v.length; i++)",
      "info" : "ForStatement[21311-21396]:ForStatement[21295-21380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21346-21396]:Block[21330-21380]"
    }, {
      "left" : "setEntry(i + index, v[i]);",
      "right" : "setEntry(i + index, v[i]);",
      "info" : "ExpressionStatement[21360-21386]:ExpressionStatement[21344-21370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21477-21574]:Block[21461-21558]"
    }, {
      "left" : "for (int i = 0; i < virtualSize; i++)",
      "right" : "for (int i = 0; i < virtualSize; i++)",
      "info" : "ForStatement[21487-21568]:ForStatement[21471-21552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21525-21568]:Block[21509-21552]"
    }, {
      "left" : "setEntry(i, value);",
      "right" : "setEntry(i, value);",
      "info" : "ExpressionStatement[21539-21558]:ExpressionStatement[21523-21542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21944-22413]:Block[21928-22397]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[21954-21994]:ExpressionStatement[21938-21978]"
    }, {
      "left" : "OpenMapRealVector res = copy();",
      "right" : "OpenMapRealVector res = copy();",
      "info" : "VariableDeclarationStatement[22003-22034]:VariableDeclarationStatement[21987-22018]"
    }, {
      "left" : "Iterator iter = v.getEntries().iterator();",
      "right" : "Iterator iter = v.getEntries().iterator();",
      "info" : "VariableDeclarationStatement[22043-22085]:VariableDeclarationStatement[22027-22069]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[22094-22387]:WhileStatement[22078-22371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22117-22387]:Block[22101-22371]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[22131-22146]:ExpressionStatement[22115-22130]"
    }, {
      "left" : "int key = iter.key();",
      "right" : "int key = iter.key();",
      "info" : "VariableDeclarationStatement[22159-22180]:VariableDeclarationStatement[22143-22164]"
    }, {
      "left" : "if (entries.containsKey(key))",
      "right" : "if (entries.containsKey(key))",
      "info" : "IfStatement[22193-22377]:IfStatement[22177-22361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22223-22306]:Block[22207-22290]"
    }, {
      "left" : "res.setEntry(key, entries.get(key) - iter.value());",
      "right" : "res.setEntry(key, entries.get(key) - iter.value());",
      "info" : "ExpressionStatement[22241-22292]:ExpressionStatement[22225-22276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22312-22377]:Block[22296-22361]"
    }, {
      "left" : "res.setEntry(key, -iter.value());",
      "right" : "res.setEntry(key, -iter.value());",
      "info" : "ExpressionStatement[22330-22363]:ExpressionStatement[22314-22347]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[22396-22407]:ReturnStatement[22380-22391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22506-22708]:Block[22490-22692]"
    }, {
      "left" : "checkVectorDimensions(v.getDimension());",
      "right" : "checkVectorDimensions(v.getDimension());",
      "info" : "ExpressionStatement[22516-22556]:ExpressionStatement[22500-22540]"
    }, {
      "left" : "if (v instanceof OpenMapRealVector)",
      "right" : "if (v instanceof OpenMapRealVector)",
      "info" : "IfStatement[22565-22664]:IfStatement[22549-22648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22601-22664]:Block[22585-22648]"
    }, {
      "left" : "return subtract((OpenMapRealVector) v);",
      "right" : "return subtract((OpenMapRealVector) v);",
      "info" : "ReturnStatement[22615-22654]:ReturnStatement[22599-22638]"
    }, {
      "left" : "return subtract(v.getData());",
      "right" : "return subtract(v.getData());",
      "info" : "ReturnStatement[22673-22702]:ReturnStatement[22657-22686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22799-23156]:Block[22783-23140]"
    }, {
      "left" : "checkVectorDimensions(v.length);",
      "right" : "checkVectorDimensions(v.length);",
      "info" : "ExpressionStatement[22809-22841]:ExpressionStatement[22793-22825]"
    }, {
      "left" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "right" : "OpenMapRealVector res = new OpenMapRealVector(this);",
      "info" : "VariableDeclarationStatement[22850-22902]:VariableDeclarationStatement[22834-22886]"
    }, {
      "left" : "for (int i = 0; i < v.length; i++)",
      "right" : "for (int i = 0; i < v.length; i++)",
      "info" : "ForStatement[22911-23130]:ForStatement[22895-23114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22946-23130]:Block[22930-23114]"
    }, {
      "left" : "if (entries.containsKey(i))",
      "right" : "if (entries.containsKey(i))",
      "info" : "IfStatement[22960-23120]:IfStatement[22944-23104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22988-23059]:Block[22972-23043]"
    }, {
      "left" : "res.setEntry(i, entries.get(i) - v[i]);",
      "right" : "res.setEntry(i, entries.get(i) - v[i]);",
      "info" : "ExpressionStatement[23006-23045]:ExpressionStatement[22990-23029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23065-23120]:Block[23049-23104]"
    }, {
      "left" : "res.setEntry(i, -v[i]);",
      "right" : "res.setEntry(i, -v[i]);",
      "info" : "ExpressionStatement[23083-23106]:ExpressionStatement[23067-23090]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[23139-23150]:ReturnStatement[23123-23134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23240-23330]:Block[23224-23314]"
    }, {
      "left" : "OpenMapRealVector res = copy();",
      "right" : "OpenMapRealVector res = copy();",
      "info" : "VariableDeclarationStatement[23250-23281]:VariableDeclarationStatement[23234-23265]"
    }, {
      "left" : "res.unitize();",
      "right" : "res.unitize();",
      "info" : "ExpressionStatement[23290-23304]:ExpressionStatement[23274-23288]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[23313-23324]:ReturnStatement[23297-23308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23397-23731]:Block[23381-23715]"
    }, {
      "left" : "double norm = getNorm();",
      "right" : "double norm = getNorm();",
      "info" : "VariableDeclarationStatement[23407-23431]:VariableDeclarationStatement[23391-23415]"
    }, {
      "left" : "if (isDefaultValue(norm))",
      "right" : "if (isDefaultValue(norm))",
      "info" : "IfStatement[23440-23552]:IfStatement[23424-23536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23466-23552]:Block[23450-23536]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "info" : "ThrowStatement[23480-23542]:ThrowStatement[23464-23526]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[23561-23596]:VariableDeclarationStatement[23545-23580]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[23605-23725]:WhileStatement[23589-23709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23628-23725]:Block[23612-23709]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[23642-23657]:ExpressionStatement[23626-23641]"
    }, {
      "left" : "entries.put(iter.key(), iter.value() / norm);",
      "right" : "entries.put(iter.key(), iter.value() / norm);",
      "info" : "ExpressionStatement[23670-23715]:ExpressionStatement[23654-23699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23802-23835]:Block[23786-23819]"
    }, {
      "left" : "return getData();",
      "right" : "return getData();",
      "info" : "ReturnStatement[23812-23829]:ReturnStatement[23796-23813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24108-24610]:Block[24092-24594]"
    }, {
      "left" : "final int prime = 31;",
      "right" : "final int prime = 31;",
      "info" : "VariableDeclarationStatement[24118-24139]:VariableDeclarationStatement[24102-24123]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[24148-24163]:VariableDeclarationStatement[24132-24147]"
    }, {
      "left" : "long temp;",
      "right" : "long temp;",
      "info" : "VariableDeclarationStatement[24172-24182]:VariableDeclarationStatement[24156-24166]"
    }, {
      "left" : "temp = Double.doubleToLongBits(epsilon);",
      "right" : "temp = Double.doubleToLongBits(epsilon);",
      "info" : "ExpressionStatement[24191-24231]:ExpressionStatement[24175-24215]"
    }, {
      "left" : "result = prime * result + (int) (temp ^ (temp >>> 32));",
      "right" : "result = prime * result + (int) (temp ^ (temp >>> 32));",
      "info" : "ExpressionStatement[24240-24295]:ExpressionStatement[24224-24279]"
    }, {
      "left" : "result = prime * result + virtualSize;",
      "right" : "result = prime * result + virtualSize;",
      "info" : "ExpressionStatement[24304-24342]:ExpressionStatement[24288-24326]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[24351-24386]:VariableDeclarationStatement[24335-24370]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[24395-24581]:WhileStatement[24379-24565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24418-24581]:Block[24402-24565]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[24432-24447]:ExpressionStatement[24416-24431]"
    }, {
      "left" : "temp = Double.doubleToLongBits(iter.value());",
      "right" : "temp = Double.doubleToLongBits(iter.value());",
      "info" : "ExpressionStatement[24460-24505]:ExpressionStatement[24444-24489]"
    }, {
      "left" : "result = prime * result + (int) (temp ^ (temp >>32));",
      "right" : "result = prime * result + (int) (temp ^ (temp >>32));",
      "info" : "ExpressionStatement[24518-24571]:ExpressionStatement[24502-24555]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24590-24604]:ReturnStatement[24574-24588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24895-25955]:Block[24879-25939]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[24905-24958]:IfStatement[24889-24942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24922-24958]:Block[24906-24942]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24936-24948]:ReturnStatement[24920-24932]"
    }, {
      "left" : "if (!(obj instanceof OpenMapRealVector))",
      "right" : "if (!(obj instanceof OpenMapRealVector))",
      "info" : "IfStatement[24967-25045]:IfStatement[24951-25029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25008-25045]:Block[24992-25029]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25022-25035]:ReturnStatement[25006-25019]"
    }, {
      "left" : "OpenMapRealVector other = (OpenMapRealVector) obj;",
      "right" : "OpenMapRealVector other = (OpenMapRealVector) obj;",
      "info" : "VariableDeclarationStatement[25054-25104]:VariableDeclarationStatement[25038-25088]"
    }, {
      "left" : "if (virtualSize != other.virtualSize)",
      "right" : "if (virtualSize != other.virtualSize)",
      "info" : "IfStatement[25113-25188]:IfStatement[25097-25172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25151-25188]:Block[25135-25172]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25165-25178]:ReturnStatement[25149-25162]"
    }, {
      "left" : "if (Double.doubleToLongBits(epsilon) !=\n            Double.doubleToLongBits(other.epsilon))",
      "right" : "if (Double.doubleToLongBits(epsilon) !=\n            Double.doubleToLongBits(other.epsilon))",
      "info" : "IfStatement[25197-25326]:IfStatement[25181-25310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25289-25326]:Block[25273-25310]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25303-25316]:ReturnStatement[25287-25300]"
    }, {
      "left" : "Iterator iter = entries.iterator();",
      "right" : "Iterator iter = entries.iterator();",
      "info" : "VariableDeclarationStatement[25335-25370]:VariableDeclarationStatement[25319-25354]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[25379-25629]:WhileStatement[25363-25613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25402-25629]:Block[25386-25613]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[25416-25431]:ExpressionStatement[25400-25415]"
    }, {
      "left" : "double test = other.getEntry(iter.key());",
      "right" : "double test = other.getEntry(iter.key());",
      "info" : "VariableDeclarationStatement[25444-25485]:VariableDeclarationStatement[25428-25469]"
    }, {
      "left" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value()))",
      "right" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value()))",
      "info" : "IfStatement[25498-25619]:IfStatement[25482-25603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25574-25619]:Block[25558-25603]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25592-25605]:ReturnStatement[25576-25589]"
    }, {
      "left" : "iter = other.getEntries().iterator();",
      "right" : "iter = other.getEntries().iterator();",
      "info" : "ExpressionStatement[25638-25675]:ExpressionStatement[25622-25659]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[25684-25928]:WhileStatement[25668-25912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25707-25928]:Block[25691-25912]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[25721-25736]:ExpressionStatement[25705-25720]"
    }, {
      "left" : "double test = iter.value();",
      "right" : "double test = iter.value();",
      "info" : "VariableDeclarationStatement[25749-25776]:VariableDeclarationStatement[25733-25760]"
    }, {
      "left" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key())))",
      "right" : "if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key())))",
      "info" : "IfStatement[25789-25918]:IfStatement[25773-25902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25873-25918]:Block[25857-25902]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25891-25904]:ReturnStatement[25875-25888]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25937-25949]:ReturnStatement[25921-25933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26104-26173]:Block[26088-26157]"
    }, {
      "left" : "return (double)entries.size()/(double)getDimension();",
      "right" : "return (double)entries.size()/(double)getDimension();",
      "info" : "ReturnStatement[26114-26167]:ReturnStatement[26098-26151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26268-26319]:Block[26252-26303]"
    }, {
      "left" : "return new OpenMapSparseIterator();",
      "right" : "return new OpenMapSparseIterator();",
      "info" : "ReturnStatement[26278-26313]:ReturnStatement[26262-26297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26878-26919]:Block[26862-26903]"
    }, {
      "left" : "this.iter = iter;",
      "right" : "this.iter = iter;",
      "info" : "ExpressionStatement[26892-26909]:ExpressionStatement[26876-26893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27001-27045]:Block[26985-27029]"
    }, {
      "left" : "return iter.value();",
      "right" : "return iter.value();",
      "info" : "ReturnStatement[27015-27035]:ReturnStatement[26999-27019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27137-27192]:Block[27121-27176]"
    }, {
      "left" : "entries.put(iter.key(), value);",
      "right" : "entries.put(iter.key(), value);",
      "info" : "ExpressionStatement[27151-27182]:ExpressionStatement[27135-27166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27271-27313]:Block[27255-27297]"
    }, {
      "left" : "return iter.key();",
      "right" : "return iter.key();",
      "info" : "ReturnStatement[27285-27303]:ReturnStatement[27269-27287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27802-27898]:Block[27786-27882]"
    }, {
      "left" : "iter = entries.iterator();",
      "right" : "iter = entries.iterator();",
      "info" : "ExpressionStatement[27816-27842]:ExpressionStatement[27800-27826]"
    }, {
      "left" : "current = new OpenMapEntry(iter);",
      "right" : "current = new OpenMapEntry(iter);",
      "info" : "ExpressionStatement[27855-27888]:ExpressionStatement[27839-27872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27962-28008]:Block[27946-27992]"
    }, {
      "left" : "return iter.hasNext();",
      "right" : "return iter.hasNext();",
      "info" : "ReturnStatement[27976-27998]:ReturnStatement[27960-27982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28067-28134]:Block[28051-28118]"
    }, {
      "left" : "iter.advance();",
      "right" : "iter.advance();",
      "info" : "ExpressionStatement[28081-28096]:ExpressionStatement[28065-28080]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[28109-28124]:ReturnStatement[28093-28108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28194-28275]:Block[28178-28259]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Not supported\");",
      "right" : "throw new UnsupportedOperationException(\"Not supported\");",
      "info" : "ThrowStatement[28208-28265]:ThrowStatement[28192-28249]"
    } ]
  },
  "interFileMappings" : { }
}