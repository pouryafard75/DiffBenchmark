{
  "matchedElements" : [
 {
    "left" : "class : NodeUtil",
    "right" : "class : NodeUtil",
    "info" : "TypeDeclaration[1420-88288]:TypeDeclaration[1420-88398]"
  }, {
    "left" : "JSC_PROPERTY_NAME_FN",
    "right" : "JSC_PROPERTY_NAME_FN",
    "info" : "FieldDeclaration[1537-1608]:FieldDeclaration[1537-1608]"
  }, {
    "left" : "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
    "right" : "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
    "info" : "FieldDeclaration[1745-2039]:FieldDeclaration[1745-2039]"
  }, {
    "left" : "private NodeUtil()",
    "right" : "private NodeUtil()",
    "info" : "MethodDeclaration[2083-2104]:MethodDeclaration[2083-2104]"
  }, {
    "left" : "package getImpureBooleanValue(n ) : ",
    "right" : "package getImpureBooleanValue(n ) : ",
    "info" : "MethodDeclaration[2108-3688]:MethodDeclaration[2108-3688]"
  }, {
    "left" : "package getPureBooleanValue(n ) : ",
    "right" : "package getPureBooleanValue(n ) : ",
    "info" : "MethodDeclaration[3692-5136]:MethodDeclaration[3692-5136]"
  }, {
    "left" : "package getStringValue(n ) : ",
    "right" : "package getStringValue(n ) : ",
    "info" : "MethodDeclaration[5141-6596]:MethodDeclaration[5141-6596]"
  }, {
    "left" : "package getArrayElementStringValue(n ) : ",
    "right" : "package getArrayElementStringValue(n ) : ",
    "info" : "MethodDeclaration[6600-7137]:MethodDeclaration[6600-7137]"
  }, {
    "left" : "package arrayToString(literal ) : ",
    "right" : "package arrayToString(literal ) : ",
    "info" : "MethodDeclaration[7141-7647]:MethodDeclaration[7141-7647]"
  }, {
    "left" : "package getNumberValue(n ) : ",
    "right" : "package getNumberValue(n ) : ",
    "info" : "MethodDeclaration[7651-9364]:MethodDeclaration[7651-9364]"
  }, {
    "left" : "package getStringNumberValue(rawJsString ) : ",
    "right" : "package getStringNumberValue(rawJsString ) : ",
    "info" : "MethodDeclaration[9368-10571]:MethodDeclaration[9368-10638]"
  }, {
    "left" : "package trimJsWhiteSpace(s ...) : ",
    "right" : "package trimJsWhiteSpace(s ...) : ",
    "info" : "MethodDeclaration[10575-10930]:MethodDeclaration[10642-10997]"
  }, {
    "left" : "package isStrWhiteSpaceChar(c int) : ",
    "right" : "package isStrWhiteSpaceChar(c int) : ",
    "info" : "MethodDeclaration[10934-11541]:MethodDeclaration[11001-11651]"
  }, {
    "left" : "package getFunctionName(n ) : ",
    "right" : "package getFunctionName(n ) : ",
    "info" : "MethodDeclaration[11545-12749]:MethodDeclaration[11655-12859]"
  }, {
    "left" : "package getNearestFunctionName(n ) : ",
    "right" : "package getNearestFunctionName(n ) : ",
    "info" : "MethodDeclaration[12753-13849]:MethodDeclaration[12863-13959]"
  }, {
    "left" : "package isImmutableValue(n ) : boolean",
    "right" : "package isImmutableValue(n ) : boolean",
    "info" : "MethodDeclaration[13854-14642]:MethodDeclaration[13964-14752]"
  }, {
    "left" : "package isLiteralValue(n , includeFunctions boolean) : boolean",
    "right" : "package isLiteralValue(n , includeFunctions boolean) : boolean",
    "info" : "MethodDeclaration[14646-16736]:MethodDeclaration[14756-16846]"
  }, {
    "left" : "package isValidDefineValue(val , defines ...) : boolean",
    "right" : "package isValidDefineValue(val , defines ...) : boolean",
    "info" : "MethodDeclaration[16740-18230]:MethodDeclaration[16850-18340]"
  }, {
    "left" : "package isEmptyBlock(block ) : boolean",
    "right" : "package isEmptyBlock(block ) : boolean",
    "info" : "MethodDeclaration[18234-18614]:MethodDeclaration[18344-18724]"
  }, {
    "left" : "package isSimpleOperator(n ) : boolean",
    "right" : "package isSimpleOperator(n ) : boolean",
    "info" : "MethodDeclaration[18618-18709]:MethodDeclaration[18728-18819]"
  }, {
    "left" : "package isSimpleOperatorType(type int) : boolean",
    "right" : "package isSimpleOperatorType(type int) : boolean",
    "info" : "MethodDeclaration[18713-19690]:MethodDeclaration[18823-19800]"
  }, {
    "left" : "public newExpr(child ) : ",
    "right" : "public newExpr(child ) : ",
    "info" : "MethodDeclaration[19694-20000]:MethodDeclaration[19804-20110]"
  }, {
    "left" : "package mayEffectMutableState(n ) : boolean",
    "right" : "package mayEffectMutableState(n ) : boolean",
    "info" : "MethodDeclaration[20004-20267]:MethodDeclaration[20114-20377]"
  }, {
    "left" : "package mayEffectMutableState(n , compiler ) : boolean",
    "right" : "package mayEffectMutableState(n , compiler ) : boolean",
    "info" : "MethodDeclaration[20271-20405]:MethodDeclaration[20381-20515]"
  }, {
    "left" : "package mayHaveSideEffects(n ) : boolean",
    "right" : "package mayHaveSideEffects(n ) : boolean",
    "info" : "MethodDeclaration[20409-20581]:MethodDeclaration[20519-20691]"
  }, {
    "left" : "package mayHaveSideEffects(n , compiler ) : boolean",
    "right" : "package mayHaveSideEffects(n , compiler ) : boolean",
    "info" : "MethodDeclaration[20585-20717]:MethodDeclaration[20695-20827]"
  }, {
    "left" : "private checkForStateChangeHelper(n , checkForNewObjects boolean, compiler ) : boolean",
    "right" : "private checkForStateChangeHelper(n , checkForNewObjects boolean, compiler ) : boolean",
    "info" : "MethodDeclaration[20721-25562]:MethodDeclaration[20831-25672]"
  }, {
    "left" : "package constructorCallHasSideEffects(callNode ) : boolean",
    "right" : "package constructorCallHasSideEffects(callNode ) : boolean",
    "info" : "MethodDeclaration[25566-25803]:MethodDeclaration[25676-25913]"
  }, {
    "left" : "package constructorCallHasSideEffects(callNode , compiler ) : boolean",
    "right" : "package constructorCallHasSideEffects(callNode , compiler ) : boolean",
    "info" : "MethodDeclaration[25807-26345]:MethodDeclaration[25917-26455]"
  }, {
    "left" : "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
    "right" : "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
    "info" : "FieldDeclaration[26558-26733]:FieldDeclaration[26668-26843]"
  }, {
    "left" : "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
    "right" : "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
    "info" : "FieldDeclaration[26736-26851]:FieldDeclaration[26846-26961]"
  }, {
    "left" : "REGEXP_METHODS",
    "right" : "REGEXP_METHODS",
    "info" : "FieldDeclaration[26854-26942]:FieldDeclaration[26964-27052]"
  }, {
    "left" : "STRING_REGEXP_METHODS",
    "right" : "STRING_REGEXP_METHODS",
    "info" : "FieldDeclaration[26945-27063]:FieldDeclaration[27055-27173]"
  }, {
    "left" : "package functionCallHasSideEffects(callNode ) : boolean",
    "right" : "package functionCallHasSideEffects(callNode ) : boolean",
    "info" : "MethodDeclaration[27067-27306]:MethodDeclaration[27177-27416]"
  }, {
    "left" : "package functionCallHasSideEffects(callNode , compiler ) : boolean",
    "right" : "package functionCallHasSideEffects(callNode , compiler ) : boolean",
    "info" : "MethodDeclaration[27310-29475]:MethodDeclaration[27420-29585]"
  }, {
    "left" : "package callHasLocalResult(n ) : boolean",
    "right" : "package callHasLocalResult(n ) : boolean",
    "info" : "MethodDeclaration[29479-29712]:MethodDeclaration[29589-29822]"
  }, {
    "left" : "package newHasLocalResult(n ) : boolean",
    "right" : "package newHasLocalResult(n ) : boolean",
    "info" : "MethodDeclaration[29716-29918]:MethodDeclaration[29826-30028]"
  }, {
    "left" : "package nodeTypeMayHaveSideEffects(n ) : boolean",
    "right" : "package nodeTypeMayHaveSideEffects(n ) : boolean",
    "info" : "MethodDeclaration[29922-30294]:MethodDeclaration[30032-30404]"
  }, {
    "left" : "package nodeTypeMayHaveSideEffects(n , compiler ) : boolean",
    "right" : "package nodeTypeMayHaveSideEffects(n , compiler ) : boolean",
    "info" : "MethodDeclaration[30298-30886]:MethodDeclaration[30408-30996]"
  }, {
    "left" : "package canBeSideEffected(n ) : boolean",
    "right" : "package canBeSideEffected(n ) : boolean",
    "info" : "MethodDeclaration[30890-31130]:MethodDeclaration[31000-31240]"
  }, {
    "left" : "package canBeSideEffected(n , knownConstants ...) : boolean",
    "right" : "package canBeSideEffected(n , knownConstants ...) : boolean",
    "info" : "MethodDeclaration[31134-32469]:MethodDeclaration[31244-32579]"
  }, {
    "left" : "package precedence(type int) : int",
    "right" : "package precedence(type int) : int",
    "info" : "MethodDeclaration[32906-34936]:MethodDeclaration[33016-35046]"
  }, {
    "left" : "package valueCheck(n , p ) : boolean",
    "right" : "package valueCheck(n , p ) : boolean",
    "info" : "MethodDeclaration[34940-35550]:MethodDeclaration[35050-35660]"
  }, {
    "left" : "class : NumbericResultPredicate",
    "right" : "class : NumbericResultPredicate",
    "info" : "TypeDeclaration[35554-35703]:TypeDeclaration[35664-35813]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[35624-35699]:MethodDeclaration[35734-35809]"
  }, {
    "left" : "NUMBERIC_RESULT_PREDICATE",
    "right" : "NUMBERIC_RESULT_PREDICATE",
    "info" : "FieldDeclaration[35707-35808]:FieldDeclaration[35817-35918]"
  }, {
    "left" : "package isNumericResult(n ) : boolean",
    "right" : "package isNumericResult(n ) : boolean",
    "info" : "MethodDeclaration[35812-35991]:MethodDeclaration[35922-36101]"
  }, {
    "left" : "package isNumericResultHelper(n ) : boolean",
    "right" : "package isNumericResultHelper(n ) : boolean",
    "info" : "MethodDeclaration[35995-36840]:MethodDeclaration[36105-36950]"
  }, {
    "left" : "class : BooleanResultPredicate",
    "right" : "class : BooleanResultPredicate",
    "info" : "TypeDeclaration[36844-36992]:TypeDeclaration[36954-37102]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[36913-36988]:MethodDeclaration[37023-37098]"
  }, {
    "left" : "BOOLEAN_RESULT_PREDICATE",
    "right" : "BOOLEAN_RESULT_PREDICATE",
    "info" : "FieldDeclaration[36996-37094]:FieldDeclaration[37106-37204]"
  }, {
    "left" : "package isBooleanResult(n ) : boolean",
    "right" : "package isBooleanResult(n ) : boolean",
    "info" : "MethodDeclaration[37098-37277]:MethodDeclaration[37208-37387]"
  }, {
    "left" : "package isBooleanResultHelper(n ) : boolean",
    "right" : "package isBooleanResultHelper(n ) : boolean",
    "info" : "MethodDeclaration[37281-37861]:MethodDeclaration[37391-37971]"
  }, {
    "left" : "package isUndefined(n ) : boolean",
    "right" : "package isUndefined(n ) : boolean",
    "info" : "MethodDeclaration[37865-38073]:MethodDeclaration[37975-38183]"
  }, {
    "left" : "package isNull(n ) : boolean",
    "right" : "package isNull(n ) : boolean",
    "info" : "MethodDeclaration[38077-38150]:MethodDeclaration[38187-38260]"
  }, {
    "left" : "package isNullOrUndefined(n ) : boolean",
    "right" : "package isNullOrUndefined(n ) : boolean",
    "info" : "MethodDeclaration[38154-38240]:MethodDeclaration[38264-38350]"
  }, {
    "left" : "class : MayBeStringResultPredicate",
    "right" : "class : MayBeStringResultPredicate",
    "info" : "TypeDeclaration[38244-38392]:TypeDeclaration[38354-38502]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[38317-38388]:MethodDeclaration[38427-38498]"
  }, {
    "left" : "MAY_BE_STRING_PREDICATE",
    "right" : "MAY_BE_STRING_PREDICATE",
    "info" : "FieldDeclaration[38396-38501]:FieldDeclaration[38506-38611]"
  }, {
    "left" : "package mayBeString(n ) : boolean",
    "right" : "package mayBeString(n ) : boolean",
    "info" : "MethodDeclaration[38505-38646]:MethodDeclaration[38615-38756]"
  }, {
    "left" : "package mayBeString(n , recurse boolean) : boolean",
    "right" : "package mayBeString(n , recurse boolean) : boolean",
    "info" : "MethodDeclaration[38650-38833]:MethodDeclaration[38760-38943]"
  }, {
    "left" : "package mayBeStringHelper(n ) : boolean",
    "right" : "package mayBeStringHelper(n ) : boolean",
    "info" : "MethodDeclaration[38837-38979]:MethodDeclaration[38947-39089]"
  }, {
    "left" : "package isAssociative(type int) : boolean",
    "right" : "package isAssociative(type int) : boolean",
    "info" : "MethodDeclaration[38983-39475]:MethodDeclaration[39093-39585]"
  }, {
    "left" : "package isCommutative(type int) : boolean",
    "right" : "package isCommutative(type int) : boolean",
    "info" : "MethodDeclaration[39479-40007]:MethodDeclaration[39589-40117]"
  }, {
    "left" : "package isAssignmentOp(n ) : boolean",
    "right" : "package isAssignmentOp(n ) : boolean",
    "info" : "MethodDeclaration[40011-40478]:MethodDeclaration[40121-40588]"
  }, {
    "left" : "package getOpFromAssignmentOp(n ) : int",
    "right" : "package getOpFromAssignmentOp(n ) : int",
    "info" : "MethodDeclaration[40482-41245]:MethodDeclaration[40592-41355]"
  }, {
    "left" : "package isExpressionNode(n ) : boolean",
    "right" : "package isExpressionNode(n ) : boolean",
    "info" : "MethodDeclaration[41249-41339]:MethodDeclaration[41359-41449]"
  }, {
    "left" : "package containsFunction(n ) : boolean",
    "right" : "package containsFunction(n ) : boolean",
    "info" : "MethodDeclaration[41343-41537]:MethodDeclaration[41453-41647]"
  }, {
    "left" : "package referencesThis(n ) : boolean",
    "right" : "package referencesThis(n ) : boolean",
    "info" : "MethodDeclaration[41541-41737]:MethodDeclaration[41651-41847]"
  }, {
    "left" : "package isGet(n ) : boolean",
    "right" : "package isGet(n ) : boolean",
    "info" : "MethodDeclaration[41741-41908]:MethodDeclaration[41851-42018]"
  }, {
    "left" : "package isGetProp(n ) : boolean",
    "right" : "package isGetProp(n ) : boolean",
    "info" : "MethodDeclaration[41912-42032]:MethodDeclaration[42022-42142]"
  }, {
    "left" : "package isName(n ) : boolean",
    "right" : "package isName(n ) : boolean",
    "info" : "MethodDeclaration[42036-42147]:MethodDeclaration[42146-42257]"
  }, {
    "left" : "package isNew(n ) : boolean",
    "right" : "package isNew(n ) : boolean",
    "info" : "MethodDeclaration[42151-42259]:MethodDeclaration[42261-42369]"
  }, {
    "left" : "package isVar(n ) : boolean",
    "right" : "package isVar(n ) : boolean",
    "info" : "MethodDeclaration[42263-42371]:MethodDeclaration[42373-42481]"
  }, {
    "left" : "package isVarDeclaration(n ) : boolean",
    "right" : "package isVarDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[42375-42784]:MethodDeclaration[42485-42894]"
  }, {
    "left" : "package getAssignedValue(n ) : ",
    "right" : "package getAssignedValue(n ) : ",
    "info" : "MethodDeclaration[42788-43230]:MethodDeclaration[42898-43340]"
  }, {
    "left" : "package isString(n ) : boolean",
    "right" : "package isString(n ) : boolean",
    "info" : "MethodDeclaration[43234-43351]:MethodDeclaration[43344-43461]"
  }, {
    "left" : "package isExprAssign(n ) : boolean",
    "right" : "package isExprAssign(n ) : boolean",
    "info" : "MethodDeclaration[43355-43683]:MethodDeclaration[43465-43793]"
  }, {
    "left" : "package isAssign(n ) : boolean",
    "right" : "package isAssign(n ) : boolean",
    "info" : "MethodDeclaration[43687-43805]:MethodDeclaration[43797-43915]"
  }, {
    "left" : "package isExprCall(n ) : boolean",
    "right" : "package isExprCall(n ) : boolean",
    "info" : "MethodDeclaration[43809-44124]:MethodDeclaration[43919-44234]"
  }, {
    "left" : "package isForIn(n ) : boolean",
    "right" : "package isForIn(n ) : boolean",
    "info" : "MethodDeclaration[44128-44303]:MethodDeclaration[44238-44413]"
  }, {
    "left" : "package isLoopStructure(n ) : boolean",
    "right" : "package isLoopStructure(n ) : boolean",
    "info" : "MethodDeclaration[44307-44589]:MethodDeclaration[44417-44699]"
  }, {
    "left" : "package getLoopCodeBlock(n ) : ",
    "right" : "package getLoopCodeBlock(n ) : ",
    "info" : "MethodDeclaration[44593-44996]:MethodDeclaration[44703-45106]"
  }, {
    "left" : "package isWithinLoop(n ) : boolean",
    "right" : "package isWithinLoop(n ) : boolean",
    "info" : "MethodDeclaration[45000-45357]:MethodDeclaration[45110-45467]"
  }, {
    "left" : "package isControlStructure(n ) : boolean",
    "right" : "package isControlStructure(n ) : boolean",
    "info" : "MethodDeclaration[45361-45844]:MethodDeclaration[45471-45954]"
  }, {
    "left" : "package isControlStructureCodeBlock(parent , n ) : boolean",
    "right" : "package isControlStructureCodeBlock(parent , n ) : boolean",
    "info" : "MethodDeclaration[45848-46729]:MethodDeclaration[45958-46839]"
  }, {
    "left" : "package getConditionExpression(n ) : ",
    "right" : "package getConditionExpression(n ) : ",
    "info" : "MethodDeclaration[46733-47533]:MethodDeclaration[46843-47643]"
  }, {
    "left" : "package isStatementBlock(n ) : boolean",
    "right" : "package isStatementBlock(n ) : boolean",
    "info" : "MethodDeclaration[47537-47738]:MethodDeclaration[47647-47848]"
  }, {
    "left" : "package isStatement(n ) : boolean",
    "right" : "package isStatement(n ) : boolean",
    "info" : "MethodDeclaration[47742-47893]:MethodDeclaration[47852-48003]"
  }, {
    "left" : "package isStatementParent(parent ) : boolean",
    "right" : "package isStatementParent(parent ) : boolean",
    "info" : "MethodDeclaration[47897-48358]:MethodDeclaration[48007-48468]"
  }, {
    "left" : "package isSwitchCase(n ) : boolean",
    "right" : "package isSwitchCase(n ) : boolean",
    "info" : "MethodDeclaration[48362-48530]:MethodDeclaration[48472-48640]"
  }, {
    "left" : "package isReferenceName(n ) : boolean",
    "right" : "package isReferenceName(n ) : boolean",
    "info" : "MethodDeclaration[48534-48793]:MethodDeclaration[48644-48903]"
  }, {
    "left" : "package isLabelName(n ) : boolean",
    "right" : "package isLabelName(n ) : boolean",
    "info" : "MethodDeclaration[48797-48947]:MethodDeclaration[48907-49057]"
  }, {
    "left" : "package isTryFinallyNode(parent , child ) : boolean",
    "right" : "package isTryFinallyNode(parent , child ) : boolean",
    "info" : "MethodDeclaration[48951-49191]:MethodDeclaration[49061-49301]"
  }, {
    "left" : "package isTryCatchNodeContainer(n ) : boolean",
    "right" : "package isTryCatchNodeContainer(n ) : boolean",
    "info" : "MethodDeclaration[49195-49425]:MethodDeclaration[49305-49535]"
  }, {
    "left" : "package removeChild(parent , node ) : void",
    "right" : "package removeChild(parent , node ) : void",
    "info" : "MethodDeclaration[49429-51893]:MethodDeclaration[49539-52003]"
  }, {
    "left" : "package maybeAddFinally(tryNode ) : void",
    "right" : "package maybeAddFinally(tryNode ) : void",
    "info" : "MethodDeclaration[51897-52209]:MethodDeclaration[52007-52319]"
  }, {
    "left" : "package tryMergeBlock(block ) : boolean",
    "right" : "package tryMergeBlock(block ) : boolean",
    "info" : "MethodDeclaration[52213-52902]:MethodDeclaration[52323-53012]"
  }, {
    "left" : "package isCall(n ) : boolean",
    "right" : "package isCall(n ) : boolean",
    "info" : "MethodDeclaration[52906-53017]:MethodDeclaration[53016-53127]"
  }, {
    "left" : "package isCallOrNew(node ) : boolean",
    "right" : "package isCallOrNew(node ) : boolean",
    "info" : "MethodDeclaration[53021-53211]:MethodDeclaration[53131-53321]"
  }, {
    "left" : "package isFunction(n ) : boolean",
    "right" : "package isFunction(n ) : boolean",
    "info" : "MethodDeclaration[53215-53338]:MethodDeclaration[53325-53448]"
  }, {
    "left" : "package getFunctionBody(fn ) : ",
    "right" : "package getFunctionBody(fn ) : ",
    "info" : "MethodDeclaration[53342-53529]:MethodDeclaration[53452-53639]"
  }, {
    "left" : "package isThis(node ) : boolean",
    "right" : "package isThis(node ) : boolean",
    "info" : "MethodDeclaration[53533-53650]:MethodDeclaration[53643-53760]"
  }, {
    "left" : "package isArrayLiteral(node ) : boolean",
    "right" : "package isArrayLiteral(node ) : boolean",
    "info" : "MethodDeclaration[53655-53788]:MethodDeclaration[53765-53898]"
  }, {
    "left" : "package containsCall(n ) : boolean",
    "right" : "package containsCall(n ) : boolean",
    "info" : "MethodDeclaration[53792-53934]:MethodDeclaration[53902-54044]"
  }, {
    "left" : "package isFunctionDeclaration(n ) : boolean",
    "right" : "package isFunctionDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[53938-54287]:MethodDeclaration[54048-54397]"
  }, {
    "left" : "package isHoistedFunctionDeclaration(n ) : boolean",
    "right" : "package isHoistedFunctionDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[54291-54693]:MethodDeclaration[54401-54803]"
  }, {
    "left" : "package isFunctionExpression(n ) : boolean",
    "right" : "package isFunctionExpression(n ) : boolean",
    "info" : "MethodDeclaration[54697-55463]:MethodDeclaration[54807-55573]"
  }, {
    "left" : "package isEmptyFunctionExpression(node ) : boolean",
    "right" : "package isEmptyFunctionExpression(node ) : boolean",
    "info" : "MethodDeclaration[55467-55791]:MethodDeclaration[55577-55901]"
  }, {
    "left" : "package isVarArgsFunction(function ) : boolean",
    "right" : "package isVarArgsFunction(function ) : boolean",
    "info" : "MethodDeclaration[55795-56165]:MethodDeclaration[55905-56275]"
  }, {
    "left" : "package isObjectCallMethod(callNode , methodName ) : boolean",
    "right" : "package isObjectCallMethod(callNode , methodName ) : boolean",
    "info" : "MethodDeclaration[56169-56772]:MethodDeclaration[56279-56882]"
  }, {
    "left" : "package isFunctionObjectCall(callNode ) : boolean",
    "right" : "package isFunctionObjectCall(callNode ) : boolean",
    "info" : "MethodDeclaration[56777-57012]:MethodDeclaration[56887-57122]"
  }, {
    "left" : "package isFunctionObjectApply(callNode ) : boolean",
    "right" : "package isFunctionObjectApply(callNode ) : boolean",
    "info" : "MethodDeclaration[57016-57255]:MethodDeclaration[57126-57365]"
  }, {
    "left" : "package isFunctionObjectCallOrApply(callNode ) : boolean",
    "right" : "package isFunctionObjectCallOrApply(callNode ) : boolean",
    "info" : "MethodDeclaration[57259-57584]:MethodDeclaration[57369-57694]"
  }, {
    "left" : "package isSimpleFunctionObjectCall(callNode ) : boolean",
    "right" : "package isSimpleFunctionObjectCall(callNode ) : boolean",
    "info" : "MethodDeclaration[57588-57983]:MethodDeclaration[57698-58093]"
  }, {
    "left" : "package isLhs(n , parent ) : boolean",
    "right" : "package isLhs(n , parent ) : boolean",
    "info" : "MethodDeclaration[57987-58505]:MethodDeclaration[58097-58615]"
  }, {
    "left" : "package isObjectLitKey(node , parent ) : boolean",
    "right" : "package isObjectLitKey(node , parent ) : boolean",
    "info" : "MethodDeclaration[58509-58981]:MethodDeclaration[58619-59091]"
  }, {
    "left" : "package getObjectLitKeyName(key ) : ",
    "right" : "package getObjectLitKeyName(key ) : ",
    "info" : "MethodDeclaration[58985-59393]:MethodDeclaration[59095-59503]"
  }, {
    "left" : "package getObjectLitKeyTypeFromValueType(key , valueType ) : ",
    "right" : "package getObjectLitKeyTypeFromValueType(key , valueType ) : ",
    "info" : "MethodDeclaration[59397-60408]:MethodDeclaration[59507-60518]"
  }, {
    "left" : "package isGetOrSetKey(node ) : boolean",
    "right" : "package isGetOrSetKey(node ) : boolean",
    "info" : "MethodDeclaration[60412-60743]:MethodDeclaration[60522-60853]"
  }, {
    "left" : "package opToStr(operator int) : ",
    "right" : "package opToStr(operator int) : ",
    "info" : "MethodDeclaration[60747-62660]:MethodDeclaration[60857-62770]"
  }, {
    "left" : "package opToStrNoFail(operator int) : ",
    "right" : "package opToStrNoFail(operator int) : ",
    "info" : "MethodDeclaration[62664-63167]:MethodDeclaration[62774-63277]"
  }, {
    "left" : "package containsType(node , type int, traverseChildrenPred ) : boolean",
    "right" : "package containsType(node , type int, traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[63171-63476]:MethodDeclaration[63281-63586]"
  }, {
    "left" : "package containsType(node , type int) : boolean",
    "right" : "package containsType(node , type int) : boolean",
    "info" : "MethodDeclaration[63480-63686]:MethodDeclaration[63590-63796]"
  }, {
    "left" : "package redeclareVarsInsideBranch(branch ) : void",
    "right" : "package redeclareVarsInsideBranch(branch ) : void",
    "info" : "MethodDeclaration[63691-64438]:MethodDeclaration[63801-64548]"
  }, {
    "left" : "package copyNameAnnotations(source , destination ) : void",
    "right" : "package copyNameAnnotations(source , destination ) : void",
    "info" : "MethodDeclaration[64442-64743]:MethodDeclaration[64552-64853]"
  }, {
    "left" : "private getAddingRoot(n ) : ",
    "right" : "private getAddingRoot(n ) : ",
    "info" : "MethodDeclaration[64747-65569]:MethodDeclaration[64857-65679]"
  }, {
    "left" : "public newFunctionNode(name , params , body , lineno int, charno int) : ",
    "right" : "public newFunctionNode(name , params , body , lineno int, charno int) : ",
    "info" : "MethodDeclaration[65573-66150]:MethodDeclaration[65683-66260]"
  }, {
    "left" : "public newQualifiedNameNode(convention , name , lineno int, charno int) : ",
    "right" : "public newQualifiedNameNode(convention , name , lineno int, charno int) : ",
    "info" : "MethodDeclaration[66154-67309]:MethodDeclaration[66264-67419]"
  }, {
    "left" : "package newQualifiedNameNode(convention , name , basisNode , originalName ) : ",
    "right" : "package newQualifiedNameNode(convention , name , basisNode , originalName ) : ",
    "info" : "MethodDeclaration[67313-68107]:MethodDeclaration[67423-68217]"
  }, {
    "left" : "package getRootOfQualifiedName(qName ) : ",
    "right" : "package getRootOfQualifiedName(qName ) : ",
    "info" : "MethodDeclaration[68111-68515]:MethodDeclaration[68221-68625]"
  }, {
    "left" : "package setDebugInformation(node , basisNode , originalName ) : void",
    "right" : "package setDebugInformation(node , basisNode , originalName ) : void",
    "info" : "MethodDeclaration[68519-69050]:MethodDeclaration[68629-69160]"
  }, {
    "left" : "private newName(convention , name , lineno int, charno int) : ",
    "right" : "private newName(convention , name , lineno int, charno int) : ",
    "info" : "MethodDeclaration[69054-69356]:MethodDeclaration[69164-69466]"
  }, {
    "left" : "package newName(convention , name , basisNode ) : ",
    "right" : "package newName(convention , name , basisNode ) : ",
    "info" : "MethodDeclaration[69360-70004]:MethodDeclaration[69470-70114]"
  }, {
    "left" : "package newName(convention , name , basisNode , originalName ) : ",
    "right" : "package newName(convention , name , basisNode , originalName ) : ",
    "info" : "MethodDeclaration[70008-70777]:MethodDeclaration[70118-70887]"
  }, {
    "left" : "package isLatin(s ...) : boolean",
    "right" : "package isLatin(s ...) : boolean",
    "info" : "MethodDeclaration[70781-71648]:MethodDeclaration[70891-71758]"
  }, {
    "left" : "package isValidPropertyName(name ) : boolean",
    "right" : "package isValidPropertyName(name ) : boolean",
    "info" : "MethodDeclaration[71652-72313]:MethodDeclaration[71762-72423]"
  }, {
    "left" : "class : VarCollector",
    "right" : "class : VarCollector",
    "info" : "TypeDeclaration[72317-72754]:TypeDeclaration[72427-72864]"
  }, {
    "left" : "vars",
    "right" : "vars",
    "info" : "FieldDeclaration[72376-72431]:FieldDeclaration[72486-72541]"
  }, {
    "left" : "public visit(n ) : void",
    "right" : "public visit(n ) : void",
    "info" : "MethodDeclaration[72437-72750]:MethodDeclaration[72547-72860]"
  }, {
    "left" : "public getVarsDeclaredInBranch(root ) : ",
    "right" : "public getVarsDeclaredInBranch(root ) : ",
    "info" : "MethodDeclaration[72758-73092]:MethodDeclaration[72868-73202]"
  }, {
    "left" : "package isPrototypePropertyDeclaration(n ) : boolean",
    "right" : "package isPrototypePropertyDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[73096-73394]:MethodDeclaration[73206-73504]"
  }, {
    "left" : "package isPrototypeProperty(n ) : boolean",
    "right" : "package isPrototypeProperty(n ) : boolean",
    "info" : "MethodDeclaration[73398-73634]:MethodDeclaration[73508-73744]"
  }, {
    "left" : "package getPrototypeClassName(qName ) : ",
    "right" : "package getPrototypeClassName(qName ) : ",
    "info" : "MethodDeclaration[73638-73997]:MethodDeclaration[73748-74107]"
  }, {
    "left" : "package getPrototypePropertyName(qName ) : ",
    "right" : "package getPrototypePropertyName(qName ) : ",
    "info" : "MethodDeclaration[74001-74359]:MethodDeclaration[74111-74469]"
  }, {
    "left" : "package newUndefinedNode(srcReferenceNode ) : ",
    "right" : "package newUndefinedNode(srcReferenceNode ) : ",
    "info" : "MethodDeclaration[74363-74674]:MethodDeclaration[74473-74784]"
  }, {
    "left" : "package newVarNode(name , value ) : ",
    "right" : "package newVarNode(name , value ) : ",
    "info" : "MethodDeclaration[74678-75147]:MethodDeclaration[74788-75257]"
  }, {
    "left" : "class : MatchNameNode",
    "right" : "class : MatchNameNode",
    "info" : "TypeDeclaration[75151-75503]:TypeDeclaration[75261-75613]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[75296-75314]:FieldDeclaration[75406-75424]"
  }, {
    "left" : "package MatchNameNode(name )",
    "right" : "package MatchNameNode(name )",
    "info" : "MethodDeclaration[75320-75377]:MethodDeclaration[75430-75487]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[75383-75499]:MethodDeclaration[75493-75609]"
  }, {
    "left" : "class : MatchNodeType",
    "right" : "class : MatchNodeType",
    "info" : "TypeDeclaration[75507-75794]:TypeDeclaration[75617-75904]"
  }, {
    "left" : "type",
    "right" : "type",
    "info" : "FieldDeclaration[75639-75654]:FieldDeclaration[75749-75764]"
  }, {
    "left" : "package MatchNodeType(type int)",
    "right" : "package MatchNodeType(type int)",
    "info" : "MethodDeclaration[75660-75714]:MethodDeclaration[75770-75824]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[75720-75790]:MethodDeclaration[75830-75900]"
  }, {
    "left" : "class : MatchDeclaration",
    "right" : "class : MatchDeclaration",
    "info" : "TypeDeclaration[75799-76041]:TypeDeclaration[75909-76151]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[75934-76037]:MethodDeclaration[76044-76147]"
  }, {
    "left" : "class : MatchNotFunction",
    "right" : "class : MatchNotFunction",
    "info" : "TypeDeclaration[76045-76250]:TypeDeclaration[76155-76360]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[76181-76246]:MethodDeclaration[76291-76356]"
  }, {
    "left" : "class : MatchShallowStatement",
    "right" : "class : MatchShallowStatement",
    "info" : "TypeDeclaration[76254-76661]:TypeDeclaration[76364-76771]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[76409-76657]:MethodDeclaration[76519-76767]"
  }, {
    "left" : "package getNodeTypeReferenceCount(node , type int, traverseChildrenPred ) : int",
    "right" : "package getNodeTypeReferenceCount(node , type int, traverseChildrenPred ) : int",
    "info" : "MethodDeclaration[76665-76933]:MethodDeclaration[76775-77043]"
  }, {
    "left" : "package isNameReferenced(node , name , traverseChildrenPred ) : boolean",
    "right" : "package isNameReferenced(node , name , traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[76937-77248]:MethodDeclaration[77047-77358]"
  }, {
    "left" : "package isNameReferenced(node , name ) : boolean",
    "right" : "package isNameReferenced(node , name ) : boolean",
    "info" : "MethodDeclaration[77252-77460]:MethodDeclaration[77362-77570]"
  }, {
    "left" : "package getNameReferenceCount(node , name ) : int",
    "right" : "package getNameReferenceCount(node , name ) : int",
    "info" : "MethodDeclaration[77464-77711]:MethodDeclaration[77574-77821]"
  }, {
    "left" : "package has(node , pred , traverseChildrenPred ) : boolean",
    "right" : "package has(node , pred , traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[77715-78242]:MethodDeclaration[77825-78352]"
  }, {
    "left" : "package getCount(n , pred , traverseChildrenPred ) : int",
    "right" : "package getCount(n , pred , traverseChildrenPred ) : int",
    "info" : "MethodDeclaration[78246-78727]:MethodDeclaration[78356-78837]"
  }, {
    "left" : "interface : Visitor",
    "right" : "interface : Visitor",
    "info" : "TypeDeclaration[78731-78863]:TypeDeclaration[78841-78973]"
  }, {
    "left" : "public visit(node ) : void",
    "right" : "public visit(node ) : void",
    "info" : "MethodDeclaration[78837-78859]:MethodDeclaration[78947-78969]"
  }, {
    "left" : "package visitPreOrder(node , vistor , traverseChildrenPred ) : void",
    "right" : "package visitPreOrder(node , vistor , traverseChildrenPred ) : void",
    "info" : "MethodDeclaration[78867-79321]:MethodDeclaration[78977-79431]"
  }, {
    "left" : "package visitPostOrder(node , vistor , traverseChildrenPred ) : void",
    "right" : "package visitPostOrder(node , vistor , traverseChildrenPred ) : void",
    "info" : "MethodDeclaration[79325-79782]:MethodDeclaration[79435-79892]"
  }, {
    "left" : "package hasFinally(n ) : boolean",
    "right" : "package hasFinally(n ) : boolean",
    "info" : "MethodDeclaration[79786-79984]:MethodDeclaration[79896-80094]"
  }, {
    "left" : "package getCatchBlock(n ) : ",
    "right" : "package getCatchBlock(n ) : ",
    "info" : "MethodDeclaration[79988-80216]:MethodDeclaration[80098-80326]"
  }, {
    "left" : "package hasCatchHandler(n ) : boolean",
    "right" : "package hasCatchHandler(n ) : boolean",
    "info" : "MethodDeclaration[80220-80507]:MethodDeclaration[80330-80617]"
  }, {
    "left" : "package getFnParameters(fnNode ) : ",
    "right" : "package getFnParameters(fnNode ) : ",
    "info" : "MethodDeclaration[80511-80843]:MethodDeclaration[80621-80953]"
  }, {
    "left" : "package isConstantName(node ) : boolean",
    "right" : "package isConstantName(node ) : boolean",
    "info" : "MethodDeclaration[80847-81650]:MethodDeclaration[80957-81760]"
  }, {
    "left" : "package isConstantByConvention(convention , node , parent ) : boolean",
    "right" : "package isConstantByConvention(convention , node , parent ) : boolean",
    "info" : "MethodDeclaration[81654-82143]:MethodDeclaration[81764-82253]"
  }, {
    "left" : "package getInfoForNameNode(nameNode ) : ",
    "right" : "package getInfoForNameNode(nameNode ) : ",
    "info" : "MethodDeclaration[82147-82672]:MethodDeclaration[82257-82782]"
  }, {
    "left" : "package getFunctionInfo(n ) : ",
    "right" : "package getFunctionInfo(n ) : ",
    "info" : "MethodDeclaration[82676-83304]:MethodDeclaration[82786-83414]"
  }, {
    "left" : "package getSourceName(n ) : ",
    "right" : "package getSourceName(n ) : ",
    "info" : "MethodDeclaration[83308-83644]:MethodDeclaration[83418-83754]"
  }, {
    "left" : "package newCallNode(callTarget , ) : ",
    "right" : "package newCallNode(callTarget , ) : ",
    "info" : "MethodDeclaration[83648-84043]:MethodDeclaration[83758-84153]"
  }, {
    "left" : "package evaluatesToLocalValue(value ) : boolean",
    "right" : "package evaluatesToLocalValue(value ) : boolean",
    "info" : "MethodDeclaration[84047-84278]:MethodDeclaration[84157-84388]"
  }, {
    "left" : "package evaluatesToLocalValue(value , locals ...) : boolean",
    "right" : "package evaluatesToLocalValue(value , locals ...) : boolean",
    "info" : "MethodDeclaration[84282-86971]:MethodDeclaration[84392-87081]"
  }, {
    "left" : "private getNthSibling(first , index int) : ",
    "right" : "private getNthSibling(first , index int) : ",
    "info" : "MethodDeclaration[86975-87373]:MethodDeclaration[87085-87483]"
  }, {
    "left" : "package getArgumentForFunction(function , index int) : ",
    "right" : "package getArgumentForFunction(function , index int) : ",
    "info" : "MethodDeclaration[87377-87698]:MethodDeclaration[87487-87808]"
  }, {
    "left" : "package getArgumentForCallOrNew(call , index int) : ",
    "right" : "package getArgumentForCallOrNew(call , index int) : ",
    "info" : "MethodDeclaration[87702-88009]:MethodDeclaration[87812-88119]"
  }, {
    "left" : "private isToStringMethodCall(call ) : boolean",
    "right" : "private isToStringMethodCall(call ) : boolean",
    "info" : "MethodDeclaration[88013-88286]:MethodDeclaration[88123-88396]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1504-1510]:Modifier[1504-1510]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[1511-1516]:Modifier[1511-1516]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1517-1522]:TYPE_DECLARATION_KIND[1517-1522]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2083-2090]:Modifier[2083-2090]"
  }, {
    "left" : "NodeUtil",
    "right" : "NodeUtil",
    "info" : "SimpleName[2091-2099]:SimpleName[2091-2099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2102-2104]:Block[2102-2104]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2391-2397]:Modifier[2391-2397]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[2398-2410]:SimpleType[2398-2410]"
  }, {
    "left" : "getImpureBooleanValue",
    "right" : "getImpureBooleanValue",
    "info" : "SimpleName[2411-2432]:SimpleName[2411-2432]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[2433-2439]:SingleVariableDeclaration[2433-2439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2441-3688]:Block[2441-3688]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
    "info" : "SwitchStatement[2447-3684]:SwitchStatement[2447-3684]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[2476-2494]:SwitchCase[2476-2494]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[2501-2518]:SwitchCase[2501-2518]"
  }, {
    "left" : "return getImpureBooleanValue(n.getLastChild());",
    "right" : "return getImpureBooleanValue(n.getLastChild());",
    "info" : "ReturnStatement[2594-2641]:ReturnStatement[2594-2641]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[2648-2663]:SwitchCase[2648-2663]"
  }, {
    "left" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2672-2733]:VariableDeclarationStatement[2672-2733]"
  }, {
    "left" : "return value.not();",
    "right" : "return value.not();",
    "info" : "ReturnStatement[2742-2761]:ReturnStatement[2742-2761]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[2768-2783]:SwitchCase[2768-2783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2784-2959]:Block[2784-2959]"
  }, {
    "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[2794-2854]:VariableDeclarationStatement[2794-2854]"
  }, {
    "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2863-2922]:VariableDeclarationStatement[2863-2922]"
  }, {
    "left" : "return lhs.and(rhs);",
    "right" : "return lhs.and(rhs);",
    "info" : "ReturnStatement[2931-2951]:ReturnStatement[2931-2951]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[2966-2980]:SwitchCase[2966-2980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2982-3156]:Block[2982-3156]"
  }, {
    "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[2992-3052]:VariableDeclarationStatement[2992-3052]"
  }, {
    "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[3061-3120]:VariableDeclarationStatement[3061-3120]"
  }, {
    "left" : "return lhs.or(rhs);",
    "right" : "return lhs.or(rhs);",
    "info" : "ReturnStatement[3129-3148]:ReturnStatement[3129-3148]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[3163-3179]:SwitchCase[3163-3179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3181-3501]:Block[3181-3501]"
  }, {
    "left" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
    "right" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
    "info" : "VariableDeclarationStatement[3191-3280]:VariableDeclarationStatement[3191-3280]"
  }, {
    "left" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
    "right" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[3289-3355]:VariableDeclarationStatement[3289-3355]"
  }, {
    "left" : "if (trueValue.equals(falseValue))",
    "right" : "if (trueValue.equals(falseValue))",
    "info" : "IfStatement[3364-3493]:IfStatement[3364-3493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3398-3437]:Block[3398-3437]"
  }, {
    "left" : "return trueValue;",
    "right" : "return trueValue;",
    "info" : "ReturnStatement[3410-3427]:ReturnStatement[3410-3427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3443-3493]:Block[3443-3493]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[3455-3483]:ReturnStatement[3455-3483]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[3508-3528]:SwitchCase[3508-3528]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[3535-3556]:SwitchCase[3535-3556]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[3598-3623]:ReturnStatement[3598-3623]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[3631-3639]:SwitchCase[3631-3639]"
  }, {
    "left" : "return getPureBooleanValue(n);",
    "right" : "return getPureBooleanValue(n);",
    "info" : "ReturnStatement[3648-3678]:ReturnStatement[3648-3678]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3998-4004]:Modifier[3998-4004]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[4005-4017]:SimpleType[4005-4017]"
  }, {
    "left" : "getPureBooleanValue",
    "right" : "getPureBooleanValue",
    "info" : "SimpleName[4018-4037]:SimpleName[4018-4037]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4038-4044]:SingleVariableDeclaration[4038-4044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4046-5136]:Block[4046-5136]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n    }",
    "info" : "SwitchStatement[4052-5098]:SwitchStatement[4052-5098]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[4081-4099]:SwitchCase[4081-4099]"
  }, {
    "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
    "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
    "info" : "ReturnStatement[4108-4167]:ReturnStatement[4108-4167]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[4175-4193]:SwitchCase[4175-4193]"
  }, {
    "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
    "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
    "info" : "ReturnStatement[4202-4253]:ReturnStatement[4202-4253]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[4261-4276]:SwitchCase[4261-4276]"
  }, {
    "left" : "return getPureBooleanValue(n.getLastChild()).not();",
    "right" : "return getPureBooleanValue(n.getLastChild()).not();",
    "info" : "ReturnStatement[4285-4336]:ReturnStatement[4285-4336]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[4344-4360]:SwitchCase[4344-4360]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[4367-4384]:SwitchCase[4367-4384]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[4391-4407]:SwitchCase[4391-4407]"
  }, {
    "left" : "return TernaryValue.FALSE;",
    "right" : "return TernaryValue.FALSE;",
    "info" : "ReturnStatement[4416-4442]:ReturnStatement[4416-4442]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[4450-4466]:SwitchCase[4450-4466]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[4475-4503]:VariableDeclarationStatement[4475-4503]"
  }, {
    "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
    "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
    "info" : "IfStatement[4512-4854]:IfStatement[4512-4854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4576-4772]:Block[4576-4772]"
  }, {
    "left" : "return TernaryValue.FALSE;",
    "right" : "return TernaryValue.FALSE;",
    "info" : "ReturnStatement[4736-4762]:ReturnStatement[4736-4762]"
  }, {
    "left" : "if (\"Infinity\".equals(name))",
    "right" : "if (\"Infinity\".equals(name))",
    "info" : "IfStatement[4778-4854]:IfStatement[4778-4854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4807-4854]:Block[4807-4854]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[4819-4844]:ReturnStatement[4819-4844]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4863-4869]:BreakStatement[4863-4869]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[4877-4893]:SwitchCase[4877-4893]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[4900-4918]:SwitchCase[4900-4918]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[4927-4952]:ReturnStatement[4927-4952]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[4960-4980]:SwitchCase[4960-4980]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[4987-5008]:SwitchCase[4987-5008]"
  }, {
    "left" : "if (!mayHaveSideEffects(n))",
    "right" : "if (!mayHaveSideEffects(n))",
    "info" : "IfStatement[5017-5092]:IfStatement[5017-5092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5045-5092]:Block[5045-5092]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[5057-5082]:ReturnStatement[5057-5082]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[5104-5132]:ReturnStatement[5104-5132]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5361-5367]:Modifier[5361-5367]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5368-5374]:SimpleType[5368-5374]"
  }, {
    "left" : "getStringValue",
    "right" : "getStringValue",
    "info" : "SimpleName[5375-5389]:SimpleName[5375-5389]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[5390-5396]:SingleVariableDeclaration[5390-5396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5398-6596]:Block[5398-6596]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
    "info" : "SwitchStatement[5447-6575]:SwitchStatement[5447-6575]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[5476-5494]:SwitchCase[5476-5494]"
  }, {
    "left" : "return n.getString();",
    "right" : "return n.getString();",
    "info" : "ReturnStatement[5503-5524]:ReturnStatement[5503-5524]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[5532-5548]:SwitchCase[5532-5548]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[5557-5585]:VariableDeclarationStatement[5557-5585]"
  }, {
    "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
    "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
    "info" : "IfStatement[5594-5731]:IfStatement[5594-5731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5697-5731]:Block[5697-5731]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[5709-5721]:ReturnStatement[5709-5721]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5740-5746]:BreakStatement[5740-5746]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[5754-5772]:SwitchCase[5754-5772]"
  }, {
    "left" : "double value = n.getDouble();",
    "right" : "double value = n.getDouble();",
    "info" : "VariableDeclarationStatement[5781-5810]:VariableDeclarationStatement[5781-5810]"
  }, {
    "left" : "long longValue = (long) value;",
    "right" : "long longValue = (long) value;",
    "info" : "VariableDeclarationStatement[5819-5849]:VariableDeclarationStatement[5819-5849]"
  }, {
    "left" : "if (longValue == value)",
    "right" : "if (longValue == value)",
    "info" : "IfStatement[5898-6042]:IfStatement[5898-6042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5922-5976]:Block[5922-5976]"
  }, {
    "left" : "return Long.toString(longValue);",
    "right" : "return Long.toString(longValue);",
    "info" : "ReturnStatement[5934-5966]:ReturnStatement[5934-5966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5982-6042]:Block[5982-6042]"
  }, {
    "left" : "return Double.toString(n.getDouble());",
    "right" : "return Double.toString(n.getDouble());",
    "info" : "ReturnStatement[5994-6032]:ReturnStatement[5994-6032]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[6050-6067]:SwitchCase[6050-6067]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[6074-6090]:SwitchCase[6074-6090]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[6097-6113]:SwitchCase[6097-6113]"
  }, {
    "left" : "return Node.tokenToName(n.getType());",
    "right" : "return Node.tokenToName(n.getType());",
    "info" : "ReturnStatement[6122-6159]:ReturnStatement[6122-6159]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[6167-6183]:SwitchCase[6167-6183]"
  }, {
    "left" : "return \"undefined\";",
    "right" : "return \"undefined\";",
    "info" : "ReturnStatement[6192-6211]:ReturnStatement[6192-6211]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[6219-6234]:SwitchCase[6219-6234]"
  }, {
    "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[6243-6303]:VariableDeclarationStatement[6243-6303]"
  }, {
    "left" : "if (child != TernaryValue.UNKNOWN)",
    "right" : "if (child != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[6312-6430]:IfStatement[6312-6430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6347-6430]:Block[6347-6430]"
  }, {
    "left" : "return child.toBoolean(true) ? \"false\" : \"true\";",
    "right" : "return child.toBoolean(true) ? \"false\" : \"true\";",
    "info" : "ReturnStatement[6359-6407]:ReturnStatement[6359-6407]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6439-6445]:BreakStatement[6439-6445]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[6453-6473]:SwitchCase[6453-6473]"
  }, {
    "left" : "return arrayToString(n);",
    "right" : "return arrayToString(n);",
    "info" : "ReturnStatement[6482-6506]:ReturnStatement[6482-6506]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[6514-6535]:SwitchCase[6514-6535]"
  }, {
    "left" : "return \"[object Object]\";",
    "right" : "return \"[object Object]\";",
    "info" : "ReturnStatement[6544-6569]:ReturnStatement[6544-6569]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6580-6592]:ReturnStatement[6580-6592]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6976-6982]:Modifier[6976-6982]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6983-6989]:SimpleType[6983-6989]"
  }, {
    "left" : "getArrayElementStringValue",
    "right" : "getArrayElementStringValue",
    "info" : "SimpleName[6990-7016]:SimpleName[6990-7016]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7017-7023]:SingleVariableDeclaration[7017-7023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7025-7137]:Block[7025-7137]"
  }, {
    "left" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
    "right" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
    "info" : "ReturnStatement[7031-7133]:ReturnStatement[7031-7133]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7141-7147]:Modifier[7141-7147]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7148-7154]:SimpleType[7148-7154]"
  }, {
    "left" : "arrayToString",
    "right" : "arrayToString",
    "info" : "SimpleName[7155-7168]:SimpleName[7155-7168]"
  }, {
    "left" : "Node literal",
    "right" : "Node literal",
    "info" : "SingleVariableDeclaration[7169-7181]:SingleVariableDeclaration[7169-7181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7183-7647]:Block[7183-7647]"
  }, {
    "left" : "Node first = literal.getFirstChild();",
    "right" : "Node first = literal.getFirstChild();",
    "info" : "VariableDeclarationStatement[7189-7226]:VariableDeclarationStatement[7189-7226]"
  }, {
    "left" : "StringBuilder result = new StringBuilder();",
    "right" : "StringBuilder result = new StringBuilder();",
    "info" : "VariableDeclarationStatement[7231-7274]:VariableDeclarationStatement[7231-7274]"
  }, {
    "left" : "int nextSlot = 0;",
    "right" : "int nextSlot = 0;",
    "info" : "VariableDeclarationStatement[7279-7296]:VariableDeclarationStatement[7279-7296]"
  }, {
    "left" : "int nextSkipSlot = 0;",
    "right" : "int nextSkipSlot = 0;",
    "info" : "VariableDeclarationStatement[7301-7322]:VariableDeclarationStatement[7301-7322]"
  }, {
    "left" : "for (Node n = first; n != null; n = n.getNext())",
    "right" : "for (Node n = first; n != null; n = n.getNext())",
    "info" : "ForStatement[7327-7613]:ForStatement[7327-7613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7376-7613]:Block[7376-7613]"
  }, {
    "left" : "String childValue = getArrayElementStringValue(n);",
    "right" : "String childValue = getArrayElementStringValue(n);",
    "info" : "VariableDeclarationStatement[7384-7434]:VariableDeclarationStatement[7384-7434]"
  }, {
    "left" : "if (childValue == null)",
    "right" : "if (childValue == null)",
    "info" : "IfStatement[7441-7495]:IfStatement[7441-7495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7465-7495]:Block[7465-7495]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[7475-7487]:ReturnStatement[7475-7487]"
  }, {
    "left" : "if (n != first)",
    "right" : "if (n != first)",
    "info" : "IfStatement[7502-7555]:IfStatement[7502-7555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7518-7555]:Block[7518-7555]"
  }, {
    "left" : "result.append(',');",
    "right" : "result.append(',');",
    "info" : "ExpressionStatement[7528-7547]:ExpressionStatement[7528-7547]"
  }, {
    "left" : "result.append(childValue);",
    "right" : "result.append(childValue);",
    "info" : "ExpressionStatement[7562-7588]:ExpressionStatement[7562-7588]"
  }, {
    "left" : "nextSlot++;",
    "right" : "nextSlot++;",
    "info" : "ExpressionStatement[7596-7607]:ExpressionStatement[7596-7607]"
  }, {
    "left" : "return result.toString();",
    "right" : "return result.toString();",
    "info" : "ReturnStatement[7618-7643]:ReturnStatement[7618-7643]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7871-7877]:Modifier[7871-7877]"
  }, {
    "left" : "Double",
    "right" : "Double",
    "info" : "SimpleType[7878-7884]:SimpleType[7878-7884]"
  }, {
    "left" : "getNumberValue",
    "right" : "getNumberValue",
    "info" : "SimpleName[7885-7899]:SimpleName[7885-7899]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7900-7906]:SingleVariableDeclaration[7900-7906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7908-9364]:Block[7908-9364]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
    "info" : "SwitchStatement[7914-9342]:SwitchStatement[7914-9342]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[7943-7959]:SwitchCase[7943-7959]"
  }, {
    "left" : "return 1.0;",
    "right" : "return 1.0;",
    "info" : "ReturnStatement[7968-7979]:ReturnStatement[7968-7979]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[7987-8004]:SwitchCase[7987-8004]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[8011-8027]:SwitchCase[8011-8027]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[8036-8047]:ReturnStatement[8036-8047]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[8055-8073]:SwitchCase[8055-8073]"
  }, {
    "left" : "return n.getDouble();",
    "right" : "return n.getDouble();",
    "info" : "ReturnStatement[8082-8103]:ReturnStatement[8082-8103]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[8111-8127]:SwitchCase[8111-8127]"
  }, {
    "left" : "if (mayHaveSideEffects(n.getFirstChild()))",
    "right" : "if (mayHaveSideEffects(n.getFirstChild()))",
    "info" : "IfStatement[8136-8259]:IfStatement[8136-8259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8179-8213]:Block[8179-8213]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8191-8203]:ReturnStatement[8191-8203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8219-8259]:Block[8219-8259]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[8231-8249]:ReturnStatement[8231-8249]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[8267-8283]:SwitchCase[8267-8283]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[8329-8357]:VariableDeclarationStatement[8329-8357]"
  }, {
    "left" : "if (name.equals(\"undefined\"))",
    "right" : "if (name.equals(\"undefined\"))",
    "info" : "IfStatement[8366-8436]:IfStatement[8366-8436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8396-8436]:Block[8396-8436]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[8408-8426]:ReturnStatement[8408-8426]"
  }, {
    "left" : "if (name.equals(\"NaN\"))",
    "right" : "if (name.equals(\"NaN\"))",
    "info" : "IfStatement[8445-8509]:IfStatement[8445-8509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8469-8509]:Block[8469-8509]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[8481-8499]:ReturnStatement[8481-8499]"
  }, {
    "left" : "if (name.equals(\"Infinity\"))",
    "right" : "if (name.equals(\"Infinity\"))",
    "info" : "IfStatement[8518-8601]:IfStatement[8518-8601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8547-8601]:Block[8547-8601]"
  }, {
    "left" : "return Double.POSITIVE_INFINITY;",
    "right" : "return Double.POSITIVE_INFINITY;",
    "info" : "ReturnStatement[8559-8591]:ReturnStatement[8559-8591]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8610-8622]:ReturnStatement[8610-8622]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[8630-8645]:SwitchCase[8630-8645]"
  }, {
    "left" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
    "right" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
    "info" : "IfStatement[8654-8845]:IfStatement[8654-8845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8791-8845]:Block[8791-8845]"
  }, {
    "left" : "return Double.NEGATIVE_INFINITY;",
    "right" : "return Double.NEGATIVE_INFINITY;",
    "info" : "ReturnStatement[8803-8835]:ReturnStatement[8803-8835]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8854-8866]:ReturnStatement[8854-8866]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[8874-8889]:SwitchCase[8874-8889]"
  }, {
    "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[8898-8958]:VariableDeclarationStatement[8898-8958]"
  }, {
    "left" : "if (child != TernaryValue.UNKNOWN)",
    "right" : "if (child != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[8967-9078]:IfStatement[8967-9078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9002-9078]:Block[9002-9078]"
  }, {
    "left" : "return child.toBoolean(true) ? 0.0 : 1.0;",
    "right" : "return child.toBoolean(true) ? 0.0 : 1.0;",
    "info" : "ReturnStatement[9014-9055]:ReturnStatement[9014-9055]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9087-9093]:BreakStatement[9087-9093]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[9101-9119]:SwitchCase[9101-9119]"
  }, {
    "left" : "return getStringNumberValue(n.getString());",
    "right" : "return getStringNumberValue(n.getString());",
    "info" : "ReturnStatement[9128-9171]:ReturnStatement[9128-9171]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[9179-9199]:SwitchCase[9179-9199]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[9206-9227]:SwitchCase[9206-9227]"
  }, {
    "left" : "String value = getStringValue(n);",
    "right" : "String value = getStringValue(n);",
    "info" : "VariableDeclarationStatement[9236-9269]:VariableDeclarationStatement[9236-9269]"
  }, {
    "left" : "return value != null ? getStringNumberValue(value) : null;",
    "right" : "return value != null ? getStringNumberValue(value) : null;",
    "info" : "ReturnStatement[9278-9336]:ReturnStatement[9278-9336]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[9348-9360]:ReturnStatement[9348-9360]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9368-9374]:Modifier[9368-9374]"
  }, {
    "left" : "Double",
    "right" : "Double",
    "info" : "SimpleType[9375-9381]:SimpleType[9375-9381]"
  }, {
    "left" : "getStringNumberValue",
    "right" : "getStringNumberValue",
    "info" : "SimpleName[9382-9402]:SimpleName[9382-9402]"
  }, {
    "left" : "String rawJsString",
    "right" : "String rawJsString",
    "info" : "SingleVariableDeclaration[9403-9421]:SingleVariableDeclaration[9403-9421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9423-10571]:Block[9423-10638]"
  }, {
    "left" : "String s = trimJsWhiteSpace(rawJsString);",
    "right" : "String s = trimJsWhiteSpace(rawJsString);",
    "info" : "VariableDeclarationStatement[9477-9518]:VariableDeclarationStatement[9544-9585]"
  }, {
    "left" : "if (s.length() == 0)",
    "right" : "if (s.length() == 0)",
    "info" : "IfStatement[9564-9610]:IfStatement[9631-9677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9585-9610]:Block[9652-9677]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[9593-9604]:ReturnStatement[9660-9671]"
  }, {
    "left" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
    "right" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
    "info" : "IfStatement[9616-9926]:IfStatement[9683-9993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9720-9926]:Block[9787-9993]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9769-9920]:TryStatement[9836-9987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9773-9851]:Block[9840-9918]"
  }, {
    "left" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
    "right" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
    "info" : "ReturnStatement[9783-9843]:ReturnStatement[9850-9910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9884-9920]:Block[9951-9987]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[9894-9912]:ReturnStatement[9961-9979]"
  }, {
    "left" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
    "right" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
    "info" : "IfStatement[9932-10180]:IfStatement[9999-10247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10090-10180]:Block[10157-10247]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10162-10174]:ReturnStatement[10229-10241]"
  }, {
    "left" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
    "right" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
    "info" : "IfStatement[10331-10449]:IfStatement[10398-10516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10423-10449]:Block[10490-10516]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10431-10443]:ReturnStatement[10498-10510]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10455-10567]:TryStatement[10522-10634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10459-10502]:Block[10526-10569]"
  }, {
    "left" : "return Double.parseDouble(s);",
    "right" : "return Double.parseDouble(s);",
    "info" : "ReturnStatement[10467-10496]:ReturnStatement[10534-10563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10535-10567]:Block[10602-10634]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[10543-10561]:ReturnStatement[10610-10628]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10575-10581]:Modifier[10642-10648]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10582-10588]:SimpleType[10649-10655]"
  }, {
    "left" : "trimJsWhiteSpace",
    "right" : "trimJsWhiteSpace",
    "info" : "SimpleName[10589-10605]:SimpleName[10656-10672]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[10606-10614]:SingleVariableDeclaration[10673-10681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10616-10930]:Block[10683-10997]"
  }, {
    "left" : "int start = 0;",
    "right" : "int start = 0;",
    "info" : "VariableDeclarationStatement[10622-10636]:VariableDeclarationStatement[10689-10703]"
  }, {
    "left" : "int end = s.length();",
    "right" : "int end = s.length();",
    "info" : "VariableDeclarationStatement[10641-10662]:VariableDeclarationStatement[10708-10729]"
  }, {
    "left" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
    "right" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
    "info" : "WhileStatement[10667-10774]:WhileStatement[10734-10841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10754-10774]:Block[10821-10841]"
  }, {
    "left" : "end--;",
    "right" : "end--;",
    "info" : "ExpressionStatement[10762-10768]:ExpressionStatement[10829-10835]"
  }, {
    "left" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
    "right" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
    "info" : "WhileStatement[10779-10890]:WhileStatement[10846-10957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10868-10890]:Block[10935-10957]"
  }, {
    "left" : "start++;",
    "right" : "start++;",
    "info" : "ExpressionStatement[10876-10884]:ExpressionStatement[10943-10951]"
  }, {
    "left" : "return s.substring(start, end);",
    "right" : "return s.substring(start, end);",
    "info" : "ReturnStatement[10895-10926]:ReturnStatement[10962-10993]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10985-10991]:Modifier[11052-11058]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[10992-11004]:SimpleType[11059-11071]"
  }, {
    "left" : "isStrWhiteSpaceChar",
    "right" : "isStrWhiteSpaceChar",
    "info" : "SimpleName[11005-11024]:SimpleName[11072-11091]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[11025-11030]:SingleVariableDeclaration[11092-11097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11032-11541]:Block[11099-11651]"
  }, {
    "left" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.TRUE;\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
    "right" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
    "info" : "SwitchStatement[11038-11537]:SwitchStatement[11105-11647]"
  }, {
    "left" : "case '\\u000B':",
    "right" : "case '\\u000B':",
    "info" : "SwitchCase[11057-11071]:SwitchCase[11124-11138]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[11088-11113]:ReturnStatement[11480-11505]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[11120-11129]:SwitchCase[11230-11239]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[11144-11154]:SwitchCase[11254-11264]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[11169-11179]:SwitchCase[11279-11289]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[11194-11204]:SwitchCase[11304-11314]"
  }, {
    "left" : "case '\\u00A0':",
    "right" : "case '\\u00A0':",
    "info" : "SwitchCase[11220-11234]:SwitchCase[11330-11344]"
  }, {
    "left" : "case '\\u000C':",
    "right" : "case '\\u000C':",
    "info" : "SwitchCase[11251-11265]:SwitchCase[11361-11375]"
  }, {
    "left" : "case '\\u2028':",
    "right" : "case '\\u2028':",
    "info" : "SwitchCase[11280-11294]:SwitchCase[11390-11404]"
  }, {
    "left" : "case '\\u2029':",
    "right" : "case '\\u2029':",
    "info" : "SwitchCase[11309-11323]:SwitchCase[11419-11433]"
  }, {
    "left" : "case '\\uFEFF':",
    "right" : "case '\\uFEFF':",
    "info" : "SwitchCase[11338-11352]:SwitchCase[11448-11462]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[11370-11395]:ReturnStatement[11155-11183]"
  }, {
    "left" : "TernaryValue.TRUE",
    "right" : "TernaryValue.UNKNOWN",
    "info" : "QualifiedName[11377-11394]:QualifiedName[11162-11182]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[11402-11410]:SwitchCase[11512-11520]"
  }, {
    "left" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
    "right" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
    "info" : "ReturnStatement[11419-11531]:ReturnStatement[11529-11641]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12158-12164]:Modifier[12268-12274]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[12165-12171]:SimpleType[12275-12281]"
  }, {
    "left" : "getFunctionName",
    "right" : "getFunctionName",
    "info" : "SimpleName[12172-12187]:SimpleName[12282-12297]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12188-12194]:SingleVariableDeclaration[12298-12304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12196-12749]:Block[12306-12859]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[12202-12230]:VariableDeclarationStatement[12312-12340]"
  }, {
    "left" : "String name = n.getFirstChild().getString();",
    "right" : "String name = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[12235-12279]:VariableDeclarationStatement[12345-12389]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
    "info" : "SwitchStatement[12284-12745]:SwitchStatement[12394-12855]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[12318-12334]:SwitchCase[12428-12444]"
  }, {
    "left" : "return parent.getString();",
    "right" : "return parent.getString();",
    "info" : "ReturnStatement[12424-12450]:ReturnStatement[12534-12560]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[12458-12476]:SwitchCase[12568-12586]"
  }, {
    "left" : "return parent.getFirstChild().getQualifiedName();",
    "right" : "return parent.getFirstChild().getQualifiedName();",
    "info" : "ReturnStatement[12578-12627]:ReturnStatement[12688-12737]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[12635-12643]:SwitchCase[12745-12753]"
  }, {
    "left" : "return name != null && name.length() != 0 ? name : null;",
    "right" : "return name != null && name.length() != 0 ? name : null;",
    "info" : "ReturnStatement[12683-12739]:ReturnStatement[12793-12849]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13354-13360]:Modifier[13464-13470]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13361-13367]:SimpleType[13471-13477]"
  }, {
    "left" : "getNearestFunctionName",
    "right" : "getNearestFunctionName",
    "info" : "SimpleName[13368-13390]:SimpleName[13478-13500]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13391-13397]:SingleVariableDeclaration[13501-13507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13399-13849]:Block[13509-13959]"
  }, {
    "left" : "String name = getFunctionName(n);",
    "right" : "String name = getFunctionName(n);",
    "info" : "VariableDeclarationStatement[13405-13438]:VariableDeclarationStatement[13515-13548]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[13443-13487]:IfStatement[13553-13597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13461-13487]:Block[13571-13597]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[13469-13481]:ReturnStatement[13579-13591]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[13544-13572]:VariableDeclarationStatement[13654-13682]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
    "info" : "SwitchStatement[13577-13827]:SwitchStatement[13687-13937]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[13611-13626]:SwitchCase[13721-13736]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[13633-13648]:SwitchCase[13743-13758]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[13655-13673]:SwitchCase[13765-13783]"
  }, {
    "left" : "return parent.getString();",
    "right" : "return parent.getString();",
    "info" : "ReturnStatement[13731-13757]:ReturnStatement[13841-13867]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[13764-13782]:SwitchCase[13874-13892]"
  }, {
    "left" : "return getStringValue(parent);",
    "right" : "return getStringValue(parent);",
    "info" : "ReturnStatement[13791-13821]:ReturnStatement[13901-13931]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[13833-13845]:ReturnStatement[13943-13955]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13915-13921]:Modifier[14025-14031]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13922-13929]:PrimitiveType[14032-14039]"
  }, {
    "left" : "isImmutableValue",
    "right" : "isImmutableValue",
    "info" : "SimpleName[13930-13946]:SimpleName[14040-14056]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13947-13953]:SingleVariableDeclaration[14057-14063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13955-14642]:Block[14065-14752]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
    "info" : "SwitchStatement[13961-14619]:SwitchStatement[14071-14729]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[13990-14008]:SwitchCase[14100-14118]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[14015-14033]:SwitchCase[14125-14143]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[14040-14056]:SwitchCase[14150-14166]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[14063-14079]:SwitchCase[14173-14189]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[14086-14103]:SwitchCase[14196-14213]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14112-14124]:ReturnStatement[14222-14234]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[14131-14146]:SwitchCase[14241-14256]"
  }, {
    "left" : "return isImmutableValue(n.getFirstChild());",
    "right" : "return isImmutableValue(n.getFirstChild());",
    "info" : "ReturnStatement[14155-14198]:ReturnStatement[14265-14308]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[14205-14221]:SwitchCase[14315-14331]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[14228-14243]:SwitchCase[14338-14353]"
  }, {
    "left" : "return isImmutableValue(n.getFirstChild());",
    "right" : "return isImmutableValue(n.getFirstChild());",
    "info" : "ReturnStatement[14252-14295]:ReturnStatement[14362-14405]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[14302-14318]:SwitchCase[14412-14428]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[14327-14355]:VariableDeclarationStatement[14437-14465]"
  }, {
    "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
    "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
    "info" : "ReturnStatement[14508-14613]:ReturnStatement[14618-14723]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[14625-14638]:ReturnStatement[14735-14748]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15548-15554]:Modifier[15658-15664]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15555-15562]:PrimitiveType[15665-15672]"
  }, {
    "left" : "isLiteralValue",
    "right" : "isLiteralValue",
    "info" : "SimpleName[15563-15577]:SimpleName[15673-15687]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15578-15584]:SingleVariableDeclaration[15688-15694]"
  }, {
    "left" : "boolean includeFunctions",
    "right" : "boolean includeFunctions",
    "info" : "SingleVariableDeclaration[15586-15610]:SingleVariableDeclaration[15696-15720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15612-16736]:Block[15722-16846]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
    "info" : "SwitchStatement[15618-16732]:SwitchStatement[15728-16842]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[15647-15667]:SwitchCase[15757-15777]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[15676-15921]:ForStatement[15786-16031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15766-15921]:Block[15876-16031]"
  }, {
    "left" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
    "right" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
    "info" : "IfStatement[15778-15911]:IfStatement[15888-16021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15872-15911]:Block[15982-16021]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15886-15899]:ReturnStatement[15996-16009]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15930-15942]:ReturnStatement[16040-16052]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[15950-15968]:SwitchCase[16060-16078]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[16032-16229]:ForStatement[16142-16339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16122-16229]:Block[16232-16339]"
  }, {
    "left" : "if (!isLiteralValue(child, includeFunctions))",
    "right" : "if (!isLiteralValue(child, includeFunctions))",
    "info" : "IfStatement[16134-16219]:IfStatement[16244-16329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16180-16219]:Block[16290-16329]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16194-16207]:ReturnStatement[16304-16317]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16238-16250]:ReturnStatement[16348-16360]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[16258-16279]:SwitchCase[16368-16389]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[16341-16554]:ForStatement[16451-16664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16431-16554]:Block[16541-16664]"
  }, {
    "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
    "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
    "info" : "IfStatement[16443-16544]:IfStatement[16553-16654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16505-16544]:Block[16615-16654]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16519-16532]:ReturnStatement[16629-16642]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16563-16575]:ReturnStatement[16673-16685]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[16583-16603]:SwitchCase[16693-16713]"
  }, {
    "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
    "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
    "info" : "ReturnStatement[16612-16674]:ReturnStatement[16722-16784]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[16682-16690]:SwitchCase[16792-16800]"
  }, {
    "left" : "return isImmutableValue(n);",
    "right" : "return isImmutableValue(n);",
    "info" : "ReturnStatement[16699-16726]:ReturnStatement[16809-16836]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[16927-16933]:Modifier[17037-17043]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16934-16941]:PrimitiveType[17044-17051]"
  }, {
    "left" : "isValidDefineValue",
    "right" : "isValidDefineValue",
    "info" : "SimpleName[16942-16960]:SimpleName[17052-17070]"
  }, {
    "left" : "Node val",
    "right" : "Node val",
    "info" : "SingleVariableDeclaration[16961-16969]:SingleVariableDeclaration[17071-17079]"
  }, {
    "left" : "Set<String> defines",
    "right" : "Set<String> defines",
    "info" : "SingleVariableDeclaration[16971-16990]:SingleVariableDeclaration[17081-17100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16992-18230]:Block[17102-18340]"
  }, {
    "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
    "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
    "info" : "SwitchStatement[16998-18208]:SwitchStatement[17108-18318]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[17029-17047]:SwitchCase[17139-17157]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[17054-17072]:SwitchCase[17164-17182]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[17079-17095]:SwitchCase[17189-17205]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[17102-17119]:SwitchCase[17212-17229]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17128-17140]:ReturnStatement[17238-17250]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[17217-17232]:SwitchCase[17327-17342]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[17239-17257]:SwitchCase[17349-17367]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[17264-17282]:SwitchCase[17374-17392]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[17289-17306]:SwitchCase[17399-17416]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[17313-17331]:SwitchCase[17423-17441]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[17338-17353]:SwitchCase[17448-17463]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[17360-17374]:SwitchCase[17470-17484]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[17381-17395]:SwitchCase[17491-17505]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[17402-17416]:SwitchCase[17512-17526]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[17423-17437]:SwitchCase[17533-17547]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[17444-17459]:SwitchCase[17554-17569]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[17466-17480]:SwitchCase[17576-17590]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[17487-17502]:SwitchCase[17597-17612]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[17509-17524]:SwitchCase[17619-17634]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[17531-17545]:SwitchCase[17641-17655]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[17552-17567]:SwitchCase[17662-17677]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[17574-17590]:SwitchCase[17684-17700]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[17597-17613]:SwitchCase[17707-17723]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[17620-17635]:SwitchCase[17730-17745]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[17642-17658]:SwitchCase[17752-17768]"
  }, {
    "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
    "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
    "info" : "ReturnStatement[17667-17786]:ReturnStatement[17777-17896]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[17853-17868]:SwitchCase[17963-17978]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[17875-17890]:SwitchCase[17985-18000]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[17897-17912]:SwitchCase[18007-18022]"
  }, {
    "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
    "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
    "info" : "ReturnStatement[17921-17977]:ReturnStatement[18031-18087]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[18054-18070]:SwitchCase[18164-18180]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[18077-18096]:SwitchCase[18187-18206]"
  }, {
    "left" : "if (val.isQualifiedName())",
    "right" : "if (val.isQualifiedName())",
    "info" : "IfStatement[18105-18202]:IfStatement[18215-18312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18132-18202]:Block[18242-18312]"
  }, {
    "left" : "return defines.contains(val.getQualifiedName());",
    "right" : "return defines.contains(val.getQualifiedName());",
    "info" : "ReturnStatement[18144-18192]:ReturnStatement[18254-18302]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18213-18226]:ReturnStatement[18323-18336]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18336-18342]:Modifier[18446-18452]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18343-18350]:PrimitiveType[18453-18460]"
  }, {
    "left" : "isEmptyBlock",
    "right" : "isEmptyBlock",
    "info" : "SimpleName[18351-18363]:SimpleName[18461-18473]"
  }, {
    "left" : "Node block",
    "right" : "Node block",
    "info" : "SingleVariableDeclaration[18364-18374]:SingleVariableDeclaration[18474-18484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18376-18614]:Block[18486-18724]"
  }, {
    "left" : "if (block.getType() != Token.BLOCK)",
    "right" : "if (block.getType() != Token.BLOCK)",
    "info" : "IfStatement[18382-18445]:IfStatement[18492-18555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18418-18445]:Block[18528-18555]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18426-18439]:ReturnStatement[18536-18549]"
  }, {
    "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
    "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
    "info" : "ForStatement[18451-18593]:ForStatement[18561-18703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18516-18593]:Block[18626-18703]"
  }, {
    "left" : "if (n.getType() != Token.EMPTY)",
    "right" : "if (n.getType() != Token.EMPTY)",
    "info" : "IfStatement[18524-18587]:IfStatement[18634-18697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18556-18587]:Block[18666-18697]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[18566-18579]:ReturnStatement[18676-18689]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18598-18610]:ReturnStatement[18708-18720]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18618-18624]:Modifier[18728-18734]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18625-18632]:PrimitiveType[18735-18742]"
  }, {
    "left" : "isSimpleOperator",
    "right" : "isSimpleOperator",
    "info" : "SimpleName[18633-18649]:SimpleName[18743-18759]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18650-18656]:SingleVariableDeclaration[18760-18766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18658-18709]:Block[18768-18819]"
  }, {
    "left" : "return isSimpleOperatorType(n.getType());",
    "right" : "return isSimpleOperatorType(n.getType());",
    "info" : "ReturnStatement[18664-18705]:ReturnStatement[18774-18815]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18887-18893]:Modifier[18997-19003]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18894-18901]:PrimitiveType[19004-19011]"
  }, {
    "left" : "isSimpleOperatorType",
    "right" : "isSimpleOperatorType",
    "info" : "SimpleName[18902-18922]:SimpleName[19012-19032]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[18923-18931]:SingleVariableDeclaration[19033-19041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18933-19690]:Block[19043-19800]"
  }, {
    "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[18939-19686]:SwitchStatement[19049-19796]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[18961-18976]:SwitchCase[19071-19086]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[18983-19001]:SwitchCase[19093-19111]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[19008-19026]:SwitchCase[19118-19136]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[19033-19050]:SwitchCase[19143-19160]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[19057-19075]:SwitchCase[19167-19185]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[19082-19099]:SwitchCase[19192-19209]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[19106-19121]:SwitchCase[19216-19231]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[19128-19142]:SwitchCase[19238-19252]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[19149-19163]:SwitchCase[19259-19273]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[19170-19189]:SwitchCase[19280-19299]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[19196-19215]:SwitchCase[19306-19325]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[19222-19236]:SwitchCase[19332-19346]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[19243-19265]:SwitchCase[19353-19375]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[19272-19286]:SwitchCase[19382-19396]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[19293-19308]:SwitchCase[19403-19418]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[19315-19329]:SwitchCase[19425-19439]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[19336-19351]:SwitchCase[19446-19461]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[19358-19373]:SwitchCase[19468-19483]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[19380-19394]:SwitchCase[19490-19504]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[19401-19416]:SwitchCase[19511-19526]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[19423-19438]:SwitchCase[19533-19548]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[19445-19461]:SwitchCase[19555-19571]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[19468-19484]:SwitchCase[19578-19594]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[19491-19506]:SwitchCase[19601-19616]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[19513-19531]:SwitchCase[19623-19641]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[19538-19554]:SwitchCase[19648-19664]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[19561-19576]:SwitchCase[19671-19686]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[19583-19598]:SwitchCase[19693-19708]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[19605-19621]:SwitchCase[19715-19731]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19630-19642]:ReturnStatement[19740-19752]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[19650-19658]:SwitchCase[19760-19768]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19667-19680]:ReturnStatement[19777-19790]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19851-19857]:Modifier[19961-19967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19858-19864]:Modifier[19968-19974]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[19865-19869]:SimpleType[19975-19979]"
  }, {
    "left" : "newExpr",
    "right" : "newExpr",
    "info" : "SimpleName[19870-19877]:SimpleName[19980-19987]"
  }, {
    "left" : "Node child",
    "right" : "Node child",
    "info" : "SingleVariableDeclaration[19878-19888]:SingleVariableDeclaration[19988-19998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19890-20000]:Block[20000-20110]"
  }, {
    "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
    "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
    "info" : "VariableDeclarationStatement[19896-19979]:VariableDeclarationStatement[20006-20089]"
  }, {
    "left" : "return expr;",
    "right" : "return expr;",
    "info" : "ReturnStatement[19984-19996]:ReturnStatement[20094-20106]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20174-20180]:Modifier[20284-20290]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20181-20188]:PrimitiveType[20291-20298]"
  }, {
    "left" : "mayEffectMutableState",
    "right" : "mayEffectMutableState",
    "info" : "SimpleName[20189-20210]:SimpleName[20299-20320]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20211-20217]:SingleVariableDeclaration[20321-20327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20219-20267]:Block[20329-20377]"
  }, {
    "left" : "return mayEffectMutableState(n, null);",
    "right" : "return mayEffectMutableState(n, null);",
    "info" : "ReturnStatement[20225-20263]:ReturnStatement[20335-20373]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20271-20277]:Modifier[20381-20387]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20278-20285]:PrimitiveType[20388-20395]"
  }, {
    "left" : "mayEffectMutableState",
    "right" : "mayEffectMutableState",
    "info" : "SimpleName[20286-20307]:SimpleName[20396-20417]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20308-20314]:SingleVariableDeclaration[20418-20424]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[20316-20341]:SingleVariableDeclaration[20426-20451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20343-20405]:Block[20453-20515]"
  }, {
    "left" : "return checkForStateChangeHelper(n, true, compiler);",
    "right" : "return checkForStateChangeHelper(n, true, compiler);",
    "info" : "ReturnStatement[20349-20401]:ReturnStatement[20459-20511]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20494-20500]:Modifier[20604-20610]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20501-20508]:PrimitiveType[20611-20618]"
  }, {
    "left" : "mayHaveSideEffects",
    "right" : "mayHaveSideEffects",
    "info" : "SimpleName[20509-20527]:SimpleName[20619-20637]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20528-20534]:SingleVariableDeclaration[20638-20644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20536-20581]:Block[20646-20691]"
  }, {
    "left" : "return mayHaveSideEffects(n, null);",
    "right" : "return mayHaveSideEffects(n, null);",
    "info" : "ReturnStatement[20542-20577]:ReturnStatement[20652-20687]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20585-20591]:Modifier[20695-20701]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20592-20599]:PrimitiveType[20702-20709]"
  }, {
    "left" : "mayHaveSideEffects",
    "right" : "mayHaveSideEffects",
    "info" : "SimpleName[20600-20618]:SimpleName[20710-20728]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20619-20625]:SingleVariableDeclaration[20729-20735]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[20627-20652]:SingleVariableDeclaration[20737-20762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20654-20717]:Block[20764-20827]"
  }, {
    "left" : "return checkForStateChangeHelper(n, false, compiler);",
    "right" : "return checkForStateChangeHelper(n, false, compiler);",
    "info" : "ReturnStatement[20660-20713]:ReturnStatement[20770-20823]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20995-21002]:Modifier[21105-21112]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[21003-21009]:Modifier[21113-21119]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[21010-21017]:PrimitiveType[21120-21127]"
  }, {
    "left" : "checkForStateChangeHelper",
    "right" : "checkForStateChangeHelper",
    "info" : "SimpleName[21018-21043]:SimpleName[21128-21153]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[21051-21057]:SingleVariableDeclaration[21161-21167]"
  }, {
    "left" : "boolean checkForNewObjects",
    "right" : "boolean checkForNewObjects",
    "info" : "SingleVariableDeclaration[21059-21085]:SingleVariableDeclaration[21169-21195]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[21087-21112]:SingleVariableDeclaration[21197-21222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21114-25562]:Block[21224-25672]"
  }, {
    "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
    "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
    "info" : "SwitchStatement[21218-25364]:SwitchStatement[21328-25474]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[21306-21321]:SwitchCase[21416-21431]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[21328-21345]:SwitchCase[21438-21455]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[21352-21375]:SwitchCase[21462-21485]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[21382-21398]:SwitchCase[21492-21508]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[21405-21419]:SwitchCase[21515-21529]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[21426-21440]:SwitchCase[21536-21550]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[21447-21461]:SwitchCase[21557-21571]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[21468-21486]:SwitchCase[21578-21596]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[21493-21507]:SwitchCase[21603-21617]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[21514-21530]:SwitchCase[21624-21640]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[21537-21553]:SwitchCase[21647-21663]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[21560-21577]:SwitchCase[21670-21687]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[21584-21600]:SwitchCase[21694-21710]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[21607-21625]:SwitchCase[21717-21735]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[21632-21650]:SwitchCase[21742-21760]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[21657-21672]:SwitchCase[21767-21782]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[21679-21696]:SwitchCase[21789-21806]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21705-21711]:BreakStatement[21815-21821]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[21766-21783]:SwitchCase[21876-21893]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[21792-21804]:ReturnStatement[21902-21914]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[21812-21833]:SwitchCase[21922-21943]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[21842-21900]:IfStatement[21952-22010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21866-21900]:Block[21976-22010]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[21878-21890]:ReturnStatement[21988-22000]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[21909-22129]:ForStatement[22019-22239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21970-22129]:Block[22080-22239]"
  }, {
    "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
    "info" : "IfStatement[21982-22119]:IfStatement[22092-22229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22081-22119]:Block[22191-22229]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22095-22107]:ReturnStatement[22205-22217]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22138-22151]:ReturnStatement[22248-22261]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[22159-22179]:SwitchCase[22269-22289]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[22186-22204]:SwitchCase[22296-22314]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[22213-22271]:IfStatement[22323-22381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22237-22271]:Block[22347-22381]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22249-22261]:ReturnStatement[22359-22371]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22280-22286]:BreakStatement[22390-22396]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[22294-22309]:SwitchCase[22404-22419]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[22359-22375]:SwitchCase[22469-22485]"
  }, {
    "left" : "if (n.getFirstChild() != null)",
    "right" : "if (n.getFirstChild() != null)",
    "info" : "IfStatement[22408-22473]:IfStatement[22518-22583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22439-22473]:Block[22549-22583]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22451-22463]:ReturnStatement[22561-22573]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22482-22488]:BreakStatement[22592-22598]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[22496-22516]:SwitchCase[22606-22626]"
  }, {
    "left" : "return checkForNewObjects || !isFunctionExpression(n);",
    "right" : "return checkForNewObjects || !isFunctionExpression(n);",
    "info" : "ReturnStatement[22749-22803]:ReturnStatement[22859-22913]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[22811-22826]:SwitchCase[22921-22936]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[22835-22893]:IfStatement[22945-23003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22859-22893]:Block[22969-23003]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22871-22883]:ReturnStatement[22981-22993]"
  }, {
    "left" : "if (!constructorCallHasSideEffects(n))",
    "right" : "if (!constructorCallHasSideEffects(n))",
    "info" : "IfStatement[22903-23064]:IfStatement[23013-23174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22942-23064]:Block[23052-23174]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23048-23054]:BreakStatement[23158-23164]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23073-23085]:ReturnStatement[23183-23195]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[23093-23109]:SwitchCase[23203-23219]"
  }, {
    "left" : "if (!functionCallHasSideEffects(n, compiler))",
    "right" : "if (!functionCallHasSideEffects(n, compiler))",
    "info" : "IfStatement[23223-23388]:IfStatement[23333-23498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23269-23388]:Block[23379-23498]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23372-23378]:BreakStatement[23482-23488]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23397-23409]:ReturnStatement[23507-23519]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[23417-23425]:SwitchCase[23527-23535]"
  }, {
    "left" : "if (isSimpleOperatorType(n.getType()))",
    "right" : "if (isSimpleOperatorType(n.getType()))",
    "info" : "IfStatement[23434-23501]:IfStatement[23544-23611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23473-23501]:Block[23583-23611]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23485-23491]:BreakStatement[23595-23601]"
  }, {
    "left" : "if (isAssignmentOp(n))",
    "right" : "if (isAssignmentOp(n))",
    "info" : "IfStatement[23511-25336]:IfStatement[23621-25446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23534-25336]:Block[23644-25446]"
  }, {
    "left" : "Node assignTarget = n.getFirstChild();",
    "right" : "Node assignTarget = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[23546-23584]:VariableDeclarationStatement[23656-23694]"
  }, {
    "left" : "if (isName(assignTarget))",
    "right" : "if (isName(assignTarget))",
    "info" : "IfStatement[23595-23659]:IfStatement[23705-23769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23621-23659]:Block[23731-23769]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23635-23647]:ReturnStatement[23745-23757]"
  }, {
    "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
    "info" : "IfStatement[23892-24139]:IfStatement[24002-24249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24101-24139]:Block[24211-24249]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24115-24127]:ReturnStatement[24225-24237]"
  }, {
    "left" : "if (isGet(assignTarget))",
    "right" : "if (isGet(assignTarget))",
    "info" : "IfStatement[24151-25326]:IfStatement[24261-25436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24176-25054]:Block[24286-25164]"
  }, {
    "left" : "Node current = assignTarget.getFirstChild();",
    "right" : "Node current = assignTarget.getFirstChild();",
    "info" : "VariableDeclarationStatement[24476-24520]:VariableDeclarationStatement[24586-24630]"
  }, {
    "left" : "if (evaluatesToLocalValue(current))",
    "right" : "if (evaluatesToLocalValue(current))",
    "info" : "IfStatement[24533-24612]:IfStatement[24643-24722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24569-24612]:Block[24679-24722]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[24585-24598]:ReturnStatement[24695-24708]"
  }, {
    "left" : "while (isGet(current))",
    "right" : "while (isGet(current))",
    "info" : "WhileStatement[24903-24990]:WhileStatement[25013-25100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24926-24990]:Block[25036-25100]"
  }, {
    "left" : "current = current.getFirstChild();",
    "right" : "current = current.getFirstChild();",
    "info" : "ExpressionStatement[24942-24976]:ExpressionStatement[25052-25086]"
  }, {
    "left" : "return !isLiteralValue(current, true);",
    "right" : "return !isLiteralValue(current, true);",
    "info" : "ReturnStatement[25004-25042]:ReturnStatement[25114-25152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25060-25326]:Block[25170-25436]"
  }, {
    "left" : "return !isLiteralValue(assignTarget, true);",
    "right" : "return !isLiteralValue(assignTarget, true);",
    "info" : "ReturnStatement[25271-25314]:ReturnStatement[25381-25424]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25346-25358]:ReturnStatement[25456-25468]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[25370-25539]:ForStatement[25480-25649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25431-25539]:Block[25541-25649]"
  }, {
    "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
    "info" : "IfStatement[25439-25533]:IfStatement[25549-25643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25503-25533]:Block[25613-25643]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25513-25525]:ReturnStatement[25623-25635]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25545-25558]:ReturnStatement[25655-25668]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25680-25686]:Modifier[25790-25796]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25687-25694]:PrimitiveType[25797-25804]"
  }, {
    "left" : "constructorCallHasSideEffects",
    "right" : "constructorCallHasSideEffects",
    "info" : "SimpleName[25695-25724]:SimpleName[25805-25834]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[25725-25738]:SingleVariableDeclaration[25835-25848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25740-25803]:Block[25850-25913]"
  }, {
    "left" : "return constructorCallHasSideEffects(callNode, null);",
    "right" : "return constructorCallHasSideEffects(callNode, null);",
    "info" : "ReturnStatement[25746-25799]:ReturnStatement[25856-25909]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25807-25813]:Modifier[25917-25923]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25814-25821]:PrimitiveType[25924-25931]"
  }, {
    "left" : "constructorCallHasSideEffects",
    "right" : "constructorCallHasSideEffects",
    "info" : "SimpleName[25822-25851]:SimpleName[25932-25961]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[25859-25872]:SingleVariableDeclaration[25969-25982]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[25874-25899]:SingleVariableDeclaration[25984-26009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25901-26345]:Block[26011-26455]"
  }, {
    "left" : "if (callNode.getType() != Token.NEW)",
    "right" : "if (callNode.getType() != Token.NEW)",
    "info" : "IfStatement[25907-26061]:IfStatement[26017-26171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25944-26061]:Block[26054-26171]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
    "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
    "info" : "ThrowStatement[25952-26055]:ThrowStatement[26062-26165]"
  }, {
    "left" : "if (callNode.isNoSideEffectsCall())",
    "right" : "if (callNode.isNoSideEffectsCall())",
    "info" : "IfStatement[26067-26130]:IfStatement[26177-26240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26103-26130]:Block[26213-26240]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26111-26124]:ReturnStatement[26221-26234]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[26136-26177]:VariableDeclarationStatement[26246-26287]"
  }, {
    "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
    "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
    "info" : "IfStatement[26182-26323]:IfStatement[26292-26433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26296-26323]:Block[26406-26433]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26304-26317]:ReturnStatement[26414-26427]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26329-26341]:ReturnStatement[26439-26451]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27189-27195]:Modifier[27299-27305]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27196-27203]:PrimitiveType[27306-27313]"
  }, {
    "left" : "functionCallHasSideEffects",
    "right" : "functionCallHasSideEffects",
    "info" : "SimpleName[27204-27230]:SimpleName[27314-27340]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[27231-27244]:SingleVariableDeclaration[27341-27354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27246-27306]:Block[27356-27416]"
  }, {
    "left" : "return functionCallHasSideEffects(callNode, null);",
    "right" : "return functionCallHasSideEffects(callNode, null);",
    "info" : "ReturnStatement[27252-27302]:ReturnStatement[27362-27412]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27555-27561]:Modifier[27665-27671]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27562-27569]:PrimitiveType[27672-27679]"
  }, {
    "left" : "functionCallHasSideEffects",
    "right" : "functionCallHasSideEffects",
    "info" : "SimpleName[27570-27596]:SimpleName[27680-27706]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[27604-27617]:SingleVariableDeclaration[27714-27727]"
  }, {
    "left" : "@Nullable AbstractCompiler compiler",
    "right" : "@Nullable AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[27619-27654]:SingleVariableDeclaration[27729-27764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27656-29475]:Block[27766-29585]"
  }, {
    "left" : "if (callNode.getType() != Token.CALL)",
    "right" : "if (callNode.getType() != Token.CALL)",
    "info" : "IfStatement[27662-27818]:IfStatement[27772-27928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27700-27818]:Block[27810-27928]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
    "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
    "info" : "ThrowStatement[27708-27812]:ThrowStatement[27818-27922]"
  }, {
    "left" : "if (callNode.isNoSideEffectsCall())",
    "right" : "if (callNode.isNoSideEffectsCall())",
    "info" : "IfStatement[27824-27887]:IfStatement[27934-27997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27860-27887]:Block[27970-27997]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27868-27881]:ReturnStatement[27978-27991]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[27893-27934]:VariableDeclarationStatement[28003-28044]"
  }, {
    "left" : "if (nameNode.getType() == Token.NAME)",
    "right" : "if (nameNode.getType() == Token.NAME)",
    "info" : "IfStatement[27988-29453]:IfStatement[28098-29563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28026-28171]:Block[28136-28281]"
  }, {
    "left" : "String name = nameNode.getString();",
    "right" : "String name = nameNode.getString();",
    "info" : "VariableDeclarationStatement[28034-28069]:VariableDeclarationStatement[28144-28179]"
  }, {
    "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
    "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
    "info" : "IfStatement[28076-28165]:IfStatement[28186-28275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28134-28165]:Block[28244-28275]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28144-28157]:ReturnStatement[28254-28267]"
  }, {
    "left" : "if (nameNode.getType() == Token.GETPROP)",
    "right" : "if (nameNode.getType() == Token.GETPROP)",
    "info" : "IfStatement[28177-29453]:IfStatement[28287-29563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28218-29453]:Block[28328-29563]"
  }, {
    "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
    "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
    "info" : "IfStatement[28226-28396]:IfStatement[28336-28506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28365-28396]:Block[28475-28506]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28375-28388]:ReturnStatement[28485-28498]"
  }, {
    "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
    "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
    "info" : "IfStatement[28404-28535]:IfStatement[28514-28645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28504-28535]:Block[28614-28645]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28514-28527]:ReturnStatement[28624-28637]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
    "right" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
    "info" : "IfStatement[28608-28818]:IfStatement[28718-28928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28662-28818]:Block[28772-28928]"
  }, {
    "left" : "String namespaceName = nameNode.getFirstChild().getString();",
    "right" : "String namespaceName = nameNode.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[28672-28732]:VariableDeclarationStatement[28782-28842]"
  }, {
    "left" : "if (namespaceName.equals(\"Math\"))",
    "right" : "if (namespaceName.equals(\"Math\"))",
    "info" : "IfStatement[28741-28810]:IfStatement[28851-28920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28775-28810]:Block[28885-28920]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28787-28800]:ReturnStatement[28897-28910]"
  }, {
    "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
    "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
    "info" : "IfStatement[28826-29447]:IfStatement[28936-29557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28889-29447]:Block[28999-29557]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
    "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
    "info" : "IfStatement[28899-29439]:IfStatement[29009-29549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29031-29066]:Block[29141-29176]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29043-29056]:ReturnStatement[29153-29166]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
    "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
    "info" : "IfStatement[29072-29439]:IfStatement[29182-29549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29228-29439]:Block[29338-29549]"
  }, {
    "left" : "Node param = nameNode.getNext();",
    "right" : "Node param = nameNode.getNext();",
    "info" : "VariableDeclarationStatement[29240-29272]:VariableDeclarationStatement[29350-29382]"
  }, {
    "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
    "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
    "info" : "IfStatement[29283-29429]:IfStatement[29393-29539]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29416-29429]:ReturnStatement[29526-29539]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[29459-29471]:ReturnStatement[29569-29581]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29541-29547]:Modifier[29651-29657]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29548-29555]:PrimitiveType[29658-29665]"
  }, {
    "left" : "callHasLocalResult",
    "right" : "callHasLocalResult",
    "info" : "SimpleName[29556-29574]:SimpleName[29666-29684]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29575-29581]:SingleVariableDeclaration[29685-29691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29583-29712]:Block[29693-29822]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
    "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
    "info" : "ExpressionStatement[29589-29641]:ExpressionStatement[29699-29751]"
  }, {
    "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
    "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
    "info" : "ReturnStatement[29646-29708]:ReturnStatement[29756-29818]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29777-29783]:Modifier[29887-29893]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29784-29791]:PrimitiveType[29894-29901]"
  }, {
    "left" : "newHasLocalResult",
    "right" : "newHasLocalResult",
    "info" : "SimpleName[29792-29809]:SimpleName[29902-29919]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29810-29816]:SingleVariableDeclaration[29920-29926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29818-29918]:Block[29928-30028]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.NEW);",
    "right" : "Preconditions.checkState(n.getType() == Token.NEW);",
    "info" : "ExpressionStatement[29824-29875]:ExpressionStatement[29934-29985]"
  }, {
    "left" : "return n.isOnlyModifiesThisCall();",
    "right" : "return n.isOnlyModifiesThisCall();",
    "info" : "ReturnStatement[29880-29914]:ReturnStatement[29990-30024]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30191-30197]:Modifier[30301-30307]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30198-30205]:PrimitiveType[30308-30315]"
  }, {
    "left" : "nodeTypeMayHaveSideEffects",
    "right" : "nodeTypeMayHaveSideEffects",
    "info" : "SimpleName[30206-30232]:SimpleName[30316-30342]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30233-30239]:SingleVariableDeclaration[30343-30349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30241-30294]:Block[30351-30404]"
  }, {
    "left" : "return nodeTypeMayHaveSideEffects(n, null);",
    "right" : "return nodeTypeMayHaveSideEffects(n, null);",
    "info" : "ReturnStatement[30247-30290]:ReturnStatement[30357-30400]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30298-30304]:Modifier[30408-30414]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30305-30312]:PrimitiveType[30415-30422]"
  }, {
    "left" : "nodeTypeMayHaveSideEffects",
    "right" : "nodeTypeMayHaveSideEffects",
    "info" : "SimpleName[30313-30339]:SimpleName[30423-30449]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30340-30346]:SingleVariableDeclaration[30450-30456]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[30348-30373]:SingleVariableDeclaration[30458-30483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30375-30886]:Block[30485-30996]"
  }, {
    "left" : "if (isAssignmentOp(n))",
    "right" : "if (isAssignmentOp(n))",
    "info" : "IfStatement[30381-30430]:IfStatement[30491-30540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30404-30430]:Block[30514-30540]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30412-30424]:ReturnStatement[30522-30534]"
  }, {
    "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
    "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[30436-30882]:SwitchStatement[30546-30992]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[30464-30483]:SwitchCase[30574-30593]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[30490-30505]:SwitchCase[30600-30615]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[30512-30527]:SwitchCase[30622-30637]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[30534-30551]:SwitchCase[30644-30661]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30560-30572]:ReturnStatement[30670-30682]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[30579-30595]:SwitchCase[30689-30705]"
  }, {
    "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
    "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
    "info" : "ReturnStatement[30604-30660]:ReturnStatement[30714-30770]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[30667-30682]:SwitchCase[30777-30792]"
  }, {
    "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
    "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
    "info" : "ReturnStatement[30691-30750]:ReturnStatement[30801-30860]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[30757-30773]:SwitchCase[30867-30883]"
  }, {
    "left" : "return n.hasChildren();",
    "right" : "return n.hasChildren();",
    "info" : "ReturnStatement[30816-30839]:ReturnStatement[30926-30949]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[30846-30854]:SwitchCase[30956-30964]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30863-30876]:ReturnStatement[30973-30986]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30990-30996]:Modifier[31100-31106]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30997-31004]:PrimitiveType[31107-31114]"
  }, {
    "left" : "canBeSideEffected",
    "right" : "canBeSideEffected",
    "info" : "SimpleName[31005-31022]:SimpleName[31115-31132]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31023-31029]:SingleVariableDeclaration[31133-31139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31031-31130]:Block[31141-31240]"
  }, {
    "left" : "Set<String> emptySet = Collections.emptySet();",
    "right" : "Set<String> emptySet = Collections.emptySet();",
    "info" : "VariableDeclarationStatement[31037-31083]:VariableDeclarationStatement[31147-31193]"
  }, {
    "left" : "return canBeSideEffected(n, emptySet);",
    "right" : "return canBeSideEffected(n, emptySet);",
    "info" : "ReturnStatement[31088-31126]:ReturnStatement[31198-31236]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31381-31387]:Modifier[31491-31497]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[31388-31395]:PrimitiveType[31498-31505]"
  }, {
    "left" : "canBeSideEffected",
    "right" : "canBeSideEffected",
    "info" : "SimpleName[31396-31413]:SimpleName[31506-31523]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31414-31420]:SingleVariableDeclaration[31524-31530]"
  }, {
    "left" : "Set<String> knownConstants",
    "right" : "Set<String> knownConstants",
    "info" : "SingleVariableDeclaration[31422-31448]:SingleVariableDeclaration[31532-31558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31450-32469]:Block[31560-32579]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
    "info" : "SwitchStatement[31456-32293]:SwitchStatement[31566-32403]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[31485-31501]:SwitchCase[31595-31611]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[31508-31523]:SwitchCase[31618-31633]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[31723-31735]:ReturnStatement[31833-31845]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[31742-31758]:SwitchCase[31852-31868]"
  }, {
    "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
    "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
    "info" : "ReturnStatement[31827-31908]:ReturnStatement[31937-32018]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[31982-32001]:SwitchCase[32092-32111]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[32008-32027]:SwitchCase[32118-32137]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[32036-32048]:ReturnStatement[32146-32158]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[32056-32076]:SwitchCase[32166-32186]"
  }, {
    "left" : "Preconditions.checkState(isFunctionExpression(n));",
    "right" : "Preconditions.checkState(isFunctionExpression(n));",
    "info" : "ExpressionStatement[32215-32265]:ExpressionStatement[32325-32375]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[32274-32287]:ReturnStatement[32384-32397]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[32299-32446]:ForStatement[32409-32556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32360-32446]:Block[32470-32556]"
  }, {
    "left" : "if (canBeSideEffected(c, knownConstants))",
    "right" : "if (canBeSideEffected(c, knownConstants))",
    "info" : "IfStatement[32368-32440]:IfStatement[32478-32550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32410-32440]:Block[32520-32550]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[32420-32432]:ReturnStatement[32530-32542]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[32452-32465]:ReturnStatement[32562-32575]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32906-32912]:Modifier[33016-33022]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[32913-32916]:PrimitiveType[33023-33026]"
  }, {
    "left" : "precedence",
    "right" : "precedence",
    "info" : "SimpleName[32917-32927]:SimpleName[33027-33037]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[32928-32936]:SingleVariableDeclaration[33038-33046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32938-34936]:Block[33048-35046]"
  }, {
    "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
    "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
    "info" : "SwitchStatement[32944-34932]:SwitchStatement[33054-35042]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[32966-32983]:SwitchCase[33076-33093]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[32985-32994]:ReturnStatement[33095-33104]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[33001-33025]:SwitchCase[33111-33135]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[33032-33057]:SwitchCase[33142-33167]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[33064-33089]:SwitchCase[33174-33199]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[33096-33118]:SwitchCase[33206-33228]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[33125-33147]:SwitchCase[33235-33257]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[33154-33177]:SwitchCase[33264-33287]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[33184-33206]:SwitchCase[33294-33316]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[33213-33235]:SwitchCase[33323-33345]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[33242-33264]:SwitchCase[33352-33374]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[33271-33293]:SwitchCase[33381-33403]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[33300-33322]:SwitchCase[33410-33432]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[33329-33347]:SwitchCase[33439-33457]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[33348-33357]:ReturnStatement[33458-33467]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[33364-33380]:SwitchCase[33474-33490]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[33383-33392]:ReturnStatement[33493-33502]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[33415-33429]:SwitchCase[33525-33539]"
  }, {
    "left" : "return 3;",
    "right" : "return 3;",
    "info" : "ReturnStatement[33434-33443]:ReturnStatement[33544-33553]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[33450-33465]:SwitchCase[33560-33575]"
  }, {
    "left" : "return 4;",
    "right" : "return 4;",
    "info" : "ReturnStatement[33469-33478]:ReturnStatement[33579-33588]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[33485-33502]:SwitchCase[33595-33612]"
  }, {
    "left" : "return 5;",
    "right" : "return 5;",
    "info" : "ReturnStatement[33504-33513]:ReturnStatement[33614-33623]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[33520-33538]:SwitchCase[33630-33648]"
  }, {
    "left" : "return 6;",
    "right" : "return 6;",
    "info" : "ReturnStatement[33539-33548]:ReturnStatement[33649-33658]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[33555-33573]:SwitchCase[33665-33683]"
  }, {
    "left" : "return 7;",
    "right" : "return 7;",
    "info" : "ReturnStatement[33574-33583]:ReturnStatement[33684-33693]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[33590-33604]:SwitchCase[33700-33714]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[33611-33625]:SwitchCase[33721-33735]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[33632-33648]:SwitchCase[33742-33758]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[33655-33671]:SwitchCase[33765-33781]"
  }, {
    "left" : "return 8;",
    "right" : "return 8;",
    "info" : "ReturnStatement[33674-33683]:ReturnStatement[33784-33793]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[33690-33704]:SwitchCase[33800-33814]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[33711-33725]:SwitchCase[33821-33835]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[33732-33746]:SwitchCase[33842-33856]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[33753-33767]:SwitchCase[33863-33877]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[33774-33796]:SwitchCase[33884-33906]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[33803-33817]:SwitchCase[33913-33927]"
  }, {
    "left" : "return 9;",
    "right" : "return 9;",
    "info" : "ReturnStatement[33822-33831]:ReturnStatement[33932-33941]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[33838-33853]:SwitchCase[33948-33963]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[33860-33875]:SwitchCase[33970-33985]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[33882-33898]:SwitchCase[33992-34008]"
  }, {
    "left" : "return 10;",
    "right" : "return 10;",
    "info" : "ReturnStatement[33901-33911]:ReturnStatement[34011-34021]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[33918-33933]:SwitchCase[34028-34043]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[33940-33955]:SwitchCase[34050-34065]"
  }, {
    "left" : "return 11;",
    "right" : "return 11;",
    "info" : "ReturnStatement[33959-33969]:ReturnStatement[34069-34079]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[33976-33991]:SwitchCase[34086-34101]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[33998-34013]:SwitchCase[34108-34123]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[34020-34035]:SwitchCase[34130-34145]"
  }, {
    "left" : "return 12;",
    "right" : "return 12;",
    "info" : "ReturnStatement[34039-34049]:ReturnStatement[34149-34159]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[34056-34071]:SwitchCase[34166-34181]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[34078-34093]:SwitchCase[34188-34203]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[34100-34115]:SwitchCase[34210-34225]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[34122-34141]:SwitchCase[34232-34251]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[34148-34166]:SwitchCase[34258-34276]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[34173-34189]:SwitchCase[34283-34299]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[34196-34211]:SwitchCase[34306-34321]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[34218-34236]:SwitchCase[34328-34346]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[34243-34258]:SwitchCase[34353-34368]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[34265-34280]:SwitchCase[34375-34390]"
  }, {
    "left" : "return 13;",
    "right" : "return 13;",
    "info" : "ReturnStatement[34284-34294]:ReturnStatement[34394-34404]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[34302-34322]:SwitchCase[34412-34432]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[34329-34345]:SwitchCase[34439-34455]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[34352-34369]:SwitchCase[34462-34479]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[34376-34393]:SwitchCase[34486-34503]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[34400-34420]:SwitchCase[34510-34530]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[34427-34446]:SwitchCase[34537-34556]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[34453-34472]:SwitchCase[34563-34582]"
  }, {
    "left" : "case Token.GET_REF:",
    "right" : "case Token.GET_REF:",
    "info" : "SwitchCase[34479-34498]:SwitchCase[34589-34608]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[34505-34519]:SwitchCase[34615-34629]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[34526-34540]:SwitchCase[34636-34650]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[34547-34563]:SwitchCase[34657-34673]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[34570-34586]:SwitchCase[34680-34696]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[34593-34611]:SwitchCase[34703-34721]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[34618-34639]:SwitchCase[34728-34749]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[34646-34664]:SwitchCase[34756-34774]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[34671-34689]:SwitchCase[34781-34799]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[34696-34712]:SwitchCase[34806-34822]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[34719-34735]:SwitchCase[34829-34845]"
  }, {
    "left" : "return 15;",
    "right" : "return 15;",
    "info" : "ReturnStatement[34744-34754]:ReturnStatement[34854-34864]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34762-34770]:SwitchCase[34872-34880]"
  }, {
    "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
    "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
    "info" : "ThrowStatement[34771-34926]:ThrowStatement[34881-35036]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35052-35058]:Modifier[35162-35168]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35059-35066]:PrimitiveType[35169-35176]"
  }, {
    "left" : "valueCheck",
    "right" : "valueCheck",
    "info" : "SimpleName[35067-35077]:SimpleName[35177-35187]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35078-35084]:SingleVariableDeclaration[35188-35194]"
  }, {
    "left" : "Predicate<Node> p",
    "right" : "Predicate<Node> p",
    "info" : "SingleVariableDeclaration[35086-35103]:SingleVariableDeclaration[35196-35213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35105-35550]:Block[35215-35660]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
    "info" : "SwitchStatement[35111-35546]:SwitchStatement[35221-35656]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[35140-35158]:SwitchCase[35250-35268]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[35165-35182]:SwitchCase[35275-35292]"
  }, {
    "left" : "return valueCheck(n.getLastChild(), p);",
    "right" : "return valueCheck(n.getLastChild(), p);",
    "info" : "ReturnStatement[35191-35230]:ReturnStatement[35301-35340]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[35237-35252]:SwitchCase[35347-35362]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[35259-35273]:SwitchCase[35369-35383]"
  }, {
    "left" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
    "right" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
    "info" : "ReturnStatement[35282-35369]:ReturnStatement[35392-35479]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[35376-35392]:SwitchCase[35486-35502]"
  }, {
    "left" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
    "right" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
    "info" : "ReturnStatement[35401-35498]:ReturnStatement[35511-35608]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[35505-35513]:SwitchCase[35615-35623]"
  }, {
    "left" : "return p.apply(n);",
    "right" : "return p.apply(n);",
    "info" : "ReturnStatement[35522-35540]:ReturnStatement[35632-35650]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35554-35560]:Modifier[35664-35670]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[35561-35566]:TYPE_DECLARATION_KIND[35671-35676]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35624-35630]:Modifier[35734-35740]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35631-35638]:PrimitiveType[35741-35748]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[35639-35644]:SimpleName[35749-35754]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35645-35651]:SingleVariableDeclaration[35755-35761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35653-35699]:Block[35763-35809]"
  }, {
    "left" : "return isNumericResultHelper(n);",
    "right" : "return isNumericResultHelper(n);",
    "info" : "ReturnStatement[35661-35693]:ReturnStatement[35771-35803]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35894-35900]:Modifier[36004-36010]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35901-35908]:PrimitiveType[36011-36018]"
  }, {
    "left" : "isNumericResult",
    "right" : "isNumericResult",
    "info" : "SimpleName[35909-35924]:SimpleName[36019-36034]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35925-35931]:SingleVariableDeclaration[36035-36041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35933-35991]:Block[36043-36101]"
  }, {
    "left" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
    "right" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
    "info" : "ReturnStatement[35939-35987]:ReturnStatement[36049-36097]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35995-36001]:Modifier[36105-36111]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[36002-36009]:PrimitiveType[36112-36119]"
  }, {
    "left" : "isNumericResultHelper",
    "right" : "isNumericResultHelper",
    "info" : "SimpleName[36010-36031]:SimpleName[36120-36141]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36032-36038]:SingleVariableDeclaration[36142-36148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36040-36840]:Block[36150-36950]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[36046-36836]:SwitchStatement[36156-36946]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[36075-36090]:SwitchCase[36185-36200]"
  }, {
    "left" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
    "right" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
    "info" : "ReturnStatement[36099-36184]:ReturnStatement[36209-36294]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[36191-36209]:SwitchCase[36301-36319]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[36216-36233]:SwitchCase[36326-36343]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[36240-36258]:SwitchCase[36350-36368]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[36265-36283]:SwitchCase[36375-36393]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[36290-36305]:SwitchCase[36400-36415]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[36312-36327]:SwitchCase[36422-36437]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[36334-36350]:SwitchCase[36444-36460]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[36357-36372]:SwitchCase[36467-36482]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[36379-36394]:SwitchCase[36489-36504]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[36401-36416]:SwitchCase[36511-36526]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[36423-36438]:SwitchCase[36533-36548]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[36445-36460]:SwitchCase[36555-36570]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[36467-36482]:SwitchCase[36577-36592]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[36489-36504]:SwitchCase[36599-36614]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[36511-36526]:SwitchCase[36621-36636]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[36533-36551]:SwitchCase[36643-36661]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36560-36572]:ReturnStatement[36670-36682]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[36579-36595]:SwitchCase[36689-36705]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[36604-36632]:VariableDeclarationStatement[36714-36742]"
  }, {
    "left" : "if (name.equals(\"NaN\"))",
    "right" : "if (name.equals(\"NaN\"))",
    "info" : "IfStatement[36641-36699]:IfStatement[36751-36809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36665-36699]:Block[36775-36809]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36677-36689]:ReturnStatement[36787-36799]"
  }, {
    "left" : "if (name.equals(\"Infinity\"))",
    "right" : "if (name.equals(\"Infinity\"))",
    "info" : "IfStatement[36708-36771]:IfStatement[36818-36881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36737-36771]:Block[36847-36881]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36749-36761]:ReturnStatement[36859-36871]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36780-36793]:ReturnStatement[36890-36903]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[36800-36808]:SwitchCase[36910-36918]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36817-36830]:ReturnStatement[36927-36940]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36844-36850]:Modifier[36954-36960]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[36851-36856]:TYPE_DECLARATION_KIND[36961-36966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36913-36919]:Modifier[37023-37029]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[36920-36927]:PrimitiveType[37030-37037]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[36928-36933]:SimpleName[37038-37043]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36934-36940]:SingleVariableDeclaration[37044-37050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36942-36988]:Block[37052-37098]"
  }, {
    "left" : "return isBooleanResultHelper(n);",
    "right" : "return isBooleanResultHelper(n);",
    "info" : "ReturnStatement[36950-36982]:ReturnStatement[37060-37092]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37181-37187]:Modifier[37291-37297]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37188-37195]:PrimitiveType[37298-37305]"
  }, {
    "left" : "isBooleanResult",
    "right" : "isBooleanResult",
    "info" : "SimpleName[37196-37211]:SimpleName[37306-37321]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37212-37218]:SingleVariableDeclaration[37322-37328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37220-37277]:Block[37330-37387]"
  }, {
    "left" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
    "right" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
    "info" : "ReturnStatement[37226-37273]:ReturnStatement[37336-37383]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37281-37287]:Modifier[37391-37397]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37288-37295]:PrimitiveType[37398-37405]"
  }, {
    "left" : "isBooleanResultHelper",
    "right" : "isBooleanResultHelper",
    "info" : "SimpleName[37296-37317]:SimpleName[37406-37427]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37318-37324]:SingleVariableDeclaration[37428-37434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37326-37861]:Block[37436-37971]"
  }, {
    "left" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[37332-37857]:SwitchStatement[37442-37967]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[37381-37397]:SwitchCase[37491-37507]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[37404-37421]:SwitchCase[37514-37531]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[37449-37463]:SwitchCase[37559-37573]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[37470-37484]:SwitchCase[37580-37594]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[37491-37507]:SwitchCase[37601-37617]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[37514-37530]:SwitchCase[37624-37640]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[37537-37551]:SwitchCase[37647-37661]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[37558-37572]:SwitchCase[37668-37682]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[37579-37593]:SwitchCase[37689-37703]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[37600-37614]:SwitchCase[37710-37724]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[37639-37653]:SwitchCase[37749-37763]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[37660-37682]:SwitchCase[37770-37792]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[37708-37723]:SwitchCase[37818-37833]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[37774-37793]:SwitchCase[37884-37903]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[37802-37814]:ReturnStatement[37912-37924]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[37821-37829]:SwitchCase[37931-37939]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[37838-37851]:ReturnStatement[37948-37961]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37865-37871]:Modifier[37975-37981]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37872-37879]:PrimitiveType[37982-37989]"
  }, {
    "left" : "isUndefined",
    "right" : "isUndefined",
    "info" : "SimpleName[37880-37891]:SimpleName[37990-38001]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37892-37898]:SingleVariableDeclaration[38002-38008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37900-38073]:Block[38010-38183]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
    "right" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
    "info" : "SwitchStatement[37906-38051]:SwitchStatement[38016-38161]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[37935-37951]:SwitchCase[38045-38061]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[37960-37972]:ReturnStatement[38070-38082]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[37979-37995]:SwitchCase[38089-38105]"
  }, {
    "left" : "return n.getString().equals(\"undefined\");",
    "right" : "return n.getString().equals(\"undefined\");",
    "info" : "ReturnStatement[38004-38045]:ReturnStatement[38114-38155]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38056-38069]:ReturnStatement[38166-38179]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38077-38083]:Modifier[38187-38193]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38084-38091]:PrimitiveType[38194-38201]"
  }, {
    "left" : "isNull",
    "right" : "isNull",
    "info" : "SimpleName[38092-38098]:SimpleName[38202-38208]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38099-38105]:SingleVariableDeclaration[38209-38215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38107-38150]:Block[38217-38260]"
  }, {
    "left" : "return n.getType() == Token.NULL;",
    "right" : "return n.getType() == Token.NULL;",
    "info" : "ReturnStatement[38113-38146]:ReturnStatement[38223-38256]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38154-38160]:Modifier[38264-38270]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38161-38168]:PrimitiveType[38271-38278]"
  }, {
    "left" : "isNullOrUndefined",
    "right" : "isNullOrUndefined",
    "info" : "SimpleName[38169-38186]:SimpleName[38279-38296]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38187-38193]:SingleVariableDeclaration[38297-38303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38195-38240]:Block[38305-38350]"
  }, {
    "left" : "return isNull(n) || isUndefined(n);",
    "right" : "return isNull(n) || isUndefined(n);",
    "info" : "ReturnStatement[38201-38236]:ReturnStatement[38311-38346]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38244-38250]:Modifier[38354-38360]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[38251-38256]:TYPE_DECLARATION_KIND[38361-38366]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38317-38323]:Modifier[38427-38433]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38324-38331]:PrimitiveType[38434-38441]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[38332-38337]:SimpleName[38442-38447]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38338-38344]:SingleVariableDeclaration[38448-38454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38346-38388]:Block[38456-38498]"
  }, {
    "left" : "return mayBeStringHelper(n);",
    "right" : "return mayBeStringHelper(n);",
    "info" : "ReturnStatement[38354-38382]:ReturnStatement[38464-38492]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38573-38579]:Modifier[38683-38689]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38580-38587]:PrimitiveType[38690-38697]"
  }, {
    "left" : "mayBeString",
    "right" : "mayBeString",
    "info" : "SimpleName[38588-38599]:SimpleName[38698-38709]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38600-38606]:SingleVariableDeclaration[38710-38716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38608-38646]:Block[38718-38756]"
  }, {
    "left" : "return mayBeString(n, true);",
    "right" : "return mayBeString(n, true);",
    "info" : "ReturnStatement[38614-38642]:ReturnStatement[38724-38752]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38650-38656]:Modifier[38760-38766]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38657-38664]:PrimitiveType[38767-38774]"
  }, {
    "left" : "mayBeString",
    "right" : "mayBeString",
    "info" : "SimpleName[38665-38676]:SimpleName[38775-38786]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38677-38683]:SingleVariableDeclaration[38787-38793]"
  }, {
    "left" : "boolean recurse",
    "right" : "boolean recurse",
    "info" : "SingleVariableDeclaration[38685-38700]:SingleVariableDeclaration[38795-38810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38702-38833]:Block[38812-38943]"
  }, {
    "left" : "if (recurse)",
    "right" : "if (recurse)",
    "info" : "IfStatement[38708-38829]:IfStatement[38818-38939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38721-38781]:Block[38831-38891]"
  }, {
    "left" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
    "right" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
    "info" : "ReturnStatement[38729-38775]:ReturnStatement[38839-38885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38787-38829]:Block[38897-38939]"
  }, {
    "left" : "return mayBeStringHelper(n);",
    "right" : "return mayBeStringHelper(n);",
    "info" : "ReturnStatement[38795-38823]:ReturnStatement[38905-38933]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38837-38843]:Modifier[38947-38953]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38844-38851]:PrimitiveType[38954-38961]"
  }, {
    "left" : "mayBeStringHelper",
    "right" : "mayBeStringHelper",
    "info" : "SimpleName[38852-38869]:SimpleName[38962-38979]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38870-38876]:SingleVariableDeclaration[38980-38986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38878-38979]:Block[38988-39089]"
  }, {
    "left" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
    "right" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
    "info" : "ReturnStatement[38884-38975]:ReturnStatement[38994-39085]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39208-39214]:Modifier[39318-39324]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39215-39222]:PrimitiveType[39325-39332]"
  }, {
    "left" : "isAssociative",
    "right" : "isAssociative",
    "info" : "SimpleName[39223-39236]:SimpleName[39333-39346]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[39237-39245]:SingleVariableDeclaration[39347-39355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39247-39475]:Block[39357-39585]"
  }, {
    "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[39253-39471]:SwitchStatement[39363-39581]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[39275-39290]:SwitchCase[39385-39400]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[39297-39312]:SwitchCase[39407-39422]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[39319-39333]:SwitchCase[39429-39443]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[39340-39357]:SwitchCase[39450-39467]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[39364-39382]:SwitchCase[39474-39492]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[39389-39407]:SwitchCase[39499-39517]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39416-39428]:ReturnStatement[39526-39538]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39435-39443]:SwitchCase[39545-39553]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39452-39465]:ReturnStatement[39562-39575]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39783-39789]:Modifier[39893-39899]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39790-39797]:PrimitiveType[39900-39907]"
  }, {
    "left" : "isCommutative",
    "right" : "isCommutative",
    "info" : "SimpleName[39798-39811]:SimpleName[39908-39921]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[39812-39820]:SingleVariableDeclaration[39922-39930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39822-40007]:Block[39932-40117]"
  }, {
    "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[39828-40003]:SwitchStatement[39938-40113]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[39850-39865]:SwitchCase[39960-39975]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[39872-39889]:SwitchCase[39982-39999]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[39896-39914]:SwitchCase[40006-40024]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[39921-39939]:SwitchCase[40031-40049]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39948-39960]:ReturnStatement[40058-40070]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39967-39975]:SwitchCase[40077-40085]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39984-39997]:ReturnStatement[40094-40107]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40011-40017]:Modifier[40121-40127]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[40018-40025]:PrimitiveType[40128-40135]"
  }, {
    "left" : "isAssignmentOp",
    "right" : "isAssignmentOp",
    "info" : "SimpleName[40026-40040]:SimpleName[40136-40150]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40041-40047]:SingleVariableDeclaration[40151-40157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40049-40478]:Block[40159-40588]"
  }, {
    "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
    "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
    "info" : "SwitchStatement[40055-40456]:SwitchStatement[40165-40566]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[40083-40101]:SwitchCase[40193-40211]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[40108-40132]:SwitchCase[40218-40242]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[40139-40164]:SwitchCase[40249-40274]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[40171-40196]:SwitchCase[40281-40306]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[40203-40225]:SwitchCase[40313-40335]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[40232-40254]:SwitchCase[40342-40364]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[40261-40284]:SwitchCase[40371-40394]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[40291-40313]:SwitchCase[40401-40423]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[40320-40342]:SwitchCase[40430-40452]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[40349-40371]:SwitchCase[40459-40481]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[40378-40400]:SwitchCase[40488-40510]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[40407-40429]:SwitchCase[40517-40539]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[40438-40450]:ReturnStatement[40548-40560]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[40461-40474]:ReturnStatement[40571-40584]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40482-40488]:Modifier[40592-40598]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[40489-40492]:PrimitiveType[40599-40602]"
  }, {
    "left" : "getOpFromAssignmentOp",
    "right" : "getOpFromAssignmentOp",
    "info" : "SimpleName[40493-40514]:SimpleName[40603-40624]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40515-40521]:SingleVariableDeclaration[40625-40631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40523-41245]:Block[40633-41355]"
  }, {
    "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
    "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
    "info" : "SwitchStatement[40529-41179]:SwitchStatement[40639-41289]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[40557-40581]:SwitchCase[40667-40691]"
  }, {
    "left" : "return Token.BITOR;",
    "right" : "return Token.BITOR;",
    "info" : "ReturnStatement[40590-40609]:ReturnStatement[40700-40719]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[40616-40641]:SwitchCase[40726-40751]"
  }, {
    "left" : "return Token.BITXOR;",
    "right" : "return Token.BITXOR;",
    "info" : "ReturnStatement[40650-40670]:ReturnStatement[40760-40780]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[40677-40702]:SwitchCase[40787-40812]"
  }, {
    "left" : "return Token.BITAND;",
    "right" : "return Token.BITAND;",
    "info" : "ReturnStatement[40711-40731]:ReturnStatement[40821-40841]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[40738-40760]:SwitchCase[40848-40870]"
  }, {
    "left" : "return Token.LSH;",
    "right" : "return Token.LSH;",
    "info" : "ReturnStatement[40769-40786]:ReturnStatement[40879-40896]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[40793-40815]:SwitchCase[40903-40925]"
  }, {
    "left" : "return Token.RSH;",
    "right" : "return Token.RSH;",
    "info" : "ReturnStatement[40824-40841]:ReturnStatement[40934-40951]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[40848-40871]:SwitchCase[40958-40981]"
  }, {
    "left" : "return Token.URSH;",
    "right" : "return Token.URSH;",
    "info" : "ReturnStatement[40880-40898]:ReturnStatement[40990-41008]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[40905-40927]:SwitchCase[41015-41037]"
  }, {
    "left" : "return Token.ADD;",
    "right" : "return Token.ADD;",
    "info" : "ReturnStatement[40936-40953]:ReturnStatement[41046-41063]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[40960-40982]:SwitchCase[41070-41092]"
  }, {
    "left" : "return Token.SUB;",
    "right" : "return Token.SUB;",
    "info" : "ReturnStatement[40991-41008]:ReturnStatement[41101-41118]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[41015-41037]:SwitchCase[41125-41147]"
  }, {
    "left" : "return Token.MUL;",
    "right" : "return Token.MUL;",
    "info" : "ReturnStatement[41046-41063]:ReturnStatement[41156-41173]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[41070-41092]:SwitchCase[41180-41202]"
  }, {
    "left" : "return Token.DIV;",
    "right" : "return Token.DIV;",
    "info" : "ReturnStatement[41101-41118]:ReturnStatement[41211-41228]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[41125-41147]:SwitchCase[41235-41257]"
  }, {
    "left" : "return Token.MOD;",
    "right" : "return Token.MOD;",
    "info" : "ReturnStatement[41156-41173]:ReturnStatement[41266-41283]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
    "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
    "info" : "ThrowStatement[41184-41241]:ThrowStatement[41294-41351]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41249-41255]:Modifier[41359-41365]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41256-41263]:PrimitiveType[41366-41373]"
  }, {
    "left" : "isExpressionNode",
    "right" : "isExpressionNode",
    "info" : "SimpleName[41264-41280]:SimpleName[41374-41390]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41281-41287]:SingleVariableDeclaration[41391-41397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41289-41339]:Block[41399-41449]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT;",
    "right" : "return n.getType() == Token.EXPR_RESULT;",
    "info" : "ReturnStatement[41295-41335]:ReturnStatement[41405-41445]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41448-41454]:Modifier[41558-41564]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41455-41462]:PrimitiveType[41565-41572]"
  }, {
    "left" : "containsFunction",
    "right" : "containsFunction",
    "info" : "SimpleName[41463-41479]:SimpleName[41573-41589]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41480-41486]:SingleVariableDeclaration[41590-41596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41488-41537]:Block[41598-41647]"
  }, {
    "left" : "return containsType(n, Token.FUNCTION);",
    "right" : "return containsType(n, Token.FUNCTION);",
    "info" : "ReturnStatement[41494-41533]:ReturnStatement[41604-41643]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41630-41636]:Modifier[41740-41746]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41637-41644]:PrimitiveType[41747-41754]"
  }, {
    "left" : "referencesThis",
    "right" : "referencesThis",
    "info" : "SimpleName[41645-41659]:SimpleName[41755-41769]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41660-41666]:SingleVariableDeclaration[41770-41776]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41668-41737]:Block[41778-41847]"
  }, {
    "left" : "return containsType(n, Token.THIS, new MatchNotFunction());",
    "right" : "return containsType(n, Token.THIS, new MatchNotFunction());",
    "info" : "ReturnStatement[41674-41733]:ReturnStatement[41784-41843]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41793-41799]:Modifier[41903-41909]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41800-41807]:PrimitiveType[41910-41917]"
  }, {
    "left" : "isGet",
    "right" : "isGet",
    "info" : "SimpleName[41808-41813]:SimpleName[41918-41923]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41814-41820]:SingleVariableDeclaration[41924-41930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41822-41908]:Block[41932-42018]"
  }, {
    "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
    "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
    "info" : "ReturnStatement[41828-41904]:ReturnStatement[41938-42014]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41953-41959]:Modifier[42063-42069]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41960-41967]:PrimitiveType[42070-42077]"
  }, {
    "left" : "isGetProp",
    "right" : "isGetProp",
    "info" : "SimpleName[41968-41977]:SimpleName[42078-42087]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41978-41984]:SingleVariableDeclaration[42088-42094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41986-42032]:Block[42096-42142]"
  }, {
    "left" : "return n.getType() == Token.GETPROP;",
    "right" : "return n.getType() == Token.GETPROP;",
    "info" : "ReturnStatement[41992-42028]:ReturnStatement[42102-42138]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42074-42080]:Modifier[42184-42190]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42081-42088]:PrimitiveType[42191-42198]"
  }, {
    "left" : "isName",
    "right" : "isName",
    "info" : "SimpleName[42089-42095]:SimpleName[42199-42205]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42096-42102]:SingleVariableDeclaration[42206-42212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42104-42147]:Block[42214-42257]"
  }, {
    "left" : "return n.getType() == Token.NAME;",
    "right" : "return n.getType() == Token.NAME;",
    "info" : "ReturnStatement[42110-42143]:ReturnStatement[42220-42253]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42188-42194]:Modifier[42298-42304]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42195-42202]:PrimitiveType[42305-42312]"
  }, {
    "left" : "isNew",
    "right" : "isNew",
    "info" : "SimpleName[42203-42208]:SimpleName[42313-42318]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42209-42215]:SingleVariableDeclaration[42319-42325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42217-42259]:Block[42327-42369]"
  }, {
    "left" : "return n.getType() == Token.NEW;",
    "right" : "return n.getType() == Token.NEW;",
    "info" : "ReturnStatement[42223-42255]:ReturnStatement[42333-42365]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42300-42306]:Modifier[42410-42416]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42307-42314]:PrimitiveType[42417-42424]"
  }, {
    "left" : "isVar",
    "right" : "isVar",
    "info" : "SimpleName[42315-42320]:SimpleName[42425-42430]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42321-42327]:SingleVariableDeclaration[42431-42437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42329-42371]:Block[42439-42481]"
  }, {
    "left" : "return n.getType() == Token.VAR;",
    "right" : "return n.getType() == Token.VAR;",
    "info" : "ReturnStatement[42335-42367]:ReturnStatement[42445-42477]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42537-42543]:Modifier[42647-42653]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42544-42551]:PrimitiveType[42654-42661]"
  }, {
    "left" : "isVarDeclaration",
    "right" : "isVarDeclaration",
    "info" : "SimpleName[42552-42568]:SimpleName[42662-42678]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42569-42575]:SingleVariableDeclaration[42679-42685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42577-42784]:Block[42687-42894]"
  }, {
    "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
    "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
    "info" : "ReturnStatement[42707-42780]:ReturnStatement[42817-42890]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42927-42933]:Modifier[43037-43043]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[42934-42938]:SimpleType[43044-43048]"
  }, {
    "left" : "getAssignedValue",
    "right" : "getAssignedValue",
    "info" : "SimpleName[42939-42955]:SimpleName[43049-43065]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42956-42962]:SingleVariableDeclaration[43066-43072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42964-43230]:Block[43074-43340]"
  }, {
    "left" : "Preconditions.checkState(isName(n));",
    "right" : "Preconditions.checkState(isName(n));",
    "info" : "ExpressionStatement[42970-43006]:ExpressionStatement[43080-43116]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[43011-43039]:VariableDeclarationStatement[43121-43149]"
  }, {
    "left" : "if (isVar(parent))",
    "right" : "if (isVar(parent))",
    "info" : "IfStatement[43044-43226]:IfStatement[43154-43336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43063-43102]:Block[43173-43212]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[43071-43096]:ReturnStatement[43181-43206]"
  }, {
    "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
    "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
    "info" : "IfStatement[43108-43226]:IfStatement[43218-43336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43161-43194]:Block[43271-43304]"
  }, {
    "left" : "return n.getNext();",
    "right" : "return n.getNext();",
    "info" : "ReturnStatement[43169-43188]:ReturnStatement[43279-43298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43200-43226]:Block[43310-43336]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[43208-43220]:ReturnStatement[43318-43330]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43274-43280]:Modifier[43384-43390]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43281-43288]:PrimitiveType[43391-43398]"
  }, {
    "left" : "isString",
    "right" : "isString",
    "info" : "SimpleName[43289-43297]:SimpleName[43399-43407]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43298-43304]:SingleVariableDeclaration[43408-43414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43306-43351]:Block[43416-43461]"
  }, {
    "left" : "return n.getType() == Token.STRING;",
    "right" : "return n.getType() == Token.STRING;",
    "info" : "ReturnStatement[43312-43347]:ReturnStatement[43422-43457]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43542-43548]:Modifier[43652-43658]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43549-43556]:PrimitiveType[43659-43666]"
  }, {
    "left" : "isExprAssign",
    "right" : "isExprAssign",
    "info" : "SimpleName[43557-43569]:SimpleName[43667-43679]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43570-43576]:SingleVariableDeclaration[43680-43686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43578-43683]:Block[43688-43793]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
    "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
    "info" : "ReturnStatement[43584-43679]:ReturnStatement[43694-43789]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43728-43734]:Modifier[43838-43844]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43735-43742]:PrimitiveType[43845-43852]"
  }, {
    "left" : "isAssign",
    "right" : "isAssign",
    "info" : "SimpleName[43743-43751]:SimpleName[43853-43861]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43752-43758]:SingleVariableDeclaration[43862-43868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43760-43805]:Block[43870-43915]"
  }, {
    "left" : "return n.getType() == Token.ASSIGN;",
    "right" : "return n.getType() == Token.ASSIGN;",
    "info" : "ReturnStatement[43766-43801]:ReturnStatement[43876-43911]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43987-43993]:Modifier[44097-44103]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43994-44001]:PrimitiveType[44104-44111]"
  }, {
    "left" : "isExprCall",
    "right" : "isExprCall",
    "info" : "SimpleName[44002-44012]:SimpleName[44112-44122]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44013-44019]:SingleVariableDeclaration[44123-44129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44021-44124]:Block[44131-44234]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
    "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
    "info" : "ReturnStatement[44027-44120]:ReturnStatement[44137-44230]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44196-44202]:Modifier[44306-44312]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44203-44210]:PrimitiveType[44313-44320]"
  }, {
    "left" : "isForIn",
    "right" : "isForIn",
    "info" : "SimpleName[44211-44218]:SimpleName[44321-44328]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44219-44225]:SingleVariableDeclaration[44329-44335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44227-44303]:Block[44337-44413]"
  }, {
    "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
    "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
    "info" : "ReturnStatement[44233-44299]:ReturnStatement[44343-44409]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44387-44393]:Modifier[44497-44503]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44394-44401]:PrimitiveType[44504-44511]"
  }, {
    "left" : "isLoopStructure",
    "right" : "isLoopStructure",
    "info" : "SimpleName[44402-44417]:SimpleName[44512-44527]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44418-44424]:SingleVariableDeclaration[44528-44534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44426-44589]:Block[44536-44699]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[44432-44585]:SwitchStatement[44542-44695]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[44461-44476]:SwitchCase[44571-44586]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[44483-44497]:SwitchCase[44593-44607]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[44504-44521]:SwitchCase[44614-44631]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[44530-44542]:ReturnStatement[44640-44652]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44549-44557]:SwitchCase[44659-44667]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44566-44579]:ReturnStatement[44676-44689]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44751-44757]:Modifier[44861-44867]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[44758-44762]:SimpleType[44868-44872]"
  }, {
    "left" : "getLoopCodeBlock",
    "right" : "getLoopCodeBlock",
    "info" : "SimpleName[44763-44779]:SimpleName[44873-44889]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44780-44786]:SingleVariableDeclaration[44890-44896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44788-44996]:Block[44898-45106]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
    "info" : "SwitchStatement[44794-44992]:SwitchStatement[44904-45102]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[44823-44838]:SwitchCase[44933-44948]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[44845-44862]:SwitchCase[44955-44972]"
  }, {
    "left" : "return n.getLastChild();",
    "right" : "return n.getLastChild();",
    "info" : "ReturnStatement[44871-44895]:ReturnStatement[44981-45005]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[44902-44916]:SwitchCase[45012-45026]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[44925-44950]:ReturnStatement[45035-45060]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44957-44965]:SwitchCase[45067-45075]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[44974-44986]:ReturnStatement[45084-45096]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45109-45115]:Modifier[45219-45225]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45116-45123]:PrimitiveType[45226-45233]"
  }, {
    "left" : "isWithinLoop",
    "right" : "isWithinLoop",
    "info" : "SimpleName[45124-45136]:SimpleName[45234-45246]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45137-45143]:SingleVariableDeclaration[45247-45253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45145-45357]:Block[45255-45467]"
  }, {
    "left" : "for (Node parent : n.getAncestors())",
    "right" : "for (Node parent : n.getAncestors())",
    "info" : "EnhancedForStatement[45151-45335]:EnhancedForStatement[45261-45445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45188-45335]:Block[45298-45445]"
  }, {
    "left" : "if (NodeUtil.isLoopStructure(parent))",
    "right" : "if (NodeUtil.isLoopStructure(parent))",
    "info" : "IfStatement[45196-45264]:IfStatement[45306-45374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45234-45264]:Block[45344-45374]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45244-45256]:ReturnStatement[45354-45366]"
  }, {
    "left" : "if (NodeUtil.isFunction(parent))",
    "right" : "if (NodeUtil.isFunction(parent))",
    "info" : "IfStatement[45272-45329]:IfStatement[45382-45439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45305-45329]:Block[45415-45439]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45315-45321]:BreakStatement[45425-45431]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45340-45353]:ReturnStatement[45450-45463]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45451-45457]:Modifier[45561-45567]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45458-45465]:PrimitiveType[45568-45575]"
  }, {
    "left" : "isControlStructure",
    "right" : "isControlStructure",
    "info" : "SimpleName[45466-45484]:SimpleName[45576-45594]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45485-45491]:SingleVariableDeclaration[45595-45601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45493-45844]:Block[45603-45954]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[45499-45840]:SwitchStatement[45609-45950]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[45528-45543]:SwitchCase[45638-45653]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[45550-45564]:SwitchCase[45660-45674]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[45571-45588]:SwitchCase[45681-45698]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[45595-45611]:SwitchCase[45705-45721]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[45618-45632]:SwitchCase[45728-45742]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[45639-45656]:SwitchCase[45749-45766]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[45663-45678]:SwitchCase[45773-45788]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[45685-45702]:SwitchCase[45795-45812]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[45709-45727]:SwitchCase[45819-45837]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[45734-45750]:SwitchCase[45844-45860]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[45757-45776]:SwitchCase[45867-45886]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45785-45797]:ReturnStatement[45895-45907]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[45804-45812]:SwitchCase[45914-45922]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45821-45834]:ReturnStatement[45931-45944]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45955-45961]:Modifier[46065-46071]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45962-45969]:PrimitiveType[46072-46079]"
  }, {
    "left" : "isControlStructureCodeBlock",
    "right" : "isControlStructureCodeBlock",
    "info" : "SimpleName[45970-45997]:SimpleName[46080-46107]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[45998-46009]:SingleVariableDeclaration[46108-46119]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46011-46017]:SingleVariableDeclaration[46121-46127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46019-46729]:Block[46129-46839]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
    "info" : "SwitchStatement[46025-46725]:SwitchStatement[46135-46835]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[46059-46074]:SwitchCase[46169-46184]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[46081-46098]:SwitchCase[46191-46208]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[46105-46122]:SwitchCase[46215-46232]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[46129-46145]:SwitchCase[46239-46255]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[46154-46188]:ReturnStatement[46264-46298]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[46195-46209]:SwitchCase[46305-46319]"
  }, {
    "left" : "return parent.getFirstChild() == n;",
    "right" : "return parent.getFirstChild() == n;",
    "info" : "ReturnStatement[46218-46253]:ReturnStatement[46328-46363]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[46260-46274]:SwitchCase[46370-46384]"
  }, {
    "left" : "return parent.getFirstChild() != n;",
    "right" : "return parent.getFirstChild() != n;",
    "info" : "ReturnStatement[46283-46318]:ReturnStatement[46393-46428]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[46325-46340]:SwitchCase[46435-46450]"
  }, {
    "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
    "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
    "info" : "ReturnStatement[46349-46414]:ReturnStatement[46459-46524]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[46421-46438]:SwitchCase[46531-46548]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[46447-46481]:ReturnStatement[46557-46591]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[46488-46506]:SwitchCase[46598-46616]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[46513-46529]:SwitchCase[46623-46639]"
  }, {
    "left" : "return parent.getFirstChild() != n;",
    "right" : "return parent.getFirstChild() != n;",
    "info" : "ReturnStatement[46538-46573]:ReturnStatement[46648-46683]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[46580-46599]:SwitchCase[46690-46709]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[46608-46620]:ReturnStatement[46718-46730]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[46627-46635]:SwitchCase[46737-46745]"
  }, {
    "left" : "Preconditions.checkState(isControlStructure(parent));",
    "right" : "Preconditions.checkState(isControlStructure(parent));",
    "info" : "ExpressionStatement[46644-46697]:ExpressionStatement[46754-46807]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46706-46719]:ReturnStatement[46816-46829]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46944-46950]:Modifier[47054-47060]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[46951-46955]:SimpleType[47061-47065]"
  }, {
    "left" : "getConditionExpression",
    "right" : "getConditionExpression",
    "info" : "SimpleName[46956-46978]:SimpleName[47066-47088]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46979-46985]:SingleVariableDeclaration[47089-47095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46987-47533]:Block[47097-47643]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
    "info" : "SwitchStatement[46993-47454]:SwitchStatement[47103-47564]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[47022-47036]:SwitchCase[47132-47146]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[47043-47060]:SwitchCase[47153-47170]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[47069-47094]:ReturnStatement[47179-47204]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[47101-47115]:SwitchCase[47211-47225]"
  }, {
    "left" : "return n.getLastChild();",
    "right" : "return n.getLastChild();",
    "info" : "ReturnStatement[47124-47148]:ReturnStatement[47234-47258]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[47155-47170]:SwitchCase[47265-47280]"
  }, {
    "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
    "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
    "info" : "SwitchStatement[47179-47326]:SwitchStatement[47289-47436]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[47218-47225]:SwitchCase[47328-47335]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47238-47250]:ReturnStatement[47348-47360]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[47261-47268]:SwitchCase[47371-47378]"
  }, {
    "left" : "return n.getFirstChild().getNext();",
    "right" : "return n.getFirstChild().getNext();",
    "info" : "ReturnStatement[47281-47316]:ReturnStatement[47391-47426]"
  }, {
    "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
    "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
    "info" : "ThrowStatement[47335-47404]:ThrowStatement[47445-47514]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[47411-47427]:SwitchCase[47521-47537]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47436-47448]:ReturnStatement[47546-47558]"
  }, {
    "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
    "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
    "info" : "ThrowStatement[47459-47529]:ThrowStatement[47569-47639]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47623-47629]:Modifier[47733-47739]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47630-47637]:PrimitiveType[47740-47747]"
  }, {
    "left" : "isStatementBlock",
    "right" : "isStatementBlock",
    "info" : "SimpleName[47638-47654]:SimpleName[47748-47764]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47655-47661]:SingleVariableDeclaration[47765-47771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47663-47738]:Block[47773-47848]"
  }, {
    "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
    "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
    "info" : "ReturnStatement[47669-47734]:ReturnStatement[47779-47844]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47808-47814]:Modifier[47918-47924]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47815-47822]:PrimitiveType[47925-47932]"
  }, {
    "left" : "isStatement",
    "right" : "isStatement",
    "info" : "SimpleName[47823-47834]:SimpleName[47933-47944]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47835-47841]:SingleVariableDeclaration[47945-47951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47843-47893]:Block[47953-48003]"
  }, {
    "left" : "return isStatementParent(n.getParent());",
    "right" : "return isStatementParent(n.getParent());",
    "info" : "ReturnStatement[47849-47889]:ReturnStatement[47959-47999]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47897-47903]:Modifier[48007-48013]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47904-47911]:PrimitiveType[48014-48021]"
  }, {
    "left" : "isStatementParent",
    "right" : "isStatementParent",
    "info" : "SimpleName[47912-47929]:SimpleName[48022-48039]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[47930-47941]:SingleVariableDeclaration[48040-48051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47943-48358]:Block[48053-48468]"
  }, {
    "left" : "Preconditions.checkState(parent != null);",
    "right" : "Preconditions.checkState(parent != null);",
    "info" : "ExpressionStatement[48144-48185]:ExpressionStatement[48254-48295]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[48190-48354]:SwitchStatement[48300-48464]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[48224-48242]:SwitchCase[48334-48352]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[48249-48266]:SwitchCase[48359-48376]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[48273-48290]:SwitchCase[48383-48400]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[48299-48311]:ReturnStatement[48409-48421]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[48318-48326]:SwitchCase[48428-48436]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48335-48348]:ReturnStatement[48445-48458]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48419-48425]:Modifier[48529-48535]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48426-48433]:PrimitiveType[48536-48543]"
  }, {
    "left" : "isSwitchCase",
    "right" : "isSwitchCase",
    "info" : "SimpleName[48434-48446]:SimpleName[48544-48556]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48447-48453]:SingleVariableDeclaration[48557-48563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48455-48530]:Block[48565-48640]"
  }, {
    "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
    "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
    "info" : "ReturnStatement[48461-48526]:ReturnStatement[48571-48636]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48699-48705]:Modifier[48809-48815]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48706-48713]:PrimitiveType[48816-48823]"
  }, {
    "left" : "isReferenceName",
    "right" : "isReferenceName",
    "info" : "SimpleName[48714-48729]:SimpleName[48824-48839]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48730-48736]:SingleVariableDeclaration[48840-48846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48738-48793]:Block[48848-48903]"
  }, {
    "left" : "return isName(n) && !n.getString().isEmpty();",
    "right" : "return isName(n) && !n.getString().isEmpty();",
    "info" : "ReturnStatement[48744-48789]:ReturnStatement[48854-48899]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48848-48854]:Modifier[48958-48964]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48855-48862]:PrimitiveType[48965-48972]"
  }, {
    "left" : "isLabelName",
    "right" : "isLabelName",
    "info" : "SimpleName[48863-48874]:SimpleName[48973-48984]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48875-48881]:SingleVariableDeclaration[48985-48991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48883-48947]:Block[48993-49057]"
  }, {
    "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
    "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
    "info" : "ReturnStatement[48889-48943]:ReturnStatement[48999-49053]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49014-49020]:Modifier[49124-49130]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49021-49028]:PrimitiveType[49131-49138]"
  }, {
    "left" : "isTryFinallyNode",
    "right" : "isTryFinallyNode",
    "info" : "SimpleName[49029-49045]:SimpleName[49139-49155]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[49046-49057]:SingleVariableDeclaration[49156-49167]"
  }, {
    "left" : "Node child",
    "right" : "Node child",
    "info" : "SingleVariableDeclaration[49059-49069]:SingleVariableDeclaration[49169-49179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49071-49191]:Block[49181-49301]"
  }, {
    "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
    "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
    "info" : "ReturnStatement[49077-49187]:ReturnStatement[49187-49297]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49249-49255]:Modifier[49359-49365]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49256-49263]:PrimitiveType[49366-49373]"
  }, {
    "left" : "isTryCatchNodeContainer",
    "right" : "isTryCatchNodeContainer",
    "info" : "SimpleName[49264-49287]:SimpleName[49374-49397]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[49288-49294]:SingleVariableDeclaration[49398-49404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49296-49425]:Block[49406-49535]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[49302-49330]:VariableDeclarationStatement[49412-49440]"
  }, {
    "left" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
    "right" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
    "info" : "ReturnStatement[49335-49421]:ReturnStatement[49445-49531]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49503-49509]:Modifier[49613-49619]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49510-49514]:PrimitiveType[49620-49624]"
  }, {
    "left" : "removeChild",
    "right" : "removeChild",
    "info" : "SimpleName[49515-49526]:SimpleName[49625-49636]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[49527-49538]:SingleVariableDeclaration[49637-49648]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[49540-49549]:SingleVariableDeclaration[49650-49659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49551-51893]:Block[49661-52003]"
  }, {
    "left" : "if (isTryFinallyNode(parent, node))",
    "right" : "if (isTryFinallyNode(parent, node))",
    "info" : "IfStatement[49557-51889]:IfStatement[49667-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49593-49866]:Block[49703-49976]"
  }, {
    "left" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
    "right" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
    "info" : "IfStatement[49601-49860]:IfStatement[49711-49970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49654-49759]:Block[49764-49869]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[49726-49751]:ExpressionStatement[49836-49861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49765-49860]:Block[49875-49970]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[49830-49852]:ExpressionStatement[49940-49962]"
  }, {
    "left" : "if (node.getType() == Token.CATCH)",
    "right" : "if (node.getType() == Token.CATCH)",
    "info" : "IfStatement[49872-51889]:IfStatement[49982-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49907-50131]:Block[50017-50241]"
  }, {
    "left" : "Node tryNode = node.getParent().getParent();",
    "right" : "Node tryNode = node.getParent().getParent();",
    "info" : "VariableDeclarationStatement[49988-50032]:VariableDeclarationStatement[50098-50142]"
  }, {
    "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "info" : "ExpressionStatement[50039-50094]:ExpressionStatement[50149-50204]"
  }, {
    "left" : "node.detachFromParent();",
    "right" : "node.detachFromParent();",
    "info" : "ExpressionStatement[50101-50125]:ExpressionStatement[50211-50235]"
  }, {
    "left" : "if (isTryCatchNodeContainer(node))",
    "right" : "if (isTryCatchNodeContainer(node))",
    "info" : "IfStatement[50137-51889]:IfStatement[50247-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50172-50430]:Block[50282-50540]"
  }, {
    "left" : "Node tryNode = node.getParent();",
    "right" : "Node tryNode = node.getParent();",
    "info" : "VariableDeclarationStatement[50301-50333]:VariableDeclarationStatement[50411-50443]"
  }, {
    "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
    "info" : "ExpressionStatement[50340-50395]:ExpressionStatement[50450-50505]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[50402-50424]:ExpressionStatement[50512-50534]"
  }, {
    "left" : "if (node.getType() == Token.BLOCK)",
    "right" : "if (node.getType() == Token.BLOCK)",
    "info" : "IfStatement[50436-51889]:IfStatement[50546-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50471-50603]:Block[50581-50713]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[50575-50597]:ExpressionStatement[50685-50707]"
  }, {
    "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
    "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
    "info" : "IfStatement[50609-51889]:IfStatement[50719-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50669-50763]:Block[50779-50873]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[50732-50757]:ExpressionStatement[50842-50867]"
  }, {
    "left" : "if (parent.getType() == Token.VAR)",
    "right" : "if (parent.getType() == Token.VAR)",
    "info" : "IfStatement[50769-51889]:IfStatement[50879-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50804-51123]:Block[50914-51233]"
  }, {
    "left" : "if (parent.hasMoreThanOneChild())",
    "right" : "if (parent.hasMoreThanOneChild())",
    "info" : "IfStatement[50812-51117]:IfStatement[50922-51227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50846-50889]:Block[50956-50999]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[50856-50881]:ExpressionStatement[50966-50991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50895-51117]:Block[51005-51227]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[50970-50995]:ExpressionStatement[51080-51105]"
  }, {
    "left" : "removeChild(parent.getParent(), parent);",
    "right" : "removeChild(parent.getParent(), parent);",
    "info" : "ExpressionStatement[51069-51109]:ExpressionStatement[51179-51219]"
  }, {
    "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
    "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
    "info" : "IfStatement[51129-51889]:IfStatement[51239-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51207-51425]:Block[51317-51535]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[51278-51303]:ExpressionStatement[51388-51413]"
  }, {
    "left" : "removeChild(parent.getParent(), parent);",
    "right" : "removeChild(parent.getParent(), parent);",
    "info" : "ExpressionStatement[51379-51419]:ExpressionStatement[51489-51529]"
  }, {
    "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
    "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
    "info" : "IfStatement[51431-51889]:IfStatement[51541-51999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51505-51745]:Block[51615-51855]"
  }, {
    "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
    "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
    "info" : "ExpressionStatement[51690-51739]:ExpressionStatement[51800-51849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51751-51889]:Block[51861-51999]"
  }, {
    "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
    "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
    "info" : "ThrowStatement[51759-51883]:ThrowStatement[51869-51993]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51957-51963]:Modifier[52067-52073]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51964-51968]:PrimitiveType[52074-52078]"
  }, {
    "left" : "maybeAddFinally",
    "right" : "maybeAddFinally",
    "info" : "SimpleName[51969-51984]:SimpleName[52079-52094]"
  }, {
    "left" : "Node tryNode",
    "right" : "Node tryNode",
    "info" : "SingleVariableDeclaration[51985-51997]:SingleVariableDeclaration[52095-52107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51999-52209]:Block[52109-52319]"
  }, {
    "left" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
    "right" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
    "info" : "ExpressionStatement[52005-52062]:ExpressionStatement[52115-52172]"
  }, {
    "left" : "if (!NodeUtil.hasFinally(tryNode))",
    "right" : "if (!NodeUtil.hasFinally(tryNode))",
    "info" : "IfStatement[52067-52205]:IfStatement[52177-52315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52102-52205]:Block[52212-52315]"
  }, {
    "left" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
    "right" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
    "info" : "ExpressionStatement[52110-52199]:ExpressionStatement[52220-52309]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52311-52317]:Modifier[52421-52427]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52318-52325]:PrimitiveType[52428-52435]"
  }, {
    "left" : "tryMergeBlock",
    "right" : "tryMergeBlock",
    "info" : "SimpleName[52326-52339]:SimpleName[52436-52449]"
  }, {
    "left" : "Node block",
    "right" : "Node block",
    "info" : "SingleVariableDeclaration[52340-52350]:SingleVariableDeclaration[52450-52460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52352-52902]:Block[52462-53012]"
  }, {
    "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[52358-52415]:ExpressionStatement[52468-52525]"
  }, {
    "left" : "Node parent = block.getParent();",
    "right" : "Node parent = block.getParent();",
    "info" : "VariableDeclarationStatement[52420-52452]:VariableDeclarationStatement[52530-52562]"
  }, {
    "left" : "if (isStatementBlock(parent))",
    "right" : "if (isStatementBlock(parent))",
    "info" : "IfStatement[52583-52898]:IfStatement[52693-53008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52613-52865]:Block[52723-52975]"
  }, {
    "left" : "Node previous = block;",
    "right" : "Node previous = block;",
    "info" : "VariableDeclarationStatement[52621-52643]:VariableDeclarationStatement[52731-52753]"
  }, {
    "left" : "while (block.hasChildren())",
    "right" : "while (block.hasChildren())",
    "info" : "WhileStatement[52650-52807]:WhileStatement[52760-52917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52678-52807]:Block[52788-52917]"
  }, {
    "left" : "Node child = block.removeFirstChild();",
    "right" : "Node child = block.removeFirstChild();",
    "info" : "VariableDeclarationStatement[52688-52726]:VariableDeclarationStatement[52798-52836]"
  }, {
    "left" : "parent.addChildAfter(child, previous);",
    "right" : "parent.addChildAfter(child, previous);",
    "info" : "ExpressionStatement[52735-52773]:ExpressionStatement[52845-52883]"
  }, {
    "left" : "previous = child;",
    "right" : "previous = child;",
    "info" : "ExpressionStatement[52782-52799]:ExpressionStatement[52892-52909]"
  }, {
    "left" : "parent.removeChild(block);",
    "right" : "parent.removeChild(block);",
    "info" : "ExpressionStatement[52814-52840]:ExpressionStatement[52924-52950]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[52847-52859]:ReturnStatement[52957-52969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52871-52898]:Block[52981-53008]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[52879-52892]:ReturnStatement[52989-53002]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52944-52950]:Modifier[53054-53060]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52951-52958]:PrimitiveType[53061-53068]"
  }, {
    "left" : "isCall",
    "right" : "isCall",
    "info" : "SimpleName[52959-52965]:SimpleName[53069-53075]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52966-52972]:SingleVariableDeclaration[53076-53082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52974-53017]:Block[53084-53127]"
  }, {
    "left" : "return n.getType() == Token.CALL;",
    "right" : "return n.getType() == Token.CALL;",
    "info" : "ReturnStatement[52980-53013]:ReturnStatement[53090-53123]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53110-53116]:Modifier[53220-53226]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53117-53124]:PrimitiveType[53227-53234]"
  }, {
    "left" : "isCallOrNew",
    "right" : "isCallOrNew",
    "info" : "SimpleName[53125-53136]:SimpleName[53235-53246]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[53137-53146]:SingleVariableDeclaration[53247-53256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53148-53211]:Block[53258-53321]"
  }, {
    "left" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
    "right" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
    "info" : "ReturnStatement[53154-53207]:ReturnStatement[53264-53317]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53257-53263]:Modifier[53367-53373]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53264-53271]:PrimitiveType[53374-53381]"
  }, {
    "left" : "isFunction",
    "right" : "isFunction",
    "info" : "SimpleName[53272-53282]:SimpleName[53382-53392]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53283-53289]:SingleVariableDeclaration[53393-53399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53291-53338]:Block[53401-53448]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION;",
    "right" : "return n.getType() == Token.FUNCTION;",
    "info" : "ReturnStatement[53297-53334]:ReturnStatement[53407-53444]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53408-53414]:Modifier[53518-53524]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[53415-53419]:SimpleType[53525-53529]"
  }, {
    "left" : "getFunctionBody",
    "right" : "getFunctionBody",
    "info" : "SimpleName[53420-53435]:SimpleName[53530-53545]"
  }, {
    "left" : "Node fn",
    "right" : "Node fn",
    "info" : "SingleVariableDeclaration[53436-53443]:SingleVariableDeclaration[53546-53553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53445-53529]:Block[53555-53639]"
  }, {
    "left" : "Preconditions.checkArgument(isFunction(fn));",
    "right" : "Preconditions.checkArgument(isFunction(fn));",
    "info" : "ExpressionStatement[53451-53495]:ExpressionStatement[53561-53605]"
  }, {
    "left" : "return fn.getLastChild();",
    "right" : "return fn.getLastChild();",
    "info" : "ReturnStatement[53500-53525]:ReturnStatement[53610-53635]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53571-53577]:Modifier[53681-53687]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53578-53585]:PrimitiveType[53688-53695]"
  }, {
    "left" : "isThis",
    "right" : "isThis",
    "info" : "SimpleName[53586-53592]:SimpleName[53696-53702]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[53593-53602]:SingleVariableDeclaration[53703-53712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53604-53650]:Block[53714-53760]"
  }, {
    "left" : "return node.getType() == Token.THIS;",
    "right" : "return node.getType() == Token.THIS;",
    "info" : "ReturnStatement[53610-53646]:ReturnStatement[53720-53756]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53697-53703]:Modifier[53807-53813]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53704-53711]:PrimitiveType[53814-53821]"
  }, {
    "left" : "isArrayLiteral",
    "right" : "isArrayLiteral",
    "info" : "SimpleName[53712-53726]:SimpleName[53822-53836]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[53727-53736]:SingleVariableDeclaration[53837-53846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53738-53788]:Block[53848-53898]"
  }, {
    "left" : "return node.getType() == Token.ARRAYLIT;",
    "right" : "return node.getType() == Token.ARRAYLIT;",
    "info" : "ReturnStatement[53744-53784]:ReturnStatement[53854-53894]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53853-53859]:Modifier[53963-53969]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53860-53867]:PrimitiveType[53970-53977]"
  }, {
    "left" : "containsCall",
    "right" : "containsCall",
    "info" : "SimpleName[53868-53880]:SimpleName[53978-53990]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53881-53887]:SingleVariableDeclaration[53991-53997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53889-53934]:Block[53999-54044]"
  }, {
    "left" : "return containsType(n, Token.CALL);",
    "right" : "return containsType(n, Token.CALL);",
    "info" : "ReturnStatement[53895-53930]:ReturnStatement[54005-54040]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[54177-54183]:Modifier[54287-54293]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54184-54191]:PrimitiveType[54294-54301]"
  }, {
    "left" : "isFunctionDeclaration",
    "right" : "isFunctionDeclaration",
    "info" : "SimpleName[54192-54213]:SimpleName[54302-54323]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54214-54220]:SingleVariableDeclaration[54324-54330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54222-54287]:Block[54332-54397]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
    "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
    "info" : "ReturnStatement[54228-54283]:ReturnStatement[54338-54393]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[54477-54483]:Modifier[54587-54593]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54484-54491]:PrimitiveType[54594-54601]"
  }, {
    "left" : "isHoistedFunctionDeclaration",
    "right" : "isHoistedFunctionDeclaration",
    "info" : "SimpleName[54492-54520]:SimpleName[54602-54630]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[54521-54527]:SingleVariableDeclaration[54631-54637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54529-54693]:Block[54639-54803]"
  }, {
    "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
    "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
    "info" : "ReturnStatement[54535-54689]:ReturnStatement[54645-54799]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55353-55359]:Modifier[55463-55469]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55360-55367]:PrimitiveType[55470-55477]"
  }, {
    "left" : "isFunctionExpression",
    "right" : "isFunctionExpression",
    "info" : "SimpleName[55368-55388]:SimpleName[55478-55498]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[55389-55395]:SingleVariableDeclaration[55499-55505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55397-55463]:Block[55507-55573]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
    "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
    "info" : "ReturnStatement[55403-55459]:ReturnStatement[55513-55569]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55658-55664]:Modifier[55768-55774]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55665-55672]:PrimitiveType[55775-55782]"
  }, {
    "left" : "isEmptyFunctionExpression",
    "right" : "isEmptyFunctionExpression",
    "info" : "SimpleName[55673-55698]:SimpleName[55783-55808]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[55699-55708]:SingleVariableDeclaration[55809-55818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55710-55791]:Block[55820-55901]"
  }, {
    "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
    "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
    "info" : "ReturnStatement[55716-55787]:ReturnStatement[55826-55897]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55941-55947]:Modifier[56051-56057]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55948-55955]:PrimitiveType[56058-56065]"
  }, {
    "left" : "isVarArgsFunction",
    "right" : "isVarArgsFunction",
    "info" : "SimpleName[55956-55973]:SimpleName[56066-56083]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[55974-55987]:SingleVariableDeclaration[56084-56097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55989-56165]:Block[56099-56275]"
  }, {
    "left" : "Preconditions.checkArgument(isFunction(function));",
    "right" : "Preconditions.checkArgument(isFunction(function));",
    "info" : "ExpressionStatement[55995-56045]:ExpressionStatement[56105-56155]"
  }, {
    "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
    "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
    "info" : "ReturnStatement[56050-56161]:ReturnStatement[56160-56271]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56269-56275]:Modifier[56379-56385]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[56276-56283]:PrimitiveType[56386-56393]"
  }, {
    "left" : "isObjectCallMethod",
    "right" : "isObjectCallMethod",
    "info" : "SimpleName[56284-56302]:SimpleName[56394-56412]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[56303-56316]:SingleVariableDeclaration[56413-56426]"
  }, {
    "left" : "String methodName",
    "right" : "String methodName",
    "info" : "SingleVariableDeclaration[56318-56335]:SingleVariableDeclaration[56428-56445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56337-56772]:Block[56447-56882]"
  }, {
    "left" : "if (callNode.getType() == Token.CALL)",
    "right" : "if (callNode.getType() == Token.CALL)",
    "info" : "IfStatement[56343-56750]:IfStatement[56453-56860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56381-56750]:Block[56491-56860]"
  }, {
    "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
    "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[56389-56452]:VariableDeclarationStatement[56499-56562]"
  }, {
    "left" : "if (isGet(functionIndentifyingExpression))",
    "right" : "if (isGet(functionIndentifyingExpression))",
    "info" : "IfStatement[56459-56744]:IfStatement[56569-56854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56502-56744]:Block[56612-56854]"
  }, {
    "left" : "Node last = functionIndentifyingExpression.getLastChild();",
    "right" : "Node last = functionIndentifyingExpression.getLastChild();",
    "info" : "VariableDeclarationStatement[56512-56570]:VariableDeclarationStatement[56622-56680]"
  }, {
    "left" : "if (last != null && last.getType() == Token.STRING)",
    "right" : "if (last != null && last.getType() == Token.STRING)",
    "info" : "IfStatement[56579-56736]:IfStatement[56689-56846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56631-56736]:Block[56741-56846]"
  }, {
    "left" : "String propName = last.getString();",
    "right" : "String propName = last.getString();",
    "info" : "VariableDeclarationStatement[56643-56678]:VariableDeclarationStatement[56753-56788]"
  }, {
    "left" : "return (propName.equals(methodName));",
    "right" : "return (propName.equals(methodName));",
    "info" : "ReturnStatement[56689-56726]:ReturnStatement[56799-56836]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56755-56768]:ReturnStatement[56865-56878]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56907-56913]:Modifier[57017-57023]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[56914-56921]:PrimitiveType[57024-57031]"
  }, {
    "left" : "isFunctionObjectCall",
    "right" : "isFunctionObjectCall",
    "info" : "SimpleName[56922-56942]:SimpleName[57032-57052]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[56943-56956]:SingleVariableDeclaration[57053-57066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56958-57012]:Block[57068-57122]"
  }, {
    "left" : "return isObjectCallMethod(callNode, \"call\");",
    "right" : "return isObjectCallMethod(callNode, \"call\");",
    "info" : "ReturnStatement[56964-57008]:ReturnStatement[57074-57118]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57148-57154]:Modifier[57258-57264]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57155-57162]:PrimitiveType[57265-57272]"
  }, {
    "left" : "isFunctionObjectApply",
    "right" : "isFunctionObjectApply",
    "info" : "SimpleName[57163-57184]:SimpleName[57273-57294]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[57185-57198]:SingleVariableDeclaration[57295-57308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57200-57255]:Block[57310-57365]"
  }, {
    "left" : "return isObjectCallMethod(callNode, \"apply\");",
    "right" : "return isObjectCallMethod(callNode, \"apply\");",
    "info" : "ReturnStatement[57206-57251]:ReturnStatement[57316-57361]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57443-57449]:Modifier[57553-57559]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57450-57457]:PrimitiveType[57560-57567]"
  }, {
    "left" : "isFunctionObjectCallOrApply",
    "right" : "isFunctionObjectCallOrApply",
    "info" : "SimpleName[57458-57485]:SimpleName[57568-57595]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[57486-57499]:SingleVariableDeclaration[57596-57609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57501-57584]:Block[57611-57694]"
  }, {
    "left" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
    "right" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
    "info" : "ReturnStatement[57507-57580]:ReturnStatement[57617-57690]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57747-57753]:Modifier[57857-57863]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57754-57761]:PrimitiveType[57864-57871]"
  }, {
    "left" : "isSimpleFunctionObjectCall",
    "right" : "isSimpleFunctionObjectCall",
    "info" : "SimpleName[57762-57788]:SimpleName[57872-57898]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[57789-57802]:SingleVariableDeclaration[57899-57912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57804-57983]:Block[57914-58093]"
  }, {
    "left" : "if (isFunctionObjectCall(callNode))",
    "right" : "if (isFunctionObjectCall(callNode))",
    "info" : "IfStatement[57810-57960]:IfStatement[57920-58070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57846-57960]:Block[57956-58070]"
  }, {
    "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
    "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
    "info" : "IfStatement[57854-57954]:IfStatement[57964-58064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57924-57954]:Block[58034-58064]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[57934-57946]:ReturnStatement[58044-58056]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[57966-57979]:ReturnStatement[58076-58089]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[58336-58342]:Modifier[58446-58452]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[58343-58350]:PrimitiveType[58453-58460]"
  }, {
    "left" : "isLhs",
    "right" : "isLhs",
    "info" : "SimpleName[58351-58356]:SimpleName[58461-58466]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[58357-58363]:SingleVariableDeclaration[58467-58473]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[58365-58376]:SingleVariableDeclaration[58475-58486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58378-58505]:Block[58488-58615]"
  }, {
    "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
    "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
    "info" : "ReturnStatement[58384-58501]:ReturnStatement[58494-58611]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[58701-58707]:Modifier[58811-58817]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[58708-58715]:PrimitiveType[58818-58825]"
  }, {
    "left" : "isObjectLitKey",
    "right" : "isObjectLitKey",
    "info" : "SimpleName[58716-58730]:SimpleName[58826-58840]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[58731-58740]:SingleVariableDeclaration[58841-58850]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[58742-58753]:SingleVariableDeclaration[58852-58863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58755-58981]:Block[58865-59091]"
  }, {
    "left" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "right" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "info" : "SwitchStatement[58761-58959]:SwitchStatement[58871-59069]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[58793-58811]:SwitchCase[58903-58921]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[58818-58836]:SwitchCase[58928-58946]"
  }, {
    "left" : "return parent.getType() == Token.OBJECTLIT;",
    "right" : "return parent.getType() == Token.OBJECTLIT;",
    "info" : "ReturnStatement[58845-58888]:ReturnStatement[58955-58998]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[58895-58910]:SwitchCase[59005-59020]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[58917-58932]:SwitchCase[59027-59042]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[58941-58953]:ReturnStatement[59051-59063]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[58964-58977]:ReturnStatement[59074-59087]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[59069-59075]:Modifier[59179-59185]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[59076-59082]:SimpleType[59186-59192]"
  }, {
    "left" : "getObjectLitKeyName",
    "right" : "getObjectLitKeyName",
    "info" : "SimpleName[59083-59102]:SimpleName[59193-59212]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[59103-59111]:SingleVariableDeclaration[59213-59221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59113-59393]:Block[59223-59503]"
  }, {
    "left" : "switch (key.getType()) {\n      case Token.NUMBER:\n        return NodeUtil.getStringValue(key);\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
    "right" : "switch (key.getType()) {\n      case Token.NUMBER:\n        return NodeUtil.getStringValue(key);\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
    "info" : "SwitchStatement[59119-59320]:SwitchStatement[59229-59430]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[59150-59168]:SwitchCase[59260-59278]"
  }, {
    "left" : "return NodeUtil.getStringValue(key);",
    "right" : "return NodeUtil.getStringValue(key);",
    "info" : "ReturnStatement[59177-59213]:ReturnStatement[59287-59323]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[59220-59238]:SwitchCase[59330-59348]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[59245-59260]:SwitchCase[59355-59370]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[59267-59282]:SwitchCase[59377-59392]"
  }, {
    "left" : "return key.getString();",
    "right" : "return key.getString();",
    "info" : "ReturnStatement[59291-59314]:ReturnStatement[59401-59424]"
  }, {
    "left" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
    "right" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
    "info" : "ThrowStatement[59325-59389]:ThrowStatement[59435-59499]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[59498-59504]:Modifier[59608-59614]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[59505-59511]:SimpleType[59615-59621]"
  }, {
    "left" : "getObjectLitKeyTypeFromValueType",
    "right" : "getObjectLitKeyTypeFromValueType",
    "info" : "SimpleName[59512-59544]:SimpleName[59622-59654]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[59545-59553]:SingleVariableDeclaration[59655-59663]"
  }, {
    "left" : "JSType valueType",
    "right" : "JSType valueType",
    "info" : "SingleVariableDeclaration[59555-59571]:SingleVariableDeclaration[59665-59681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59573-60408]:Block[59683-60518]"
  }, {
    "left" : "if (valueType != null)",
    "right" : "if (valueType != null)",
    "info" : "IfStatement[59579-60382]:IfStatement[59689-60492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59602-60382]:Block[59712-60492]"
  }, {
    "left" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
    "right" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
    "info" : "SwitchStatement[59610-60376]:SwitchStatement[59720-60486]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[59643-59658]:SwitchCase[59753-59768]"
  }, {
    "left" : "if (valueType.isFunctionType())",
    "right" : "if (valueType.isFunctionType())",
    "info" : "IfStatement[59722-59921]:IfStatement[59832-60031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59754-59877]:Block[59864-59987]"
  }, {
    "left" : "FunctionType fntype = ((FunctionType) valueType);",
    "right" : "FunctionType fntype = ((FunctionType) valueType);",
    "info" : "VariableDeclarationStatement[59768-59817]:VariableDeclarationStatement[59878-59927]"
  }, {
    "left" : "valueType = fntype.getReturnType();",
    "right" : "valueType = fntype.getReturnType();",
    "info" : "ExpressionStatement[59830-59865]:ExpressionStatement[59940-59975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59883-59921]:Block[59993-60031]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[59897-59909]:ReturnStatement[60007-60019]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59932-59938]:BreakStatement[60042-60048]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[59947-59962]:SwitchCase[60057-60072]"
  }, {
    "left" : "if (valueType.isFunctionType())",
    "right" : "if (valueType.isFunctionType())",
    "info" : "IfStatement[59973-60351]:IfStatement[60083-60461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60005-60307]:Block[60115-60417]"
  }, {
    "left" : "FunctionType fntype = ((FunctionType) valueType);",
    "right" : "FunctionType fntype = ((FunctionType) valueType);",
    "info" : "VariableDeclarationStatement[60074-60123]:VariableDeclarationStatement[60184-60233]"
  }, {
    "left" : "Node param = fntype.getParametersNode().getFirstChild();",
    "right" : "Node param = fntype.getParametersNode().getFirstChild();",
    "info" : "VariableDeclarationStatement[60136-60192]:VariableDeclarationStatement[60246-60302]"
  }, {
    "left" : "valueType = param.getJSType();",
    "right" : "valueType = param.getJSType();",
    "info" : "ExpressionStatement[60265-60295]:ExpressionStatement[60375-60405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60313-60351]:Block[60423-60461]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[60327-60339]:ReturnStatement[60437-60449]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60362-60368]:BreakStatement[60472-60478]"
  }, {
    "left" : "return valueType;",
    "right" : "return valueType;",
    "info" : "ReturnStatement[60387-60404]:ReturnStatement[60497-60514]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[60579-60585]:Modifier[60689-60695]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[60586-60593]:PrimitiveType[60696-60703]"
  }, {
    "left" : "isGetOrSetKey",
    "right" : "isGetOrSetKey",
    "info" : "SimpleName[60594-60607]:SimpleName[60704-60717]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[60608-60617]:SingleVariableDeclaration[60718-60727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60619-60743]:Block[60729-60853]"
  }, {
    "left" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "right" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "info" : "SwitchStatement[60625-60721]:SwitchStatement[60735-60831]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[60657-60672]:SwitchCase[60767-60782]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[60679-60694]:SwitchCase[60789-60804]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[60703-60715]:ReturnStatement[60813-60825]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60726-60739]:ReturnStatement[60836-60849]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[61014-61020]:Modifier[61124-61130]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[61021-61027]:SimpleType[61131-61137]"
  }, {
    "left" : "opToStr",
    "right" : "opToStr",
    "info" : "SimpleName[61028-61035]:SimpleName[61138-61145]"
  }, {
    "left" : "int operator",
    "right" : "int operator",
    "info" : "SingleVariableDeclaration[61036-61048]:SingleVariableDeclaration[61146-61158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61050-62660]:Block[61160-62770]"
  }, {
    "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
    "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
    "info" : "SwitchStatement[61056-62656]:SwitchStatement[61166-62766]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[61082-61099]:SwitchCase[61192-61209]"
  }, {
    "left" : "return \"|\";",
    "right" : "return \"|\";",
    "info" : "ReturnStatement[61100-61111]:ReturnStatement[61210-61221]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[61118-61132]:SwitchCase[61228-61242]"
  }, {
    "left" : "return \"||\";",
    "right" : "return \"||\";",
    "info" : "ReturnStatement[61133-61145]:ReturnStatement[61243-61255]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[61152-61170]:SwitchCase[61262-61280]"
  }, {
    "left" : "return \"^\";",
    "right" : "return \"^\";",
    "info" : "ReturnStatement[61171-61182]:ReturnStatement[61281-61292]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[61189-61204]:SwitchCase[61299-61314]"
  }, {
    "left" : "return \"&&\";",
    "right" : "return \"&&\";",
    "info" : "ReturnStatement[61205-61217]:ReturnStatement[61315-61327]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[61224-61242]:SwitchCase[61334-61352]"
  }, {
    "left" : "return \"&\";",
    "right" : "return \"&\";",
    "info" : "ReturnStatement[61243-61254]:ReturnStatement[61353-61364]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[61261-61277]:SwitchCase[61371-61387]"
  }, {
    "left" : "return \"===\";",
    "right" : "return \"===\";",
    "info" : "ReturnStatement[61278-61291]:ReturnStatement[61388-61401]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[61298-61312]:SwitchCase[61408-61422]"
  }, {
    "left" : "return \"==\";",
    "right" : "return \"==\";",
    "info" : "ReturnStatement[61313-61325]:ReturnStatement[61423-61435]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[61332-61347]:SwitchCase[61442-61457]"
  }, {
    "left" : "return \"!\";",
    "right" : "return \"!\";",
    "info" : "ReturnStatement[61348-61359]:ReturnStatement[61458-61469]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[61366-61380]:SwitchCase[61476-61490]"
  }, {
    "left" : "return \"!=\";",
    "right" : "return \"!=\";",
    "info" : "ReturnStatement[61381-61393]:ReturnStatement[61491-61503]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[61400-61416]:SwitchCase[61510-61526]"
  }, {
    "left" : "return \"!==\";",
    "right" : "return \"!==\";",
    "info" : "ReturnStatement[61417-61430]:ReturnStatement[61527-61540]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[61437-61452]:SwitchCase[61547-61562]"
  }, {
    "left" : "return \"<<\";",
    "right" : "return \"<<\";",
    "info" : "ReturnStatement[61453-61465]:ReturnStatement[61563-61575]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[61472-61486]:SwitchCase[61582-61596]"
  }, {
    "left" : "return \"in\";",
    "right" : "return \"in\";",
    "info" : "ReturnStatement[61487-61499]:ReturnStatement[61597-61609]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[61506-61520]:SwitchCase[61616-61630]"
  }, {
    "left" : "return \"<=\";",
    "right" : "return \"<=\";",
    "info" : "ReturnStatement[61521-61533]:ReturnStatement[61631-61643]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[61540-61554]:SwitchCase[61650-61664]"
  }, {
    "left" : "return \"<\";",
    "right" : "return \"<\";",
    "info" : "ReturnStatement[61555-61566]:ReturnStatement[61665-61676]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[61573-61589]:SwitchCase[61683-61699]"
  }, {
    "left" : "return \">>>\";",
    "right" : "return \">>>\";",
    "info" : "ReturnStatement[61590-61603]:ReturnStatement[61700-61713]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[61610-61625]:SwitchCase[61720-61735]"
  }, {
    "left" : "return \">>\";",
    "right" : "return \">>\";",
    "info" : "ReturnStatement[61626-61638]:ReturnStatement[61736-61748]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[61645-61659]:SwitchCase[61755-61769]"
  }, {
    "left" : "return \">=\";",
    "right" : "return \">=\";",
    "info" : "ReturnStatement[61660-61672]:ReturnStatement[61770-61782]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[61679-61693]:SwitchCase[61789-61803]"
  }, {
    "left" : "return \">\";",
    "right" : "return \">\";",
    "info" : "ReturnStatement[61694-61705]:ReturnStatement[61804-61815]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[61712-61727]:SwitchCase[61822-61837]"
  }, {
    "left" : "return \"*\";",
    "right" : "return \"*\";",
    "info" : "ReturnStatement[61728-61739]:ReturnStatement[61838-61849]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[61746-61761]:SwitchCase[61856-61871]"
  }, {
    "left" : "return \"/\";",
    "right" : "return \"/\";",
    "info" : "ReturnStatement[61762-61773]:ReturnStatement[61872-61883]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[61780-61795]:SwitchCase[61890-61905]"
  }, {
    "left" : "return \"%\";",
    "right" : "return \"%\";",
    "info" : "ReturnStatement[61796-61807]:ReturnStatement[61906-61917]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[61814-61832]:SwitchCase[61924-61942]"
  }, {
    "left" : "return \"~\";",
    "right" : "return \"~\";",
    "info" : "ReturnStatement[61833-61844]:ReturnStatement[61943-61954]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[61851-61866]:SwitchCase[61961-61976]"
  }, {
    "left" : "return \"+\";",
    "right" : "return \"+\";",
    "info" : "ReturnStatement[61867-61878]:ReturnStatement[61977-61988]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[61885-61900]:SwitchCase[61995-62010]"
  }, {
    "left" : "return \"-\";",
    "right" : "return \"-\";",
    "info" : "ReturnStatement[61901-61912]:ReturnStatement[62011-62022]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[61919-61934]:SwitchCase[62029-62044]"
  }, {
    "left" : "return \"+\";",
    "right" : "return \"+\";",
    "info" : "ReturnStatement[61935-61946]:ReturnStatement[62045-62056]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[61953-61968]:SwitchCase[62063-62078]"
  }, {
    "left" : "return \"-\";",
    "right" : "return \"-\";",
    "info" : "ReturnStatement[61969-61980]:ReturnStatement[62079-62090]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[61987-62005]:SwitchCase[62097-62115]"
  }, {
    "left" : "return \"=\";",
    "right" : "return \"=\";",
    "info" : "ReturnStatement[62006-62017]:ReturnStatement[62116-62127]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[62024-62048]:SwitchCase[62134-62158]"
  }, {
    "left" : "return \"|=\";",
    "right" : "return \"|=\";",
    "info" : "ReturnStatement[62049-62061]:ReturnStatement[62159-62171]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[62068-62093]:SwitchCase[62178-62203]"
  }, {
    "left" : "return \"^=\";",
    "right" : "return \"^=\";",
    "info" : "ReturnStatement[62094-62106]:ReturnStatement[62204-62216]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[62113-62138]:SwitchCase[62223-62248]"
  }, {
    "left" : "return \"&=\";",
    "right" : "return \"&=\";",
    "info" : "ReturnStatement[62139-62151]:ReturnStatement[62249-62261]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[62158-62180]:SwitchCase[62268-62290]"
  }, {
    "left" : "return \"<<=\";",
    "right" : "return \"<<=\";",
    "info" : "ReturnStatement[62181-62194]:ReturnStatement[62291-62304]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[62201-62223]:SwitchCase[62311-62333]"
  }, {
    "left" : "return \">>=\";",
    "right" : "return \">>=\";",
    "info" : "ReturnStatement[62224-62237]:ReturnStatement[62334-62347]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[62244-62267]:SwitchCase[62354-62377]"
  }, {
    "left" : "return \">>>=\";",
    "right" : "return \">>>=\";",
    "info" : "ReturnStatement[62268-62282]:ReturnStatement[62378-62392]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[62289-62311]:SwitchCase[62399-62421]"
  }, {
    "left" : "return \"+=\";",
    "right" : "return \"+=\";",
    "info" : "ReturnStatement[62312-62324]:ReturnStatement[62422-62434]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[62331-62353]:SwitchCase[62441-62463]"
  }, {
    "left" : "return \"-=\";",
    "right" : "return \"-=\";",
    "info" : "ReturnStatement[62354-62366]:ReturnStatement[62464-62476]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[62373-62395]:SwitchCase[62483-62505]"
  }, {
    "left" : "return \"*=\";",
    "right" : "return \"*=\";",
    "info" : "ReturnStatement[62396-62408]:ReturnStatement[62506-62518]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[62415-62437]:SwitchCase[62525-62547]"
  }, {
    "left" : "return \"/=\";",
    "right" : "return \"/=\";",
    "info" : "ReturnStatement[62438-62450]:ReturnStatement[62548-62560]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[62457-62479]:SwitchCase[62567-62589]"
  }, {
    "left" : "return \"%=\";",
    "right" : "return \"%=\";",
    "info" : "ReturnStatement[62480-62492]:ReturnStatement[62590-62602]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[62499-62515]:SwitchCase[62609-62625]"
  }, {
    "left" : "return \"void\";",
    "right" : "return \"void\";",
    "info" : "ReturnStatement[62516-62530]:ReturnStatement[62626-62640]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[62537-62555]:SwitchCase[62647-62665]"
  }, {
    "left" : "return \"typeof\";",
    "right" : "return \"typeof\";",
    "info" : "ReturnStatement[62556-62572]:ReturnStatement[62666-62682]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[62579-62601]:SwitchCase[62689-62711]"
  }, {
    "left" : "return \"instanceof\";",
    "right" : "return \"instanceof\";",
    "info" : "ReturnStatement[62602-62622]:ReturnStatement[62712-62732]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[62629-62637]:SwitchCase[62739-62747]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[62638-62650]:ReturnStatement[62748-62760]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[62938-62944]:Modifier[63048-63054]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[62945-62951]:SimpleType[63055-63061]"
  }, {
    "left" : "opToStrNoFail",
    "right" : "opToStrNoFail",
    "info" : "SimpleName[62952-62965]:SimpleName[63062-63075]"
  }, {
    "left" : "int operator",
    "right" : "int operator",
    "info" : "SingleVariableDeclaration[62966-62978]:SingleVariableDeclaration[63076-63088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62980-63167]:Block[63090-63277]"
  }, {
    "left" : "String res = opToStr(operator);",
    "right" : "String res = opToStr(operator);",
    "info" : "VariableDeclarationStatement[62986-63017]:VariableDeclarationStatement[63096-63127]"
  }, {
    "left" : "if (res == null)",
    "right" : "if (res == null)",
    "info" : "IfStatement[63022-63147]:IfStatement[63132-63257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63039-63147]:Block[63149-63257]"
  }, {
    "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
    "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
    "info" : "ThrowStatement[63047-63141]:ThrowStatement[63157-63251]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[63152-63163]:ReturnStatement[63262-63273]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63255-63261]:Modifier[63365-63371]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63262-63269]:PrimitiveType[63372-63379]"
  }, {
    "left" : "containsType",
    "right" : "containsType",
    "info" : "SimpleName[63270-63282]:SimpleName[63380-63392]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[63283-63292]:SingleVariableDeclaration[63393-63402]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[63324-63332]:SingleVariableDeclaration[63434-63442]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[63364-63400]:SingleVariableDeclaration[63474-63510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63402-63476]:Block[63512-63586]"
  }, {
    "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
    "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
    "info" : "ReturnStatement[63408-63472]:ReturnStatement[63518-63582]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63564-63570]:Modifier[63674-63680]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63571-63578]:PrimitiveType[63681-63688]"
  }, {
    "left" : "containsType",
    "right" : "containsType",
    "info" : "SimpleName[63579-63591]:SimpleName[63689-63701]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[63592-63601]:SingleVariableDeclaration[63702-63711]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[63603-63611]:SingleVariableDeclaration[63713-63721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63613-63686]:Block[63723-63796]"
  }, {
    "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
    "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[63619-63682]:ReturnStatement[63729-63792]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63906-63912]:Modifier[64016-64022]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[63913-63917]:PrimitiveType[64023-64027]"
  }, {
    "left" : "redeclareVarsInsideBranch",
    "right" : "redeclareVarsInsideBranch",
    "info" : "SimpleName[63918-63943]:SimpleName[64028-64053]"
  }, {
    "left" : "Node branch",
    "right" : "Node branch",
    "info" : "SingleVariableDeclaration[63944-63955]:SingleVariableDeclaration[64054-64065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63957-64438]:Block[64067-64548]"
  }, {
    "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
    "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
    "info" : "VariableDeclarationStatement[63963-64019]:VariableDeclarationStatement[64073-64129]"
  }, {
    "left" : "if (vars.isEmpty())",
    "right" : "if (vars.isEmpty())",
    "info" : "IfStatement[64024-64065]:IfStatement[64134-64175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64044-64065]:Block[64154-64175]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[64052-64059]:ReturnStatement[64162-64169]"
  }, {
    "left" : "Node parent = getAddingRoot(branch);",
    "right" : "Node parent = getAddingRoot(branch);",
    "info" : "VariableDeclarationStatement[64071-64107]:VariableDeclarationStatement[64181-64217]"
  }, {
    "left" : "for (Node nameNode : vars)",
    "right" : "for (Node nameNode : vars)",
    "info" : "EnhancedForStatement[64112-64434]:EnhancedForStatement[64222-64544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64139-64434]:Block[64249-64544]"
  }, {
    "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
    "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
    "info" : "VariableDeclarationStatement[64147-64335]:VariableDeclarationStatement[64257-64445]"
  }, {
    "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
    "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
    "info" : "ExpressionStatement[64342-64393]:ExpressionStatement[64452-64503]"
  }, {
    "left" : "parent.addChildToFront(var);",
    "right" : "parent.addChildToFront(var);",
    "info" : "ExpressionStatement[64400-64428]:ExpressionStatement[64510-64538]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64550-64556]:Modifier[64660-64666]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64557-64561]:PrimitiveType[64667-64671]"
  }, {
    "left" : "copyNameAnnotations",
    "right" : "copyNameAnnotations",
    "info" : "SimpleName[64562-64581]:SimpleName[64672-64691]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[64582-64593]:SingleVariableDeclaration[64692-64703]"
  }, {
    "left" : "Node destination",
    "right" : "Node destination",
    "info" : "SingleVariableDeclaration[64595-64611]:SingleVariableDeclaration[64705-64721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64613-64743]:Block[64723-64853]"
  }, {
    "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
    "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
    "info" : "IfStatement[64619-64739]:IfStatement[64729-64849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64669-64739]:Block[64779-64849]"
  }, {
    "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[64677-64733]:ExpressionStatement[64787-64843]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64864-64871]:Modifier[64974-64981]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64872-64878]:Modifier[64982-64988]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[64879-64883]:SimpleType[64989-64993]"
  }, {
    "left" : "getAddingRoot",
    "right" : "getAddingRoot",
    "info" : "SimpleName[64884-64897]:SimpleName[64994-65007]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[64898-64904]:SingleVariableDeclaration[65008-65014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64906-65569]:Block[65016-65679]"
  }, {
    "left" : "Node addingRoot = null;",
    "right" : "Node addingRoot = null;",
    "info" : "VariableDeclarationStatement[64912-64935]:VariableDeclarationStatement[65022-65045]"
  }, {
    "left" : "Node ancestor = n;",
    "right" : "Node ancestor = n;",
    "info" : "VariableDeclarationStatement[64940-64958]:VariableDeclarationStatement[65050-65068]"
  }, {
    "left" : "while (null != (ancestor = ancestor.getParent()))",
    "right" : "while (null != (ancestor = ancestor.getParent()))",
    "info" : "WhileStatement[64963-65249]:WhileStatement[65073-65359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65013-65249]:Block[65123-65359]"
  }, {
    "left" : "int type = ancestor.getType();",
    "right" : "int type = ancestor.getType();",
    "info" : "VariableDeclarationStatement[65021-65051]:VariableDeclarationStatement[65131-65161]"
  }, {
    "left" : "if (type == Token.SCRIPT)",
    "right" : "if (type == Token.SCRIPT)",
    "info" : "IfStatement[65058-65243]:IfStatement[65168-65353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65084-65139]:Block[65194-65249]"
  }, {
    "left" : "addingRoot = ancestor;",
    "right" : "addingRoot = ancestor;",
    "info" : "ExpressionStatement[65094-65116]:ExpressionStatement[65204-65226]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65125-65131]:BreakStatement[65235-65241]"
  }, {
    "left" : "if (type == Token.FUNCTION)",
    "right" : "if (type == Token.FUNCTION)",
    "info" : "IfStatement[65145-65243]:IfStatement[65255-65353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65173-65243]:Block[65283-65353]"
  }, {
    "left" : "addingRoot = ancestor.getLastChild();",
    "right" : "addingRoot = ancestor.getLastChild();",
    "info" : "ExpressionStatement[65183-65220]:ExpressionStatement[65293-65330]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[65229-65235]:BreakStatement[65339-65345]"
  }, {
    "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
    "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
    "info" : "ExpressionStatement[65302-65412]:ExpressionStatement[65412-65522]"
  }, {
    "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
    "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
    "info" : "ExpressionStatement[65417-65542]:ExpressionStatement[65527-65652]"
  }, {
    "left" : "return addingRoot;",
    "right" : "return addingRoot;",
    "info" : "ReturnStatement[65547-65565]:ReturnStatement[65657-65675]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65639-65645]:Modifier[65749-65755]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[65646-65652]:Modifier[65756-65762]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[65653-65657]:SimpleType[65763-65767]"
  }, {
    "left" : "newFunctionNode",
    "right" : "newFunctionNode",
    "info" : "SimpleName[65658-65673]:SimpleName[65768-65783]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[65674-65685]:SingleVariableDeclaration[65784-65795]"
  }, {
    "left" : "List<Node> params",
    "right" : "List<Node> params",
    "info" : "SingleVariableDeclaration[65687-65704]:SingleVariableDeclaration[65797-65814]"
  }, {
    "left" : "Node body",
    "right" : "Node body",
    "info" : "SingleVariableDeclaration[65712-65721]:SingleVariableDeclaration[65822-65831]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[65723-65733]:SingleVariableDeclaration[65833-65843]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[65735-65745]:SingleVariableDeclaration[65845-65855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65747-66150]:Block[65857-66260]"
  }, {
    "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
    "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
    "info" : "VariableDeclarationStatement[65753-65810]:VariableDeclarationStatement[65863-65920]"
  }, {
    "left" : "for (Node param : params)",
    "right" : "for (Node param : params)",
    "info" : "EnhancedForStatement[65815-65892]:EnhancedForStatement[65925-66002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65841-65892]:Block[65951-66002]"
  }, {
    "left" : "parameterParen.addChildToBack(param);",
    "right" : "parameterParen.addChildToBack(param);",
    "info" : "ExpressionStatement[65849-65886]:ExpressionStatement[65959-65996]"
  }, {
    "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
    "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
    "info" : "VariableDeclarationStatement[65897-65954]:VariableDeclarationStatement[66007-66064]"
  }, {
    "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
    "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
    "info" : "ExpressionStatement[65959-66045]:ExpressionStatement[66069-66155]"
  }, {
    "left" : "function.addChildToBack(parameterParen);",
    "right" : "function.addChildToBack(parameterParen);",
    "info" : "ExpressionStatement[66050-66090]:ExpressionStatement[66160-66200]"
  }, {
    "left" : "function.addChildToBack(body);",
    "right" : "function.addChildToBack(body);",
    "info" : "ExpressionStatement[66095-66125]:ExpressionStatement[66205-66235]"
  }, {
    "left" : "return function;",
    "right" : "return function;",
    "info" : "ReturnStatement[66130-66146]:ReturnStatement[66240-66256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66436-66442]:Modifier[66546-66552]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66443-66449]:Modifier[66553-66559]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[66450-66454]:SimpleType[66560-66564]"
  }, {
    "left" : "newQualifiedNameNode",
    "right" : "newQualifiedNameNode",
    "info" : "SimpleName[66455-66475]:SimpleName[66565-66585]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[66483-66510]:SingleVariableDeclaration[66593-66620]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[66512-66523]:SingleVariableDeclaration[66622-66633]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[66525-66535]:SingleVariableDeclaration[66635-66645]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[66537-66547]:SingleVariableDeclaration[66647-66657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66549-67309]:Block[66659-67419]"
  }, {
    "left" : "int endPos = name.indexOf('.');",
    "right" : "int endPos = name.indexOf('.');",
    "info" : "VariableDeclarationStatement[66555-66586]:VariableDeclarationStatement[66665-66696]"
  }, {
    "left" : "if (endPos == -1)",
    "right" : "if (endPos == -1)",
    "info" : "IfStatement[66591-66672]:IfStatement[66701-66782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66609-66672]:Block[66719-66782]"
  }, {
    "left" : "return newName(convention, name, lineno, charno);",
    "right" : "return newName(convention, name, lineno, charno);",
    "info" : "ReturnStatement[66617-66666]:ReturnStatement[66727-66776]"
  }, {
    "left" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
    "right" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
    "info" : "VariableDeclarationStatement[66677-66761]:VariableDeclarationStatement[66787-66871]"
  }, {
    "left" : "int startPos;",
    "right" : "int startPos;",
    "info" : "VariableDeclarationStatement[66766-66779]:VariableDeclarationStatement[66876-66889]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[66784-67287]:DoStatement[66894-67397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66787-67265]:Block[66897-67375]"
  }, {
    "left" : "startPos = endPos + 1;",
    "right" : "startPos = endPos + 1;",
    "info" : "ExpressionStatement[66795-66817]:ExpressionStatement[66905-66927]"
  }, {
    "left" : "endPos = name.indexOf('.', startPos);",
    "right" : "endPos = name.indexOf('.', startPos);",
    "info" : "ExpressionStatement[66824-66861]:ExpressionStatement[66934-66971]"
  }, {
    "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
    "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
    "info" : "VariableDeclarationStatement[66868-67001]:VariableDeclarationStatement[66978-67111]"
  }, {
    "left" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
    "right" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
    "info" : "VariableDeclarationStatement[67008-67075]:VariableDeclarationStatement[67118-67185]"
  }, {
    "left" : "if (convention.isConstantKey(part))",
    "right" : "if (convention.isConstantKey(part))",
    "info" : "IfStatement[67082-67189]:IfStatement[67192-67299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67118-67189]:Block[67228-67299]"
  }, {
    "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[67128-67181]:ExpressionStatement[67238-67291]"
  }, {
    "left" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
    "right" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
    "info" : "ExpressionStatement[67196-67259]:ExpressionStatement[67306-67369]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[67293-67305]:ReturnStatement[67403-67415]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67840-67846]:Modifier[67950-67956]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[67847-67851]:SimpleType[67957-67961]"
  }, {
    "left" : "newQualifiedNameNode",
    "right" : "newQualifiedNameNode",
    "info" : "SimpleName[67852-67872]:SimpleName[67962-67982]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[67880-67907]:SingleVariableDeclaration[67990-68017]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[67909-67920]:SingleVariableDeclaration[68019-68030]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[67922-67936]:SingleVariableDeclaration[68032-68046]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[67944-67963]:SingleVariableDeclaration[68054-68073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67965-68107]:Block[68075-68217]"
  }, {
    "left" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
    "right" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
    "info" : "VariableDeclarationStatement[67971-68030]:VariableDeclarationStatement[68081-68140]"
  }, {
    "left" : "setDebugInformation(node, basisNode, originalName);",
    "right" : "setDebugInformation(node, basisNode, originalName);",
    "info" : "ExpressionStatement[68035-68086]:ExpressionStatement[68145-68196]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[68091-68103]:ReturnStatement[68201-68213]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68197-68203]:Modifier[68307-68313]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[68204-68208]:SimpleType[68314-68318]"
  }, {
    "left" : "getRootOfQualifiedName",
    "right" : "getRootOfQualifiedName",
    "info" : "SimpleName[68209-68231]:SimpleName[68319-68341]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[68232-68242]:SingleVariableDeclaration[68342-68352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68244-68515]:Block[68354-68625]"
  }, {
    "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
    "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
    "info" : "ForStatement[68250-68511]:ForStatement[68360-68621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68327-68511]:Block[68437-68621]"
  }, {
    "left" : "int type = current.getType();",
    "right" : "int type = current.getType();",
    "info" : "VariableDeclarationStatement[68335-68364]:VariableDeclarationStatement[68445-68474]"
  }, {
    "left" : "if (type == Token.NAME || type == Token.THIS)",
    "right" : "if (type == Token.NAME || type == Token.THIS)",
    "info" : "IfStatement[68371-68450]:IfStatement[68481-68560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68417-68450]:Block[68527-68560]"
  }, {
    "left" : "return current;",
    "right" : "return current;",
    "info" : "ReturnStatement[68427-68442]:ReturnStatement[68537-68552]"
  }, {
    "left" : "Preconditions.checkState(type == Token.GETPROP);",
    "right" : "Preconditions.checkState(type == Token.GETPROP);",
    "info" : "ExpressionStatement[68457-68505]:ExpressionStatement[68567-68615]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68827-68833]:Modifier[68937-68943]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68834-68838]:PrimitiveType[68944-68948]"
  }, {
    "left" : "setDebugInformation",
    "right" : "setDebugInformation",
    "info" : "SimpleName[68839-68858]:SimpleName[68949-68968]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[68859-68868]:SingleVariableDeclaration[68969-68978]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[68870-68884]:SingleVariableDeclaration[68980-68994]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[68920-68939]:SingleVariableDeclaration[69030-69049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68941-69050]:Block[69051-69160]"
  }, {
    "left" : "node.copyInformationFromForTree(basisNode);",
    "right" : "node.copyInformationFromForTree(basisNode);",
    "info" : "ExpressionStatement[68947-68990]:ExpressionStatement[69057-69100]"
  }, {
    "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "info" : "ExpressionStatement[68995-69046]:ExpressionStatement[69105-69156]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[69054-69061]:Modifier[69164-69171]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69062-69068]:Modifier[69172-69178]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[69069-69073]:SimpleType[69179-69183]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[69074-69081]:SimpleName[69184-69191]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[69089-69116]:SingleVariableDeclaration[69199-69226]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[69118-69129]:SingleVariableDeclaration[69228-69239]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[69131-69141]:SingleVariableDeclaration[69241-69251]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[69143-69153]:SingleVariableDeclaration[69253-69263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69155-69356]:Block[69265-69466]"
  }, {
    "left" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
    "right" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
    "info" : "VariableDeclarationStatement[69161-69226]:VariableDeclarationStatement[69271-69336]"
  }, {
    "left" : "if (convention.isConstant(name))",
    "right" : "if (convention.isConstant(name))",
    "info" : "IfStatement[69231-69331]:IfStatement[69341-69441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69264-69331]:Block[69374-69441]"
  }, {
    "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[69272-69325]:ExpressionStatement[69382-69435]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[69336-69352]:ReturnStatement[69446-69462]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69686-69692]:Modifier[69796-69802]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[69693-69697]:SimpleType[69803-69807]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[69698-69705]:SimpleName[69808-69815]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[69713-69740]:SingleVariableDeclaration[69823-69850]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[69742-69753]:SingleVariableDeclaration[69852-69863]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[69755-69769]:SingleVariableDeclaration[69865-69879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69771-70004]:Block[69881-70114]"
  }, {
    "left" : "Node nameNode = Node.newString(Token.NAME, name);",
    "right" : "Node nameNode = Node.newString(Token.NAME, name);",
    "info" : "VariableDeclarationStatement[69777-69826]:VariableDeclarationStatement[69887-69936]"
  }, {
    "left" : "if (convention.isConstantKey(name))",
    "right" : "if (convention.isConstantKey(name))",
    "info" : "IfStatement[69831-69934]:IfStatement[69941-70044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69867-69934]:Block[69977-70044]"
  }, {
    "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[69875-69928]:ExpressionStatement[69985-70038]"
  }, {
    "left" : "nameNode.copyInformationFrom(basisNode);",
    "right" : "nameNode.copyInformationFrom(basisNode);",
    "info" : "ExpressionStatement[69939-69979]:ExpressionStatement[70049-70089]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[69984-70000]:ReturnStatement[70094-70110]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[70521-70527]:Modifier[70631-70637]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[70528-70532]:SimpleType[70638-70642]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[70533-70540]:SimpleName[70643-70650]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[70548-70575]:SingleVariableDeclaration[70658-70685]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[70577-70588]:SingleVariableDeclaration[70687-70698]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[70596-70610]:SingleVariableDeclaration[70706-70720]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[70612-70631]:SingleVariableDeclaration[70722-70741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70633-70777]:Block[70743-70887]"
  }, {
    "left" : "Node nameNode = newName(convention, name, basisNode);",
    "right" : "Node nameNode = newName(convention, name, basisNode);",
    "info" : "VariableDeclarationStatement[70639-70692]:VariableDeclarationStatement[70749-70802]"
  }, {
    "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "info" : "ExpressionStatement[70697-70752]:ExpressionStatement[70807-70862]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[70757-70773]:ReturnStatement[70867-70883]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71377-71383]:Modifier[71487-71493]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[71384-71391]:PrimitiveType[71494-71501]"
  }, {
    "left" : "isLatin",
    "right" : "isLatin",
    "info" : "SimpleName[71392-71399]:SimpleName[71502-71509]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[71400-71408]:SingleVariableDeclaration[71510-71518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71410-71648]:Block[71520-71758]"
  }, {
    "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
    "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
    "info" : "VariableDeclarationStatement[71416-71448]:VariableDeclarationStatement[71526-71558]"
  }, {
    "left" : "int len = s.length();",
    "right" : "int len = s.length();",
    "info" : "VariableDeclarationStatement[71453-71474]:VariableDeclarationStatement[71563-71584]"
  }, {
    "left" : "for (int index = 0; index < len; index++)",
    "right" : "for (int index = 0; index < len; index++)",
    "info" : "ForStatement[71479-71627]:ForStatement[71589-71737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71521-71627]:Block[71631-71737]"
  }, {
    "left" : "char c = s.charAt(index);",
    "right" : "char c = s.charAt(index);",
    "info" : "VariableDeclarationStatement[71529-71554]:VariableDeclarationStatement[71639-71664]"
  }, {
    "left" : "if (c > LARGEST_BASIC_LATIN)",
    "right" : "if (c > LARGEST_BASIC_LATIN)",
    "info" : "IfStatement[71561-71621]:IfStatement[71671-71731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71590-71621]:Block[71700-71731]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[71600-71613]:ReturnStatement[71710-71723]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[71632-71644]:ReturnStatement[71742-71754]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71804-71810]:Modifier[71914-71920]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[71811-71818]:PrimitiveType[71921-71928]"
  }, {
    "left" : "isValidPropertyName",
    "right" : "isValidPropertyName",
    "info" : "SimpleName[71819-71838]:SimpleName[71929-71948]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[71839-71850]:SingleVariableDeclaration[71949-71960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71852-72313]:Block[71962-72423]"
  }, {
    "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
    "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
    "info" : "ReturnStatement[71858-72309]:ReturnStatement[71968-72419]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72317-72324]:Modifier[72427-72434]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[72325-72331]:Modifier[72435-72441]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[72332-72337]:TYPE_DECLARATION_KIND[72442-72447]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[72437-72443]:Modifier[72547-72553]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[72444-72448]:PrimitiveType[72554-72558]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[72449-72454]:SimpleName[72559-72564]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[72455-72461]:SingleVariableDeclaration[72565-72571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72463-72750]:Block[72573-72860]"
  }, {
    "left" : "if (n.getType() == Token.NAME)",
    "right" : "if (n.getType() == Token.NAME)",
    "info" : "IfStatement[72471-72744]:IfStatement[72581-72854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72502-72744]:Block[72612-72854]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[72512-72540]:VariableDeclarationStatement[72622-72650]"
  }, {
    "left" : "if (parent != null && parent.getType() == Token.VAR)",
    "right" : "if (parent != null && parent.getType() == Token.VAR)",
    "info" : "IfStatement[72549-72736]:IfStatement[72659-72846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72602-72736]:Block[72712-72846]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[72614-72642]:VariableDeclarationStatement[72724-72752]"
  }, {
    "left" : "if (!vars.containsKey(name))",
    "right" : "if (!vars.containsKey(name))",
    "info" : "IfStatement[72653-72726]:IfStatement[72763-72836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72682-72726]:Block[72792-72836]"
  }, {
    "left" : "vars.put(name, n);",
    "right" : "vars.put(name, n);",
    "info" : "ExpressionStatement[72696-72714]:ExpressionStatement[72806-72824]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[72851-72857]:Modifier[72961-72967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[72858-72864]:Modifier[72968-72974]"
  }, {
    "left" : "Collection<Node>",
    "right" : "Collection<Node>",
    "info" : "ParameterizedType[72865-72881]:ParameterizedType[72975-72991]"
  }, {
    "left" : "getVarsDeclaredInBranch",
    "right" : "getVarsDeclaredInBranch",
    "info" : "SimpleName[72882-72905]:SimpleName[72992-73015]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[72906-72915]:SingleVariableDeclaration[73016-73025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72917-73092]:Block[73027-73202]"
  }, {
    "left" : "VarCollector collector = new VarCollector();",
    "right" : "VarCollector collector = new VarCollector();",
    "info" : "VariableDeclarationStatement[72923-72967]:VariableDeclarationStatement[73033-73077]"
  }, {
    "left" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
    "right" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
    "info" : "ExpressionStatement[72972-73052]:ExpressionStatement[73082-73162]"
  }, {
    "left" : "return collector.vars.values();",
    "right" : "return collector.vars.values();",
    "info" : "ReturnStatement[73057-73088]:ReturnStatement[73167-73198]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[73214-73220]:Modifier[73324-73330]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[73221-73228]:PrimitiveType[73331-73338]"
  }, {
    "left" : "isPrototypePropertyDeclaration",
    "right" : "isPrototypePropertyDeclaration",
    "info" : "SimpleName[73229-73259]:SimpleName[73339-73369]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[73260-73266]:SingleVariableDeclaration[73370-73376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73268-73394]:Block[73378-73504]"
  }, {
    "left" : "if (!isExprAssign(n))",
    "right" : "if (!isExprAssign(n))",
    "info" : "IfStatement[73274-73323]:IfStatement[73384-73433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73296-73323]:Block[73406-73433]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[73304-73317]:ReturnStatement[73414-73427]"
  }, {
    "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
    "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
    "info" : "ReturnStatement[73328-73390]:ReturnStatement[73438-73500]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[73398-73404]:Modifier[73508-73514]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[73405-73412]:PrimitiveType[73515-73522]"
  }, {
    "left" : "isPrototypeProperty",
    "right" : "isPrototypeProperty",
    "info" : "SimpleName[73413-73432]:SimpleName[73523-73542]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[73433-73439]:SingleVariableDeclaration[73543-73549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73441-73634]:Block[73551-73744]"
  }, {
    "left" : "String lhsString = n.getQualifiedName();",
    "right" : "String lhsString = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[73447-73487]:VariableDeclarationStatement[73557-73597]"
  }, {
    "left" : "if (lhsString == null)",
    "right" : "if (lhsString == null)",
    "info" : "IfStatement[73492-73542]:IfStatement[73602-73652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73515-73542]:Block[73625-73652]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[73523-73536]:ReturnStatement[73633-73646]"
  }, {
    "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
    "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
    "info" : "VariableDeclarationStatement[73547-73599]:VariableDeclarationStatement[73657-73709]"
  }, {
    "left" : "return prototypeIdx != -1;",
    "right" : "return prototypeIdx != -1;",
    "info" : "ReturnStatement[73604-73630]:ReturnStatement[73714-73740]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[73714-73720]:Modifier[73824-73830]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[73721-73725]:SimpleType[73831-73835]"
  }, {
    "left" : "getPrototypeClassName",
    "right" : "getPrototypeClassName",
    "info" : "SimpleName[73726-73747]:SimpleName[73836-73857]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[73748-73758]:SingleVariableDeclaration[73858-73868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73760-73997]:Block[73870-74107]"
  }, {
    "left" : "Node cur = qName;",
    "right" : "Node cur = qName;",
    "info" : "VariableDeclarationStatement[73766-73783]:VariableDeclarationStatement[73876-73893]"
  }, {
    "left" : "while (isGetProp(cur))",
    "right" : "while (isGetProp(cur))",
    "info" : "WhileStatement[73788-73976]:WhileStatement[73898-74086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73811-73976]:Block[73921-74086]"
  }, {
    "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
    "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
    "info" : "IfStatement[73819-73970]:IfStatement[73929-74080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73875-73920]:Block[73985-74030]"
  }, {
    "left" : "return cur.getFirstChild();",
    "right" : "return cur.getFirstChild();",
    "info" : "ReturnStatement[73885-73912]:ReturnStatement[73995-74022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73926-73970]:Block[74036-74080]"
  }, {
    "left" : "cur = cur.getFirstChild();",
    "right" : "cur = cur.getFirstChild();",
    "info" : "ExpressionStatement[73936-73962]:ExpressionStatement[74046-74072]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[73981-73993]:ReturnStatement[74091-74103]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74087-74093]:Modifier[74197-74203]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[74094-74100]:SimpleType[74204-74210]"
  }, {
    "left" : "getPrototypePropertyName",
    "right" : "getPrototypePropertyName",
    "info" : "SimpleName[74101-74125]:SimpleName[74211-74235]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[74126-74136]:SingleVariableDeclaration[74236-74246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74138-74359]:Block[74248-74469]"
  }, {
    "left" : "String qNameStr = qName.getQualifiedName();",
    "right" : "String qNameStr = qName.getQualifiedName();",
    "info" : "VariableDeclarationStatement[74144-74187]:VariableDeclarationStatement[74254-74297]"
  }, {
    "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
    "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
    "info" : "VariableDeclarationStatement[74192-74247]:VariableDeclarationStatement[74302-74357]"
  }, {
    "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
    "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
    "info" : "VariableDeclarationStatement[74252-74311]:VariableDeclarationStatement[74362-74421]"
  }, {
    "left" : "return qNameStr.substring(memberIndex);",
    "right" : "return qNameStr.substring(memberIndex);",
    "info" : "ReturnStatement[74316-74355]:ReturnStatement[74426-74465]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74442-74448]:Modifier[74552-74558]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[74449-74453]:SimpleType[74559-74563]"
  }, {
    "left" : "newUndefinedNode",
    "right" : "newUndefinedNode",
    "info" : "SimpleName[74454-74470]:SimpleName[74564-74580]"
  }, {
    "left" : "Node srcReferenceNode",
    "right" : "Node srcReferenceNode",
    "info" : "SingleVariableDeclaration[74471-74492]:SingleVariableDeclaration[74581-74602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74494-74674]:Block[74604-74784]"
  }, {
    "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
    "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
    "info" : "VariableDeclarationStatement[74500-74552]:VariableDeclarationStatement[74610-74662]"
  }, {
    "left" : "if (srcReferenceNode != null)",
    "right" : "if (srcReferenceNode != null)",
    "info" : "IfStatement[74557-74653]:IfStatement[74667-74763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74587-74653]:Block[74697-74763]"
  }, {
    "left" : "node.copyInformationFromForTree(srcReferenceNode);",
    "right" : "node.copyInformationFromForTree(srcReferenceNode);",
    "info" : "ExpressionStatement[74597-74647]:ExpressionStatement[74707-74757]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[74658-74670]:ReturnStatement[74768-74780]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74769-74775]:Modifier[74879-74885]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[74776-74780]:SimpleType[74886-74890]"
  }, {
    "left" : "newVarNode",
    "right" : "newVarNode",
    "info" : "SimpleName[74781-74791]:SimpleName[74891-74901]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[74792-74803]:SingleVariableDeclaration[74902-74913]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[74805-74815]:SingleVariableDeclaration[74915-74925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74817-75147]:Block[74927-75257]"
  }, {
    "left" : "Node nodeName = Node.newString(Token.NAME, name);",
    "right" : "Node nodeName = Node.newString(Token.NAME, name);",
    "info" : "VariableDeclarationStatement[74823-74872]:VariableDeclarationStatement[74933-74982]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[74877-75041]:IfStatement[74987-75151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74896-75041]:Block[75006-75151]"
  }, {
    "left" : "Preconditions.checkState(value.getNext() == null);",
    "right" : "Preconditions.checkState(value.getNext() == null);",
    "info" : "ExpressionStatement[74904-74954]:ExpressionStatement[75014-75064]"
  }, {
    "left" : "nodeName.addChildToBack(value);",
    "right" : "nodeName.addChildToBack(value);",
    "info" : "ExpressionStatement[74961-74992]:ExpressionStatement[75071-75102]"
  }, {
    "left" : "nodeName.copyInformationFrom(value);",
    "right" : "nodeName.copyInformationFrom(value);",
    "info" : "ExpressionStatement[74999-75035]:ExpressionStatement[75109-75145]"
  }, {
    "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
    "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
    "info" : "VariableDeclarationStatement[75046-75126]:VariableDeclarationStatement[75156-75236]"
  }, {
    "left" : "return var;",
    "right" : "return var;",
    "info" : "ReturnStatement[75132-75143]:ReturnStatement[75242-75253]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[75229-75236]:Modifier[75339-75346]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75237-75243]:Modifier[75347-75353]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[75244-75249]:TYPE_DECLARATION_KIND[75354-75359]"
  }, {
    "left" : "MatchNameNode",
    "right" : "MatchNameNode",
    "info" : "SimpleName[75320-75333]:SimpleName[75430-75443]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[75334-75345]:SingleVariableDeclaration[75444-75455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75346-75377]:Block[75456-75487]"
  }, {
    "left" : "this.name = name;",
    "right" : "this.name = name;",
    "info" : "ExpressionStatement[75354-75371]:ExpressionStatement[75464-75481]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[75383-75389]:Modifier[75493-75499]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[75390-75397]:PrimitiveType[75500-75507]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[75398-75403]:SimpleName[75508-75513]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[75404-75410]:SingleVariableDeclaration[75514-75520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75412-75499]:Block[75522-75609]"
  }, {
    "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
    "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
    "info" : "ReturnStatement[75420-75493]:ReturnStatement[75530-75603]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75580-75586]:Modifier[75690-75696]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[75587-75592]:TYPE_DECLARATION_KIND[75697-75702]"
  }, {
    "left" : "MatchNodeType",
    "right" : "MatchNodeType",
    "info" : "SimpleName[75660-75673]:SimpleName[75770-75783]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[75674-75682]:SingleVariableDeclaration[75784-75792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75683-75714]:Block[75793-75824]"
  }, {
    "left" : "this.type = type;",
    "right" : "this.type = type;",
    "info" : "ExpressionStatement[75691-75708]:ExpressionStatement[75801-75818]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[75720-75726]:Modifier[75830-75836]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[75727-75734]:PrimitiveType[75837-75844]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[75735-75740]:SimpleName[75845-75850]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[75741-75747]:SingleVariableDeclaration[75851-75857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75749-75790]:Block[75859-75900]"
  }, {
    "left" : "return n.getType() == type;",
    "right" : "return n.getType() == type;",
    "info" : "ReturnStatement[75757-75784]:ReturnStatement[75867-75894]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75871-75877]:Modifier[75981-75987]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[75878-75883]:TYPE_DECLARATION_KIND[75988-75993]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[75934-75940]:Modifier[76044-76050]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[75941-75948]:PrimitiveType[76051-76058]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[75949-75954]:SimpleName[76059-76064]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[75955-75961]:SingleVariableDeclaration[76065-76071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75963-76037]:Block[76073-76147]"
  }, {
    "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
    "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
    "info" : "ReturnStatement[75971-76031]:ReturnStatement[76081-76141]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[76119-76125]:Modifier[76229-76235]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[76126-76131]:TYPE_DECLARATION_KIND[76236-76241]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[76181-76187]:Modifier[76291-76297]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[76188-76195]:PrimitiveType[76298-76305]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[76196-76201]:SimpleName[76306-76311]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[76202-76208]:SingleVariableDeclaration[76312-76318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76210-76246]:Block[76320-76356]"
  }, {
    "left" : "return !isFunction(n);",
    "right" : "return !isFunction(n);",
    "info" : "ReturnStatement[76218-76240]:ReturnStatement[76328-76350]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[76342-76348]:Modifier[76452-76458]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[76349-76354]:TYPE_DECLARATION_KIND[76459-76464]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[76409-76415]:Modifier[76519-76525]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[76416-76423]:PrimitiveType[76526-76533]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[76424-76429]:SimpleName[76534-76539]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[76430-76436]:SingleVariableDeclaration[76540-76546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76438-76657]:Block[76548-76767]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[76446-76474]:VariableDeclarationStatement[76556-76584]"
  }, {
    "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
    "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
    "info" : "ReturnStatement[76481-76651]:ReturnStatement[76591-76761]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[76751-76757]:Modifier[76861-76867]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[76758-76761]:PrimitiveType[76868-76871]"
  }, {
    "left" : "getNodeTypeReferenceCount",
    "right" : "getNodeTypeReferenceCount",
    "info" : "SimpleName[76762-76787]:SimpleName[76872-76897]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[76795-76804]:SingleVariableDeclaration[76905-76914]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[76806-76814]:SingleVariableDeclaration[76916-76924]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[76816-76852]:SingleVariableDeclaration[76926-76962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76854-76933]:Block[76964-77043]"
  }, {
    "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
    "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
    "info" : "ReturnStatement[76860-76929]:ReturnStatement[76970-77039]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77012-77018]:Modifier[77122-77128]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[77019-77026]:PrimitiveType[77129-77136]"
  }, {
    "left" : "isNameReferenced",
    "right" : "isNameReferenced",
    "info" : "SimpleName[77027-77043]:SimpleName[77137-77153]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[77044-77053]:SingleVariableDeclaration[77154-77163]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[77089-77100]:SingleVariableDeclaration[77199-77210]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[77136-77172]:SingleVariableDeclaration[77246-77282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77174-77248]:Block[77284-77358]"
  }, {
    "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
    "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
    "info" : "ReturnStatement[77180-77244]:ReturnStatement[77290-77354]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77327-77333]:Modifier[77437-77443]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[77334-77341]:PrimitiveType[77444-77451]"
  }, {
    "left" : "isNameReferenced",
    "right" : "isNameReferenced",
    "info" : "SimpleName[77342-77358]:SimpleName[77452-77468]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[77359-77368]:SingleVariableDeclaration[77469-77478]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[77370-77381]:SingleVariableDeclaration[77480-77491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77383-77460]:Block[77493-77570]"
  }, {
    "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
    "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[77389-77456]:ReturnStatement[77499-77566]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77557-77563]:Modifier[77667-77673]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[77564-77567]:PrimitiveType[77674-77677]"
  }, {
    "left" : "getNameReferenceCount",
    "right" : "getNameReferenceCount",
    "info" : "SimpleName[77568-77589]:SimpleName[77678-77699]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[77590-77599]:SingleVariableDeclaration[77700-77709]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[77601-77612]:SingleVariableDeclaration[77711-77722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77614-77711]:Block[77724-77821]"
  }, {
    "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
    "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[77620-77707]:ReturnStatement[77730-77817]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[77807-77813]:Modifier[77917-77923]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[77814-77821]:PrimitiveType[77924-77931]"
  }, {
    "left" : "has",
    "right" : "has",
    "info" : "SimpleName[77822-77825]:SimpleName[77932-77935]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[77826-77835]:SingleVariableDeclaration[77936-77945]"
  }, {
    "left" : "Predicate<Node> pred",
    "right" : "Predicate<Node> pred",
    "info" : "SingleVariableDeclaration[77858-77878]:SingleVariableDeclaration[77968-77988]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[77901-77937]:SingleVariableDeclaration[78011-78047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77939-78242]:Block[78049-78352]"
  }, {
    "left" : "if (pred.apply(node))",
    "right" : "if (pred.apply(node))",
    "info" : "IfStatement[77945-77993]:IfStatement[78055-78103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77967-77993]:Block[78077-78103]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[77975-77987]:ReturnStatement[78085-78097]"
  }, {
    "left" : "if (!traverseChildrenPred.apply(node))",
    "right" : "if (!traverseChildrenPred.apply(node))",
    "info" : "IfStatement[77999-78065]:IfStatement[78109-78175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78038-78065]:Block[78148-78175]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[78046-78059]:ReturnStatement[78156-78169]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[78071-78219]:ForStatement[78181-78329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78135-78219]:Block[78245-78329]"
  }, {
    "left" : "if (has(c, pred, traverseChildrenPred))",
    "right" : "if (has(c, pred, traverseChildrenPred))",
    "info" : "IfStatement[78143-78213]:IfStatement[78253-78323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78183-78213]:Block[78293-78323]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[78193-78205]:ReturnStatement[78303-78315]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[78225-78238]:ReturnStatement[78335-78348]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[78359-78365]:Modifier[78469-78475]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[78366-78369]:PrimitiveType[78476-78479]"
  }, {
    "left" : "getCount",
    "right" : "getCount",
    "info" : "SimpleName[78370-78378]:SimpleName[78480-78488]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[78386-78392]:SingleVariableDeclaration[78496-78502]"
  }, {
    "left" : "Predicate<Node> pred",
    "right" : "Predicate<Node> pred",
    "info" : "SingleVariableDeclaration[78394-78414]:SingleVariableDeclaration[78504-78524]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[78416-78452]:SingleVariableDeclaration[78526-78562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78454-78727]:Block[78564-78837]"
  }, {
    "left" : "int total = 0;",
    "right" : "int total = 0;",
    "info" : "VariableDeclarationStatement[78460-78474]:VariableDeclarationStatement[78570-78584]"
  }, {
    "left" : "if (pred.apply(n))",
    "right" : "if (pred.apply(n))",
    "info" : "IfStatement[78480-78521]:IfStatement[78590-78631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78499-78521]:Block[78609-78631]"
  }, {
    "left" : "total++;",
    "right" : "total++;",
    "info" : "ExpressionStatement[78507-78515]:ExpressionStatement[78617-78625]"
  }, {
    "left" : "if (traverseChildrenPred.apply(n))",
    "right" : "if (traverseChildrenPred.apply(n))",
    "info" : "IfStatement[78527-78704]:IfStatement[78637-78814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78562-78704]:Block[78672-78814]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[78570-78698]:ForStatement[78680-78808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78631-78698]:Block[78741-78808]"
  }, {
    "left" : "total += getCount(c, pred, traverseChildrenPred);",
    "right" : "total += getCount(c, pred, traverseChildrenPred);",
    "info" : "ExpressionStatement[78641-78690]:ExpressionStatement[78751-78800]"
  }, {
    "left" : "return total;",
    "right" : "return total;",
    "info" : "ReturnStatement[78710-78723]:ReturnStatement[78820-78833]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[78806-78812]:Modifier[78916-78922]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[78813-78822]:TYPE_DECLARATION_KIND[78923-78932]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[78837-78841]:PrimitiveType[78947-78951]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[78842-78847]:SimpleName[78952-78957]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[78848-78857]:SingleVariableDeclaration[78958-78967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[78972-78978]:Modifier[79082-79088]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[78979-78983]:PrimitiveType[79089-79093]"
  }, {
    "left" : "visitPreOrder",
    "right" : "visitPreOrder",
    "info" : "SimpleName[78984-78997]:SimpleName[79094-79107]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[78998-79007]:SingleVariableDeclaration[79108-79117]"
  }, {
    "left" : "Visitor vistor",
    "right" : "Visitor vistor",
    "info" : "SingleVariableDeclaration[79030-79044]:SingleVariableDeclaration[79140-79154]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[79067-79103]:SingleVariableDeclaration[79177-79213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79105-79321]:Block[79215-79431]"
  }, {
    "left" : "vistor.visit(node);",
    "right" : "vistor.visit(node);",
    "info" : "ExpressionStatement[79111-79130]:ExpressionStatement[79221-79240]"
  }, {
    "left" : "if (traverseChildrenPred.apply(node))",
    "right" : "if (traverseChildrenPred.apply(node))",
    "info" : "IfStatement[79136-79317]:IfStatement[79246-79427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79174-79317]:Block[79284-79427]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[79182-79311]:ForStatement[79292-79421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79246-79311]:Block[79356-79421]"
  }, {
    "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
    "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
    "info" : "ExpressionStatement[79256-79303]:ExpressionStatement[79366-79413]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[79431-79437]:Modifier[79541-79547]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[79438-79442]:PrimitiveType[79548-79552]"
  }, {
    "left" : "visitPostOrder",
    "right" : "visitPostOrder",
    "info" : "SimpleName[79443-79457]:SimpleName[79553-79567]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[79458-79467]:SingleVariableDeclaration[79568-79577]"
  }, {
    "left" : "Visitor vistor",
    "right" : "Visitor vistor",
    "info" : "SingleVariableDeclaration[79490-79504]:SingleVariableDeclaration[79600-79614]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[79527-79563]:SingleVariableDeclaration[79637-79673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79565-79782]:Block[79675-79892]"
  }, {
    "left" : "if (traverseChildrenPred.apply(node))",
    "right" : "if (traverseChildrenPred.apply(node))",
    "info" : "IfStatement[79571-79753]:IfStatement[79681-79863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79609-79753]:Block[79719-79863]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[79617-79747]:ForStatement[79727-79857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79681-79747]:Block[79791-79857]"
  }, {
    "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
    "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
    "info" : "ExpressionStatement[79691-79739]:ExpressionStatement[79801-79849]"
  }, {
    "left" : "vistor.visit(node);",
    "right" : "vistor.visit(node);",
    "info" : "ExpressionStatement[79759-79778]:ExpressionStatement[79869-79888]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[79851-79857]:Modifier[79961-79967]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[79858-79865]:PrimitiveType[79968-79975]"
  }, {
    "left" : "hasFinally",
    "right" : "hasFinally",
    "info" : "SimpleName[79866-79876]:SimpleName[79976-79986]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[79877-79883]:SingleVariableDeclaration[79987-79993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79885-79984]:Block[79995-80094]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "info" : "ExpressionStatement[79891-79945]:ExpressionStatement[80001-80055]"
  }, {
    "left" : "return n.getChildCount() == 3;",
    "right" : "return n.getChildCount() == 3;",
    "info" : "ReturnStatement[79950-79980]:ReturnStatement[80060-80090]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[80078-80084]:Modifier[80188-80194]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[80085-80089]:SimpleType[80195-80199]"
  }, {
    "left" : "getCatchBlock",
    "right" : "getCatchBlock",
    "info" : "SimpleName[80090-80103]:SimpleName[80200-80213]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[80104-80110]:SingleVariableDeclaration[80214-80220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80112-80216]:Block[80222-80326]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "info" : "ExpressionStatement[80118-80172]:ExpressionStatement[80228-80282]"
  }, {
    "left" : "return n.getFirstChild().getNext();",
    "right" : "return n.getFirstChild().getNext();",
    "info" : "ReturnStatement[80177-80212]:ReturnStatement[80287-80322]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[80328-80334]:Modifier[80438-80444]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[80335-80342]:PrimitiveType[80445-80452]"
  }, {
    "left" : "hasCatchHandler",
    "right" : "hasCatchHandler",
    "info" : "SimpleName[80343-80358]:SimpleName[80453-80468]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[80359-80365]:SingleVariableDeclaration[80469-80475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80367-80507]:Block[80477-80617]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[80373-80429]:ExpressionStatement[80483-80539]"
  }, {
    "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
    "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
    "info" : "ReturnStatement[80434-80503]:ReturnStatement[80544-80613]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[80617-80623]:Modifier[80727-80733]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[80624-80628]:SimpleType[80734-80738]"
  }, {
    "left" : "getFnParameters",
    "right" : "getFnParameters",
    "info" : "SimpleName[80629-80644]:SimpleName[80739-80754]"
  }, {
    "left" : "Node fnNode",
    "right" : "Node fnNode",
    "info" : "SingleVariableDeclaration[80645-80656]:SingleVariableDeclaration[80755-80766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80658-80843]:Block[80768-80953]"
  }, {
    "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[80730-80794]:ExpressionStatement[80840-80904]"
  }, {
    "left" : "return fnNode.getFirstChild().getNext();",
    "right" : "return fnNode.getFirstChild().getNext();",
    "info" : "ReturnStatement[80799-80839]:ReturnStatement[80909-80949]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[81549-81555]:Modifier[81659-81665]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[81556-81563]:PrimitiveType[81666-81673]"
  }, {
    "left" : "isConstantName",
    "right" : "isConstantName",
    "info" : "SimpleName[81564-81578]:SimpleName[81674-81688]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[81579-81588]:SingleVariableDeclaration[81689-81698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81590-81650]:Block[81700-81760]"
  }, {
    "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
    "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
    "info" : "ReturnStatement[81596-81646]:ReturnStatement[81706-81756]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[81720-81726]:Modifier[81830-81836]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[81727-81734]:PrimitiveType[81837-81844]"
  }, {
    "left" : "isConstantByConvention",
    "right" : "isConstantByConvention",
    "info" : "SimpleName[81735-81757]:SimpleName[81845-81867]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[81765-81792]:SingleVariableDeclaration[81875-81902]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[81794-81803]:SingleVariableDeclaration[81904-81913]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[81805-81816]:SingleVariableDeclaration[81915-81926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81818-82143]:Block[81928-82253]"
  }, {
    "left" : "String name = node.getString();",
    "right" : "String name = node.getString();",
    "info" : "VariableDeclarationStatement[81824-81855]:VariableDeclarationStatement[81934-81965]"
  }, {
    "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
    "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
    "info" : "IfStatement[81860-82139]:IfStatement[81970-82249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81940-81992]:Block[82050-82102]"
  }, {
    "left" : "return convention.isConstantKey(name);",
    "right" : "return convention.isConstantKey(name);",
    "info" : "ReturnStatement[81948-81986]:ReturnStatement[82058-82096]"
  }, {
    "left" : "if (isObjectLitKey(node, parent))",
    "right" : "if (isObjectLitKey(node, parent))",
    "info" : "IfStatement[81998-82139]:IfStatement[82108-82249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82032-82084]:Block[82142-82194]"
  }, {
    "left" : "return convention.isConstantKey(name);",
    "right" : "return convention.isConstantKey(name);",
    "info" : "ReturnStatement[82040-82078]:ReturnStatement[82150-82188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82090-82139]:Block[82200-82249]"
  }, {
    "left" : "return convention.isConstant(name);",
    "right" : "return convention.isConstant(name);",
    "info" : "ReturnStatement[82098-82133]:ReturnStatement[82208-82243]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[82237-82243]:Modifier[82347-82353]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[82244-82253]:SimpleType[82354-82363]"
  }, {
    "left" : "getInfoForNameNode",
    "right" : "getInfoForNameNode",
    "info" : "SimpleName[82254-82272]:SimpleName[82364-82382]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[82273-82286]:SingleVariableDeclaration[82383-82396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82288-82672]:Block[82398-82782]"
  }, {
    "left" : "JSDocInfo info = null;",
    "right" : "JSDocInfo info = null;",
    "info" : "VariableDeclarationStatement[82294-82316]:VariableDeclarationStatement[82404-82426]"
  }, {
    "left" : "Node parent = null;",
    "right" : "Node parent = null;",
    "info" : "VariableDeclarationStatement[82321-82340]:VariableDeclarationStatement[82431-82450]"
  }, {
    "left" : "if (nameNode != null)",
    "right" : "if (nameNode != null)",
    "info" : "IfStatement[82345-82449]:IfStatement[82455-82559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82367-82449]:Block[82477-82559]"
  }, {
    "left" : "info = nameNode.getJSDocInfo();",
    "right" : "info = nameNode.getJSDocInfo();",
    "info" : "ExpressionStatement[82375-82406]:ExpressionStatement[82485-82516]"
  }, {
    "left" : "parent = nameNode.getParent();",
    "right" : "parent = nameNode.getParent();",
    "info" : "ExpressionStatement[82413-82443]:ExpressionStatement[82523-82553]"
  }, {
    "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
    "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
    "info" : "IfStatement[82455-82651]:IfStatement[82565-82761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82608-82651]:Block[82718-82761]"
  }, {
    "left" : "info = parent.getJSDocInfo();",
    "right" : "info = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[82616-82645]:ExpressionStatement[82726-82755]"
  }, {
    "left" : "return info;",
    "right" : "return info;",
    "info" : "ReturnStatement[82656-82668]:ReturnStatement[82766-82778]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[82727-82733]:Modifier[82837-82843]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[82734-82743]:SimpleType[82844-82853]"
  }, {
    "left" : "getFunctionInfo",
    "right" : "getFunctionInfo",
    "info" : "SimpleName[82744-82759]:SimpleName[82854-82869]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[82760-82766]:SingleVariableDeclaration[82870-82876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82768-83304]:Block[82878-83414]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[82774-82830]:ExpressionStatement[82884-82940]"
  }, {
    "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
    "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[82835-82871]:VariableDeclarationStatement[82945-82981]"
  }, {
    "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
    "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
    "info" : "IfStatement[82876-83281]:IfStatement[82986-83391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82932-83281]:Block[83042-83391]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[82983-83011]:VariableDeclarationStatement[83093-83121]"
  }, {
    "left" : "if (parent.getType() == Token.ASSIGN)",
    "right" : "if (parent.getType() == Token.ASSIGN)",
    "info" : "IfStatement[83018-83275]:IfStatement[83128-83385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83056-83127]:Block[83166-83237]"
  }, {
    "left" : "fnInfo = parent.getJSDocInfo();",
    "right" : "fnInfo = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[83088-83119]:ExpressionStatement[83198-83229]"
  }, {
    "left" : "if (parent.getType() == Token.NAME)",
    "right" : "if (parent.getType() == Token.NAME)",
    "info" : "IfStatement[83133-83275]:IfStatement[83243-83385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83169-83275]:Block[83279-83385]"
  }, {
    "left" : "fnInfo = parent.getParent().getJSDocInfo();",
    "right" : "fnInfo = parent.getParent().getJSDocInfo();",
    "info" : "ExpressionStatement[83224-83267]:ExpressionStatement[83334-83377]"
  }, {
    "left" : "return fnInfo;",
    "right" : "return fnInfo;",
    "info" : "ReturnStatement[83286-83300]:ReturnStatement[83396-83410]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[83412-83418]:Modifier[83522-83528]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[83419-83425]:SimpleType[83529-83535]"
  }, {
    "left" : "getSourceName",
    "right" : "getSourceName",
    "info" : "SimpleName[83426-83439]:SimpleName[83536-83549]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[83440-83446]:SingleVariableDeclaration[83550-83556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83448-83644]:Block[83558-83754]"
  }, {
    "left" : "String sourceName = null;",
    "right" : "String sourceName = null;",
    "info" : "VariableDeclarationStatement[83454-83479]:VariableDeclarationStatement[83564-83589]"
  }, {
    "left" : "while (sourceName == null && n != null)",
    "right" : "while (sourceName == null && n != null)",
    "info" : "WhileStatement[83484-83617]:WhileStatement[83594-83727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83524-83617]:Block[83634-83727]"
  }, {
    "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "info" : "ExpressionStatement[83532-83586]:ExpressionStatement[83642-83696]"
  }, {
    "left" : "n = n.getParent();",
    "right" : "n = n.getParent();",
    "info" : "ExpressionStatement[83593-83611]:ExpressionStatement[83703-83721]"
  }, {
    "left" : "return sourceName;",
    "right" : "return sourceName;",
    "info" : "ReturnStatement[83622-83640]:ReturnStatement[83732-83750]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[83728-83734]:Modifier[83838-83844]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[83735-83739]:SimpleType[83845-83849]"
  }, {
    "left" : "newCallNode",
    "right" : "newCallNode",
    "info" : "SimpleName[83740-83751]:SimpleName[83850-83861]"
  }, {
    "left" : "Node callTarget",
    "right" : "Node callTarget",
    "info" : "SingleVariableDeclaration[83752-83767]:SingleVariableDeclaration[83862-83877]"
  }, {
    "left" : "Node... parameters",
    "right" : "Node... parameters",
    "info" : "SingleVariableDeclaration[83769-83787]:SingleVariableDeclaration[83879-83897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83789-84043]:Block[83899-84153]"
  }, {
    "left" : "boolean isFreeCall = isName(callTarget);",
    "right" : "boolean isFreeCall = isName(callTarget);",
    "info" : "VariableDeclarationStatement[83795-83835]:VariableDeclarationStatement[83905-83945]"
  }, {
    "left" : "Node call = new Node(Token.CALL, callTarget);",
    "right" : "Node call = new Node(Token.CALL, callTarget);",
    "info" : "VariableDeclarationStatement[83840-83885]:VariableDeclarationStatement[83950-83995]"
  }, {
    "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
    "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
    "info" : "ExpressionStatement[83890-83938]:ExpressionStatement[84000-84048]"
  }, {
    "left" : "for (Node parameter : parameters)",
    "right" : "for (Node parameter : parameters)",
    "info" : "EnhancedForStatement[83943-84022]:EnhancedForStatement[84053-84132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83977-84022]:Block[84087-84132]"
  }, {
    "left" : "call.addChildToBack(parameter);",
    "right" : "call.addChildToBack(parameter);",
    "info" : "ExpressionStatement[83985-84016]:ExpressionStatement[84095-84126]"
  }, {
    "left" : "return call;",
    "right" : "return call;",
    "info" : "ReturnStatement[84027-84039]:ReturnStatement[84137-84149]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[84151-84157]:Modifier[84261-84267]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[84158-84165]:PrimitiveType[84268-84275]"
  }, {
    "left" : "evaluatesToLocalValue",
    "right" : "evaluatesToLocalValue",
    "info" : "SimpleName[84166-84187]:SimpleName[84276-84297]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[84188-84198]:SingleVariableDeclaration[84298-84308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84200-84278]:Block[84310-84388]"
  }, {
    "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
    "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
    "info" : "ReturnStatement[84206-84274]:ReturnStatement[84316-84384]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[84475-84481]:Modifier[84585-84591]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[84482-84489]:PrimitiveType[84592-84599]"
  }, {
    "left" : "evaluatesToLocalValue",
    "right" : "evaluatesToLocalValue",
    "info" : "SimpleName[84490-84511]:SimpleName[84600-84621]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[84512-84522]:SingleVariableDeclaration[84622-84632]"
  }, {
    "left" : "Predicate<Node> locals",
    "right" : "Predicate<Node> locals",
    "info" : "SingleVariableDeclaration[84524-84546]:SingleVariableDeclaration[84634-84656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84548-86971]:Block[84658-87081]"
  }, {
    "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
    "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
    "info" : "SwitchStatement[84554-86967]:SwitchStatement[84664-87077]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[84587-84605]:SwitchCase[84697-84715]"
  }, {
    "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
    "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
    "info" : "ReturnStatement[84803-84966]:ReturnStatement[84913-85076]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[84973-84990]:SwitchCase[85083-85100]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[84999-85058]:ReturnStatement[85109-85168]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[85065-85080]:SwitchCase[85175-85190]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[85087-85101]:SwitchCase[85197-85211]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[85110-85236]:ReturnStatement[85220-85346]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[85243-85259]:SwitchCase[85353-85369]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[85268-85404]:ReturnStatement[85378-85514]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[85411-85426]:SwitchCase[85521-85536]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[85433-85448]:SwitchCase[85543-85558]"
  }, {
    "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
    "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
    "info" : "IfStatement[85457-85625]:IfStatement[85567-85735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85503-85585]:Block[85613-85695]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
    "info" : "ReturnStatement[85515-85575]:ReturnStatement[85625-85685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85591-85625]:Block[85701-85735]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[85603-85615]:ReturnStatement[85713-85725]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[85632-85648]:SwitchCase[85742-85758]"
  }, {
    "left" : "return locals.apply(value);",
    "right" : "return locals.apply(value);",
    "info" : "ReturnStatement[85657-85684]:ReturnStatement[85767-85794]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[85691-85707]:SwitchCase[85801-85817]"
  }, {
    "left" : "return isImmutableValue(value) || locals.apply(value);",
    "right" : "return isImmutableValue(value) || locals.apply(value);",
    "info" : "ReturnStatement[85716-85770]:ReturnStatement[85826-85880]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[85777-85796]:SwitchCase[85887-85906]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[85803-85822]:SwitchCase[85913-85932]"
  }, {
    "left" : "return locals.apply(value);",
    "right" : "return locals.apply(value);",
    "info" : "ReturnStatement[85907-85934]:ReturnStatement[86017-86044]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[85941-85957]:SwitchCase[86051-86067]"
  }, {
    "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
    "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
    "info" : "ReturnStatement[85966-86077]:ReturnStatement[86076-86187]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[86084-86099]:SwitchCase[86194-86209]"
  }, {
    "left" : "return newHasLocalResult(value)\n               || locals.apply(value);",
    "right" : "return newHasLocalResult(value)\n               || locals.apply(value);",
    "info" : "ReturnStatement[86108-86178]:ReturnStatement[86218-86288]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[86185-86205]:SwitchCase[86295-86315]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[86212-86230]:SwitchCase[86322-86340]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[86237-86257]:SwitchCase[86347-86367]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[86264-86285]:SwitchCase[86374-86395]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[86361-86373]:ReturnStatement[86471-86483]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[86380-86399]:SwitchCase[86490-86509]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[86406-86420]:SwitchCase[86516-86530]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[86509-86521]:ReturnStatement[86619-86631]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[86528-86536]:SwitchCase[86638-86646]"
  }, {
    "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
    "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
    "info" : "IfStatement[86682-86821]:IfStatement[86792-86931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86787-86821]:Block[86897-86931]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[86799-86811]:ReturnStatement[86909-86921]"
  }, {
    "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
    "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
    "info" : "ThrowStatement[86831-86961]:ThrowStatement[86941-87071]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[87165-87172]:Modifier[87275-87282]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[87173-87179]:Modifier[87283-87289]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[87180-87184]:SimpleType[87290-87294]"
  }, {
    "left" : "getNthSibling",
    "right" : "getNthSibling",
    "info" : "SimpleName[87185-87198]:SimpleName[87295-87308]"
  }, {
    "left" : "Node first",
    "right" : "Node first",
    "info" : "SingleVariableDeclaration[87199-87209]:SingleVariableDeclaration[87309-87319]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[87211-87220]:SingleVariableDeclaration[87321-87330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87222-87373]:Block[87332-87483]"
  }, {
    "left" : "Node sibling = first;",
    "right" : "Node sibling = first;",
    "info" : "VariableDeclarationStatement[87228-87249]:VariableDeclarationStatement[87338-87359]"
  }, {
    "left" : "while (index != 0 && sibling != null)",
    "right" : "while (index != 0 && sibling != null)",
    "info" : "WhileStatement[87254-87349]:WhileStatement[87364-87459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87292-87349]:Block[87402-87459]"
  }, {
    "left" : "sibling = sibling.getNext();",
    "right" : "sibling = sibling.getNext();",
    "info" : "ExpressionStatement[87300-87328]:ExpressionStatement[87410-87438]"
  }, {
    "left" : "index--;",
    "right" : "index--;",
    "info" : "ExpressionStatement[87335-87343]:ExpressionStatement[87445-87453]"
  }, {
    "left" : "return sibling;",
    "right" : "return sibling;",
    "info" : "ReturnStatement[87354-87369]:ReturnStatement[87464-87479]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[87486-87492]:Modifier[87596-87602]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[87493-87497]:SimpleType[87603-87607]"
  }, {
    "left" : "getArgumentForFunction",
    "right" : "getArgumentForFunction",
    "info" : "SimpleName[87498-87520]:SimpleName[87608-87630]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[87521-87534]:SingleVariableDeclaration[87631-87644]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[87536-87545]:SingleVariableDeclaration[87646-87655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87547-87698]:Block[87657-87808]"
  }, {
    "left" : "Preconditions.checkState(isFunction(function));",
    "right" : "Preconditions.checkState(isFunction(function));",
    "info" : "ExpressionStatement[87553-87600]:ExpressionStatement[87663-87710]"
  }, {
    "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
    "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
    "info" : "ReturnStatement[87605-87694]:ReturnStatement[87715-87804]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[87825-87831]:Modifier[87935-87941]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[87832-87836]:SimpleType[87942-87946]"
  }, {
    "left" : "getArgumentForCallOrNew",
    "right" : "getArgumentForCallOrNew",
    "info" : "SimpleName[87837-87860]:SimpleName[87947-87970]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[87861-87870]:SingleVariableDeclaration[87971-87980]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[87872-87881]:SingleVariableDeclaration[87982-87991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87883-88009]:Block[87993-88119]"
  }, {
    "left" : "Preconditions.checkState(isCallOrNew(call));",
    "right" : "Preconditions.checkState(isCallOrNew(call));",
    "info" : "ExpressionStatement[87889-87933]:ExpressionStatement[87999-88043]"
  }, {
    "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
    "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
    "info" : "ReturnStatement[87938-88005]:ReturnStatement[88048-88115]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[88013-88020]:Modifier[88123-88130]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[88021-88027]:Modifier[88131-88137]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[88028-88035]:PrimitiveType[88138-88145]"
  }, {
    "left" : "isToStringMethodCall",
    "right" : "isToStringMethodCall",
    "info" : "SimpleName[88036-88056]:SimpleName[88146-88166]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[88057-88066]:SingleVariableDeclaration[88167-88176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88068-88286]:Block[88178-88396]"
  }, {
    "left" : "Node getNode = call.getFirstChild();",
    "right" : "Node getNode = call.getFirstChild();",
    "info" : "VariableDeclarationStatement[88074-88110]:VariableDeclarationStatement[88184-88220]"
  }, {
    "left" : "if (isGet(getNode))",
    "right" : "if (isGet(getNode))",
    "info" : "IfStatement[88115-88264]:IfStatement[88225-88374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88135-88264]:Block[88245-88374]"
  }, {
    "left" : "Node propNode = getNode.getLastChild();",
    "right" : "Node propNode = getNode.getLastChild();",
    "info" : "VariableDeclarationStatement[88143-88182]:VariableDeclarationStatement[88253-88292]"
  }, {
    "left" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
    "right" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
    "info" : "ReturnStatement[88189-88258]:ReturnStatement[88299-88368]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[88269-88282]:ReturnStatement[88379-88392]"
  } ]
}