{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
      "right" : "private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
      "info" : "FieldDeclaration[1379-1452]:FieldDeclaration[1379-1452]"
    }, {
      "left" : "private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
      "right" : "private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
      "info" : "FieldDeclaration[1455-1526]:FieldDeclaration[1455-1526]"
    }, {
      "left" : "private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);",
      "right" : "private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);",
      "info" : "FieldDeclaration[1529-1602]:FieldDeclaration[1529-1602]"
    }, {
      "left" : "private final boolean late;",
      "right" : "private final boolean late;",
      "info" : "FieldDeclaration[1606-1633]:FieldDeclaration[1606-1633]"
    }, {
      "left" : "private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
      "right" : "private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
      "info" : "FieldDeclaration[1637-1702]:FieldDeclaration[1637-1702]"
    }, {
      "left" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.error(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "right" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.error(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "info" : "FieldDeclaration[1706-1895]:FieldDeclaration[1706-1895]"
    }, {
      "left" : "static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n  };",
      "right" : "static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n  };",
      "info" : "FieldDeclaration[1899-2091]:FieldDeclaration[1899-2091]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[1998-2086]:MethodDeclaration[1998-2086]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax(boolean late)",
      "right" : "PeepholeSubstituteAlternateSyntax(boolean late)",
      "info" : "MethodDeclaration[2095-2532]:MethodDeclaration[2095-2532]"
    }, {
      "left" : "public Node optimizeSubtree(Node node)",
      "right" : "public Node optimizeSubtree(Node node)",
      "info" : "MethodDeclaration[2536-5086]:MethodDeclaration[2536-5086]"
    }, {
      "left" : "private void tryJoinForCondition(Node n)",
      "right" : "private void tryJoinForCondition(Node n)",
      "info" : "MethodDeclaration[5090-6369]:MethodDeclaration[5090-6369]"
    }, {
      "left" : "private Node tryFoldImmediateCallToBoundFunction(Node n)",
      "right" : "private Node tryFoldImmediateCallToBoundFunction(Node n)",
      "info" : "MethodDeclaration[7243-8417]:MethodDeclaration[7316-8490]"
    }, {
      "left" : "private void addParameterAfter(Node parameterList, Node after)",
      "right" : "private void addParameterAfter(Node parameterList, Node after)",
      "info" : "MethodDeclaration[8421-8722]:MethodDeclaration[8494-8795]"
    }, {
      "left" : "private Node trySplitComma(Node n)",
      "right" : "private Node trySplitComma(Node n)",
      "info" : "MethodDeclaration[8726-9510]:MethodDeclaration[8799-9583]"
    }, {
      "left" : "private Node tryReplaceIf(Node n)",
      "right" : "private Node tryReplaceIf(Node n)",
      "info" : "MethodDeclaration[9514-12298]:MethodDeclaration[9587-12371]"
    }, {
      "left" : "private boolean statementMustExitParent(Node n)",
      "right" : "private boolean statementMustExitParent(Node n)",
      "info" : "MethodDeclaration[12302-12743]:MethodDeclaration[12375-12816]"
    }, {
      "left" : "private Node tryReplaceUndefined(Node n)",
      "right" : "private Node tryReplaceUndefined(Node n)",
      "info" : "MethodDeclaration[12747-13184]:MethodDeclaration[12820-13257]"
    }, {
      "left" : "private Node tryReduceReturn(Node n)",
      "right" : "private Node tryReduceReturn(Node n)",
      "info" : "MethodDeclaration[13188-13915]:MethodDeclaration[13261-13988]"
    }, {
      "left" : "private Node tryReplaceExitWithBreak(Node n)",
      "right" : "private Node tryReplaceExitWithBreak(Node n)",
      "info" : "MethodDeclaration[13919-16114]:MethodDeclaration[13992-16187]"
    }, {
      "left" : "private Node tryRemoveRedundantExit(Node n)",
      "right" : "private Node tryRemoveRedundantExit(Node n)",
      "info" : "MethodDeclaration[16118-17557]:MethodDeclaration[16191-17630]"
    }, {
      "left" : "boolean isPure(Node n)",
      "right" : "boolean isPure(Node n)",
      "info" : "MethodDeclaration[17561-17814]:MethodDeclaration[17634-17887]"
    }, {
      "left" : "Node skipFinallyNodes(Node n)",
      "right" : "Node skipFinallyNodes(Node n)",
      "info" : "MethodDeclaration[17818-18074]:MethodDeclaration[17891-18147]"
    }, {
      "left" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
      "right" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
      "info" : "MethodDeclaration[18078-18563]:MethodDeclaration[18151-18636]"
    }, {
      "left" : "boolean isExceptionPossible(Node n)",
      "right" : "boolean isExceptionPossible(Node n)",
      "info" : "MethodDeclaration[18567-18864]:MethodDeclaration[18640-18937]"
    }, {
      "left" : "Node getExceptionHandler(Node n)",
      "right" : "Node getExceptionHandler(Node n)",
      "info" : "MethodDeclaration[18868-18961]:MethodDeclaration[18941-19034]"
    }, {
      "left" : "private Node tryMinimizeNot(Node n)",
      "right" : "private Node tryMinimizeNot(Node n)",
      "info" : "MethodDeclaration[18965-19950]:MethodDeclaration[19038-20023]"
    }, {
      "left" : "private Node tryMinimizeIf(Node n)",
      "right" : "private Node tryMinimizeIf(Node n)",
      "info" : "MethodDeclaration[19954-28566]:MethodDeclaration[20027-28639]"
    }, {
      "left" : "private void tryRemoveRepeatedStatements(Node n)",
      "right" : "private void tryRemoveRepeatedStatements(Node n)",
      "info" : "MethodDeclaration[28570-29814]:MethodDeclaration[28643-29887]"
    }, {
      "left" : "private boolean isFoldableExpressBlock(Node n)",
      "right" : "private boolean isFoldableExpressBlock(Node n)",
      "info" : "MethodDeclaration[29818-31084]:MethodDeclaration[29891-31157]"
    }, {
      "left" : "private Node getBlockExpression(Node n)",
      "right" : "private Node getBlockExpression(Node n)",
      "info" : "MethodDeclaration[31088-31266]:MethodDeclaration[31161-31339]"
    }, {
      "left" : "private boolean isReturnBlock(Node n)",
      "right" : "private boolean isReturnBlock(Node n)",
      "info" : "MethodDeclaration[31270-31606]:MethodDeclaration[31343-31679]"
    }, {
      "left" : "private boolean isReturnExpressBlock(Node n)",
      "right" : "private boolean isReturnExpressBlock(Node n)",
      "info" : "MethodDeclaration[31610-31970]:MethodDeclaration[31683-32043]"
    }, {
      "left" : "private boolean isReturnExpression(Node n)",
      "right" : "private boolean isReturnExpression(Node n)",
      "info" : "MethodDeclaration[31974-32172]:MethodDeclaration[32047-32245]"
    }, {
      "left" : "private Node getBlockReturnExpression(Node n)",
      "right" : "private Node getBlockReturnExpression(Node n)",
      "info" : "MethodDeclaration[32176-32396]:MethodDeclaration[32249-32469]"
    }, {
      "left" : "private boolean isVarBlock(Node n)",
      "right" : "private boolean isVarBlock(Node n)",
      "info" : "MethodDeclaration[32400-32776]:MethodDeclaration[32473-32849]"
    }, {
      "left" : "private Node getBlockVar(Node n)",
      "right" : "private Node getBlockVar(Node n)",
      "info" : "MethodDeclaration[32780-32932]:MethodDeclaration[32853-33005]"
    }, {
      "left" : "private boolean consumesDanglingElse(Node n)",
      "right" : "private boolean consumesDanglingElse(Node n)",
      "info" : "MethodDeclaration[32936-33629]:MethodDeclaration[33009-33702]"
    }, {
      "left" : "private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence)",
      "right" : "private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence)",
      "info" : "MethodDeclaration[33633-34134]:MethodDeclaration[33706-34207]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[33899-34023]:MethodDeclaration[33972-34096]"
    }, {
      "left" : "private boolean isLowerPrecedence(Node n, final int precedence)",
      "right" : "private boolean isLowerPrecedence(Node n, final int precedence)",
      "info" : "MethodDeclaration[34138-34343]:MethodDeclaration[34211-34416]"
    }, {
      "left" : "private boolean isHigherPrecedence(Node n, final int precedence)",
      "right" : "private boolean isHigherPrecedence(Node n, final int precedence)",
      "info" : "MethodDeclaration[34347-34554]:MethodDeclaration[34420-34627]"
    }, {
      "left" : "private boolean isPropertyAssignmentInExpression(Node n)",
      "right" : "private boolean isPropertyAssignmentInExpression(Node n)",
      "info" : "MethodDeclaration[34557-35050]:MethodDeclaration[34630-35123]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[34786-34924]:MethodDeclaration[34859-34997]"
    }, {
      "left" : "private Node tryMinimizeCondition(Node n)",
      "right" : "private Node tryMinimizeCondition(Node n)",
      "info" : "MethodDeclaration[35054-42427]:MethodDeclaration[35127-42500]"
    }, {
      "left" : "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num)",
      "right" : "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num)",
      "info" : "MethodDeclaration[42431-42889]:MethodDeclaration[42504-42962]"
    }, {
      "left" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "right" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "info" : "FieldDeclaration[42893-43237]:FieldDeclaration[42966-43310]"
    }, {
      "left" : "private Node tryFoldStandardConstructors(Node n)",
      "right" : "private Node tryFoldStandardConstructors(Node n)",
      "info" : "MethodDeclaration[43241-43899]:MethodDeclaration[43314-43972]"
    }, {
      "left" : "private Node tryFoldLiteralConstructor(Node n)",
      "right" : "private Node tryFoldLiteralConstructor(Node n)",
      "info" : "MethodDeclaration[43903-45767]:MethodDeclaration[43976-45840]"
    }, {
      "left" : "enum : FoldArrayAction",
      "right" : "enum : FoldArrayAction",
      "info" : "EnumDeclaration[45771-45881]:EnumDeclaration[45844-45954]"
    }, {
      "left" : "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "right" : "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "info" : "MethodDeclaration[45885-47081]:MethodDeclaration[45958-47154]"
    }, {
      "left" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "right" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "info" : "MethodDeclaration[47085-49085]:MethodDeclaration[47158-49158]"
    }, {
      "left" : "private Node reduceTrueFalse(Node n)",
      "right" : "private Node reduceTrueFalse(Node n)",
      "info" : "MethodDeclaration[49089-49350]:MethodDeclaration[49162-49423]"
    }, {
      "left" : "private Node tryMinimizeArrayLiteral(Node n)",
      "right" : "private Node tryMinimizeArrayLiteral(Node n)",
      "info" : "MethodDeclaration[49354-49686]:MethodDeclaration[49427-49759]"
    }, {
      "left" : "private Node tryMinimizeStringArrayLiteral(Node n)",
      "right" : "private Node tryMinimizeStringArrayLiteral(Node n)",
      "info" : "MethodDeclaration[49690-50729]:MethodDeclaration[49763-50802]"
    }, {
      "left" : "private String pickDelimiter(String[] strings)",
      "right" : "private String pickDelimiter(String[] strings)",
      "info" : "MethodDeclaration[50733-51469]:MethodDeclaration[50806-51542]"
    }, {
      "left" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "right" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "info" : "FieldDeclaration[51473-51548]:FieldDeclaration[51546-51621]"
    }, {
      "left" : "private static boolean areValidRegexpFlags(String flags)",
      "right" : "private static boolean areValidRegexpFlags(String flags)",
      "info" : "MethodDeclaration[51552-52037]:MethodDeclaration[51625-52110]"
    }, {
      "left" : "private boolean areSafeFlagsToFold(String flags)",
      "right" : "private boolean areSafeFlagsToFold(String flags)",
      "info" : "MethodDeclaration[52041-52964]:MethodDeclaration[52114-53037]"
    }, {
      "left" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "right" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "info" : "MethodDeclaration[52968-55247]:MethodDeclaration[53041-55320]"
    }, {
      "left" : "static boolean containsUnicodeEscape(String s)",
      "right" : "static boolean containsUnicodeEscape(String s)",
      "info" : "MethodDeclaration[55251-55857]:MethodDeclaration[55324-55930]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1998-2007]:MarkerAnnotation[1998-2007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2012-2018]:Modifier[2012-2018]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2019-2026]:PrimitiveType[2019-2026]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[2027-2032]:SimpleName[2027-2032]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[2033-2043]:SingleVariableDeclaration[2033-2043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2045-2086]:Block[2045-2086]"
    }, {
      "left" : "return !input.isFunction();",
      "right" : "return !input.isFunction();",
      "info" : "ReturnStatement[2053-2080]:ReturnStatement[2053-2080]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "SimpleName[2457-2490]:SimpleName[2457-2490]"
    }, {
      "left" : "boolean late",
      "right" : "boolean late",
      "info" : "SingleVariableDeclaration[2491-2503]:SingleVariableDeclaration[2491-2503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2505-2532]:Block[2505-2532]"
    }, {
      "left" : "this.late = late;",
      "right" : "this.late = late;",
      "info" : "ExpressionStatement[2511-2528]:ExpressionStatement[2511-2528]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2623-2632]:MarkerAnnotation[2623-2632]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[2635-2667]:SingleMemberAnnotation[2635-2667]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2670-2676]:Modifier[2670-2676]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2677-2681]:SimpleType[2677-2681]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[2682-2697]:SimpleName[2682-2697]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2698-2707]:SingleVariableDeclaration[2698-2707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2709-5086]:Block[2709-5086]"
    }, {
      "left" : "switch(node.getType()) {\n      case Token.RETURN: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        result = tryReplaceExitWithBreak(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReduceReturn(node);\n      }\n\n      case Token.THROW: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReplaceExitWithBreak(node);\n      }\n\n      // TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps\n      // with MinimizeExitPoints.\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryJoinForCondition(node);\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.BLOCK:\n        return tryReplaceIf(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "right" : "switch(node.getType()) {\n      case Token.RETURN: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        result = tryReplaceExitWithBreak(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReduceReturn(node);\n      }\n\n      case Token.THROW: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReplaceExitWithBreak(node);\n      }\n\n      // TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps\n      // with MinimizeExitPoints.\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryJoinForCondition(node);\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.BLOCK:\n        return tryReplaceIf(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "info" : "SwitchStatement[2715-5082]:SwitchStatement[2715-5082]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[2746-2764]:SwitchCase[2746-2764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2765-3042]:Block[2765-3042]"
    }, {
      "left" : "Node result = tryRemoveRedundantExit(node);",
      "right" : "Node result = tryRemoveRedundantExit(node);",
      "info" : "VariableDeclarationStatement[2775-2818]:VariableDeclarationStatement[2775-2818]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[2827-2883]:IfStatement[2827-2883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2847-2883]:Block[2847-2883]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[2859-2873]:ReturnStatement[2859-2873]"
    }, {
      "left" : "result = tryReplaceExitWithBreak(node);",
      "right" : "result = tryReplaceExitWithBreak(node);",
      "info" : "ExpressionStatement[2892-2931]:ExpressionStatement[2892-2931]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[2940-2996]:IfStatement[2940-2996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2960-2996]:Block[2960-2996]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[2972-2986]:ReturnStatement[2972-2986]"
    }, {
      "left" : "return tryReduceReturn(node);",
      "right" : "return tryReduceReturn(node);",
      "info" : "ReturnStatement[3005-3034]:ReturnStatement[3005-3034]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[3050-3067]:SwitchCase[3050-3067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3068-3240]:Block[3068-3240]"
    }, {
      "left" : "Node result = tryRemoveRedundantExit(node);",
      "right" : "Node result = tryRemoveRedundantExit(node);",
      "info" : "VariableDeclarationStatement[3078-3121]:VariableDeclarationStatement[3078-3121]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[3130-3186]:IfStatement[3130-3186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3150-3186]:Block[3150-3186]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[3162-3176]:ReturnStatement[3162-3176]"
    }, {
      "left" : "return tryReplaceExitWithBreak(node);",
      "right" : "return tryReplaceExitWithBreak(node);",
      "info" : "ReturnStatement[3195-3232]:ReturnStatement[3195-3232]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[3360-3375]:SwitchCase[3360-3375]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3384-3427]:ExpressionStatement[3384-3427]"
    }, {
      "left" : "return tryMinimizeNot(node);",
      "right" : "return tryMinimizeNot(node);",
      "info" : "ReturnStatement[3436-3464]:ReturnStatement[3436-3464]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[3472-3486]:SwitchCase[3472-3486]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3495-3538]:ExpressionStatement[3495-3538]"
    }, {
      "left" : "return tryMinimizeIf(node);",
      "right" : "return tryMinimizeIf(node);",
      "info" : "ReturnStatement[3547-3574]:ReturnStatement[3547-3574]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[3582-3605]:SwitchCase[3582-3605]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3614-3657]:ExpressionStatement[3614-3657]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3666-3678]:ReturnStatement[3666-3678]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[3686-3702]:SwitchCase[3686-3702]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3711-3754]:ExpressionStatement[3711-3754]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3763-3775]:ReturnStatement[3763-3775]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[3783-3800]:SwitchCase[3783-3800]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[3807-3821]:SwitchCase[3807-3821]"
    }, {
      "left" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "right" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[3830-3890]:ExpressionStatement[3830-3890]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3899-3911]:ReturnStatement[3899-3911]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[3919-3934]:SwitchCase[3919-3934]"
    }, {
      "left" : "if (!NodeUtil.isForIn(node))",
      "right" : "if (!NodeUtil.isForIn(node))",
      "info" : "IfStatement[3943-4091]:IfStatement[3943-4091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3972-4091]:Block[3972-4091]"
    }, {
      "left" : "tryJoinForCondition(node);",
      "right" : "tryJoinForCondition(node);",
      "info" : "ExpressionStatement[3984-4010]:ExpressionStatement[3984-4010]"
    }, {
      "left" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "right" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[4021-4081]:ExpressionStatement[4021-4081]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[4100-4112]:ReturnStatement[4100-4112]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4120-4136]:SwitchCase[4120-4136]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4143-4160]:SwitchCase[4143-4160]"
    }, {
      "left" : "return reduceTrueFalse(node);",
      "right" : "return reduceTrueFalse(node);",
      "info" : "ReturnStatement[4169-4198]:ReturnStatement[4169-4198]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[4206-4221]:SwitchCase[4206-4221]"
    }, {
      "left" : "node = tryFoldStandardConstructors(node);",
      "right" : "node = tryFoldStandardConstructors(node);",
      "info" : "ExpressionStatement[4230-4271]:ExpressionStatement[4230-4271]"
    }, {
      "left" : "if (!node.isCall())",
      "right" : "if (!node.isCall())",
      "info" : "IfStatement[4280-4334]:IfStatement[4280-4334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4300-4334]:Block[4300-4334]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[4312-4324]:ReturnStatement[4312-4324]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[4465-4481]:SwitchCase[4465-4481]"
    }, {
      "left" : "Node result =  tryFoldLiteralConstructor(node);",
      "right" : "Node result =  tryFoldLiteralConstructor(node);",
      "info" : "VariableDeclarationStatement[4490-4537]:VariableDeclarationStatement[4490-4537]"
    }, {
      "left" : "if (result == node)",
      "right" : "if (result == node)",
      "info" : "IfStatement[4546-4737]:IfStatement[4546-4737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4566-4737]:Block[4566-4737]"
    }, {
      "left" : "result = tryFoldSimpleFunctionCall(node);",
      "right" : "result = tryFoldSimpleFunctionCall(node);",
      "info" : "ExpressionStatement[4578-4619]:ExpressionStatement[4578-4619]"
    }, {
      "left" : "if (result == node)",
      "right" : "if (result == node)",
      "info" : "IfStatement[4630-4727]:IfStatement[4630-4727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4650-4727]:Block[4650-4727]"
    }, {
      "left" : "result = tryFoldImmediateCallToBoundFunction(node);",
      "right" : "result = tryFoldImmediateCallToBoundFunction(node);",
      "info" : "ExpressionStatement[4664-4715]:ExpressionStatement[4664-4715]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4746-4760]:ReturnStatement[4746-4760]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[4768-4785]:SwitchCase[4768-4785]"
    }, {
      "left" : "return trySplitComma(node);",
      "right" : "return trySplitComma(node);",
      "info" : "ReturnStatement[4794-4821]:ReturnStatement[4794-4821]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4829-4845]:SwitchCase[4829-4845]"
    }, {
      "left" : "return tryReplaceUndefined(node);",
      "right" : "return tryReplaceUndefined(node);",
      "info" : "ReturnStatement[4854-4887]:ReturnStatement[4854-4887]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[4895-4912]:SwitchCase[4895-4912]"
    }, {
      "left" : "return tryReplaceIf(node);",
      "right" : "return tryReplaceIf(node);",
      "info" : "ReturnStatement[4921-4947]:ReturnStatement[4921-4947]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[4955-4975]:SwitchCase[4955-4975]"
    }, {
      "left" : "return tryMinimizeArrayLiteral(node);",
      "right" : "return tryMinimizeArrayLiteral(node);",
      "info" : "ReturnStatement[4984-5021]:ReturnStatement[4984-5021]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5029-5037]:SwitchCase[5029-5037]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[5046-5058]:ReturnStatement[5046-5058]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5090-5097]:Modifier[5090-5097]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5098-5102]:PrimitiveType[5098-5102]"
    }, {
      "left" : "tryJoinForCondition",
      "right" : "tryJoinForCondition",
      "info" : "SimpleName[5103-5122]:SimpleName[5103-5122]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5123-5129]:SingleVariableDeclaration[5123-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5131-6369]:Block[5131-6369]"
    }, {
      "left" : "if (!late)",
      "right" : "if (!late)",
      "info" : "IfStatement[5137-5169]:IfStatement[5137-5169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5148-5169]:Block[5148-5169]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5156-5163]:ReturnStatement[5156-5163]"
    }, {
      "left" : "Node block = n.getLastChild();",
      "right" : "Node block = n.getLastChild();",
      "info" : "VariableDeclarationStatement[5175-5205]:VariableDeclarationStatement[5175-5205]"
    }, {
      "left" : "Node maybeIf = block.getFirstChild();",
      "right" : "Node maybeIf = block.getFirstChild();",
      "info" : "VariableDeclarationStatement[5210-5247]:VariableDeclarationStatement[5210-5247]"
    }, {
      "left" : "if (maybeIf != null && maybeIf.isIf())",
      "right" : "if (maybeIf != null && maybeIf.isIf())",
      "info" : "IfStatement[5252-6365]:IfStatement[5252-6365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5291-6365]:Block[5291-6365]"
    }, {
      "left" : "Node maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();",
      "right" : "Node maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();",
      "info" : "VariableDeclarationStatement[5299-5360]:VariableDeclarationStatement[5299-5360]"
    }, {
      "left" : "if (maybeBreak != null && maybeBreak.isBreak()\n          && !maybeBreak.hasChildren())",
      "right" : "if (maybeBreak != null && maybeBreak.isBreak()\n          && !maybeBreak.hasChildren())",
      "info" : "IfStatement[5367-6359]:IfStatement[5367-6359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5454-6359]:Block[5454-6359]"
    }, {
      "left" : "if (maybeIf.getChildCount() == 3)",
      "right" : "if (maybeIf.getChildCount() == 3)",
      "info" : "IfStatement[5525-5719]:IfStatement[5525-5719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5559-5666]:Block[5559-5666]"
    }, {
      "left" : "block.replaceChild(maybeIf,\n              maybeIf.getLastChild().detachFromParent());",
      "right" : "block.replaceChild(maybeIf,\n              maybeIf.getLastChild().detachFromParent());",
      "info" : "ExpressionStatement[5571-5656]:ExpressionStatement[5571-5656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5672-5719]:Block[5672-5719]"
    }, {
      "left" : "block.removeFirstChild();",
      "right" : "block.removeFirstChild();",
      "info" : "ExpressionStatement[5684-5709]:ExpressionStatement[5684-5709]"
    }, {
      "left" : "Node ifCondition = maybeIf.removeFirstChild();",
      "right" : "Node ifCondition = maybeIf.removeFirstChild();",
      "info" : "VariableDeclarationStatement[5729-5775]:VariableDeclarationStatement[5729-5775]"
    }, {
      "left" : "Node fixedIfCondition = IR.not(ifCondition)\n            .srcref(ifCondition);",
      "right" : "Node fixedIfCondition = IR.not(ifCondition)\n            .srcref(ifCondition);",
      "info" : "VariableDeclarationStatement[5784-5861]:VariableDeclarationStatement[5784-5861]"
    }, {
      "left" : "Node forCondition = NodeUtil.getConditionExpression(n);",
      "right" : "Node forCondition = NodeUtil.getConditionExpression(n);",
      "info" : "VariableDeclarationStatement[5933-5988]:VariableDeclarationStatement[5933-5988]"
    }, {
      "left" : "if (forCondition.isEmpty())",
      "right" : "if (forCondition.isEmpty())",
      "info" : "IfStatement[5997-6322]:IfStatement[5997-6322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6025-6094]:Block[6025-6094]"
    }, {
      "left" : "n.replaceChild(forCondition, fixedIfCondition);",
      "right" : "n.replaceChild(forCondition, fixedIfCondition);",
      "info" : "ExpressionStatement[6037-6084]:ExpressionStatement[6037-6084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6100-6322]:Block[6100-6322]"
    }, {
      "left" : "Node replacement = new Node(Token.AND);",
      "right" : "Node replacement = new Node(Token.AND);",
      "info" : "VariableDeclarationStatement[6112-6151]:VariableDeclarationStatement[6112-6151]"
    }, {
      "left" : "n.replaceChild(forCondition, replacement);",
      "right" : "n.replaceChild(forCondition, replacement);",
      "info" : "ExpressionStatement[6162-6204]:ExpressionStatement[6162-6204]"
    }, {
      "left" : "replacement.addChildToBack(forCondition);",
      "right" : "replacement.addChildToBack(forCondition);",
      "info" : "ExpressionStatement[6215-6256]:ExpressionStatement[6215-6256]"
    }, {
      "left" : "replacement.addChildToBack(fixedIfCondition);",
      "right" : "replacement.addChildToBack(fixedIfCondition);",
      "info" : "ExpressionStatement[6267-6312]:ExpressionStatement[6267-6312]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6332-6351]:ExpressionStatement[6332-6351]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7243-7250]:Modifier[7316-7323]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7251-7255]:SimpleType[7324-7328]"
    }, {
      "left" : "tryFoldImmediateCallToBoundFunction",
      "right" : "tryFoldImmediateCallToBoundFunction",
      "info" : "SimpleName[7256-7291]:SimpleName[7329-7364]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7292-7298]:SingleVariableDeclaration[7365-7371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7300-8417]:Block[7373-8490]"
    }, {
      "left" : "Preconditions.checkState(n.isCall());",
      "right" : "Preconditions.checkState(n.isCall());",
      "info" : "ExpressionStatement[7379-7416]:ExpressionStatement[7452-7489]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7421-7457]:VariableDeclarationStatement[7494-7530]"
    }, {
      "left" : "Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);",
      "right" : "Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);",
      "info" : "VariableDeclarationStatement[7462-7536]:VariableDeclarationStatement[7535-7609]"
    }, {
      "left" : "if (bind != null)",
      "right" : "if (bind != null)",
      "info" : "IfStatement[7541-8399]:IfStatement[7614-8472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7559-8399]:Block[7632-8472]"
    }, {
      "left" : "bind.target.detachFromParent();",
      "right" : "bind.target.detachFromParent();",
      "info" : "ExpressionStatement[7600-7631]:ExpressionStatement[7673-7704]"
    }, {
      "left" : "n.replaceChild(callTarget, bind.target);",
      "right" : "n.replaceChild(callTarget, bind.target);",
      "info" : "ExpressionStatement[7638-7678]:ExpressionStatement[7711-7751]"
    }, {
      "left" : "callTarget = bind.target;",
      "right" : "callTarget = bind.target;",
      "info" : "ExpressionStatement[7685-7710]:ExpressionStatement[7758-7783]"
    }, {
      "left" : "addParameterAfter(bind.parameters, callTarget);",
      "right" : "addParameterAfter(bind.parameters, callTarget);",
      "info" : "ExpressionStatement[7747-7794]:ExpressionStatement[7820-7867]"
    }, {
      "left" : "if (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue))",
      "right" : "if (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue))",
      "info" : "IfStatement[7865-8367]:IfStatement[7938-8440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7934-8304]:Block[8007-8377]"
    }, {
      "left" : "Node newCallTarget = IR.getprop(\n            callTarget.cloneTree(),\n            IR.string(\"call\").srcref(callTarget));",
      "right" : "Node newCallTarget = IR.getprop(\n            callTarget.cloneTree(),\n            IR.string(\"call\").srcref(callTarget));",
      "info" : "VariableDeclarationStatement[8009-8128]:VariableDeclarationStatement[8082-8201]"
    }, {
      "left" : "n.replaceChild(callTarget, newCallTarget);",
      "right" : "n.replaceChild(callTarget, newCallTarget);",
      "info" : "ExpressionStatement[8137-8179]:ExpressionStatement[8210-8252]"
    }, {
      "left" : "n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);",
      "right" : "n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);",
      "info" : "ExpressionStatement[8188-8247]:ExpressionStatement[8261-8320]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, false);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, false);",
      "info" : "ExpressionStatement[8256-8296]:ExpressionStatement[8329-8369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8310-8367]:Block[8383-8440]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[8320-8359]:ExpressionStatement[8393-8432]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8374-8393]:ExpressionStatement[8447-8466]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8404-8413]:ReturnStatement[8477-8486]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8421-8428]:Modifier[8494-8501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8429-8433]:PrimitiveType[8502-8506]"
    }, {
      "left" : "addParameterAfter",
      "right" : "addParameterAfter",
      "info" : "SimpleName[8434-8451]:SimpleName[8507-8524]"
    }, {
      "left" : "Node parameterList",
      "right" : "Node parameterList",
      "info" : "SingleVariableDeclaration[8452-8470]:SingleVariableDeclaration[8525-8543]"
    }, {
      "left" : "Node after",
      "right" : "Node after",
      "info" : "SingleVariableDeclaration[8472-8482]:SingleVariableDeclaration[8545-8555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8484-8722]:Block[8557-8795]"
    }, {
      "left" : "if (parameterList != null)",
      "right" : "if (parameterList != null)",
      "info" : "IfStatement[8490-8718]:IfStatement[8563-8791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8517-8718]:Block[8590-8791]"
    }, {
      "left" : "addParameterAfter(parameterList.getNext(), after);",
      "right" : "addParameterAfter(parameterList.getNext(), after);",
      "info" : "ExpressionStatement[8589-8639]:ExpressionStatement[8662-8712]"
    }, {
      "left" : "after.getParent().addChildAfter(parameterList.cloneTree(), after);",
      "right" : "after.getParent().addChildAfter(parameterList.cloneTree(), after);",
      "info" : "ExpressionStatement[8646-8712]:ExpressionStatement[8719-8785]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8726-8733]:Modifier[8799-8806]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8734-8738]:SimpleType[8807-8811]"
    }, {
      "left" : "trySplitComma",
      "right" : "trySplitComma",
      "info" : "SimpleName[8739-8752]:SimpleName[8812-8825]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8753-8759]:SingleVariableDeclaration[8826-8832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8761-9510]:Block[8834-9583]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[8767-8800]:IfStatement[8840-8873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8777-8800]:Block[8850-8873]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8785-8794]:ReturnStatement[8858-8867]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8805-8833]:VariableDeclarationStatement[8878-8906]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[8838-8868]:VariableDeclarationStatement[8911-8941]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[8873-8903]:VariableDeclarationStatement[8946-8976]"
    }, {
      "left" : "if (parent.isExprResult()\n        && !parent.getParent().isLabel())",
      "right" : "if (parent.isExprResult()\n        && !parent.getParent().isLabel())",
      "info" : "IfStatement[8909-9506]:IfStatement[8982-9579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8977-9477]:Block[9050-9550]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[9006-9025]:ExpressionStatement[9079-9098]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[9096-9125]:ExpressionStatement[9169-9198]"
    }, {
      "left" : "Node newStatement = IR.exprResult(right);",
      "right" : "Node newStatement = IR.exprResult(right);",
      "info" : "VariableDeclarationStatement[9177-9218]:VariableDeclarationStatement[9250-9291]"
    }, {
      "left" : "newStatement.copyInformationFrom(n);",
      "right" : "newStatement.copyInformationFrom(n);",
      "info" : "ExpressionStatement[9225-9261]:ExpressionStatement[9298-9334]"
    }, {
      "left" : "parent.getParent().addChildAfter(newStatement, parent);",
      "right" : "parent.getParent().addChildAfter(newStatement, parent);",
      "info" : "ExpressionStatement[9371-9426]:ExpressionStatement[9444-9499]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9433-9452]:ExpressionStatement[9506-9525]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[9459-9471]:ReturnStatement[9532-9544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9483-9506]:Block[9556-9579]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9491-9500]:ReturnStatement[9564-9573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9589-9596]:Modifier[9662-9669]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9597-9601]:SimpleType[9670-9674]"
    }, {
      "left" : "tryReplaceIf",
      "right" : "tryReplaceIf",
      "info" : "SimpleName[9602-9614]:SimpleName[9675-9687]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9615-9621]:SingleVariableDeclaration[9688-9694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9623-12298]:Block[9696-12371]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n         child != null; child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n         child != null; child = child.getNext())",
      "info" : "ForStatement[9630-12280]:ForStatement[9703-12353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9715-12280]:Block[9788-12353]"
    }, {
      "left" : "if (child.isIf())",
      "right" : "if (child.isIf())",
      "info" : "IfStatement[9723-12274]:IfStatement[9796-12347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9740-12274]:Block[9813-12347]"
    }, {
      "left" : "Node cond = child.getFirstChild();",
      "right" : "Node cond = child.getFirstChild();",
      "info" : "VariableDeclarationStatement[9750-9784]:VariableDeclarationStatement[9823-9857]"
    }, {
      "left" : "Node thenBranch = cond.getNext();",
      "right" : "Node thenBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[9793-9826]:VariableDeclarationStatement[9866-9899]"
    }, {
      "left" : "Node elseBranch = thenBranch.getNext();",
      "right" : "Node elseBranch = thenBranch.getNext();",
      "info" : "VariableDeclarationStatement[9835-9874]:VariableDeclarationStatement[9908-9947]"
    }, {
      "left" : "Node nextNode = child.getNext();",
      "right" : "Node nextNode = child.getNext();",
      "info" : "VariableDeclarationStatement[9883-9915]:VariableDeclarationStatement[9956-9988]"
    }, {
      "left" : "if (nextNode != null && elseBranch == null\n            && isReturnBlock(thenBranch)\n            && nextNode.isIf())",
      "right" : "if (nextNode != null && elseBranch == null\n            && isReturnBlock(thenBranch)\n            && nextNode.isIf())",
      "info" : "IfStatement[9925-12266]:IfStatement[9998-12339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10041-11206]:Block[10114-11279]"
    }, {
      "left" : "Node nextCond = nextNode.getFirstChild();",
      "right" : "Node nextCond = nextNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[10053-10094]:VariableDeclarationStatement[10126-10167]"
    }, {
      "left" : "Node nextThen = nextCond.getNext();",
      "right" : "Node nextThen = nextCond.getNext();",
      "info" : "VariableDeclarationStatement[10105-10140]:VariableDeclarationStatement[10178-10213]"
    }, {
      "left" : "Node nextElse = nextThen.getNext();",
      "right" : "Node nextElse = nextThen.getNext();",
      "info" : "VariableDeclarationStatement[10151-10186]:VariableDeclarationStatement[10224-10259]"
    }, {
      "left" : "if (thenBranch.isEquivalentToTyped(nextThen))",
      "right" : "if (thenBranch.isEquivalentToTyped(nextThen))",
      "info" : "IfStatement[10197-11196]:IfStatement[10270-11269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10243-10646]:Block[10316-10719]"
    }, {
      "left" : "child.detachFromParent();",
      "right" : "child.detachFromParent();",
      "info" : "ExpressionStatement[10388-10413]:ExpressionStatement[10461-10486]"
    }, {
      "left" : "child.detachChildren();",
      "right" : "child.detachChildren();",
      "info" : "ExpressionStatement[10426-10449]:ExpressionStatement[10499-10522]"
    }, {
      "left" : "Node newCond = new Node(Token.OR, cond);",
      "right" : "Node newCond = new Node(Token.OR, cond);",
      "info" : "VariableDeclarationStatement[10462-10502]:VariableDeclarationStatement[10535-10575]"
    }, {
      "left" : "nextNode.replaceChild(nextCond, newCond);",
      "right" : "nextNode.replaceChild(nextCond, newCond);",
      "info" : "ExpressionStatement[10515-10556]:ExpressionStatement[10588-10629]"
    }, {
      "left" : "newCond.addChildToBack(nextCond);",
      "right" : "newCond.addChildToBack(nextCond);",
      "info" : "ExpressionStatement[10569-10602]:ExpressionStatement[10642-10675]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10615-10634]:ExpressionStatement[10688-10707]"
    }, {
      "left" : "if (nextElse != null\n              && thenBranch.isEquivalentToTyped(nextElse))",
      "right" : "if (nextElse != null\n              && thenBranch.isEquivalentToTyped(nextElse))",
      "info" : "IfStatement[10652-11196]:IfStatement[10725-11269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10732-11196]:Block[10805-11269]"
    }, {
      "left" : "child.detachFromParent();",
      "right" : "child.detachFromParent();",
      "info" : "ExpressionStatement[10900-10925]:ExpressionStatement[10973-10998]"
    }, {
      "left" : "child.detachChildren();",
      "right" : "child.detachChildren();",
      "info" : "ExpressionStatement[10938-10961]:ExpressionStatement[11011-11034]"
    }, {
      "left" : "Node newCond = new Node(Token.AND,\n                IR.not(cond).srcref(cond));",
      "right" : "Node newCond = new Node(Token.AND,\n                IR.not(cond).srcref(cond));",
      "info" : "VariableDeclarationStatement[10974-11052]:VariableDeclarationStatement[11047-11125]"
    }, {
      "left" : "nextNode.replaceChild(nextCond, newCond);",
      "right" : "nextNode.replaceChild(nextCond, newCond);",
      "info" : "ExpressionStatement[11065-11106]:ExpressionStatement[11138-11179]"
    }, {
      "left" : "newCond.addChildToBack(nextCond);",
      "right" : "newCond.addChildToBack(nextCond);",
      "info" : "ExpressionStatement[11119-11152]:ExpressionStatement[11192-11225]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11165-11184]:ExpressionStatement[11238-11257]"
    }, {
      "left" : "if (nextNode != null && elseBranch == null &&\n            isReturnBlock(thenBranch) && isReturnExpression(nextNode))",
      "right" : "if (nextNode != null && elseBranch == null &&\n            isReturnBlock(thenBranch) && isReturnExpression(nextNode))",
      "info" : "IfStatement[11212-12266]:IfStatement[11285-12339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11329-12069]:Block[11402-12142]"
    }, {
      "left" : "Node thenExpr = null;",
      "right" : "Node thenExpr = null;",
      "info" : "VariableDeclarationStatement[11341-11362]:VariableDeclarationStatement[11414-11435]"
    }, {
      "left" : "if (isReturnExpressBlock(thenBranch))",
      "right" : "if (isReturnExpressBlock(thenBranch))",
      "info" : "IfStatement[11429-11658]:IfStatement[11502-11731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11467-11582]:Block[11540-11655]"
    }, {
      "left" : "thenExpr = getBlockReturnExpression(thenBranch);",
      "right" : "thenExpr = getBlockReturnExpression(thenBranch);",
      "info" : "ExpressionStatement[11481-11529]:ExpressionStatement[11554-11602]"
    }, {
      "left" : "thenExpr.detachFromParent();",
      "right" : "thenExpr.detachFromParent();",
      "info" : "ExpressionStatement[11542-11570]:ExpressionStatement[11615-11643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11588-11658]:Block[11661-11731]"
    }, {
      "left" : "thenExpr = NodeUtil.newUndefinedNode(child);",
      "right" : "thenExpr = NodeUtil.newUndefinedNode(child);",
      "info" : "ExpressionStatement[11602-11646]:ExpressionStatement[11675-11719]"
    }, {
      "left" : "Node elseExpr = nextNode.getFirstChild();",
      "right" : "Node elseExpr = nextNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[11670-11711]:VariableDeclarationStatement[11743-11784]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[11723-11747]:ExpressionStatement[11796-11820]"
    }, {
      "left" : "elseExpr.detachFromParent();",
      "right" : "elseExpr.detachFromParent();",
      "info" : "ExpressionStatement[11758-11786]:ExpressionStatement[11831-11859]"
    }, {
      "left" : "Node returnNode = IR.returnNode(\n                                IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(child));",
      "right" : "Node returnNode = IR.returnNode(\n                                IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(child));",
      "info" : "VariableDeclarationStatement[11798-11949]:VariableDeclarationStatement[11871-12022]"
    }, {
      "left" : "n.replaceChild(child, returnNode);",
      "right" : "n.replaceChild(child, returnNode);",
      "info" : "ExpressionStatement[11960-11994]:ExpressionStatement[12033-12067]"
    }, {
      "left" : "n.removeChild(nextNode);",
      "right" : "n.removeChild(nextNode);",
      "info" : "ExpressionStatement[12005-12029]:ExpressionStatement[12078-12102]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12040-12059]:ExpressionStatement[12113-12132]"
    }, {
      "left" : "if (elseBranch != null && statementMustExitParent(thenBranch))",
      "right" : "if (elseBranch != null && statementMustExitParent(thenBranch))",
      "info" : "IfStatement[12075-12266]:IfStatement[12148-12339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12138-12266]:Block[12211-12339]"
    }, {
      "left" : "child.removeChild(elseBranch);",
      "right" : "child.removeChild(elseBranch);",
      "info" : "ExpressionStatement[12150-12180]:ExpressionStatement[12223-12253]"
    }, {
      "left" : "n.addChildAfter(elseBranch, child);",
      "right" : "n.addChildAfter(elseBranch, child);",
      "info" : "ExpressionStatement[12191-12226]:ExpressionStatement[12264-12299]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12237-12256]:ExpressionStatement[12310-12329]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12285-12294]:ReturnStatement[12358-12367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12302-12309]:Modifier[12375-12382]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12310-12317]:PrimitiveType[12383-12390]"
    }, {
      "left" : "statementMustExitParent",
      "right" : "statementMustExitParent",
      "info" : "SimpleName[12318-12341]:SimpleName[12391-12414]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12342-12348]:SingleVariableDeclaration[12415-12421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12350-12743]:Block[12423-12816]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.THROW:\n      case Token.RETURN:\n        return true;\n      case Token.BLOCK:\n        if (n.hasChildren()) {\n          Node child = n.getLastChild();\n          return statementMustExitParent(child);\n        }\n        return false;\n      // TODO(johnlenz): handle TRY/FINALLY\n      case Token.FUNCTION:\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.THROW:\n      case Token.RETURN:\n        return true;\n      case Token.BLOCK:\n        if (n.hasChildren()) {\n          Node child = n.getLastChild();\n          return statementMustExitParent(child);\n        }\n        return false;\n      // TODO(johnlenz): handle TRY/FINALLY\n      case Token.FUNCTION:\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[12356-12739]:SwitchStatement[12429-12812]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[12385-12402]:SwitchCase[12458-12475]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[12409-12427]:SwitchCase[12482-12500]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12436-12448]:ReturnStatement[12509-12521]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[12455-12472]:SwitchCase[12528-12545]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[12481-12603]:IfStatement[12554-12676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12502-12603]:Block[12575-12676]"
    }, {
      "left" : "Node child = n.getLastChild();",
      "right" : "Node child = n.getLastChild();",
      "info" : "VariableDeclarationStatement[12514-12544]:VariableDeclarationStatement[12587-12617]"
    }, {
      "left" : "return statementMustExitParent(child);",
      "right" : "return statementMustExitParent(child);",
      "info" : "ReturnStatement[12555-12593]:ReturnStatement[12628-12666]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12612-12625]:ReturnStatement[12685-12698]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[12676-12696]:SwitchCase[12749-12769]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12703-12711]:SwitchCase[12776-12784]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12720-12733]:ReturnStatement[12793-12806]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12801-12808]:Modifier[12874-12881]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12809-12813]:SimpleType[12882-12886]"
    }, {
      "left" : "tryReplaceUndefined",
      "right" : "tryReplaceUndefined",
      "info" : "SimpleName[12814-12833]:SimpleName[12887-12906]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12834-12840]:SingleVariableDeclaration[12907-12913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12842-13184]:Block[12915-13257]"
    }, {
      "left" : "if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n))",
      "right" : "if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n))",
      "info" : "IfStatement[12911-13166]:IfStatement[12984-13239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13002-13166]:Block[13075-13239]"
    }, {
      "left" : "Node replacement = NodeUtil.newUndefinedNode(n);",
      "right" : "Node replacement = NodeUtil.newUndefinedNode(n);",
      "info" : "VariableDeclarationStatement[13010-13058]:VariableDeclarationStatement[13083-13131]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[13065-13108]:ExpressionStatement[13138-13181]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13115-13134]:ExpressionStatement[13188-13207]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[13141-13160]:ReturnStatement[13214-13233]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13171-13180]:ReturnStatement[13244-13253]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13325-13332]:Modifier[13398-13405]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13333-13337]:SimpleType[13406-13410]"
    }, {
      "left" : "tryReduceReturn",
      "right" : "tryReduceReturn",
      "info" : "SimpleName[13338-13353]:SimpleName[13411-13426]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13354-13360]:SingleVariableDeclaration[13427-13433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13362-13915]:Block[13435-13988]"
    }, {
      "left" : "Node result = n.getFirstChild();",
      "right" : "Node result = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13368-13400]:VariableDeclarationStatement[13441-13473]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[13406-13896]:IfStatement[13479-13969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13426-13896]:Block[13499-13969]"
    }, {
      "left" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n      }",
      "right" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n      }",
      "info" : "SwitchStatement[13434-13890]:SwitchStatement[13507-13963]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[13470-13486]:SwitchCase[13543-13559]"
    }, {
      "left" : "Node operand = result.getFirstChild();",
      "right" : "Node operand = result.getFirstChild();",
      "info" : "VariableDeclarationStatement[13497-13535]:VariableDeclarationStatement[13570-13608]"
    }, {
      "left" : "if (!mayHaveSideEffects(operand))",
      "right" : "if (!mayHaveSideEffects(operand))",
      "info" : "IfStatement[13546-13659]:IfStatement[13619-13732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13580-13659]:Block[13653-13732]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[13594-13615]:ExpressionStatement[13667-13688]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13628-13647]:ExpressionStatement[13701-13720]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13670-13676]:BreakStatement[13743-13749]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[13685-13701]:SwitchCase[13758-13774]"
    }, {
      "left" : "String name = result.getString();",
      "right" : "String name = result.getString();",
      "info" : "VariableDeclarationStatement[13712-13745]:VariableDeclarationStatement[13785-13818]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[13756-13865]:IfStatement[13829-13938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13786-13865]:Block[13859-13938]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[13800-13821]:ExpressionStatement[13873-13894]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13834-13853]:ExpressionStatement[13907-13926]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13876-13882]:BreakStatement[13949-13955]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13902-13911]:ReturnStatement[13975-13984]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14443-14450]:Modifier[14516-14523]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14451-14455]:SimpleType[14524-14528]"
    }, {
      "left" : "tryReplaceExitWithBreak",
      "right" : "tryReplaceExitWithBreak",
      "info" : "SimpleName[14456-14479]:SimpleName[14529-14552]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14480-14486]:SingleVariableDeclaration[14553-14559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14488-16114]:Block[14561-16187]"
    }, {
      "left" : "Node result = n.getFirstChild();",
      "right" : "Node result = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14494-14526]:VariableDeclarationStatement[14567-14599]"
    }, {
      "left" : "Node breakTarget = n;",
      "right" : "Node breakTarget = n;",
      "info" : "VariableDeclarationStatement[14624-14645]:VariableDeclarationStatement[14697-14718]"
    }, {
      "left" : "for (;!ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);\n        breakTarget = breakTarget.getParent())",
      "right" : "for (;!ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);\n        breakTarget = breakTarget.getParent())",
      "info" : "ForStatement[14650-14898]:ForStatement[14723-14971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14773-14898]:Block[14846-14971]"
    }, {
      "left" : "if (breakTarget.isFunction() || breakTarget.isScript())",
      "right" : "if (breakTarget.isFunction() || breakTarget.isScript())",
      "info" : "IfStatement[14781-14892]:IfStatement[14854-14965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14837-14892]:Block[14910-14965]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14875-14884]:ReturnStatement[14948-14957]"
    }, {
      "left" : "Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);",
      "right" : "Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);",
      "info" : "VariableDeclarationStatement[14904-14969]:VariableDeclarationStatement[14977-15042]"
    }, {
      "left" : "Node prefinallyFollows = follow;",
      "right" : "Node prefinallyFollows = follow;",
      "info" : "VariableDeclarationStatement[15350-15382]:VariableDeclarationStatement[15423-15455]"
    }, {
      "left" : "follow = skipFinallyNodes(follow);",
      "right" : "follow = skipFinallyNodes(follow);",
      "info" : "ExpressionStatement[15387-15421]:ExpressionStatement[15460-15494]"
    }, {
      "left" : "if (prefinallyFollows != follow)",
      "right" : "if (prefinallyFollows != follow)",
      "info" : "IfStatement[15427-15590]:IfStatement[15500-15663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15460-15590]:Block[15533-15663]"
    }, {
      "left" : "if (!isPure(result))",
      "right" : "if (!isPure(result))",
      "info" : "IfStatement[15504-15584]:IfStatement[15577-15657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15525-15584]:Block[15598-15657]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15567-15576]:ReturnStatement[15640-15649]"
    }, {
      "left" : "if (follow == null && (n.isThrow() || result != null))",
      "right" : "if (follow == null && (n.isThrow() || result != null))",
      "info" : "IfStatement[15596-15745]:IfStatement[15669-15818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15651-15745]:Block[15724-15818]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15730-15739]:ReturnStatement[15803-15812]"
    }, {
      "left" : "if (follow == null || areMatchingExits(n, follow))",
      "right" : "if (follow == null || areMatchingExits(n, follow))",
      "info" : "IfStatement[15889-16095]:IfStatement[15962-16168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15940-16095]:Block[16013-16168]"
    }, {
      "left" : "Node replacement = IR.breakNode();",
      "right" : "Node replacement = IR.breakNode();",
      "info" : "VariableDeclarationStatement[15948-15982]:VariableDeclarationStatement[16021-16055]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[15989-16032]:ExpressionStatement[16062-16105]"
    }, {
      "left" : "this.reportCodeChange();",
      "right" : "this.reportCodeChange();",
      "info" : "ExpressionStatement[16039-16063]:ExpressionStatement[16112-16136]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[16070-16089]:ReturnStatement[16143-16162]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[16101-16110]:ReturnStatement[16174-16183]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16580-16587]:Modifier[16653-16660]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16588-16592]:SimpleType[16661-16665]"
    }, {
      "left" : "tryRemoveRedundantExit",
      "right" : "tryRemoveRedundantExit",
      "info" : "SimpleName[16593-16615]:SimpleName[16666-16688]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16616-16622]:SingleVariableDeclaration[16689-16695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16624-17557]:Block[16697-17630]"
    }, {
      "left" : "Node exitExpr = n.getFirstChild();",
      "right" : "Node exitExpr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16630-16664]:VariableDeclarationStatement[16703-16737]"
    }, {
      "left" : "Node follow = ControlFlowAnalysis.computeFollowNode(n);",
      "right" : "Node follow = ControlFlowAnalysis.computeFollowNode(n);",
      "info" : "VariableDeclarationStatement[16670-16725]:VariableDeclarationStatement[16743-16798]"
    }, {
      "left" : "Node prefinallyFollows = follow;",
      "right" : "Node prefinallyFollows = follow;",
      "info" : "VariableDeclarationStatement[16861-16893]:VariableDeclarationStatement[16934-16966]"
    }, {
      "left" : "follow = skipFinallyNodes(follow);",
      "right" : "follow = skipFinallyNodes(follow);",
      "info" : "ExpressionStatement[16898-16932]:ExpressionStatement[16971-17005]"
    }, {
      "left" : "if (prefinallyFollows != follow)",
      "right" : "if (prefinallyFollows != follow)",
      "info" : "IfStatement[16937-17106]:IfStatement[17010-17179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16970-17106]:Block[17043-17179]"
    }, {
      "left" : "if (!isPure(exitExpr))",
      "right" : "if (!isPure(exitExpr))",
      "info" : "IfStatement[17014-17100]:IfStatement[17087-17173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17037-17100]:Block[17110-17173]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17083-17092]:ReturnStatement[17156-17165]"
    }, {
      "left" : "if (follow == null && (n.isThrow() || exitExpr != null))",
      "right" : "if (follow == null && (n.isThrow() || exitExpr != null))",
      "info" : "IfStatement[17112-17263]:IfStatement[17185-17336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17169-17263]:Block[17242-17336]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17248-17257]:ReturnStatement[17321-17330]"
    }, {
      "left" : "if (follow == null || areMatchingExits(n, follow))",
      "right" : "if (follow == null || areMatchingExits(n, follow))",
      "info" : "IfStatement[17407-17538]:IfStatement[17480-17611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17458-17538]:Block[17531-17611]"
    }, {
      "left" : "n.detachFromParent();",
      "right" : "n.detachFromParent();",
      "info" : "ExpressionStatement[17466-17487]:ExpressionStatement[17539-17560]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17494-17513]:ExpressionStatement[17567-17586]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17520-17532]:ReturnStatement[17593-17605]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17544-17553]:ReturnStatement[17617-17626]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17673-17680]:PrimitiveType[17746-17753]"
    }, {
      "left" : "isPure",
      "right" : "isPure",
      "info" : "SimpleName[17681-17687]:SimpleName[17754-17760]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17688-17694]:SingleVariableDeclaration[17761-17767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17696-17814]:Block[17769-17887]"
    }, {
      "left" : "return n == null\n        || (!NodeUtil.canBeSideEffected(n)\n            && !NodeUtil.mayHaveSideEffects(n));",
      "right" : "return n == null\n        || (!NodeUtil.canBeSideEffected(n)\n            && !NodeUtil.mayHaveSideEffects(n));",
      "info" : "ReturnStatement[17702-17810]:ReturnStatement[17775-17883]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17896-17900]:SimpleType[17969-17973]"
    }, {
      "left" : "skipFinallyNodes",
      "right" : "skipFinallyNodes",
      "info" : "SimpleName[17901-17917]:SimpleName[17974-17990]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17918-17924]:SingleVariableDeclaration[17991-17997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17926-18074]:Block[17999-18147]"
    }, {
      "left" : "while (n != null && NodeUtil.isTryFinallyNode(n.getParent(), n))",
      "right" : "while (n != null && NodeUtil.isTryFinallyNode(n.getParent(), n))",
      "info" : "WhileStatement[17932-18056]:WhileStatement[18005-18129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17997-18056]:Block[18070-18129]"
    }, {
      "left" : "n = ControlFlowAnalysis.computeFollowNode(n);",
      "right" : "n = ControlFlowAnalysis.computeFollowNode(n);",
      "info" : "ExpressionStatement[18005-18050]:ExpressionStatement[18078-18123]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18061-18070]:ReturnStatement[18134-18143]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18335-18342]:PrimitiveType[18408-18415]"
    }, {
      "left" : "areMatchingExits",
      "right" : "areMatchingExits",
      "info" : "SimpleName[18343-18359]:SimpleName[18416-18432]"
    }, {
      "left" : "Node nodeThis",
      "right" : "Node nodeThis",
      "info" : "SingleVariableDeclaration[18360-18373]:SingleVariableDeclaration[18433-18446]"
    }, {
      "left" : "Node nodeThat",
      "right" : "Node nodeThat",
      "info" : "SingleVariableDeclaration[18375-18388]:SingleVariableDeclaration[18448-18461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18390-18563]:Block[18463-18636]"
    }, {
      "left" : "return nodeThis.isEquivalentTo(nodeThat)\n        && (!isExceptionPossible(nodeThis)\n            || getExceptionHandler(nodeThis) == getExceptionHandler(nodeThat));",
      "right" : "return nodeThis.isEquivalentTo(nodeThat)\n        && (!isExceptionPossible(nodeThis)\n            || getExceptionHandler(nodeThis) == getExceptionHandler(nodeThat));",
      "info" : "ReturnStatement[18396-18559]:ReturnStatement[18469-18632]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18567-18574]:PrimitiveType[18640-18647]"
    }, {
      "left" : "isExceptionPossible",
      "right" : "isExceptionPossible",
      "info" : "SimpleName[18575-18594]:SimpleName[18648-18667]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18595-18601]:SingleVariableDeclaration[18668-18674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18603-18864]:Block[18676-18937]"
    }, {
      "left" : "Preconditions.checkState(n.isReturn()\n        || n.isThrow());",
      "right" : "Preconditions.checkState(n.isReturn()\n        || n.isThrow());",
      "info" : "ExpressionStatement[18681-18743]:ExpressionStatement[18754-18816]"
    }, {
      "left" : "return n.isThrow()\n        || (n.hasChildren()\n            && !NodeUtil.isLiteralValue(n.getLastChild(), true));",
      "right" : "return n.isThrow()\n        || (n.hasChildren()\n            && !NodeUtil.isLiteralValue(n.getLastChild(), true));",
      "info" : "ReturnStatement[18748-18860]:ReturnStatement[18821-18933]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18868-18872]:SimpleType[18941-18945]"
    }, {
      "left" : "getExceptionHandler",
      "right" : "getExceptionHandler",
      "info" : "SimpleName[18873-18892]:SimpleName[18946-18965]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18893-18899]:SingleVariableDeclaration[18966-18972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18901-18961]:Block[18974-19034]"
    }, {
      "left" : "return ControlFlowAnalysis.getExceptionHandler(n);",
      "right" : "return ControlFlowAnalysis.getExceptionHandler(n);",
      "info" : "ReturnStatement[18907-18957]:ReturnStatement[18980-19030]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19103-19110]:Modifier[19176-19183]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19111-19115]:SimpleType[19184-19188]"
    }, {
      "left" : "tryMinimizeNot",
      "right" : "tryMinimizeNot",
      "info" : "SimpleName[19116-19130]:SimpleName[19189-19203]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19131-19137]:SingleVariableDeclaration[19204-19210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19139-19950]:Block[19212-20023]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[19145-19173]:VariableDeclarationStatement[19218-19246]"
    }, {
      "left" : "Node notChild = n.getFirstChild();",
      "right" : "Node notChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19179-19213]:VariableDeclarationStatement[19252-19286]"
    }, {
      "left" : "int complementOperator;",
      "right" : "int complementOperator;",
      "info" : "VariableDeclarationStatement[19287-19310]:VariableDeclarationStatement[19360-19383]"
    }, {
      "left" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return n;\n    }",
      "right" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[19315-19767]:SwitchStatement[19388-19840]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19351-19365]:SwitchCase[19424-19438]"
    }, {
      "left" : "complementOperator = Token.NE;",
      "right" : "complementOperator = Token.NE;",
      "info" : "ExpressionStatement[19374-19404]:ExpressionStatement[19447-19477]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19413-19419]:BreakStatement[19486-19492]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19426-19440]:SwitchCase[19499-19513]"
    }, {
      "left" : "complementOperator = Token.EQ;",
      "right" : "complementOperator = Token.EQ;",
      "info" : "ExpressionStatement[19449-19479]:ExpressionStatement[19522-19552]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19488-19494]:BreakStatement[19561-19567]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[19501-19517]:SwitchCase[19574-19590]"
    }, {
      "left" : "complementOperator = Token.SHNE;",
      "right" : "complementOperator = Token.SHNE;",
      "info" : "ExpressionStatement[19526-19558]:ExpressionStatement[19599-19631]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19567-19573]:BreakStatement[19640-19646]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[19580-19596]:SwitchCase[19653-19669]"
    }, {
      "left" : "complementOperator = Token.SHEQ;",
      "right" : "complementOperator = Token.SHEQ;",
      "info" : "ExpressionStatement[19605-19637]:ExpressionStatement[19678-19710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19646-19652]:BreakStatement[19719-19725]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19735-19743]:SwitchCase[19808-19816]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19752-19761]:ReturnStatement[19825-19834]"
    }, {
      "left" : "Node newOperator = n.removeFirstChild();",
      "right" : "Node newOperator = n.removeFirstChild();",
      "info" : "VariableDeclarationStatement[19772-19812]:VariableDeclarationStatement[19845-19885]"
    }, {
      "left" : "newOperator.setType(complementOperator);",
      "right" : "newOperator.setType(complementOperator);",
      "info" : "ExpressionStatement[19817-19857]:ExpressionStatement[19890-19930]"
    }, {
      "left" : "parent.replaceChild(n, newOperator);",
      "right" : "parent.replaceChild(n, newOperator);",
      "info" : "ExpressionStatement[19862-19898]:ExpressionStatement[19935-19971]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[19903-19922]:ExpressionStatement[19976-19995]"
    }, {
      "left" : "return newOperator;",
      "right" : "return newOperator;",
      "info" : "ReturnStatement[19927-19946]:ReturnStatement[20000-20019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20105-20112]:Modifier[20178-20185]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20113-20117]:SimpleType[20186-20190]"
    }, {
      "left" : "tryMinimizeIf",
      "right" : "tryMinimizeIf",
      "info" : "SimpleName[20118-20131]:SimpleName[20191-20204]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20132-20138]:SingleVariableDeclaration[20205-20211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20140-28566]:Block[20213-28639]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[20147-20175]:VariableDeclarationStatement[20220-20248]"
    }, {
      "left" : "Node cond = n.getFirstChild();",
      "right" : "Node cond = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20181-20211]:VariableDeclarationStatement[20254-20284]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(cond, true))",
      "right" : "if (NodeUtil.isLiteralValue(cond, true))",
      "info" : "IfStatement[20328-20392]:IfStatement[20401-20465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20369-20392]:Block[20442-20465]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[20377-20386]:ReturnStatement[20450-20459]"
    }, {
      "left" : "Node thenBranch = cond.getNext();",
      "right" : "Node thenBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[20398-20431]:VariableDeclarationStatement[20471-20504]"
    }, {
      "left" : "Node elseBranch = thenBranch.getNext();",
      "right" : "Node elseBranch = thenBranch.getNext();",
      "info" : "VariableDeclarationStatement[20436-20475]:VariableDeclarationStatement[20509-20548]"
    }, {
      "left" : "if (elseBranch == null)",
      "right" : "if (elseBranch == null)",
      "info" : "IfStatement[20481-23405]:IfStatement[20554-23478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20505-23405]:Block[20578-23478]"
    }, {
      "left" : "if (isFoldableExpressBlock(thenBranch))",
      "right" : "if (isFoldableExpressBlock(thenBranch))",
      "info" : "IfStatement[20513-23382]:IfStatement[20586-23455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20553-22249]:Block[20626-22322]"
    }, {
      "left" : "Node expr = getBlockExpression(thenBranch);",
      "right" : "Node expr = getBlockExpression(thenBranch);",
      "info" : "VariableDeclarationStatement[20563-20606]:VariableDeclarationStatement[20636-20679]"
    }, {
      "left" : "if (!late && isPropertyAssignmentInExpression(expr))",
      "right" : "if (!late && isPropertyAssignmentInExpression(expr))",
      "info" : "IfStatement[20615-20886]:IfStatement[20688-20959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20668-20886]:Block[20741-20959]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[20867-20876]:ReturnStatement[20940-20949]"
    }, {
      "left" : "if (cond.isNot())",
      "right" : "if (cond.isNot())",
      "info" : "IfStatement[20896-21493]:IfStatement[20969-21566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20914-21493]:Block[20987-21566]"
    }, {
      "left" : "if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE))",
      "right" : "if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE))",
      "info" : "IfStatement[20965-21219]:IfStatement[21038-21292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21123-21219]:Block[21196-21292]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21198-21207]:ReturnStatement[21271-21280]"
    }, {
      "left" : "Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);",
      "right" : "Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);",
      "info" : "VariableDeclarationStatement[21231-21336]:VariableDeclarationStatement[21304-21409]"
    }, {
      "left" : "Node newExpr = NodeUtil.newExpr(or);",
      "right" : "Node newExpr = NodeUtil.newExpr(or);",
      "info" : "VariableDeclarationStatement[21347-21383]:VariableDeclarationStatement[21420-21456]"
    }, {
      "left" : "parent.replaceChild(n, newExpr);",
      "right" : "parent.replaceChild(n, newExpr);",
      "info" : "ExpressionStatement[21394-21426]:ExpressionStatement[21467-21499]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[21437-21456]:ExpressionStatement[21510-21529]"
    }, {
      "left" : "return newExpr;",
      "right" : "return newExpr;",
      "info" : "ReturnStatement[21468-21483]:ReturnStatement[21541-21556]"
    }, {
      "left" : "if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE))",
      "right" : "if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE))",
      "info" : "IfStatement[21539-22003]:IfStatement[21612-22076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21695-22003]:Block[21768-22076]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21984-21993]:ReturnStatement[22057-22066]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[22013-22033]:ExpressionStatement[22086-22106]"
    }, {
      "left" : "Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);",
      "right" : "Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);",
      "info" : "VariableDeclarationStatement[22042-22101]:VariableDeclarationStatement[22115-22174]"
    }, {
      "left" : "Node newExpr = NodeUtil.newExpr(and);",
      "right" : "Node newExpr = NodeUtil.newExpr(and);",
      "info" : "VariableDeclarationStatement[22110-22147]:VariableDeclarationStatement[22183-22220]"
    }, {
      "left" : "parent.replaceChild(n, newExpr);",
      "right" : "parent.replaceChild(n, newExpr);",
      "info" : "ExpressionStatement[22156-22188]:ExpressionStatement[22229-22261]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[22197-22216]:ExpressionStatement[22270-22289]"
    }, {
      "left" : "return newExpr;",
      "right" : "return newExpr;",
      "info" : "ReturnStatement[22226-22241]:ReturnStatement[22299-22314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22255-23382]:Block[22328-23455]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild())",
      "right" : "if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild())",
      "info" : "IfStatement[22304-23374]:IfStatement[22377-23447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22387-23374]:Block[22460-23447]"
    }, {
      "left" : "Node innerIf = thenBranch.getFirstChild();",
      "right" : "Node innerIf = thenBranch.getFirstChild();",
      "info" : "VariableDeclarationStatement[22399-22441]:VariableDeclarationStatement[22472-22514]"
    }, {
      "left" : "if (innerIf.isIf())",
      "right" : "if (innerIf.isIf())",
      "info" : "IfStatement[22453-23364]:IfStatement[22526-23437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22473-23364]:Block[22546-23437]"
    }, {
      "left" : "Node innerCond = innerIf.getFirstChild();",
      "right" : "Node innerCond = innerIf.getFirstChild();",
      "info" : "VariableDeclarationStatement[22487-22528]:VariableDeclarationStatement[22560-22601]"
    }, {
      "left" : "Node innerThenBranch = innerCond.getNext();",
      "right" : "Node innerThenBranch = innerCond.getNext();",
      "info" : "VariableDeclarationStatement[22541-22584]:VariableDeclarationStatement[22614-22657]"
    }, {
      "left" : "Node innerElseBranch = innerThenBranch.getNext();",
      "right" : "Node innerElseBranch = innerThenBranch.getNext();",
      "info" : "VariableDeclarationStatement[22597-22646]:VariableDeclarationStatement[22670-22719]"
    }, {
      "left" : "if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE)))",
      "right" : "if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE)))",
      "info" : "IfStatement[22660-23352]:IfStatement[22733-23425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22843-23352]:Block[22916-23425]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[22859-22878]:ExpressionStatement[22932-22951]"
    }, {
      "left" : "n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));",
      "right" : "n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));",
      "info" : "ExpressionStatement[22893-23054]:ExpressionStatement[22966-23127]"
    }, {
      "left" : "n.addChildrenToBack(innerThenBranch.detachFromParent());",
      "right" : "n.addChildrenToBack(innerThenBranch.detachFromParent());",
      "info" : "ExpressionStatement[23069-23125]:ExpressionStatement[23142-23198]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23140-23159]:ExpressionStatement[23213-23232]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23329-23338]:ReturnStatement[23402-23411]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23390-23399]:ReturnStatement[23463-23472]"
    }, {
      "left" : "tryRemoveRepeatedStatements(n);",
      "right" : "tryRemoveRepeatedStatements(n);",
      "info" : "ExpressionStatement[23574-23605]:ExpressionStatement[23647-23678]"
    }, {
      "left" : "if (cond.isNot() && !consumesDanglingElse(elseBranch))",
      "right" : "if (cond.isNot() && !consumesDanglingElse(elseBranch))",
      "info" : "IfStatement[23725-23951]:IfStatement[23798-24024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23780-23951]:Block[23853-24024]"
    }, {
      "left" : "n.replaceChild(cond, cond.removeFirstChild());",
      "right" : "n.replaceChild(cond, cond.removeFirstChild());",
      "info" : "ExpressionStatement[23788-23834]:ExpressionStatement[23861-23907]"
    }, {
      "left" : "n.removeChild(thenBranch);",
      "right" : "n.removeChild(thenBranch);",
      "info" : "ExpressionStatement[23841-23867]:ExpressionStatement[23914-23940]"
    }, {
      "left" : "n.addChildToBack(thenBranch);",
      "right" : "n.addChildToBack(thenBranch);",
      "info" : "ExpressionStatement[23874-23903]:ExpressionStatement[23947-23976]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23910-23929]:ExpressionStatement[23983-24002]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23936-23945]:ReturnStatement[24009-24018]"
    }, {
      "left" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
      "right" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
      "info" : "IfStatement[24010-24726]:IfStatement[24083-24799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24084-24726]:Block[24157-24799]"
    }, {
      "left" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
      "right" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
      "info" : "VariableDeclarationStatement[24092-24145]:VariableDeclarationStatement[24165-24218]"
    }, {
      "left" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
      "right" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
      "info" : "VariableDeclarationStatement[24152-24205]:VariableDeclarationStatement[24225-24278]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[24212-24232]:ExpressionStatement[24285-24305]"
    }, {
      "left" : "thenExpr.detachFromParent();",
      "right" : "thenExpr.detachFromParent();",
      "info" : "ExpressionStatement[24239-24267]:ExpressionStatement[24312-24340]"
    }, {
      "left" : "elseExpr.detachFromParent();",
      "right" : "elseExpr.detachFromParent();",
      "info" : "ExpressionStatement[24274-24302]:ExpressionStatement[24347-24375]"
    }, {
      "left" : "Node returnNode = IR.returnNode(\n                            IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n));",
      "right" : "Node returnNode = IR.returnNode(\n                            IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n));",
      "info" : "VariableDeclarationStatement[24488-24627]:VariableDeclarationStatement[24561-24700]"
    }, {
      "left" : "parent.replaceChild(n, returnNode);",
      "right" : "parent.replaceChild(n, returnNode);",
      "info" : "ExpressionStatement[24634-24669]:ExpressionStatement[24707-24742]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[24676-24695]:ExpressionStatement[24749-24768]"
    }, {
      "left" : "return returnNode;",
      "right" : "return returnNode;",
      "info" : "ReturnStatement[24702-24720]:ReturnStatement[24775-24793]"
    }, {
      "left" : "boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);",
      "right" : "boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);",
      "info" : "VariableDeclarationStatement[24732-24805]:VariableDeclarationStatement[24805-24878]"
    }, {
      "left" : "boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);",
      "right" : "boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);",
      "info" : "VariableDeclarationStatement[24810-24883]:VariableDeclarationStatement[24883-24956]"
    }, {
      "left" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
      "right" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
      "info" : "IfStatement[24889-26568]:IfStatement[24962-26641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24953-26568]:Block[25026-26641]"
    }, {
      "left" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
      "right" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[24961-25022]:VariableDeclarationStatement[25034-25095]"
    }, {
      "left" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
      "right" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[25029-25090]:VariableDeclarationStatement[25102-25163]"
    }, {
      "left" : "if (thenOp.getType() == elseOp.getType())",
      "right" : "if (thenOp.getType() == elseOp.getType())",
      "info" : "IfStatement[25097-26254]:IfStatement[25170-26327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25139-26254]:Block[25212-26327]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(thenOp))",
      "right" : "if (NodeUtil.isAssignmentOp(thenOp))",
      "info" : "IfStatement[25191-26246]:IfStatement[25264-26319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25228-26246]:Block[25301-26319]"
    }, {
      "left" : "Node lhs = thenOp.getFirstChild();",
      "right" : "Node lhs = thenOp.getFirstChild();",
      "info" : "VariableDeclarationStatement[25240-25274]:VariableDeclarationStatement[25313-25347]"
    }, {
      "left" : "if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs))",
      "right" : "if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs))",
      "info" : "IfStatement[25285-26236]:IfStatement[25358-26309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25638-26236]:Block[25711-26309]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[25653-25673]:ExpressionStatement[25726-25746]"
    }, {
      "left" : "Node assignName = thenOp.removeFirstChild();",
      "right" : "Node assignName = thenOp.removeFirstChild();",
      "info" : "VariableDeclarationStatement[25686-25730]:VariableDeclarationStatement[25759-25803]"
    }, {
      "left" : "Node thenExpr = thenOp.removeFirstChild();",
      "right" : "Node thenExpr = thenOp.removeFirstChild();",
      "info" : "VariableDeclarationStatement[25743-25785]:VariableDeclarationStatement[25816-25858]"
    }, {
      "left" : "Node elseExpr = elseOp.getLastChild();",
      "right" : "Node elseExpr = elseOp.getLastChild();",
      "info" : "VariableDeclarationStatement[25798-25836]:VariableDeclarationStatement[25871-25909]"
    }, {
      "left" : "elseOp.removeChild(elseExpr);",
      "right" : "elseOp.removeChild(elseExpr);",
      "info" : "ExpressionStatement[25849-25878]:ExpressionStatement[25922-25951]"
    }, {
      "left" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);",
      "right" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);",
      "info" : "VariableDeclarationStatement[25892-25952]:VariableDeclarationStatement[25965-26025]"
    }, {
      "left" : "Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);",
      "right" : "Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);",
      "info" : "VariableDeclarationStatement[25965-26074]:VariableDeclarationStatement[26038-26147]"
    }, {
      "left" : "Node expr = NodeUtil.newExpr(assign);",
      "right" : "Node expr = NodeUtil.newExpr(assign);",
      "info" : "VariableDeclarationStatement[26087-26124]:VariableDeclarationStatement[26160-26197]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[26137-26166]:ExpressionStatement[26210-26239]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26179-26198]:ExpressionStatement[26252-26271]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[26212-26224]:ReturnStatement[26285-26297]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[26310-26330]:ExpressionStatement[26383-26403]"
    }, {
      "left" : "thenOp.detachFromParent();",
      "right" : "thenOp.detachFromParent();",
      "info" : "ExpressionStatement[26337-26363]:ExpressionStatement[26410-26436]"
    }, {
      "left" : "elseOp.detachFromParent();",
      "right" : "elseOp.detachFromParent();",
      "info" : "ExpressionStatement[26370-26396]:ExpressionStatement[26443-26469]"
    }, {
      "left" : "Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));",
      "right" : "Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));",
      "info" : "VariableDeclarationStatement[26403-26481]:VariableDeclarationStatement[26476-26554]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[26488-26517]:ExpressionStatement[26561-26590]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26524-26543]:ExpressionStatement[26597-26616]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[26550-26562]:ReturnStatement[26623-26635]"
    }, {
      "left" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
      "right" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
      "info" : "VariableDeclarationStatement[26574-26623]:VariableDeclarationStatement[26647-26696]"
    }, {
      "left" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
      "right" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
      "info" : "VariableDeclarationStatement[26628-26677]:VariableDeclarationStatement[26701-26750]"
    }, {
      "left" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign())",
      "right" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign())",
      "info" : "IfStatement[26729-28547]:IfStatement[26802-28620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26850-27658]:Block[26923-27731]"
    }, {
      "left" : "Node var = getBlockVar(thenBranch);",
      "right" : "Node var = getBlockVar(thenBranch);",
      "info" : "VariableDeclarationStatement[26859-26894]:VariableDeclarationStatement[26932-26967]"
    }, {
      "left" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
      "right" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[26901-26966]:VariableDeclarationStatement[26974-27039]"
    }, {
      "left" : "Node name1 = var.getFirstChild();",
      "right" : "Node name1 = var.getFirstChild();",
      "info" : "VariableDeclarationStatement[26974-27007]:VariableDeclarationStatement[27047-27080]"
    }, {
      "left" : "Node maybeName2 = elseAssign.getFirstChild();",
      "right" : "Node maybeName2 = elseAssign.getFirstChild();",
      "info" : "VariableDeclarationStatement[27014-27059]:VariableDeclarationStatement[27087-27132]"
    }, {
      "left" : "if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString()))",
      "right" : "if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString()))",
      "info" : "IfStatement[27067-27605]:IfStatement[27140-27678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27187-27605]:Block[27260-27678]"
    }, {
      "left" : "Node thenExpr = name1.removeChildren();",
      "right" : "Node thenExpr = name1.removeChildren();",
      "info" : "VariableDeclarationStatement[27197-27236]:VariableDeclarationStatement[27270-27309]"
    }, {
      "left" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
      "right" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
      "info" : "VariableDeclarationStatement[27245-27306]:VariableDeclarationStatement[27318-27379]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[27315-27339]:ExpressionStatement[27388-27412]"
    }, {
      "left" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "right" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "info" : "VariableDeclarationStatement[27348-27437]:VariableDeclarationStatement[27421-27510]"
    }, {
      "left" : "var.detachFromParent();",
      "right" : "var.detachFromParent();",
      "info" : "ExpressionStatement[27446-27469]:ExpressionStatement[27519-27542]"
    }, {
      "left" : "name1.addChildrenToBack(hookNode);",
      "right" : "name1.addChildrenToBack(hookNode);",
      "info" : "ExpressionStatement[27478-27512]:ExpressionStatement[27551-27585]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[27521-27549]:ExpressionStatement[27594-27622]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[27558-27577]:ExpressionStatement[27631-27650]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[27586-27597]:ReturnStatement[27659-27670]"
    }, {
      "left" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign())",
      "right" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign())",
      "info" : "IfStatement[27664-28547]:IfStatement[27737-28620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27785-28547]:Block[27858-28620]"
    }, {
      "left" : "Node var = getBlockVar(elseBranch);",
      "right" : "Node var = getBlockVar(elseBranch);",
      "info" : "VariableDeclarationStatement[27794-27829]:VariableDeclarationStatement[27867-27902]"
    }, {
      "left" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
      "right" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[27836-27901]:VariableDeclarationStatement[27909-27974]"
    }, {
      "left" : "Node maybeName1 = thenAssign.getFirstChild();",
      "right" : "Node maybeName1 = thenAssign.getFirstChild();",
      "info" : "VariableDeclarationStatement[27909-27954]:VariableDeclarationStatement[27982-28027]"
    }, {
      "left" : "Node name2 = var.getFirstChild();",
      "right" : "Node name2 = var.getFirstChild();",
      "info" : "VariableDeclarationStatement[27961-27994]:VariableDeclarationStatement[28034-28067]"
    }, {
      "left" : "if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString()))",
      "right" : "if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString()))",
      "info" : "IfStatement[28002-28541]:IfStatement[28075-28614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28122-28541]:Block[28195-28614]"
    }, {
      "left" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
      "right" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
      "info" : "VariableDeclarationStatement[28132-28193]:VariableDeclarationStatement[28205-28266]"
    }, {
      "left" : "Node elseExpr = name2.removeChildren();",
      "right" : "Node elseExpr = name2.removeChildren();",
      "info" : "VariableDeclarationStatement[28202-28241]:VariableDeclarationStatement[28275-28314]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[28250-28274]:ExpressionStatement[28323-28347]"
    }, {
      "left" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "right" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "info" : "VariableDeclarationStatement[28283-28372]:VariableDeclarationStatement[28356-28445]"
    }, {
      "left" : "var.detachFromParent();",
      "right" : "var.detachFromParent();",
      "info" : "ExpressionStatement[28381-28404]:ExpressionStatement[28454-28477]"
    }, {
      "left" : "name2.addChildrenToBack(hookNode);",
      "right" : "name2.addChildrenToBack(hookNode);",
      "info" : "ExpressionStatement[28413-28447]:ExpressionStatement[28486-28520]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[28456-28484]:ExpressionStatement[28529-28557]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[28493-28512]:ExpressionStatement[28566-28585]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[28522-28533]:ReturnStatement[28595-28606]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28553-28562]:ReturnStatement[28626-28635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28907-28914]:Modifier[28980-28987]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28915-28919]:PrimitiveType[28988-28992]"
    }, {
      "left" : "tryRemoveRepeatedStatements",
      "right" : "tryRemoveRepeatedStatements",
      "info" : "SimpleName[28920-28947]:SimpleName[28993-29020]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28948-28954]:SingleVariableDeclaration[29021-29027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28956-29814]:Block[29029-29887]"
    }, {
      "left" : "Preconditions.checkState(n.isIf());",
      "right" : "Preconditions.checkState(n.isIf());",
      "info" : "ExpressionStatement[28962-28997]:ExpressionStatement[29035-29070]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[29003-29031]:VariableDeclarationStatement[29076-29104]"
    }, {
      "left" : "if (!NodeUtil.isStatementBlock(parent))",
      "right" : "if (!NodeUtil.isStatementBlock(parent))",
      "info" : "IfStatement[29036-29204]:IfStatement[29109-29277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29076-29204]:Block[29149-29277]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29191-29198]:ReturnStatement[29264-29271]"
    }, {
      "left" : "Node cond = n.getFirstChild();",
      "right" : "Node cond = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[29210-29240]:VariableDeclarationStatement[29283-29313]"
    }, {
      "left" : "Node trueBranch = cond.getNext();",
      "right" : "Node trueBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[29245-29278]:VariableDeclarationStatement[29318-29351]"
    }, {
      "left" : "Node falseBranch = trueBranch.getNext();",
      "right" : "Node falseBranch = trueBranch.getNext();",
      "info" : "VariableDeclarationStatement[29283-29323]:VariableDeclarationStatement[29356-29396]"
    }, {
      "left" : "Preconditions.checkNotNull(trueBranch);",
      "right" : "Preconditions.checkNotNull(trueBranch);",
      "info" : "ExpressionStatement[29328-29367]:ExpressionStatement[29401-29440]"
    }, {
      "left" : "Preconditions.checkNotNull(falseBranch);",
      "right" : "Preconditions.checkNotNull(falseBranch);",
      "info" : "ExpressionStatement[29372-29412]:ExpressionStatement[29445-29485]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[29418-29810]:WhileStatement[29491-29883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29431-29810]:Block[29504-29883]"
    }, {
      "left" : "Node lastTrue = trueBranch.getLastChild();",
      "right" : "Node lastTrue = trueBranch.getLastChild();",
      "info" : "VariableDeclarationStatement[29439-29481]:VariableDeclarationStatement[29512-29554]"
    }, {
      "left" : "Node lastFalse = falseBranch.getLastChild();",
      "right" : "Node lastFalse = falseBranch.getLastChild();",
      "info" : "VariableDeclarationStatement[29488-29532]:VariableDeclarationStatement[29561-29605]"
    }, {
      "left" : "if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse))",
      "right" : "if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse))",
      "info" : "IfStatement[29539-29666]:IfStatement[29612-29739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29642-29666]:Block[29715-29739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29652-29658]:BreakStatement[29725-29731]"
    }, {
      "left" : "lastTrue.detachFromParent();",
      "right" : "lastTrue.detachFromParent();",
      "info" : "ExpressionStatement[29673-29701]:ExpressionStatement[29746-29774]"
    }, {
      "left" : "lastFalse.detachFromParent();",
      "right" : "lastFalse.detachFromParent();",
      "info" : "ExpressionStatement[29708-29737]:ExpressionStatement[29781-29810]"
    }, {
      "left" : "parent.addChildAfter(lastTrue, n);",
      "right" : "parent.addChildAfter(lastTrue, n);",
      "info" : "ExpressionStatement[29744-29778]:ExpressionStatement[29817-29851]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[29785-29804]:ExpressionStatement[29858-29877]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29927-29934]:Modifier[30000-30007]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29935-29942]:PrimitiveType[30008-30015]"
    }, {
      "left" : "isFoldableExpressBlock",
      "right" : "isFoldableExpressBlock",
      "info" : "SimpleName[29943-29965]:SimpleName[30016-30038]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29966-29972]:SingleVariableDeclaration[30039-30045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29974-31084]:Block[30047-31157]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[29980-31061]:IfStatement[30053-31134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29997-31061]:Block[30070-31134]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[30005-31055]:IfStatement[30078-31128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30026-31055]:Block[30099-31128]"
    }, {
      "left" : "Node maybeExpr = n.getFirstChild();",
      "right" : "Node maybeExpr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[30036-30071]:VariableDeclarationStatement[30109-30144]"
    }, {
      "left" : "if (maybeExpr.isExprResult())",
      "right" : "if (maybeExpr.isExprResult())",
      "info" : "IfStatement[30080-31025]:IfStatement[30153-31098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30110-31025]:Block[30183-31098]"
    }, {
      "left" : "if (maybeExpr.getFirstChild().isCall())",
      "right" : "if (maybeExpr.getFirstChild().isCall())",
      "info" : "IfStatement[30509-30991]:IfStatement[30582-31064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30549-30991]:Block[30622-31064]"
    }, {
      "left" : "Node calledFn = maybeExpr.getFirstChild().getFirstChild();",
      "right" : "Node calledFn = maybeExpr.getFirstChild().getFirstChild();",
      "info" : "VariableDeclarationStatement[30563-30621]:VariableDeclarationStatement[30636-30694]"
    }, {
      "left" : "if (calledFn.isGetElem())",
      "right" : "if (calledFn.isGetElem())",
      "info" : "IfStatement[30756-30979]:IfStatement[30829-31052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30782-30825]:Block[30855-30898]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30798-30811]:ReturnStatement[30871-30884]"
    }, {
      "left" : "if (calledFn.isGetProp() &&\n                       calledFn.getLastChild().getString().startsWith(\"on\"))",
      "right" : "if (calledFn.isGetProp() &&\n                       calledFn.getLastChild().getString().startsWith(\"on\"))",
      "info" : "IfStatement[30831-30979]:IfStatement[30904-31052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30936-30979]:Block[31009-31052]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30952-30965]:ReturnStatement[31025-31038]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31003-31015]:ReturnStatement[31076-31088]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31034-31047]:ReturnStatement[31107-31120]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31067-31080]:ReturnStatement[31140-31153]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31134-31141]:Modifier[31207-31214]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31142-31146]:SimpleType[31215-31219]"
    }, {
      "left" : "getBlockExpression",
      "right" : "getBlockExpression",
      "info" : "SimpleName[31147-31165]:SimpleName[31220-31238]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31166-31172]:SingleVariableDeclaration[31239-31245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31174-31266]:Block[31247-31339]"
    }, {
      "left" : "Preconditions.checkState(isFoldableExpressBlock(n));",
      "right" : "Preconditions.checkState(isFoldableExpressBlock(n));",
      "info" : "ExpressionStatement[31180-31232]:ExpressionStatement[31253-31305]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[31237-31262]:ReturnStatement[31310-31335]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31405-31412]:Modifier[31478-31485]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31413-31420]:PrimitiveType[31486-31493]"
    }, {
      "left" : "isReturnBlock",
      "right" : "isReturnBlock",
      "info" : "SimpleName[31421-31434]:SimpleName[31494-31507]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31435-31441]:SingleVariableDeclaration[31508-31514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31443-31606]:Block[31516-31679]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[31449-31583]:IfStatement[31522-31656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31466-31583]:Block[31539-31656]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[31474-31577]:IfStatement[31547-31650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31495-31577]:Block[31568-31650]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[31505-31536]:VariableDeclarationStatement[31578-31609]"
    }, {
      "left" : "return first.isReturn();",
      "right" : "return first.isReturn();",
      "info" : "ReturnStatement[31545-31569]:ReturnStatement[31618-31642]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31589-31602]:ReturnStatement[31662-31675]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31715-31722]:Modifier[31788-31795]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31723-31730]:PrimitiveType[31796-31803]"
    }, {
      "left" : "isReturnExpressBlock",
      "right" : "isReturnExpressBlock",
      "info" : "SimpleName[31731-31751]:SimpleName[31804-31824]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31752-31758]:SingleVariableDeclaration[31825-31831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31760-31970]:Block[31833-32043]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[31766-31947]:IfStatement[31839-32020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31783-31947]:Block[31856-32020]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[31791-31941]:IfStatement[31864-32014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31812-31941]:Block[31885-32014]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[31822-31853]:VariableDeclarationStatement[31895-31926]"
    }, {
      "left" : "if (first.isReturn())",
      "right" : "if (first.isReturn())",
      "info" : "IfStatement[31862-31933]:IfStatement[31935-32006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31884-31933]:Block[31957-32006]"
    }, {
      "left" : "return first.hasOneChild();",
      "right" : "return first.hasOneChild();",
      "info" : "ReturnStatement[31896-31923]:ReturnStatement[31969-31996]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31953-31966]:ReturnStatement[32026-32039]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32046-32053]:Modifier[32119-32126]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32054-32061]:PrimitiveType[32127-32134]"
    }, {
      "left" : "isReturnExpression",
      "right" : "isReturnExpression",
      "info" : "SimpleName[32062-32080]:SimpleName[32135-32153]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32081-32087]:SingleVariableDeclaration[32154-32160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32089-32172]:Block[32162-32245]"
    }, {
      "left" : "if (n.isReturn())",
      "right" : "if (n.isReturn())",
      "info" : "IfStatement[32095-32150]:IfStatement[32168-32223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32113-32150]:Block[32186-32223]"
    }, {
      "left" : "return n.hasOneChild();",
      "right" : "return n.hasOneChild();",
      "info" : "ReturnStatement[32121-32144]:ReturnStatement[32194-32217]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32155-32168]:ReturnStatement[32228-32241]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32244-32251]:Modifier[32317-32324]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32252-32256]:SimpleType[32325-32329]"
    }, {
      "left" : "getBlockReturnExpression",
      "right" : "getBlockReturnExpression",
      "info" : "SimpleName[32257-32281]:SimpleName[32330-32354]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32282-32288]:SingleVariableDeclaration[32355-32361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32290-32396]:Block[32363-32469]"
    }, {
      "left" : "Preconditions.checkState(isReturnExpressBlock(n));",
      "right" : "Preconditions.checkState(isReturnExpressBlock(n));",
      "info" : "ExpressionStatement[32296-32346]:ExpressionStatement[32369-32419]"
    }, {
      "left" : "return n.getFirstChild().getFirstChild();",
      "right" : "return n.getFirstChild().getFirstChild();",
      "info" : "ReturnStatement[32351-32392]:ReturnStatement[32424-32465]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32534-32541]:Modifier[32607-32614]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32542-32549]:PrimitiveType[32615-32622]"
    }, {
      "left" : "isVarBlock",
      "right" : "isVarBlock",
      "info" : "SimpleName[32550-32560]:SimpleName[32623-32633]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32561-32567]:SingleVariableDeclaration[32634-32640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32569-32776]:Block[32642-32849]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[32575-32753]:IfStatement[32648-32826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32592-32753]:Block[32665-32826]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[32600-32747]:IfStatement[32673-32820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32621-32747]:Block[32694-32820]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[32631-32662]:VariableDeclarationStatement[32704-32735]"
    }, {
      "left" : "if (first.isVar())",
      "right" : "if (first.isVar())",
      "info" : "IfStatement[32671-32739]:IfStatement[32744-32812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32690-32739]:Block[32763-32812]"
    }, {
      "left" : "return first.hasOneChild();",
      "right" : "return first.hasOneChild();",
      "info" : "ReturnStatement[32702-32729]:ReturnStatement[32775-32802]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32759-32772]:ReturnStatement[32832-32845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32819-32826]:Modifier[32892-32899]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32827-32831]:SimpleType[32900-32904]"
    }, {
      "left" : "getBlockVar",
      "right" : "getBlockVar",
      "info" : "SimpleName[32832-32843]:SimpleName[32905-32916]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32844-32850]:SingleVariableDeclaration[32917-32923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32852-32932]:Block[32925-33005]"
    }, {
      "left" : "Preconditions.checkState(isVarBlock(n));",
      "right" : "Preconditions.checkState(isVarBlock(n));",
      "info" : "ExpressionStatement[32858-32898]:ExpressionStatement[32931-32971]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[32903-32928]:ReturnStatement[32976-33001]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33152-33159]:Modifier[33225-33232]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33160-33167]:PrimitiveType[33233-33240]"
    }, {
      "left" : "consumesDanglingElse",
      "right" : "consumesDanglingElse",
      "info" : "SimpleName[33168-33188]:SimpleName[33241-33261]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33189-33195]:SingleVariableDeclaration[33262-33268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33197-33629]:Block[33270-33702]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[33203-33625]:WhileStatement[33276-33698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33216-33625]:Block[33289-33698]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) {\n            return true;\n          }\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) {\n            return true;\n          }\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
      "info" : "SwitchStatement[33224-33619]:SwitchStatement[33297-33692]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[33255-33269]:SwitchCase[33328-33342]"
    }, {
      "left" : "if (n.getChildCount() < 3)",
      "right" : "if (n.getChildCount() < 3)",
      "info" : "IfStatement[33280-33345]:IfStatement[33353-33418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33307-33345]:Block[33380-33418]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33321-33333]:ReturnStatement[33394-33406]"
    }, {
      "left" : "n = n.getLastChild();",
      "right" : "n = n.getLastChild();",
      "info" : "ExpressionStatement[33402-33423]:ExpressionStatement[33475-33496]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33434-33443]:ContinueStatement[33507-33516]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[33452-33468]:SwitchCase[33525-33541]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[33477-33494]:SwitchCase[33550-33567]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[33503-33518]:SwitchCase[33576-33591]"
    }, {
      "left" : "n = n.getLastChild();",
      "right" : "n = n.getLastChild();",
      "info" : "ExpressionStatement[33529-33550]:ExpressionStatement[33602-33623]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33561-33570]:ContinueStatement[33634-33643]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33579-33587]:SwitchCase[33652-33660]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33598-33611]:ReturnStatement[33671-33684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33736-33743]:Modifier[33809-33816]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33744-33751]:PrimitiveType[33817-33824]"
    }, {
      "left" : "isLowerPrecedenceInExpression",
      "right" : "isLowerPrecedenceInExpression",
      "info" : "SimpleName[33752-33781]:SimpleName[33825-33854]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33782-33788]:SingleVariableDeclaration[33855-33861]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[33796-33816]:SingleVariableDeclaration[33869-33889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33818-34134]:Block[33891-34207]"
    }, {
      "left" : "Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };",
      "right" : "Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };",
      "info" : "VariableDeclarationStatement[33824-34030]:VariableDeclarationStatement[33897-34103]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33899-33908]:MarkerAnnotation[33972-33981]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33915-33921]:Modifier[33988-33994]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33922-33929]:PrimitiveType[33995-34002]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[33930-33935]:SimpleName[34003-34008]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[33936-33946]:SingleVariableDeclaration[34009-34019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33948-34023]:Block[34021-34096]"
    }, {
      "left" : "return NodeUtil.precedence(input.getType()) < precedence;",
      "right" : "return NodeUtil.precedence(input.getType()) < precedence;",
      "info" : "ReturnStatement[33958-34015]:ReturnStatement[34031-34088]"
    }, {
      "left" : "return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "right" : "return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "info" : "ReturnStatement[34036-34130]:ReturnStatement[34109-34203]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34216-34223]:Modifier[34289-34296]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34224-34231]:PrimitiveType[34297-34304]"
    }, {
      "left" : "isLowerPrecedence",
      "right" : "isLowerPrecedence",
      "info" : "SimpleName[34232-34249]:SimpleName[34305-34322]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34250-34256]:SingleVariableDeclaration[34323-34329]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[34258-34278]:SingleVariableDeclaration[34331-34351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34280-34343]:Block[34353-34416]"
    }, {
      "left" : "return NodeUtil.precedence(n.getType()) < precedence;",
      "right" : "return NodeUtil.precedence(n.getType()) < precedence;",
      "info" : "ReturnStatement[34286-34339]:ReturnStatement[34359-34412]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34426-34433]:Modifier[34499-34506]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34434-34441]:PrimitiveType[34507-34514]"
    }, {
      "left" : "isHigherPrecedence",
      "right" : "isHigherPrecedence",
      "info" : "SimpleName[34442-34460]:SimpleName[34515-34533]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34461-34467]:SingleVariableDeclaration[34534-34540]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[34469-34489]:SingleVariableDeclaration[34542-34562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34491-34554]:Block[34564-34627]"
    }, {
      "left" : "return NodeUtil.precedence(n.getType()) > precedence;",
      "right" : "return NodeUtil.precedence(n.getType()) > precedence;",
      "info" : "ReturnStatement[34497-34550]:ReturnStatement[34570-34623]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34625-34632]:Modifier[34698-34705]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34633-34640]:PrimitiveType[34706-34713]"
    }, {
      "left" : "isPropertyAssignmentInExpression",
      "right" : "isPropertyAssignmentInExpression",
      "info" : "SimpleName[34641-34673]:SimpleName[34714-34746]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34674-34680]:SingleVariableDeclaration[34747-34753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34682-35050]:Block[34755-35123]"
    }, {
      "left" : "Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.isGetProp() &&\n            input.getParent().isAssign());\n      }\n    };",
      "right" : "Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.isGetProp() &&\n            input.getParent().isAssign());\n      }\n    };",
      "info" : "VariableDeclarationStatement[34688-34931]:VariableDeclarationStatement[34761-35004]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34786-34795]:MarkerAnnotation[34859-34868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34802-34808]:Modifier[34875-34881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34809-34816]:PrimitiveType[34882-34889]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[34817-34822]:SimpleName[34890-34895]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[34823-34833]:SingleVariableDeclaration[34896-34906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34835-34924]:Block[34908-34997]"
    }, {
      "left" : "return (input.isGetProp() &&\n            input.getParent().isAssign());",
      "right" : "return (input.isGetProp() &&\n            input.getParent().isAssign());",
      "info" : "ReturnStatement[34845-34916]:ReturnStatement[34918-34989]"
    }, {
      "left" : "return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "right" : "return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "info" : "ReturnStatement[34937-35046]:ReturnStatement[35010-35119]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35492-35499]:Modifier[35565-35572]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35500-35504]:SimpleType[35573-35577]"
    }, {
      "left" : "tryMinimizeCondition",
      "right" : "tryMinimizeCondition",
      "info" : "SimpleName[35505-35525]:SimpleName[35578-35598]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35526-35532]:SingleVariableDeclaration[35599-35605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35534-42427]:Block[35607-42500]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[35540-35568]:VariableDeclarationStatement[35613-35641]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);\n        if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);\n        TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);\n        if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = IR.not(condition);\n        } else if (trueNodeVal == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = IR.or(condition, falseNode);\n        } else if (falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = IR.and(condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getPureBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);\n        if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);\n        TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);\n        if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = IR.not(condition);\n        } else if (trueNodeVal == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = IR.or(condition, falseNode);\n        } else if (falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = IR.and(condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getPureBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }",
      "info" : "SwitchStatement[35574-42423]:SwitchStatement[35647-42496]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[35603-35618]:SwitchCase[35676-35691]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[35627-35658]:VariableDeclarationStatement[35700-35731]"
    }, {
      "left" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }",
      "right" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }",
      "info" : "SwitchStatement[35667-38650]:SwitchStatement[35740-38723]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[35704-35719]:SwitchCase[35777-35792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35720-36026]:Block[35793-36099]"
    }, {
      "left" : "Node newRoot = first.removeFirstChild();",
      "right" : "Node newRoot = first.removeFirstChild();",
      "info" : "VariableDeclarationStatement[35736-35776]:VariableDeclarationStatement[35809-35849]"
    }, {
      "left" : "parent.replaceChild(n, newRoot);",
      "right" : "parent.replaceChild(n, newRoot);",
      "info" : "ExpressionStatement[35791-35823]:ExpressionStatement[35864-35896]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[35838-35857]:ExpressionStatement[35911-35930]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[35997-36012]:ReturnStatement[36070-36085]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[36037-36052]:SwitchCase[36110-36125]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[36063-36077]:SwitchCase[36136-36150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36078-38291]:Block[36151-38364]"
    }, {
      "left" : "Node leftParent = first.getFirstChild();",
      "right" : "Node leftParent = first.getFirstChild();",
      "info" : "VariableDeclarationStatement[36414-36454]:VariableDeclarationStatement[36487-36527]"
    }, {
      "left" : "Node rightParent = first.getLastChild();",
      "right" : "Node rightParent = first.getLastChild();",
      "info" : "VariableDeclarationStatement[36469-36509]:VariableDeclarationStatement[36542-36582]"
    }, {
      "left" : "Node left, right;",
      "right" : "Node left, right;",
      "info" : "VariableDeclarationStatement[36524-36541]:VariableDeclarationStatement[36597-36614]"
    }, {
      "left" : "if (!leftParent.isNot()\n                  && !rightParent.isNot())",
      "right" : "if (!leftParent.isNot()\n                  && !rightParent.isNot())",
      "info" : "IfStatement[36750-37428]:IfStatement[36823-37501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36817-37428]:Block[36890-37501]"
    }, {
      "left" : "int op_precedence = NodeUtil.precedence(first.getType());",
      "right" : "int op_precedence = NodeUtil.precedence(first.getType());",
      "info" : "VariableDeclarationStatement[37027-37084]:VariableDeclarationStatement[37100-37157]"
    }, {
      "left" : "if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence)))",
      "right" : "if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence)))",
      "info" : "IfStatement[37101-37412]:IfStatement[37174-37485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37365-37412]:Block[37438-37485]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37385-37394]:ReturnStatement[37458-37467]"
    }, {
      "left" : "if (leftParent.isNot())",
      "right" : "if (leftParent.isNot())",
      "info" : "IfStatement[37444-37671]:IfStatement[37517-37744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37468-37539]:Block[37541-37612]"
    }, {
      "left" : "left = leftParent.removeFirstChild();",
      "right" : "left = leftParent.removeFirstChild();",
      "info" : "ExpressionStatement[37486-37523]:ExpressionStatement[37559-37596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37545-37671]:Block[37618-37744]"
    }, {
      "left" : "leftParent.detachFromParent();",
      "right" : "leftParent.detachFromParent();",
      "info" : "ExpressionStatement[37563-37593]:ExpressionStatement[37636-37666]"
    }, {
      "left" : "left = IR.not(leftParent).srcref(leftParent);",
      "right" : "left = IR.not(leftParent).srcref(leftParent);",
      "info" : "ExpressionStatement[37610-37655]:ExpressionStatement[37683-37728]"
    }, {
      "left" : "if (rightParent.isNot())",
      "right" : "if (rightParent.isNot())",
      "info" : "IfStatement[37686-37920]:IfStatement[37759-37993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37711-37784]:Block[37784-37857]"
    }, {
      "left" : "right = rightParent.removeFirstChild();",
      "right" : "right = rightParent.removeFirstChild();",
      "info" : "ExpressionStatement[37729-37768]:ExpressionStatement[37802-37841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37790-37920]:Block[37863-37993]"
    }, {
      "left" : "rightParent.detachFromParent();",
      "right" : "rightParent.detachFromParent();",
      "info" : "ExpressionStatement[37808-37839]:ExpressionStatement[37881-37912]"
    }, {
      "left" : "right = IR.not(rightParent).srcref(rightParent);",
      "right" : "right = IR.not(rightParent).srcref(rightParent);",
      "info" : "ExpressionStatement[37856-37904]:ExpressionStatement[37929-37977]"
    }, {
      "left" : "int newOp = (first.isAnd()) ? Token.OR : Token.AND;",
      "right" : "int newOp = (first.isAnd()) ? Token.OR : Token.AND;",
      "info" : "VariableDeclarationStatement[37936-37987]:VariableDeclarationStatement[38009-38060]"
    }, {
      "left" : "Node newRoot = new Node(newOp, left, right);",
      "right" : "Node newRoot = new Node(newOp, left, right);",
      "info" : "VariableDeclarationStatement[38002-38046]:VariableDeclarationStatement[38075-38119]"
    }, {
      "left" : "parent.replaceChild(n, newRoot);",
      "right" : "parent.replaceChild(n, newRoot);",
      "info" : "ExpressionStatement[38061-38093]:ExpressionStatement[38134-38166]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[38108-38127]:ExpressionStatement[38181-38200]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[38262-38277]:ReturnStatement[38335-38350]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38304-38312]:SwitchCase[38377-38385]"
    }, {
      "left" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(first);",
      "right" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(first);",
      "info" : "VariableDeclarationStatement[38326-38382]:VariableDeclarationStatement[38399-38455]"
    }, {
      "left" : "if (nVal != TernaryValue.UNKNOWN)",
      "right" : "if (nVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[38396-38640]:IfStatement[38469-38713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38430-38640]:Block[38503-38713]"
    }, {
      "left" : "boolean result = nVal.not().toBoolean(true);",
      "right" : "boolean result = nVal.not().toBoolean(true);",
      "info" : "VariableDeclarationStatement[38447-38491]:VariableDeclarationStatement[38520-38564]"
    }, {
      "left" : "int equivalentResult = result ? 1 : 0;",
      "right" : "int equivalentResult = result ? 1 : 0;",
      "info" : "VariableDeclarationStatement[38507-38545]:VariableDeclarationStatement[38580-38618]"
    }, {
      "left" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "right" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "info" : "ReturnStatement[38561-38625]:ReturnStatement[38634-38698]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38807-38816]:ReturnStatement[38880-38889]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[38824-38838]:SwitchCase[38897-38911]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[38845-38860]:SwitchCase[38918-38933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38861-40128]:Block[38934-40201]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[38871-38901]:VariableDeclarationStatement[38944-38974]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[38910-38940]:VariableDeclarationStatement[38983-39013]"
    }, {
      "left" : "left = tryMinimizeCondition(left);",
      "right" : "left = tryMinimizeCondition(left);",
      "info" : "ExpressionStatement[39082-39116]:ExpressionStatement[39155-39189]"
    }, {
      "left" : "right = tryMinimizeCondition(right);",
      "right" : "right = tryMinimizeCondition(right);",
      "info" : "ExpressionStatement[39125-39161]:ExpressionStatement[39198-39234]"
    }, {
      "left" : "TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);",
      "right" : "TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);",
      "info" : "VariableDeclarationStatement[39367-39427]:VariableDeclarationStatement[39440-39500]"
    }, {
      "left" : "if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN)",
      "right" : "if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[39436-40102]:IfStatement[39509-40175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39501-40102]:Block[39574-40175]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[39513-39536]:VariableDeclarationStatement[39586-39609]"
    }, {
      "left" : "Node replacement = null;",
      "right" : "Node replacement = null;",
      "info" : "VariableDeclarationStatement[39547-39571]:VariableDeclarationStatement[39620-39644]"
    }, {
      "left" : "boolean rval = rightVal.toBoolean(true);",
      "right" : "boolean rval = rightVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[39582-39622]:VariableDeclarationStatement[39655-39695]"
    }, {
      "left" : "if (type == Token.OR && !rval ||\n              type == Token.AND && rval)",
      "right" : "if (type == Token.OR && !rval ||\n              type == Token.AND && rval)",
      "info" : "IfStatement[39695-39897]:IfStatement[39768-39970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39769-39814]:Block[39842-39887]"
    }, {
      "left" : "replacement = left;",
      "right" : "replacement = left;",
      "info" : "ExpressionStatement[39783-39802]:ExpressionStatement[39856-39875]"
    }, {
      "left" : "if (!mayHaveSideEffects(left))",
      "right" : "if (!mayHaveSideEffects(left))",
      "info" : "IfStatement[39820-39897]:IfStatement[39893-39970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39851-39897]:Block[39924-39970]"
    }, {
      "left" : "replacement = right;",
      "right" : "replacement = right;",
      "info" : "ExpressionStatement[39865-39885]:ExpressionStatement[39938-39958]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[39909-40092]:IfStatement[39982-40165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39934-40092]:Block[40007-40165]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[39948-39967]:ExpressionStatement[40021-40040]"
    }, {
      "left" : "parent.replaceChild(n, replacement);",
      "right" : "parent.replaceChild(n, replacement);",
      "info" : "ExpressionStatement[39980-40016]:ExpressionStatement[40053-40089]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[40029-40048]:ExpressionStatement[40102-40121]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[40061-40080]:ReturnStatement[40134-40153]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40111-40120]:ReturnStatement[40184-40193]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[40136-40152]:SwitchCase[40209-40225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40153-42011]:Block[40226-42084]"
    }, {
      "left" : "Node condition = n.getFirstChild();",
      "right" : "Node condition = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[40163-40198]:VariableDeclarationStatement[40236-40271]"
    }, {
      "left" : "Node trueNode = n.getFirstChild().getNext();",
      "right" : "Node trueNode = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[40207-40251]:VariableDeclarationStatement[40280-40324]"
    }, {
      "left" : "Node falseNode = n.getLastChild();",
      "right" : "Node falseNode = n.getLastChild();",
      "info" : "VariableDeclarationStatement[40260-40294]:VariableDeclarationStatement[40333-40367]"
    }, {
      "left" : "trueNode = tryMinimizeCondition(trueNode);",
      "right" : "trueNode = tryMinimizeCondition(trueNode);",
      "info" : "ExpressionStatement[40519-40561]:ExpressionStatement[40592-40634]"
    }, {
      "left" : "falseNode = tryMinimizeCondition(falseNode);",
      "right" : "falseNode = tryMinimizeCondition(falseNode);",
      "info" : "ExpressionStatement[40570-40614]:ExpressionStatement[40643-40687]"
    }, {
      "left" : "Node replacement = null;",
      "right" : "Node replacement = null;",
      "info" : "VariableDeclarationStatement[40809-40833]:VariableDeclarationStatement[40882-40906]"
    }, {
      "left" : "TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);",
      "right" : "TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);",
      "info" : "VariableDeclarationStatement[40842-40908]:VariableDeclarationStatement[40915-40981]"
    }, {
      "left" : "TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);",
      "right" : "TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);",
      "info" : "VariableDeclarationStatement[40917-40985]:VariableDeclarationStatement[40990-41058]"
    }, {
      "left" : "if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE)",
      "right" : "if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE)",
      "info" : "IfStatement[40994-41834]:IfStatement[41067-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41082-41229]:Block[41155-41302]"
    }, {
      "left" : "condition.detachFromParent();",
      "right" : "condition.detachFromParent();",
      "info" : "ExpressionStatement[41155-41184]:ExpressionStatement[41228-41257]"
    }, {
      "left" : "replacement = condition;",
      "right" : "replacement = condition;",
      "info" : "ExpressionStatement[41195-41219]:ExpressionStatement[41268-41292]"
    }, {
      "left" : "if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE)",
      "right" : "if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE)",
      "info" : "IfStatement[41235-41834]:IfStatement[41308-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41323-41478]:Block[41396-41551]"
    }, {
      "left" : "condition.detachFromParent();",
      "right" : "condition.detachFromParent();",
      "info" : "ExpressionStatement[41396-41425]:ExpressionStatement[41469-41498]"
    }, {
      "left" : "replacement = IR.not(condition);",
      "right" : "replacement = IR.not(condition);",
      "info" : "ExpressionStatement[41436-41468]:ExpressionStatement[41509-41541]"
    }, {
      "left" : "if (trueNodeVal == TernaryValue.TRUE)",
      "right" : "if (trueNodeVal == TernaryValue.TRUE)",
      "info" : "IfStatement[41484-41834]:IfStatement[41557-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41522-41655]:Block[41595-41728]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[41573-41592]:ExpressionStatement[41646-41665]"
    }, {
      "left" : "replacement = IR.or(condition, falseNode);",
      "right" : "replacement = IR.or(condition, falseNode);",
      "info" : "ExpressionStatement[41603-41645]:ExpressionStatement[41676-41718]"
    }, {
      "left" : "if (falseNodeVal == TernaryValue.FALSE)",
      "right" : "if (falseNodeVal == TernaryValue.FALSE)",
      "info" : "IfStatement[41661-41834]:IfStatement[41734-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41701-41834]:Block[41774-41907]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[41752-41771]:ExpressionStatement[41825-41844]"
    }, {
      "left" : "replacement = IR.and(condition, trueNode);",
      "right" : "replacement = IR.and(condition, trueNode);",
      "info" : "ExpressionStatement[41782-41824]:ExpressionStatement[41855-41897]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[41844-41984]:IfStatement[41917-42057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41869-41984]:Block[41942-42057]"
    }, {
      "left" : "parent.replaceChild(n, replacement);",
      "right" : "parent.replaceChild(n, replacement);",
      "info" : "ExpressionStatement[41881-41917]:ExpressionStatement[41954-41990]"
    }, {
      "left" : "n = replacement;",
      "right" : "n = replacement;",
      "info" : "ExpressionStatement[41928-41944]:ExpressionStatement[42001-42017]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[41955-41974]:ExpressionStatement[42028-42047]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[41994-42003]:ReturnStatement[42067-42076]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42019-42027]:SwitchCase[42092-42100]"
    }, {
      "left" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(n);",
      "right" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(n);",
      "info" : "VariableDeclarationStatement[42072-42124]:VariableDeclarationStatement[42145-42197]"
    }, {
      "left" : "if (nVal != TernaryValue.UNKNOWN)",
      "right" : "if (nVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[42133-42351]:IfStatement[42206-42424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42167-42351]:Block[42240-42424]"
    }, {
      "left" : "boolean result = nVal.toBoolean(true);",
      "right" : "boolean result = nVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[42179-42217]:VariableDeclarationStatement[42252-42290]"
    }, {
      "left" : "int equivalentResult = result ? 1 : 0;",
      "right" : "int equivalentResult = result ? 1 : 0;",
      "info" : "VariableDeclarationStatement[42228-42266]:VariableDeclarationStatement[42301-42339]"
    }, {
      "left" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "right" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "info" : "ReturnStatement[42277-42341]:ReturnStatement[42350-42414]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42408-42417]:ReturnStatement[42481-42490]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42631-42638]:Modifier[42704-42711]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[42639-42643]:SimpleType[42712-42716]"
    }, {
      "left" : "maybeReplaceChildWithNumber",
      "right" : "maybeReplaceChildWithNumber",
      "info" : "SimpleName[42644-42671]:SimpleName[42717-42744]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42672-42678]:SingleVariableDeclaration[42745-42751]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[42680-42691]:SingleVariableDeclaration[42753-42764]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[42693-42700]:SingleVariableDeclaration[42766-42773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42702-42889]:Block[42775-42962]"
    }, {
      "left" : "Node newNode = IR.number(num);",
      "right" : "Node newNode = IR.number(num);",
      "info" : "VariableDeclarationStatement[42708-42738]:VariableDeclarationStatement[42781-42811]"
    }, {
      "left" : "if (!newNode.isEquivalentTo(n))",
      "right" : "if (!newNode.isEquivalentTo(n))",
      "info" : "IfStatement[42743-42870]:IfStatement[42816-42943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42775-42870]:Block[42848-42943]"
    }, {
      "left" : "parent.replaceChild(n, newNode);",
      "right" : "parent.replaceChild(n, newNode);",
      "info" : "ExpressionStatement[42783-42815]:ExpressionStatement[42856-42888]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[42822-42841]:ExpressionStatement[42895-42914]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[42849-42864]:ReturnStatement[42922-42937]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42876-42885]:ReturnStatement[42949-42958]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43293-43300]:Modifier[43366-43373]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[43301-43305]:SimpleType[43374-43378]"
    }, {
      "left" : "tryFoldStandardConstructors",
      "right" : "tryFoldStandardConstructors",
      "info" : "SimpleName[43306-43333]:SimpleName[43379-43406]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43334-43340]:SingleVariableDeclaration[43407-43413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43342-43899]:Block[43415-43972]"
    }, {
      "left" : "Preconditions.checkState(n.isNew());",
      "right" : "Preconditions.checkState(n.isNew());",
      "info" : "ExpressionStatement[43348-43384]:ExpressionStatement[43421-43457]"
    }, {
      "left" : "if (isASTNormalized())",
      "right" : "if (isASTNormalized())",
      "info" : "IfStatement[43557-43880]:IfStatement[43630-43953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43580-43880]:Block[43653-43953]"
    }, {
      "left" : "if (n.getFirstChild().isName())",
      "right" : "if (n.getFirstChild().isName())",
      "info" : "IfStatement[43588-43874]:IfStatement[43661-43947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43620-43874]:Block[43693-43947]"
    }, {
      "left" : "String className = n.getFirstChild().getString();",
      "right" : "String className = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[43630-43679]:VariableDeclarationStatement[43703-43752]"
    }, {
      "left" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "right" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "info" : "IfStatement[43688-43866]:IfStatement[43761-43939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43742-43866]:Block[43815-43939]"
    }, {
      "left" : "n.setType(Token.CALL);",
      "right" : "n.setType(Token.CALL);",
      "info" : "ExpressionStatement[43754-43776]:ExpressionStatement[43827-43849]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[43787-43826]:ExpressionStatement[43860-43899]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[43837-43856]:ExpressionStatement[43910-43929]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[43886-43895]:ReturnStatement[43959-43968]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44063-44070]:Modifier[44136-44143]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44071-44075]:SimpleType[44144-44148]"
    }, {
      "left" : "tryFoldLiteralConstructor",
      "right" : "tryFoldLiteralConstructor",
      "info" : "SimpleName[44076-44101]:SimpleName[44149-44174]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44102-44108]:SingleVariableDeclaration[44175-44181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44110-45767]:Block[44183-45840]"
    }, {
      "left" : "Preconditions.checkArgument(n.isCall()\n        || n.isNew());",
      "right" : "Preconditions.checkArgument(n.isCall()\n        || n.isNew());",
      "info" : "ExpressionStatement[44116-44177]:ExpressionStatement[44189-44250]"
    }, {
      "left" : "Node constructorNameNode = n.getFirstChild();",
      "right" : "Node constructorNameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[44183-44228]:VariableDeclarationStatement[44256-44301]"
    }, {
      "left" : "Node newLiteralNode = null;",
      "right" : "Node newLiteralNode = null;",
      "info" : "VariableDeclarationStatement[44234-44261]:VariableDeclarationStatement[44307-44334]"
    }, {
      "left" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "right" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "info" : "IfStatement[44459-45749]:IfStatement[44532-45822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44529-45749]:Block[44602-45822]"
    }, {
      "left" : "String className = constructorNameNode.getString();",
      "right" : "String className = constructorNameNode.getString();",
      "info" : "VariableDeclarationStatement[44538-44589]:VariableDeclarationStatement[44611-44662]"
    }, {
      "left" : "if (\"RegExp\".equals(className))",
      "right" : "if (\"RegExp\".equals(className))",
      "info" : "IfStatement[44597-45743]:IfStatement[44670-45816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44629-44736]:Block[44702-44809]"
    }, {
      "left" : "return tryFoldRegularExpressionConstructor(n);",
      "right" : "return tryFoldRegularExpressionConstructor(n);",
      "info" : "ReturnStatement[44682-44728]:ReturnStatement[44755-44801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44742-45743]:Block[44815-45816]"
    }, {
      "left" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "right" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "info" : "VariableDeclarationStatement[44752-44819]:VariableDeclarationStatement[44825-44892]"
    }, {
      "left" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "right" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "info" : "IfStatement[44829-45566]:IfStatement[44902-45639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44884-44971]:Block[44957-45044]"
    }, {
      "left" : "newLiteralNode = IR.objectlit();",
      "right" : "newLiteralNode = IR.objectlit();",
      "info" : "ExpressionStatement[44929-44961]:ExpressionStatement[45002-45034]"
    }, {
      "left" : "if (\"Array\".equals(className))",
      "right" : "if (\"Array\".equals(className))",
      "info" : "IfStatement[44977-45566]:IfStatement[45050-45639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45008-45566]:Block[45081-45639]"
    }, {
      "left" : "Node arg0 = constructorNameNode.getNext();",
      "right" : "Node arg0 = constructorNameNode.getNext();",
      "info" : "VariableDeclarationStatement[45082-45124]:VariableDeclarationStatement[45155-45197]"
    }, {
      "left" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "right" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "info" : "VariableDeclarationStatement[45135-45195]:VariableDeclarationStatement[45208-45268]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "info" : "IfStatement[45207-45556]:IfStatement[45280-45629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45330-45556]:Block[45403-45629]"
    }, {
      "left" : "newLiteralNode = IR.arraylit();",
      "right" : "newLiteralNode = IR.arraylit();",
      "info" : "ExpressionStatement[45344-45375]:ExpressionStatement[45417-45448]"
    }, {
      "left" : "n.removeChildren();",
      "right" : "n.removeChildren();",
      "info" : "ExpressionStatement[45388-45407]:ExpressionStatement[45461-45480]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "info" : "IfStatement[45420-45544]:IfStatement[45493-45617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45474-45544]:Block[45547-45617]"
    }, {
      "left" : "newLiteralNode.addChildrenToFront(arg0);",
      "right" : "newLiteralNode.addChildrenToFront(arg0);",
      "info" : "ExpressionStatement[45490-45530]:ExpressionStatement[45563-45603]"
    }, {
      "left" : "if (newLiteralNode != null)",
      "right" : "if (newLiteralNode != null)",
      "info" : "IfStatement[45576-45735]:IfStatement[45649-45808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45604-45735]:Block[45677-45808]"
    }, {
      "left" : "n.getParent().replaceChild(n, newLiteralNode);",
      "right" : "n.getParent().replaceChild(n, newLiteralNode);",
      "info" : "ExpressionStatement[45616-45662]:ExpressionStatement[45689-45735]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[45673-45692]:ExpressionStatement[45746-45765]"
    }, {
      "left" : "return newLiteralNode;",
      "right" : "return newLiteralNode;",
      "info" : "ReturnStatement[45703-45725]:ReturnStatement[45776-45798]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[45754-45763]:ReturnStatement[45827-45836]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46198-46205]:Modifier[46271-46278]"
    }, {
      "left" : "FoldArrayAction",
      "right" : "FoldArrayAction",
      "info" : "SimpleType[46206-46221]:SimpleType[46279-46294]"
    }, {
      "left" : "isSafeToFoldArrayConstructor",
      "right" : "isSafeToFoldArrayConstructor",
      "info" : "SimpleName[46222-46250]:SimpleName[46295-46323]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[46251-46259]:SingleVariableDeclaration[46324-46332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46261-47081]:Block[46334-47154]"
    }, {
      "left" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "right" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "info" : "VariableDeclarationStatement[46267-46325]:VariableDeclarationStatement[46340-46398]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[46331-47058]:IfStatement[46404-47131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46348-46413]:Block[46421-46486]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[46356-46407]:ExpressionStatement[46429-46480]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[46419-47058]:IfStatement[46492-47131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46446-46508]:Block[46519-46581]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[46454-46502]:ExpressionStatement[46527-46575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46514-47058]:Block[46587-47131]"
    }, {
      "left" : "switch (arg.getType()) {\n        case Token.STRING:\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case Token.NUMBER:\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case Token.ARRAYLIT:\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "right" : "switch (arg.getType()) {\n        case Token.STRING:\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case Token.NUMBER:\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case Token.ARRAYLIT:\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "info" : "SwitchStatement[46522-47052]:SwitchStatement[46595-47125]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[46555-46573]:SwitchCase[46628-46646]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[46622-46670]:ExpressionStatement[46695-46743]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46681-46687]:BreakStatement[46754-46760]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[46696-46714]:SwitchCase[46769-46787]"
    }, {
      "left" : "if (arg.getDouble() == 0)",
      "right" : "if (arg.getDouble() == 0)",
      "info" : "IfStatement[46758-46861]:IfStatement[46831-46934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46784-46861]:Block[46857-46934]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[46798-46849]:ExpressionStatement[46871-46922]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46872-46878]:BreakStatement[46945-46951]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[46887-46907]:SwitchCase[46960-46980]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[46962-47010]:ExpressionStatement[47035-47083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47021-47027]:BreakStatement[47094-47100]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47036-47044]:SwitchCase[47109-47117]"
    }, {
      "left" : "return action;",
      "right" : "return action;",
      "info" : "ReturnStatement[47063-47077]:ReturnStatement[47136-47150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47085-47092]:Modifier[47158-47165]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47093-47097]:SimpleType[47166-47170]"
    }, {
      "left" : "tryFoldRegularExpressionConstructor",
      "right" : "tryFoldRegularExpressionConstructor",
      "info" : "SimpleName[47098-47133]:SimpleName[47171-47206]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47134-47140]:SingleVariableDeclaration[47207-47213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47142-49085]:Block[47215-49158]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[47148-47176]:VariableDeclarationStatement[47221-47249]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[47181-47218]:VariableDeclarationStatement[47254-47291]"
    }, {
      "left" : "Node pattern = constructor.getNext();",
      "right" : "Node pattern = constructor.getNext();",
      "info" : "VariableDeclarationStatement[47223-47260]:VariableDeclarationStatement[47296-47333]"
    }, {
      "left" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "right" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "info" : "VariableDeclarationStatement[47284-47340]:VariableDeclarationStatement[47357-47413]"
    }, {
      "left" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "right" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "info" : "IfStatement[47358-47487]:IfStatement[47431-47560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47425-47487]:Block[47498-47560]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[47472-47481]:ReturnStatement[47545-47554]"
    }, {
      "left" : "if (// is pattern folded\n        pattern.isString()\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.isString())\n        // don't escape patterns with Unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with Unicode escapes\n        && (isEcmaScript5OrGreater()\n            || !containsUnicodeEscape(pattern.getString())))",
      "right" : "if (// is pattern folded\n        pattern.isString()\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.isString())\n        // don't escape patterns with Unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with Unicode escapes\n        && (isEcmaScript5OrGreater()\n            || !containsUnicodeEscape(pattern.getString())))",
      "info" : "IfStatement[47493-49066]:IfStatement[47566-49139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48138-49066]:Block[48211-49139]"
    }, {
      "left" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "right" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "info" : "ExpressionStatement[48399-48446]:ExpressionStatement[48472-48519]"
    }, {
      "left" : "Node regexLiteral;",
      "right" : "Node regexLiteral;",
      "info" : "VariableDeclarationStatement[48454-48472]:VariableDeclarationStatement[48527-48545]"
    }, {
      "left" : "if (null == flags || \"\".equals(flags.getString()))",
      "right" : "if (null == flags || \"\".equals(flags.getString()))",
      "info" : "IfStatement[48479-48962]:IfStatement[48552-49035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48530-48610]:Block[48603-48683]"
    }, {
      "left" : "regexLiteral = IR.regexp(pattern);",
      "right" : "regexLiteral = IR.regexp(pattern);",
      "info" : "ExpressionStatement[48568-48602]:ExpressionStatement[48641-48675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48616-48962]:Block[48689-49035]"
    }, {
      "left" : "if (!areValidRegexpFlags(flags.getString()))",
      "right" : "if (!areValidRegexpFlags(flags.getString()))",
      "info" : "IfStatement[48656-48790]:IfStatement[48729-48863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48701-48790]:Block[48774-48863]"
    }, {
      "left" : "error(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "right" : "error(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "info" : "ExpressionStatement[48713-48760]:ExpressionStatement[48786-48833]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[48771-48780]:ReturnStatement[48844-48853]"
    }, {
      "left" : "if (!areSafeFlagsToFold(flags.getString()))",
      "right" : "if (!areSafeFlagsToFold(flags.getString()))",
      "info" : "IfStatement[48799-48874]:IfStatement[48872-48947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48843-48874]:Block[48916-48947]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[48855-48864]:ReturnStatement[48928-48937]"
    }, {
      "left" : "n.removeChild(flags);",
      "right" : "n.removeChild(flags);",
      "info" : "ExpressionStatement[48883-48904]:ExpressionStatement[48956-48977]"
    }, {
      "left" : "regexLiteral = IR.regexp(pattern, flags);",
      "right" : "regexLiteral = IR.regexp(pattern, flags);",
      "info" : "ExpressionStatement[48913-48954]:ExpressionStatement[48986-49027]"
    }, {
      "left" : "parent.replaceChild(n, regexLiteral);",
      "right" : "parent.replaceChild(n, regexLiteral);",
      "info" : "ExpressionStatement[48970-49007]:ExpressionStatement[49043-49080]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[49014-49033]:ExpressionStatement[49087-49106]"
    }, {
      "left" : "return regexLiteral;",
      "right" : "return regexLiteral;",
      "info" : "ReturnStatement[49040-49060]:ReturnStatement[49113-49133]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49072-49081]:ReturnStatement[49145-49154]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49089-49096]:Modifier[49162-49169]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49097-49101]:SimpleType[49170-49174]"
    }, {
      "left" : "reduceTrueFalse",
      "right" : "reduceTrueFalse",
      "info" : "SimpleName[49102-49117]:SimpleName[49175-49190]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49118-49124]:SingleVariableDeclaration[49191-49197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49126-49350]:Block[49199-49423]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[49132-49332]:IfStatement[49205-49405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49142-49332]:Block[49215-49405]"
    }, {
      "left" : "Node not = IR.not(IR.number(n.isTrue() ? 0 : 1));",
      "right" : "Node not = IR.not(IR.number(n.isTrue() ? 0 : 1));",
      "info" : "VariableDeclarationStatement[49150-49199]:VariableDeclarationStatement[49223-49272]"
    }, {
      "left" : "not.copyInformationFromForTree(n);",
      "right" : "not.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[49206-49240]:ExpressionStatement[49279-49313]"
    }, {
      "left" : "n.getParent().replaceChild(n, not);",
      "right" : "n.getParent().replaceChild(n, not);",
      "info" : "ExpressionStatement[49247-49282]:ExpressionStatement[49320-49355]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[49289-49308]:ExpressionStatement[49362-49381]"
    }, {
      "left" : "return not;",
      "right" : "return not;",
      "info" : "ReturnStatement[49315-49326]:ReturnStatement[49388-49399]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49337-49346]:ReturnStatement[49410-49419]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49354-49361]:Modifier[49427-49434]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49362-49366]:SimpleType[49435-49439]"
    }, {
      "left" : "tryMinimizeArrayLiteral",
      "right" : "tryMinimizeArrayLiteral",
      "info" : "SimpleName[49367-49390]:SimpleName[49440-49463]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49391-49397]:SingleVariableDeclaration[49464-49470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49399-49686]:Block[49472-49759]"
    }, {
      "left" : "boolean allStrings = true;",
      "right" : "boolean allStrings = true;",
      "info" : "VariableDeclarationStatement[49405-49431]:VariableDeclarationStatement[49478-49504]"
    }, {
      "left" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[49436-49577]:ForStatement[49509-49650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49505-49577]:Block[49578-49650]"
    }, {
      "left" : "if (!cur.isString())",
      "right" : "if (!cur.isString())",
      "info" : "IfStatement[49513-49571]:IfStatement[49586-49644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49534-49571]:Block[49607-49644]"
    }, {
      "left" : "allStrings = false;",
      "right" : "allStrings = false;",
      "info" : "ExpressionStatement[49544-49563]:ExpressionStatement[49617-49636]"
    }, {
      "left" : "if (allStrings)",
      "right" : "if (allStrings)",
      "info" : "IfStatement[49583-49682]:IfStatement[49656-49755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49599-49653]:Block[49672-49726]"
    }, {
      "left" : "return tryMinimizeStringArrayLiteral(n);",
      "right" : "return tryMinimizeStringArrayLiteral(n);",
      "info" : "ReturnStatement[49607-49647]:ReturnStatement[49680-49720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49659-49682]:Block[49732-49755]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49667-49676]:ReturnStatement[49740-49749]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49690-49697]:Modifier[49763-49770]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49698-49702]:SimpleType[49771-49775]"
    }, {
      "left" : "tryMinimizeStringArrayLiteral",
      "right" : "tryMinimizeStringArrayLiteral",
      "info" : "SimpleName[49703-49732]:SimpleName[49776-49805]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49733-49739]:SingleVariableDeclaration[49806-49812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49741-50729]:Block[49814-50802]"
    }, {
      "left" : "if(!late)",
      "right" : "if(!late)",
      "info" : "IfStatement[49747-49780]:IfStatement[49820-49853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49757-49780]:Block[49830-49853]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49765-49774]:ReturnStatement[49838-49847]"
    }, {
      "left" : "int numElements = n.getChildCount();",
      "right" : "int numElements = n.getChildCount();",
      "info" : "VariableDeclarationStatement[49786-49822]:VariableDeclarationStatement[49859-49895]"
    }, {
      "left" : "int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;",
      "right" : "int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;",
      "info" : "VariableDeclarationStatement[49865-49918]:VariableDeclarationStatement[49938-49991]"
    }, {
      "left" : "if (saving <= 0)",
      "right" : "if (saving <= 0)",
      "info" : "IfStatement[49923-49963]:IfStatement[49996-50036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49940-49963]:Block[50013-50036]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49948-49957]:ReturnStatement[50021-50030]"
    }, {
      "left" : "String[] strings = new String[n.getChildCount()];",
      "right" : "String[] strings = new String[n.getChildCount()];",
      "info" : "VariableDeclarationStatement[49969-50018]:VariableDeclarationStatement[50042-50091]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[50023-50035]:VariableDeclarationStatement[50096-50108]"
    }, {
      "left" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[50040-50156]:ForStatement[50113-50229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50109-50156]:Block[50182-50229]"
    }, {
      "left" : "strings[idx++] = cur.getString();",
      "right" : "strings[idx++] = cur.getString();",
      "info" : "ExpressionStatement[50117-50150]:ExpressionStatement[50190-50223]"
    }, {
      "left" : "String delimiter = pickDelimiter(strings);",
      "right" : "String delimiter = pickDelimiter(strings);",
      "info" : "VariableDeclarationStatement[50287-50329]:VariableDeclarationStatement[50360-50402]"
    }, {
      "left" : "if (delimiter != null)",
      "right" : "if (delimiter != null)",
      "info" : "IfStatement[50334-50711]:IfStatement[50407-50784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50357-50711]:Block[50430-50784]"
    }, {
      "left" : "String template = Joiner.on(delimiter).join(strings);",
      "right" : "String template = Joiner.on(delimiter).join(strings);",
      "info" : "VariableDeclarationStatement[50365-50418]:VariableDeclarationStatement[50438-50491]"
    }, {
      "left" : "Node call = IR.call(\n          IR.getprop(\n              IR.string(template),\n              IR.string(\"split\")),\n          IR.string(\"\" + delimiter));",
      "right" : "Node call = IR.call(\n          IR.getprop(\n              IR.string(template),\n              IR.string(\"split\")),\n          IR.string(\"\" + delimiter));",
      "info" : "VariableDeclarationStatement[50425-50575]:VariableDeclarationStatement[50498-50648]"
    }, {
      "left" : "call.copyInformationFromForTree(n);",
      "right" : "call.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[50582-50617]:ExpressionStatement[50655-50690]"
    }, {
      "left" : "n.getParent().replaceChild(n, call);",
      "right" : "n.getParent().replaceChild(n, call);",
      "info" : "ExpressionStatement[50624-50660]:ExpressionStatement[50697-50733]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[50667-50686]:ExpressionStatement[50740-50759]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[50693-50705]:ReturnStatement[50766-50778]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[50716-50725]:ReturnStatement[50789-50798]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50904-50911]:Modifier[50977-50984]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[50912-50918]:SimpleType[50985-50991]"
    }, {
      "left" : "pickDelimiter",
      "right" : "pickDelimiter",
      "info" : "SimpleName[50919-50932]:SimpleName[50992-51005]"
    }, {
      "left" : "String[] strings",
      "right" : "String[] strings",
      "info" : "SingleVariableDeclaration[50933-50949]:SingleVariableDeclaration[51006-51022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50951-51469]:Block[51024-51542]"
    }, {
      "left" : "boolean allLength1 = true;",
      "right" : "boolean allLength1 = true;",
      "info" : "VariableDeclarationStatement[50957-50983]:VariableDeclarationStatement[51030-51056]"
    }, {
      "left" : "for (String s : strings)",
      "right" : "for (String s : strings)",
      "info" : "EnhancedForStatement[50988-51100]:EnhancedForStatement[51061-51173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51013-51100]:Block[51086-51173]"
    }, {
      "left" : "if (s.length() != 1)",
      "right" : "if (s.length() != 1)",
      "info" : "IfStatement[51021-51094]:IfStatement[51094-51167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51042-51094]:Block[51115-51167]"
    }, {
      "left" : "allLength1 = false;",
      "right" : "allLength1 = false;",
      "info" : "ExpressionStatement[51052-51071]:ExpressionStatement[51125-51144]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51080-51086]:BreakStatement[51153-51159]"
    }, {
      "left" : "if (allLength1)",
      "right" : "if (allLength1)",
      "info" : "IfStatement[51106-51146]:IfStatement[51179-51219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51122-51146]:Block[51195-51219]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[51130-51140]:ReturnStatement[51203-51213]"
    }, {
      "left" : "String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};",
      "right" : "String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};",
      "info" : "VariableDeclarationStatement[51152-51218]:VariableDeclarationStatement[51225-51291]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[51223-51233]:VariableDeclarationStatement[51296-51306]"
    }, {
      "left" : "NEXT_DELIMITER: for (;delimiters[i] != null; i++) {\n      for (String cur : strings) {\n        if (cur.contains(delimiters[i])) {\n          continue NEXT_DELIMITER;\n        }\n      }\n      break;\n    }",
      "right" : "NEXT_DELIMITER: for (;delimiters[i] != null; i++) {\n      for (String cur : strings) {\n        if (cur.contains(delimiters[i])) {\n          continue NEXT_DELIMITER;\n        }\n      }\n      break;\n    }",
      "info" : "LabeledStatement[51238-51439]:LabeledStatement[51311-51512]"
    }, {
      "left" : "for (;delimiters[i] != null; i++)",
      "right" : "for (;delimiters[i] != null; i++)",
      "info" : "ForStatement[51254-51439]:ForStatement[51327-51512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51288-51439]:Block[51361-51512]"
    }, {
      "left" : "for (String cur : strings)",
      "right" : "for (String cur : strings)",
      "info" : "EnhancedForStatement[51296-51420]:EnhancedForStatement[51369-51493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51323-51420]:Block[51396-51493]"
    }, {
      "left" : "if (cur.contains(delimiters[i]))",
      "right" : "if (cur.contains(delimiters[i]))",
      "info" : "IfStatement[51333-51412]:IfStatement[51406-51485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51366-51412]:Block[51439-51485]"
    }, {
      "left" : "continue NEXT_DELIMITER;",
      "right" : "continue NEXT_DELIMITER;",
      "info" : "ContinueStatement[51378-51402]:ContinueStatement[51451-51475]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51427-51433]:BreakStatement[51500-51506]"
    }, {
      "left" : "return delimiters[i];",
      "right" : "return delimiters[i];",
      "info" : "ReturnStatement[51444-51465]:ReturnStatement[51517-51538]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51922-51929]:Modifier[51995-52002]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51930-51936]:Modifier[52003-52009]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51937-51944]:PrimitiveType[52010-52017]"
    }, {
      "left" : "areValidRegexpFlags",
      "right" : "areValidRegexpFlags",
      "info" : "SimpleName[51945-51964]:SimpleName[52018-52037]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[51965-51977]:SingleVariableDeclaration[52038-52050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51979-52037]:Block[52052-52110]"
    }, {
      "left" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "right" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "info" : "ReturnStatement[51985-52033]:ReturnStatement[52058-52106]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52847-52854]:Modifier[52920-52927]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52855-52862]:PrimitiveType[52928-52935]"
    }, {
      "left" : "areSafeFlagsToFold",
      "right" : "areSafeFlagsToFold",
      "info" : "SimpleName[52863-52881]:SimpleName[52936-52954]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[52882-52894]:SingleVariableDeclaration[52955-52967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52896-52964]:Block[52969-53037]"
    }, {
      "left" : "return isEcmaScript5OrGreater() || flags.indexOf('g') < 0;",
      "right" : "return isEcmaScript5OrGreater() || flags.indexOf('g') < 0;",
      "info" : "ReturnStatement[52902-52960]:ReturnStatement[52975-53033]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53054-53061]:Modifier[53127-53134]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53062-53068]:Modifier[53135-53141]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[53069-53073]:SimpleType[53142-53146]"
    }, {
      "left" : "makeForwardSlashBracketSafe",
      "right" : "makeForwardSlashBracketSafe",
      "info" : "SimpleName[53074-53101]:SimpleName[53147-53174]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53102-53108]:SingleVariableDeclaration[53175-53181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53110-55247]:Block[53183-55320]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[53116-53141]:VariableDeclarationStatement[53189-53214]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[53188-53212]:VariableDeclarationStatement[53261-53285]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[53217-53229]:VariableDeclarationStatement[53290-53302]"
    }, {
      "left" : "boolean isEscaped = false, inCharset = false;",
      "right" : "boolean isEscaped = false, inCharset = false;",
      "info" : "VariableDeclarationStatement[53234-53279]:VariableDeclarationStatement[53307-53352]"
    }, {
      "left" : "for (int i = 0; i < s.length(); ++i)",
      "right" : "for (int i = 0; i < s.length(); ++i)",
      "info" : "ForStatement[53284-55113]:ForStatement[53357-55186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53321-55113]:Block[53394-55186]"
    }, {
      "left" : "char ch = s.charAt(i);",
      "right" : "char ch = s.charAt(i);",
      "info" : "VariableDeclarationStatement[53329-53351]:VariableDeclarationStatement[53402-53424]"
    }, {
      "left" : "switch (ch) {\n        case '\\\\':\n          isEscaped = !isEscaped;\n          continue;\n        case '/':\n          // Escape a literal forward slash if it is not already escaped and is\n          // not inside a character set.\n          //     new RegExp('/') -> /\\//\n          // but the following do not need extra escaping\n          //     new RegExp('\\\\/') -> /\\//\n          //     new RegExp('[/]') -> /[/]/\n          if (!isEscaped && !inCharset) {\n            if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n            sb.append(s, pos, i).append('\\\\');\n            pos = i;\n          }\n          break;\n        case '[':\n          if (!isEscaped) {\n            inCharset = true;\n          }\n          break;\n        case ']':\n          if (!isEscaped) {\n            inCharset = false;\n          }\n          break;\n        case '\\r': case '\\n': case '\\u2028': case '\\u2029':\n          // LineTerminators cannot appear raw inside a regular\n          // expression literal.\n          // They can't appear legally in a quoted string, but when\n          // the quoted string from\n          //     new RegExp('\\n')\n          // reaches here, the quoting has been removed.\n          // Requote just these code-points.\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          if (isEscaped) {\n            sb.append(s, pos, i - 1);\n          } else {\n            sb.append(s, pos, i);\n          }\n          switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }\n          pos = i + 1;\n          break;\n      }",
      "right" : "switch (ch) {\n        case '\\\\':\n          isEscaped = !isEscaped;\n          continue;\n        case '/':\n          // Escape a literal forward slash if it is not already escaped and is\n          // not inside a character set.\n          //     new RegExp('/') -> /\\//\n          // but the following do not need extra escaping\n          //     new RegExp('\\\\/') -> /\\//\n          //     new RegExp('[/]') -> /[/]/\n          if (!isEscaped && !inCharset) {\n            if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n            sb.append(s, pos, i).append('\\\\');\n            pos = i;\n          }\n          break;\n        case '[':\n          if (!isEscaped) {\n            inCharset = true;\n          }\n          break;\n        case ']':\n          if (!isEscaped) {\n            inCharset = false;\n          }\n          break;\n        case '\\r': case '\\n': case '\\u2028': case '\\u2029':\n          // LineTerminators cannot appear raw inside a regular\n          // expression literal.\n          // They can't appear legally in a quoted string, but when\n          // the quoted string from\n          //     new RegExp('\\n')\n          // reaches here, the quoting has been removed.\n          // Requote just these code-points.\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          if (isEscaped) {\n            sb.append(s, pos, i - 1);\n          } else {\n            sb.append(s, pos, i);\n          }\n          switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }\n          pos = i + 1;\n          break;\n      }",
      "info" : "SwitchStatement[53358-55082]:SwitchStatement[53431-55155]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[53380-53390]:SwitchCase[53453-53463]"
    }, {
      "left" : "isEscaped = !isEscaped;",
      "right" : "isEscaped = !isEscaped;",
      "info" : "ExpressionStatement[53401-53424]:ExpressionStatement[53474-53497]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53435-53444]:ContinueStatement[53508-53517]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[53453-53462]:SwitchCase[53526-53535]"
    }, {
      "left" : "if (!isEscaped && !inCharset)",
      "right" : "if (!isEscaped && !inCharset)",
      "info" : "IfStatement[53780-53964]:IfStatement[53853-54037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53810-53964]:Block[53883-54037]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[53824-53884]:IfStatement[53897-53957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53840-53884]:Block[53913-53957]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[53842-53882]:ExpressionStatement[53915-53955]"
    }, {
      "left" : "sb.append(s, pos, i).append('\\\\');",
      "right" : "sb.append(s, pos, i).append('\\\\');",
      "info" : "ExpressionStatement[53897-53931]:ExpressionStatement[53970-54004]"
    }, {
      "left" : "pos = i;",
      "right" : "pos = i;",
      "info" : "ExpressionStatement[53944-53952]:ExpressionStatement[54017-54025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53975-53981]:BreakStatement[54048-54054]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[53990-53999]:SwitchCase[54063-54072]"
    }, {
      "left" : "if (!isEscaped)",
      "right" : "if (!isEscaped)",
      "info" : "IfStatement[54010-54069]:IfStatement[54083-54142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54026-54069]:Block[54099-54142]"
    }, {
      "left" : "inCharset = true;",
      "right" : "inCharset = true;",
      "info" : "ExpressionStatement[54040-54057]:ExpressionStatement[54113-54130]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54080-54086]:BreakStatement[54153-54159]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[54095-54104]:SwitchCase[54168-54177]"
    }, {
      "left" : "if (!isEscaped)",
      "right" : "if (!isEscaped)",
      "info" : "IfStatement[54115-54175]:IfStatement[54188-54248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54131-54175]:Block[54204-54248]"
    }, {
      "left" : "inCharset = false;",
      "right" : "inCharset = false;",
      "info" : "ExpressionStatement[54145-54163]:ExpressionStatement[54218-54236]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54186-54192]:BreakStatement[54259-54265]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[54201-54211]:SwitchCase[54274-54284]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[54212-54222]:SwitchCase[54285-54295]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[54223-54237]:SwitchCase[54296-54310]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[54238-54252]:SwitchCase[54311-54325]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[54600-54660]:IfStatement[54673-54733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54616-54660]:Block[54689-54733]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[54618-54658]:ExpressionStatement[54691-54731]"
    }, {
      "left" : "if (isEscaped)",
      "right" : "if (isEscaped)",
      "info" : "IfStatement[54671-54790]:IfStatement[54744-54863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54686-54737]:Block[54759-54810]"
    }, {
      "left" : "sb.append(s, pos, i - 1);",
      "right" : "sb.append(s, pos, i - 1);",
      "info" : "ExpressionStatement[54700-54725]:ExpressionStatement[54773-54798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54743-54790]:Block[54816-54863]"
    }, {
      "left" : "sb.append(s, pos, i);",
      "right" : "sb.append(s, pos, i);",
      "info" : "ExpressionStatement[54757-54778]:ExpressionStatement[54830-54851]"
    }, {
      "left" : "switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }",
      "right" : "switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }",
      "info" : "SwitchStatement[54801-55034]:SwitchStatement[54874-55107]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[54827-54837]:SwitchCase[54900-54910]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[54838-54855]:ExpressionStatement[54911-54928]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54856-54862]:BreakStatement[54929-54935]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[54875-54885]:SwitchCase[54948-54958]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[54886-54903]:ExpressionStatement[54959-54976]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54904-54910]:BreakStatement[54977-54983]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[54923-54937]:SwitchCase[54996-55010]"
    }, {
      "left" : "sb.append(\"\\\\u2028\");",
      "right" : "sb.append(\"\\\\u2028\");",
      "info" : "ExpressionStatement[54938-54959]:ExpressionStatement[55011-55032]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54960-54966]:BreakStatement[55033-55039]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[54979-54993]:SwitchCase[55052-55066]"
    }, {
      "left" : "sb.append(\"\\\\u2029\");",
      "right" : "sb.append(\"\\\\u2029\");",
      "info" : "ExpressionStatement[54994-55015]:ExpressionStatement[55067-55088]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55016-55022]:BreakStatement[55089-55095]"
    }, {
      "left" : "pos = i + 1;",
      "right" : "pos = i + 1;",
      "info" : "ExpressionStatement[55045-55057]:ExpressionStatement[55118-55130]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55068-55074]:BreakStatement[55141-55147]"
    }, {
      "left" : "isEscaped = false;",
      "right" : "isEscaped = false;",
      "info" : "ExpressionStatement[55089-55107]:ExpressionStatement[55162-55180]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[55119-55160]:IfStatement[55192-55233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55135-55160]:Block[55208-55233]"
    }, {
      "left" : "return n.cloneTree();",
      "right" : "return n.cloneTree();",
      "info" : "ReturnStatement[55137-55158]:ReturnStatement[55210-55231]"
    }, {
      "left" : "sb.append(s, pos, s.length());",
      "right" : "sb.append(s, pos, s.length());",
      "info" : "ExpressionStatement[55166-55196]:ExpressionStatement[55239-55269]"
    }, {
      "left" : "return IR.string(sb.toString()).srcref(n);",
      "right" : "return IR.string(sb.toString()).srcref(n);",
      "info" : "ReturnStatement[55201-55243]:ReturnStatement[55274-55316]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55396-55402]:Modifier[55469-55475]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55403-55410]:PrimitiveType[55476-55483]"
    }, {
      "left" : "containsUnicodeEscape",
      "right" : "containsUnicodeEscape",
      "info" : "SimpleName[55411-55432]:SimpleName[55484-55505]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[55433-55441]:SingleVariableDeclaration[55506-55514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55443-55857]:Block[55516-55930]"
    }, {
      "left" : "String esc = CodeGenerator.regexpEscape(s);",
      "right" : "String esc = CodeGenerator.regexpEscape(s);",
      "info" : "VariableDeclarationStatement[55449-55492]:VariableDeclarationStatement[55522-55565]"
    }, {
      "left" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "right" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "info" : "ForStatement[55497-55835]:ForStatement[55570-55908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55553-55835]:Block[55626-55908]"
    }, {
      "left" : "int nSlashes = 0;",
      "right" : "int nSlashes = 0;",
      "info" : "VariableDeclarationStatement[55561-55578]:VariableDeclarationStatement[55634-55651]"
    }, {
      "left" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "right" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "info" : "WhileStatement[55585-55679]:WhileStatement[55658-55752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55650-55679]:Block[55723-55752]"
    }, {
      "left" : "++nSlashes;",
      "right" : "++nSlashes;",
      "info" : "ExpressionStatement[55660-55671]:ExpressionStatement[55733-55744]"
    }, {
      "left" : "if (0 == (nSlashes & 1))",
      "right" : "if (0 == (nSlashes & 1))",
      "info" : "IfStatement[55788-55829]:IfStatement[55861-55902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55813-55829]:Block[55886-55902]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55815-55827]:ReturnStatement[55888-55900]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55840-55853]:ReturnStatement[55913-55926]"
    } ]
  },
  "interFileMappings" : { }
}