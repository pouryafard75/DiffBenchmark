{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "protected void setUpModule()",
      "right" : "protected void setUpModule()",
      "info" : "MethodDeclaration[1181-1377]:MethodDeclaration[1181-1377]"
    }, {
      "left" : "public void testCustomComponent() throws Exception",
      "right" : "public void testCustomComponent() throws Exception",
      "info" : "MethodDeclaration[1381-1475]:MethodDeclaration[1381-1475]"
    }, {
      "left" : "public void testControllerField() throws Exception",
      "right" : "public void testControllerField() throws Exception",
      "info" : "MethodDeclaration[1479-1563]:MethodDeclaration[1568-1652]"
    }, {
      "left" : "public void testControllerFieldWithRefs() throws Exception",
      "right" : "public void testControllerFieldWithRefs() throws Exception",
      "info" : "MethodDeclaration[1567-1659]:MethodDeclaration[1656-1748]"
    }, {
      "left" : "public void testHandler() throws Exception",
      "right" : "public void testHandler() throws Exception",
      "info" : "MethodDeclaration[1663-1741]:MethodDeclaration[1752-1830]"
    }, {
      "left" : "public void testCustomComponentTag() throws Exception",
      "right" : "public void testCustomComponentTag() throws Exception",
      "info" : "MethodDeclaration[1745-1829]:MethodDeclaration[1834-1918]"
    }, {
      "left" : "public void testCustomComponentPropertyTag() throws Exception",
      "right" : "public void testCustomComponentPropertyTag() throws Exception",
      "info" : "MethodDeclaration[1833-1925]:MethodDeclaration[1922-2014]"
    }, {
      "left" : "public void testFromReference() throws Exception",
      "right" : "public void testFromReference() throws Exception",
      "info" : "MethodDeclaration[1929-2211]:MethodDeclaration[2018-2300]"
    }, {
      "left" : "public void testIdWithRefs() throws Exception",
      "right" : "public void testIdWithRefs() throws Exception",
      "info" : "MethodDeclaration[2215-2650]:MethodDeclaration[2304-2739]"
    }, {
      "left" : "private void doTest(final String newName) throws Exception",
      "right" : "private void doTest(final String newName) throws Exception",
      "info" : "MethodDeclaration[2654-2746]:MethodDeclaration[2743-2835]"
    }, {
      "left" : "private void doTest(final String newName, boolean inline) throws Exception",
      "right" : "private void doTest(final String newName, boolean inline) throws Exception",
      "info" : "MethodDeclaration[2750-3392]:MethodDeclaration[2839-3481]"
    }, {
      "left" : "protected String getTestDataPath()",
      "right" : "protected String getTestDataPath()",
      "info" : "MethodDeclaration[3396-3539]:MethodDeclaration[3485-3628]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1181-1190]:MarkerAnnotation[1181-1190]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1193-1202]:Modifier[1193-1202]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1203-1207]:PrimitiveType[1203-1207]"
    }, {
      "left" : "setUpModule",
      "right" : "setUpModule",
      "info" : "SimpleName[1208-1219]:SimpleName[1208-1219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1222-1377]:Block[1222-1377]"
    }, {
      "left" : "super.setUpModule();",
      "right" : "super.setUpModule();",
      "info" : "ExpressionStatement[1228-1248]:ExpressionStatement[1228-1248]"
    }, {
      "left" : "PsiTestUtil.addLibrary(getModule(), \"javafx\", PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData\", \"jfxrt.jar\");",
      "right" : "PsiTestUtil.addLibrary(getModule(), \"javafx\", PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData\", \"jfxrt.jar\");",
      "info" : "ExpressionStatement[1253-1373]:ExpressionStatement[1253-1373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1381-1387]:Modifier[1381-1387]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1388-1392]:PrimitiveType[1388-1392]"
    }, {
      "left" : "testCustomComponent",
      "right" : "testCustomComponent",
      "info" : "SimpleName[1393-1412]:SimpleName[1393-1412]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1422-1431]:SimpleType[1422-1431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1432-1475]:Block[1432-1475]"
    }, {
      "left" : "doTest(getTestName(false) + \"1\");",
      "right" : "doTest(getTestName(false) + \"1\");",
      "info" : "ExpressionStatement[1438-1471]:ExpressionStatement[1438-1471]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1479-1485]:Modifier[1568-1574]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1486-1490]:PrimitiveType[1575-1579]"
    }, {
      "left" : "testControllerField",
      "right" : "testControllerField",
      "info" : "SimpleName[1491-1510]:SimpleName[1580-1599]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1520-1529]:SimpleType[1609-1618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1530-1563]:Block[1619-1652]"
    }, {
      "left" : "doTest(\"newFieldName\");",
      "right" : "doTest(\"newFieldName\");",
      "info" : "ExpressionStatement[1536-1559]:ExpressionStatement[1625-1648]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1567-1573]:Modifier[1656-1662]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1574-1578]:PrimitiveType[1663-1667]"
    }, {
      "left" : "testControllerFieldWithRefs",
      "right" : "testControllerFieldWithRefs",
      "info" : "SimpleName[1579-1606]:SimpleName[1668-1695]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1616-1625]:SimpleType[1705-1714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1626-1659]:Block[1715-1748]"
    }, {
      "left" : "doTest(\"newFieldName\");",
      "right" : "doTest(\"newFieldName\");",
      "info" : "ExpressionStatement[1632-1655]:ExpressionStatement[1721-1744]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1663-1669]:Modifier[1752-1758]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1670-1674]:PrimitiveType[1759-1763]"
    }, {
      "left" : "testHandler",
      "right" : "testHandler",
      "info" : "SimpleName[1675-1686]:SimpleName[1764-1775]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1696-1705]:SimpleType[1785-1794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1706-1741]:Block[1795-1830]"
    }, {
      "left" : "doTest(\"newHandlerName\");",
      "right" : "doTest(\"newHandlerName\");",
      "info" : "ExpressionStatement[1712-1737]:ExpressionStatement[1801-1826]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1745-1751]:Modifier[1834-1840]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1752-1756]:PrimitiveType[1841-1845]"
    }, {
      "left" : "testCustomComponentTag",
      "right" : "testCustomComponentTag",
      "info" : "SimpleName[1757-1779]:SimpleName[1846-1868]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1789-1798]:SimpleType[1878-1887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1799-1829]:Block[1888-1918]"
    }, {
      "left" : "doTest(\"Foo\", true);",
      "right" : "doTest(\"Foo\", true);",
      "info" : "ExpressionStatement[1805-1825]:ExpressionStatement[1894-1914]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1833-1839]:Modifier[1922-1928]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1840-1844]:PrimitiveType[1929-1933]"
    }, {
      "left" : "testCustomComponentPropertyTag",
      "right" : "testCustomComponentPropertyTag",
      "info" : "SimpleName[1845-1875]:SimpleName[1934-1964]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1885-1894]:SimpleType[1974-1983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1895-1925]:Block[1984-2014]"
    }, {
      "left" : "doTest(\"Foo\", true);",
      "right" : "doTest(\"Foo\", true);",
      "info" : "ExpressionStatement[1901-1921]:ExpressionStatement[1990-2010]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1929-1935]:Modifier[2018-2024]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1936-1940]:PrimitiveType[2025-2029]"
    }, {
      "left" : "testFromReference",
      "right" : "testFromReference",
      "info" : "SimpleName[1941-1958]:SimpleName[2030-2047]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1968-1977]:SimpleType[2057-2066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1978-2211]:Block[2067-2300]"
    }, {
      "left" : "final String newName = \"lbl1\";",
      "right" : "final String newName = \"lbl1\";",
      "info" : "VariableDeclarationStatement[1984-2014]:VariableDeclarationStatement[2073-2103]"
    }, {
      "left" : "doTest(newName);",
      "right" : "doTest(newName);",
      "info" : "ExpressionStatement[2019-2035]:ExpressionStatement[2108-2124]"
    }, {
      "left" : "final PsiClass controllerClass = findClass(getTestName(false));",
      "right" : "final PsiClass controllerClass = findClass(getTestName(false));",
      "info" : "VariableDeclarationStatement[2040-2103]:VariableDeclarationStatement[2129-2192]"
    }, {
      "left" : "assertNotNull(controllerClass);",
      "right" : "assertNotNull(controllerClass);",
      "info" : "ExpressionStatement[2108-2139]:ExpressionStatement[2197-2228]"
    }, {
      "left" : "assertNotNull(controllerClass.findFieldByName(newName, false));",
      "right" : "assertNotNull(controllerClass.findFieldByName(newName, false));",
      "info" : "ExpressionStatement[2144-2207]:ExpressionStatement[2233-2296]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2215-2221]:Modifier[2304-2310]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2222-2226]:PrimitiveType[2311-2315]"
    }, {
      "left" : "testIdWithRefs",
      "right" : "testIdWithRefs",
      "info" : "SimpleName[2227-2241]:SimpleName[2316-2330]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2251-2260]:SimpleType[2340-2349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2261-2650]:Block[2350-2739]"
    }, {
      "left" : "configureByFiles(null, getTestName(true) + \".fxml\");",
      "right" : "configureByFiles(null, getTestName(true) + \".fxml\");",
      "info" : "ExpressionStatement[2267-2319]:ExpressionStatement[2356-2408]"
    }, {
      "left" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "right" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "info" : "VariableDeclarationStatement[2324-2487]:VariableDeclarationStatement[2413-2576]"
    }, {
      "left" : "assertNotNull(element);",
      "right" : "assertNotNull(element);",
      "info" : "ExpressionStatement[2492-2515]:ExpressionStatement[2581-2604]"
    }, {
      "left" : "new RenameProcessor(getProject(), element, \"lb1\", true, true).run();",
      "right" : "new RenameProcessor(getProject(), element, \"lb1\", true, true).run();",
      "info" : "ExpressionStatement[2520-2588]:ExpressionStatement[2609-2677]"
    }, {
      "left" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "right" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "info" : "ExpressionStatement[2593-2646]:ExpressionStatement[2682-2735]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2654-2661]:Modifier[2743-2750]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2662-2666]:PrimitiveType[2751-2755]"
    }, {
      "left" : "doTest",
      "right" : "doTest",
      "info" : "SimpleName[2667-2673]:SimpleName[2756-2762]"
    }, {
      "left" : "final String newName",
      "right" : "final String newName",
      "info" : "SingleVariableDeclaration[2674-2694]:SingleVariableDeclaration[2763-2783]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2703-2712]:SimpleType[2792-2801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2713-2746]:Block[2802-2835]"
    }, {
      "left" : "doTest(newName, false);",
      "right" : "doTest(newName, false);",
      "info" : "ExpressionStatement[2719-2742]:ExpressionStatement[2808-2831]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2750-2757]:Modifier[2839-2846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2758-2762]:PrimitiveType[2847-2851]"
    }, {
      "left" : "doTest",
      "right" : "doTest",
      "info" : "SimpleName[2763-2769]:SimpleName[2852-2858]"
    }, {
      "left" : "final String newName",
      "right" : "final String newName",
      "info" : "SingleVariableDeclaration[2770-2790]:SingleVariableDeclaration[2859-2879]"
    }, {
      "left" : "boolean inline",
      "right" : "boolean inline",
      "info" : "SingleVariableDeclaration[2792-2806]:SingleVariableDeclaration[2881-2895]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2815-2824]:SimpleType[2904-2913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2825-3392]:Block[2914-3481]"
    }, {
      "left" : "configureByFiles(null, getTestName(true) + \".fxml\", getTestName(false) + \".java\");",
      "right" : "configureByFiles(null, getTestName(true) + \".fxml\", getTestName(false) + \".java\");",
      "info" : "ExpressionStatement[2831-2913]:ExpressionStatement[2920-3002]"
    }, {
      "left" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "right" : "PsiElement element = TargetElementUtil\n      .findTargetElement(myEditor, TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED);",
      "info" : "VariableDeclarationStatement[2918-3081]:VariableDeclarationStatement[3007-3170]"
    }, {
      "left" : "assertNotNull(element);",
      "right" : "assertNotNull(element);",
      "info" : "ExpressionStatement[3086-3109]:ExpressionStatement[3175-3198]"
    }, {
      "left" : "if (inline)",
      "right" : "if (inline)",
      "info" : "IfStatement[3114-3330]:IfStatement[3203-3419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3126-3240]:Block[3215-3329]"
    }, {
      "left" : "CodeInsightTestUtil.doInlineRename(new MemberInplaceRenameHandler(), newName, getEditor(), element);",
      "right" : "CodeInsightTestUtil.doInlineRename(new MemberInplaceRenameHandler(), newName, getEditor(), element);",
      "info" : "ExpressionStatement[3134-3234]:ExpressionStatement[3223-3323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3246-3330]:Block[3335-3419]"
    }, {
      "left" : "new RenameProcessor(getProject(), element, newName, true, true).run();",
      "right" : "new RenameProcessor(getProject(), element, newName, true, true).run();",
      "info" : "ExpressionStatement[3254-3324]:ExpressionStatement[3343-3413]"
    }, {
      "left" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "right" : "checkResultByFile(getTestName(true) + \"_after.fxml\");",
      "info" : "ExpressionStatement[3335-3388]:ExpressionStatement[3424-3477]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[3396-3404]:MarkerAnnotation[3485-3493]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3407-3416]:MarkerAnnotation[3496-3505]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3419-3428]:Modifier[3508-3517]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3429-3435]:SimpleType[3518-3524]"
    }, {
      "left" : "getTestDataPath",
      "right" : "getTestDataPath",
      "info" : "SimpleName[3436-3451]:SimpleName[3525-3540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3454-3539]:Block[3543-3628]"
    }, {
      "left" : "return PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData/rename/\";",
      "right" : "return PluginPathManager.getPluginHomePath(\"javaFX\") + \"/testData/rename/\";",
      "info" : "ReturnStatement[3460-3535]:ReturnStatement[3549-3624]"
    } ]
  },
  "interFileMappings" : { }
}