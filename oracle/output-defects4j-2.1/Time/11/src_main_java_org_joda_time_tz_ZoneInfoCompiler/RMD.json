{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ZoneInfoCompiler",
      "right" : "ZoneInfoCompiler",
      "info" : "TypeDeclaration[1509-29620]:TypeDeclaration[1509-29659]"
    }, {
      "left" : "static DateTimeOfYear cStartOfYear;",
      "right" : "static DateTimeOfYear cStartOfYear;",
      "info" : "FieldDeclaration[2219-2254]:FieldDeclaration[2219-2254]"
    }, {
      "left" : "static Chronology cLenientISO;",
      "right" : "static Chronology cLenientISO;",
      "info" : "FieldDeclaration[2260-2290]:FieldDeclaration[2260-2290]"
    }, {
      "left" : "static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();",
      "right" : "static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {\n        protected Boolean initialValue() {\n            return Boolean.FALSE;\n        }\n    };",
      "info" : "FieldDeclaration[2296-2362]:FieldDeclaration[2296-2457]"
    }, {
      "left" : "public static boolean verbose()",
      "right" : "public static boolean verbose()",
      "info" : "MethodDeclaration[2424-2611]:MethodDeclaration[2463-2650]"
    }, {
      "left" : "public static void main(String[] args) throws Exception",
      "right" : "public static void main(String[] args) throws Exception",
      "info" : "MethodDeclaration[2695-4474]:MethodDeclaration[2734-4513]"
    }, {
      "left" : "private static void printUsage()",
      "right" : "private static void printUsage()",
      "info" : "MethodDeclaration[4480-4951]:MethodDeclaration[4519-4990]"
    }, {
      "left" : "static DateTimeOfYear getStartOfYear()",
      "right" : "static DateTimeOfYear getStartOfYear()",
      "info" : "MethodDeclaration[4957-5127]:MethodDeclaration[4996-5166]"
    }, {
      "left" : "static Chronology getLenientISOChronology()",
      "right" : "static Chronology getLenientISOChronology()",
      "info" : "MethodDeclaration[5133-5346]:MethodDeclaration[5172-5385]"
    }, {
      "left" : "static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zimap) throws IOException",
      "right" : "static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zimap) throws IOException",
      "info" : "MethodDeclaration[5352-7121]:MethodDeclaration[5391-7160]"
    }, {
      "left" : "static int parseYear(String str, int def)",
      "right" : "static int parseYear(String str, int def)",
      "info" : "MethodDeclaration[7127-7521]:MethodDeclaration[7166-7560]"
    }, {
      "left" : "static int parseMonth(String str)",
      "right" : "static int parseMonth(String str)",
      "info" : "MethodDeclaration[7527-7705]:MethodDeclaration[7566-7744]"
    }, {
      "left" : "static int parseDayOfWeek(String str)",
      "right" : "static int parseDayOfWeek(String str)",
      "info" : "MethodDeclaration[7711-7891]:MethodDeclaration[7750-7930]"
    }, {
      "left" : "static String parseOptional(String str)",
      "right" : "static String parseOptional(String str)",
      "info" : "MethodDeclaration[7901-7995]:MethodDeclaration[7940-8034]"
    }, {
      "left" : "static int parseTime(String str)",
      "right" : "static int parseTime(String str)",
      "info" : "MethodDeclaration[8001-8557]:MethodDeclaration[8040-8596]"
    }, {
      "left" : "static char parseZoneChar(char c)",
      "right" : "static char parseZoneChar(char c)",
      "info" : "MethodDeclaration[8563-8913]:MethodDeclaration[8602-8952]"
    }, {
      "left" : "static boolean test(String id, DateTimeZone tz)",
      "right" : "static boolean test(String id, DateTimeZone tz)",
      "info" : "MethodDeclaration[8919-11613]:MethodDeclaration[8958-11652]"
    }, {
      "left" : "private Map<String, RuleSet> iRuleSets;",
      "right" : "private Map<String, RuleSet> iRuleSets;",
      "info" : "FieldDeclaration[11650-11689]:FieldDeclaration[11689-11728]"
    }, {
      "left" : "private List<Zone> iZones;",
      "right" : "private List<Zone> iZones;",
      "info" : "FieldDeclaration[11724-11750]:FieldDeclaration[11763-11789]"
    }, {
      "left" : "private List<String> iLinks;",
      "right" : "private List<String> iLinks;",
      "info" : "FieldDeclaration[11790-11818]:FieldDeclaration[11829-11857]"
    }, {
      "left" : "public ZoneInfoCompiler()",
      "right" : "public ZoneInfoCompiler()",
      "info" : "MethodDeclaration[11824-11991]:MethodDeclaration[11863-12030]"
    }, {
      "left" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
      "right" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
      "info" : "MethodDeclaration[11997-16011]:MethodDeclaration[12036-16050]"
    }, {
      "left" : "public void parseDataFile(BufferedReader in) throws IOException",
      "right" : "public void parseDataFile(BufferedReader in) throws IOException",
      "info" : "MethodDeclaration[16017-17900]:MethodDeclaration[16056-17939]"
    }, {
      "left" : "DateTimeOfYear",
      "right" : "DateTimeOfYear",
      "info" : "TypeDeclaration[17906-22816]:TypeDeclaration[17945-22855]"
    }, {
      "left" : "public final int iMonthOfYear;",
      "right" : "public final int iMonthOfYear;",
      "info" : "FieldDeclaration[17944-17974]:FieldDeclaration[17983-18013]"
    }, {
      "left" : "public final int iDayOfMonth;",
      "right" : "public final int iDayOfMonth;",
      "info" : "FieldDeclaration[17983-18012]:FieldDeclaration[18022-18051]"
    }, {
      "left" : "public final int iDayOfWeek;",
      "right" : "public final int iDayOfWeek;",
      "info" : "FieldDeclaration[18021-18049]:FieldDeclaration[18060-18088]"
    }, {
      "left" : "public final boolean iAdvanceDayOfWeek;",
      "right" : "public final boolean iAdvanceDayOfWeek;",
      "info" : "FieldDeclaration[18058-18097]:FieldDeclaration[18097-18136]"
    }, {
      "left" : "public final int iMillisOfDay;",
      "right" : "public final int iMillisOfDay;",
      "info" : "FieldDeclaration[18106-18136]:FieldDeclaration[18145-18175]"
    }, {
      "left" : "public final char iZoneChar;",
      "right" : "public final char iZoneChar;",
      "info" : "FieldDeclaration[18145-18173]:FieldDeclaration[18184-18212]"
    }, {
      "left" : "DateTimeOfYear()",
      "right" : "DateTimeOfYear()",
      "info" : "MethodDeclaration[18183-18396]:MethodDeclaration[18222-18435]"
    }, {
      "left" : "DateTimeOfYear(StringTokenizer st)",
      "right" : "DateTimeOfYear(StringTokenizer st)",
      "info" : "MethodDeclaration[18406-21258]:MethodDeclaration[18445-21297]"
    }, {
      "left" : "public void addRecurring(DateTimeZoneBuilder builder, String nameKey,\n                                 int saveMillis, int fromYear, int toYear)",
      "right" : "public void addRecurring(DateTimeZoneBuilder builder, String nameKey,\n                                 int saveMillis, int fromYear, int toYear)",
      "info" : "MethodDeclaration[21268-21956]:MethodDeclaration[21307-21995]"
    }, {
      "left" : "public void addCutover(DateTimeZoneBuilder builder, int year)",
      "right" : "public void addCutover(DateTimeZoneBuilder builder, int year)",
      "info" : "MethodDeclaration[21966-22412]:MethodDeclaration[22005-22451]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[22422-22810]:MethodDeclaration[22461-22849]"
    }, {
      "left" : "Rule",
      "right" : "Rule",
      "info" : "TypeDeclaration[22822-25283]:TypeDeclaration[22861-25322]"
    }, {
      "left" : "public final String iName;",
      "right" : "public final String iName;",
      "info" : "FieldDeclaration[22858-22884]:FieldDeclaration[22897-22923]"
    }, {
      "left" : "public final int iFromYear;",
      "right" : "public final int iFromYear;",
      "info" : "FieldDeclaration[22893-22920]:FieldDeclaration[22932-22959]"
    }, {
      "left" : "public final int iToYear;",
      "right" : "public final int iToYear;",
      "info" : "FieldDeclaration[22929-22954]:FieldDeclaration[22968-22993]"
    }, {
      "left" : "public final String iType;",
      "right" : "public final String iType;",
      "info" : "FieldDeclaration[22963-22989]:FieldDeclaration[23002-23028]"
    }, {
      "left" : "public final DateTimeOfYear iDateTimeOfYear;",
      "right" : "public final DateTimeOfYear iDateTimeOfYear;",
      "info" : "FieldDeclaration[22998-23042]:FieldDeclaration[23037-23081]"
    }, {
      "left" : "public final int iSaveMillis;",
      "right" : "public final int iSaveMillis;",
      "info" : "FieldDeclaration[23051-23080]:FieldDeclaration[23090-23119]"
    }, {
      "left" : "public final String iLetterS;",
      "right" : "public final String iLetterS;",
      "info" : "FieldDeclaration[23089-23118]:FieldDeclaration[23128-23157]"
    }, {
      "left" : "Rule(StringTokenizer st)",
      "right" : "Rule(StringTokenizer st)",
      "info" : "MethodDeclaration[23128-23642]:MethodDeclaration[23167-23681]"
    }, {
      "left" : "public void addRecurring(DateTimeZoneBuilder builder, String nameFormat)",
      "right" : "public void addRecurring(DateTimeZoneBuilder builder, String nameFormat)",
      "info" : "MethodDeclaration[23652-23980]:MethodDeclaration[23691-24019]"
    }, {
      "left" : "private String formatName(String nameFormat)",
      "right" : "private String formatName(String nameFormat)",
      "info" : "MethodDeclaration[23990-24867]:MethodDeclaration[24029-24906]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24877-25277]:MethodDeclaration[24916-25316]"
    }, {
      "left" : "RuleSet",
      "right" : "RuleSet",
      "info" : "TypeDeclaration[25289-26035]:TypeDeclaration[25328-26074]"
    }, {
      "left" : "private List<Rule> iRules;",
      "right" : "private List<Rule> iRules;",
      "info" : "FieldDeclaration[25328-25354]:FieldDeclaration[25367-25393]"
    }, {
      "left" : "RuleSet(Rule rule)",
      "right" : "RuleSet(Rule rule)",
      "info" : "MethodDeclaration[25364-25468]:MethodDeclaration[25403-25507]"
    }, {
      "left" : "void addRule(Rule rule)",
      "right" : "void addRule(Rule rule)",
      "info" : "MethodDeclaration[25478-25692]:MethodDeclaration[25517-25731]"
    }, {
      "left" : "public void addRecurring(DateTimeZoneBuilder builder, String nameFormat)",
      "right" : "public void addRecurring(DateTimeZoneBuilder builder, String nameFormat)",
      "info" : "MethodDeclaration[25702-26029]:MethodDeclaration[25741-26068]"
    }, {
      "left" : "Zone",
      "right" : "Zone",
      "info" : "TypeDeclaration[26041-29618]:TypeDeclaration[26080-29657]"
    }, {
      "left" : "public final String iName;",
      "right" : "public final String iName;",
      "info" : "FieldDeclaration[26077-26103]:FieldDeclaration[26116-26142]"
    }, {
      "left" : "public final int iOffsetMillis;",
      "right" : "public final int iOffsetMillis;",
      "info" : "FieldDeclaration[26112-26143]:FieldDeclaration[26151-26182]"
    }, {
      "left" : "public final String iRules;",
      "right" : "public final String iRules;",
      "info" : "FieldDeclaration[26152-26179]:FieldDeclaration[26191-26218]"
    }, {
      "left" : "public final String iFormat;",
      "right" : "public final String iFormat;",
      "info" : "FieldDeclaration[26188-26216]:FieldDeclaration[26227-26255]"
    }, {
      "left" : "public final int iUntilYear;",
      "right" : "public final int iUntilYear;",
      "info" : "FieldDeclaration[26225-26253]:FieldDeclaration[26264-26292]"
    }, {
      "left" : "public final DateTimeOfYear iUntilDateTimeOfYear;",
      "right" : "public final DateTimeOfYear iUntilDateTimeOfYear;",
      "info" : "FieldDeclaration[26262-26311]:FieldDeclaration[26301-26350]"
    }, {
      "left" : "private Zone iNext;",
      "right" : "private Zone iNext;",
      "info" : "FieldDeclaration[26321-26340]:FieldDeclaration[26360-26379]"
    }, {
      "left" : "Zone(StringTokenizer st)",
      "right" : "Zone(StringTokenizer st)",
      "info" : "MethodDeclaration[26350-26424]:MethodDeclaration[26389-26463]"
    }, {
      "left" : "private Zone(String name, StringTokenizer st)",
      "right" : "private Zone(String name, StringTokenizer st)",
      "info" : "MethodDeclaration[26434-27081]:MethodDeclaration[26473-27120]"
    }, {
      "left" : "void chain(StringTokenizer st)",
      "right" : "void chain(StringTokenizer st)",
      "info" : "MethodDeclaration[27091-27279]:MethodDeclaration[27130-27318]"
    }, {
      "left" : "public void addToBuilder(DateTimeZoneBuilder builder, Map<String, RuleSet> ruleSets)",
      "right" : "public void addToBuilder(DateTimeZoneBuilder builder, Map<String, RuleSet> ruleSets)",
      "info" : "MethodDeclaration[27548-27761]:MethodDeclaration[27587-27800]"
    }, {
      "left" : "private static void addToBuilder(Zone zone,\n                                         DateTimeZoneBuilder builder,\n                                         Map<String, RuleSet> ruleSets)",
      "right" : "private static void addToBuilder(Zone zone,\n                                         DateTimeZoneBuilder builder,\n                                         Map<String, RuleSet> ruleSets)",
      "info" : "MethodDeclaration[27771-29101]:MethodDeclaration[27810-29140]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[29111-29612]:MethodDeclaration[29150-29651]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2573-2611]:Block[2612-2650]"
    }, {
      "left" : "return cVerbose.get();",
      "right" : "return cVerbose.get();",
      "info" : "ReturnStatement[2583-2605]:ReturnStatement[2622-2644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3179-4474]:Block[3218-4513]"
    }, {
      "left" : "if (args.length == 0)",
      "right" : "if (args.length == 0)",
      "info" : "IfStatement[3189-3268]:IfStatement[3228-3307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3211-3268]:Block[3250-3307]"
    }, {
      "left" : "printUsage();",
      "right" : "printUsage();",
      "info" : "ExpressionStatement[3225-3238]:ExpressionStatement[3264-3277]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3251-3258]:ReturnStatement[3290-3297]"
    }, {
      "left" : "File inputDir = null;",
      "right" : "File inputDir = null;",
      "info" : "VariableDeclarationStatement[3278-3299]:VariableDeclarationStatement[3317-3338]"
    }, {
      "left" : "File outputDir = null;",
      "right" : "File outputDir = null;",
      "info" : "VariableDeclarationStatement[3308-3330]:VariableDeclarationStatement[3347-3369]"
    }, {
      "left" : "boolean verbose = false;",
      "right" : "boolean verbose = false;",
      "info" : "VariableDeclarationStatement[3339-3363]:VariableDeclarationStatement[3378-3402]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[3373-3379]:VariableDeclarationStatement[3412-3418]"
    }, {
      "left" : "for (i=0; i<args.length; i++)",
      "right" : "for (i=0; i<args.length; i++)",
      "info" : "ForStatement[3388-4047]:ForStatement[3427-4086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3418-4047]:Block[3457-4086]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3432-4037]:TryStatement[3471-4076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3436-3931]:Block[3475-3970]"
    }, {
      "left" : "if (\"-src\".equals(args[i]))",
      "right" : "if (\"-src\".equals(args[i]))",
      "info" : "IfStatement[3454-3917]:IfStatement[3493-3956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3482-3553]:Block[3521-3592]"
    }, {
      "left" : "inputDir = new File(args[++i]);",
      "right" : "inputDir = new File(args[++i]);",
      "info" : "ExpressionStatement[3504-3535]:ExpressionStatement[3543-3574]"
    }, {
      "left" : "if (\"-dst\".equals(args[i]))",
      "right" : "if (\"-dst\".equals(args[i]))",
      "info" : "IfStatement[3559-3917]:IfStatement[3598-3956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3587-3659]:Block[3626-3698]"
    }, {
      "left" : "outputDir = new File(args[++i]);",
      "right" : "outputDir = new File(args[++i]);",
      "info" : "ExpressionStatement[3609-3641]:ExpressionStatement[3648-3680]"
    }, {
      "left" : "if (\"-verbose\".equals(args[i]))",
      "right" : "if (\"-verbose\".equals(args[i]))",
      "info" : "IfStatement[3665-3917]:IfStatement[3704-3956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3697-3752]:Block[3736-3791]"
    }, {
      "left" : "verbose = true;",
      "right" : "verbose = true;",
      "info" : "ExpressionStatement[3719-3734]:ExpressionStatement[3758-3773]"
    }, {
      "left" : "if (\"-?\".equals(args[i]))",
      "right" : "if (\"-?\".equals(args[i]))",
      "info" : "IfStatement[3758-3917]:IfStatement[3797-3956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3784-3865]:Block[3823-3904]"
    }, {
      "left" : "printUsage();",
      "right" : "printUsage();",
      "info" : "ExpressionStatement[3806-3819]:ExpressionStatement[3845-3858]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3840-3847]:ReturnStatement[3879-3886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3871-3917]:Block[3910-3956]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3893-3899]:BreakStatement[3932-3938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3968-4037]:Block[4007-4076]"
    }, {
      "left" : "printUsage();",
      "right" : "printUsage();",
      "info" : "ExpressionStatement[3986-3999]:ExpressionStatement[4025-4038]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4016-4023]:ReturnStatement[4055-4062]"
    }, {
      "left" : "if (i >= args.length)",
      "right" : "if (i >= args.length)",
      "info" : "IfStatement[4057-4136]:IfStatement[4096-4175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4079-4136]:Block[4118-4175]"
    }, {
      "left" : "printUsage();",
      "right" : "printUsage();",
      "info" : "ExpressionStatement[4093-4106]:ExpressionStatement[4132-4145]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4119-4126]:ReturnStatement[4158-4165]"
    }, {
      "left" : "File[] sources = new File[args.length - i];",
      "right" : "File[] sources = new File[args.length - i];",
      "info" : "VariableDeclarationStatement[4146-4189]:VariableDeclarationStatement[4185-4228]"
    }, {
      "left" : "for (int j=0; i<args.length; i++,j++)",
      "right" : "for (int j=0; i<args.length; i++,j++)",
      "info" : "ForStatement[4198-4340]:ForStatement[4237-4379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4236-4340]:Block[4275-4379]"
    }, {
      "left" : "sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);",
      "right" : "sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);",
      "info" : "ExpressionStatement[4250-4330]:ExpressionStatement[4289-4369]"
    }, {
      "left" : "cVerbose.set(verbose);",
      "right" : "cVerbose.set(verbose);",
      "info" : "ExpressionStatement[4350-4372]:ExpressionStatement[4389-4411]"
    }, {
      "left" : "ZoneInfoCompiler zic = new ZoneInfoCompiler();",
      "right" : "ZoneInfoCompiler zic = new ZoneInfoCompiler();",
      "info" : "VariableDeclarationStatement[4381-4427]:VariableDeclarationStatement[4420-4466]"
    }, {
      "left" : "zic.compile(outputDir, sources);",
      "right" : "zic.compile(outputDir, sources);",
      "info" : "ExpressionStatement[4436-4468]:ExpressionStatement[4475-4507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4513-4951]:Block[4552-4990]"
    }, {
      "left" : "System.out.println(\"Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>\");",
      "right" : "System.out.println(\"Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>\");",
      "info" : "ExpressionStatement[4523-4616]:ExpressionStatement[4562-4655]"
    }, {
      "left" : "System.out.println(\"where possible options include:\");",
      "right" : "System.out.println(\"where possible options include:\");",
      "info" : "ExpressionStatement[4625-4679]:ExpressionStatement[4664-4718]"
    }, {
      "left" : "System.out.println(\"  -src <directory>    Specify where to read source files\");",
      "right" : "System.out.println(\"  -src <directory>    Specify where to read source files\");",
      "info" : "ExpressionStatement[4688-4767]:ExpressionStatement[4727-4806]"
    }, {
      "left" : "System.out.println(\"  -dst <directory>    Specify where to write generated files\");",
      "right" : "System.out.println(\"  -dst <directory>    Specify where to write generated files\");",
      "info" : "ExpressionStatement[4776-4859]:ExpressionStatement[4815-4898]"
    }, {
      "left" : "System.out.println(\"  -verbose            Output verbosely (default false)\");",
      "right" : "System.out.println(\"  -verbose            Output verbosely (default false)\");",
      "info" : "ExpressionStatement[4868-4945]:ExpressionStatement[4907-4984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4996-5127]:Block[5035-5166]"
    }, {
      "left" : "if (cStartOfYear == null)",
      "right" : "if (cStartOfYear == null)",
      "info" : "IfStatement[5006-5092]:IfStatement[5045-5131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5032-5092]:Block[5071-5131]"
    }, {
      "left" : "cStartOfYear = new DateTimeOfYear();",
      "right" : "cStartOfYear = new DateTimeOfYear();",
      "info" : "ExpressionStatement[5046-5082]:ExpressionStatement[5085-5121]"
    }, {
      "left" : "return cStartOfYear;",
      "right" : "return cStartOfYear;",
      "info" : "ReturnStatement[5101-5121]:ReturnStatement[5140-5160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5177-5346]:Block[5216-5385]"
    }, {
      "left" : "if (cLenientISO == null)",
      "right" : "if (cLenientISO == null)",
      "info" : "IfStatement[5187-5312]:IfStatement[5226-5351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5212-5312]:Block[5251-5351]"
    }, {
      "left" : "cLenientISO = LenientChronology.getInstance(ISOChronology.getInstanceUTC());",
      "right" : "cLenientISO = LenientChronology.getInstance(ISOChronology.getInstanceUTC());",
      "info" : "ExpressionStatement[5226-5302]:ExpressionStatement[5265-5341]"
    }, {
      "left" : "return cLenientISO;",
      "right" : "return cLenientISO;",
      "info" : "ReturnStatement[5321-5340]:ReturnStatement[5360-5379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5533-7121]:Block[5572-7160]"
    }, {
      "left" : "Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());",
      "right" : "Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());",
      "info" : "VariableDeclarationStatement[5577-5649]:VariableDeclarationStatement[5616-5688]"
    }, {
      "left" : "TreeMap<Short, String> indexToId = new TreeMap<Short, String>();",
      "right" : "TreeMap<Short, String> indexToId = new TreeMap<Short, String>();",
      "info" : "VariableDeclarationStatement[5658-5722]:VariableDeclarationStatement[5697-5761]"
    }, {
      "left" : "short count = 0;",
      "right" : "short count = 0;",
      "info" : "VariableDeclarationStatement[5732-5748]:VariableDeclarationStatement[5771-5787]"
    }, {
      "left" : "for (Entry<String, DateTimeZone> entry : zimap.entrySet())",
      "right" : "for (Entry<String, DateTimeZone> entry : zimap.entrySet())",
      "info" : "EnhancedForStatement[5757-6576]:EnhancedForStatement[5796-6615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5816-6576]:Block[5855-6615]"
    }, {
      "left" : "String id = (String)entry.getKey();",
      "right" : "String id = (String)entry.getKey();",
      "info" : "VariableDeclarationStatement[5830-5865]:VariableDeclarationStatement[5869-5904]"
    }, {
      "left" : "if (!idToIndex.containsKey(id))",
      "right" : "if (!idToIndex.containsKey(id))",
      "info" : "IfStatement[5878-6186]:IfStatement[5917-6225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5910-6186]:Block[5949-6225]"
    }, {
      "left" : "Short index = Short.valueOf(count);",
      "right" : "Short index = Short.valueOf(count);",
      "info" : "VariableDeclarationStatement[5928-5963]:VariableDeclarationStatement[5967-6002]"
    }, {
      "left" : "idToIndex.put(id, index);",
      "right" : "idToIndex.put(id, index);",
      "info" : "ExpressionStatement[5980-6005]:ExpressionStatement[6019-6044]"
    }, {
      "left" : "indexToId.put(index, id);",
      "right" : "indexToId.put(index, id);",
      "info" : "ExpressionStatement[6022-6047]:ExpressionStatement[6061-6086]"
    }, {
      "left" : "if (++count == 0)",
      "right" : "if (++count == 0)",
      "info" : "IfStatement[6064-6172]:IfStatement[6103-6211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6082-6172]:Block[6121-6211]"
    }, {
      "left" : "throw new InternalError(\"Too many time zone ids\");",
      "right" : "throw new InternalError(\"Too many time zone ids\");",
      "info" : "ThrowStatement[6104-6154]:ThrowStatement[6143-6193]"
    }, {
      "left" : "id = ((DateTimeZone)entry.getValue()).getID();",
      "right" : "id = ((DateTimeZone)entry.getValue()).getID();",
      "info" : "ExpressionStatement[6199-6245]:ExpressionStatement[6238-6284]"
    }, {
      "left" : "if (!idToIndex.containsKey(id))",
      "right" : "if (!idToIndex.containsKey(id))",
      "info" : "IfStatement[6258-6566]:IfStatement[6297-6605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6290-6566]:Block[6329-6605]"
    }, {
      "left" : "Short index = Short.valueOf(count);",
      "right" : "Short index = Short.valueOf(count);",
      "info" : "VariableDeclarationStatement[6308-6343]:VariableDeclarationStatement[6347-6382]"
    }, {
      "left" : "idToIndex.put(id, index);",
      "right" : "idToIndex.put(id, index);",
      "info" : "ExpressionStatement[6360-6385]:ExpressionStatement[6399-6424]"
    }, {
      "left" : "indexToId.put(index, id);",
      "right" : "indexToId.put(index, id);",
      "info" : "ExpressionStatement[6402-6427]:ExpressionStatement[6441-6466]"
    }, {
      "left" : "if (++count == 0)",
      "right" : "if (++count == 0)",
      "info" : "IfStatement[6444-6552]:IfStatement[6483-6591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6462-6552]:Block[6501-6591]"
    }, {
      "left" : "throw new InternalError(\"Too many time zone ids\");",
      "right" : "throw new InternalError(\"Too many time zone ids\");",
      "info" : "ThrowStatement[6484-6534]:ThrowStatement[6523-6573]"
    }, {
      "left" : "dout.writeShort(indexToId.size());",
      "right" : "dout.writeShort(indexToId.size());",
      "info" : "ExpressionStatement[6638-6672]:ExpressionStatement[6677-6711]"
    }, {
      "left" : "for (String id : indexToId.values())",
      "right" : "for (String id : indexToId.values())",
      "info" : "EnhancedForStatement[6681-6760]:EnhancedForStatement[6720-6799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6718-6760]:Block[6757-6799]"
    }, {
      "left" : "dout.writeUTF(id);",
      "right" : "dout.writeUTF(id);",
      "info" : "ExpressionStatement[6732-6750]:ExpressionStatement[6771-6789]"
    }, {
      "left" : "dout.writeShort(zimap.size());",
      "right" : "dout.writeShort(zimap.size());",
      "info" : "ExpressionStatement[6801-6831]:ExpressionStatement[6840-6870]"
    }, {
      "left" : "for (Entry<String, DateTimeZone> entry : zimap.entrySet())",
      "right" : "for (Entry<String, DateTimeZone> entry : zimap.entrySet())",
      "info" : "EnhancedForStatement[6840-7115]:EnhancedForStatement[6879-7154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6899-7115]:Block[6938-7154]"
    }, {
      "left" : "String id = entry.getKey();",
      "right" : "String id = entry.getKey();",
      "info" : "VariableDeclarationStatement[6913-6940]:VariableDeclarationStatement[6952-6979]"
    }, {
      "left" : "dout.writeShort(idToIndex.get(id).shortValue());",
      "right" : "dout.writeShort(idToIndex.get(id).shortValue());",
      "info" : "ExpressionStatement[6953-7001]:ExpressionStatement[6992-7040]"
    }, {
      "left" : "id = entry.getValue().getID();",
      "right" : "id = entry.getValue().getID();",
      "info" : "ExpressionStatement[7014-7044]:ExpressionStatement[7053-7083]"
    }, {
      "left" : "dout.writeShort(idToIndex.get(id).shortValue());",
      "right" : "dout.writeShort(idToIndex.get(id).shortValue());",
      "info" : "ExpressionStatement[7057-7105]:ExpressionStatement[7096-7144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7169-7521]:Block[7208-7560]"
    }, {
      "left" : "str = str.toLowerCase();",
      "right" : "str = str.toLowerCase();",
      "info" : "ExpressionStatement[7179-7203]:ExpressionStatement[7218-7242]"
    }, {
      "left" : "if (str.equals(\"minimum\") || str.equals(\"min\"))",
      "right" : "if (str.equals(\"minimum\") || str.equals(\"min\"))",
      "info" : "IfStatement[7212-7477]:IfStatement[7251-7516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7260-7309]:Block[7299-7348]"
    }, {
      "left" : "return Integer.MIN_VALUE;",
      "right" : "return Integer.MIN_VALUE;",
      "info" : "ReturnStatement[7274-7299]:ReturnStatement[7313-7338]"
    }, {
      "left" : "if (str.equals(\"maximum\") || str.equals(\"max\"))",
      "right" : "if (str.equals(\"maximum\") || str.equals(\"max\"))",
      "info" : "IfStatement[7315-7477]:IfStatement[7354-7516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7363-7412]:Block[7402-7451]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[7377-7402]:ReturnStatement[7416-7441]"
    }, {
      "left" : "if (str.equals(\"only\"))",
      "right" : "if (str.equals(\"only\"))",
      "info" : "IfStatement[7418-7477]:IfStatement[7457-7516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7442-7477]:Block[7481-7516]"
    }, {
      "left" : "return def;",
      "right" : "return def;",
      "info" : "ReturnStatement[7456-7467]:ReturnStatement[7495-7506]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[7486-7515]:ReturnStatement[7525-7554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7705]:Block[7600-7744]"
    }, {
      "left" : "DateTimeField field = ISOChronology.getInstanceUTC().monthOfYear();",
      "right" : "DateTimeField field = ISOChronology.getInstanceUTC().monthOfYear();",
      "info" : "VariableDeclarationStatement[7571-7638]:VariableDeclarationStatement[7610-7677]"
    }, {
      "left" : "return field.get(field.set(0, str, Locale.ENGLISH));",
      "right" : "return field.get(field.set(0, str, Locale.ENGLISH));",
      "info" : "ReturnStatement[7647-7699]:ReturnStatement[7686-7738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7749-7891]:Block[7788-7930]"
    }, {
      "left" : "DateTimeField field = ISOChronology.getInstanceUTC().dayOfWeek();",
      "right" : "DateTimeField field = ISOChronology.getInstanceUTC().dayOfWeek();",
      "info" : "VariableDeclarationStatement[7759-7824]:VariableDeclarationStatement[7798-7863]"
    }, {
      "left" : "return field.get(field.set(0, str, Locale.ENGLISH));",
      "right" : "return field.get(field.set(0, str, Locale.ENGLISH));",
      "info" : "ReturnStatement[7833-7885]:ReturnStatement[7872-7924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7941-7995]:Block[7980-8034]"
    }, {
      "left" : "return (str.equals(\"-\")) ? null : str;",
      "right" : "return (str.equals(\"-\")) ? null : str;",
      "info" : "ReturnStatement[7951-7989]:ReturnStatement[7990-8028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8557]:Block[8073-8596]"
    }, {
      "left" : "DateTimeFormatter p = ISODateTimeFormat.hourMinuteSecondFraction();",
      "right" : "DateTimeFormatter p = ISODateTimeFormat.hourMinuteSecondFraction();",
      "info" : "VariableDeclarationStatement[8044-8111]:VariableDeclarationStatement[8083-8150]"
    }, {
      "left" : "MutableDateTime mdt = new MutableDateTime(0, getLenientISOChronology());",
      "right" : "MutableDateTime mdt = new MutableDateTime(0, getLenientISOChronology());",
      "info" : "VariableDeclarationStatement[8120-8192]:VariableDeclarationStatement[8159-8231]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[8201-8213]:VariableDeclarationStatement[8240-8252]"
    }, {
      "left" : "if (str.startsWith(\"-\"))",
      "right" : "if (str.startsWith(\"-\"))",
      "info" : "IfStatement[8222-8279]:IfStatement[8261-8318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8247-8279]:Block[8286-8318]"
    }, {
      "left" : "pos = 1;",
      "right" : "pos = 1;",
      "info" : "ExpressionStatement[8261-8269]:ExpressionStatement[8300-8308]"
    }, {
      "left" : "int newPos = p.parseInto(mdt, str, pos);",
      "right" : "int newPos = p.parseInto(mdt, str, pos);",
      "info" : "VariableDeclarationStatement[8288-8328]:VariableDeclarationStatement[8327-8367]"
    }, {
      "left" : "if (newPos == ~pos)",
      "right" : "if (newPos == ~pos)",
      "info" : "IfStatement[8337-8421]:IfStatement[8376-8460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8357-8421]:Block[8396-8460]"
    }, {
      "left" : "throw new IllegalArgumentException(str);",
      "right" : "throw new IllegalArgumentException(str);",
      "info" : "ThrowStatement[8371-8411]:ThrowStatement[8410-8450]"
    }, {
      "left" : "int millis = (int)mdt.getMillis();",
      "right" : "int millis = (int)mdt.getMillis();",
      "info" : "VariableDeclarationStatement[8430-8464]:VariableDeclarationStatement[8469-8503]"
    }, {
      "left" : "if (pos == 1)",
      "right" : "if (pos == 1)",
      "info" : "IfStatement[8473-8528]:IfStatement[8512-8567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8487-8528]:Block[8526-8567]"
    }, {
      "left" : "millis = -millis;",
      "right" : "millis = -millis;",
      "info" : "ExpressionStatement[8501-8518]:ExpressionStatement[8540-8557]"
    }, {
      "left" : "return millis;",
      "right" : "return millis;",
      "info" : "ReturnStatement[8537-8551]:ReturnStatement[8576-8590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8597-8913]:Block[8636-8952]"
    }, {
      "left" : "switch (c) {\n        case 's': case 'S':\n            // Standard time\n            return 's';\n        case 'u': case 'U': case 'g': case 'G': case 'z': case 'Z':\n            // UTC\n            return 'u';\n        case 'w': case 'W': default:\n            // Wall time\n            return 'w';\n        }",
      "right" : "switch (c) {\n        case 's': case 'S':\n            // Standard time\n            return 's';\n        case 'u': case 'U': case 'g': case 'G': case 'z': case 'Z':\n            // UTC\n            return 'u';\n        case 'w': case 'W': default:\n            // Wall time\n            return 'w';\n        }",
      "info" : "SwitchStatement[8607-8907]:SwitchStatement[8646-8946]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[8628-8637]:SwitchCase[8667-8676]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[8638-8647]:SwitchCase[8677-8686]"
    }, {
      "left" : "return 's';",
      "right" : "return 's';",
      "info" : "ReturnStatement[8689-8700]:ReturnStatement[8728-8739]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[8709-8718]:SwitchCase[8748-8757]"
    }, {
      "left" : "case 'U':",
      "right" : "case 'U':",
      "info" : "SwitchCase[8719-8728]:SwitchCase[8758-8767]"
    }, {
      "left" : "case 'g':",
      "right" : "case 'g':",
      "info" : "SwitchCase[8729-8738]:SwitchCase[8768-8777]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[8739-8748]:SwitchCase[8778-8787]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[8749-8758]:SwitchCase[8788-8797]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[8759-8768]:SwitchCase[8798-8807]"
    }, {
      "left" : "return 'u';",
      "right" : "return 'u';",
      "info" : "ReturnStatement[8800-8811]:ReturnStatement[8839-8850]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[8820-8829]:SwitchCase[8859-8868]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[8830-8839]:SwitchCase[8869-8878]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8840-8848]:SwitchCase[8879-8887]"
    }, {
      "left" : "return 'w';",
      "right" : "return 'w';",
      "info" : "ReturnStatement[8886-8897]:ReturnStatement[8925-8936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9014-11613]:Block[9053-11652]"
    }, {
      "left" : "if (!id.equals(tz.getID()))",
      "right" : "if (!id.equals(tz.getID()))",
      "info" : "IfStatement[9024-9088]:IfStatement[9063-9127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9052-9088]:Block[9091-9127]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9066-9078]:ReturnStatement[9105-9117]"
    }, {
      "left" : "long millis = ISOChronology.getInstanceUTC().year().set(0, 1850);",
      "right" : "long millis = ISOChronology.getInstanceUTC().year().set(0, 1850);",
      "info" : "VariableDeclarationStatement[9171-9236]:VariableDeclarationStatement[9210-9275]"
    }, {
      "left" : "long end = ISOChronology.getInstanceUTC().year().set(0, 2050);",
      "right" : "long end = ISOChronology.getInstanceUTC().year().set(0, 2050);",
      "info" : "VariableDeclarationStatement[9245-9307]:VariableDeclarationStatement[9284-9346]"
    }, {
      "left" : "int offset = tz.getOffset(millis);",
      "right" : "int offset = tz.getOffset(millis);",
      "info" : "VariableDeclarationStatement[9317-9351]:VariableDeclarationStatement[9356-9390]"
    }, {
      "left" : "String key = tz.getNameKey(millis);",
      "right" : "String key = tz.getNameKey(millis);",
      "info" : "VariableDeclarationStatement[9360-9395]:VariableDeclarationStatement[9399-9434]"
    }, {
      "left" : "List<Long> transitions = new ArrayList<Long>();",
      "right" : "List<Long> transitions = new ArrayList<Long>();",
      "info" : "VariableDeclarationStatement[9405-9452]:VariableDeclarationStatement[9444-9491]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[9462-10606]:WhileStatement[9501-10645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9475-10606]:Block[9514-10645]"
    }, {
      "left" : "long next = tz.nextTransition(millis);",
      "right" : "long next = tz.nextTransition(millis);",
      "info" : "VariableDeclarationStatement[9489-9527]:VariableDeclarationStatement[9528-9566]"
    }, {
      "left" : "if (next == millis || next > end)",
      "right" : "if (next == millis || next > end)",
      "info" : "IfStatement[9540-9612]:IfStatement[9579-9651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9574-9612]:Block[9613-9651]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9592-9598]:BreakStatement[9631-9637]"
    }, {
      "left" : "millis = next;",
      "right" : "millis = next;",
      "info" : "ExpressionStatement[9626-9640]:ExpressionStatement[9665-9679]"
    }, {
      "left" : "int nextOffset = tz.getOffset(millis);",
      "right" : "int nextOffset = tz.getOffset(millis);",
      "info" : "VariableDeclarationStatement[9654-9692]:VariableDeclarationStatement[9693-9731]"
    }, {
      "left" : "String nextKey = tz.getNameKey(millis);",
      "right" : "String nextKey = tz.getNameKey(millis);",
      "info" : "VariableDeclarationStatement[9705-9744]:VariableDeclarationStatement[9744-9783]"
    }, {
      "left" : "if (offset == nextOffset\n                && key.equals(nextKey))",
      "right" : "if (offset == nextOffset\n                && key.equals(nextKey))",
      "info" : "IfStatement[9758-10080]:IfStatement[9797-10119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9823-10080]:Block[9862-10119]"
    }, {
      "left" : "System.out.println(\"*d* Error in \" + tz.getID() + \" \"\n                                   + new DateTime(millis,\n                                                  ISOChronology.getInstanceUTC()));",
      "right" : "System.out.println(\"*d* Error in \" + tz.getID() + \" \"\n                                   + new DateTime(millis,\n                                                  ISOChronology.getInstanceUTC()));",
      "info" : "ExpressionStatement[9841-10036]:ExpressionStatement[9880-10075]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10053-10066]:ReturnStatement[10092-10105]"
    }, {
      "left" : "if (nextKey == null || (nextKey.length() < 3 && !\"??\".equals(nextKey)))",
      "right" : "if (nextKey == null || (nextKey.length() < 3 && !\"??\".equals(nextKey)))",
      "info" : "IfStatement[10094-10483]:IfStatement[10133-10522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10166-10483]:Block[10205-10522]"
    }, {
      "left" : "System.out.println(\"*s* Error in \" + tz.getID() + \" \"\n                                   + new DateTime(millis,\n                                                  ISOChronology.getInstanceUTC())\n                                   + \", nameKey=\" + nextKey);",
      "right" : "System.out.println(\"*s* Error in \" + tz.getID() + \" \"\n                                   + new DateTime(millis,\n                                                  ISOChronology.getInstanceUTC())\n                                   + \", nameKey=\" + nextKey);",
      "info" : "ExpressionStatement[10184-10439]:ExpressionStatement[10223-10478]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10456-10469]:ReturnStatement[10495-10508]"
    }, {
      "left" : "transitions.add(Long.valueOf(millis));",
      "right" : "transitions.add(Long.valueOf(millis));",
      "info" : "ExpressionStatement[10497-10535]:ExpressionStatement[10536-10574]"
    }, {
      "left" : "offset = nextOffset;",
      "right" : "offset = nextOffset;",
      "info" : "ExpressionStatement[10549-10569]:ExpressionStatement[10588-10608]"
    }, {
      "left" : "key = nextKey;",
      "right" : "key = nextKey;",
      "info" : "ExpressionStatement[10582-10596]:ExpressionStatement[10621-10635]"
    }, {
      "left" : "millis = ISOChronology.getInstanceUTC().year().set(0, 2050);",
      "right" : "millis = ISOChronology.getInstanceUTC().year().set(0, 2050);",
      "info" : "ExpressionStatement[10674-10734]:ExpressionStatement[10713-10773]"
    }, {
      "left" : "end = ISOChronology.getInstanceUTC().year().set(0, 1850);",
      "right" : "end = ISOChronology.getInstanceUTC().year().set(0, 1850);",
      "info" : "ExpressionStatement[10743-10800]:ExpressionStatement[10782-10839]"
    }, {
      "left" : "for (int i=transitions.size(); --i>= 0)",
      "right" : "for (int i=transitions.size(); --i>= 0)",
      "info" : "ForStatement[10810-11585]:ForStatement[10849-11624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10852-11585]:Block[10891-11624]"
    }, {
      "left" : "long prev = tz.previousTransition(millis);",
      "right" : "long prev = tz.previousTransition(millis);",
      "info" : "VariableDeclarationStatement[10866-10908]:VariableDeclarationStatement[10905-10947]"
    }, {
      "left" : "if (prev == millis || prev < end)",
      "right" : "if (prev == millis || prev < end)",
      "info" : "IfStatement[10921-10993]:IfStatement[10960-11032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10955-10993]:Block[10994-11032]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10973-10979]:BreakStatement[11012-11018]"
    }, {
      "left" : "millis = prev;",
      "right" : "millis = prev;",
      "info" : "ExpressionStatement[11007-11021]:ExpressionStatement[11046-11060]"
    }, {
      "left" : "long trans = transitions.get(i).longValue();",
      "right" : "long trans = transitions.get(i).longValue();",
      "info" : "VariableDeclarationStatement[11035-11079]:VariableDeclarationStatement[11074-11118]"
    }, {
      "left" : "if (trans - 1 != millis)",
      "right" : "if (trans - 1 != millis)",
      "info" : "IfStatement[11105-11575]:IfStatement[11144-11614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11130-11575]:Block[11169-11614]"
    }, {
      "left" : "System.out.println(\"*r* Error in \" + tz.getID() + \" \"\n                                   + new DateTime(millis,\n                                                  ISOChronology.getInstanceUTC()) + \" != \"\n                                   + new DateTime(trans - 1,\n                                                  ISOChronology.getInstanceUTC()));",
      "right" : "System.out.println(\"*r* Error in \" + tz.getID() + \" \"\n                                   + new DateTime(millis,\n                                                  ISOChronology.getInstanceUTC()) + \" != \"\n                                   + new DateTime(trans - 1,\n                                                  ISOChronology.getInstanceUTC()));",
      "info" : "ExpressionStatement[11148-11495]:ExpressionStatement[11187-11534]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11548-11561]:ReturnStatement[11587-11600]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11595-11607]:ReturnStatement[11634-11646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11850-11991]:Block[11889-12030]"
    }, {
      "left" : "iRuleSets = new HashMap<String, RuleSet>();",
      "right" : "iRuleSets = new HashMap<String, RuleSet>();",
      "info" : "ExpressionStatement[11860-11903]:ExpressionStatement[11899-11942]"
    }, {
      "left" : "iZones = new ArrayList<Zone>();",
      "right" : "iZones = new ArrayList<Zone>();",
      "info" : "ExpressionStatement[11912-11943]:ExpressionStatement[11951-11982]"
    }, {
      "left" : "iLinks = new ArrayList<String>();",
      "right" : "iLinks = new ArrayList<String>();",
      "info" : "ExpressionStatement[11952-11985]:ExpressionStatement[11991-12024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12294-16011]:Block[12333-16050]"
    }, {
      "left" : "if (sources != null)",
      "right" : "if (sources != null)",
      "info" : "IfStatement[12304-12548]:IfStatement[12343-12587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12325-12548]:Block[12364-12587]"
    }, {
      "left" : "for (int i=0; i<sources.length; i++)",
      "right" : "for (int i=0; i<sources.length; i++)",
      "info" : "ForStatement[12339-12538]:ForStatement[12378-12577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12376-12538]:Block[12415-12577]"
    }, {
      "left" : "BufferedReader in = new BufferedReader(new FileReader(sources[i]));",
      "right" : "BufferedReader in = new BufferedReader(new FileReader(sources[i]));",
      "info" : "VariableDeclarationStatement[12394-12461]:VariableDeclarationStatement[12433-12500]"
    }, {
      "left" : "parseDataFile(in);",
      "right" : "parseDataFile(in);",
      "info" : "ExpressionStatement[12478-12496]:ExpressionStatement[12517-12535]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[12513-12524]:ExpressionStatement[12552-12563]"
    }, {
      "left" : "if (outputDir != null)",
      "right" : "if (outputDir != null)",
      "info" : "IfStatement[12558-12969]:IfStatement[12597-13008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12581-12969]:Block[12620-13008]"
    }, {
      "left" : "if (!outputDir.exists())",
      "right" : "if (!outputDir.exists())",
      "info" : "IfStatement[12595-12814]:IfStatement[12634-12853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12620-12814]:Block[12659-12853]"
    }, {
      "left" : "if (!outputDir.mkdirs())",
      "right" : "if (!outputDir.mkdirs())",
      "info" : "IfStatement[12638-12800]:IfStatement[12677-12839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12663-12800]:Block[12702-12839]"
    }, {
      "left" : "throw new IOException(\"Destination directory doesn't exist and cannot be created: \" + outputDir);",
      "right" : "throw new IOException(\"Destination directory doesn't exist and cannot be created: \" + outputDir);",
      "info" : "ThrowStatement[12685-12782]:ThrowStatement[12724-12821]"
    }, {
      "left" : "if (!outputDir.isDirectory())",
      "right" : "if (!outputDir.isDirectory())",
      "info" : "IfStatement[12827-12959]:IfStatement[12866-12998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12857-12959]:Block[12896-12998]"
    }, {
      "left" : "throw new IOException(\"Destination is not a directory: \" + outputDir);",
      "right" : "throw new IOException(\"Destination is not a directory: \" + outputDir);",
      "info" : "ThrowStatement[12875-12945]:ThrowStatement[12914-12984]"
    }, {
      "left" : "Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();",
      "right" : "Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();",
      "info" : "VariableDeclarationStatement[12979-13047]:VariableDeclarationStatement[13018-13086]"
    }, {
      "left" : "System.out.println(\"Writing zoneinfo files\");",
      "right" : "System.out.println(\"Writing zoneinfo files\");",
      "info" : "ExpressionStatement[13057-13102]:ExpressionStatement[13096-13141]"
    }, {
      "left" : "for (int i=0; i<iZones.size(); i++)",
      "right" : "for (int i=0; i<iZones.size(); i++)",
      "info" : "ForStatement[13111-14642]:ForStatement[13150-14681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13147-14642]:Block[13186-14681]"
    }, {
      "left" : "Zone zone = iZones.get(i);",
      "right" : "Zone zone = iZones.get(i);",
      "info" : "VariableDeclarationStatement[13161-13187]:VariableDeclarationStatement[13200-13226]"
    }, {
      "left" : "DateTimeZoneBuilder builder = new DateTimeZoneBuilder();",
      "right" : "DateTimeZoneBuilder builder = new DateTimeZoneBuilder();",
      "info" : "VariableDeclarationStatement[13200-13256]:VariableDeclarationStatement[13239-13295]"
    }, {
      "left" : "zone.addToBuilder(builder, iRuleSets);",
      "right" : "zone.addToBuilder(builder, iRuleSets);",
      "info" : "ExpressionStatement[13269-13307]:ExpressionStatement[13308-13346]"
    }, {
      "left" : "final DateTimeZone original = builder.toDateTimeZone(zone.iName, true);",
      "right" : "final DateTimeZone original = builder.toDateTimeZone(zone.iName, true);",
      "info" : "VariableDeclarationStatement[13320-13391]:VariableDeclarationStatement[13359-13430]"
    }, {
      "left" : "DateTimeZone tz = original;",
      "right" : "DateTimeZone tz = original;",
      "info" : "VariableDeclarationStatement[13404-13431]:VariableDeclarationStatement[13443-13470]"
    }, {
      "left" : "if (test(tz.getID(), tz))",
      "right" : "if (test(tz.getID(), tz))",
      "info" : "IfStatement[13444-14632]:IfStatement[13483-14671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13470-14632]:Block[13509-14671]"
    }, {
      "left" : "map.put(tz.getID(), tz);",
      "right" : "map.put(tz.getID(), tz);",
      "info" : "ExpressionStatement[13488-13512]:ExpressionStatement[13527-13551]"
    }, {
      "left" : "if (outputDir != null)",
      "right" : "if (outputDir != null)",
      "info" : "IfStatement[13529-14618]:IfStatement[13568-14657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13552-14618]:Block[13591-14657]"
    }, {
      "left" : "if (ZoneInfoCompiler.verbose())",
      "right" : "if (ZoneInfoCompiler.verbose())",
      "info" : "IfStatement[13574-13698]:IfStatement[13613-13737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13606-13698]:Block[13645-13737]"
    }, {
      "left" : "System.out.println(\"Writing \" + tz.getID());",
      "right" : "System.out.println(\"Writing \" + tz.getID());",
      "info" : "ExpressionStatement[13632-13676]:ExpressionStatement[13671-13715]"
    }, {
      "left" : "File file = new File(outputDir, tz.getID());",
      "right" : "File file = new File(outputDir, tz.getID());",
      "info" : "VariableDeclarationStatement[13719-13763]:VariableDeclarationStatement[13758-13802]"
    }, {
      "left" : "if (!file.getParentFile().exists())",
      "right" : "if (!file.getParentFile().exists())",
      "info" : "IfStatement[13784-13898]:IfStatement[13823-13937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13820-13898]:Block[13859-13937]"
    }, {
      "left" : "file.getParentFile().mkdirs();",
      "right" : "file.getParentFile().mkdirs();",
      "info" : "ExpressionStatement[13846-13876]:ExpressionStatement[13885-13915]"
    }, {
      "left" : "OutputStream out = new FileOutputStream(file);",
      "right" : "OutputStream out = new FileOutputStream(file);",
      "info" : "VariableDeclarationStatement[13919-13965]:VariableDeclarationStatement[13958-14004]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13986-14140]:TryStatement[14025-14179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13990-14071]:Block[14029-14110]"
    }, {
      "left" : "builder.writeTo(zone.iName, out);",
      "right" : "builder.writeTo(zone.iName, out);",
      "info" : "ExpressionStatement[14016-14049]:ExpressionStatement[14055-14088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14080-14140]:Block[14119-14179]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[14106-14118]:ExpressionStatement[14145-14157]"
    }, {
      "left" : "InputStream in = new FileInputStream(file);",
      "right" : "InputStream in = new FileInputStream(file);",
      "info" : "VariableDeclarationStatement[14214-14257]:VariableDeclarationStatement[14253-14296]"
    }, {
      "left" : "DateTimeZone tz2 = DateTimeZoneBuilder.readFrom(in, tz.getID());",
      "right" : "DateTimeZone tz2 = DateTimeZoneBuilder.readFrom(in, tz.getID());",
      "info" : "VariableDeclarationStatement[14278-14342]:VariableDeclarationStatement[14317-14381]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[14363-14374]:ExpressionStatement[14402-14413]"
    }, {
      "left" : "if (!original.equals(tz2))",
      "right" : "if (!original.equals(tz2))",
      "info" : "IfStatement[14396-14600]:IfStatement[14435-14639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14423-14600]:Block[14462-14639]"
    }, {
      "left" : "System.out.println(\"*e* Error in \" + tz.getID() +\n                                           \": Didn't read properly from file\");",
      "right" : "System.out.println(\"*e* Error in \" + tz.getID() +\n                                           \": Didn't read properly from file\");",
      "info" : "ExpressionStatement[14449-14578]:ExpressionStatement[14488-14617]"
    }, {
      "left" : "for (int pass=0; pass<2; pass++)",
      "right" : "for (int pass=0; pass<2; pass++)",
      "info" : "ForStatement[14652-15236]:ForStatement[14691-15275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14685-15236]:Block[14724-15275]"
    }, {
      "left" : "for (int i=0; i<iLinks.size(); i += 2)",
      "right" : "for (int i=0; i<iLinks.size(); i += 2)",
      "info" : "ForStatement[14699-15226]:ForStatement[14738-15265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14738-15226]:Block[14777-15265]"
    }, {
      "left" : "String id = iLinks.get(i);",
      "right" : "String id = iLinks.get(i);",
      "info" : "VariableDeclarationStatement[14756-14782]:VariableDeclarationStatement[14795-14821]"
    }, {
      "left" : "String alias = iLinks.get(i + 1);",
      "right" : "String alias = iLinks.get(i + 1);",
      "info" : "VariableDeclarationStatement[14799-14832]:VariableDeclarationStatement[14838-14871]"
    }, {
      "left" : "DateTimeZone tz = map.get(id);",
      "right" : "DateTimeZone tz = map.get(id);",
      "info" : "VariableDeclarationStatement[14849-14879]:VariableDeclarationStatement[14888-14918]"
    }, {
      "left" : "if (tz == null)",
      "right" : "if (tz == null)",
      "info" : "IfStatement[14896-15212]:IfStatement[14935-15251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14912-15147]:Block[14951-15186]"
    }, {
      "left" : "if (pass > 0)",
      "right" : "if (pass > 0)",
      "info" : "IfStatement[14934-15129]:IfStatement[14973-15168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14948-15129]:Block[14987-15168]"
    }, {
      "left" : "System.out.println(\"Cannot find time zone '\" + id +\n                                           \"' to link alias '\" + alias + \"' to\");",
      "right" : "System.out.println(\"Cannot find time zone '\" + id +\n                                           \"' to link alias '\" + alias + \"' to\");",
      "info" : "ExpressionStatement[14974-15107]:ExpressionStatement[15013-15146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15153-15212]:Block[15192-15251]"
    }, {
      "left" : "map.put(alias, tz);",
      "right" : "map.put(alias, tz);",
      "info" : "ExpressionStatement[15175-15194]:ExpressionStatement[15214-15233]"
    }, {
      "left" : "if (outputDir != null)",
      "right" : "if (outputDir != null)",
      "info" : "IfStatement[15246-15984]:IfStatement[15285-16023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15269-15984]:Block[15308-16023]"
    }, {
      "left" : "System.out.println(\"Writing ZoneInfoMap\");",
      "right" : "System.out.println(\"Writing ZoneInfoMap\");",
      "info" : "ExpressionStatement[15283-15325]:ExpressionStatement[15322-15364]"
    }, {
      "left" : "File file = new File(outputDir, \"ZoneInfoMap\");",
      "right" : "File file = new File(outputDir, \"ZoneInfoMap\");",
      "info" : "VariableDeclarationStatement[15338-15385]:VariableDeclarationStatement[15377-15424]"
    }, {
      "left" : "if (!file.getParentFile().exists())",
      "right" : "if (!file.getParentFile().exists())",
      "info" : "IfStatement[15398-15496]:IfStatement[15437-15535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15434-15496]:Block[15473-15535]"
    }, {
      "left" : "file.getParentFile().mkdirs();",
      "right" : "file.getParentFile().mkdirs();",
      "info" : "ExpressionStatement[15452-15482]:ExpressionStatement[15491-15521]"
    }, {
      "left" : "OutputStream out = new FileOutputStream(file);",
      "right" : "OutputStream out = new FileOutputStream(file);",
      "info" : "VariableDeclarationStatement[15510-15556]:VariableDeclarationStatement[15549-15595]"
    }, {
      "left" : "DataOutputStream dout = new DataOutputStream(out);",
      "right" : "DataOutputStream dout = new DataOutputStream(out);",
      "info" : "VariableDeclarationStatement[15569-15619]:VariableDeclarationStatement[15608-15658]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15632-15974]:TryStatement[15671-16013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15636-15920]:Block[15675-15959]"
    }, {
      "left" : "Map<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);",
      "right" : "Map<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);",
      "info" : "VariableDeclarationStatement[15725-15824]:VariableDeclarationStatement[15764-15863]"
    }, {
      "left" : "zimap.putAll(map);",
      "right" : "zimap.putAll(map);",
      "info" : "ExpressionStatement[15841-15859]:ExpressionStatement[15880-15898]"
    }, {
      "left" : "writeZoneInfoMap(dout, zimap);",
      "right" : "writeZoneInfoMap(dout, zimap);",
      "info" : "ExpressionStatement[15876-15906]:ExpressionStatement[15915-15945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15929-15974]:Block[15968-16013]"
    }, {
      "left" : "dout.close();",
      "right" : "dout.close();",
      "info" : "ExpressionStatement[15947-15960]:ExpressionStatement[15986-15999]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[15994-16005]:ReturnStatement[16033-16044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16081-17900]:Block[16120-17939]"
    }, {
      "left" : "Zone zone = null;",
      "right" : "Zone zone = null;",
      "info" : "VariableDeclarationStatement[16091-16108]:VariableDeclarationStatement[16130-16147]"
    }, {
      "left" : "String line;",
      "right" : "String line;",
      "info" : "VariableDeclarationStatement[16117-16129]:VariableDeclarationStatement[16156-16168]"
    }, {
      "left" : "while ((line = in.readLine()) != null)",
      "right" : "while ((line = in.readLine()) != null)",
      "info" : "WhileStatement[16138-17825]:WhileStatement[16177-17864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16177-17825]:Block[16216-17864]"
    }, {
      "left" : "String trimmed = line.trim();",
      "right" : "String trimmed = line.trim();",
      "info" : "VariableDeclarationStatement[16191-16220]:VariableDeclarationStatement[16230-16259]"
    }, {
      "left" : "if (trimmed.length() == 0 || trimmed.charAt(0) == '#')",
      "right" : "if (trimmed.length() == 0 || trimmed.charAt(0) == '#')",
      "info" : "IfStatement[16233-16329]:IfStatement[16272-16368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16288-16329]:Block[16327-16368]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16306-16315]:ContinueStatement[16345-16354]"
    }, {
      "left" : "int index = line.indexOf('#');",
      "right" : "int index = line.indexOf('#');",
      "info" : "VariableDeclarationStatement[16343-16373]:VariableDeclarationStatement[16382-16412]"
    }, {
      "left" : "if (index >= 0)",
      "right" : "if (index >= 0)",
      "info" : "IfStatement[16386-16466]:IfStatement[16425-16505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16402-16466]:Block[16441-16505]"
    }, {
      "left" : "line = line.substring(0, index);",
      "right" : "line = line.substring(0, index);",
      "info" : "ExpressionStatement[16420-16452]:ExpressionStatement[16459-16491]"
    }, {
      "left" : "StringTokenizer st = new StringTokenizer(line, \" \\t\");",
      "right" : "StringTokenizer st = new StringTokenizer(line, \" \\t\");",
      "info" : "VariableDeclarationStatement[16521-16575]:VariableDeclarationStatement[16560-16614]"
    }, {
      "left" : "if (Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens())",
      "right" : "if (Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens())",
      "info" : "IfStatement[16589-16969]:IfStatement[16628-17008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16655-16827]:Block[16694-16866]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[16673-16787]:IfStatement[16712-16826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16691-16787]:Block[16730-16826]"
    }, {
      "left" : "zone.chain(st);",
      "right" : "zone.chain(st);",
      "info" : "ExpressionStatement[16754-16769]:ExpressionStatement[16793-16808]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16804-16813]:ContinueStatement[16843-16852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16833-16969]:Block[16872-17008]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[16851-16926]:IfStatement[16890-16965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16869-16926]:Block[16908-16965]"
    }, {
      "left" : "iZones.add(zone);",
      "right" : "iZones.add(zone);",
      "info" : "ExpressionStatement[16891-16908]:ExpressionStatement[16930-16947]"
    }, {
      "left" : "zone = null;",
      "right" : "zone = null;",
      "info" : "ExpressionStatement[16943-16955]:ExpressionStatement[16982-16994]"
    }, {
      "left" : "if (st.hasMoreTokens())",
      "right" : "if (st.hasMoreTokens())",
      "info" : "IfStatement[16983-17815]:IfStatement[17022-17854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17007-17815]:Block[17046-17854]"
    }, {
      "left" : "String token = st.nextToken();",
      "right" : "String token = st.nextToken();",
      "info" : "VariableDeclarationStatement[17025-17055]:VariableDeclarationStatement[17064-17094]"
    }, {
      "left" : "if (token.equalsIgnoreCase(\"Rule\"))",
      "right" : "if (token.equalsIgnoreCase(\"Rule\"))",
      "info" : "IfStatement[17072-17801]:IfStatement[17111-17840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17108-17452]:Block[17147-17491]"
    }, {
      "left" : "Rule r = new Rule(st);",
      "right" : "Rule r = new Rule(st);",
      "info" : "VariableDeclarationStatement[17130-17152]:VariableDeclarationStatement[17169-17191]"
    }, {
      "left" : "RuleSet rs = iRuleSets.get(r.iName);",
      "right" : "RuleSet rs = iRuleSets.get(r.iName);",
      "info" : "VariableDeclarationStatement[17173-17209]:VariableDeclarationStatement[17212-17248]"
    }, {
      "left" : "if (rs == null)",
      "right" : "if (rs == null)",
      "info" : "IfStatement[17230-17434]:IfStatement[17269-17473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17246-17366]:Block[17285-17405]"
    }, {
      "left" : "rs = new RuleSet(r);",
      "right" : "rs = new RuleSet(r);",
      "info" : "ExpressionStatement[17272-17292]:ExpressionStatement[17311-17331]"
    }, {
      "left" : "iRuleSets.put(r.iName, rs);",
      "right" : "iRuleSets.put(r.iName, rs);",
      "info" : "ExpressionStatement[17317-17344]:ExpressionStatement[17356-17383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17372-17434]:Block[17411-17473]"
    }, {
      "left" : "rs.addRule(r);",
      "right" : "rs.addRule(r);",
      "info" : "ExpressionStatement[17398-17412]:ExpressionStatement[17437-17451]"
    }, {
      "left" : "if (token.equalsIgnoreCase(\"Zone\"))",
      "right" : "if (token.equalsIgnoreCase(\"Zone\"))",
      "info" : "IfStatement[17458-17801]:IfStatement[17497-17840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17494-17554]:Block[17533-17593]"
    }, {
      "left" : "zone = new Zone(st);",
      "right" : "zone = new Zone(st);",
      "info" : "ExpressionStatement[17516-17536]:ExpressionStatement[17555-17575]"
    }, {
      "left" : "if (token.equalsIgnoreCase(\"Link\"))",
      "right" : "if (token.equalsIgnoreCase(\"Link\"))",
      "info" : "IfStatement[17560-17801]:IfStatement[17599-17840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17596-17711]:Block[17635-17750]"
    }, {
      "left" : "iLinks.add(st.nextToken());",
      "right" : "iLinks.add(st.nextToken());",
      "info" : "ExpressionStatement[17618-17645]:ExpressionStatement[17657-17684]"
    }, {
      "left" : "iLinks.add(st.nextToken());",
      "right" : "iLinks.add(st.nextToken());",
      "info" : "ExpressionStatement[17666-17693]:ExpressionStatement[17705-17732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17717-17801]:Block[17756-17840]"
    }, {
      "left" : "System.out.println(\"Unknown line: \" + line);",
      "right" : "System.out.println(\"Unknown line: \" + line);",
      "info" : "ExpressionStatement[17739-17783]:ExpressionStatement[17778-17822]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[17835-17894]:IfStatement[17874-17933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17853-17894]:Block[17892-17933]"
    }, {
      "left" : "iZones.add(zone);",
      "right" : "iZones.add(zone);",
      "info" : "ExpressionStatement[17867-17884]:ExpressionStatement[17906-17923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18200-18396]:Block[18239-18435]"
    }, {
      "left" : "iMonthOfYear = 1;",
      "right" : "iMonthOfYear = 1;",
      "info" : "ExpressionStatement[18214-18231]:ExpressionStatement[18253-18270]"
    }, {
      "left" : "iDayOfMonth = 1;",
      "right" : "iDayOfMonth = 1;",
      "info" : "ExpressionStatement[18244-18260]:ExpressionStatement[18283-18299]"
    }, {
      "left" : "iDayOfWeek = 0;",
      "right" : "iDayOfWeek = 0;",
      "info" : "ExpressionStatement[18273-18288]:ExpressionStatement[18312-18327]"
    }, {
      "left" : "iAdvanceDayOfWeek = false;",
      "right" : "iAdvanceDayOfWeek = false;",
      "info" : "ExpressionStatement[18301-18327]:ExpressionStatement[18340-18366]"
    }, {
      "left" : "iMillisOfDay = 0;",
      "right" : "iMillisOfDay = 0;",
      "info" : "ExpressionStatement[18340-18357]:ExpressionStatement[18379-18396]"
    }, {
      "left" : "iZoneChar = 'w';",
      "right" : "iZoneChar = 'w';",
      "info" : "ExpressionStatement[18370-18386]:ExpressionStatement[18409-18425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18441-21258]:Block[18480-21297]"
    }, {
      "left" : "int month = 1;",
      "right" : "int month = 1;",
      "info" : "VariableDeclarationStatement[18455-18469]:VariableDeclarationStatement[18494-18508]"
    }, {
      "left" : "int day = 1;",
      "right" : "int day = 1;",
      "info" : "VariableDeclarationStatement[18482-18494]:VariableDeclarationStatement[18521-18533]"
    }, {
      "left" : "int dayOfWeek = 0;",
      "right" : "int dayOfWeek = 0;",
      "info" : "VariableDeclarationStatement[18507-18525]:VariableDeclarationStatement[18546-18564]"
    }, {
      "left" : "int millis = 0;",
      "right" : "int millis = 0;",
      "info" : "VariableDeclarationStatement[18538-18553]:VariableDeclarationStatement[18577-18592]"
    }, {
      "left" : "boolean advance = false;",
      "right" : "boolean advance = false;",
      "info" : "VariableDeclarationStatement[18566-18590]:VariableDeclarationStatement[18605-18629]"
    }, {
      "left" : "char zoneChar = 'w';",
      "right" : "char zoneChar = 'w';",
      "info" : "VariableDeclarationStatement[18603-18623]:VariableDeclarationStatement[18642-18662]"
    }, {
      "left" : "if (st.hasMoreTokens())",
      "right" : "if (st.hasMoreTokens())",
      "info" : "IfStatement[18637-21036]:IfStatement[18676-21075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18661-21036]:Block[18700-21075]"
    }, {
      "left" : "month = parseMonth(st.nextToken());",
      "right" : "month = parseMonth(st.nextToken());",
      "info" : "ExpressionStatement[18679-18714]:ExpressionStatement[18718-18753]"
    }, {
      "left" : "if (st.hasMoreTokens())",
      "right" : "if (st.hasMoreTokens())",
      "info" : "IfStatement[18732-21022]:IfStatement[18771-21061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18756-21022]:Block[18795-21061]"
    }, {
      "left" : "String str = st.nextToken();",
      "right" : "String str = st.nextToken();",
      "info" : "VariableDeclarationStatement[18778-18806]:VariableDeclarationStatement[18817-18845]"
    }, {
      "left" : "if (str.startsWith(\"last\"))",
      "right" : "if (str.startsWith(\"last\"))",
      "info" : "IfStatement[18827-20187]:IfStatement[18866-20226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18855-19023]:Block[18894-19062]"
    }, {
      "left" : "day = -1;",
      "right" : "day = -1;",
      "info" : "ExpressionStatement[18881-18890]:ExpressionStatement[18920-18929]"
    }, {
      "left" : "dayOfWeek = parseDayOfWeek(str.substring(4));",
      "right" : "dayOfWeek = parseDayOfWeek(str.substring(4));",
      "info" : "ExpressionStatement[18915-18960]:ExpressionStatement[18954-18999]"
    }, {
      "left" : "advance = false;",
      "right" : "advance = false;",
      "info" : "ExpressionStatement[18985-19001]:ExpressionStatement[19024-19040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19029-20187]:Block[19068-20226]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19055-20165]:TryStatement[19094-20204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19059-19231]:Block[19098-19270]"
    }, {
      "left" : "day = Integer.parseInt(str);",
      "right" : "day = Integer.parseInt(str);",
      "info" : "ExpressionStatement[19089-19117]:ExpressionStatement[19128-19156]"
    }, {
      "left" : "dayOfWeek = 0;",
      "right" : "dayOfWeek = 0;",
      "info" : "ExpressionStatement[19146-19160]:ExpressionStatement[19185-19199]"
    }, {
      "left" : "advance = false;",
      "right" : "advance = false;",
      "info" : "ExpressionStatement[19189-19205]:ExpressionStatement[19228-19244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19264-20165]:Block[19303-20204]"
    }, {
      "left" : "int index = str.indexOf(\">=\");",
      "right" : "int index = str.indexOf(\">=\");",
      "info" : "VariableDeclarationStatement[19294-19324]:VariableDeclarationStatement[19333-19363]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[19353-20139]:IfStatement[19392-20178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19368-19614]:Block[19407-19653]"
    }, {
      "left" : "day = Integer.parseInt(str.substring(index + 2));",
      "right" : "day = Integer.parseInt(str.substring(index + 2));",
      "info" : "ExpressionStatement[19402-19451]:ExpressionStatement[19441-19490]"
    }, {
      "left" : "dayOfWeek = parseDayOfWeek(str.substring(0, index));",
      "right" : "dayOfWeek = parseDayOfWeek(str.substring(0, index));",
      "info" : "ExpressionStatement[19484-19536]:ExpressionStatement[19523-19575]"
    }, {
      "left" : "advance = true;",
      "right" : "advance = true;",
      "info" : "ExpressionStatement[19569-19584]:ExpressionStatement[19608-19623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19620-20139]:Block[19659-20178]"
    }, {
      "left" : "index = str.indexOf(\"<=\");",
      "right" : "index = str.indexOf(\"<=\");",
      "info" : "ExpressionStatement[19654-19680]:ExpressionStatement[19693-19719]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[19713-20109]:IfStatement[19752-20148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19728-19991]:Block[19767-20030]"
    }, {
      "left" : "day = Integer.parseInt(str.substring(index + 2));",
      "right" : "day = Integer.parseInt(str.substring(index + 2));",
      "info" : "ExpressionStatement[19766-19815]:ExpressionStatement[19805-19854]"
    }, {
      "left" : "dayOfWeek = parseDayOfWeek(str.substring(0, index));",
      "right" : "dayOfWeek = parseDayOfWeek(str.substring(0, index));",
      "info" : "ExpressionStatement[19852-19904]:ExpressionStatement[19891-19943]"
    }, {
      "left" : "advance = false;",
      "right" : "advance = false;",
      "info" : "ExpressionStatement[19941-19957]:ExpressionStatement[19980-19996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19997-20109]:Block[20036-20148]"
    }, {
      "left" : "throw new IllegalArgumentException(str);",
      "right" : "throw new IllegalArgumentException(str);",
      "info" : "ThrowStatement[20035-20075]:ThrowStatement[20074-20114]"
    }, {
      "left" : "if (st.hasMoreTokens())",
      "right" : "if (st.hasMoreTokens())",
      "info" : "IfStatement[20209-21004]:IfStatement[20248-21043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20233-21004]:Block[20272-21043]"
    }, {
      "left" : "str = st.nextToken();",
      "right" : "str = st.nextToken();",
      "info" : "ExpressionStatement[20259-20280]:ExpressionStatement[20298-20319]"
    }, {
      "left" : "zoneChar = parseZoneChar(str.charAt(str.length() - 1));",
      "right" : "zoneChar = parseZoneChar(str.charAt(str.length() - 1));",
      "info" : "ExpressionStatement[20305-20360]:ExpressionStatement[20344-20399]"
    }, {
      "left" : "if (str.equals(\"24:00\"))",
      "right" : "if (str.equals(\"24:00\"))",
      "info" : "IfStatement[20385-20982]:IfStatement[20424-21021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20410-20896]:Block[20449-20935]"
    }, {
      "left" : "LocalDate date = (day == -1 ?\n                                    new LocalDate(2001, month, 1).plusMonths(1) :\n                                    new LocalDate(2001, month, day).plusDays(1));",
      "right" : "LocalDate date = (day == -1 ?\n                                    new LocalDate(2001, month, 1).plusMonths(1) :\n                                    new LocalDate(2001, month, day).plusDays(1));",
      "info" : "VariableDeclarationStatement[20440-20633]:VariableDeclarationStatement[20479-20672]"
    }, {
      "left" : "advance = (day != -1);",
      "right" : "advance = (day != -1);",
      "info" : "ExpressionStatement[20662-20684]:ExpressionStatement[20701-20723]"
    }, {
      "left" : "month = date.getMonthOfYear();",
      "right" : "month = date.getMonthOfYear();",
      "info" : "ExpressionStatement[20713-20743]:ExpressionStatement[20752-20782]"
    }, {
      "left" : "day = date.getDayOfMonth();",
      "right" : "day = date.getDayOfMonth();",
      "info" : "ExpressionStatement[20772-20799]:ExpressionStatement[20811-20838]"
    }, {
      "left" : "dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;",
      "right" : "dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;",
      "info" : "ExpressionStatement[20828-20870]:ExpressionStatement[20867-20909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20902-20982]:Block[20941-21021]"
    }, {
      "left" : "millis = parseTime(str);",
      "right" : "millis = parseTime(str);",
      "info" : "ExpressionStatement[20932-20956]:ExpressionStatement[20971-20995]"
    }, {
      "left" : "iMonthOfYear = month;",
      "right" : "iMonthOfYear = month;",
      "info" : "ExpressionStatement[21050-21071]:ExpressionStatement[21089-21110]"
    }, {
      "left" : "iDayOfMonth = day;",
      "right" : "iDayOfMonth = day;",
      "info" : "ExpressionStatement[21084-21102]:ExpressionStatement[21123-21141]"
    }, {
      "left" : "iDayOfWeek = dayOfWeek;",
      "right" : "iDayOfWeek = dayOfWeek;",
      "info" : "ExpressionStatement[21115-21138]:ExpressionStatement[21154-21177]"
    }, {
      "left" : "iAdvanceDayOfWeek = advance;",
      "right" : "iAdvanceDayOfWeek = advance;",
      "info" : "ExpressionStatement[21151-21179]:ExpressionStatement[21190-21218]"
    }, {
      "left" : "iMillisOfDay = millis;",
      "right" : "iMillisOfDay = millis;",
      "info" : "ExpressionStatement[21192-21214]:ExpressionStatement[21231-21253]"
    }, {
      "left" : "iZoneChar = zoneChar;",
      "right" : "iZoneChar = zoneChar;",
      "info" : "ExpressionStatement[21227-21248]:ExpressionStatement[21266-21287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21502-21956]:Block[21541-21995]"
    }, {
      "left" : "builder.addRecurringSavings(nameKey, saveMillis,\n                                        fromYear, toYear,\n                                        iZoneChar,\n                                        iMonthOfYear,\n                                        iDayOfMonth,\n                                        iDayOfWeek,\n                                        iAdvanceDayOfWeek,\n                                        iMillisOfDay);",
      "right" : "builder.addRecurringSavings(nameKey, saveMillis,\n                                        fromYear, toYear,\n                                        iZoneChar,\n                                        iMonthOfYear,\n                                        iDayOfMonth,\n                                        iDayOfWeek,\n                                        iAdvanceDayOfWeek,\n                                        iMillisOfDay);",
      "info" : "ExpressionStatement[21516-21946]:ExpressionStatement[21555-21985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22094-22412]:Block[22133-22451]"
    }, {
      "left" : "builder.addCutover(year,\n                               iZoneChar,\n                               iMonthOfYear,\n                               iDayOfMonth,\n                               iDayOfWeek,\n                               iAdvanceDayOfWeek,\n                               iMillisOfDay);",
      "right" : "builder.addCutover(year,\n                               iZoneChar,\n                               iMonthOfYear,\n                               iDayOfMonth,\n                               iDayOfWeek,\n                               iAdvanceDayOfWeek,\n                               iMillisOfDay);",
      "info" : "ExpressionStatement[22108-22402]:ExpressionStatement[22147-22441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22447-22810]:Block[22486-22849]"
    }, {
      "left" : "return\n                \"MonthOfYear: \" + iMonthOfYear + \"\\n\" +\n                \"DayOfMonth: \" + iDayOfMonth + \"\\n\" +\n                \"DayOfWeek: \" + iDayOfWeek + \"\\n\" +\n                \"AdvanceDayOfWeek: \" + iAdvanceDayOfWeek + \"\\n\" +\n                \"MillisOfDay: \" + iMillisOfDay + \"\\n\" +\n                \"ZoneChar: \" + iZoneChar + \"\\n\";",
      "right" : "return\n                \"MonthOfYear: \" + iMonthOfYear + \"\\n\" +\n                \"DayOfMonth: \" + iDayOfMonth + \"\\n\" +\n                \"DayOfWeek: \" + iDayOfWeek + \"\\n\" +\n                \"AdvanceDayOfWeek: \" + iAdvanceDayOfWeek + \"\\n\" +\n                \"MillisOfDay: \" + iMillisOfDay + \"\\n\" +\n                \"ZoneChar: \" + iZoneChar + \"\\n\";",
      "info" : "ReturnStatement[22461-22800]:ReturnStatement[22500-22839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23153-23642]:Block[23192-23681]"
    }, {
      "left" : "iName = st.nextToken().intern();",
      "right" : "iName = st.nextToken().intern();",
      "info" : "ExpressionStatement[23167-23199]:ExpressionStatement[23206-23238]"
    }, {
      "left" : "iFromYear = parseYear(st.nextToken(), 0);",
      "right" : "iFromYear = parseYear(st.nextToken(), 0);",
      "info" : "ExpressionStatement[23212-23253]:ExpressionStatement[23251-23292]"
    }, {
      "left" : "iToYear = parseYear(st.nextToken(), iFromYear);",
      "right" : "iToYear = parseYear(st.nextToken(), iFromYear);",
      "info" : "ExpressionStatement[23266-23313]:ExpressionStatement[23305-23352]"
    }, {
      "left" : "if (iToYear < iFromYear)",
      "right" : "if (iToYear < iFromYear)",
      "info" : "IfStatement[23326-23420]:IfStatement[23365-23459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23351-23420]:Block[23390-23459]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[23369-23406]:ThrowStatement[23408-23445]"
    }, {
      "left" : "iType = parseOptional(st.nextToken());",
      "right" : "iType = parseOptional(st.nextToken());",
      "info" : "ExpressionStatement[23433-23471]:ExpressionStatement[23472-23510]"
    }, {
      "left" : "iDateTimeOfYear = new DateTimeOfYear(st);",
      "right" : "iDateTimeOfYear = new DateTimeOfYear(st);",
      "info" : "ExpressionStatement[23484-23525]:ExpressionStatement[23523-23564]"
    }, {
      "left" : "iSaveMillis = parseTime(st.nextToken());",
      "right" : "iSaveMillis = parseTime(st.nextToken());",
      "info" : "ExpressionStatement[23538-23578]:ExpressionStatement[23577-23617]"
    }, {
      "left" : "iLetterS = parseOptional(st.nextToken());",
      "right" : "iLetterS = parseOptional(st.nextToken());",
      "info" : "ExpressionStatement[23591-23632]:ExpressionStatement[23630-23671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23806-23980]:Block[23845-24019]"
    }, {
      "left" : "String nameKey = formatName(nameFormat);",
      "right" : "String nameKey = formatName(nameFormat);",
      "info" : "VariableDeclarationStatement[23820-23860]:VariableDeclarationStatement[23859-23899]"
    }, {
      "left" : "iDateTimeOfYear.addRecurring\n                (builder, nameKey, iSaveMillis, iFromYear, iToYear);",
      "right" : "iDateTimeOfYear.addRecurring\n                (builder, nameKey, iSaveMillis, iFromYear, iToYear);",
      "info" : "ExpressionStatement[23873-23970]:ExpressionStatement[23912-24009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24035-24867]:Block[24074-24906]"
    }, {
      "left" : "int index = nameFormat.indexOf('/');",
      "right" : "int index = nameFormat.indexOf('/');",
      "info" : "VariableDeclarationStatement[24049-24085]:VariableDeclarationStatement[24088-24124]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[24098-24394]:IfStatement[24137-24433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24113-24394]:Block[24152-24433]"
    }, {
      "left" : "if (iSaveMillis == 0)",
      "right" : "if (iSaveMillis == 0)",
      "info" : "IfStatement[24131-24380]:IfStatement[24170-24419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24153-24286]:Block[24192-24325]"
    }, {
      "left" : "return nameFormat.substring(0, index).intern();",
      "right" : "return nameFormat.substring(0, index).intern();",
      "info" : "ReturnStatement[24221-24268]:ReturnStatement[24260-24307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24292-24380]:Block[24331-24419]"
    }, {
      "left" : "return nameFormat.substring(index + 1).intern();",
      "right" : "return nameFormat.substring(index + 1).intern();",
      "info" : "ReturnStatement[24314-24362]:ReturnStatement[24353-24401]"
    }, {
      "left" : "index = nameFormat.indexOf(\"%s\");",
      "right" : "index = nameFormat.indexOf(\"%s\");",
      "info" : "ExpressionStatement[24407-24440]:ExpressionStatement[24446-24479]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[24453-24518]:IfStatement[24492-24557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24468-24518]:Block[24507-24557]"
    }, {
      "left" : "return nameFormat;",
      "right" : "return nameFormat;",
      "info" : "ReturnStatement[24486-24504]:ReturnStatement[24525-24543]"
    }, {
      "left" : "String left = nameFormat.substring(0, index);",
      "right" : "String left = nameFormat.substring(0, index);",
      "info" : "VariableDeclarationStatement[24531-24576]:VariableDeclarationStatement[24570-24615]"
    }, {
      "left" : "String right = nameFormat.substring(index + 2);",
      "right" : "String right = nameFormat.substring(index + 2);",
      "info" : "VariableDeclarationStatement[24589-24636]:VariableDeclarationStatement[24628-24675]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[24649-24661]:VariableDeclarationStatement[24688-24700]"
    }, {
      "left" : "if (iLetterS == null)",
      "right" : "if (iLetterS == null)",
      "info" : "IfStatement[24674-24823]:IfStatement[24713-24862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24696-24754]:Block[24735-24793]"
    }, {
      "left" : "name = left.concat(right);",
      "right" : "name = left.concat(right);",
      "info" : "ExpressionStatement[24714-24740]:ExpressionStatement[24753-24779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24760-24823]:Block[24799-24862]"
    }, {
      "left" : "name = left + iLetterS + right;",
      "right" : "name = left + iLetterS + right;",
      "info" : "ExpressionStatement[24778-24809]:ExpressionStatement[24817-24848]"
    }, {
      "left" : "return name.intern();",
      "right" : "return name.intern();",
      "info" : "ReturnStatement[24836-24857]:ReturnStatement[24875-24896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24902-25277]:Block[24941-25316]"
    }, {
      "left" : "return\n                \"[Rule]\\n\" + \n                \"Name: \" + iName + \"\\n\" +\n                \"FromYear: \" + iFromYear + \"\\n\" +\n                \"ToYear: \" + iToYear + \"\\n\" +\n                \"Type: \" + iType + \"\\n\" +\n                iDateTimeOfYear +\n                \"SaveMillis: \" + iSaveMillis + \"\\n\" +\n                \"LetterS: \" + iLetterS + \"\\n\";",
      "right" : "return\n                \"[Rule]\\n\" + \n                \"Name: \" + iName + \"\\n\" +\n                \"FromYear: \" + iFromYear + \"\\n\" +\n                \"ToYear: \" + iToYear + \"\\n\" +\n                \"Type: \" + iType + \"\\n\" +\n                iDateTimeOfYear +\n                \"SaveMillis: \" + iSaveMillis + \"\\n\" +\n                \"LetterS: \" + iLetterS + \"\\n\";",
      "info" : "ReturnStatement[24916-25267]:ReturnStatement[24955-25306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25383-25468]:Block[25422-25507]"
    }, {
      "left" : "iRules = new ArrayList<Rule>();",
      "right" : "iRules = new ArrayList<Rule>();",
      "info" : "ExpressionStatement[25397-25428]:ExpressionStatement[25436-25467]"
    }, {
      "left" : "iRules.add(rule);",
      "right" : "iRules.add(rule);",
      "info" : "ExpressionStatement[25441-25458]:ExpressionStatement[25480-25497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25502-25692]:Block[25541-25731]"
    }, {
      "left" : "if (!(rule.iName.equals(iRules.get(0).iName)))",
      "right" : "if (!(rule.iName.equals(iRules.get(0).iName)))",
      "info" : "IfStatement[25516-25652]:IfStatement[25555-25691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25563-25652]:Block[25602-25691]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Rule name mismatch\");",
      "right" : "throw new IllegalArgumentException(\"Rule name mismatch\");",
      "info" : "ThrowStatement[25581-25638]:ThrowStatement[25620-25677]"
    }, {
      "left" : "iRules.add(rule);",
      "right" : "iRules.add(rule);",
      "info" : "ExpressionStatement[25665-25682]:ExpressionStatement[25704-25721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25855-26029]:Block[25894-26068]"
    }, {
      "left" : "for (int i=0; i<iRules.size(); i++)",
      "right" : "for (int i=0; i<iRules.size(); i++)",
      "info" : "ForStatement[25869-26019]:ForStatement[25908-26058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25905-26019]:Block[25944-26058]"
    }, {
      "left" : "Rule rule = iRules.get(i);",
      "right" : "Rule rule = iRules.get(i);",
      "info" : "VariableDeclarationStatement[25923-25949]:VariableDeclarationStatement[25962-25988]"
    }, {
      "left" : "rule.addRecurring(builder, nameFormat);",
      "right" : "rule.addRecurring(builder, nameFormat);",
      "info" : "ExpressionStatement[25966-26005]:ExpressionStatement[26005-26044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26375-26424]:Block[26414-26463]"
    }, {
      "left" : "this(st.nextToken(), st);",
      "right" : "this(st.nextToken(), st);",
      "info" : "ConstructorInvocation[26389-26414]:ConstructorInvocation[26428-26453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26480-27081]:Block[26519-27120]"
    }, {
      "left" : "iName = name.intern();",
      "right" : "iName = name.intern();",
      "info" : "ExpressionStatement[26494-26516]:ExpressionStatement[26533-26555]"
    }, {
      "left" : "iOffsetMillis = parseTime(st.nextToken());",
      "right" : "iOffsetMillis = parseTime(st.nextToken());",
      "info" : "ExpressionStatement[26529-26571]:ExpressionStatement[26568-26610]"
    }, {
      "left" : "iRules = parseOptional(st.nextToken());",
      "right" : "iRules = parseOptional(st.nextToken());",
      "info" : "ExpressionStatement[26584-26623]:ExpressionStatement[26623-26662]"
    }, {
      "left" : "iFormat = st.nextToken().intern();",
      "right" : "iFormat = st.nextToken().intern();",
      "info" : "ExpressionStatement[26636-26670]:ExpressionStatement[26675-26709]"
    }, {
      "left" : "int year = Integer.MAX_VALUE;",
      "right" : "int year = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[26684-26713]:VariableDeclarationStatement[26723-26752]"
    }, {
      "left" : "DateTimeOfYear dtOfYear = getStartOfYear();",
      "right" : "DateTimeOfYear dtOfYear = getStartOfYear();",
      "info" : "VariableDeclarationStatement[26726-26769]:VariableDeclarationStatement[26765-26808]"
    }, {
      "left" : "if (st.hasMoreTokens())",
      "right" : "if (st.hasMoreTokens())",
      "info" : "IfStatement[26783-26994]:IfStatement[26822-27033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26807-26994]:Block[26846-27033]"
    }, {
      "left" : "year = Integer.parseInt(st.nextToken());",
      "right" : "year = Integer.parseInt(st.nextToken());",
      "info" : "ExpressionStatement[26825-26865]:ExpressionStatement[26864-26904]"
    }, {
      "left" : "if (st.hasMoreTokens())",
      "right" : "if (st.hasMoreTokens())",
      "info" : "IfStatement[26882-26980]:IfStatement[26921-27019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26906-26980]:Block[26945-27019]"
    }, {
      "left" : "dtOfYear = new DateTimeOfYear(st);",
      "right" : "dtOfYear = new DateTimeOfYear(st);",
      "info" : "ExpressionStatement[26928-26962]:ExpressionStatement[26967-27001]"
    }, {
      "left" : "iUntilYear = year;",
      "right" : "iUntilYear = year;",
      "info" : "ExpressionStatement[27008-27026]:ExpressionStatement[27047-27065]"
    }, {
      "left" : "iUntilDateTimeOfYear = dtOfYear;",
      "right" : "iUntilDateTimeOfYear = dtOfYear;",
      "info" : "ExpressionStatement[27039-27071]:ExpressionStatement[27078-27110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27122-27279]:Block[27161-27318]"
    }, {
      "left" : "if (iNext != null)",
      "right" : "if (iNext != null)",
      "info" : "IfStatement[27136-27269]:IfStatement[27175-27308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27155-27203]:Block[27194-27242]"
    }, {
      "left" : "iNext.chain(st);",
      "right" : "iNext.chain(st);",
      "info" : "ExpressionStatement[27173-27189]:ExpressionStatement[27212-27228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27209-27269]:Block[27248-27308]"
    }, {
      "left" : "iNext = new Zone(iName, st);",
      "right" : "iNext = new Zone(iName, st);",
      "info" : "ExpressionStatement[27227-27255]:ExpressionStatement[27266-27294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27699-27761]:Block[27738-27800]"
    }, {
      "left" : "addToBuilder(this, builder, ruleSets);",
      "right" : "addToBuilder(this, builder, ruleSets);",
      "info" : "ExpressionStatement[27713-27751]:ExpressionStatement[27752-27790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27965-29101]:Block[28004-29140]"
    }, {
      "left" : "for (; zone != null; zone = zone.iNext)",
      "right" : "for (; zone != null; zone = zone.iNext)",
      "info" : "ForStatement[27979-29091]:ForStatement[28018-29130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28019-29091]:Block[28058-29130]"
    }, {
      "left" : "builder.setStandardOffset(zone.iOffsetMillis);",
      "right" : "builder.setStandardOffset(zone.iOffsetMillis);",
      "info" : "ExpressionStatement[28037-28083]:ExpressionStatement[28076-28122]"
    }, {
      "left" : "if (zone.iRules == null)",
      "right" : "if (zone.iRules == null)",
      "info" : "IfStatement[28101-28890]:IfStatement[28140-28929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28126-28207]:Block[28165-28246]"
    }, {
      "left" : "builder.setFixedSavings(zone.iFormat, 0);",
      "right" : "builder.setFixedSavings(zone.iFormat, 0);",
      "info" : "ExpressionStatement[28148-28189]:ExpressionStatement[28187-28228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28213-28890]:Block[28252-28929]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28235-28872]:TryStatement[28274-28911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28239-28480]:Block[28278-28519]"
    }, {
      "left" : "int saveMillis = parseTime(zone.iRules);",
      "right" : "int saveMillis = parseTime(zone.iRules);",
      "info" : "VariableDeclarationStatement[28343-28383]:VariableDeclarationStatement[28382-28422]"
    }, {
      "left" : "builder.setFixedSavings(zone.iFormat, saveMillis);",
      "right" : "builder.setFixedSavings(zone.iFormat, saveMillis);",
      "info" : "ExpressionStatement[28408-28458]:ExpressionStatement[28447-28497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28521-28872]:Block[28560-28911]"
    }, {
      "left" : "RuleSet rs = ruleSets.get(zone.iRules);",
      "right" : "RuleSet rs = ruleSets.get(zone.iRules);",
      "info" : "VariableDeclarationStatement[28547-28586]:VariableDeclarationStatement[28586-28625]"
    }, {
      "left" : "if (rs == null)",
      "right" : "if (rs == null)",
      "info" : "IfStatement[28611-28786]:IfStatement[28650-28825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28627-28786]:Block[28666-28825]"
    }, {
      "left" : "throw new IllegalArgumentException\n                                (\"Rules not found: \" + zone.iRules);",
      "right" : "throw new IllegalArgumentException\n                                (\"Rules not found: \" + zone.iRules);",
      "info" : "ThrowStatement[28657-28760]:ThrowStatement[28696-28799]"
    }, {
      "left" : "rs.addRecurring(builder, zone.iFormat);",
      "right" : "rs.addRecurring(builder, zone.iFormat);",
      "info" : "ExpressionStatement[28811-28850]:ExpressionStatement[28850-28889]"
    }, {
      "left" : "if (zone.iUntilYear == Integer.MAX_VALUE)",
      "right" : "if (zone.iUntilYear == Integer.MAX_VALUE)",
      "info" : "IfStatement[28908-28996]:IfStatement[28947-29035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28950-28996]:Block[28989-29035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28972-28978]:BreakStatement[29011-29017]"
    }, {
      "left" : "zone.iUntilDateTimeOfYear.addCutover(builder, zone.iUntilYear);",
      "right" : "zone.iUntilDateTimeOfYear.addCutover(builder, zone.iUntilYear);",
      "info" : "ExpressionStatement[29014-29077]:ExpressionStatement[29053-29116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29136-29612]:Block[29175-29651]"
    }, {
      "left" : "String str =\n                \"[Zone]\\n\" + \n                \"Name: \" + iName + \"\\n\" +\n                \"OffsetMillis: \" + iOffsetMillis + \"\\n\" +\n                \"Rules: \" + iRules + \"\\n\" +\n                \"Format: \" + iFormat + \"\\n\" +\n                \"UntilYear: \" + iUntilYear + \"\\n\" +\n                iUntilDateTimeOfYear;",
      "right" : "String str =\n                \"[Zone]\\n\" + \n                \"Name: \" + iName + \"\\n\" +\n                \"OffsetMillis: \" + iOffsetMillis + \"\\n\" +\n                \"Rules: \" + iRules + \"\\n\" +\n                \"Format: \" + iFormat + \"\\n\" +\n                \"UntilYear: \" + iUntilYear + \"\\n\" +\n                iUntilDateTimeOfYear;",
      "info" : "VariableDeclarationStatement[29150-29472]:VariableDeclarationStatement[29189-29511]"
    }, {
      "left" : "if (iNext == null)",
      "right" : "if (iNext == null)",
      "info" : "IfStatement[29486-29548]:IfStatement[29525-29587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29505-29548]:Block[29544-29587]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[29523-29534]:ReturnStatement[29562-29573]"
    }, {
      "left" : "return str + \"...\\n\" + iNext.toString();",
      "right" : "return str + \"...\\n\" + iNext.toString();",
      "info" : "ReturnStatement[29562-29602]:ReturnStatement[29601-29641]"
    } ]
  },
  "interFileMappings" : { }
}