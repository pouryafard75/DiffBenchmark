{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ParseSettings defaultSettings()",
      "right" : "ParseSettings defaultSettings()",
      "info" : "MethodDeclaration[508-590]:MethodDeclaration[508-590]"
    }, {
      "left" : "Document parse(Reader input, String baseUri)",
      "right" : "Document parse(Reader input, String baseUri)",
      "info" : "MethodDeclaration[596-743]:MethodDeclaration[596-743]"
    }, {
      "left" : "Document parse(String input, String baseUri)",
      "right" : "Document parse(String input, String baseUri)",
      "info" : "MethodDeclaration[749-914]:MethodDeclaration[749-914]"
    }, {
      "left" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[920-1293]:MethodDeclaration[920-1293]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[1299-2142]:MethodDeclaration[1299-2142]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[2148-2234]:MethodDeclaration[2148-2234]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[2240-2824]:MethodDeclaration[2240-2824]"
    }, {
      "left" : "void insert(Token.Character token)",
      "right" : "void insert(Token.Character token)",
      "info" : "MethodDeclaration[3726-3893]:MethodDeclaration[3854-4021]"
    }, {
      "left" : "void insert(Token.Doctype d)",
      "right" : "void insert(Token.Doctype d)",
      "info" : "MethodDeclaration[3899-4159]:MethodDeclaration[4027-4287]"
    }, {
      "left" : "private void popStackToClose(Token.EndTag endTag)",
      "right" : "private void popStackToClose(Token.EndTag endTag)",
      "info" : "MethodDeclaration[4165-5025]:MethodDeclaration[4293-5153]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[5031-5287]:MethodDeclaration[5159-5415]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[540-590]:Block[540-590]"
    }, {
      "left" : "return ParseSettings.preserveCase;",
      "right" : "return ParseSettings.preserveCase;",
      "info" : "ReturnStatement[550-584]:ReturnStatement[550-584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[641-743]:Block[641-743]"
    }, {
      "left" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[651-737]:ReturnStatement[651-737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[794-914]:Block[794-914]"
    }, {
      "left" : "return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[804-908]:ReturnStatement[804-908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1042-1293]:Block[1042-1293]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors, settings);",
      "right" : "super.initialiseParse(input, baseUri, errors, settings);",
      "info" : "ExpressionStatement[1052-1108]:ExpressionStatement[1052-1108]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[1117-1132]:ExpressionStatement[1117-1132]"
    }, {
      "left" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "right" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "info" : "ExpressionStatement[1223-1287]:ExpressionStatement[1223-1287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1352-2142]:Block[1352-2142]"
    }, {
      "left" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "right" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "info" : "SwitchStatement[1426-2115]:SwitchStatement[1426-2115]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[1460-1474]:SwitchCase[1460-1474]"
    }, {
      "left" : "insert(token.asStartTag());",
      "right" : "insert(token.asStartTag());",
      "info" : "ExpressionStatement[1491-1518]:ExpressionStatement[1491-1518]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1535-1541]:BreakStatement[1535-1541]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[1554-1566]:SwitchCase[1554-1566]"
    }, {
      "left" : "popStackToClose(token.asEndTag());",
      "right" : "popStackToClose(token.asEndTag());",
      "info" : "ExpressionStatement[1583-1617]:ExpressionStatement[1583-1617]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1634-1640]:BreakStatement[1634-1640]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[1653-1666]:SwitchCase[1653-1666]"
    }, {
      "left" : "insert(token.asComment());",
      "right" : "insert(token.asComment());",
      "info" : "ExpressionStatement[1683-1709]:ExpressionStatement[1683-1709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1726-1732]:BreakStatement[1726-1732]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[1745-1760]:SwitchCase[1745-1760]"
    }, {
      "left" : "insert(token.asCharacter());",
      "right" : "insert(token.asCharacter());",
      "info" : "ExpressionStatement[1777-1805]:ExpressionStatement[1777-1805]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1822-1828]:BreakStatement[1822-1828]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[1841-1854]:SwitchCase[1841-1854]"
    }, {
      "left" : "insert(token.asDoctype());",
      "right" : "insert(token.asDoctype());",
      "info" : "ExpressionStatement[1871-1897]:ExpressionStatement[1871-1897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1914-1920]:BreakStatement[1914-1920]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[1933-1942]:SwitchCase[1933-1942]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2007-2013]:BreakStatement[2007-2013]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2026-2034]:SwitchCase[2026-2034]"
    }, {
      "left" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "right" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "info" : "ExpressionStatement[2051-2105]:ExpressionStatement[2051-2105]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2124-2136]:ReturnStatement[2124-2136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2183-2234]:Block[2183-2234]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[2193-2228]:ExpressionStatement[2193-2228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2280-2824]:Block[2280-2824]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[2290-2339]:VariableDeclarationStatement[2290-2339]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "right" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "info" : "VariableDeclarationStatement[2449-2539]:VariableDeclarationStatement[2449-2539]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[2548-2563]:ExpressionStatement[2548-2563]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[2572-2799]:IfStatement[2572-2799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2602-2755]:Block[2602-2755]"
    }, {
      "left" : "if (!tag.isKnownTag())",
      "right" : "if (!tag.isKnownTag())",
      "info" : "IfStatement[2616-2745]:IfStatement[2616-2745]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[2724-2745]:ExpressionStatement[2724-2745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2761-2799]:Block[2761-2799]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[2775-2789]:ExpressionStatement[2775-2789]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[2808-2818]:ReturnStatement[2808-2818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3761-3893]:Block[3889-4021]"
    }, {
      "left" : "final String data = token.getData();",
      "right" : "final String data = token.getData();",
      "info" : "VariableDeclarationStatement[3771-3807]:VariableDeclarationStatement[3899-3935]"
    }, {
      "left" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
      "right" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
      "info" : "ExpressionStatement[3816-3887]:ExpressionStatement[3944-4015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3928-4159]:Block[4056-4287]"
    }, {
      "left" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "right" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "info" : "VariableDeclarationStatement[3938-4068]:VariableDeclarationStatement[4066-4196]"
    }, {
      "left" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
      "right" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
      "info" : "ExpressionStatement[4077-4120]:ExpressionStatement[4205-4248]"
    }, {
      "left" : "insertNode(doctypeNode);",
      "right" : "insertNode(doctypeNode);",
      "info" : "ExpressionStatement[4129-4153]:ExpressionStatement[4257-4281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4411-5025]:Block[4539-5153]"
    }, {
      "left" : "String elName = settings.normalizeTag(endTag.tagName);",
      "right" : "String elName = settings.normalizeTag(endTag.tagName);",
      "info" : "VariableDeclarationStatement[4421-4475]:VariableDeclarationStatement[4549-4603]"
    }, {
      "left" : "Element firstFound = null;",
      "right" : "Element firstFound = null;",
      "info" : "VariableDeclarationStatement[4484-4510]:VariableDeclarationStatement[4612-4638]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4520-4745]:ForStatement[4648-4873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4569-4745]:Block[4697-4873]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4583-4613]:VariableDeclarationStatement[4711-4741]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[4626-4735]:IfStatement[4754-4863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4662-4735]:Block[4790-4863]"
    }, {
      "left" : "firstFound = next;",
      "right" : "firstFound = next;",
      "info" : "ExpressionStatement[4680-4698]:ExpressionStatement[4808-4826]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4715-4721]:BreakStatement[4843-4849]"
    }, {
      "left" : "if (firstFound == null)",
      "right" : "if (firstFound == null)",
      "info" : "IfStatement[4754-4797]:IfStatement[4882-4925]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4790-4797]:ReturnStatement[4918-4925]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4826-5019]:ForStatement[4954-5147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4875-5019]:Block[5003-5147]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4889-4919]:VariableDeclarationStatement[5017-5047]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[4932-4950]:ExpressionStatement[5060-5078]"
    }, {
      "left" : "if (next == firstFound)",
      "right" : "if (next == firstFound)",
      "info" : "IfStatement[4963-5009]:IfStatement[5091-5137]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5003-5009]:BreakStatement[5131-5137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5141-5287]:Block[5269-5415]"
    }, {
      "left" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "right" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "info" : "ExpressionStatement[5151-5227]:ExpressionStatement[5279-5355]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[5236-5248]:ExpressionStatement[5364-5376]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[5257-5281]:ReturnStatement[5385-5409]"
    } ]
  },
  "interFileMappings" : { }
}