{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractCompiler compiler;",
      "right" : "AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1197-1223]:FieldDeclaration[1197-1223]"
    }, {
      "left" : "MinimizeExitPoints(AbstractCompiler compiler)",
      "right" : "MinimizeExitPoints(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[1227-1308]:MethodDeclaration[1227-1308]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[1312-1424]:MethodDeclaration[1312-1424]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[1428-2435]:MethodDeclaration[1428-2435]"
    }, {
      "left" : "private void tryMinimizeIfBlockExits(Node srcBlock, Node destBlock,\n      Node ifNode, int exitType, String labelName)",
      "right" : "private void tryMinimizeIfBlockExits(Node srcBlock, Node destBlock,\n      Node ifNode, int exitType, String labelName)",
      "info" : "MethodDeclaration[6459-8627]:MethodDeclaration[6308-8476]"
    }, {
      "left" : "private static boolean matchingExitNode(Node n, int type, String labelName)",
      "right" : "private static boolean matchingExitNode(Node n, int type, String labelName)",
      "info" : "MethodDeclaration[8631-9578]:MethodDeclaration[8480-9427]"
    }, {
      "left" : "private static void moveAllFollowing(\n      Node start, Node srcParent, Node destParent)",
      "right" : "private static void moveAllFollowing(\n      Node start, Node srcParent, Node destParent)",
      "info" : "MethodDeclaration[9582-10262]:MethodDeclaration[9431-10111]"
    } ],
    "mappings" : [
 {
      "left" : "MinimizeExitPoints",
      "right" : "MinimizeExitPoints",
      "info" : "SimpleName[1227-1245]:SimpleName[1227-1245]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1246-1271]:SingleVariableDeclaration[1246-1271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1273-1308]:Block[1273-1308]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[1279-1304]:ExpressionStatement[1279-1304]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1312-1321]:MarkerAnnotation[1312-1321]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1324-1330]:Modifier[1324-1330]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1331-1335]:PrimitiveType[1331-1335]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1336-1343]:SimpleName[1336-1343]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[1344-1356]:SingleVariableDeclaration[1344-1356]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[1358-1367]:SingleVariableDeclaration[1358-1367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1369-1424]:Block[1369-1424]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[1375-1420]:ExpressionStatement[1375-1420]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1428-1437]:MarkerAnnotation[1428-1437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1440-1446]:Modifier[1440-1446]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1447-1451]:PrimitiveType[1447-1451]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[1452-1457]:SimpleName[1452-1457]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[1458-1473]:SingleVariableDeclaration[1458-1473]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[1475-1481]:SingleVariableDeclaration[1475-1481]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[1483-1494]:SingleVariableDeclaration[1483-1494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1496-2435]:Block[1496-2435]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.LABEL:\n        tryMinimizeExits(\n            n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n        break;\n\n      case Token.FOR:\n      case Token.WHILE:\n        tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n        break;\n\n      case Token.DO:\n        tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n\n        Node cond = NodeUtil.getConditionExpression(n);\n        if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE) {\n          // Normally, we wouldn't be able to optimize BREAKs inside a loop\n          // but as we know the condition will always false, we can treat them\n          // as we would a CONTINUE.\n          tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n        }\n        break;\n\n      case Token.FUNCTION:\n        tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.LABEL:\n        tryMinimizeExits(\n            n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n        break;\n\n      case Token.FOR:\n      case Token.WHILE:\n        tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n        break;\n\n      case Token.DO:\n        tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n\n        Node cond = NodeUtil.getConditionExpression(n);\n        if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE) {\n          // Normally, we wouldn't be able to optimize BREAKs inside a loop\n          // but as we know the condition will always false, we can treat them\n          // as we would a CONTINUE.\n          tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n        }\n        break;\n\n      case Token.FUNCTION:\n        tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n        break;\n    }",
      "info" : "SwitchStatement[1502-2431]:SwitchStatement[1502-2431]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[1531-1548]:SwitchCase[1531-1548]"
    }, {
      "left" : "tryMinimizeExits(\n            n.getLastChild(), Token.BREAK, n.getFirstChild().getString());",
      "right" : "tryMinimizeExits(\n            n.getLastChild(), Token.BREAK, n.getFirstChild().getString());",
      "info" : "ExpressionStatement[1557-1649]:ExpressionStatement[1557-1649]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1658-1664]:BreakStatement[1658-1664]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[1672-1687]:SwitchCase[1672-1687]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[1694-1711]:SwitchCase[1694-1711]"
    }, {
      "left" : "tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);",
      "right" : "tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);",
      "info" : "ExpressionStatement[1720-1789]:ExpressionStatement[1720-1789]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1798-1804]:BreakStatement[1798-1804]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[1812-1826]:SwitchCase[1812-1826]"
    }, {
      "left" : "tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);",
      "right" : "tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);",
      "info" : "ExpressionStatement[1835-1904]:ExpressionStatement[1835-1904]"
    }, {
      "left" : "Node cond = NodeUtil.getConditionExpression(n);",
      "right" : "Node cond = NodeUtil.getConditionExpression(n);",
      "info" : "VariableDeclarationStatement[1914-1961]:VariableDeclarationStatement[1914-1961]"
    }, {
      "left" : "if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE)",
      "right" : "if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE)",
      "info" : "IfStatement[1970-2303]:IfStatement[1970-2303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2034-2303]:Block[2034-2303]"
    }, {
      "left" : "tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);",
      "right" : "tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);",
      "info" : "ExpressionStatement[2238-2293]:ExpressionStatement[2238-2293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2312-2318]:BreakStatement[2312-2318]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[2326-2346]:SwitchCase[2326-2346]"
    }, {
      "left" : "tryMinimizeExits(n.getLastChild(), Token.RETURN, null);",
      "right" : "tryMinimizeExits(n.getLastChild(), Token.RETURN, null);",
      "info" : "ExpressionStatement[2355-2410]:ExpressionStatement[2355-2410]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2419-2425]:BreakStatement[2419-2425]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7052-7059]:Modifier[6901-6908]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7060-7064]:PrimitiveType[6909-6913]"
    }, {
      "left" : "tryMinimizeIfBlockExits",
      "right" : "tryMinimizeIfBlockExits",
      "info" : "SimpleName[7065-7088]:SimpleName[6914-6937]"
    }, {
      "left" : "Node srcBlock",
      "right" : "Node srcBlock",
      "info" : "SingleVariableDeclaration[7089-7102]:SingleVariableDeclaration[6938-6951]"
    }, {
      "left" : "Node destBlock",
      "right" : "Node destBlock",
      "info" : "SingleVariableDeclaration[7104-7118]:SingleVariableDeclaration[6953-6967]"
    }, {
      "left" : "Node ifNode",
      "right" : "Node ifNode",
      "info" : "SingleVariableDeclaration[7126-7137]:SingleVariableDeclaration[6975-6986]"
    }, {
      "left" : "int exitType",
      "right" : "int exitType",
      "info" : "SingleVariableDeclaration[7139-7151]:SingleVariableDeclaration[6988-7000]"
    }, {
      "left" : "String labelName",
      "right" : "String labelName",
      "info" : "SingleVariableDeclaration[7153-7169]:SingleVariableDeclaration[7002-7018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7171-8627]:Block[7020-8476]"
    }, {
      "left" : "Node exitNodeParent = null;",
      "right" : "Node exitNodeParent = null;",
      "info" : "VariableDeclarationStatement[7177-7204]:VariableDeclarationStatement[7026-7053]"
    }, {
      "left" : "Node exitNode = null;",
      "right" : "Node exitNode = null;",
      "info" : "VariableDeclarationStatement[7209-7230]:VariableDeclarationStatement[7058-7079]"
    }, {
      "left" : "if (srcBlock.isBlock())",
      "right" : "if (srcBlock.isBlock())",
      "info" : "IfStatement[7272-7576]:IfStatement[7121-7425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7296-7445]:Block[7145-7294]"
    }, {
      "left" : "if (!srcBlock.hasChildren())",
      "right" : "if (!srcBlock.hasChildren())",
      "info" : "IfStatement[7304-7358]:IfStatement[7153-7207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7333-7358]:Block[7182-7207]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7343-7350]:ReturnStatement[7192-7199]"
    }, {
      "left" : "exitNodeParent = srcBlock;",
      "right" : "exitNodeParent = srcBlock;",
      "info" : "ExpressionStatement[7365-7391]:ExpressionStatement[7214-7240]"
    }, {
      "left" : "exitNode = exitNodeParent.getLastChild();",
      "right" : "exitNode = exitNodeParent.getLastChild();",
      "info" : "ExpressionStatement[7398-7439]:ExpressionStatement[7247-7288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7451-7576]:Block[7300-7425]"
    }, {
      "left" : "exitNodeParent = ifNode;",
      "right" : "exitNodeParent = ifNode;",
      "info" : "ExpressionStatement[7519-7543]:ExpressionStatement[7368-7392]"
    }, {
      "left" : "exitNode = srcBlock;",
      "right" : "exitNode = srcBlock;",
      "info" : "ExpressionStatement[7550-7570]:ExpressionStatement[7399-7419]"
    }, {
      "left" : "if (!matchingExitNode(exitNode, exitType, labelName))",
      "right" : "if (!matchingExitNode(exitNode, exitType, labelName))",
      "info" : "IfStatement[7611-7686]:IfStatement[7460-7535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7665-7686]:Block[7514-7535]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7673-7680]:ReturnStatement[7522-7529]"
    }, {
      "left" : "if (ifNode.getNext() != null)",
      "right" : "if (ifNode.getNext() != null)",
      "info" : "IfStatement[7743-8623]:IfStatement[7592-8472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7773-8623]:Block[7622-8472]"
    }, {
      "left" : "Node newDestBlock = IR.block().srcref(ifNode);",
      "right" : "Node newDestBlock = IR.block().srcref(ifNode);",
      "info" : "VariableDeclarationStatement[7872-7918]:VariableDeclarationStatement[7721-7767]"
    }, {
      "left" : "if (destBlock == null)",
      "right" : "if (destBlock == null)",
      "info" : "IfStatement[7925-8463]:IfStatement[7774-8312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7948-8055]:Block[7797-7904]"
    }, {
      "left" : "ifNode.addChildToBack(newDestBlock);",
      "right" : "ifNode.addChildToBack(newDestBlock);",
      "info" : "ExpressionStatement[8011-8047]:ExpressionStatement[7860-7896]"
    }, {
      "left" : "if (destBlock.isEmpty())",
      "right" : "if (destBlock.isEmpty())",
      "info" : "IfStatement[8061-8463]:IfStatement[7910-8312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8086-8179]:Block[7935-8028]"
    }, {
      "left" : "ifNode.replaceChild(destBlock, newDestBlock);",
      "right" : "ifNode.replaceChild(destBlock, newDestBlock);",
      "info" : "ExpressionStatement[8126-8171]:ExpressionStatement[7975-8020]"
    }, {
      "left" : "if (destBlock.isBlock())",
      "right" : "if (destBlock.isBlock())",
      "info" : "IfStatement[8185-8463]:IfStatement[8034-8312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8210-8290]:Block[8059-8139]"
    }, {
      "left" : "newDestBlock = destBlock;",
      "right" : "newDestBlock = destBlock;",
      "info" : "ExpressionStatement[8257-8282]:ExpressionStatement[8106-8131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8296-8463]:Block[8145-8312]"
    }, {
      "left" : "ifNode.replaceChild(destBlock, newDestBlock);",
      "right" : "ifNode.replaceChild(destBlock, newDestBlock);",
      "info" : "ExpressionStatement[8362-8407]:ExpressionStatement[8211-8256]"
    }, {
      "left" : "newDestBlock.addChildToBack(destBlock);",
      "right" : "newDestBlock.addChildToBack(destBlock);",
      "info" : "ExpressionStatement[8416-8455]:ExpressionStatement[8265-8304]"
    }, {
      "left" : "moveAllFollowing(ifNode, ifNode.getParent(), newDestBlock);",
      "right" : "moveAllFollowing(ifNode, ifNode.getParent(), newDestBlock);",
      "info" : "ExpressionStatement[8523-8582]:ExpressionStatement[8372-8431]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[8589-8617]:ExpressionStatement[8438-8466]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9115-9122]:Modifier[8964-8971]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9123-9129]:Modifier[8972-8978]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9130-9137]:PrimitiveType[8979-8986]"
    }, {
      "left" : "matchingExitNode",
      "right" : "matchingExitNode",
      "info" : "SimpleName[9138-9154]:SimpleName[8987-9003]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9155-9161]:SingleVariableDeclaration[9004-9010]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[9163-9171]:SingleVariableDeclaration[9012-9020]"
    }, {
      "left" : "String labelName",
      "right" : "String labelName",
      "info" : "SingleVariableDeclaration[9173-9189]:SingleVariableDeclaration[9022-9038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9191-9578]:Block[9040-9427]"
    }, {
      "left" : "if (n.getType() == type)",
      "right" : "if (n.getType() == type)",
      "info" : "IfStatement[9197-9556]:IfStatement[9046-9405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9222-9556]:Block[9071-9405]"
    }, {
      "left" : "if (type == Token.RETURN)",
      "right" : "if (type == Token.RETURN)",
      "info" : "IfStatement[9230-9550]:IfStatement[9079-9399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9256-9343]:Block[9105-9192]"
    }, {
      "left" : "return !n.hasChildren();",
      "right" : "return !n.hasChildren();",
      "info" : "ReturnStatement[9311-9335]:ReturnStatement[9160-9184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9349-9550]:Block[9198-9399]"
    }, {
      "left" : "if (labelName == null)",
      "right" : "if (labelName == null)",
      "info" : "IfStatement[9359-9542]:IfStatement[9208-9391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9382-9428]:Block[9231-9277]"
    }, {
      "left" : "return !n.hasChildren();",
      "right" : "return !n.hasChildren();",
      "info" : "ReturnStatement[9394-9418]:ReturnStatement[9243-9267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9434-9542]:Block[9283-9391]"
    }, {
      "left" : "return n.hasChildren()\n            && labelName.equals(n.getFirstChild().getString());",
      "right" : "return n.hasChildren()\n            && labelName.equals(n.getFirstChild().getString());",
      "info" : "ReturnStatement[9446-9532]:ReturnStatement[9295-9381]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9561-9574]:ReturnStatement[9410-9423]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9853-9860]:Modifier[9702-9709]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9861-9867]:Modifier[9710-9716]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9868-9872]:PrimitiveType[9717-9721]"
    }, {
      "left" : "moveAllFollowing",
      "right" : "moveAllFollowing",
      "info" : "SimpleName[9873-9889]:SimpleName[9722-9738]"
    }, {
      "left" : "Node start",
      "right" : "Node start",
      "info" : "SingleVariableDeclaration[9897-9907]:SingleVariableDeclaration[9746-9756]"
    }, {
      "left" : "Node srcParent",
      "right" : "Node srcParent",
      "info" : "SingleVariableDeclaration[9909-9923]:SingleVariableDeclaration[9758-9772]"
    }, {
      "left" : "Node destParent",
      "right" : "Node destParent",
      "info" : "SingleVariableDeclaration[9925-9940]:SingleVariableDeclaration[9774-9789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9942-10262]:Block[9791-10111]"
    }, {
      "left" : "for (Node n = start.getNext(); n != null; n = start.getNext())",
      "right" : "for (Node n = start.getNext(); n != null; n = start.getNext())",
      "info" : "ForStatement[9948-10258]:ForStatement[9797-10107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10011-10258]:Block[9860-10107]"
    }, {
      "left" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);",
      "right" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);",
      "info" : "VariableDeclarationStatement[10019-10085]:VariableDeclarationStatement[9868-9934]"
    }, {
      "left" : "srcParent.removeChild(n);",
      "right" : "srcParent.removeChild(n);",
      "info" : "ExpressionStatement[10092-10117]:ExpressionStatement[9941-9966]"
    }, {
      "left" : "if (isFunctionDeclaration)",
      "right" : "if (isFunctionDeclaration)",
      "info" : "IfStatement[10124-10252]:IfStatement[9973-10101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10151-10199]:Block[10000-10048]"
    }, {
      "left" : "destParent.addChildToFront(n);",
      "right" : "destParent.addChildToFront(n);",
      "info" : "ExpressionStatement[10161-10191]:ExpressionStatement[10010-10040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10205-10252]:Block[10054-10101]"
    }, {
      "left" : "destParent.addChildToBack(n);",
      "right" : "destParent.addChildToBack(n);",
      "info" : "ExpressionStatement[10215-10244]:ExpressionStatement[10064-10093]"
    } ]
  },
  "interFileMappings" : { }
}