{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
      "right" : "static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
      "info" : "FieldDeclaration[1305-1461]:FieldDeclaration[1305-1461]"
    }, {
      "left" : "static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with a non-string argument\");",
      "right" : "static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with a non-string argument\");",
      "info" : "FieldDeclaration[1465-1634]:FieldDeclaration[1465-1634]"
    }, {
      "left" : "static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
      "right" : "static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
      "info" : "FieldDeclaration[1638-1812]:FieldDeclaration[1638-1812]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
      "right" : "static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
      "info" : "FieldDeclaration[1816-1985]:FieldDeclaration[1816-1985]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
      "right" : "static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
      "info" : "FieldDeclaration[1989-2172]:FieldDeclaration[1989-2172]"
    }, {
      "left" : "static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
      "right" : "static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
      "info" : "FieldDeclaration[2176-2336]:FieldDeclaration[2176-2336]"
    }, {
      "left" : "static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
      "right" : "static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
      "info" : "FieldDeclaration[2340-2496]:FieldDeclaration[2340-2496]"
    }, {
      "left" : "static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS property name\");",
      "right" : "static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS property name\");",
      "info" : "FieldDeclaration[2500-2658]:FieldDeclaration[2500-2658]"
    }, {
      "left" : "static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
      "right" : "static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
      "info" : "FieldDeclaration[2662-2861]:FieldDeclaration[2662-2861]"
    }, {
      "left" : "static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
      "right" : "static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
      "info" : "FieldDeclaration[2865-3116]:FieldDeclaration[2865-3116]"
    }, {
      "left" : "static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
      "right" : "static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
      "info" : "FieldDeclaration[3120-3260]:FieldDeclaration[3120-3260]"
    }, {
      "left" : "static final String GOOG = \"goog\";",
      "right" : "static final String GOOG = \"goog\";",
      "info" : "FieldDeclaration[3264-3334]:FieldDeclaration[3264-3334]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3338-3378]:FieldDeclaration[3338-3378]"
    }, {
      "left" : "private final JSModuleGraph moduleGraph;",
      "right" : "private final JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[3381-3421]:FieldDeclaration[3381-3421]"
    }, {
      "left" : "private final Map<String, ProvidedName> providedNames =\n      Maps.newTreeMap();",
      "right" : "private final Map<String, ProvidedName> providedNames =\n      Maps.newTreeMap();",
      "info" : "FieldDeclaration[3492-3572]:FieldDeclaration[3492-3572]"
    }, {
      "left" : "private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
      "right" : "private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
      "info" : "FieldDeclaration[3576-3666]:FieldDeclaration[3576-3666]"
    }, {
      "left" : "private final Set<String> exportedVariables = Sets.newHashSet();",
      "right" : "private final Set<String> exportedVariables = Sets.newHashSet();",
      "info" : "FieldDeclaration[3669-3733]:FieldDeclaration[3669-3733]"
    }, {
      "left" : "private final CheckLevel requiresLevel;",
      "right" : "private final CheckLevel requiresLevel;",
      "info" : "FieldDeclaration[3736-3775]:FieldDeclaration[3736-3775]"
    }, {
      "left" : "private final boolean rewriteNewDateGoogNow;",
      "right" : "private final boolean rewriteNewDateGoogNow;",
      "info" : "FieldDeclaration[3778-3822]:FieldDeclaration[3778-3822]"
    }, {
      "left" : "ProcessClosurePrimitives(AbstractCompiler compiler,\n                           CheckLevel requiresLevel,\n                           boolean rewriteNewDateGoogNow)",
      "right" : "ProcessClosurePrimitives(AbstractCompiler compiler,\n                           CheckLevel requiresLevel,\n                           boolean rewriteNewDateGoogNow)",
      "info" : "MethodDeclaration[3826-4345]:MethodDeclaration[3826-4345]"
    }, {
      "left" : "Set<String> getExportedVariableNames()",
      "right" : "Set<String> getExportedVariableNames()",
      "info" : "MethodDeclaration[4349-4423]:MethodDeclaration[4349-4423]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4427-5195]:MethodDeclaration[4427-5195]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[5199-8673]:MethodDeclaration[5199-8673]"
    }, {
      "left" : "private void processRequireCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void processRequireCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8677-10216]:MethodDeclaration[8677-10216]"
    }, {
      "left" : "private void processProvideCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void processProvideCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[10220-11021]:MethodDeclaration[10220-11021]"
    }, {
      "left" : "private void handleCandidateProvideDefinition(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "private void handleCandidateProvideDefinition(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[11025-11841]:MethodDeclaration[11025-11841]"
    }, {
      "left" : "private void processBaseClassCall(NodeTraversal t, Node n)",
      "right" : "private void processBaseClassCall(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[11845-15490]:MethodDeclaration[11845-15490]"
    }, {
      "left" : "private Node getEnclosingDeclNameNode(NodeTraversal t)",
      "right" : "private Node getEnclosingDeclNameNode(NodeTraversal t)",
      "info" : "MethodDeclaration[15494-16314]:MethodDeclaration[15494-16314]"
    }, {
      "left" : "private void reportBadBaseClassUse(\n      NodeTraversal t, Node n, String extraMessage)",
      "right" : "private void reportBadBaseClassUse(\n      NodeTraversal t, Node n, String extraMessage)",
      "info" : "MethodDeclaration[16318-16539]:MethodDeclaration[16318-16539]"
    }, {
      "left" : "private void processProvideFromPreviousPass(\n      NodeTraversal t, String name, Node parent)",
      "right" : "private void processProvideFromPreviousPass(\n      NodeTraversal t, String name, Node parent)",
      "info" : "MethodDeclaration[16543-17735]:MethodDeclaration[16543-17735]"
    }, {
      "left" : "private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent)",
      "right" : "private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[17739-19633]:MethodDeclaration[17739-19633]"
    }, {
      "left" : "public String get(String value)",
      "right" : "public String get(String value)",
      "info" : "MethodDeclaration[19270-19467]:MethodDeclaration[19270-19467]"
    }, {
      "left" : "private void trySimplifyNewDate(NodeTraversal t, Node n, Node parent)",
      "right" : "private void trySimplifyNewDate(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19637-20479]:MethodDeclaration[19637-20479]"
    }, {
      "left" : "private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg)",
      "right" : "private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg)",
      "info" : "MethodDeclaration[20483-21137]:MethodDeclaration[20483-21137]"
    }, {
      "left" : "private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg)",
      "right" : "private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg)",
      "info" : "MethodDeclaration[21141-21485]:MethodDeclaration[21141-21485]"
    }, {
      "left" : "private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg,\n      int desiredType)",
      "right" : "private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg,\n      int desiredType)",
      "info" : "MethodDeclaration[21489-22270]:MethodDeclaration[21489-22270]"
    }, {
      "left" : "private void registerAnyProvidedPrefixes(\n      String ns, Node node, JSModule module)",
      "right" : "private void registerAnyProvidedPrefixes(\n      String ns, Node node, JSModule module)",
      "info" : "MethodDeclaration[22274-23153]:MethodDeclaration[22274-23153]"
    }, {
      "left" : "private final String namespace;",
      "right" : "private final String namespace;",
      "info" : "FieldDeclaration[23363-23394]:FieldDeclaration[23363-23394]"
    }, {
      "left" : "private final Node firstNode;",
      "right" : "private final Node firstNode;",
      "info" : "FieldDeclaration[23493-23522]:FieldDeclaration[23493-23522]"
    }, {
      "left" : "private final JSModule firstModule;",
      "right" : "private final JSModule firstModule;",
      "info" : "FieldDeclaration[23527-23562]:FieldDeclaration[23527-23562]"
    }, {
      "left" : "private Node explicitNode = null;",
      "right" : "private Node explicitNode = null;",
      "info" : "FieldDeclaration[23696-23729]:FieldDeclaration[23696-23729]"
    }, {
      "left" : "private JSModule explicitModule = null;",
      "right" : "private JSModule explicitModule = null;",
      "info" : "FieldDeclaration[23734-23773]:FieldDeclaration[23734-23773]"
    }, {
      "left" : "private Node candidateDefinition = null;",
      "right" : "private Node candidateDefinition = null;",
      "info" : "FieldDeclaration[23812-23852]:FieldDeclaration[23812-23852]"
    }, {
      "left" : "private JSModule minimumModule = null;",
      "right" : "private JSModule minimumModule = null;",
      "info" : "FieldDeclaration[23915-23953]:FieldDeclaration[23915-23953]"
    }, {
      "left" : "private Node replacementNode = null;",
      "right" : "private Node replacementNode = null;",
      "info" : "FieldDeclaration[23995-24031]:FieldDeclaration[23995-24031]"
    }, {
      "left" : "ProvidedName(String namespace, Node node, JSModule module,\n        boolean explicit)",
      "right" : "ProvidedName(String namespace, Node node, JSModule module,\n        boolean explicit)",
      "info" : "MethodDeclaration[24037-24393]:MethodDeclaration[24037-24393]"
    }, {
      "left" : "void addProvide(Node node, JSModule module, boolean explicit)",
      "right" : "void addProvide(Node node, JSModule module, boolean explicit)",
      "info" : "MethodDeclaration[24399-24781]:MethodDeclaration[24399-24781]"
    }, {
      "left" : "boolean isExplicitlyProvided()",
      "right" : "boolean isExplicitlyProvided()",
      "info" : "MethodDeclaration[24787-24860]:MethodDeclaration[24787-24860]"
    }, {
      "left" : "void addDefinition(Node node, JSModule module)",
      "right" : "void addDefinition(Node node, JSModule module)",
      "info" : "MethodDeclaration[24866-25616]:MethodDeclaration[24866-25616]"
    }, {
      "left" : "private void updateMinimumModule(JSModule newModule)",
      "right" : "private void updateMinimumModule(JSModule newModule)",
      "info" : "MethodDeclaration[25622-26151]:MethodDeclaration[25622-26151]"
    }, {
      "left" : "private Node createDeclarationNode()",
      "right" : "private Node createDeclarationNode()",
      "info" : "MethodDeclaration[29112-29444]:MethodDeclaration[29116-29448]"
    }, {
      "left" : "private Node makeVarDeclNode(String namespace, Node sourceNode)",
      "right" : "private Node makeVarDeclNode(String namespace, Node sourceNode)",
      "info" : "MethodDeclaration[29450-30320]:MethodDeclaration[29454-30324]"
    }, {
      "left" : "private Node createNamespaceLiteral()",
      "right" : "private Node createNamespaceLiteral()",
      "info" : "MethodDeclaration[30326-30725]:MethodDeclaration[30330-30729]"
    }, {
      "left" : "private Node makeAssignmentExprNode(String namespace, Node node)",
      "right" : "private Node makeAssignmentExprNode(String namespace, Node node)",
      "info" : "MethodDeclaration[30731-31397]:MethodDeclaration[30735-31401]"
    }, {
      "left" : "private static boolean isNamespacePlaceholder(Node n)",
      "right" : "private static boolean isNamespacePlaceholder(Node n)",
      "info" : "MethodDeclaration[31405-31973]:MethodDeclaration[31409-31977]"
    }, {
      "left" : "UnrecognizedRequire",
      "right" : "UnrecognizedRequire",
      "info" : "TypeDeclaration[32057-32462]:TypeDeclaration[32061-32466]"
    }, {
      "left" : "final Node requireNode;",
      "right" : "final Node requireNode;",
      "info" : "FieldDeclaration[32186-32209]:FieldDeclaration[32190-32213]"
    }, {
      "left" : "final String namespace;",
      "right" : "final String namespace;",
      "info" : "FieldDeclaration[32214-32237]:FieldDeclaration[32218-32241]"
    }, {
      "left" : "final String inputName;",
      "right" : "final String inputName;",
      "info" : "FieldDeclaration[32242-32265]:FieldDeclaration[32246-32269]"
    }, {
      "left" : "UnrecognizedRequire(Node requireNode, String namespace, String inputName)",
      "right" : "UnrecognizedRequire(Node requireNode, String namespace, String inputName)",
      "info" : "MethodDeclaration[32271-32458]:MethodDeclaration[32275-32462]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3989-4345]:Block[3989-4345]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3995-4020]:ExpressionStatement[3995-4020]"
    }, {
      "left" : "this.moduleGraph = compiler.getModuleGraph();",
      "right" : "this.moduleGraph = compiler.getModuleGraph();",
      "info" : "ExpressionStatement[4025-4070]:ExpressionStatement[4025-4070]"
    }, {
      "left" : "this.requiresLevel = requiresLevel;",
      "right" : "this.requiresLevel = requiresLevel;",
      "info" : "ExpressionStatement[4075-4110]:ExpressionStatement[4075-4110]"
    }, {
      "left" : "this.rewriteNewDateGoogNow = rewriteNewDateGoogNow;",
      "right" : "this.rewriteNewDateGoogNow = rewriteNewDateGoogNow;",
      "info" : "ExpressionStatement[4115-4166]:ExpressionStatement[4115-4166]"
    }, {
      "left" : "providedNames.put(GOOG,\n        new ProvidedName(GOOG, null, null, false /* implicit */));",
      "right" : "providedNames.put(GOOG,\n        new ProvidedName(GOOG, null, null, false /* implicit */));",
      "info" : "ExpressionStatement[4251-4341]:ExpressionStatement[4251-4341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4388-4423]:Block[4388-4423]"
    }, {
      "left" : "return exportedVariables;",
      "right" : "return exportedVariables;",
      "info" : "ReturnStatement[4394-4419]:ReturnStatement[4394-4419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4484-5195]:Block[4484-5195]"
    }, {
      "left" : "new NodeTraversal(compiler, this).traverse(root);",
      "right" : "new NodeTraversal(compiler, this).traverse(root);",
      "info" : "ExpressionStatement[4490-4539]:ExpressionStatement[4490-4539]"
    }, {
      "left" : "for (ProvidedName pn : providedNames.values())",
      "right" : "for (ProvidedName pn : providedNames.values())",
      "info" : "EnhancedForStatement[4545-4619]:EnhancedForStatement[4545-4619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4592-4619]:Block[4592-4619]"
    }, {
      "left" : "pn.replace();",
      "right" : "pn.replace();",
      "info" : "ExpressionStatement[4600-4613]:ExpressionStatement[4600-4613]"
    }, {
      "left" : "if (requiresLevel.isOn())",
      "right" : "if (requiresLevel.isOn())",
      "info" : "IfStatement[4625-5191]:IfStatement[4625-5191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4651-5191]:Block[4651-5191]"
    }, {
      "left" : "for (UnrecognizedRequire r : unrecognizedRequires)",
      "right" : "for (UnrecognizedRequire r : unrecognizedRequires)",
      "info" : "EnhancedForStatement[4659-5185]:EnhancedForStatement[4659-5185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4710-5185]:Block[4710-5185]"
    }, {
      "left" : "DiagnosticType error;",
      "right" : "DiagnosticType error;",
      "info" : "VariableDeclarationStatement[4720-4741]:VariableDeclarationStatement[4720-4741]"
    }, {
      "left" : "ProvidedName expectedName = providedNames.get(r.namespace);",
      "right" : "ProvidedName expectedName = providedNames.get(r.namespace);",
      "info" : "VariableDeclarationStatement[4750-4809]:VariableDeclarationStatement[4750-4809]"
    }, {
      "left" : "if (expectedName != null && expectedName.firstNode != null)",
      "right" : "if (expectedName != null && expectedName.firstNode != null)",
      "info" : "IfStatement[4818-5061]:IfStatement[4818-5061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4878-5003]:Block[4878-5003]"
    }, {
      "left" : "error = LATE_PROVIDE_ERROR;",
      "right" : "error = LATE_PROVIDE_ERROR;",
      "info" : "ExpressionStatement[4966-4993]:ExpressionStatement[4966-4993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5009-5061]:Block[5009-5061]"
    }, {
      "left" : "error = MISSING_PROVIDE_ERROR;",
      "right" : "error = MISSING_PROVIDE_ERROR;",
      "info" : "ExpressionStatement[5021-5051]:ExpressionStatement[5021-5051]"
    }, {
      "left" : "compiler.report(JSError.make(\n            r.inputName, r.requireNode, requiresLevel, error, r.namespace));",
      "right" : "compiler.report(JSError.make(\n            r.inputName, r.requireNode, requiresLevel, error, r.namespace));",
      "info" : "ExpressionStatement[5071-5177]:ExpressionStatement[5071-5177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5267-8673]:Block[5267-8673]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n        boolean isExpr = parent.getType() == Token.EXPR_RESULT;\n        Node left = n.getFirstChild();\n        if (left.getType() == Token.GETPROP) {\n          Node name = left.getFirstChild();\n          if (name.getType() == Token.NAME &&\n              GOOG.equals(name.getString())) {\n            // For the sake of simplicity, we report code changes\n            // when we see a provides/requires, and don't worry about\n            // reporting the change when we actually do the replacement.\n            String methodName = name.getNext().getString();\n            if (\"base\".equals(methodName)) {\n              processBaseClassCall(t, n);\n            } else if (!isExpr) {\n              // All other methods must be called in an EXPR.\n              break;\n            } else if (\"require\".equals(methodName)) {\n              processRequireCall(t, n, parent);\n            } else if (\"provide\".equals(methodName)) {\n              processProvideCall(t, n, parent);\n            } else if (\"exportSymbol\".equals(methodName)) {\n              Node arg = left.getNext();\n              if (arg.getType() == Token.STRING) {\n                int dot = arg.getString().indexOf('.');\n                if (dot == -1) {\n                  exportedVariables.add(arg.getString());\n                } else {\n                  exportedVariables.add(arg.getString().substring(0, dot));\n                }\n              }\n            } else if (\"addDependency\".equals(methodName)) {\n              CodingConvention convention = compiler.getCodingConvention();\n              List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);\n              if (typeDecls != null) {\n                for (String typeDecl : typeDecls) {\n                  compiler.getTypeRegistry().forwardDeclareType(typeDecl);\n                }\n              }\n\n              // We can't modify parent, so just create a node that will\n              // get compiled out.\n              parent.replaceChild(n, Node.newNumber(0));\n              compiler.reportCodeChange();\n            } else if (\"setCssNameMapping\".equals(methodName)) {\n              processSetCssNameMapping(t, n, parent);\n            }\n          }\n        }\n        break;\n      case Token.ASSIGN:\n      case Token.NAME:\n        // If this is an assignment to a provided name, remove the provided\n        // object.\n        handleCandidateProvideDefinition(t, n, parent);\n        break;\n      case Token.FUNCTION:\n        // If this is a declaration of a provided named function, this is an\n        // error. Hosited functions will explode if the're provided.\n        if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n)) {\n          String name = n.getFirstChild().getString();\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));\n          }\n        }\n        break;\n\n      case Token.NEW:\n        trySimplifyNewDate(t, n, parent);\n        break;\n\n      case Token.GETPROP:\n        if (n.getFirstChild().getType() == Token.NAME &&\n            parent.getType() != Token.CALL &&\n            parent.getType() != Token.ASSIGN &&\n            \"goog.base\".equals(n.getQualifiedName())) {\n          reportBadBaseClassUse(t, n, \"May only be called directly.\");\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n        boolean isExpr = parent.getType() == Token.EXPR_RESULT;\n        Node left = n.getFirstChild();\n        if (left.getType() == Token.GETPROP) {\n          Node name = left.getFirstChild();\n          if (name.getType() == Token.NAME &&\n              GOOG.equals(name.getString())) {\n            // For the sake of simplicity, we report code changes\n            // when we see a provides/requires, and don't worry about\n            // reporting the change when we actually do the replacement.\n            String methodName = name.getNext().getString();\n            if (\"base\".equals(methodName)) {\n              processBaseClassCall(t, n);\n            } else if (!isExpr) {\n              // All other methods must be called in an EXPR.\n              break;\n            } else if (\"require\".equals(methodName)) {\n              processRequireCall(t, n, parent);\n            } else if (\"provide\".equals(methodName)) {\n              processProvideCall(t, n, parent);\n            } else if (\"exportSymbol\".equals(methodName)) {\n              Node arg = left.getNext();\n              if (arg.getType() == Token.STRING) {\n                int dot = arg.getString().indexOf('.');\n                if (dot == -1) {\n                  exportedVariables.add(arg.getString());\n                } else {\n                  exportedVariables.add(arg.getString().substring(0, dot));\n                }\n              }\n            } else if (\"addDependency\".equals(methodName)) {\n              CodingConvention convention = compiler.getCodingConvention();\n              List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);\n              if (typeDecls != null) {\n                for (String typeDecl : typeDecls) {\n                  compiler.getTypeRegistry().forwardDeclareType(typeDecl);\n                }\n              }\n\n              // We can't modify parent, so just create a node that will\n              // get compiled out.\n              parent.replaceChild(n, Node.newNumber(0));\n              compiler.reportCodeChange();\n            } else if (\"setCssNameMapping\".equals(methodName)) {\n              processSetCssNameMapping(t, n, parent);\n            }\n          }\n        }\n        break;\n      case Token.ASSIGN:\n      case Token.NAME:\n        // If this is an assignment to a provided name, remove the provided\n        // object.\n        handleCandidateProvideDefinition(t, n, parent);\n        break;\n      case Token.FUNCTION:\n        // If this is a declaration of a provided named function, this is an\n        // error. Hosited functions will explode if the're provided.\n        if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n)) {\n          String name = n.getFirstChild().getString();\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));\n          }\n        }\n        break;\n\n      case Token.NEW:\n        trySimplifyNewDate(t, n, parent);\n        break;\n\n      case Token.GETPROP:\n        if (n.getFirstChild().getType() == Token.NAME &&\n            parent.getType() != Token.CALL &&\n            parent.getType() != Token.ASSIGN &&\n            \"goog.base\".equals(n.getQualifiedName())) {\n          reportBadBaseClassUse(t, n, \"May only be called directly.\");\n        }\n        break;\n    }",
      "info" : "SwitchStatement[5273-8669]:SwitchStatement[5273-8669]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[5302-5318]:SwitchCase[5302-5318]"
    }, {
      "left" : "boolean isExpr = parent.getType() == Token.EXPR_RESULT;",
      "right" : "boolean isExpr = parent.getType() == Token.EXPR_RESULT;",
      "info" : "VariableDeclarationStatement[5327-5382]:VariableDeclarationStatement[5327-5382]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5391-5421]:VariableDeclarationStatement[5391-5421]"
    }, {
      "left" : "if (left.getType() == Token.GETPROP)",
      "right" : "if (left.getType() == Token.GETPROP)",
      "info" : "IfStatement[5430-7519]:IfStatement[5430-7519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5467-7519]:Block[5467-7519]"
    }, {
      "left" : "Node name = left.getFirstChild();",
      "right" : "Node name = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[5479-5512]:VariableDeclarationStatement[5479-5512]"
    }, {
      "left" : "if (name.getType() == Token.NAME &&\n              GOOG.equals(name.getString()))",
      "right" : "if (name.getType() == Token.NAME &&\n              GOOG.equals(name.getString()))",
      "info" : "IfStatement[5523-7509]:IfStatement[5523-7509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5604-7509]:Block[5604-7509]"
    }, {
      "left" : "String methodName = name.getNext().getString();",
      "right" : "String methodName = name.getNext().getString();",
      "info" : "VariableDeclarationStatement[5827-5874]:VariableDeclarationStatement[5827-5874]"
    }, {
      "left" : "if (\"base\".equals(methodName))",
      "right" : "if (\"base\".equals(methodName))",
      "info" : "IfStatement[5887-7497]:IfStatement[5887-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5918-5975]:Block[5918-5975]"
    }, {
      "left" : "processBaseClassCall(t, n);",
      "right" : "processBaseClassCall(t, n);",
      "info" : "ExpressionStatement[5934-5961]:ExpressionStatement[5934-5961]"
    }, {
      "left" : "if (!isExpr)",
      "right" : "if (!isExpr)",
      "info" : "IfStatement[5981-7497]:IfStatement[5981-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5994-6092]:Block[5994-6092]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6072-6078]:BreakStatement[6072-6078]"
    }, {
      "left" : "if (\"require\".equals(methodName))",
      "right" : "if (\"require\".equals(methodName))",
      "info" : "IfStatement[6098-7497]:IfStatement[6098-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6132-6195]:Block[6132-6195]"
    }, {
      "left" : "processRequireCall(t, n, parent);",
      "right" : "processRequireCall(t, n, parent);",
      "info" : "ExpressionStatement[6148-6181]:ExpressionStatement[6148-6181]"
    }, {
      "left" : "if (\"provide\".equals(methodName))",
      "right" : "if (\"provide\".equals(methodName))",
      "info" : "IfStatement[6201-7497]:IfStatement[6201-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6235-6298]:Block[6235-6298]"
    }, {
      "left" : "processProvideCall(t, n, parent);",
      "right" : "processProvideCall(t, n, parent);",
      "info" : "ExpressionStatement[6251-6284]:ExpressionStatement[6251-6284]"
    }, {
      "left" : "if (\"exportSymbol\".equals(methodName))",
      "right" : "if (\"exportSymbol\".equals(methodName))",
      "info" : "IfStatement[6304-7497]:IfStatement[6304-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6343-6732]:Block[6343-6732]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[6359-6385]:VariableDeclarationStatement[6359-6385]"
    }, {
      "left" : "if (arg.getType() == Token.STRING)",
      "right" : "if (arg.getType() == Token.STRING)",
      "info" : "IfStatement[6400-6718]:IfStatement[6400-6718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6435-6718]:Block[6435-6718]"
    }, {
      "left" : "int dot = arg.getString().indexOf('.');",
      "right" : "int dot = arg.getString().indexOf('.');",
      "info" : "VariableDeclarationStatement[6453-6492]:VariableDeclarationStatement[6453-6492]"
    }, {
      "left" : "if (dot == -1)",
      "right" : "if (dot == -1)",
      "info" : "IfStatement[6509-6702]:IfStatement[6509-6702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6524-6601]:Block[6524-6601]"
    }, {
      "left" : "exportedVariables.add(arg.getString());",
      "right" : "exportedVariables.add(arg.getString());",
      "info" : "ExpressionStatement[6544-6583]:ExpressionStatement[6544-6583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6607-6702]:Block[6607-6702]"
    }, {
      "left" : "exportedVariables.add(arg.getString().substring(0, dot));",
      "right" : "exportedVariables.add(arg.getString().substring(0, dot));",
      "info" : "ExpressionStatement[6627-6684]:ExpressionStatement[6627-6684]"
    }, {
      "left" : "if (\"addDependency\".equals(methodName))",
      "right" : "if (\"addDependency\".equals(methodName))",
      "info" : "IfStatement[6738-7497]:IfStatement[6738-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6778-7378]:Block[6778-7378]"
    }, {
      "left" : "CodingConvention convention = compiler.getCodingConvention();",
      "right" : "CodingConvention convention = compiler.getCodingConvention();",
      "info" : "VariableDeclarationStatement[6794-6855]:VariableDeclarationStatement[6794-6855]"
    }, {
      "left" : "List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);",
      "right" : "List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);",
      "info" : "VariableDeclarationStatement[6870-6955]:VariableDeclarationStatement[6870-6955]"
    }, {
      "left" : "if (typeDecls != null)",
      "right" : "if (typeDecls != null)",
      "info" : "IfStatement[6970-7155]:IfStatement[6970-7155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6993-7155]:Block[6993-7155]"
    }, {
      "left" : "for (String typeDecl : typeDecls)",
      "right" : "for (String typeDecl : typeDecls)",
      "info" : "EnhancedForStatement[7011-7139]:EnhancedForStatement[7011-7139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7045-7139]:Block[7045-7139]"
    }, {
      "left" : "compiler.getTypeRegistry().forwardDeclareType(typeDecl);",
      "right" : "compiler.getTypeRegistry().forwardDeclareType(typeDecl);",
      "info" : "ExpressionStatement[7065-7121]:ExpressionStatement[7065-7121]"
    }, {
      "left" : "parent.replaceChild(n, Node.newNumber(0));",
      "right" : "parent.replaceChild(n, Node.newNumber(0));",
      "info" : "ExpressionStatement[7279-7321]:ExpressionStatement[7279-7321]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[7336-7364]:ExpressionStatement[7336-7364]"
    }, {
      "left" : "if (\"setCssNameMapping\".equals(methodName))",
      "right" : "if (\"setCssNameMapping\".equals(methodName))",
      "info" : "IfStatement[7384-7497]:IfStatement[7384-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7428-7497]:Block[7428-7497]"
    }, {
      "left" : "processSetCssNameMapping(t, n, parent);",
      "right" : "processSetCssNameMapping(t, n, parent);",
      "info" : "ExpressionStatement[7444-7483]:ExpressionStatement[7444-7483]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7528-7534]:BreakStatement[7528-7534]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[7541-7559]:SwitchCase[7541-7559]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7566-7582]:SwitchCase[7566-7582]"
    }, {
      "left" : "handleCandidateProvideDefinition(t, n, parent);",
      "right" : "handleCandidateProvideDefinition(t, n, parent);",
      "info" : "ExpressionStatement[7686-7733]:ExpressionStatement[7686-7733]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7742-7748]:BreakStatement[7742-7748]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[7755-7775]:SwitchCase[7755-7775]"
    }, {
      "left" : "if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n))",
      "right" : "if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[7930-8238]:IfStatement[7930-8238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8002-8238]:Block[8002-8238]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[8014-8058]:VariableDeclarationStatement[8014-8058]"
    }, {
      "left" : "ProvidedName pn = providedNames.get(name);",
      "right" : "ProvidedName pn = providedNames.get(name);",
      "info" : "VariableDeclarationStatement[8069-8111]:VariableDeclarationStatement[8069-8111]"
    }, {
      "left" : "if (pn != null)",
      "right" : "if (pn != null)",
      "info" : "IfStatement[8122-8228]:IfStatement[8122-8228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8138-8228]:Block[8138-8228]"
    }, {
      "left" : "compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));",
      "right" : "compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));",
      "info" : "ExpressionStatement[8152-8216]:ExpressionStatement[8152-8216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8247-8253]:BreakStatement[8247-8253]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[8261-8276]:SwitchCase[8261-8276]"
    }, {
      "left" : "trySimplifyNewDate(t, n, parent);",
      "right" : "trySimplifyNewDate(t, n, parent);",
      "info" : "ExpressionStatement[8285-8318]:ExpressionStatement[8285-8318]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8327-8333]:BreakStatement[8327-8333]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8341-8360]:SwitchCase[8341-8360]"
    }, {
      "left" : "if (n.getFirstChild().getType() == Token.NAME &&\n            parent.getType() != Token.CALL &&\n            parent.getType() != Token.ASSIGN &&\n            \"goog.base\".equals(n.getQualifiedName()))",
      "right" : "if (n.getFirstChild().getType() == Token.NAME &&\n            parent.getType() != Token.CALL &&\n            parent.getType() != Token.ASSIGN &&\n            \"goog.base\".equals(n.getQualifiedName()))",
      "info" : "IfStatement[8369-8648]:IfStatement[8369-8648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8566-8648]:Block[8566-8648]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"May only be called directly.\");",
      "right" : "reportBadBaseClassUse(t, n, \"May only be called directly.\");",
      "info" : "ExpressionStatement[8578-8638]:ExpressionStatement[8578-8638]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8657-8663]:BreakStatement[8657-8663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8793-10216]:Block[8793-10216]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[8799-8829]:VariableDeclarationStatement[8799-8829]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[8834-8860]:VariableDeclarationStatement[8834-8860]"
    }, {
      "left" : "if (verifyArgument(t, left, arg))",
      "right" : "if (verifyArgument(t, left, arg))",
      "info" : "IfStatement[8865-10212]:IfStatement[8865-10212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8899-10212]:Block[8899-10212]"
    }, {
      "left" : "String ns = arg.getString();",
      "right" : "String ns = arg.getString();",
      "info" : "VariableDeclarationStatement[8907-8935]:VariableDeclarationStatement[8907-8935]"
    }, {
      "left" : "ProvidedName provided = providedNames.get(ns);",
      "right" : "ProvidedName provided = providedNames.get(ns);",
      "info" : "VariableDeclarationStatement[8942-8988]:VariableDeclarationStatement[8942-8988]"
    }, {
      "left" : "if (provided == null || !provided.isExplicitlyProvided())",
      "right" : "if (provided == null || !provided.isExplicitlyProvided())",
      "info" : "IfStatement[8995-9714]:IfStatement[8995-9714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9053-9160]:Block[9053-9160]"
    }, {
      "left" : "unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));",
      "right" : "unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));",
      "info" : "ExpressionStatement[9063-9152]:ExpressionStatement[9063-9152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9166-9714]:Block[9166-9714]"
    }, {
      "left" : "JSModule providedModule = provided.explicitModule;",
      "right" : "JSModule providedModule = provided.explicitModule;",
      "info" : "VariableDeclarationStatement[9176-9226]:VariableDeclarationStatement[9176-9226]"
    }, {
      "left" : "Preconditions.checkNotNull(providedModule);",
      "right" : "Preconditions.checkNotNull(providedModule);",
      "info" : "ExpressionStatement[9309-9352]:ExpressionStatement[9309-9352]"
    }, {
      "left" : "JSModule module = t.getModule();",
      "right" : "JSModule module = t.getModule();",
      "info" : "VariableDeclarationStatement[9362-9394]:VariableDeclarationStatement[9362-9394]"
    }, {
      "left" : "if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule))",
      "right" : "if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule))",
      "info" : "IfStatement[9403-9706]:IfStatement[9403-9706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9530-9706]:Block[9530-9706]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));",
      "right" : "compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));",
      "info" : "ExpressionStatement[9542-9696]:ExpressionStatement[9542-9696]"
    }, {
      "left" : "if (provided != null || requiresLevel.isOn())",
      "right" : "if (provided != null || requiresLevel.isOn())",
      "info" : "IfStatement[10079-10206]:IfStatement[10079-10206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10125-10206]:Block[10125-10206]"
    }, {
      "left" : "parent.detachFromParent();",
      "right" : "parent.detachFromParent();",
      "info" : "ExpressionStatement[10135-10161]:ExpressionStatement[10135-10161]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[10170-10198]:ExpressionStatement[10170-10198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10336-11021]:Block[10336-11021]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[10342-10372]:VariableDeclarationStatement[10342-10372]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[10377-10403]:VariableDeclarationStatement[10377-10403]"
    }, {
      "left" : "if (verifyProvide(t, left, arg))",
      "right" : "if (verifyProvide(t, left, arg))",
      "info" : "IfStatement[10408-11017]:IfStatement[10408-11017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10441-11017]:Block[10441-11017]"
    }, {
      "left" : "String ns = arg.getString();",
      "right" : "String ns = arg.getString();",
      "info" : "VariableDeclarationStatement[10449-10477]:VariableDeclarationStatement[10449-10477]"
    }, {
      "left" : "if (providedNames.containsKey(ns))",
      "right" : "if (providedNames.containsKey(ns))",
      "info" : "IfStatement[10484-11011]:IfStatement[10484-11011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10519-10837]:Block[10519-10837]"
    }, {
      "left" : "ProvidedName previouslyProvided = providedNames.get(ns);",
      "right" : "ProvidedName previouslyProvided = providedNames.get(ns);",
      "info" : "VariableDeclarationStatement[10529-10585]:VariableDeclarationStatement[10529-10585]"
    }, {
      "left" : "if (!previouslyProvided.isExplicitlyProvided())",
      "right" : "if (!previouslyProvided.isExplicitlyProvided())",
      "info" : "IfStatement[10594-10829]:IfStatement[10594-10829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10642-10723]:Block[10642-10723]"
    }, {
      "left" : "previouslyProvided.addProvide(parent, t.getModule(), true);",
      "right" : "previouslyProvided.addProvide(parent, t.getModule(), true);",
      "info" : "ExpressionStatement[10654-10713]:ExpressionStatement[10654-10713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10729-10829]:Block[10729-10829]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, DUPLICATE_NAMESPACE_ERROR, ns));",
      "right" : "compiler.report(\n              t.makeError(n, DUPLICATE_NAMESPACE_ERROR, ns));",
      "info" : "ExpressionStatement[10741-10819]:ExpressionStatement[10741-10819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10843-11011]:Block[10843-11011]"
    }, {
      "left" : "registerAnyProvidedPrefixes(ns, parent, t.getModule());",
      "right" : "registerAnyProvidedPrefixes(ns, parent, t.getModule());",
      "info" : "ExpressionStatement[10853-10908]:ExpressionStatement[10853-10908]"
    }, {
      "left" : "providedNames.put(\n            ns, new ProvidedName(ns, parent, t.getModule(), true));",
      "right" : "providedNames.put(\n            ns, new ProvidedName(ns, parent, t.getModule(), true));",
      "info" : "ExpressionStatement[10917-11003]:ExpressionStatement[10917-11003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11190-11841]:Block[11190-11841]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[11196-11837]:IfStatement[11196-11837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11219-11837]:Block[11219-11837]"
    }, {
      "left" : "String name = null;",
      "right" : "String name = null;",
      "info" : "VariableDeclarationStatement[11227-11246]:VariableDeclarationStatement[11227-11246]"
    }, {
      "left" : "if (n.getType() == Token.NAME && parent.getType() == Token.VAR)",
      "right" : "if (n.getType() == Token.NAME && parent.getType() == Token.VAR)",
      "info" : "IfStatement[11253-11508]:IfStatement[11253-11508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11317-11356]:Block[11317-11356]"
    }, {
      "left" : "name = n.getString();",
      "right" : "name = n.getString();",
      "info" : "ExpressionStatement[11327-11348]:ExpressionStatement[11327-11348]"
    }, {
      "left" : "if (n.getType() == Token.ASSIGN &&\n          parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (n.getType() == Token.ASSIGN &&\n          parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[11362-11508]:IfStatement[11362-11508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11446-11508]:Block[11446-11508]"
    }, {
      "left" : "name = n.getFirstChild().getQualifiedName();",
      "right" : "name = n.getFirstChild().getQualifiedName();",
      "info" : "ExpressionStatement[11456-11500]:ExpressionStatement[11456-11500]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[11516-11831]:IfStatement[11516-11831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11534-11831]:Block[11534-11831]"
    }, {
      "left" : "if (parent.getBooleanProp(Node.IS_NAMESPACE))",
      "right" : "if (parent.getBooleanProp(Node.IS_NAMESPACE))",
      "info" : "IfStatement[11544-11823]:IfStatement[11544-11823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11590-11660]:Block[11590-11660]"
    }, {
      "left" : "processProvideFromPreviousPass(t, name, parent);",
      "right" : "processProvideFromPreviousPass(t, name, parent);",
      "info" : "ExpressionStatement[11602-11650]:ExpressionStatement[11602-11650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11666-11823]:Block[11666-11823]"
    }, {
      "left" : "ProvidedName pn = providedNames.get(name);",
      "right" : "ProvidedName pn = providedNames.get(name);",
      "info" : "VariableDeclarationStatement[11678-11720]:VariableDeclarationStatement[11678-11720]"
    }, {
      "left" : "if (pn != null)",
      "right" : "if (pn != null)",
      "info" : "IfStatement[11731-11813]:IfStatement[11731-11813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11747-11813]:Block[11747-11813]"
    }, {
      "left" : "pn.addDefinition(parent, t.getModule());",
      "right" : "pn.addDefinition(parent, t.getModule());",
      "info" : "ExpressionStatement[11761-11801]:ExpressionStatement[11761-11801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11952-15490]:Block[11952-15490]"
    }, {
      "left" : "Node callee = n.getFirstChild();",
      "right" : "Node callee = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[12823-12855]:VariableDeclarationStatement[12823-12855]"
    }, {
      "left" : "Node thisArg = callee.getNext();",
      "right" : "Node thisArg = callee.getNext();",
      "info" : "VariableDeclarationStatement[12860-12892]:VariableDeclarationStatement[12860-12892]"
    }, {
      "left" : "if (thisArg == null || thisArg.getType() != Token.THIS)",
      "right" : "if (thisArg == null || thisArg.getType() != Token.THIS)",
      "info" : "IfStatement[12897-13043]:IfStatement[12897-13043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12953-13043]:Block[12953-13043]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"First argument must be 'this'.\");",
      "right" : "reportBadBaseClassUse(t, n, \"First argument must be 'this'.\");",
      "info" : "ExpressionStatement[12961-13023]:ExpressionStatement[12961-13023]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13030-13037]:ReturnStatement[13030-13037]"
    }, {
      "left" : "Node enclosingFnNameNode = getEnclosingDeclNameNode(t);",
      "right" : "Node enclosingFnNameNode = getEnclosingDeclNameNode(t);",
      "info" : "VariableDeclarationStatement[13049-13104]:VariableDeclarationStatement[13049-13104]"
    }, {
      "left" : "if (enclosingFnNameNode == null)",
      "right" : "if (enclosingFnNameNode == null)",
      "info" : "IfStatement[13109-13234]:IfStatement[13109-13234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13142-13234]:Block[13142-13234]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"Could not find enclosing method.\");",
      "right" : "reportBadBaseClassUse(t, n, \"Could not find enclosing method.\");",
      "info" : "ExpressionStatement[13150-13214]:ExpressionStatement[13150-13214]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13221-13228]:ReturnStatement[13221-13228]"
    }, {
      "left" : "String enclosingQname = enclosingFnNameNode.getQualifiedName();",
      "right" : "String enclosingQname = enclosingFnNameNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[13240-13303]:VariableDeclarationStatement[13240-13303]"
    }, {
      "left" : "if (enclosingQname.indexOf(\".prototype.\") == -1)",
      "right" : "if (enclosingQname.indexOf(\".prototype.\") == -1)",
      "info" : "IfStatement[13308-15486]:IfStatement[13308-15486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13357-14498]:Block[13357-14498]"
    }, {
      "left" : "Node enclosingParent = enclosingFnNameNode.getParent();",
      "right" : "Node enclosingParent = enclosingFnNameNode.getParent();",
      "info" : "VariableDeclarationStatement[13395-13450]:VariableDeclarationStatement[13395-13450]"
    }, {
      "left" : "Node maybeInheritsExpr = (enclosingParent.getType() == Token.ASSIGN ?\n          enclosingParent.getParent() : enclosingParent).getNext();",
      "right" : "Node maybeInheritsExpr = (enclosingParent.getType() == Token.ASSIGN ?\n          enclosingParent.getParent() : enclosingParent).getNext();",
      "info" : "VariableDeclarationStatement[13457-13594]:VariableDeclarationStatement[13457-13594]"
    }, {
      "left" : "Node baseClassNode = null;",
      "right" : "Node baseClassNode = null;",
      "info" : "VariableDeclarationStatement[13601-13627]:VariableDeclarationStatement[13601-13627]"
    }, {
      "left" : "if (maybeInheritsExpr != null &&\n          maybeInheritsExpr.getType() == Token.EXPR_RESULT &&\n          maybeInheritsExpr.getFirstChild().getType() == Token.CALL)",
      "right" : "if (maybeInheritsExpr != null &&\n          maybeInheritsExpr.getType() == Token.EXPR_RESULT &&\n          maybeInheritsExpr.getFirstChild().getType() == Token.CALL)",
      "info" : "IfStatement[13634-14084]:IfStatement[13634-14084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13798-14084]:Block[13798-14084]"
    }, {
      "left" : "Node callNode = maybeInheritsExpr.getFirstChild();",
      "right" : "Node callNode = maybeInheritsExpr.getFirstChild();",
      "info" : "VariableDeclarationStatement[13808-13858]:VariableDeclarationStatement[13808-13858]"
    }, {
      "left" : "if (\"goog.inherits\".equals(\n                callNode.getFirstChild().getQualifiedName()) &&\n            callNode.getLastChild().isQualifiedName())",
      "right" : "if (\"goog.inherits\".equals(\n                callNode.getFirstChild().getQualifiedName()) &&\n            callNode.getLastChild().isQualifiedName())",
      "info" : "IfStatement[13867-14076]:IfStatement[13867-14076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14014-14076]:Block[14014-14076]"
    }, {
      "left" : "baseClassNode = callNode.getLastChild();",
      "right" : "baseClassNode = callNode.getLastChild();",
      "info" : "ExpressionStatement[14026-14066]:ExpressionStatement[14026-14066]"
    }, {
      "left" : "if (baseClassNode == null)",
      "right" : "if (baseClassNode == null)",
      "info" : "IfStatement[14092-14241]:IfStatement[14092-14241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14119-14241]:Block[14119-14241]"
    }, {
      "left" : "reportBadBaseClassUse(\n            t, n, \"Could not find goog.inherits for base class\");",
      "right" : "reportBadBaseClassUse(\n            t, n, \"Could not find goog.inherits for base class\");",
      "info" : "ExpressionStatement[14129-14217]:ExpressionStatement[14129-14217]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14226-14233]:ReturnStatement[14226-14233]"
    }, {
      "left" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            String.format(\"%s.call\", baseClassNode.getQualifiedName()),\n            callee, \"goog.base\"));",
      "right" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            String.format(\"%s.call\", baseClassNode.getQualifiedName()),\n            callee, \"goog.base\"));",
      "info" : "ExpressionStatement[14276-14457]:ExpressionStatement[14276-14457]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[14464-14492]:ExpressionStatement[14464-14492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14504-15486]:Block[14504-15486]"
    }, {
      "left" : "Node methodNameNode = thisArg.getNext();",
      "right" : "Node methodNameNode = thisArg.getNext();",
      "info" : "VariableDeclarationStatement[14537-14577]:VariableDeclarationStatement[14537-14577]"
    }, {
      "left" : "if (methodNameNode == null || methodNameNode.getType() != Token.STRING)",
      "right" : "if (methodNameNode == null || methodNameNode.getType() != Token.STRING)",
      "info" : "IfStatement[14584-14757]:IfStatement[14584-14757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14656-14757]:Block[14656-14757]"
    }, {
      "left" : "reportBadBaseClassUse(t, n, \"Second argument must name a method.\");",
      "right" : "reportBadBaseClassUse(t, n, \"Second argument must name a method.\");",
      "info" : "ExpressionStatement[14666-14733]:ExpressionStatement[14666-14733]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14742-14749]:ReturnStatement[14742-14749]"
    }, {
      "left" : "String methodName = methodNameNode.getString();",
      "right" : "String methodName = methodNameNode.getString();",
      "info" : "VariableDeclarationStatement[14765-14812]:VariableDeclarationStatement[14765-14812]"
    }, {
      "left" : "String ending = \".prototype.\" + methodName;",
      "right" : "String ending = \".prototype.\" + methodName;",
      "info" : "VariableDeclarationStatement[14819-14862]:VariableDeclarationStatement[14819-14862]"
    }, {
      "left" : "if (enclosingQname == null ||\n          !enclosingQname.endsWith(ending))",
      "right" : "if (enclosingQname == null ||\n          !enclosingQname.endsWith(ending))",
      "info" : "IfStatement[14869-15067]:IfStatement[14869-15067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14943-15067]:Block[14943-15067]"
    }, {
      "left" : "reportBadBaseClassUse(\n            t, n, \"Enclosing method does not match \" + methodName);",
      "right" : "reportBadBaseClassUse(\n            t, n, \"Enclosing method does not match \" + methodName);",
      "info" : "ExpressionStatement[14953-15043]:ExpressionStatement[14953-15043]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15052-15059]:ReturnStatement[15052-15059]"
    }, {
      "left" : "Node className =\n          enclosingFnNameNode.getFirstChild().getFirstChild();",
      "right" : "Node className =\n          enclosingFnNameNode.getFirstChild().getFirstChild();",
      "info" : "VariableDeclarationStatement[15102-15181]:VariableDeclarationStatement[15102-15181]"
    }, {
      "left" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            String.format(\"%s.superClass_.%s.call\",\n                className.getQualifiedName(), methodName),\n            callee, \"goog.base\"));",
      "right" : "n.replaceChild(\n          callee,\n          NodeUtil.newQualifiedNameNode(\n            String.format(\"%s.superClass_.%s.call\",\n                className.getQualifiedName(), methodName),\n            callee, \"goog.base\"));",
      "info" : "ExpressionStatement[15188-15408]:ExpressionStatement[15188-15408]"
    }, {
      "left" : "n.removeChild(methodNameNode);",
      "right" : "n.removeChild(methodNameNode);",
      "info" : "ExpressionStatement[15415-15445]:ExpressionStatement[15415-15445]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[15452-15480]:ExpressionStatement[15452-15480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-16314]:Block[15672-16314]"
    }, {
      "left" : "Node scopeRoot = t.getScopeRoot();",
      "right" : "Node scopeRoot = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[15678-15712]:VariableDeclarationStatement[15678-15712]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(scopeRoot))",
      "right" : "if (NodeUtil.isFunctionDeclaration(scopeRoot))",
      "info" : "IfStatement[15717-16292]:IfStatement[15717-16292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15764-15839]:Block[15764-15839]"
    }, {
      "left" : "return scopeRoot.getFirstChild();",
      "right" : "return scopeRoot.getFirstChild();",
      "info" : "ReturnStatement[15800-15833]:ReturnStatement[15800-15833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15845-16292]:Block[15845-16292]"
    }, {
      "left" : "Node parent = scopeRoot.getParent();",
      "right" : "Node parent = scopeRoot.getParent();",
      "info" : "VariableDeclarationStatement[15853-15889]:VariableDeclarationStatement[15853-15889]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[15896-16286]:IfStatement[15896-16286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15916-16286]:Block[15916-16286]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN ||\n            parent.getLastChild() == scopeRoot &&\n            parent.getFirstChild().isQualifiedName())",
      "right" : "if (parent.getType() == Token.ASSIGN ||\n            parent.getLastChild() == scopeRoot &&\n            parent.getFirstChild().isQualifiedName())",
      "info" : "IfStatement[15926-16278]:IfStatement[15926-16278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16070-16161]:Block[16070-16161]"
    }, {
      "left" : "return parent.getFirstChild();",
      "right" : "return parent.getFirstChild();",
      "info" : "ReturnStatement[16121-16151]:ReturnStatement[16121-16151]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[16167-16278]:IfStatement[16167-16278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16203-16278]:Block[16203-16278]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[16254-16268]:ReturnStatement[16254-16268]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16298-16310]:ReturnStatement[16298-16310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16465-16539]:Block[16465-16539]"
    }, {
      "left" : "compiler.report(t.makeError(n, BASE_CLASS_ERROR, extraMessage));",
      "right" : "compiler.report(t.makeError(n, BASE_CLASS_ERROR, extraMessage));",
      "info" : "ExpressionStatement[16471-16535]:ExpressionStatement[16471-16535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16836-17735]:Block[16836-17735]"
    }, {
      "left" : "if (!providedNames.containsKey(name))",
      "right" : "if (!providedNames.containsKey(name))",
      "info" : "IfStatement[16842-17731]:IfStatement[16842-17731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16880-17473]:Block[16880-17473]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT);",
      "info" : "VariableDeclarationStatement[17033-17073]:VariableDeclarationStatement[17033-17073]"
    }, {
      "left" : "expr.copyInformationFromForTree(parent);",
      "right" : "expr.copyInformationFromForTree(parent);",
      "info" : "ExpressionStatement[17080-17120]:ExpressionStatement[17080-17120]"
    }, {
      "left" : "parent.getParent().addChildBefore(expr, parent);",
      "right" : "parent.getParent().addChildBefore(expr, parent);",
      "info" : "ExpressionStatement[17127-17175]:ExpressionStatement[17127-17175]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[17182-17210]:ExpressionStatement[17182-17210]"
    }, {
      "left" : "JSModule module = t.getModule();",
      "right" : "JSModule module = t.getModule();",
      "info" : "VariableDeclarationStatement[17218-17250]:VariableDeclarationStatement[17218-17250]"
    }, {
      "left" : "registerAnyProvidedPrefixes(name, expr, module);",
      "right" : "registerAnyProvidedPrefixes(name, expr, module);",
      "info" : "ExpressionStatement[17257-17305]:ExpressionStatement[17257-17305]"
    }, {
      "left" : "ProvidedName provided = new ProvidedName(name, expr, module, true);",
      "right" : "ProvidedName provided = new ProvidedName(name, expr, module, true);",
      "info" : "VariableDeclarationStatement[17313-17380]:VariableDeclarationStatement[17313-17380]"
    }, {
      "left" : "providedNames.put(name, provided);",
      "right" : "providedNames.put(name, provided);",
      "info" : "ExpressionStatement[17387-17421]:ExpressionStatement[17387-17421]"
    }, {
      "left" : "provided.addDefinition(parent, module);",
      "right" : "provided.addDefinition(parent, module);",
      "info" : "ExpressionStatement[17428-17467]:ExpressionStatement[17428-17467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17479-17731]:Block[17479-17731]"
    }, {
      "left" : "if (isNamespacePlaceholder(parent))",
      "right" : "if (isNamespacePlaceholder(parent))",
      "info" : "IfStatement[17595-17725]:IfStatement[17595-17725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17631-17725]:Block[17631-17725]"
    }, {
      "left" : "parent.getParent().removeChild(parent);",
      "right" : "parent.getParent().removeChild(parent);",
      "info" : "ExpressionStatement[17641-17680]:ExpressionStatement[17641-17680]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[17689-17717]:ExpressionStatement[17689-17717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18149-19633]:Block[18149-19633]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[18155-18185]:VariableDeclarationStatement[18155-18185]"
    }, {
      "left" : "Node arg = left.getNext();",
      "right" : "Node arg = left.getNext();",
      "info" : "VariableDeclarationStatement[18190-18216]:VariableDeclarationStatement[18190-18216]"
    }, {
      "left" : "if (verifyArgument(t, left, arg, Token.OBJECTLIT))",
      "right" : "if (verifyArgument(t, left, arg, Token.OBJECTLIT))",
      "info" : "IfStatement[18221-19629]:IfStatement[18221-19629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18272-19629]:Block[18272-19629]"
    }, {
      "left" : "final Map<String, String> cssNames = Maps.newHashMap();",
      "right" : "final Map<String, String> cssNames = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[18405-18460]:VariableDeclarationStatement[18405-18460]"
    }, {
      "left" : "JSError error = null;",
      "right" : "JSError error = null;",
      "info" : "VariableDeclarationStatement[18467-18488]:VariableDeclarationStatement[18467-18488]"
    }, {
      "left" : "for (Node key = arg.getFirstChild(); key != null;\n          key = key.getNext().getNext())",
      "right" : "for (Node key = arg.getFirstChild(); key != null;\n          key = key.getNext().getNext())",
      "info" : "ForStatement[18495-19007]:ForStatement[18495-19007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18586-19007]:Block[18586-19007]"
    }, {
      "left" : "Node value = key.getNext();",
      "right" : "Node value = key.getNext();",
      "info" : "VariableDeclarationStatement[18596-18623]:VariableDeclarationStatement[18596-18623]"
    }, {
      "left" : "if (key.getType() != Token.STRING\n            || value == null\n            || value.getType() != Token.STRING)",
      "right" : "if (key.getType() != Token.STRING\n            || value == null\n            || value.getType() != Token.STRING)",
      "info" : "IfStatement[18632-18851]:IfStatement[18632-18851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18743-18851]:Block[18743-18851]"
    }, {
      "left" : "error = t.makeError(n,\n              NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);",
      "right" : "error = t.makeError(n,\n              NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);",
      "info" : "ExpressionStatement[18755-18841]:ExpressionStatement[18755-18841]"
    }, {
      "left" : "if (error != null)",
      "right" : "if (error != null)",
      "info" : "IfStatement[18860-18941]:IfStatement[18860-18941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18879-18941]:Block[18879-18941]"
    }, {
      "left" : "compiler.report(error);",
      "right" : "compiler.report(error);",
      "info" : "ExpressionStatement[18891-18914]:ExpressionStatement[18891-18914]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18925-18931]:BreakStatement[18925-18931]"
    }, {
      "left" : "cssNames.put(key.getString(), value.getString());",
      "right" : "cssNames.put(key.getString(), value.getString());",
      "info" : "ExpressionStatement[18950-18999]:ExpressionStatement[18950-18999]"
    }, {
      "left" : "if (error == null)",
      "right" : "if (error == null)",
      "info" : "IfStatement[19176-19623]:IfStatement[19176-19623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19195-19623]:Block[19195-19623]"
    }, {
      "left" : "CssRenamingMap cssRenamingMap = new CssRenamingMap() {\n          public String get(String value) {\n            if (cssNames.containsKey(value)) {\n              return cssNames.get(value);\n            } else {\n              return value;\n            }\n          }\n        };",
      "right" : "CssRenamingMap cssRenamingMap = new CssRenamingMap() {\n          public String get(String value) {\n            if (cssNames.containsKey(value)) {\n              return cssNames.get(value);\n            } else {\n              return value;\n            }\n          }\n        };",
      "info" : "VariableDeclarationStatement[19205-19478]:VariableDeclarationStatement[19205-19478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19302-19467]:Block[19302-19467]"
    }, {
      "left" : "if (cssNames.containsKey(value))",
      "right" : "if (cssNames.containsKey(value))",
      "info" : "IfStatement[19316-19455]:IfStatement[19316-19455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19349-19406]:Block[19349-19406]"
    }, {
      "left" : "return cssNames.get(value);",
      "right" : "return cssNames.get(value);",
      "info" : "ReturnStatement[19365-19392]:ReturnStatement[19365-19392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19412-19455]:Block[19412-19455]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[19428-19441]:ReturnStatement[19428-19441]"
    }, {
      "left" : "compiler.setCssRenamingMap(cssRenamingMap);",
      "right" : "compiler.setCssRenamingMap(cssRenamingMap);",
      "info" : "ExpressionStatement[19487-19530]:ExpressionStatement[19487-19530]"
    }, {
      "left" : "parent.getParent().removeChild(parent);",
      "right" : "parent.getParent().removeChild(parent);",
      "info" : "ExpressionStatement[19539-19578]:ExpressionStatement[19539-19578]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[19587-19615]:ExpressionStatement[19587-19615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19780-20479]:Block[19780-20479]"
    }, {
      "left" : "if (!rewriteNewDateGoogNow)",
      "right" : "if (!rewriteNewDateGoogNow)",
      "info" : "IfStatement[19786-19835]:IfStatement[19786-19835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19814-19835]:Block[19814-19835]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19822-19829]:ReturnStatement[19822-19829]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[19840-19894]:ExpressionStatement[19840-19894]"
    }, {
      "left" : "Node date = n.getFirstChild();",
      "right" : "Node date = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19899-19929]:VariableDeclarationStatement[19899-19929]"
    }, {
      "left" : "if (!NodeUtil.isName(date) || !\"Date\".equals(date.getString()))",
      "right" : "if (!NodeUtil.isName(date) || !\"Date\".equals(date.getString()))",
      "info" : "IfStatement[19934-20019]:IfStatement[19934-20019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19998-20019]:Block[19998-20019]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20006-20013]:ReturnStatement[20006-20013]"
    }, {
      "left" : "Node callGoogNow = date.getNext();",
      "right" : "Node callGoogNow = date.getNext();",
      "info" : "VariableDeclarationStatement[20024-20058]:VariableDeclarationStatement[20024-20058]"
    }, {
      "left" : "if (callGoogNow == null || !NodeUtil.isCall(callGoogNow) ||\n        callGoogNow.getNext() != null)",
      "right" : "if (callGoogNow == null || !NodeUtil.isCall(callGoogNow) ||\n        callGoogNow.getNext() != null)",
      "info" : "IfStatement[20063-20183]:IfStatement[20063-20183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20162-20183]:Block[20162-20183]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20170-20177]:ReturnStatement[20170-20177]"
    }, {
      "left" : "Node googNow = callGoogNow.getFirstChild();",
      "right" : "Node googNow = callGoogNow.getFirstChild();",
      "info" : "VariableDeclarationStatement[20188-20231]:VariableDeclarationStatement[20188-20231]"
    }, {
      "left" : "String googNowQName = googNow.getQualifiedName();",
      "right" : "String googNowQName = googNow.getQualifiedName();",
      "info" : "VariableDeclarationStatement[20236-20285]:VariableDeclarationStatement[20236-20285]"
    }, {
      "left" : "if (googNowQName == null || !\"goog.now\".equals(googNowQName)\n        || googNow.getNext() != null)",
      "right" : "if (googNowQName == null || !\"goog.now\".equals(googNowQName)\n        || googNow.getNext() != null)",
      "info" : "IfStatement[20290-20410]:IfStatement[20290-20410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20389-20410]:Block[20389-20410]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20397-20404]:ReturnStatement[20397-20404]"
    }, {
      "left" : "n.removeChild(callGoogNow);",
      "right" : "n.removeChild(callGoogNow);",
      "info" : "ExpressionStatement[20415-20442]:ExpressionStatement[20415-20442]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[20447-20475]:ExpressionStatement[20447-20475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20829-21137]:Block[20829-21137]"
    }, {
      "left" : "if (!verifyArgument(t, methodName, arg))",
      "right" : "if (!verifyArgument(t, methodName, arg))",
      "info" : "IfStatement[20835-20903]:IfStatement[20835-20903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20876-20903]:Block[20876-20903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20884-20897]:ReturnStatement[20884-20897]"
    }, {
      "left" : "for (String part : arg.getString().split(\"\\\\.\"))",
      "right" : "for (String part : arg.getString().split(\"\\\\.\"))",
      "info" : "EnhancedForStatement[20909-21116]:EnhancedForStatement[20909-21116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20958-21116]:Block[20958-21116]"
    }, {
      "left" : "if (!NodeUtil.isValidPropertyName(part))",
      "right" : "if (!NodeUtil.isValidPropertyName(part))",
      "info" : "IfStatement[20966-21110]:IfStatement[20966-21110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21007-21110]:Block[21007-21110]"
    }, {
      "left" : "compiler.report(t.makeError(arg, INVALID_PROVIDE_ERROR, part));",
      "right" : "compiler.report(t.makeError(arg, INVALID_PROVIDE_ERROR, part));",
      "info" : "ExpressionStatement[21017-21080]:ExpressionStatement[21017-21080]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21089-21102]:ReturnStatement[21089-21102]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21121-21133]:ReturnStatement[21121-21133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21419-21485]:Block[21419-21485]"
    }, {
      "left" : "return verifyArgument(t, methodName, arg, Token.STRING);",
      "right" : "return verifyArgument(t, methodName, arg, Token.STRING);",
      "info" : "ReturnStatement[21425-21481]:ReturnStatement[21425-21481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21794-22270]:Block[21794-22270]"
    }, {
      "left" : "DiagnosticType diagnostic = null;",
      "right" : "DiagnosticType diagnostic = null;",
      "info" : "VariableDeclarationStatement[21800-21833]:VariableDeclarationStatement[21800-21833]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[21838-22077]:IfStatement[21838-22077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21855-21902]:Block[21855-21902]"
    }, {
      "left" : "diagnostic = NULL_ARGUMENT_ERROR;",
      "right" : "diagnostic = NULL_ARGUMENT_ERROR;",
      "info" : "ExpressionStatement[21863-21896]:ExpressionStatement[21863-21896]"
    }, {
      "left" : "if (arg.getType() != desiredType)",
      "right" : "if (arg.getType() != desiredType)",
      "info" : "IfStatement[21908-22077]:IfStatement[21908-22077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21942-21992]:Block[21942-21992]"
    }, {
      "left" : "diagnostic = INVALID_ARGUMENT_ERROR;",
      "right" : "diagnostic = INVALID_ARGUMENT_ERROR;",
      "info" : "ExpressionStatement[21950-21986]:ExpressionStatement[21950-21986]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[21998-22077]:IfStatement[21998-22077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22025-22077]:Block[22025-22077]"
    }, {
      "left" : "diagnostic = TOO_MANY_ARGUMENTS_ERROR;",
      "right" : "diagnostic = TOO_MANY_ARGUMENTS_ERROR;",
      "info" : "ExpressionStatement[22033-22071]:ExpressionStatement[22033-22071]"
    }, {
      "left" : "if (diagnostic != null)",
      "right" : "if (diagnostic != null)",
      "info" : "IfStatement[22082-22249]:IfStatement[22082-22249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22106-22249]:Block[22106-22249]"
    }, {
      "left" : "compiler.report(\n          t.makeError(methodName,\n              diagnostic, methodName.getQualifiedName()));",
      "right" : "compiler.report(\n          t.makeError(methodName,\n              diagnostic, methodName.getQualifiedName()));",
      "info" : "ExpressionStatement[22114-22223]:ExpressionStatement[22114-22223]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22230-22243]:ReturnStatement[22230-22243]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22254-22266]:ReturnStatement[22254-22266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22708-23153]:Block[22708-23153]"
    }, {
      "left" : "int pos = ns.indexOf('.');",
      "right" : "int pos = ns.indexOf('.');",
      "info" : "VariableDeclarationStatement[22714-22740]:VariableDeclarationStatement[22714-22740]"
    }, {
      "left" : "while (pos != -1)",
      "right" : "while (pos != -1)",
      "info" : "WhileStatement[22745-23149]:WhileStatement[22745-23149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22763-23149]:Block[22763-23149]"
    }, {
      "left" : "String prefixNs = ns.substring(0, pos);",
      "right" : "String prefixNs = ns.substring(0, pos);",
      "info" : "VariableDeclarationStatement[22771-22810]:VariableDeclarationStatement[22771-22810]"
    }, {
      "left" : "pos = ns.indexOf('.', pos + 1);",
      "right" : "pos = ns.indexOf('.', pos + 1);",
      "info" : "ExpressionStatement[22817-22848]:ExpressionStatement[22817-22848]"
    }, {
      "left" : "if (providedNames.containsKey(prefixNs))",
      "right" : "if (providedNames.containsKey(prefixNs))",
      "info" : "IfStatement[22855-23143]:IfStatement[22855-23143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22896-23002]:Block[22896-23002]"
    }, {
      "left" : "providedNames.get(prefixNs).addProvide(\n            node, module, false /* implicit */);",
      "right" : "providedNames.get(prefixNs).addProvide(\n            node, module, false /* implicit */);",
      "info" : "ExpressionStatement[22906-22994]:ExpressionStatement[22906-22994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23008-23143]:Block[23008-23143]"
    }, {
      "left" : "providedNames.put(\n            prefixNs,\n            new ProvidedName(prefixNs, node, module, false /* implicit */));",
      "right" : "providedNames.put(\n            prefixNs,\n            new ProvidedName(prefixNs, node, module, false /* implicit */));",
      "info" : "ExpressionStatement[23018-23135]:ExpressionStatement[23018-23135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24122-24393]:Block[24122-24393]"
    }, {
      "left" : "Preconditions.checkArgument(\n          node == null /* The base case */ ||\n          NodeUtil.isExpressionNode(node));",
      "right" : "Preconditions.checkArgument(\n          node == null /* The base case */ ||\n          NodeUtil.isExpressionNode(node));",
      "info" : "ExpressionStatement[24130-24248]:ExpressionStatement[24130-24248]"
    }, {
      "left" : "this.namespace = namespace;",
      "right" : "this.namespace = namespace;",
      "info" : "ExpressionStatement[24255-24282]:ExpressionStatement[24255-24282]"
    }, {
      "left" : "this.firstNode = node;",
      "right" : "this.firstNode = node;",
      "info" : "ExpressionStatement[24289-24311]:ExpressionStatement[24289-24311]"
    }, {
      "left" : "this.firstModule = module;",
      "right" : "this.firstModule = module;",
      "info" : "ExpressionStatement[24318-24344]:ExpressionStatement[24318-24344]"
    }, {
      "left" : "addProvide(node, module, explicit);",
      "right" : "addProvide(node, module, explicit);",
      "info" : "ExpressionStatement[24352-24387]:ExpressionStatement[24352-24387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24521-24781]:Block[24521-24781]"
    }, {
      "left" : "if (explicit)",
      "right" : "if (explicit)",
      "info" : "IfStatement[24529-24740]:IfStatement[24529-24740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24543-24740]:Block[24543-24740]"
    }, {
      "left" : "Preconditions.checkState(explicitNode == null);",
      "right" : "Preconditions.checkState(explicitNode == null);",
      "info" : "ExpressionStatement[24553-24600]:ExpressionStatement[24553-24600]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isExpressionNode(node));",
      "right" : "Preconditions.checkArgument(NodeUtil.isExpressionNode(node));",
      "info" : "ExpressionStatement[24609-24670]:ExpressionStatement[24609-24670]"
    }, {
      "left" : "explicitNode = node;",
      "right" : "explicitNode = node;",
      "info" : "ExpressionStatement[24679-24699]:ExpressionStatement[24679-24699]"
    }, {
      "left" : "explicitModule = module;",
      "right" : "explicitModule = module;",
      "info" : "ExpressionStatement[24708-24732]:ExpressionStatement[24708-24732]"
    }, {
      "left" : "updateMinimumModule(module);",
      "right" : "updateMinimumModule(module);",
      "info" : "ExpressionStatement[24747-24775]:ExpressionStatement[24747-24775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24818-24860]:Block[24818-24860]"
    }, {
      "left" : "return explicitNode != null;",
      "right" : "return explicitNode != null;",
      "info" : "ReturnStatement[24826-24854]:ReturnStatement[24826-24854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25193-25616]:Block[25193-25616]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isExpressionNode(node) || // assign\n                                  NodeUtil.isFunction(node) ||\n                                  NodeUtil.isVar(node));",
      "right" : "Preconditions.checkArgument(NodeUtil.isExpressionNode(node) || // assign\n                                  NodeUtil.isFunction(node) ||\n                                  NodeUtil.isVar(node));",
      "info" : "ExpressionStatement[25201-25393]:ExpressionStatement[25201-25393]"
    }, {
      "left" : "Preconditions.checkArgument(explicitNode != node);",
      "right" : "Preconditions.checkArgument(explicitNode != node);",
      "info" : "ExpressionStatement[25400-25450]:ExpressionStatement[25400-25450]"
    }, {
      "left" : "if ((candidateDefinition == null) || !NodeUtil.isExpressionNode(node))",
      "right" : "if ((candidateDefinition == null) || !NodeUtil.isExpressionNode(node))",
      "info" : "IfStatement[25457-25610]:IfStatement[25457-25610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25528-25610]:Block[25528-25610]"
    }, {
      "left" : "candidateDefinition = node;",
      "right" : "candidateDefinition = node;",
      "info" : "ExpressionStatement[25538-25565]:ExpressionStatement[25538-25565]"
    }, {
      "left" : "updateMinimumModule(module);",
      "right" : "updateMinimumModule(module);",
      "info" : "ExpressionStatement[25574-25602]:ExpressionStatement[25574-25602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25675-26151]:Block[25675-26151]"
    }, {
      "left" : "if (minimumModule == null)",
      "right" : "if (minimumModule == null)",
      "info" : "IfStatement[25683-26145]:IfStatement[25683-26145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25710-25754]:Block[25710-25754]"
    }, {
      "left" : "minimumModule = newModule;",
      "right" : "minimumModule = newModule;",
      "info" : "ExpressionStatement[25720-25746]:ExpressionStatement[25720-25746]"
    }, {
      "left" : "if (moduleGraph != null)",
      "right" : "if (moduleGraph != null)",
      "info" : "IfStatement[25760-26145]:IfStatement[25760-26145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25785-25906]:Block[25785-25906]"
    }, {
      "left" : "minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(\n            minimumModule, newModule);",
      "right" : "minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(\n            minimumModule, newModule);",
      "info" : "ExpressionStatement[25795-25898]:ExpressionStatement[25795-25898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25912-26145]:Block[25912-26145]"
    }, {
      "left" : "Preconditions.checkState(newModule == minimumModule,\n                                 \"Missing module graph\");",
      "right" : "Preconditions.checkState(newModule == minimumModule,\n                                 \"Missing module graph\");",
      "info" : "ExpressionStatement[26027-26137]:ExpressionStatement[26027-26137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29257-29444]:Block[29261-29448]"
    }, {
      "left" : "if (namespace.indexOf('.') == -1)",
      "right" : "if (namespace.indexOf('.') == -1)",
      "info" : "IfStatement[29265-29438]:IfStatement[29269-29442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29299-29362]:Block[29303-29366]"
    }, {
      "left" : "return makeVarDeclNode(namespace, firstNode);",
      "right" : "return makeVarDeclNode(namespace, firstNode);",
      "info" : "ReturnStatement[29309-29354]:ReturnStatement[29313-29358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29368-29438]:Block[29372-29442]"
    }, {
      "left" : "return makeAssignmentExprNode(namespace, firstNode);",
      "right" : "return makeAssignmentExprNode(namespace, firstNode);",
      "info" : "ReturnStatement[29378-29430]:ReturnStatement[29382-29434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29775-30320]:Block[29779-30324]"
    }, {
      "left" : "Node name = Node.newString(Token.NAME, namespace);",
      "right" : "Node name = Node.newString(Token.NAME, namespace);",
      "info" : "VariableDeclarationStatement[29783-29833]:VariableDeclarationStatement[29787-29837]"
    }, {
      "left" : "name.addChildToFront(createNamespaceLiteral());",
      "right" : "name.addChildToFront(createNamespaceLiteral());",
      "info" : "ExpressionStatement[29840-29887]:ExpressionStatement[29844-29891]"
    }, {
      "left" : "Node decl = new Node(Token.VAR, name);",
      "right" : "Node decl = new Node(Token.VAR, name);",
      "info" : "VariableDeclarationStatement[29895-29933]:VariableDeclarationStatement[29899-29937]"
    }, {
      "left" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "right" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "info" : "ExpressionStatement[29940-29985]:ExpressionStatement[29944-29989]"
    }, {
      "left" : "if (compiler.getCodingConvention().isConstant(namespace))",
      "right" : "if (compiler.getCodingConvention().isConstant(namespace))",
      "info" : "IfStatement[30056-30181]:IfStatement[30060-30185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30114-30181]:Block[30118-30185]"
    }, {
      "left" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[30124-30173]:ExpressionStatement[30128-30177]"
    }, {
      "left" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "right" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "info" : "ExpressionStatement[30189-30244]:ExpressionStatement[30193-30248]"
    }, {
      "left" : "decl.copyInformationFromForTree(sourceNode);",
      "right" : "decl.copyInformationFromForTree(sourceNode);",
      "info" : "ExpressionStatement[30251-30295]:ExpressionStatement[30255-30299]"
    }, {
      "left" : "return decl;",
      "right" : "return decl;",
      "info" : "ReturnStatement[30302-30314]:ReturnStatement[30306-30318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30559-30725]:Block[30563-30729]"
    }, {
      "left" : "Node objlit = new Node(Token.OBJECTLIT);",
      "right" : "Node objlit = new Node(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[30567-30607]:VariableDeclarationStatement[30571-30611]"
    }, {
      "left" : "objlit.setJSType(\n          compiler.getTypeRegistry().createAnonymousObjectType());",
      "right" : "objlit.setJSType(\n          compiler.getTypeRegistry().createAnonymousObjectType());",
      "info" : "ExpressionStatement[30614-30698]:ExpressionStatement[30618-30702]"
    }, {
      "left" : "return objlit;",
      "right" : "return objlit;",
      "info" : "ReturnStatement[30705-30719]:ReturnStatement[30709-30723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31018-31397]:Block[31022-31401]"
    }, {
      "left" : "Node decl = new Node(Token.EXPR_RESULT,\n          new Node(Token.ASSIGN,\n              NodeUtil.newQualifiedNameNode(namespace, node, namespace),\n              createNamespaceLiteral()));",
      "right" : "Node decl = new Node(Token.EXPR_RESULT,\n          new Node(Token.ASSIGN,\n              NodeUtil.newQualifiedNameNode(namespace, node, namespace),\n              createNamespaceLiteral()));",
      "info" : "VariableDeclarationStatement[31026-31213]:VariableDeclarationStatement[31030-31217]"
    }, {
      "left" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "right" : "decl.putBooleanProp(Node.IS_NAMESPACE, true);",
      "info" : "ExpressionStatement[31220-31265]:ExpressionStatement[31224-31269]"
    }, {
      "left" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "right" : "Preconditions.checkState(isNamespacePlaceholder(decl));",
      "info" : "ExpressionStatement[31272-31327]:ExpressionStatement[31276-31331]"
    }, {
      "left" : "decl.copyInformationFromForTree(node);",
      "right" : "decl.copyInformationFromForTree(node);",
      "info" : "ExpressionStatement[31334-31372]:ExpressionStatement[31338-31376]"
    }, {
      "left" : "return decl;",
      "right" : "return decl;",
      "info" : "ReturnStatement[31379-31391]:ReturnStatement[31383-31395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31527-31973]:Block[31531-31977]"
    }, {
      "left" : "if (!n.getBooleanProp(Node.IS_NAMESPACE))",
      "right" : "if (!n.getBooleanProp(Node.IS_NAMESPACE))",
      "info" : "IfStatement[31533-31602]:IfStatement[31537-31606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31575-31602]:Block[31579-31606]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31583-31596]:ReturnStatement[31587-31600]"
    }, {
      "left" : "Node value = null;",
      "right" : "Node value = null;",
      "info" : "VariableDeclarationStatement[31608-31626]:VariableDeclarationStatement[31612-31630]"
    }, {
      "left" : "if (n.getType() == Token.EXPR_RESULT)",
      "right" : "if (n.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[31631-31868]:IfStatement[31635-31872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31669-31752]:Block[31673-31756]"
    }, {
      "left" : "Node assign = n.getFirstChild();",
      "right" : "Node assign = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[31677-31709]:VariableDeclarationStatement[31681-31713]"
    }, {
      "left" : "value = assign.getLastChild();",
      "right" : "value = assign.getLastChild();",
      "info" : "ExpressionStatement[31716-31746]:ExpressionStatement[31720-31750]"
    }, {
      "left" : "if (n.getType() == Token.VAR)",
      "right" : "if (n.getType() == Token.VAR)",
      "info" : "IfStatement[31758-31868]:IfStatement[31762-31872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31788-31868]:Block[31792-31872]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[31796-31826]:VariableDeclarationStatement[31800-31830]"
    }, {
      "left" : "value = name.getFirstChild();",
      "right" : "value = name.getFirstChild();",
      "info" : "ExpressionStatement[31833-31862]:ExpressionStatement[31837-31866]"
    }, {
      "left" : "return value != null\n      && value.getType() == Token.OBJECTLIT\n      && !value.hasChildren();",
      "right" : "return value != null\n      && value.getType() == Token.OBJECTLIT\n      && !value.hasChildren();",
      "info" : "ReturnStatement[31874-31969]:ReturnStatement[31878-31973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32345-32458]:Block[32349-32462]"
    }, {
      "left" : "this.requireNode = requireNode;",
      "right" : "this.requireNode = requireNode;",
      "info" : "ExpressionStatement[32353-32384]:ExpressionStatement[32357-32388]"
    }, {
      "left" : "this.namespace = namespace;",
      "right" : "this.namespace = namespace;",
      "info" : "ExpressionStatement[32391-32418]:ExpressionStatement[32395-32422]"
    }, {
      "left" : "this.inputName = inputName;",
      "right" : "this.inputName = inputName;",
      "info" : "ExpressionStatement[32425-32452]:ExpressionStatement[32429-32456]"
    } ]
  },
  "interFileMappings" : { }
}