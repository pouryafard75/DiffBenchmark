{
  "matchedElements" : [
 {
    "left" : "class : CrudTest",
    "right" : "class : CrudTest",
    "info" : "TypeDeclaration[2295-19385]:TypeDeclaration[2288-19378]"
  }, {
    "left" : "filename",
    "right" : "filename",
    "info" : "FieldDeclaration[2353-2383]:FieldDeclaration[2346-2376]"
  }, {
    "left" : "description",
    "right" : "description",
    "info" : "FieldDeclaration[2388-2421]:FieldDeclaration[2381-2414]"
  }, {
    "left" : "data",
    "right" : "data",
    "info" : "FieldDeclaration[2426-2455]:FieldDeclaration[2419-2448]"
  }, {
    "left" : "definition",
    "right" : "definition",
    "info" : "FieldDeclaration[2460-2498]:FieldDeclaration[2453-2491]"
  }, {
    "left" : "collection",
    "right" : "collection",
    "info" : "FieldDeclaration[2503-2552]:FieldDeclaration[2496-2545]"
  }, {
    "left" : "public CrudTest(filename , description , data , definition )",
    "right" : "public CrudTest(filename , description , data , definition )",
    "info" : "MethodDeclaration[2558-2821]:MethodDeclaration[2551-2814]"
  }, {
    "left" : "public setUp() : void",
    "right" : "public setUp() : void",
    "info" : "MethodDeclaration[2827-3494]:MethodDeclaration[2820-3487]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[3150-3471]:MethodDeclaration[3143-3464]"
  }, {
    "left" : "public shouldPassAllOutcomes() : void",
    "right" : "public shouldPassAllOutcomes() : void",
    "info" : "MethodDeclaration[3500-4003]:MethodDeclaration[3493-3996]"
  }, {
    "left" : "public data() : ",
    "right" : "public data() : ",
    "info" : "MethodDeclaration[4009-4653]:MethodDeclaration[4002-4646]"
  }, {
    "left" : "private checkResult() : boolean",
    "right" : "private checkResult() : boolean",
    "info" : "MethodDeclaration[4659-5152]:MethodDeclaration[4652-5145]"
  }, {
    "left" : "private assertCollectionEquals(expectedCollection ) : void",
    "right" : "private assertCollectionEquals(expectedCollection ) : void",
    "info" : "MethodDeclaration[5158-5879]:MethodDeclaration[5151-5872]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[5308-5776]:MethodDeclaration[5301-5769]"
  }, {
    "left" : "private getOperationMongoOperations(operation ) : ",
    "right" : "private getOperationMongoOperations(operation ) : ",
    "info" : "MethodDeclaration[5885-7020]:MethodDeclaration[5878-7013]"
  }, {
    "left" : "private convertMongoOperationToResult(result ) : ",
    "right" : "private convertMongoOperationToResult(result ) : ",
    "info" : "MethodDeclaration[7026-8294]:MethodDeclaration[7019-8287]"
  }, {
    "left" : "private toResult(results ...) : ",
    "right" : "private toResult(results ...) : ",
    "info" : "MethodDeclaration[8300-8419]:MethodDeclaration[8293-8412]"
  }, {
    "left" : "private toResult(results ...) : ",
    "right" : "private toResult(results ...) : ",
    "info" : "MethodDeclaration[8425-8708]:MethodDeclaration[8418-8701]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[8570-8684]:MethodDeclaration[8563-8677]"
  }, {
    "left" : "private toResult(results ...) : ",
    "right" : "private toResult(results ...) : ",
    "info" : "MethodDeclaration[8714-8997]:MethodDeclaration[8707-8990]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[8859-8973]:MethodDeclaration[8852-8966]"
  }, {
    "left" : "private toResult(operation ) : ",
    "right" : "private toResult(operation ) : ",
    "info" : "MethodDeclaration[9003-9627]:MethodDeclaration[8996-9620]"
  }, {
    "left" : "private toResult(operation ) : ",
    "right" : "private toResult(operation ) : ",
    "info" : "MethodDeclaration[9633-9879]:MethodDeclaration[9626-9872]"
  }, {
    "left" : "private toResult(results ...) : ",
    "right" : "private toResult(results ...) : ",
    "info" : "MethodDeclaration[9885-10034]:MethodDeclaration[9878-10027]"
  }, {
    "left" : "private getAggregateMongoOperation(arguments ...) : ",
    "right" : "private getAggregateMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[10040-10556]:MethodDeclaration[10033-10549]"
  }, {
    "left" : "private getCountMongoOperation(arguments ...) : ",
    "right" : "private getCountMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[10562-11210]:MethodDeclaration[10555-11203]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[10698-11193]:MethodDeclaration[10691-11186]"
  }, {
    "left" : "private getDistinctMongoOperation(arguments ...) : ",
    "right" : "private getDistinctMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[11216-11446]:MethodDeclaration[11209-11439]"
  }, {
    "left" : "private getFindMongoOperation(arguments ...) : ",
    "right" : "private getFindMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[11452-12071]:MethodDeclaration[11445-12064]"
  }, {
    "left" : "private getDeleteManyMongoOperation(arguments ...) : ",
    "right" : "private getDeleteManyMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[12077-12390]:MethodDeclaration[12070-12383]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[12234-12373]:MethodDeclaration[12227-12366]"
  }, {
    "left" : "private getDeleteOneMongoOperation(arguments ...) : ",
    "right" : "private getDeleteOneMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[12396-12707]:MethodDeclaration[12389-12700]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[12552-12690]:MethodDeclaration[12545-12683]"
  }, {
    "left" : "private getFindOneAndDeleteMongoOperation(arguments ...) : ",
    "right" : "private getFindOneAndDeleteMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[12713-13418]:MethodDeclaration[12706-13411]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[12876-13401]:MethodDeclaration[12869-13394]"
  }, {
    "left" : "private getFindOneAndReplaceMongoOperation(arguments ...) : ",
    "right" : "private getFindOneAndReplaceMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[13424-14722]:MethodDeclaration[13417-14715]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[13721-14705]:MethodDeclaration[13714-14698]"
  }, {
    "left" : "private getFindOneAndUpdateMongoOperation(arguments ...) : ",
    "right" : "private getFindOneAndUpdateMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[14728-15885]:MethodDeclaration[14721-15878]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[14891-15868]:MethodDeclaration[14884-15861]"
  }, {
    "left" : "private getInsertOneMongoOperation(arguments ...) : ",
    "right" : "private getInsertOneMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[15891-16188]:MethodDeclaration[15884-16181]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[16031-16171]:MethodDeclaration[16024-16164]"
  }, {
    "left" : "private getInsertManyMongoOperation(arguments ...) : ",
    "right" : "private getInsertManyMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[16194-16700]:MethodDeclaration[16187-16693]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[16335-16683]:MethodDeclaration[16328-16676]"
  }, {
    "left" : "private getReplaceOneMongoOperation(arguments ...) : ",
    "right" : "private getReplaceOneMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[16706-17279]:MethodDeclaration[16699-17272]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[16863-17262]:MethodDeclaration[16856-17255]"
  }, {
    "left" : "private getUpdateManyMongoOperation(arguments ...) : ",
    "right" : "private getUpdateManyMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[17285-17853]:MethodDeclaration[17278-17846]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[17442-17836]:MethodDeclaration[17435-17829]"
  }, {
    "left" : "private getUpdateOneMongoOperation(arguments ...) : ",
    "right" : "private getUpdateOneMongoOperation(arguments ...) : ",
    "info" : "MethodDeclaration[17859-18425]:MethodDeclaration[17852-18418]"
  }, {
    "left" : "package execute() : void",
    "right" : "package execute() : void",
    "info" : "MethodDeclaration[18015-18408]:MethodDeclaration[18008-18401]"
  }, {
    "left" : "class : MongoOperationLong",
    "right" : "class : MongoOperationLong",
    "info" : "TypeDeclaration[18431-18501]:TypeDeclaration[18424-18494]"
  }, {
    "left" : "class : MongoOperationBsonDocument",
    "right" : "class : MongoOperationBsonDocument",
    "info" : "TypeDeclaration[18507-18593]:TypeDeclaration[18500-18586]"
  }, {
    "left" : "class : MongoOperationUpdateResult",
    "right" : "class : MongoOperationUpdateResult",
    "info" : "TypeDeclaration[18600-18686]:TypeDeclaration[18593-18679]"
  }, {
    "left" : "class : MongoOperationDeleteResult",
    "right" : "class : MongoOperationDeleteResult",
    "info" : "TypeDeclaration[18692-18778]:TypeDeclaration[18685-18771]"
  }, {
    "left" : "class : MongoOperationVoid",
    "right" : "class : MongoOperationVoid",
    "info" : "TypeDeclaration[18784-18854]:TypeDeclaration[18777-18847]"
  }, {
    "left" : "class : MongoOperation",
    "right" : "class : MongoOperation",
    "info" : "TypeDeclaration[18860-19382]:TypeDeclaration[18853-19375]"
  }, {
    "left" : "callback",
    "right" : "callback",
    "info" : "FieldDeclaration[18917-19002]:FieldDeclaration[18910-18995]"
  }, {
    "left" : "public getCallback() : ",
    "right" : "public getCallback() : ",
    "info" : "MethodDeclaration[19012-19103]:MethodDeclaration[19005-19096]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[19113-19342]:MethodDeclaration[19106-19335]"
  }, {
    "left" : "public abstract execute() : void",
    "right" : "public abstract execute() : void",
    "info" : "MethodDeclaration[19352-19376]:MethodDeclaration[19345-19369]"
  } ],
  "mappings" : [
 {
    "left" : "com.mongodb.JsonPoweredTestHelper",
    "right" : "util.JsonPoweredTestHelper",
    "info" : "QualifiedName[637-670]:QualifiedName[1430-1456]"
  }, {
    "left" : "@RunWith(Parameterized.class)",
    "right" : "@RunWith(Parameterized.class)",
    "info" : "SingleMemberAnnotation[2295-2324]:SingleMemberAnnotation[2288-2317]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2325-2331]:Modifier[2318-2324]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2332-2337]:TYPE_DECLARATION_KIND[2325-2330]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2558-2564]:Modifier[2551-2557]"
  }, {
    "left" : "CrudTest",
    "right" : "CrudTest",
    "info" : "SimpleName[2565-2573]:SimpleName[2558-2566]"
  }, {
    "left" : "final String filename",
    "right" : "final String filename",
    "info" : "SingleVariableDeclaration[2574-2595]:SingleVariableDeclaration[2567-2588]"
  }, {
    "left" : "final String description",
    "right" : "final String description",
    "info" : "SingleVariableDeclaration[2597-2621]:SingleVariableDeclaration[2590-2614]"
  }, {
    "left" : "final BsonArray data",
    "right" : "final BsonArray data",
    "info" : "SingleVariableDeclaration[2623-2643]:SingleVariableDeclaration[2616-2636]"
  }, {
    "left" : "final BsonDocument definition",
    "right" : "final BsonDocument definition",
    "info" : "SingleVariableDeclaration[2645-2674]:SingleVariableDeclaration[2638-2667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2676-2821]:Block[2669-2814]"
  }, {
    "left" : "this.filename = filename;",
    "right" : "this.filename = filename;",
    "info" : "ExpressionStatement[2686-2711]:ExpressionStatement[2679-2704]"
  }, {
    "left" : "this.description = description;",
    "right" : "this.description = description;",
    "info" : "ExpressionStatement[2720-2751]:ExpressionStatement[2713-2744]"
  }, {
    "left" : "this.data = data;",
    "right" : "this.data = data;",
    "info" : "ExpressionStatement[2760-2777]:ExpressionStatement[2753-2770]"
  }, {
    "left" : "this.definition = definition;",
    "right" : "this.definition = definition;",
    "info" : "ExpressionStatement[2786-2815]:ExpressionStatement[2779-2808]"
  }, {
    "left" : "@Before",
    "right" : "@Before",
    "info" : "MarkerAnnotation[2827-2834]:MarkerAnnotation[2820-2827]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2839-2845]:Modifier[2832-2838]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2846-2850]:PrimitiveType[2839-2843]"
  }, {
    "left" : "setUp",
    "right" : "setUp",
    "info" : "SimpleName[2851-2856]:SimpleName[2844-2849]"
  }, {
    "left" : "InterruptedException",
    "right" : "InterruptedException",
    "info" : "SimpleType[2866-2886]:SimpleType[2859-2879]"
  }, {
    "left" : "ExecutionException",
    "right" : "ExecutionException",
    "info" : "SimpleType[2888-2906]:SimpleType[2881-2899]"
  }, {
    "left" : "TimeoutException",
    "right" : "TimeoutException",
    "info" : "SimpleType[2908-2924]:SimpleType[2901-2917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2925-3494]:Block[2918-3487]"
  }, {
    "left" : "collection = Fixture.initializeCollection(new MongoNamespace(getDefaultDatabaseName(), getClass().getName()))\n                .withDocumentClass(BsonDocument.class);",
    "right" : "collection = Fixture.initializeCollection(new MongoNamespace(getDefaultDatabaseName(), getClass().getName()))\n                .withDocumentClass(BsonDocument.class);",
    "info" : "ExpressionStatement[2935-3100]:ExpressionStatement[2928-3093]"
  }, {
    "left" : "new MongoOperation<Void>() {\n            @Override\n            void execute() {\n                List<BsonDocument> documents = new ArrayList<BsonDocument>();\n                for (BsonValue document : data) {\n                    documents.add(document.asDocument());\n                }\n                collection.insertMany(documents, getCallback());\n            }\n        }.get();",
    "right" : "new MongoOperation<Void>() {\n            @Override\n            void execute() {\n                List<BsonDocument> documents = new ArrayList<BsonDocument>();\n                for (BsonValue document : data) {\n                    documents.add(document.asDocument());\n                }\n                collection.insertMany(documents, getCallback());\n            }\n        }.get();",
    "info" : "ExpressionStatement[3109-3488]:ExpressionStatement[3102-3481]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3150-3159]:MarkerAnnotation[3143-3152]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3172-3176]:PrimitiveType[3165-3169]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[3177-3184]:SimpleName[3170-3177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3187-3471]:Block[3180-3464]"
  }, {
    "left" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "right" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "info" : "VariableDeclarationStatement[3205-3266]:VariableDeclarationStatement[3198-3259]"
  }, {
    "left" : "for (BsonValue document : data)",
    "right" : "for (BsonValue document : data)",
    "info" : "EnhancedForStatement[3283-3392]:EnhancedForStatement[3276-3385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3315-3392]:Block[3308-3385]"
  }, {
    "left" : "documents.add(document.asDocument());",
    "right" : "documents.add(document.asDocument());",
    "info" : "ExpressionStatement[3337-3374]:ExpressionStatement[3330-3367]"
  }, {
    "left" : "collection.insertMany(documents, getCallback());",
    "right" : "collection.insertMany(documents, getCallback());",
    "info" : "ExpressionStatement[3409-3457]:ExpressionStatement[3402-3450]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[3500-3505]:MarkerAnnotation[3493-3498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3510-3516]:Modifier[3503-3509]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3517-3521]:PrimitiveType[3510-3514]"
  }, {
    "left" : "shouldPassAllOutcomes",
    "right" : "shouldPassAllOutcomes",
    "info" : "SimpleName[3522-3543]:SimpleName[3515-3536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3546-4003]:Block[3539-3996]"
  }, {
    "left" : "BsonDocument outcome = getOperationMongoOperations(definition.getDocument(\"operation\"));",
    "right" : "BsonDocument outcome = getOperationMongoOperations(definition.getDocument(\"operation\"));",
    "info" : "VariableDeclarationStatement[3556-3644]:VariableDeclarationStatement[3549-3637]"
  }, {
    "left" : "BsonDocument expectedOutcome = definition.getDocument(\"outcome\");",
    "right" : "BsonDocument expectedOutcome = definition.getDocument(\"outcome\");",
    "info" : "VariableDeclarationStatement[3653-3718]:VariableDeclarationStatement[3646-3711]"
  }, {
    "left" : "if (checkResult())",
    "right" : "if (checkResult())",
    "info" : "IfStatement[3728-3851]:IfStatement[3721-3844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3747-3851]:Block[3740-3844]"
  }, {
    "left" : "assertEquals(description, expectedOutcome.get(\"result\"), outcome.get(\"result\"));",
    "right" : "assertEquals(description, expectedOutcome.get(\"result\"), outcome.get(\"result\"));",
    "info" : "ExpressionStatement[3761-3841]:ExpressionStatement[3754-3834]"
  }, {
    "left" : "if (expectedOutcome.containsKey(\"collection\"))",
    "right" : "if (expectedOutcome.containsKey(\"collection\"))",
    "info" : "IfStatement[3860-3997]:IfStatement[3853-3990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3907-3997]:Block[3900-3990]"
  }, {
    "left" : "assertCollectionEquals(expectedOutcome.getDocument(\"collection\"));",
    "right" : "assertCollectionEquals(expectedOutcome.getDocument(\"collection\"));",
    "info" : "ExpressionStatement[3921-3987]:ExpressionStatement[3914-3980]"
  }, {
    "left" : "@Parameterized.Parameters(name = \"{1}\")",
    "right" : "@Parameterized.Parameters(name = \"{1}\")",
    "info" : "NormalAnnotation[4009-4048]:NormalAnnotation[4002-4041]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4053-4059]:Modifier[4046-4052]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4060-4066]:Modifier[4053-4059]"
  }, {
    "left" : "Collection<Object[]>",
    "right" : "Collection<Object[]>",
    "info" : "ParameterizedType[4067-4087]:ParameterizedType[4060-4080]"
  }, {
    "left" : "data",
    "right" : "data",
    "info" : "SimpleName[4088-4092]:SimpleName[4081-4085]"
  }, {
    "left" : "URISyntaxException",
    "right" : "URISyntaxException",
    "info" : "SimpleType[4102-4120]:SimpleType[4095-4113]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[4122-4133]:SimpleType[4115-4126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4134-4653]:Block[4127-4646]"
  }, {
    "left" : "List<Object[]> data = new ArrayList<Object[]>();",
    "right" : "List<Object[]> data = new ArrayList<Object[]>();",
    "info" : "VariableDeclarationStatement[4144-4192]:VariableDeclarationStatement[4137-4185]"
  }, {
    "left" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/crud\"))",
    "right" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/crud\"))",
    "info" : "EnhancedForStatement[4201-4626]:EnhancedForStatement[4194-4619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4263-4626]:Block[4256-4619]"
  }, {
    "left" : "BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);",
    "right" : "BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);",
    "info" : "VariableDeclarationStatement[4277-4349]:VariableDeclarationStatement[4270-4342]"
  }, {
    "left" : "for (BsonValue test : testDocument.getArray(\"tests\"))",
    "right" : "for (BsonValue test : testDocument.getArray(\"tests\"))",
    "info" : "EnhancedForStatement[4362-4616]:EnhancedForStatement[4355-4609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4416-4616]:Block[4409-4609]"
  }, {
    "left" : "data.add(new Object[]{file.getName(), test.asDocument().getString(\"description\").getValue(),\n                        testDocument.getArray(\"data\"), test.asDocument()});",
    "right" : "data.add(new Object[]{file.getName(), test.asDocument().getString(\"description\").getValue(),\n                        testDocument.getArray(\"data\"), test.asDocument()});",
    "info" : "ExpressionStatement[4434-4602]:ExpressionStatement[4427-4595]"
  }, {
    "left" : "return data;",
    "right" : "return data;",
    "info" : "ReturnStatement[4635-4647]:ReturnStatement[4628-4640]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4659-4666]:Modifier[4652-4659]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4667-4674]:PrimitiveType[4660-4667]"
  }, {
    "left" : "checkResult",
    "right" : "checkResult",
    "info" : "SimpleName[4675-4686]:SimpleName[4668-4679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4689-5152]:Block[4682-5145]"
  }, {
    "left" : "if (filename.contains(\"insert\"))",
    "right" : "if (filename.contains(\"insert\"))",
    "info" : "IfStatement[4699-5125]:IfStatement[4692-5118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4732-4829]:Block[4725-4822]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4806-4819]:ReturnStatement[4799-4812]"
  }, {
    "left" : "if (!serverVersionAtLeast(asList(3, 0, 0))\n                && description.contains(\"when no documents match with upsert returning the document before modification\"))",
    "right" : "if (!serverVersionAtLeast(asList(3, 0, 0))\n                && description.contains(\"when no documents match with upsert returning the document before modification\"))",
    "info" : "IfStatement[4835-5125]:IfStatement[4828-5118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5001-5125]:Block[4994-5118]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5102-5115]:ReturnStatement[5095-5108]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[5134-5146]:ReturnStatement[5127-5139]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5158-5165]:Modifier[5151-5158]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5166-5170]:PrimitiveType[5159-5163]"
  }, {
    "left" : "assertCollectionEquals",
    "right" : "assertCollectionEquals",
    "info" : "SimpleName[5171-5193]:SimpleName[5164-5186]"
  }, {
    "left" : "final BsonDocument expectedCollection",
    "right" : "final BsonDocument expectedCollection",
    "info" : "SingleVariableDeclaration[5194-5231]:SingleVariableDeclaration[5187-5224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5233-5879]:Block[5226-5872]"
  }, {
    "left" : "BsonArray actual = new MongoOperation<BsonArray>() {\n            @Override\n            void execute() {\n                MongoCollection<BsonDocument> collectionToCompare = collection;\n                if (expectedCollection.containsKey(\"name\")) {\n                    collectionToCompare = getDefaultDatabase().getCollection(expectedCollection.getString(\"name\").getValue(),\n                            BsonDocument.class);\n                }\n                collectionToCompare.find().into(new BsonArray(), getCallback());\n            }\n        }.get();",
    "right" : "BsonArray actual = new MongoOperation<BsonArray>() {\n            @Override\n            void execute() {\n                MongoCollection<BsonDocument> collectionToCompare = collection;\n                if (expectedCollection.containsKey(\"name\")) {\n                    collectionToCompare = getDefaultDatabase().getCollection(expectedCollection.getString(\"name\").getValue(),\n                            BsonDocument.class);\n                }\n                collectionToCompare.find().into(new BsonArray(), getCallback());\n            }\n        }.get();",
    "info" : "VariableDeclarationStatement[5243-5793]:VariableDeclarationStatement[5236-5786]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5308-5317]:MarkerAnnotation[5301-5310]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5330-5334]:PrimitiveType[5323-5327]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[5335-5342]:SimpleName[5328-5335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5345-5776]:Block[5338-5769]"
  }, {
    "left" : "MongoCollection<BsonDocument> collectionToCompare = collection;",
    "right" : "MongoCollection<BsonDocument> collectionToCompare = collection;",
    "info" : "VariableDeclarationStatement[5363-5426]:VariableDeclarationStatement[5356-5419]"
  }, {
    "left" : "if (expectedCollection.containsKey(\"name\"))",
    "right" : "if (expectedCollection.containsKey(\"name\"))",
    "info" : "IfStatement[5443-5681]:IfStatement[5436-5674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5487-5681]:Block[5480-5674]"
  }, {
    "left" : "collectionToCompare = getDefaultDatabase().getCollection(expectedCollection.getString(\"name\").getValue(),\n                            BsonDocument.class);",
    "right" : "collectionToCompare = getDefaultDatabase().getCollection(expectedCollection.getString(\"name\").getValue(),\n                            BsonDocument.class);",
    "info" : "ExpressionStatement[5509-5663]:ExpressionStatement[5502-5656]"
  }, {
    "left" : "collectionToCompare.find().into(new BsonArray(), getCallback());",
    "right" : "collectionToCompare.find().into(new BsonArray(), getCallback());",
    "info" : "ExpressionStatement[5698-5762]:ExpressionStatement[5691-5755]"
  }, {
    "left" : "assertEquals(description, expectedCollection.getArray(\"data\"), actual);",
    "right" : "assertEquals(description, expectedCollection.getArray(\"data\"), actual);",
    "info" : "ExpressionStatement[5802-5873]:ExpressionStatement[5795-5866]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5885-5892]:Modifier[5878-5885]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[5893-5905]:SimpleType[5886-5898]"
  }, {
    "left" : "getOperationMongoOperations",
    "right" : "getOperationMongoOperations",
    "info" : "SimpleName[5906-5933]:SimpleName[5899-5926]"
  }, {
    "left" : "final BsonDocument operation",
    "right" : "final BsonDocument operation",
    "info" : "SingleVariableDeclaration[5934-5962]:SingleVariableDeclaration[5927-5955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5964-7020]:Block[5957-7013]"
  }, {
    "left" : "String name = operation.getString(\"name\").getValue();",
    "right" : "String name = operation.getString(\"name\").getValue();",
    "info" : "VariableDeclarationStatement[5974-6027]:VariableDeclarationStatement[5967-6020]"
  }, {
    "left" : "BsonDocument arguments = operation.getDocument(\"arguments\");",
    "right" : "BsonDocument arguments = operation.getDocument(\"arguments\");",
    "info" : "VariableDeclarationStatement[6036-6096]:VariableDeclarationStatement[6029-6089]"
  }, {
    "left" : "String methodName = \"get\" + name.substring(0, 1).toUpperCase() + name.substring(1) + \"MongoOperation\";",
    "right" : "String methodName = \"get\" + name.substring(0, 1).toUpperCase() + name.substring(1) + \"MongoOperation\";",
    "info" : "VariableDeclarationStatement[6106-6208]:VariableDeclarationStatement[6099-6201]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6217-7014]:TryStatement[6210-7007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6221-6404]:Block[6214-6397]"
  }, {
    "left" : "Method method = getClass().getDeclaredMethod(methodName, BsonDocument.class);",
    "right" : "Method method = getClass().getDeclaredMethod(methodName, BsonDocument.class);",
    "info" : "VariableDeclarationStatement[6235-6312]:VariableDeclarationStatement[6228-6305]"
  }, {
    "left" : "return convertMongoOperationToResult(method.invoke(this, arguments));",
    "right" : "return convertMongoOperationToResult(method.invoke(this, arguments));",
    "info" : "ReturnStatement[6325-6394]:ReturnStatement[6318-6387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6437-6543]:Block[6430-6536]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"No handler for operation \" + methodName);",
    "right" : "throw new UnsupportedOperationException(\"No handler for operation \" + methodName);",
    "info" : "ThrowStatement[6451-6533]:ThrowStatement[6444-6526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6580-6862]:Block[6573-6855]"
  }, {
    "left" : "if (e.getTargetException() instanceof AssumptionViolatedException)",
    "right" : "if (e.getTargetException() instanceof AssumptionViolatedException)",
    "info" : "IfStatement[6594-6752]:IfStatement[6587-6745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6661-6752]:Block[6654-6745]"
  }, {
    "left" : "throw (AssumptionViolatedException) e.getTargetException();",
    "right" : "throw (AssumptionViolatedException) e.getTargetException();",
    "info" : "ThrowStatement[6679-6738]:ThrowStatement[6672-6731]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Invalid handler for operation \" + methodName);",
    "right" : "throw new UnsupportedOperationException(\"Invalid handler for operation \" + methodName);",
    "info" : "ThrowStatement[6765-6852]:ThrowStatement[6758-6845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6896-7014]:Block[6889-7007]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Invalid handler access for operation \" + methodName);",
    "right" : "throw new UnsupportedOperationException(\"Invalid handler access for operation \" + methodName);",
    "info" : "ThrowStatement[6910-7004]:ThrowStatement[6903-6997]"
  }, {
    "left" : "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
    "right" : "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
    "info" : "SingleMemberAnnotation[7026-7070]:SingleMemberAnnotation[7019-7063]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7075-7082]:Modifier[7068-7075]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[7083-7095]:SimpleType[7076-7088]"
  }, {
    "left" : "convertMongoOperationToResult",
    "right" : "convertMongoOperationToResult",
    "info" : "SimpleName[7096-7125]:SimpleName[7089-7118]"
  }, {
    "left" : "final Object result",
    "right" : "final Object result",
    "info" : "SingleVariableDeclaration[7126-7145]:SingleVariableDeclaration[7119-7138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7147-8294]:Block[7140-8287]"
  }, {
    "left" : "if (result instanceof MongoOperationLong)",
    "right" : "if (result instanceof MongoOperationLong)",
    "info" : "IfStatement[7157-8190]:IfStatement[7150-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7199-7302]:Block[7192-7295]"
  }, {
    "left" : "return toResult(new BsonInt32(((MongoOperationLong) result).get().intValue()));",
    "right" : "return toResult(new BsonInt32(((MongoOperationLong) result).get().intValue()));",
    "info" : "ReturnStatement[7213-7292]:ReturnStatement[7206-7285]"
  }, {
    "left" : "if (result instanceof MongoOperationVoid)",
    "right" : "if (result instanceof MongoOperationVoid)",
    "info" : "IfStatement[7308-8190]:IfStatement[7301-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7350-7455]:Block[7343-7448]"
  }, {
    "left" : "((MongoOperationVoid) result).get();",
    "right" : "((MongoOperationVoid) result).get();",
    "info" : "ExpressionStatement[7364-7400]:ExpressionStatement[7357-7393]"
  }, {
    "left" : "return toResult(BsonNull.VALUE);",
    "right" : "return toResult(BsonNull.VALUE);",
    "info" : "ReturnStatement[7413-7445]:ReturnStatement[7406-7438]"
  }, {
    "left" : "if (result instanceof MongoOperationBsonDocument)",
    "right" : "if (result instanceof MongoOperationBsonDocument)",
    "info" : "IfStatement[7461-8190]:IfStatement[7454-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7511-7588]:Block[7504-7581]"
  }, {
    "left" : "return toResult((MongoOperationBsonDocument) result);",
    "right" : "return toResult((MongoOperationBsonDocument) result);",
    "info" : "ReturnStatement[7525-7578]:ReturnStatement[7518-7571]"
  }, {
    "left" : "if (result instanceof MongoOperationUpdateResult)",
    "right" : "if (result instanceof MongoOperationUpdateResult)",
    "info" : "IfStatement[7594-8190]:IfStatement[7587-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7644-7721]:Block[7637-7714]"
  }, {
    "left" : "return toResult((MongoOperationUpdateResult) result);",
    "right" : "return toResult((MongoOperationUpdateResult) result);",
    "info" : "ReturnStatement[7658-7711]:ReturnStatement[7651-7704]"
  }, {
    "left" : "if (result instanceof MongoOperationDeleteResult)",
    "right" : "if (result instanceof MongoOperationDeleteResult)",
    "info" : "IfStatement[7727-8190]:IfStatement[7720-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7777-7854]:Block[7770-7847]"
  }, {
    "left" : "return toResult((MongoOperationDeleteResult) result);",
    "right" : "return toResult((MongoOperationDeleteResult) result);",
    "info" : "ReturnStatement[7791-7844]:ReturnStatement[7784-7837]"
  }, {
    "left" : "if (result instanceof DistinctIterable<?>)",
    "right" : "if (result instanceof DistinctIterable<?>)",
    "info" : "IfStatement[7860-8190]:IfStatement[7853-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7903-7981]:Block[7896-7974]"
  }, {
    "left" : "return toResult((DistinctIterable<BsonInt32>) result);",
    "right" : "return toResult((DistinctIterable<BsonInt32>) result);",
    "info" : "ReturnStatement[7917-7971]:ReturnStatement[7910-7964]"
  }, {
    "left" : "if (result instanceof MongoIterable<?>)",
    "right" : "if (result instanceof MongoIterable<?>)",
    "info" : "IfStatement[7987-8190]:IfStatement[7980-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8027-8091]:Block[8020-8084]"
  }, {
    "left" : "return toResult((MongoIterable) result);",
    "right" : "return toResult((MongoIterable) result);",
    "info" : "ReturnStatement[8041-8081]:ReturnStatement[8034-8074]"
  }, {
    "left" : "if (result instanceof BsonValue)",
    "right" : "if (result instanceof BsonValue)",
    "info" : "IfStatement[8097-8190]:IfStatement[8090-8183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8130-8190]:Block[8123-8183]"
  }, {
    "left" : "return toResult((BsonValue) result);",
    "right" : "return toResult((BsonValue) result);",
    "info" : "ReturnStatement[8144-8180]:ReturnStatement[8137-8173]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Unknown object type cannot convert: \" + result);",
    "right" : "throw new UnsupportedOperationException(\"Unknown object type cannot convert: \" + result);",
    "info" : "ThrowStatement[8199-8288]:ThrowStatement[8192-8281]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8300-8307]:Modifier[8293-8300]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[8308-8320]:SimpleType[8301-8313]"
  }, {
    "left" : "toResult",
    "right" : "toResult",
    "info" : "SimpleName[8321-8329]:SimpleName[8314-8322]"
  }, {
    "left" : "final MongoOperationBsonDocument results",
    "right" : "final MongoOperationBsonDocument results",
    "info" : "SingleVariableDeclaration[8330-8370]:SingleVariableDeclaration[8323-8363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8372-8419]:Block[8365-8412]"
  }, {
    "left" : "return toResult(results.get());",
    "right" : "return toResult(results.get());",
    "info" : "ReturnStatement[8382-8413]:ReturnStatement[8375-8406]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8425-8432]:Modifier[8418-8425]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[8433-8445]:SimpleType[8426-8438]"
  }, {
    "left" : "toResult",
    "right" : "toResult",
    "info" : "SimpleName[8446-8454]:SimpleName[8439-8447]"
  }, {
    "left" : "final DistinctIterable<BsonInt32> results",
    "right" : "final DistinctIterable<BsonInt32> results",
    "info" : "SingleVariableDeclaration[8455-8496]:SingleVariableDeclaration[8448-8489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8498-8708]:Block[8491-8701]"
  }, {
    "left" : "return toResult(new MongoOperation<BsonArray>() {\n            @Override\n            void execute() {\n                results.into(new BsonArray(), getCallback());\n            }\n        }.get());",
    "right" : "return toResult(new MongoOperation<BsonArray>() {\n            @Override\n            void execute() {\n                results.into(new BsonArray(), getCallback());\n            }\n        }.get());",
    "info" : "ReturnStatement[8508-8702]:ReturnStatement[8501-8695]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8570-8579]:MarkerAnnotation[8563-8572]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8592-8596]:PrimitiveType[8585-8589]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[8597-8604]:SimpleName[8590-8597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8607-8684]:Block[8600-8677]"
  }, {
    "left" : "results.into(new BsonArray(), getCallback());",
    "right" : "results.into(new BsonArray(), getCallback());",
    "info" : "ExpressionStatement[8625-8670]:ExpressionStatement[8618-8663]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8714-8721]:Modifier[8707-8714]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[8722-8734]:SimpleType[8715-8727]"
  }, {
    "left" : "toResult",
    "right" : "toResult",
    "info" : "SimpleName[8735-8743]:SimpleName[8728-8736]"
  }, {
    "left" : "final MongoIterable<BsonDocument> results",
    "right" : "final MongoIterable<BsonDocument> results",
    "info" : "SingleVariableDeclaration[8744-8785]:SingleVariableDeclaration[8737-8778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8787-8997]:Block[8780-8990]"
  }, {
    "left" : "return toResult(new MongoOperation<BsonArray>() {\n            @Override\n            void execute() {\n                results.into(new BsonArray(), getCallback());\n            }\n        }.get());",
    "right" : "return toResult(new MongoOperation<BsonArray>() {\n            @Override\n            void execute() {\n                results.into(new BsonArray(), getCallback());\n            }\n        }.get());",
    "info" : "ReturnStatement[8797-8991]:ReturnStatement[8790-8984]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8859-8868]:MarkerAnnotation[8852-8861]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8881-8885]:PrimitiveType[8874-8878]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[8886-8893]:SimpleName[8879-8886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8896-8973]:Block[8889-8966]"
  }, {
    "left" : "results.into(new BsonArray(), getCallback());",
    "right" : "results.into(new BsonArray(), getCallback());",
    "info" : "ExpressionStatement[8914-8959]:ExpressionStatement[8907-8952]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9003-9010]:Modifier[8996-9003]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[9011-9023]:SimpleType[9004-9016]"
  }, {
    "left" : "toResult",
    "right" : "toResult",
    "info" : "SimpleName[9024-9032]:SimpleName[9017-9025]"
  }, {
    "left" : "final MongoOperationUpdateResult operation",
    "right" : "final MongoOperationUpdateResult operation",
    "info" : "SingleVariableDeclaration[9033-9075]:SingleVariableDeclaration[9026-9068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9077-9627]:Block[9070-9620]"
  }, {
    "left" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "right" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "info" : "ExpressionStatement[9087-9137]:ExpressionStatement[9080-9130]"
  }, {
    "left" : "UpdateResult updateResult = operation.get();",
    "right" : "UpdateResult updateResult = operation.get();",
    "info" : "VariableDeclarationStatement[9190-9234]:VariableDeclarationStatement[9183-9227]"
  }, {
    "left" : "BsonDocument resultDoc = new BsonDocument(\"matchedCount\", new BsonInt32((int) updateResult.getMatchedCount()))\n                .append(\"modifiedCount\", new BsonInt32((int) updateResult.getModifiedCount()));",
    "right" : "BsonDocument resultDoc = new BsonDocument(\"matchedCount\", new BsonInt32((int) updateResult.getMatchedCount()))\n                .append(\"modifiedCount\", new BsonInt32((int) updateResult.getModifiedCount()));",
    "info" : "VariableDeclarationStatement[9243-9449]:VariableDeclarationStatement[9236-9442]"
  }, {
    "left" : "if (updateResult.getUpsertedId() != null)",
    "right" : "if (updateResult.getUpsertedId() != null)",
    "info" : "IfStatement[9458-9585]:IfStatement[9451-9578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9500-9585]:Block[9493-9578]"
  }, {
    "left" : "resultDoc.append(\"upsertedId\", updateResult.getUpsertedId());",
    "right" : "resultDoc.append(\"upsertedId\", updateResult.getUpsertedId());",
    "info" : "ExpressionStatement[9514-9575]:ExpressionStatement[9507-9568]"
  }, {
    "left" : "return toResult(resultDoc);",
    "right" : "return toResult(resultDoc);",
    "info" : "ReturnStatement[9594-9621]:ReturnStatement[9587-9614]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9633-9640]:Modifier[9626-9633]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[9641-9653]:SimpleType[9634-9646]"
  }, {
    "left" : "toResult",
    "right" : "toResult",
    "info" : "SimpleName[9654-9662]:SimpleName[9647-9655]"
  }, {
    "left" : "final MongoOperationDeleteResult operation",
    "right" : "final MongoOperationDeleteResult operation",
    "info" : "SingleVariableDeclaration[9663-9705]:SingleVariableDeclaration[9656-9698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9707-9879]:Block[9700-9872]"
  }, {
    "left" : "DeleteResult deleteResult = operation.get();",
    "right" : "DeleteResult deleteResult = operation.get();",
    "info" : "VariableDeclarationStatement[9717-9761]:VariableDeclarationStatement[9710-9754]"
  }, {
    "left" : "return toResult(new BsonDocument(\"deletedCount\", new BsonInt32((int) deleteResult.getDeletedCount())));",
    "right" : "return toResult(new BsonDocument(\"deletedCount\", new BsonInt32((int) deleteResult.getDeletedCount())));",
    "info" : "ReturnStatement[9770-9873]:ReturnStatement[9763-9866]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9885-9892]:Modifier[9878-9885]"
  }, {
    "left" : "BsonDocument",
    "right" : "BsonDocument",
    "info" : "SimpleType[9893-9905]:SimpleType[9886-9898]"
  }, {
    "left" : "toResult",
    "right" : "toResult",
    "info" : "SimpleName[9906-9914]:SimpleName[9899-9907]"
  }, {
    "left" : "final BsonValue results",
    "right" : "final BsonValue results",
    "info" : "SingleVariableDeclaration[9915-9938]:SingleVariableDeclaration[9908-9931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9940-10034]:Block[9933-10027]"
  }, {
    "left" : "return new BsonDocument(\"result\", results != null ? results : BsonNull.VALUE);",
    "right" : "return new BsonDocument(\"result\", results != null ? results : BsonNull.VALUE);",
    "info" : "ReturnStatement[9950-10028]:ReturnStatement[9943-10021]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10040-10047]:Modifier[10033-10040]"
  }, {
    "left" : "AggregateIterable<BsonDocument>",
    "right" : "AggregateIterable<BsonDocument>",
    "info" : "ParameterizedType[10048-10079]:ParameterizedType[10041-10072]"
  }, {
    "left" : "getAggregateMongoOperation",
    "right" : "getAggregateMongoOperation",
    "info" : "SimpleName[10080-10106]:SimpleName[10073-10099]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[10107-10135]:SingleVariableDeclaration[10100-10128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10137-10556]:Block[10130-10549]"
  }, {
    "left" : "if (!serverVersionAtLeast(asList(2, 6, 0)))",
    "right" : "if (!serverVersionAtLeast(asList(2, 6, 0)))",
    "info" : "IfStatement[10147-10257]:IfStatement[10140-10250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10191-10257]:Block[10184-10250]"
  }, {
    "left" : "assumeFalse(description.contains(\"$out\"));",
    "right" : "assumeFalse(description.contains(\"$out\"));",
    "info" : "ExpressionStatement[10205-10247]:ExpressionStatement[10198-10240]"
  }, {
    "left" : "List<BsonDocument> pipeline = new ArrayList<BsonDocument>();",
    "right" : "List<BsonDocument> pipeline = new ArrayList<BsonDocument>();",
    "info" : "VariableDeclarationStatement[10267-10327]:VariableDeclarationStatement[10260-10320]"
  }, {
    "left" : "for (BsonValue stage : arguments.getArray(\"pipeline\"))",
    "right" : "for (BsonValue stage : arguments.getArray(\"pipeline\"))",
    "info" : "EnhancedForStatement[10336-10448]:EnhancedForStatement[10329-10441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10391-10448]:Block[10384-10441]"
  }, {
    "left" : "pipeline.add(stage.asDocument());",
    "right" : "pipeline.add(stage.asDocument());",
    "info" : "ExpressionStatement[10405-10438]:ExpressionStatement[10398-10431]"
  }, {
    "left" : "return collection.aggregate(pipeline).batchSize(arguments.getNumber(\"batchSize\").intValue());",
    "right" : "return collection.aggregate(pipeline).batchSize(arguments.getNumber(\"batchSize\").intValue());",
    "info" : "ReturnStatement[10457-10550]:ReturnStatement[10450-10543]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10562-10569]:Modifier[10555-10562]"
  }, {
    "left" : "MongoOperationLong",
    "right" : "MongoOperationLong",
    "info" : "SimpleType[10570-10588]:SimpleType[10563-10581]"
  }, {
    "left" : "getCountMongoOperation",
    "right" : "getCountMongoOperation",
    "info" : "SimpleName[10589-10611]:SimpleName[10582-10604]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[10612-10640]:SingleVariableDeclaration[10605-10633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10642-11210]:Block[10635-11203]"
  }, {
    "left" : "return new MongoOperationLong() {\n            @Override\n            void execute() {\n                CountOptions options = new CountOptions();\n                if (arguments.containsKey(\"skip\")) {\n                    options.skip(arguments.getNumber(\"skip\").intValue());\n                }\n                if (arguments.containsKey(\"limit\")) {\n                    options.limit(arguments.getNumber(\"limit\").intValue());\n                }\n                collection.count(arguments.getDocument(\"filter\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationLong() {\n            @Override\n            void execute() {\n                CountOptions options = new CountOptions();\n                if (arguments.containsKey(\"skip\")) {\n                    options.skip(arguments.getNumber(\"skip\").intValue());\n                }\n                if (arguments.containsKey(\"limit\")) {\n                    options.limit(arguments.getNumber(\"limit\").intValue());\n                }\n                collection.count(arguments.getDocument(\"filter\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[10652-11204]:ReturnStatement[10645-11197]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10698-10707]:MarkerAnnotation[10691-10700]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10720-10724]:PrimitiveType[10713-10717]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[10725-10732]:SimpleName[10718-10725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10735-11193]:Block[10728-11186]"
  }, {
    "left" : "CountOptions options = new CountOptions();",
    "right" : "CountOptions options = new CountOptions();",
    "info" : "VariableDeclarationStatement[10753-10795]:VariableDeclarationStatement[10746-10788]"
  }, {
    "left" : "if (arguments.containsKey(\"skip\"))",
    "right" : "if (arguments.containsKey(\"skip\"))",
    "info" : "IfStatement[10812-10940]:IfStatement[10805-10933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10847-10940]:Block[10840-10933]"
  }, {
    "left" : "options.skip(arguments.getNumber(\"skip\").intValue());",
    "right" : "options.skip(arguments.getNumber(\"skip\").intValue());",
    "info" : "ExpressionStatement[10869-10922]:ExpressionStatement[10862-10915]"
  }, {
    "left" : "if (arguments.containsKey(\"limit\"))",
    "right" : "if (arguments.containsKey(\"limit\"))",
    "info" : "IfStatement[10957-11088]:IfStatement[10950-11081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10993-11088]:Block[10986-11081]"
  }, {
    "left" : "options.limit(arguments.getNumber(\"limit\").intValue());",
    "right" : "options.limit(arguments.getNumber(\"limit\").intValue());",
    "info" : "ExpressionStatement[11015-11070]:ExpressionStatement[11008-11063]"
  }, {
    "left" : "collection.count(arguments.getDocument(\"filter\"), options, getCallback());",
    "right" : "collection.count(arguments.getDocument(\"filter\"), options, getCallback());",
    "info" : "ExpressionStatement[11105-11179]:ExpressionStatement[11098-11172]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11216-11223]:Modifier[11209-11216]"
  }, {
    "left" : "DistinctIterable<BsonInt32>",
    "right" : "DistinctIterable<BsonInt32>",
    "info" : "ParameterizedType[11224-11251]:ParameterizedType[11217-11244]"
  }, {
    "left" : "getDistinctMongoOperation",
    "right" : "getDistinctMongoOperation",
    "info" : "SimpleName[11252-11277]:SimpleName[11245-11270]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[11278-11306]:SingleVariableDeclaration[11271-11299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11308-11446]:Block[11301-11439]"
  }, {
    "left" : "return collection.distinct(arguments.getString(\"fieldName\").getValue(), arguments.getDocument(\"filter\"), BsonInt32.class);",
    "right" : "return collection.distinct(arguments.getString(\"fieldName\").getValue(), arguments.getDocument(\"filter\"), BsonInt32.class);",
    "info" : "ReturnStatement[11318-11440]:ReturnStatement[11311-11433]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11452-11459]:Modifier[11445-11452]"
  }, {
    "left" : "FindIterable<BsonDocument>",
    "right" : "FindIterable<BsonDocument>",
    "info" : "ParameterizedType[11460-11486]:ParameterizedType[11453-11479]"
  }, {
    "left" : "getFindMongoOperation",
    "right" : "getFindMongoOperation",
    "info" : "SimpleName[11487-11508]:SimpleName[11480-11501]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[11509-11537]:SingleVariableDeclaration[11502-11530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11539-12071]:Block[11532-12064]"
  }, {
    "left" : "FindIterable<BsonDocument> findIterable = collection.find(arguments.getDocument(\"filter\"));",
    "right" : "FindIterable<BsonDocument> findIterable = collection.find(arguments.getDocument(\"filter\"));",
    "info" : "VariableDeclarationStatement[11549-11640]:VariableDeclarationStatement[11542-11633]"
  }, {
    "left" : "if (arguments.containsKey(\"skip\"))",
    "right" : "if (arguments.containsKey(\"skip\"))",
    "info" : "IfStatement[11649-11766]:IfStatement[11642-11759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11684-11766]:Block[11677-11759]"
  }, {
    "left" : "findIterable.skip(arguments.getNumber(\"skip\").intValue());",
    "right" : "findIterable.skip(arguments.getNumber(\"skip\").intValue());",
    "info" : "ExpressionStatement[11698-11756]:ExpressionStatement[11691-11749]"
  }, {
    "left" : "if (arguments.containsKey(\"limit\"))",
    "right" : "if (arguments.containsKey(\"limit\"))",
    "info" : "IfStatement[11775-11895]:IfStatement[11768-11888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11811-11895]:Block[11804-11888]"
  }, {
    "left" : "findIterable.limit(arguments.getNumber(\"limit\").intValue());",
    "right" : "findIterable.limit(arguments.getNumber(\"limit\").intValue());",
    "info" : "ExpressionStatement[11825-11885]:ExpressionStatement[11818-11878]"
  }, {
    "left" : "if (arguments.containsKey(\"batchSize\"))",
    "right" : "if (arguments.containsKey(\"batchSize\"))",
    "info" : "IfStatement[11904-12036]:IfStatement[11897-12029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11944-12036]:Block[11937-12029]"
  }, {
    "left" : "findIterable.batchSize(arguments.getNumber(\"batchSize\").intValue());",
    "right" : "findIterable.batchSize(arguments.getNumber(\"batchSize\").intValue());",
    "info" : "ExpressionStatement[11958-12026]:ExpressionStatement[11951-12019]"
  }, {
    "left" : "return findIterable;",
    "right" : "return findIterable;",
    "info" : "ReturnStatement[12045-12065]:ReturnStatement[12038-12058]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12077-12084]:Modifier[12070-12077]"
  }, {
    "left" : "MongoOperationDeleteResult",
    "right" : "MongoOperationDeleteResult",
    "info" : "SimpleType[12085-12111]:SimpleType[12078-12104]"
  }, {
    "left" : "getDeleteManyMongoOperation",
    "right" : "getDeleteManyMongoOperation",
    "info" : "SimpleName[12112-12139]:SimpleName[12105-12132]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[12140-12168]:SingleVariableDeclaration[12133-12161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12170-12390]:Block[12163-12383]"
  }, {
    "left" : "return new MongoOperationDeleteResult() {\n            @Override\n            void execute() {\n                collection.deleteMany(arguments.getDocument(\"filter\"), getCallback());\n            }\n        };",
    "right" : "return new MongoOperationDeleteResult() {\n            @Override\n            void execute() {\n                collection.deleteMany(arguments.getDocument(\"filter\"), getCallback());\n            }\n        };",
    "info" : "ReturnStatement[12180-12384]:ReturnStatement[12173-12377]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12234-12243]:MarkerAnnotation[12227-12236]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12256-12260]:PrimitiveType[12249-12253]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[12261-12268]:SimpleName[12254-12261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12271-12373]:Block[12264-12366]"
  }, {
    "left" : "collection.deleteMany(arguments.getDocument(\"filter\"), getCallback());",
    "right" : "collection.deleteMany(arguments.getDocument(\"filter\"), getCallback());",
    "info" : "ExpressionStatement[12289-12359]:ExpressionStatement[12282-12352]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12396-12403]:Modifier[12389-12396]"
  }, {
    "left" : "MongoOperationDeleteResult",
    "right" : "MongoOperationDeleteResult",
    "info" : "SimpleType[12404-12430]:SimpleType[12397-12423]"
  }, {
    "left" : "getDeleteOneMongoOperation",
    "right" : "getDeleteOneMongoOperation",
    "info" : "SimpleName[12431-12457]:SimpleName[12424-12450]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[12458-12486]:SingleVariableDeclaration[12451-12479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12488-12707]:Block[12481-12700]"
  }, {
    "left" : "return new MongoOperationDeleteResult() {\n            @Override\n            void execute() {\n                collection.deleteOne(arguments.getDocument(\"filter\"), getCallback());\n            }\n        };",
    "right" : "return new MongoOperationDeleteResult() {\n            @Override\n            void execute() {\n                collection.deleteOne(arguments.getDocument(\"filter\"), getCallback());\n            }\n        };",
    "info" : "ReturnStatement[12498-12701]:ReturnStatement[12491-12694]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12552-12561]:MarkerAnnotation[12545-12554]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12574-12578]:PrimitiveType[12567-12571]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[12579-12586]:SimpleName[12572-12579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12589-12690]:Block[12582-12683]"
  }, {
    "left" : "collection.deleteOne(arguments.getDocument(\"filter\"), getCallback());",
    "right" : "collection.deleteOne(arguments.getDocument(\"filter\"), getCallback());",
    "info" : "ExpressionStatement[12607-12676]:ExpressionStatement[12600-12669]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12713-12720]:Modifier[12706-12713]"
  }, {
    "left" : "MongoOperationBsonDocument",
    "right" : "MongoOperationBsonDocument",
    "info" : "SimpleType[12721-12747]:SimpleType[12714-12740]"
  }, {
    "left" : "getFindOneAndDeleteMongoOperation",
    "right" : "getFindOneAndDeleteMongoOperation",
    "info" : "SimpleName[12748-12781]:SimpleName[12741-12774]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[12782-12810]:SingleVariableDeclaration[12775-12803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12812-13418]:Block[12805-13411]"
  }, {
    "left" : "return new MongoOperationBsonDocument() {\n            @Override\n            void execute() {\n                FindOneAndDeleteOptions options = new FindOneAndDeleteOptions();\n                if (arguments.containsKey(\"projection\")) {\n                    options.projection(arguments.getDocument(\"projection\"));\n                }\n                if (arguments.containsKey(\"sort\")) {\n                    options.sort(arguments.getDocument(\"sort\"));\n                }\n                collection.findOneAndDelete(arguments.getDocument(\"filter\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationBsonDocument() {\n            @Override\n            void execute() {\n                FindOneAndDeleteOptions options = new FindOneAndDeleteOptions();\n                if (arguments.containsKey(\"projection\")) {\n                    options.projection(arguments.getDocument(\"projection\"));\n                }\n                if (arguments.containsKey(\"sort\")) {\n                    options.sort(arguments.getDocument(\"sort\"));\n                }\n                collection.findOneAndDelete(arguments.getDocument(\"filter\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[12822-13412]:ReturnStatement[12815-13405]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12876-12885]:MarkerAnnotation[12869-12878]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12898-12902]:PrimitiveType[12891-12895]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[12903-12910]:SimpleName[12896-12903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12913-13401]:Block[12906-13394]"
  }, {
    "left" : "FindOneAndDeleteOptions options = new FindOneAndDeleteOptions();",
    "right" : "FindOneAndDeleteOptions options = new FindOneAndDeleteOptions();",
    "info" : "VariableDeclarationStatement[12931-12995]:VariableDeclarationStatement[12924-12988]"
  }, {
    "left" : "if (arguments.containsKey(\"projection\"))",
    "right" : "if (arguments.containsKey(\"projection\"))",
    "info" : "IfStatement[13012-13149]:IfStatement[13005-13142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13053-13149]:Block[13046-13142]"
  }, {
    "left" : "options.projection(arguments.getDocument(\"projection\"));",
    "right" : "options.projection(arguments.getDocument(\"projection\"));",
    "info" : "ExpressionStatement[13075-13131]:ExpressionStatement[13068-13124]"
  }, {
    "left" : "if (arguments.containsKey(\"sort\"))",
    "right" : "if (arguments.containsKey(\"sort\"))",
    "info" : "IfStatement[13166-13285]:IfStatement[13159-13278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13201-13285]:Block[13194-13278]"
  }, {
    "left" : "options.sort(arguments.getDocument(\"sort\"));",
    "right" : "options.sort(arguments.getDocument(\"sort\"));",
    "info" : "ExpressionStatement[13223-13267]:ExpressionStatement[13216-13260]"
  }, {
    "left" : "collection.findOneAndDelete(arguments.getDocument(\"filter\"), options, getCallback());",
    "right" : "collection.findOneAndDelete(arguments.getDocument(\"filter\"), options, getCallback());",
    "info" : "ExpressionStatement[13302-13387]:ExpressionStatement[13295-13380]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13424-13431]:Modifier[13417-13424]"
  }, {
    "left" : "MongoOperationBsonDocument",
    "right" : "MongoOperationBsonDocument",
    "info" : "SimpleType[13432-13458]:SimpleType[13425-13451]"
  }, {
    "left" : "getFindOneAndReplaceMongoOperation",
    "right" : "getFindOneAndReplaceMongoOperation",
    "info" : "SimpleName[13459-13493]:SimpleName[13452-13486]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[13494-13522]:SingleVariableDeclaration[13487-13515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13524-14722]:Block[13517-14715]"
  }, {
    "left" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "right" : "assumeTrue(serverVersionAtLeast(asList(2, 6, 0)));",
    "info" : "ExpressionStatement[13534-13584]:ExpressionStatement[13527-13577]"
  }, {
    "left" : "return new MongoOperationBsonDocument() {\n            @Override\n            void execute() {\n                FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();\n                if (arguments.containsKey(\"projection\")) {\n                    options.projection(arguments.getDocument(\"projection\"));\n                }\n                if (arguments.containsKey(\"sort\")) {\n                    options.sort(arguments.getDocument(\"sort\"));\n                }\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                if (arguments.containsKey(\"returnDocument\")) {\n                    options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);\n                }\n                collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationBsonDocument() {\n            @Override\n            void execute() {\n                FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();\n                if (arguments.containsKey(\"projection\")) {\n                    options.projection(arguments.getDocument(\"projection\"));\n                }\n                if (arguments.containsKey(\"sort\")) {\n                    options.sort(arguments.getDocument(\"sort\"));\n                }\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                if (arguments.containsKey(\"returnDocument\")) {\n                    options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);\n                }\n                collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[13667-14716]:ReturnStatement[13660-14709]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13721-13730]:MarkerAnnotation[13714-13723]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13743-13747]:PrimitiveType[13736-13740]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[13748-13755]:SimpleName[13741-13748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13758-14705]:Block[13751-14698]"
  }, {
    "left" : "FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();",
    "right" : "FindOneAndReplaceOptions options = new FindOneAndReplaceOptions();",
    "info" : "VariableDeclarationStatement[13776-13842]:VariableDeclarationStatement[13769-13835]"
  }, {
    "left" : "if (arguments.containsKey(\"projection\"))",
    "right" : "if (arguments.containsKey(\"projection\"))",
    "info" : "IfStatement[13859-13996]:IfStatement[13852-13989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13900-13996]:Block[13893-13989]"
  }, {
    "left" : "options.projection(arguments.getDocument(\"projection\"));",
    "right" : "options.projection(arguments.getDocument(\"projection\"));",
    "info" : "ExpressionStatement[13922-13978]:ExpressionStatement[13915-13971]"
  }, {
    "left" : "if (arguments.containsKey(\"sort\"))",
    "right" : "if (arguments.containsKey(\"sort\"))",
    "info" : "IfStatement[14013-14132]:IfStatement[14006-14125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14048-14132]:Block[14041-14125]"
  }, {
    "left" : "options.sort(arguments.getDocument(\"sort\"));",
    "right" : "options.sort(arguments.getDocument(\"sort\"));",
    "info" : "ExpressionStatement[14070-14114]:ExpressionStatement[14063-14107]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[14149-14284]:IfStatement[14142-14277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14186-14284]:Block[14179-14277]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[14208-14266]:ExpressionStatement[14201-14259]"
  }, {
    "left" : "if (arguments.containsKey(\"returnDocument\"))",
    "right" : "if (arguments.containsKey(\"returnDocument\"))",
    "info" : "IfStatement[14301-14550]:IfStatement[14294-14543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14346-14550]:Block[14339-14543]"
  }, {
    "left" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);",
    "right" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);",
    "info" : "ExpressionStatement[14368-14532]:ExpressionStatement[14361-14525]"
  }, {
    "left" : "collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());",
    "right" : "collection.findOneAndReplace(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());",
    "info" : "ExpressionStatement[14567-14691]:ExpressionStatement[14560-14684]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14728-14735]:Modifier[14721-14728]"
  }, {
    "left" : "MongoOperationBsonDocument",
    "right" : "MongoOperationBsonDocument",
    "info" : "SimpleType[14736-14762]:SimpleType[14729-14755]"
  }, {
    "left" : "getFindOneAndUpdateMongoOperation",
    "right" : "getFindOneAndUpdateMongoOperation",
    "info" : "SimpleName[14763-14796]:SimpleName[14756-14789]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[14797-14825]:SingleVariableDeclaration[14790-14818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14827-15885]:Block[14820-15878]"
  }, {
    "left" : "return new MongoOperationBsonDocument() {\n            @Override\n            void execute() {\n\n                FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();\n                if (arguments.containsKey(\"projection\")) {\n                    options.projection(arguments.getDocument(\"projection\"));\n                }\n                if (arguments.containsKey(\"sort\")) {\n                    options.sort(arguments.getDocument(\"sort\"));\n                }\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                if (arguments.containsKey(\"returnDocument\")) {\n                    options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);\n                }\n                collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationBsonDocument() {\n            @Override\n            void execute() {\n\n                FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();\n                if (arguments.containsKey(\"projection\")) {\n                    options.projection(arguments.getDocument(\"projection\"));\n                }\n                if (arguments.containsKey(\"sort\")) {\n                    options.sort(arguments.getDocument(\"sort\"));\n                }\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                if (arguments.containsKey(\"returnDocument\")) {\n                    options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);\n                }\n                collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[14837-15879]:ReturnStatement[14830-15872]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14891-14900]:MarkerAnnotation[14884-14893]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14913-14917]:PrimitiveType[14906-14910]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[14918-14925]:SimpleName[14911-14918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14928-15868]:Block[14921-15861]"
  }, {
    "left" : "FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();",
    "right" : "FindOneAndUpdateOptions options = new FindOneAndUpdateOptions();",
    "info" : "VariableDeclarationStatement[14947-15011]:VariableDeclarationStatement[14940-15004]"
  }, {
    "left" : "if (arguments.containsKey(\"projection\"))",
    "right" : "if (arguments.containsKey(\"projection\"))",
    "info" : "IfStatement[15028-15165]:IfStatement[15021-15158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15069-15165]:Block[15062-15158]"
  }, {
    "left" : "options.projection(arguments.getDocument(\"projection\"));",
    "right" : "options.projection(arguments.getDocument(\"projection\"));",
    "info" : "ExpressionStatement[15091-15147]:ExpressionStatement[15084-15140]"
  }, {
    "left" : "if (arguments.containsKey(\"sort\"))",
    "right" : "if (arguments.containsKey(\"sort\"))",
    "info" : "IfStatement[15182-15301]:IfStatement[15175-15294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15217-15301]:Block[15210-15294]"
  }, {
    "left" : "options.sort(arguments.getDocument(\"sort\"));",
    "right" : "options.sort(arguments.getDocument(\"sort\"));",
    "info" : "ExpressionStatement[15239-15283]:ExpressionStatement[15232-15276]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[15318-15453]:IfStatement[15311-15446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15355-15453]:Block[15348-15446]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[15377-15435]:ExpressionStatement[15370-15428]"
  }, {
    "left" : "if (arguments.containsKey(\"returnDocument\"))",
    "right" : "if (arguments.containsKey(\"returnDocument\"))",
    "info" : "IfStatement[15470-15719]:IfStatement[15463-15712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15515-15719]:Block[15508-15712]"
  }, {
    "left" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);",
    "right" : "options.returnDocument(arguments.getString(\"returnDocument\").getValue().equals(\"After\") ? ReturnDocument.AFTER\n                            : ReturnDocument.BEFORE);",
    "info" : "ExpressionStatement[15537-15701]:ExpressionStatement[15530-15694]"
  }, {
    "left" : "collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());",
    "right" : "collection.findOneAndUpdate(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());",
    "info" : "ExpressionStatement[15736-15854]:ExpressionStatement[15729-15847]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15891-15898]:Modifier[15884-15891]"
  }, {
    "left" : "MongoOperationVoid",
    "right" : "MongoOperationVoid",
    "info" : "SimpleType[15899-15917]:SimpleType[15892-15910]"
  }, {
    "left" : "getInsertOneMongoOperation",
    "right" : "getInsertOneMongoOperation",
    "info" : "SimpleName[15918-15944]:SimpleName[15911-15937]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[15945-15973]:SingleVariableDeclaration[15938-15966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15975-16188]:Block[15968-16181]"
  }, {
    "left" : "return new MongoOperationVoid() {\n            @Override\n            void execute() {\n                collection.insertOne(arguments.getDocument(\"document\"), getCallback());\n            }\n        };",
    "right" : "return new MongoOperationVoid() {\n            @Override\n            void execute() {\n                collection.insertOne(arguments.getDocument(\"document\"), getCallback());\n            }\n        };",
    "info" : "ReturnStatement[15985-16182]:ReturnStatement[15978-16175]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16031-16040]:MarkerAnnotation[16024-16033]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16053-16057]:PrimitiveType[16046-16050]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[16058-16065]:SimpleName[16051-16058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16068-16171]:Block[16061-16164]"
  }, {
    "left" : "collection.insertOne(arguments.getDocument(\"document\"), getCallback());",
    "right" : "collection.insertOne(arguments.getDocument(\"document\"), getCallback());",
    "info" : "ExpressionStatement[16086-16157]:ExpressionStatement[16079-16150]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16194-16201]:Modifier[16187-16194]"
  }, {
    "left" : "MongoOperationVoid",
    "right" : "MongoOperationVoid",
    "info" : "SimpleType[16202-16220]:SimpleType[16195-16213]"
  }, {
    "left" : "getInsertManyMongoOperation",
    "right" : "getInsertManyMongoOperation",
    "info" : "SimpleName[16221-16248]:SimpleName[16214-16241]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[16249-16277]:SingleVariableDeclaration[16242-16270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16279-16700]:Block[16272-16693]"
  }, {
    "left" : "return new MongoOperationVoid() {\n            @Override\n            void execute() {\n                List<BsonDocument> documents = new ArrayList<BsonDocument>();\n                for (BsonValue document : arguments.getArray(\"documents\")) {\n                    documents.add(document.asDocument());\n                }\n                collection.insertMany(documents, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationVoid() {\n            @Override\n            void execute() {\n                List<BsonDocument> documents = new ArrayList<BsonDocument>();\n                for (BsonValue document : arguments.getArray(\"documents\")) {\n                    documents.add(document.asDocument());\n                }\n                collection.insertMany(documents, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[16289-16694]:ReturnStatement[16282-16687]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16335-16344]:MarkerAnnotation[16328-16337]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16357-16361]:PrimitiveType[16350-16354]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[16362-16369]:SimpleName[16355-16362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16372-16683]:Block[16365-16676]"
  }, {
    "left" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "right" : "List<BsonDocument> documents = new ArrayList<BsonDocument>();",
    "info" : "VariableDeclarationStatement[16390-16451]:VariableDeclarationStatement[16383-16444]"
  }, {
    "left" : "for (BsonValue document : arguments.getArray(\"documents\"))",
    "right" : "for (BsonValue document : arguments.getArray(\"documents\"))",
    "info" : "EnhancedForStatement[16468-16604]:EnhancedForStatement[16461-16597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16527-16604]:Block[16520-16597]"
  }, {
    "left" : "documents.add(document.asDocument());",
    "right" : "documents.add(document.asDocument());",
    "info" : "ExpressionStatement[16549-16586]:ExpressionStatement[16542-16579]"
  }, {
    "left" : "collection.insertMany(documents, getCallback());",
    "right" : "collection.insertMany(documents, getCallback());",
    "info" : "ExpressionStatement[16621-16669]:ExpressionStatement[16614-16662]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16706-16713]:Modifier[16699-16706]"
  }, {
    "left" : "MongoOperationUpdateResult",
    "right" : "MongoOperationUpdateResult",
    "info" : "SimpleType[16714-16740]:SimpleType[16707-16733]"
  }, {
    "left" : "getReplaceOneMongoOperation",
    "right" : "getReplaceOneMongoOperation",
    "info" : "SimpleName[16741-16768]:SimpleName[16734-16761]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[16769-16797]:SingleVariableDeclaration[16762-16790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16799-17279]:Block[16792-17272]"
  }, {
    "left" : "return new MongoOperationUpdateResult() {\n            @Override\n            void execute() {\n                UpdateOptions options = new UpdateOptions();\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationUpdateResult() {\n            @Override\n            void execute() {\n                UpdateOptions options = new UpdateOptions();\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[16809-17273]:ReturnStatement[16802-17266]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16863-16872]:MarkerAnnotation[16856-16865]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16885-16889]:PrimitiveType[16878-16882]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[16890-16897]:SimpleName[16883-16890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16900-17262]:Block[16893-17255]"
  }, {
    "left" : "UpdateOptions options = new UpdateOptions();",
    "right" : "UpdateOptions options = new UpdateOptions();",
    "info" : "VariableDeclarationStatement[16918-16962]:VariableDeclarationStatement[16911-16955]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[16979-17114]:IfStatement[16972-17107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17016-17114]:Block[17009-17107]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[17038-17096]:ExpressionStatement[17031-17089]"
  }, {
    "left" : "collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());",
    "right" : "collection.replaceOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"replacement\"), options, getCallback());",
    "info" : "ExpressionStatement[17131-17248]:ExpressionStatement[17124-17241]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17285-17292]:Modifier[17278-17285]"
  }, {
    "left" : "MongoOperationUpdateResult",
    "right" : "MongoOperationUpdateResult",
    "info" : "SimpleType[17293-17319]:SimpleType[17286-17312]"
  }, {
    "left" : "getUpdateManyMongoOperation",
    "right" : "getUpdateManyMongoOperation",
    "info" : "SimpleName[17320-17347]:SimpleName[17313-17340]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[17348-17376]:SingleVariableDeclaration[17341-17369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17378-17853]:Block[17371-17846]"
  }, {
    "left" : "return new MongoOperationUpdateResult() {\n            @Override\n            void execute() {\n                UpdateOptions options = new UpdateOptions();\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationUpdateResult() {\n            @Override\n            void execute() {\n                UpdateOptions options = new UpdateOptions();\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[17388-17847]:ReturnStatement[17381-17840]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17442-17451]:MarkerAnnotation[17435-17444]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17464-17468]:PrimitiveType[17457-17461]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[17469-17476]:SimpleName[17462-17469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17479-17836]:Block[17472-17829]"
  }, {
    "left" : "UpdateOptions options = new UpdateOptions();",
    "right" : "UpdateOptions options = new UpdateOptions();",
    "info" : "VariableDeclarationStatement[17497-17541]:VariableDeclarationStatement[17490-17534]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[17558-17693]:IfStatement[17551-17686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17595-17693]:Block[17588-17686]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[17617-17675]:ExpressionStatement[17610-17668]"
  }, {
    "left" : "collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());",
    "right" : "collection.updateMany(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());",
    "info" : "ExpressionStatement[17710-17822]:ExpressionStatement[17703-17815]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17859-17866]:Modifier[17852-17859]"
  }, {
    "left" : "MongoOperationUpdateResult",
    "right" : "MongoOperationUpdateResult",
    "info" : "SimpleType[17867-17893]:SimpleType[17860-17886]"
  }, {
    "left" : "getUpdateOneMongoOperation",
    "right" : "getUpdateOneMongoOperation",
    "info" : "SimpleName[17894-17920]:SimpleName[17887-17913]"
  }, {
    "left" : "final BsonDocument arguments",
    "right" : "final BsonDocument arguments",
    "info" : "SingleVariableDeclaration[17921-17949]:SingleVariableDeclaration[17914-17942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17951-18425]:Block[17944-18418]"
  }, {
    "left" : "return new MongoOperationUpdateResult() {\n            @Override\n            void execute() {\n                UpdateOptions options = new UpdateOptions();\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());\n            }\n        };",
    "right" : "return new MongoOperationUpdateResult() {\n            @Override\n            void execute() {\n                UpdateOptions options = new UpdateOptions();\n                if (arguments.containsKey(\"upsert\")) {\n                    options.upsert(arguments.getBoolean(\"upsert\").getValue());\n                }\n                collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());\n            }\n        };",
    "info" : "ReturnStatement[17961-18419]:ReturnStatement[17954-18412]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18015-18024]:MarkerAnnotation[18008-18017]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18037-18041]:PrimitiveType[18030-18034]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[18042-18049]:SimpleName[18035-18042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18052-18408]:Block[18045-18401]"
  }, {
    "left" : "UpdateOptions options = new UpdateOptions();",
    "right" : "UpdateOptions options = new UpdateOptions();",
    "info" : "VariableDeclarationStatement[18070-18114]:VariableDeclarationStatement[18063-18107]"
  }, {
    "left" : "if (arguments.containsKey(\"upsert\"))",
    "right" : "if (arguments.containsKey(\"upsert\"))",
    "info" : "IfStatement[18131-18266]:IfStatement[18124-18259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18168-18266]:Block[18161-18259]"
  }, {
    "left" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "right" : "options.upsert(arguments.getBoolean(\"upsert\").getValue());",
    "info" : "ExpressionStatement[18190-18248]:ExpressionStatement[18183-18241]"
  }, {
    "left" : "collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());",
    "right" : "collection.updateOne(arguments.getDocument(\"filter\"), arguments.getDocument(\"update\"), options, getCallback());",
    "info" : "ExpressionStatement[18283-18394]:ExpressionStatement[18276-18387]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[18431-18439]:Modifier[18424-18432]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18440-18445]:TYPE_DECLARATION_KIND[18433-18438]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[18507-18515]:Modifier[18500-18508]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18516-18521]:TYPE_DECLARATION_KIND[18509-18514]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[18600-18608]:Modifier[18593-18601]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18609-18614]:TYPE_DECLARATION_KIND[18602-18607]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[18692-18700]:Modifier[18685-18693]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18701-18706]:TYPE_DECLARATION_KIND[18694-18699]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[18784-18792]:Modifier[18777-18785]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18793-18798]:TYPE_DECLARATION_KIND[18786-18791]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18860-18867]:Modifier[18853-18860]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[18868-18876]:Modifier[18861-18869]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18877-18882]:TYPE_DECLARATION_KIND[18870-18875]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19012-19018]:Modifier[19005-19011]"
  }, {
    "left" : "FutureResultCallback<TResult>",
    "right" : "FutureResultCallback<TResult>",
    "info" : "ParameterizedType[19019-19048]:ParameterizedType[19012-19041]"
  }, {
    "left" : "getCallback",
    "right" : "getCallback",
    "info" : "SimpleName[19049-19060]:SimpleName[19042-19053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19063-19103]:Block[19056-19096]"
  }, {
    "left" : "return callback;",
    "right" : "return callback;",
    "info" : "ReturnStatement[19077-19093]:ReturnStatement[19070-19086]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19113-19119]:Modifier[19106-19112]"
  }, {
    "left" : "TResult",
    "right" : "TResult",
    "info" : "SimpleType[19120-19127]:SimpleType[19113-19120]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[19128-19131]:SimpleName[19121-19124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19134-19342]:Block[19127-19335]"
  }, {
    "left" : "execute();",
    "right" : "execute();",
    "info" : "ExpressionStatement[19148-19158]:ExpressionStatement[19141-19151]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[19171-19332]:TryStatement[19164-19325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19175-19249]:Block[19168-19242]"
  }, {
    "left" : "return callback.get(60, TimeUnit.SECONDS);",
    "right" : "return callback.get(60, TimeUnit.SECONDS);",
    "info" : "ReturnStatement[19193-19235]:ReturnStatement[19186-19228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19270-19332]:Block[19263-19325]"
  }, {
    "left" : "throw new RuntimeException(t);",
    "right" : "throw new RuntimeException(t);",
    "info" : "ThrowStatement[19288-19318]:ThrowStatement[19281-19311]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[19352-19360]:Modifier[19345-19353]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19361-19365]:PrimitiveType[19354-19358]"
  }, {
    "left" : "execute",
    "right" : "execute",
    "info" : "SimpleName[19366-19373]:SimpleName[19359-19366]"
  } ]
}