{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.util.indexing.FileBasedIndexImpl\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.util.indexing.FileBasedIndexImpl\");",
      "info" : "FieldDeclaration[4364-4467]:FieldDeclaration[4364-4467]"
    }, {
      "left" : "private static final String CORRUPTION_MARKER_NAME = \"corruption.marker\";",
      "right" : "private static final String CORRUPTION_MARKER_NAME = \"corruption.marker\";",
      "info" : "FieldDeclaration[4470-4543]:FieldDeclaration[4470-4543]"
    }, {
      "left" : "private static final NotificationGroup NOTIFICATIONS = new NotificationGroup(\"Indexing\", NotificationDisplayType.BALLOON, false);",
      "right" : "private static final NotificationGroup NOTIFICATIONS = new NotificationGroup(\"Indexing\", NotificationDisplayType.BALLOON, false);",
      "info" : "FieldDeclaration[4546-4675]:FieldDeclaration[4546-4675]"
    }, {
      "left" : "private final Map<ID<?, ?>, Pair<UpdatableIndex<?, ?, FileContent>, InputFilter>> myIndices =\n    new THashMap<ID<?, ?>, Pair<UpdatableIndex<?, ?, FileContent>, InputFilter>>();",
      "right" : "private final Map<ID<?, ?>, Pair<UpdatableIndex<?, ?, FileContent>, InputFilter>> myIndices =\n    new THashMap<ID<?, ?>, Pair<UpdatableIndex<?, ?, FileContent>, InputFilter>>();",
      "info" : "FieldDeclaration[4679-4856]:FieldDeclaration[4679-4856]"
    }, {
      "left" : "private final List<ID<?, ?>> myIndicesWithoutFileTypeInfo = new ArrayList<ID<?, ?>>();",
      "right" : "private final List<ID<?, ?>> myIndicesWithoutFileTypeInfo = new ArrayList<ID<?, ?>>();",
      "info" : "FieldDeclaration[4859-4945]:FieldDeclaration[4859-4945]"
    }, {
      "left" : "private final Map<FileType, List<ID<?, ?>>> myFileType2IndicesWithFileTypeInfoMap = new THashMap<FileType, List<ID<?, ?>>>();",
      "right" : "private final Map<FileType, List<ID<?, ?>>> myFileType2IndicesWithFileTypeInfoMap = new THashMap<FileType, List<ID<?, ?>>>();",
      "info" : "FieldDeclaration[4948-5073]:FieldDeclaration[4948-5073]"
    }, {
      "left" : "private final List<ID<?, ?>> myIndicesForDirectories = new SmartList<ID<?, ?>>();",
      "right" : "private final List<ID<?, ?>> myIndicesForDirectories = new SmartList<ID<?, ?>>();",
      "info" : "FieldDeclaration[5076-5157]:FieldDeclaration[5076-5157]"
    }, {
      "left" : "private final Map<ID<?, ?>, DocumentUpdateTask> myUnsavedDataUpdateTasks = new THashMap<ID<?, ?>, DocumentUpdateTask>();",
      "right" : "private final Map<ID<?, ?>, DocumentUpdateTask> myUnsavedDataUpdateTasks = new THashMap<ID<?, ?>, DocumentUpdateTask>();",
      "info" : "FieldDeclaration[5161-5281]:FieldDeclaration[5161-5281]"
    }, {
      "left" : "private final TObjectIntHashMap<ID<?, ?>> myIndexIdToVersionMap = new TObjectIntHashMap<ID<?, ?>>();",
      "right" : "private final TObjectIntHashMap<ID<?, ?>> myIndexIdToVersionMap = new TObjectIntHashMap<ID<?, ?>>();",
      "info" : "FieldDeclaration[5284-5384]:FieldDeclaration[5284-5384]"
    }, {
      "left" : "private final Set<ID<?, ?>> myNotRequiringContentIndices = new THashSet<ID<?, ?>>();",
      "right" : "private final Set<ID<?, ?>> myNotRequiringContentIndices = new THashSet<ID<?, ?>>();",
      "info" : "FieldDeclaration[5387-5471]:FieldDeclaration[5387-5471]"
    }, {
      "left" : "private final Set<ID<?, ?>> myRequiringContentIndices = new THashSet<ID<?, ?>>();",
      "right" : "private final Set<ID<?, ?>> myRequiringContentIndices = new THashSet<ID<?, ?>>();",
      "info" : "FieldDeclaration[5474-5555]:FieldDeclaration[5474-5555]"
    }, {
      "left" : "private final Set<ID<?, ?>> myPsiDependentIndices = new THashSet<ID<?, ?>>();",
      "right" : "private final Set<ID<?, ?>> myPsiDependentIndices = new THashSet<ID<?, ?>>();",
      "info" : "FieldDeclaration[5558-5635]:FieldDeclaration[5558-5635]"
    }, {
      "left" : "private final Set<FileType> myNoLimitCheckTypes = new THashSet<FileType>();",
      "right" : "private final Set<FileType> myNoLimitCheckTypes = new THashSet<FileType>();",
      "info" : "FieldDeclaration[5638-5713]:FieldDeclaration[5638-5713]"
    }, {
      "left" : "private final PerIndexDocumentVersionMap myLastIndexedDocStamps = new PerIndexDocumentVersionMap();",
      "right" : "private final PerIndexDocumentVersionMap myLastIndexedDocStamps = new PerIndexDocumentVersionMap();",
      "info" : "FieldDeclaration[5717-5816]:FieldDeclaration[5717-5816]"
    }, {
      "left" : "@NotNull private final ChangedFilesCollector myChangedFilesCollector;",
      "right" : "@NotNull private final ChangedFilesCollector myChangedFilesCollector;",
      "info" : "FieldDeclaration[5819-5888]:FieldDeclaration[5819-5888]"
    }, {
      "left" : "private final List<IndexableFileSet> myIndexableSets = ContainerUtil.createLockFreeCopyOnWriteList();",
      "right" : "private final List<IndexableFileSet> myIndexableSets = ContainerUtil.createLockFreeCopyOnWriteList();",
      "info" : "FieldDeclaration[5892-5993]:FieldDeclaration[5892-5993]"
    }, {
      "left" : "private final Map<IndexableFileSet, Project> myIndexableSetToProjectMap = new THashMap<IndexableFileSet, Project>();",
      "right" : "private final Map<IndexableFileSet, Project> myIndexableSetToProjectMap = new THashMap<IndexableFileSet, Project>();",
      "info" : "FieldDeclaration[5996-6112]:FieldDeclaration[5996-6112]"
    }, {
      "left" : "private static final int OK = 1;",
      "right" : "private static final int OK = 1;",
      "info" : "FieldDeclaration[6116-6148]:FieldDeclaration[6116-6148]"
    }, {
      "left" : "private static final int REQUIRES_REBUILD = 2;",
      "right" : "private static final int REQUIRES_REBUILD = 2;",
      "info" : "FieldDeclaration[6151-6197]:FieldDeclaration[6151-6197]"
    }, {
      "left" : "private static final Map<ID<?, ?>, AtomicInteger> ourRebuildStatus = new THashMap<ID<?, ?>, AtomicInteger>();",
      "right" : "private static final Map<ID<?, ?>, AtomicInteger> ourRebuildStatus = new THashMap<ID<?, ?>, AtomicInteger>();",
      "info" : "FieldDeclaration[6200-6309]:FieldDeclaration[6200-6309]"
    }, {
      "left" : "private final MessageBusConnection myConnection;",
      "right" : "private final MessageBusConnection myConnection;",
      "info" : "FieldDeclaration[6313-6361]:FieldDeclaration[6313-6361]"
    }, {
      "left" : "private final FileDocumentManager myFileDocumentManager;",
      "right" : "private final FileDocumentManager myFileDocumentManager;",
      "info" : "FieldDeclaration[6364-6420]:FieldDeclaration[6364-6420]"
    }, {
      "left" : "private final FileTypeManagerImpl myFileTypeManager;",
      "right" : "private final FileTypeManagerImpl myFileTypeManager;",
      "info" : "FieldDeclaration[6423-6475]:FieldDeclaration[6423-6475]"
    }, {
      "left" : "private final SerializationManagerEx mySerializationManagerEx;",
      "right" : "private final SerializationManagerEx mySerializationManagerEx;",
      "info" : "FieldDeclaration[6478-6540]:FieldDeclaration[6478-6540]"
    }, {
      "left" : "private final Set<ID<?, ?>> myUpToDateIndicesForUnsavedOrTransactedDocuments = ContainerUtil.newConcurrentSet();",
      "right" : "private final Set<ID<?, ?>> myUpToDateIndicesForUnsavedOrTransactedDocuments = ContainerUtil.newConcurrentSet();",
      "info" : "FieldDeclaration[6543-6655]:FieldDeclaration[6543-6655]"
    }, {
      "left" : "private volatile SmartFMap<Document, PsiFile> myTransactionMap = SmartFMap.emptyMap();",
      "right" : "private volatile SmartFMap<Document, PsiFile> myTransactionMap = SmartFMap.emptyMap();",
      "info" : "FieldDeclaration[6658-6744]:FieldDeclaration[6658-6744]"
    }, {
      "left" : "@Nullable private final String myConfigPath;",
      "right" : "@Nullable private final String myConfigPath;",
      "info" : "FieldDeclaration[6748-6792]:FieldDeclaration[6748-6792]"
    }, {
      "left" : "@Nullable private final String myLogPath;",
      "right" : "@Nullable private final String myLogPath;",
      "info" : "FieldDeclaration[6795-6836]:FieldDeclaration[6795-6836]"
    }, {
      "left" : "private final boolean myIsUnitTestMode;",
      "right" : "private final boolean myIsUnitTestMode;",
      "info" : "FieldDeclaration[6839-6878]:FieldDeclaration[6839-6878]"
    }, {
      "left" : "@Nullable private ScheduledFuture<?> myFlushingFuture;",
      "right" : "@Nullable private ScheduledFuture<?> myFlushingFuture;",
      "info" : "FieldDeclaration[6881-6935]:FieldDeclaration[6881-6935]"
    }, {
      "left" : "private volatile int myLocalModCount;",
      "right" : "private volatile int myLocalModCount;",
      "info" : "FieldDeclaration[6938-6975]:FieldDeclaration[6938-6975]"
    }, {
      "left" : "private volatile int myFilesModCount;",
      "right" : "private volatile int myFilesModCount;",
      "info" : "FieldDeclaration[6978-7015]:FieldDeclaration[6978-7015]"
    }, {
      "left" : "private final AtomicInteger myUpdatingFiles = new AtomicInteger();",
      "right" : "private final AtomicInteger myUpdatingFiles = new AtomicInteger();",
      "info" : "FieldDeclaration[7018-7084]:FieldDeclaration[7018-7084]"
    }, {
      "left" : "private final Set<Project> myProjectsBeingUpdated = ContainerUtil.newConcurrentSet();",
      "right" : "private final Set<Project> myProjectsBeingUpdated = ContainerUtil.newConcurrentSet();",
      "info" : "FieldDeclaration[7087-7172]:FieldDeclaration[7087-7172]"
    }, {
      "left" : "@SuppressWarnings({\"FieldCanBeLocal\", \"UnusedDeclaration\"}) private volatile boolean myInitialized;",
      "right" : "@SuppressWarnings({\"FieldCanBeLocal\", \"UnusedDeclaration\"}) private volatile boolean myInitialized;",
      "info" : "FieldDeclaration[7176-7275]:FieldDeclaration[7176-7275]"
    }, {
      "left" : "public FileBasedIndexImpl(@SuppressWarnings(\"UnusedParameters\") VirtualFileManager vfManager,\n                            FileDocumentManager fdm,\n                            FileTypeManagerImpl fileTypeManager,\n                            @NotNull MessageBus bus,\n                            SerializationManagerEx sm)",
      "right" : "public FileBasedIndexImpl(@SuppressWarnings(\"UnusedParameters\") VirtualFileManager vfManager,\n                            FileDocumentManager fdm,\n                            FileTypeManagerImpl fileTypeManager,\n                            @NotNull MessageBus bus,\n                            SerializationManagerEx sm)",
      "info" : "MethodDeclaration[7324-11534]:MethodDeclaration[7324-11534]"
    }, {
      "left" : "public void transactionStarted(@NotNull final Document doc, @NotNull final PsiFile file)",
      "right" : "public void transactionStarted(@NotNull final Document doc, @NotNull final PsiFile file)",
      "info" : "MethodDeclaration[8122-8363]:MethodDeclaration[8122-8363]"
    }, {
      "left" : "public void transactionCompleted(@NotNull final Document doc, @NotNull final PsiFile file)",
      "right" : "public void transactionCompleted(@NotNull final Document doc, @NotNull final PsiFile file)",
      "info" : "MethodDeclaration[8371-8543]:MethodDeclaration[8371-8543]"
    }, {
      "left" : "@Nullable private Map<FileType, Set<String>> myTypeToExtensionMap;",
      "right" : "@Nullable private Map<FileType, Set<String>> myTypeToExtensionMap;",
      "info" : "FieldDeclaration[8632-8698]:FieldDeclaration[8632-8698]"
    }, {
      "left" : "public void beforeFileTypesChanged(@NotNull final FileTypeEvent event)",
      "right" : "public void beforeFileTypesChanged(@NotNull final FileTypeEvent event)",
      "info" : "MethodDeclaration[8706-9052]:MethodDeclaration[8706-9052]"
    }, {
      "left" : "public void fileTypesChanged(@NotNull final FileTypeEvent event)",
      "right" : "public void fileTypesChanged(@NotNull final FileTypeEvent event)",
      "info" : "MethodDeclaration[9060-10188]:MethodDeclaration[9060-10188]"
    }, {
      "left" : "private Set<String> getExtensions(@NotNull FileType type)",
      "right" : "private Set<String> getExtensions(@NotNull FileType type)",
      "info" : "MethodDeclaration[10196-10497]:MethodDeclaration[10196-10497]"
    }, {
      "left" : "private void rebuildAllIndices()",
      "right" : "private void rebuildAllIndices()",
      "info" : "MethodDeclaration[10505-10835]:MethodDeclaration[10505-10835]"
    }, {
      "left" : "public void fileContentReloaded(@NotNull VirtualFile file, @NotNull Document document)",
      "right" : "public void fileContentReloaded(@NotNull VirtualFile file, @NotNull Document document)",
      "info" : "MethodDeclaration[10941-11085]:MethodDeclaration[10941-11085]"
    }, {
      "left" : "public void unsavedDocumentsDropped()",
      "right" : "public void unsavedDocumentsDropped()",
      "info" : "MethodDeclaration[11093-11188]:MethodDeclaration[11093-11188]"
    }, {
      "left" : "public void writeActionStarted(Object action)",
      "right" : "public void writeActionStarted(Object action)",
      "info" : "MethodDeclaration[11294-11431]:MethodDeclaration[11294-11431]"
    }, {
      "left" : "public static boolean isProjectOrWorkspaceFile(@NotNull VirtualFile file, @Nullable FileType fileType)",
      "right" : "public static boolean isProjectOrWorkspaceFile(@NotNull VirtualFile file, @Nullable FileType fileType)",
      "info" : "MethodDeclaration[11538-11715]:MethodDeclaration[11538-11715]"
    }, {
      "left" : "static boolean belongsToScope(VirtualFile file, VirtualFile restrictedTo, GlobalSearchScope filter)",
      "right" : "static boolean belongsToScope(VirtualFile file, VirtualFile restrictedTo, GlobalSearchScope filter)",
      "info" : "MethodDeclaration[11719-12114]:MethodDeclaration[11719-12114]"
    }, {
      "left" : "public void requestReindex(@NotNull final VirtualFile file)",
      "right" : "public void requestReindex(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[12118-12254]:MethodDeclaration[12118-12254]"
    }, {
      "left" : "private void initExtensions()",
      "right" : "private void initExtensions()",
      "info" : "MethodDeclaration[12258-15611]:MethodDeclaration[12258-15611]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[14966-15042]:MethodDeclaration[14966-15042]"
    }, {
      "left" : "private int lastModCount = 0;",
      "right" : "private int lastModCount = 0;",
      "info" : "FieldDeclaration[15184-15213]:FieldDeclaration[15184-15213]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[15223-15472]:MethodDeclaration[15223-15472]"
    }, {
      "left" : "public void initComponent()",
      "right" : "public void initComponent()",
      "info" : "MethodDeclaration[15615-15682]:MethodDeclaration[15615-15682]"
    }, {
      "left" : "private static String calcConfigPath(@NotNull String path)",
      "right" : "private static String calcConfigPath(@NotNull String path)",
      "info" : "MethodDeclaration[15686-16002]:MethodDeclaration[15686-16002]"
    }, {
      "left" : "private <K, V> boolean registerIndexer(@NotNull final FileBasedIndexExtension<K, V> extension) throws IOException",
      "right" : "private <K, V> boolean registerIndexer(@NotNull final FileBasedIndexExtension<K, V> extension) throws IOException",
      "info" : "MethodDeclaration[16006-17176]:MethodDeclaration[16006-17176]"
    }, {
      "left" : "private <K, V> void initIndexStorage(@NotNull FileBasedIndexExtension<K, V> extension, int version, @NotNull File versionFile)\n    throws IOException",
      "right" : "private <K, V> void initIndexStorage(@NotNull FileBasedIndexExtension<K, V> extension, int version, @NotNull File versionFile)\n    throws IOException",
      "info" : "MethodDeclaration[17180-20443]:MethodDeclaration[17180-20443]"
    }, {
      "left" : "final Set<FileType> addedTypes = new THashSet<FileType>();",
      "right" : "final Set<FileType> addedTypes = new THashSet<FileType>();",
      "info" : "FieldDeclaration[18610-18668]:FieldDeclaration[18610-18668]"
    }, {
      "left" : "public void consume(FileType type)",
      "right" : "public void consume(FileType type)",
      "info" : "MethodDeclaration[18681-19079]:MethodDeclaration[18681-19079]"
    }, {
      "left" : "private static void saveRegisteredIndices(@NotNull Collection<ID<?, ?>> ids)",
      "right" : "private static void saveRegisteredIndices(@NotNull Collection<ID<?, ?>> ids)",
      "info" : "MethodDeclaration[20447-20977]:MethodDeclaration[20447-20977]"
    }, {
      "left" : "private static Set<String> readRegisteredIndexNames()",
      "right" : "private static Set<String> readRegisteredIndexNames()",
      "info" : "MethodDeclaration[20981-21514]:MethodDeclaration[20981-21514]"
    }, {
      "left" : "private static File getRegisteredIndicesFile()",
      "right" : "private static File getRegisteredIndicesFile()",
      "info" : "MethodDeclaration[21518-21644]:MethodDeclaration[21518-21644]"
    }, {
      "left" : "private <K, V> UpdatableIndex<K, V, FileContent> createIndex(@NotNull final ID<K, V> indexId,\n                                                               @NotNull final FileBasedIndexExtension<K, V> extension,\n                                                               @NotNull final MemoryIndexStorage<K, V> storage)\n    throws StorageException, IOException",
      "right" : "private <K, V> UpdatableIndex<K, V, FileContent> createIndex(@NotNull final ID<K, V> indexId,\n                                                               @NotNull final FileBasedIndexExtension<K, V> extension,\n                                                               @NotNull final MemoryIndexStorage<K, V> storage)\n    throws StorageException, IOException",
      "info" : "MethodDeclaration[21648-23316]:MethodDeclaration[21648-23316]"
    }, {
      "left" : "public PersistentHashMap<Integer, Collection<K>> create()",
      "right" : "public PersistentHashMap<Integer, Collection<K>> create()",
      "info" : "MethodDeclaration[23033-23285]:MethodDeclaration[23033-23285]"
    }, {
      "left" : "public static <K> PersistentHashMap<Integer, Collection<K>> createIdToDataKeysIndex(@NotNull FileBasedIndexExtension <K, ?> extension,\n                                                                                      @NotNull MemoryIndexStorage<K, ?> storage)\n    throws IOException",
      "right" : "public static <K> PersistentHashMap<Integer, Collection<K>> createIdToDataKeysIndex(@NotNull FileBasedIndexExtension <K, ?> extension,\n                                                                                      @NotNull MemoryIndexStorage<K, ?> storage)\n    throws IOException",
      "info" : "MethodDeclaration[23320-26158]:MethodDeclaration[23320-26158]"
    }, {
      "left" : "protected Collection<K> doGet(Integer integer) throws IOException",
      "right" : "protected Collection<K> doGet(Integer integer) throws IOException",
      "info" : "MethodDeclaration[24855-25174]:MethodDeclaration[24855-25174]"
    }, {
      "left" : "protected void doPut(Integer integer, @Nullable Collection<K> ks) throws IOException",
      "right" : "protected void doPut(Integer integer, @Nullable Collection<K> ks) throws IOException",
      "info" : "MethodDeclaration[25182-25477]:MethodDeclaration[25182-25477]"
    }, {
      "left" : "protected void doRemove(Integer integer) throws IOException",
      "right" : "protected void doRemove(Integer integer) throws IOException",
      "info" : "MethodDeclaration[25485-25736]:MethodDeclaration[25485-25736]"
    }, {
      "left" : "public void bufferingStateChanged(boolean newState)",
      "right" : "public void bufferingStateChanged(boolean newState)",
      "info" : "MethodDeclaration[25839-25996]:MethodDeclaration[25839-25996]"
    }, {
      "left" : "public void memoryStorageCleared()",
      "right" : "public void memoryStorageCleared()",
      "info" : "MethodDeclaration[26004-26130]:MethodDeclaration[26004-26130]"
    }, {
      "left" : "private static <K> DataExternalizer<Collection<K>> createInputsIndexExternalizer(FileBasedIndexExtension<K, ?> extension,\n                                                                                  ID<K, ?> indexId,\n                                                                                  KeyDescriptor<K> keyDescriptor)",
      "right" : "private static <K> DataExternalizer<Collection<K>> createInputsIndexExternalizer(FileBasedIndexExtension<K, ?> extension,\n                                                                                  ID<K, ?> indexId,\n                                                                                  KeyDescriptor<K> keyDescriptor)",
      "info" : "MethodDeclaration[26162-26850]:MethodDeclaration[26162-26850]"
    }, {
      "left" : "public void disposeComponent()",
      "right" : "public void disposeComponent()",
      "info" : "MethodDeclaration[26854-26925]:MethodDeclaration[26854-26925]"
    }, {
      "left" : "private final AtomicBoolean myShutdownPerformed = new AtomicBoolean(false);",
      "right" : "private final AtomicBoolean myShutdownPerformed = new AtomicBoolean(false);",
      "info" : "FieldDeclaration[26929-27004]:FieldDeclaration[26929-27004]"
    }, {
      "left" : "private void performShutdown()",
      "right" : "private void performShutdown()",
      "info" : "MethodDeclaration[27008-28119]:MethodDeclaration[27008-28119]"
    }, {
      "left" : "private void flushAllIndices(final long modCount)",
      "right" : "private void flushAllIndices(final long modCount)",
      "info" : "MethodDeclaration[28123-28810]:MethodDeclaration[28123-28810]"
    }, {
      "left" : "public <K> Collection<K> getAllKeys(@NotNull final ID<K, ?> indexId, @NotNull Project project)",
      "right" : "public <K> Collection<K> getAllKeys(@NotNull final ID<K, ?> indexId, @NotNull Project project)",
      "info" : "MethodDeclaration[28814-29086]:MethodDeclaration[28814-29086]"
    }, {
      "left" : "public <K> boolean processAllKeys(@NotNull final ID<K, ?> indexId, @NotNull Processor<K> processor, @Nullable Project project)",
      "right" : "public <K> boolean processAllKeys(@NotNull final ID<K, ?> indexId, @NotNull Processor<K> processor, @Nullable Project project)",
      "info" : "MethodDeclaration[29090-29372]:MethodDeclaration[29090-29372]"
    }, {
      "left" : "public <K> boolean processAllKeys(@NotNull ID<K, ?> indexId, @NotNull Processor<K> processor, @NotNull GlobalSearchScope scope, @Nullable IdFilter idFilter)",
      "right" : "public <K> boolean processAllKeys(@NotNull ID<K, ?> indexId, @NotNull Processor<K> processor, @NotNull GlobalSearchScope scope, @Nullable IdFilter idFilter)",
      "info" : "MethodDeclaration[29376-30158]:MethodDeclaration[29376-30158]"
    }, {
      "left" : "private static final ThreadLocal<Integer> myUpToDateCheckState = new ThreadLocal<Integer>();",
      "right" : "private static final ThreadLocal<Integer> myUpToDateCheckState = new ThreadLocal<Integer>();",
      "info" : "FieldDeclaration[30162-30254]:FieldDeclaration[30162-30254]"
    }, {
      "left" : "public static void disableUpToDateCheckForCurrentThread()",
      "right" : "public static void disableUpToDateCheckForCurrentThread()",
      "info" : "MethodDeclaration[30258-30468]:MethodDeclaration[30258-30468]"
    }, {
      "left" : "public static void enableUpToDateCheckForCurrentThread()",
      "right" : "public static void enableUpToDateCheckForCurrentThread()",
      "info" : "MethodDeclaration[30472-30828]:MethodDeclaration[30472-30828]"
    }, {
      "left" : "private static boolean isUpToDateCheckEnabled()",
      "right" : "private static boolean isUpToDateCheckEnabled()",
      "info" : "MethodDeclaration[30832-30990]:MethodDeclaration[30832-30990]"
    }, {
      "left" : "private final ThreadLocal<Boolean> myReentrancyGuard = new ThreadLocal<Boolean>() {\n    @Override\n    protected Boolean initialValue() {\n      return Boolean.FALSE;\n    }\n  };",
      "right" : "private final ThreadLocal<Boolean> myReentrancyGuard = new ThreadLocal<Boolean>() {\n    @Override\n    protected Boolean initialValue() {\n      return Boolean.FALSE;\n    }\n  };",
      "info" : "FieldDeclaration[30995-31170]:FieldDeclaration[30995-31170]"
    }, {
      "left" : "protected Boolean initialValue()",
      "right" : "protected Boolean initialValue()",
      "info" : "MethodDeclaration[31083-31165]:MethodDeclaration[31083-31165]"
    }, {
      "left" : "public <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter)",
      "right" : "public <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter)",
      "info" : "MethodDeclaration[31174-31547]:MethodDeclaration[31174-31547]"
    }, {
      "left" : "protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId,\n                                    @Nullable Project project,\n                                    @Nullable GlobalSearchScope filter,\n                                    @Nullable VirtualFile restrictedFile)",
      "right" : "protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId,\n                                    @Nullable Project project,\n                                    @Nullable GlobalSearchScope filter,\n                                    @Nullable VirtualFile restrictedFile)",
      "info" : "MethodDeclaration[31551-33366]:MethodDeclaration[31551-33366]"
    }, {
      "left" : "private static void handleDumbMode(@Nullable Project project)",
      "right" : "private static void handleDumbMode(@Nullable Project project)",
      "info" : "MethodDeclaration[33370-34100]:MethodDeclaration[33370-34100]"
    }, {
      "left" : "public <K, V> List<V> getValues(@NotNull final ID<K, V> indexId, @NotNull K dataKey, @NotNull final GlobalSearchScope filter)",
      "right" : "public <K, V> List<V> getValues(@NotNull final ID<K, V> indexId, @NotNull K dataKey, @NotNull final GlobalSearchScope filter)",
      "info" : "MethodDeclaration[34104-34566]:MethodDeclaration[34104-34566]"
    }, {
      "left" : "public boolean process(final VirtualFile file, final V value)",
      "right" : "public boolean process(final VirtualFile file, final V value)",
      "info" : "MethodDeclaration[34386-34521]:MethodDeclaration[34386-34521]"
    }, {
      "left" : "public <K, V> Collection<VirtualFile> getContainingFiles(@NotNull final ID<K, V> indexId,\n                                                           @NotNull K dataKey,\n                                                           @NotNull final GlobalSearchScope filter)",
      "right" : "public <K, V> Collection<VirtualFile> getContainingFiles(@NotNull final ID<K, V> indexId,\n                                                           @NotNull K dataKey,\n                                                           @NotNull final GlobalSearchScope filter)",
      "info" : "MethodDeclaration[34570-35190]:MethodDeclaration[34570-35190]"
    }, {
      "left" : "public boolean process(final VirtualFile file, final V value)",
      "right" : "public boolean process(final VirtualFile file, final V value)",
      "info" : "MethodDeclaration[35013-35146]:MethodDeclaration[35013-35146]"
    }, {
      "left" : "public <K, V> boolean processValues(@NotNull final ID<K, V> indexId, @NotNull final K dataKey, @Nullable final VirtualFile inFile,\n                                      @NotNull ValueProcessor<V> processor, @NotNull final GlobalSearchScope filter)",
      "right" : "public <K, V> boolean processValues(@NotNull final ID<K, V> indexId, @NotNull final K dataKey, @Nullable final VirtualFile inFile,\n                                      @NotNull ValueProcessor<V> processor, @NotNull final GlobalSearchScope filter)",
      "info" : "MethodDeclaration[35195-35537]:MethodDeclaration[35195-35537]"
    }, {
      "left" : "public <K, V> boolean processValues(@NotNull ID<K, V> indexId,\n                                      @NotNull K dataKey,\n                                      @Nullable VirtualFile inFile,\n                                      @NotNull ValueProcessor<V> processor,\n                                      @NotNull GlobalSearchScope filter,\n                                      @Nullable IdFilter idFilter)",
      "right" : "public <K, V> boolean processValues(@NotNull ID<K, V> indexId,\n                                      @NotNull K dataKey,\n                                      @Nullable VirtualFile inFile,\n                                      @NotNull ValueProcessor<V> processor,\n                                      @NotNull GlobalSearchScope filter,\n                                      @Nullable IdFilter idFilter)",
      "info" : "MethodDeclaration[35541-36055]:MethodDeclaration[35541-36055]"
    }, {
      "left" : "private <K, V, R> R processExceptions(@NotNull final ID<K, V> indexId,\n                                        @Nullable final VirtualFile restrictToFile,\n                                        @NotNull final GlobalSearchScope filter,\n                                        @NotNull ThrowableConvertor<UpdatableIndex<K, V, FileContent>, R, StorageException> computable)",
      "right" : "private <K, V, R> R processExceptions(@NotNull final ID<K, V> indexId,\n                                        @Nullable final VirtualFile restrictToFile,\n                                        @NotNull final GlobalSearchScope filter,\n                                        @NotNull ThrowableConvertor<UpdatableIndex<K, V, FileContent>, R, StorageException> computable)",
      "info" : "MethodDeclaration[36059-37347]:MethodDeclaration[36059-37347]"
    }, {
      "left" : "private <K, V> boolean processValuesImpl(@NotNull final ID<K, V> indexId, @NotNull final K dataKey, final boolean ensureValueProcessedOnce,\n                                           @Nullable final VirtualFile restrictToFile, @NotNull final ValueProcessor<V> processor,\n                                           @NotNull final GlobalSearchScope scope, @Nullable final IdFilter idFilter)",
      "right" : "private <K, V> boolean processValuesImpl(@NotNull final ID<K, V> indexId, @NotNull final K dataKey, final boolean ensureValueProcessedOnce,\n                                           @Nullable final VirtualFile restrictToFile, @NotNull final ValueProcessor<V> processor,\n                                           @NotNull final GlobalSearchScope scope, @Nullable final IdFilter idFilter)",
      "info" : "MethodDeclaration[37351-40185]:MethodDeclaration[37351-40185]"
    }, {
      "left" : "public Boolean convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException",
      "right" : "public Boolean convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException",
      "info" : "MethodDeclaration[37945-40028]:MethodDeclaration[37945-40028]"
    }, {
      "left" : "public <K, V> boolean processFilesContainingAllKeys(@NotNull final ID<K, V> indexId,\n                                                      @NotNull final Collection<K> dataKeys,\n                                                      @NotNull final GlobalSearchScope filter,\n                                                      @Nullable Condition<V> valueChecker,\n                                                      @NotNull final Processor<VirtualFile> processor)",
      "right" : "public <K, V> boolean processFilesContainingAllKeys(@NotNull final ID<K, V> indexId,\n                                                      @NotNull final Collection<K> dataKeys,\n                                                      @NotNull final GlobalSearchScope filter,\n                                                      @Nullable Condition<V> valueChecker,\n                                                      @NotNull final Processor<VirtualFile> processor)",
      "info" : "MethodDeclaration[40189-40943]:MethodDeclaration[40189-40943]"
    }, {
      "left" : "private static final Key<SoftReference<ProjectIndexableFilesFilter>> ourProjectFilesSetKey = Key.create(\"projectFiles\");",
      "right" : "private static final Key<SoftReference<ProjectIndexableFilesFilter>> ourProjectFilesSetKey = Key.create(\"projectFiles\");",
      "info" : "FieldDeclaration[40947-41067]:FieldDeclaration[40947-41067]"
    }, {
      "left" : "public void filesUpdateEnumerationFinished()",
      "right" : "public void filesUpdateEnumerationFinished()",
      "info" : "MethodDeclaration[41071-41230]:MethodDeclaration[41071-41230]"
    }, {
      "left" : "ProjectIndexableFilesFilter",
      "right" : "ProjectIndexableFilesFilter",
      "info" : "TypeDeclaration[41234-42720]:TypeDeclaration[41234-42720]"
    }, {
      "left" : "private static final int SHIFT = 6;",
      "right" : "private static final int SHIFT = 6;",
      "info" : "FieldDeclaration[41311-41346]:FieldDeclaration[41311-41346]"
    }, {
      "left" : "private static final int MASK = (1 << SHIFT) - 1;",
      "right" : "private static final int MASK = (1 << SHIFT) - 1;",
      "info" : "FieldDeclaration[41351-41400]:FieldDeclaration[41351-41400]"
    }, {
      "left" : "private final long[] myBitMask;",
      "right" : "private final long[] myBitMask;",
      "info" : "FieldDeclaration[41405-41436]:FieldDeclaration[41405-41436]"
    }, {
      "left" : "private final int myModificationCount;",
      "right" : "private final int myModificationCount;",
      "info" : "FieldDeclaration[41441-41479]:FieldDeclaration[41441-41479]"
    }, {
      "left" : "private final int myMinId;",
      "right" : "private final int myMinId;",
      "info" : "FieldDeclaration[41484-41510]:FieldDeclaration[41484-41510]"
    }, {
      "left" : "private final int myMaxId;",
      "right" : "private final int myMaxId;",
      "info" : "FieldDeclaration[41515-41541]:FieldDeclaration[41515-41541]"
    }, {
      "left" : "private ProjectIndexableFilesFilter(@NotNull TIntArrayList set, int modificationCount)",
      "right" : "private ProjectIndexableFilesFilter(@NotNull TIntArrayList set, int modificationCount)",
      "info" : "MethodDeclaration[41547-42488]:MethodDeclaration[41547-42488]"
    }, {
      "left" : "public boolean execute(int value)",
      "right" : "public boolean execute(int value)",
      "info" : "MethodDeclaration[41850-42077]:MethodDeclaration[41850-42077]"
    }, {
      "left" : "public boolean execute(int value)",
      "right" : "public boolean execute(int value)",
      "info" : "MethodDeclaration[42254-42472]:MethodDeclaration[42254-42472]"
    }, {
      "left" : "public boolean containsFileId(int id)",
      "right" : "public boolean containsFileId(int id)",
      "info" : "MethodDeclaration[42494-42716]:MethodDeclaration[42494-42716]"
    }, {
      "left" : "void filesUpdateStarted(Project project)",
      "right" : "void filesUpdateStarted(Project project)",
      "info" : "MethodDeclaration[42724-42945]:MethodDeclaration[42724-42945]"
    }, {
      "left" : "void filesUpdateFinished(@NotNull Project project)",
      "right" : "void filesUpdateFinished(@NotNull Project project)",
      "info" : "MethodDeclaration[42949-43072]:MethodDeclaration[42949-43072]"
    }, {
      "left" : "private final Lock myCalcIndexableFilesLock = new SequenceLock();",
      "right" : "private final Lock myCalcIndexableFilesLock = new SequenceLock();",
      "info" : "FieldDeclaration[43076-43141]:FieldDeclaration[43076-43141]"
    }, {
      "left" : "public ProjectIndexableFilesFilter projectIndexableFiles(@Nullable Project project)",
      "right" : "public ProjectIndexableFilesFilter projectIndexableFiles(@Nullable Project project)",
      "info" : "MethodDeclaration[43145-44919]:MethodDeclaration[43145-44919]"
    }, {
      "left" : "public boolean processFile(@NotNull VirtualFile fileOrDir)",
      "right" : "public boolean processFile(@NotNull VirtualFile fileOrDir)",
      "info" : "MethodDeclaration[44184-44367]:MethodDeclaration[44184-44367]"
    }, {
      "left" : "private <K, V> TIntHashSet collectFileIdsContainingAllKeys(@NotNull final ID<K, V> indexId,\n                                                             @NotNull final Collection<K> dataKeys,\n                                                             @NotNull final GlobalSearchScope filter,\n                                                             @Nullable final Condition<V> valueChecker,\n                                                             @Nullable final ProjectIndexableFilesFilter projectFilesFilter)",
      "right" : "private <K, V> TIntHashSet collectFileIdsContainingAllKeys(@NotNull final ID<K, V> indexId,\n                                                             @NotNull final Collection<K> dataKeys,\n                                                             @NotNull final GlobalSearchScope filter,\n                                                             @Nullable final Condition<V> valueChecker,\n                                                             @Nullable final ProjectIndexableFilesFilter projectFilesFilter)",
      "info" : "MethodDeclaration[44923-47645]:MethodDeclaration[44923-47645]"
    }, {
      "left" : "public TIntHashSet convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException",
      "right" : "public TIntHashSet convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException",
      "info" : "MethodDeclaration[45674-47566]:MethodDeclaration[45674-47566]"
    }, {
      "left" : "final ValueContainer.IntPredicate predicate = valueIt.getValueAssociationPredicate();",
      "right" : "final ValueContainer.IntPredicate predicate = valueIt.getValueAssociationPredicate();",
      "info" : "FieldDeclaration[47040-47125]:FieldDeclaration[47040-47125]"
    }, {
      "left" : "public boolean execute(int id)",
      "right" : "public boolean execute(int id)",
      "info" : "MethodDeclaration[47145-47320]:MethodDeclaration[47145-47320]"
    }, {
      "left" : "private static boolean processVirtualFiles(@NotNull TIntHashSet ids,\n                                             @NotNull final GlobalSearchScope filter,\n                                             @NotNull final Processor<VirtualFile> processor)",
      "right" : "private static boolean processVirtualFiles(@NotNull TIntHashSet ids,\n                                             @NotNull final GlobalSearchScope filter,\n                                             @NotNull final Processor<VirtualFile> processor)",
      "info" : "MethodDeclaration[47649-48329]:MethodDeclaration[47649-48329]"
    }, {
      "left" : "public boolean execute(int id)",
      "right" : "public boolean execute(int id)",
      "info" : "MethodDeclaration[48019-48317]:MethodDeclaration[48019-48317]"
    }, {
      "left" : "public static Throwable getCauseToRebuildIndex(@NotNull RuntimeException e)",
      "right" : "public static Throwable getCauseToRebuildIndex(@NotNull RuntimeException e)",
      "info" : "MethodDeclaration[48333-48934]:MethodDeclaration[48333-48934]"
    }, {
      "left" : "public <K, V> boolean getFilesWithKey(@NotNull final ID<K, V> indexId,\n                                        @NotNull final Set<K> dataKeys,\n                                        @NotNull Processor<VirtualFile> processor,\n                                        @NotNull GlobalSearchScope filter)",
      "right" : "public <K, V> boolean getFilesWithKey(@NotNull final ID<K, V> indexId,\n                                        @NotNull final Set<K> dataKeys,\n                                        @NotNull Processor<VirtualFile> processor,\n                                        @NotNull GlobalSearchScope filter)",
      "info" : "MethodDeclaration[48938-49342]:MethodDeclaration[48938-49342]"
    }, {
      "left" : "public <K> void scheduleRebuild(@NotNull final ID<K, ?> indexId, @NotNull final Throwable e)",
      "right" : "public <K> void scheduleRebuild(@NotNull final ID<K, ?> indexId, @NotNull final Throwable e)",
      "info" : "MethodDeclaration[49346-49503]:MethodDeclaration[49346-49503]"
    }, {
      "left" : "private static void scheduleIndexRebuild(String reason)",
      "right" : "private static void scheduleIndexRebuild(String reason)",
      "info" : "MethodDeclaration[49507-49801]:MethodDeclaration[49507-49801]"
    }, {
      "left" : "private void clearIndex(@NotNull final ID<?, ?> indexId) throws StorageException",
      "right" : "private void clearIndex(@NotNull final ID<?, ?> indexId) throws StorageException",
      "info" : "MethodDeclaration[49805-49952]:MethodDeclaration[49805-49952]"
    }, {
      "left" : "private void doClearIndex(ID<?, ?> indexId) throws StorageException",
      "right" : "private void doClearIndex(ID<?, ?> indexId) throws StorageException",
      "info" : "MethodDeclaration[49956-50217]:MethodDeclaration[49956-50217]"
    }, {
      "left" : "private void advanceIndexVersion(ID<?, ?> indexId)",
      "right" : "private void advanceIndexVersion(ID<?, ?> indexId)",
      "info" : "MethodDeclaration[50221-50464]:MethodDeclaration[50221-50464]"
    }, {
      "left" : "private Set<Document> getUnsavedDocuments()",
      "right" : "private Set<Document> getUnsavedDocuments()",
      "info" : "MethodDeclaration[50468-50798]:MethodDeclaration[50468-50798]"
    }, {
      "left" : "private Set<Document> getTransactedDocuments()",
      "right" : "private Set<Document> getTransactedDocuments()",
      "info" : "MethodDeclaration[50802-50903]:MethodDeclaration[50802-50903]"
    }, {
      "left" : "private void indexUnsavedDocuments(@NotNull final ID<?, ?> indexId,\n                                     @Nullable Project project,\n                                     final GlobalSearchScope filter,\n                                     final VirtualFile restrictedFile) throws StorageException",
      "right" : "private void indexUnsavedDocuments(@NotNull final ID<?, ?> indexId,\n                                     @Nullable Project project,\n                                     final GlobalSearchScope filter,\n                                     final VirtualFile restrictedFile) throws StorageException",
      "info" : "MethodDeclaration[50907-52878]:MethodDeclaration[50907-52878]"
    }, {
      "left" : "public boolean value(Document document)",
      "right" : "public boolean value(Document document)",
      "info" : "MethodDeclaration[51941-52108]:MethodDeclaration[51941-52108]"
    }, {
      "left" : "private boolean hasActiveTransactions()",
      "right" : "private boolean hasActiveTransactions()",
      "info" : "MethodDeclaration[52882-52967]:MethodDeclaration[52882-52967]"
    }, {
      "left" : "DocumentContent",
      "right" : "DocumentContent",
      "info" : "TypeDeclaration[52971-53072]:TypeDeclaration[52971-53072]"
    }, {
      "left" : "CharSequence getText();",
      "right" : "CharSequence getText();",
      "info" : "MethodDeclaration[53011-53034]:MethodDeclaration[53011-53034]"
    }, {
      "left" : "long getModificationStamp();",
      "right" : "long getModificationStamp();",
      "info" : "MethodDeclaration[53040-53068]:MethodDeclaration[53040-53068]"
    }, {
      "left" : "AuthenticContent",
      "right" : "AuthenticContent",
      "info" : "TypeDeclaration[53076-53496]:TypeDeclaration[53076-53496]"
    }, {
      "left" : "private final Document myDocument;",
      "right" : "private final Document myDocument;",
      "info" : "FieldDeclaration[53147-53181]:FieldDeclaration[53147-53181]"
    }, {
      "left" : "private AuthenticContent(final Document document)",
      "right" : "private AuthenticContent(final Document document)",
      "info" : "MethodDeclaration[53187-53273]:MethodDeclaration[53187-53273]"
    }, {
      "left" : "public CharSequence getText()",
      "right" : "public CharSequence getText()",
      "info" : "MethodDeclaration[53279-53382]:MethodDeclaration[53279-53382]"
    }, {
      "left" : "public long getModificationStamp()",
      "right" : "public long getModificationStamp()",
      "info" : "MethodDeclaration[53388-53492]:MethodDeclaration[53388-53492]"
    }, {
      "left" : "PsiContent",
      "right" : "PsiContent",
      "info" : "TypeDeclaration[53500-54211]:TypeDeclaration[53500-54211]"
    }, {
      "left" : "private final Document myDocument;",
      "right" : "private final Document myDocument;",
      "info" : "FieldDeclaration[53565-53599]:FieldDeclaration[53565-53599]"
    }, {
      "left" : "private final PsiFile myFile;",
      "right" : "private final PsiFile myFile;",
      "info" : "FieldDeclaration[53604-53633]:FieldDeclaration[53604-53633]"
    }, {
      "left" : "private PsiContent(final Document document, final PsiFile file)",
      "right" : "private PsiContent(final Document document, final PsiFile file)",
      "info" : "MethodDeclaration[53639-53760]:MethodDeclaration[53639-53760]"
    }, {
      "left" : "public CharSequence getText()",
      "right" : "public CharSequence getText()",
      "info" : "MethodDeclaration[53766-54083]:MethodDeclaration[53766-54083]"
    }, {
      "left" : "public long getModificationStamp()",
      "right" : "public long getModificationStamp()",
      "info" : "MethodDeclaration[54089-54207]:MethodDeclaration[54089-54207]"
    }, {
      "left" : "private static final Key<WeakReference<FileContentImpl>> ourFileContentKey = Key.create(\"unsaved.document.index.content\");",
      "right" : "private static final Key<WeakReference<FileContentImpl>> ourFileContentKey = Key.create(\"unsaved.document.index.content\");",
      "info" : "FieldDeclaration[54215-54337]:FieldDeclaration[54215-54337]"
    }, {
      "left" : "private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project,\n                                       @NotNull VirtualFile vFile)",
      "right" : "private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project,\n                                       @NotNull VirtualFile vFile)",
      "info" : "MethodDeclaration[54533-57415]:MethodDeclaration[54533-57415]"
    }, {
      "left" : "private final TaskQueue myContentlessIndicesUpdateQueue = new TaskQueue(10000);",
      "right" : "private final TaskQueue myContentlessIndicesUpdateQueue = new TaskQueue(10000);",
      "info" : "FieldDeclaration[57419-57498]:FieldDeclaration[57419-57498]"
    }, {
      "left" : "private final StorageGuard myStorageLock = new StorageGuard();",
      "right" : "private final StorageGuard myStorageLock = new StorageGuard();",
      "info" : "FieldDeclaration[57502-57564]:FieldDeclaration[57502-57564]"
    }, {
      "left" : "private volatile boolean myPreviousDataBufferingState;",
      "right" : "private volatile boolean myPreviousDataBufferingState;",
      "info" : "FieldDeclaration[57567-57621]:FieldDeclaration[57567-57621]"
    }, {
      "left" : "private final Object myBufferingStateUpdateLock = new Object();",
      "right" : "private final Object myBufferingStateUpdateLock = new Object();",
      "info" : "FieldDeclaration[57624-57687]:FieldDeclaration[57624-57687]"
    }, {
      "left" : "private StorageGuard.StorageModeExitHandler setDataBufferingEnabled(final boolean enabled)",
      "right" : "private StorageGuard.StorageModeExitHandler setDataBufferingEnabled(final boolean enabled)",
      "info" : "MethodDeclaration[57691-58420]:MethodDeclaration[57691-58420]"
    }, {
      "left" : "private void cleanupMemoryStorage()",
      "right" : "private void cleanupMemoryStorage()",
      "info" : "MethodDeclaration[58424-58939]:MethodDeclaration[58424-58939]"
    }, {
      "left" : "private void dropUnregisteredIndices()",
      "right" : "private void dropUnregisteredIndices()",
      "info" : "MethodDeclaration[58943-59278]:MethodDeclaration[58943-59278]"
    }, {
      "left" : "public void requestRebuild(final ID<?, ?> indexId, final Throwable throwable)",
      "right" : "public void requestRebuild(final ID<?, ?> indexId, final Throwable throwable)",
      "info" : "MethodDeclaration[59282-61278]:MethodDeclaration[59282-61278]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[60239-60600]:MethodDeclaration[60239-60600]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[60884-61223]:MethodDeclaration[60884-61223]"
    }, {
      "left" : "public void run(@NotNull final ProgressIndicator indicator)",
      "right" : "public void run(@NotNull final ProgressIndicator indicator)",
      "info" : "MethodDeclaration[60998-61188]:MethodDeclaration[60998-61188]"
    }, {
      "left" : "private <K, V> UpdatableIndex<K, V, FileContent> getIndex(ID<K, V> indexId)",
      "right" : "private <K, V> UpdatableIndex<K, V, FileContent> getIndex(ID<K, V> indexId)",
      "info" : "MethodDeclaration[61282-61622]:MethodDeclaration[61282-61622]"
    }, {
      "left" : "private InputFilter getInputFilter(@NotNull ID<?, ?> indexId)",
      "right" : "private InputFilter getInputFilter(@NotNull ID<?, ?> indexId)",
      "info" : "MethodDeclaration[61626-61889]:MethodDeclaration[61626-61889]"
    }, {
      "left" : "public int getNumberOfPendingInvalidations()",
      "right" : "public int getNumberOfPendingInvalidations()",
      "info" : "MethodDeclaration[61893-62013]:MethodDeclaration[61893-62013]"
    }, {
      "left" : "public int getChangedFileCount()",
      "right" : "public int getChangedFileCount()",
      "info" : "MethodDeclaration[62017-62120]:MethodDeclaration[62017-62120]"
    }, {
      "left" : "public Collection<VirtualFile> getFilesToUpdate(final Project project)",
      "right" : "public Collection<VirtualFile> getFilesToUpdate(final Project project)",
      "info" : "MethodDeclaration[62124-62787]:MethodDeclaration[62124-62787]"
    }, {
      "left" : "public boolean value(VirtualFile virtualFile)",
      "right" : "public boolean value(VirtualFile virtualFile)",
      "info" : "MethodDeclaration[62325-62775]:MethodDeclaration[62325-62775]"
    }, {
      "left" : "public boolean isFileUpToDate(VirtualFile file)",
      "right" : "public boolean isFileUpToDate(VirtualFile file)",
      "info" : "MethodDeclaration[62791-62912]:MethodDeclaration[62791-62912]"
    }, {
      "left" : "void processRefreshedFile(@NotNull Project project, @NotNull final com.intellij.ide.caches.FileContent fileContent)",
      "right" : "void processRefreshedFile(@NotNull Project project, @NotNull final com.intellij.ide.caches.FileContent fileContent)",
      "info" : "MethodDeclaration[62916-63251]:MethodDeclaration[62916-63251]"
    }, {
      "left" : "public void indexFileContent(@Nullable Project project, @NotNull com.intellij.ide.caches.FileContent content)",
      "right" : "public void indexFileContent(@Nullable Project project, @NotNull com.intellij.ide.caches.FileContent content)",
      "info" : "MethodDeclaration[63255-63920]:MethodDeclaration[63255-63920]"
    }, {
      "left" : "private void doIndexFileContent(@Nullable Project project, @NotNull com.intellij.ide.caches.FileContent content)",
      "right" : "private void doIndexFileContent(@Nullable Project project, @NotNull com.intellij.ide.caches.FileContent content)",
      "info" : "MethodDeclaration[63924-66331]:MethodDeclaration[63924-66331]"
    }, {
      "left" : "public boolean isIndexingCandidate(@NotNull VirtualFile file, @NotNull ID<?, ?> indexId)",
      "right" : "public boolean isIndexingCandidate(@NotNull VirtualFile file, @NotNull ID<?, ?> indexId)",
      "info" : "MethodDeclaration[66335-66513]:MethodDeclaration[66335-66513]"
    }, {
      "left" : "private List<ID<?, ?>> getAffectedIndexCandidates(@NotNull VirtualFile file)",
      "right" : "private List<ID<?, ?>> getAffectedIndexCandidates(@NotNull VirtualFile file)",
      "info" : "MethodDeclaration[66517-67035]:MethodDeclaration[66517-67035]"
    }, {
      "left" : "private static void cleanFileContent(@NotNull FileContentImpl fc, PsiFile psiFile)",
      "right" : "private static void cleanFileContent(@NotNull FileContentImpl fc, PsiFile psiFile)",
      "info" : "MethodDeclaration[67039-67259]:MethodDeclaration[67039-67259]"
    }, {
      "left" : "private static void initFileContent(@NotNull FileContentImpl fc, Project project, PsiFile psiFile)",
      "right" : "private static void initFileContent(@NotNull FileContentImpl fc, Project project, PsiFile psiFile)",
      "info" : "MethodDeclaration[67263-67574]:MethodDeclaration[67263-67574]"
    }, {
      "left" : "static final Key<Boolean> ourPhysicalContentKey = Key.create(\"physical.content.flag\");",
      "right" : "static final Key<Boolean> ourPhysicalContentKey = Key.create(\"physical.content.flag\");",
      "info" : "FieldDeclaration[67578-67664]:FieldDeclaration[67578-67664]"
    }, {
      "left" : "private void updateSingleIndex(@NotNull ID<?, ?> indexId, final int inputId, @Nullable FileContent currentFC)\n    throws StorageException",
      "right" : "private void updateSingleIndex(@NotNull ID<?, ?> indexId, final int inputId, @Nullable FileContent currentFC)\n    throws StorageException",
      "info" : "MethodDeclaration[67668-69005]:MethodDeclaration[67668-69005]"
    }, {
      "left" : "private void scheduleUpdate(@NotNull final ID<?, ?> indexId, final Computable<Boolean> update, final int inputId, final boolean hasContent)",
      "right" : "private void scheduleUpdate(@NotNull final ID<?, ?> indexId, final Computable<Boolean> update, final int inputId, final boolean hasContent)",
      "info" : "MethodDeclaration[69009-69918]:MethodDeclaration[69009-69918]"
    }, {
      "left" : "public Boolean compute()",
      "right" : "public Boolean compute()",
      "info" : "MethodDeclaration[69360-69473]:MethodDeclaration[69360-69473]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[69520-69633]:MethodDeclaration[69520-69633]"
    }, {
      "left" : "protected void indexedStampUpdate(@NotNull ID<?, ?> indexId, int fileId, boolean hasContent)",
      "right" : "protected void indexedStampUpdate(@NotNull ID<?, ?> indexId, int fileId, boolean hasContent)",
      "info" : "MethodDeclaration[69922-70286]:MethodDeclaration[69922-70286]"
    }, {
      "left" : "protected boolean updateWithBufferingEnabled(@NotNull final Computable<Boolean> update)",
      "right" : "protected boolean updateWithBufferingEnabled(@NotNull final Computable<Boolean> update)",
      "info" : "MethodDeclaration[70290-70555]:MethodDeclaration[70290-70555]"
    }, {
      "left" : "private boolean needsFileContentLoading(@NotNull ID<?, ?> indexId)",
      "right" : "private boolean needsFileContentLoading(@NotNull ID<?, ?> indexId)",
      "info" : "MethodDeclaration[70559-70691]:MethodDeclaration[70559-70691]"
    }, {
      "left" : "IndexableFileSet getIndexableSetForFile(VirtualFile file)",
      "right" : "IndexableFileSet getIndexableSetForFile(VirtualFile file)",
      "info" : "MethodDeclaration[70695-70909]:MethodDeclaration[70695-70909]"
    }, {
      "left" : "InvalidationTask",
      "right" : "InvalidationTask",
      "info" : "TypeDeclaration[70914-71188]:TypeDeclaration[70914-71188]"
    }, {
      "left" : "private final VirtualFile mySubj;",
      "right" : "private final VirtualFile mySubj;",
      "info" : "FieldDeclaration[70987-71020]:FieldDeclaration[70987-71020]"
    }, {
      "left" : "protected InvalidationTask(@NotNull VirtualFile subj)",
      "right" : "protected InvalidationTask(@NotNull VirtualFile subj)",
      "info" : "MethodDeclaration[71026-71108]:MethodDeclaration[71026-71108]"
    }, {
      "left" : "public VirtualFile getSubj()",
      "right" : "public VirtualFile getSubj()",
      "info" : "MethodDeclaration[71114-71184]:MethodDeclaration[71114-71184]"
    }, {
      "left" : "SilentProgressIndicator",
      "right" : "SilentProgressIndicator",
      "info" : "TypeDeclaration[71192-71918]:TypeDeclaration[71192-71918]"
    }, {
      "left" : "private SilentProgressIndicator(ProgressIndicator indicator)",
      "right" : "private SilentProgressIndicator(ProgressIndicator indicator)",
      "info" : "MethodDeclaration[71313-71405]:MethodDeclaration[71313-71405]"
    }, {
      "left" : "private static SilentProgressIndicator create()",
      "right" : "private static SilentProgressIndicator create()",
      "info" : "MethodDeclaration[71411-71656]:MethodDeclaration[71411-71656]"
    }, {
      "left" : "public void setText(String text)",
      "right" : "public void setText(String text)",
      "info" : "MethodDeclaration[71662-71716]:MethodDeclaration[71662-71716]"
    }, {
      "left" : "public String getText()",
      "right" : "public String getText()",
      "info" : "MethodDeclaration[71722-71784]:MethodDeclaration[71722-71784]"
    }, {
      "left" : "public void setText2(String text)",
      "right" : "public void setText2(String text)",
      "info" : "MethodDeclaration[71790-71845]:MethodDeclaration[71790-71845]"
    }, {
      "left" : "public String getText2()",
      "right" : "public String getText2()",
      "info" : "MethodDeclaration[71851-71914]:MethodDeclaration[71851-71914]"
    }, {
      "left" : "ChangedFilesCollector",
      "right" : "ChangedFilesCollector",
      "info" : "TypeDeclaration[71922-87723]:TypeDeclaration[71922-87723]"
    }, {
      "left" : "private final Set<VirtualFile> myFilesToUpdate = ContainerUtil.newConcurrentSet();",
      "right" : "private final Set<VirtualFile> myFilesToUpdate = ContainerUtil.newConcurrentSet();",
      "info" : "FieldDeclaration[72025-72107]:FieldDeclaration[72025-72107]"
    }, {
      "left" : "private final Queue<InvalidationTask> myFutureInvalidations = new ConcurrentLinkedQueue<InvalidationTask>();",
      "right" : "private final Queue<InvalidationTask> myFutureInvalidations = new ConcurrentLinkedQueue<InvalidationTask>();",
      "info" : "FieldDeclaration[72112-72220]:FieldDeclaration[72112-72220]"
    }, {
      "left" : "private final ManagingFS myManagingFS = ManagingFS.getInstance();",
      "right" : "private final ManagingFS myManagingFS = ManagingFS.getInstance();",
      "info" : "FieldDeclaration[72226-72291]:FieldDeclaration[72226-72291]"
    }, {
      "left" : "public void fileMoved(@NotNull VirtualFileMoveEvent event)",
      "right" : "public void fileMoved(@NotNull VirtualFileMoveEvent event)",
      "info" : "MethodDeclaration[72297-72408]:MethodDeclaration[72297-72408]"
    }, {
      "left" : "public void fileCreated(@NotNull final VirtualFileEvent event)",
      "right" : "public void fileCreated(@NotNull final VirtualFileEvent event)",
      "info" : "MethodDeclaration[72414-72529]:MethodDeclaration[72414-72529]"
    }, {
      "left" : "public void fileCopied(@NotNull final VirtualFileCopyEvent event)",
      "right" : "public void fileCopied(@NotNull final VirtualFileCopyEvent event)",
      "info" : "MethodDeclaration[72535-72653]:MethodDeclaration[72535-72653]"
    }, {
      "left" : "public void beforeFileDeletion(@NotNull final VirtualFileEvent event)",
      "right" : "public void beforeFileDeletion(@NotNull final VirtualFileEvent event)",
      "info" : "MethodDeclaration[72659-72799]:MethodDeclaration[72659-72799]"
    }, {
      "left" : "public void beforeContentsChange(@NotNull final VirtualFileEvent event)",
      "right" : "public void beforeContentsChange(@NotNull final VirtualFileEvent event)",
      "info" : "MethodDeclaration[72805-72946]:MethodDeclaration[72805-72946]"
    }, {
      "left" : "public void contentsChanged(@NotNull final VirtualFileEvent event)",
      "right" : "public void contentsChanged(@NotNull final VirtualFileEvent event)",
      "info" : "MethodDeclaration[72952-73070]:MethodDeclaration[72952-73070]"
    }, {
      "left" : "public void beforePropertyChange(@NotNull final VirtualFilePropertyEvent event)",
      "right" : "public void beforePropertyChange(@NotNull final VirtualFilePropertyEvent event)",
      "info" : "MethodDeclaration[73076-73711]:MethodDeclaration[73076-73711]"
    }, {
      "left" : "public void propertyChanged(@NotNull final VirtualFilePropertyEvent event)",
      "right" : "public void propertyChanged(@NotNull final VirtualFilePropertyEvent event)",
      "info" : "MethodDeclaration[73717-74105]:MethodDeclaration[73717-74105]"
    }, {
      "left" : "private void markDirty(@NotNull final VirtualFileEvent event, final boolean contentChange)",
      "right" : "private void markDirty(@NotNull final VirtualFileEvent event, final boolean contentChange)",
      "info" : "MethodDeclaration[74111-77636]:MethodDeclaration[74111-77636]"
    }, {
      "left" : "public boolean process(@NotNull final VirtualFile file)",
      "right" : "public boolean process(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[74452-77456]:MethodDeclaration[74452-77456]"
    }, {
      "left" : "private void scheduleForUpdate(VirtualFile file)",
      "right" : "private void scheduleForUpdate(VirtualFile file)",
      "info" : "MethodDeclaration[77642-77731]:MethodDeclaration[77642-77731]"
    }, {
      "left" : "private void invalidateIndices(@NotNull final VirtualFile file, final boolean markForReindex)",
      "right" : "private void invalidateIndices(@NotNull final VirtualFile file, final boolean markForReindex)",
      "info" : "MethodDeclaration[77737-78651]:MethodDeclaration[77737-78651]"
    }, {
      "left" : "public boolean visitFile(@NotNull VirtualFile file)",
      "right" : "public boolean visitFile(@NotNull VirtualFile file)",
      "info" : "MethodDeclaration[77917-78420]:MethodDeclaration[77917-78420]"
    }, {
      "left" : "public Iterable<VirtualFile> getChildrenIterable(@NotNull VirtualFile file)",
      "right" : "public Iterable<VirtualFile> getChildrenIterable(@NotNull VirtualFile file)",
      "info" : "MethodDeclaration[78430-78635]:MethodDeclaration[78430-78635]"
    }, {
      "left" : "private void invalidateIndicesForFile(@NotNull final VirtualFile file, boolean markForReindex)",
      "right" : "private void invalidateIndicesForFile(@NotNull final VirtualFile file, boolean markForReindex)",
      "info" : "MethodDeclaration[78657-81040]:MethodDeclaration[78657-81040]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[80843-80973]:MethodDeclaration[80843-80973]"
    }, {
      "left" : "private void removeFileDataFromIndices(@NotNull Collection<ID<?, ?>> affectedIndices, int inputId)",
      "right" : "private void removeFileDataFromIndices(@NotNull Collection<ID<?, ?>> affectedIndices, int inputId)",
      "info" : "MethodDeclaration[81046-81785]:MethodDeclaration[81046-81785]"
    }, {
      "left" : "public int getNumberOfPendingInvalidations()",
      "right" : "public int getNumberOfPendingInvalidations()",
      "info" : "MethodDeclaration[81791-81886]:MethodDeclaration[81791-81886]"
    }, {
      "left" : "public void ensureAllInvalidateTasksCompleted()",
      "right" : "public void ensureAllInvalidateTasksCompleted()",
      "info" : "MethodDeclaration[81892-81995]:MethodDeclaration[81892-81995]"
    }, {
      "left" : "public void tryToEnsureAllInvalidateTasksCompleted()",
      "right" : "public void tryToEnsureAllInvalidateTasksCompleted()",
      "info" : "MethodDeclaration[82001-82108]:MethodDeclaration[82001-82108]"
    }, {
      "left" : "private void ensureAllInvalidateTasksCompleted(boolean doCheckCancelledBetweenInvalidations)",
      "right" : "private void ensureAllInvalidateTasksCompleted(boolean doCheckCancelledBetweenInvalidations)",
      "info" : "MethodDeclaration[82114-83318]:MethodDeclaration[82114-83318]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[82770-83281]:MethodDeclaration[82770-83281]"
    }, {
      "left" : "private void iterateIndexableFiles(@NotNull final VirtualFile file, @NotNull final Processor<VirtualFile> processor)",
      "right" : "private void iterateIndexableFiles(@NotNull final VirtualFile file, @NotNull final Processor<VirtualFile> processor)",
      "info" : "MethodDeclaration[83324-84006]:MethodDeclaration[83324-84006]"
    }, {
      "left" : "public boolean processFile(@NotNull final VirtualFile fileOrDir)",
      "right" : "public boolean processFile(@NotNull final VirtualFile fileOrDir)",
      "info" : "MethodDeclaration[83550-83715]:MethodDeclaration[83550-83715]"
    }, {
      "left" : "public Collection<VirtualFile> getAllFilesToUpdate()",
      "right" : "public Collection<VirtualFile> getAllFilesToUpdate()",
      "info" : "MethodDeclaration[84012-84217]:MethodDeclaration[84012-84217]"
    }, {
      "left" : "private final VirtualFileUpdateTask myForceUpdateTask = new VirtualFileUpdateTask();",
      "right" : "private final VirtualFileUpdateTask myForceUpdateTask = new VirtualFileUpdateTask();",
      "info" : "FieldDeclaration[84223-84307]:FieldDeclaration[84223-84307]"
    }, {
      "left" : "private final AtomicInteger myForceUpdateRequests = new AtomicInteger();",
      "right" : "private final AtomicInteger myForceUpdateRequests = new AtomicInteger();",
      "info" : "FieldDeclaration[84312-84384]:FieldDeclaration[84312-84384]"
    }, {
      "left" : "private void forceUpdate(@Nullable Project project, @Nullable final GlobalSearchScope filter, @Nullable final VirtualFile restrictedTo)",
      "right" : "private void forceUpdate(@Nullable Project project, @Nullable final GlobalSearchScope filter, @Nullable final VirtualFile restrictedTo)",
      "info" : "MethodDeclaration[84390-85290]:MethodDeclaration[84390-85290]"
    }, {
      "left" : "private boolean processFileImpl(Project project, @NotNull final com.intellij.ide.caches.FileContent fileContent)",
      "right" : "private boolean processFileImpl(Project project, @NotNull final com.intellij.ide.caches.FileContent fileContent)",
      "info" : "MethodDeclaration[85495-86403]:MethodDeclaration[85495-86403]"
    }, {
      "left" : "public void before(@NotNull List<? extends VFileEvent> events)",
      "right" : "public void before(@NotNull List<? extends VFileEvent> events)",
      "info" : "MethodDeclaration[86409-86880]:MethodDeclaration[86409-86880]"
    }, {
      "left" : "private boolean memoryStorageCleaningNeeded(VFileEvent event)",
      "right" : "private boolean memoryStorageCleaningNeeded(VFileEvent event)",
      "info" : "MethodDeclaration[86886-87161]:MethodDeclaration[86886-87161]"
    }, {
      "left" : "public void after(@NotNull List<? extends VFileEvent> events)",
      "right" : "public void after(@NotNull List<? extends VFileEvent> events)",
      "info" : "MethodDeclaration[87167-87475]:MethodDeclaration[87167-87475]"
    }, {
      "left" : "VirtualFileUpdateTask",
      "right" : "VirtualFileUpdateTask",
      "info" : "TypeDeclaration[87481-87719]:TypeDeclaration[87481-87719]"
    }, {
      "left" : "void doProcess(VirtualFile item, Project project)",
      "right" : "void doProcess(VirtualFile item, Project project)",
      "info" : "MethodDeclaration[87557-87713]:MethodDeclaration[87557-87713]"
    }, {
      "left" : "private boolean clearUpToDateStateForPsiIndicesOfUnsavedDocuments(@NotNull VirtualFile file)",
      "right" : "private boolean clearUpToDateStateForPsiIndicesOfUnsavedDocuments(@NotNull VirtualFile file)",
      "info" : "MethodDeclaration[87727-88393]:MethodDeclaration[87727-88393]"
    }, {
      "left" : "private static int getIdMaskingNonIdBasedFile(VirtualFile file)",
      "right" : "private static int getIdMaskingNonIdBasedFile(VirtualFile file)",
      "info" : "MethodDeclaration[88397-88579]:MethodDeclaration[88397-88579]"
    }, {
      "left" : "UnindexedFilesFinder",
      "right" : "UnindexedFilesFinder",
      "info" : "TypeDeclaration[88583-92334]:TypeDeclaration[88583-92334]"
    }, {
      "left" : "private final List<VirtualFile> myFiles = new ArrayList<VirtualFile>();",
      "right" : "private final List<VirtualFile> myFiles = new ArrayList<VirtualFile>();",
      "info" : "FieldDeclaration[88661-88732]:FieldDeclaration[88661-88732]"
    }, {
      "left" : "@Nullable\n    private final ProgressIndicator myProgressIndicator;",
      "right" : "@Nullable\n    private final ProgressIndicator myProgressIndicator;",
      "info" : "FieldDeclaration[88737-88803]:FieldDeclaration[88737-88803]"
    }, {
      "left" : "private UnindexedFilesFinder(@Nullable ProgressIndicator indicator)",
      "right" : "private UnindexedFilesFinder(@Nullable ProgressIndicator indicator)",
      "info" : "MethodDeclaration[88809-88923]:MethodDeclaration[88809-88923]"
    }, {
      "left" : "public List<VirtualFile> getFiles()",
      "right" : "public List<VirtualFile> getFiles()",
      "info" : "MethodDeclaration[88929-89717]:MethodDeclaration[88929-89717]"
    }, {
      "left" : "public boolean processFile(@NotNull final VirtualFile file)",
      "right" : "public boolean processFile(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[89723-92330]:MethodDeclaration[89723-92330]"
    }, {
      "left" : "private boolean shouldIndexFile(@NotNull VirtualFile file, @NotNull ID<?, ?> indexId)",
      "right" : "private boolean shouldIndexFile(@NotNull VirtualFile file, @NotNull ID<?, ?> indexId)",
      "info" : "MethodDeclaration[92338-92597]:MethodDeclaration[92338-92597]"
    }, {
      "left" : "private boolean isUnderConfigOrSystem(@NotNull VirtualFile file)",
      "right" : "private boolean isUnderConfigOrSystem(@NotNull VirtualFile file)",
      "info" : "MethodDeclaration[92601-92871]:MethodDeclaration[92601-92871]"
    }, {
      "left" : "private static boolean isMock(final VirtualFile file)",
      "right" : "private static boolean isMock(final VirtualFile file)",
      "info" : "MethodDeclaration[92875-92980]:MethodDeclaration[92875-92980]"
    }, {
      "left" : "private boolean isTooLarge(@NotNull VirtualFile file)",
      "right" : "private boolean isTooLarge(@NotNull VirtualFile file)",
      "info" : "MethodDeclaration[92984-93265]:MethodDeclaration[92984-93265]"
    }, {
      "left" : "private boolean isTooLarge(@NotNull VirtualFile file, long contentSize)",
      "right" : "private boolean isTooLarge(@NotNull VirtualFile file, long contentSize)",
      "info" : "MethodDeclaration[93269-93594]:MethodDeclaration[93269-93594]"
    }, {
      "left" : "public CollectingContentIterator createContentIterator(@Nullable ProgressIndicator indicator)",
      "right" : "public CollectingContentIterator createContentIterator(@Nullable ProgressIndicator indicator)",
      "info" : "MethodDeclaration[93598-93756]:MethodDeclaration[93598-93756]"
    }, {
      "left" : "public void registerIndexableSet(@NotNull IndexableFileSet set, @Nullable Project project)",
      "right" : "public void registerIndexableSet(@NotNull IndexableFileSet set, @Nullable Project project)",
      "info" : "MethodDeclaration[93760-95373]:MethodDeclaration[93760-95373]"
    }, {
      "left" : "public void treeChanged(@NotNull PsiTreeChangeEventImpl event)",
      "right" : "public void treeChanged(@NotNull PsiTreeChangeEventImpl event)",
      "info" : "MethodDeclaration[94096-95353]:MethodDeclaration[94096-95353]"
    }, {
      "left" : "public void removeIndexableSet(@NotNull IndexableFileSet set)",
      "right" : "public void removeIndexableSet(@NotNull IndexableFileSet set)",
      "info" : "MethodDeclaration[95377-95897]:MethodDeclaration[95377-95897]"
    }, {
      "left" : "public VirtualFile findFileById(Project project, int id)",
      "right" : "public VirtualFile findFileById(Project project, int id)",
      "info" : "MethodDeclaration[95901-96064]:MethodDeclaration[95901-96064]"
    }, {
      "left" : "private static PsiFile findLatestKnownPsiForUncomittedDocument(@NotNull Document doc, @NotNull Project project)",
      "right" : "private static PsiFile findLatestKnownPsiForUncomittedDocument(@NotNull Document doc, @NotNull Project project)",
      "info" : "MethodDeclaration[96068-96271]:MethodDeclaration[96068-96271]"
    }, {
      "left" : "IndexableFilesFilter",
      "right" : "IndexableFilesFilter",
      "info" : "TypeDeclaration[96275-96647]:TypeDeclaration[96275-96647]"
    }, {
      "left" : "private final InputFilter myDelegate;",
      "right" : "private final InputFilter myDelegate;",
      "info" : "FieldDeclaration[96346-96383]:FieldDeclaration[96346-96383]"
    }, {
      "left" : "private IndexableFilesFilter(InputFilter delegate)",
      "right" : "private IndexableFilesFilter(InputFilter delegate)",
      "info" : "MethodDeclaration[96389-96476]:MethodDeclaration[96389-96476]"
    }, {
      "left" : "public boolean acceptInput(@NotNull final VirtualFile file)",
      "right" : "public boolean acceptInput(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[96482-96643]:MethodDeclaration[96482-96643]"
    }, {
      "left" : "private static void cleanupProcessedFlag()",
      "right" : "private static void cleanupProcessedFlag()",
      "info" : "MethodDeclaration[96651-96843]:MethodDeclaration[96651-96843]"
    }, {
      "left" : "private static void cleanProcessedFlag(@NotNull final VirtualFile file)",
      "right" : "private static void cleanProcessedFlag(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[96847-97273]:MethodDeclaration[96847-97273]"
    }, {
      "left" : "public void iterateIndexableFilesConcurrently(@NotNull ContentIterator processor, @NotNull Project project, ProgressIndicator indicator)",
      "right" : "public void iterateIndexableFilesConcurrently(@NotNull ContentIterator processor, @NotNull Project project, ProgressIndicator indicator)",
      "info" : "MethodDeclaration[97277-97556]:MethodDeclaration[97277-97556]"
    }, {
      "left" : "public void iterateIndexableFiles(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator)",
      "right" : "public void iterateIndexableFiles(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator)",
      "info" : "MethodDeclaration[97560-97806]:MethodDeclaration[97560-97806]"
    }, {
      "left" : "List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor,\n                                                  @NotNull final Project project,\n                                                  final ProgressIndicator indicator)",
      "right" : "List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor,\n                                                  @NotNull final Project project,\n                                                  final ProgressIndicator indicator)",
      "info" : "MethodDeclaration[97810-101314]:MethodDeclaration[97810-101314]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[98356-98451]:MethodDeclaration[98356-98451]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[99381-99585]:MethodDeclaration[99381-99585]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[99810-100014]:MethodDeclaration[99810-100014]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[100923-101186]:MethodDeclaration[100923-101186]"
    }, {
      "left" : "StorageGuard",
      "right" : "StorageGuard",
      "info" : "TypeDeclaration[102419-103797]:TypeDeclaration[101318-102696]"
    }, {
      "left" : "private int myHolds = 0;",
      "right" : "private int myHolds = 0;",
      "info" : "FieldDeclaration[102527-102551]:FieldDeclaration[101426-101450]"
    }, {
      "left" : "private int myWaiters = 0;",
      "right" : "private int myWaiters = 0;",
      "info" : "FieldDeclaration[102556-102582]:FieldDeclaration[101455-101481]"
    }, {
      "left" : "StorageModeExitHandler",
      "right" : "StorageModeExitHandler",
      "info" : "TypeDeclaration[102588-102655]:TypeDeclaration[101487-101554]"
    }, {
      "left" : "void leave();",
      "right" : "void leave();",
      "info" : "MethodDeclaration[102636-102649]:MethodDeclaration[101535-101548]"
    }, {
      "left" : "private final StorageModeExitHandler myTrueStorageModeExitHandler = new StorageModeExitHandler() {\n      @Override\n      public void leave() {\n        StorageGuard.this.leave(true);\n      }\n    };",
      "right" : "private final StorageModeExitHandler myTrueStorageModeExitHandler = new StorageModeExitHandler() {\n      @Override\n      public void leave() {\n        StorageGuard.this.leave(true);\n      }\n    };",
      "info" : "FieldDeclaration[102661-102857]:FieldDeclaration[101560-101756]"
    }, {
      "left" : "public void leave()",
      "right" : "public void leave()",
      "info" : "MethodDeclaration[102766-102850]:MethodDeclaration[101665-101749]"
    }, {
      "left" : "private final StorageModeExitHandler myFalseStorageModeExitHandler = new StorageModeExitHandler() {\n      @Override\n      public void leave() {\n        StorageGuard.this.leave(false);\n      }\n    };",
      "right" : "private final StorageModeExitHandler myFalseStorageModeExitHandler = new StorageModeExitHandler() {\n      @Override\n      public void leave() {\n        StorageGuard.this.leave(false);\n      }\n    };",
      "info" : "FieldDeclaration[102862-103060]:FieldDeclaration[101761-101959]"
    }, {
      "left" : "public void leave()",
      "right" : "public void leave()",
      "info" : "MethodDeclaration[102968-103053]:MethodDeclaration[101867-101952]"
    }, {
      "left" : "private synchronized StorageModeExitHandler enter(boolean mode)",
      "right" : "private synchronized StorageModeExitHandler enter(boolean mode)",
      "info" : "MethodDeclaration[103066-103446]:MethodDeclaration[101965-102345]"
    }, {
      "left" : "private void doWait()",
      "right" : "private void doWait()",
      "info" : "MethodDeclaration[103452-103630]:MethodDeclaration[102351-102529]"
    }, {
      "left" : "private synchronized void leave(boolean mode)",
      "right" : "private synchronized void leave(boolean mode)",
      "info" : "MethodDeclaration[103636-103793]:MethodDeclaration[102535-102692]"
    }, {
      "left" : "DocumentUpdateTask",
      "right" : "DocumentUpdateTask",
      "info" : "TypeDeclaration[103801-104173]:TypeDeclaration[102700-103072]"
    }, {
      "left" : "private final ID<?, ?> myIndexId;",
      "right" : "private final ID<?, ?> myIndexId;",
      "info" : "FieldDeclaration[103875-103908]:FieldDeclaration[102774-102807]"
    }, {
      "left" : "public DocumentUpdateTask(ID<?, ?> indexId)",
      "right" : "public DocumentUpdateTask(ID<?, ?> indexId)",
      "info" : "MethodDeclaration[103914-103992]:MethodDeclaration[102813-102891]"
    }, {
      "left" : "void doProcess(Document document, Project project)",
      "right" : "void doProcess(Document document, Project project)",
      "info" : "MethodDeclaration[103998-104169]:MethodDeclaration[102897-103068]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7644-11534]:Block[7644-11534]"
    }, {
      "left" : "myFileDocumentManager = fdm;",
      "right" : "myFileDocumentManager = fdm;",
      "info" : "ExpressionStatement[7650-7678]:ExpressionStatement[7650-7678]"
    }, {
      "left" : "myFileTypeManager = fileTypeManager;",
      "right" : "myFileTypeManager = fileTypeManager;",
      "info" : "ExpressionStatement[7683-7719]:ExpressionStatement[7683-7719]"
    }, {
      "left" : "mySerializationManagerEx = sm;",
      "right" : "mySerializationManagerEx = sm;",
      "info" : "ExpressionStatement[7724-7754]:ExpressionStatement[7724-7754]"
    }, {
      "left" : "myIsUnitTestMode = ApplicationManager.getApplication().isUnitTestMode();",
      "right" : "myIsUnitTestMode = ApplicationManager.getApplication().isUnitTestMode();",
      "info" : "ExpressionStatement[7759-7831]:ExpressionStatement[7759-7831]"
    }, {
      "left" : "myConfigPath = calcConfigPath(PathManager.getConfigPath());",
      "right" : "myConfigPath = calcConfigPath(PathManager.getConfigPath());",
      "info" : "ExpressionStatement[7836-7895]:ExpressionStatement[7836-7895]"
    }, {
      "left" : "myLogPath = calcConfigPath(PathManager.getLogPath());",
      "right" : "myLogPath = calcConfigPath(PathManager.getLogPath());",
      "info" : "ExpressionStatement[7900-7953]:ExpressionStatement[7900-7953]"
    }, {
      "left" : "final MessageBusConnection connection = bus.connect();",
      "right" : "final MessageBusConnection connection = bus.connect();",
      "info" : "VariableDeclarationStatement[7959-8013]:VariableDeclarationStatement[7959-8013]"
    }, {
      "left" : "connection.subscribe(PsiDocumentTransactionListener.TOPIC, new PsiDocumentTransactionListener() {\n      @Override\n      public void transactionStarted(@NotNull final Document doc, @NotNull final PsiFile file) {\n        myTransactionMap = myTransactionMap.plus(doc, file);\n        myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();\n      }\n\n      @Override\n      public void transactionCompleted(@NotNull final Document doc, @NotNull final PsiFile file) {\n        myTransactionMap = myTransactionMap.minus(doc);\n      }\n    });",
      "right" : "connection.subscribe(PsiDocumentTransactionListener.TOPIC, new PsiDocumentTransactionListener() {\n      @Override\n      public void transactionStarted(@NotNull final Document doc, @NotNull final PsiFile file) {\n        myTransactionMap = myTransactionMap.plus(doc, file);\n        myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();\n      }\n\n      @Override\n      public void transactionCompleted(@NotNull final Document doc, @NotNull final PsiFile file) {\n        myTransactionMap = myTransactionMap.minus(doc);\n      }\n    });",
      "info" : "ExpressionStatement[8018-8551]:ExpressionStatement[8018-8551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8227-8363]:Block[8227-8363]"
    }, {
      "left" : "myTransactionMap = myTransactionMap.plus(doc, file);",
      "right" : "myTransactionMap = myTransactionMap.plus(doc, file);",
      "info" : "ExpressionStatement[8237-8289]:ExpressionStatement[8237-8289]"
    }, {
      "left" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();",
      "right" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();",
      "info" : "ExpressionStatement[8298-8355]:ExpressionStatement[8298-8355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8478-8543]:Block[8478-8543]"
    }, {
      "left" : "myTransactionMap = myTransactionMap.minus(doc);",
      "right" : "myTransactionMap = myTransactionMap.minus(doc);",
      "info" : "ExpressionStatement[8488-8535]:ExpressionStatement[8488-8535]"
    }, {
      "left" : "connection.subscribe(FileTypeManager.TOPIC, new FileTypeListener() {\n      @Nullable private Map<FileType, Set<String>> myTypeToExtensionMap;\n\n      @Override\n      public void beforeFileTypesChanged(@NotNull final FileTypeEvent event) {\n        cleanupProcessedFlag();\n        myTypeToExtensionMap = new THashMap<FileType, Set<String>>();\n        for (FileType type : myFileTypeManager.getRegisteredFileTypes()) {\n          myTypeToExtensionMap.put(type, getExtensions(type));\n        }\n      }\n\n      @Override\n      public void fileTypesChanged(@NotNull final FileTypeEvent event) {\n        final Map<FileType, Set<String>> oldExtensions = myTypeToExtensionMap;\n        myTypeToExtensionMap = null;\n        if (oldExtensions != null) {\n          final Map<FileType, Set<String>> newExtensions = new THashMap<FileType, Set<String>>();\n          for (FileType type : myFileTypeManager.getRegisteredFileTypes()) {\n            newExtensions.put(type, getExtensions(type));\n          }\n          // we are interested only in extension changes or removals.\n          // addition of an extension is handled separately by RootsChanged event\n          if (!newExtensions.keySet().containsAll(oldExtensions.keySet())) {\n            rebuildAllIndices();\n            return;\n          }\n          for (Map.Entry<FileType, Set<String>> entry : oldExtensions.entrySet()) {\n            FileType fileType = entry.getKey();\n            Set<String> strings = entry.getValue();\n            if (!newExtensions.get(fileType).containsAll(strings)) {\n              rebuildAllIndices();\n              return;\n            }\n          }\n        }\n      }\n\n      @NotNull\n      private Set<String> getExtensions(@NotNull FileType type) {\n        final Set<String> set = new THashSet<String>();\n        for (FileNameMatcher matcher : myFileTypeManager.getAssociations(type)) {\n          set.add(matcher.getPresentableString());\n        }\n        return set;\n      }\n\n      private void rebuildAllIndices() {\n        IndexingStamp.flushCaches();\n        for (ID<?, ?> indexId : myIndices.keySet()) {\n          try {\n            clearIndex(indexId);\n          }\n          catch (StorageException e) {\n            LOG.info(e);\n          }\n        }\n        scheduleIndexRebuild(\"File type change\");\n      }\n    });",
      "right" : "connection.subscribe(FileTypeManager.TOPIC, new FileTypeListener() {\n      @Nullable private Map<FileType, Set<String>> myTypeToExtensionMap;\n\n      @Override\n      public void beforeFileTypesChanged(@NotNull final FileTypeEvent event) {\n        cleanupProcessedFlag();\n        myTypeToExtensionMap = new THashMap<FileType, Set<String>>();\n        for (FileType type : myFileTypeManager.getRegisteredFileTypes()) {\n          myTypeToExtensionMap.put(type, getExtensions(type));\n        }\n      }\n\n      @Override\n      public void fileTypesChanged(@NotNull final FileTypeEvent event) {\n        final Map<FileType, Set<String>> oldExtensions = myTypeToExtensionMap;\n        myTypeToExtensionMap = null;\n        if (oldExtensions != null) {\n          final Map<FileType, Set<String>> newExtensions = new THashMap<FileType, Set<String>>();\n          for (FileType type : myFileTypeManager.getRegisteredFileTypes()) {\n            newExtensions.put(type, getExtensions(type));\n          }\n          // we are interested only in extension changes or removals.\n          // addition of an extension is handled separately by RootsChanged event\n          if (!newExtensions.keySet().containsAll(oldExtensions.keySet())) {\n            rebuildAllIndices();\n            return;\n          }\n          for (Map.Entry<FileType, Set<String>> entry : oldExtensions.entrySet()) {\n            FileType fileType = entry.getKey();\n            Set<String> strings = entry.getValue();\n            if (!newExtensions.get(fileType).containsAll(strings)) {\n              rebuildAllIndices();\n              return;\n            }\n          }\n        }\n      }\n\n      @NotNull\n      private Set<String> getExtensions(@NotNull FileType type) {\n        final Set<String> set = new THashSet<String>();\n        for (FileNameMatcher matcher : myFileTypeManager.getAssociations(type)) {\n          set.add(matcher.getPresentableString());\n        }\n        return set;\n      }\n\n      private void rebuildAllIndices() {\n        IndexingStamp.flushCaches();\n        for (ID<?, ?> indexId : myIndices.keySet()) {\n          try {\n            clearIndex(indexId);\n          }\n          catch (StorageException e) {\n            LOG.info(e);\n          }\n        }\n        scheduleIndexRebuild(\"File type change\");\n      }\n    });",
      "info" : "ExpressionStatement[8557-10843]:ExpressionStatement[8557-10843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8793-9052]:Block[8793-9052]"
    }, {
      "left" : "cleanupProcessedFlag();",
      "right" : "cleanupProcessedFlag();",
      "info" : "ExpressionStatement[8803-8826]:ExpressionStatement[8803-8826]"
    }, {
      "left" : "myTypeToExtensionMap = new THashMap<FileType, Set<String>>();",
      "right" : "myTypeToExtensionMap = new THashMap<FileType, Set<String>>();",
      "info" : "ExpressionStatement[8835-8896]:ExpressionStatement[8835-8896]"
    }, {
      "left" : "for (FileType type : myFileTypeManager.getRegisteredFileTypes())",
      "right" : "for (FileType type : myFileTypeManager.getRegisteredFileTypes())",
      "info" : "EnhancedForStatement[8905-9044]:EnhancedForStatement[8905-9044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8970-9044]:Block[8970-9044]"
    }, {
      "left" : "myTypeToExtensionMap.put(type, getExtensions(type));",
      "right" : "myTypeToExtensionMap.put(type, getExtensions(type));",
      "info" : "ExpressionStatement[8982-9034]:ExpressionStatement[8982-9034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9141-10188]:Block[9141-10188]"
    }, {
      "left" : "final Map<FileType, Set<String>> oldExtensions = myTypeToExtensionMap;",
      "right" : "final Map<FileType, Set<String>> oldExtensions = myTypeToExtensionMap;",
      "info" : "VariableDeclarationStatement[9151-9221]:VariableDeclarationStatement[9151-9221]"
    }, {
      "left" : "myTypeToExtensionMap = null;",
      "right" : "myTypeToExtensionMap = null;",
      "info" : "ExpressionStatement[9230-9258]:ExpressionStatement[9230-9258]"
    }, {
      "left" : "if (oldExtensions != null)",
      "right" : "if (oldExtensions != null)",
      "info" : "IfStatement[9267-10180]:IfStatement[9267-10180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9294-10180]:Block[9294-10180]"
    }, {
      "left" : "final Map<FileType, Set<String>> newExtensions = new THashMap<FileType, Set<String>>();",
      "right" : "final Map<FileType, Set<String>> newExtensions = new THashMap<FileType, Set<String>>();",
      "info" : "VariableDeclarationStatement[9306-9393]:VariableDeclarationStatement[9306-9393]"
    }, {
      "left" : "for (FileType type : myFileTypeManager.getRegisteredFileTypes())",
      "right" : "for (FileType type : myFileTypeManager.getRegisteredFileTypes())",
      "info" : "EnhancedForStatement[9404-9540]:EnhancedForStatement[9404-9540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9469-9540]:Block[9469-9540]"
    }, {
      "left" : "newExtensions.put(type, getExtensions(type));",
      "right" : "newExtensions.put(type, getExtensions(type));",
      "info" : "ExpressionStatement[9483-9528]:ExpressionStatement[9483-9528]"
    }, {
      "left" : "if (!newExtensions.keySet().containsAll(oldExtensions.keySet()))",
      "right" : "if (!newExtensions.keySet().containsAll(oldExtensions.keySet()))",
      "info" : "IfStatement[9703-9834]:IfStatement[9703-9834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9768-9834]:Block[9768-9834]"
    }, {
      "left" : "rebuildAllIndices();",
      "right" : "rebuildAllIndices();",
      "info" : "ExpressionStatement[9782-9802]:ExpressionStatement[9782-9802]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9815-9822]:ReturnStatement[9815-9822]"
    }, {
      "left" : "for (Map.Entry<FileType, Set<String>> entry : oldExtensions.entrySet())",
      "right" : "for (Map.Entry<FileType, Set<String>> entry : oldExtensions.entrySet())",
      "info" : "EnhancedForStatement[9845-10170]:EnhancedForStatement[9845-10170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9917-10170]:Block[9917-10170]"
    }, {
      "left" : "FileType fileType = entry.getKey();",
      "right" : "FileType fileType = entry.getKey();",
      "info" : "VariableDeclarationStatement[9931-9966]:VariableDeclarationStatement[9931-9966]"
    }, {
      "left" : "Set<String> strings = entry.getValue();",
      "right" : "Set<String> strings = entry.getValue();",
      "info" : "VariableDeclarationStatement[9979-10018]:VariableDeclarationStatement[9979-10018]"
    }, {
      "left" : "if (!newExtensions.get(fileType).containsAll(strings))",
      "right" : "if (!newExtensions.get(fileType).containsAll(strings))",
      "info" : "IfStatement[10031-10158]:IfStatement[10031-10158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10086-10158]:Block[10086-10158]"
    }, {
      "left" : "rebuildAllIndices();",
      "right" : "rebuildAllIndices();",
      "info" : "ExpressionStatement[10102-10122]:ExpressionStatement[10102-10122]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10137-10144]:ReturnStatement[10137-10144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10269-10497]:Block[10269-10497]"
    }, {
      "left" : "final Set<String> set = new THashSet<String>();",
      "right" : "final Set<String> set = new THashSet<String>();",
      "info" : "VariableDeclarationStatement[10279-10326]:VariableDeclarationStatement[10279-10326]"
    }, {
      "left" : "for (FileNameMatcher matcher : myFileTypeManager.getAssociations(type))",
      "right" : "for (FileNameMatcher matcher : myFileTypeManager.getAssociations(type))",
      "info" : "EnhancedForStatement[10335-10469]:EnhancedForStatement[10335-10469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10407-10469]:Block[10407-10469]"
    }, {
      "left" : "set.add(matcher.getPresentableString());",
      "right" : "set.add(matcher.getPresentableString());",
      "info" : "ExpressionStatement[10419-10459]:ExpressionStatement[10419-10459]"
    }, {
      "left" : "return set;",
      "right" : "return set;",
      "info" : "ReturnStatement[10478-10489]:ReturnStatement[10478-10489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10538-10835]:Block[10538-10835]"
    }, {
      "left" : "IndexingStamp.flushCaches();",
      "right" : "IndexingStamp.flushCaches();",
      "info" : "ExpressionStatement[10548-10576]:ExpressionStatement[10548-10576]"
    }, {
      "left" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "right" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "info" : "EnhancedForStatement[10585-10777]:EnhancedForStatement[10585-10777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10629-10777]:Block[10629-10777]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10641-10767]:TryStatement[10641-10767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10645-10691]:Block[10645-10691]"
    }, {
      "left" : "clearIndex(indexId);",
      "right" : "clearIndex(indexId);",
      "info" : "ExpressionStatement[10659-10679]:ExpressionStatement[10659-10679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10729-10767]:Block[10729-10767]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[10743-10755]:ExpressionStatement[10743-10755]"
    }, {
      "left" : "scheduleIndexRebuild(\"File type change\");",
      "right" : "scheduleIndexRebuild(\"File type change\");",
      "info" : "ExpressionStatement[10786-10827]:ExpressionStatement[10786-10827]"
    }, {
      "left" : "connection.subscribe(AppTopics.FILE_DOCUMENT_SYNC, new FileDocumentManagerAdapter() {\n      @Override\n      public void fileContentReloaded(@NotNull VirtualFile file, @NotNull Document document) {\n        cleanupMemoryStorage();\n      }\n\n      @Override\n      public void unsavedDocumentsDropped() {\n        cleanupMemoryStorage();\n      }\n    });",
      "right" : "connection.subscribe(AppTopics.FILE_DOCUMENT_SYNC, new FileDocumentManagerAdapter() {\n      @Override\n      public void fileContentReloaded(@NotNull VirtualFile file, @NotNull Document document) {\n        cleanupMemoryStorage();\n      }\n\n      @Override\n      public void unsavedDocumentsDropped() {\n        cleanupMemoryStorage();\n      }\n    });",
      "info" : "ExpressionStatement[10849-11196]:ExpressionStatement[10849-11196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11044-11085]:Block[11044-11085]"
    }, {
      "left" : "cleanupMemoryStorage();",
      "right" : "cleanupMemoryStorage();",
      "info" : "ExpressionStatement[11054-11077]:ExpressionStatement[11054-11077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11147-11188]:Block[11147-11188]"
    }, {
      "left" : "cleanupMemoryStorage();",
      "right" : "cleanupMemoryStorage();",
      "info" : "ExpressionStatement[11157-11180]:ExpressionStatement[11157-11180]"
    }, {
      "left" : "ApplicationManager.getApplication().addApplicationListener(new ApplicationAdapter() {\n      @Override\n      public void writeActionStarted(Object action) {\n        myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();\n      }\n    });",
      "right" : "ApplicationManager.getApplication().addApplicationListener(new ApplicationAdapter() {\n      @Override\n      public void writeActionStarted(Object action) {\n        myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();\n      }\n    });",
      "info" : "ExpressionStatement[11202-11439]:ExpressionStatement[11202-11439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11356-11431]:Block[11356-11431]"
    }, {
      "left" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();",
      "right" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.clear();",
      "info" : "ExpressionStatement[11366-11423]:ExpressionStatement[11366-11423]"
    }, {
      "left" : "myChangedFilesCollector = new ChangedFilesCollector();",
      "right" : "myChangedFilesCollector = new ChangedFilesCollector();",
      "info" : "ExpressionStatement[11445-11499]:ExpressionStatement[11445-11499]"
    }, {
      "left" : "myConnection = connection;",
      "right" : "myConnection = connection;",
      "info" : "ExpressionStatement[11504-11530]:ExpressionStatement[11504-11530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11641-11715]:Block[11641-11715]"
    }, {
      "left" : "return ProjectCoreUtil.isProjectOrWorkspaceFile(file, fileType);",
      "right" : "return ProjectCoreUtil.isProjectOrWorkspaceFile(file, fileType);",
      "info" : "ReturnStatement[11647-11711]:ReturnStatement[11647-11711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11819-12114]:Block[11819-12114]"
    }, {
      "left" : "if (!(file instanceof VirtualFileWithId) || !file.isValid())",
      "right" : "if (!(file instanceof VirtualFileWithId) || !file.isValid())",
      "info" : "IfStatement[11825-11913]:IfStatement[11825-11913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11886-11913]:Block[11886-11913]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11894-11907]:ReturnStatement[11894-11907]"
    }, {
      "left" : "if (restrictedTo != null && !Comparing.equal(file, restrictedTo) ||\n        filter != null && restrictedTo == null && !filter.accept(file))",
      "right" : "if (restrictedTo != null && !Comparing.equal(file, restrictedTo) ||\n        filter != null && restrictedTo == null && !filter.accept(file))",
      "info" : "IfStatement[11919-12093]:IfStatement[11919-12093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12066-12093]:Block[12066-12093]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12074-12087]:ReturnStatement[12074-12087]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12098-12110]:ReturnStatement[12098-12110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12190-12254]:Block[12190-12254]"
    }, {
      "left" : "myChangedFilesCollector.invalidateIndices(file, true);",
      "right" : "myChangedFilesCollector.invalidateIndices(file, true);",
      "info" : "ExpressionStatement[12196-12250]:ExpressionStatement[12196-12250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12288-15611]:Block[12288-15611]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12294-15607]:TryStatement[12294-15607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12298-14798]:Block[12298-14798]"
    }, {
      "left" : "File indexRoot = PathManager.getIndexRoot();",
      "right" : "File indexRoot = PathManager.getIndexRoot();",
      "info" : "VariableDeclarationStatement[12306-12350]:VariableDeclarationStatement[12306-12350]"
    }, {
      "left" : "final File corruptionMarker = new File(indexRoot, CORRUPTION_MARKER_NAME);",
      "right" : "final File corruptionMarker = new File(indexRoot, CORRUPTION_MARKER_NAME);",
      "info" : "VariableDeclarationStatement[12357-12431]:VariableDeclarationStatement[12357-12431]"
    }, {
      "left" : "final boolean currentVersionCorrupted = corruptionMarker.exists();",
      "right" : "final boolean currentVersionCorrupted = corruptionMarker.exists();",
      "info" : "VariableDeclarationStatement[12438-12504]:VariableDeclarationStatement[12438-12504]"
    }, {
      "left" : "if (currentVersionCorrupted)",
      "right" : "if (currentVersionCorrupted)",
      "info" : "IfStatement[12511-12797]:IfStatement[12511-12797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12540-12797]:Block[12540-12797]"
    }, {
      "left" : "FileUtil.deleteWithRenaming(indexRoot);",
      "right" : "FileUtil.deleteWithRenaming(indexRoot);",
      "info" : "ExpressionStatement[12550-12589]:ExpressionStatement[12550-12589]"
    }, {
      "left" : "indexRoot.mkdirs();",
      "right" : "indexRoot.mkdirs();",
      "info" : "ExpressionStatement[12598-12617]:ExpressionStatement[12598-12617]"
    }, {
      "left" : "mySerializationManagerEx.reinitializeNameStorage();",
      "right" : "mySerializationManagerEx.reinitializeNameStorage();",
      "info" : "ExpressionStatement[12738-12789]:ExpressionStatement[12738-12789]"
    }, {
      "left" : "FileBasedIndexExtension[] extensions = Extensions.getExtensions(FileBasedIndexExtension.EXTENSION_POINT_NAME);",
      "right" : "FileBasedIndexExtension[] extensions = Extensions.getExtensions(FileBasedIndexExtension.EXTENSION_POINT_NAME);",
      "info" : "VariableDeclarationStatement[12805-12915]:VariableDeclarationStatement[12805-12915]"
    }, {
      "left" : "boolean versionChanged = false;",
      "right" : "boolean versionChanged = false;",
      "info" : "VariableDeclarationStatement[12923-12954]:VariableDeclarationStatement[12923-12954]"
    }, {
      "left" : "for (FileBasedIndexExtension<?, ?> extension : extensions)",
      "right" : "for (FileBasedIndexExtension<?, ?> extension : extensions)",
      "info" : "EnhancedForStatement[12961-13373]:EnhancedForStatement[12961-13373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13020-13373]:Block[13020-13373]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13030-13365]:TryStatement[13030-13365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13034-13177]:Block[13034-13177]"
    }, {
      "left" : "ourRebuildStatus.put(extension.getName(), new AtomicInteger(OK));",
      "right" : "ourRebuildStatus.put(extension.getName(), new AtomicInteger(OK));",
      "info" : "ExpressionStatement[13046-13111]:ExpressionStatement[13046-13111]"
    }, {
      "left" : "versionChanged |= registerIndexer(extension);",
      "right" : "versionChanged |= registerIndexer(extension);",
      "info" : "ExpressionStatement[13122-13167]:ExpressionStatement[13122-13167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13208-13238]:Block[13208-13238]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[13220-13228]:ThrowStatement[13220-13228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13267-13365]:Block[13267-13365]"
    }, {
      "left" : "PluginManager.handleComponentError(t, extension.getClass().getName(), null);",
      "right" : "PluginManager.handleComponentError(t, extension.getClass().getName(), null);",
      "info" : "ExpressionStatement[13279-13355]:ExpressionStatement[13279-13355]"
    }, {
      "left" : "for (List<ID<?, ?>> value : myFileType2IndicesWithFileTypeInfoMap.values())",
      "right" : "for (List<ID<?, ?>> value : myFileType2IndicesWithFileTypeInfoMap.values())",
      "info" : "EnhancedForStatement[13381-13518]:EnhancedForStatement[13381-13518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13457-13518]:Block[13457-13518]"
    }, {
      "left" : "value.addAll(myIndicesWithoutFileTypeInfo);",
      "right" : "value.addAll(myIndicesWithoutFileTypeInfo);",
      "info" : "ExpressionStatement[13467-13510]:ExpressionStatement[13467-13510]"
    }, {
      "left" : "FileUtil.delete(corruptionMarker);",
      "right" : "FileUtil.delete(corruptionMarker);",
      "info" : "ExpressionStatement[13525-13559]:ExpressionStatement[13525-13559]"
    }, {
      "left" : "String rebuildNotification = null;",
      "right" : "String rebuildNotification = null;",
      "info" : "VariableDeclarationStatement[13567-13601]:VariableDeclarationStatement[13567-13601]"
    }, {
      "left" : "if (currentVersionCorrupted)",
      "right" : "if (currentVersionCorrupted)",
      "info" : "IfStatement[13608-13892]:IfStatement[13608-13892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13637-13739]:Block[13637-13739]"
    }, {
      "left" : "rebuildNotification = \"Index files on disk are corrupted. Indices will be rebuilt.\";",
      "right" : "rebuildNotification = \"Index files on disk are corrupted. Indices will be rebuilt.\";",
      "info" : "ExpressionStatement[13647-13731]:ExpressionStatement[13647-13731]"
    }, {
      "left" : "if (versionChanged)",
      "right" : "if (versionChanged)",
      "info" : "IfStatement[13751-13892]:IfStatement[13751-13892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13771-13892]:Block[13771-13892]"
    }, {
      "left" : "rebuildNotification = \"Index file format has changed for some indices. These indices will be rebuilt.\";",
      "right" : "rebuildNotification = \"Index file format has changed for some indices. These indices will be rebuilt.\";",
      "info" : "ExpressionStatement[13781-13884]:ExpressionStatement[13781-13884]"
    }, {
      "left" : "if (rebuildNotification != null\n          && !ApplicationManager.getApplication().isHeadlessEnvironment()\n          && Registry.is(\"ide.showIndexRebuildMessage\"))",
      "right" : "if (rebuildNotification != null\n          && !ApplicationManager.getApplication().isHeadlessEnvironment()\n          && Registry.is(\"ide.showIndexRebuildMessage\"))",
      "info" : "IfStatement[13899-14200]:IfStatement[13899-14200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14062-14200]:Block[14062-14200]"
    }, {
      "left" : "NOTIFICATIONS.createNotification(\"Index Rebuild\", rebuildNotification, NotificationType.INFORMATION, null).notify(null);",
      "right" : "NOTIFICATIONS.createNotification(\"Index Rebuild\", rebuildNotification, NotificationType.INFORMATION, null).notify(null);",
      "info" : "ExpressionStatement[14072-14192]:ExpressionStatement[14072-14192]"
    }, {
      "left" : "dropUnregisteredIndices();",
      "right" : "dropUnregisteredIndices();",
      "info" : "ExpressionStatement[14208-14234]:ExpressionStatement[14208-14234]"
    }, {
      "left" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "right" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "info" : "EnhancedForStatement[14316-14635]:EnhancedForStatement[14316-14635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14360-14635]:Block[14360-14635]"
    }, {
      "left" : "if (ourRebuildStatus.get(indexId).compareAndSet(REQUIRES_REBUILD, OK))",
      "right" : "if (ourRebuildStatus.get(indexId).compareAndSet(REQUIRES_REBUILD, OK))",
      "info" : "IfStatement[14370-14627]:IfStatement[14370-14627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14441-14627]:Block[14441-14627]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14453-14617]:TryStatement[14453-14617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14457-14503]:Block[14457-14503]"
    }, {
      "left" : "clearIndex(indexId);",
      "right" : "clearIndex(indexId);",
      "info" : "ExpressionStatement[14471-14491]:ExpressionStatement[14471-14491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14541-14617]:Block[14541-14617]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[14555-14579]:ExpressionStatement[14555-14579]"
    }, {
      "left" : "LOG.error(e);",
      "right" : "LOG.error(e);",
      "info" : "ExpressionStatement[14592-14605]:ExpressionStatement[14592-14605]"
    }, {
      "left" : "myConnection.subscribe(VirtualFileManager.VFS_CHANGES, myChangedFilesCollector);",
      "right" : "myConnection.subscribe(VirtualFileManager.VFS_CHANGES, myChangedFilesCollector);",
      "info" : "ExpressionStatement[14643-14723]:ExpressionStatement[14643-14723]"
    }, {
      "left" : "registerIndexableSet(new AdditionalIndexableFileSet(), null);",
      "right" : "registerIndexableSet(new AdditionalIndexableFileSet(), null);",
      "info" : "ExpressionStatement[14731-14792]:ExpressionStatement[14731-14792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14825-14869]:Block[14825-14869]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[14833-14863]:ThrowStatement[14833-14863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14882-15607]:Block[14882-15607]"
    }, {
      "left" : "ShutDownTracker.getInstance().registerShutdownTask(new Runnable() {\n        @Override\n        public void run() {\n          performShutdown();\n        }\n      });",
      "right" : "ShutDownTracker.getInstance().registerShutdownTask(new Runnable() {\n        @Override\n        public void run() {\n          performShutdown();\n        }\n      });",
      "info" : "ExpressionStatement[14890-15052]:ExpressionStatement[14890-15052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15002-15042]:Block[15002-15042]"
    }, {
      "left" : "performShutdown();",
      "right" : "performShutdown();",
      "info" : "ExpressionStatement[15014-15032]:ExpressionStatement[15014-15032]"
    }, {
      "left" : "saveRegisteredIndices(myIndices.keySet());",
      "right" : "saveRegisteredIndices(myIndices.keySet());",
      "info" : "ExpressionStatement[15059-15101]:ExpressionStatement[15059-15101]"
    }, {
      "left" : "myFlushingFuture = FlushingDaemon.everyFiveSeconds(new Runnable() {\n        private int lastModCount = 0;\n\n        @Override\n        public void run() {\n          mySerializationManagerEx.flushNameStorage();\n\n          if (lastModCount == myLocalModCount) {\n            flushAllIndices(lastModCount);\n          }\n          lastModCount = myLocalModCount;\n        }\n      });",
      "right" : "myFlushingFuture = FlushingDaemon.everyFiveSeconds(new Runnable() {\n        private int lastModCount = 0;\n\n        @Override\n        public void run() {\n          mySerializationManagerEx.flushNameStorage();\n\n          if (lastModCount == myLocalModCount) {\n            flushAllIndices(lastModCount);\n          }\n          lastModCount = myLocalModCount;\n        }\n      });",
      "info" : "ExpressionStatement[15108-15482]:ExpressionStatement[15108-15482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15259-15472]:Block[15259-15472]"
    }, {
      "left" : "mySerializationManagerEx.flushNameStorage();",
      "right" : "mySerializationManagerEx.flushNameStorage();",
      "info" : "ExpressionStatement[15271-15315]:ExpressionStatement[15271-15315]"
    }, {
      "left" : "if (lastModCount == myLocalModCount)",
      "right" : "if (lastModCount == myLocalModCount)",
      "info" : "IfStatement[15327-15420]:IfStatement[15327-15420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15364-15420]:Block[15364-15420]"
    }, {
      "left" : "flushAllIndices(lastModCount);",
      "right" : "flushAllIndices(lastModCount);",
      "info" : "ExpressionStatement[15378-15408]:ExpressionStatement[15378-15408]"
    }, {
      "left" : "lastModCount = myLocalModCount;",
      "right" : "lastModCount = myLocalModCount;",
      "info" : "ExpressionStatement[15431-15462]:ExpressionStatement[15431-15462]"
    }, {
      "left" : "myInitialized = true;",
      "right" : "myInitialized = true;",
      "info" : "ExpressionStatement[15489-15510]:ExpressionStatement[15489-15510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15655-15682]:Block[15655-15682]"
    }, {
      "left" : "initExtensions();",
      "right" : "initExtensions();",
      "info" : "ExpressionStatement[15661-15678]:ExpressionStatement[15661-15678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15757-16002]:Block[15757-16002]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15763-15998]:TryStatement[15763-15998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15767-15926]:Block[15767-15926]"
    }, {
      "left" : "final String _path = FileUtil.toSystemIndependentName(new File(path).getCanonicalPath());",
      "right" : "final String _path = FileUtil.toSystemIndependentName(new File(path).getCanonicalPath());",
      "info" : "VariableDeclarationStatement[15775-15864]:VariableDeclarationStatement[15775-15864]"
    }, {
      "left" : "return _path.endsWith(\"/\") ? _path : _path + \"/\";",
      "right" : "return _path.endsWith(\"/\") ? _path : _path + \"/\";",
      "info" : "ReturnStatement[15871-15920]:ReturnStatement[15871-15920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15953-15998]:Block[15953-15998]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[15961-15973]:ExpressionStatement[15961-15973]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15980-15992]:ReturnStatement[15980-15992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16243-17176]:Block[16243-17176]"
    }, {
      "left" : "final ID<K, V> name = extension.getName();",
      "right" : "final ID<K, V> name = extension.getName();",
      "info" : "VariableDeclarationStatement[16249-16291]:VariableDeclarationStatement[16249-16291]"
    }, {
      "left" : "final int version = extension.getVersion();",
      "right" : "final int version = extension.getVersion();",
      "info" : "VariableDeclarationStatement[16296-16339]:VariableDeclarationStatement[16296-16339]"
    }, {
      "left" : "final File versionFile = IndexInfrastructure.getVersionFile(name);",
      "right" : "final File versionFile = IndexInfrastructure.getVersionFile(name);",
      "info" : "VariableDeclarationStatement[16344-16410]:VariableDeclarationStatement[16344-16410]"
    }, {
      "left" : "final boolean versionFileExisted = versionFile.exists();",
      "right" : "final boolean versionFileExisted = versionFile.exists();",
      "info" : "VariableDeclarationStatement[16415-16471]:VariableDeclarationStatement[16415-16471]"
    }, {
      "left" : "boolean versionChanged = false;",
      "right" : "boolean versionChanged = false;",
      "info" : "VariableDeclarationStatement[16476-16507]:VariableDeclarationStatement[16476-16507]"
    }, {
      "left" : "if (IndexingStamp.versionDiffers(versionFile, version))",
      "right" : "if (IndexingStamp.versionDiffers(versionFile, version))",
      "info" : "IfStatement[16512-17088]:IfStatement[16512-17088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16568-17088]:Block[16568-17088]"
    }, {
      "left" : "if (versionFileExisted)",
      "right" : "if (versionFileExisted)",
      "info" : "IfStatement[16576-16732]:IfStatement[16576-16732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16600-16732]:Block[16600-16732]"
    }, {
      "left" : "versionChanged = true;",
      "right" : "versionChanged = true;",
      "info" : "ExpressionStatement[16610-16632]:ExpressionStatement[16610-16632]"
    }, {
      "left" : "LOG.info(\"Version has changed for index \" + name + \". The index will be rebuilt.\");",
      "right" : "LOG.info(\"Version has changed for index \" + name + \". The index will be rebuilt.\");",
      "info" : "ExpressionStatement[16641-16724]:ExpressionStatement[16641-16724]"
    }, {
      "left" : "if (extension.hasSnapshotMapping() && versionChanged)",
      "right" : "if (extension.hasSnapshotMapping() && versionChanged)",
      "info" : "IfStatement[16739-16892]:IfStatement[16739-16892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16793-16892]:Block[16793-16892]"
    }, {
      "left" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getPersistentIndexRootDir(name));",
      "right" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getPersistentIndexRootDir(name));",
      "info" : "ExpressionStatement[16803-16884]:ExpressionStatement[16803-16884]"
    }, {
      "left" : "File rootDir = IndexInfrastructure.getIndexRootDir(name);",
      "right" : "File rootDir = IndexInfrastructure.getIndexRootDir(name);",
      "info" : "VariableDeclarationStatement[16899-16956]:VariableDeclarationStatement[16899-16956]"
    }, {
      "left" : "if (versionFileExisted)",
      "right" : "if (versionFileExisted)",
      "info" : "IfStatement[16963-17024]:IfStatement[16963-17024]"
    }, {
      "left" : "FileUtil.deleteWithRenaming(rootDir);",
      "right" : "FileUtil.deleteWithRenaming(rootDir);",
      "info" : "ExpressionStatement[16987-17024]:ExpressionStatement[16987-17024]"
    }, {
      "left" : "IndexingStamp.rewriteVersion(versionFile, version);",
      "right" : "IndexingStamp.rewriteVersion(versionFile, version);",
      "info" : "ExpressionStatement[17031-17082]:ExpressionStatement[17031-17082]"
    }, {
      "left" : "initIndexStorage(extension, version, versionFile);",
      "right" : "initIndexStorage(extension, version, versionFile);",
      "info" : "ExpressionStatement[17094-17144]:ExpressionStatement[17094-17144]"
    }, {
      "left" : "return versionChanged;",
      "right" : "return versionChanged;",
      "info" : "ReturnStatement[17150-17172]:ReturnStatement[17150-17172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17330-20443]:Block[17330-20443]"
    }, {
      "left" : "MapIndexStorage<K, V> storage = null;",
      "right" : "MapIndexStorage<K, V> storage = null;",
      "info" : "VariableDeclarationStatement[17336-17373]:VariableDeclarationStatement[17336-17373]"
    }, {
      "left" : "final ID<K, V> name = extension.getName();",
      "right" : "final ID<K, V> name = extension.getName();",
      "info" : "VariableDeclarationStatement[17378-17420]:VariableDeclarationStatement[17378-17420]"
    }, {
      "left" : "boolean contentHashesEnumeratorOk = false;",
      "right" : "boolean contentHashesEnumeratorOk = false;",
      "info" : "VariableDeclarationStatement[17425-17467]:VariableDeclarationStatement[17425-17467]"
    }, {
      "left" : "for (int attempt = 0; attempt < 2; attempt++)",
      "right" : "for (int attempt = 0; attempt < 2; attempt++)",
      "info" : "ForStatement[17473-20439]:ForStatement[17473-20439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17519-20439]:Block[17519-20439]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17527-20433]:TryStatement[17527-20433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17531-19759]:Block[17531-19759]"
    }, {
      "left" : "if (extension.hasSnapshotMapping())",
      "right" : "if (extension.hasSnapshotMapping())",
      "info" : "IfStatement[17541-17694]:IfStatement[17541-17694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17577-17694]:Block[17577-17694]"
    }, {
      "left" : "ContentHashesSupport.initContentHashesEnumerator();",
      "right" : "ContentHashesSupport.initContentHashesEnumerator();",
      "info" : "ExpressionStatement[17589-17640]:ExpressionStatement[17589-17640]"
    }, {
      "left" : "contentHashesEnumeratorOk = true;",
      "right" : "contentHashesEnumeratorOk = true;",
      "info" : "ExpressionStatement[17651-17684]:ExpressionStatement[17651-17684]"
    }, {
      "left" : "storage = new MapIndexStorage<K, V>(\n          IndexInfrastructure.getStorageFile(name),\n          extension.getKeyDescriptor(),\n          extension.getValueExternalizer(),\n          extension.getCacheSize(),\n          extension.keyIsUniqueForIndexedFile(),\n          extension.traceKeyHashToVirtualFileMapping()\n        );",
      "right" : "storage = new MapIndexStorage<K, V>(\n          IndexInfrastructure.getStorageFile(name),\n          extension.getKeyDescriptor(),\n          extension.getValueExternalizer(),\n          extension.getCacheSize(),\n          extension.keyIsUniqueForIndexedFile(),\n          extension.traceKeyHashToVirtualFileMapping()\n        );",
      "info" : "ExpressionStatement[17703-18026]:ExpressionStatement[17703-18026]"
    }, {
      "left" : "final MemoryIndexStorage<K, V> memStorage = new MemoryIndexStorage<K, V>(storage);",
      "right" : "final MemoryIndexStorage<K, V> memStorage = new MemoryIndexStorage<K, V>(storage);",
      "info" : "VariableDeclarationStatement[18036-18118]:VariableDeclarationStatement[18036-18118]"
    }, {
      "left" : "final UpdatableIndex<K, V, FileContent> index = createIndex(name, extension, memStorage);",
      "right" : "final UpdatableIndex<K, V, FileContent> index = createIndex(name, extension, memStorage);",
      "info" : "VariableDeclarationStatement[18127-18216]:VariableDeclarationStatement[18127-18216]"
    }, {
      "left" : "final InputFilter inputFilter = extension.getInputFilter();",
      "right" : "final InputFilter inputFilter = extension.getInputFilter();",
      "info" : "VariableDeclarationStatement[18225-18284]:VariableDeclarationStatement[18225-18284]"
    }, {
      "left" : "myIndices.put(name, new Pair<UpdatableIndex<?, ?, FileContent>, InputFilter>(index, new IndexableFilesFilter(inputFilter)));",
      "right" : "myIndices.put(name, new Pair<UpdatableIndex<?, ?, FileContent>, InputFilter>(index, new IndexableFilesFilter(inputFilter)));",
      "info" : "ExpressionStatement[18294-18418]:ExpressionStatement[18294-18418]"
    }, {
      "left" : "if (inputFilter instanceof FileTypeSpecificInputFilter)",
      "right" : "if (inputFilter instanceof FileTypeSpecificInputFilter)",
      "info" : "IfStatement[18427-19178]:IfStatement[18427-19178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18483-19103]:Block[18483-19103]"
    }, {
      "left" : "((FileTypeSpecificInputFilter)inputFilter).registerFileTypesUsedForIndexing(new Consumer<FileType>() {\n            final Set<FileType> addedTypes = new THashSet<FileType>();\n            @Override\n            public void consume(FileType type) {\n              if (type == null || !addedTypes.add(type)) {\n                return;\n              }\n              List<ID<?, ?>> ids = myFileType2IndicesWithFileTypeInfoMap.get(type);\n              if (ids == null) myFileType2IndicesWithFileTypeInfoMap.put(type, ids = new ArrayList<ID<?, ?>>(5));\n              ids.add(name);\n            }\n          });",
      "right" : "((FileTypeSpecificInputFilter)inputFilter).registerFileTypesUsedForIndexing(new Consumer<FileType>() {\n            final Set<FileType> addedTypes = new THashSet<FileType>();\n            @Override\n            public void consume(FileType type) {\n              if (type == null || !addedTypes.add(type)) {\n                return;\n              }\n              List<ID<?, ?>> ids = myFileType2IndicesWithFileTypeInfoMap.get(type);\n              if (ids == null) myFileType2IndicesWithFileTypeInfoMap.put(type, ids = new ArrayList<ID<?, ?>>(5));\n              ids.add(name);\n            }\n          });",
      "info" : "ExpressionStatement[18495-19093]:ExpressionStatement[18495-19093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18738-19079]:Block[18738-19079]"
    }, {
      "left" : "if (type == null || !addedTypes.add(type))",
      "right" : "if (type == null || !addedTypes.add(type))",
      "info" : "IfStatement[18754-18838]:IfStatement[18754-18838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18797-18838]:Block[18797-18838]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18815-18822]:ReturnStatement[18815-18822]"
    }, {
      "left" : "List<ID<?, ?>> ids = myFileType2IndicesWithFileTypeInfoMap.get(type);",
      "right" : "List<ID<?, ?>> ids = myFileType2IndicesWithFileTypeInfoMap.get(type);",
      "info" : "VariableDeclarationStatement[18853-18922]:VariableDeclarationStatement[18853-18922]"
    }, {
      "left" : "if (ids == null)",
      "right" : "if (ids == null)",
      "info" : "IfStatement[18937-19036]:IfStatement[18937-19036]"
    }, {
      "left" : "myFileType2IndicesWithFileTypeInfoMap.put(type, ids = new ArrayList<ID<?, ?>>(5));",
      "right" : "myFileType2IndicesWithFileTypeInfoMap.put(type, ids = new ArrayList<ID<?, ?>>(5));",
      "info" : "ExpressionStatement[18954-19036]:ExpressionStatement[18954-19036]"
    }, {
      "left" : "ids.add(name);",
      "right" : "ids.add(name);",
      "info" : "ExpressionStatement[19051-19065]:ExpressionStatement[19051-19065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19117-19178]:Block[19117-19178]"
    }, {
      "left" : "myIndicesWithoutFileTypeInfo.add(name);",
      "right" : "myIndicesWithoutFileTypeInfo.add(name);",
      "info" : "ExpressionStatement[19129-19168]:ExpressionStatement[19129-19168]"
    }, {
      "left" : "myUnsavedDataUpdateTasks.put(name, new DocumentUpdateTask(name));",
      "right" : "myUnsavedDataUpdateTasks.put(name, new DocumentUpdateTask(name));",
      "info" : "ExpressionStatement[19188-19253]:ExpressionStatement[19188-19253]"
    }, {
      "left" : "myIndexIdToVersionMap.put(name, version);",
      "right" : "myIndexIdToVersionMap.put(name, version);",
      "info" : "ExpressionStatement[19262-19303]:ExpressionStatement[19262-19303]"
    }, {
      "left" : "if (!extension.dependsOnFileContent())",
      "right" : "if (!extension.dependsOnFileContent())",
      "info" : "IfStatement[19312-19563]:IfStatement[19312-19563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19351-19491]:Block[19351-19491]"
    }, {
      "left" : "if (extension.indexDirectories())",
      "right" : "if (extension.indexDirectories())",
      "info" : "IfStatement[19363-19431]:IfStatement[19363-19431]"
    }, {
      "left" : "myIndicesForDirectories.add(name);",
      "right" : "myIndicesForDirectories.add(name);",
      "info" : "ExpressionStatement[19397-19431]:ExpressionStatement[19397-19431]"
    }, {
      "left" : "myNotRequiringContentIndices.add(name);",
      "right" : "myNotRequiringContentIndices.add(name);",
      "info" : "ExpressionStatement[19442-19481]:ExpressionStatement[19442-19481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19505-19563]:Block[19505-19563]"
    }, {
      "left" : "myRequiringContentIndices.add(name);",
      "right" : "myRequiringContentIndices.add(name);",
      "info" : "ExpressionStatement[19517-19553]:ExpressionStatement[19517-19553]"
    }, {
      "left" : "if (extension instanceof PsiDependentIndex)",
      "right" : "if (extension instanceof PsiDependentIndex)",
      "info" : "IfStatement[19572-19648]:IfStatement[19572-19648]"
    }, {
      "left" : "myPsiDependentIndices.add(name);",
      "right" : "myPsiDependentIndices.add(name);",
      "info" : "ExpressionStatement[19616-19648]:ExpressionStatement[19616-19648]"
    }, {
      "left" : "myNoLimitCheckTypes.addAll(extension.getFileTypesWithSizeLimitNotApplicable());",
      "right" : "myNoLimitCheckTypes.addAll(extension.getFileTypesWithSizeLimitNotApplicable());",
      "info" : "ExpressionStatement[19657-19736]:ExpressionStatement[19657-19736]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19745-19751]:BreakStatement[19745-19751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19786-20433]:Block[19786-20433]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[19796-19808]:ExpressionStatement[19796-19808]"
    }, {
      "left" : "boolean instantiatedStorage = storage != null;",
      "right" : "boolean instantiatedStorage = storage != null;",
      "info" : "VariableDeclarationStatement[19817-19863]:VariableDeclarationStatement[19817-19863]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19872-20007]:TryStatement[19872-20007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19876-19961]:Block[19876-19961]"
    }, {
      "left" : "if (storage != null)",
      "right" : "if (storage != null)",
      "info" : "IfStatement[19888-19925]:IfStatement[19888-19925]"
    }, {
      "left" : "storage.close();",
      "right" : "storage.close();",
      "info" : "ExpressionStatement[19909-19925]:ExpressionStatement[19909-19925]"
    }, {
      "left" : "storage = null;",
      "right" : "storage = null;",
      "info" : "ExpressionStatement[19936-19951]:ExpressionStatement[19936-19951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19996-20007]:Block[19996-20007]"
    }, {
      "left" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getIndexRootDir(name));",
      "right" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getIndexRootDir(name));",
      "info" : "ExpressionStatement[20017-20088]:ExpressionStatement[20017-20088]"
    }, {
      "left" : "if (extension.hasSnapshotMapping() && (!contentHashesEnumeratorOk || instantiatedStorage))",
      "right" : "if (extension.hasSnapshotMapping() && (!contentHashesEnumeratorOk || instantiatedStorage))",
      "info" : "IfStatement[20098-20365]:IfStatement[20098-20365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20189-20365]:Block[20189-20365]"
    }, {
      "left" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getPersistentIndexRootDir(name));",
      "right" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getPersistentIndexRootDir(name));",
      "info" : "ExpressionStatement[20201-20282]:ExpressionStatement[20201-20282]"
    }, {
      "left" : "IndexingStamp.rewriteVersion(versionFile, version);",
      "right" : "IndexingStamp.rewriteVersion(versionFile, version);",
      "info" : "ExpressionStatement[20374-20425]:ExpressionStatement[20374-20425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20524-20977]:Block[20524-20977]"
    }, {
      "left" : "final File file = getRegisteredIndicesFile();",
      "right" : "final File file = getRegisteredIndicesFile();",
      "info" : "VariableDeclarationStatement[20530-20575]:VariableDeclarationStatement[20530-20575]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20580-20973]:TryStatement[20580-20973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20584-20933]:Block[20584-20933]"
    }, {
      "left" : "FileUtil.createIfDoesntExist(file);",
      "right" : "FileUtil.createIfDoesntExist(file);",
      "info" : "ExpressionStatement[20592-20627]:ExpressionStatement[20592-20627]"
    }, {
      "left" : "final DataOutputStream os = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));",
      "right" : "final DataOutputStream os = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));",
      "info" : "VariableDeclarationStatement[20634-20737]:VariableDeclarationStatement[20634-20737]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20744-20927]:TryStatement[20744-20927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20748-20883]:Block[20748-20883]"
    }, {
      "left" : "os.writeInt(ids.size());",
      "right" : "os.writeInt(ids.size());",
      "info" : "ExpressionStatement[20758-20782]:ExpressionStatement[20758-20782]"
    }, {
      "left" : "for (ID<?, ?> id : ids)",
      "right" : "for (ID<?, ?> id : ids)",
      "info" : "EnhancedForStatement[20791-20875]:EnhancedForStatement[20791-20875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20815-20875]:Block[20815-20875]"
    }, {
      "left" : "IOUtil.writeString(id.toString(), os);",
      "right" : "IOUtil.writeString(id.toString(), os);",
      "info" : "ExpressionStatement[20827-20865]:ExpressionStatement[20827-20865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20898-20927]:Block[20898-20927]"
    }, {
      "left" : "os.close();",
      "right" : "os.close();",
      "info" : "ExpressionStatement[20908-20919]:ExpressionStatement[20908-20919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20966-20973]:Block[20966-20973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21046-21514]:Block[21046-21514]"
    }, {
      "left" : "final Set<String> result = new THashSet<String>();",
      "right" : "final Set<String> result = new THashSet<String>();",
      "info" : "VariableDeclarationStatement[21052-21102]:VariableDeclarationStatement[21052-21102]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21107-21491]:TryStatement[21107-21491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21111-21451]:Block[21111-21451]"
    }, {
      "left" : "final DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(getRegisteredIndicesFile())));",
      "right" : "final DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(getRegisteredIndicesFile())));",
      "info" : "VariableDeclarationStatement[21119-21240]:VariableDeclarationStatement[21119-21240]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21247-21445]:TryStatement[21247-21445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21251-21401]:Block[21251-21401]"
    }, {
      "left" : "final int size = in.readInt();",
      "right" : "final int size = in.readInt();",
      "info" : "VariableDeclarationStatement[21261-21291]:VariableDeclarationStatement[21261-21291]"
    }, {
      "left" : "for (int idx = 0; idx < size; idx++)",
      "right" : "for (int idx = 0; idx < size; idx++)",
      "info" : "ForStatement[21300-21393]:ForStatement[21300-21393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21337-21393]:Block[21337-21393]"
    }, {
      "left" : "result.add(IOUtil.readString(in));",
      "right" : "result.add(IOUtil.readString(in));",
      "info" : "ExpressionStatement[21349-21383]:ExpressionStatement[21349-21383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21416-21445]:Block[21416-21445]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[21426-21437]:ExpressionStatement[21426-21437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21484-21491]:Block[21484-21491]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[21496-21510]:ReturnStatement[21496-21510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21576-21644]:Block[21576-21644]"
    }, {
      "left" : "return new File(PathManager.getIndexRoot(), \"registered\");",
      "right" : "return new File(PathManager.getIndexRoot(), \"registered\");",
      "info" : "ReturnStatement[21582-21640]:ReturnStatement[21582-21640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22025-23316]:Block[22025-23316]"
    }, {
      "left" : "final MapReduceIndex<K, V, FileContent> index;",
      "right" : "final MapReduceIndex<K, V, FileContent> index;",
      "info" : "VariableDeclarationStatement[22031-22077]:VariableDeclarationStatement[22031-22077]"
    }, {
      "left" : "if (extension instanceof CustomImplementationFileBasedIndexExtension)",
      "right" : "if (extension instanceof CustomImplementationFileBasedIndexExtension)",
      "info" : "IfStatement[22082-22931]:IfStatement[22082-22931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22152-22486]:Block[22152-22486]"
    }, {
      "left" : "final UpdatableIndex<K, V, FileContent> custom =\n        ((CustomImplementationFileBasedIndexExtension<K, V, FileContent>)extension).createIndexImplementation(indexId, this, storage);",
      "right" : "final UpdatableIndex<K, V, FileContent> custom =\n        ((CustomImplementationFileBasedIndexExtension<K, V, FileContent>)extension).createIndexImplementation(indexId, this, storage);",
      "info" : "VariableDeclarationStatement[22160-22343]:VariableDeclarationStatement[22160-22343]"
    }, {
      "left" : "if (!(custom instanceof MapReduceIndex))",
      "right" : "if (!(custom instanceof MapReduceIndex))",
      "info" : "IfStatement[22350-22423]:IfStatement[22350-22423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22391-22423]:Block[22391-22423]"
    }, {
      "left" : "return custom;",
      "right" : "return custom;",
      "info" : "ReturnStatement[22401-22415]:ReturnStatement[22401-22415]"
    }, {
      "left" : "index = (MapReduceIndex<K, V, FileContent>)custom;",
      "right" : "index = (MapReduceIndex<K, V, FileContent>)custom;",
      "info" : "ExpressionStatement[22430-22480]:ExpressionStatement[22430-22480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22496-22931]:Block[22496-22931]"
    }, {
      "left" : "DataExternalizer<Collection<K>> externalizer =\n        extension.hasSnapshotMapping() && IdIndex.ourSnapshotMappingsEnabled\n        ? createInputsIndexExternalizer(extension, indexId, extension.getKeyDescriptor())\n        : null;",
      "right" : "DataExternalizer<Collection<K>> externalizer =\n        extension.hasSnapshotMapping() && IdIndex.ourSnapshotMappingsEnabled\n        ? createInputsIndexExternalizer(extension, indexId, extension.getKeyDescriptor())\n        : null;",
      "info" : "VariableDeclarationStatement[22504-22733]:VariableDeclarationStatement[22504-22733]"
    }, {
      "left" : "index = new MapReduceIndex<K, V, FileContent>(\n        indexId, extension.getIndexer(), storage, externalizer, extension.getValueExternalizer(), extension instanceof PsiDependentIndex);",
      "right" : "index = new MapReduceIndex<K, V, FileContent>(\n        indexId, extension.getIndexer(), storage, externalizer, extension.getValueExternalizer(), extension instanceof PsiDependentIndex);",
      "info" : "ExpressionStatement[22740-22925]:ExpressionStatement[22740-22925]"
    }, {
      "left" : "index.setInputIdToDataKeysIndex(new Factory<PersistentHashMap<Integer, Collection<K>>>() {\n      @Override\n      public PersistentHashMap<Integer, Collection<K>> create() {\n        try {\n          return createIdToDataKeysIndex(extension, storage);\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    });",
      "right" : "index.setInputIdToDataKeysIndex(new Factory<PersistentHashMap<Integer, Collection<K>>>() {\n      @Override\n      public PersistentHashMap<Integer, Collection<K>> create() {\n        try {\n          return createIdToDataKeysIndex(extension, storage);\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[22936-23293]:ExpressionStatement[22936-23293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23107-23285]:Block[23107-23285]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23117-23277]:TryStatement[23117-23277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23121-23194]:Block[23121-23194]"
    }, {
      "left" : "return createIdToDataKeysIndex(extension, storage);",
      "right" : "return createIdToDataKeysIndex(extension, storage);",
      "info" : "ReturnStatement[23133-23184]:ReturnStatement[23133-23184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23225-23277]:Block[23225-23277]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[23237-23267]:ThrowStatement[23237-23267]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[23299-23312]:ReturnStatement[23299-23312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23618-26158]:Block[23618-26158]"
    }, {
      "left" : "ID<K, ?> indexId = extension.getName();",
      "right" : "ID<K, ?> indexId = extension.getName();",
      "info" : "VariableDeclarationStatement[23624-23663]:VariableDeclarationStatement[23624-23663]"
    }, {
      "left" : "KeyDescriptor<K> keyDescriptor = extension.getKeyDescriptor();",
      "right" : "KeyDescriptor<K> keyDescriptor = extension.getKeyDescriptor();",
      "info" : "VariableDeclarationStatement[23668-23730]:VariableDeclarationStatement[23668-23730]"
    }, {
      "left" : "final File indexStorageFile = IndexInfrastructure.getInputIndexStorageFile(indexId);",
      "right" : "final File indexStorageFile = IndexInfrastructure.getInputIndexStorageFile(indexId);",
      "info" : "VariableDeclarationStatement[23735-23819]:VariableDeclarationStatement[23735-23819]"
    }, {
      "left" : "final AtomicBoolean isBufferingMode = new AtomicBoolean();",
      "right" : "final AtomicBoolean isBufferingMode = new AtomicBoolean();",
      "info" : "VariableDeclarationStatement[23824-23882]:VariableDeclarationStatement[23824-23882]"
    }, {
      "left" : "final TIntObjectHashMap<Collection<K>> tempMap = new TIntObjectHashMap<Collection<K>>();",
      "right" : "final TIntObjectHashMap<Collection<K>> tempMap = new TIntObjectHashMap<Collection<K>>();",
      "info" : "VariableDeclarationStatement[23887-23975]:VariableDeclarationStatement[23887-23975]"
    }, {
      "left" : "final PersistentHashMap<Integer, Collection<K>> map = new PersistentHashMap<Integer, Collection<K>>(\n      indexStorageFile, EnumeratorIntegerDescriptor.INSTANCE, createInputsIndexExternalizer(extension, indexId, keyDescriptor)\n    ) {\n\n      @Override\n      protected Collection<K> doGet(Integer integer) throws IOException {\n        if (isBufferingMode.get()) {\n          final Collection<K> collection = tempMap.get(integer);\n          if (collection != null) {\n            return collection;\n          }\n        }\n        return super.doGet(integer);\n      }\n\n      @Override\n      protected void doPut(Integer integer, @Nullable Collection<K> ks) throws IOException {\n        if (isBufferingMode.get()) {\n          tempMap.put(integer, ks == null ? Collections.<K>emptySet() : ks);\n        }\n        else {\n          super.doPut(integer, ks);\n        }\n      }\n\n      @Override\n      protected void doRemove(Integer integer) throws IOException {\n        if (isBufferingMode.get()) {\n          tempMap.put(integer, Collections.<K>emptySet());\n        }\n        else {\n          super.doRemove(integer);\n        }\n      }\n    };",
      "right" : "final PersistentHashMap<Integer, Collection<K>> map = new PersistentHashMap<Integer, Collection<K>>(\n      indexStorageFile, EnumeratorIntegerDescriptor.INSTANCE, createInputsIndexExternalizer(extension, indexId, keyDescriptor)\n    ) {\n\n      @Override\n      protected Collection<K> doGet(Integer integer) throws IOException {\n        if (isBufferingMode.get()) {\n          final Collection<K> collection = tempMap.get(integer);\n          if (collection != null) {\n            return collection;\n          }\n        }\n        return super.doGet(integer);\n      }\n\n      @Override\n      protected void doPut(Integer integer, @Nullable Collection<K> ks) throws IOException {\n        if (isBufferingMode.get()) {\n          tempMap.put(integer, ks == null ? Collections.<K>emptySet() : ks);\n        }\n        else {\n          super.doPut(integer, ks);\n        }\n      }\n\n      @Override\n      protected void doRemove(Integer integer) throws IOException {\n        if (isBufferingMode.get()) {\n          tempMap.put(integer, Collections.<K>emptySet());\n        }\n        else {\n          super.doRemove(integer);\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[24612-25743]:VariableDeclarationStatement[24612-25743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24937-25174]:Block[24937-25174]"
    }, {
      "left" : "if (isBufferingMode.get())",
      "right" : "if (isBufferingMode.get())",
      "info" : "IfStatement[24947-25129]:IfStatement[24947-25129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24974-25129]:Block[24974-25129]"
    }, {
      "left" : "final Collection<K> collection = tempMap.get(integer);",
      "right" : "final Collection<K> collection = tempMap.get(integer);",
      "info" : "VariableDeclarationStatement[24986-25040]:VariableDeclarationStatement[24986-25040]"
    }, {
      "left" : "if (collection != null)",
      "right" : "if (collection != null)",
      "info" : "IfStatement[25051-25119]:IfStatement[25051-25119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25075-25119]:Block[25075-25119]"
    }, {
      "left" : "return collection;",
      "right" : "return collection;",
      "info" : "ReturnStatement[25089-25107]:ReturnStatement[25089-25107]"
    }, {
      "left" : "return super.doGet(integer);",
      "right" : "return super.doGet(integer);",
      "info" : "ReturnStatement[25138-25166]:ReturnStatement[25138-25166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25283-25477]:Block[25283-25477]"
    }, {
      "left" : "if (isBufferingMode.get())",
      "right" : "if (isBufferingMode.get())",
      "info" : "IfStatement[25293-25469]:IfStatement[25293-25469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25320-25408]:Block[25320-25408]"
    }, {
      "left" : "tempMap.put(integer, ks == null ? Collections.<K>emptySet() : ks);",
      "right" : "tempMap.put(integer, ks == null ? Collections.<K>emptySet() : ks);",
      "info" : "ExpressionStatement[25332-25398]:ExpressionStatement[25332-25398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25422-25469]:Block[25422-25469]"
    }, {
      "left" : "super.doPut(integer, ks);",
      "right" : "super.doPut(integer, ks);",
      "info" : "ExpressionStatement[25434-25459]:ExpressionStatement[25434-25459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25561-25736]:Block[25561-25736]"
    }, {
      "left" : "if (isBufferingMode.get())",
      "right" : "if (isBufferingMode.get())",
      "info" : "IfStatement[25571-25728]:IfStatement[25571-25728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25598-25668]:Block[25598-25668]"
    }, {
      "left" : "tempMap.put(integer, Collections.<K>emptySet());",
      "right" : "tempMap.put(integer, Collections.<K>emptySet());",
      "info" : "ExpressionStatement[25610-25658]:ExpressionStatement[25610-25658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25682-25728]:Block[25682-25728]"
    }, {
      "left" : "super.doRemove(integer);",
      "right" : "super.doRemove(integer);",
      "info" : "ExpressionStatement[25694-25718]:ExpressionStatement[25694-25718]"
    }, {
      "left" : "storage.addBufferingStateListener(new MemoryIndexStorage.BufferingStateListener() {\n      @Override\n      public void bufferingStateChanged(boolean newState) {\n        synchronized (map) {\n          isBufferingMode.set(newState);\n        }\n      }\n\n      @Override\n      public void memoryStorageCleared() {\n        synchronized (map) {\n          tempMap.clear();\n        }\n      }\n    });",
      "right" : "storage.addBufferingStateListener(new MemoryIndexStorage.BufferingStateListener() {\n      @Override\n      public void bufferingStateChanged(boolean newState) {\n        synchronized (map) {\n          isBufferingMode.set(newState);\n        }\n      }\n\n      @Override\n      public void memoryStorageCleared() {\n        synchronized (map) {\n          tempMap.clear();\n        }\n      }\n    });",
      "info" : "ExpressionStatement[25749-26138]:ExpressionStatement[25749-26138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25907-25996]:Block[25907-25996]"
    }, {
      "left" : "synchronized (map) {\n          isBufferingMode.set(newState);\n        }",
      "right" : "synchronized (map) {\n          isBufferingMode.set(newState);\n        }",
      "info" : "SynchronizedStatement[25917-25988]:SynchronizedStatement[25917-25988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25936-25988]:Block[25936-25988]"
    }, {
      "left" : "isBufferingMode.set(newState);",
      "right" : "isBufferingMode.set(newState);",
      "info" : "ExpressionStatement[25948-25978]:ExpressionStatement[25948-25978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26055-26130]:Block[26055-26130]"
    }, {
      "left" : "synchronized (map) {\n          tempMap.clear();\n        }",
      "right" : "synchronized (map) {\n          tempMap.clear();\n        }",
      "info" : "SynchronizedStatement[26065-26122]:SynchronizedStatement[26065-26122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26084-26122]:Block[26084-26122]"
    }, {
      "left" : "tempMap.clear();",
      "right" : "tempMap.clear();",
      "info" : "ExpressionStatement[26096-26112]:ExpressionStatement[26096-26112]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[26143-26154]:ReturnStatement[26143-26154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26498-26850]:Block[26498-26850]"
    }, {
      "left" : "DataExternalizer<Collection<K>> externalizer;",
      "right" : "DataExternalizer<Collection<K>> externalizer;",
      "info" : "VariableDeclarationStatement[26504-26549]:VariableDeclarationStatement[26504-26549]"
    }, {
      "left" : "if (extension instanceof CustomInputsIndexFileBasedIndexExtension)",
      "right" : "if (extension instanceof CustomInputsIndexFileBasedIndexExtension)",
      "info" : "IfStatement[26554-26821]:IfStatement[26554-26821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26621-26728]:Block[26621-26728]"
    }, {
      "left" : "externalizer = ((CustomInputsIndexFileBasedIndexExtension<K>)extension).createExternalizer();",
      "right" : "externalizer = ((CustomInputsIndexFileBasedIndexExtension<K>)extension).createExternalizer();",
      "info" : "ExpressionStatement[26629-26722]:ExpressionStatement[26629-26722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26734-26821]:Block[26734-26821]"
    }, {
      "left" : "externalizer = new InputIndexDataExternalizer<K>(keyDescriptor, indexId);",
      "right" : "externalizer = new InputIndexDataExternalizer<K>(keyDescriptor, indexId);",
      "info" : "ExpressionStatement[26742-26815]:ExpressionStatement[26742-26815]"
    }, {
      "left" : "return externalizer;",
      "right" : "return externalizer;",
      "info" : "ReturnStatement[26826-26846]:ReturnStatement[26826-26846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26897-26925]:Block[26897-26925]"
    }, {
      "left" : "performShutdown();",
      "right" : "performShutdown();",
      "info" : "ExpressionStatement[26903-26921]:ExpressionStatement[26903-26921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27039-28119]:Block[27039-28119]"
    }, {
      "left" : "if (!myShutdownPerformed.compareAndSet(false, true))",
      "right" : "if (!myShutdownPerformed.compareAndSet(false, true))",
      "info" : "IfStatement[27045-27140]:IfStatement[27045-27140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27098-27140]:Block[27098-27140]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27106-27113]:ReturnStatement[27106-27113]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27145-28115]:TryStatement[27145-28115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27149-27349]:Block[27149-27349]"
    }, {
      "left" : "if (myFlushingFuture != null)",
      "right" : "if (myFlushingFuture != null)",
      "info" : "IfStatement[27157-27269]:IfStatement[27157-27269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27187-27269]:Block[27187-27269]"
    }, {
      "left" : "myFlushingFuture.cancel(false);",
      "right" : "myFlushingFuture.cancel(false);",
      "info" : "ExpressionStatement[27197-27228]:ExpressionStatement[27197-27228]"
    }, {
      "left" : "myFlushingFuture = null;",
      "right" : "myFlushingFuture = null;",
      "info" : "ExpressionStatement[27237-27261]:ExpressionStatement[27237-27261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27362-28115]:Block[27362-28115]"
    }, {
      "left" : "LOG.info(\"START INDEX SHUTDOWN\");",
      "right" : "LOG.info(\"START INDEX SHUTDOWN\");",
      "info" : "ExpressionStatement[27370-27403]:ExpressionStatement[27370-27403]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27410-28071]:TryStatement[27410-28071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27414-27979]:Block[27414-27979]"
    }, {
      "left" : "myChangedFilesCollector.ensureAllInvalidateTasksCompleted();",
      "right" : "myChangedFilesCollector.ensureAllInvalidateTasksCompleted();",
      "info" : "ExpressionStatement[27424-27484]:ExpressionStatement[27424-27484]"
    }, {
      "left" : "IndexingStamp.flushCaches();",
      "right" : "IndexingStamp.flushCaches();",
      "info" : "ExpressionStatement[27493-27521]:ExpressionStatement[27493-27521]"
    }, {
      "left" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "right" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "info" : "EnhancedForStatement[27531-27884]:EnhancedForStatement[27531-27884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27575-27884]:Block[27575-27884]"
    }, {
      "left" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "right" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "info" : "VariableDeclarationStatement[27587-27653]:VariableDeclarationStatement[27587-27653]"
    }, {
      "left" : "assert index != null;",
      "right" : "assert index != null;",
      "info" : "AssertStatement[27664-27685]:AssertStatement[27664-27685]"
    }, {
      "left" : "if(ourRebuildStatus.get(indexId).get() != OK)",
      "right" : "if(ourRebuildStatus.get(indexId).get() != OK)",
      "info" : "IfStatement[27696-27847]:IfStatement[27696-27847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27742-27847]:Block[27742-27847]"
    }, {
      "left" : "doClearIndex(indexId);",
      "right" : "doClearIndex(indexId);",
      "info" : "ExpressionStatement[27756-27778]:ExpressionStatement[27756-27778]"
    }, {
      "left" : "index.dispose();",
      "right" : "index.dispose();",
      "info" : "ExpressionStatement[27858-27874]:ExpressionStatement[27858-27874]"
    }, {
      "left" : "ContentHashesSupport.flushContentHashes();",
      "right" : "ContentHashesSupport.flushContentHashes();",
      "info" : "ExpressionStatement[27894-27936]:ExpressionStatement[27894-27936]"
    }, {
      "left" : "myConnection.disconnect();",
      "right" : "myConnection.disconnect();",
      "info" : "ExpressionStatement[27945-27971]:ExpressionStatement[27945-27971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28006-28071]:Block[28006-28071]"
    }, {
      "left" : "LOG.error(\"Problems during index shutdown\", e);",
      "right" : "LOG.error(\"Problems during index shutdown\", e);",
      "info" : "ExpressionStatement[28016-28063]:ExpressionStatement[28016-28063]"
    }, {
      "left" : "LOG.info(\"END INDEX SHUTDOWN\");",
      "right" : "LOG.info(\"END INDEX SHUTDOWN\");",
      "info" : "ExpressionStatement[28078-28109]:ExpressionStatement[28078-28109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28173-28810]:Block[28173-28810]"
    }, {
      "left" : "if (HeavyProcessLatch.INSTANCE.isRunning())",
      "right" : "if (HeavyProcessLatch.INSTANCE.isRunning())",
      "info" : "IfStatement[28179-28244]:IfStatement[28179-28244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28223-28244]:Block[28223-28244]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28231-28238]:ReturnStatement[28231-28238]"
    }, {
      "left" : "IndexingStamp.flushCaches();",
      "right" : "IndexingStamp.flushCaches();",
      "info" : "ExpressionStatement[28249-28277]:ExpressionStatement[28249-28277]"
    }, {
      "left" : "for (ID<?, ?> indexId : new ArrayList<ID<?, ?>>(myIndices.keySet()))",
      "right" : "for (ID<?, ?> indexId : new ArrayList<ID<?, ?>>(myIndices.keySet()))",
      "info" : "EnhancedForStatement[28282-28758]:EnhancedForStatement[28282-28758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28351-28758]:Block[28351-28758]"
    }, {
      "left" : "if (HeavyProcessLatch.INSTANCE.isRunning() || modCount != myLocalModCount)",
      "right" : "if (HeavyProcessLatch.INSTANCE.isRunning() || modCount != myLocalModCount)",
      "info" : "IfStatement[28359-28496]:IfStatement[28359-28496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28434-28496]:Block[28434-28496]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28444-28451]:ReturnStatement[28444-28451]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28503-28752]:TryStatement[28503-28752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28507-28655]:Block[28507-28655]"
    }, {
      "left" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "right" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "info" : "VariableDeclarationStatement[28517-28583]:VariableDeclarationStatement[28517-28583]"
    }, {
      "left" : "if (index != null)",
      "right" : "if (index != null)",
      "info" : "IfStatement[28592-28647]:IfStatement[28592-28647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28611-28647]:Block[28611-28647]"
    }, {
      "left" : "index.flush();",
      "right" : "index.flush();",
      "info" : "ExpressionStatement[28623-28637]:ExpressionStatement[28623-28637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28689-28752]:Block[28689-28752]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[28699-28711]:ExpressionStatement[28699-28711]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[28720-28744]:ExpressionStatement[28720-28744]"
    }, {
      "left" : "ContentHashesSupport.flushContentHashes();",
      "right" : "ContentHashesSupport.flushContentHashes();",
      "info" : "ExpressionStatement[28764-28806]:ExpressionStatement[28764-28806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28932-29086]:Block[28932-29086]"
    }, {
      "left" : "Set<K> allKeys = new THashSet<K>();",
      "right" : "Set<K> allKeys = new THashSet<K>();",
      "info" : "VariableDeclarationStatement[28938-28973]:VariableDeclarationStatement[28938-28973]"
    }, {
      "left" : "processAllKeys(indexId, new CommonProcessors.CollectProcessor<K>(allKeys), project);",
      "right" : "processAllKeys(indexId, new CommonProcessors.CollectProcessor<K>(allKeys), project);",
      "info" : "ExpressionStatement[28978-29062]:ExpressionStatement[28978-29062]"
    }, {
      "left" : "return allKeys;",
      "right" : "return allKeys;",
      "info" : "ReturnStatement[29067-29082]:ReturnStatement[29067-29082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29229-29372]:Block[29229-29372]"
    }, {
      "left" : "return processAllKeys(indexId, processor, project == null ? new EverythingGlobalScope() : GlobalSearchScope.allScope(project), null);",
      "right" : "return processAllKeys(indexId, processor, project == null ? new EverythingGlobalScope() : GlobalSearchScope.allScope(project), null);",
      "info" : "ReturnStatement[29235-29368]:ReturnStatement[29235-29368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29545-30158]:Block[29545-30158]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29551-30135]:TryStatement[29551-30135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29555-29812]:Block[29555-29812]"
    }, {
      "left" : "final UpdatableIndex<K, ?, FileContent> index = getIndex(indexId);",
      "right" : "final UpdatableIndex<K, ?, FileContent> index = getIndex(indexId);",
      "info" : "VariableDeclarationStatement[29563-29629]:VariableDeclarationStatement[29563-29629]"
    }, {
      "left" : "if (index == null)",
      "right" : "if (index == null)",
      "info" : "IfStatement[29636-29685]:IfStatement[29636-29685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29655-29685]:Block[29655-29685]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29665-29677]:ReturnStatement[29665-29677]"
    }, {
      "left" : "ensureUpToDate(indexId, scope.getProject(), scope);",
      "right" : "ensureUpToDate(indexId, scope.getProject(), scope);",
      "info" : "ExpressionStatement[29692-29743]:ExpressionStatement[29692-29743]"
    }, {
      "left" : "return index.processAllKeys(processor, scope, idFilter);",
      "right" : "return index.processAllKeys(processor, scope, idFilter);",
      "info" : "ReturnStatement[29750-29806]:ReturnStatement[29750-29806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29844-29886]:Block[29844-29886]"
    }, {
      "left" : "scheduleRebuild(indexId, e);",
      "right" : "scheduleRebuild(indexId, e);",
      "info" : "ExpressionStatement[29852-29880]:ExpressionStatement[29852-29880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29918-30135]:Block[29918-30135]"
    }, {
      "left" : "final Throwable cause = e.getCause();",
      "right" : "final Throwable cause = e.getCause();",
      "info" : "VariableDeclarationStatement[29926-29963]:VariableDeclarationStatement[29926-29963]"
    }, {
      "left" : "if (cause instanceof StorageException || cause instanceof IOException)",
      "right" : "if (cause instanceof StorageException || cause instanceof IOException)",
      "info" : "IfStatement[29970-30129]:IfStatement[29970-30129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30041-30091]:Block[30041-30091]"
    }, {
      "left" : "scheduleRebuild(indexId, cause);",
      "right" : "scheduleRebuild(indexId, cause);",
      "info" : "ExpressionStatement[30051-30083]:ExpressionStatement[30051-30083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30103-30129]:Block[30103-30129]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[30113-30121]:ThrowStatement[30113-30121]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30141-30154]:ReturnStatement[30141-30154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30316-30468]:Block[30316-30468]"
    }, {
      "left" : "final Integer currentValue = myUpToDateCheckState.get();",
      "right" : "final Integer currentValue = myUpToDateCheckState.get();",
      "info" : "VariableDeclarationStatement[30322-30378]:VariableDeclarationStatement[30322-30378]"
    }, {
      "left" : "myUpToDateCheckState.set(currentValue == null ? 1 : currentValue.intValue() + 1);",
      "right" : "myUpToDateCheckState.set(currentValue == null ? 1 : currentValue.intValue() + 1);",
      "info" : "ExpressionStatement[30383-30464]:ExpressionStatement[30383-30464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30529-30828]:Block[30529-30828]"
    }, {
      "left" : "final Integer currentValue = myUpToDateCheckState.get();",
      "right" : "final Integer currentValue = myUpToDateCheckState.get();",
      "info" : "VariableDeclarationStatement[30535-30591]:VariableDeclarationStatement[30535-30591]"
    }, {
      "left" : "if (currentValue != null)",
      "right" : "if (currentValue != null)",
      "info" : "IfStatement[30596-30824]:IfStatement[30596-30824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30622-30824]:Block[30622-30824]"
    }, {
      "left" : "final int newValue = currentValue.intValue() - 1;",
      "right" : "final int newValue = currentValue.intValue() - 1;",
      "info" : "VariableDeclarationStatement[30630-30679]:VariableDeclarationStatement[30630-30679]"
    }, {
      "left" : "if (newValue != 0)",
      "right" : "if (newValue != 0)",
      "info" : "IfStatement[30686-30818]:IfStatement[30686-30818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30705-30758]:Block[30705-30758]"
    }, {
      "left" : "myUpToDateCheckState.set(newValue);",
      "right" : "myUpToDateCheckState.set(newValue);",
      "info" : "ExpressionStatement[30715-30750]:ExpressionStatement[30715-30750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30770-30818]:Block[30770-30818]"
    }, {
      "left" : "myUpToDateCheckState.remove();",
      "right" : "myUpToDateCheckState.remove();",
      "info" : "ExpressionStatement[30780-30810]:ExpressionStatement[30780-30810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30880-30990]:Block[30880-30990]"
    }, {
      "left" : "final Integer value = myUpToDateCheckState.get();",
      "right" : "final Integer value = myUpToDateCheckState.get();",
      "info" : "VariableDeclarationStatement[30886-30935]:VariableDeclarationStatement[30886-30935]"
    }, {
      "left" : "return value == null || value.intValue() == 0;",
      "right" : "return value == null || value.intValue() == 0;",
      "info" : "ReturnStatement[30940-30986]:ReturnStatement[30940-30986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31130-31165]:Block[31130-31165]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[31138-31159]:ReturnStatement[31138-31159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31490-31547]:Block[31490-31547]"
    }, {
      "left" : "ensureUpToDate(indexId, project, filter, null);",
      "right" : "ensureUpToDate(indexId, project, filter, null);",
      "info" : "ExpressionStatement[31496-31543]:ExpressionStatement[31496-31543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31827-33366]:Block[31827-33366]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[31833-31865]:ExpressionStatement[31833-31865]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "right" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "info" : "ExpressionStatement[31870-31919]:ExpressionStatement[31870-31919]"
    }, {
      "left" : "ApplicationManager.getApplication().assertReadAccessAllowed();",
      "right" : "ApplicationManager.getApplication().assertReadAccessAllowed();",
      "info" : "ExpressionStatement[31979-32041]:ExpressionStatement[31979-32041]"
    }, {
      "left" : "if (!needsFileContentLoading(indexId))",
      "right" : "if (!needsFileContentLoading(indexId))",
      "info" : "IfStatement[32046-32173]:IfStatement[32046-32173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32085-32173]:Block[32085-32173]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32093-32100]:ReturnStatement[32093-32100]"
    }, {
      "left" : "if (filter == GlobalSearchScope.EMPTY_SCOPE)",
      "right" : "if (filter == GlobalSearchScope.EMPTY_SCOPE)",
      "info" : "IfStatement[32178-32244]:IfStatement[32178-32244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32223-32244]:Block[32223-32244]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32231-32238]:ReturnStatement[32231-32238]"
    }, {
      "left" : "if (ActionUtil.isDumbMode(project))",
      "right" : "if (ActionUtil.isDumbMode(project))",
      "info" : "IfStatement[32249-32323]:IfStatement[32249-32323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32285-32323]:Block[32285-32323]"
    }, {
      "left" : "handleDumbMode(project);",
      "right" : "handleDumbMode(project);",
      "info" : "ExpressionStatement[32293-32317]:ExpressionStatement[32293-32317]"
    }, {
      "left" : "if (myReentrancyGuard.get().booleanValue())",
      "right" : "if (myReentrancyGuard.get().booleanValue())",
      "info" : "IfStatement[32329-32455]:IfStatement[32329-32455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32373-32455]:Block[32373-32455]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32442-32449]:ReturnStatement[32442-32449]"
    }, {
      "left" : "myReentrancyGuard.set(Boolean.TRUE);",
      "right" : "myReentrancyGuard.set(Boolean.TRUE);",
      "info" : "ExpressionStatement[32460-32496]:ExpressionStatement[32460-32496]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32502-33362]:TryStatement[32502-33362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32506-33298]:Block[32506-33298]"
    }, {
      "left" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "right" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "info" : "ExpressionStatement[32514-32579]:ExpressionStatement[32514-32579]"
    }, {
      "left" : "if (isUpToDateCheckEnabled())",
      "right" : "if (isUpToDateCheckEnabled())",
      "info" : "IfStatement[32586-33292]:IfStatement[32586-33292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32616-33292]:Block[32616-33292]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32626-33284]:TryStatement[32626-33284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32630-32917]:Block[32630-32917]"
    }, {
      "left" : "if (ourRebuildStatus.get(indexId).get() != OK)",
      "right" : "if (ourRebuildStatus.get(indexId).get() != OK)",
      "info" : "IfStatement[32642-32752]:IfStatement[32642-32752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32689-32752]:Block[32689-32752]"
    }, {
      "left" : "throw new ProcessCanceledException();",
      "right" : "throw new ProcessCanceledException();",
      "info" : "ThrowStatement[32703-32740]:ThrowStatement[32703-32740]"
    }, {
      "left" : "myChangedFilesCollector.forceUpdate(project, filter, restrictedFile);",
      "right" : "myChangedFilesCollector.forceUpdate(project, filter, restrictedFile);",
      "info" : "ExpressionStatement[32763-32832]:ExpressionStatement[32763-32832]"
    }, {
      "left" : "indexUnsavedDocuments(indexId, project, filter, restrictedFile);",
      "right" : "indexUnsavedDocuments(indexId, project, filter, restrictedFile);",
      "info" : "ExpressionStatement[32843-32907]:ExpressionStatement[32843-32907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32953-33003]:Block[32953-33003]"
    }, {
      "left" : "scheduleRebuild(indexId, e);",
      "right" : "scheduleRebuild(indexId, e);",
      "info" : "ExpressionStatement[32965-32993]:ExpressionStatement[32965-32993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33039-33284]:Block[33039-33284]"
    }, {
      "left" : "final Throwable cause = e.getCause();",
      "right" : "final Throwable cause = e.getCause();",
      "info" : "VariableDeclarationStatement[33051-33088]:VariableDeclarationStatement[33051-33088]"
    }, {
      "left" : "if (cause instanceof StorageException || cause instanceof IOException)",
      "right" : "if (cause instanceof StorageException || cause instanceof IOException)",
      "info" : "IfStatement[33099-33274]:IfStatement[33099-33274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33170-33224]:Block[33170-33224]"
    }, {
      "left" : "scheduleRebuild(indexId, e);",
      "right" : "scheduleRebuild(indexId, e);",
      "info" : "ExpressionStatement[33184-33212]:ExpressionStatement[33184-33212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33240-33274]:Block[33240-33274]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[33254-33262]:ThrowStatement[33254-33262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33311-33362]:Block[33311-33362]"
    }, {
      "left" : "myReentrancyGuard.set(Boolean.FALSE);",
      "right" : "myReentrancyGuard.set(Boolean.FALSE);",
      "info" : "ExpressionStatement[33319-33356]:ExpressionStatement[33319-33356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33432-34100]:Block[33432-34100]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[33438-33470]:ExpressionStatement[33438-33470]"
    }, {
      "left" : "if (project != null)",
      "right" : "if (project != null)",
      "info" : "IfStatement[33501-34055]:IfStatement[33501-34055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33522-34055]:Block[33522-34055]"
    }, {
      "left" : "final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator();",
      "right" : "final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator();",
      "info" : "VariableDeclarationStatement[33530-33627]:VariableDeclarationStatement[33530-33627]"
    }, {
      "left" : "if (progressIndicator instanceof BackgroundableProcessIndicator)",
      "right" : "if (progressIndicator instanceof BackgroundableProcessIndicator)",
      "info" : "IfStatement[33634-34049]:IfStatement[33634-34049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33699-34049]:Block[33699-34049]"
    }, {
      "left" : "final BackgroundableProcessIndicator indicator = (BackgroundableProcessIndicator)progressIndicator;",
      "right" : "final BackgroundableProcessIndicator indicator = (BackgroundableProcessIndicator)progressIndicator;",
      "info" : "VariableDeclarationStatement[33709-33808]:VariableDeclarationStatement[33709-33808]"
    }, {
      "left" : "if (indicator.getDumbModeAction() == DumbModeAction.WAIT)",
      "right" : "if (indicator.getDumbModeAction() == DumbModeAction.WAIT)",
      "info" : "IfStatement[33817-34041]:IfStatement[33817-34041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33875-34041]:Block[33875-34041]"
    }, {
      "left" : "assert !ApplicationManager.getApplication().isDispatchThread();",
      "right" : "assert !ApplicationManager.getApplication().isDispatchThread();",
      "info" : "AssertStatement[33887-33950]:AssertStatement[33887-33950]"
    }, {
      "left" : "DumbService.getInstance(project).waitForSmartMode();",
      "right" : "DumbService.getInstance(project).waitForSmartMode();",
      "info" : "ExpressionStatement[33961-34013]:ExpressionStatement[33961-34013]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34024-34031]:ReturnStatement[34024-34031]"
    }, {
      "left" : "throw new IndexNotReadyException();",
      "right" : "throw new IndexNotReadyException();",
      "info" : "ThrowStatement[34061-34096]:ThrowStatement[34061-34096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34253-34566]:Block[34253-34566]"
    }, {
      "left" : "final List<V> values = new SmartList<V>();",
      "right" : "final List<V> values = new SmartList<V>();",
      "info" : "VariableDeclarationStatement[34259-34301]:VariableDeclarationStatement[34259-34301]"
    }, {
      "left" : "processValuesImpl(indexId, dataKey, true, null, new ValueProcessor<V>() {\n      @Override\n      public boolean process(final VirtualFile file, final V value) {\n        values.add(value);\n        return true;\n      }\n    }, filter, null);",
      "right" : "processValuesImpl(indexId, dataKey, true, null, new ValueProcessor<V>() {\n      @Override\n      public boolean process(final VirtualFile file, final V value) {\n        values.add(value);\n        return true;\n      }\n    }, filter, null);",
      "info" : "ExpressionStatement[34306-34543]:ExpressionStatement[34306-34543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34464-34521]:Block[34464-34521]"
    }, {
      "left" : "values.add(value);",
      "right" : "values.add(value);",
      "info" : "ExpressionStatement[34474-34492]:ExpressionStatement[34474-34492]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34501-34513]:ReturnStatement[34501-34513]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[34548-34562]:ReturnStatement[34548-34562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34862-35190]:Block[34862-35190]"
    }, {
      "left" : "final Set<VirtualFile> files = new THashSet<VirtualFile>();",
      "right" : "final Set<VirtualFile> files = new THashSet<VirtualFile>();",
      "info" : "VariableDeclarationStatement[34868-34927]:VariableDeclarationStatement[34868-34927]"
    }, {
      "left" : "processValuesImpl(indexId, dataKey, false, null, new ValueProcessor<V>() {\n      @Override\n      public boolean process(final VirtualFile file, final V value) {\n        files.add(file);\n        return true;\n      }\n    }, filter, null);",
      "right" : "processValuesImpl(indexId, dataKey, false, null, new ValueProcessor<V>() {\n      @Override\n      public boolean process(final VirtualFile file, final V value) {\n        files.add(file);\n        return true;\n      }\n    }, filter, null);",
      "info" : "ExpressionStatement[34932-35168]:ExpressionStatement[34932-35168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35091-35146]:Block[35091-35146]"
    }, {
      "left" : "files.add(file);",
      "right" : "files.add(file);",
      "info" : "ExpressionStatement[35101-35117]:ExpressionStatement[35101-35117]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35126-35138]:ReturnStatement[35126-35138]"
    }, {
      "left" : "return files;",
      "right" : "return files;",
      "info" : "ReturnStatement[35173-35186]:ReturnStatement[35173-35186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35455-35537]:Block[35455-35537]"
    }, {
      "left" : "return processValues(indexId, dataKey, inFile, processor, filter, null);",
      "right" : "return processValues(indexId, dataKey, inFile, processor, filter, null);",
      "info" : "ReturnStatement[35461-35533]:ReturnStatement[35461-35533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35958-36055]:Block[35958-36055]"
    }, {
      "left" : "return processValuesImpl(indexId, dataKey, false, inFile, processor, filter, idFilter);",
      "right" : "return processValuesImpl(indexId, dataKey, false, inFile, processor, filter, idFilter);",
      "info" : "ReturnStatement[35964-36051]:ReturnStatement[35964-36051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36443-37347]:Block[36443-37347]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36449-37326]:TryStatement[36449-37326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36453-36973]:Block[36453-36973]"
    }, {
      "left" : "final UpdatableIndex<K, V, FileContent> index = getIndex(indexId);",
      "right" : "final UpdatableIndex<K, V, FileContent> index = getIndex(indexId);",
      "info" : "VariableDeclarationStatement[36461-36527]:VariableDeclarationStatement[36461-36527]"
    }, {
      "left" : "if (index == null)",
      "right" : "if (index == null)",
      "info" : "IfStatement[36534-36583]:IfStatement[36534-36583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36553-36583]:Block[36553-36583]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36563-36575]:ReturnStatement[36563-36575]"
    }, {
      "left" : "final Project project = filter.getProject();",
      "right" : "final Project project = filter.getProject();",
      "info" : "VariableDeclarationStatement[36590-36634]:VariableDeclarationStatement[36590-36634]"
    }, {
      "left" : "ensureUpToDate(indexId, project, filter, restrictToFile);",
      "right" : "ensureUpToDate(indexId, project, filter, restrictToFile);",
      "info" : "ExpressionStatement[36749-36806]:ExpressionStatement[36749-36806]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36814-36967]:TryStatement[36814-36967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36818-36905]:Block[36818-36905]"
    }, {
      "left" : "index.getReadLock().lock();",
      "right" : "index.getReadLock().lock();",
      "info" : "ExpressionStatement[36828-36855]:ExpressionStatement[36828-36855]"
    }, {
      "left" : "return computable.convert(index);",
      "right" : "return computable.convert(index);",
      "info" : "ReturnStatement[36864-36897]:ReturnStatement[36864-36897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36920-36967]:Block[36920-36967]"
    }, {
      "left" : "index.getReadLock().unlock();",
      "right" : "index.getReadLock().unlock();",
      "info" : "ExpressionStatement[36930-36959]:ExpressionStatement[36930-36959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37005-37047]:Block[37005-37047]"
    }, {
      "left" : "scheduleRebuild(indexId, e);",
      "right" : "scheduleRebuild(indexId, e);",
      "info" : "ExpressionStatement[37013-37041]:ExpressionStatement[37013-37041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37079-37257]:Block[37079-37257]"
    }, {
      "left" : "final Throwable cause = getCauseToRebuildIndex(e);",
      "right" : "final Throwable cause = getCauseToRebuildIndex(e);",
      "info" : "VariableDeclarationStatement[37087-37137]:VariableDeclarationStatement[37087-37137]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[37144-37251]:IfStatement[37144-37251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37163-37213]:Block[37163-37213]"
    }, {
      "left" : "scheduleRebuild(indexId, cause);",
      "right" : "scheduleRebuild(indexId, cause);",
      "info" : "ExpressionStatement[37173-37205]:ExpressionStatement[37173-37205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37225-37251]:Block[37225-37251]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[37235-37243]:ThrowStatement[37235-37243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37283-37326]:Block[37283-37326]"
    }, {
      "left" : "scheduleRebuild(indexId, ae);",
      "right" : "scheduleRebuild(indexId, ae);",
      "info" : "ExpressionStatement[37291-37320]:ExpressionStatement[37291-37320]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37331-37343]:ReturnStatement[37331-37343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37740-40185]:Block[37740-40185]"
    }, {
      "left" : "ThrowableConvertor<UpdatableIndex<K, V, FileContent>, Boolean, StorageException> keyProcessor =\n      new ThrowableConvertor<UpdatableIndex<K, V, FileContent>, Boolean, StorageException>() {\n        @Override\n        public Boolean convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException {\n          final ValueContainer<V> container = index.getData(dataKey);\n\n          boolean shouldContinue = true;\n\n          if (restrictToFile != null) {\n            if (restrictToFile instanceof VirtualFileWithId) {\n              final int restrictedFileId = getFileId(restrictToFile);\n              for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n                final V value = valueIt.next();\n                if (valueIt.getValueAssociationPredicate().contains(restrictedFileId)) {\n                  shouldContinue = processor.process(restrictToFile, value);\n                  if (!shouldContinue) {\n                    break;\n                  }\n                }\n              }\n            }\n          }\n          else {\n            final PersistentFS fs = (PersistentFS)ManagingFS.getInstance();\n            final IdFilter filter = idFilter != null ? idFilter : projectIndexableFiles(scope.getProject());\n            VALUES_LOOP:\n            for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n              final V value = valueIt.next();\n              for (final ValueContainer.IntIterator inputIdsIterator = valueIt.getInputIdsIterator(); inputIdsIterator.hasNext(); ) {\n                final int id = inputIdsIterator.next();\n                if (filter != null && !filter.containsFileId(id)) continue;\n                VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);\n                if (file != null && scope.accept(file)) {\n                  shouldContinue = processor.process(file, value);\n                  if (!shouldContinue) {\n                    break VALUES_LOOP;\n                  }\n                  if (ensureValueProcessedOnce) {\n                    break; // continue with the next value\n                  }\n                }\n              }\n            }\n          }\n          return shouldContinue;\n        }\n      };",
      "right" : "ThrowableConvertor<UpdatableIndex<K, V, FileContent>, Boolean, StorageException> keyProcessor =\n      new ThrowableConvertor<UpdatableIndex<K, V, FileContent>, Boolean, StorageException>() {\n        @Override\n        public Boolean convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException {\n          final ValueContainer<V> container = index.getData(dataKey);\n\n          boolean shouldContinue = true;\n\n          if (restrictToFile != null) {\n            if (restrictToFile instanceof VirtualFileWithId) {\n              final int restrictedFileId = getFileId(restrictToFile);\n              for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n                final V value = valueIt.next();\n                if (valueIt.getValueAssociationPredicate().contains(restrictedFileId)) {\n                  shouldContinue = processor.process(restrictToFile, value);\n                  if (!shouldContinue) {\n                    break;\n                  }\n                }\n              }\n            }\n          }\n          else {\n            final PersistentFS fs = (PersistentFS)ManagingFS.getInstance();\n            final IdFilter filter = idFilter != null ? idFilter : projectIndexableFiles(scope.getProject());\n            VALUES_LOOP:\n            for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n              final V value = valueIt.next();\n              for (final ValueContainer.IntIterator inputIdsIterator = valueIt.getInputIdsIterator(); inputIdsIterator.hasNext(); ) {\n                final int id = inputIdsIterator.next();\n                if (filter != null && !filter.containsFileId(id)) continue;\n                VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);\n                if (file != null && scope.accept(file)) {\n                  shouldContinue = processor.process(file, value);\n                  if (!shouldContinue) {\n                    break VALUES_LOOP;\n                  }\n                  if (ensureValueProcessedOnce) {\n                    break; // continue with the next value\n                  }\n                }\n              }\n            }\n          }\n          return shouldContinue;\n        }\n      };",
      "info" : "VariableDeclarationStatement[37746-40037]:VariableDeclarationStatement[37746-40037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38060-40028]:Block[38060-40028]"
    }, {
      "left" : "final ValueContainer<V> container = index.getData(dataKey);",
      "right" : "final ValueContainer<V> container = index.getData(dataKey);",
      "info" : "VariableDeclarationStatement[38072-38131]:VariableDeclarationStatement[38072-38131]"
    }, {
      "left" : "boolean shouldContinue = true;",
      "right" : "boolean shouldContinue = true;",
      "info" : "VariableDeclarationStatement[38143-38173]:VariableDeclarationStatement[38143-38173]"
    }, {
      "left" : "if (restrictToFile != null)",
      "right" : "if (restrictToFile != null)",
      "info" : "IfStatement[38185-39985]:IfStatement[38185-39985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38213-38829]:Block[38213-38829]"
    }, {
      "left" : "if (restrictToFile instanceof VirtualFileWithId)",
      "right" : "if (restrictToFile instanceof VirtualFileWithId)",
      "info" : "IfStatement[38227-38817]:IfStatement[38227-38817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38276-38817]:Block[38276-38817]"
    }, {
      "left" : "final int restrictedFileId = getFileId(restrictToFile);",
      "right" : "final int restrictedFileId = getFileId(restrictToFile);",
      "info" : "VariableDeclarationStatement[38292-38347]:VariableDeclarationStatement[38292-38347]"
    }, {
      "left" : "for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext())",
      "right" : "for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext())",
      "info" : "ForStatement[38362-38803]:ForStatement[38362-38803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38466-38803]:Block[38466-38803]"
    }, {
      "left" : "final V value = valueIt.next();",
      "right" : "final V value = valueIt.next();",
      "info" : "VariableDeclarationStatement[38484-38515]:VariableDeclarationStatement[38484-38515]"
    }, {
      "left" : "if (valueIt.getValueAssociationPredicate().contains(restrictedFileId))",
      "right" : "if (valueIt.getValueAssociationPredicate().contains(restrictedFileId))",
      "info" : "IfStatement[38532-38787]:IfStatement[38532-38787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38603-38787]:Block[38603-38787]"
    }, {
      "left" : "shouldContinue = processor.process(restrictToFile, value);",
      "right" : "shouldContinue = processor.process(restrictToFile, value);",
      "info" : "ExpressionStatement[38623-38681]:ExpressionStatement[38623-38681]"
    }, {
      "left" : "if (!shouldContinue)",
      "right" : "if (!shouldContinue)",
      "info" : "IfStatement[38700-38769]:IfStatement[38700-38769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38721-38769]:Block[38721-38769]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38743-38749]:BreakStatement[38743-38749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38845-39985]:Block[38845-39985]"
    }, {
      "left" : "final PersistentFS fs = (PersistentFS)ManagingFS.getInstance();",
      "right" : "final PersistentFS fs = (PersistentFS)ManagingFS.getInstance();",
      "info" : "VariableDeclarationStatement[38859-38922]:VariableDeclarationStatement[38859-38922]"
    }, {
      "left" : "final IdFilter filter = idFilter != null ? idFilter : projectIndexableFiles(scope.getProject());",
      "right" : "final IdFilter filter = idFilter != null ? idFilter : projectIndexableFiles(scope.getProject());",
      "info" : "VariableDeclarationStatement[38935-39031]:VariableDeclarationStatement[38935-39031]"
    }, {
      "left" : "VALUES_LOOP:\n            for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n              final V value = valueIt.next();\n              for (final ValueContainer.IntIterator inputIdsIterator = valueIt.getInputIdsIterator(); inputIdsIterator.hasNext(); ) {\n                final int id = inputIdsIterator.next();\n                if (filter != null && !filter.containsFileId(id)) continue;\n                VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);\n                if (file != null && scope.accept(file)) {\n                  shouldContinue = processor.process(file, value);\n                  if (!shouldContinue) {\n                    break VALUES_LOOP;\n                  }\n                  if (ensureValueProcessedOnce) {\n                    break; // continue with the next value\n                  }\n                }\n              }\n            }",
      "right" : "VALUES_LOOP:\n            for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n              final V value = valueIt.next();\n              for (final ValueContainer.IntIterator inputIdsIterator = valueIt.getInputIdsIterator(); inputIdsIterator.hasNext(); ) {\n                final int id = inputIdsIterator.next();\n                if (filter != null && !filter.containsFileId(id)) continue;\n                VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);\n                if (file != null && scope.accept(file)) {\n                  shouldContinue = processor.process(file, value);\n                  if (!shouldContinue) {\n                    break VALUES_LOOP;\n                  }\n                  if (ensureValueProcessedOnce) {\n                    break; // continue with the next value\n                  }\n                }\n              }\n            }",
      "info" : "LabeledStatement[39044-39973]:LabeledStatement[39044-39973]"
    }, {
      "left" : "for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext())",
      "right" : "for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext())",
      "info" : "ForStatement[39069-39973]:ForStatement[39069-39973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39173-39973]:Block[39173-39973]"
    }, {
      "left" : "final V value = valueIt.next();",
      "right" : "final V value = valueIt.next();",
      "info" : "VariableDeclarationStatement[39189-39220]:VariableDeclarationStatement[39189-39220]"
    }, {
      "left" : "for (final ValueContainer.IntIterator inputIdsIterator = valueIt.getInputIdsIterator(); inputIdsIterator.hasNext())",
      "right" : "for (final ValueContainer.IntIterator inputIdsIterator = valueIt.getInputIdsIterator(); inputIdsIterator.hasNext())",
      "info" : "ForStatement[39235-39959]:ForStatement[39235-39959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39353-39959]:Block[39353-39959]"
    }, {
      "left" : "final int id = inputIdsIterator.next();",
      "right" : "final int id = inputIdsIterator.next();",
      "info" : "VariableDeclarationStatement[39371-39410]:VariableDeclarationStatement[39371-39410]"
    }, {
      "left" : "if (filter != null && !filter.containsFileId(id))",
      "right" : "if (filter != null && !filter.containsFileId(id))",
      "info" : "IfStatement[39427-39486]:IfStatement[39427-39486]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[39477-39486]:ContinueStatement[39477-39486]"
    }, {
      "left" : "VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);",
      "right" : "VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);",
      "info" : "VariableDeclarationStatement[39503-39571]:VariableDeclarationStatement[39503-39571]"
    }, {
      "left" : "if (file != null && scope.accept(file))",
      "right" : "if (file != null && scope.accept(file))",
      "info" : "IfStatement[39588-39943]:IfStatement[39588-39943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39628-39943]:Block[39628-39943]"
    }, {
      "left" : "shouldContinue = processor.process(file, value);",
      "right" : "shouldContinue = processor.process(file, value);",
      "info" : "ExpressionStatement[39648-39696]:ExpressionStatement[39648-39696]"
    }, {
      "left" : "if (!shouldContinue)",
      "right" : "if (!shouldContinue)",
      "info" : "IfStatement[39715-39796]:IfStatement[39715-39796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39736-39796]:Block[39736-39796]"
    }, {
      "left" : "break VALUES_LOOP;",
      "right" : "break VALUES_LOOP;",
      "info" : "BreakStatement[39758-39776]:BreakStatement[39758-39776]"
    }, {
      "left" : "if (ensureValueProcessedOnce)",
      "right" : "if (ensureValueProcessedOnce)",
      "info" : "IfStatement[39815-39925]:IfStatement[39815-39925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39845-39925]:Block[39845-39925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39867-39873]:BreakStatement[39867-39873]"
    }, {
      "left" : "return shouldContinue;",
      "right" : "return shouldContinue;",
      "info" : "ReturnStatement[39996-40018]:ReturnStatement[39996-40018]"
    }, {
      "left" : "final Boolean result = processExceptions(indexId, restrictToFile, scope, keyProcessor);",
      "right" : "final Boolean result = processExceptions(indexId, restrictToFile, scope, keyProcessor);",
      "info" : "VariableDeclarationStatement[40042-40129]:VariableDeclarationStatement[40042-40129]"
    }, {
      "left" : "return result == null || result.booleanValue();",
      "right" : "return result == null || result.booleanValue();",
      "info" : "ReturnStatement[40134-40181]:ReturnStatement[40134-40181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40668-40943]:Block[40668-40943]"
    }, {
      "left" : "ProjectIndexableFilesFilter filesSet = projectIndexableFiles(filter.getProject());",
      "right" : "ProjectIndexableFilesFilter filesSet = projectIndexableFiles(filter.getProject());",
      "info" : "VariableDeclarationStatement[40674-40756]:VariableDeclarationStatement[40674-40756]"
    }, {
      "left" : "final TIntHashSet set = collectFileIdsContainingAllKeys(indexId, dataKeys, filter, valueChecker, filesSet);",
      "right" : "final TIntHashSet set = collectFileIdsContainingAllKeys(indexId, dataKeys, filter, valueChecker, filesSet);",
      "info" : "VariableDeclarationStatement[40761-40868]:VariableDeclarationStatement[40761-40868]"
    }, {
      "left" : "return set != null && processVirtualFiles(set, filter, processor);",
      "right" : "return set != null && processVirtualFiles(set, filter, processor);",
      "info" : "ReturnStatement[40873-40939]:ReturnStatement[40873-40939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41116-41230]:Block[41116-41230]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "right" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "info" : "ExpressionStatement[41122-41171]:ExpressionStatement[41122-41171]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.signalUpdateEnd();",
      "right" : "myContentlessIndicesUpdateQueue.signalUpdateEnd();",
      "info" : "ExpressionStatement[41176-41226]:ExpressionStatement[41176-41226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41634-42488]:Block[41634-42488]"
    }, {
      "left" : "myModificationCount = modificationCount;",
      "right" : "myModificationCount = modificationCount;",
      "info" : "ExpressionStatement[41642-41682]:ExpressionStatement[41642-41682]"
    }, {
      "left" : "final int[] minMax = new int[2];",
      "right" : "final int[] minMax = new int[2];",
      "info" : "VariableDeclarationStatement[41689-41721]:VariableDeclarationStatement[41689-41721]"
    }, {
      "left" : "if (!set.isEmpty())",
      "right" : "if (!set.isEmpty())",
      "info" : "IfStatement[41728-41801]:IfStatement[41728-41801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41748-41801]:Block[41748-41801]"
    }, {
      "left" : "minMax[0] = minMax[1] = set.get(0);",
      "right" : "minMax[0] = minMax[1] = set.get(0);",
      "info" : "ExpressionStatement[41758-41793]:ExpressionStatement[41758-41793]"
    }, {
      "left" : "set.forEach(new TIntProcedure() {\n        @Override\n        public boolean execute(int value) {\n          if (value < 0) value = -value;\n          minMax[0] = Math.min(minMax[0], value);\n          minMax[1] = Math.max(minMax[1], value);\n          return true;\n        }\n      });",
      "right" : "set.forEach(new TIntProcedure() {\n        @Override\n        public boolean execute(int value) {\n          if (value < 0) value = -value;\n          minMax[0] = Math.min(minMax[0], value);\n          minMax[1] = Math.max(minMax[1], value);\n          return true;\n        }\n      });",
      "info" : "ExpressionStatement[41808-42087]:ExpressionStatement[41808-42087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41902-42077]:Block[41902-42077]"
    }, {
      "left" : "if (value < 0)",
      "right" : "if (value < 0)",
      "info" : "IfStatement[41914-41944]:IfStatement[41914-41944]"
    }, {
      "left" : "value = -value;",
      "right" : "value = -value;",
      "info" : "ExpressionStatement[41929-41944]:ExpressionStatement[41929-41944]"
    }, {
      "left" : "minMax[0] = Math.min(minMax[0], value);",
      "right" : "minMax[0] = Math.min(minMax[0], value);",
      "info" : "ExpressionStatement[41955-41994]:ExpressionStatement[41955-41994]"
    }, {
      "left" : "minMax[1] = Math.max(minMax[1], value);",
      "right" : "minMax[1] = Math.max(minMax[1], value);",
      "info" : "ExpressionStatement[42005-42044]:ExpressionStatement[42005-42044]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42055-42067]:ReturnStatement[42055-42067]"
    }, {
      "left" : "myMaxId = minMax[1];",
      "right" : "myMaxId = minMax[1];",
      "info" : "ExpressionStatement[42094-42114]:ExpressionStatement[42094-42114]"
    }, {
      "left" : "myMinId = minMax[0];",
      "right" : "myMinId = minMax[0];",
      "info" : "ExpressionStatement[42121-42141]:ExpressionStatement[42121-42141]"
    }, {
      "left" : "myBitMask = new long[((myMaxId - myMinId) >> SHIFT) + 1];",
      "right" : "myBitMask = new long[((myMaxId - myMinId) >> SHIFT) + 1];",
      "info" : "ExpressionStatement[42148-42205]:ExpressionStatement[42148-42205]"
    }, {
      "left" : "set.forEach(new TIntProcedure() {\n        @Override\n        public boolean execute(int value) {\n          if (value < 0) value = -value;\n          value -= myMinId;\n          myBitMask[value >> SHIFT] |= (1L << (value & MASK));\n          return true;\n        }\n      });",
      "right" : "set.forEach(new TIntProcedure() {\n        @Override\n        public boolean execute(int value) {\n          if (value < 0) value = -value;\n          value -= myMinId;\n          myBitMask[value >> SHIFT] |= (1L << (value & MASK));\n          return true;\n        }\n      });",
      "info" : "ExpressionStatement[42212-42482]:ExpressionStatement[42212-42482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42306-42472]:Block[42306-42472]"
    }, {
      "left" : "if (value < 0)",
      "right" : "if (value < 0)",
      "info" : "IfStatement[42318-42348]:IfStatement[42318-42348]"
    }, {
      "left" : "value = -value;",
      "right" : "value = -value;",
      "info" : "ExpressionStatement[42333-42348]:ExpressionStatement[42333-42348]"
    }, {
      "left" : "value -= myMinId;",
      "right" : "value -= myMinId;",
      "info" : "ExpressionStatement[42359-42376]:ExpressionStatement[42359-42376]"
    }, {
      "left" : "myBitMask[value >> SHIFT] |= (1L << (value & MASK));",
      "right" : "myBitMask[value >> SHIFT] |= (1L << (value & MASK));",
      "info" : "ExpressionStatement[42387-42439]:ExpressionStatement[42387-42439]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42450-42462]:ReturnStatement[42450-42462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42546-42716]:Block[42546-42716]"
    }, {
      "left" : "if (id < myMinId)",
      "right" : "if (id < myMinId)",
      "info" : "IfStatement[42554-42585]:IfStatement[42554-42585]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42572-42585]:ReturnStatement[42572-42585]"
    }, {
      "left" : "if (id > myMaxId)",
      "right" : "if (id > myMaxId)",
      "info" : "IfStatement[42592-42623]:IfStatement[42592-42623]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42610-42623]:ReturnStatement[42610-42623]"
    }, {
      "left" : "id -= myMinId;",
      "right" : "id -= myMinId;",
      "info" : "ExpressionStatement[42630-42644]:ExpressionStatement[42630-42644]"
    }, {
      "left" : "return (myBitMask[id >> SHIFT] & (1L << (id & MASK))) != 0;",
      "right" : "return (myBitMask[id >> SHIFT] & (1L << (id & MASK))) != 0;",
      "info" : "ReturnStatement[42651-42710]:ReturnStatement[42651-42710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42765-42945]:Block[42765-42945]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.signalUpdateStart();",
      "right" : "myContentlessIndicesUpdateQueue.signalUpdateStart();",
      "info" : "ExpressionStatement[42771-42823]:ExpressionStatement[42771-42823]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "right" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "info" : "ExpressionStatement[42828-42877]:ExpressionStatement[42828-42877]"
    }, {
      "left" : "myProjectsBeingUpdated.add(project);",
      "right" : "myProjectsBeingUpdated.add(project);",
      "info" : "ExpressionStatement[42882-42918]:ExpressionStatement[42882-42918]"
    }, {
      "left" : "++myFilesModCount;",
      "right" : "++myFilesModCount;",
      "info" : "ExpressionStatement[42923-42941]:ExpressionStatement[42923-42941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43000-43072]:Block[43000-43072]"
    }, {
      "left" : "myProjectsBeingUpdated.remove(project);",
      "right" : "myProjectsBeingUpdated.remove(project);",
      "info" : "ExpressionStatement[43006-43045]:ExpressionStatement[43006-43045]"
    }, {
      "left" : "++myFilesModCount;",
      "right" : "++myFilesModCount;",
      "info" : "ExpressionStatement[43050-43068]:ExpressionStatement[43050-43068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43241-44919]:Block[43241-44919]"
    }, {
      "left" : "if (project == null || myUpdatingFiles.get() > 0)",
      "right" : "if (project == null || myUpdatingFiles.get() > 0)",
      "info" : "IfStatement[43247-43309]:IfStatement[43247-43309]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43297-43309]:ReturnStatement[43297-43309]"
    }, {
      "left" : "if (myProjectsBeingUpdated.contains(project))",
      "right" : "if (myProjectsBeingUpdated.contains(project))",
      "info" : "IfStatement[43314-43372]:IfStatement[43314-43372]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43360-43372]:ReturnStatement[43360-43372]"
    }, {
      "left" : "SoftReference<ProjectIndexableFilesFilter> reference = project.getUserData(ourProjectFilesSetKey);",
      "right" : "SoftReference<ProjectIndexableFilesFilter> reference = project.getUserData(ourProjectFilesSetKey);",
      "info" : "VariableDeclarationStatement[43378-43476]:VariableDeclarationStatement[43378-43476]"
    }, {
      "left" : "ProjectIndexableFilesFilter data = com.intellij.reference.SoftReference.dereference(reference);",
      "right" : "ProjectIndexableFilesFilter data = com.intellij.reference.SoftReference.dereference(reference);",
      "info" : "VariableDeclarationStatement[43481-43576]:VariableDeclarationStatement[43481-43576]"
    }, {
      "left" : "if (data != null && data.myModificationCount == myFilesModCount)",
      "right" : "if (data != null && data.myModificationCount == myFilesModCount)",
      "info" : "IfStatement[43581-43658]:IfStatement[43581-43658]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[43646-43658]:ReturnStatement[43646-43658]"
    }, {
      "left" : "if (myCalcIndexableFilesLock.tryLock())",
      "right" : "if (myCalcIndexableFilesLock.tryLock())",
      "info" : "IfStatement[43664-44878]:IfStatement[43664-44878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43704-44878]:Block[43704-44878]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[43755-44872]:TryStatement[43755-44872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43759-44805]:Block[43759-44805]"
    }, {
      "left" : "reference = project.getUserData(ourProjectFilesSetKey);",
      "right" : "reference = project.getUserData(ourProjectFilesSetKey);",
      "info" : "ExpressionStatement[43769-43824]:ExpressionStatement[43769-43824]"
    }, {
      "left" : "data = com.intellij.reference.SoftReference.dereference(reference);",
      "right" : "data = com.intellij.reference.SoftReference.dereference(reference);",
      "info" : "ExpressionStatement[43833-43900]:ExpressionStatement[43833-43900]"
    }, {
      "left" : "if (data != null && data.myModificationCount == myFilesModCount)",
      "right" : "if (data != null && data.myModificationCount == myFilesModCount)",
      "info" : "IfStatement[43909-44008]:IfStatement[43909-44008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43974-44008]:Block[43974-44008]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[43986-43998]:ReturnStatement[43986-43998]"
    }, {
      "left" : "long start = System.currentTimeMillis();",
      "right" : "long start = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[44018-44058]:VariableDeclarationStatement[44018-44058]"
    }, {
      "left" : "final TIntArrayList filesSet = new TIntArrayList();",
      "right" : "final TIntArrayList filesSet = new TIntArrayList();",
      "info" : "VariableDeclarationStatement[44068-44119]:VariableDeclarationStatement[44068-44119]"
    }, {
      "left" : "iterateIndexableFiles(new ContentIterator() {\n          @Override\n          public boolean processFile(@NotNull VirtualFile fileOrDir) {\n            filesSet.add(((VirtualFileWithId)fileOrDir).getId());\n            return true;\n          }\n        }, project, SilentProgressIndicator.create());",
      "right" : "iterateIndexableFiles(new ContentIterator() {\n          @Override\n          public boolean processFile(@NotNull VirtualFile fileOrDir) {\n            filesSet.add(((VirtualFileWithId)fileOrDir).getId());\n            return true;\n          }\n        }, project, SilentProgressIndicator.create());",
      "info" : "ExpressionStatement[44128-44422]:ExpressionStatement[44128-44422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44263-44367]:Block[44263-44367]"
    }, {
      "left" : "filesSet.add(((VirtualFileWithId)fileOrDir).getId());",
      "right" : "filesSet.add(((VirtualFileWithId)fileOrDir).getId());",
      "info" : "ExpressionStatement[44277-44330]:ExpressionStatement[44277-44330]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44343-44355]:ReturnStatement[44343-44355]"
    }, {
      "left" : "ProjectIndexableFilesFilter filter = new ProjectIndexableFilesFilter(filesSet, myFilesModCount);",
      "right" : "ProjectIndexableFilesFilter filter = new ProjectIndexableFilesFilter(filesSet, myFilesModCount);",
      "info" : "VariableDeclarationStatement[44431-44527]:VariableDeclarationStatement[44431-44527]"
    }, {
      "left" : "project.putUserData(ourProjectFilesSetKey, new SoftReference<ProjectIndexableFilesFilter>(filter));",
      "right" : "project.putUserData(ourProjectFilesSetKey, new SoftReference<ProjectIndexableFilesFilter>(filter));",
      "info" : "ExpressionStatement[44536-44635]:ExpressionStatement[44536-44635]"
    }, {
      "left" : "long finish = System.currentTimeMillis();",
      "right" : "long finish = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[44645-44686]:VariableDeclarationStatement[44645-44686]"
    }, {
      "left" : "LOG.debug(filesSet.size() + \" files iterated in \" + (finish - start) + \" ms\");",
      "right" : "LOG.debug(filesSet.size() + \" files iterated in \" + (finish - start) + \" ms\");",
      "info" : "ExpressionStatement[44695-44773]:ExpressionStatement[44695-44773]"
    }, {
      "left" : "return filter;",
      "right" : "return filter;",
      "info" : "ReturnStatement[44783-44797]:ReturnStatement[44783-44797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44820-44872]:Block[44820-44872]"
    }, {
      "left" : "myCalcIndexableFilesLock.unlock();",
      "right" : "myCalcIndexableFilesLock.unlock();",
      "info" : "ExpressionStatement[44830-44864]:ExpressionStatement[44830-44864]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44883-44895]:ReturnStatement[44883-44895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45458-47645]:Block[45458-47645]"
    }, {
      "left" : "final ThrowableConvertor<UpdatableIndex<K, V, FileContent>, TIntHashSet, StorageException> convertor =\n      new ThrowableConvertor<UpdatableIndex<K, V, FileContent>, TIntHashSet, StorageException>() {\n        @Nullable\n        @Override\n        public TIntHashSet convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException {\n          TIntHashSet mainIntersection = null;\n\n          for (K dataKey : dataKeys) {\n            ProgressManager.checkCanceled();\n            final TIntHashSet copy = new TIntHashSet();\n            final ValueContainer<V> container = index.getData(dataKey);\n\n            for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n              final V value = valueIt.next();\n              if (valueChecker != null && !valueChecker.value(value)) {\n                continue;\n              }\n\n              ValueContainer.IntIterator iterator = valueIt.getInputIdsIterator();\n\n              if (mainIntersection == null || iterator.size() < mainIntersection.size()) {\n                while (iterator.hasNext()) {\n                  final int id = iterator.next();\n                  if (mainIntersection == null && (projectFilesFilter == null || projectFilesFilter.containsFileId(id)) ||\n                      mainIntersection != null && mainIntersection.contains(id)\n                    ) {\n                    copy.add(id);\n                  }\n                }\n              }\n              else {\n                mainIntersection.forEach(new TIntProcedure() {\n                  final ValueContainer.IntPredicate predicate = valueIt.getValueAssociationPredicate();\n\n                  @Override\n                  public boolean execute(int id) {\n                    if (predicate.contains(id)) copy.add(id);\n                    return true;\n                  }\n                });\n              }\n            }\n\n            mainIntersection = copy;\n            if (mainIntersection.isEmpty()) {\n              return new TIntHashSet();\n            }\n          }\n\n          return mainIntersection;\n        }\n      };",
      "right" : "final ThrowableConvertor<UpdatableIndex<K, V, FileContent>, TIntHashSet, StorageException> convertor =\n      new ThrowableConvertor<UpdatableIndex<K, V, FileContent>, TIntHashSet, StorageException>() {\n        @Nullable\n        @Override\n        public TIntHashSet convert(@NotNull UpdatableIndex<K, V, FileContent> index) throws StorageException {\n          TIntHashSet mainIntersection = null;\n\n          for (K dataKey : dataKeys) {\n            ProgressManager.checkCanceled();\n            final TIntHashSet copy = new TIntHashSet();\n            final ValueContainer<V> container = index.getData(dataKey);\n\n            for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext(); ) {\n              final V value = valueIt.next();\n              if (valueChecker != null && !valueChecker.value(value)) {\n                continue;\n              }\n\n              ValueContainer.IntIterator iterator = valueIt.getInputIdsIterator();\n\n              if (mainIntersection == null || iterator.size() < mainIntersection.size()) {\n                while (iterator.hasNext()) {\n                  final int id = iterator.next();\n                  if (mainIntersection == null && (projectFilesFilter == null || projectFilesFilter.containsFileId(id)) ||\n                      mainIntersection != null && mainIntersection.contains(id)\n                    ) {\n                    copy.add(id);\n                  }\n                }\n              }\n              else {\n                mainIntersection.forEach(new TIntProcedure() {\n                  final ValueContainer.IntPredicate predicate = valueIt.getValueAssociationPredicate();\n\n                  @Override\n                  public boolean execute(int id) {\n                    if (predicate.contains(id)) copy.add(id);\n                    return true;\n                  }\n                });\n              }\n            }\n\n            mainIntersection = copy;\n            if (mainIntersection.isEmpty()) {\n              return new TIntHashSet();\n            }\n          }\n\n          return mainIntersection;\n        }\n      };",
      "info" : "VariableDeclarationStatement[45464-47575]:VariableDeclarationStatement[45464-47575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45811-47566]:Block[45811-47566]"
    }, {
      "left" : "TIntHashSet mainIntersection = null;",
      "right" : "TIntHashSet mainIntersection = null;",
      "info" : "VariableDeclarationStatement[45823-45859]:VariableDeclarationStatement[45823-45859]"
    }, {
      "left" : "for (K dataKey : dataKeys)",
      "right" : "for (K dataKey : dataKeys)",
      "info" : "EnhancedForStatement[45871-47520]:EnhancedForStatement[45871-47520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45898-47520]:Block[45898-47520]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[45912-45944]:ExpressionStatement[45912-45944]"
    }, {
      "left" : "final TIntHashSet copy = new TIntHashSet();",
      "right" : "final TIntHashSet copy = new TIntHashSet();",
      "info" : "VariableDeclarationStatement[45957-46000]:VariableDeclarationStatement[45957-46000]"
    }, {
      "left" : "final ValueContainer<V> container = index.getData(dataKey);",
      "right" : "final ValueContainer<V> container = index.getData(dataKey);",
      "info" : "VariableDeclarationStatement[46013-46072]:VariableDeclarationStatement[46013-46072]"
    }, {
      "left" : "for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext())",
      "right" : "for (final ValueContainer.ValueIterator<V> valueIt = container.getValueIterator(); valueIt.hasNext())",
      "info" : "ForStatement[46086-47370]:ForStatement[46086-47370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46190-47370]:Block[46190-47370]"
    }, {
      "left" : "final V value = valueIt.next();",
      "right" : "final V value = valueIt.next();",
      "info" : "VariableDeclarationStatement[46206-46237]:VariableDeclarationStatement[46206-46237]"
    }, {
      "left" : "if (valueChecker != null && !valueChecker.value(value))",
      "right" : "if (valueChecker != null && !valueChecker.value(value))",
      "info" : "IfStatement[46252-46351]:IfStatement[46252-46351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46308-46351]:Block[46308-46351]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[46326-46335]:ContinueStatement[46326-46335]"
    }, {
      "left" : "ValueContainer.IntIterator iterator = valueIt.getInputIdsIterator();",
      "right" : "ValueContainer.IntIterator iterator = valueIt.getInputIdsIterator();",
      "info" : "VariableDeclarationStatement[46367-46435]:VariableDeclarationStatement[46367-46435]"
    }, {
      "left" : "if (mainIntersection == null || iterator.size() < mainIntersection.size())",
      "right" : "if (mainIntersection == null || iterator.size() < mainIntersection.size())",
      "info" : "IfStatement[46451-47356]:IfStatement[46451-47356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46526-46937]:Block[46526-46937]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[46544-46921]:WhileStatement[46544-46921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46571-46921]:Block[46571-46921]"
    }, {
      "left" : "final int id = iterator.next();",
      "right" : "final int id = iterator.next();",
      "info" : "VariableDeclarationStatement[46591-46622]:VariableDeclarationStatement[46591-46622]"
    }, {
      "left" : "if (mainIntersection == null && (projectFilesFilter == null || projectFilesFilter.containsFileId(id)) ||\n                      mainIntersection != null && mainIntersection.contains(id))",
      "right" : "if (mainIntersection == null && (projectFilesFilter == null || projectFilesFilter.containsFileId(id)) ||\n                      mainIntersection != null && mainIntersection.contains(id))",
      "info" : "IfStatement[46641-46903]:IfStatement[46641-46903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46848-46903]:Block[46848-46903]"
    }, {
      "left" : "copy.add(id);",
      "right" : "copy.add(id);",
      "info" : "ExpressionStatement[46870-46883]:ExpressionStatement[46870-46883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46957-47356]:Block[46957-47356]"
    }, {
      "left" : "mainIntersection.forEach(new TIntProcedure() {\n                  final ValueContainer.IntPredicate predicate = valueIt.getValueAssociationPredicate();\n\n                  @Override\n                  public boolean execute(int id) {\n                    if (predicate.contains(id)) copy.add(id);\n                    return true;\n                  }\n                });",
      "right" : "mainIntersection.forEach(new TIntProcedure() {\n                  final ValueContainer.IntPredicate predicate = valueIt.getValueAssociationPredicate();\n\n                  @Override\n                  public boolean execute(int id) {\n                    if (predicate.contains(id)) copy.add(id);\n                    return true;\n                  }\n                });",
      "info" : "ExpressionStatement[46975-47340]:ExpressionStatement[46975-47340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47204-47320]:Block[47204-47320]"
    }, {
      "left" : "if (predicate.contains(id))",
      "right" : "if (predicate.contains(id))",
      "info" : "IfStatement[47226-47267]:IfStatement[47226-47267]"
    }, {
      "left" : "copy.add(id);",
      "right" : "copy.add(id);",
      "info" : "ExpressionStatement[47254-47267]:ExpressionStatement[47254-47267]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47288-47300]:ReturnStatement[47288-47300]"
    }, {
      "left" : "mainIntersection = copy;",
      "right" : "mainIntersection = copy;",
      "info" : "ExpressionStatement[47384-47408]:ExpressionStatement[47384-47408]"
    }, {
      "left" : "if (mainIntersection.isEmpty())",
      "right" : "if (mainIntersection.isEmpty())",
      "info" : "IfStatement[47421-47508]:IfStatement[47421-47508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47453-47508]:Block[47453-47508]"
    }, {
      "left" : "return new TIntHashSet();",
      "right" : "return new TIntHashSet();",
      "info" : "ReturnStatement[47469-47494]:ReturnStatement[47469-47494]"
    }, {
      "left" : "return mainIntersection;",
      "right" : "return mainIntersection;",
      "info" : "ReturnStatement[47532-47556]:ReturnStatement[47532-47556]"
    }, {
      "left" : "return processExceptions(indexId, null, filter, convertor);",
      "right" : "return processExceptions(indexId, null, filter, convertor);",
      "info" : "ReturnStatement[47582-47641]:ReturnStatement[47582-47641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47898-48329]:Block[47898-48329]"
    }, {
      "left" : "final PersistentFS fs = (PersistentFS)ManagingFS.getInstance();",
      "right" : "final PersistentFS fs = (PersistentFS)ManagingFS.getInstance();",
      "info" : "VariableDeclarationStatement[47904-47967]:VariableDeclarationStatement[47904-47967]"
    }, {
      "left" : "return ids.forEach(new TIntProcedure() {\n      @Override\n      public boolean execute(int id) {\n        ProgressManager.checkCanceled();\n        VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);\n        if (file != null && filter.accept(file)) {\n          return processor.process(file);\n        }\n        return true;\n      }\n    });",
      "right" : "return ids.forEach(new TIntProcedure() {\n      @Override\n      public boolean execute(int id) {\n        ProgressManager.checkCanceled();\n        VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);\n        if (file != null && filter.accept(file)) {\n          return processor.process(file);\n        }\n        return true;\n      }\n    });",
      "info" : "ReturnStatement[47972-48325]:ReturnStatement[47972-48325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48066-48317]:Block[48066-48317]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[48076-48108]:ExpressionStatement[48076-48108]"
    }, {
      "left" : "VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);",
      "right" : "VirtualFile file = IndexInfrastructure.findFileByIdIfCached(fs, id);",
      "info" : "VariableDeclarationStatement[48117-48185]:VariableDeclarationStatement[48117-48185]"
    }, {
      "left" : "if (file != null && filter.accept(file))",
      "right" : "if (file != null && filter.accept(file))",
      "info" : "IfStatement[48194-48288]:IfStatement[48194-48288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48235-48288]:Block[48235-48288]"
    }, {
      "left" : "return processor.process(file);",
      "right" : "return processor.process(file);",
      "info" : "ReturnStatement[48247-48278]:ReturnStatement[48247-48278]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48297-48309]:ReturnStatement[48297-48309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48421-48934]:Block[48421-48934]"
    }, {
      "left" : "if (ApplicationManager.getApplication().isUnitTestMode())",
      "right" : "if (ApplicationManager.getApplication().isUnitTestMode())",
      "info" : "IfStatement[48427-48634]:IfStatement[48427-48634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48485-48634]:Block[48485-48634]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48616-48628]:ReturnStatement[48616-48628]"
    }, {
      "left" : "if (e instanceof IndexOutOfBoundsException)",
      "right" : "if (e instanceof IndexOutOfBoundsException)",
      "info" : "IfStatement[48639-48692]:IfStatement[48639-48692]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[48683-48692]:ReturnStatement[48683-48692]"
    }, {
      "left" : "Throwable cause = e.getCause();",
      "right" : "Throwable cause = e.getCause();",
      "info" : "VariableDeclarationStatement[48740-48771]:VariableDeclarationStatement[48740-48771]"
    }, {
      "left" : "if (cause instanceof StorageException || cause instanceof IOException ||\n        cause instanceof IllegalArgumentException)",
      "right" : "if (cause instanceof StorageException || cause instanceof IOException ||\n        cause instanceof IllegalArgumentException)",
      "info" : "IfStatement[48776-48913]:IfStatement[48776-48913]"
    }, {
      "left" : "return cause;",
      "right" : "return cause;",
      "info" : "ReturnStatement[48900-48913]:ReturnStatement[48900-48913]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48918-48930]:ReturnStatement[48918-48930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49251-49342]:Block[49251-49342]"
    }, {
      "left" : "return processFilesContainingAllKeys(indexId, dataKeys, filter, null, processor);",
      "right" : "return processFilesContainingAllKeys(indexId, dataKeys, filter, null, processor);",
      "info" : "ReturnStatement[49257-49338]:ReturnStatement[49257-49338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49451-49503]:Block[49451-49503]"
    }, {
      "left" : "requestRebuild(indexId, new Throwable(e));",
      "right" : "requestRebuild(indexId, new Throwable(e));",
      "info" : "ExpressionStatement[49457-49499]:ExpressionStatement[49457-49499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49563-49801]:Block[49563-49801]"
    }, {
      "left" : "LOG.info(\"scheduleIndexRebuild, reason: \" + reason);",
      "right" : "LOG.info(\"scheduleIndexRebuild, reason: \" + reason);",
      "info" : "ExpressionStatement[49569-49621]:ExpressionStatement[49569-49621]"
    }, {
      "left" : "for (Project project : ProjectManager.getInstance().getOpenProjects())",
      "right" : "for (Project project : ProjectManager.getInstance().getOpenProjects())",
      "info" : "EnhancedForStatement[49626-49797]:EnhancedForStatement[49626-49797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49697-49797]:Block[49697-49797]"
    }, {
      "left" : "DumbService.getInstance(project).queueTask(new UnindexedFilesUpdater(project, false));",
      "right" : "DumbService.getInstance(project).queueTask(new UnindexedFilesUpdater(project, false));",
      "info" : "ExpressionStatement[49705-49791]:ExpressionStatement[49705-49791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49886-49952]:Block[49886-49952]"
    }, {
      "left" : "advanceIndexVersion(indexId);",
      "right" : "advanceIndexVersion(indexId);",
      "info" : "ExpressionStatement[49892-49921]:ExpressionStatement[49892-49921]"
    }, {
      "left" : "doClearIndex(indexId);",
      "right" : "doClearIndex(indexId);",
      "info" : "ExpressionStatement[49926-49948]:ExpressionStatement[49926-49948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50024-50217]:Block[50024-50217]"
    }, {
      "left" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "right" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "info" : "VariableDeclarationStatement[50030-50096]:VariableDeclarationStatement[50030-50096]"
    }, {
      "left" : "assert index != null : \"Index with key \" + indexId + \" not found or not registered properly\";",
      "right" : "assert index != null : \"Index with key \" + indexId + \" not found or not registered properly\";",
      "info" : "AssertStatement[50101-50194]:AssertStatement[50101-50194]"
    }, {
      "left" : "index.clear();",
      "right" : "index.clear();",
      "info" : "ExpressionStatement[50199-50213]:ExpressionStatement[50199-50213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50272-50464]:Block[50272-50464]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[50278-50460]:TryStatement[50278-50460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50282-50406]:Block[50282-50406]"
    }, {
      "left" : "IndexingStamp.rewriteVersion(IndexInfrastructure.getVersionFile(indexId), myIndexIdToVersionMap.get(indexId));",
      "right" : "IndexingStamp.rewriteVersion(IndexInfrastructure.getVersionFile(indexId), myIndexIdToVersionMap.get(indexId));",
      "info" : "ExpressionStatement[50290-50400]:ExpressionStatement[50290-50400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50433-50460]:Block[50433-50460]"
    }, {
      "left" : "LOG.error(e);",
      "right" : "LOG.error(e);",
      "info" : "ExpressionStatement[50441-50454]:ExpressionStatement[50441-50454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50523-50798]:Block[50523-50798]"
    }, {
      "left" : "Document[] documents = myFileDocumentManager.getUnsavedDocuments();",
      "right" : "Document[] documents = myFileDocumentManager.getUnsavedDocuments();",
      "info" : "VariableDeclarationStatement[50529-50596]:VariableDeclarationStatement[50529-50596]"
    }, {
      "left" : "if (documents.length == 0)",
      "right" : "if (documents.length == 0)",
      "info" : "IfStatement[50601-50658]:IfStatement[50601-50658]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[50628-50658]:ReturnStatement[50628-50658]"
    }, {
      "left" : "if (documents.length == 1)",
      "right" : "if (documents.length == 1)",
      "info" : "IfStatement[50663-50733]:IfStatement[50663-50733]"
    }, {
      "left" : "return Collections.singleton(documents[0]);",
      "right" : "return Collections.singleton(documents[0]);",
      "info" : "ReturnStatement[50690-50733]:ReturnStatement[50690-50733]"
    }, {
      "left" : "return new THashSet<Document>(Arrays.asList(documents));",
      "right" : "return new THashSet<Document>(Arrays.asList(documents));",
      "info" : "ReturnStatement[50738-50794]:ReturnStatement[50738-50794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50860-50903]:Block[50860-50903]"
    }, {
      "left" : "return myTransactionMap.keySet();",
      "right" : "return myTransactionMap.keySet();",
      "info" : "ReturnStatement[50866-50899]:ReturnStatement[50866-50899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51203-52878]:Block[51203-52878]"
    }, {
      "left" : "if (myUpToDateIndicesForUnsavedOrTransactedDocuments.contains(indexId))",
      "right" : "if (myUpToDateIndicesForUnsavedOrTransactedDocuments.contains(indexId))",
      "info" : "IfStatement[51209-51335]:IfStatement[51209-51335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51281-51335]:Block[51281-51335]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51289-51296]:ReturnStatement[51289-51296]"
    }, {
      "left" : "Set<Document> documents = getUnsavedDocuments();",
      "right" : "Set<Document> documents = getUnsavedDocuments();",
      "info" : "VariableDeclarationStatement[51341-51389]:VariableDeclarationStatement[51341-51389]"
    }, {
      "left" : "boolean psiBasedIndex = myPsiDependentIndices.contains(indexId);",
      "right" : "boolean psiBasedIndex = myPsiDependentIndices.contains(indexId);",
      "info" : "VariableDeclarationStatement[51394-51458]:VariableDeclarationStatement[51394-51458]"
    }, {
      "left" : "if(psiBasedIndex)",
      "right" : "if(psiBasedIndex)",
      "info" : "IfStatement[51463-51781]:IfStatement[51463-51781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51481-51781]:Block[51481-51781]"
    }, {
      "left" : "Set<Document> transactedDocuments = getTransactedDocuments();",
      "right" : "Set<Document> transactedDocuments = getTransactedDocuments();",
      "info" : "VariableDeclarationStatement[51489-51550]:VariableDeclarationStatement[51489-51550]"
    }, {
      "left" : "if (documents.size() == 0)",
      "right" : "if (documents.size() == 0)",
      "info" : "IfStatement[51557-51775]:IfStatement[51557-51775]"
    }, {
      "left" : "documents = transactedDocuments;",
      "right" : "documents = transactedDocuments;",
      "info" : "ExpressionStatement[51584-51616]:ExpressionStatement[51584-51616]"
    }, {
      "left" : "if (transactedDocuments.size() > 0)",
      "right" : "if (transactedDocuments.size() > 0)",
      "info" : "IfStatement[51628-51775]:IfStatement[51628-51775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51664-51775]:Block[51664-51775]"
    }, {
      "left" : "documents = new THashSet<Document>(documents);",
      "right" : "documents = new THashSet<Document>(documents);",
      "info" : "ExpressionStatement[51674-51720]:ExpressionStatement[51674-51720]"
    }, {
      "left" : "documents.addAll(transactedDocuments);",
      "right" : "documents.addAll(transactedDocuments);",
      "info" : "ExpressionStatement[51729-51767]:ExpressionStatement[51729-51767]"
    }, {
      "left" : "if (!documents.isEmpty())",
      "right" : "if (!documents.isEmpty())",
      "info" : "IfStatement[51787-52874]:IfStatement[51787-52874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51813-52874]:Block[51813-52874]"
    }, {
      "left" : "Collection<Document> documentsToProcessForProject = ContainerUtil.filter(documents, new Condition<Document>() {\n        @Override\n        public boolean value(Document document) {\n          return belongsToScope(myFileDocumentManager.getFile(document), restrictedFile, filter);\n        }\n      });",
      "right" : "Collection<Document> documentsToProcessForProject = ContainerUtil.filter(documents, new Condition<Document>() {\n        @Override\n        public boolean value(Document document) {\n          return belongsToScope(myFileDocumentManager.getFile(document), restrictedFile, filter);\n        }\n      });",
      "info" : "VariableDeclarationStatement[51821-52118]:VariableDeclarationStatement[51821-52118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51999-52108]:Block[51999-52108]"
    }, {
      "left" : "return belongsToScope(myFileDocumentManager.getFile(document), restrictedFile, filter);",
      "right" : "return belongsToScope(myFileDocumentManager.getFile(document), restrictedFile, filter);",
      "info" : "ReturnStatement[52011-52098]:ReturnStatement[52011-52098]"
    }, {
      "left" : "if (!documentsToProcessForProject.isEmpty())",
      "right" : "if (!documentsToProcessForProject.isEmpty())",
      "info" : "IfStatement[52126-52868]:IfStatement[52126-52868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52171-52868]:Block[52171-52868]"
    }, {
      "left" : "final StorageGuard.StorageModeExitHandler guard = setDataBufferingEnabled(true);",
      "right" : "final StorageGuard.StorageModeExitHandler guard = setDataBufferingEnabled(true);",
      "info" : "VariableDeclarationStatement[52181-52261]:VariableDeclarationStatement[52181-52261]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52270-52860]:TryStatement[52270-52860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52274-52807]:Block[52274-52807]"
    }, {
      "left" : "DocumentUpdateTask task = myUnsavedDataUpdateTasks.get(indexId);",
      "right" : "DocumentUpdateTask task = myUnsavedDataUpdateTasks.get(indexId);",
      "info" : "VariableDeclarationStatement[52286-52350]:VariableDeclarationStatement[52286-52350]"
    }, {
      "left" : "assert task != null : \"Task for unsaved data indexing was not initialized for index \" + indexId;",
      "right" : "assert task != null : \"Task for unsaved data indexing was not initialized for index \" + indexId;",
      "info" : "AssertStatement[52361-52457]:AssertStatement[52361-52457]"
    }, {
      "left" : "boolean processedAll = task.processAll(documentsToProcessForProject, project) && documentsToProcessForProject.size() == documents.size();",
      "right" : "boolean processedAll = task.processAll(documentsToProcessForProject, project) && documentsToProcessForProject.size() == documents.size();",
      "info" : "VariableDeclarationStatement[52469-52606]:VariableDeclarationStatement[52469-52606]"
    }, {
      "left" : "if (processedAll && !hasActiveTransactions())",
      "right" : "if (processedAll && !hasActiveTransactions())",
      "info" : "IfStatement[52618-52797]:IfStatement[52618-52797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52664-52797]:Block[52664-52797]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[52678-52710]:ExpressionStatement[52678-52710]"
    }, {
      "left" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.add(indexId);",
      "right" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.add(indexId);",
      "info" : "ExpressionStatement[52723-52785]:ExpressionStatement[52723-52785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52824-52860]:Block[52824-52860]"
    }, {
      "left" : "guard.leave();",
      "right" : "guard.leave();",
      "info" : "ExpressionStatement[52836-52850]:ExpressionStatement[52836-52850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52922-52967]:Block[52922-52967]"
    }, {
      "left" : "return !myTransactionMap.isEmpty();",
      "right" : "return !myTransactionMap.isEmpty();",
      "info" : "ReturnStatement[52928-52963]:ReturnStatement[52928-52963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53237-53273]:Block[53237-53273]"
    }, {
      "left" : "myDocument = document;",
      "right" : "myDocument = document;",
      "info" : "ExpressionStatement[53245-53267]:ExpressionStatement[53245-53267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53323-53382]:Block[53323-53382]"
    }, {
      "left" : "return myDocument.getImmutableCharSequence();",
      "right" : "return myDocument.getImmutableCharSequence();",
      "info" : "ReturnStatement[53331-53376]:ReturnStatement[53331-53376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53437-53492]:Block[53437-53492]"
    }, {
      "left" : "return myDocument.getModificationStamp();",
      "right" : "return myDocument.getModificationStamp();",
      "info" : "ReturnStatement[53445-53486]:ReturnStatement[53445-53486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53703-53760]:Block[53703-53760]"
    }, {
      "left" : "myDocument = document;",
      "right" : "myDocument = document;",
      "info" : "ExpressionStatement[53711-53733]:ExpressionStatement[53711-53733]"
    }, {
      "left" : "myFile = file;",
      "right" : "myFile = file;",
      "info" : "ExpressionStatement[53740-53754]:ExpressionStatement[53740-53754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53810-54083]:Block[53810-54083]"
    }, {
      "left" : "if (myFile.getViewProvider().getModificationStamp() != myDocument.getModificationStamp())",
      "right" : "if (myFile.getViewProvider().getModificationStamp() != myDocument.getModificationStamp())",
      "info" : "IfStatement[53818-54025]:IfStatement[53818-54025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53908-54025]:Block[53908-54025]"
    }, {
      "left" : "final ASTNode node = myFile.getNode();",
      "right" : "final ASTNode node = myFile.getNode();",
      "info" : "VariableDeclarationStatement[53918-53956]:VariableDeclarationStatement[53918-53956]"
    }, {
      "left" : "assert node != null;",
      "right" : "assert node != null;",
      "info" : "AssertStatement[53965-53985]:AssertStatement[53965-53985]"
    }, {
      "left" : "return node.getChars();",
      "right" : "return node.getChars();",
      "info" : "ReturnStatement[53994-54017]:ReturnStatement[53994-54017]"
    }, {
      "left" : "return myDocument.getImmutableCharSequence();",
      "right" : "return myDocument.getImmutableCharSequence();",
      "info" : "ReturnStatement[54032-54077]:ReturnStatement[54032-54077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54138-54207]:Block[54138-54207]"
    }, {
      "left" : "return myFile.getViewProvider().getModificationStamp();",
      "right" : "return myFile.getViewProvider().getModificationStamp();",
      "info" : "ReturnStatement[54146-54201]:ReturnStatement[54146-54201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54736-57415]:Block[54736-57415]"
    }, {
      "left" : "final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project);",
      "right" : "final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project);",
      "info" : "VariableDeclarationStatement[54742-54862]:VariableDeclarationStatement[54742-54862]"
    }, {
      "left" : "final DocumentContent content;",
      "right" : "final DocumentContent content;",
      "info" : "VariableDeclarationStatement[54868-54898]:VariableDeclarationStatement[54868-54898]"
    }, {
      "left" : "if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp())",
      "right" : "if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp())",
      "info" : "IfStatement[54903-55170]:IfStatement[54903-55170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55035-55105]:Block[55035-55105]"
    }, {
      "left" : "content = new PsiContent(document, dominantContentFile);",
      "right" : "content = new PsiContent(document, dominantContentFile);",
      "info" : "ExpressionStatement[55043-55099]:ExpressionStatement[55043-55099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55115-55170]:Block[55115-55170]"
    }, {
      "left" : "content = new AuthenticContent(document);",
      "right" : "content = new AuthenticContent(document);",
      "info" : "ExpressionStatement[55123-55164]:ExpressionStatement[55123-55164]"
    }, {
      "left" : "boolean psiBasedIndex = myPsiDependentIndices.contains(requestedIndexId);",
      "right" : "boolean psiBasedIndex = myPsiDependentIndices.contains(requestedIndexId);",
      "info" : "VariableDeclarationStatement[55176-55249]:VariableDeclarationStatement[55176-55249]"
    }, {
      "left" : "final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp();",
      "right" : "final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp();",
      "info" : "VariableDeclarationStatement[55255-55405]:VariableDeclarationStatement[55255-55405]"
    }, {
      "left" : "final long previousDocStamp = myLastIndexedDocStamps.get(document, requestedIndexId);",
      "right" : "final long previousDocStamp = myLastIndexedDocStamps.get(document, requestedIndexId);",
      "info" : "VariableDeclarationStatement[55411-55496]:VariableDeclarationStatement[55411-55496]"
    }, {
      "left" : "if (previousDocStamp == currentDocStamp)",
      "right" : "if (previousDocStamp == currentDocStamp)",
      "info" : "IfStatement[55501-55555]:IfStatement[55501-55555]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55542-55555]:ReturnStatement[55542-55555]"
    }, {
      "left" : "final CharSequence contentText = content.getText();",
      "right" : "final CharSequence contentText = content.getText();",
      "info" : "VariableDeclarationStatement[55561-55612]:VariableDeclarationStatement[55561-55612]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(vFile, vFile.getFileType());",
      "right" : "myFileTypeManager.cacheFileType(vFile, vFile.getFileType());",
      "info" : "ExpressionStatement[55617-55677]:ExpressionStatement[55617-55677]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[55683-57394]:TryStatement[55683-57394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55687-57322]:Block[55687-57322]"
    }, {
      "left" : "if (!isTooLarge(vFile, contentText.length()) &&\n          getAffectedIndexCandidates(vFile).contains(requestedIndexId) &&\n          getInputFilter(requestedIndexId).acceptInput(vFile))",
      "right" : "if (!isTooLarge(vFile, contentText.length()) &&\n          getAffectedIndexCandidates(vFile).contains(requestedIndexId) &&\n          getInputFilter(requestedIndexId).acceptInput(vFile))",
      "info" : "IfStatement[55695-57167]:IfStatement[55695-57167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55880-57167]:Block[55880-57167]"
    }, {
      "left" : "WeakReference<FileContentImpl> previousContentRef = document.getUserData(ourFileContentKey);",
      "right" : "WeakReference<FileContentImpl> previousContentRef = document.getUserData(ourFileContentKey);",
      "info" : "VariableDeclarationStatement[56036-56128]:VariableDeclarationStatement[56036-56128]"
    }, {
      "left" : "FileContentImpl previousContent = com.intellij.reference.SoftReference.dereference(previousContentRef);",
      "right" : "FileContentImpl previousContent = com.intellij.reference.SoftReference.dereference(previousContentRef);",
      "info" : "VariableDeclarationStatement[56137-56240]:VariableDeclarationStatement[56137-56240]"
    }, {
      "left" : "final FileContentImpl newFc;",
      "right" : "final FileContentImpl newFc;",
      "info" : "VariableDeclarationStatement[56249-56277]:VariableDeclarationStatement[56249-56277]"
    }, {
      "left" : "if (previousContent != null && previousContent.getStamp() == currentDocStamp)",
      "right" : "if (previousContent != null && previousContent.getStamp() == currentDocStamp)",
      "info" : "IfStatement[56286-56625]:IfStatement[56286-56625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56364-56410]:Block[56364-56410]"
    }, {
      "left" : "newFc = previousContent;",
      "right" : "newFc = previousContent;",
      "info" : "ExpressionStatement[56376-56400]:ExpressionStatement[56376-56400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56424-56625]:Block[56424-56625]"
    }, {
      "left" : "newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp);",
      "right" : "newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp);",
      "info" : "ExpressionStatement[56436-56521]:ExpressionStatement[56436-56521]"
    }, {
      "left" : "document.putUserData(ourFileContentKey, new WeakReference<FileContentImpl>(newFc));",
      "right" : "document.putUserData(ourFileContentKey, new WeakReference<FileContentImpl>(newFc));",
      "info" : "ExpressionStatement[56532-56615]:ExpressionStatement[56532-56615]"
    }, {
      "left" : "initFileContent(newFc, project, dominantContentFile);",
      "right" : "initFileContent(newFc, project, dominantContentFile);",
      "info" : "ExpressionStatement[56635-56688]:ExpressionStatement[56635-56688]"
    }, {
      "left" : "if (content instanceof AuthenticContent)",
      "right" : "if (content instanceof AuthenticContent)",
      "info" : "IfStatement[56698-56923]:IfStatement[56698-56923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56739-56923]:Block[56739-56923]"
    }, {
      "left" : "newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER,\n                            EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document));",
      "right" : "newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER,\n                            EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document));",
      "info" : "ExpressionStatement[56751-56913]:ExpressionStatement[56751-56913]"
    }, {
      "left" : "final int inputId = Math.abs(getFileId(vFile));",
      "right" : "final int inputId = Math.abs(getFileId(vFile));",
      "info" : "VariableDeclarationStatement[56933-56980]:VariableDeclarationStatement[56933-56980]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[56989-57159]:TryStatement[56989-57159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56993-57075]:Block[56993-57075]"
    }, {
      "left" : "getIndex(requestedIndexId).update(inputId, newFc).compute();",
      "right" : "getIndex(requestedIndexId).update(inputId, newFc).compute();",
      "info" : "ExpressionStatement[57005-57065]:ExpressionStatement[57005-57065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57092-57159]:Block[57092-57159]"
    }, {
      "left" : "cleanFileContent(newFc, dominantContentFile);",
      "right" : "cleanFileContent(newFc, dominantContentFile);",
      "info" : "ExpressionStatement[57104-57149]:ExpressionStatement[57104-57149]"
    }, {
      "left" : "long previousState = myLastIndexedDocStamps.set(document, requestedIndexId, currentDocStamp);",
      "right" : "long previousState = myLastIndexedDocStamps.set(document, requestedIndexId, currentDocStamp);",
      "info" : "VariableDeclarationStatement[57175-57268]:VariableDeclarationStatement[57175-57268]"
    }, {
      "left" : "assert previousState == previousDocStamp;",
      "right" : "assert previousState == previousDocStamp;",
      "info" : "AssertStatement[57275-57316]:AssertStatement[57275-57316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57335-57394]:Block[57335-57394]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(vFile, null);",
      "right" : "myFileTypeManager.cacheFileType(vFile, null);",
      "info" : "ExpressionStatement[57343-57388]:ExpressionStatement[57343-57388]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57399-57411]:ReturnStatement[57399-57411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57793-58420]:Block[57793-58420]"
    }, {
      "left" : "StorageGuard.StorageModeExitHandler storageModeExitHandler = myStorageLock.enter(enabled);",
      "right" : "StorageGuard.StorageModeExitHandler storageModeExitHandler = myStorageLock.enter(enabled);",
      "info" : "VariableDeclarationStatement[57799-57889]:VariableDeclarationStatement[57799-57889]"
    }, {
      "left" : "if (myPreviousDataBufferingState != enabled)",
      "right" : "if (myPreviousDataBufferingState != enabled)",
      "info" : "IfStatement[57895-58381]:IfStatement[57895-58381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57940-58381]:Block[57940-58381]"
    }, {
      "left" : "synchronized (myBufferingStateUpdateLock) {\n        if (myPreviousDataBufferingState != enabled) {\n          for (ID<?, ?> indexId : myIndices.keySet()) {\n            final MapReduceIndex index = (MapReduceIndex)getIndex(indexId);\n            assert index != null;\n            ((MemoryIndexStorage)index.getStorage()).setBufferingEnabled(enabled);\n          }\n          myPreviousDataBufferingState = enabled;\n        }\n      }",
      "right" : "synchronized (myBufferingStateUpdateLock) {\n        if (myPreviousDataBufferingState != enabled) {\n          for (ID<?, ?> indexId : myIndices.keySet()) {\n            final MapReduceIndex index = (MapReduceIndex)getIndex(indexId);\n            assert index != null;\n            ((MemoryIndexStorage)index.getStorage()).setBufferingEnabled(enabled);\n          }\n          myPreviousDataBufferingState = enabled;\n        }\n      }",
      "info" : "SynchronizedStatement[57948-58375]:SynchronizedStatement[57948-58375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57990-58375]:Block[57990-58375]"
    }, {
      "left" : "if (myPreviousDataBufferingState != enabled)",
      "right" : "if (myPreviousDataBufferingState != enabled)",
      "info" : "IfStatement[58000-58367]:IfStatement[58000-58367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58045-58367]:Block[58045-58367]"
    }, {
      "left" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "right" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "info" : "EnhancedForStatement[58057-58307]:EnhancedForStatement[58057-58307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58101-58307]:Block[58101-58307]"
    }, {
      "left" : "final MapReduceIndex index = (MapReduceIndex)getIndex(indexId);",
      "right" : "final MapReduceIndex index = (MapReduceIndex)getIndex(indexId);",
      "info" : "VariableDeclarationStatement[58115-58178]:VariableDeclarationStatement[58115-58178]"
    }, {
      "left" : "assert index != null;",
      "right" : "assert index != null;",
      "info" : "AssertStatement[58191-58212]:AssertStatement[58191-58212]"
    }, {
      "left" : "((MemoryIndexStorage)index.getStorage()).setBufferingEnabled(enabled);",
      "right" : "((MemoryIndexStorage)index.getStorage()).setBufferingEnabled(enabled);",
      "info" : "ExpressionStatement[58225-58295]:ExpressionStatement[58225-58295]"
    }, {
      "left" : "myPreviousDataBufferingState = enabled;",
      "right" : "myPreviousDataBufferingState = enabled;",
      "info" : "ExpressionStatement[58318-58357]:ExpressionStatement[58318-58357]"
    }, {
      "left" : "return storageModeExitHandler;",
      "right" : "return storageModeExitHandler;",
      "info" : "ReturnStatement[58386-58416]:ReturnStatement[58386-58416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58460-58939]:Block[58460-58939]"
    }, {
      "left" : "myLastIndexedDocStamps.clear();",
      "right" : "myLastIndexedDocStamps.clear();",
      "info" : "ExpressionStatement[58466-58497]:ExpressionStatement[58466-58497]"
    }, {
      "left" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "right" : "for (ID<?, ?> indexId : myIndices.keySet())",
      "info" : "EnhancedForStatement[58502-58935]:EnhancedForStatement[58502-58935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58546-58935]:Block[58546-58935]"
    }, {
      "left" : "final MapReduceIndex index = (MapReduceIndex)getIndex(indexId);",
      "right" : "final MapReduceIndex index = (MapReduceIndex)getIndex(indexId);",
      "info" : "VariableDeclarationStatement[58554-58617]:VariableDeclarationStatement[58554-58617]"
    }, {
      "left" : "assert index != null;",
      "right" : "assert index != null;",
      "info" : "AssertStatement[58624-58645]:AssertStatement[58624-58645]"
    }, {
      "left" : "final MemoryIndexStorage memStorage = (MemoryIndexStorage)index.getStorage();",
      "right" : "final MemoryIndexStorage memStorage = (MemoryIndexStorage)index.getStorage();",
      "info" : "VariableDeclarationStatement[58652-58729]:VariableDeclarationStatement[58652-58729]"
    }, {
      "left" : "index.getWriteLock().lock();",
      "right" : "index.getWriteLock().lock();",
      "info" : "ExpressionStatement[58736-58764]:ExpressionStatement[58736-58764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[58771-58884]:TryStatement[58771-58884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58775-58821]:Block[58775-58821]"
    }, {
      "left" : "memStorage.clearMemoryMap();",
      "right" : "memStorage.clearMemoryMap();",
      "info" : "ExpressionStatement[58785-58813]:ExpressionStatement[58785-58813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58836-58884]:Block[58836-58884]"
    }, {
      "left" : "index.getWriteLock().unlock();",
      "right" : "index.getWriteLock().unlock();",
      "info" : "ExpressionStatement[58846-58876]:ExpressionStatement[58846-58876]"
    }, {
      "left" : "memStorage.fireMemoryStorageCleared();",
      "right" : "memStorage.fireMemoryStorageCleared();",
      "info" : "ExpressionStatement[58891-58929]:ExpressionStatement[58891-58929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58982-59278]:Block[58982-59278]"
    }, {
      "left" : "final Set<String> indicesToDrop = readRegisteredIndexNames();",
      "right" : "final Set<String> indicesToDrop = readRegisteredIndexNames();",
      "info" : "VariableDeclarationStatement[58988-59049]:VariableDeclarationStatement[58988-59049]"
    }, {
      "left" : "for (ID<?, ?> key : myIndices.keySet())",
      "right" : "for (ID<?, ?> key : myIndices.keySet())",
      "info" : "EnhancedForStatement[59054-59145]:EnhancedForStatement[59054-59145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59094-59145]:Block[59094-59145]"
    }, {
      "left" : "indicesToDrop.remove(key.toString());",
      "right" : "indicesToDrop.remove(key.toString());",
      "info" : "ExpressionStatement[59102-59139]:ExpressionStatement[59102-59139]"
    }, {
      "left" : "for (String s : indicesToDrop)",
      "right" : "for (String s : indicesToDrop)",
      "info" : "EnhancedForStatement[59150-59274]:EnhancedForStatement[59150-59274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59181-59274]:Block[59181-59274]"
    }, {
      "left" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getIndexRootDir(ID.create(s)));",
      "right" : "FileUtil.deleteWithRenaming(IndexInfrastructure.getIndexRootDir(ID.create(s)));",
      "info" : "ExpressionStatement[59189-59268]:ExpressionStatement[59189-59268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59372-61278]:Block[59372-61278]"
    }, {
      "left" : "cleanupProcessedFlag();",
      "right" : "cleanupProcessedFlag();",
      "info" : "ExpressionStatement[59378-59401]:ExpressionStatement[59378-59401]"
    }, {
      "left" : "final AtomicInteger status = ourRebuildStatus.get(indexId);",
      "right" : "final AtomicInteger status = ourRebuildStatus.get(indexId);",
      "info" : "VariableDeclarationStatement[59406-59465]:VariableDeclarationStatement[59406-59465]"
    }, {
      "left" : "boolean requiresRebuildWasSet = status.compareAndSet(OK, REQUIRES_REBUILD);",
      "right" : "boolean requiresRebuildWasSet = status.compareAndSet(OK, REQUIRES_REBUILD);",
      "info" : "VariableDeclarationStatement[59470-59545]:VariableDeclarationStatement[59470-59545]"
    }, {
      "left" : "if (requiresRebuildWasSet)",
      "right" : "if (requiresRebuildWasSet)",
      "info" : "IfStatement[59551-61274]:IfStatement[59551-61274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59578-61274]:Block[59578-61274]"
    }, {
      "left" : "String message = \"Rebuild requested for index \" + indexId;",
      "right" : "String message = \"Rebuild requested for index \" + indexId;",
      "info" : "VariableDeclarationStatement[59586-59644]:VariableDeclarationStatement[59586-59644]"
    }, {
      "left" : "Application app = ApplicationManager.getApplication();",
      "right" : "Application app = ApplicationManager.getApplication();",
      "info" : "VariableDeclarationStatement[59651-59705]:VariableDeclarationStatement[59651-59705]"
    }, {
      "left" : "if (app.isUnitTestMode() && app.isReadAccessAllowed() && !app.isDispatchThread())",
      "right" : "if (app.isUnitTestMode() && app.isReadAccessAllowed() && !app.isDispatchThread())",
      "info" : "IfStatement[59712-60105]:IfStatement[59712-60105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59794-60052]:Block[59794-60052]"
    }, {
      "left" : "LOG.error(message, throwable);",
      "right" : "LOG.error(message, throwable);",
      "info" : "ExpressionStatement[60014-60044]:ExpressionStatement[60014-60044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60058-60105]:Block[60058-60105]"
    }, {
      "left" : "LOG.info(message, throwable);",
      "right" : "LOG.info(message, throwable);",
      "info" : "ExpressionStatement[60068-60097]:ExpressionStatement[60068-60097]"
    }, {
      "left" : "cleanupProcessedFlag();",
      "right" : "cleanupProcessedFlag();",
      "info" : "ExpressionStatement[60113-60136]:ExpressionStatement[60113-60136]"
    }, {
      "left" : "advanceIndexVersion(indexId);",
      "right" : "advanceIndexVersion(indexId);",
      "info" : "ExpressionStatement[60144-60173]:ExpressionStatement[60144-60173]"
    }, {
      "left" : "final Runnable rebuildRunnable = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            doClearIndex(indexId);\n            scheduleIndexRebuild(\"checkRebuild\");\n          }\n          catch (StorageException e) {\n            requestRebuild(indexId);\n            LOG.info(e);\n          }\n          finally {\n            status.compareAndSet(REQUIRES_REBUILD, OK);\n          }\n        }\n      };",
      "right" : "final Runnable rebuildRunnable = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            doClearIndex(indexId);\n            scheduleIndexRebuild(\"checkRebuild\");\n          }\n          catch (StorageException e) {\n            requestRebuild(indexId);\n            LOG.info(e);\n          }\n          finally {\n            status.compareAndSet(REQUIRES_REBUILD, OK);\n          }\n        }\n      };",
      "info" : "VariableDeclarationStatement[60181-60609]:VariableDeclarationStatement[60181-60609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60275-60600]:Block[60275-60600]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[60287-60590]:TryStatement[60287-60590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60291-60389]:Block[60291-60389]"
    }, {
      "left" : "doClearIndex(indexId);",
      "right" : "doClearIndex(indexId);",
      "info" : "ExpressionStatement[60305-60327]:ExpressionStatement[60305-60327]"
    }, {
      "left" : "scheduleIndexRebuild(\"checkRebuild\");",
      "right" : "scheduleIndexRebuild(\"checkRebuild\");",
      "info" : "ExpressionStatement[60340-60377]:ExpressionStatement[60340-60377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60427-60502]:Block[60427-60502]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[60441-60465]:ExpressionStatement[60441-60465]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[60478-60490]:ExpressionStatement[60478-60490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60521-60590]:Block[60521-60590]"
    }, {
      "left" : "status.compareAndSet(REQUIRES_REBUILD, OK);",
      "right" : "status.compareAndSet(REQUIRES_REBUILD, OK);",
      "info" : "ExpressionStatement[60535-60578]:ExpressionStatement[60535-60578]"
    }, {
      "left" : "if (myIsUnitTestMode)",
      "right" : "if (myIsUnitTestMode)",
      "info" : "IfStatement[60617-61268]:IfStatement[60617-61268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60639-60679]:Block[60639-60679]"
    }, {
      "left" : "rebuildRunnable.run();",
      "right" : "rebuildRunnable.run();",
      "info" : "ExpressionStatement[60649-60671]:ExpressionStatement[60649-60671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60691-61268]:Block[60691-61268]"
    }, {
      "left" : "ApplicationManager.getApplication().invokeLater(new Runnable() {\n          @Override\n          public void run() {\n            new Task.Modal(null, \"Updating index\", false) {\n              @Override\n              public void run(@NotNull final ProgressIndicator indicator) {\n                indicator.setIndeterminate(true);\n                rebuildRunnable.run();\n              }\n            }.queue();\n          }\n        }, ModalityState.NON_MODAL);",
      "right" : "ApplicationManager.getApplication().invokeLater(new Runnable() {\n          @Override\n          public void run() {\n            new Task.Modal(null, \"Updating index\", false) {\n              @Override\n              public void run(@NotNull final ProgressIndicator indicator) {\n                indicator.setIndeterminate(true);\n                rebuildRunnable.run();\n              }\n            }.queue();\n          }\n        }, ModalityState.NON_MODAL);",
      "info" : "ExpressionStatement[60809-61260]:ExpressionStatement[60809-61260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60922-61223]:Block[60922-61223]"
    }, {
      "left" : "new Task.Modal(null, \"Updating index\", false) {\n              @Override\n              public void run(@NotNull final ProgressIndicator indicator) {\n                indicator.setIndeterminate(true);\n                rebuildRunnable.run();\n              }\n            }.queue();",
      "right" : "new Task.Modal(null, \"Updating index\", false) {\n              @Override\n              public void run(@NotNull final ProgressIndicator indicator) {\n                indicator.setIndeterminate(true);\n                rebuildRunnable.run();\n              }\n            }.queue();",
      "info" : "ExpressionStatement[60936-61211]:ExpressionStatement[60936-61211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61082-61188]:Block[61082-61188]"
    }, {
      "left" : "indicator.setIndeterminate(true);",
      "right" : "indicator.setIndeterminate(true);",
      "info" : "ExpressionStatement[61100-61133]:ExpressionStatement[61100-61133]"
    }, {
      "left" : "rebuildRunnable.run();",
      "right" : "rebuildRunnable.run();",
      "info" : "ExpressionStatement[61150-61172]:ExpressionStatement[61150-61172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61358-61622]:Block[61358-61622]"
    }, {
      "left" : "final Pair<UpdatableIndex<?, ?, FileContent>, InputFilter> pair = myIndices.get(indexId);",
      "right" : "final Pair<UpdatableIndex<?, ?, FileContent>, InputFilter> pair = myIndices.get(indexId);",
      "info" : "VariableDeclarationStatement[61364-61453]:VariableDeclarationStatement[61364-61453]"
    }, {
      "left" : "assert pair != null : \"Index data is absent for index \" + indexId;",
      "right" : "assert pair != null : \"Index data is absent for index \" + indexId;",
      "info" : "AssertStatement[61459-61525]:AssertStatement[61459-61525]"
    }, {
      "left" : "return (UpdatableIndex<K, V, FileContent>)pair.getFirst();",
      "right" : "return (UpdatableIndex<K, V, FileContent>)pair.getFirst();",
      "info" : "ReturnStatement[61560-61618]:ReturnStatement[61560-61618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61688-61889]:Block[61688-61889]"
    }, {
      "left" : "final Pair<UpdatableIndex<?, ?, FileContent>, InputFilter> pair = myIndices.get(indexId);",
      "right" : "final Pair<UpdatableIndex<?, ?, FileContent>, InputFilter> pair = myIndices.get(indexId);",
      "info" : "VariableDeclarationStatement[61694-61783]:VariableDeclarationStatement[61694-61783]"
    }, {
      "left" : "assert pair != null : \"Index data is absent for index \" + indexId;",
      "right" : "assert pair != null : \"Index data is absent for index \" + indexId;",
      "info" : "AssertStatement[61789-61855]:AssertStatement[61789-61855]"
    }, {
      "left" : "return pair.getSecond();",
      "right" : "return pair.getSecond();",
      "info" : "ReturnStatement[61861-61885]:ReturnStatement[61861-61885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61938-62013]:Block[61938-62013]"
    }, {
      "left" : "return myChangedFilesCollector.getNumberOfPendingInvalidations();",
      "right" : "return myChangedFilesCollector.getNumberOfPendingInvalidations();",
      "info" : "ReturnStatement[61944-62009]:ReturnStatement[61944-62009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62050-62120]:Block[62050-62120]"
    }, {
      "left" : "return myChangedFilesCollector.getAllFilesToUpdate().size();",
      "right" : "return myChangedFilesCollector.getAllFilesToUpdate().size();",
      "info" : "ReturnStatement[62056-62116]:ReturnStatement[62056-62116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62206-62787]:Block[62206-62787]"
    }, {
      "left" : "return ContainerUtil.findAll(myChangedFilesCollector.getAllFilesToUpdate(), new Condition<VirtualFile>() {\n      @Override\n      public boolean value(VirtualFile virtualFile) {\n        for (IndexableFileSet set : myIndexableSets) {\n          final Project proj = myIndexableSetToProjectMap.get(set);\n          if (proj != null && !proj.equals(project)) {\n            continue; // skip this set as associated with a different project\n          }\n          if (set.isInSet(virtualFile)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    });",
      "right" : "return ContainerUtil.findAll(myChangedFilesCollector.getAllFilesToUpdate(), new Condition<VirtualFile>() {\n      @Override\n      public boolean value(VirtualFile virtualFile) {\n        for (IndexableFileSet set : myIndexableSets) {\n          final Project proj = myIndexableSetToProjectMap.get(set);\n          if (proj != null && !proj.equals(project)) {\n            continue; // skip this set as associated with a different project\n          }\n          if (set.isInSet(virtualFile)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    });",
      "info" : "ReturnStatement[62212-62783]:ReturnStatement[62212-62783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62387-62775]:Block[62387-62775]"
    }, {
      "left" : "for (IndexableFileSet set : myIndexableSets)",
      "right" : "for (IndexableFileSet set : myIndexableSets)",
      "info" : "EnhancedForStatement[62397-62745]:EnhancedForStatement[62397-62745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62442-62745]:Block[62442-62745]"
    }, {
      "left" : "final Project proj = myIndexableSetToProjectMap.get(set);",
      "right" : "final Project proj = myIndexableSetToProjectMap.get(set);",
      "info" : "VariableDeclarationStatement[62454-62511]:VariableDeclarationStatement[62454-62511]"
    }, {
      "left" : "if (proj != null && !proj.equals(project))",
      "right" : "if (proj != null && !proj.equals(project))",
      "info" : "IfStatement[62522-62656]:IfStatement[62522-62656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62565-62656]:Block[62565-62656]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[62579-62588]:ContinueStatement[62579-62588]"
    }, {
      "left" : "if (set.isInSet(virtualFile))",
      "right" : "if (set.isInSet(virtualFile))",
      "info" : "IfStatement[62667-62735]:IfStatement[62667-62735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62697-62735]:Block[62697-62735]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62711-62723]:ReturnStatement[62711-62723]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62754-62767]:ReturnStatement[62754-62767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62839-62912]:Block[62839-62912]"
    }, {
      "left" : "return !myChangedFilesCollector.myFilesToUpdate.contains(file);",
      "right" : "return !myChangedFilesCollector.myFilesToUpdate.contains(file);",
      "info" : "ReturnStatement[62845-62908]:ReturnStatement[62845-62908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63032-63251]:Block[63032-63251]"
    }, {
      "left" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "right" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "info" : "ExpressionStatement[63038-63103]:ExpressionStatement[63038-63103]"
    }, {
      "left" : "myChangedFilesCollector.processFileImpl(project, fileContent);",
      "right" : "myChangedFilesCollector.processFileImpl(project, fileContent);",
      "info" : "ExpressionStatement[63108-63170]:ExpressionStatement[63108-63170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63365-63920]:Block[63365-63920]"
    }, {
      "left" : "VirtualFile file = content.getVirtualFile();",
      "right" : "VirtualFile file = content.getVirtualFile();",
      "info" : "VariableDeclarationStatement[63371-63415]:VariableDeclarationStatement[63371-63415]"
    }, {
      "left" : "doIndexFileContent(project, content);",
      "right" : "doIndexFileContent(project, content);",
      "info" : "ExpressionStatement[63821-63858]:ExpressionStatement[63821-63858]"
    }, {
      "left" : "myChangedFilesCollector.myFilesToUpdate.remove(file);",
      "right" : "myChangedFilesCollector.myFilesToUpdate.remove(file);",
      "info" : "ExpressionStatement[63863-63916]:ExpressionStatement[63863-63916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64037-66331]:Block[64037-66331]"
    }, {
      "left" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "right" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "info" : "ExpressionStatement[64043-64108]:ExpressionStatement[64043-64108]"
    }, {
      "left" : "final VirtualFile file = content.getVirtualFile();",
      "right" : "final VirtualFile file = content.getVirtualFile();",
      "info" : "VariableDeclarationStatement[64113-64163]:VariableDeclarationStatement[64113-64163]"
    }, {
      "left" : "FileType fileType = file.getFileType();",
      "right" : "FileType fileType = file.getFileType();",
      "info" : "VariableDeclarationStatement[64169-64208]:VariableDeclarationStatement[64169-64208]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(file, fileType);",
      "right" : "myFileTypeManager.cacheFileType(file, fileType);",
      "info" : "ExpressionStatement[64213-64261]:ExpressionStatement[64213-64261]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[64267-66327]:TryStatement[64267-66327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64271-66256]:Block[64271-66256]"
    }, {
      "left" : "PsiFile psiFile = null;",
      "right" : "PsiFile psiFile = null;",
      "info" : "VariableDeclarationStatement[64279-64302]:VariableDeclarationStatement[64279-64302]"
    }, {
      "left" : "FileContentImpl fc = null;",
      "right" : "FileContentImpl fc = null;",
      "info" : "VariableDeclarationStatement[64309-64335]:VariableDeclarationStatement[64309-64335]"
    }, {
      "left" : "int inputId = -1;",
      "right" : "int inputId = -1;",
      "info" : "VariableDeclarationStatement[64342-64359]:VariableDeclarationStatement[64342-64359]"
    }, {
      "left" : "final List<ID<?, ?>> affectedIndexCandidates = getAffectedIndexCandidates(file);",
      "right" : "final List<ID<?, ?>> affectedIndexCandidates = getAffectedIndexCandidates(file);",
      "info" : "VariableDeclarationStatement[64367-64447]:VariableDeclarationStatement[64367-64447]"
    }, {
      "left" : "for (int i = 0, size = affectedIndexCandidates.size(); i < size; ++i)",
      "right" : "for (int i = 0, size = affectedIndexCandidates.size(); i < size; ++i)",
      "info" : "ForStatement[64503-66150]:ForStatement[64503-66150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64573-66150]:Block[64573-66150]"
    }, {
      "left" : "final ID<?, ?> indexId = affectedIndexCandidates.get(i);",
      "right" : "final ID<?, ?> indexId = affectedIndexCandidates.get(i);",
      "info" : "VariableDeclarationStatement[64583-64639]:VariableDeclarationStatement[64583-64639]"
    }, {
      "left" : "if (shouldIndexFile(file, indexId))",
      "right" : "if (shouldIndexFile(file, indexId))",
      "info" : "IfStatement[64648-66142]:IfStatement[64648-66142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64684-66142]:Block[64684-66142]"
    }, {
      "left" : "if (fc == null)",
      "right" : "if (fc == null)",
      "info" : "IfStatement[64696-65769]:IfStatement[64696-65769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64712-65769]:Block[64712-65769]"
    }, {
      "left" : "if (project == null)",
      "right" : "if (project == null)",
      "info" : "IfStatement[64726-64825]:IfStatement[64726-64825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64747-64825]:Block[64747-64825]"
    }, {
      "left" : "project = ProjectUtil.guessProjectForFile(file);",
      "right" : "project = ProjectUtil.guessProjectForFile(file);",
      "info" : "ExpressionStatement[64763-64811]:ExpressionStatement[64763-64811]"
    }, {
      "left" : "byte[] currentBytes;",
      "right" : "byte[] currentBytes;",
      "info" : "VariableDeclarationStatement[64839-64859]:VariableDeclarationStatement[64839-64859]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[64872-65047]:TryStatement[64872-65047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64876-64940]:Block[64876-64940]"
    }, {
      "left" : "currentBytes = content.getBytes();",
      "right" : "currentBytes = content.getBytes();",
      "info" : "ExpressionStatement[64892-64926]:ExpressionStatement[64892-64926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64975-65047]:Block[64975-65047]"
    }, {
      "left" : "currentBytes = ArrayUtil.EMPTY_BYTE_ARRAY;",
      "right" : "currentBytes = ArrayUtil.EMPTY_BYTE_ARRAY;",
      "info" : "ExpressionStatement[64991-65033]:ExpressionStatement[64991-65033]"
    }, {
      "left" : "fc = new FileContentImpl(file, currentBytes);",
      "right" : "fc = new FileContentImpl(file, currentBytes);",
      "info" : "ExpressionStatement[65060-65105]:ExpressionStatement[65060-65105]"
    }, {
      "left" : "if (!fileType.isBinary() && IdIndex.ourSnapshotMappingsEnabled)",
      "right" : "if (!fileType.isBinary() && IdIndex.ourSnapshotMappingsEnabled)",
      "info" : "IfStatement[65119-65586]:IfStatement[65119-65586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65183-65586]:Block[65183-65586]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65199-65572]:TryStatement[65199-65572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65203-65502]:Block[65203-65502]"
    }, {
      "left" : "byte[] hash = ContentHashesSupport.calcContentHashWithFileType(\n                  currentBytes,\n                  fc.getCharset(),\n                  SubstitutedFileType.substituteFileType(file, fileType, project)\n                );",
      "right" : "byte[] hash = ContentHashesSupport.calcContentHashWithFileType(\n                  currentBytes,\n                  fc.getCharset(),\n                  SubstitutedFileType.substituteFileType(file, fileType, project)\n                );",
      "info" : "VariableDeclarationStatement[65221-65452]:VariableDeclarationStatement[65221-65452]"
    }, {
      "left" : "fc.setHash(hash);",
      "right" : "fc.setHash(hash);",
      "info" : "ExpressionStatement[65469-65486]:ExpressionStatement[65469-65486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65525-65572]:Block[65525-65572]"
    }, {
      "left" : "LOG.error(e);",
      "right" : "LOG.error(e);",
      "info" : "ExpressionStatement[65543-65556]:ExpressionStatement[65543-65556]"
    }, {
      "left" : "psiFile = content.getUserData(IndexingDataKeys.PSI_FILE);",
      "right" : "psiFile = content.getUserData(IndexingDataKeys.PSI_FILE);",
      "info" : "ExpressionStatement[65600-65657]:ExpressionStatement[65600-65657]"
    }, {
      "left" : "initFileContent(fc, project, psiFile);",
      "right" : "initFileContent(fc, project, psiFile);",
      "info" : "ExpressionStatement[65670-65708]:ExpressionStatement[65670-65708]"
    }, {
      "left" : "inputId = Math.abs(getFileId(file));",
      "right" : "inputId = Math.abs(getFileId(file));",
      "info" : "ExpressionStatement[65721-65757]:ExpressionStatement[65721-65757]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65781-66132]:TryStatement[65781-66132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65785-65896]:Block[65785-65896]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[65799-65831]:ExpressionStatement[65799-65831]"
    }, {
      "left" : "updateSingleIndex(indexId, inputId, fc);",
      "right" : "updateSingleIndex(indexId, inputId, fc);",
      "info" : "ExpressionStatement[65844-65884]:ExpressionStatement[65844-65884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65942-66019]:Block[65942-66019]"
    }, {
      "left" : "cleanFileContent(fc, psiFile);",
      "right" : "cleanFileContent(fc, psiFile);",
      "info" : "ExpressionStatement[65956-65986]:ExpressionStatement[65956-65986]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[65999-66007]:ThrowStatement[65999-66007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66057-66132]:Block[66057-66132]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[66071-66095]:ExpressionStatement[66071-66095]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[66108-66120]:ExpressionStatement[66108-66120]"
    }, {
      "left" : "if (psiFile != null)",
      "right" : "if (psiFile != null)",
      "info" : "IfStatement[66158-66250]:IfStatement[66158-66250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66179-66250]:Block[66179-66250]"
    }, {
      "left" : "psiFile.putUserData(PsiFileImpl.BUILDING_STUB, null);",
      "right" : "psiFile.putUserData(PsiFileImpl.BUILDING_STUB, null);",
      "info" : "ExpressionStatement[66189-66242]:ExpressionStatement[66189-66242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66269-66327]:Block[66269-66327]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(file, null);",
      "right" : "myFileTypeManager.cacheFileType(file, null);",
      "info" : "ExpressionStatement[66277-66321]:ExpressionStatement[66277-66321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66424-66513]:Block[66424-66513]"
    }, {
      "left" : "return !isTooLarge(file) && getAffectedIndexCandidates(file).contains(indexId);",
      "right" : "return !isTooLarge(file) && getAffectedIndexCandidates(file).contains(indexId);",
      "info" : "ReturnStatement[66430-66509]:ReturnStatement[66430-66509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66605-67035]:Block[66605-67035]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[66611-66755]:IfStatement[66611-66755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66635-66755]:Block[66635-66755]"
    }, {
      "left" : "return isProjectOrWorkspaceFile(file, null) ?  Collections.<ID<?,?>>emptyList() : myIndicesForDirectories;",
      "right" : "return isProjectOrWorkspaceFile(file, null) ?  Collections.<ID<?,?>>emptyList() : myIndicesForDirectories;",
      "info" : "ReturnStatement[66643-66749]:ReturnStatement[66643-66749]"
    }, {
      "left" : "FileType fileType = file.getFileType();",
      "right" : "FileType fileType = file.getFileType();",
      "info" : "VariableDeclarationStatement[66760-66799]:VariableDeclarationStatement[66760-66799]"
    }, {
      "left" : "if(isProjectOrWorkspaceFile(file, fileType))",
      "right" : "if(isProjectOrWorkspaceFile(file, fileType))",
      "info" : "IfStatement[66804-66880]:IfStatement[66804-66880]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[66849-66880]:ReturnStatement[66849-66880]"
    }, {
      "left" : "List<ID<?, ?>> ids = myFileType2IndicesWithFileTypeInfoMap.get(fileType);",
      "right" : "List<ID<?, ?>> ids = myFileType2IndicesWithFileTypeInfoMap.get(fileType);",
      "info" : "VariableDeclarationStatement[66885-66958]:VariableDeclarationStatement[66885-66958]"
    }, {
      "left" : "if (ids == null)",
      "right" : "if (ids == null)",
      "info" : "IfStatement[66963-67015]:IfStatement[66963-67015]"
    }, {
      "left" : "ids = myIndicesWithoutFileTypeInfo;",
      "right" : "ids = myIndicesWithoutFileTypeInfo;",
      "info" : "ExpressionStatement[66980-67015]:ExpressionStatement[66980-67015]"
    }, {
      "left" : "return ids;",
      "right" : "return ids;",
      "info" : "ReturnStatement[67020-67031]:ReturnStatement[67020-67031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67122-67259]:Block[67122-67259]"
    }, {
      "left" : "if (psiFile != null)",
      "right" : "if (psiFile != null)",
      "info" : "IfStatement[67128-67202]:IfStatement[67128-67202]"
    }, {
      "left" : "psiFile.putUserData(PsiFileImpl.BUILDING_STUB, null);",
      "right" : "psiFile.putUserData(PsiFileImpl.BUILDING_STUB, null);",
      "info" : "ExpressionStatement[67149-67202]:ExpressionStatement[67149-67202]"
    }, {
      "left" : "fc.putUserData(IndexingDataKeys.PSI_FILE, null);",
      "right" : "fc.putUserData(IndexingDataKeys.PSI_FILE, null);",
      "info" : "ExpressionStatement[67207-67255]:ExpressionStatement[67207-67255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67362-67574]:Block[67362-67574]"
    }, {
      "left" : "if (psiFile != null)",
      "right" : "if (psiFile != null)",
      "info" : "IfStatement[67368-67514]:IfStatement[67368-67514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67389-67514]:Block[67389-67514]"
    }, {
      "left" : "psiFile.putUserData(PsiFileImpl.BUILDING_STUB, true);",
      "right" : "psiFile.putUserData(PsiFileImpl.BUILDING_STUB, true);",
      "info" : "ExpressionStatement[67397-67450]:ExpressionStatement[67397-67450]"
    }, {
      "left" : "fc.putUserData(IndexingDataKeys.PSI_FILE, psiFile);",
      "right" : "fc.putUserData(IndexingDataKeys.PSI_FILE, psiFile);",
      "info" : "ExpressionStatement[67457-67508]:ExpressionStatement[67457-67508]"
    }, {
      "left" : "fc.putUserData(IndexingDataKeys.PROJECT, project);",
      "right" : "fc.putUserData(IndexingDataKeys.PROJECT, project);",
      "info" : "ExpressionStatement[67520-67570]:ExpressionStatement[67520-67570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67806-69005]:Block[67806-69005]"
    }, {
      "left" : "if (ourRebuildStatus.get(indexId).get() == REQUIRES_REBUILD && !myIsUnitTestMode)",
      "right" : "if (ourRebuildStatus.get(indexId).get() == REQUIRES_REBUILD && !myIsUnitTestMode)",
      "info" : "IfStatement[67812-67972]:IfStatement[67812-67972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67894-67972]:Block[67894-67972]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[67902-67909]:ReturnStatement[67902-67909]"
    }, {
      "left" : "myLocalModCount++;",
      "right" : "myLocalModCount++;",
      "info" : "ExpressionStatement[67977-67995]:ExpressionStatement[67977-67995]"
    }, {
      "left" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "right" : "final UpdatableIndex<?, ?, FileContent> index = getIndex(indexId);",
      "info" : "VariableDeclarationStatement[68001-68067]:VariableDeclarationStatement[68001-68067]"
    }, {
      "left" : "assert index != null;",
      "right" : "assert index != null;",
      "info" : "AssertStatement[68072-68093]:AssertStatement[68072-68093]"
    }, {
      "left" : "boolean hasContent = currentFC != null;",
      "right" : "boolean hasContent = currentFC != null;",
      "info" : "VariableDeclarationStatement[68099-68138]:VariableDeclarationStatement[68099-68138]"
    }, {
      "left" : "if (hasContent && currentFC.getUserData(ourPhysicalContentKey) == null)",
      "right" : "if (hasContent && currentFC.getUserData(ourPhysicalContentKey) == null)",
      "info" : "IfStatement[68143-68288]:IfStatement[68143-68288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68215-68288]:Block[68215-68288]"
    }, {
      "left" : "currentFC.putUserData(ourPhysicalContentKey, Boolean.TRUE);",
      "right" : "currentFC.putUserData(ourPhysicalContentKey, Boolean.TRUE);",
      "info" : "ExpressionStatement[68223-68282]:ExpressionStatement[68223-68282]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[68294-69001]:TryStatement[68294-69001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68298-68685]:Block[68298-68685]"
    }, {
      "left" : "final Computable<Boolean> update = index.update(inputId, currentFC);",
      "right" : "final Computable<Boolean> update = index.update(inputId, currentFC);",
      "info" : "VariableDeclarationStatement[68550-68618]:VariableDeclarationStatement[68550-68618]"
    }, {
      "left" : "scheduleUpdate(indexId, update, inputId, hasContent);",
      "right" : "scheduleUpdate(indexId, update, inputId, hasContent);",
      "info" : "ExpressionStatement[68626-68679]:ExpressionStatement[68626-68679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68721-69001]:Block[68721-69001]"
    }, {
      "left" : "Throwable causeToRebuildIndex = getCauseToRebuildIndex(exception);",
      "right" : "Throwable causeToRebuildIndex = getCauseToRebuildIndex(exception);",
      "info" : "VariableDeclarationStatement[68729-68795]:VariableDeclarationStatement[68729-68795]"
    }, {
      "left" : "if (causeToRebuildIndex != null)",
      "right" : "if (causeToRebuildIndex != null)",
      "info" : "IfStatement[68802-68972]:IfStatement[68802-68972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68835-68972]:Block[68835-68972]"
    }, {
      "left" : "LOG.error(\"Exception in update single index:\" + exception);",
      "right" : "LOG.error(\"Exception in update single index:\" + exception);",
      "info" : "ExpressionStatement[68845-68904]:ExpressionStatement[68845-68904]"
    }, {
      "left" : "requestRebuild(indexId, exception);",
      "right" : "requestRebuild(indexId, exception);",
      "info" : "ExpressionStatement[68913-68948]:ExpressionStatement[68913-68948]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68957-68964]:ReturnStatement[68957-68964]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[68979-68995]:ThrowStatement[68979-68995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69149-69918]:Block[69149-69918]"
    }, {
      "left" : "if (myNotRequiringContentIndices.contains(indexId) && !Registry.is(\"idea.concurrent.scanning.files.to.index\"))",
      "right" : "if (myNotRequiringContentIndices.contains(indexId) && !Registry.is(\"idea.concurrent.scanning.files.to.index\"))",
      "info" : "IfStatement[69155-69914]:IfStatement[69155-69914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69266-69651]:Block[69266-69651]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.submit(\n        new Computable<Boolean>() {\n          @Override\n          public Boolean compute() {\n            return updateWithBufferingEnabled(update);\n          }\n        },\n        new Runnable() {\n          @Override\n          public void run() {\n            indexedStampUpdate(indexId, inputId, hasContent);\n          }\n        });",
      "right" : "myContentlessIndicesUpdateQueue.submit(\n        new Computable<Boolean>() {\n          @Override\n          public Boolean compute() {\n            return updateWithBufferingEnabled(update);\n          }\n        },\n        new Runnable() {\n          @Override\n          public void run() {\n            indexedStampUpdate(indexId, inputId, hasContent);\n          }\n        });",
      "info" : "ExpressionStatement[69274-69645]:ExpressionStatement[69274-69645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69405-69473]:Block[69405-69473]"
    }, {
      "left" : "return updateWithBufferingEnabled(update);",
      "right" : "return updateWithBufferingEnabled(update);",
      "info" : "ReturnStatement[69419-69461]:ReturnStatement[69419-69461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69558-69633]:Block[69558-69633]"
    }, {
      "left" : "indexedStampUpdate(indexId, inputId, hasContent);",
      "right" : "indexedStampUpdate(indexId, inputId, hasContent);",
      "info" : "ExpressionStatement[69572-69621]:ExpressionStatement[69572-69621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69661-69914]:Block[69661-69914]"
    }, {
      "left" : "if (updateWithBufferingEnabled(update))",
      "right" : "if (updateWithBufferingEnabled(update))",
      "info" : "IfStatement[69669-69908]:IfStatement[69669-69908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69709-69908]:Block[69709-69908]"
    }, {
      "left" : "AccessToken accessToken = ReadAction.start();",
      "right" : "AccessToken accessToken = ReadAction.start();",
      "info" : "VariableDeclarationStatement[69719-69764]:VariableDeclarationStatement[69719-69764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[69773-69900]:TryStatement[69773-69900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69777-69848]:Block[69777-69848]"
    }, {
      "left" : "indexedStampUpdate(indexId, inputId, hasContent);",
      "right" : "indexedStampUpdate(indexId, inputId, hasContent);",
      "info" : "ExpressionStatement[69789-69838]:ExpressionStatement[69789-69838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69857-69900]:Block[69857-69900]"
    }, {
      "left" : "accessToken.finish();",
      "right" : "accessToken.finish();",
      "info" : "ExpressionStatement[69869-69890]:ExpressionStatement[69869-69890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70015-70286]:Block[70015-70286]"
    }, {
      "left" : "if (hasContent)",
      "right" : "if (hasContent)",
      "info" : "IfStatement[70021-70192]:IfStatement[70021-70192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70037-70109]:Block[70037-70109]"
    }, {
      "left" : "IndexingStamp.setFileIndexedStateCurrent(fileId, indexId);",
      "right" : "IndexingStamp.setFileIndexedStateCurrent(fileId, indexId);",
      "info" : "ExpressionStatement[70045-70103]:ExpressionStatement[70045-70103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70119-70192]:Block[70119-70192]"
    }, {
      "left" : "IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);",
      "right" : "IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);",
      "info" : "ExpressionStatement[70127-70186]:ExpressionStatement[70127-70186]"
    }, {
      "left" : "if (myNotRequiringContentIndices.contains(indexId))",
      "right" : "if (myNotRequiringContentIndices.contains(indexId))",
      "info" : "IfStatement[70197-70282]:IfStatement[70197-70282]"
    }, {
      "left" : "IndexingStamp.flushCache(fileId);",
      "right" : "IndexingStamp.flushCache(fileId);",
      "info" : "ExpressionStatement[70249-70282]:ExpressionStatement[70249-70282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70378-70555]:Block[70378-70555]"
    }, {
      "left" : "final StorageGuard.StorageModeExitHandler lock = setDataBufferingEnabled(false);",
      "right" : "final StorageGuard.StorageModeExitHandler lock = setDataBufferingEnabled(false);",
      "info" : "VariableDeclarationStatement[70384-70464]:VariableDeclarationStatement[70384-70464]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[70469-70551]:TryStatement[70469-70551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70473-70511]:Block[70473-70511]"
    }, {
      "left" : "return update.compute();",
      "right" : "return update.compute();",
      "info" : "ReturnStatement[70481-70505]:ReturnStatement[70481-70505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70524-70551]:Block[70524-70551]"
    }, {
      "left" : "lock.leave();",
      "right" : "lock.leave();",
      "info" : "ExpressionStatement[70532-70545]:ExpressionStatement[70532-70545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70626-70691]:Block[70626-70691]"
    }, {
      "left" : "return !myNotRequiringContentIndices.contains(indexId);",
      "right" : "return !myNotRequiringContentIndices.contains(indexId);",
      "info" : "ReturnStatement[70632-70687]:ReturnStatement[70632-70687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70771-70909]:Block[70771-70909]"
    }, {
      "left" : "for (IndexableFileSet set : myIndexableSets)",
      "right" : "for (IndexableFileSet set : myIndexableSets)",
      "info" : "EnhancedForStatement[70777-70888]:EnhancedForStatement[70777-70888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70822-70888]:Block[70822-70888]"
    }, {
      "left" : "if (set.isInSet(file))",
      "right" : "if (set.isInSet(file))",
      "info" : "IfStatement[70830-70882]:IfStatement[70830-70882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70853-70882]:Block[70853-70882]"
    }, {
      "left" : "return set;",
      "right" : "return set;",
      "info" : "ReturnStatement[70863-70874]:ReturnStatement[70863-70874]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[70893-70905]:ReturnStatement[70893-70905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71080-71108]:Block[71080-71108]"
    }, {
      "left" : "mySubj = subj;",
      "right" : "mySubj = subj;",
      "info" : "ExpressionStatement[71088-71102]:ExpressionStatement[71088-71102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71156-71184]:Block[71156-71184]"
    }, {
      "left" : "return mySubj;",
      "right" : "return mySubj;",
      "info" : "ReturnStatement[71164-71178]:ReturnStatement[71164-71178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71374-71405]:Block[71374-71405]"
    }, {
      "left" : "super(indicator);",
      "right" : "super(indicator);",
      "info" : "SuperConstructorInvocation[71382-71399]:SuperConstructorInvocation[71382-71399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71473-71656]:Block[71473-71656]"
    }, {
      "left" : "final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();",
      "right" : "final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();",
      "info" : "VariableDeclarationStatement[71481-71570]:VariableDeclarationStatement[71481-71570]"
    }, {
      "left" : "return indicator != null ? new SilentProgressIndicator(indicator) : null;",
      "right" : "return indicator != null ? new SilentProgressIndicator(indicator) : null;",
      "info" : "ReturnStatement[71577-71650]:ReturnStatement[71577-71650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71709-71716]:Block[71709-71716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71760-71784]:Block[71760-71784]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[71768-71778]:ReturnStatement[71768-71778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71838-71845]:Block[71838-71845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71890-71914]:Block[71890-71914]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[71898-71908]:ReturnStatement[71898-71908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72370-72408]:Block[72370-72408]"
    }, {
      "left" : "markDirty(event, false);",
      "right" : "markDirty(event, false);",
      "info" : "ExpressionStatement[72378-72402]:ExpressionStatement[72378-72402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72491-72529]:Block[72491-72529]"
    }, {
      "left" : "markDirty(event, false);",
      "right" : "markDirty(event, false);",
      "info" : "ExpressionStatement[72499-72523]:ExpressionStatement[72499-72523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72615-72653]:Block[72615-72653]"
    }, {
      "left" : "markDirty(event, false);",
      "right" : "markDirty(event, false);",
      "info" : "ExpressionStatement[72623-72647]:ExpressionStatement[72623-72647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72743-72799]:Block[72743-72799]"
    }, {
      "left" : "invalidateIndices(event.getFile(), false);",
      "right" : "invalidateIndices(event.getFile(), false);",
      "info" : "ExpressionStatement[72751-72793]:ExpressionStatement[72751-72793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72891-72946]:Block[72891-72946]"
    }, {
      "left" : "invalidateIndices(event.getFile(), true);",
      "right" : "invalidateIndices(event.getFile(), true);",
      "info" : "ExpressionStatement[72899-72940]:ExpressionStatement[72899-72940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73033-73070]:Block[73033-73070]"
    }, {
      "left" : "markDirty(event, true);",
      "right" : "markDirty(event, true);",
      "info" : "ExpressionStatement[73041-73064]:ExpressionStatement[73041-73064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73170-73711]:Block[73170-73711]"
    }, {
      "left" : "String propertyName = event.getPropertyName();",
      "right" : "String propertyName = event.getPropertyName();",
      "info" : "VariableDeclarationStatement[73178-73224]:VariableDeclarationStatement[73178-73224]"
    }, {
      "left" : "if (propertyName.equals(VirtualFile.PROP_NAME))",
      "right" : "if (propertyName.equals(VirtualFile.PROP_NAME))",
      "info" : "IfStatement[73232-73705]:IfStatement[73232-73705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73280-73588]:Block[73280-73588]"
    }, {
      "left" : "invalidateIndices(event.getFile(), false);",
      "right" : "invalidateIndices(event.getFile(), false);",
      "info" : "ExpressionStatement[73538-73580]:ExpressionStatement[73538-73580]"
    }, {
      "left" : "if (propertyName.equals(VirtualFile.PROP_ENCODING))",
      "right" : "if (propertyName.equals(VirtualFile.PROP_ENCODING))",
      "info" : "IfStatement[73594-73705]:IfStatement[73594-73705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73646-73705]:Block[73646-73705]"
    }, {
      "left" : "invalidateIndices(event.getFile(), true);",
      "right" : "invalidateIndices(event.getFile(), true);",
      "info" : "ExpressionStatement[73656-73697]:ExpressionStatement[73656-73697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73806-74105]:Block[73806-74105]"
    }, {
      "left" : "String propertyName = event.getPropertyName();",
      "right" : "String propertyName = event.getPropertyName();",
      "info" : "VariableDeclarationStatement[73814-73860]:VariableDeclarationStatement[73814-73860]"
    }, {
      "left" : "if (propertyName.equals(VirtualFile.PROP_NAME))",
      "right" : "if (propertyName.equals(VirtualFile.PROP_NAME))",
      "info" : "IfStatement[73867-74099]:IfStatement[73867-74099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73915-74000]:Block[73915-74000]"
    }, {
      "left" : "markDirty(event, false);",
      "right" : "markDirty(event, false);",
      "info" : "ExpressionStatement[73968-73992]:ExpressionStatement[73968-73992]"
    }, {
      "left" : "if (propertyName.equals(VirtualFile.PROP_ENCODING))",
      "right" : "if (propertyName.equals(VirtualFile.PROP_ENCODING))",
      "info" : "IfStatement[74006-74099]:IfStatement[74006-74099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74058-74099]:Block[74058-74099]"
    }, {
      "left" : "markDirty(event, true);",
      "right" : "markDirty(event, true);",
      "info" : "ExpressionStatement[74068-74091]:ExpressionStatement[74068-74091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74202-77636]:Block[74202-77636]"
    }, {
      "left" : "final VirtualFile eventFile = event.getFile();",
      "right" : "final VirtualFile eventFile = event.getFile();",
      "info" : "VariableDeclarationStatement[74210-74256]:VariableDeclarationStatement[74210-74256]"
    }, {
      "left" : "cleanProcessedFlag(eventFile);",
      "right" : "cleanProcessedFlag(eventFile);",
      "info" : "ExpressionStatement[74263-74293]:ExpressionStatement[74263-74293]"
    }, {
      "left" : "if (!contentChange)",
      "right" : "if (!contentChange)",
      "info" : "IfStatement[74300-74372]:IfStatement[74300-74372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74320-74372]:Block[74320-74372]"
    }, {
      "left" : "myUpdatingFiles.incrementAndGet();",
      "right" : "myUpdatingFiles.incrementAndGet();",
      "info" : "ExpressionStatement[74330-74364]:ExpressionStatement[74330-74364]"
    }, {
      "left" : "iterateIndexableFiles(eventFile, new Processor<VirtualFile>() {\n        @Override\n        public boolean process(@NotNull final VirtualFile file) {\n          // handle 'content-less' indices separately\n          boolean fileIsDirectory = file.isDirectory();\n          if (!contentChange) {\n            FileContent fileContent = null;\n            int inputId = -1;\n            for (ID<?, ?> indexId : fileIsDirectory ? myIndicesForDirectories : myNotRequiringContentIndices) {\n              if (getInputFilter(indexId).acceptInput(file)) {\n                try {\n                  if (fileContent == null) {\n                    fileContent = new FileContentImpl(file);\n                    inputId = Math.abs(getFileId(file));\n                  }\n                  updateSingleIndex(indexId, inputId, fileContent);\n                }\n                catch (StorageException e) {\n                  LOG.info(e);\n                  requestRebuild(indexId);\n                }\n              }\n            }\n          }\n          // For 'normal indices' schedule the file for update and reset stamps for all affected indices (there\n          // can be client that used indices between before and after events, in such case indices are up to date due to force update\n          // with old content)\n          if (!fileIsDirectory) {\n            if (isTooLarge(file)) {\n              // large file might be scheduled for update in before event when its size was not large\n              myChangedFilesCollector.myFilesToUpdate.remove(file);\n            } else {\n              myFileTypeManager.cacheFileType(file, file.getFileType());\n              try {\n                final List<ID<?, ?>> candidates = getAffectedIndexCandidates(file);\n                int fileId = getIdMaskingNonIdBasedFile(file);\n                //noinspection ForLoopReplaceableByForEach\n                boolean scheduleForUpdate = false;\n                boolean resetStamp = false;\n\n                //noinspection ForLoopReplaceableByForEach\n                for (int i = 0, size = candidates.size(); i < size; ++i) {\n                  final ID<?, ?> indexId = candidates.get(i);\n                  if (needsFileContentLoading(indexId) && getInputFilter(indexId).acceptInput(file)) {\n                    if (IndexingStamp.isFileIndexedStateCurrent(fileId, indexId)) {\n                      IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);\n                      resetStamp = true;\n                    }\n                    scheduleForUpdate = true;\n                  }\n                }\n\n                if (scheduleForUpdate) {\n                  if (resetStamp) IndexingStamp.flushCache(file);\n                  scheduleForUpdate(file);\n                }\n\n                if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty()) {\n                  clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);\n                }\n              }\n              finally {\n                myFileTypeManager.cacheFileType(file, null);\n              }\n            }\n          }\n\n          return true;\n        }\n      });",
      "right" : "iterateIndexableFiles(eventFile, new Processor<VirtualFile>() {\n        @Override\n        public boolean process(@NotNull final VirtualFile file) {\n          // handle 'content-less' indices separately\n          boolean fileIsDirectory = file.isDirectory();\n          if (!contentChange) {\n            FileContent fileContent = null;\n            int inputId = -1;\n            for (ID<?, ?> indexId : fileIsDirectory ? myIndicesForDirectories : myNotRequiringContentIndices) {\n              if (getInputFilter(indexId).acceptInput(file)) {\n                try {\n                  if (fileContent == null) {\n                    fileContent = new FileContentImpl(file);\n                    inputId = Math.abs(getFileId(file));\n                  }\n                  updateSingleIndex(indexId, inputId, fileContent);\n                }\n                catch (StorageException e) {\n                  LOG.info(e);\n                  requestRebuild(indexId);\n                }\n              }\n            }\n          }\n          // For 'normal indices' schedule the file for update and reset stamps for all affected indices (there\n          // can be client that used indices between before and after events, in such case indices are up to date due to force update\n          // with old content)\n          if (!fileIsDirectory) {\n            if (isTooLarge(file)) {\n              // large file might be scheduled for update in before event when its size was not large\n              myChangedFilesCollector.myFilesToUpdate.remove(file);\n            } else {\n              myFileTypeManager.cacheFileType(file, file.getFileType());\n              try {\n                final List<ID<?, ?>> candidates = getAffectedIndexCandidates(file);\n                int fileId = getIdMaskingNonIdBasedFile(file);\n                //noinspection ForLoopReplaceableByForEach\n                boolean scheduleForUpdate = false;\n                boolean resetStamp = false;\n\n                //noinspection ForLoopReplaceableByForEach\n                for (int i = 0, size = candidates.size(); i < size; ++i) {\n                  final ID<?, ?> indexId = candidates.get(i);\n                  if (needsFileContentLoading(indexId) && getInputFilter(indexId).acceptInput(file)) {\n                    if (IndexingStamp.isFileIndexedStateCurrent(fileId, indexId)) {\n                      IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);\n                      resetStamp = true;\n                    }\n                    scheduleForUpdate = true;\n                  }\n                }\n\n                if (scheduleForUpdate) {\n                  if (resetStamp) IndexingStamp.flushCache(file);\n                  scheduleForUpdate(file);\n                }\n\n                if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty()) {\n                  clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);\n                }\n              }\n              finally {\n                myFileTypeManager.cacheFileType(file, null);\n              }\n            }\n          }\n\n          return true;\n        }\n      });",
      "info" : "ExpressionStatement[74380-77466]:ExpressionStatement[74380-77466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74526-77456]:Block[74526-77456]"
    }, {
      "left" : "boolean fileIsDirectory = file.isDirectory();",
      "right" : "boolean fileIsDirectory = file.isDirectory();",
      "info" : "VariableDeclarationStatement[74592-74637]:VariableDeclarationStatement[74592-74637]"
    }, {
      "left" : "if (!contentChange)",
      "right" : "if (!contentChange)",
      "info" : "IfStatement[74648-75388]:IfStatement[74648-75388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74668-75388]:Block[74668-75388]"
    }, {
      "left" : "FileContent fileContent = null;",
      "right" : "FileContent fileContent = null;",
      "info" : "VariableDeclarationStatement[74682-74713]:VariableDeclarationStatement[74682-74713]"
    }, {
      "left" : "int inputId = -1;",
      "right" : "int inputId = -1;",
      "info" : "VariableDeclarationStatement[74726-74743]:VariableDeclarationStatement[74726-74743]"
    }, {
      "left" : "for (ID<?, ?> indexId : fileIsDirectory ? myIndicesForDirectories : myNotRequiringContentIndices)",
      "right" : "for (ID<?, ?> indexId : fileIsDirectory ? myIndicesForDirectories : myNotRequiringContentIndices)",
      "info" : "EnhancedForStatement[74756-75376]:EnhancedForStatement[74756-75376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74854-75376]:Block[74854-75376]"
    }, {
      "left" : "if (getInputFilter(indexId).acceptInput(file))",
      "right" : "if (getInputFilter(indexId).acceptInput(file))",
      "info" : "IfStatement[74870-75362]:IfStatement[74870-75362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74917-75362]:Block[74917-75362]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[74935-75346]:TryStatement[74935-75346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74939-75209]:Block[74939-75209]"
    }, {
      "left" : "if (fileContent == null)",
      "right" : "if (fileContent == null)",
      "info" : "IfStatement[74959-75123]:IfStatement[74959-75123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74984-75123]:Block[74984-75123]"
    }, {
      "left" : "fileContent = new FileContentImpl(file);",
      "right" : "fileContent = new FileContentImpl(file);",
      "info" : "ExpressionStatement[75006-75046]:ExpressionStatement[75006-75046]"
    }, {
      "left" : "inputId = Math.abs(getFileId(file));",
      "right" : "inputId = Math.abs(getFileId(file));",
      "info" : "ExpressionStatement[75067-75103]:ExpressionStatement[75067-75103]"
    }, {
      "left" : "updateSingleIndex(indexId, inputId, fileContent);",
      "right" : "updateSingleIndex(indexId, inputId, fileContent);",
      "info" : "ExpressionStatement[75142-75191]:ExpressionStatement[75142-75191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75253-75346]:Block[75253-75346]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[75273-75285]:ExpressionStatement[75273-75285]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[75304-75328]:ExpressionStatement[75304-75328]"
    }, {
      "left" : "if (!fileIsDirectory)",
      "right" : "if (!fileIsDirectory)",
      "info" : "IfStatement[75676-77422]:IfStatement[75676-77422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75698-77422]:Block[75698-77422]"
    }, {
      "left" : "if (isTooLarge(file))",
      "right" : "if (isTooLarge(file))",
      "info" : "IfStatement[75712-77410]:IfStatement[75712-77410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75734-75919]:Block[75734-75919]"
    }, {
      "left" : "myChangedFilesCollector.myFilesToUpdate.remove(file);",
      "right" : "myChangedFilesCollector.myFilesToUpdate.remove(file);",
      "info" : "ExpressionStatement[75852-75905]:ExpressionStatement[75852-75905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75925-77410]:Block[75925-77410]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(file, file.getFileType());",
      "right" : "myFileTypeManager.cacheFileType(file, file.getFileType());",
      "info" : "ExpressionStatement[75941-75999]:ExpressionStatement[75941-75999]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[76014-77396]:TryStatement[76014-77396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76018-77295]:Block[76018-77295]"
    }, {
      "left" : "final List<ID<?, ?>> candidates = getAffectedIndexCandidates(file);",
      "right" : "final List<ID<?, ?>> candidates = getAffectedIndexCandidates(file);",
      "info" : "VariableDeclarationStatement[76036-76103]:VariableDeclarationStatement[76036-76103]"
    }, {
      "left" : "int fileId = getIdMaskingNonIdBasedFile(file);",
      "right" : "int fileId = getIdMaskingNonIdBasedFile(file);",
      "info" : "VariableDeclarationStatement[76120-76166]:VariableDeclarationStatement[76120-76166]"
    }, {
      "left" : "boolean scheduleForUpdate = false;",
      "right" : "boolean scheduleForUpdate = false;",
      "info" : "VariableDeclarationStatement[76242-76276]:VariableDeclarationStatement[76242-76276]"
    }, {
      "left" : "boolean resetStamp = false;",
      "right" : "boolean resetStamp = false;",
      "info" : "VariableDeclarationStatement[76293-76320]:VariableDeclarationStatement[76293-76320]"
    }, {
      "left" : "for (int i = 0, size = candidates.size(); i < size; ++i)",
      "right" : "for (int i = 0, size = candidates.size(); i < size; ++i)",
      "info" : "ForStatement[76397-76933]:ForStatement[76397-76933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76454-76933]:Block[76454-76933]"
    }, {
      "left" : "final ID<?, ?> indexId = candidates.get(i);",
      "right" : "final ID<?, ?> indexId = candidates.get(i);",
      "info" : "VariableDeclarationStatement[76474-76517]:VariableDeclarationStatement[76474-76517]"
    }, {
      "left" : "if (needsFileContentLoading(indexId) && getInputFilter(indexId).acceptInput(file))",
      "right" : "if (needsFileContentLoading(indexId) && getInputFilter(indexId).acceptInput(file))",
      "info" : "IfStatement[76536-76915]:IfStatement[76536-76915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76619-76915]:Block[76619-76915]"
    }, {
      "left" : "if (IndexingStamp.isFileIndexedStateCurrent(fileId, indexId))",
      "right" : "if (IndexingStamp.isFileIndexedStateCurrent(fileId, indexId))",
      "info" : "IfStatement[76641-76849]:IfStatement[76641-76849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76703-76849]:Block[76703-76849]"
    }, {
      "left" : "IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);",
      "right" : "IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);",
      "info" : "ExpressionStatement[76727-76786]:ExpressionStatement[76727-76786]"
    }, {
      "left" : "resetStamp = true;",
      "right" : "resetStamp = true;",
      "info" : "ExpressionStatement[76809-76827]:ExpressionStatement[76809-76827]"
    }, {
      "left" : "scheduleForUpdate = true;",
      "right" : "scheduleForUpdate = true;",
      "info" : "ExpressionStatement[76870-76895]:ExpressionStatement[76870-76895]"
    }, {
      "left" : "if (scheduleForUpdate)",
      "right" : "if (scheduleForUpdate)",
      "info" : "IfStatement[76951-77102]:IfStatement[76951-77102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76974-77102]:Block[76974-77102]"
    }, {
      "left" : "if (resetStamp)",
      "right" : "if (resetStamp)",
      "info" : "IfStatement[76994-77041]:IfStatement[76994-77041]"
    }, {
      "left" : "IndexingStamp.flushCache(file);",
      "right" : "IndexingStamp.flushCache(file);",
      "info" : "ExpressionStatement[77010-77041]:ExpressionStatement[77010-77041]"
    }, {
      "left" : "scheduleForUpdate(file);",
      "right" : "scheduleForUpdate(file);",
      "info" : "ExpressionStatement[77060-77084]:ExpressionStatement[77060-77084]"
    }, {
      "left" : "if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty())",
      "right" : "if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty())",
      "info" : "IfStatement[77120-77279]:IfStatement[77120-77279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77185-77279]:Block[77185-77279]"
    }, {
      "left" : "clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);",
      "right" : "clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);",
      "info" : "ExpressionStatement[77205-77261]:ExpressionStatement[77205-77261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77318-77396]:Block[77318-77396]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(file, null);",
      "right" : "myFileTypeManager.cacheFileType(file, null);",
      "info" : "ExpressionStatement[77336-77380]:ExpressionStatement[77336-77380]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[77434-77446]:ReturnStatement[77434-77446]"
    }, {
      "left" : "IndexingStamp.flushCaches();",
      "right" : "IndexingStamp.flushCaches();",
      "info" : "ExpressionStatement[77473-77501]:ExpressionStatement[77473-77501]"
    }, {
      "left" : "if (!contentChange)",
      "right" : "if (!contentChange)",
      "info" : "IfStatement[77508-77630]:IfStatement[77508-77630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77528-77630]:Block[77528-77630]"
    }, {
      "left" : "if (myUpdatingFiles.decrementAndGet() == 0)",
      "right" : "if (myUpdatingFiles.decrementAndGet() == 0)",
      "info" : "IfStatement[77538-77622]:IfStatement[77538-77622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77582-77622]:Block[77582-77622]"
    }, {
      "left" : "++myFilesModCount;",
      "right" : "++myFilesModCount;",
      "info" : "ExpressionStatement[77594-77612]:ExpressionStatement[77594-77612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77691-77731]:Block[77691-77731]"
    }, {
      "left" : "myFilesToUpdate.add(file);",
      "right" : "myFilesToUpdate.add(file);",
      "info" : "ExpressionStatement[77699-77725]:ExpressionStatement[77699-77725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77831-78651]:Block[77831-78651]"
    }, {
      "left" : "VfsUtilCore.visitChildrenRecursively(file, new VirtualFileVisitor() {\n        @Override\n        public boolean visitFile(@NotNull VirtualFile file) {\n          if (isUnderConfigOrSystem(file)) {\n            return false;\n          }\n          if (file.isDirectory()) {\n            invalidateIndicesForFile(file, markForReindex);\n            if (!isMock(file) && !myManagingFS.wereChildrenAccessed(file)) {\n              return false;\n            }\n          }\n          else {\n            invalidateIndicesForFile(file, markForReindex);\n          }\n          return true;\n        }\n\n        @Override\n        public Iterable<VirtualFile> getChildrenIterable(@NotNull VirtualFile file) {\n          return file instanceof NewVirtualFile ? ((NewVirtualFile)file).iterInDbChildren() : null;\n        }\n      });",
      "right" : "VfsUtilCore.visitChildrenRecursively(file, new VirtualFileVisitor() {\n        @Override\n        public boolean visitFile(@NotNull VirtualFile file) {\n          if (isUnderConfigOrSystem(file)) {\n            return false;\n          }\n          if (file.isDirectory()) {\n            invalidateIndicesForFile(file, markForReindex);\n            if (!isMock(file) && !myManagingFS.wereChildrenAccessed(file)) {\n              return false;\n            }\n          }\n          else {\n            invalidateIndicesForFile(file, markForReindex);\n          }\n          return true;\n        }\n\n        @Override\n        public Iterable<VirtualFile> getChildrenIterable(@NotNull VirtualFile file) {\n          return file instanceof NewVirtualFile ? ((NewVirtualFile)file).iterInDbChildren() : null;\n        }\n      });",
      "info" : "ExpressionStatement[77839-78645]:ExpressionStatement[77839-78645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77987-78420]:Block[77987-78420]"
    }, {
      "left" : "if (isUnderConfigOrSystem(file))",
      "right" : "if (isUnderConfigOrSystem(file))",
      "info" : "IfStatement[77999-78071]:IfStatement[77999-78071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78032-78071]:Block[78032-78071]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78046-78059]:ReturnStatement[78046-78059]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[78082-78387]:IfStatement[78082-78387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78106-78298]:Block[78106-78298]"
    }, {
      "left" : "invalidateIndicesForFile(file, markForReindex);",
      "right" : "invalidateIndicesForFile(file, markForReindex);",
      "info" : "ExpressionStatement[78120-78167]:ExpressionStatement[78120-78167]"
    }, {
      "left" : "if (!isMock(file) && !myManagingFS.wereChildrenAccessed(file))",
      "right" : "if (!isMock(file) && !myManagingFS.wereChildrenAccessed(file))",
      "info" : "IfStatement[78180-78286]:IfStatement[78180-78286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78243-78286]:Block[78243-78286]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78259-78272]:ReturnStatement[78259-78272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78314-78387]:Block[78314-78387]"
    }, {
      "left" : "invalidateIndicesForFile(file, markForReindex);",
      "right" : "invalidateIndicesForFile(file, markForReindex);",
      "info" : "ExpressionStatement[78328-78375]:ExpressionStatement[78328-78375]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[78398-78410]:ReturnStatement[78398-78410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78524-78635]:Block[78524-78635]"
    }, {
      "left" : "return file instanceof NewVirtualFile ? ((NewVirtualFile)file).iterInDbChildren() : null;",
      "right" : "return file instanceof NewVirtualFile ? ((NewVirtualFile)file).iterInDbChildren() : null;",
      "info" : "ReturnStatement[78536-78625]:ReturnStatement[78536-78625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78752-81040]:Block[78752-81040]"
    }, {
      "left" : "cleanProcessedFlag(file);",
      "right" : "cleanProcessedFlag(file);",
      "info" : "ExpressionStatement[78760-78785]:ExpressionStatement[78760-78785]"
    }, {
      "left" : "final int fileId = Math.abs(getIdMaskingNonIdBasedFile(file));",
      "right" : "final int fileId = Math.abs(getIdMaskingNonIdBasedFile(file));",
      "info" : "VariableDeclarationStatement[78793-78855]:VariableDeclarationStatement[78793-78855]"
    }, {
      "left" : "IndexingStamp.flushCache(fileId);",
      "right" : "IndexingStamp.flushCache(fileId);",
      "info" : "ExpressionStatement[78862-78895]:ExpressionStatement[78862-78895]"
    }, {
      "left" : "List<ID<?, ?>> nontrivialFileIndexedStates = IndexingStamp.getNontrivialFileIndexedStates(fileId);",
      "right" : "List<ID<?, ?>> nontrivialFileIndexedStates = IndexingStamp.getNontrivialFileIndexedStates(fileId);",
      "info" : "VariableDeclarationStatement[78902-79000]:VariableDeclarationStatement[78902-79000]"
    }, {
      "left" : "if (!markForReindex)",
      "right" : "if (!markForReindex)",
      "info" : "IfStatement[79008-79514]:IfStatement[79008-79514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79029-79514]:Block[79029-79514]"
    }, {
      "left" : "for (ID<?, ?> indexId : nontrivialFileIndexedStates)",
      "right" : "for (ID<?, ?> indexId : nontrivialFileIndexedStates)",
      "info" : "EnhancedForStatement[79087-79436]:EnhancedForStatement[79087-79436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79140-79436]:Block[79140-79436]"
    }, {
      "left" : "if (myNotRequiringContentIndices.contains(indexId))",
      "right" : "if (myNotRequiringContentIndices.contains(indexId))",
      "info" : "IfStatement[79152-79426]:IfStatement[79152-79426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79204-79426]:Block[79204-79426]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[79218-79414]:TryStatement[79218-79414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79222-79293]:Block[79222-79293]"
    }, {
      "left" : "updateSingleIndex(indexId, fileId, null);",
      "right" : "updateSingleIndex(indexId, fileId, null);",
      "info" : "ExpressionStatement[79238-79279]:ExpressionStatement[79238-79279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79333-79414]:Block[79333-79414]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[79349-79361]:ExpressionStatement[79349-79361]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[79376-79400]:ExpressionStatement[79376-79400]"
    }, {
      "left" : "myFilesToUpdate.remove(file);",
      "right" : "myFilesToUpdate.remove(file);",
      "info" : "ExpressionStatement[79445-79474]:ExpressionStatement[79445-79474]"
    }, {
      "left" : "Collection<ID<?, ?>> fileIndexedStatesToUpdate = ContainerUtil.intersection(nontrivialFileIndexedStates, myRequiringContentIndices);",
      "right" : "Collection<ID<?, ?>> fileIndexedStatesToUpdate = ContainerUtil.intersection(nontrivialFileIndexedStates, myRequiringContentIndices);",
      "info" : "VariableDeclarationStatement[79522-79654]:VariableDeclarationStatement[79522-79654]"
    }, {
      "left" : "if (markForReindex)",
      "right" : "if (markForReindex)",
      "info" : "IfStatement[79662-80993]:IfStatement[79662-80993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79682-80546]:Block[79682-80546]"
    }, {
      "left" : "if (!fileIndexedStatesToUpdate.isEmpty())",
      "right" : "if (!fileIndexedStatesToUpdate.isEmpty())",
      "info" : "IfStatement[79763-80538]:IfStatement[79763-80538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79805-80538]:Block[79805-80538]"
    }, {
      "left" : "for (int i = 0, size = nontrivialFileIndexedStates.size(); i < size; ++i)",
      "right" : "for (int i = 0, size = nontrivialFileIndexedStates.size(); i < size; ++i)",
      "info" : "ForStatement[79871-80231]:ForStatement[79871-80231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79945-80231]:Block[79945-80231]"
    }, {
      "left" : "final ID<?, ?> indexId = nontrivialFileIndexedStates.get(i);",
      "right" : "final ID<?, ?> indexId = nontrivialFileIndexedStates.get(i);",
      "info" : "VariableDeclarationStatement[79959-80019]:VariableDeclarationStatement[79959-80019]"
    }, {
      "left" : "if (needsFileContentLoading(indexId) && IndexingStamp.isFileIndexedStateCurrent(fileId, indexId))",
      "right" : "if (needsFileContentLoading(indexId) && IndexingStamp.isFileIndexedStateCurrent(fileId, indexId))",
      "info" : "IfStatement[80032-80219]:IfStatement[80032-80219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80130-80219]:Block[80130-80219]"
    }, {
      "left" : "IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);",
      "right" : "IndexingStamp.setFileIndexedStateOutdated(fileId, indexId);",
      "info" : "ExpressionStatement[80146-80205]:ExpressionStatement[80146-80205]"
    }, {
      "left" : "clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);",
      "right" : "clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);",
      "info" : "ExpressionStatement[80243-80299]:ExpressionStatement[80243-80299]"
    }, {
      "left" : "if (!isTooLarge(file) && getIndexableSetForFile(file) != null)",
      "right" : "if (!isTooLarge(file) && getIndexableSetForFile(file) != null)",
      "info" : "IfStatement[80441-80528]:IfStatement[80441-80528]"
    }, {
      "left" : "scheduleForUpdate(file);",
      "right" : "scheduleForUpdate(file);",
      "info" : "ExpressionStatement[80504-80528]:ExpressionStatement[80504-80528]"
    }, {
      "left" : "if (!fileIndexedStatesToUpdate.isEmpty())",
      "right" : "if (!fileIndexedStatesToUpdate.isEmpty())",
      "info" : "IfStatement[80558-80993]:IfStatement[80558-80993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80600-80993]:Block[80600-80993]"
    }, {
      "left" : "final Collection<ID<?, ?>> finalFileIndexedStatesToUpdate = fileIndexedStatesToUpdate;",
      "right" : "final Collection<ID<?, ?>> finalFileIndexedStatesToUpdate = fileIndexedStatesToUpdate;",
      "info" : "VariableDeclarationStatement[80681-80767]:VariableDeclarationStatement[80681-80767]"
    }, {
      "left" : "myFutureInvalidations.offer(new InvalidationTask(file) {\n          @Override\n          public void run() {\n            removeFileDataFromIndices(finalFileIndexedStatesToUpdate, fileId);\n          }\n        });",
      "right" : "myFutureInvalidations.offer(new InvalidationTask(file) {\n          @Override\n          public void run() {\n            removeFileDataFromIndices(finalFileIndexedStatesToUpdate, fileId);\n          }\n        });",
      "info" : "ExpressionStatement[80776-80985]:ExpressionStatement[80776-80985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80881-80973]:Block[80881-80973]"
    }, {
      "left" : "removeFileDataFromIndices(finalFileIndexedStatesToUpdate, fileId);",
      "right" : "removeFileDataFromIndices(finalFileIndexedStatesToUpdate, fileId);",
      "info" : "ExpressionStatement[80895-80961]:ExpressionStatement[80895-80961]"
    }, {
      "left" : "IndexingStamp.flushCache(fileId);",
      "right" : "IndexingStamp.flushCache(fileId);",
      "info" : "ExpressionStatement[81001-81034]:ExpressionStatement[81001-81034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81145-81785]:Block[81145-81785]"
    }, {
      "left" : "Throwable unexpectedError = null;",
      "right" : "Throwable unexpectedError = null;",
      "info" : "VariableDeclarationStatement[81153-81186]:VariableDeclarationStatement[81153-81186]"
    }, {
      "left" : "for (ID<?, ?> indexId : affectedIndices)",
      "right" : "for (ID<?, ?> indexId : affectedIndices)",
      "info" : "EnhancedForStatement[81193-81657]:EnhancedForStatement[81193-81657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81234-81657]:Block[81234-81657]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[81244-81649]:TryStatement[81244-81649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81248-81312]:Block[81248-81312]"
    }, {
      "left" : "updateSingleIndex(indexId, inputId, null);",
      "right" : "updateSingleIndex(indexId, inputId, null);",
      "info" : "ExpressionStatement[81260-81302]:ExpressionStatement[81260-81302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81348-81417]:Block[81348-81417]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[81360-81372]:ExpressionStatement[81360-81372]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[81383-81407]:ExpressionStatement[81383-81407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81463-81500]:Block[81463-81500]"
    }, {
      "left" : "LOG.error(pce);",
      "right" : "LOG.error(pce);",
      "info" : "ExpressionStatement[81475-81490]:ExpressionStatement[81475-81490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81529-81649]:Block[81529-81649]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[81541-81553]:ExpressionStatement[81541-81553]"
    }, {
      "left" : "if (unexpectedError == null)",
      "right" : "if (unexpectedError == null)",
      "info" : "IfStatement[81564-81639]:IfStatement[81564-81639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81593-81639]:Block[81593-81639]"
    }, {
      "left" : "unexpectedError = e;",
      "right" : "unexpectedError = e;",
      "info" : "ExpressionStatement[81607-81627]:ExpressionStatement[81607-81627]"
    }, {
      "left" : "IndexingStamp.flushCache(inputId);",
      "right" : "IndexingStamp.flushCache(inputId);",
      "info" : "ExpressionStatement[81664-81698]:ExpressionStatement[81664-81698]"
    }, {
      "left" : "if (unexpectedError != null)",
      "right" : "if (unexpectedError != null)",
      "info" : "IfStatement[81705-81779]:IfStatement[81705-81779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81734-81779]:Block[81734-81779]"
    }, {
      "left" : "LOG.error(unexpectedError);",
      "right" : "LOG.error(unexpectedError);",
      "info" : "ExpressionStatement[81744-81771]:ExpressionStatement[81744-81771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81836-81886]:Block[81836-81886]"
    }, {
      "left" : "return myFutureInvalidations.size();",
      "right" : "return myFutureInvalidations.size();",
      "info" : "ReturnStatement[81844-81880]:ReturnStatement[81844-81880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81940-81995]:Block[81940-81995]"
    }, {
      "left" : "ensureAllInvalidateTasksCompleted(false);",
      "right" : "ensureAllInvalidateTasksCompleted(false);",
      "info" : "ExpressionStatement[81948-81989]:ExpressionStatement[81948-81989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82054-82108]:Block[82054-82108]"
    }, {
      "left" : "ensureAllInvalidateTasksCompleted(true);",
      "right" : "ensureAllInvalidateTasksCompleted(true);",
      "info" : "ExpressionStatement[82062-82102]:ExpressionStatement[82062-82102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82207-83318]:Block[82207-83318]"
    }, {
      "left" : "final int size = getNumberOfPendingInvalidations();",
      "right" : "final int size = getNumberOfPendingInvalidations();",
      "info" : "VariableDeclarationStatement[82215-82266]:VariableDeclarationStatement[82215-82266]"
    }, {
      "left" : "if (size == 0)",
      "right" : "if (size == 0)",
      "info" : "IfStatement[82273-82313]:IfStatement[82273-82313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82288-82313]:Block[82288-82313]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[82298-82305]:ReturnStatement[82298-82305]"
    }, {
      "left" : "if (doCheckCancelledBetweenInvalidations)",
      "right" : "if (doCheckCancelledBetweenInvalidations)",
      "info" : "IfStatement[82321-83312]:IfStatement[82321-83312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82363-82650]:Block[82363-82650]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[82373-82642]:WhileStatement[82373-82642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82386-82642]:Block[82386-82642]"
    }, {
      "left" : "InvalidationTask task = myFutureInvalidations.poll();",
      "right" : "InvalidationTask task = myFutureInvalidations.poll();",
      "info" : "VariableDeclarationStatement[82398-82451]:VariableDeclarationStatement[82398-82451]"
    }, {
      "left" : "if (task == null)",
      "right" : "if (task == null)",
      "info" : "IfStatement[82463-82513]:IfStatement[82463-82513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82481-82513]:Block[82481-82513]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82495-82501]:BreakStatement[82495-82501]"
    }, {
      "left" : "ProgressManager.getInstance().executeNonCancelableSection(task);",
      "right" : "ProgressManager.getInstance().executeNonCancelableSection(task);",
      "info" : "ExpressionStatement[82525-82589]:ExpressionStatement[82525-82589]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[82600-82632]:ExpressionStatement[82600-82632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82662-83312]:Block[82662-83312]"
    }, {
      "left" : "ProgressManager.getInstance().executeNonCancelableSection(\n          new Runnable() {\n            @Override\n            public void run() {\n              final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();\n              indicator.setText(\"\");\n              int count = 0;\n              while (true) {\n                InvalidationTask task = myFutureInvalidations.poll();\n\n                if (task == null) {\n                  break;\n                }\n                indicator.setFraction((double)count++ / size);\n                task.run();\n              }\n            }\n          }\n        );",
      "right" : "ProgressManager.getInstance().executeNonCancelableSection(\n          new Runnable() {\n            @Override\n            public void run() {\n              final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();\n              indicator.setText(\"\");\n              int count = 0;\n              while (true) {\n                InvalidationTask task = myFutureInvalidations.poll();\n\n                if (task == null) {\n                  break;\n                }\n                indicator.setFraction((double)count++ / size);\n                task.run();\n              }\n            }\n          }\n        );",
      "info" : "ExpressionStatement[82672-83304]:ExpressionStatement[82672-83304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82810-83281]:Block[82810-83281]"
    }, {
      "left" : "final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();",
      "right" : "final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator();",
      "info" : "VariableDeclarationStatement[82826-82915]:VariableDeclarationStatement[82826-82915]"
    }, {
      "left" : "indicator.setText(\"\");",
      "right" : "indicator.setText(\"\");",
      "info" : "ExpressionStatement[82930-82952]:ExpressionStatement[82930-82952]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[82967-82981]:VariableDeclarationStatement[82967-82981]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[82996-83267]:WhileStatement[82996-83267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83009-83267]:Block[83009-83267]"
    }, {
      "left" : "InvalidationTask task = myFutureInvalidations.poll();",
      "right" : "InvalidationTask task = myFutureInvalidations.poll();",
      "info" : "VariableDeclarationStatement[83027-83080]:VariableDeclarationStatement[83027-83080]"
    }, {
      "left" : "if (task == null)",
      "right" : "if (task == null)",
      "info" : "IfStatement[83098-83160]:IfStatement[83098-83160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83116-83160]:Block[83116-83160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83136-83142]:BreakStatement[83136-83142]"
    }, {
      "left" : "indicator.setFraction((double)count++ / size);",
      "right" : "indicator.setFraction((double)count++ / size);",
      "info" : "ExpressionStatement[83177-83223]:ExpressionStatement[83177-83223]"
    }, {
      "left" : "task.run();",
      "right" : "task.run();",
      "info" : "ExpressionStatement[83240-83251]:ExpressionStatement[83240-83251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83441-84006]:Block[83441-84006]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[83449-84000]:IfStatement[83449-84000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83473-83904]:Block[83473-83904]"
    }, {
      "left" : "final ContentIterator iterator = new ContentIterator() {\n          @Override\n          public boolean processFile(@NotNull final VirtualFile fileOrDir) {\n            processor.process(fileOrDir);\n            return true;\n          }\n        };",
      "right" : "final ContentIterator iterator = new ContentIterator() {\n          @Override\n          public boolean processFile(@NotNull final VirtualFile fileOrDir) {\n            processor.process(fileOrDir);\n            return true;\n          }\n        };",
      "info" : "VariableDeclarationStatement[83483-83726]:VariableDeclarationStatement[83483-83726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83635-83715]:Block[83635-83715]"
    }, {
      "left" : "processor.process(fileOrDir);",
      "right" : "processor.process(fileOrDir);",
      "info" : "ExpressionStatement[83649-83678]:ExpressionStatement[83649-83678]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[83691-83703]:ReturnStatement[83691-83703]"
    }, {
      "left" : "for (IndexableFileSet set : myIndexableSets)",
      "right" : "for (IndexableFileSet set : myIndexableSets)",
      "info" : "EnhancedForStatement[83736-83896]:EnhancedForStatement[83736-83896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83781-83896]:Block[83781-83896]"
    }, {
      "left" : "if (set.isInSet(file))",
      "right" : "if (set.isInSet(file))",
      "info" : "IfStatement[83793-83886]:IfStatement[83793-83886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83816-83886]:Block[83816-83886]"
    }, {
      "left" : "set.iterateIndexableFilesIn(file, iterator);",
      "right" : "set.iterateIndexableFilesIn(file, iterator);",
      "info" : "ExpressionStatement[83830-83874]:ExpressionStatement[83830-83874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83916-84000]:Block[83916-84000]"
    }, {
      "left" : "if (getIndexableSetForFile(file) != null)",
      "right" : "if (getIndexableSetForFile(file) != null)",
      "info" : "IfStatement[83926-83992]:IfStatement[83926-83992]"
    }, {
      "left" : "processor.process(file);",
      "right" : "processor.process(file);",
      "info" : "ExpressionStatement[83968-83992]:ExpressionStatement[83968-83992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84065-84217]:Block[84065-84217]"
    }, {
      "left" : "if (myFilesToUpdate.isEmpty())",
      "right" : "if (myFilesToUpdate.isEmpty())",
      "info" : "IfStatement[84073-84153]:IfStatement[84073-84153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84104-84153]:Block[84104-84153]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[84114-84145]:ReturnStatement[84114-84145]"
    }, {
      "left" : "return new ArrayList<VirtualFile>(myFilesToUpdate);",
      "right" : "return new ArrayList<VirtualFile>(myFilesToUpdate);",
      "info" : "ReturnStatement[84160-84211]:ReturnStatement[84160-84211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84526-85290]:Block[84526-85290]"
    }, {
      "left" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "right" : "myChangedFilesCollector.tryToEnsureAllInvalidateTasksCompleted();",
      "info" : "ExpressionStatement[84534-84599]:ExpressionStatement[84534-84599]"
    }, {
      "left" : "Collection<VirtualFile> allFilesToUpdate = getAllFilesToUpdate();",
      "right" : "Collection<VirtualFile> allFilesToUpdate = getAllFilesToUpdate();",
      "info" : "VariableDeclarationStatement[84607-84672]:VariableDeclarationStatement[84607-84672]"
    }, {
      "left" : "if (!allFilesToUpdate.isEmpty())",
      "right" : "if (!allFilesToUpdate.isEmpty())",
      "info" : "IfStatement[84680-85284]:IfStatement[84680-85284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84713-85284]:Block[84713-85284]"
    }, {
      "left" : "boolean includeFilesFromOtherProjects = restrictedTo == null && (myForceUpdateRequests.incrementAndGet() & 0x3F) == 0;",
      "right" : "boolean includeFilesFromOtherProjects = restrictedTo == null && (myForceUpdateRequests.incrementAndGet() & 0x3F) == 0;",
      "info" : "VariableDeclarationStatement[84723-84841]:VariableDeclarationStatement[84723-84841]"
    }, {
      "left" : "List<VirtualFile> virtualFilesToBeUpdatedForProject = ContainerUtil.filter(\n          allFilesToUpdate,\n          new ProjectFilesCondition(projectIndexableFiles(project), filter, restrictedTo,\n                                    includeFilesFromOtherProjects)\n        );",
      "right" : "List<VirtualFile> virtualFilesToBeUpdatedForProject = ContainerUtil.filter(\n          allFilesToUpdate,\n          new ProjectFilesCondition(projectIndexableFiles(project), filter, restrictedTo,\n                                    includeFilesFromOtherProjects)\n        );",
      "info" : "VariableDeclarationStatement[84850-85121]:VariableDeclarationStatement[84850-85121]"
    }, {
      "left" : "if (!virtualFilesToBeUpdatedForProject.isEmpty())",
      "right" : "if (!virtualFilesToBeUpdatedForProject.isEmpty())",
      "info" : "IfStatement[85131-85276]:IfStatement[85131-85276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85181-85276]:Block[85181-85276]"
    }, {
      "left" : "myForceUpdateTask.processAll(virtualFilesToBeUpdatedForProject, project);",
      "right" : "myForceUpdateTask.processAll(virtualFilesToBeUpdatedForProject, project);",
      "info" : "ExpressionStatement[85193-85266]:ExpressionStatement[85193-85266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85608-86403]:Block[85608-86403]"
    }, {
      "left" : "final VirtualFile file = fileContent.getVirtualFile();",
      "right" : "final VirtualFile file = fileContent.getVirtualFile();",
      "info" : "VariableDeclarationStatement[85616-85670]:VariableDeclarationStatement[85616-85670]"
    }, {
      "left" : "if (myFilesToUpdate.contains(file))",
      "right" : "if (myFilesToUpdate.contains(file))",
      "info" : "IfStatement[85677-86377]:IfStatement[85677-86377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85713-86377]:Block[85713-86377]"
    }, {
      "left" : "if (file.isValid())",
      "right" : "if (file.isValid())",
      "info" : "IfStatement[85723-86310]:IfStatement[85723-86310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85743-86310]:Block[85743-86310]"
    }, {
      "left" : "int fileId = getIdMaskingNonIdBasedFile(file);",
      "right" : "int fileId = getIdMaskingNonIdBasedFile(file);",
      "info" : "VariableDeclarationStatement[85755-85801]:VariableDeclarationStatement[85755-85801]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[85812-86300]:TryStatement[85812-86300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85816-86224]:Block[85816-86224]"
    }, {
      "left" : "if (isTooLarge(file))",
      "right" : "if (isTooLarge(file))",
      "info" : "IfStatement[85830-86212]:IfStatement[85830-86212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85852-86123]:Block[85852-86123]"
    }, {
      "left" : "List<ID<?, ?>> nontrivialFileIndexedStates = IndexingStamp.getNontrivialFileIndexedStates(fileId);",
      "right" : "List<ID<?, ?>> nontrivialFileIndexedStates = IndexingStamp.getNontrivialFileIndexedStates(fileId);",
      "info" : "VariableDeclarationStatement[85868-85966]:VariableDeclarationStatement[85868-85966]"
    }, {
      "left" : "removeFileDataFromIndices(ContainerUtil.intersection(nontrivialFileIndexedStates, myRequiringContentIndices), Math.abs(fileId));",
      "right" : "removeFileDataFromIndices(ContainerUtil.intersection(nontrivialFileIndexedStates, myRequiringContentIndices), Math.abs(fileId));",
      "info" : "ExpressionStatement[85981-86109]:ExpressionStatement[85981-86109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86141-86212]:Block[86141-86212]"
    }, {
      "left" : "doIndexFileContent(project, fileContent);",
      "right" : "doIndexFileContent(project, fileContent);",
      "info" : "ExpressionStatement[86157-86198]:ExpressionStatement[86157-86198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86243-86300]:Block[86243-86300]"
    }, {
      "left" : "IndexingStamp.flushCache(file);",
      "right" : "IndexingStamp.flushCache(file);",
      "info" : "ExpressionStatement[86257-86288]:ExpressionStatement[86257-86288]"
    }, {
      "left" : "myFilesToUpdate.remove(file);",
      "right" : "myFilesToUpdate.remove(file);",
      "info" : "ExpressionStatement[86319-86348]:ExpressionStatement[86319-86348]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86357-86369]:ReturnStatement[86357-86369]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[86384-86397]:ReturnStatement[86384-86397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86486-86880]:Block[86486-86880]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.signalUpdateStart();",
      "right" : "myContentlessIndicesUpdateQueue.signalUpdateStart();",
      "info" : "ExpressionStatement[86494-86546]:ExpressionStatement[86494-86546]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "right" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "info" : "ExpressionStatement[86553-86602]:ExpressionStatement[86553-86602]"
    }, {
      "left" : "for (VFileEvent event : events)",
      "right" : "for (VFileEvent event : events)",
      "info" : "EnhancedForStatement[86610-86762]:EnhancedForStatement[86610-86762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86642-86762]:Block[86642-86762]"
    }, {
      "left" : "if (memoryStorageCleaningNeeded(event))",
      "right" : "if (memoryStorageCleaningNeeded(event))",
      "info" : "IfStatement[86652-86754]:IfStatement[86652-86754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86692-86754]:Block[86692-86754]"
    }, {
      "left" : "cleanupMemoryStorage();",
      "right" : "cleanupMemoryStorage();",
      "info" : "ExpressionStatement[86704-86727]:ExpressionStatement[86704-86727]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86738-86744]:BreakStatement[86738-86744]"
    }, {
      "left" : "for (VFileEvent event : events)",
      "right" : "for (VFileEvent event : events)",
      "info" : "EnhancedForStatement[86769-86874]:EnhancedForStatement[86769-86874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86801-86874]:Block[86801-86874]"
    }, {
      "left" : "BulkVirtualFileListenerAdapter.fireBefore(this, event);",
      "right" : "BulkVirtualFileListenerAdapter.fireBefore(this, event);",
      "info" : "ExpressionStatement[86811-86866]:ExpressionStatement[86811-86866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86948-87161]:Block[86948-87161]"
    }, {
      "left" : "Object requestor = event.getRequestor();",
      "right" : "Object requestor = event.getRequestor();",
      "info" : "VariableDeclarationStatement[86956-86996]:VariableDeclarationStatement[86956-86996]"
    }, {
      "left" : "return requestor instanceof FileDocumentManager ||\n          requestor instanceof PsiManager ||\n          requestor == LocalHistory.VFS_EVENT_REQUESTOR;",
      "right" : "return requestor instanceof FileDocumentManager ||\n          requestor instanceof PsiManager ||\n          requestor == LocalHistory.VFS_EVENT_REQUESTOR;",
      "info" : "ReturnStatement[87003-87155]:ReturnStatement[87003-87155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87243-87475]:Block[87243-87475]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "right" : "myContentlessIndicesUpdateQueue.ensureUpToDate();",
      "info" : "ExpressionStatement[87251-87300]:ExpressionStatement[87251-87300]"
    }, {
      "left" : "for (VFileEvent event : events)",
      "right" : "for (VFileEvent event : events)",
      "info" : "EnhancedForStatement[87308-87412]:EnhancedForStatement[87308-87412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87340-87412]:Block[87340-87412]"
    }, {
      "left" : "BulkVirtualFileListenerAdapter.fireAfter(this, event);",
      "right" : "BulkVirtualFileListenerAdapter.fireAfter(this, event);",
      "info" : "ExpressionStatement[87350-87404]:ExpressionStatement[87350-87404]"
    }, {
      "left" : "myContentlessIndicesUpdateQueue.signalUpdateEnd();",
      "right" : "myContentlessIndicesUpdateQueue.signalUpdateEnd();",
      "info" : "ExpressionStatement[87419-87469]:ExpressionStatement[87419-87469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87623-87713]:Block[87623-87713]"
    }, {
      "left" : "processFileImpl(project, new com.intellij.ide.caches.FileContent(item));",
      "right" : "processFileImpl(project, new com.intellij.ide.caches.FileContent(item));",
      "info" : "ExpressionStatement[87633-87705]:ExpressionStatement[87633-87705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87820-88393]:Block[87820-88393]"
    }, {
      "left" : "Document document = myFileDocumentManager.getCachedDocument(file);",
      "right" : "Document document = myFileDocumentManager.getCachedDocument(file);",
      "info" : "VariableDeclarationStatement[87826-87892]:VariableDeclarationStatement[87826-87892]"
    }, {
      "left" : "if (document != null && myFileDocumentManager.isDocumentUnsaved(document))",
      "right" : "if (document != null && myFileDocumentManager.isDocumentUnsaved(document))",
      "info" : "IfStatement[87898-88371]:IfStatement[87898-88371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87973-88371]:Block[87973-88371]"
    }, {
      "left" : "if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty())",
      "right" : "if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty())",
      "info" : "IfStatement[87981-88212]:IfStatement[87981-88212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88046-88212]:Block[88046-88212]"
    }, {
      "left" : "for (ID<?, ?> psiBackedIndex : myPsiDependentIndices)",
      "right" : "for (ID<?, ?> psiBackedIndex : myPsiDependentIndices)",
      "info" : "EnhancedForStatement[88056-88204]:EnhancedForStatement[88056-88204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88110-88204]:Block[88110-88204]"
    }, {
      "left" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.remove(psiBackedIndex);",
      "right" : "myUpToDateIndicesForUnsavedOrTransactedDocuments.remove(psiBackedIndex);",
      "info" : "ExpressionStatement[88122-88194]:ExpressionStatement[88122-88194]"
    }, {
      "left" : "myLastIndexedDocStamps.clearForDocument(document);",
      "right" : "myLastIndexedDocStamps.clearForDocument(document);",
      "info" : "ExpressionStatement[88220-88270]:ExpressionStatement[88220-88270]"
    }, {
      "left" : "document.putUserData(ourFileContentKey, null);",
      "right" : "document.putUserData(ourFileContentKey, null);",
      "info" : "ExpressionStatement[88299-88345]:ExpressionStatement[88299-88345]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[88353-88365]:ReturnStatement[88353-88365]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[88376-88389]:ReturnStatement[88376-88389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88461-88579]:Block[88461-88579]"
    }, {
      "left" : "return file instanceof VirtualFileWithId ?((VirtualFileWithId)file).getId() : IndexingStamp.INVALID_FILE_ID;",
      "right" : "return file instanceof VirtualFileWithId ?((VirtualFileWithId)file).getId() : IndexingStamp.INVALID_FILE_ID;",
      "info" : "ReturnStatement[88467-88575]:ReturnStatement[88467-88575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88877-88923]:Block[88877-88923]"
    }, {
      "left" : "myProgressIndicator = indicator;",
      "right" : "myProgressIndicator = indicator;",
      "info" : "ExpressionStatement[88885-88917]:ExpressionStatement[88885-88917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88992-89717]:Block[88992-89717]"
    }, {
      "left" : "List<VirtualFile> files;",
      "right" : "List<VirtualFile> files;",
      "info" : "VariableDeclarationStatement[89000-89024]:VariableDeclarationStatement[89000-89024]"
    }, {
      "left" : "synchronized (myFiles) {\n        files = myFiles;\n      }",
      "right" : "synchronized (myFiles) {\n        files = myFiles;\n      }",
      "info" : "SynchronizedStatement[89031-89088]:SynchronizedStatement[89031-89088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89054-89088]:Block[89054-89088]"
    }, {
      "left" : "files = myFiles;",
      "right" : "files = myFiles;",
      "info" : "ExpressionStatement[89064-89080]:ExpressionStatement[89064-89080]"
    }, {
      "left" : "List<VirtualFile> localFileSystemFiles = new ArrayList<VirtualFile>(files.size() / 2);",
      "right" : "List<VirtualFile> localFileSystemFiles = new ArrayList<VirtualFile>(files.size() / 2);",
      "info" : "VariableDeclarationStatement[89281-89367]:VariableDeclarationStatement[89281-89367]"
    }, {
      "left" : "List<VirtualFile> archiveFiles = new ArrayList<VirtualFile>(files.size() / 2);",
      "right" : "List<VirtualFile> archiveFiles = new ArrayList<VirtualFile>(files.size() / 2);",
      "info" : "VariableDeclarationStatement[89374-89452]:VariableDeclarationStatement[89374-89452]"
    }, {
      "left" : "for(VirtualFile file:files)",
      "right" : "for(VirtualFile file:files)",
      "info" : "EnhancedForStatement[89459-89626]:EnhancedForStatement[89459-89626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89487-89626]:Block[89487-89626]"
    }, {
      "left" : "if (file.getFileSystem() instanceof LocalFileSystem)",
      "right" : "if (file.getFileSystem() instanceof LocalFileSystem)",
      "info" : "IfStatement[89497-89618]:IfStatement[89497-89618]"
    }, {
      "left" : "localFileSystemFiles.add(file);",
      "right" : "localFileSystemFiles.add(file);",
      "info" : "ExpressionStatement[89550-89581]:ExpressionStatement[89550-89581]"
    }, {
      "left" : "archiveFiles.add(file);",
      "right" : "archiveFiles.add(file);",
      "info" : "ExpressionStatement[89595-89618]:ExpressionStatement[89595-89618]"
    }, {
      "left" : "localFileSystemFiles.addAll(archiveFiles);",
      "right" : "localFileSystemFiles.addAll(archiveFiles);",
      "info" : "ExpressionStatement[89634-89676]:ExpressionStatement[89634-89676]"
    }, {
      "left" : "return localFileSystemFiles;",
      "right" : "return localFileSystemFiles;",
      "info" : "ReturnStatement[89683-89711]:ReturnStatement[89683-89711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89797-92330]:Block[89797-92330]"
    }, {
      "left" : "if (!file.isValid())",
      "right" : "if (!file.isValid())",
      "info" : "IfStatement[89805-89856]:IfStatement[89805-89856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89826-89856]:Block[89826-89856]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[89836-89848]:ReturnStatement[89836-89848]"
    }, {
      "left" : "if (file instanceof VirtualFileSystemEntry && ((VirtualFileSystemEntry)file).isFileIndexed())",
      "right" : "if (file instanceof VirtualFileSystemEntry && ((VirtualFileSystemEntry)file).isFileIndexed())",
      "info" : "IfStatement[89863-89987]:IfStatement[89863-89987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89957-89987]:Block[89957-89987]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[89967-89979]:ReturnStatement[89967-89979]"
    }, {
      "left" : "if (!(file instanceof VirtualFileWithId))",
      "right" : "if (!(file instanceof VirtualFileWithId))",
      "info" : "IfStatement[89995-90067]:IfStatement[89995-90067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90037-90067]:Block[90037-90067]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[90047-90059]:ReturnStatement[90047-90059]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[90074-92092]:TryStatement[90074-92092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90078-92015]:Block[90078-92015]"
    }, {
      "left" : "FileType type = file.getFileType();",
      "right" : "FileType type = file.getFileType();",
      "info" : "VariableDeclarationStatement[90088-90123]:VariableDeclarationStatement[90088-90123]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(file, type);",
      "right" : "myFileTypeManager.cacheFileType(file, type);",
      "info" : "ExpressionStatement[90132-90176]:ExpressionStatement[90132-90176]"
    }, {
      "left" : "boolean oldStuff = true;",
      "right" : "boolean oldStuff = true;",
      "info" : "VariableDeclarationStatement[90186-90210]:VariableDeclarationStatement[90186-90210]"
    }, {
      "left" : "if (file.isDirectory() || !isTooLarge(file))",
      "right" : "if (file.isDirectory() || !isTooLarge(file))",
      "info" : "IfStatement[90219-91213]:IfStatement[90219-91213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90264-91213]:Block[90264-91213]"
    }, {
      "left" : "final List<ID<?, ?>> affectedIndexCandidates = getAffectedIndexCandidates(file);",
      "right" : "final List<ID<?, ?>> affectedIndexCandidates = getAffectedIndexCandidates(file);",
      "info" : "VariableDeclarationStatement[90276-90356]:VariableDeclarationStatement[90276-90356]"
    }, {
      "left" : "for (int i = 0, size = affectedIndexCandidates.size(); i < size; ++i)",
      "right" : "for (int i = 0, size = affectedIndexCandidates.size(); i < size; ++i)",
      "info" : "ForStatement[90420-91203]:ForStatement[90420-91203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90490-91203]:Block[90490-91203]"
    }, {
      "left" : "final ID<?, ?> indexId = affectedIndexCandidates.get(i);",
      "right" : "final ID<?, ?> indexId = affectedIndexCandidates.get(i);",
      "info" : "VariableDeclarationStatement[90504-90560]:VariableDeclarationStatement[90504-90560]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[90573-91191]:TryStatement[90573-91191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90577-90849]:Block[90577-90849]"
    }, {
      "left" : "if (needsFileContentLoading(indexId) && shouldIndexFile(file, indexId))",
      "right" : "if (needsFileContentLoading(indexId) && shouldIndexFile(file, indexId))",
      "info" : "IfStatement[90593-90835]:IfStatement[90593-90835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90665-90835]:Block[90665-90835]"
    }, {
      "left" : "synchronized (myFiles) {\n                  myFiles.add(file);\n                }",
      "right" : "synchronized (myFiles) {\n                  myFiles.add(file);\n                }",
      "info" : "SynchronizedStatement[90683-90762]:SynchronizedStatement[90683-90762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90706-90762]:Block[90706-90762]"
    }, {
      "left" : "myFiles.add(file);",
      "right" : "myFiles.add(file);",
      "info" : "ExpressionStatement[90726-90744]:ExpressionStatement[90726-90744]"
    }, {
      "left" : "oldStuff = false;",
      "right" : "oldStuff = false;",
      "info" : "ExpressionStatement[90779-90796]:ExpressionStatement[90779-90796]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90813-90819]:BreakStatement[90813-90819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90889-91191]:Block[90889-91191]"
    }, {
      "left" : "final Throwable cause = e.getCause();",
      "right" : "final Throwable cause = e.getCause();",
      "info" : "VariableDeclarationStatement[90905-90942]:VariableDeclarationStatement[90905-90942]"
    }, {
      "left" : "if (cause instanceof IOException || cause instanceof StorageException)",
      "right" : "if (cause instanceof IOException || cause instanceof StorageException)",
      "info" : "IfStatement[90957-91177]:IfStatement[90957-91177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91028-91115]:Block[91028-91115]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[91046-91058]:ExpressionStatement[91046-91058]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[91075-91099]:ExpressionStatement[91075-91099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91135-91177]:Block[91135-91177]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[91153-91161]:ThrowStatement[91153-91161]"
    }, {
      "left" : "FileContent fileContent = null;",
      "right" : "FileContent fileContent = null;",
      "info" : "VariableDeclarationStatement[91222-91253]:VariableDeclarationStatement[91222-91253]"
    }, {
      "left" : "int inputId = -1;",
      "right" : "int inputId = -1;",
      "info" : "VariableDeclarationStatement[91262-91279]:VariableDeclarationStatement[91262-91279]"
    }, {
      "left" : "for (ID<?, ?> indexId : myNotRequiringContentIndices)",
      "right" : "for (ID<?, ?> indexId : myNotRequiringContentIndices)",
      "info" : "EnhancedForStatement[91288-91827]:EnhancedForStatement[91288-91827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91342-91827]:Block[91342-91827]"
    }, {
      "left" : "if (shouldIndexFile(file, indexId))",
      "right" : "if (shouldIndexFile(file, indexId))",
      "info" : "IfStatement[91354-91817]:IfStatement[91354-91817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91390-91817]:Block[91390-91817]"
    }, {
      "left" : "oldStuff = false;",
      "right" : "oldStuff = false;",
      "info" : "ExpressionStatement[91404-91421]:ExpressionStatement[91404-91421]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[91434-91805]:TryStatement[91434-91805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91438-91684]:Block[91438-91684]"
    }, {
      "left" : "if (fileContent == null)",
      "right" : "if (fileContent == null)",
      "info" : "IfStatement[91454-91606]:IfStatement[91454-91606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91479-91606]:Block[91479-91606]"
    }, {
      "left" : "fileContent = new FileContentImpl(file);",
      "right" : "fileContent = new FileContentImpl(file);",
      "info" : "ExpressionStatement[91497-91537]:ExpressionStatement[91497-91537]"
    }, {
      "left" : "inputId = Math.abs(getFileId(file));",
      "right" : "inputId = Math.abs(getFileId(file));",
      "info" : "ExpressionStatement[91554-91590]:ExpressionStatement[91554-91590]"
    }, {
      "left" : "updateSingleIndex(indexId, inputId, fileContent);",
      "right" : "updateSingleIndex(indexId, inputId, fileContent);",
      "info" : "ExpressionStatement[91621-91670]:ExpressionStatement[91621-91670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91724-91805]:Block[91724-91805]"
    }, {
      "left" : "LOG.info(e);",
      "right" : "LOG.info(e);",
      "info" : "ExpressionStatement[91740-91752]:ExpressionStatement[91740-91752]"
    }, {
      "left" : "requestRebuild(indexId);",
      "right" : "requestRebuild(indexId);",
      "info" : "ExpressionStatement[91767-91791]:ExpressionStatement[91767-91791]"
    }, {
      "left" : "IndexingStamp.flushCache(file);",
      "right" : "IndexingStamp.flushCache(file);",
      "info" : "ExpressionStatement[91836-91867]:ExpressionStatement[91836-91867]"
    }, {
      "left" : "if (oldStuff && file instanceof VirtualFileSystemEntry)",
      "right" : "if (oldStuff && file instanceof VirtualFileSystemEntry)",
      "info" : "IfStatement[91877-92007]:IfStatement[91877-92007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91933-92007]:Block[91933-92007]"
    }, {
      "left" : "((VirtualFileSystemEntry)file).setFileIndexed(true);",
      "right" : "((VirtualFileSystemEntry)file).setFileIndexed(true);",
      "info" : "ExpressionStatement[91945-91997]:ExpressionStatement[91945-91997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92030-92092]:Block[92030-92092]"
    }, {
      "left" : "myFileTypeManager.cacheFileType(file, null);",
      "right" : "myFileTypeManager.cacheFileType(file, null);",
      "info" : "ExpressionStatement[92040-92084]:ExpressionStatement[92040-92084]"
    }, {
      "left" : "if (myProgressIndicator != null && file.isDirectory())",
      "right" : "if (myProgressIndicator != null && file.isDirectory())",
      "info" : "IfStatement[92100-92305]:IfStatement[92100-92305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92155-92305]:Block[92155-92305]"
    }, {
      "left" : "myProgressIndicator.checkCanceled();",
      "right" : "myProgressIndicator.checkCanceled();",
      "info" : "ExpressionStatement[92197-92233]:ExpressionStatement[92197-92233]"
    }, {
      "left" : "myProgressIndicator.setText(\"Scanning files to index\");",
      "right" : "myProgressIndicator.setText(\"Scanning files to index\");",
      "info" : "ExpressionStatement[92242-92297]:ExpressionStatement[92242-92297]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[92312-92324]:ReturnStatement[92312-92324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92424-92597]:Block[92424-92597]"
    }, {
      "left" : "return getInputFilter(indexId).acceptInput(file) &&\n           (isMock(file) || !IndexingStamp.isFileIndexedStateCurrent(((NewVirtualFile)file).getId(), indexId));",
      "right" : "return getInputFilter(indexId).acceptInput(file) &&\n           (isMock(file) || !IndexingStamp.isFileIndexedStateCurrent(((NewVirtualFile)file).getId(), indexId));",
      "info" : "ReturnStatement[92430-92593]:ReturnStatement[92430-92593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92666-92871]:Block[92666-92871]"
    }, {
      "left" : "final String filePath = file.getPath();",
      "right" : "final String filePath = file.getPath();",
      "info" : "VariableDeclarationStatement[92672-92711]:VariableDeclarationStatement[92672-92711]"
    }, {
      "left" : "return myConfigPath != null && FileUtil.startsWith(filePath, myConfigPath) ||\n           myLogPath != null && FileUtil.startsWith(filePath, myLogPath);",
      "right" : "return myConfigPath != null && FileUtil.startsWith(filePath, myConfigPath) ||\n           myLogPath != null && FileUtil.startsWith(filePath, myLogPath);",
      "info" : "ReturnStatement[92716-92867]:ReturnStatement[92716-92867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92929-92980]:Block[92929-92980]"
    }, {
      "left" : "return !(file instanceof NewVirtualFile);",
      "right" : "return !(file instanceof NewVirtualFile);",
      "info" : "ReturnStatement[92935-92976]:ReturnStatement[92935-92976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93038-93265]:Block[93038-93265]"
    }, {
      "left" : "if (SingleRootFileViewProvider.isTooLargeForIntelligence(file))",
      "right" : "if (SingleRootFileViewProvider.isTooLargeForIntelligence(file))",
      "info" : "IfStatement[93044-93243]:IfStatement[93044-93243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93108-93243]:Block[93108-93243]"
    }, {
      "left" : "return !myNoLimitCheckTypes.contains(file.getFileType()) || SingleRootFileViewProvider.isTooLargeForContentLoading(file);",
      "right" : "return !myNoLimitCheckTypes.contains(file.getFileType()) || SingleRootFileViewProvider.isTooLargeForContentLoading(file);",
      "info" : "ReturnStatement[93116-93237]:ReturnStatement[93116-93237]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[93248-93261]:ReturnStatement[93248-93261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93341-93594]:Block[93341-93594]"
    }, {
      "left" : "if (SingleRootFileViewProvider.isTooLargeForIntelligence(file, contentSize))",
      "right" : "if (SingleRootFileViewProvider.isTooLargeForIntelligence(file, contentSize))",
      "info" : "IfStatement[93347-93572]:IfStatement[93347-93572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93424-93572]:Block[93424-93572]"
    }, {
      "left" : "return !myNoLimitCheckTypes.contains(file.getFileType()) || SingleRootFileViewProvider.isTooLargeForContentLoading(file, contentSize);",
      "right" : "return !myNoLimitCheckTypes.contains(file.getFileType()) || SingleRootFileViewProvider.isTooLargeForContentLoading(file, contentSize);",
      "info" : "ReturnStatement[93432-93566]:ReturnStatement[93432-93566]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[93577-93590]:ReturnStatement[93577-93590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93703-93756]:Block[93703-93756]"
    }, {
      "left" : "return new UnindexedFilesFinder(indicator);",
      "right" : "return new UnindexedFilesFinder(indicator);",
      "info" : "ReturnStatement[93709-93752]:ReturnStatement[93709-93752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93863-95373]:Block[93863-95373]"
    }, {
      "left" : "myIndexableSets.add(set);",
      "right" : "myIndexableSets.add(set);",
      "info" : "ExpressionStatement[93869-93894]:ExpressionStatement[93869-93894]"
    }, {
      "left" : "myIndexableSetToProjectMap.put(set, project);",
      "right" : "myIndexableSetToProjectMap.put(set, project);",
      "info" : "ExpressionStatement[93899-93944]:ExpressionStatement[93899-93944]"
    }, {
      "left" : "if (project != null)",
      "right" : "if (project != null)",
      "info" : "IfStatement[93949-95369]:IfStatement[93949-95369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93970-95369]:Block[93970-95369]"
    }, {
      "left" : "((PsiManagerImpl)PsiManager.getInstance(project)).addTreeChangePreprocessor(new PsiTreeChangePreprocessor() {\n        @Override\n        public void treeChanged(@NotNull PsiTreeChangeEventImpl event) {\n          if (event.isGenericChange() &&\n              event.getCode() == PsiTreeChangeEventImpl.PsiEventType.CHILDREN_CHANGED) {\n            PsiFile file = event.getFile();\n            if (file != null) {\n              VirtualFile virtualFile = file.getVirtualFile();\n              if (!clearUpToDateStateForPsiIndicesOfUnsavedDocuments(virtualFile)) {\n                // change in persistent file\n                if (virtualFile instanceof VirtualFileWithId) {\n                  int fileId = ((VirtualFileWithId)virtualFile).getId();\n                  boolean wasIndexed = false;\n                  for (ID<?, ?> psiBackedIndex : myPsiDependentIndices) {\n                    if (IndexingStamp.isFileIndexedStateCurrent(fileId, psiBackedIndex)) {\n                      IndexingStamp.setFileIndexedStateOutdated(fileId, psiBackedIndex);\n                      wasIndexed = true;\n                    }\n                  }\n                  if (wasIndexed) {\n                    myChangedFilesCollector.scheduleForUpdate(virtualFile);\n                    IndexingStamp.flushCache(fileId);\n                  }\n                }\n              }\n            }\n          }\n        }\n      });",
      "right" : "((PsiManagerImpl)PsiManager.getInstance(project)).addTreeChangePreprocessor(new PsiTreeChangePreprocessor() {\n        @Override\n        public void treeChanged(@NotNull PsiTreeChangeEventImpl event) {\n          if (event.isGenericChange() &&\n              event.getCode() == PsiTreeChangeEventImpl.PsiEventType.CHILDREN_CHANGED) {\n            PsiFile file = event.getFile();\n            if (file != null) {\n              VirtualFile virtualFile = file.getVirtualFile();\n              if (!clearUpToDateStateForPsiIndicesOfUnsavedDocuments(virtualFile)) {\n                // change in persistent file\n                if (virtualFile instanceof VirtualFileWithId) {\n                  int fileId = ((VirtualFileWithId)virtualFile).getId();\n                  boolean wasIndexed = false;\n                  for (ID<?, ?> psiBackedIndex : myPsiDependentIndices) {\n                    if (IndexingStamp.isFileIndexedStateCurrent(fileId, psiBackedIndex)) {\n                      IndexingStamp.setFileIndexedStateOutdated(fileId, psiBackedIndex);\n                      wasIndexed = true;\n                    }\n                  }\n                  if (wasIndexed) {\n                    myChangedFilesCollector.scheduleForUpdate(virtualFile);\n                    IndexingStamp.flushCache(fileId);\n                  }\n                }\n              }\n            }\n          }\n        }\n      });",
      "info" : "ExpressionStatement[93978-95363]:ExpressionStatement[93978-95363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94177-95353]:Block[94177-95353]"
    }, {
      "left" : "if (event.isGenericChange() &&\n              event.getCode() == PsiTreeChangeEventImpl.PsiEventType.CHILDREN_CHANGED)",
      "right" : "if (event.isGenericChange() &&\n              event.getCode() == PsiTreeChangeEventImpl.PsiEventType.CHILDREN_CHANGED)",
      "info" : "IfStatement[94189-95343]:IfStatement[94189-95343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94307-95343]:Block[94307-95343]"
    }, {
      "left" : "PsiFile file = event.getFile();",
      "right" : "PsiFile file = event.getFile();",
      "info" : "VariableDeclarationStatement[94321-94352]:VariableDeclarationStatement[94321-94352]"
    }, {
      "left" : "if (file != null)",
      "right" : "if (file != null)",
      "info" : "IfStatement[94365-95331]:IfStatement[94365-95331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94383-95331]:Block[94383-95331]"
    }, {
      "left" : "VirtualFile virtualFile = file.getVirtualFile();",
      "right" : "VirtualFile virtualFile = file.getVirtualFile();",
      "info" : "VariableDeclarationStatement[94399-94447]:VariableDeclarationStatement[94399-94447]"
    }, {
      "left" : "if (!clearUpToDateStateForPsiIndicesOfUnsavedDocuments(virtualFile))",
      "right" : "if (!clearUpToDateStateForPsiIndicesOfUnsavedDocuments(virtualFile))",
      "info" : "IfStatement[94462-95317]:IfStatement[94462-95317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94531-95317]:Block[94531-95317]"
    }, {
      "left" : "if (virtualFile instanceof VirtualFileWithId)",
      "right" : "if (virtualFile instanceof VirtualFileWithId)",
      "info" : "IfStatement[94594-95301]:IfStatement[94594-95301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94640-95301]:Block[94640-95301]"
    }, {
      "left" : "int fileId = ((VirtualFileWithId)virtualFile).getId();",
      "right" : "int fileId = ((VirtualFileWithId)virtualFile).getId();",
      "info" : "VariableDeclarationStatement[94660-94714]:VariableDeclarationStatement[94660-94714]"
    }, {
      "left" : "boolean wasIndexed = false;",
      "right" : "boolean wasIndexed = false;",
      "info" : "VariableDeclarationStatement[94733-94760]:VariableDeclarationStatement[94733-94760]"
    }, {
      "left" : "for (ID<?, ?> psiBackedIndex : myPsiDependentIndices)",
      "right" : "for (ID<?, ?> psiBackedIndex : myPsiDependentIndices)",
      "info" : "EnhancedForStatement[94779-95097]:EnhancedForStatement[94779-95097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94833-95097]:Block[94833-95097]"
    }, {
      "left" : "if (IndexingStamp.isFileIndexedStateCurrent(fileId, psiBackedIndex))",
      "right" : "if (IndexingStamp.isFileIndexedStateCurrent(fileId, psiBackedIndex))",
      "info" : "IfStatement[94855-95077]:IfStatement[94855-95077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94924-95077]:Block[94924-95077]"
    }, {
      "left" : "IndexingStamp.setFileIndexedStateOutdated(fileId, psiBackedIndex);",
      "right" : "IndexingStamp.setFileIndexedStateOutdated(fileId, psiBackedIndex);",
      "info" : "ExpressionStatement[94948-95014]:ExpressionStatement[94948-95014]"
    }, {
      "left" : "wasIndexed = true;",
      "right" : "wasIndexed = true;",
      "info" : "ExpressionStatement[95037-95055]:ExpressionStatement[95037-95055]"
    }, {
      "left" : "if (wasIndexed)",
      "right" : "if (wasIndexed)",
      "info" : "IfStatement[95116-95283]:IfStatement[95116-95283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95132-95283]:Block[95132-95283]"
    }, {
      "left" : "myChangedFilesCollector.scheduleForUpdate(virtualFile);",
      "right" : "myChangedFilesCollector.scheduleForUpdate(virtualFile);",
      "info" : "ExpressionStatement[95154-95209]:ExpressionStatement[95154-95209]"
    }, {
      "left" : "IndexingStamp.flushCache(fileId);",
      "right" : "IndexingStamp.flushCache(fileId);",
      "info" : "ExpressionStatement[95230-95263]:ExpressionStatement[95230-95263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95451-95897]:Block[95451-95897]"
    }, {
      "left" : "if (!myIndexableSetToProjectMap.containsKey(set))",
      "right" : "if (!myIndexableSetToProjectMap.containsKey(set))",
      "info" : "IfStatement[95457-95514]:IfStatement[95457-95514]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[95507-95514]:ReturnStatement[95507-95514]"
    }, {
      "left" : "myChangedFilesCollector.ensureAllInvalidateTasksCompleted();",
      "right" : "myChangedFilesCollector.ensureAllInvalidateTasksCompleted();",
      "info" : "ExpressionStatement[95519-95579]:ExpressionStatement[95519-95579]"
    }, {
      "left" : "IndexingStamp.flushCaches();",
      "right" : "IndexingStamp.flushCaches();",
      "info" : "ExpressionStatement[95584-95612]:ExpressionStatement[95584-95612]"
    }, {
      "left" : "myIndexableSets.remove(set);",
      "right" : "myIndexableSets.remove(set);",
      "info" : "ExpressionStatement[95617-95645]:ExpressionStatement[95617-95645]"
    }, {
      "left" : "myIndexableSetToProjectMap.remove(set);",
      "right" : "myIndexableSetToProjectMap.remove(set);",
      "info" : "ExpressionStatement[95650-95689]:ExpressionStatement[95650-95689]"
    }, {
      "left" : "for (VirtualFile file : myChangedFilesCollector.getAllFilesToUpdate())",
      "right" : "for (VirtualFile file : myChangedFilesCollector.getAllFilesToUpdate())",
      "info" : "EnhancedForStatement[95695-95893]:EnhancedForStatement[95695-95893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95766-95893]:Block[95766-95893]"
    }, {
      "left" : "if (getIndexableSetForFile(file) == null)",
      "right" : "if (getIndexableSetForFile(file) == null)",
      "info" : "IfStatement[95774-95887]:IfStatement[95774-95887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95816-95887]:Block[95816-95887]"
    }, {
      "left" : "myChangedFilesCollector.myFilesToUpdate.remove(file);",
      "right" : "myChangedFilesCollector.myFilesToUpdate.remove(file);",
      "info" : "ExpressionStatement[95826-95879]:ExpressionStatement[95826-95879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95970-96064]:Block[95970-96064]"
    }, {
      "left" : "return IndexInfrastructure.findFileById((PersistentFS)ManagingFS.getInstance(), id);",
      "right" : "return IndexInfrastructure.findFileById((PersistentFS)ManagingFS.getInstance(), id);",
      "info" : "ReturnStatement[95976-96060]:ReturnStatement[95976-96060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96192-96271]:Block[96192-96271]"
    }, {
      "left" : "return PsiDocumentManager.getInstance(project).getCachedPsiFile(doc);",
      "right" : "return PsiDocumentManager.getInstance(project).getCachedPsiFile(doc);",
      "info" : "ReturnStatement[96198-96267]:ReturnStatement[96198-96267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96440-96476]:Block[96440-96476]"
    }, {
      "left" : "myDelegate = delegate;",
      "right" : "myDelegate = delegate;",
      "info" : "ExpressionStatement[96448-96470]:ExpressionStatement[96448-96470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96556-96643]:Block[96556-96643]"
    }, {
      "left" : "return file instanceof VirtualFileWithId && myDelegate.acceptInput(file);",
      "right" : "return file instanceof VirtualFileWithId && myDelegate.acceptInput(file);",
      "info" : "ReturnStatement[96564-96637]:ReturnStatement[96564-96637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96694-96843]:Block[96694-96843]"
    }, {
      "left" : "final VirtualFile[] roots = ManagingFS.getInstance().getRoots();",
      "right" : "final VirtualFile[] roots = ManagingFS.getInstance().getRoots();",
      "info" : "VariableDeclarationStatement[96700-96764]:VariableDeclarationStatement[96700-96764]"
    }, {
      "left" : "for (VirtualFile root : roots)",
      "right" : "for (VirtualFile root : roots)",
      "info" : "EnhancedForStatement[96769-96839]:EnhancedForStatement[96769-96839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96800-96839]:Block[96800-96839]"
    }, {
      "left" : "cleanProcessedFlag(root);",
      "right" : "cleanProcessedFlag(root);",
      "info" : "ExpressionStatement[96808-96833]:ExpressionStatement[96808-96833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96919-97273]:Block[96919-97273]"
    }, {
      "left" : "if (!(file instanceof VirtualFileSystemEntry))",
      "right" : "if (!(file instanceof VirtualFileSystemEntry))",
      "info" : "IfStatement[96925-96979]:IfStatement[96925-96979]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96972-96979]:ReturnStatement[96972-96979]"
    }, {
      "left" : "final VirtualFileSystemEntry nvf = (VirtualFileSystemEntry)file;",
      "right" : "final VirtualFileSystemEntry nvf = (VirtualFileSystemEntry)file;",
      "info" : "VariableDeclarationStatement[96985-97049]:VariableDeclarationStatement[96985-97049]"
    }, {
      "left" : "if (file.isDirectory())",
      "right" : "if (file.isDirectory())",
      "info" : "IfStatement[97054-97269]:IfStatement[97054-97269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97078-97219]:Block[97078-97219]"
    }, {
      "left" : "nvf.setFileIndexed(false);",
      "right" : "nvf.setFileIndexed(false);",
      "info" : "ExpressionStatement[97086-97112]:ExpressionStatement[97086-97112]"
    }, {
      "left" : "for (VirtualFile child : nvf.getCachedChildren())",
      "right" : "for (VirtualFile child : nvf.getCachedChildren())",
      "info" : "EnhancedForStatement[97119-97213]:EnhancedForStatement[97119-97213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97169-97213]:Block[97169-97213]"
    }, {
      "left" : "cleanProcessedFlag(child);",
      "right" : "cleanProcessedFlag(child);",
      "info" : "ExpressionStatement[97179-97205]:ExpressionStatement[97179-97205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97229-97269]:Block[97229-97269]"
    }, {
      "left" : "nvf.setFileIndexed(false);",
      "right" : "nvf.setFileIndexed(false);",
      "info" : "ExpressionStatement[97237-97263]:ExpressionStatement[97237-97263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97426-97556]:Block[97426-97556]"
    }, {
      "left" : "PushedFilePropertiesUpdaterImpl.invoke2xConcurrentlyIfPossible(collectScanRootRunnables(processor, project, indicator));",
      "right" : "PushedFilePropertiesUpdaterImpl.invoke2xConcurrentlyIfPossible(collectScanRootRunnables(processor, project, indicator));",
      "info" : "ExpressionStatement[97432-97552]:ExpressionStatement[97432-97552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97715-97806]:Block[97715-97806]"
    }, {
      "left" : "for(Runnable r: collectScanRootRunnables(processor, project, indicator)) r.run();",
      "right" : "for(Runnable r: collectScanRootRunnables(processor, project, indicator)) r.run();",
      "info" : "EnhancedForStatement[97721-97802]:EnhancedForStatement[97721-97802]"
    }, {
      "left" : "r.run();",
      "right" : "r.run();",
      "info" : "ExpressionStatement[97794-97802]:ExpressionStatement[97794-97802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98083-101314]:Block[98083-101314]"
    }, {
      "left" : "if (project.isDisposed())",
      "right" : "if (project.isDisposed())",
      "info" : "IfStatement[98089-98160]:IfStatement[98089-98160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98115-98160]:Block[98115-98160]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[98123-98154]:ReturnStatement[98123-98154]"
    }, {
      "left" : "List<Runnable> tasks = new ArrayList<Runnable>();",
      "right" : "List<Runnable> tasks = new ArrayList<Runnable>();",
      "info" : "VariableDeclarationStatement[98166-98215]:VariableDeclarationStatement[98166-98215]"
    }, {
      "left" : "final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex();",
      "right" : "final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex();",
      "info" : "VariableDeclarationStatement[98221-98318]:VariableDeclarationStatement[98221-98318]"
    }, {
      "left" : "tasks.add(new Runnable() {\n      @Override\n      public void run() {\n        projectFileIndex.iterateContent(processor);\n      }\n    });",
      "right" : "tasks.add(new Runnable() {\n      @Override\n      public void run() {\n        projectFileIndex.iterateContent(processor);\n      }\n    });",
      "info" : "ExpressionStatement[98323-98459]:ExpressionStatement[98323-98459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98390-98451]:Block[98390-98451]"
    }, {
      "left" : "projectFileIndex.iterateContent(processor);",
      "right" : "projectFileIndex.iterateContent(processor);",
      "info" : "ExpressionStatement[98400-98443]:ExpressionStatement[98400-98443]"
    }, {
      "left" : "final Set<VirtualFile> visitedRoots = ContainerUtil.newConcurrentSet();",
      "right" : "final Set<VirtualFile> visitedRoots = ContainerUtil.newConcurrentSet();",
      "info" : "VariableDeclarationStatement[98824-98895]:VariableDeclarationStatement[98824-98895]"
    }, {
      "left" : "for (IndexedRootsProvider provider : Extensions.getExtensions(IndexedRootsProvider.EP_NAME))",
      "right" : "for (IndexedRootsProvider provider : Extensions.getExtensions(IndexedRootsProvider.EP_NAME))",
      "info" : "EnhancedForStatement[98900-100052]:EnhancedForStatement[98900-100052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98993-100052]:Block[98993-100052]"
    }, {
      "left" : "if (project.isDisposed())",
      "right" : "if (project.isDisposed())",
      "info" : "IfStatement[99147-99204]:IfStatement[99147-99204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99173-99204]:Block[99173-99204]"
    }, {
      "left" : "return tasks;",
      "right" : "return tasks;",
      "info" : "ReturnStatement[99183-99196]:ReturnStatement[99183-99196]"
    }, {
      "left" : "for (final VirtualFile root : IndexableSetContributor.getRootsToIndex(provider))",
      "right" : "for (final VirtualFile root : IndexableSetContributor.getRootsToIndex(provider))",
      "info" : "EnhancedForStatement[99211-99617]:EnhancedForStatement[99211-99617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99292-99617]:Block[99292-99617]"
    }, {
      "left" : "if (visitedRoots.add(root))",
      "right" : "if (visitedRoots.add(root))",
      "info" : "IfStatement[99302-99609]:IfStatement[99302-99609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99330-99609]:Block[99330-99609]"
    }, {
      "left" : "tasks.add(new Runnable() {\n            @Override\n            public void run() {\n              if (project.isDisposed() || !root.isValid()) return;\n              iterateRecursively(root, processor, indicator, visitedRoots, null);\n            }\n          });",
      "right" : "tasks.add(new Runnable() {\n            @Override\n            public void run() {\n              if (project.isDisposed() || !root.isValid()) return;\n              iterateRecursively(root, processor, indicator, visitedRoots, null);\n            }\n          });",
      "info" : "ExpressionStatement[99342-99599]:ExpressionStatement[99342-99599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99421-99585]:Block[99421-99585]"
    }, {
      "left" : "if (project.isDisposed() || !root.isValid())",
      "right" : "if (project.isDisposed() || !root.isValid())",
      "info" : "IfStatement[99437-99489]:IfStatement[99437-99489]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[99482-99489]:ReturnStatement[99482-99489]"
    }, {
      "left" : "iterateRecursively(root, processor, indicator, visitedRoots, null);",
      "right" : "iterateRecursively(root, processor, indicator, visitedRoots, null);",
      "info" : "ExpressionStatement[99504-99571]:ExpressionStatement[99504-99571]"
    }, {
      "left" : "for (final VirtualFile root : IndexableSetContributor.getProjectRootsToIndex(provider, project))",
      "right" : "for (final VirtualFile root : IndexableSetContributor.getProjectRootsToIndex(provider, project))",
      "info" : "EnhancedForStatement[99624-100046]:EnhancedForStatement[99624-100046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99721-100046]:Block[99721-100046]"
    }, {
      "left" : "if (visitedRoots.add(root))",
      "right" : "if (visitedRoots.add(root))",
      "info" : "IfStatement[99731-100038]:IfStatement[99731-100038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99759-100038]:Block[99759-100038]"
    }, {
      "left" : "tasks.add(new Runnable() {\n            @Override\n            public void run() {\n              if (project.isDisposed() || !root.isValid()) return;\n              iterateRecursively(root, processor, indicator, visitedRoots, null);\n            }\n          });",
      "right" : "tasks.add(new Runnable() {\n            @Override\n            public void run() {\n              if (project.isDisposed() || !root.isValid()) return;\n              iterateRecursively(root, processor, indicator, visitedRoots, null);\n            }\n          });",
      "info" : "ExpressionStatement[99771-100028]:ExpressionStatement[99771-100028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99850-100014]:Block[99850-100014]"
    }, {
      "left" : "if (project.isDisposed() || !root.isValid())",
      "right" : "if (project.isDisposed() || !root.isValid())",
      "info" : "IfStatement[99866-99918]:IfStatement[99866-99918]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[99911-99918]:ReturnStatement[99911-99918]"
    }, {
      "left" : "iterateRecursively(root, processor, indicator, visitedRoots, null);",
      "right" : "iterateRecursively(root, processor, indicator, visitedRoots, null);",
      "info" : "ExpressionStatement[99933-100000]:ExpressionStatement[99933-100000]"
    }, {
      "left" : "for (final Module module : ModuleManager.getInstance(project).getModules())",
      "right" : "for (final Module module : ModuleManager.getInstance(project).getModules())",
      "info" : "EnhancedForStatement[100094-101292]:EnhancedForStatement[100094-101292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100170-101292]:Block[100170-101292]"
    }, {
      "left" : "OrderEntry[] orderEntries = ModuleRootManager.getInstance(module).getOrderEntries();",
      "right" : "OrderEntry[] orderEntries = ModuleRootManager.getInstance(module).getOrderEntries();",
      "info" : "VariableDeclarationStatement[100178-100262]:VariableDeclarationStatement[100178-100262]"
    }, {
      "left" : "for (OrderEntry orderEntry : orderEntries)",
      "right" : "for (OrderEntry orderEntry : orderEntries)",
      "info" : "EnhancedForStatement[100269-101286]:EnhancedForStatement[100269-101286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100312-101286]:Block[100312-101286]"
    }, {
      "left" : "if (orderEntry instanceof LibraryOrSdkOrderEntry)",
      "right" : "if (orderEntry instanceof LibraryOrSdkOrderEntry)",
      "info" : "IfStatement[100322-101278]:IfStatement[100322-101278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100372-101278]:Block[100372-101278]"
    }, {
      "left" : "if (orderEntry.isValid())",
      "right" : "if (orderEntry.isValid())",
      "info" : "IfStatement[100384-101268]:IfStatement[100384-101268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100410-101268]:Block[100410-101268]"
    }, {
      "left" : "final LibraryOrSdkOrderEntry entry = (LibraryOrSdkOrderEntry)orderEntry;",
      "right" : "final LibraryOrSdkOrderEntry entry = (LibraryOrSdkOrderEntry)orderEntry;",
      "info" : "VariableDeclarationStatement[100424-100496]:VariableDeclarationStatement[100424-100496]"
    }, {
      "left" : "final VirtualFile[] libSources = entry.getRootFiles(OrderRootType.SOURCES);",
      "right" : "final VirtualFile[] libSources = entry.getRootFiles(OrderRootType.SOURCES);",
      "info" : "VariableDeclarationStatement[100509-100584]:VariableDeclarationStatement[100509-100584]"
    }, {
      "left" : "final VirtualFile[] libClasses = entry.getRootFiles(OrderRootType.CLASSES);",
      "right" : "final VirtualFile[] libClasses = entry.getRootFiles(OrderRootType.CLASSES);",
      "info" : "VariableDeclarationStatement[100597-100672]:VariableDeclarationStatement[100597-100672]"
    }, {
      "left" : "for (VirtualFile[] roots : new VirtualFile[][]{libSources, libClasses})",
      "right" : "for (VirtualFile[] roots : new VirtualFile[][]{libSources, libClasses})",
      "info" : "EnhancedForStatement[100685-101256]:EnhancedForStatement[100685-101256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100757-101256]:Block[100757-101256]"
    }, {
      "left" : "for (final VirtualFile root : roots)",
      "right" : "for (final VirtualFile root : roots)",
      "info" : "EnhancedForStatement[100773-101242]:EnhancedForStatement[100773-101242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100810-101242]:Block[100810-101242]"
    }, {
      "left" : "if (visitedRoots.add(root))",
      "right" : "if (visitedRoots.add(root))",
      "info" : "IfStatement[100828-101226]:IfStatement[100828-101226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100856-101226]:Block[100856-101226]"
    }, {
      "left" : "tasks.add(new Runnable() {\n                    @Override\n                    public void run() {\n                      if (project.isDisposed() || module.isDisposed() || !root.isValid()) return;\n                      iterateRecursively(root, processor, indicator, null, projectFileIndex);\n                    }\n                  });",
      "right" : "tasks.add(new Runnable() {\n                    @Override\n                    public void run() {\n                      if (project.isDisposed() || module.isDisposed() || !root.isValid()) return;\n                      iterateRecursively(root, processor, indicator, null, projectFileIndex);\n                    }\n                  });",
      "info" : "ExpressionStatement[100876-101208]:ExpressionStatement[100876-101208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100971-101186]:Block[100971-101186]"
    }, {
      "left" : "if (project.isDisposed() || module.isDisposed() || !root.isValid())",
      "right" : "if (project.isDisposed() || module.isDisposed() || !root.isValid())",
      "info" : "IfStatement[100995-101070]:IfStatement[100995-101070]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[101063-101070]:ReturnStatement[101063-101070]"
    }, {
      "left" : "iterateRecursively(root, processor, indicator, null, projectFileIndex);",
      "right" : "iterateRecursively(root, processor, indicator, null, projectFileIndex);",
      "info" : "ExpressionStatement[101093-101164]:ExpressionStatement[101093-101164]"
    }, {
      "left" : "return tasks;",
      "right" : "return tasks;",
      "info" : "ReturnStatement[101297-101310]:ReturnStatement[101297-101310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102802-102850]:Block[101701-101749]"
    }, {
      "left" : "StorageGuard.this.leave(true);",
      "right" : "StorageGuard.this.leave(true);",
      "info" : "ExpressionStatement[102812-102842]:ExpressionStatement[101711-101741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103004-103053]:Block[101903-101952]"
    }, {
      "left" : "StorageGuard.this.leave(false);",
      "right" : "StorageGuard.this.leave(false);",
      "info" : "ExpressionStatement[103014-103045]:ExpressionStatement[101913-101944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103143-103446]:Block[102042-102345]"
    }, {
      "left" : "if (mode)",
      "right" : "if (mode)",
      "info" : "IfStatement[103151-103440]:IfStatement[102050-102339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103161-103294]:Block[102060-102193]"
    }, {
      "left" : "while (myHolds < 0)",
      "right" : "while (myHolds < 0)",
      "info" : "WhileStatement[103171-103222]:WhileStatement[102070-102121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103191-103222]:Block[102090-102121]"
    }, {
      "left" : "doWait();",
      "right" : "doWait();",
      "info" : "ExpressionStatement[103203-103212]:ExpressionStatement[102102-102111]"
    }, {
      "left" : "myHolds++;",
      "right" : "myHolds++;",
      "info" : "ExpressionStatement[103231-103241]:ExpressionStatement[102130-102140]"
    }, {
      "left" : "return myTrueStorageModeExitHandler;",
      "right" : "return myTrueStorageModeExitHandler;",
      "info" : "ReturnStatement[103250-103286]:ReturnStatement[102149-102185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103306-103440]:Block[102205-102339]"
    }, {
      "left" : "while (myHolds > 0)",
      "right" : "while (myHolds > 0)",
      "info" : "WhileStatement[103316-103367]:WhileStatement[102215-102266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103336-103367]:Block[102235-102266]"
    }, {
      "left" : "doWait();",
      "right" : "doWait();",
      "info" : "ExpressionStatement[103348-103357]:ExpressionStatement[102247-102256]"
    }, {
      "left" : "myHolds--;",
      "right" : "myHolds--;",
      "info" : "ExpressionStatement[103376-103386]:ExpressionStatement[102275-102285]"
    }, {
      "left" : "return myFalseStorageModeExitHandler;",
      "right" : "return myFalseStorageModeExitHandler;",
      "info" : "ReturnStatement[103395-103432]:ReturnStatement[102294-102331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103474-103630]:Block[102373-102529]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[103482-103624]:TryStatement[102381-102523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103486-103532]:Block[102385-102431]"
    }, {
      "left" : "++myWaiters;",
      "right" : "++myWaiters;",
      "info" : "ExpressionStatement[103496-103508]:ExpressionStatement[102395-102407]"
    }, {
      "left" : "wait();",
      "right" : "wait();",
      "info" : "ExpressionStatement[103517-103524]:ExpressionStatement[102416-102423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103576-103585]:Block[102475-102484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103594-103624]:Block[102493-102523]"
    }, {
      "left" : "--myWaiters;",
      "right" : "--myWaiters;",
      "info" : "ExpressionStatement[103604-103616]:ExpressionStatement[102503-102515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103682-103793]:Block[102581-102692]"
    }, {
      "left" : "myHolds += mode ? -1 : 1;",
      "right" : "myHolds += mode ? -1 : 1;",
      "info" : "ExpressionStatement[103690-103715]:ExpressionStatement[102589-102614]"
    }, {
      "left" : "if (myHolds == 0 && myWaiters > 0)",
      "right" : "if (myHolds == 0 && myWaiters > 0)",
      "info" : "IfStatement[103722-103787]:IfStatement[102621-102686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103757-103787]:Block[102656-102686]"
    }, {
      "left" : "notifyAll();",
      "right" : "notifyAll();",
      "info" : "ExpressionStatement[103767-103779]:ExpressionStatement[102666-102678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103958-103992]:Block[102857-102891]"
    }, {
      "left" : "myIndexId = indexId;",
      "right" : "myIndexId = indexId;",
      "info" : "ExpressionStatement[103966-103986]:ExpressionStatement[102865-102885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104063-104169]:Block[102962-103068]"
    }, {
      "left" : "indexUnsavedDocument(document, myIndexId, project, myFileDocumentManager.getFile(document));",
      "right" : "indexUnsavedDocument(document, myIndexId, project, myFileDocumentManager.getFile(document));",
      "info" : "ExpressionStatement[104071-104163]:ExpressionStatement[102970-103062]"
    } ]
  },
  "interFileMappings" : { }
}