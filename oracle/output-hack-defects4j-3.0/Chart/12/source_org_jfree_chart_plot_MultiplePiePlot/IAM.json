{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MultiplePiePlot",
      "right" : "MultiplePiePlot",
      "info" : "TypeDeclaration[3753-21419]:TypeDeclaration[3753-21416]"
    }, {
      "left" : "private static final long serialVersionUID = -355377800470807389L;",
      "right" : "private static final long serialVersionUID = -355377800470807389L;",
      "info" : "FieldDeclaration[3940-4037]:FieldDeclaration[3940-4037]"
    }, {
      "left" : "private JFreeChart pieChart;",
      "right" : "private JFreeChart pieChart;",
      "info" : "FieldDeclaration[4045-4140]:FieldDeclaration[4045-4140]"
    }, {
      "left" : "private CategoryDataset dataset;",
      "right" : "private CategoryDataset dataset;",
      "info" : "FieldDeclaration[4148-4205]:FieldDeclaration[4148-4205]"
    }, {
      "left" : "private TableOrder dataExtractOrder;",
      "right" : "private TableOrder dataExtractOrder;",
      "info" : "FieldDeclaration[4213-4307]:FieldDeclaration[4213-4307]"
    }, {
      "left" : "private double limit = 0.0;",
      "right" : "private double limit = 0.0;",
      "info" : "FieldDeclaration[4315-4388]:FieldDeclaration[4315-4388]"
    }, {
      "left" : "private Comparable aggregatedItemsKey;",
      "right" : "private Comparable aggregatedItemsKey;",
      "info" : "FieldDeclaration[4396-4515]:FieldDeclaration[4396-4515]"
    }, {
      "left" : "private transient Paint aggregatedItemsPaint;",
      "right" : "private transient Paint aggregatedItemsPaint;",
      "info" : "FieldDeclaration[4523-4651]:FieldDeclaration[4523-4651]"
    }, {
      "left" : "private transient Map sectionPaints;",
      "right" : "private transient Map sectionPaints;",
      "info" : "FieldDeclaration[4659-4778]:FieldDeclaration[4659-4778]"
    }, {
      "left" : "public MultiplePiePlot()",
      "right" : "public MultiplePiePlot()",
      "info" : "MethodDeclaration[4786-4899]:MethodDeclaration[4786-4899]"
    }, {
      "left" : "public MultiplePiePlot(CategoryDataset dataset)",
      "right" : "public MultiplePiePlot(CategoryDataset dataset)",
      "info" : "MethodDeclaration[4907-5738]:MethodDeclaration[4907-5735]"
    }, {
      "left" : "public CategoryDataset getDataset()",
      "right" : "public CategoryDataset getDataset()",
      "info" : "MethodDeclaration[5746-5950]:MethodDeclaration[5743-5947]"
    }, {
      "left" : "public void setDataset(CategoryDataset dataset)",
      "right" : "public void setDataset(CategoryDataset dataset)",
      "info" : "MethodDeclaration[5958-6831]:MethodDeclaration[5955-6828]"
    }, {
      "left" : "public JFreeChart getPieChart()",
      "right" : "public JFreeChart getPieChart()",
      "info" : "MethodDeclaration[6839-7116]:MethodDeclaration[6836-7113]"
    }, {
      "left" : "public void setPieChart(JFreeChart pieChart)",
      "right" : "public void setPieChart(JFreeChart pieChart)",
      "info" : "MethodDeclaration[7124-7840]:MethodDeclaration[7121-7837]"
    }, {
      "left" : "public TableOrder getDataExtractOrder()",
      "right" : "public TableOrder getDataExtractOrder()",
      "info" : "MethodDeclaration[7848-8089]:MethodDeclaration[7845-8086]"
    }, {
      "left" : "public void setDataExtractOrder(TableOrder order)",
      "right" : "public void setDataExtractOrder(TableOrder order)",
      "info" : "MethodDeclaration[8097-8562]:MethodDeclaration[8094-8559]"
    }, {
      "left" : "public double getLimit()",
      "right" : "public double getLimit()",
      "info" : "MethodDeclaration[8570-8794]:MethodDeclaration[8567-8791]"
    }, {
      "left" : "public void setLimit(double limit)",
      "right" : "public void setLimit(double limit)",
      "info" : "MethodDeclaration[8802-9101]:MethodDeclaration[8799-9098]"
    }, {
      "left" : "public Comparable getAggregatedItemsKey()",
      "right" : "public Comparable getAggregatedItemsKey()",
      "info" : "MethodDeclaration[9109-9416]:MethodDeclaration[9106-9413]"
    }, {
      "left" : "public void setAggregatedItemsKey(Comparable key)",
      "right" : "public void setAggregatedItemsKey(Comparable key)",
      "info" : "MethodDeclaration[9424-9919]:MethodDeclaration[9421-9916]"
    }, {
      "left" : "public Paint getAggregatedItemsPaint()",
      "right" : "public Paint getAggregatedItemsPaint()",
      "info" : "MethodDeclaration[9927-10249]:MethodDeclaration[9924-10246]"
    }, {
      "left" : "public void setAggregatedItemsPaint(Paint paint)",
      "right" : "public void setAggregatedItemsPaint(Paint paint)",
      "info" : "MethodDeclaration[10257-10783]:MethodDeclaration[10254-10780]"
    }, {
      "left" : "public String getPlotType()",
      "right" : "public String getPlotType()",
      "info" : "MethodDeclaration[10791-11044]:MethodDeclaration[10788-11041]"
    }, {
      "left" : "public void draw(Graphics2D g2,\r\n                     Rectangle2D area,\r\n                     Point2D anchor,\r\n                     PlotState parentState,\r\n                     PlotRenderingInfo info)",
      "right" : "public void draw(Graphics2D g2,\r\n                     Rectangle2D area,\r\n                     Point2D anchor,\r\n                     PlotState parentState,\r\n                     PlotRenderingInfo info)",
      "info" : "MethodDeclaration[11052-15565]:MethodDeclaration[11049-15562]"
    }, {
      "left" : "private void prefetchSectionPaints()",
      "right" : "private void prefetchSectionPaints()",
      "info" : "MethodDeclaration[15573-17393]:MethodDeclaration[15570-17390]"
    }, {
      "left" : "public LegendItemCollection getLegendItems()",
      "right" : "public LegendItemCollection getLegendItems()",
      "info" : "MethodDeclaration[17401-19271]:MethodDeclaration[17398-19268]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[19279-20529]:MethodDeclaration[19276-20526]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream stream) throws IOException",
      "right" : "private void writeObject(ObjectOutputStream stream) throws IOException",
      "info" : "MethodDeclaration[20537-20897]:MethodDeclaration[20534-20894]"
    }, {
      "left" : "private void readObject(ObjectInputStream stream)\r\n        throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream stream)\r\n        throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[20905-21412]:MethodDeclaration[20902-21409]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3854-3860]:Modifier[3854-3860]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3861-3866]:TYPE_DECLARATION_KIND[3861-3866]"
    }, {
      "left" : "MultiplePiePlot",
      "right" : "MultiplePiePlot",
      "info" : "SimpleName[3867-3882]:SimpleName[3867-3882]"
    }, {
      "left" : "Plot",
      "right" : "Plot",
      "info" : "SimpleType[3891-3895]:SimpleType[3891-3895]"
    }, {
      "left" : "Cloneable",
      "right" : "Cloneable",
      "info" : "SimpleType[3907-3916]:SimpleType[3907-3916]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[3918-3930]:SimpleType[3918-3930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4845-4851]:Modifier[4845-4851]"
    }, {
      "left" : "MultiplePiePlot",
      "right" : "MultiplePiePlot",
      "info" : "SimpleName[4852-4867]:SimpleName[4852-4867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4870-4899]:Block[4870-4899]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[4881-4892]:ConstructorInvocation[4881-4892]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5028-5034]:Modifier[5028-5034]"
    }, {
      "left" : "MultiplePiePlot",
      "right" : "MultiplePiePlot",
      "info" : "SimpleName[5035-5050]:SimpleName[5035-5050]"
    }, {
      "left" : "CategoryDataset dataset",
      "right" : "CategoryDataset dataset",
      "info" : "SingleVariableDeclaration[5051-5074]:SingleVariableDeclaration[5051-5074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5076-5738]:Block[5076-5735]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[5087-5095]:SuperConstructorInvocation[5087-5095]"
    }, {
      "left" : "this.dataset = dataset;",
      "right" : "setDataset(dataset);",
      "info" : "ExpressionStatement[5105-5128]:ExpressionStatement[5105-5125]"
    }, {
      "left" : "dataset",
      "right" : "dataset",
      "info" : "SimpleName[5120-5127]:SimpleName[5116-5123]"
    }, {
      "left" : "PiePlot piePlot = new PiePlot(null);",
      "right" : "PiePlot piePlot = new PiePlot(null);",
      "info" : "VariableDeclarationStatement[5138-5174]:VariableDeclarationStatement[5135-5171]"
    }, {
      "left" : "this.pieChart = new JFreeChart(piePlot);",
      "right" : "this.pieChart = new JFreeChart(piePlot);",
      "info" : "ExpressionStatement[5184-5224]:ExpressionStatement[5181-5221]"
    }, {
      "left" : "this.pieChart.removeLegend();",
      "right" : "this.pieChart.removeLegend();",
      "info" : "ExpressionStatement[5234-5263]:ExpressionStatement[5231-5260]"
    }, {
      "left" : "this.dataExtractOrder = TableOrder.BY_COLUMN;",
      "right" : "this.dataExtractOrder = TableOrder.BY_COLUMN;",
      "info" : "ExpressionStatement[5273-5318]:ExpressionStatement[5270-5315]"
    }, {
      "left" : "this.pieChart.setBackgroundPaint(null);",
      "right" : "this.pieChart.setBackgroundPaint(null);",
      "info" : "ExpressionStatement[5328-5367]:ExpressionStatement[5325-5364]"
    }, {
      "left" : "TextTitle seriesTitle = new TextTitle(\"Series Title\",\r\n                new Font(\"SansSerif\", Font.BOLD, 12));",
      "right" : "TextTitle seriesTitle = new TextTitle(\"Series Title\",\r\n                new Font(\"SansSerif\", Font.BOLD, 12));",
      "info" : "VariableDeclarationStatement[5377-5486]:VariableDeclarationStatement[5374-5483]"
    }, {
      "left" : "seriesTitle.setPosition(RectangleEdge.BOTTOM);",
      "right" : "seriesTitle.setPosition(RectangleEdge.BOTTOM);",
      "info" : "ExpressionStatement[5496-5542]:ExpressionStatement[5493-5539]"
    }, {
      "left" : "this.pieChart.setTitle(seriesTitle);",
      "right" : "this.pieChart.setTitle(seriesTitle);",
      "info" : "ExpressionStatement[5552-5588]:ExpressionStatement[5549-5585]"
    }, {
      "left" : "this.aggregatedItemsKey = \"Other\";",
      "right" : "this.aggregatedItemsKey = \"Other\";",
      "info" : "ExpressionStatement[5598-5632]:ExpressionStatement[5595-5629]"
    }, {
      "left" : "this.aggregatedItemsPaint = Color.lightGray;",
      "right" : "this.aggregatedItemsPaint = Color.lightGray;",
      "info" : "ExpressionStatement[5642-5686]:ExpressionStatement[5639-5683]"
    }, {
      "left" : "this.sectionPaints = new HashMap();",
      "right" : "this.sectionPaints = new HashMap();",
      "info" : "ExpressionStatement[5696-5731]:ExpressionStatement[5693-5728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5876-5882]:Modifier[5873-5879]"
    }, {
      "left" : "CategoryDataset",
      "right" : "CategoryDataset",
      "info" : "SimpleType[5883-5898]:SimpleType[5880-5895]"
    }, {
      "left" : "getDataset",
      "right" : "getDataset",
      "info" : "SimpleName[5899-5909]:SimpleName[5896-5906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5912-5950]:Block[5909-5947]"
    }, {
      "left" : "return this.dataset;",
      "right" : "return this.dataset;",
      "info" : "ReturnStatement[5923-5943]:ReturnStatement[5920-5940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6166-6172]:Modifier[6163-6169]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6173-6177]:PrimitiveType[6170-6174]"
    }, {
      "left" : "setDataset",
      "right" : "setDataset",
      "info" : "SimpleName[6178-6188]:SimpleName[6175-6185]"
    }, {
      "left" : "CategoryDataset dataset",
      "right" : "CategoryDataset dataset",
      "info" : "SingleVariableDeclaration[6189-6212]:SingleVariableDeclaration[6186-6209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6214-6831]:Block[6211-6828]"
    }, {
      "left" : "if (this.dataset != null)",
      "right" : "if (this.dataset != null)",
      "info" : "IfStatement[6335-6427]:IfStatement[6332-6424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6361-6427]:Block[6358-6424]"
    }, {
      "left" : "this.dataset.removeChangeListener(this);",
      "right" : "this.dataset.removeChangeListener(this);",
      "info" : "ExpressionStatement[6376-6416]:ExpressionStatement[6373-6413]"
    }, {
      "left" : "this.dataset = dataset;",
      "right" : "this.dataset = dataset;",
      "info" : "ExpressionStatement[6519-6542]:ExpressionStatement[6516-6539]"
    }, {
      "left" : "if (dataset != null)",
      "right" : "if (dataset != null)",
      "info" : "IfStatement[6552-6681]:IfStatement[6549-6678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6573-6681]:Block[6570-6678]"
    }, {
      "left" : "setDatasetGroup(dataset.getGroup());",
      "right" : "setDatasetGroup(dataset.getGroup());",
      "info" : "ExpressionStatement[6588-6624]:ExpressionStatement[6585-6621]"
    }, {
      "left" : "dataset.addChangeListener(this);",
      "right" : "dataset.addChangeListener(this);",
      "info" : "ExpressionStatement[6638-6670]:ExpressionStatement[6635-6667]"
    }, {
      "left" : "datasetChanged(new DatasetChangeEvent(this, dataset));",
      "right" : "datasetChanged(new DatasetChangeEvent(this, dataset));",
      "info" : "ExpressionStatement[6770-6824]:ExpressionStatement[6767-6821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7045-7051]:Modifier[7042-7048]"
    }, {
      "left" : "JFreeChart",
      "right" : "JFreeChart",
      "info" : "SimpleType[7052-7062]:SimpleType[7049-7059]"
    }, {
      "left" : "getPieChart",
      "right" : "getPieChart",
      "info" : "SimpleName[7063-7074]:SimpleName[7060-7071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7077-7116]:Block[7074-7113]"
    }, {
      "left" : "return this.pieChart;",
      "right" : "return this.pieChart;",
      "info" : "ReturnStatement[7088-7109]:ReturnStatement[7085-7106]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7396-7402]:Modifier[7393-7399]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7403-7407]:PrimitiveType[7400-7404]"
    }, {
      "left" : "setPieChart",
      "right" : "setPieChart",
      "info" : "SimpleName[7408-7419]:SimpleName[7405-7416]"
    }, {
      "left" : "JFreeChart pieChart",
      "right" : "JFreeChart pieChart",
      "info" : "SingleVariableDeclaration[7420-7439]:SingleVariableDeclaration[7417-7436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7441-7840]:Block[7438-7837]"
    }, {
      "left" : "if (pieChart == null)",
      "right" : "if (pieChart == null)",
      "info" : "IfStatement[7452-7564]:IfStatement[7449-7561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7474-7564]:Block[7471-7561]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'pieChart' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'pieChart' argument.\");",
      "info" : "ThrowStatement[7489-7553]:ThrowStatement[7486-7550]"
    }, {
      "left" : "if (!(pieChart.getPlot() instanceof PiePlot))",
      "right" : "if (!(pieChart.getPlot() instanceof PiePlot))",
      "info" : "IfStatement[7574-7770]:IfStatement[7571-7767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7620-7770]:Block[7617-7767]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The 'pieChart' argument must \"\r\n                    + \"be a chart based on a PiePlot.\");",
      "right" : "throw new IllegalArgumentException(\"The 'pieChart' argument must \"\r\n                    + \"be a chart based on a PiePlot.\");",
      "info" : "ThrowStatement[7635-7759]:ThrowStatement[7632-7756]"
    }, {
      "left" : "this.pieChart = pieChart;",
      "right" : "this.pieChart = pieChart;",
      "info" : "ExpressionStatement[7780-7805]:ExpressionStatement[7777-7802]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[7815-7833]:ExpressionStatement[7812-7830]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8002-8008]:Modifier[7999-8005]"
    }, {
      "left" : "TableOrder",
      "right" : "TableOrder",
      "info" : "SimpleType[8009-8019]:SimpleType[8006-8016]"
    }, {
      "left" : "getDataExtractOrder",
      "right" : "getDataExtractOrder",
      "info" : "SimpleName[8020-8039]:SimpleName[8017-8036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8042-8089]:Block[8039-8086]"
    }, {
      "left" : "return this.dataExtractOrder;",
      "right" : "return this.dataExtractOrder;",
      "info" : "ReturnStatement[8053-8082]:ReturnStatement[8050-8079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8321-8327]:Modifier[8318-8324]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8328-8332]:PrimitiveType[8325-8329]"
    }, {
      "left" : "setDataExtractOrder",
      "right" : "setDataExtractOrder",
      "info" : "SimpleName[8333-8352]:SimpleName[8330-8349]"
    }, {
      "left" : "TableOrder order",
      "right" : "TableOrder order",
      "info" : "SingleVariableDeclaration[8353-8369]:SingleVariableDeclaration[8350-8366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8371-8562]:Block[8368-8559]"
    }, {
      "left" : "if (order == null)",
      "right" : "if (order == null)",
      "info" : "IfStatement[8382-8487]:IfStatement[8379-8484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8401-8487]:Block[8398-8484]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'order' argument\");",
      "right" : "throw new IllegalArgumentException(\"Null 'order' argument\");",
      "info" : "ThrowStatement[8416-8476]:ThrowStatement[8413-8473]"
    }, {
      "left" : "this.dataExtractOrder = order;",
      "right" : "this.dataExtractOrder = order;",
      "info" : "ExpressionStatement[8497-8527]:ExpressionStatement[8494-8524]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[8537-8555]:ExpressionStatement[8534-8552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8733-8739]:Modifier[8730-8736]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8740-8746]:PrimitiveType[8737-8743]"
    }, {
      "left" : "getLimit",
      "right" : "getLimit",
      "info" : "SimpleName[8747-8755]:SimpleName[8744-8752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8758-8794]:Block[8755-8791]"
    }, {
      "left" : "return this.limit;",
      "right" : "return this.limit;",
      "info" : "ReturnStatement[8769-8787]:ReturnStatement[8766-8784]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9001-9007]:Modifier[8998-9004]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9008-9012]:PrimitiveType[9005-9009]"
    }, {
      "left" : "setLimit",
      "right" : "setLimit",
      "info" : "SimpleName[9013-9021]:SimpleName[9010-9018]"
    }, {
      "left" : "double limit",
      "right" : "double limit",
      "info" : "SingleVariableDeclaration[9022-9034]:SingleVariableDeclaration[9019-9031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9036-9101]:Block[9033-9098]"
    }, {
      "left" : "this.limit = limit;",
      "right" : "this.limit = limit;",
      "info" : "ExpressionStatement[9047-9066]:ExpressionStatement[9044-9063]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[9076-9094]:ExpressionStatement[9073-9091]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9325-9331]:Modifier[9322-9328]"
    }, {
      "left" : "Comparable",
      "right" : "Comparable",
      "info" : "SimpleType[9332-9342]:SimpleType[9329-9339]"
    }, {
      "left" : "getAggregatedItemsKey",
      "right" : "getAggregatedItemsKey",
      "info" : "SimpleName[9343-9364]:SimpleName[9340-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9367-9416]:Block[9364-9413]"
    }, {
      "left" : "return this.aggregatedItemsKey;",
      "right" : "return this.aggregatedItemsKey;",
      "info" : "ReturnStatement[9378-9409]:ReturnStatement[9375-9406]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9681-9687]:Modifier[9678-9684]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9688-9692]:PrimitiveType[9685-9689]"
    }, {
      "left" : "setAggregatedItemsKey",
      "right" : "setAggregatedItemsKey",
      "info" : "SimpleName[9693-9714]:SimpleName[9690-9711]"
    }, {
      "left" : "Comparable key",
      "right" : "Comparable key",
      "info" : "SingleVariableDeclaration[9715-9729]:SingleVariableDeclaration[9712-9726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9731-9919]:Block[9728-9916]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[9742-9844]:IfStatement[9739-9841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9759-9844]:Block[9756-9841]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'key' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'key' argument.\");",
      "info" : "ThrowStatement[9774-9833]:ThrowStatement[9771-9830]"
    }, {
      "left" : "this.aggregatedItemsKey = key;",
      "right" : "this.aggregatedItemsKey = key;",
      "info" : "ExpressionStatement[9854-9884]:ExpressionStatement[9851-9881]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[9894-9912]:ExpressionStatement[9891-9909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10159-10165]:Modifier[10156-10162]"
    }, {
      "left" : "Paint",
      "right" : "Paint",
      "info" : "SimpleType[10166-10171]:SimpleType[10163-10168]"
    }, {
      "left" : "getAggregatedItemsPaint",
      "right" : "getAggregatedItemsPaint",
      "info" : "SimpleName[10172-10195]:SimpleName[10169-10192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10198-10249]:Block[10195-10246]"
    }, {
      "left" : "return this.aggregatedItemsPaint;",
      "right" : "return this.aggregatedItemsPaint;",
      "info" : "ReturnStatement[10209-10242]:ReturnStatement[10206-10239]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10538-10544]:Modifier[10535-10541]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10545-10549]:PrimitiveType[10542-10546]"
    }, {
      "left" : "setAggregatedItemsPaint",
      "right" : "setAggregatedItemsPaint",
      "info" : "SimpleName[10550-10573]:SimpleName[10547-10570]"
    }, {
      "left" : "Paint paint",
      "right" : "Paint paint",
      "info" : "SingleVariableDeclaration[10574-10585]:SingleVariableDeclaration[10571-10582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10587-10783]:Block[10584-10780]"
    }, {
      "left" : "if (paint == null)",
      "right" : "if (paint == null)",
      "info" : "IfStatement[10598-10704]:IfStatement[10595-10701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10617-10704]:Block[10614-10701]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "right" : "throw new IllegalArgumentException(\"Null 'paint' argument.\");",
      "info" : "ThrowStatement[10632-10693]:ThrowStatement[10629-10690]"
    }, {
      "left" : "this.aggregatedItemsPaint = paint;",
      "right" : "this.aggregatedItemsPaint = paint;",
      "info" : "ExpressionStatement[10714-10748]:ExpressionStatement[10711-10745]"
    }, {
      "left" : "fireChangeEvent();",
      "right" : "fireChangeEvent();",
      "info" : "ExpressionStatement[10758-10776]:ExpressionStatement[10755-10773]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10908-10914]:Modifier[10905-10911]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10915-10921]:SimpleType[10912-10918]"
    }, {
      "left" : "getPlotType",
      "right" : "getPlotType",
      "info" : "SimpleName[10922-10933]:SimpleName[10919-10930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10936-11044]:Block[10933-11041]"
    }, {
      "left" : "return \"Multiple Pie Plot\";",
      "right" : "return \"Multiple Pie Plot\";",
      "info" : "ReturnStatement[10947-10974]:ReturnStatement[10944-10971]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11484-11490]:Modifier[11481-11487]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11491-11495]:PrimitiveType[11488-11492]"
    }, {
      "left" : "draw",
      "right" : "draw",
      "info" : "SimpleName[11496-11500]:SimpleName[11493-11497]"
    }, {
      "left" : "Graphics2D g2",
      "right" : "Graphics2D g2",
      "info" : "SingleVariableDeclaration[11501-11514]:SingleVariableDeclaration[11498-11511]"
    }, {
      "left" : "Rectangle2D area",
      "right" : "Rectangle2D area",
      "info" : "SingleVariableDeclaration[11538-11554]:SingleVariableDeclaration[11535-11551]"
    }, {
      "left" : "Point2D anchor",
      "right" : "Point2D anchor",
      "info" : "SingleVariableDeclaration[11578-11592]:SingleVariableDeclaration[11575-11589]"
    }, {
      "left" : "PlotState parentState",
      "right" : "PlotState parentState",
      "info" : "SingleVariableDeclaration[11616-11637]:SingleVariableDeclaration[11613-11634]"
    }, {
      "left" : "PlotRenderingInfo info",
      "right" : "PlotRenderingInfo info",
      "info" : "SingleVariableDeclaration[11661-11683]:SingleVariableDeclaration[11658-11680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11685-15565]:Block[11682-15562]"
    }, {
      "left" : "RectangleInsets insets = getInsets();",
      "right" : "RectangleInsets insets = getInsets();",
      "info" : "VariableDeclarationStatement[11768-11805]:VariableDeclarationStatement[11765-11802]"
    }, {
      "left" : "insets.trim(area);",
      "right" : "insets.trim(area);",
      "info" : "ExpressionStatement[11815-11833]:ExpressionStatement[11812-11830]"
    }, {
      "left" : "drawBackground(g2, area);",
      "right" : "drawBackground(g2, area);",
      "info" : "ExpressionStatement[11843-11868]:ExpressionStatement[11840-11865]"
    }, {
      "left" : "drawOutline(g2, area);",
      "right" : "drawOutline(g2, area);",
      "info" : "ExpressionStatement[11878-11900]:ExpressionStatement[11875-11897]"
    }, {
      "left" : "if (DatasetUtilities.isEmptyOrNull(this.dataset))",
      "right" : "if (DatasetUtilities.isEmptyOrNull(this.dataset))",
      "info" : "IfStatement[11968-12093]:IfStatement[11965-12090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12018-12093]:Block[12015-12090]"
    }, {
      "left" : "drawNoDataMessage(g2, area);",
      "right" : "drawNoDataMessage(g2, area);",
      "info" : "ExpressionStatement[12033-12061]:ExpressionStatement[12030-12058]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12075-12082]:ReturnStatement[12072-12079]"
    }, {
      "left" : "int pieCount = 0;",
      "right" : "int pieCount = 0;",
      "info" : "VariableDeclarationStatement[12105-12122]:VariableDeclarationStatement[12102-12119]"
    }, {
      "left" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "right" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "info" : "IfStatement[12132-12326]:IfStatement[12129-12323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12180-12244]:Block[12177-12241]"
    }, {
      "left" : "pieCount = this.dataset.getRowCount();",
      "right" : "pieCount = this.dataset.getRowCount();",
      "info" : "ExpressionStatement[12195-12233]:ExpressionStatement[12192-12230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12259-12326]:Block[12256-12323]"
    }, {
      "left" : "pieCount = this.dataset.getColumnCount();",
      "right" : "pieCount = this.dataset.getColumnCount();",
      "info" : "ExpressionStatement[12274-12315]:ExpressionStatement[12271-12312]"
    }, {
      "left" : "int displayCols = (int) Math.ceil(Math.sqrt(pieCount));",
      "right" : "int displayCols = (int) Math.ceil(Math.sqrt(pieCount));",
      "info" : "VariableDeclarationStatement[12389-12444]:VariableDeclarationStatement[12386-12441]"
    }, {
      "left" : "int displayRows\r\n            = (int) Math.ceil((double) pieCount / (double) displayCols);",
      "right" : "int displayRows\r\n            = (int) Math.ceil((double) pieCount / (double) displayCols);",
      "info" : "VariableDeclarationStatement[12454-12543]:VariableDeclarationStatement[12451-12540]"
    }, {
      "left" : "if (displayCols > displayRows && area.getWidth() < area.getHeight())",
      "right" : "if (displayCols > displayRows && area.getWidth() < area.getHeight())",
      "info" : "IfStatement[12613-12804]:IfStatement[12610-12801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12682-12804]:Block[12679-12801]"
    }, {
      "left" : "int temp = displayCols;",
      "right" : "int temp = displayCols;",
      "info" : "VariableDeclarationStatement[12697-12720]:VariableDeclarationStatement[12694-12717]"
    }, {
      "left" : "displayCols = displayRows;",
      "right" : "displayCols = displayRows;",
      "info" : "ExpressionStatement[12734-12760]:ExpressionStatement[12731-12757]"
    }, {
      "left" : "displayRows = temp;",
      "right" : "displayRows = temp;",
      "info" : "ExpressionStatement[12774-12793]:ExpressionStatement[12771-12790]"
    }, {
      "left" : "prefetchSectionPaints();",
      "right" : "prefetchSectionPaints();",
      "info" : "ExpressionStatement[12816-12840]:ExpressionStatement[12813-12837]"
    }, {
      "left" : "int x = (int) area.getX();",
      "right" : "int x = (int) area.getX();",
      "info" : "VariableDeclarationStatement[12852-12878]:VariableDeclarationStatement[12849-12875]"
    }, {
      "left" : "int y = (int) area.getY();",
      "right" : "int y = (int) area.getY();",
      "info" : "VariableDeclarationStatement[12888-12914]:VariableDeclarationStatement[12885-12911]"
    }, {
      "left" : "int width = ((int) area.getWidth()) / displayCols;",
      "right" : "int width = ((int) area.getWidth()) / displayCols;",
      "info" : "VariableDeclarationStatement[12924-12974]:VariableDeclarationStatement[12921-12971]"
    }, {
      "left" : "int height = ((int) area.getHeight()) / displayRows;",
      "right" : "int height = ((int) area.getHeight()) / displayRows;",
      "info" : "VariableDeclarationStatement[12984-13036]:VariableDeclarationStatement[12981-13033]"
    }, {
      "left" : "int row = 0;",
      "right" : "int row = 0;",
      "info" : "VariableDeclarationStatement[13046-13058]:VariableDeclarationStatement[13043-13055]"
    }, {
      "left" : "int column = 0;",
      "right" : "int column = 0;",
      "info" : "VariableDeclarationStatement[13068-13083]:VariableDeclarationStatement[13065-13080]"
    }, {
      "left" : "int diff = (displayRows * displayCols) - pieCount;",
      "right" : "int diff = (displayRows * displayCols) - pieCount;",
      "info" : "VariableDeclarationStatement[13093-13143]:VariableDeclarationStatement[13090-13140]"
    }, {
      "left" : "int xoffset = 0;",
      "right" : "int xoffset = 0;",
      "info" : "VariableDeclarationStatement[13153-13169]:VariableDeclarationStatement[13150-13166]"
    }, {
      "left" : "Rectangle rect = new Rectangle();",
      "right" : "Rectangle rect = new Rectangle();",
      "info" : "VariableDeclarationStatement[13179-13212]:VariableDeclarationStatement[13176-13209]"
    }, {
      "left" : "for (int pieIndex = 0; pieIndex < pieCount; pieIndex++)",
      "right" : "for (int pieIndex = 0; pieIndex < pieCount; pieIndex++)",
      "info" : "ForStatement[13224-15556]:ForStatement[13221-15553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13280-15556]:Block[13277-15553]"
    }, {
      "left" : "rect.setBounds(x + xoffset + (width * column), y + (height * row),\r\n                    width, height);",
      "right" : "rect.setBounds(x + xoffset + (width * column), y + (height * row),\r\n                    width, height);",
      "info" : "ExpressionStatement[13295-13398]:ExpressionStatement[13292-13395]"
    }, {
      "left" : "String title = null;",
      "right" : "String title = null;",
      "info" : "VariableDeclarationStatement[13414-13434]:VariableDeclarationStatement[13411-13431]"
    }, {
      "left" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "right" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "info" : "IfStatement[13448-13690]:IfStatement[13445-13687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13496-13582]:Block[13493-13579]"
    }, {
      "left" : "title = this.dataset.getRowKey(pieIndex).toString();",
      "right" : "title = this.dataset.getRowKey(pieIndex).toString();",
      "info" : "ExpressionStatement[13515-13567]:ExpressionStatement[13512-13564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13601-13690]:Block[13598-13687]"
    }, {
      "left" : "title = this.dataset.getColumnKey(pieIndex).toString();",
      "right" : "title = this.dataset.getColumnKey(pieIndex).toString();",
      "info" : "ExpressionStatement[13620-13675]:ExpressionStatement[13617-13672]"
    }, {
      "left" : "this.pieChart.setTitle(title);",
      "right" : "this.pieChart.setTitle(title);",
      "info" : "ExpressionStatement[13704-13734]:ExpressionStatement[13701-13731]"
    }, {
      "left" : "PieDataset piedataset = null;",
      "right" : "PieDataset piedataset = null;",
      "info" : "VariableDeclarationStatement[13750-13779]:VariableDeclarationStatement[13747-13776]"
    }, {
      "left" : "PieDataset dd = new CategoryToPieDataset(this.dataset,\r\n                    this.dataExtractOrder, pieIndex);",
      "right" : "PieDataset dd = new CategoryToPieDataset(this.dataset,\r\n                    this.dataExtractOrder, pieIndex);",
      "info" : "VariableDeclarationStatement[13793-13902]:VariableDeclarationStatement[13790-13899]"
    }, {
      "left" : "if (this.limit > 0.0)",
      "right" : "if (this.limit > 0.0)",
      "info" : "IfStatement[13916-14167]:IfStatement[13913-14164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13938-14098]:Block[13935-14095]"
    }, {
      "left" : "piedataset = DatasetUtilities.createConsolidatedPieDataset(\r\n                        dd, this.aggregatedItemsKey, this.limit);",
      "right" : "piedataset = DatasetUtilities.createConsolidatedPieDataset(\r\n                        dd, this.aggregatedItemsKey, this.limit);",
      "info" : "ExpressionStatement[13957-14083]:ExpressionStatement[13954-14080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14117-14167]:Block[14114-14164]"
    }, {
      "left" : "piedataset = dd;",
      "right" : "piedataset = dd;",
      "info" : "ExpressionStatement[14136-14152]:ExpressionStatement[14133-14149]"
    }, {
      "left" : "PiePlot piePlot = (PiePlot) this.pieChart.getPlot();",
      "right" : "PiePlot piePlot = (PiePlot) this.pieChart.getPlot();",
      "info" : "VariableDeclarationStatement[14181-14233]:VariableDeclarationStatement[14178-14230]"
    }, {
      "left" : "piePlot.setDataset(piedataset);",
      "right" : "piePlot.setDataset(piedataset);",
      "info" : "ExpressionStatement[14247-14278]:ExpressionStatement[14244-14275]"
    }, {
      "left" : "piePlot.setPieIndex(pieIndex);",
      "right" : "piePlot.setPieIndex(pieIndex);",
      "info" : "ExpressionStatement[14292-14322]:ExpressionStatement[14289-14319]"
    }, {
      "left" : "for (int i = 0; i < piedataset.getItemCount(); i++)",
      "right" : "for (int i = 0; i < piedataset.getItemCount(); i++)",
      "info" : "ForStatement[14410-14846]:ForStatement[14407-14843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14462-14846]:Block[14459-14843]"
    }, {
      "left" : "Comparable key = piedataset.getKey(i);",
      "right" : "Comparable key = piedataset.getKey(i);",
      "info" : "VariableDeclarationStatement[14481-14519]:VariableDeclarationStatement[14478-14516]"
    }, {
      "left" : "Paint p;",
      "right" : "Paint p;",
      "info" : "VariableDeclarationStatement[14537-14545]:VariableDeclarationStatement[14534-14542]"
    }, {
      "left" : "if (key.equals(this.aggregatedItemsKey))",
      "right" : "if (key.equals(this.aggregatedItemsKey))",
      "info" : "IfStatement[14563-14781]:IfStatement[14560-14778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14604-14676]:Block[14601-14673]"
    }, {
      "left" : "p = this.aggregatedItemsPaint;",
      "right" : "p = this.aggregatedItemsPaint;",
      "info" : "ExpressionStatement[14627-14657]:ExpressionStatement[14624-14654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14699-14781]:Block[14696-14778]"
    }, {
      "left" : "p = (Paint) this.sectionPaints.get(key);",
      "right" : "p = (Paint) this.sectionPaints.get(key);",
      "info" : "ExpressionStatement[14722-14762]:ExpressionStatement[14719-14759]"
    }, {
      "left" : "piePlot.setSectionPaint(key, p);",
      "right" : "piePlot.setSectionPaint(key, p);",
      "info" : "ExpressionStatement[14799-14831]:ExpressionStatement[14796-14828]"
    }, {
      "left" : "ChartRenderingInfo subinfo = null;",
      "right" : "ChartRenderingInfo subinfo = null;",
      "info" : "VariableDeclarationStatement[14862-14896]:VariableDeclarationStatement[14859-14893]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[14910-14997]:IfStatement[14907-14994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14928-14997]:Block[14925-14994]"
    }, {
      "left" : "subinfo = new ChartRenderingInfo();",
      "right" : "subinfo = new ChartRenderingInfo();",
      "info" : "ExpressionStatement[14947-14982]:ExpressionStatement[14944-14979]"
    }, {
      "left" : "this.pieChart.draw(g2, rect, subinfo);",
      "right" : "this.pieChart.draw(g2, rect, subinfo);",
      "info" : "ExpressionStatement[15011-15049]:ExpressionStatement[15008-15046]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15063-15278]:IfStatement[15060-15275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15081-15278]:Block[15078-15275]"
    }, {
      "left" : "info.getOwner().getEntityCollection().addAll(\r\n                        subinfo.getEntityCollection());",
      "right" : "info.getOwner().getEntityCollection().addAll(\r\n                        subinfo.getEntityCollection());",
      "info" : "ExpressionStatement[15100-15202]:ExpressionStatement[15097-15199]"
    }, {
      "left" : "info.addSubplotInfo(subinfo.getPlotInfo());",
      "right" : "info.addSubplotInfo(subinfo.getPlotInfo());",
      "info" : "ExpressionStatement[15220-15263]:ExpressionStatement[15217-15260]"
    }, {
      "left" : "++column;",
      "right" : "++column;",
      "info" : "ExpressionStatement[15294-15303]:ExpressionStatement[15291-15300]"
    }, {
      "left" : "if (column == displayCols)",
      "right" : "if (column == displayCols)",
      "info" : "IfStatement[15317-15545]:IfStatement[15314-15542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15344-15545]:Block[15341-15542]"
    }, {
      "left" : "column = 0;",
      "right" : "column = 0;",
      "info" : "ExpressionStatement[15363-15374]:ExpressionStatement[15360-15371]"
    }, {
      "left" : "++row;",
      "right" : "++row;",
      "info" : "ExpressionStatement[15392-15398]:ExpressionStatement[15389-15395]"
    }, {
      "left" : "if (row == displayRows - 1 && diff != 0)",
      "right" : "if (row == displayRows - 1 && diff != 0)",
      "info" : "IfStatement[15418-15530]:IfStatement[15415-15527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15459-15530]:Block[15456-15527]"
    }, {
      "left" : "xoffset = (diff * width) / 2;",
      "right" : "xoffset = (diff * width) / 2;",
      "info" : "ExpressionStatement[15482-15511]:ExpressionStatement[15479-15508]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15879-15886]:Modifier[15876-15883]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15887-15891]:PrimitiveType[15884-15888]"
    }, {
      "left" : "prefetchSectionPaints",
      "right" : "prefetchSectionPaints",
      "info" : "SimpleName[15892-15913]:SimpleName[15889-15910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15916-17393]:Block[15913-17390]"
    }, {
      "left" : "PiePlot piePlot = (PiePlot) getPieChart().getPlot();",
      "right" : "PiePlot piePlot = (PiePlot) getPieChart().getPlot();",
      "info" : "VariableDeclarationStatement[16104-16156]:VariableDeclarationStatement[16101-16153]"
    }, {
      "left" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "right" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "info" : "IfStatement[16168-17384]:IfStatement[16165-17381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16216-16797]:Block[16213-16794]"
    }, {
      "left" : "for (int c = 0; c < this.dataset.getColumnCount(); c++)",
      "right" : "for (int c = 0; c < this.dataset.getColumnCount(); c++)",
      "info" : "ForStatement[16302-16786]:ForStatement[16299-16783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16358-16786]:Block[16355-16783]"
    }, {
      "left" : "Comparable key = this.dataset.getColumnKey(c);",
      "right" : "Comparable key = this.dataset.getColumnKey(c);",
      "info" : "VariableDeclarationStatement[16377-16423]:VariableDeclarationStatement[16374-16420]"
    }, {
      "left" : "Paint p = piePlot.getSectionPaint(key);",
      "right" : "Paint p = piePlot.getSectionPaint(key);",
      "info" : "VariableDeclarationStatement[16441-16480]:VariableDeclarationStatement[16438-16477]"
    }, {
      "left" : "if (p == null)",
      "right" : "if (p == null)",
      "info" : "IfStatement[16498-16722]:IfStatement[16495-16719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16513-16722]:Block[16510-16719]"
    }, {
      "left" : "p = (Paint) this.sectionPaints.get(key);",
      "right" : "p = (Paint) this.sectionPaints.get(key);",
      "info" : "ExpressionStatement[16536-16576]:ExpressionStatement[16533-16573]"
    }, {
      "left" : "if (p == null)",
      "right" : "if (p == null)",
      "info" : "IfStatement[16598-16703]:IfStatement[16595-16700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16613-16703]:Block[16610-16700]"
    }, {
      "left" : "p = getDrawingSupplier().getNextPaint();",
      "right" : "p = getDrawingSupplier().getNextPaint();",
      "info" : "ExpressionStatement[16640-16680]:ExpressionStatement[16637-16677]"
    }, {
      "left" : "this.sectionPaints.put(key, p);",
      "right" : "this.sectionPaints.put(key, p);",
      "info" : "ExpressionStatement[16740-16771]:ExpressionStatement[16737-16768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16812-17384]:Block[16809-17381]"
    }, {
      "left" : "for (int r = 0; r < this.dataset.getRowCount(); r++)",
      "right" : "for (int r = 0; r < this.dataset.getRowCount(); r++)",
      "info" : "ForStatement[16895-17373]:ForStatement[16892-17370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16948-17373]:Block[16945-17370]"
    }, {
      "left" : "Comparable key = this.dataset.getRowKey(r);",
      "right" : "Comparable key = this.dataset.getRowKey(r);",
      "info" : "VariableDeclarationStatement[16967-17010]:VariableDeclarationStatement[16964-17007]"
    }, {
      "left" : "Paint p = piePlot.getSectionPaint(key);",
      "right" : "Paint p = piePlot.getSectionPaint(key);",
      "info" : "VariableDeclarationStatement[17028-17067]:VariableDeclarationStatement[17025-17064]"
    }, {
      "left" : "if (p == null)",
      "right" : "if (p == null)",
      "info" : "IfStatement[17085-17309]:IfStatement[17082-17306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17100-17309]:Block[17097-17306]"
    }, {
      "left" : "p = (Paint) this.sectionPaints.get(key);",
      "right" : "p = (Paint) this.sectionPaints.get(key);",
      "info" : "ExpressionStatement[17123-17163]:ExpressionStatement[17120-17160]"
    }, {
      "left" : "if (p == null)",
      "right" : "if (p == null)",
      "info" : "IfStatement[17185-17290]:IfStatement[17182-17287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17200-17290]:Block[17197-17287]"
    }, {
      "left" : "p = getDrawingSupplier().getNextPaint();",
      "right" : "p = getDrawingSupplier().getNextPaint();",
      "info" : "ExpressionStatement[17227-17267]:ExpressionStatement[17224-17264]"
    }, {
      "left" : "this.sectionPaints.put(key, p);",
      "right" : "this.sectionPaints.put(key, p);",
      "info" : "ExpressionStatement[17327-17358]:ExpressionStatement[17324-17355]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17525-17531]:Modifier[17522-17528]"
    }, {
      "left" : "LegendItemCollection",
      "right" : "LegendItemCollection",
      "info" : "SimpleType[17532-17552]:SimpleType[17529-17549]"
    }, {
      "left" : "getLegendItems",
      "right" : "getLegendItems",
      "info" : "SimpleName[17553-17567]:SimpleName[17550-17564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17570-19271]:Block[17567-19268]"
    }, {
      "left" : "LegendItemCollection result = new LegendItemCollection();",
      "right" : "LegendItemCollection result = new LegendItemCollection();",
      "info" : "VariableDeclarationStatement[17583-17640]:VariableDeclarationStatement[17580-17637]"
    }, {
      "left" : "if (this.dataset != null)",
      "right" : "if (this.dataset != null)",
      "info" : "IfStatement[17652-19240]:IfStatement[17649-19237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17678-19240]:Block[17675-19237]"
    }, {
      "left" : "List keys = null;",
      "right" : "List keys = null;",
      "info" : "VariableDeclarationStatement[17693-17710]:VariableDeclarationStatement[17690-17707]"
    }, {
      "left" : "prefetchSectionPaints();",
      "right" : "prefetchSectionPaints();",
      "info" : "ExpressionStatement[17726-17750]:ExpressionStatement[17723-17747]"
    }, {
      "left" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "right" : "if (this.dataExtractOrder == TableOrder.BY_ROW)",
      "info" : "IfStatement[17764-18019]:IfStatement[17761-18016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17812-17882]:Block[17809-17879]"
    }, {
      "left" : "keys = this.dataset.getColumnKeys();",
      "right" : "keys = this.dataset.getColumnKeys();",
      "info" : "ExpressionStatement[17831-17867]:ExpressionStatement[17828-17864]"
    }, {
      "left" : "if (this.dataExtractOrder == TableOrder.BY_COLUMN)",
      "right" : "if (this.dataExtractOrder == TableOrder.BY_COLUMN)",
      "info" : "IfStatement[17901-18019]:IfStatement[17898-18016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17952-18019]:Block[17949-18016]"
    }, {
      "left" : "keys = this.dataset.getRowKeys();",
      "right" : "keys = this.dataset.getRowKeys();",
      "info" : "ExpressionStatement[17971-18004]:ExpressionStatement[17968-18001]"
    }, {
      "left" : "if (keys != null)",
      "right" : "if (keys != null)",
      "info" : "IfStatement[18035-18807]:IfStatement[18032-18804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18053-18807]:Block[18050-18804]"
    }, {
      "left" : "int section = 0;",
      "right" : "int section = 0;",
      "info" : "VariableDeclarationStatement[18072-18088]:VariableDeclarationStatement[18069-18085]"
    }, {
      "left" : "Iterator iterator = keys.iterator();",
      "right" : "Iterator iterator = keys.iterator();",
      "info" : "VariableDeclarationStatement[18106-18142]:VariableDeclarationStatement[18103-18139]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[18160-18792]:WhileStatement[18157-18789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18187-18792]:Block[18184-18789]"
    }, {
      "left" : "Comparable key = (Comparable) iterator.next();",
      "right" : "Comparable key = (Comparable) iterator.next();",
      "info" : "VariableDeclarationStatement[18210-18256]:VariableDeclarationStatement[18207-18253]"
    }, {
      "left" : "String label = key.toString();",
      "right" : "String label = key.toString();",
      "info" : "VariableDeclarationStatement[18278-18308]:VariableDeclarationStatement[18275-18305]"
    }, {
      "left" : "String description = label;",
      "right" : "String description = label;",
      "info" : "VariableDeclarationStatement[18330-18357]:VariableDeclarationStatement[18327-18354]"
    }, {
      "left" : "Paint paint = (Paint) this.sectionPaints.get(key);",
      "right" : "Paint paint = (Paint) this.sectionPaints.get(key);",
      "info" : "VariableDeclarationStatement[18379-18429]:VariableDeclarationStatement[18376-18426]"
    }, {
      "left" : "LegendItem item = new LegendItem(label, description,\r\n                            null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE,\r\n                            paint, Plot.DEFAULT_OUTLINE_STROKE, paint);",
      "right" : "LegendItem item = new LegendItem(label, description,\r\n                            null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE,\r\n                            paint, Plot.DEFAULT_OUTLINE_STROKE, paint);",
      "info" : "VariableDeclarationStatement[18451-18650]:VariableDeclarationStatement[18448-18647]"
    }, {
      "left" : "item.setDataset(getDataset());",
      "right" : "item.setDataset(getDataset());",
      "info" : "ExpressionStatement[18672-18702]:ExpressionStatement[18669-18699]"
    }, {
      "left" : "result.add(item);",
      "right" : "result.add(item);",
      "info" : "ExpressionStatement[18724-18741]:ExpressionStatement[18721-18738]"
    }, {
      "left" : "section++;",
      "right" : "section++;",
      "info" : "ExpressionStatement[18763-18773]:ExpressionStatement[18760-18770]"
    }, {
      "left" : "if (this.limit > 0.0)",
      "right" : "if (this.limit > 0.0)",
      "info" : "IfStatement[18821-19229]:IfStatement[18818-19226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18843-19229]:Block[18840-19226]"
    }, {
      "left" : "result.add(new LegendItem(this.aggregatedItemsKey.toString(),\r\n                        this.aggregatedItemsKey.toString(), null, null,\r\n                        Plot.DEFAULT_LEGEND_ITEM_CIRCLE,\r\n                        this.aggregatedItemsPaint,\r\n                        Plot.DEFAULT_OUTLINE_STROKE,\r\n                        this.aggregatedItemsPaint));",
      "right" : "result.add(new LegendItem(this.aggregatedItemsKey.toString(),\r\n                        this.aggregatedItemsKey.toString(), null, null,\r\n                        Plot.DEFAULT_LEGEND_ITEM_CIRCLE,\r\n                        this.aggregatedItemsPaint,\r\n                        Plot.DEFAULT_OUTLINE_STROKE,\r\n                        this.aggregatedItemsPaint));",
      "info" : "ExpressionStatement[18862-19214]:ExpressionStatement[18859-19211]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[19250-19264]:ReturnStatement[19247-19261]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19639-19645]:Modifier[19636-19642]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19646-19653]:PrimitiveType[19643-19650]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[19654-19660]:SimpleName[19651-19657]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[19661-19671]:SingleVariableDeclaration[19658-19668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19673-20529]:Block[19670-20526]"
    }, {
      "left" : "if (obj == this)",
      "right" : "if (obj == this)",
      "info" : "IfStatement[19684-19739]:IfStatement[19681-19736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19701-19739]:Block[19698-19736]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19716-19728]:ReturnStatement[19713-19725]"
    }, {
      "left" : "if (!(obj instanceof MultiplePiePlot))",
      "right" : "if (!(obj instanceof MultiplePiePlot))",
      "info" : "IfStatement[19749-19827]:IfStatement[19746-19824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19788-19827]:Block[19785-19824]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19803-19816]:ReturnStatement[19800-19813]"
    }, {
      "left" : "MultiplePiePlot that = (MultiplePiePlot) obj;",
      "right" : "MultiplePiePlot that = (MultiplePiePlot) obj;",
      "info" : "VariableDeclarationStatement[19837-19882]:VariableDeclarationStatement[19834-19879]"
    }, {
      "left" : "if (this.dataExtractOrder != that.dataExtractOrder)",
      "right" : "if (this.dataExtractOrder != that.dataExtractOrder)",
      "info" : "IfStatement[19892-19983]:IfStatement[19889-19980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19944-19983]:Block[19941-19980]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19959-19972]:ReturnStatement[19956-19969]"
    }, {
      "left" : "if (this.limit != that.limit)",
      "right" : "if (this.limit != that.limit)",
      "info" : "IfStatement[19993-20062]:IfStatement[19990-20059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20023-20062]:Block[20020-20059]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20038-20051]:ReturnStatement[20035-20048]"
    }, {
      "left" : "if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey))",
      "right" : "if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey))",
      "info" : "IfStatement[20072-20173]:IfStatement[20069-20170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20134-20173]:Block[20131-20170]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20149-20162]:ReturnStatement[20146-20159]"
    }, {
      "left" : "if (!PaintUtilities.equal(this.aggregatedItemsPaint,\r\n                that.aggregatedItemsPaint))",
      "right" : "if (!PaintUtilities.equal(this.aggregatedItemsPaint,\r\n                that.aggregatedItemsPaint))",
      "info" : "IfStatement[20183-20320]:IfStatement[20180-20317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20281-20320]:Block[20278-20317]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20296-20309]:ReturnStatement[20293-20306]"
    }, {
      "left" : "if (!ObjectUtilities.equal(this.pieChart, that.pieChart))",
      "right" : "if (!ObjectUtilities.equal(this.pieChart, that.pieChart))",
      "info" : "IfStatement[20330-20427]:IfStatement[20327-20424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20388-20427]:Block[20385-20424]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20403-20416]:ReturnStatement[20400-20413]"
    }, {
      "left" : "if (!super.equals(obj))",
      "right" : "if (!super.equals(obj))",
      "info" : "IfStatement[20437-20500]:IfStatement[20434-20497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20461-20500]:Block[20458-20497]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20476-20489]:ReturnStatement[20473-20486]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20510-20522]:ReturnStatement[20507-20519]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20708-20715]:Modifier[20705-20712]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20716-20720]:PrimitiveType[20713-20717]"
    }, {
      "left" : "writeObject",
      "right" : "writeObject",
      "info" : "SimpleName[20721-20732]:SimpleName[20718-20729]"
    }, {
      "left" : "ObjectOutputStream stream",
      "right" : "ObjectOutputStream stream",
      "info" : "SingleVariableDeclaration[20733-20758]:SingleVariableDeclaration[20730-20755]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20767-20778]:SimpleType[20764-20775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20779-20897]:Block[20776-20894]"
    }, {
      "left" : "stream.defaultWriteObject();",
      "right" : "stream.defaultWriteObject();",
      "info" : "ExpressionStatement[20790-20818]:ExpressionStatement[20787-20815]"
    }, {
      "left" : "SerialUtilities.writePaint(this.aggregatedItemsPaint, stream);",
      "right" : "SerialUtilities.writePaint(this.aggregatedItemsPaint, stream);",
      "info" : "ExpressionStatement[20828-20890]:ExpressionStatement[20825-20887]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21148-21155]:Modifier[21145-21152]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21156-21160]:PrimitiveType[21153-21157]"
    }, {
      "left" : "readObject",
      "right" : "readObject",
      "info" : "SimpleName[21161-21171]:SimpleName[21158-21168]"
    }, {
      "left" : "ObjectInputStream stream",
      "right" : "ObjectInputStream stream",
      "info" : "SingleVariableDeclaration[21172-21196]:SingleVariableDeclaration[21169-21193]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21214-21225]:SimpleType[21211-21222]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[21227-21249]:SimpleType[21224-21246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21250-21412]:Block[21247-21409]"
    }, {
      "left" : "stream.defaultReadObject();",
      "right" : "stream.defaultReadObject();",
      "info" : "ExpressionStatement[21261-21288]:ExpressionStatement[21258-21285]"
    }, {
      "left" : "this.aggregatedItemsPaint = SerialUtilities.readPaint(stream);",
      "right" : "this.aggregatedItemsPaint = SerialUtilities.readPaint(stream);",
      "info" : "ExpressionStatement[21298-21360]:ExpressionStatement[21295-21357]"
    }, {
      "left" : "this.sectionPaints = new HashMap();",
      "right" : "this.sectionPaints = new HashMap();",
      "info" : "ExpressionStatement[21370-21405]:ExpressionStatement[21367-21402]"
    } ]
  },
  "interFileMappings" : { }
}