{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CndTest",
      "right" : "CndTest",
      "info" : "TypeDeclaration[394-5425]:TypeDeclaration[462-6147]"
    }, {
      "left" : "private Entity<?> en;",
      "right" : "private Entity<?> en;",
      "info" : "FieldDeclaration[438-459]:FieldDeclaration[506-527]"
    }, {
      "left" : "protected void before()",
      "right" : "protected void before()",
      "info" : "MethodDeclaration[465-541]:MethodDeclaration[533-609]"
    }, {
      "left" : "protected void after()",
      "right" : "protected void after()",
      "info" : "MethodDeclaration[547-572]:MethodDeclaration[615-640]"
    }, {
      "left" : "public void test_segment()",
      "right" : "public void test_segment()",
      "info" : "MethodDeclaration[578-1117]:MethodDeclaration[646-1185]"
    }, {
      "left" : "public void test_gt_like()",
      "right" : "public void test_gt_like()",
      "info" : "MethodDeclaration[1123-1349]:MethodDeclaration[1191-1417]"
    }, {
      "left" : "public void test_bracket()",
      "right" : "public void test_bracket()",
      "info" : "MethodDeclaration[1355-1715]:MethodDeclaration[1423-1783]"
    }, {
      "left" : "public void test_order()",
      "right" : "public void test_order()",
      "info" : "MethodDeclaration[1721-2077]:MethodDeclaration[1789-2145]"
    }, {
      "left" : "public void test_like_in()",
      "right" : "public void test_like_in()",
      "info" : "MethodDeclaration[2083-2777]:MethodDeclaration[2151-2845]"
    }, {
      "left" : "public void test_equel()",
      "right" : "public void test_equel()",
      "info" : "MethodDeclaration[2783-2960]:MethodDeclaration[2851-3028]"
    }, {
      "left" : "public void test_in_by_int_array()",
      "right" : "public void test_in_by_int_array()",
      "info" : "MethodDeclaration[2966-3192]:MethodDeclaration[3034-3260]"
    }, {
      "left" : "public void test_in_by_int_list()",
      "right" : "public void test_in_by_int_list()",
      "info" : "MethodDeclaration[3198-3511]:MethodDeclaration[3266-3579]"
    }, {
      "left" : "public void test_in_by_str_array()",
      "right" : "public void test_in_by_str_array()",
      "info" : "MethodDeclaration[3517-3737]:MethodDeclaration[3585-3805]"
    }, {
      "left" : "public void test_in_by_str_list()",
      "right" : "public void test_in_by_str_list()",
      "info" : "MethodDeclaration[3743-4045]:MethodDeclaration[3811-4113]"
    }, {
      "left" : "public void test_is_null()",
      "right" : "public void test_is_null()",
      "info" : "MethodDeclaration[4051-4238]:MethodDeclaration[4119-4306]"
    }, {
      "left" : "public void test_is_not_null()",
      "right" : "public void test_is_not_null()",
      "info" : "MethodDeclaration[4244-4443]:MethodDeclaration[4312-4511]"
    }, {
      "left" : "public void test_not_in()",
      "right" : "public void test_not_in()",
      "info" : "MethodDeclaration[4449-4660]:MethodDeclaration[4517-4728]"
    }, {
      "left" : "public void test_add_other_or_method_by_github_issuse_148()",
      "right" : "public void test_add_other_or_method_by_github_issuse_148()",
      "info" : "MethodDeclaration[4666-5243]:MethodDeclaration[4734-5311]"
    }, {
      "left" : "public void test_other_op()",
      "right" : "public void test_other_op()",
      "info" : "MethodDeclaration[5249-5423]:MethodDeclaration[5317-5491]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[394-400]:Modifier[462-468]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[401-406]:TYPE_DECLARATION_KIND[469-474]"
    }, {
      "left" : "CndTest",
      "right" : "CndTest",
      "info" : "SimpleName[407-414]:SimpleName[475-482]"
    }, {
      "left" : "DaoCase",
      "right" : "DaoCase",
      "info" : "SimpleType[423-430]:SimpleType[491-498]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[465-474]:Modifier[533-542]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[475-479]:PrimitiveType[543-547]"
    }, {
      "left" : "before",
      "right" : "before",
      "info" : "SimpleName[480-486]:SimpleName[548-554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[489-541]:Block[557-609]"
    }, {
      "left" : "en = dao.create(Worker.class, true);",
      "right" : "en = dao.create(Worker.class, true);",
      "info" : "ExpressionStatement[499-535]:ExpressionStatement[567-603]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[547-556]:Modifier[615-624]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[557-561]:PrimitiveType[625-629]"
    }, {
      "left" : "after",
      "right" : "after",
      "info" : "SimpleName[562-567]:SimpleName[630-635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[570-572]:Block[638-640]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[578-583]:MarkerAnnotation[646-651]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[588-594]:Modifier[656-662]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[595-599]:PrimitiveType[663-667]"
    }, {
      "left" : "test_segment",
      "right" : "test_segment",
      "info" : "SimpleName[600-612]:SimpleName[668-680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[615-1117]:Block[683-1185]"
    }, {
      "left" : "Map<String, Object> map = new HashMap<String, Object>();",
      "right" : "Map<String, Object> map = new HashMap<String, Object>();",
      "info" : "VariableDeclarationStatement[625-681]:VariableDeclarationStatement[693-749]"
    }, {
      "left" : "map.put(\"name\", \"比尔盖茨\");",
      "right" : "map.put(\"name\", \"比尔盖茨\");",
      "info" : "ExpressionStatement[690-714]:ExpressionStatement[758-782]"
    }, {
      "left" : "map.put(\"age\", 50);",
      "right" : "map.put(\"age\", 50);",
      "info" : "ExpressionStatement[723-742]:ExpressionStatement[791-810]"
    }, {
      "left" : "Condition c1 = Cnd.wrap(\"name='${name}' AND age>${age}\", map);",
      "right" : "Condition c1 = Cnd.wrap(\"name='${name}' AND age>${age}\", map);",
      "info" : "VariableDeclarationStatement[751-813]:VariableDeclarationStatement[819-881]"
    }, {
      "left" : "assertEquals(\"name='比尔盖茨' AND age>50\", c1.toSql(en));",
      "right" : "assertEquals(\"name='比尔盖茨' AND age>50\", c1.toSql(en));",
      "info" : "ExpressionStatement[822-875]:ExpressionStatement[890-943]"
    }, {
      "left" : "Worker worker = new Worker();",
      "right" : "Worker worker = new Worker();",
      "info" : "VariableDeclarationStatement[885-914]:VariableDeclarationStatement[953-982]"
    }, {
      "left" : "worker.name = \"老板\";",
      "right" : "worker.name = \"老板\";",
      "info" : "ExpressionStatement[923-942]:ExpressionStatement[991-1010]"
    }, {
      "left" : "worker.age = 30;",
      "right" : "worker.age = 30;",
      "info" : "ExpressionStatement[951-967]:ExpressionStatement[1019-1035]"
    }, {
      "left" : "Condition c2 = Cnd.wrap(\"name like'${name}%' AND age>${age}\", worker);",
      "right" : "Condition c2 = Cnd.wrap(\"name like'${name}%' AND age>${age}\", worker);",
      "info" : "VariableDeclarationStatement[976-1046]:VariableDeclarationStatement[1044-1114]"
    }, {
      "left" : "assertEquals(\"name like'老板%' AND age>30\", c2.toSql(en));",
      "right" : "assertEquals(\"name like'老板%' AND age>30\", c2.toSql(en));",
      "info" : "ExpressionStatement[1055-1111]:ExpressionStatement[1123-1179]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1123-1128]:MarkerAnnotation[1191-1196]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1133-1139]:Modifier[1201-1207]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1140-1144]:PrimitiveType[1208-1212]"
    }, {
      "left" : "test_gt_like",
      "right" : "test_gt_like",
      "info" : "SimpleName[1145-1157]:SimpleName[1213-1225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1160-1349]:Block[1228-1417]"
    }, {
      "left" : "Condition c = Cnd.where(\"id\", \">\", 45).and(\"name\", \"LIKE\", \"%ry%\");",
      "right" : "Condition c = Cnd.where(\"id\", \">\", 45).and(\"name\", \"LIKE\", \"%ry%\");",
      "info" : "VariableDeclarationStatement[1170-1237]:VariableDeclarationStatement[1238-1305]"
    }, {
      "left" : "String exp = \"WHERE wid>45 AND wname LIKE '%ry%'\";",
      "right" : "String exp = \"WHERE wid>45 AND wname LIKE '%ry%'\";",
      "info" : "VariableDeclarationStatement[1246-1296]:VariableDeclarationStatement[1314-1364]"
    }, {
      "left" : "assertEquals(exp, c.toSql(en).trim());",
      "right" : "assertEquals(exp, c.toSql(en).trim());",
      "info" : "ExpressionStatement[1305-1343]:ExpressionStatement[1373-1411]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1355-1360]:MarkerAnnotation[1423-1428]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1365-1371]:Modifier[1433-1439]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1372-1376]:PrimitiveType[1440-1444]"
    }, {
      "left" : "test_bracket",
      "right" : "test_bracket",
      "info" : "SimpleName[1377-1389]:SimpleName[1445-1457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1392-1715]:Block[1460-1783]"
    }, {
      "left" : "Condition c = Cnd.where(Cnd.exps(\"id\", \">\", 45)).and(\"name\",\n                                                             \"LIKE\",\n                                                             \"%ry%\");",
      "right" : "Condition c = Cnd.where(Cnd.exps(\"id\", \">\", 45)).and(\"name\",\n                                                             \"LIKE\",\n                                                             \"%ry%\");",
      "info" : "VariableDeclarationStatement[1402-1601]:VariableDeclarationStatement[1470-1669]"
    }, {
      "left" : "String exp = \"WHERE (wid>45) AND wname LIKE '%ry%'\";",
      "right" : "String exp = \"WHERE (wid>45) AND wname LIKE '%ry%'\";",
      "info" : "VariableDeclarationStatement[1610-1662]:VariableDeclarationStatement[1678-1730]"
    }, {
      "left" : "assertEquals(exp, c.toSql(en).trim());",
      "right" : "assertEquals(exp, c.toSql(en).trim());",
      "info" : "ExpressionStatement[1671-1709]:ExpressionStatement[1739-1777]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1721-1726]:MarkerAnnotation[1789-1794]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1731-1737]:Modifier[1799-1805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1738-1742]:PrimitiveType[1806-1810]"
    }, {
      "left" : "test_order",
      "right" : "test_order",
      "info" : "SimpleName[1743-1753]:SimpleName[1811-1821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1756-2077]:Block[1824-2145]"
    }, {
      "left" : "Condition c = Cnd.orderBy()\n                         .asc(\"id\")\n                         .desc(\"name\")\n                         .asc(\"age\")\n                         .desc(\"workingDay\");",
      "right" : "Condition c = Cnd.orderBy()\n                         .asc(\"id\")\n                         .desc(\"name\")\n                         .asc(\"age\")\n                         .desc(\"workingDay\");",
      "info" : "VariableDeclarationStatement[1766-1951]:VariableDeclarationStatement[1834-2019]"
    }, {
      "left" : "String exp = \"ORDER BY wid ASC, wname DESC, age ASC, days DESC\";",
      "right" : "String exp = \"ORDER BY wid ASC, wname DESC, age ASC, days DESC\";",
      "info" : "VariableDeclarationStatement[1960-2024]:VariableDeclarationStatement[2028-2092]"
    }, {
      "left" : "assertEquals(exp, c.toSql(en).trim());",
      "right" : "assertEquals(exp, c.toSql(en).trim());",
      "info" : "ExpressionStatement[2033-2071]:ExpressionStatement[2101-2139]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2083-2088]:MarkerAnnotation[2151-2156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2093-2099]:Modifier[2161-2167]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2100-2104]:PrimitiveType[2168-2172]"
    }, {
      "left" : "test_like_in",
      "right" : "test_like_in",
      "info" : "SimpleName[2105-2117]:SimpleName[2173-2185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2120-2777]:Block[2188-2845]"
    }, {
      "left" : "int[] ages = {4, 7, 9};",
      "right" : "int[] ages = {4, 7, 9};",
      "info" : "VariableDeclarationStatement[2130-2153]:VariableDeclarationStatement[2198-2221]"
    }, {
      "left" : "SqlExpression e = Cnd.exps(\"age\", \">\", 35).and(\"id\", \"<\", 47);",
      "right" : "SqlExpression e = Cnd.exps(\"age\", \">\", 35).and(\"id\", \"<\", 47);",
      "info" : "VariableDeclarationStatement[2162-2224]:VariableDeclarationStatement[2230-2292]"
    }, {
      "left" : "SqlExpression e2 = Cnd.exps(\"name\", \"\\tLIKE \", \"%t%\")\n                              .and(\"age\", \"IN  \\n\\r\", ages)\n                              .or(e);",
      "right" : "SqlExpression e2 = Cnd.exps(\"name\", \"\\tLIKE \", \"%t%\")\n                              .and(\"age\", \"IN  \\n\\r\", ages)\n                              .or(e);",
      "info" : "VariableDeclarationStatement[2233-2384]:VariableDeclarationStatement[2301-2452]"
    }, {
      "left" : "Condition c = Cnd.where(\"id\", \"=\", 37)\n                         .and(e)\n                         .or(e2)\n                         .asc(\"age\")\n                         .desc(\"id\");",
      "right" : "Condition c = Cnd.where(\"id\", \"=\", 37)\n                         .and(e)\n                         .or(e2)\n                         .asc(\"age\")\n                         .desc(\"id\");",
      "info" : "VariableDeclarationStatement[2393-2572]:VariableDeclarationStatement[2461-2640]"
    }, {
      "left" : "String exp = \"WHERE wid=37 AND (age>35 AND wid<47) OR (wname LIKE '%t%' AND age IN (4,7,9) OR (age>35 AND wid<47)) ORDER BY age ASC, wid DESC\";",
      "right" : "String exp = \"WHERE wid=37 AND (age>35 AND wid<47) OR (wname LIKE '%t%' AND age IN (4,7,9) OR (age>35 AND wid<47)) ORDER BY age ASC, wid DESC\";",
      "info" : "VariableDeclarationStatement[2581-2724]:VariableDeclarationStatement[2649-2792]"
    }, {
      "left" : "assertEquals(exp, c.toSql(en).trim());",
      "right" : "assertEquals(exp, c.toSql(en).trim());",
      "info" : "ExpressionStatement[2733-2771]:ExpressionStatement[2801-2839]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2783-2788]:MarkerAnnotation[2851-2856]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2793-2799]:Modifier[2861-2867]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2800-2804]:PrimitiveType[2868-2872]"
    }, {
      "left" : "test_equel",
      "right" : "test_equel",
      "info" : "SimpleName[2805-2815]:SimpleName[2873-2883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2818-2960]:Block[2886-3028]"
    }, {
      "left" : "Condition c = Cnd.where(\"ff\", \"=\", true);",
      "right" : "Condition c = Cnd.where(\"ff\", \"=\", true);",
      "info" : "VariableDeclarationStatement[2828-2869]:VariableDeclarationStatement[2896-2937]"
    }, {
      "left" : "String exp = \"WHERE ff=true\";",
      "right" : "String exp = \"WHERE ff=true\";",
      "info" : "VariableDeclarationStatement[2878-2907]:VariableDeclarationStatement[2946-2975]"
    }, {
      "left" : "assertEquals(exp, c.toSql(en).trim());",
      "right" : "assertEquals(exp, c.toSql(en).trim());",
      "info" : "ExpressionStatement[2916-2954]:ExpressionStatement[2984-3022]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2966-2971]:MarkerAnnotation[3034-3039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2976-2982]:Modifier[3044-3050]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2983-2987]:PrimitiveType[3051-3055]"
    }, {
      "left" : "test_in_by_int_array",
      "right" : "test_in_by_int_array",
      "info" : "SimpleName[2988-3008]:SimpleName[3056-3076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3011-3192]:Block[3079-3260]"
    }, {
      "left" : "int[] ids = {3, 5, 7};",
      "right" : "int[] ids = {3, 5, 7};",
      "info" : "VariableDeclarationStatement[3021-3043]:VariableDeclarationStatement[3089-3111]"
    }, {
      "left" : "Condition c = Cnd.where(\"id\", \"iN\", ids);",
      "right" : "Condition c = Cnd.where(\"id\", \"iN\", ids);",
      "info" : "VariableDeclarationStatement[3052-3093]:VariableDeclarationStatement[3120-3161]"
    }, {
      "left" : "String exp = \"WHERE id IN (3,5,7)\";",
      "right" : "String exp = \"WHERE id IN (3,5,7)\";",
      "info" : "VariableDeclarationStatement[3102-3137]:VariableDeclarationStatement[3170-3205]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[3146-3186]:ExpressionStatement[3214-3254]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3198-3203]:MarkerAnnotation[3266-3271]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3208-3214]:Modifier[3276-3282]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3215-3219]:PrimitiveType[3283-3287]"
    }, {
      "left" : "test_in_by_int_list",
      "right" : "test_in_by_int_list",
      "info" : "SimpleName[3220-3239]:SimpleName[3288-3307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3242-3511]:Block[3310-3579]"
    }, {
      "left" : "List<Integer> list = new ArrayList<Integer>();",
      "right" : "List<Integer> list = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[3252-3298]:VariableDeclarationStatement[3320-3366]"
    }, {
      "left" : "list.add(3);",
      "right" : "list.add(3);",
      "info" : "ExpressionStatement[3307-3319]:ExpressionStatement[3375-3387]"
    }, {
      "left" : "list.add(5);",
      "right" : "list.add(5);",
      "info" : "ExpressionStatement[3328-3340]:ExpressionStatement[3396-3408]"
    }, {
      "left" : "list.add(7);",
      "right" : "list.add(7);",
      "info" : "ExpressionStatement[3349-3361]:ExpressionStatement[3417-3429]"
    }, {
      "left" : "Condition c = Cnd.where(\"id\", \"iN\", list);",
      "right" : "Condition c = Cnd.where(\"id\", \"iN\", list);",
      "info" : "VariableDeclarationStatement[3370-3412]:VariableDeclarationStatement[3438-3480]"
    }, {
      "left" : "String exp = \"WHERE id IN (3,5,7)\";",
      "right" : "String exp = \"WHERE id IN (3,5,7)\";",
      "info" : "VariableDeclarationStatement[3421-3456]:VariableDeclarationStatement[3489-3524]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[3465-3505]:ExpressionStatement[3533-3573]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3517-3522]:MarkerAnnotation[3585-3590]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3527-3533]:Modifier[3595-3601]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3534-3538]:PrimitiveType[3602-3606]"
    }, {
      "left" : "test_in_by_str_array",
      "right" : "test_in_by_str_array",
      "info" : "SimpleName[3539-3559]:SimpleName[3607-3627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3562-3737]:Block[3630-3805]"
    }, {
      "left" : "Condition c = Cnd.where(\"nm\", \"iN\", Lang.array(\"'A'\", \"B\"));",
      "right" : "Condition c = Cnd.where(\"nm\", \"iN\", Lang.array(\"'A'\", \"B\"));",
      "info" : "VariableDeclarationStatement[3572-3632]:VariableDeclarationStatement[3640-3700]"
    }, {
      "left" : "String exp = \"WHERE nm IN ('''A''','B')\";",
      "right" : "String exp = \"WHERE nm IN ('''A''','B')\";",
      "info" : "VariableDeclarationStatement[3641-3682]:VariableDeclarationStatement[3709-3750]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[3691-3731]:ExpressionStatement[3759-3799]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3743-3748]:MarkerAnnotation[3811-3816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3753-3759]:Modifier[3821-3827]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3760-3764]:PrimitiveType[3828-3832]"
    }, {
      "left" : "test_in_by_str_list",
      "right" : "test_in_by_str_list",
      "info" : "SimpleName[3765-3784]:SimpleName[3833-3852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3787-4045]:Block[3855-4113]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[3797-3841]:VariableDeclarationStatement[3865-3909]"
    }, {
      "left" : "list.add(\"'A'\");",
      "right" : "list.add(\"'A'\");",
      "info" : "ExpressionStatement[3850-3866]:ExpressionStatement[3918-3934]"
    }, {
      "left" : "list.add(\"B\");",
      "right" : "list.add(\"B\");",
      "info" : "ExpressionStatement[3875-3889]:ExpressionStatement[3943-3957]"
    }, {
      "left" : "Condition c = Cnd.where(\"nm\", \"iN\", list);",
      "right" : "Condition c = Cnd.where(\"nm\", \"iN\", list);",
      "info" : "VariableDeclarationStatement[3898-3940]:VariableDeclarationStatement[3966-4008]"
    }, {
      "left" : "String exp = \"WHERE nm IN ('''A''','B')\";",
      "right" : "String exp = \"WHERE nm IN ('''A''','B')\";",
      "info" : "VariableDeclarationStatement[3949-3990]:VariableDeclarationStatement[4017-4058]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[3999-4039]:ExpressionStatement[4067-4107]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4051-4056]:MarkerAnnotation[4119-4124]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4061-4067]:Modifier[4129-4135]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4068-4072]:PrimitiveType[4136-4140]"
    }, {
      "left" : "test_is_null",
      "right" : "test_is_null",
      "info" : "SimpleName[4073-4085]:SimpleName[4141-4153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4088-4238]:Block[4156-4306]"
    }, {
      "left" : "Condition c = Cnd.where(\"nm\", \" is \", null);",
      "right" : "Condition c = Cnd.where(\"nm\", \" is \", null);",
      "info" : "VariableDeclarationStatement[4098-4142]:VariableDeclarationStatement[4166-4210]"
    }, {
      "left" : "String exp = \"WHERE nm IS NULL\";",
      "right" : "String exp = \"WHERE nm IS NULL\";",
      "info" : "VariableDeclarationStatement[4151-4183]:VariableDeclarationStatement[4219-4251]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[4192-4232]:ExpressionStatement[4260-4300]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4244-4249]:MarkerAnnotation[4312-4317]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4254-4260]:Modifier[4322-4328]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4261-4265]:PrimitiveType[4329-4333]"
    }, {
      "left" : "test_is_not_null",
      "right" : "test_is_not_null",
      "info" : "SimpleName[4266-4282]:SimpleName[4334-4350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4285-4443]:Block[4353-4511]"
    }, {
      "left" : "Condition c = Cnd.where(\"nm\", \" is nOT \", null);",
      "right" : "Condition c = Cnd.where(\"nm\", \" is nOT \", null);",
      "info" : "VariableDeclarationStatement[4295-4343]:VariableDeclarationStatement[4363-4411]"
    }, {
      "left" : "String exp = \"WHERE nm IS NOT NULL\";",
      "right" : "String exp = \"WHERE nm IS NOT NULL\";",
      "info" : "VariableDeclarationStatement[4352-4388]:VariableDeclarationStatement[4420-4456]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[4397-4437]:ExpressionStatement[4465-4505]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4449-4454]:MarkerAnnotation[4517-4522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4459-4465]:Modifier[4527-4533]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4466-4470]:PrimitiveType[4534-4538]"
    }, {
      "left" : "test_not_in",
      "right" : "test_not_in",
      "info" : "SimpleName[4471-4482]:SimpleName[4539-4550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4485-4660]:Block[4553-4728]"
    }, {
      "left" : "Condition c = Cnd.where(\"nm\", \" Not iN \", new int[]{1, 2, 3});",
      "right" : "Condition c = Cnd.where(\"nm\", \" Not iN \", new int[]{1, 2, 3});",
      "info" : "VariableDeclarationStatement[4495-4557]:VariableDeclarationStatement[4563-4625]"
    }, {
      "left" : "String exp = \"WHERE nm NOT IN (1,2,3)\";",
      "right" : "String exp = \"WHERE nm NOT IN (1,2,3)\";",
      "info" : "VariableDeclarationStatement[4566-4605]:VariableDeclarationStatement[4634-4673]"
    }, {
      "left" : "assertEquals(exp, c.toSql(null).trim());",
      "right" : "assertEquals(exp, c.toSql(null).trim());",
      "info" : "ExpressionStatement[4614-4654]:ExpressionStatement[4682-4722]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4666-4671]:MarkerAnnotation[4734-4739]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4676-4682]:Modifier[4744-4750]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4683-4687]:PrimitiveType[4751-4755]"
    }, {
      "left" : "test_add_other_or_method_by_github_issuse_148",
      "right" : "test_add_other_or_method_by_github_issuse_148",
      "info" : "SimpleName[4688-4733]:SimpleName[4756-4801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4736-5243]:Block[4804-5311]"
    }, {
      "left" : "SqlExpression e1 = Cnd.exps(\"city\", \"=\", \"beijing\")\n                              .or(\"city\", \"=\", \"shanghai\")\n                              .or(\"city\", \"=\", \"guangzhou\")\n                              .or(\"city\", \"=\", \"shenzhen\");",
      "right" : "SqlExpression e1 = Cnd.exps(\"city\", \"=\", \"beijing\")\n                              .or(\"city\", \"=\", \"shanghai\")\n                              .or(\"city\", \"=\", \"guangzhou\")\n                              .or(\"city\", \"=\", \"shenzhen\");",
      "info" : "VariableDeclarationStatement[4746-4976]:VariableDeclarationStatement[4814-5044]"
    }, {
      "left" : "SqlExpression e2 = Cnd.exps(\"age\", \">\", 18).and(\"age\", \"<\", 30);",
      "right" : "SqlExpression e2 = Cnd.exps(\"age\", \">\", 18).and(\"age\", \"<\", 30);",
      "info" : "VariableDeclarationStatement[4985-5049]:VariableDeclarationStatement[5053-5117]"
    }, {
      "left" : "String exp = \"WHERE (ct='beijing' OR ct='shanghai' OR ct='guangzhou' OR ct='shenzhen') AND (age>18 AND age<30)\";",
      "right" : "String exp = \"WHERE (ct='beijing' OR ct='shanghai' OR ct='guangzhou' OR ct='shenzhen') AND (age>18 AND age<30)\";",
      "info" : "VariableDeclarationStatement[5058-5170]:VariableDeclarationStatement[5126-5238]"
    }, {
      "left" : "assertEquals(exp, Cnd.where(e1).and(e2).toSql(en).trim());",
      "right" : "assertEquals(exp, Cnd.where(e1).and(e2).toSql(en).trim());",
      "info" : "ExpressionStatement[5179-5237]:ExpressionStatement[5247-5305]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5249-5254]:MarkerAnnotation[5317-5322]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5259-5265]:Modifier[5327-5333]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5266-5270]:PrimitiveType[5334-5338]"
    }, {
      "left" : "test_other_op",
      "right" : "test_other_op",
      "info" : "SimpleName[5271-5284]:SimpleName[5339-5352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5287-5423]:Block[5355-5491]"
    }, {
      "left" : "assertEquals(\" WHERE ok IS true\", Cnd.where(\"ok\", \"is\", true)\n                                             .toString());",
      "right" : "assertEquals(\" WHERE ok IS true\", Cnd.where(\"ok\", \"is\", true)\n                                             .toString());",
      "info" : "ExpressionStatement[5297-5417]:ExpressionStatement[5365-5485]"
    } ]
  },
  "interFileMappings" : { }
}