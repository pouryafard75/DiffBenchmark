{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Daos",
      "right" : "Daos",
      "info" : "TypeDeclaration[1449-21748]:TypeDeclaration[1496-26913]"
    }, {
      "left" : "private static final Log log = Logs.get();",
      "right" : "private static final Log log = Logs.get();",
      "info" : "FieldDeclaration[1609-1651]:FieldDeclaration[1687-1729]"
    }, {
      "left" : "public static void safeClose(Statement stat, ResultSet rs)",
      "right" : "public static void safeClose(Statement stat, ResultSet rs)",
      "info" : "MethodDeclaration[1657-1896]:MethodDeclaration[1735-2016]"
    }, {
      "left" : "public static void safeClose(Statement stat)",
      "right" : "public static void safeClose(Statement stat)",
      "info" : "MethodDeclaration[1902-2153]:MethodDeclaration[2022-2299]"
    }, {
      "left" : "public static void safeClose(ResultSet rs)",
      "right" : "public static void safeClose(ResultSet rs)",
      "info" : "MethodDeclaration[2159-2405]:MethodDeclaration[2305-2575]"
    }, {
      "left" : "public static int getColumnIndex(ResultSetMetaData meta, String colName) throws SQLException",
      "right" : "public static int getColumnIndex(ResultSetMetaData meta, String colName) throws SQLException",
      "info" : "MethodDeclaration[2411-3153]:MethodDeclaration[2581-3386]"
    }, {
      "left" : "public static boolean isIntLikeColumn(ResultSetMetaData meta, int index) throws SQLException",
      "right" : "public static boolean isIntLikeColumn(ResultSetMetaData meta, int index) throws SQLException",
      "info" : "MethodDeclaration[3159-3664]:MethodDeclaration[3392-3960]"
    }, {
      "left" : "public static Pager updatePagerCount(Pager pager, Dao dao, Class<?> entityType, Condition cnd)",
      "right" : "public static Pager updatePagerCount(Pager pager, Dao dao, Class<?> entityType, Condition cnd)",
      "info" : "MethodDeclaration[3670-4088]:MethodDeclaration[3966-4464]"
    }, {
      "left" : "public static Pager updatePagerCount(Pager pager, Dao dao, String tableName, Condition cnd)",
      "right" : "public static Pager updatePagerCount(Pager pager, Dao dao, String tableName, Condition cnd)",
      "info" : "MethodDeclaration[4094-4486]:MethodDeclaration[4470-4942]"
    }, {
      "left" : "public static <T> List<T> queryList(Dao dao, Class<T> klass, String sql_str)",
      "right" : "public static <T> List<T> queryList(Dao dao, Class<T> klass, String sql_str)",
      "info" : "MethodDeclaration[4492-4942]:MethodDeclaration[4948-5456]"
    }, {
      "left" : "public static Object query(Dao dao, String sql_str, SqlCallback callback)",
      "right" : "public static Object query(Dao dao, String sql_str, SqlCallback callback)",
      "info" : "MethodDeclaration[4948-5290]:MethodDeclaration[5462-5866]"
    }, {
      "left" : "public static <T> List<T> queryWithLinks(    final Dao dao,\n                                                final Class<T> classOfT,\n                                                final Condition cnd,\n                                                final Pager pager,\n                                                final String regex)",
      "right" : "public static <T> List<T> queryWithLinks(final Dao dao,\n                                             final Class<T> classOfT,\n                                             final Condition cnd,\n                                             final Pager pager,\n                                             final String regex)",
      "info" : "MethodDeclaration[5296-6184]:MethodDeclaration[5872-6842]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[5924-6130]:MethodDeclaration[6582-6788]"
    }, {
      "left" : "public static StringBuilder dataDict(DataSource ds, String...packages)",
      "right" : "public static StringBuilder dataDict(DataSource ds, String... packages)",
      "info" : "MethodDeclaration[6190-8998]:MethodDeclaration[6848-9755]"
    }, {
      "left" : "public static <T> List<T> query(Dao dao, Class<T> classOfT, String sql, Condition cnd, Pager pager)",
      "right" : "public static <T> List<T> query(Dao dao,\n                                    Class<T> classOfT,\n                                    String sql,\n                                    Condition cnd,\n                                    Pager pager)",
      "info" : "MethodDeclaration[9008-9385]:MethodDeclaration[9761-10282]"
    }, {
      "left" : "public static long queryCount(Dao dao, String sql)",
      "right" : "public static long queryCount(Dao dao, String sql)",
      "info" : "MethodDeclaration[9395-9659]:MethodDeclaration[10288-10652]"
    }, {
      "left" : "public static int updateBySpecialChain(Dao dao, Entity en, String tableName, Chain chain, Condition cnd)",
      "right" : "public static int updateBySpecialChain(Dao dao,\n                                           Entity en,\n                                           String tableName,\n                                           Chain chain,\n                                           Condition cnd)",
      "info" : "MethodDeclaration[9669-12342]:MethodDeclaration[10658-13760]"
    }, {
      "left" : "public void invoke(Connection conn) throws Exception",
      "right" : "public void invoke(Connection conn) throws Exception",
      "info" : "MethodDeclaration[11865-12300]:MethodDeclaration[13267-13718]"
    }, {
      "left" : "public static void insertBySpecialChain(Dao dao, Entity en, String tableName, Chain chain)",
      "right" : "public static void insertBySpecialChain(Dao dao, Entity en, String tableName, Chain chain)",
      "info" : "MethodDeclaration[12352-14764]:MethodDeclaration[13766-16188]"
    }, {
      "left" : "public void invoke(Connection conn) throws Exception",
      "right" : "public void invoke(Connection conn) throws Exception",
      "info" : "MethodDeclaration[14327-14746]:MethodDeclaration[15735-16170]"
    }, {
      "left" : "public static void createTablesInPackage(Dao dao, String packageName, boolean force)",
      "right" : "public static void createTablesInPackage(Dao dao, String packageName, boolean force)",
      "info" : "MethodDeclaration[14774-15197]:MethodDeclaration[16194-16709]"
    }, {
      "left" : "private static Class<?>[] iz = new Class<?>[]{Dao.class};",
      "right" : "private static Class<?>[] iz = new Class<?>[]{Dao.class};",
      "info" : "FieldDeclaration[15204-15261]:FieldDeclaration[16715-16772]"
    }, {
      "left" : "public static Dao ext(Dao dao, FieldFilter filter)",
      "right" : "public static Dao ext(Dao dao, FieldFilter filter)",
      "info" : "MethodDeclaration[15265-15504]:MethodDeclaration[16778-17088]"
    }, {
      "left" : "public static Dao ext(Dao dao, Object tableName)",
      "right" : "public static Dao ext(Dao dao, Object tableName)",
      "info" : "MethodDeclaration[15508-15749]:MethodDeclaration[17094-17406]"
    }, {
      "left" : "public static Dao ext(Dao dao, FieldFilter filter, Object tableName)",
      "right" : "public static Dao ext(Dao dao, FieldFilter filter, Object tableName)",
      "info" : "MethodDeclaration[15753-16182]:MethodDeclaration[17412-17954]"
    }, {
      "left" : "public static boolean filterFields(Object obj, FieldMatcher matcher, Dao dao, Callback2<MappingField, Object> callback)",
      "right" : "public static boolean filterFields(Object obj,\n                                       FieldMatcher matcher,\n                                       Dao dao,\n                                       Callback2<MappingField, Object> callback)",
      "info" : "MethodDeclaration[16193-18066]:MethodDeclaration[17960-19943]"
    }, {
      "left" : "public static void migration(final Dao dao, final Class<?> klass, final boolean add, final boolean del)",
      "right" : "public static void migration(Dao dao,\n                                 final Class<?> klass,\n                                 final boolean add,\n                                 final boolean del,\n                                 Object tableName)",
      "info" : "MethodDeclaration[18076-21264]:MethodDeclaration[20322-25570]"
    }, {
      "left" : "public void invoke(Connection conn) throws Exception",
      "right" : "public void invoke(Connection conn) throws Exception",
      "info" : "MethodDeclaration[18652-21175]:MethodDeclaration[21299-25481]"
    }, {
      "left" : "public static void migration(Dao dao, String packageName, boolean add, boolean del)",
      "right" : "public static void migration(Dao dao, String packageName, boolean add, boolean del)",
      "info" : "MethodDeclaration[21270-21746]:MethodDeclaration[26349-26911]"
    }, {
      "left" : "ExtDaoInvocationHandler",
      "right" : "ExtDaoInvocationHandler",
      "info" : "TypeDeclaration[21750-22817]:TypeDeclaration[26915-28316]"
    }, {
      "left" : "protected ExtDaoInvocationHandler(Dao dao, FieldFilter filter, Object tableName)",
      "right" : "protected ExtDaoInvocationHandler(Dao dao, FieldFilter filter, Object tableName)",
      "info" : "MethodDeclaration[21814-21971]:MethodDeclaration[26981-27159]"
    }, {
      "left" : "public Dao dao;",
      "right" : "public Dao dao;",
      "info" : "FieldDeclaration[21975-21990]:FieldDeclaration[27165-27180]"
    }, {
      "left" : "public FieldFilter filter;",
      "right" : "public FieldFilter filter;",
      "info" : "FieldDeclaration[21992-22018]:FieldDeclaration[27185-27211]"
    }, {
      "left" : "public Object tableName;",
      "right" : "public Object tableName;",
      "info" : "FieldDeclaration[22020-22044]:FieldDeclaration[27216-27240]"
    }, {
      "left" : "public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable",
      "right" : "public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable",
      "info" : "MethodDeclaration[22048-22815]:MethodDeclaration[27246-28314]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[22204-22534]:MethodDeclaration[27415-27910]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[22634-22679]:MethodDeclaration[28043-28115]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1571-1577]:Modifier[1653-1659]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[1578-1586]:Modifier[1660-1668]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1587-1592]:TYPE_DECLARATION_KIND[1669-1674]"
    }, {
      "left" : "Daos",
      "right" : "Daos",
      "info" : "SimpleName[1593-1597]:SimpleName[1675-1679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1782-1788]:Modifier[1902-1908]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1789-1795]:Modifier[1909-1915]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1796-1800]:PrimitiveType[1916-1920]"
    }, {
      "left" : "safeClose",
      "right" : "safeClose",
      "info" : "SimpleName[1801-1810]:SimpleName[1921-1930]"
    }, {
      "left" : "Statement stat",
      "right" : "Statement stat",
      "info" : "SingleVariableDeclaration[1811-1825]:SingleVariableDeclaration[1931-1945]"
    }, {
      "left" : "ResultSet rs",
      "right" : "ResultSet rs",
      "info" : "SingleVariableDeclaration[1827-1839]:SingleVariableDeclaration[1947-1959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1841-1896]:Block[1961-2016]"
    }, {
      "left" : "safeClose(rs);",
      "right" : "safeClose(rs);",
      "info" : "ExpressionStatement[1851-1865]:ExpressionStatement[1971-1985]"
    }, {
      "left" : "safeClose(stat);",
      "right" : "safeClose(stat);",
      "info" : "ExpressionStatement[1874-1890]:ExpressionStatement[1994-2010]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1978-1984]:Modifier[2124-2130]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1985-1991]:Modifier[2131-2137]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1992-1996]:PrimitiveType[2138-2142]"
    }, {
      "left" : "safeClose",
      "right" : "safeClose",
      "info" : "SimpleName[1997-2006]:SimpleName[2143-2152]"
    }, {
      "left" : "Statement stat",
      "right" : "Statement stat",
      "info" : "SingleVariableDeclaration[2007-2021]:SingleVariableDeclaration[2153-2167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2023-2153]:Block[2169-2299]"
    }, {
      "left" : "if (null != stat)",
      "right" : "if (null != stat)",
      "info" : "IfStatement[2033-2147]:IfStatement[2179-2293]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2063-2147]:TryStatement[2209-2293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2067-2112]:Block[2213-2258]"
    }, {
      "left" : "stat.close();",
      "right" : "stat.close();",
      "info" : "ExpressionStatement[2085-2098]:ExpressionStatement[2231-2244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2145-2147]:Block[2291-2293]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2236-2242]:Modifier[2406-2412]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2243-2249]:Modifier[2413-2419]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2250-2254]:PrimitiveType[2420-2424]"
    }, {
      "left" : "safeClose",
      "right" : "safeClose",
      "info" : "SimpleName[2255-2264]:SimpleName[2425-2434]"
    }, {
      "left" : "ResultSet rs",
      "right" : "ResultSet rs",
      "info" : "SingleVariableDeclaration[2265-2277]:SingleVariableDeclaration[2435-2447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2279-2405]:Block[2449-2575]"
    }, {
      "left" : "if (null != rs)",
      "right" : "if (null != rs)",
      "info" : "IfStatement[2289-2399]:IfStatement[2459-2569]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2317-2399]:TryStatement[2487-2569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2321-2364]:Block[2491-2534]"
    }, {
      "left" : "rs.close();",
      "right" : "rs.close();",
      "info" : "ExpressionStatement[2339-2350]:ExpressionStatement[2509-2520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2397-2399]:Block[2567-2569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2593-2599]:Modifier[2826-2832]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2600-2606]:Modifier[2833-2839]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2607-2610]:PrimitiveType[2840-2843]"
    }, {
      "left" : "getColumnIndex",
      "right" : "getColumnIndex",
      "info" : "SimpleName[2611-2625]:SimpleName[2844-2858]"
    }, {
      "left" : "ResultSetMetaData meta",
      "right" : "ResultSetMetaData meta",
      "info" : "SingleVariableDeclaration[2626-2648]:SingleVariableDeclaration[2859-2881]"
    }, {
      "left" : "String colName",
      "right" : "String colName",
      "info" : "SingleVariableDeclaration[2650-2664]:SingleVariableDeclaration[2883-2897]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[2673-2685]:SimpleType[2906-2918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2686-3153]:Block[2919-3386]"
    }, {
      "left" : "if (meta == null)",
      "right" : "if (meta == null)",
      "info" : "IfStatement[2696-2735]:IfStatement[2929-2968]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[2726-2735]:ReturnStatement[2959-2968]"
    }, {
      "left" : "int columnCount = meta.getColumnCount();",
      "right" : "int columnCount = meta.getColumnCount();",
      "info" : "VariableDeclarationStatement[2744-2784]:VariableDeclarationStatement[2977-3017]"
    }, {
      "left" : "for (int i = 1; i <= columnCount; i++)\n            if (meta.getColumnName(i).equalsIgnoreCase(colName))\n                return i;",
      "right" : "for (int i = 1; i <= columnCount; i++)\n            if (meta.getColumnName(i).equalsIgnoreCase(colName))\n                return i;",
      "info" : "ForStatement[2793-2922]:ForStatement[3026-3155]"
    }, {
      "left" : "if (meta.getColumnName(i).equalsIgnoreCase(colName))",
      "right" : "if (meta.getColumnName(i).equalsIgnoreCase(colName))",
      "info" : "IfStatement[2844-2922]:IfStatement[3077-3155]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[2913-2922]:ReturnStatement[3146-3155]"
    }, {
      "left" : "log.infof(\"Can not find @Column(%s) in table/view (%s)\", colName, meta.getTableName(1));",
      "right" : "log.infof(\"Can not find @Column(%s) in table/view (%s)\", colName, meta.getTableName(1));",
      "info" : "ExpressionStatement[2972-3060]:ExpressionStatement[3205-3293]"
    }, {
      "left" : "throw Lang.makeThrow(SQLException.class, \"Can not find @Column(%s)\", colName);",
      "right" : "throw Lang.makeThrow(SQLException.class, \"Can not find @Column(%s)\", colName);",
      "info" : "ThrowStatement[3069-3147]:ThrowStatement[3302-3380]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3322-3328]:Modifier[3618-3624]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3329-3335]:Modifier[3625-3631]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3336-3343]:PrimitiveType[3632-3639]"
    }, {
      "left" : "isIntLikeColumn",
      "right" : "isIntLikeColumn",
      "info" : "SimpleName[3344-3359]:SimpleName[3640-3655]"
    }, {
      "left" : "ResultSetMetaData meta",
      "right" : "ResultSetMetaData meta",
      "info" : "SingleVariableDeclaration[3360-3382]:SingleVariableDeclaration[3656-3678]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[3384-3393]:SingleVariableDeclaration[3680-3689]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[3402-3414]:SimpleType[3698-3710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3415-3664]:Block[3711-3960]"
    }, {
      "left" : "switch (meta.getColumnType(index)) {\n        case Types.BIGINT:\n        case Types.INTEGER:\n        case Types.SMALLINT:\n        case Types.TINYINT:\n        case Types.NUMERIC:\n            return true;\n        }",
      "right" : "switch (meta.getColumnType(index)) {\n        case Types.BIGINT:\n        case Types.INTEGER:\n        case Types.SMALLINT:\n        case Types.TINYINT:\n        case Types.NUMERIC:\n            return true;\n        }",
      "info" : "SwitchStatement[3425-3636]:SwitchStatement[3721-3932]"
    }, {
      "left" : "case Types.BIGINT:",
      "right" : "case Types.BIGINT:",
      "info" : "SwitchCase[3470-3488]:SwitchCase[3766-3784]"
    }, {
      "left" : "case Types.INTEGER:",
      "right" : "case Types.INTEGER:",
      "info" : "SwitchCase[3497-3516]:SwitchCase[3793-3812]"
    }, {
      "left" : "case Types.SMALLINT:",
      "right" : "case Types.SMALLINT:",
      "info" : "SwitchCase[3525-3545]:SwitchCase[3821-3841]"
    }, {
      "left" : "case Types.TINYINT:",
      "right" : "case Types.TINYINT:",
      "info" : "SwitchCase[3554-3573]:SwitchCase[3850-3869]"
    }, {
      "left" : "case Types.NUMERIC:",
      "right" : "case Types.NUMERIC:",
      "info" : "SwitchCase[3582-3601]:SwitchCase[3878-3897]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3614-3626]:ReturnStatement[3910-3922]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3645-3658]:ReturnStatement[3941-3954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3863-3869]:Modifier[4239-4245]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3870-3876]:Modifier[4246-4252]"
    }, {
      "left" : "Pager",
      "right" : "Pager",
      "info" : "SimpleType[3877-3882]:SimpleType[4253-4258]"
    }, {
      "left" : "updatePagerCount",
      "right" : "updatePagerCount",
      "info" : "SimpleName[3883-3899]:SimpleName[4259-4275]"
    }, {
      "left" : "Pager pager",
      "right" : "Pager pager",
      "info" : "SingleVariableDeclaration[3900-3911]:SingleVariableDeclaration[4276-4287]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[3913-3920]:SingleVariableDeclaration[4289-4296]"
    }, {
      "left" : "Class<?> entityType",
      "right" : "Class<?> entityType",
      "info" : "SingleVariableDeclaration[3922-3941]:SingleVariableDeclaration[4298-4317]"
    }, {
      "left" : "Condition cnd",
      "right" : "Condition cnd",
      "info" : "SingleVariableDeclaration[3943-3956]:SingleVariableDeclaration[4319-4332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3958-4088]:Block[4334-4464]"
    }, {
      "left" : "if (null != pager)",
      "right" : "if (null != pager)",
      "info" : "IfStatement[3968-4060]:IfStatement[4344-4436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3987-4060]:Block[4363-4436]"
    }, {
      "left" : "pager.setRecordCount(dao.count(entityType, cnd));",
      "right" : "pager.setRecordCount(dao.count(entityType, cnd));",
      "info" : "ExpressionStatement[4001-4050]:ExpressionStatement[4377-4426]"
    }, {
      "left" : "return pager;",
      "right" : "return pager;",
      "info" : "ReturnStatement[4069-4082]:ReturnStatement[4445-4458]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4265-4271]:Modifier[4721-4727]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4272-4278]:Modifier[4728-4734]"
    }, {
      "left" : "Pager",
      "right" : "Pager",
      "info" : "SimpleType[4279-4284]:SimpleType[4735-4740]"
    }, {
      "left" : "updatePagerCount",
      "right" : "updatePagerCount",
      "info" : "SimpleName[4285-4301]:SimpleName[4741-4757]"
    }, {
      "left" : "Pager pager",
      "right" : "Pager pager",
      "info" : "SingleVariableDeclaration[4302-4313]:SingleVariableDeclaration[4758-4769]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[4315-4322]:SingleVariableDeclaration[4771-4778]"
    }, {
      "left" : "String tableName",
      "right" : "String tableName",
      "info" : "SingleVariableDeclaration[4324-4340]:SingleVariableDeclaration[4780-4796]"
    }, {
      "left" : "Condition cnd",
      "right" : "Condition cnd",
      "info" : "SingleVariableDeclaration[4342-4355]:SingleVariableDeclaration[4798-4811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4357-4486]:Block[4813-4942]"
    }, {
      "left" : "if (null != pager)",
      "right" : "if (null != pager)",
      "info" : "IfStatement[4367-4458]:IfStatement[4823-4914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4386-4458]:Block[4842-4914]"
    }, {
      "left" : "pager.setRecordCount(dao.count(tableName, cnd));",
      "right" : "pager.setRecordCount(dao.count(tableName, cnd));",
      "info" : "ExpressionStatement[4400-4448]:ExpressionStatement[4856-4904]"
    }, {
      "left" : "return pager;",
      "right" : "return pager;",
      "info" : "ReturnStatement[4467-4480]:ReturnStatement[4923-4936]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4637-4643]:Modifier[5155-5161]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4644-4650]:Modifier[5162-5168]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[4652-4653]:TypeParameter[5170-5171]"
    }, {
      "left" : "List<T>",
      "right" : "List<T>",
      "info" : "ParameterizedType[4655-4662]:ParameterizedType[5173-5180]"
    }, {
      "left" : "queryList",
      "right" : "queryList",
      "info" : "SimpleName[4663-4672]:SimpleName[5181-5190]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[4673-4680]:SingleVariableDeclaration[5191-5198]"
    }, {
      "left" : "Class<T> klass",
      "right" : "Class<T> klass",
      "info" : "SingleVariableDeclaration[4682-4696]:SingleVariableDeclaration[5200-5214]"
    }, {
      "left" : "String sql_str",
      "right" : "String sql_str",
      "info" : "SingleVariableDeclaration[4698-4712]:SingleVariableDeclaration[5216-5230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4714-4942]:Block[5232-5456]"
    }, {
      "left" : "Sql sql = Sqls.create(sql_str)\n                        .setCallback(Sqls.callback.entities())\n                        .setEntity(dao.getEntity(klass));",
      "right" : "Sql sql = Sqls.create(sql_str)\n                      .setCallback(Sqls.callback.entities())\n                      .setEntity(dao.getEntity(klass));",
      "info" : "VariableDeclarationStatement[4724-4875]:VariableDeclarationStatement[5242-5389]"
    }, {
      "left" : "dao.execute(sql);",
      "right" : "dao.execute(sql);",
      "info" : "ExpressionStatement[4884-4901]:ExpressionStatement[5398-5415]"
    }, {
      "left" : "return sql.getList(klass);",
      "right" : "return sql.getList(klass);",
      "info" : "ReturnStatement[4910-4936]:ReturnStatement[5424-5450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5089-5095]:Modifier[5665-5671]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5096-5102]:Modifier[5672-5678]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[5103-5109]:SimpleType[5679-5685]"
    }, {
      "left" : "query",
      "right" : "query",
      "info" : "SimpleName[5110-5115]:SimpleName[5686-5691]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[5116-5123]:SingleVariableDeclaration[5692-5699]"
    }, {
      "left" : "String sql_str",
      "right" : "String sql_str",
      "info" : "SingleVariableDeclaration[5125-5139]:SingleVariableDeclaration[5701-5715]"
    }, {
      "left" : "SqlCallback callback",
      "right" : "SqlCallback callback",
      "info" : "SingleVariableDeclaration[5141-5161]:SingleVariableDeclaration[5717-5737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5163-5290]:Block[5739-5866]"
    }, {
      "left" : "Sql sql = Sqls.create(sql_str).setCallback(callback);",
      "right" : "Sql sql = Sqls.create(sql_str).setCallback(callback);",
      "info" : "VariableDeclarationStatement[5173-5226]:VariableDeclarationStatement[5749-5802]"
    }, {
      "left" : "dao.execute(sql);",
      "right" : "dao.execute(sql);",
      "info" : "ExpressionStatement[5235-5252]:ExpressionStatement[5811-5828]"
    }, {
      "left" : "return sql.getResult();",
      "right" : "return sql.getResult();",
      "info" : "ReturnStatement[5261-5284]:ReturnStatement[5837-5860]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5510-5516]:Modifier[6184-6190]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5517-5523]:Modifier[6191-6197]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[5525-5526]:TypeParameter[6199-6200]"
    }, {
      "left" : "List<T>",
      "right" : "List<T>",
      "info" : "ParameterizedType[5528-5535]:ParameterizedType[6202-6209]"
    }, {
      "left" : "queryWithLinks",
      "right" : "queryWithLinks",
      "info" : "SimpleName[5536-5550]:SimpleName[6210-6224]"
    }, {
      "left" : "final Dao dao",
      "right" : "final Dao dao",
      "info" : "SingleVariableDeclaration[5555-5568]:SingleVariableDeclaration[6225-6238]"
    }, {
      "left" : "final Class<T> classOfT",
      "right" : "final Class<T> classOfT",
      "info" : "SingleVariableDeclaration[5618-5641]:SingleVariableDeclaration[6285-6308]"
    }, {
      "left" : "final Condition cnd",
      "right" : "final Condition cnd",
      "info" : "SingleVariableDeclaration[5691-5710]:SingleVariableDeclaration[6355-6374]"
    }, {
      "left" : "final Pager pager",
      "right" : "final Pager pager",
      "info" : "SingleVariableDeclaration[5760-5777]:SingleVariableDeclaration[6421-6438]"
    }, {
      "left" : "final String regex",
      "right" : "final String regex",
      "info" : "SingleVariableDeclaration[5827-5845]:SingleVariableDeclaration[6485-6503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5847-6184]:Block[6505-6842]"
    }, {
      "left" : "Molecule<List<T>> molecule = new Molecule<List<T>>() {\n            public void run() {\n                List<T> list = dao.query(classOfT, cnd, pager);\n                for (T t : list)\n                    dao.fetchLinks(t, regex);\n                setObj(list);\n            }\n        };",
      "right" : "Molecule<List<T>> molecule = new Molecule<List<T>>() {\n            public void run() {\n                List<T> list = dao.query(classOfT, cnd, pager);\n                for (T t : list)\n                    dao.fetchLinks(t, regex);\n                setObj(list);\n            }\n        };",
      "info" : "VariableDeclarationStatement[5857-6141]:VariableDeclarationStatement[6515-6799]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5924-5930]:Modifier[6582-6588]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5931-5935]:PrimitiveType[6589-6593]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[5936-5939]:SimpleName[6594-6597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5942-6130]:Block[6600-6788]"
    }, {
      "left" : "List<T> list = dao.query(classOfT, cnd, pager);",
      "right" : "List<T> list = dao.query(classOfT, cnd, pager);",
      "info" : "VariableDeclarationStatement[5960-6007]:VariableDeclarationStatement[6618-6665]"
    }, {
      "left" : "for (T t : list)\n                    dao.fetchLinks(t, regex);",
      "right" : "for (T t : list)\n                    dao.fetchLinks(t, regex);",
      "info" : "EnhancedForStatement[6024-6086]:EnhancedForStatement[6682-6744]"
    }, {
      "left" : "dao.fetchLinks(t, regex);",
      "right" : "dao.fetchLinks(t, regex);",
      "info" : "ExpressionStatement[6061-6086]:ExpressionStatement[6719-6744]"
    }, {
      "left" : "setObj(list);",
      "right" : "setObj(list);",
      "info" : "ExpressionStatement[6103-6116]:ExpressionStatement[6761-6774]"
    }, {
      "left" : "return Trans.exec(molecule);",
      "right" : "return Trans.exec(molecule);",
      "info" : "ReturnStatement[6150-6178]:ReturnStatement[6808-6836]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6219-6225]:Modifier[6879-6885]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6226-6232]:Modifier[6886-6892]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[6233-6246]:SimpleType[6893-6906]"
    }, {
      "left" : "dataDict",
      "right" : "dataDict",
      "info" : "SimpleName[6247-6255]:SimpleName[6907-6915]"
    }, {
      "left" : "DataSource ds",
      "right" : "DataSource ds",
      "info" : "SingleVariableDeclaration[6256-6269]:SingleVariableDeclaration[6916-6929]"
    }, {
      "left" : "String...packages",
      "right" : "String... packages",
      "info" : "SingleVariableDeclaration[6271-6288]:SingleVariableDeclaration[6931-6949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6290-8998]:Block[6951-9755]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6300-6339]:VariableDeclarationStatement[6961-7000]"
    }, {
      "left" : "List<Class<?>> ks = new ArrayList<Class<?>>();",
      "right" : "List<Class<?>> ks = new ArrayList<Class<?>>();",
      "info" : "VariableDeclarationStatement[6348-6394]:VariableDeclarationStatement[7009-7055]"
    }, {
      "left" : "for (String packageName : packages)",
      "right" : "for (String packageName : packages)",
      "info" : "EnhancedForStatement[6403-6510]:EnhancedForStatement[7064-7171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6439-6510]:Block[7100-7171]"
    }, {
      "left" : "ks.addAll(Scans.me().scanPackage(packageName));",
      "right" : "ks.addAll(Scans.me().scanPackage(packageName));",
      "info" : "ExpressionStatement[6453-6500]:ExpressionStatement[7114-7161]"
    }, {
      "left" : "Iterator<Class<?>> it = ks.iterator();",
      "right" : "Iterator<Class<?>> it = ks.iterator();",
      "info" : "VariableDeclarationStatement[6519-6557]:VariableDeclarationStatement[7180-7218]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[6566-6725]:WhileStatement[7227-7386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6587-6725]:Block[7248-7386]"
    }, {
      "left" : "Class<?> klass = it.next();",
      "right" : "Class<?> klass = it.next();",
      "info" : "VariableDeclarationStatement[6601-6628]:VariableDeclarationStatement[7262-7289]"
    }, {
      "left" : "if (klass.getAnnotation(Table.class) == null)",
      "right" : "if (klass.getAnnotation(Table.class) == null)",
      "info" : "IfStatement[6641-6715]:IfStatement[7302-7376]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[6703-6715]:ExpressionStatement[7364-7376]"
    }, {
      "left" : "JdbcExpert exp = Jdbcs.getExpert(ds);",
      "right" : "JdbcExpert exp = Jdbcs.getExpert(ds);",
      "info" : "VariableDeclarationStatement[6799-6836]:VariableDeclarationStatement[7453-7490]"
    }, {
      "left" : "NutDao dao = new NutDao(ds);",
      "right" : "NutDao dao = new NutDao(ds);",
      "info" : "VariableDeclarationStatement[6845-6873]:VariableDeclarationStatement[7499-7527]"
    }, {
      "left" : "Method evalFieldType;",
      "right" : "Method evalFieldType;",
      "info" : "VariableDeclarationStatement[6891-6912]:VariableDeclarationStatement[7537-7558]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6921-7104]:TryStatement[7567-7758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6925-7035]:Block[7571-7681]"
    }, {
      "left" : "evalFieldType = exp.getClass().getDeclaredMethod(\"evalFieldType\", MappingField.class);",
      "right" : "evalFieldType = exp.getClass().getDeclaredMethod(\"evalFieldType\", MappingField.class);",
      "info" : "ExpressionStatement[6939-7025]:ExpressionStatement[7585-7671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7056-7104]:Block[7710-7758]"
    }, {
      "left" : "throw Lang.wrapThrow(e);",
      "right" : "throw Lang.wrapThrow(e);",
      "info" : "ThrowStatement[7070-7094]:ThrowStatement[7724-7748]"
    }, {
      "left" : "evalFieldType.setAccessible(true);",
      "right" : "evalFieldType.setAccessible(true);",
      "info" : "ExpressionStatement[7113-7147]:ExpressionStatement[7767-7801]"
    }, {
      "left" : "Entity<?> entity = null;",
      "right" : "Entity<?> entity = null;",
      "info" : "VariableDeclarationStatement[7156-7180]:VariableDeclarationStatement[7810-7834]"
    }, {
      "left" : "String line = \"-------------------------------------------------------------------\\n\";",
      "right" : "String line = \"-------------------------------------------------------------------\\n\";",
      "info" : "VariableDeclarationStatement[7189-7275]:VariableDeclarationStatement[7843-7929]"
    }, {
      "left" : "sb.append(\"#title:数据字典\\n\");",
      "right" : "sb.append(\"#title:数据字典\\n\");",
      "info" : "ExpressionStatement[7284-7311]:ExpressionStatement[7938-7965]"
    }, {
      "left" : "sb.append(\"#author:wendal\\n\");",
      "right" : "sb.append(\"#author:wendal\\n\");",
      "info" : "ExpressionStatement[7320-7350]:ExpressionStatement[7974-8004]"
    }, {
      "left" : "sb.append(\"#index:0,1\\n\").append(line);",
      "right" : "sb.append(\"#index:0,1\\n\").append(line);",
      "info" : "ExpressionStatement[7359-7398]:ExpressionStatement[8013-8052]"
    }, {
      "left" : "for (Class<?> klass : ks)",
      "right" : "for (Class<?> klass : ks)",
      "info" : "EnhancedForStatement[7407-8973]:EnhancedForStatement[8061-9730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7433-8973]:Block[8087-9730]"
    }, {
      "left" : "sb.append(line);",
      "right" : "sb.append(line);",
      "info" : "ExpressionStatement[7447-7463]:ExpressionStatement[8101-8117]"
    }, {
      "left" : "entity = dao.getEntity(klass);",
      "right" : "entity = dao.getEntity(klass);",
      "info" : "ExpressionStatement[7476-7506]:ExpressionStatement[8130-8160]"
    }, {
      "left" : "sb.append(\"表名 \").append(entity.getTableName()).append(\"\\n\\n\");",
      "right" : "sb.append(\"表名 \").append(entity.getTableName()).append(\"\\n\\n\");",
      "info" : "ExpressionStatement[7519-7581]:ExpressionStatement[8173-8235]"
    }, {
      "left" : "if (!Strings.isBlank(entity.getTableComment()))",
      "right" : "if (!Strings.isBlank(entity.getTableComment()))",
      "info" : "IfStatement[7598-7718]:IfStatement[8248-8364]"
    }, {
      "left" : "sb.append(\"表注释: \").append(entity.getTableComment());",
      "right" : "sb.append(\"表注释: \").append(entity.getTableComment());",
      "info" : "ExpressionStatement[7666-7718]:ExpressionStatement[8312-8364]"
    }, {
      "left" : "sb.append(\"\\t\").append(\"Java类名 \").append(klass.getName()).append(\"\\n\\n\");",
      "right" : "sb.append(\"\\t\").append(\"Java类名 \").append(klass.getName()).append(\"\\n\\n\");",
      "info" : "ExpressionStatement[7735-7808]:ExpressionStatement[8377-8450]"
    }, {
      "left" : "sb.append(\"\\t||序号||列名||数据类型||主键||非空||默认值||java属性名||java类型||注释||\\n\");",
      "right" : "sb.append(\"\\t||序号||列名||数据类型||主键||非空||默认值||java属性名||java类型||注释||\\n\");",
      "info" : "ExpressionStatement[7825-7893]:ExpressionStatement[8463-8531]"
    }, {
      "left" : "int index = 1;",
      "right" : "int index = 1;",
      "info" : "VariableDeclarationStatement[7910-7924]:VariableDeclarationStatement[8544-8558]"
    }, {
      "left" : "for (MappingField field : entity.getMappingFields())",
      "right" : "for (MappingField field : entity.getMappingFields())",
      "info" : "EnhancedForStatement[7941-8963]:EnhancedForStatement[8571-9720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7994-8963]:Block[8624-9720]"
    }, {
      "left" : "String dataType;",
      "right" : "String dataType;",
      "info" : "VariableDeclarationStatement[8016-8032]:VariableDeclarationStatement[8642-8658]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8053-8260]:TryStatement[8675-8883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8057-8158]:Block[8679-8772]"
    }, {
      "left" : "dataType = (String) evalFieldType.invoke(exp, field);",
      "right" : "dataType = (String) evalFieldType.invoke(exp, field);",
      "info" : "ExpressionStatement[8083-8136]:ExpressionStatement[8701-8754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8179-8260]:Block[8809-8883]"
    }, {
      "left" : "throw Lang.wrapThrow(e);",
      "right" : "throw Lang.wrapThrow(e);",
      "info" : "ThrowStatement[8205-8229]:ThrowStatement[8831-8855]"
    }, {
      "left" : "sb.append(\"\\t||\").append(index++).append(\"||\")\n                        .append(field.getColumnName()).append(\"||\")\n                        .append(dataType).append(\"||\")\n                        .append(field.isPk()).append(\"||\")\n                        .append(field.isNotNull()).append(\"||\")\n                        .append(field.getDefaultValue(null) == null ? \" \" : field.getDefaultValue(null)).append(\"||\")\n                        .append(field.getName()).append(\"||\")\n                        .append(field.getTypeClass().getName()).append(\"||\")\n                        .append(field.getColumnComment() == null ? \" \" : field.getColumnComment()).append(\"||\\n\");",
      "right" : "sb.append(\"\\t||\")\n                  .append(index++)\n                  .append(\"||\")\n                  .append(field.getColumnName())\n                  .append(\"||\")\n                  .append(dataType)\n                  .append(\"||\")\n                  .append(field.isPk())\n                  .append(\"||\")\n                  .append(field.isNotNull())\n                  .append(\"||\")\n                  .append(field.getDefaultValue(null) == null ? \" \" : field.getDefaultValue(null))\n                  .append(\"||\")\n                  .append(field.getName())\n                  .append(\"||\")\n                  .append(field.getTypeClass().getName())\n                  .append(\"||\")\n                  .append(field.getColumnComment() == null ? \" \" : field.getColumnComment())\n                  .append(\"||\\n\");",
      "info" : "ExpressionStatement[8281-8945]:ExpressionStatement[8900-9706]"
    }, {
      "left" : "return sb;",
      "right" : "return sb;",
      "info" : "ReturnStatement[8982-8992]:ReturnStatement[9739-9749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9059-9065]:Modifier[9812-9818]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9066-9072]:Modifier[9819-9825]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[9074-9075]:TypeParameter[9827-9828]"
    }, {
      "left" : "List<T>",
      "right" : "List<T>",
      "info" : "ParameterizedType[9077-9084]:ParameterizedType[9830-9837]"
    }, {
      "left" : "query",
      "right" : "query",
      "info" : "SimpleName[9085-9090]:SimpleName[9838-9843]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[9091-9098]:SingleVariableDeclaration[9844-9851]"
    }, {
      "left" : "Class<T> classOfT",
      "right" : "Class<T> classOfT",
      "info" : "SingleVariableDeclaration[9100-9117]:SingleVariableDeclaration[9889-9906]"
    }, {
      "left" : "String sql",
      "right" : "String sql",
      "info" : "SingleVariableDeclaration[9119-9129]:SingleVariableDeclaration[9944-9954]"
    }, {
      "left" : "Condition cnd",
      "right" : "Condition cnd",
      "info" : "SingleVariableDeclaration[9131-9144]:SingleVariableDeclaration[9992-10005]"
    }, {
      "left" : "Pager pager",
      "right" : "Pager pager",
      "info" : "SingleVariableDeclaration[9146-9157]:SingleVariableDeclaration[10043-10054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9159-9385]:Block[10056-10282]"
    }, {
      "left" : "Sql sql2 = Sqls.queryEntity(sql);",
      "right" : "Sql sql2 = Sqls.queryEntity(sql);",
      "info" : "VariableDeclarationStatement[9169-9202]:VariableDeclarationStatement[10066-10099]"
    }, {
      "left" : "sql2.setEntity(dao.getEntity(classOfT));",
      "right" : "sql2.setEntity(dao.getEntity(classOfT));",
      "info" : "ExpressionStatement[9211-9251]:ExpressionStatement[10108-10148]"
    }, {
      "left" : "sql2.setCondition(cnd);",
      "right" : "sql2.setCondition(cnd);",
      "info" : "ExpressionStatement[9260-9283]:ExpressionStatement[10157-10180]"
    }, {
      "left" : "sql2.setPager(pager);",
      "right" : "sql2.setPager(pager);",
      "info" : "ExpressionStatement[9292-9313]:ExpressionStatement[10189-10210]"
    }, {
      "left" : "dao.execute(sql2);",
      "right" : "dao.execute(sql2);",
      "info" : "ExpressionStatement[9322-9340]:ExpressionStatement[10219-10237]"
    }, {
      "left" : "return sql2.getList(classOfT);",
      "right" : "return sql2.getList(classOfT);",
      "info" : "ReturnStatement[9349-9379]:ReturnStatement[10246-10276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9430-9436]:Modifier[10323-10329]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9437-9443]:Modifier[10330-10336]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[9444-9448]:PrimitiveType[10337-10341]"
    }, {
      "left" : "queryCount",
      "right" : "queryCount",
      "info" : "SimpleName[9449-9459]:SimpleName[10342-10352]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[9460-9467]:SingleVariableDeclaration[10353-10360]"
    }, {
      "left" : "String sql",
      "right" : "String sql",
      "info" : "SingleVariableDeclaration[9469-9479]:SingleVariableDeclaration[10362-10372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9481-9659]:Block[10374-10652]"
    }, {
      "left" : "Sql sql2 = Sqls.fetchInt(\"select count(1) from (\" +sql + \") as _nutz_tmp_\" + System.currentTimeMillis());",
      "right" : "Sql sql2 = Sqls.fetchInt(\"select count(1) from (\"\n                                 + sql\n                                 + \") as _nutz_tmp_\"\n                                 + System.currentTimeMillis());",
      "info" : "VariableDeclarationStatement[9491-9596]:VariableDeclarationStatement[10384-10589]"
    }, {
      "left" : "dao.execute(sql2);",
      "right" : "dao.execute(sql2);",
      "info" : "ExpressionStatement[9605-9623]:ExpressionStatement[10598-10616]"
    }, {
      "left" : "return sql2.getInt();",
      "right" : "return sql2.getInt();",
      "info" : "ReturnStatement[9632-9653]:ReturnStatement[10625-10646]"
    }, {
      "left" : "@SuppressWarnings({ \"rawtypes\" })",
      "right" : "@SuppressWarnings({\"rawtypes\"})",
      "info" : "SingleMemberAnnotation[9786-9819]:SingleMemberAnnotation[10783-10814]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9824-9830]:Modifier[10819-10825]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9831-9837]:Modifier[10826-10832]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9838-9841]:PrimitiveType[10833-10836]"
    }, {
      "left" : "updateBySpecialChain",
      "right" : "updateBySpecialChain",
      "info" : "SimpleName[9842-9862]:SimpleName[10837-10857]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[9863-9870]:SingleVariableDeclaration[10858-10865]"
    }, {
      "left" : "Entity en",
      "right" : "Entity en",
      "info" : "SingleVariableDeclaration[9872-9881]:SingleVariableDeclaration[10910-10919]"
    }, {
      "left" : "String tableName",
      "right" : "String tableName",
      "info" : "SingleVariableDeclaration[9883-9899]:SingleVariableDeclaration[10964-10980]"
    }, {
      "left" : "Chain chain",
      "right" : "Chain chain",
      "info" : "SingleVariableDeclaration[9901-9912]:SingleVariableDeclaration[11025-11036]"
    }, {
      "left" : "Condition cnd",
      "right" : "Condition cnd",
      "info" : "SingleVariableDeclaration[9914-9927]:SingleVariableDeclaration[11081-11094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9929-12342]:Block[11096-13760]"
    }, {
      "left" : "if (en != null)",
      "right" : "if (en != null)",
      "info" : "IfStatement[9939-9997]:IfStatement[11106-11164]"
    }, {
      "left" : "tableName = en.getTableName();",
      "right" : "tableName = en.getTableName();",
      "info" : "ExpressionStatement[9967-9997]:ExpressionStatement[11134-11164]"
    }, {
      "left" : "if (tableName == null)",
      "right" : "if (tableName == null)",
      "info" : "IfStatement[10006-10113]:IfStatement[11173-11280]"
    }, {
      "left" : "throw Lang.makeThrow(DaoException.class, \"tableName and en is NULL !!\");",
      "right" : "throw Lang.makeThrow(DaoException.class, \"tableName and en is NULL !!\");",
      "info" : "ThrowStatement[10041-10113]:ThrowStatement[11208-11280]"
    }, {
      "left" : "final StringBuilder sql = new StringBuilder(\"UPDATE \").append(tableName).append(\" SET \");",
      "right" : "final StringBuilder sql = new StringBuilder(\"UPDATE \").append(tableName).append(\" SET \");",
      "info" : "VariableDeclarationStatement[10122-10211]:VariableDeclarationStatement[11289-11378]"
    }, {
      "left" : "Chain head = chain.head();",
      "right" : "Chain head = chain.head();",
      "info" : "VariableDeclarationStatement[10220-10246]:VariableDeclarationStatement[11387-11413]"
    }, {
      "left" : "final List<Object> values = new ArrayList<Object>();",
      "right" : "final List<Object> values = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[10255-10307]:VariableDeclarationStatement[11422-11474]"
    }, {
      "left" : "final List<ValueAdaptor> adaptors = new ArrayList<ValueAdaptor>();",
      "right" : "final List<ValueAdaptor> adaptors = new ArrayList<ValueAdaptor>();",
      "info" : "VariableDeclarationStatement[10316-10382]:VariableDeclarationStatement[11483-11549]"
    }, {
      "left" : "while (head != null)",
      "right" : "while (head != null)",
      "info" : "WhileStatement[10391-11638]:WhileStatement[11558-13040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10412-11638]:Block[11579-13040]"
    }, {
      "left" : "MappingField mf = null;",
      "right" : "MappingField mf = null;",
      "info" : "VariableDeclarationStatement[10426-10449]:VariableDeclarationStatement[11593-11616]"
    }, {
      "left" : "if (en != null)",
      "right" : "if (en != null)",
      "info" : "IfStatement[10462-10524]:IfStatement[11629-11691]"
    }, {
      "left" : "mf = en.getField(head.name());",
      "right" : "mf = en.getField(head.name());",
      "info" : "ExpressionStatement[10494-10524]:ExpressionStatement[11661-11691]"
    }, {
      "left" : "String colName = head.name();",
      "right" : "String colName = head.name();",
      "info" : "VariableDeclarationStatement[10537-10566]:VariableDeclarationStatement[11704-11733]"
    }, {
      "left" : "if (mf != null)",
      "right" : "if (mf != null)",
      "info" : "IfStatement[10579-10640]:IfStatement[11746-11807]"
    }, {
      "left" : "colName = mf.getColumnName();",
      "right" : "colName = mf.getColumnName();",
      "info" : "ExpressionStatement[10611-10640]:ExpressionStatement[11778-11807]"
    }, {
      "left" : "sql.append(colName).append(\"=\");",
      "right" : "sql.append(colName).append(\"=\");",
      "info" : "ExpressionStatement[10653-10685]:ExpressionStatement[11820-11852]"
    }, {
      "left" : "if (head.special())",
      "right" : "if (head.special())",
      "info" : "IfStatement[10698-11503]:IfStatement[11865-12905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10718-11189]:Block[11885-12591]"
    }, {
      "left" : "if (head.value() != null && head.value() instanceof String)",
      "right" : "if (head.value() != null && head.value() instanceof String)",
      "info" : "IfStatement[10733-11133]:IfStatement[11903-12535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10793-11133]:Block[11963-12535]"
    }, {
      "left" : "String str = (String)head.value();",
      "right" : "String str = (String) head.value();",
      "info" : "VariableDeclarationStatement[10809-10843]:VariableDeclarationStatement[11985-12020]"
    }, {
      "left" : "if (str.length() > 0)",
      "right" : "if (str.length() > 0)",
      "info" : "IfStatement[10858-11115]:IfStatement[12041-12517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10880-11115]:Block[12063-12517]"
    }, {
      "left" : "switch (str.charAt(0)) {\n\t\t\t\t\t\tcase '+':\n\t\t\t\t\t\tcase '-':\n\t\t\t\t\t\tcase '*':\n\t\t\t\t\t\tcase '/':\n\t\t\t\t\t\tcase '%':\n\t\t\t\t\t\tcase '&':\n\t\t\t\t\t\tcase '^':\n\t\t\t\t\t\tcase '|':\n\t\t\t\t\t\t\tsql.append(colName);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}",
      "right" : "switch (str.charAt(0)) {\n                        case '+':\n                        case '-':\n                        case '*':\n                        case '/':\n                        case '%':\n                        case '&':\n                        case '^':\n                        case '|':\n                            sql.append(colName);\n                            break;\n                        }",
      "info" : "SwitchStatement[10897-11099]:SwitchStatement[12089-12495]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[10928-10937]:SwitchCase[12138-12147]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[10944-10953]:SwitchCase[12172-12181]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[10960-10969]:SwitchCase[12206-12215]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[10976-10985]:SwitchCase[12240-12249]"
    }, {
      "left" : "case '%':",
      "right" : "case '%':",
      "info" : "SwitchCase[10992-11001]:SwitchCase[12274-12283]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[11008-11017]:SwitchCase[12308-12317]"
    }, {
      "left" : "case '^':",
      "right" : "case '^':",
      "info" : "SwitchCase[11024-11033]:SwitchCase[12342-12351]"
    }, {
      "left" : "case '|':",
      "right" : "case '|':",
      "info" : "SwitchCase[11040-11049]:SwitchCase[12376-12385]"
    }, {
      "left" : "sql.append(colName);",
      "right" : "sql.append(colName);",
      "info" : "ExpressionStatement[11057-11077]:ExpressionStatement[12414-12434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11085-11091]:BreakStatement[12463-12469]"
    }, {
      "left" : "sql.append(head.value());",
      "right" : "sql.append(head.value());",
      "info" : "ExpressionStatement[11150-11175]:ExpressionStatement[12552-12577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11195-11503]:Block[12597-12905]"
    }, {
      "left" : "sql.append(\"?\");",
      "right" : "sql.append(\"?\");",
      "info" : "ExpressionStatement[11213-11229]:ExpressionStatement[12615-12631]"
    }, {
      "left" : "values.add(head.value());",
      "right" : "values.add(head.value());",
      "info" : "ExpressionStatement[11246-11271]:ExpressionStatement[12648-12673]"
    }, {
      "left" : "ValueAdaptor adaptor = Jdbcs.getAdaptorBy(head.value());",
      "right" : "ValueAdaptor adaptor = Jdbcs.getAdaptorBy(head.value());",
      "info" : "VariableDeclarationStatement[11288-11344]:VariableDeclarationStatement[12690-12746]"
    }, {
      "left" : "if (mf != null && mf.getAdaptor() != null)",
      "right" : "if (mf != null && mf.getAdaptor() != null)",
      "info" : "IfStatement[11361-11450]:IfStatement[12763-12852]"
    }, {
      "left" : "adaptor = mf.getAdaptor();",
      "right" : "adaptor = mf.getAdaptor();",
      "info" : "ExpressionStatement[11424-11450]:ExpressionStatement[12826-12852]"
    }, {
      "left" : "adaptors.add(adaptor);",
      "right" : "adaptors.add(adaptor);",
      "info" : "ExpressionStatement[11467-11489]:ExpressionStatement[12869-12891]"
    }, {
      "left" : "sql.append(\" \");",
      "right" : "sql.append(\" \");",
      "info" : "ExpressionStatement[11516-11532]:ExpressionStatement[12918-12934]"
    }, {
      "left" : "head = head.next();",
      "right" : "head = head.next();",
      "info" : "ExpressionStatement[11545-11564]:ExpressionStatement[12947-12966]"
    }, {
      "left" : "if (head != null)",
      "right" : "if (head != null)",
      "info" : "IfStatement[11577-11628]:IfStatement[12979-13030]"
    }, {
      "left" : "sql.append(\", \");",
      "right" : "sql.append(\", \");",
      "info" : "ExpressionStatement[11611-11628]:ExpressionStatement[13013-13030]"
    }, {
      "left" : "if (cnd != null)",
      "right" : "if (cnd != null)",
      "info" : "IfStatement[11647-11714]:IfStatement[13049-13116]"
    }, {
      "left" : "sql.append(\" \").append(cnd.toSql(en));",
      "right" : "sql.append(\" \").append(cnd.toSql(en));",
      "info" : "ExpressionStatement[11676-11714]:ExpressionStatement[13078-13116]"
    }, {
      "left" : "if (log.isDebugEnabled())",
      "right" : "if (log.isDebugEnabled())",
      "info" : "IfStatement[11723-11776]:IfStatement[13125-13178]"
    }, {
      "left" : "log.debug(sql);",
      "right" : "log.debug(sql);",
      "info" : "ExpressionStatement[11761-11776]:ExpressionStatement[13163-13178]"
    }, {
      "left" : "final int[] ints = new int[1];",
      "right" : "final int[] ints = new int[1];",
      "info" : "VariableDeclarationStatement[11785-11815]:VariableDeclarationStatement[13187-13217]"
    }, {
      "left" : "dao.run(new ConnCallback() {\n            public void invoke(Connection conn) throws Exception {\n                PreparedStatement ps = conn.prepareStatement(sql.toString());\n                try {\n                    for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);\n                    ints[0] = ps.executeUpdate();\n                } finally {\n                    Daos.safeClose(ps);\n                }\n            }\n        });",
      "right" : "dao.run(new ConnCallback() {\n            public void invoke(Connection conn) throws Exception {\n                PreparedStatement ps = conn.prepareStatement(sql.toString());\n                try {\n                    for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);\n                    ints[0] = ps.executeUpdate();\n                }\n                finally {\n                    Daos.safeClose(ps);\n                }\n            }\n        });",
      "info" : "ExpressionStatement[11824-12312]:ExpressionStatement[13226-13730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11865-11871]:Modifier[13267-13273]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11872-11876]:PrimitiveType[13274-13278]"
    }, {
      "left" : "invoke",
      "right" : "invoke",
      "info" : "SimpleName[11877-11883]:SimpleName[13279-13285]"
    }, {
      "left" : "Connection conn",
      "right" : "Connection conn",
      "info" : "SingleVariableDeclaration[11884-11899]:SingleVariableDeclaration[13286-13301]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[11908-11917]:SimpleType[13310-13319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11918-12300]:Block[13320-13718]"
    }, {
      "left" : "PreparedStatement ps = conn.prepareStatement(sql.toString());",
      "right" : "PreparedStatement ps = conn.prepareStatement(sql.toString());",
      "info" : "VariableDeclarationStatement[11936-11997]:VariableDeclarationStatement[13338-13399]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12014-12286]:TryStatement[13416-13704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12018-12218]:Block[13420-13620]"
    }, {
      "left" : "for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);",
      "right" : "for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);",
      "info" : "ForStatement[12040-12150]:ForStatement[13442-13552]"
    }, {
      "left" : "adaptors.get(i).set(ps, values.get(i), i + 1);",
      "right" : "adaptors.get(i).set(ps, values.get(i), i + 1);",
      "info" : "ExpressionStatement[12104-12150]:ExpressionStatement[13506-13552]"
    }, {
      "left" : "ints[0] = ps.executeUpdate();",
      "right" : "ints[0] = ps.executeUpdate();",
      "info" : "ExpressionStatement[12171-12200]:ExpressionStatement[13573-13602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12227-12286]:Block[13645-13704]"
    }, {
      "left" : "Daos.safeClose(ps);",
      "right" : "Daos.safeClose(ps);",
      "info" : "ExpressionStatement[12249-12268]:ExpressionStatement[13667-13686]"
    }, {
      "left" : "return ints[0];",
      "right" : "return ints[0];",
      "info" : "ReturnStatement[12321-12336]:ReturnStatement[13739-13754]"
    }, {
      "left" : "@SuppressWarnings({ \"rawtypes\" })",
      "right" : "@SuppressWarnings({\"rawtypes\"})",
      "info" : "SingleMemberAnnotation[12469-12502]:SingleMemberAnnotation[13891-13922]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12507-12513]:Modifier[13927-13933]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12514-12520]:Modifier[13934-13940]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12521-12525]:PrimitiveType[13941-13945]"
    }, {
      "left" : "insertBySpecialChain",
      "right" : "insertBySpecialChain",
      "info" : "SimpleName[12526-12546]:SimpleName[13946-13966]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[12547-12554]:SingleVariableDeclaration[13967-13974]"
    }, {
      "left" : "Entity en",
      "right" : "Entity en",
      "info" : "SingleVariableDeclaration[12556-12565]:SingleVariableDeclaration[13976-13985]"
    }, {
      "left" : "String tableName",
      "right" : "String tableName",
      "info" : "SingleVariableDeclaration[12567-12583]:SingleVariableDeclaration[13987-14003]"
    }, {
      "left" : "Chain chain",
      "right" : "Chain chain",
      "info" : "SingleVariableDeclaration[12585-12596]:SingleVariableDeclaration[14005-14016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12598-14764]:Block[14018-16188]"
    }, {
      "left" : "if (en != null)",
      "right" : "if (en != null)",
      "info" : "IfStatement[12608-12666]:IfStatement[14028-14086]"
    }, {
      "left" : "tableName = en.getTableName();",
      "right" : "tableName = en.getTableName();",
      "info" : "ExpressionStatement[12636-12666]:ExpressionStatement[14056-14086]"
    }, {
      "left" : "if (tableName == null)",
      "right" : "if (tableName == null)",
      "info" : "IfStatement[12675-12782]:IfStatement[14095-14202]"
    }, {
      "left" : "throw Lang.makeThrow(DaoException.class, \"tableName and en is NULL !!\");",
      "right" : "throw Lang.makeThrow(DaoException.class, \"tableName and en is NULL !!\");",
      "info" : "ThrowStatement[12710-12782]:ThrowStatement[14130-14202]"
    }, {
      "left" : "final StringBuilder sql = new StringBuilder(\"INSERT INTO \").append(tableName).append(\" (\");",
      "right" : "final StringBuilder sql = new StringBuilder(\"INSERT INTO \").append(tableName).append(\" (\");",
      "info" : "VariableDeclarationStatement[12791-12882]:VariableDeclarationStatement[14211-14302]"
    }, {
      "left" : "StringBuilder _value_places = new StringBuilder(\" VALUES(\");",
      "right" : "StringBuilder _value_places = new StringBuilder(\" VALUES(\");",
      "info" : "VariableDeclarationStatement[12891-12951]:VariableDeclarationStatement[14311-14371]"
    }, {
      "left" : "final List<Object> values = new ArrayList<Object>();",
      "right" : "final List<Object> values = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[12960-13012]:VariableDeclarationStatement[14380-14432]"
    }, {
      "left" : "final List<ValueAdaptor> adaptors = new ArrayList<ValueAdaptor>();",
      "right" : "final List<ValueAdaptor> adaptors = new ArrayList<ValueAdaptor>();",
      "info" : "VariableDeclarationStatement[13021-13087]:VariableDeclarationStatement[14441-14507]"
    }, {
      "left" : "Chain head = chain.head();",
      "right" : "Chain head = chain.head();",
      "info" : "VariableDeclarationStatement[13096-13122]:VariableDeclarationStatement[14516-14542]"
    }, {
      "left" : "while (head != null)",
      "right" : "while (head != null)",
      "info" : "WhileStatement[13131-14120]:WhileStatement[14551-15528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13152-14120]:Block[14572-15528]"
    }, {
      "left" : "String colName = head.name();",
      "right" : "String colName = head.name();",
      "info" : "VariableDeclarationStatement[13163-13192]:VariableDeclarationStatement[14586-14615]"
    }, {
      "left" : "MappingField mf = null;",
      "right" : "MappingField mf = null;",
      "info" : "VariableDeclarationStatement[13202-13225]:VariableDeclarationStatement[14628-14651]"
    }, {
      "left" : "if (en != null)",
      "right" : "if (en != null)",
      "info" : "IfStatement[13238-13391]:IfStatement[14664-14820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13254-13391]:Block[14680-14820]"
    }, {
      "left" : "mf = en.getField(colName);",
      "right" : "mf = en.getField(colName);",
      "info" : "ExpressionStatement[13272-13298]:ExpressionStatement[14698-14724]"
    }, {
      "left" : "if (mf != null)",
      "right" : "if (mf != null)",
      "info" : "IfStatement[13315-13377]:IfStatement[14741-14806]"
    }, {
      "left" : "colName = mf.getColumnName();",
      "right" : "colName = mf.getColumnName();",
      "info" : "ExpressionStatement[13348-13377]:ExpressionStatement[14777-14806]"
    }, {
      "left" : "sql.append(colName);",
      "right" : "sql.append(colName);",
      "info" : "ExpressionStatement[13404-13424]:ExpressionStatement[14833-14853]"
    }, {
      "left" : "if (head.special())",
      "right" : "if (head.special())",
      "info" : "IfStatement[13450-13941]:IfStatement[14867-15361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13470-13534]:Block[14887-14954]"
    }, {
      "left" : "_value_places.append(head.value());",
      "right" : "_value_places.append(head.value());",
      "info" : "ExpressionStatement[13485-13520]:ExpressionStatement[14905-14940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13540-13941]:Block[14960-15361]"
    }, {
      "left" : "if (en != null)",
      "right" : "if (en != null)",
      "info" : "IfStatement[13558-13624]:IfStatement[14978-15044]"
    }, {
      "left" : "mf = en.getField(head.name());",
      "right" : "mf = en.getField(head.name());",
      "info" : "ExpressionStatement[13594-13624]:ExpressionStatement[15014-15044]"
    }, {
      "left" : "_value_places.append(\"?\");",
      "right" : "_value_places.append(\"?\");",
      "info" : "ExpressionStatement[13641-13667]:ExpressionStatement[15061-15087]"
    }, {
      "left" : "values.add(head.value());",
      "right" : "values.add(head.value());",
      "info" : "ExpressionStatement[13684-13709]:ExpressionStatement[15104-15129]"
    }, {
      "left" : "ValueAdaptor adaptor = Jdbcs.getAdaptorBy(head.value());",
      "right" : "ValueAdaptor adaptor = Jdbcs.getAdaptorBy(head.value());",
      "info" : "VariableDeclarationStatement[13726-13782]:VariableDeclarationStatement[15146-15202]"
    }, {
      "left" : "if (mf != null && mf.getAdaptor() != null)",
      "right" : "if (mf != null && mf.getAdaptor() != null)",
      "info" : "IfStatement[13799-13888]:IfStatement[15219-15308]"
    }, {
      "left" : "adaptor = mf.getAdaptor();",
      "right" : "adaptor = mf.getAdaptor();",
      "info" : "ExpressionStatement[13862-13888]:ExpressionStatement[15282-15308]"
    }, {
      "left" : "adaptors.add(adaptor);",
      "right" : "adaptors.add(adaptor);",
      "info" : "ExpressionStatement[13905-13927]:ExpressionStatement[15325-15347]"
    }, {
      "left" : "head = head.next();",
      "right" : "head = head.next();",
      "info" : "ExpressionStatement[13967-13986]:ExpressionStatement[15375-15394]"
    }, {
      "left" : "if (head != null)",
      "right" : "if (head != null)",
      "info" : "IfStatement[13999-14110]:IfStatement[15407-15518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14017-14110]:Block[15425-15518]"
    }, {
      "left" : "sql.append(\", \");",
      "right" : "sql.append(\", \");",
      "info" : "ExpressionStatement[14035-14052]:ExpressionStatement[15443-15460]"
    }, {
      "left" : "_value_places.append(\", \");",
      "right" : "_value_places.append(\", \");",
      "info" : "ExpressionStatement[14069-14096]:ExpressionStatement[15477-15504]"
    }, {
      "left" : "sql.append(\")\");",
      "right" : "sql.append(\")\");",
      "info" : "ExpressionStatement[14129-14145]:ExpressionStatement[15537-15553]"
    }, {
      "left" : "_value_places.append(\")\");",
      "right" : "_value_places.append(\")\");",
      "info" : "ExpressionStatement[14154-14180]:ExpressionStatement[15562-15588]"
    }, {
      "left" : "sql.append(_value_places);",
      "right" : "sql.append(_value_places);",
      "info" : "ExpressionStatement[14189-14215]:ExpressionStatement[15597-15623]"
    }, {
      "left" : "if (log.isDebugEnabled())",
      "right" : "if (log.isDebugEnabled())",
      "info" : "IfStatement[14224-14277]:IfStatement[15632-15685]"
    }, {
      "left" : "log.debug(sql);",
      "right" : "log.debug(sql);",
      "info" : "ExpressionStatement[14262-14277]:ExpressionStatement[15670-15685]"
    }, {
      "left" : "dao.run(new ConnCallback() {\n            public void invoke(Connection conn) throws Exception {\n                PreparedStatement ps = conn.prepareStatement(sql.toString());\n                try {\n                    for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);\n                    ps.execute();\n                } finally {\n                    Daos.safeClose(ps);\n                }\n            }\n        });",
      "right" : "dao.run(new ConnCallback() {\n            public void invoke(Connection conn) throws Exception {\n                PreparedStatement ps = conn.prepareStatement(sql.toString());\n                try {\n                    for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);\n                    ps.execute();\n                }\n                finally {\n                    Daos.safeClose(ps);\n                }\n            }\n        });",
      "info" : "ExpressionStatement[14286-14758]:ExpressionStatement[15694-16182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14327-14333]:Modifier[15735-15741]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14334-14338]:PrimitiveType[15742-15746]"
    }, {
      "left" : "invoke",
      "right" : "invoke",
      "info" : "SimpleName[14339-14345]:SimpleName[15747-15753]"
    }, {
      "left" : "Connection conn",
      "right" : "Connection conn",
      "info" : "SingleVariableDeclaration[14346-14361]:SingleVariableDeclaration[15754-15769]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14370-14379]:SimpleType[15778-15787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14380-14746]:Block[15788-16170]"
    }, {
      "left" : "PreparedStatement ps = conn.prepareStatement(sql.toString());",
      "right" : "PreparedStatement ps = conn.prepareStatement(sql.toString());",
      "info" : "VariableDeclarationStatement[14398-14459]:VariableDeclarationStatement[15806-15867]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14476-14732]:TryStatement[15884-16156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14480-14664]:Block[15888-16072]"
    }, {
      "left" : "for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);",
      "right" : "for (int i = 0; i < values.size(); i++)\n                        adaptors.get(i).set(ps, values.get(i), i + 1);",
      "info" : "ForStatement[14502-14612]:ForStatement[15910-16020]"
    }, {
      "left" : "adaptors.get(i).set(ps, values.get(i), i + 1);",
      "right" : "adaptors.get(i).set(ps, values.get(i), i + 1);",
      "info" : "ExpressionStatement[14566-14612]:ExpressionStatement[15974-16020]"
    }, {
      "left" : "ps.execute();",
      "right" : "ps.execute();",
      "info" : "ExpressionStatement[14633-14646]:ExpressionStatement[16041-16054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14673-14732]:Block[16097-16156]"
    }, {
      "left" : "Daos.safeClose(ps);",
      "right" : "Daos.safeClose(ps);",
      "info" : "ExpressionStatement[14695-14714]:ExpressionStatement[16119-16138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14956-14962]:Modifier[16438-16444]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14963-14969]:Modifier[16445-16451]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14970-14974]:PrimitiveType[16452-16456]"
    }, {
      "left" : "createTablesInPackage",
      "right" : "createTablesInPackage",
      "info" : "SimpleName[14975-14996]:SimpleName[16457-16478]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[14997-15004]:SingleVariableDeclaration[16479-16486]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[15006-15024]:SingleVariableDeclaration[16488-16506]"
    }, {
      "left" : "boolean force",
      "right" : "boolean force",
      "info" : "SingleVariableDeclaration[15026-15039]:SingleVariableDeclaration[16508-16521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15041-15197]:Block[16523-16709]"
    }, {
      "left" : "for (Class<?> klass : Scans.me().scanPackage(packageName))",
      "right" : "for (Class<?> klass : Scans.me().scanPackage(packageName))",
      "info" : "EnhancedForStatement[15048-15191]:EnhancedForStatement[16533-16703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15107-15191]:Block[16592-16703]"
    }, {
      "left" : "if (klass.getAnnotation(Table.class) != null)",
      "right" : "if (klass.getAnnotation(Table.class) != null)",
      "info" : "IfStatement[15112-15187]:IfStatement[16606-16693]"
    }, {
      "left" : "dao.create(klass, force);",
      "right" : "dao.create(klass, force);",
      "info" : "ExpressionStatement[15162-15187]:ExpressionStatement[16668-16693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15416-15422]:Modifier[16991-16997]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15423-15429]:Modifier[16998-17004]"
    }, {
      "left" : "Dao",
      "right" : "Dao",
      "info" : "SimpleType[15430-15433]:SimpleType[17005-17008]"
    }, {
      "left" : "ext",
      "right" : "ext",
      "info" : "SimpleName[15434-15437]:SimpleName[17009-17012]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[15438-15445]:SingleVariableDeclaration[17013-17020]"
    }, {
      "left" : "FieldFilter filter",
      "right" : "FieldFilter filter",
      "info" : "SingleVariableDeclaration[15447-15465]:SingleVariableDeclaration[17022-17040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15467-15504]:Block[17042-17088]"
    }, {
      "left" : "return ext(dao, filter, null);",
      "right" : "return ext(dao, filter, null);",
      "info" : "ReturnStatement[15471-15501]:ReturnStatement[17052-17082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15660-15666]:Modifier[17308-17314]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15667-15673]:Modifier[17315-17321]"
    }, {
      "left" : "Dao",
      "right" : "Dao",
      "info" : "SimpleType[15674-15677]:SimpleType[17322-17325]"
    }, {
      "left" : "ext",
      "right" : "ext",
      "info" : "SimpleName[15678-15681]:SimpleName[17326-17329]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[15682-15689]:SingleVariableDeclaration[17330-17337]"
    }, {
      "left" : "Object tableName",
      "right" : "Object tableName",
      "info" : "SingleVariableDeclaration[15691-15707]:SingleVariableDeclaration[17339-17355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15709-15749]:Block[17357-17406]"
    }, {
      "left" : "return ext(dao, null, tableName);",
      "right" : "return ext(dao, null, tableName);",
      "info" : "ReturnStatement[15713-15746]:ReturnStatement[17367-17400]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15877-15883]:Modifier[17619-17625]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15884-15890]:Modifier[17626-17632]"
    }, {
      "left" : "Dao",
      "right" : "Dao",
      "info" : "SimpleType[15891-15894]:SimpleType[17633-17636]"
    }, {
      "left" : "ext",
      "right" : "ext",
      "info" : "SimpleName[15895-15898]:SimpleName[17637-17640]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[15899-15906]:SingleVariableDeclaration[17641-17648]"
    }, {
      "left" : "FieldFilter filter",
      "right" : "FieldFilter filter",
      "info" : "SingleVariableDeclaration[15908-15926]:SingleVariableDeclaration[17650-17668]"
    }, {
      "left" : "Object tableName",
      "right" : "Object tableName",
      "info" : "SingleVariableDeclaration[15928-15944]:SingleVariableDeclaration[17670-17686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15946-16182]:Block[17688-17954]"
    }, {
      "left" : "if (tableName == null && filter == null)",
      "right" : "if (tableName == null && filter == null)",
      "info" : "IfStatement[15950-16005]:IfStatement[17698-17762]"
    }, {
      "left" : "return dao;",
      "right" : "return dao;",
      "info" : "ReturnStatement[15994-16005]:ReturnStatement[17751-17762]"
    }, {
      "left" : "ExtDaoInvocationHandler handler = new ExtDaoInvocationHandler(dao, filter, tableName);",
      "right" : "ExtDaoInvocationHandler handler = new ExtDaoInvocationHandler(dao, filter, tableName);",
      "info" : "VariableDeclarationStatement[16008-16094]:VariableDeclarationStatement[17771-17857]"
    }, {
      "left" : "return (Dao) Proxy.newProxyInstance(dao.getClass().getClassLoader(), iz, handler);",
      "right" : "return (Dao) Proxy.newProxyInstance(dao.getClass().getClassLoader(), iz, handler);",
      "info" : "ReturnStatement[16097-16179]:ReturnStatement[17866-17948]"
    }, {
      "left" : "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
      "right" : "@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
      "info" : "SingleMemberAnnotation[16193-16237]:SingleMemberAnnotation[17960-18004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16242-16248]:Modifier[18009-18015]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16249-16255]:Modifier[18016-18022]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16256-16263]:PrimitiveType[18023-18030]"
    }, {
      "left" : "filterFields",
      "right" : "filterFields",
      "info" : "SimpleName[16264-16276]:SimpleName[18031-18043]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[16277-16287]:SingleVariableDeclaration[18044-18054]"
    }, {
      "left" : "FieldMatcher matcher",
      "right" : "FieldMatcher matcher",
      "info" : "SingleVariableDeclaration[16289-16309]:SingleVariableDeclaration[18095-18115]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[16311-16318]:SingleVariableDeclaration[18156-18163]"
    }, {
      "left" : "Callback2<MappingField, Object> callback",
      "right" : "Callback2<MappingField, Object> callback",
      "info" : "SingleVariableDeclaration[16320-16360]:SingleVariableDeclaration[18204-18244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16362-18066]:Block[18246-19943]"
    }, {
      "left" : "if (obj == null)",
      "right" : "if (obj == null)",
      "info" : "IfStatement[16372-16414]:IfStatement[18256-18298]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16401-16414]:ReturnStatement[18285-18298]"
    }, {
      "left" : "obj = Lang.first(obj);",
      "right" : "obj = Lang.first(obj);",
      "info" : "ExpressionStatement[16423-16445]:ExpressionStatement[18307-18329]"
    }, {
      "left" : "if (obj == null)",
      "right" : "if (obj == null)",
      "info" : "IfStatement[16454-16508]:IfStatement[18338-18392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16471-16508]:Block[18355-18392]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16485-16498]:ReturnStatement[18369-18382]"
    }, {
      "left" : "if (obj.getClass() == Class.class)",
      "right" : "if (obj.getClass() == Class.class)",
      "info" : "IfStatement[16517-16600]:IfStatement[18401-18484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16552-16600]:Block[18436-18484]"
    }, {
      "left" : "throw Lang.impossible();",
      "right" : "throw Lang.impossible();",
      "info" : "ThrowStatement[16566-16590]:ThrowStatement[18450-18474]"
    }, {
      "left" : "if (obj instanceof String || obj instanceof Number || obj instanceof Boolean)",
      "right" : "if (obj instanceof String || obj instanceof Number || obj instanceof Boolean)",
      "info" : "IfStatement[16609-16735]:IfStatement[18493-18619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16687-16735]:Block[18571-18619]"
    }, {
      "left" : "throw Lang.impossible();",
      "right" : "throw Lang.impossible();",
      "info" : "ThrowStatement[16701-16725]:ThrowStatement[18585-18609]"
    }, {
      "left" : "Entity en = dao.getEntity(obj.getClass());",
      "right" : "Entity en = dao.getEntity(obj.getClass());",
      "info" : "VariableDeclarationStatement[16744-16786]:VariableDeclarationStatement[18628-18670]"
    }, {
      "left" : "if (en == null)",
      "right" : "if (en == null)",
      "info" : "IfStatement[16795-16859]:IfStatement[18679-18743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16811-16859]:Block[18695-18743]"
    }, {
      "left" : "throw Lang.impossible();",
      "right" : "throw Lang.impossible();",
      "info" : "ThrowStatement[16825-16849]:ThrowStatement[18709-18733]"
    }, {
      "left" : "List<MappingField> mfs = en.getMappingFields();",
      "right" : "List<MappingField> mfs = en.getMappingFields();",
      "info" : "VariableDeclarationStatement[16877-16924]:VariableDeclarationStatement[18753-18800]"
    }, {
      "left" : "if (matcher != null)",
      "right" : "if (matcher != null)",
      "info" : "IfStatement[16933-17222]:IfStatement[18809-19074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16954-17222]:Block[18830-19074]"
    }, {
      "left" : "Iterator<MappingField> it = mfs.iterator();",
      "right" : "Iterator<MappingField> it = mfs.iterator();",
      "info" : "VariableDeclarationStatement[16972-17015]:VariableDeclarationStatement[18844-18887]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[17032-17212]:WhileStatement[18900-19064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17053-17212]:Block[18921-19064]"
    }, {
      "left" : "MappingField mf = it.next();",
      "right" : "MappingField mf = it.next();",
      "info" : "VariableDeclarationStatement[17075-17103]:VariableDeclarationStatement[18939-18967]"
    }, {
      "left" : "if (!matcher.match(mf.getName()))",
      "right" : "if (!matcher.match(mf.getName()))",
      "info" : "IfStatement[17124-17194]:IfStatement[18984-19050]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[17182-17194]:ExpressionStatement[19038-19050]"
    }, {
      "left" : "boolean flag = false;",
      "right" : "boolean flag = false;",
      "info" : "VariableDeclarationStatement[17231-17252]:VariableDeclarationStatement[19083-19104]"
    }, {
      "left" : "for (MappingField mf : mfs)",
      "right" : "for (MappingField mf : mfs)",
      "info" : "EnhancedForStatement[17261-18039]:EnhancedForStatement[19113-19916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17289-18039]:Block[19141-19916]"
    }, {
      "left" : "if (matcher.isIgnoreId() && mf.isId())",
      "right" : "if (matcher.isIgnoreId() && mf.isId())",
      "info" : "IfStatement[17303-17367]:IfStatement[19155-19219]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17358-17367]:ContinueStatement[19210-19219]"
    }, {
      "left" : "if (matcher.isIgnoreName() && mf.isName())",
      "right" : "if (matcher.isIgnoreName() && mf.isName())",
      "info" : "IfStatement[17380-17448]:IfStatement[19232-19300]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17439-17448]:ContinueStatement[19291-19300]"
    }, {
      "left" : "if (matcher.isIgnorePk() && mf.isCompositePk())",
      "right" : "if (matcher.isIgnorePk() && mf.isCompositePk())",
      "info" : "IfStatement[17461-17534]:IfStatement[19313-19386]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17525-17534]:ContinueStatement[19377-19386]"
    }, {
      "left" : "Object val = mf.getValue(obj);",
      "right" : "Object val = mf.getValue(obj);",
      "info" : "VariableDeclarationStatement[17547-17577]:VariableDeclarationStatement[19399-19429]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[17590-17696]:IfStatement[19442-19548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17607-17696]:Block[19459-19548]"
    }, {
      "left" : "if (matcher.isIgnoreNull())",
      "right" : "if (matcher.isIgnoreNull())",
      "info" : "IfStatement[17625-17682]:IfStatement[19477-19534]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17673-17682]:ContinueStatement[19525-19534]"
    }, {
      "left" : "if (val instanceof Number && ((Number)val).doubleValue() == 0.0)",
      "right" : "if (val instanceof Number && ((Number) val).doubleValue() == 0.0)",
      "info" : "IfStatement[17697-17851]:IfStatement[19561-19716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17762-17851]:Block[19627-19716]"
    }, {
      "left" : "if (matcher.isIgnoreZero())",
      "right" : "if (matcher.isIgnoreZero())",
      "info" : "IfStatement[17780-17837]:IfStatement[19645-19702]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17828-17837]:ContinueStatement[19693-19702]"
    }, {
      "left" : "if (val instanceof Date)",
      "right" : "if (val instanceof Date)",
      "info" : "IfStatement[17852-17966]:IfStatement[19729-19843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17877-17966]:Block[19754-19843]"
    }, {
      "left" : "if (matcher.isIgnoreDate())",
      "right" : "if (matcher.isIgnoreDate())",
      "info" : "IfStatement[17895-17952]:IfStatement[19772-19829]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17943-17952]:ContinueStatement[19820-19829]"
    }, {
      "left" : "callback.invoke(mf, val);",
      "right" : "callback.invoke(mf, val);",
      "info" : "ExpressionStatement[17979-18004]:ExpressionStatement[19856-19881]"
    }, {
      "left" : "flag = true;",
      "right" : "flag = true;",
      "info" : "ExpressionStatement[18017-18029]:ExpressionStatement[19894-19906]"
    }, {
      "left" : "return flag;",
      "right" : "return flag;",
      "info" : "ReturnStatement[18048-18060]:ReturnStatement[19925-19937]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18211-18217]:Modifier[20587-20593]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18218-18224]:Modifier[20594-20600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18225-18229]:PrimitiveType[20601-20605]"
    }, {
      "left" : "migration",
      "right" : "migration",
      "info" : "SimpleName[18230-18239]:SimpleName[20606-20615]"
    }, {
      "left" : "final Class<?> klass",
      "right" : "final Class<?> klass",
      "info" : "SingleVariableDeclaration[18255-18275]:SingleVariableDeclaration[20658-20678]"
    }, {
      "left" : "final boolean add",
      "right" : "final boolean add",
      "info" : "SingleVariableDeclaration[18277-18294]:SingleVariableDeclaration[20713-20730]"
    }, {
      "left" : "final boolean del",
      "right" : "final boolean del",
      "info" : "SingleVariableDeclaration[18296-18313]:SingleVariableDeclaration[20765-20782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18315-21264]:Block[20835-25570]"
    }, {
      "left" : "final Entity<?> en = dao.getEntity(klass);",
      "right" : "final Entity<?> en = dao.getEntity(klass);",
      "info" : "VariableDeclarationStatement[18325-18367]:VariableDeclarationStatement[20845-20887]"
    }, {
      "left" : "if (!dao.exists(klass))",
      "right" : "if (!dao.exists(klass))",
      "info" : "IfStatement[18376-18419]:IfStatement[20896-20939]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18412-18419]:ReturnStatement[20932-20939]"
    }, {
      "left" : "final JdbcExpert expert = ((NutDao)dao).getJdbcExpert();",
      "right" : "final JdbcExpert expert = ((NutDao) dao).getJdbcExpert();",
      "info" : "VariableDeclarationStatement[18428-18484]:VariableDeclarationStatement[20948-21005]"
    }, {
      "left" : "final List<Sql> sqls = new ArrayList<Sql>();",
      "right" : "final List<Sql> sqls = new ArrayList<Sql>();",
      "info" : "VariableDeclarationStatement[18493-18537]:VariableDeclarationStatement[21014-21058]"
    }, {
      "left" : "final boolean sqlAddNeedColumn = !dao.meta().isOracle();",
      "right" : "final boolean sqlAddNeedColumn = !dao.meta().isOracle();",
      "info" : "VariableDeclarationStatement[18546-18602]:VariableDeclarationStatement[21067-21123]"
    }, {
      "left" : "dao.run(new ConnCallback() {\n            public void invoke(Connection conn) throws Exception {\n                Statement stat = null;\n                ResultSet rs = null;\n                ResultSetMetaData meta = null;\n                try {\n                    // 获取数据库元信息\n                    stat = conn.createStatement();\n                    rs = stat.executeQuery(\"select * from \" + en.getTableName() + \" where 1 != 1\");\n                    meta = rs.getMetaData();\n                    \n                    Set<String> columnNames = new HashSet<String>();\n                    int columnCount = meta.getColumnCount();\n                    for (int i = 1; i <= columnCount; i++) {\n                        columnNames.add(meta.getColumnName(i).toLowerCase());\n                    }\n                    for (MappingField mf : en.getMappingFields()) {\n                        String colName = mf.getColumnName();\n                        if (columnNames.contains(colName.toLowerCase())) {\n                            columnNames.remove(colName);\n                            continue;\n                        }\n                        if (add) {\n                            log.infof(\"add column[%s] to table[%s]\", mf.getColumnName(), en.getTableName());\n                            Sql sql = Sqls.create(\"ALTER table $table ADD \" + (sqlAddNeedColumn ? \"column\" : \"\") + \"$name $type\");\n                            sql.vars().set(\"table\", en.getTableName());\n                            sql.vars().set(\"name\", mf.getColumnName());\n                            sql.vars().set(\"type\", expert.evalFieldType(mf));\n                            sqls.add(sql);\n                        }\n                    }\n                    if (del) {\n                        for (String colName : columnNames) {\n                            log.infof(\"del column[%s] from table[%s]\", colName, en.getTableName());\n                            Sql sql = Sqls.create(\"ALTER table $table DROP column $name\");\n                            sql.vars().set(\"table\", en.getTableName());\n                            sql.vars().set(\"name\", colName);\n                            sqls.add(sql);\n                        }\n                    }\n                }\n                catch (SQLException e) {\n                    if (log.isDebugEnabled())\n                        log.debugf(\"migration Table '%s' fail!\", en.getTableName(), e);\n                }\n                // Close ResultSet and Statement\n                finally {\n                    Daos.safeClose(stat, rs);\n                }\n            }\n        });",
      "right" : "dao.run(new ConnCallback() {\n            public void invoke(Connection conn) throws Exception {\n                expert.setupEntityField(conn, en);\n                Statement stat = null;\n                ResultSet rs = null;\n                ResultSetMetaData meta = null;\n                try {\n                    // 获取数据库元信息\n                    stat = conn.createStatement();\n                    rs = stat.executeQuery(\"select * from \" + en.getTableName() + \" where 1 != 1\");\n                    meta = rs.getMetaData();\n\n                    Set<String> columnNames = new HashSet<String>();\n                    int columnCount = meta.getColumnCount();\n                    for (int i = 1; i <= columnCount; i++) {\n                        columnNames.add(meta.getColumnName(i).toLowerCase());\n                    }\n                    for (MappingField mf : en.getMappingFields()) {\n                        String colName = mf.getColumnName();\n                        if (columnNames.contains(colName.toLowerCase())) {\n                            columnNames.remove(colName.toLowerCase());\n                            continue;\n                        }\n                        if (add) {\n                            log.infof(\"add column[%s] to table[%s]\",\n                                      mf.getColumnName(),\n                                      en.getTableName());\n                            StringBuilder sb = new StringBuilder(\"ALTER TABLE \");\n                            sb.append(meta.getTableName(1)).append(\" ADD \");\n                            if (sqlAddNeedColumn)\n                                sb.append(\"COLUMN \");\n                            sb.append(colName).append(\" \").append(expert.evalFieldType(mf));\n                            if (mf.isUnsigned()) {\n                                sb.append(\" UNSIGNED\");\n                            }\n                            if (mf.isNotNull()) {\n                                sb.append(\" NOT NULL\");\n                            }\n                            if (mf.getColumnType() == ColType.TIMESTAMP) {\n                                if (mf.hasDefaultValue()) {\n                                    sb.append(\" \")\n                                      .append(mf.getDefaultValue(null).replaceAll(\"@\", \"@@\"));\n                                } else {\n                                    if (mf.isNotNull()) {\n                                        sb.append(\" DEFAULT 0\");\n                                    } else {\n                                        sb.append(\" NULL DEFAULT NULL\");\n                                    }\n                                }\n                            } else {\n                                if (mf.hasDefaultValue())\n                                    sb.append(\" DEFAULT '\")\n                                      .append(mf.getDefaultValue(null).replaceAll(\"@\", \"@@\"))\n                                      .append(\"'\");\n                            }\n                            if (mf.hasColumnComment()) {\n                                sb.append(\" COMMENT '\").append(mf.getColumnComment()).append(\"'\");\n                            }\n                            sb.append(';');\n                            Sql sql = Sqls.create(sb.toString());\n                            sqls.add(sql);\n                        }\n                    }\n                    if (del) {\n                        for (String colName : columnNames) {\n                            log.infof(\"del column[%s] from table[%s]\", colName, en.getTableName());\n                            Sql sql = Sqls.create(\"ALTER table $table DROP column $name\");\n                            sql.vars().set(\"table\", en.getTableName());\n                            sql.vars().set(\"name\", colName);\n                            sqls.add(sql);\n                        }\n                    }\n                }\n                catch (SQLException e) {\n                    if (log.isDebugEnabled())\n                        log.debugf(\"migration Table '%s' fail!\", en.getTableName(), e);\n                }\n                // Close ResultSet and Statement\n                finally {\n                    Daos.safeClose(stat, rs);\n                }\n            }\n        });",
      "info" : "ExpressionStatement[18611-21187]:ExpressionStatement[21258-25493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18652-18658]:Modifier[21299-21305]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18659-18663]:PrimitiveType[21306-21310]"
    }, {
      "left" : "invoke",
      "right" : "invoke",
      "info" : "SimpleName[18664-18670]:SimpleName[21311-21317]"
    }, {
      "left" : "Connection conn",
      "right" : "Connection conn",
      "info" : "SingleVariableDeclaration[18671-18686]:SingleVariableDeclaration[21318-21333]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[18695-18704]:SimpleType[21342-21351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18705-21175]:Block[21352-25481]"
    }, {
      "left" : "Statement stat = null;",
      "right" : "Statement stat = null;",
      "info" : "VariableDeclarationStatement[18723-18745]:VariableDeclarationStatement[21421-21443]"
    }, {
      "left" : "ResultSet rs = null;",
      "right" : "ResultSet rs = null;",
      "info" : "VariableDeclarationStatement[18762-18782]:VariableDeclarationStatement[21460-21480]"
    }, {
      "left" : "ResultSetMetaData meta = null;",
      "right" : "ResultSetMetaData meta = null;",
      "info" : "VariableDeclarationStatement[18799-18829]:VariableDeclarationStatement[21497-21527]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18846-21161]:TryStatement[21544-25467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18850-20829]:Block[21548-25135]"
    }, {
      "left" : "stat = conn.createStatement();",
      "right" : "stat = conn.createStatement();",
      "info" : "ExpressionStatement[18904-18934]:ExpressionStatement[21602-21632]"
    }, {
      "left" : "rs = stat.executeQuery(\"select * from \" + en.getTableName() + \" where 1 != 1\");",
      "right" : "rs = stat.executeQuery(\"select * from \" + en.getTableName() + \" where 1 != 1\");",
      "info" : "ExpressionStatement[18955-19034]:ExpressionStatement[21653-21732]"
    }, {
      "left" : "meta = rs.getMetaData();",
      "right" : "meta = rs.getMetaData();",
      "info" : "ExpressionStatement[19055-19079]:ExpressionStatement[21753-21777]"
    }, {
      "left" : "Set<String> columnNames = new HashSet<String>();",
      "right" : "Set<String> columnNames = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[19121-19169]:VariableDeclarationStatement[21799-21847]"
    }, {
      "left" : "int columnCount = meta.getColumnCount();",
      "right" : "int columnCount = meta.getColumnCount();",
      "info" : "VariableDeclarationStatement[19190-19230]:VariableDeclarationStatement[21868-21908]"
    }, {
      "left" : "for (int i = 1; i <= columnCount; i++)",
      "right" : "for (int i = 1; i <= columnCount; i++)",
      "info" : "ForStatement[19251-19391]:ForStatement[21929-22069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19290-19391]:Block[21968-22069]"
    }, {
      "left" : "columnNames.add(meta.getColumnName(i).toLowerCase());",
      "right" : "columnNames.add(meta.getColumnName(i).toLowerCase());",
      "info" : "ExpressionStatement[19316-19369]:ExpressionStatement[21994-22047]"
    }, {
      "left" : "for (MappingField mf : en.getMappingFields())",
      "right" : "for (MappingField mf : en.getMappingFields())",
      "info" : "EnhancedForStatement[19412-20304]:EnhancedForStatement[22090-24610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19458-20304]:Block[22136-24610]"
    }, {
      "left" : "String colName = mf.getColumnName();",
      "right" : "String colName = mf.getColumnName();",
      "info" : "VariableDeclarationStatement[19484-19520]:VariableDeclarationStatement[22162-22198]"
    }, {
      "left" : "if (columnNames.contains(colName.toLowerCase()))",
      "right" : "if (columnNames.contains(colName.toLowerCase()))",
      "info" : "IfStatement[19545-19716]:IfStatement[22223-22408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19594-19716]:Block[22272-22408]"
    }, {
      "left" : "columnNames",
      "right" : "columnNames",
      "info" : "METHOD_INVOCATION_RECEIVER[19624-19635]:METHOD_INVOCATION_RECEIVER[22302-22313]"
    }, {
      "left" : "columnNames.remove(colName);",
      "right" : "columnNames.remove(colName.toLowerCase());",
      "info" : "ExpressionStatement[19624-19652]:ExpressionStatement[22302-22344]"
    }, {
      "left" : "columnNames.remove(colName)",
      "right" : "sb.append(colName)",
      "info" : "MethodInvocation[19624-19651]:MethodInvocation[22920-22938]"
    }, {
      "left" : "remove",
      "right" : "append",
      "info" : "SimpleName[19636-19642]:SimpleName[22923-22929]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19681-19690]:ContinueStatement[22373-22382]"
    }, {
      "left" : "if (add)",
      "right" : "if (add)",
      "info" : "IfStatement[19741-20282]:IfStatement[22433-24588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19750-20282]:Block[22442-24588]"
    }, {
      "left" : "log.infof(\"add column[%s] to table[%s]\", mf.getColumnName(), en.getTableName());",
      "right" : "log.infof(\"add column[%s] to table[%s]\",\n                                      mf.getColumnName(),\n                                      en.getTableName());",
      "info" : "ExpressionStatement[19780-19860]:ExpressionStatement[22472-22628]"
    }, {
      "left" : "Sql",
      "right" : "Sql",
      "info" : "SimpleType[19889-19892]:SimpleType[24482-24485]"
    }, {
      "left" : "Sqls",
      "right" : "Sqls",
      "info" : "METHOD_INVOCATION_RECEIVER[19899-19903]:METHOD_INVOCATION_RECEIVER[24492-24496]"
    }, {
      "left" : "sql.vars().set(\"name\", mf.getColumnName())",
      "right" : "sb.append(\" COMMENT '\").append(mf.getColumnComment())",
      "info" : "MethodInvocation[20092-20134]:MethodInvocation[24313-24366]"
    }, {
      "left" : "sql.vars().set(\"name\", mf.getColumnName());",
      "right" : "sb.append(\" COMMENT '\").append(mf.getColumnComment()).append(\"'\");",
      "info" : "ExpressionStatement[20092-20135]:ExpressionStatement[24313-24379]"
    }, {
      "left" : "set",
      "right" : "append",
      "info" : "SimpleName[20103-20106]:SimpleName[24337-24343]"
    }, {
      "left" : "getColumnName",
      "right" : "getColumnComment",
      "info" : "SimpleName[20118-20131]:SimpleName[24347-24363]"
    }, {
      "left" : "sql.vars().set(\"type\", expert.evalFieldType(mf));",
      "right" : "sb.append(colName).append(\" \").append(expert.evalFieldType(mf));",
      "info" : "ExpressionStatement[20164-20213]:ExpressionStatement[22920-22984]"
    }, {
      "left" : "vars",
      "right" : "append",
      "info" : "SimpleName[20168-20172]:SimpleName[22939-22945]"
    }, {
      "left" : "set",
      "right" : "append",
      "info" : "SimpleName[20175-20178]:SimpleName[22951-22957]"
    }, {
      "left" : "sqls.add(sql);",
      "right" : "sqls.add(sql);",
      "info" : "ExpressionStatement[20242-20256]:ExpressionStatement[24548-24562]"
    }, {
      "left" : "if (del)",
      "right" : "if (del)",
      "info" : "IfStatement[20325-20811]:IfStatement[24631-25117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20334-20811]:Block[24640-25117]"
    }, {
      "left" : "for (String colName : columnNames)",
      "right" : "for (String colName : columnNames)",
      "info" : "EnhancedForStatement[20360-20789]:EnhancedForStatement[24666-25095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20395-20789]:Block[24701-25095]"
    }, {
      "left" : "log.infof(\"del column[%s] from table[%s]\", colName, en.getTableName());",
      "right" : "log.infof(\"del column[%s] from table[%s]\", colName, en.getTableName());",
      "info" : "ExpressionStatement[20425-20496]:ExpressionStatement[24731-24802]"
    }, {
      "left" : "Sql sql = Sqls.create(\"ALTER table $table DROP column $name\");",
      "right" : "Sql sql = Sqls.create(\"ALTER table $table DROP column $name\");",
      "info" : "VariableDeclarationStatement[20525-20587]:VariableDeclarationStatement[24831-24893]"
    }, {
      "left" : "sql.vars().set(\"table\", en.getTableName());",
      "right" : "sql.vars().set(\"table\", en.getTableName());",
      "info" : "ExpressionStatement[20616-20659]:ExpressionStatement[24922-24965]"
    }, {
      "left" : "sql.vars().set(\"name\", colName);",
      "right" : "sql.vars().set(\"name\", colName);",
      "info" : "ExpressionStatement[20688-20720]:ExpressionStatement[24994-25026]"
    }, {
      "left" : "sqls.add(sql);",
      "right" : "sqls.add(sql);",
      "info" : "ExpressionStatement[20749-20763]:ExpressionStatement[25055-25069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20869-21022]:Block[25175-25328]"
    }, {
      "left" : "if (log.isDebugEnabled())",
      "right" : "if (log.isDebugEnabled())",
      "info" : "IfStatement[20891-21004]:IfStatement[25197-25310]"
    }, {
      "left" : "log.debugf(\"migration Table '%s' fail!\", en.getTableName(), e);",
      "right" : "log.debugf(\"migration Table '%s' fail!\", en.getTableName(), e);",
      "info" : "ExpressionStatement[20941-21004]:ExpressionStatement[25247-25310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21096-21161]:Block[25402-25467]"
    }, {
      "left" : "Daos.safeClose(stat, rs);",
      "right" : "Daos.safeClose(stat, rs);",
      "info" : "ExpressionStatement[21118-21143]:ExpressionStatement[25424-25449]"
    }, {
      "left" : "for (Sql sql : sqls)",
      "right" : "for (Sql sql : sqls)",
      "info" : "EnhancedForStatement[21196-21258]:EnhancedForStatement[25502-25564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21217-21258]:Block[25523-25564]"
    }, {
      "left" : "dao.execute(sql);",
      "right" : "dao.execute(sql);",
      "info" : "ExpressionStatement[21231-21248]:ExpressionStatement[25537-25554]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21453-21459]:Modifier[26612-26618]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21460-21466]:Modifier[26619-26625]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21467-21471]:PrimitiveType[26626-26630]"
    }, {
      "left" : "migration",
      "right" : "migration",
      "info" : "SimpleName[21472-21481]:SimpleName[26631-26640]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[21482-21489]:SingleVariableDeclaration[26641-26648]"
    }, {
      "left" : "String packageName",
      "right" : "String packageName",
      "info" : "SingleVariableDeclaration[21491-21509]:SingleVariableDeclaration[26650-26668]"
    }, {
      "left" : "boolean add",
      "right" : "boolean add",
      "info" : "SingleVariableDeclaration[21511-21522]:SingleVariableDeclaration[26670-26681]"
    }, {
      "left" : "boolean del",
      "right" : "boolean del",
      "info" : "SingleVariableDeclaration[21524-21535]:SingleVariableDeclaration[26683-26694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21537-21746]:Block[26696-26911]"
    }, {
      "left" : "for (Class<?> klass : Scans.me().scanPackage(packageName))",
      "right" : "for (Class<?> klass : Scans.me().scanPackage(packageName))",
      "info" : "EnhancedForStatement[21547-21740]:EnhancedForStatement[26706-26905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21606-21740]:Block[26765-26905]"
    }, {
      "left" : "if (klass.getAnnotation(Table.class) != null)",
      "right" : "if (klass.getAnnotation(Table.class) != null)",
      "info" : "IfStatement[21620-21730]:IfStatement[26779-26895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21666-21730]:Block[26825-26895]"
    }, {
      "left" : "migration(dao, klass, add, del);",
      "right" : "migration(dao, klass, add, del, null);",
      "info" : "ExpressionStatement[21684-21716]:ExpressionStatement[26843-26881]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[21750-21755]:TYPE_DECLARATION_KIND[26915-26920]"
    }, {
      "left" : "ExtDaoInvocationHandler",
      "right" : "ExtDaoInvocationHandler",
      "info" : "SimpleName[21756-21779]:SimpleName[26921-26944]"
    }, {
      "left" : "InvocationHandler",
      "right" : "InvocationHandler",
      "info" : "SimpleType[21791-21808]:SimpleType[26956-26973]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21814-21823]:Modifier[26981-26990]"
    }, {
      "left" : "ExtDaoInvocationHandler",
      "right" : "ExtDaoInvocationHandler",
      "info" : "SimpleName[21824-21847]:SimpleName[26991-27014]"
    }, {
      "left" : "Dao dao",
      "right" : "Dao dao",
      "info" : "SingleVariableDeclaration[21848-21855]:SingleVariableDeclaration[27015-27022]"
    }, {
      "left" : "FieldFilter filter",
      "right" : "FieldFilter filter",
      "info" : "SingleVariableDeclaration[21857-21875]:SingleVariableDeclaration[27024-27042]"
    }, {
      "left" : "Object tableName",
      "right" : "Object tableName",
      "info" : "SingleVariableDeclaration[21877-21893]:SingleVariableDeclaration[27044-27060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21895-21971]:Block[27062-27159]"
    }, {
      "left" : "this.dao = dao;",
      "right" : "this.dao = dao;",
      "info" : "ExpressionStatement[21899-21914]:ExpressionStatement[27072-27087]"
    }, {
      "left" : "this.filter = filter;",
      "right" : "this.filter = filter;",
      "info" : "ExpressionStatement[21917-21938]:ExpressionStatement[27096-27117]"
    }, {
      "left" : "this.tableName = tableName;",
      "right" : "this.tableName = tableName;",
      "info" : "ExpressionStatement[21941-21968]:ExpressionStatement[27126-27153]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22048-22054]:Modifier[27246-27252]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[22055-22061]:SimpleType[27253-27259]"
    }, {
      "left" : "invoke",
      "right" : "invoke",
      "info" : "SimpleName[22062-22068]:SimpleName[27260-27266]"
    }, {
      "left" : "Object proxy",
      "right" : "Object proxy",
      "info" : "SingleVariableDeclaration[22069-22081]:SingleVariableDeclaration[27267-27279]"
    }, {
      "left" : "final Method method",
      "right" : "final Method method",
      "info" : "SingleVariableDeclaration[22083-22102]:SingleVariableDeclaration[27281-27300]"
    }, {
      "left" : "final Object[] args",
      "right" : "final Object[] args",
      "info" : "SingleVariableDeclaration[22104-22123]:SingleVariableDeclaration[27302-27321]"
    }, {
      "left" : "Throwable",
      "right" : "Throwable",
      "info" : "SimpleType[22132-22141]:SimpleType[27330-27339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22142-22815]:Block[27340-28314]"
    }, {
      "left" : "final Molecule<Object> m = new Molecule<Object>() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tsetObj(method.invoke(dao, args));\n\t\t\t\t}\n\t\t\t\tcatch (IllegalArgumentException e) {\n\t\t\t\t\tthrow Lang.wrapThrow(e);\n\t\t\t\t}\n\t\t\t\tcatch (IllegalAccessException e) {\n\t\t\t\t\tthrow Lang.wrapThrow(e);\n\t\t\t\t}\n\t\t\t\tcatch (InvocationTargetException e) {\n\t\t\t\t\tthrow Lang.wrapThrow(e.getTargetException());\n\t\t\t\t}\n\t\t\t}\n\t\t};",
      "right" : "final Molecule<Object> m = new Molecule<Object>() {\n            public void run() {\n                try {\n                    setObj(method.invoke(dao, args));\n                }\n                catch (IllegalArgumentException e) {\n                    throw Lang.wrapThrow(e);\n                }\n                catch (IllegalAccessException e) {\n                    throw Lang.wrapThrow(e);\n                }\n                catch (InvocationTargetException e) {\n                    throw Lang.wrapThrow(e.getTargetException());\n                }\n            }\n        };",
      "info" : "VariableDeclarationStatement[22149-22539]:VariableDeclarationStatement[27351-27921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22204-22210]:Modifier[27415-27421]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22211-22215]:PrimitiveType[27422-27426]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[22216-22219]:SimpleName[27427-27430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22222-22534]:Block[27433-27910]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22228-22529]:TryStatement[27451-27896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22232-22278]:Block[27455-27528]"
    }, {
      "left" : "setObj(method.invoke(dao, args));",
      "right" : "setObj(method.invoke(dao, args));",
      "info" : "ExpressionStatement[22239-22272]:ExpressionStatement[27477-27510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22318-22355]:Block[27580-27644]"
    }, {
      "left" : "throw Lang.wrapThrow(e);",
      "right" : "throw Lang.wrapThrow(e);",
      "info" : "ThrowStatement[22325-22349]:ThrowStatement[27602-27626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22393-22430]:Block[27694-27758]"
    }, {
      "left" : "throw Lang.wrapThrow(e);",
      "right" : "throw Lang.wrapThrow(e);",
      "info" : "ThrowStatement[22400-22424]:ThrowStatement[27716-27740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22471-22529]:Block[27811-27896]"
    }, {
      "left" : "throw Lang.wrapThrow(e.getTargetException());",
      "right" : "throw Lang.wrapThrow(e.getTargetException());",
      "info" : "ThrowStatement[22478-22523]:ThrowStatement[27833-27878]"
    }, {
      "left" : "if (filter != null && tableName != null)",
      "right" : "if (filter != null && tableName != null)",
      "info" : "IfStatement[22542-22712]:IfStatement[27930-28172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22583-22712]:Block[27971-28172]"
    }, {
      "left" : "TableName.run(tableName, new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfilter.run(m);\n\t\t\t\t}\n\t\t\t});",
      "right" : "TableName.run(tableName, new Runnable() {\n                public void run() {\n                    filter.run(m);\n                }\n            });",
      "info" : "ExpressionStatement[22588-22686]:ExpressionStatement[27985-28131]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22634-22640]:Modifier[28043-28049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22641-22645]:PrimitiveType[28050-28054]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[22646-22649]:SimpleName[28055-28058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22652-22679]:Block[28061-28115]"
    }, {
      "left" : "filter.run(m);",
      "right" : "filter.run(m);",
      "info" : "ExpressionStatement[22659-22673]:ExpressionStatement[28083-28097]"
    }, {
      "left" : "return m.getObj();",
      "right" : "return m.getObj();",
      "info" : "ReturnStatement[22690-22708]:ReturnStatement[28144-28162]"
    }, {
      "left" : "if (filter != null)",
      "right" : "if (filter != null)",
      "info" : "IfStatement[22715-22791]:IfStatement[28181-28281]"
    }, {
      "left" : "filter.run(m);",
      "right" : "filter.run(m);",
      "info" : "ExpressionStatement[22738-22752]:ExpressionStatement[28213-28227]"
    }, {
      "left" : "TableName.run(tableName, m);",
      "right" : "TableName.run(tableName, m);",
      "info" : "ExpressionStatement[22763-22791]:ExpressionStatement[28253-28281]"
    }, {
      "left" : "return m.getObj();",
      "right" : "return m.getObj();",
      "info" : "ReturnStatement[22794-22812]:ReturnStatement[28290-28308]"
    } ]
  },
  "interFileMappings" : { }
}