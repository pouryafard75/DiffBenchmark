{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FastMath",
      "right" : "FastMath",
      "info" : "TypeDeclaration[872-120542]:TypeDeclaration[872-121211]"
    }, {
      "left" : "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
      "right" : "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
      "info" : "FieldDeclaration[3466-3628]:FieldDeclaration[3548-3710]"
    }, {
      "left" : "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
      "right" : "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
      "info" : "FieldDeclaration[3634-3776]:FieldDeclaration[3716-3858]"
    }, {
      "left" : "static final int EXP_INT_TABLE_MAX_INDEX = 750;",
      "right" : "static final int EXP_INT_TABLE_MAX_INDEX = 750;",
      "info" : "FieldDeclaration[3782-3894]:FieldDeclaration[3864-3976]"
    }, {
      "left" : "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;",
      "right" : "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;",
      "info" : "FieldDeclaration[3899-4020]:FieldDeclaration[3981-4102]"
    }, {
      "left" : "static final int LN_MANT_LEN = 1024;",
      "right" : "static final int LN_MANT_LEN = 1024;",
      "info" : "FieldDeclaration[4025-4096]:FieldDeclaration[4107-4178]"
    }, {
      "left" : "static final int EXP_FRAC_TABLE_LEN = 1025;",
      "right" : "static final int EXP_FRAC_TABLE_LEN = 1025;",
      "info" : "FieldDeclaration[4101-4191]:FieldDeclaration[4183-4273]"
    }, {
      "left" : "private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;",
      "right" : "private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;",
      "info" : "FieldDeclaration[4225-4586]:FieldDeclaration[4307-4668]"
    }, {
      "left" : "private static final double LN_2_A = 0.693147063255310059;",
      "right" : "private static final double LN_2_A = 0.693147063255310059;",
      "info" : "FieldDeclaration[4592-4681]:FieldDeclaration[4674-4763]"
    }, {
      "left" : "private static final double LN_2_B = 1.17304635250823482e-7;",
      "right" : "private static final double LN_2_B = 1.17304635250823482e-7;",
      "info" : "FieldDeclaration[4687-4777]:FieldDeclaration[4769-4859]"
    }, {
      "left" : "private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
      "right" : "private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
      "info" : "FieldDeclaration[4783-5320]:FieldDeclaration[4865-5402]"
    }, {
      "left" : "private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
      "right" : "private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
      "info" : "FieldDeclaration[5326-5735]:FieldDeclaration[5408-5817]"
    }, {
      "left" : "private static final int SINE_TABLE_LEN = 14;",
      "right" : "private static final int SINE_TABLE_LEN = 14;",
      "info" : "FieldDeclaration[5741-5871]:FieldDeclaration[5823-5953]"
    }, {
      "left" : "private static final double SINE_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
      "right" : "private static final double SINE_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1246747374534607d,\n        +0.24740394949913025d,\n        +0.366272509098053d,\n        +0.4794255495071411d,\n        +0.5850973129272461d,\n        +0.6816387176513672d,\n        +0.7675435543060303d,\n        +0.8414709568023682d,\n        +0.902267575263977d,\n        +0.9489846229553223d,\n        +0.9808930158615112d,\n        +0.9974949359893799d,\n        +0.9985313415527344d,\n    };",
      "info" : "FieldDeclaration[5877-6377]:FieldDeclaration[5959-6459]"
    }, {
      "left" : "private static final double SINE_TABLE_B[] =\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
      "right" : "private static final double SINE_TABLE_B[] =\n        {\n        +0.0d,\n        -4.068233003401932E-9d,\n        +9.755392680573412E-9d,\n        +1.9987994582857286E-8d,\n        -1.0902938113007961E-8d,\n        -3.9986783938944604E-8d,\n        +4.23719669792332E-8d,\n        -5.207000323380292E-8d,\n        +2.800552834259E-8d,\n        +1.883511811213715E-8d,\n        -3.5997360512765566E-9d,\n        +4.116164446561962E-8d,\n        +5.0614674548127384E-8d,\n        -1.0129027912496858E-9d,\n    };",
      "info" : "FieldDeclaration[6383-6911]:FieldDeclaration[6465-6993]"
    }, {
      "left" : "private static final double COSINE_TABLE_A[] =\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
      "right" : "private static final double COSINE_TABLE_A[] =\n        {\n        +1.0d,\n        +0.9921976327896118d,\n        +0.9689123630523682d,\n        +0.9305076599121094d,\n        +0.8775825500488281d,\n        +0.8109631538391113d,\n        +0.7316888570785522d,\n        +0.6409968137741089d,\n        +0.5403022766113281d,\n        +0.4311765432357788d,\n        +0.3153223395347595d,\n        +0.19454771280288696d,\n        +0.07073719799518585d,\n        -0.05417713522911072d,\n    };",
      "info" : "FieldDeclaration[6917-7425]:FieldDeclaration[6999-7507]"
    }, {
      "left" : "private static final double COSINE_TABLE_B[] =\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
      "right" : "private static final double COSINE_TABLE_B[] =\n        {\n        +0.0d,\n        +3.4439717236742845E-8d,\n        +5.865827662008209E-8d,\n        -3.7999795083850525E-8d,\n        +1.184154459111628E-8d,\n        -3.43338934259355E-8d,\n        +1.1795268640216787E-8d,\n        +4.438921624363781E-8d,\n        +2.925681159240093E-8d,\n        -2.6437112632041807E-8d,\n        +2.2860509143963117E-8d,\n        -4.813899778443457E-9d,\n        +3.6725170580355583E-9d,\n        +2.0217439756338078E-10d,\n    };",
      "info" : "FieldDeclaration[7431-7968]:FieldDeclaration[7513-8050]"
    }, {
      "left" : "private static final double TANGENT_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
      "right" : "private static final double TANGENT_TABLE_A[] =\n        {\n        +0.0d,\n        +0.1256551444530487d,\n        +0.25534194707870483d,\n        +0.3936265707015991d,\n        +0.5463024377822876d,\n        +0.7214844226837158d,\n        +0.9315965175628662d,\n        +1.1974215507507324d,\n        +1.5574076175689697d,\n        +2.092571258544922d,\n        +3.0095696449279785d,\n        +5.041914939880371d,\n        +14.101419448852539d,\n        -18.430862426757812d,\n    };",
      "info" : "FieldDeclaration[7975-8497]:FieldDeclaration[8057-8579]"
    }, {
      "left" : "private static final double TANGENT_TABLE_B[] =\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
      "right" : "private static final double TANGENT_TABLE_B[] =\n        {\n        +0.0d,\n        -7.877917738262007E-9d,\n        -2.5857668567479893E-8d,\n        +5.2240336371356666E-9d,\n        +5.206150291559893E-8d,\n        +1.8307188599677033E-8d,\n        -5.7618793749770706E-8d,\n        +7.848361555046424E-8d,\n        +1.0708593250394448E-7d,\n        +1.7827257129423813E-8d,\n        +2.893485277253286E-8d,\n        +3.1660099222737955E-7d,\n        +4.983191803254889E-7d,\n        -3.356118100840571E-7d,\n    };",
      "info" : "FieldDeclaration[8503-9058]:FieldDeclaration[8585-9140]"
    }, {
      "left" : "private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
      "right" : "private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
      "info" : "FieldDeclaration[9064-9936]:FieldDeclaration[9146-10018]"
    }, {
      "left" : "private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
      "right" : "private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
      "info" : "FieldDeclaration[9942-10138]:FieldDeclaration[10024-10220]"
    }, {
      "left" : "private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
      "right" : "private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
      "info" : "FieldDeclaration[10144-10417]:FieldDeclaration[10226-10499]"
    }, {
      "left" : "private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
      "right" : "private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
      "info" : "FieldDeclaration[10423-10759]:FieldDeclaration[10505-10841]"
    }, {
      "left" : "private static final long HEX_40000000 = 0x40000000L;",
      "right" : "private static final long HEX_40000000 = 0x40000000L;",
      "info" : "FieldDeclaration[11038-11231]:FieldDeclaration[11120-11313]"
    }, {
      "left" : "private static final long MASK_30BITS = -1L - (HEX_40000000 -1);",
      "right" : "private static final long MASK_30BITS = -1L - (HEX_40000000 -1);",
      "info" : "FieldDeclaration[11252-11364]:FieldDeclaration[11334-11446]"
    }, {
      "left" : "private static final double TWO_POWER_52 = 4503599627370496.0;",
      "right" : "private static final double TWO_POWER_52 = 4503599627370496.0;",
      "info" : "FieldDeclaration[11394-11550]:FieldDeclaration[11476-11632]"
    }, {
      "left" : "private static final double F_1_3 = 1d / 3d;",
      "right" : "private static final double F_1_3 = 1d / 3d;",
      "info" : "FieldDeclaration[11556-11631]:FieldDeclaration[11638-11713]"
    }, {
      "left" : "private static final double F_1_5 = 1d / 5d;",
      "right" : "private static final double F_1_5 = 1d / 5d;",
      "info" : "FieldDeclaration[11636-11711]:FieldDeclaration[11718-11793]"
    }, {
      "left" : "private static final double F_1_7 = 1d / 7d;",
      "right" : "private static final double F_1_7 = 1d / 7d;",
      "info" : "FieldDeclaration[11716-11791]:FieldDeclaration[11798-11873]"
    }, {
      "left" : "private static final double F_1_9 = 1d / 9d;",
      "right" : "private static final double F_1_9 = 1d / 9d;",
      "info" : "FieldDeclaration[11796-11871]:FieldDeclaration[11878-11953]"
    }, {
      "left" : "private static final double F_1_11 = 1d / 11d;",
      "right" : "private static final double F_1_11 = 1d / 11d;",
      "info" : "FieldDeclaration[11876-11953]:FieldDeclaration[11958-12035]"
    }, {
      "left" : "private static final double F_1_13 = 1d / 13d;",
      "right" : "private static final double F_1_13 = 1d / 13d;",
      "info" : "FieldDeclaration[11958-12035]:FieldDeclaration[12040-12117]"
    }, {
      "left" : "private static final double F_1_15 = 1d / 15d;",
      "right" : "private static final double F_1_15 = 1d / 15d;",
      "info" : "FieldDeclaration[12040-12117]:FieldDeclaration[12122-12199]"
    }, {
      "left" : "private static final double F_1_17 = 1d / 17d;",
      "right" : "private static final double F_1_17 = 1d / 17d;",
      "info" : "FieldDeclaration[12122-12199]:FieldDeclaration[12204-12281]"
    }, {
      "left" : "private static final double F_3_4 = 3d / 4d;",
      "right" : "private static final double F_3_4 = 3d / 4d;",
      "info" : "FieldDeclaration[12204-12279]:FieldDeclaration[12286-12361]"
    }, {
      "left" : "private static final double F_15_16 = 15d / 16d;",
      "right" : "private static final double F_15_16 = 15d / 16d;",
      "info" : "FieldDeclaration[12284-12363]:FieldDeclaration[12366-12445]"
    }, {
      "left" : "private static final double F_13_14 = 13d / 14d;",
      "right" : "private static final double F_13_14 = 13d / 14d;",
      "info" : "FieldDeclaration[12368-12447]:FieldDeclaration[12450-12529]"
    }, {
      "left" : "private static final double F_11_12 = 11d / 12d;",
      "right" : "private static final double F_11_12 = 11d / 12d;",
      "info" : "FieldDeclaration[12452-12531]:FieldDeclaration[12534-12613]"
    }, {
      "left" : "private static final double F_9_10 = 9d / 10d;",
      "right" : "private static final double F_9_10 = 9d / 10d;",
      "info" : "FieldDeclaration[12536-12613]:FieldDeclaration[12618-12695]"
    }, {
      "left" : "private static final double F_7_8 = 7d / 8d;",
      "right" : "private static final double F_7_8 = 7d / 8d;",
      "info" : "FieldDeclaration[12618-12693]:FieldDeclaration[12700-12775]"
    }, {
      "left" : "private static final double F_5_6 = 5d / 6d;",
      "right" : "private static final double F_5_6 = 5d / 6d;",
      "info" : "FieldDeclaration[12698-12773]:FieldDeclaration[12780-12855]"
    }, {
      "left" : "private static final double F_1_2 = 1d / 2d;",
      "right" : "private static final double F_1_2 = 1d / 2d;",
      "info" : "FieldDeclaration[12778-12853]:FieldDeclaration[12860-12935]"
    }, {
      "left" : "private static final double F_1_4 = 1d / 4d;",
      "right" : "private static final double F_1_4 = 1d / 4d;",
      "info" : "FieldDeclaration[12858-12933]:FieldDeclaration[12940-13015]"
    }, {
      "left" : "private FastMath()",
      "right" : "private FastMath()",
      "info" : "MethodDeclaration[12939-13003]:MethodDeclaration[13021-13085]"
    }, {
      "left" : "private static double doubleHighPart(double d)",
      "right" : "private static double doubleHighPart(double d)",
      "info" : "MethodDeclaration[13040-13635]:MethodDeclaration[13122-13717]"
    }, {
      "left" : "public static double sqrt(final double a)",
      "right" : "public static double sqrt(final double a)",
      "info" : "MethodDeclaration[13641-13939]:MethodDeclaration[13723-14021]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[13945-15474]:MethodDeclaration[14027-15849]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[15480-18490]:MethodDeclaration[15855-19159]"
    }, {
      "left" : "public static double tanh(double x)",
      "right" : "public static double tanh(double x)",
      "info" : "MethodDeclaration[18496-21627]:MethodDeclaration[19165-22296]"
    }, {
      "left" : "public static double acosh(final double a)",
      "right" : "public static double acosh(final double a)",
      "info" : "MethodDeclaration[21633-21906]:MethodDeclaration[22302-22575]"
    }, {
      "left" : "public static double asinh(double a)",
      "right" : "public static double asinh(double a)",
      "info" : "MethodDeclaration[21912-23210]:MethodDeclaration[22581-23879]"
    }, {
      "left" : "public static double atanh(double a)",
      "right" : "public static double atanh(double a)",
      "info" : "MethodDeclaration[23216-24343]:MethodDeclaration[23885-25012]"
    }, {
      "left" : "public static double signum(final double a)",
      "right" : "public static double signum(final double a)",
      "info" : "MethodDeclaration[24349-24749]:MethodDeclaration[25018-25418]"
    }, {
      "left" : "public static float signum(final float a)",
      "right" : "public static float signum(final float a)",
      "info" : "MethodDeclaration[24755-25157]:MethodDeclaration[25424-25826]"
    }, {
      "left" : "public static double nextUp(final double a)",
      "right" : "public static double nextUp(final double a)",
      "info" : "MethodDeclaration[25163-25447]:MethodDeclaration[25832-26116]"
    }, {
      "left" : "public static float nextUp(final float a)",
      "right" : "public static float nextUp(final float a)",
      "info" : "MethodDeclaration[25453-25734]:MethodDeclaration[26122-26403]"
    }, {
      "left" : "public static double random()",
      "right" : "public static double random()",
      "info" : "MethodDeclaration[25740-26012]:MethodDeclaration[26409-26681]"
    }, {
      "left" : "public static double exp(double x)",
      "right" : "public static double exp(double x)",
      "info" : "MethodDeclaration[26018-26863]:MethodDeclaration[26687-27532]"
    }, {
      "left" : "private static double exp(double x, double extra, double[] hiPrec)",
      "right" : "private static double exp(double x, double extra, double[] hiPrec)",
      "info" : "MethodDeclaration[26869-31670]:MethodDeclaration[27538-32339]"
    }, {
      "left" : "public static double expm1(double x)",
      "right" : "public static double expm1(double x)",
      "info" : "MethodDeclaration[31676-31864]:MethodDeclaration[32345-32533]"
    }, {
      "left" : "private static double expm1(double x, double hiPrecOut[])",
      "right" : "private static double expm1(double x, double hiPrecOut[])",
      "info" : "MethodDeclaration[31870-36213]:MethodDeclaration[32539-36882]"
    }, {
      "left" : "public static double log(final double x)",
      "right" : "public static double log(final double x)",
      "info" : "MethodDeclaration[36219-36394]:MethodDeclaration[36888-37063]"
    }, {
      "left" : "private static double log(final double x, final double[] hiPrec)",
      "right" : "private static double log(final double x, final double[] hiPrec)",
      "info" : "MethodDeclaration[36400-43790]:MethodDeclaration[37069-44459]"
    }, {
      "left" : "public static double log1p(final double x)",
      "right" : "public static double log1p(final double x)",
      "info" : "MethodDeclaration[43796-44953]:MethodDeclaration[44465-45622]"
    }, {
      "left" : "public static double log10(final double x)",
      "right" : "public static double log10(final double x)",
      "info" : "MethodDeclaration[44959-45655]:MethodDeclaration[45628-46324]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[45661-46504]:MethodDeclaration[46330-47173]"
    }, {
      "left" : "public static double pow(double x, double y)",
      "right" : "public static double pow(double x, double y)",
      "info" : "MethodDeclaration[46510-50720]:MethodDeclaration[47179-51389]"
    }, {
      "left" : "public static double pow(double d, int e)",
      "right" : "public static double pow(double d, int e)",
      "info" : "MethodDeclaration[50727-53213]:MethodDeclaration[51396-53882]"
    }, {
      "left" : "private static double polySine(final double x)",
      "right" : "private static double polySine(final double x)",
      "info" : "MethodDeclaration[53219-53736]:MethodDeclaration[53888-54405]"
    }, {
      "left" : "private static double polyCosine(double x)",
      "right" : "private static double polyCosine(double x)",
      "info" : "MethodDeclaration[53742-54206]:MethodDeclaration[54411-54875]"
    }, {
      "left" : "private static double sinQ(double xa, double xb)",
      "right" : "private static double sinQ(double xa, double xb)",
      "info" : "MethodDeclaration[54212-57469]:MethodDeclaration[54881-58138]"
    }, {
      "left" : "private static double cosQ(double xa, double xb)",
      "right" : "private static double cosQ(double xa, double xb)",
      "info" : "MethodDeclaration[57475-58063]:MethodDeclaration[58144-58732]"
    }, {
      "left" : "private static double tanQ(double xa, double xb, boolean cotanFlag)",
      "right" : "private static double tanQ(double xa, double xb, boolean cotanFlag)",
      "info" : "MethodDeclaration[58069-62586]:MethodDeclaration[58738-63255]"
    }, {
      "left" : "private static void reducePayneHanek(double x, double result[])",
      "right" : "private static void reducePayneHanek(double x, double result[])",
      "info" : "MethodDeclaration[62592-69057]:MethodDeclaration[63261-69726]"
    }, {
      "left" : "public static double sin(double x)",
      "right" : "public static double sin(double x)",
      "info" : "MethodDeclaration[69063-70814]:MethodDeclaration[69732-71483]"
    }, {
      "left" : "public static double cos(double x)",
      "right" : "public static double cos(double x)",
      "info" : "MethodDeclaration[70820-72257]:MethodDeclaration[71489-72926]"
    }, {
      "left" : "public static double tan(double x)",
      "right" : "public static double tan(double x)",
      "info" : "MethodDeclaration[72263-74279]:MethodDeclaration[72932-74948]"
    }, {
      "left" : "public static double atan(double x)",
      "right" : "public static double atan(double x)",
      "info" : "MethodDeclaration[74285-74457]:MethodDeclaration[74954-75126]"
    }, {
      "left" : "private static double atan(double xa, double xb, boolean leftPlane)",
      "right" : "private static double atan(double xa, double xb, boolean leftPlane)",
      "info" : "MethodDeclaration[74463-79175]:MethodDeclaration[75132-79844]"
    }, {
      "left" : "public static double atan2(double y, double x)",
      "right" : "public static double atan2(double y, double x)",
      "info" : "MethodDeclaration[79181-82223]:MethodDeclaration[79850-82892]"
    }, {
      "left" : "public static double asin(double x)",
      "right" : "public static double asin(double x)",
      "info" : "MethodDeclaration[82229-83927]:MethodDeclaration[82898-84596]"
    }, {
      "left" : "public static double acos(double x)",
      "right" : "public static double acos(double x)",
      "info" : "MethodDeclaration[83933-85736]:MethodDeclaration[84602-86405]"
    }, {
      "left" : "public static double cbrt(double x)",
      "right" : "public static double cbrt(double x)",
      "info" : "MethodDeclaration[85742-88435]:MethodDeclaration[86411-89104]"
    }, {
      "left" : "public static double toRadians(double x)",
      "right" : "public static double toRadians(double x)",
      "info" : "MethodDeclaration[88441-89223]:MethodDeclaration[89110-89892]"
    }, {
      "left" : "public static double toDegrees(double x)",
      "right" : "public static double toDegrees(double x)",
      "info" : "MethodDeclaration[89229-89857]:MethodDeclaration[89898-90526]"
    }, {
      "left" : "public static int abs(final int x)",
      "right" : "public static int abs(final int x)",
      "info" : "MethodDeclaration[89863-90061]:MethodDeclaration[90532-90730]"
    }, {
      "left" : "public static long abs(final long x)",
      "right" : "public static long abs(final long x)",
      "info" : "MethodDeclaration[90067-90268]:MethodDeclaration[90736-90937]"
    }, {
      "left" : "public static float abs(final float x)",
      "right" : "public static float abs(final float x)",
      "info" : "MethodDeclaration[90274-90516]:MethodDeclaration[90943-91185]"
    }, {
      "left" : "public static double abs(double x)",
      "right" : "public static double abs(double x)",
      "info" : "MethodDeclaration[90522-90757]:MethodDeclaration[91191-91426]"
    }, {
      "left" : "public static double ulp(double x)",
      "right" : "public static double ulp(double x)",
      "info" : "MethodDeclaration[90763-91141]:MethodDeclaration[91432-91810]"
    }, {
      "left" : "public static float ulp(float x)",
      "right" : "public static float ulp(float x)",
      "info" : "MethodDeclaration[91147-91515]:MethodDeclaration[91816-92184]"
    }, {
      "left" : "public static double scalb(final double d, final int n)",
      "right" : "public static double scalb(final double d, final int n)",
      "info" : "MethodDeclaration[91521-94775]:MethodDeclaration[92190-95444]"
    }, {
      "left" : "public static float scalb(final float f, final int n)",
      "right" : "public static float scalb(final float f, final int n)",
      "info" : "MethodDeclaration[94781-97920]:MethodDeclaration[95450-98589]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[97926-100042]:MethodDeclaration[98595-100711]"
    }, {
      "left" : "public static float nextAfter(final float f, final double direction)",
      "right" : "public static float nextAfter(final float f, final double direction)",
      "info" : "MethodDeclaration[100048-102139]:MethodDeclaration[100717-102808]"
    }, {
      "left" : "public static double floor(double x)",
      "right" : "public static double floor(double x)",
      "info" : "MethodDeclaration[102145-102702]:MethodDeclaration[102814-103371]"
    }, {
      "left" : "public static double ceil(double x)",
      "right" : "public static double ceil(double x)",
      "info" : "MethodDeclaration[102708-103192]:MethodDeclaration[103377-103861]"
    }, {
      "left" : "public static double rint(double x)",
      "right" : "public static double rint(double x)",
      "info" : "MethodDeclaration[103198-103897]:MethodDeclaration[103867-104566]"
    }, {
      "left" : "public static long round(double x)",
      "right" : "public static long round(double x)",
      "info" : "MethodDeclaration[103903-104119]:MethodDeclaration[104572-104788]"
    }, {
      "left" : "public static int round(final float x)",
      "right" : "public static int round(final float x)",
      "info" : "MethodDeclaration[104125-104342]:MethodDeclaration[104794-105011]"
    }, {
      "left" : "public static int min(final int a, final int b)",
      "right" : "public static int min(final int a, final int b)",
      "info" : "MethodDeclaration[104348-104602]:MethodDeclaration[105017-105271]"
    }, {
      "left" : "public static long min(final long a, final long b)",
      "right" : "public static long min(final long a, final long b)",
      "info" : "MethodDeclaration[104608-104865]:MethodDeclaration[105277-105534]"
    }, {
      "left" : "public static float min(final float a, final float b)",
      "right" : "public static float min(final float a, final float b)",
      "info" : "MethodDeclaration[104871-105540]:MethodDeclaration[105540-106209]"
    }, {
      "left" : "public static double min(final double a, final double b)",
      "right" : "public static double min(final double a, final double b)",
      "info" : "MethodDeclaration[105546-106244]:MethodDeclaration[106215-106913]"
    }, {
      "left" : "public static int max(final int a, final int b)",
      "right" : "public static int max(final int a, final int b)",
      "info" : "MethodDeclaration[106250-106504]:MethodDeclaration[106919-107173]"
    }, {
      "left" : "public static long max(final long a, final long b)",
      "right" : "public static long max(final long a, final long b)",
      "info" : "MethodDeclaration[106510-106767]:MethodDeclaration[107179-107436]"
    }, {
      "left" : "public static float max(final float a, final float b)",
      "right" : "public static float max(final float a, final float b)",
      "info" : "MethodDeclaration[106773-107442]:MethodDeclaration[107442-108111]"
    }, {
      "left" : "public static double max(final double a, final double b)",
      "right" : "public static double max(final double a, final double b)",
      "info" : "MethodDeclaration[107448-108146]:MethodDeclaration[108117-108815]"
    }, {
      "left" : "public static double hypot(final double x, final double y)",
      "right" : "public static double hypot(final double x, final double y)",
      "info" : "MethodDeclaration[108152-109886]:MethodDeclaration[108821-110555]"
    }, {
      "left" : "public static double IEEEremainder(double dividend, double divisor)",
      "right" : "public static double IEEEremainder(double dividend, double divisor)",
      "info" : "MethodDeclaration[109892-111210]:MethodDeclaration[110561-111879]"
    }, {
      "left" : "public static double copySign(double magnitude, double sign",
      "right" : "public static double copySign(double magnitude, double sign",
      "info" : "MethodDeclaration[111216-111868]:MethodDeclaration[111885-112537]"
    }, {
      "left" : "public static float copySign(float magnitude, float sign",
      "right" : "public static float copySign(float magnitude, float sign",
      "info" : "MethodDeclaration[111874-112515]:MethodDeclaration[112543-113184]"
    }, {
      "left" : "public static int getExponent(final double d)",
      "right" : "public static int getExponent(final double d)",
      "info" : "MethodDeclaration[112521-112976]:MethodDeclaration[113190-113645]"
    }, {
      "left" : "public static int getExponent(final float f)",
      "right" : "public static int getExponent(final float f)",
      "info" : "MethodDeclaration[112982-113423]:MethodDeclaration[113651-114092]"
    }, {
      "left" : "public static void main(String[] a)",
      "right" : "public static void main(String[] a)",
      "info" : "MethodDeclaration[113429-114698]:MethodDeclaration[114098-115367]"
    }, {
      "left" : "ExpIntTable",
      "right" : "ExpIntTable",
      "info" : "TypeDeclaration[114704-116505]:TypeDeclaration[115373-117174]"
    }, {
      "left" : "private static final double[] EXP_INT_TABLE_A;",
      "right" : "private static final double[] EXP_INT_TABLE_A;",
      "info" : "FieldDeclaration[114843-115060]:FieldDeclaration[115512-115729]"
    }, {
      "left" : "private static final double[] EXP_INT_TABLE_B;",
      "right" : "private static final double[] EXP_INT_TABLE_B;",
      "info" : "FieldDeclaration[115069-115285]:FieldDeclaration[115738-115954]"
    }, {
      "left" : "ExpFracTable",
      "right" : "ExpFracTable",
      "info" : "TypeDeclaration[116511-117892]:TypeDeclaration[117180-118561]"
    }, {
      "left" : "private static final double[] EXP_FRAC_TABLE_A;",
      "right" : "private static final double[] EXP_FRAC_TABLE_A;",
      "info" : "FieldDeclaration[116651-116867]:FieldDeclaration[117320-117536]"
    }, {
      "left" : "private static final double[] EXP_FRAC_TABLE_B;",
      "right" : "private static final double[] EXP_FRAC_TABLE_B;",
      "info" : "FieldDeclaration[116876-117069]:FieldDeclaration[117545-117738]"
    }, {
      "left" : "lnMant",
      "right" : "lnMant",
      "info" : "TypeDeclaration[117898-118690]:TypeDeclaration[118567-119359]"
    }, {
      "left" : "private static final double[][] LN_MANT;",
      "right" : "private static final double[][] LN_MANT;",
      "info" : "FieldDeclaration[118032-118167]:FieldDeclaration[118701-118836]"
    }, {
      "left" : "CodyWaite",
      "right" : "CodyWaite",
      "info" : "TypeDeclaration[118696-120540]:TypeDeclaration[119365-121209]"
    }, {
      "left" : "private final int finalK;",
      "right" : "private final int finalK;",
      "info" : "FieldDeclaration[118815-118857]:FieldDeclaration[119484-119526]"
    }, {
      "left" : "private final double finalRemA;",
      "right" : "private final double finalRemA;",
      "info" : "FieldDeclaration[118866-118917]:FieldDeclaration[119535-119586]"
    }, {
      "left" : "private final double finalRemB;",
      "right" : "private final double finalRemB;",
      "info" : "FieldDeclaration[118926-118977]:FieldDeclaration[119595-119646]"
    }, {
      "left" : "CodyWaite(double xa,\n                  double xb)",
      "right" : "CodyWaite(double xa,\n                  double xb)",
      "info" : "MethodDeclaration[118987-120200]:MethodDeclaration[119656-120869]"
    }, {
      "left" : "int getK()",
      "right" : "int getK()",
      "info" : "MethodDeclaration[120210-120304]:MethodDeclaration[120879-120973]"
    }, {
      "left" : "double getRemA()",
      "right" : "double getRemA()",
      "info" : "MethodDeclaration[120313-120419]:MethodDeclaration[120982-121088]"
    }, {
      "left" : "double getRemB()",
      "right" : "double getRemB()",
      "info" : "MethodDeclaration[120428-120534]:MethodDeclaration[121097-121203]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13001-13003]:Block[13083-13085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13338-13635]:Block[13420-13717]"
    }, {
      "left" : "if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN)",
      "right" : "if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN)",
      "info" : "IfStatement[13348-13485]:IfStatement[13430-13567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13402-13485]:Block[13484-13567]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[13416-13425]:ReturnStatement[13498-13507]"
    }, {
      "left" : "long xl = Double.doubleToLongBits(d);",
      "right" : "long xl = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[13494-13531]:VariableDeclarationStatement[13576-13613]"
    }, {
      "left" : "xl = xl & MASK_30BITS;",
      "right" : "xl = xl & MASK_30BITS;",
      "info" : "ExpressionStatement[13540-13562]:ExpressionStatement[13622-13644]"
    }, {
      "left" : "return Double.longBitsToDouble(xl);",
      "right" : "return Double.longBitsToDouble(xl);",
      "info" : "ReturnStatement[13594-13629]:ReturnStatement[13676-13711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13903-13939]:Block[13985-14021]"
    }, {
      "left" : "return Math.sqrt(a);",
      "right" : "return Math.sqrt(a);",
      "info" : "ReturnStatement[13913-13933]:ReturnStatement[13995-14015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14129-15474]:Block[14211-15849]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[14137-14178]:IfStatement[14219-14260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14149-14178]:Block[14231-14260]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[14161-14170]:ReturnStatement[14243-14252]"
    }, {
      "left" : "if (x > 20)",
      "right" : "if (x >= LOG_MAX_VALUE)",
      "info" : "IfStatement[14332-14436]:IfStatement[14438-14654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14344-14436]:Block[14606-14654]"
    }, {
      "left" : "return 0.5 * exp(x);",
      "right" : "return 0.5 * exp(x);",
      "info" : "ReturnStatement[14404-14424]:ReturnStatement[14622-14642]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[14443-14545]:IfStatement[14668-14920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14456-14545]:Block[14863-14912]"
    }, {
      "left" : "return 0.5 * exp(-x);",
      "right" : "return 0.5 * exp(-x);",
      "info" : "ReturnStatement[14516-14537]:ReturnStatement[14879-14900]"
    }, {
      "left" : "final double hiPrec[] = new double[2];",
      "right" : "final double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[14553-14591]:VariableDeclarationStatement[14928-14966]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[14598-14638]:IfStatement[14973-15013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14611-14638]:Block[14986-15013]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[14623-14630]:ExpressionStatement[14998-15005]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[14645-14665]:ExpressionStatement[15020-15040]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[14673-14707]:VariableDeclarationStatement[15048-15082]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[14714-14756]:VariableDeclarationStatement[15089-15131]"
    }, {
      "left" : "double temp = ya * HEX_40000000;",
      "right" : "double temp = ya * HEX_40000000;",
      "info" : "VariableDeclarationStatement[14764-14796]:VariableDeclarationStatement[15139-15171]"
    }, {
      "left" : "double yaa = ya + temp - temp;",
      "right" : "double yaa = ya + temp - temp;",
      "info" : "VariableDeclarationStatement[14803-14833]:VariableDeclarationStatement[15178-15208]"
    }, {
      "left" : "double yab = ya - yaa;",
      "right" : "double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[14840-14862]:VariableDeclarationStatement[15215-15237]"
    }, {
      "left" : "double recip = 1.0/ya;",
      "right" : "double recip = 1.0/ya;",
      "info" : "VariableDeclarationStatement[14891-14913]:VariableDeclarationStatement[15266-15288]"
    }, {
      "left" : "temp = recip * HEX_40000000;",
      "right" : "temp = recip * HEX_40000000;",
      "info" : "ExpressionStatement[14920-14948]:ExpressionStatement[15295-15323]"
    }, {
      "left" : "double recipa = recip + temp - temp;",
      "right" : "double recipa = recip + temp - temp;",
      "info" : "VariableDeclarationStatement[14955-14991]:VariableDeclarationStatement[15330-15366]"
    }, {
      "left" : "double recipb = recip - recipa;",
      "right" : "double recipb = recip - recipa;",
      "info" : "VariableDeclarationStatement[14998-15029]:VariableDeclarationStatement[15373-15404]"
    }, {
      "left" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "right" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "info" : "ExpressionStatement[15079-15155]:ExpressionStatement[15454-15530]"
    }, {
      "left" : "recipb += -yb * recip * recip;",
      "right" : "recipb += -yb * recip * recip;",
      "info" : "ExpressionStatement[15186-15216]:ExpressionStatement[15561-15591]"
    }, {
      "left" : "temp = ya + recipa;",
      "right" : "temp = ya + recipa;",
      "info" : "ExpressionStatement[15245-15264]:ExpressionStatement[15620-15639]"
    }, {
      "left" : "yb += -(temp - ya - recipa);",
      "right" : "yb += -(temp - ya - recipa);",
      "info" : "ExpressionStatement[15271-15299]:ExpressionStatement[15646-15674]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[15306-15316]:ExpressionStatement[15681-15691]"
    }, {
      "left" : "temp = ya + recipb;",
      "right" : "temp = ya + recipb;",
      "info" : "ExpressionStatement[15323-15342]:ExpressionStatement[15698-15717]"
    }, {
      "left" : "yb += -(temp - ya - recipb);",
      "right" : "yb += -(temp - ya - recipb);",
      "info" : "ExpressionStatement[15349-15377]:ExpressionStatement[15724-15752]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[15384-15394]:ExpressionStatement[15759-15769]"
    }, {
      "left" : "double result = ya + yb;",
      "right" : "double result = ya + yb;",
      "info" : "VariableDeclarationStatement[15402-15426]:VariableDeclarationStatement[15777-15801]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[15433-15447]:ExpressionStatement[15808-15822]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15454-15468]:ReturnStatement[15829-15843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15660-18490]:Block[16035-19159]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[15668-15691]:VariableDeclarationStatement[16043-16066]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[15698-15739]:IfStatement[16073-16114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15710-15739]:Block[16085-16114]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[15722-15731]:ReturnStatement[16097-16106]"
    }, {
      "left" : "if (x > 20)",
      "right" : "if (x >= LOG_MAX_VALUE)",
      "info" : "IfStatement[15895-15999]:IfStatement[16294-16510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15907-15999]:Block[16462-16510]"
    }, {
      "left" : "return 0.5 * exp(x);",
      "right" : "return 0.5 * exp(x);",
      "info" : "ReturnStatement[15967-15987]:ReturnStatement[16478-16498]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[16006-16109]:IfStatement[16524-16778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16019-16109]:Block[16720-16770]"
    }, {
      "left" : "return -0.5 * exp(-x);",
      "right" : "return -0.5 * exp(-x);",
      "info" : "ReturnStatement[16079-16101]:ReturnStatement[16736-16758]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[16117-16158]:IfStatement[16786-16827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16129-16158]:Block[16798-16827]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[16141-16150]:ReturnStatement[16810-16819]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[16166-16231]:IfStatement[16835-16900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16179-16231]:Block[16848-16900]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[16191-16198]:ExpressionStatement[16860-16867]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[16209-16223]:ExpressionStatement[16878-16892]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[16239-16253]:VariableDeclarationStatement[16908-16922]"
    }, {
      "left" : "if (x > 0.25)",
      "right" : "if (x > 0.25)",
      "info" : "IfStatement[16261-18405]:IfStatement[16930-19074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16275-17282]:Block[16944-17951]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[16287-16319]:VariableDeclarationStatement[16956-16988]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[16330-16350]:ExpressionStatement[16999-17019]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[16362-16396]:VariableDeclarationStatement[17031-17065]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[16407-16449]:VariableDeclarationStatement[17076-17118]"
    }, {
      "left" : "double temp = ya * HEX_40000000;",
      "right" : "double temp = ya * HEX_40000000;",
      "info" : "VariableDeclarationStatement[16461-16493]:VariableDeclarationStatement[17130-17162]"
    }, {
      "left" : "double yaa = ya + temp - temp;",
      "right" : "double yaa = ya + temp - temp;",
      "info" : "VariableDeclarationStatement[16504-16534]:VariableDeclarationStatement[17173-17203]"
    }, {
      "left" : "double yab = ya - yaa;",
      "right" : "double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[16545-16567]:VariableDeclarationStatement[17214-17236]"
    }, {
      "left" : "double recip = 1.0/ya;",
      "right" : "double recip = 1.0/ya;",
      "info" : "VariableDeclarationStatement[16604-16626]:VariableDeclarationStatement[17273-17295]"
    }, {
      "left" : "temp = recip * HEX_40000000;",
      "right" : "temp = recip * HEX_40000000;",
      "info" : "ExpressionStatement[16637-16665]:ExpressionStatement[17306-17334]"
    }, {
      "left" : "double recipa = recip + temp - temp;",
      "right" : "double recipa = recip + temp - temp;",
      "info" : "VariableDeclarationStatement[16676-16712]:VariableDeclarationStatement[17345-17381]"
    }, {
      "left" : "double recipb = recip - recipa;",
      "right" : "double recipb = recip - recipa;",
      "info" : "VariableDeclarationStatement[16723-16754]:VariableDeclarationStatement[17392-17423]"
    }, {
      "left" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "right" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "info" : "ExpressionStatement[16812-16888]:ExpressionStatement[17481-17557]"
    }, {
      "left" : "recipb += -yb * recip * recip;",
      "right" : "recipb += -yb * recip * recip;",
      "info" : "ExpressionStatement[16927-16957]:ExpressionStatement[17596-17626]"
    }, {
      "left" : "recipa = -recipa;",
      "right" : "recipa = -recipa;",
      "info" : "ExpressionStatement[16969-16986]:ExpressionStatement[17638-17655]"
    }, {
      "left" : "recipb = -recipb;",
      "right" : "recipb = -recipb;",
      "info" : "ExpressionStatement[16997-17014]:ExpressionStatement[17666-17683]"
    }, {
      "left" : "temp = ya + recipa;",
      "right" : "temp = ya + recipa;",
      "info" : "ExpressionStatement[17051-17070]:ExpressionStatement[17720-17739]"
    }, {
      "left" : "yb += -(temp - ya - recipa);",
      "right" : "yb += -(temp - ya - recipa);",
      "info" : "ExpressionStatement[17081-17109]:ExpressionStatement[17750-17778]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[17120-17130]:ExpressionStatement[17789-17799]"
    }, {
      "left" : "temp = ya + recipb;",
      "right" : "temp = ya + recipb;",
      "info" : "ExpressionStatement[17141-17160]:ExpressionStatement[17810-17829]"
    }, {
      "left" : "yb += -(temp - ya - recipb);",
      "right" : "yb += -(temp - ya - recipb);",
      "info" : "ExpressionStatement[17171-17199]:ExpressionStatement[17840-17868]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[17210-17220]:ExpressionStatement[17879-17889]"
    }, {
      "left" : "result = ya + yb;",
      "right" : "result = ya + yb;",
      "info" : "ExpressionStatement[17232-17249]:ExpressionStatement[17901-17918]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[17260-17274]:ExpressionStatement[17929-17943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17294-18405]:Block[17963-19074]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[17306-17338]:VariableDeclarationStatement[17975-18007]"
    }, {
      "left" : "expm1(x, hiPrec);",
      "right" : "expm1(x, hiPrec);",
      "info" : "ExpressionStatement[17349-17366]:ExpressionStatement[18018-18035]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[17378-17412]:VariableDeclarationStatement[18047-18081]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[17423-17465]:VariableDeclarationStatement[18092-18134]"
    }, {
      "left" : "double denom = 1.0 + ya;",
      "right" : "double denom = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[17540-17564]:VariableDeclarationStatement[18209-18233]"
    }, {
      "left" : "double denomr = 1.0 / denom;",
      "right" : "double denomr = 1.0 / denom;",
      "info" : "VariableDeclarationStatement[17575-17603]:VariableDeclarationStatement[18244-18272]"
    }, {
      "left" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "right" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "info" : "VariableDeclarationStatement[17614-17655]:VariableDeclarationStatement[18283-18324]"
    }, {
      "left" : "double ratio = ya * denomr;",
      "right" : "double ratio = ya * denomr;",
      "info" : "VariableDeclarationStatement[17666-17693]:VariableDeclarationStatement[18335-18362]"
    }, {
      "left" : "double temp = ratio * HEX_40000000;",
      "right" : "double temp = ratio * HEX_40000000;",
      "info" : "VariableDeclarationStatement[17704-17739]:VariableDeclarationStatement[18373-18408]"
    }, {
      "left" : "double ra = ratio + temp - temp;",
      "right" : "double ra = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[17750-17782]:VariableDeclarationStatement[18419-18451]"
    }, {
      "left" : "double rb = ratio - ra;",
      "right" : "double rb = ratio - ra;",
      "info" : "VariableDeclarationStatement[17793-17816]:VariableDeclarationStatement[18462-18485]"
    }, {
      "left" : "temp = denom * HEX_40000000;",
      "right" : "temp = denom * HEX_40000000;",
      "info" : "ExpressionStatement[17828-17856]:ExpressionStatement[18497-18525]"
    }, {
      "left" : "double za = denom + temp - temp;",
      "right" : "double za = denom + temp - temp;",
      "info" : "VariableDeclarationStatement[17867-17899]:VariableDeclarationStatement[18536-18568]"
    }, {
      "left" : "double zb = denom - za;",
      "right" : "double zb = denom - za;",
      "info" : "VariableDeclarationStatement[17910-17933]:VariableDeclarationStatement[18579-18602]"
    }, {
      "left" : "rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;",
      "right" : "rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;",
      "info" : "ExpressionStatement[17945-17997]:ExpressionStatement[18614-18666]"
    }, {
      "left" : "rb += yb*denomr;",
      "right" : "rb += yb*denomr;",
      "info" : "ExpressionStatement[18036-18052]:ExpressionStatement[18705-18721]"
    }, {
      "left" : "rb += -ya * denomb * denomr * denomr;",
      "right" : "rb += -ya * denomb * denomr * denomr;",
      "info" : "ExpressionStatement[18099-18136]:ExpressionStatement[18768-18805]"
    }, {
      "left" : "temp = ya + ra;",
      "right" : "temp = ya + ra;",
      "info" : "ExpressionStatement[18190-18205]:ExpressionStatement[18859-18874]"
    }, {
      "left" : "yb += -(temp - ya - ra);",
      "right" : "yb += -(temp - ya - ra);",
      "info" : "ExpressionStatement[18216-18240]:ExpressionStatement[18885-18909]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[18251-18261]:ExpressionStatement[18920-18930]"
    }, {
      "left" : "temp = ya + rb;",
      "right" : "temp = ya + rb;",
      "info" : "ExpressionStatement[18272-18287]:ExpressionStatement[18941-18956]"
    }, {
      "left" : "yb += -(temp - ya - rb);",
      "right" : "yb += -(temp - ya - rb);",
      "info" : "ExpressionStatement[18298-18322]:ExpressionStatement[18967-18991]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[18333-18343]:ExpressionStatement[19002-19012]"
    }, {
      "left" : "result = ya + yb;",
      "right" : "result = ya + yb;",
      "info" : "ExpressionStatement[18355-18372]:ExpressionStatement[19024-19041]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[18383-18397]:ExpressionStatement[19052-19066]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[18413-18462]:IfStatement[19082-19131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18425-18462]:Block[19094-19131]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[18437-18454]:ExpressionStatement[19106-19123]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[18470-18484]:ReturnStatement[19139-19153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18682-21627]:Block[19351-22296]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[18690-18713]:VariableDeclarationStatement[19359-19382]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[18721-18762]:IfStatement[19390-19431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18733-18762]:Block[19402-19431]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[18745-18754]:ReturnStatement[19414-19423]"
    }, {
      "left" : "if (x > 20.0)",
      "right" : "if (x > 20.0)",
      "info" : "IfStatement[18969-19014]:IfStatement[19638-19683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18983-19014]:Block[19652-19683]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[18995-19006]:ReturnStatement[19664-19675]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[19022-19067]:IfStatement[19691-19736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19035-19067]:Block[19704-19736]"
    }, {
      "left" : "return -1.0;",
      "right" : "return -1.0;",
      "info" : "ReturnStatement[19047-19059]:ReturnStatement[19716-19728]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[19075-19116]:IfStatement[19744-19785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19087-19116]:Block[19756-19785]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[19099-19108]:ReturnStatement[19768-19777]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[19124-19189]:IfStatement[19793-19858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19137-19189]:Block[19806-19858]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[19149-19156]:ExpressionStatement[19818-19825]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[19167-19181]:ExpressionStatement[19836-19850]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[19197-19211]:VariableDeclarationStatement[19866-19880]"
    }, {
      "left" : "if (x >= 0.5)",
      "right" : "if (x >= 0.5)",
      "info" : "IfStatement[19218-21542]:IfStatement[19887-22211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19232-20435]:Block[19901-21104]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[19244-19276]:VariableDeclarationStatement[19913-19945]"
    }, {
      "left" : "exp(x*2.0, 0.0, hiPrec);",
      "right" : "exp(x*2.0, 0.0, hiPrec);",
      "info" : "ExpressionStatement[19340-19364]:ExpressionStatement[20009-20033]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[19376-19410]:VariableDeclarationStatement[20045-20079]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[19421-19463]:VariableDeclarationStatement[20090-20132]"
    }, {
      "left" : "double na = -1.0 + ya;",
      "right" : "double na = -1.0 + ya;",
      "info" : "VariableDeclarationStatement[19501-19523]:VariableDeclarationStatement[20170-20192]"
    }, {
      "left" : "double nb = -(na + 1.0 - ya);",
      "right" : "double nb = -(na + 1.0 - ya);",
      "info" : "VariableDeclarationStatement[19534-19563]:VariableDeclarationStatement[20203-20232]"
    }, {
      "left" : "double temp = na + yb;",
      "right" : "double temp = na + yb;",
      "info" : "VariableDeclarationStatement[19574-19596]:VariableDeclarationStatement[20243-20265]"
    }, {
      "left" : "nb += -(temp - na - yb);",
      "right" : "nb += -(temp - na - yb);",
      "info" : "ExpressionStatement[19607-19631]:ExpressionStatement[20276-20300]"
    }, {
      "left" : "na = temp;",
      "right" : "na = temp;",
      "info" : "ExpressionStatement[19642-19652]:ExpressionStatement[20311-20321]"
    }, {
      "left" : "double da = 1.0 + ya;",
      "right" : "double da = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[19692-19713]:VariableDeclarationStatement[20361-20382]"
    }, {
      "left" : "double db = -(da - 1.0 - ya);",
      "right" : "double db = -(da - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[19724-19753]:VariableDeclarationStatement[20393-20422]"
    }, {
      "left" : "temp = da + yb;",
      "right" : "temp = da + yb;",
      "info" : "ExpressionStatement[19764-19779]:ExpressionStatement[20433-20448]"
    }, {
      "left" : "db += -(temp - da - yb);",
      "right" : "db += -(temp - da - yb);",
      "info" : "ExpressionStatement[19790-19814]:ExpressionStatement[20459-20483]"
    }, {
      "left" : "da = temp;",
      "right" : "da = temp;",
      "info" : "ExpressionStatement[19825-19835]:ExpressionStatement[20494-20504]"
    }, {
      "left" : "temp = da * HEX_40000000;",
      "right" : "temp = da * HEX_40000000;",
      "info" : "ExpressionStatement[19847-19872]:ExpressionStatement[20516-20541]"
    }, {
      "left" : "double daa = da + temp - temp;",
      "right" : "double daa = da + temp - temp;",
      "info" : "VariableDeclarationStatement[19883-19913]:VariableDeclarationStatement[20552-20582]"
    }, {
      "left" : "double dab = da - daa;",
      "right" : "double dab = da - daa;",
      "info" : "VariableDeclarationStatement[19924-19946]:VariableDeclarationStatement[20593-20615]"
    }, {
      "left" : "double ratio = na/da;",
      "right" : "double ratio = na/da;",
      "info" : "VariableDeclarationStatement[19985-20006]:VariableDeclarationStatement[20654-20675]"
    }, {
      "left" : "temp = ratio * HEX_40000000;",
      "right" : "temp = ratio * HEX_40000000;",
      "info" : "ExpressionStatement[20017-20045]:ExpressionStatement[20686-20714]"
    }, {
      "left" : "double ratioa = ratio + temp - temp;",
      "right" : "double ratioa = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[20056-20092]:VariableDeclarationStatement[20725-20761]"
    }, {
      "left" : "double ratiob = ratio - ratioa;",
      "right" : "double ratiob = ratio - ratioa;",
      "info" : "VariableDeclarationStatement[20103-20134]:VariableDeclarationStatement[20772-20803]"
    }, {
      "left" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "right" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "info" : "ExpressionStatement[20192-20264]:ExpressionStatement[20861-20933]"
    }, {
      "left" : "ratiob += nb / da;",
      "right" : "ratiob += nb / da;",
      "info" : "ExpressionStatement[20304-20322]:ExpressionStatement[20973-20991]"
    }, {
      "left" : "ratiob += -db * na / da / da;",
      "right" : "ratiob += -db * na / da / da;",
      "info" : "ExpressionStatement[20361-20390]:ExpressionStatement[21030-21059]"
    }, {
      "left" : "result = ratioa + ratiob;",
      "right" : "result = ratioa + ratiob;",
      "info" : "ExpressionStatement[20402-20427]:ExpressionStatement[21071-21096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20447-21542]:Block[21116-22211]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[20459-20491]:VariableDeclarationStatement[21128-21160]"
    }, {
      "left" : "expm1(x*2.0, hiPrec);",
      "right" : "expm1(x*2.0, hiPrec);",
      "info" : "ExpressionStatement[20553-20574]:ExpressionStatement[21222-21243]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[20586-20620]:VariableDeclarationStatement[21255-21289]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[20631-20673]:VariableDeclarationStatement[21300-21342]"
    }, {
      "left" : "double na = ya;",
      "right" : "double na = ya;",
      "info" : "VariableDeclarationStatement[20711-20726]:VariableDeclarationStatement[21380-21395]"
    }, {
      "left" : "double nb = yb;",
      "right" : "double nb = yb;",
      "info" : "VariableDeclarationStatement[20737-20752]:VariableDeclarationStatement[21406-21421]"
    }, {
      "left" : "double da = 2.0 + ya;",
      "right" : "double da = 2.0 + ya;",
      "info" : "VariableDeclarationStatement[20792-20813]:VariableDeclarationStatement[21461-21482]"
    }, {
      "left" : "double db = -(da - 2.0 - ya);",
      "right" : "double db = -(da - 2.0 - ya);",
      "info" : "VariableDeclarationStatement[20824-20853]:VariableDeclarationStatement[21493-21522]"
    }, {
      "left" : "double temp = da + yb;",
      "right" : "double temp = da + yb;",
      "info" : "VariableDeclarationStatement[20864-20886]:VariableDeclarationStatement[21533-21555]"
    }, {
      "left" : "db += -(temp - da - yb);",
      "right" : "db += -(temp - da - yb);",
      "info" : "ExpressionStatement[20897-20921]:ExpressionStatement[21566-21590]"
    }, {
      "left" : "da = temp;",
      "right" : "da = temp;",
      "info" : "ExpressionStatement[20932-20942]:ExpressionStatement[21601-21611]"
    }, {
      "left" : "temp = da * HEX_40000000;",
      "right" : "temp = da * HEX_40000000;",
      "info" : "ExpressionStatement[20954-20979]:ExpressionStatement[21623-21648]"
    }, {
      "left" : "double daa = da + temp - temp;",
      "right" : "double daa = da + temp - temp;",
      "info" : "VariableDeclarationStatement[20990-21020]:VariableDeclarationStatement[21659-21689]"
    }, {
      "left" : "double dab = da - daa;",
      "right" : "double dab = da - daa;",
      "info" : "VariableDeclarationStatement[21031-21053]:VariableDeclarationStatement[21700-21722]"
    }, {
      "left" : "double ratio = na/da;",
      "right" : "double ratio = na/da;",
      "info" : "VariableDeclarationStatement[21092-21113]:VariableDeclarationStatement[21761-21782]"
    }, {
      "left" : "temp = ratio * HEX_40000000;",
      "right" : "temp = ratio * HEX_40000000;",
      "info" : "ExpressionStatement[21124-21152]:ExpressionStatement[21793-21821]"
    }, {
      "left" : "double ratioa = ratio + temp - temp;",
      "right" : "double ratioa = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[21163-21199]:VariableDeclarationStatement[21832-21868]"
    }, {
      "left" : "double ratiob = ratio - ratioa;",
      "right" : "double ratiob = ratio - ratioa;",
      "info" : "VariableDeclarationStatement[21210-21241]:VariableDeclarationStatement[21879-21910]"
    }, {
      "left" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "right" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "info" : "ExpressionStatement[21299-21371]:ExpressionStatement[21968-22040]"
    }, {
      "left" : "ratiob += nb / da;",
      "right" : "ratiob += nb / da;",
      "info" : "ExpressionStatement[21411-21429]:ExpressionStatement[22080-22098]"
    }, {
      "left" : "ratiob += -db * na / da / da;",
      "right" : "ratiob += -db * na / da / da;",
      "info" : "ExpressionStatement[21468-21497]:ExpressionStatement[22137-22166]"
    }, {
      "left" : "result = ratioa + ratiob;",
      "right" : "result = ratioa + ratiob;",
      "info" : "ExpressionStatement[21509-21534]:ExpressionStatement[22178-22203]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[21550-21599]:IfStatement[22219-22268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21562-21599]:Block[22231-22268]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[21574-21591]:ExpressionStatement[22243-22260]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[21607-21621]:ReturnStatement[22276-22290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21840-21906]:Block[22509-22575]"
    }, {
      "left" : "return FastMath.log(a + FastMath.sqrt(a * a - 1));",
      "right" : "return FastMath.log(a + FastMath.sqrt(a * a - 1));",
      "info" : "ReturnStatement[21850-21900]:ReturnStatement[22519-22569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22109-23210]:Block[22778-23879]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[22119-22144]:VariableDeclarationStatement[22788-22813]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[22153-22224]:IfStatement[22822-22893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22164-22224]:Block[22833-22893]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[22178-22194]:ExpressionStatement[22847-22863]"
    }, {
      "left" : "a = -a;",
      "right" : "a = -a;",
      "info" : "ExpressionStatement[22207-22214]:ExpressionStatement[22876-22883]"
    }, {
      "left" : "double absAsinh;",
      "right" : "double absAsinh;",
      "info" : "VariableDeclarationStatement[22234-22250]:VariableDeclarationStatement[22903-22919]"
    }, {
      "left" : "if (a > 0.167)",
      "right" : "if (a > 0.167)",
      "info" : "IfStatement[22259-23155]:IfStatement[22928-23824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22274-22352]:Block[22943-23021]"
    }, {
      "left" : "absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);",
      "right" : "absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);",
      "info" : "ExpressionStatement[22288-22342]:ExpressionStatement[22957-23011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22358-23155]:Block[23027-23824]"
    }, {
      "left" : "final double a2 = a * a;",
      "right" : "final double a2 = a * a;",
      "info" : "VariableDeclarationStatement[22372-22396]:VariableDeclarationStatement[23041-23065]"
    }, {
      "left" : "if (a > 0.097)",
      "right" : "if (a > 0.097)",
      "info" : "IfStatement[22409-23145]:IfStatement[23078-23814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22424-22668]:Block[23093-23337]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[22442-22654]:ExpressionStatement[23111-23323]"
    }, {
      "left" : "if (a > 0.036)",
      "right" : "if (a > 0.036)",
      "info" : "IfStatement[22674-23145]:IfStatement[23343-23814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22689-22881]:Block[23358-23550]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[22707-22867]:ExpressionStatement[23376-23536]"
    }, {
      "left" : "if (a > 0.0036)",
      "right" : "if (a > 0.0036)",
      "info" : "IfStatement[22887-23145]:IfStatement[23556-23814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22903-23044]:Block[23572-23713]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[22921-23030]:ExpressionStatement[23590-23699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23050-23145]:Block[23719-23814]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);",
      "right" : "absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);",
      "info" : "ExpressionStatement[23068-23131]:ExpressionStatement[23737-23800]"
    }, {
      "left" : "return negative ? -absAsinh : absAsinh;",
      "right" : "return negative ? -absAsinh : absAsinh;",
      "info" : "ReturnStatement[23165-23204]:ReturnStatement[23834-23873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23419-24343]:Block[24088-25012]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[23429-23454]:VariableDeclarationStatement[24098-24123]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[23463-23534]:IfStatement[24132-24203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23474-23534]:Block[24143-24203]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[23488-23504]:ExpressionStatement[24157-24173]"
    }, {
      "left" : "a = -a;",
      "right" : "a = -a;",
      "info" : "ExpressionStatement[23517-23524]:ExpressionStatement[24186-24193]"
    }, {
      "left" : "double absAtanh;",
      "right" : "double absAtanh;",
      "info" : "VariableDeclarationStatement[23544-23560]:VariableDeclarationStatement[24213-24229]"
    }, {
      "left" : "if (a > 0.15)",
      "right" : "if (a > 0.15)",
      "info" : "IfStatement[23569-24288]:IfStatement[24238-24957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23583-23656]:Block[24252-24325]"
    }, {
      "left" : "absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));",
      "right" : "absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));",
      "info" : "ExpressionStatement[23597-23646]:ExpressionStatement[24266-24315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23662-24288]:Block[24331-24957]"
    }, {
      "left" : "final double a2 = a * a;",
      "right" : "final double a2 = a * a;",
      "info" : "VariableDeclarationStatement[23676-23700]:VariableDeclarationStatement[24345-24369]"
    }, {
      "left" : "if (a > 0.087)",
      "right" : "if (a > 0.087)",
      "info" : "IfStatement[23713-24278]:IfStatement[24382-24947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23728-23901]:Block[24397-24570]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));",
      "info" : "ExpressionStatement[23746-23887]:ExpressionStatement[24415-24556]"
    }, {
      "left" : "if (a > 0.031)",
      "right" : "if (a > 0.031)",
      "info" : "IfStatement[23907-24278]:IfStatement[24576-24947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23922-24063]:Block[24591-24732]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));",
      "info" : "ExpressionStatement[23940-24049]:ExpressionStatement[24609-24718]"
    }, {
      "left" : "if (a > 0.003)",
      "right" : "if (a > 0.003)",
      "info" : "IfStatement[24069-24278]:IfStatement[24738-24947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24084-24193]:Block[24753-24862]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));",
      "info" : "ExpressionStatement[24102-24179]:ExpressionStatement[24771-24848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24199-24278]:Block[24868-24947]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));",
      "right" : "absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));",
      "info" : "ExpressionStatement[24217-24264]:ExpressionStatement[24886-24933]"
    }, {
      "left" : "return negative ? -absAtanh : absAtanh;",
      "right" : "return negative ? -absAtanh : absAtanh;",
      "info" : "ReturnStatement[24298-24337]:ReturnStatement[24967-25006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24646-24749]:Block[25315-25418]"
    }, {
      "left" : "return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);",
      "right" : "return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);",
      "info" : "ReturnStatement[24656-24704]:ReturnStatement[25325-25373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25050-25157]:Block[25719-25826]"
    }, {
      "left" : "return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);",
      "right" : "return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);",
      "info" : "ReturnStatement[25060-25112]:ReturnStatement[25729-25781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25385-25447]:Block[26054-26116]"
    }, {
      "left" : "return nextAfter(a, Double.POSITIVE_INFINITY);",
      "right" : "return nextAfter(a, Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[25395-25441]:ReturnStatement[26064-26110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25673-25734]:Block[26342-26403]"
    }, {
      "left" : "return nextAfter(a, Float.POSITIVE_INFINITY);",
      "right" : "return nextAfter(a, Float.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[25683-25728]:ReturnStatement[26352-26397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25975-26012]:Block[26644-26681]"
    }, {
      "left" : "return Math.random();",
      "right" : "return Math.random();",
      "info" : "ReturnStatement[25985-26006]:ReturnStatement[26654-26675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26822-26863]:Block[27491-27532]"
    }, {
      "left" : "return exp(x, 0.0, null);",
      "right" : "return exp(x, 0.0, null);",
      "info" : "ReturnStatement[26832-26857]:ReturnStatement[27501-27526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27236-31670]:Block[27905-32339]"
    }, {
      "left" : "double intPartA;",
      "right" : "double intPartA;",
      "info" : "VariableDeclarationStatement[27246-27262]:VariableDeclarationStatement[27915-27931]"
    }, {
      "left" : "double intPartB;",
      "right" : "double intPartB;",
      "info" : "VariableDeclarationStatement[27271-27287]:VariableDeclarationStatement[27940-27956]"
    }, {
      "left" : "int intVal;",
      "right" : "int intVal;",
      "info" : "VariableDeclarationStatement[27296-27307]:VariableDeclarationStatement[27965-27976]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[27460-29215]:IfStatement[28129-29884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27473-28752]:Block[28142-29421]"
    }, {
      "left" : "intVal = (int) -x;",
      "right" : "intVal = (int) -x;",
      "info" : "ExpressionStatement[27487-27505]:ExpressionStatement[28156-28174]"
    }, {
      "left" : "if (intVal > 746)",
      "right" : "if (intVal > 746)",
      "info" : "IfStatement[27519-27710]:IfStatement[28188-28379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27537-27710]:Block[28206-28379]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[27555-27668]:IfStatement[28224-28337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27575-27668]:Block[28244-28337]"
    }, {
      "left" : "hiPrec[0] = 0.0;",
      "right" : "hiPrec[0] = 0.0;",
      "info" : "ExpressionStatement[27597-27613]:ExpressionStatement[28266-28282]"
    }, {
      "left" : "hiPrec[1] = 0.0;",
      "right" : "hiPrec[1] = 0.0;",
      "info" : "ExpressionStatement[27634-27650]:ExpressionStatement[28303-28319]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[27685-27696]:ReturnStatement[28354-28365]"
    }, {
      "left" : "if (intVal > 709)",
      "right" : "if (intVal > 709)",
      "info" : "IfStatement[27724-28109]:IfStatement[28393-28778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27742-28109]:Block[28411-28778]"
    }, {
      "left" : "final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",
      "right" : "final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",
      "info" : "VariableDeclarationStatement[27819-27898]:VariableDeclarationStatement[28488-28567]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[27915-28064]:IfStatement[28584-28733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27935-28064]:Block[28604-28733]"
    }, {
      "left" : "hiPrec[0] /= 285040095144011776.0;",
      "right" : "hiPrec[0] /= 285040095144011776.0;",
      "info" : "ExpressionStatement[27957-27991]:ExpressionStatement[28626-28660]"
    }, {
      "left" : "hiPrec[1] /= 285040095144011776.0;",
      "right" : "hiPrec[1] /= 285040095144011776.0;",
      "info" : "ExpressionStatement[28012-28046]:ExpressionStatement[28681-28715]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[28081-28095]:ReturnStatement[28750-28764]"
    }, {
      "left" : "if (intVal == 709)",
      "right" : "if (intVal == 709)",
      "info" : "IfStatement[28123-28519]:IfStatement[28792-29188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28142-28519]:Block[28811-29188]"
    }, {
      "left" : "final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
      "right" : "final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
      "info" : "VariableDeclarationStatement[28229-28308]:VariableDeclarationStatement[28898-28977]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[28325-28474]:IfStatement[28994-29143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28345-28474]:Block[29014-29143]"
    }, {
      "left" : "hiPrec[0] /= 4.455505956692756620;",
      "right" : "hiPrec[0] /= 4.455505956692756620;",
      "info" : "ExpressionStatement[28367-28401]:ExpressionStatement[29036-29070]"
    }, {
      "left" : "hiPrec[1] /= 4.455505956692756620;",
      "right" : "hiPrec[1] /= 4.455505956692756620;",
      "info" : "ExpressionStatement[28422-28456]:ExpressionStatement[29091-29125]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[28491-28505]:ReturnStatement[29160-29174]"
    }, {
      "left" : "intVal++;",
      "right" : "intVal++;",
      "info" : "ExpressionStatement[28533-28542]:ExpressionStatement[29202-29211]"
    }, {
      "left" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "right" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "info" : "ExpressionStatement[28556-28627]:ExpressionStatement[29225-29296]"
    }, {
      "left" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "right" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];",
      "info" : "ExpressionStatement[28640-28711]:ExpressionStatement[29309-29380]"
    }, {
      "left" : "intVal = -intVal;",
      "right" : "intVal = -intVal;",
      "info" : "ExpressionStatement[28725-28742]:ExpressionStatement[29394-29411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28758-29215]:Block[29427-29884]"
    }, {
      "left" : "intVal = (int) x;",
      "right" : "intVal = (int) x;",
      "info" : "ExpressionStatement[28772-28789]:ExpressionStatement[29441-29458]"
    }, {
      "left" : "if (intVal > 709)",
      "right" : "if (intVal > 709)",
      "info" : "IfStatement[28803-29036]:IfStatement[29472-29705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28821-29036]:Block[29490-29705]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[28839-28973]:IfStatement[29508-29642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28859-28973]:Block[29528-29642]"
    }, {
      "left" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[28881-28918]:ExpressionStatement[29550-29587]"
    }, {
      "left" : "hiPrec[1] = 0.0;",
      "right" : "hiPrec[1] = 0.0;",
      "info" : "ExpressionStatement[28939-28955]:ExpressionStatement[29608-29624]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[28990-29022]:ReturnStatement[29659-29691]"
    }, {
      "left" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "right" : "intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "info" : "ExpressionStatement[29050-29121]:ExpressionStatement[29719-29790]"
    }, {
      "left" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "right" : "intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];",
      "info" : "ExpressionStatement[29134-29205]:ExpressionStatement[29803-29874]"
    }, {
      "left" : "final int intFrac = (int) ((x - intVal) * 1024.0);",
      "right" : "final int intFrac = (int) ((x - intVal) * 1024.0);",
      "info" : "VariableDeclarationStatement[29452-29502]:VariableDeclarationStatement[30121-30171]"
    }, {
      "left" : "final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];",
      "right" : "final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];",
      "info" : "VariableDeclarationStatement[29511-29575]:VariableDeclarationStatement[30180-30244]"
    }, {
      "left" : "final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "right" : "final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "info" : "VariableDeclarationStatement[29584-29648]:VariableDeclarationStatement[30253-30317]"
    }, {
      "left" : "final double epsilon = x - (intVal + intFrac / 1024.0);",
      "right" : "final double epsilon = x - (intVal + intFrac / 1024.0);",
      "info" : "VariableDeclarationStatement[29900-29955]:VariableDeclarationStatement[30569-30624]"
    }, {
      "left" : "double z = 0.04168701738764507;",
      "right" : "double z = 0.04168701738764507;",
      "info" : "VariableDeclarationStatement[30369-30400]:VariableDeclarationStatement[31038-31069]"
    }, {
      "left" : "z = z * epsilon + 0.1666666505023083;",
      "right" : "z = z * epsilon + 0.1666666505023083;",
      "info" : "ExpressionStatement[30409-30446]:ExpressionStatement[31078-31115]"
    }, {
      "left" : "z = z * epsilon + 0.5000000000042687;",
      "right" : "z = z * epsilon + 0.5000000000042687;",
      "info" : "ExpressionStatement[30455-30492]:ExpressionStatement[31124-31161]"
    }, {
      "left" : "z = z * epsilon + 1.0;",
      "right" : "z = z * epsilon + 1.0;",
      "info" : "ExpressionStatement[30501-30523]:ExpressionStatement[31170-31192]"
    }, {
      "left" : "z = z * epsilon + -3.940510424527919E-20;",
      "right" : "z = z * epsilon + -3.940510424527919E-20;",
      "info" : "ExpressionStatement[30532-30573]:ExpressionStatement[31201-31242]"
    }, {
      "left" : "double tempA = intPartA * fracPartA;",
      "right" : "double tempA = intPartA * fracPartA;",
      "info" : "VariableDeclarationStatement[30807-30843]:VariableDeclarationStatement[31476-31512]"
    }, {
      "left" : "double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;",
      "right" : "double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;",
      "info" : "VariableDeclarationStatement[30852-30934]:VariableDeclarationStatement[31521-31603]"
    }, {
      "left" : "final double tempC = tempB + tempA;",
      "right" : "final double tempC = tempB + tempA;",
      "info" : "VariableDeclarationStatement[31212-31247]:VariableDeclarationStatement[31881-31916]"
    }, {
      "left" : "final double result;",
      "right" : "final double result;",
      "info" : "VariableDeclarationStatement[31256-31276]:VariableDeclarationStatement[31925-31945]"
    }, {
      "left" : "if (extra != 0.0)",
      "right" : "if (extra != 0.0)",
      "info" : "IfStatement[31285-31453]:IfStatement[31954-32122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31303-31390]:Block[31972-32059]"
    }, {
      "left" : "result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;",
      "right" : "result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;",
      "info" : "ExpressionStatement[31317-31380]:ExpressionStatement[31986-32049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31396-31453]:Block[32065-32122]"
    }, {
      "left" : "result = tempC*z + tempB + tempA;",
      "right" : "result = tempC*z + tempB + tempA;",
      "info" : "ExpressionStatement[31410-31443]:ExpressionStatement[32079-32112]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[31463-31640]:IfStatement[32132-32309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31483-31640]:Block[32152-32309]"
    }, {
      "left" : "hiPrec[0] = tempA;",
      "right" : "hiPrec[0] = tempA;",
      "info" : "ExpressionStatement[31541-31559]:ExpressionStatement[32210-32228]"
    }, {
      "left" : "hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;",
      "right" : "hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;",
      "info" : "ExpressionStatement[31572-31630]:ExpressionStatement[32241-32299]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[31650-31664]:ReturnStatement[32319-32333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31828-31864]:Block[32497-32533]"
    }, {
      "left" : "return expm1(x, null);",
      "right" : "return expm1(x, null);",
      "info" : "ReturnStatement[31836-31858]:ReturnStatement[32505-32527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32130-36213]:Block[32799-36882]"
    }, {
      "left" : "if (x != x || x == 0.0)",
      "right" : "if (x != x || x == 0.0)",
      "info" : "IfStatement[32140-32212]:IfStatement[32809-32881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32164-32212]:Block[32833-32881]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[32193-32202]:ReturnStatement[32862-32871]"
    }, {
      "left" : "if (x <= -1.0 || x >= 1.0)",
      "right" : "if (x <= -1.0 || x >= 1.0)",
      "info" : "IfStatement[32222-32696]:IfStatement[32891-33365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32249-32696]:Block[32918-33365]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[32336-32368]:VariableDeclarationStatement[33005-33037]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[32381-32401]:ExpressionStatement[33050-33070]"
    }, {
      "left" : "if (x > 0.0)",
      "right" : "if (x > 0.0)",
      "info" : "IfStatement[32414-32686]:IfStatement[33083-33355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32427-32495]:Block[33096-33164]"
    }, {
      "left" : "return -1.0 + hiPrec[0] + hiPrec[1];",
      "right" : "return -1.0 + hiPrec[0] + hiPrec[1];",
      "info" : "ReturnStatement[32445-32481]:ReturnStatement[33114-33150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32501-32686]:Block[33170-33355]"
    }, {
      "left" : "final double ra = -1.0 + hiPrec[0];",
      "right" : "final double ra = -1.0 + hiPrec[0];",
      "info" : "VariableDeclarationStatement[32519-32554]:VariableDeclarationStatement[33188-33223]"
    }, {
      "left" : "double rb = -(ra + 1.0 - hiPrec[0]);",
      "right" : "double rb = -(ra + 1.0 - hiPrec[0]);",
      "info" : "VariableDeclarationStatement[32571-32607]:VariableDeclarationStatement[33240-33276]"
    }, {
      "left" : "rb += hiPrec[1];",
      "right" : "rb += hiPrec[1];",
      "info" : "ExpressionStatement[32624-32640]:ExpressionStatement[33293-33309]"
    }, {
      "left" : "return ra + rb;",
      "right" : "return ra + rb;",
      "info" : "ReturnStatement[32657-32672]:ReturnStatement[33326-33341]"
    }, {
      "left" : "double baseA;",
      "right" : "double baseA;",
      "info" : "VariableDeclarationStatement[32706-32719]:VariableDeclarationStatement[33375-33388]"
    }, {
      "left" : "double baseB;",
      "right" : "double baseB;",
      "info" : "VariableDeclarationStatement[32728-32741]:VariableDeclarationStatement[33397-33410]"
    }, {
      "left" : "double epsilon;",
      "right" : "double epsilon;",
      "info" : "VariableDeclarationStatement[32750-32765]:VariableDeclarationStatement[33419-33434]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[32774-32799]:VariableDeclarationStatement[33443-33468]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[32809-32882]:IfStatement[33478-33551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32822-32882]:Block[33491-33551]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[32836-32843]:ExpressionStatement[33505-33512]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[32856-32872]:ExpressionStatement[33525-33541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32892-33373]:Block[33561-34042]"
    }, {
      "left" : "int intFrac = (int) (x * 1024.0);",
      "right" : "int intFrac = (int) (x * 1024.0);",
      "info" : "VariableDeclarationStatement[32906-32939]:VariableDeclarationStatement[33575-33608]"
    }, {
      "left" : "double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;",
      "right" : "double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;",
      "info" : "VariableDeclarationStatement[32952-33012]:VariableDeclarationStatement[33621-33681]"
    }, {
      "left" : "double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "right" : "double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];",
      "info" : "VariableDeclarationStatement[33025-33079]:VariableDeclarationStatement[33694-33748]"
    }, {
      "left" : "double temp = tempA + tempB;",
      "right" : "double temp = tempA + tempB;",
      "info" : "VariableDeclarationStatement[33093-33121]:VariableDeclarationStatement[33762-33790]"
    }, {
      "left" : "tempB = -(temp - tempA - tempB);",
      "right" : "tempB = -(temp - tempA - tempB);",
      "info" : "ExpressionStatement[33134-33166]:ExpressionStatement[33803-33835]"
    }, {
      "left" : "tempA = temp;",
      "right" : "tempA = temp;",
      "info" : "ExpressionStatement[33179-33192]:ExpressionStatement[33848-33861]"
    }, {
      "left" : "temp = tempA * HEX_40000000;",
      "right" : "temp = tempA * HEX_40000000;",
      "info" : "ExpressionStatement[33206-33234]:ExpressionStatement[33875-33903]"
    }, {
      "left" : "baseA = tempA + temp - temp;",
      "right" : "baseA = tempA + temp - temp;",
      "info" : "ExpressionStatement[33247-33275]:ExpressionStatement[33916-33944]"
    }, {
      "left" : "baseB = tempB + (tempA - baseA);",
      "right" : "baseB = tempB + (tempA - baseA);",
      "info" : "ExpressionStatement[33288-33320]:ExpressionStatement[33957-33989]"
    }, {
      "left" : "epsilon = x - intFrac/1024.0;",
      "right" : "epsilon = x - intFrac/1024.0;",
      "info" : "ExpressionStatement[33334-33363]:ExpressionStatement[34003-34032]"
    }, {
      "left" : "double zb = 0.008336750013465571;",
      "right" : "double zb = 0.008336750013465571;",
      "info" : "VariableDeclarationStatement[33421-33454]:VariableDeclarationStatement[34090-34123]"
    }, {
      "left" : "zb = zb * epsilon + 0.041666663879186654;",
      "right" : "zb = zb * epsilon + 0.041666663879186654;",
      "info" : "ExpressionStatement[33463-33504]:ExpressionStatement[34132-34173]"
    }, {
      "left" : "zb = zb * epsilon + 0.16666666666745392;",
      "right" : "zb = zb * epsilon + 0.16666666666745392;",
      "info" : "ExpressionStatement[33513-33553]:ExpressionStatement[34182-34222]"
    }, {
      "left" : "zb = zb * epsilon + 0.49999999999999994;",
      "right" : "zb = zb * epsilon + 0.49999999999999994;",
      "info" : "ExpressionStatement[33562-33602]:ExpressionStatement[34231-34271]"
    }, {
      "left" : "zb = zb * epsilon;",
      "right" : "zb = zb * epsilon;",
      "info" : "ExpressionStatement[33611-33629]:ExpressionStatement[34280-34298]"
    }, {
      "left" : "zb = zb * epsilon;",
      "right" : "zb = zb * epsilon;",
      "info" : "ExpressionStatement[33638-33656]:ExpressionStatement[34307-34325]"
    }, {
      "left" : "double za = epsilon;",
      "right" : "double za = epsilon;",
      "info" : "VariableDeclarationStatement[33666-33686]:VariableDeclarationStatement[34335-34355]"
    }, {
      "left" : "double temp = za + zb;",
      "right" : "double temp = za + zb;",
      "info" : "VariableDeclarationStatement[33695-33717]:VariableDeclarationStatement[34364-34386]"
    }, {
      "left" : "zb = -(temp - za - zb);",
      "right" : "zb = -(temp - za - zb);",
      "info" : "ExpressionStatement[33726-33749]:ExpressionStatement[34395-34418]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[33758-33768]:ExpressionStatement[34427-34437]"
    }, {
      "left" : "temp = za * HEX_40000000;",
      "right" : "temp = za * HEX_40000000;",
      "info" : "ExpressionStatement[33778-33803]:ExpressionStatement[34447-34472]"
    }, {
      "left" : "temp = za + temp - temp;",
      "right" : "temp = za + temp - temp;",
      "info" : "ExpressionStatement[33812-33836]:ExpressionStatement[34481-34505]"
    }, {
      "left" : "zb += za - temp;",
      "right" : "zb += za - temp;",
      "info" : "ExpressionStatement[33845-33861]:ExpressionStatement[34514-34530]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[33870-33880]:ExpressionStatement[34539-34549]"
    }, {
      "left" : "double ya = za * baseA;",
      "right" : "double ya = za * baseA;",
      "info" : "VariableDeclarationStatement[33978-34001]:VariableDeclarationStatement[34647-34670]"
    }, {
      "left" : "temp = ya + za * baseB;",
      "right" : "temp = ya + za * baseB;",
      "info" : "ExpressionStatement[34064-34087]:ExpressionStatement[34733-34756]"
    }, {
      "left" : "double yb = -(temp - ya - za * baseB);",
      "right" : "double yb = -(temp - ya - za * baseB);",
      "info" : "VariableDeclarationStatement[34096-34134]:VariableDeclarationStatement[34765-34803]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34143-34153]:ExpressionStatement[34812-34822]"
    }, {
      "left" : "temp = ya + zb * baseA;",
      "right" : "temp = ya + zb * baseA;",
      "info" : "ExpressionStatement[34163-34186]:ExpressionStatement[34832-34855]"
    }, {
      "left" : "yb += -(temp - ya - zb * baseA);",
      "right" : "yb += -(temp - ya - zb * baseA);",
      "info" : "ExpressionStatement[34195-34227]:ExpressionStatement[34864-34896]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34236-34246]:ExpressionStatement[34905-34915]"
    }, {
      "left" : "temp = ya + zb * baseB;",
      "right" : "temp = ya + zb * baseB;",
      "info" : "ExpressionStatement[34256-34279]:ExpressionStatement[34925-34948]"
    }, {
      "left" : "yb += -(temp - ya - zb*baseB);",
      "right" : "yb += -(temp - ya - zb*baseB);",
      "info" : "ExpressionStatement[34288-34318]:ExpressionStatement[34957-34987]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34327-34337]:ExpressionStatement[34996-35006]"
    }, {
      "left" : "temp = ya + baseA;",
      "right" : "temp = ya + baseA;",
      "info" : "ExpressionStatement[34411-34429]:ExpressionStatement[35080-35098]"
    }, {
      "left" : "yb += -(temp - baseA - ya);",
      "right" : "yb += -(temp - baseA - ya);",
      "info" : "ExpressionStatement[34438-34465]:ExpressionStatement[35107-35134]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34474-34484]:ExpressionStatement[35143-35153]"
    }, {
      "left" : "temp = ya + za;",
      "right" : "temp = ya + za;",
      "info" : "ExpressionStatement[34494-34509]:ExpressionStatement[35163-35178]"
    }, {
      "left" : "yb += -(temp - ya - za);",
      "right" : "yb += -(temp - ya - za);",
      "info" : "ExpressionStatement[34585-34609]:ExpressionStatement[35254-35278]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34618-34628]:ExpressionStatement[35287-35297]"
    }, {
      "left" : "temp = ya + baseB;",
      "right" : "temp = ya + baseB;",
      "info" : "ExpressionStatement[34638-34656]:ExpressionStatement[35307-35325]"
    }, {
      "left" : "yb += -(temp - ya - baseB);",
      "right" : "yb += -(temp - ya - baseB);",
      "info" : "ExpressionStatement[34741-34768]:ExpressionStatement[35410-35437]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34777-34787]:ExpressionStatement[35446-35456]"
    }, {
      "left" : "temp = ya + zb;",
      "right" : "temp = ya + zb;",
      "info" : "ExpressionStatement[34797-34812]:ExpressionStatement[35466-35481]"
    }, {
      "left" : "yb += -(temp - ya - zb);",
      "right" : "yb += -(temp - ya - zb);",
      "info" : "ExpressionStatement[34888-34912]:ExpressionStatement[35557-35581]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[34921-34931]:ExpressionStatement[35590-35600]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[34941-36076]:IfStatement[35610-36745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34955-36076]:Block[35624-36745]"
    }, {
      "left" : "double denom = 1.0 + ya;",
      "right" : "double denom = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[35034-35058]:VariableDeclarationStatement[35703-35727]"
    }, {
      "left" : "double denomr = 1.0 / denom;",
      "right" : "double denomr = 1.0 / denom;",
      "info" : "VariableDeclarationStatement[35071-35099]:VariableDeclarationStatement[35740-35768]"
    }, {
      "left" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "right" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "info" : "VariableDeclarationStatement[35112-35153]:VariableDeclarationStatement[35781-35822]"
    }, {
      "left" : "double ratio = ya * denomr;",
      "right" : "double ratio = ya * denomr;",
      "info" : "VariableDeclarationStatement[35166-35193]:VariableDeclarationStatement[35835-35862]"
    }, {
      "left" : "temp = ratio * HEX_40000000;",
      "right" : "temp = ratio * HEX_40000000;",
      "info" : "ExpressionStatement[35206-35234]:ExpressionStatement[35875-35903]"
    }, {
      "left" : "final double ra = ratio + temp - temp;",
      "right" : "final double ra = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[35247-35285]:VariableDeclarationStatement[35916-35954]"
    }, {
      "left" : "double rb = ratio - ra;",
      "right" : "double rb = ratio - ra;",
      "info" : "VariableDeclarationStatement[35298-35321]:VariableDeclarationStatement[35967-35990]"
    }, {
      "left" : "temp = denom * HEX_40000000;",
      "right" : "temp = denom * HEX_40000000;",
      "info" : "ExpressionStatement[35335-35363]:ExpressionStatement[36004-36032]"
    }, {
      "left" : "za = denom + temp - temp;",
      "right" : "za = denom + temp - temp;",
      "info" : "ExpressionStatement[35376-35401]:ExpressionStatement[36045-36070]"
    }, {
      "left" : "zb = denom - za;",
      "right" : "zb = denom - za;",
      "info" : "ExpressionStatement[35414-35430]:ExpressionStatement[36083-36099]"
    }, {
      "left" : "rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;",
      "right" : "rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;",
      "info" : "ExpressionStatement[35444-35504]:ExpressionStatement[36113-36173]"
    }, {
      "left" : "rb += yb * denomr;",
      "right" : "rb += yb * denomr;",
      "info" : "ExpressionStatement[35880-35898]:ExpressionStatement[36549-36567]"
    }, {
      "left" : "rb += -ya * denomb * denomr * denomr;",
      "right" : "rb += -ya * denomb * denomr * denomr;",
      "info" : "ExpressionStatement[35945-35982]:ExpressionStatement[36614-36651]"
    }, {
      "left" : "ya = -ra;",
      "right" : "ya = -ra;",
      "info" : "ExpressionStatement[36035-36044]:ExpressionStatement[36704-36713]"
    }, {
      "left" : "yb = -rb;",
      "right" : "yb = -rb;",
      "info" : "ExpressionStatement[36057-36066]:ExpressionStatement[36726-36735]"
    }, {
      "left" : "if (hiPrecOut != null)",
      "right" : "if (hiPrecOut != null)",
      "info" : "IfStatement[36086-36182]:IfStatement[36755-36851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36109-36182]:Block[36778-36851]"
    }, {
      "left" : "hiPrecOut[0] = ya;",
      "right" : "hiPrecOut[0] = ya;",
      "info" : "ExpressionStatement[36123-36141]:ExpressionStatement[36792-36810]"
    }, {
      "left" : "hiPrecOut[1] = yb;",
      "right" : "hiPrecOut[1] = yb;",
      "info" : "ExpressionStatement[36154-36172]:ExpressionStatement[36823-36841]"
    }, {
      "left" : "return ya + yb;",
      "right" : "return ya + yb;",
      "info" : "ReturnStatement[36192-36207]:ReturnStatement[36861-36876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36358-36394]:Block[37027-37063]"
    }, {
      "left" : "return log(x, null);",
      "right" : "return log(x, null);",
      "info" : "ReturnStatement[36368-36388]:ReturnStatement[37037-37057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36706-43790]:Block[37375-44459]"
    }, {
      "left" : "if (x==0)",
      "right" : "if (x==0)",
      "info" : "IfStatement[36716-36814]:IfStatement[37385-37483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36726-36814]:Block[37395-37483]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[36772-36804]:ReturnStatement[37441-37473]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[36823-36862]:VariableDeclarationStatement[37492-37531]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0 || x != x)",
      "right" : "if ((bits & 0x8000000000000000L) != 0 || x != x)",
      "info" : "IfStatement[36934-37172]:IfStatement[37603-37841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36983-37172]:Block[37652-37841]"
    }, {
      "left" : "if (x != 0.0)",
      "right" : "if (x != 0.0)",
      "info" : "IfStatement[36997-37162]:IfStatement[37666-37831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37011-37162]:Block[37680-37831]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[37029-37112]:IfStatement[37698-37781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37049-37112]:Block[37718-37781]"
    }, {
      "left" : "hiPrec[0] = Double.NaN;",
      "right" : "hiPrec[0] = Double.NaN;",
      "info" : "ExpressionStatement[37071-37094]:ExpressionStatement[37740-37763]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[37130-37148]:ReturnStatement[37799-37817]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[37239-37433]:IfStatement[37908-38102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37274-37433]:Block[37943-38102]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[37288-37377]:IfStatement[37957-38046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37308-37377]:Block[37977-38046]"
    }, {
      "left" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[37326-37363]:ExpressionStatement[37995-38032]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[37391-37423]:ReturnStatement[38060-38092]"
    }, {
      "left" : "int exp = (int)(bits >> 52)-1023;",
      "right" : "int exp = (int)(bits >> 52)-1023;",
      "info" : "VariableDeclarationStatement[37478-37511]:VariableDeclarationStatement[38147-38180]"
    }, {
      "left" : "if ((bits & 0x7ff0000000000000L) == 0)",
      "right" : "if ((bits & 0x7ff0000000000000L) == 0)",
      "info" : "IfStatement[37521-38022]:IfStatement[38190-38691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37560-38022]:Block[38229-38691]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[37600-37815]:IfStatement[38269-38484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37612-37815]:Block[38281-38484]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[37654-37751]:IfStatement[38323-38420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37674-37751]:Block[38343-38420]"
    }, {
      "left" : "hiPrec[0] = Double.NEGATIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.NEGATIVE_INFINITY;",
      "info" : "ExpressionStatement[37696-37733]:ExpressionStatement[38365-38402]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[37769-37801]:ReturnStatement[38438-38470]"
    }, {
      "left" : "bits <<= 1;",
      "right" : "bits <<= 1;",
      "info" : "ExpressionStatement[37879-37890]:ExpressionStatement[38548-38559]"
    }, {
      "left" : "while ( (bits & 0x0010000000000000L) == 0)",
      "right" : "while ( (bits & 0x0010000000000000L) == 0)",
      "info" : "WhileStatement[37903-38012]:WhileStatement[38572-38681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37946-38012]:Block[38615-38681]"
    }, {
      "left" : "--exp;",
      "right" : "--exp;",
      "info" : "ExpressionStatement[37964-37970]:ExpressionStatement[38633-38639]"
    }, {
      "left" : "bits <<= 1;",
      "right" : "bits <<= 1;",
      "info" : "ExpressionStatement[37987-37998]:ExpressionStatement[38656-38667]"
    }, {
      "left" : "if (exp == -1 || exp == 0)",
      "right" : "if (exp == -1 || exp == 0)",
      "info" : "IfStatement[38033-39854]:IfStatement[38702-40523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38060-39854]:Block[38729-40523]"
    }, {
      "left" : "if (x < 1.01 && x > 0.99 && hiPrec == null)",
      "right" : "if (x < 1.01 && x > 0.99 && hiPrec == null)",
      "info" : "IfStatement[38074-39844]:IfStatement[38743-40513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38118-39844]:Block[38787-40513]"
    }, {
      "left" : "double xa = x - 1.0;",
      "right" : "double xa = x - 1.0;",
      "info" : "VariableDeclarationStatement[38346-38366]:VariableDeclarationStatement[39015-39035]"
    }, {
      "left" : "double xb = xa - x + 1.0;",
      "right" : "double xb = xa - x + 1.0;",
      "info" : "VariableDeclarationStatement[38383-38408]:VariableDeclarationStatement[39052-39077]"
    }, {
      "left" : "double tmp = xa * HEX_40000000;",
      "right" : "double tmp = xa * HEX_40000000;",
      "info" : "VariableDeclarationStatement[38425-38456]:VariableDeclarationStatement[39094-39125]"
    }, {
      "left" : "double aa = xa + tmp - tmp;",
      "right" : "double aa = xa + tmp - tmp;",
      "info" : "VariableDeclarationStatement[38473-38500]:VariableDeclarationStatement[39142-39169]"
    }, {
      "left" : "double ab = xa - aa;",
      "right" : "double ab = xa - aa;",
      "info" : "VariableDeclarationStatement[38517-38537]:VariableDeclarationStatement[39186-39206]"
    }, {
      "left" : "xa = aa;",
      "right" : "xa = aa;",
      "info" : "ExpressionStatement[38554-38562]:ExpressionStatement[39223-39231]"
    }, {
      "left" : "xb = ab;",
      "right" : "xb = ab;",
      "info" : "ExpressionStatement[38579-38587]:ExpressionStatement[39248-39256]"
    }, {
      "left" : "final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];",
      "right" : "final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];",
      "info" : "VariableDeclarationStatement[38605-38674]:VariableDeclarationStatement[39274-39343]"
    }, {
      "left" : "double ya = lnCoef_last[0];",
      "right" : "double ya = lnCoef_last[0];",
      "info" : "VariableDeclarationStatement[38691-38718]:VariableDeclarationStatement[39360-39387]"
    }, {
      "left" : "double yb = lnCoef_last[1];",
      "right" : "double yb = lnCoef_last[1];",
      "info" : "VariableDeclarationStatement[38735-38762]:VariableDeclarationStatement[39404-39431]"
    }, {
      "left" : "for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--)",
      "right" : "for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--)",
      "info" : "ForStatement[38780-39520]:ForStatement[39449-40189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38832-39520]:Block[39501-40189]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[38899-38912]:ExpressionStatement[39568-39581]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[38933-38966]:ExpressionStatement[39602-39635]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[39033-39057]:ExpressionStatement[39702-39726]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[39078-39098]:ExpressionStatement[39747-39767]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[39119-39137]:ExpressionStatement[39788-39806]"
    }, {
      "left" : "final double[] lnCoef_i = LN_QUICK_COEF[i];",
      "right" : "final double[] lnCoef_i = LN_QUICK_COEF[i];",
      "info" : "VariableDeclarationStatement[39210-39253]:VariableDeclarationStatement[39879-39922]"
    }, {
      "left" : "aa = ya + lnCoef_i[0];",
      "right" : "aa = ya + lnCoef_i[0];",
      "info" : "ExpressionStatement[39274-39296]:ExpressionStatement[39943-39965]"
    }, {
      "left" : "ab = yb + lnCoef_i[1];",
      "right" : "ab = yb + lnCoef_i[1];",
      "info" : "ExpressionStatement[39317-39339]:ExpressionStatement[39986-40008]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[39398-39422]:ExpressionStatement[40067-40091]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[39443-39463]:ExpressionStatement[40112-40132]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[39484-39502]:ExpressionStatement[40153-40171]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[39579-39592]:ExpressionStatement[40248-40261]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[39609-39642]:ExpressionStatement[40278-40311]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[39701-39725]:ExpressionStatement[40370-40394]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[39742-39762]:ExpressionStatement[40411-40431]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[39779-39797]:ExpressionStatement[40448-40466]"
    }, {
      "left" : "return ya + yb;",
      "right" : "return ya + yb;",
      "info" : "ReturnStatement[39815-39830]:ReturnStatement[40484-40499]"
    }, {
      "left" : "final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];",
      "right" : "final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];",
      "info" : "VariableDeclarationStatement[39947-40026]:VariableDeclarationStatement[40616-40695]"
    }, {
      "left" : "final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));",
      "right" : "final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));",
      "info" : "VariableDeclarationStatement[40334-40429]:VariableDeclarationStatement[41003-41098]"
    }, {
      "left" : "double lnza = 0.0;",
      "right" : "double lnza = 0.0;",
      "info" : "VariableDeclarationStatement[40439-40457]:VariableDeclarationStatement[41108-41126]"
    }, {
      "left" : "double lnzb = 0.0;",
      "right" : "double lnzb = 0.0;",
      "info" : "VariableDeclarationStatement[40466-40484]:VariableDeclarationStatement[41135-41153]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[40494-42735]:IfStatement[41163-43404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40514-42278]:Block[41183-42947]"
    }, {
      "left" : "double tmp = epsilon * HEX_40000000;",
      "right" : "double tmp = epsilon * HEX_40000000;",
      "info" : "VariableDeclarationStatement[40565-40601]:VariableDeclarationStatement[41234-41270]"
    }, {
      "left" : "double aa = epsilon + tmp - tmp;",
      "right" : "double aa = epsilon + tmp - tmp;",
      "info" : "VariableDeclarationStatement[40614-40646]:VariableDeclarationStatement[41283-41315]"
    }, {
      "left" : "double ab = epsilon - aa;",
      "right" : "double ab = epsilon - aa;",
      "info" : "VariableDeclarationStatement[40659-40684]:VariableDeclarationStatement[41328-41353]"
    }, {
      "left" : "double xa = aa;",
      "right" : "double xa = aa;",
      "info" : "VariableDeclarationStatement[40697-40712]:VariableDeclarationStatement[41366-41381]"
    }, {
      "left" : "double xb = ab;",
      "right" : "double xb = ab;",
      "info" : "VariableDeclarationStatement[40725-40740]:VariableDeclarationStatement[41394-41409]"
    }, {
      "left" : "final double numer = bits & 0x3ffffffffffL;",
      "right" : "final double numer = bits & 0x3ffffffffffL;",
      "info" : "VariableDeclarationStatement[40826-40869]:VariableDeclarationStatement[41495-41538]"
    }, {
      "left" : "final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);",
      "right" : "final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);",
      "info" : "VariableDeclarationStatement[40882-40947]:VariableDeclarationStatement[41551-41616]"
    }, {
      "left" : "aa = numer - xa*denom - xb * denom;",
      "right" : "aa = numer - xa*denom - xb * denom;",
      "info" : "ExpressionStatement[40960-40995]:ExpressionStatement[41629-41664]"
    }, {
      "left" : "xb += aa / denom;",
      "right" : "xb += aa / denom;",
      "info" : "ExpressionStatement[41008-41025]:ExpressionStatement[41677-41694]"
    }, {
      "left" : "final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];",
      "right" : "final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];",
      "info" : "VariableDeclarationStatement[41085-41156]:VariableDeclarationStatement[41754-41825]"
    }, {
      "left" : "double ya = lnCoef_last[0];",
      "right" : "double ya = lnCoef_last[0];",
      "info" : "VariableDeclarationStatement[41169-41196]:VariableDeclarationStatement[41838-41865]"
    }, {
      "left" : "double yb = lnCoef_last[1];",
      "right" : "double yb = lnCoef_last[1];",
      "info" : "VariableDeclarationStatement[41209-41236]:VariableDeclarationStatement[41878-41905]"
    }, {
      "left" : "for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--)",
      "right" : "for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--)",
      "info" : "ForStatement[41250-41931]:ForStatement[41919-42600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41304-41931]:Block[41973-42600]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[41363-41376]:ExpressionStatement[42032-42045]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[41393-41426]:ExpressionStatement[42062-42095]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[41485-41509]:ExpressionStatement[42154-42178]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[41526-41546]:ExpressionStatement[42195-42215]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[41563-41581]:ExpressionStatement[42232-42250]"
    }, {
      "left" : "final double[] lnCoef_i = LN_HI_PREC_COEF[i];",
      "right" : "final double[] lnCoef_i = LN_HI_PREC_COEF[i];",
      "info" : "VariableDeclarationStatement[41647-41692]:VariableDeclarationStatement[42316-42361]"
    }, {
      "left" : "aa = ya + lnCoef_i[0];",
      "right" : "aa = ya + lnCoef_i[0];",
      "info" : "ExpressionStatement[41709-41731]:ExpressionStatement[42378-42400]"
    }, {
      "left" : "ab = yb + lnCoef_i[1];",
      "right" : "ab = yb + lnCoef_i[1];",
      "info" : "ExpressionStatement[41748-41770]:ExpressionStatement[42417-42439]"
    }, {
      "left" : "tmp = aa * HEX_40000000;",
      "right" : "tmp = aa * HEX_40000000;",
      "info" : "ExpressionStatement[41821-41845]:ExpressionStatement[42490-42514]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[41862-41882]:ExpressionStatement[42531-42551]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[41899-41917]:ExpressionStatement[42568-42586]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[41982-41995]:ExpressionStatement[42651-42664]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[42008-42041]:ExpressionStatement[42677-42710]"
    }, {
      "left" : "lnza = aa + ab;",
      "right" : "lnza = aa + ab;",
      "info" : "ExpressionStatement[42215-42230]:ExpressionStatement[42884-42899]"
    }, {
      "left" : "lnzb = -(lnza - aa - ab);",
      "right" : "lnzb = -(lnza - aa - ab);",
      "info" : "ExpressionStatement[42243-42268]:ExpressionStatement[42912-42937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42284-42735]:Block[42953-43404]"
    }, {
      "left" : "lnza = -0.16624882440418567;",
      "right" : "lnza = -0.16624882440418567;",
      "info" : "ExpressionStatement[42409-42437]:ExpressionStatement[43078-43106]"
    }, {
      "left" : "lnza = lnza * epsilon + 0.19999954120254515;",
      "right" : "lnza = lnza * epsilon + 0.19999954120254515;",
      "info" : "ExpressionStatement[42450-42494]:ExpressionStatement[43119-43163]"
    }, {
      "left" : "lnza = lnza * epsilon + -0.2499999997677497;",
      "right" : "lnza = lnza * epsilon + -0.2499999997677497;",
      "info" : "ExpressionStatement[42507-42551]:ExpressionStatement[43176-43220]"
    }, {
      "left" : "lnza = lnza * epsilon + 0.3333333333332802;",
      "right" : "lnza = lnza * epsilon + 0.3333333333332802;",
      "info" : "ExpressionStatement[42564-42607]:ExpressionStatement[43233-43276]"
    }, {
      "left" : "lnza = lnza * epsilon + -0.5;",
      "right" : "lnza = lnza * epsilon + -0.5;",
      "info" : "ExpressionStatement[42620-42649]:ExpressionStatement[43289-43318]"
    }, {
      "left" : "lnza = lnza * epsilon + 1.0;",
      "right" : "lnza = lnza * epsilon + 1.0;",
      "info" : "ExpressionStatement[42662-42690]:ExpressionStatement[43331-43359]"
    }, {
      "left" : "lnza = lnza * epsilon;",
      "right" : "lnza = lnza * epsilon;",
      "info" : "ExpressionStatement[42703-42725]:ExpressionStatement[43372-43394]"
    }, {
      "left" : "double a = LN_2_A*exp;",
      "right" : "double a = LN_2_A*exp;",
      "info" : "VariableDeclarationStatement[43163-43185]:VariableDeclarationStatement[43832-43854]"
    }, {
      "left" : "double b = 0.0;",
      "right" : "double b = 0.0;",
      "info" : "VariableDeclarationStatement[43194-43209]:VariableDeclarationStatement[43863-43878]"
    }, {
      "left" : "double c = a+lnm[0];",
      "right" : "double c = a+lnm[0];",
      "info" : "VariableDeclarationStatement[43218-43238]:VariableDeclarationStatement[43887-43907]"
    }, {
      "left" : "double d = -(c-a-lnm[0]);",
      "right" : "double d = -(c-a-lnm[0]);",
      "info" : "VariableDeclarationStatement[43247-43272]:VariableDeclarationStatement[43916-43941]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43281-43287]:ExpressionStatement[43950-43956]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43296-43306]:ExpressionStatement[43965-43975]"
    }, {
      "left" : "c = a + lnza;",
      "right" : "c = a + lnza;",
      "info" : "ExpressionStatement[43316-43329]:ExpressionStatement[43985-43998]"
    }, {
      "left" : "d = -(c - a - lnza);",
      "right" : "d = -(c - a - lnza);",
      "info" : "ExpressionStatement[43338-43358]:ExpressionStatement[44007-44027]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43367-43373]:ExpressionStatement[44036-44042]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43382-43392]:ExpressionStatement[44051-44061]"
    }, {
      "left" : "c = a + LN_2_B*exp;",
      "right" : "c = a + LN_2_B*exp;",
      "info" : "ExpressionStatement[43402-43421]:ExpressionStatement[44071-44090]"
    }, {
      "left" : "d = -(c - a - LN_2_B*exp);",
      "right" : "d = -(c - a - LN_2_B*exp);",
      "info" : "ExpressionStatement[43430-43456]:ExpressionStatement[44099-44125]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43465-43471]:ExpressionStatement[44134-44140]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43480-43490]:ExpressionStatement[44149-44159]"
    }, {
      "left" : "c = a + lnm[1];",
      "right" : "c = a + lnm[1];",
      "info" : "ExpressionStatement[43500-43515]:ExpressionStatement[44169-44184]"
    }, {
      "left" : "d = -(c - a - lnm[1]);",
      "right" : "d = -(c - a - lnm[1]);",
      "info" : "ExpressionStatement[43524-43546]:ExpressionStatement[44193-44215]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43555-43561]:ExpressionStatement[44224-44230]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43570-43580]:ExpressionStatement[44239-44249]"
    }, {
      "left" : "c = a + lnzb;",
      "right" : "c = a + lnzb;",
      "info" : "ExpressionStatement[43590-43603]:ExpressionStatement[44259-44272]"
    }, {
      "left" : "d = -(c - a - lnzb);",
      "right" : "d = -(c - a - lnzb);",
      "info" : "ExpressionStatement[43612-43632]:ExpressionStatement[44281-44301]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43641-43647]:ExpressionStatement[44310-44316]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43656-43666]:ExpressionStatement[44325-44335]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[43676-43761]:IfStatement[44345-44430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43696-43761]:Block[44365-44430]"
    }, {
      "left" : "hiPrec[0] = a;",
      "right" : "hiPrec[0] = a;",
      "info" : "ExpressionStatement[43710-43724]:ExpressionStatement[44379-44393]"
    }, {
      "left" : "hiPrec[1] = b;",
      "right" : "hiPrec[1] = b;",
      "info" : "ExpressionStatement[43737-43751]:ExpressionStatement[44406-44420]"
    }, {
      "left" : "return a + b;",
      "right" : "return a + b;",
      "info" : "ReturnStatement[43771-43784]:ReturnStatement[44440-44453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43949-44953]:Block[44618-45622]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[43959-44028]:IfStatement[44628-44697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43972-44028]:Block[44641-44697]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[43986-44018]:ReturnStatement[44655-44687]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[44038-44129]:IfStatement[44707-44798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44073-44129]:Block[44742-44798]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[44087-44119]:ReturnStatement[44756-44788]"
    }, {
      "left" : "if (x > 1e-6 ||\n            x < -1e-6)",
      "right" : "if (x > 1e-6 ||\n            x < -1e-6)",
      "info" : "IfStatement[44139-44947]:IfStatement[44808-45616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44178-44771]:Block[44847-45440]"
    }, {
      "left" : "final double xpa = 1 + x;",
      "right" : "final double xpa = 1 + x;",
      "info" : "VariableDeclarationStatement[44192-44217]:VariableDeclarationStatement[44861-44886]"
    }, {
      "left" : "final double xpb = -(xpa - 1 - x);",
      "right" : "final double xpb = -(xpa - 1 - x);",
      "info" : "VariableDeclarationStatement[44230-44264]:VariableDeclarationStatement[44899-44933]"
    }, {
      "left" : "final double[] hiPrec = new double[2];",
      "right" : "final double[] hiPrec = new double[2];",
      "info" : "VariableDeclarationStatement[44278-44316]:VariableDeclarationStatement[44947-44985]"
    }, {
      "left" : "final double lores = log(xpa, hiPrec);",
      "right" : "final double lores = log(xpa, hiPrec);",
      "info" : "VariableDeclarationStatement[44329-44367]:VariableDeclarationStatement[44998-45036]"
    }, {
      "left" : "if (Double.isInfinite(lores))",
      "right" : "if (Double.isInfinite(lores))",
      "info" : "IfStatement[44380-44498]:IfStatement[45049-45167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44410-44498]:Block[45079-45167]"
    }, {
      "left" : "return lores;",
      "right" : "return lores;",
      "info" : "ReturnStatement[44471-44484]:ReturnStatement[45140-45153]"
    }, {
      "left" : "final double fx1 = xpb / xpa;",
      "right" : "final double fx1 = xpb / xpa;",
      "info" : "VariableDeclarationStatement[44624-44653]:VariableDeclarationStatement[45293-45322]"
    }, {
      "left" : "final double epsilon = 0.5 * fx1 + 1;",
      "right" : "final double epsilon = 0.5 * fx1 + 1;",
      "info" : "VariableDeclarationStatement[44666-44703]:VariableDeclarationStatement[45335-45372]"
    }, {
      "left" : "return epsilon * fx1 + hiPrec[1] + hiPrec[0];",
      "right" : "return epsilon * fx1 + hiPrec[1] + hiPrec[0];",
      "info" : "ReturnStatement[44716-44761]:ReturnStatement[45385-45430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44777-44947]:Block[45446-45616]"
    }, {
      "left" : "final double y = (x * F_1_3 - F_1_2) * x + 1;",
      "right" : "final double y = (x * F_1_3 - F_1_2) * x + 1;",
      "info" : "VariableDeclarationStatement[44866-44911]:VariableDeclarationStatement[45535-45580]"
    }, {
      "left" : "return y * x;",
      "right" : "return y * x;",
      "info" : "ReturnStatement[44924-44937]:ReturnStatement[45593-45606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45098-45655]:Block[45767-46324]"
    }, {
      "left" : "final double hiPrec[] = new double[2];",
      "right" : "final double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[45108-45146]:VariableDeclarationStatement[45777-45815]"
    }, {
      "left" : "final double lores = log(x, hiPrec);",
      "right" : "final double lores = log(x, hiPrec);",
      "info" : "VariableDeclarationStatement[45156-45192]:VariableDeclarationStatement[45825-45861]"
    }, {
      "left" : "if (Double.isInfinite(lores))",
      "right" : "if (Double.isInfinite(lores))",
      "info" : "IfStatement[45201-45310]:IfStatement[45870-45979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45230-45310]:Block[45899-45979]"
    }, {
      "left" : "return lores;",
      "right" : "return lores;",
      "info" : "ReturnStatement[45287-45300]:ReturnStatement[45956-45969]"
    }, {
      "left" : "final double tmp = hiPrec[0] * HEX_40000000;",
      "right" : "final double tmp = hiPrec[0] * HEX_40000000;",
      "info" : "VariableDeclarationStatement[45320-45364]:VariableDeclarationStatement[45989-46033]"
    }, {
      "left" : "final double lna = hiPrec[0] + tmp - tmp;",
      "right" : "final double lna = hiPrec[0] + tmp - tmp;",
      "info" : "VariableDeclarationStatement[45373-45414]:VariableDeclarationStatement[46042-46083]"
    }, {
      "left" : "final double lnb = hiPrec[0] - lna + hiPrec[1];",
      "right" : "final double lnb = hiPrec[0] - lna + hiPrec[1];",
      "info" : "VariableDeclarationStatement[45423-45470]:VariableDeclarationStatement[46092-46139]"
    }, {
      "left" : "final double rln10a = 0.4342944622039795;",
      "right" : "final double rln10a = 0.4342944622039795;",
      "info" : "VariableDeclarationStatement[45480-45521]:VariableDeclarationStatement[46149-46190]"
    }, {
      "left" : "final double rln10b = 1.9699272335463627E-8;",
      "right" : "final double rln10b = 1.9699272335463627E-8;",
      "info" : "VariableDeclarationStatement[45530-45574]:VariableDeclarationStatement[46199-46243]"
    }, {
      "left" : "return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;",
      "right" : "return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;",
      "info" : "ReturnStatement[45584-45649]:ReturnStatement[46253-46318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46462-46504]:Block[47131-47173]"
    }, {
      "left" : "return log(x) / log(base);",
      "right" : "return log(x) / log(base);",
      "info" : "ReturnStatement[46472-46498]:ReturnStatement[47141-47167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46691-50720]:Block[47360-51389]"
    }, {
      "left" : "final double lns[] = new double[2];",
      "right" : "final double lns[] = new double[2];",
      "info" : "VariableDeclarationStatement[46701-46736]:VariableDeclarationStatement[47370-47405]"
    }, {
      "left" : "if (y == 0.0)",
      "right" : "if (y == 0.0)",
      "info" : "IfStatement[46746-46795]:IfStatement[47415-47464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46760-46795]:Block[47429-47464]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[46774-46785]:ReturnStatement[47443-47454]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[46805-46862]:IfStatement[47474-47531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46817-46862]:Block[47486-47531]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[46843-46852]:ReturnStatement[47512-47521]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[46873-47502]:IfStatement[47542-48171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46885-47502]:Block[47554-48171]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[46899-46938]:VariableDeclarationStatement[47568-47607]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0)",
      "right" : "if ((bits & 0x8000000000000000L) != 0)",
      "info" : "IfStatement[46951-47304]:IfStatement[47620-47973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46990-47304]:Block[47659-47973]"
    }, {
      "left" : "long yi = (long) y;",
      "right" : "long yi = (long) y;",
      "info" : "VariableDeclarationStatement[47033-47052]:VariableDeclarationStatement[47702-47721]"
    }, {
      "left" : "if (y < 0 && y == yi && (yi & 1) == 1)",
      "right" : "if (y < 0 && y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[47070-47181]:IfStatement[47739-47850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47109-47181]:Block[47778-47850]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[47131-47163]:ReturnStatement[47800-47832]"
    }, {
      "left" : "if (y > 0 && y == yi && (yi & 1) == 1)",
      "right" : "if (y > 0 && y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[47199-47290]:IfStatement[47868-47959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47238-47290]:Block[47907-47959]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[47260-47272]:ReturnStatement[47929-47941]"
    }, {
      "left" : "if (y < 0)",
      "right" : "if (y < 0)",
      "info" : "IfStatement[47318-47393]:IfStatement[47987-48062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47329-47393]:Block[47998-48062]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[47347-47379]:ReturnStatement[48016-48048]"
    }, {
      "left" : "if (y > 0)",
      "right" : "if (y > 0)",
      "info" : "IfStatement[47406-47460]:IfStatement[48075-48129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47417-47460]:Block[48086-48129]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[47435-47446]:ReturnStatement[48104-48115]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[47474-47492]:ReturnStatement[48143-48161]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[47512-47775]:IfStatement[48181-48444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47547-47775]:Block[48216-48444]"
    }, {
      "left" : "if (y != y)",
      "right" : "if (y != y)",
      "info" : "IfStatement[47561-47626]:IfStatement[48230-48295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47573-47626]:Block[48242-48295]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[47603-47612]:ReturnStatement[48272-48281]"
    }, {
      "left" : "if (y < 0.0)",
      "right" : "if (y < 0.0)",
      "info" : "IfStatement[47639-47765]:IfStatement[48308-48434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47652-47695]:Block[48321-48364]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[47670-47681]:ReturnStatement[48339-48350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47701-47765]:Block[48370-48434]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[47719-47751]:ReturnStatement[48388-48420]"
    }, {
      "left" : "if (y == Double.POSITIVE_INFINITY)",
      "right" : "if (y == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[47785-48056]:IfStatement[48454-48725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47820-48056]:Block[48489-48725]"
    }, {
      "left" : "if (x * x == 1.0)",
      "right" : "if (x * x == 1.0)",
      "info" : "IfStatement[47834-47902]:IfStatement[48503-48571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47852-47902]:Block[48521-48571]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[47870-47888]:ReturnStatement[48539-48557]"
    }, {
      "left" : "if (x * x > 1.0)",
      "right" : "if (x * x > 1.0)",
      "info" : "IfStatement[47916-48046]:IfStatement[48585-48715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47933-47997]:Block[48602-48666]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[47951-47983]:ReturnStatement[48620-48652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48003-48046]:Block[48672-48715]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[48021-48032]:ReturnStatement[48690-48701]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[48066-48640]:IfStatement[48735-49309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48101-48640]:Block[48770-49309]"
    }, {
      "left" : "if (y != y)",
      "right" : "if (y != y)",
      "info" : "IfStatement[48115-48180]:IfStatement[48784-48849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48127-48180]:Block[48796-48849]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[48157-48166]:ReturnStatement[48826-48835]"
    }, {
      "left" : "if (y < 0)",
      "right" : "if (y < 0)",
      "info" : "IfStatement[48194-48384]:IfStatement[48863-49053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48205-48384]:Block[48874-49053]"
    }, {
      "left" : "long yi = (long) y;",
      "right" : "long yi = (long) y;",
      "info" : "VariableDeclarationStatement[48223-48242]:VariableDeclarationStatement[48892-48911]"
    }, {
      "left" : "if (y == yi && (yi & 1) == 1)",
      "right" : "if (y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[48259-48341]:IfStatement[48928-49010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48289-48341]:Block[48958-49010]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[48311-48323]:ReturnStatement[48980-48992]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[48359-48370]:ReturnStatement[49028-49039]"
    }, {
      "left" : "if (y > 0)",
      "right" : "if (y > 0)",
      "info" : "IfStatement[48398-48630]:IfStatement[49067-49299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48410-48630]:Block[49079-49299]"
    }, {
      "left" : "long yi = (long) y;",
      "right" : "long yi = (long) y;",
      "info" : "VariableDeclarationStatement[48428-48447]:VariableDeclarationStatement[49097-49116]"
    }, {
      "left" : "if (y == yi && (yi & 1) == 1)",
      "right" : "if (y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[48464-48566]:IfStatement[49133-49235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48494-48566]:Block[49163-49235]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[48516-48548]:ReturnStatement[49185-49217]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[48584-48616]:ReturnStatement[49253-49285]"
    }, {
      "left" : "if (y == Double.NEGATIVE_INFINITY)",
      "right" : "if (y == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[48650-48922]:IfStatement[49319-49591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48685-48922]:Block[49354-49591]"
    }, {
      "left" : "if (x * x == 1.0)",
      "right" : "if (x * x == 1.0)",
      "info" : "IfStatement[48700-48768]:IfStatement[49369-49437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48718-48768]:Block[49387-49437]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[48736-48754]:ReturnStatement[49405-49423]"
    }, {
      "left" : "if (x * x < 1.0)",
      "right" : "if (x * x < 1.0)",
      "info" : "IfStatement[48782-48912]:IfStatement[49451-49581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48799-48863]:Block[49468-49532]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[48817-48849]:ReturnStatement[49486-49518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48869-48912]:Block[49538-49581]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[48887-48898]:ReturnStatement[49556-49567]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[48970-49361]:IfStatement[49639-50030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48981-49361]:Block[49650-50030]"
    }, {
      "left" : "if (y >= TWO_POWER_52 || y <= -TWO_POWER_52)",
      "right" : "if (y >= TWO_POWER_52 || y <= -TWO_POWER_52)",
      "info" : "IfStatement[49044-49139]:IfStatement[49713-49808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49089-49139]:Block[49758-49808]"
    }, {
      "left" : "return pow(-x, y);",
      "right" : "return pow(-x, y);",
      "info" : "ReturnStatement[49107-49125]:ReturnStatement[49776-49794]"
    }, {
      "left" : "if (y == (long) y)",
      "right" : "if (y == (long) y)",
      "info" : "IfStatement[49153-49351]:IfStatement[49822-50020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49172-49295]:Block[49841-49964]"
    }, {
      "left" : "return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",
      "right" : "return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",
      "info" : "ReturnStatement[49228-49281]:ReturnStatement[49897-49950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49301-49351]:Block[49970-50020]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[49319-49337]:ReturnStatement[49988-50006]"
    }, {
      "left" : "double ya;",
      "right" : "double ya;",
      "info" : "VariableDeclarationStatement[49428-49438]:VariableDeclarationStatement[50097-50107]"
    }, {
      "left" : "double yb;",
      "right" : "double yb;",
      "info" : "VariableDeclarationStatement[49447-49457]:VariableDeclarationStatement[50116-50126]"
    }, {
      "left" : "if (y < 8e298 && y > -8e298)",
      "right" : "if (y < 8e298 && y > -8e298)",
      "info" : "IfStatement[49466-49839]:IfStatement[50135-50508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49495-49609]:Block[50164-50278]"
    }, {
      "left" : "double tmp1 = y * HEX_40000000;",
      "right" : "double tmp1 = y * HEX_40000000;",
      "info" : "VariableDeclarationStatement[49509-49540]:VariableDeclarationStatement[50178-50209]"
    }, {
      "left" : "ya = y + tmp1 - tmp1;",
      "right" : "ya = y + tmp1 - tmp1;",
      "info" : "ExpressionStatement[49553-49574]:ExpressionStatement[50222-50243]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[49587-49599]:ExpressionStatement[50256-50268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49615-49839]:Block[50284-50508]"
    }, {
      "left" : "double tmp1 = y * 9.31322574615478515625E-10;",
      "right" : "double tmp1 = y * 9.31322574615478515625E-10;",
      "info" : "VariableDeclarationStatement[49629-49674]:VariableDeclarationStatement[50298-50343]"
    }, {
      "left" : "double tmp2 = tmp1 * 9.31322574615478515625E-10;",
      "right" : "double tmp2 = tmp1 * 9.31322574615478515625E-10;",
      "info" : "VariableDeclarationStatement[49687-49735]:VariableDeclarationStatement[50356-50404]"
    }, {
      "left" : "ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;",
      "right" : "ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;",
      "info" : "ExpressionStatement[49748-49804]:ExpressionStatement[50417-50473]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[49817-49829]:ExpressionStatement[50486-50498]"
    }, {
      "left" : "final double lores = log(x, lns);",
      "right" : "final double lores = log(x, lns);",
      "info" : "VariableDeclarationStatement[49877-49910]:VariableDeclarationStatement[50546-50579]"
    }, {
      "left" : "if (Double.isInfinite(lores))",
      "right" : "if (Double.isInfinite(lores))",
      "info" : "IfStatement[49919-50028]:IfStatement[50588-50697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49948-50028]:Block[50617-50697]"
    }, {
      "left" : "return lores;",
      "right" : "return lores;",
      "info" : "ReturnStatement[50005-50018]:ReturnStatement[50674-50687]"
    }, {
      "left" : "double lna = lns[0];",
      "right" : "double lna = lns[0];",
      "info" : "VariableDeclarationStatement[50038-50058]:VariableDeclarationStatement[50707-50727]"
    }, {
      "left" : "double lnb = lns[1];",
      "right" : "double lnb = lns[1];",
      "info" : "VariableDeclarationStatement[50067-50087]:VariableDeclarationStatement[50736-50756]"
    }, {
      "left" : "double tmp1 = lna * HEX_40000000;",
      "right" : "double tmp1 = lna * HEX_40000000;",
      "info" : "VariableDeclarationStatement[50123-50156]:VariableDeclarationStatement[50792-50825]"
    }, {
      "left" : "double tmp2 = lna + tmp1 - tmp1;",
      "right" : "double tmp2 = lna + tmp1 - tmp1;",
      "info" : "VariableDeclarationStatement[50165-50197]:VariableDeclarationStatement[50834-50866]"
    }, {
      "left" : "lnb += lna - tmp2;",
      "right" : "lnb += lna - tmp2;",
      "info" : "ExpressionStatement[50206-50224]:ExpressionStatement[50875-50893]"
    }, {
      "left" : "lna = tmp2;",
      "right" : "lna = tmp2;",
      "info" : "ExpressionStatement[50233-50244]:ExpressionStatement[50902-50913]"
    }, {
      "left" : "final double aa = lna * ya;",
      "right" : "final double aa = lna * ya;",
      "info" : "VariableDeclarationStatement[50283-50310]:VariableDeclarationStatement[50952-50979]"
    }, {
      "left" : "final double ab = lna * yb + lnb * ya + lnb * yb;",
      "right" : "final double ab = lna * yb + lnb * ya + lnb * yb;",
      "info" : "VariableDeclarationStatement[50319-50368]:VariableDeclarationStatement[50988-51037]"
    }, {
      "left" : "lna = aa+ab;",
      "right" : "lna = aa+ab;",
      "info" : "ExpressionStatement[50378-50390]:ExpressionStatement[51047-51059]"
    }, {
      "left" : "lnb = -(lna - aa - ab);",
      "right" : "lnb = -(lna - aa - ab);",
      "info" : "ExpressionStatement[50399-50422]:ExpressionStatement[51068-51091]"
    }, {
      "left" : "double z = 1.0 / 120.0;",
      "right" : "double z = 1.0 / 120.0;",
      "info" : "VariableDeclarationStatement[50432-50455]:VariableDeclarationStatement[51101-51124]"
    }, {
      "left" : "z = z * lnb + (1.0 / 24.0);",
      "right" : "z = z * lnb + (1.0 / 24.0);",
      "info" : "ExpressionStatement[50464-50491]:ExpressionStatement[51133-51160]"
    }, {
      "left" : "z = z * lnb + (1.0 / 6.0);",
      "right" : "z = z * lnb + (1.0 / 6.0);",
      "info" : "ExpressionStatement[50500-50526]:ExpressionStatement[51169-51195]"
    }, {
      "left" : "z = z * lnb + 0.5;",
      "right" : "z = z * lnb + 0.5;",
      "info" : "ExpressionStatement[50535-50553]:ExpressionStatement[51204-51222]"
    }, {
      "left" : "z = z * lnb + 1.0;",
      "right" : "z = z * lnb + 1.0;",
      "info" : "ExpressionStatement[50562-50580]:ExpressionStatement[51231-51249]"
    }, {
      "left" : "z = z * lnb;",
      "right" : "z = z * lnb;",
      "info" : "ExpressionStatement[50589-50601]:ExpressionStatement[51258-51270]"
    }, {
      "left" : "final double result = exp(lna, z, null);",
      "right" : "final double result = exp(lna, z, null);",
      "info" : "VariableDeclarationStatement[50611-50651]:VariableDeclarationStatement[51280-51320]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50700-50714]:ReturnStatement[51369-51383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50919-53213]:Block[51588-53882]"
    }, {
      "left" : "if (e == 0)",
      "right" : "if (e == 0)",
      "info" : "IfStatement[50930-51050]:IfStatement[51599-51719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50942-50977]:Block[51611-51646]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[50956-50967]:ReturnStatement[51625-51636]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[50983-51050]:IfStatement[51652-51719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50994-51050]:Block[51663-51719]"
    }, {
      "left" : "e = -e;",
      "right" : "e = -e;",
      "info" : "ExpressionStatement[51008-51015]:ExpressionStatement[51677-51684]"
    }, {
      "left" : "d = 1.0 / d;",
      "right" : "d = 1.0 / d;",
      "info" : "ExpressionStatement[51028-51040]:ExpressionStatement[51697-51709]"
    }, {
      "left" : "final int splitFactor = 0x8000001;",
      "right" : "final int splitFactor = 0x8000001;",
      "info" : "VariableDeclarationStatement[51220-51254]:VariableDeclarationStatement[51889-51923]"
    }, {
      "left" : "final double cd       = splitFactor * d;",
      "right" : "final double cd       = splitFactor * d;",
      "info" : "VariableDeclarationStatement[51263-51303]:VariableDeclarationStatement[51932-51972]"
    }, {
      "left" : "final double d1High   = cd - (cd - d);",
      "right" : "final double d1High   = cd - (cd - d);",
      "info" : "VariableDeclarationStatement[51312-51350]:VariableDeclarationStatement[51981-52019]"
    }, {
      "left" : "final double d1Low    = d - d1High;",
      "right" : "final double d1Low    = d - d1High;",
      "info" : "VariableDeclarationStatement[51359-51394]:VariableDeclarationStatement[52028-52063]"
    }, {
      "left" : "double resultHigh = 1;",
      "right" : "double resultHigh = 1;",
      "info" : "VariableDeclarationStatement[51430-51452]:VariableDeclarationStatement[52099-52121]"
    }, {
      "left" : "double resultLow  = 0;",
      "right" : "double resultLow  = 0;",
      "info" : "VariableDeclarationStatement[51461-51483]:VariableDeclarationStatement[52130-52152]"
    }, {
      "left" : "double d2p     = d;",
      "right" : "double d2p     = d;",
      "info" : "VariableDeclarationStatement[51511-51530]:VariableDeclarationStatement[52180-52199]"
    }, {
      "left" : "double d2pHigh = d1High;",
      "right" : "double d2pHigh = d1High;",
      "info" : "VariableDeclarationStatement[51539-51563]:VariableDeclarationStatement[52208-52232]"
    }, {
      "left" : "double d2pLow  = d1Low;",
      "right" : "double d2pLow  = d1Low;",
      "info" : "VariableDeclarationStatement[51572-51595]:VariableDeclarationStatement[52241-52264]"
    }, {
      "left" : "while (e != 0)",
      "right" : "while (e != 0)",
      "info" : "WhileStatement[51605-53166]:WhileStatement[52274-53835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51620-53166]:Block[52289-53835]"
    }, {
      "left" : "if ((e & 0x1) != 0)",
      "right" : "if ((e & 0x1) != 0)",
      "info" : "IfStatement[51635-52353]:IfStatement[52304-53022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51655-52353]:Block[52324-53022]"
    }, {
      "left" : "final double tmpHigh = resultHigh * d2p;",
      "right" : "final double tmpHigh = resultHigh * d2p;",
      "info" : "VariableDeclarationStatement[51903-51943]:VariableDeclarationStatement[52572-52612]"
    }, {
      "left" : "final double cRH     = splitFactor * resultHigh;",
      "right" : "final double cRH     = splitFactor * resultHigh;",
      "info" : "VariableDeclarationStatement[51960-52008]:VariableDeclarationStatement[52629-52677]"
    }, {
      "left" : "final double rHH     = cRH - (cRH - resultHigh);",
      "right" : "final double rHH     = cRH - (cRH - resultHigh);",
      "info" : "VariableDeclarationStatement[52025-52073]:VariableDeclarationStatement[52694-52742]"
    }, {
      "left" : "final double rHL     = resultHigh - rHH;",
      "right" : "final double rHL     = resultHigh - rHH;",
      "info" : "VariableDeclarationStatement[52090-52130]:VariableDeclarationStatement[52759-52799]"
    }, {
      "left" : "final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);",
      "right" : "final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);",
      "info" : "VariableDeclarationStatement[52147-52246]:VariableDeclarationStatement[52816-52915]"
    }, {
      "left" : "resultHigh = tmpHigh;",
      "right" : "resultHigh = tmpHigh;",
      "info" : "ExpressionStatement[52263-52284]:ExpressionStatement[52932-52953]"
    }, {
      "left" : "resultLow  = resultLow * d2p + tmpLow;",
      "right" : "resultLow  = resultLow * d2p + tmpLow;",
      "info" : "ExpressionStatement[52301-52339]:ExpressionStatement[52970-53008]"
    }, {
      "left" : "final double tmpHigh = d2pHigh * d2p;",
      "right" : "final double tmpHigh = d2pHigh * d2p;",
      "info" : "VariableDeclarationStatement[52587-52624]:VariableDeclarationStatement[53256-53293]"
    }, {
      "left" : "final double cD2pH   = splitFactor * d2pHigh;",
      "right" : "final double cD2pH   = splitFactor * d2pHigh;",
      "info" : "VariableDeclarationStatement[52637-52682]:VariableDeclarationStatement[53306-53351]"
    }, {
      "left" : "final double d2pHH   = cD2pH - (cD2pH - d2pHigh);",
      "right" : "final double d2pHH   = cD2pH - (cD2pH - d2pHigh);",
      "info" : "VariableDeclarationStatement[52695-52744]:VariableDeclarationStatement[53364-53413]"
    }, {
      "left" : "final double d2pHL   = d2pHigh - d2pHH;",
      "right" : "final double d2pHL   = d2pHigh - d2pHH;",
      "info" : "VariableDeclarationStatement[52757-52796]:VariableDeclarationStatement[53426-53465]"
    }, {
      "left" : "final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);",
      "right" : "final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);",
      "info" : "VariableDeclarationStatement[52809-52916]:VariableDeclarationStatement[53478-53585]"
    }, {
      "left" : "final double cTmpH   = splitFactor * tmpHigh;",
      "right" : "final double cTmpH   = splitFactor * tmpHigh;",
      "info" : "VariableDeclarationStatement[52929-52974]:VariableDeclarationStatement[53598-53643]"
    }, {
      "left" : "d2pHigh = cTmpH - (cTmpH - tmpHigh);",
      "right" : "d2pHigh = cTmpH - (cTmpH - tmpHigh);",
      "info" : "ExpressionStatement[52987-53023]:ExpressionStatement[53656-53692]"
    }, {
      "left" : "d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);",
      "right" : "d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);",
      "info" : "ExpressionStatement[53036-53090]:ExpressionStatement[53705-53759]"
    }, {
      "left" : "d2p     = d2pHigh + d2pLow;",
      "right" : "d2p     = d2pHigh + d2pLow;",
      "info" : "ExpressionStatement[53103-53130]:ExpressionStatement[53772-53799]"
    }, {
      "left" : "e = e >> 1;",
      "right" : "e = e >> 1;",
      "info" : "ExpressionStatement[53144-53155]:ExpressionStatement[53813-53824]"
    }, {
      "left" : "return resultHigh + resultLow;",
      "right" : "return resultHigh + resultLow;",
      "info" : "ReturnStatement[53176-53206]:ReturnStatement[53845-53875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53450-53736]:Block[54119-54405]"
    }, {
      "left" : "double x2 = x*x;",
      "right" : "double x2 = x*x;",
      "info" : "VariableDeclarationStatement[53460-53476]:VariableDeclarationStatement[54129-54145]"
    }, {
      "left" : "double p = 2.7553817452272217E-6;",
      "right" : "double p = 2.7553817452272217E-6;",
      "info" : "VariableDeclarationStatement[53486-53519]:VariableDeclarationStatement[54155-54188]"
    }, {
      "left" : "p = p * x2 + -1.9841269659586505E-4;",
      "right" : "p = p * x2 + -1.9841269659586505E-4;",
      "info" : "ExpressionStatement[53528-53564]:ExpressionStatement[54197-54233]"
    }, {
      "left" : "p = p * x2 + 0.008333333333329196;",
      "right" : "p = p * x2 + 0.008333333333329196;",
      "info" : "ExpressionStatement[53573-53607]:ExpressionStatement[54242-54276]"
    }, {
      "left" : "p = p * x2 + -0.16666666666666666;",
      "right" : "p = p * x2 + -0.16666666666666666;",
      "info" : "ExpressionStatement[53616-53650]:ExpressionStatement[54285-54319]"
    }, {
      "left" : "p = p * x2 * x;",
      "right" : "p = p * x2 * x;",
      "info" : "ExpressionStatement[53696-53711]:ExpressionStatement[54365-54380]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[53721-53730]:ReturnStatement[54390-54399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53965-54206]:Block[54634-54875]"
    }, {
      "left" : "double x2 = x*x;",
      "right" : "double x2 = x*x;",
      "info" : "VariableDeclarationStatement[53975-53991]:VariableDeclarationStatement[54644-54660]"
    }, {
      "left" : "double p = 2.479773539153719E-5;",
      "right" : "double p = 2.479773539153719E-5;",
      "info" : "VariableDeclarationStatement[54001-54033]:VariableDeclarationStatement[54670-54702]"
    }, {
      "left" : "p = p * x2 + -0.0013888888689039883;",
      "right" : "p = p * x2 + -0.0013888888689039883;",
      "info" : "ExpressionStatement[54042-54078]:ExpressionStatement[54711-54747]"
    }, {
      "left" : "p = p * x2 + 0.041666666666621166;",
      "right" : "p = p * x2 + 0.041666666666621166;",
      "info" : "ExpressionStatement[54087-54121]:ExpressionStatement[54756-54790]"
    }, {
      "left" : "p = p * x2 + -0.49999999999999994;",
      "right" : "p = p * x2 + -0.49999999999999994;",
      "info" : "ExpressionStatement[54130-54164]:ExpressionStatement[54799-54833]"
    }, {
      "left" : "p *= x2;",
      "right" : "p *= x2;",
      "info" : "ExpressionStatement[54173-54181]:ExpressionStatement[54842-54850]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[54191-54200]:ReturnStatement[54860-54869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54544-57469]:Block[55213-58138]"
    }, {
      "left" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "right" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "info" : "VariableDeclarationStatement[54554-54589]:VariableDeclarationStatement[55223-55258]"
    }, {
      "left" : "final double epsilon = xa - EIGHTHS[idx];",
      "right" : "final double epsilon = xa - EIGHTHS[idx];",
      "info" : "VariableDeclarationStatement[54598-54639]:VariableDeclarationStatement[55267-55308]"
    }, {
      "left" : "final double sintA = SINE_TABLE_A[idx];",
      "right" : "final double sintA = SINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[54687-54726]:VariableDeclarationStatement[55356-55395]"
    }, {
      "left" : "final double sintB = SINE_TABLE_B[idx];",
      "right" : "final double sintB = SINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[54735-54774]:VariableDeclarationStatement[55404-55443]"
    }, {
      "left" : "final double costA = COSINE_TABLE_A[idx];",
      "right" : "final double costA = COSINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[54783-54824]:VariableDeclarationStatement[55452-55493]"
    }, {
      "left" : "final double costB = COSINE_TABLE_B[idx];",
      "right" : "final double costB = COSINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[54833-54874]:VariableDeclarationStatement[55502-55543]"
    }, {
      "left" : "double sinEpsA = epsilon;",
      "right" : "double sinEpsA = epsilon;",
      "info" : "VariableDeclarationStatement[54941-54966]:VariableDeclarationStatement[55610-55635]"
    }, {
      "left" : "double sinEpsB = polySine(epsilon);",
      "right" : "double sinEpsB = polySine(epsilon);",
      "info" : "VariableDeclarationStatement[54975-55010]:VariableDeclarationStatement[55644-55679]"
    }, {
      "left" : "final double cosEpsA = 1.0;",
      "right" : "final double cosEpsA = 1.0;",
      "info" : "VariableDeclarationStatement[55019-55046]:VariableDeclarationStatement[55688-55715]"
    }, {
      "left" : "final double cosEpsB = polyCosine(epsilon);",
      "right" : "final double cosEpsB = polyCosine(epsilon);",
      "info" : "VariableDeclarationStatement[55055-55098]:VariableDeclarationStatement[55724-55767]"
    }, {
      "left" : "final double temp = sinEpsA * HEX_40000000;",
      "right" : "final double temp = sinEpsA * HEX_40000000;",
      "info" : "VariableDeclarationStatement[55147-55190]:VariableDeclarationStatement[55816-55859]"
    }, {
      "left" : "double temp2 = (sinEpsA + temp) - temp;",
      "right" : "double temp2 = (sinEpsA + temp) - temp;",
      "info" : "VariableDeclarationStatement[55199-55238]:VariableDeclarationStatement[55868-55907]"
    }, {
      "left" : "sinEpsB +=  sinEpsA - temp2;",
      "right" : "sinEpsB +=  sinEpsA - temp2;",
      "info" : "ExpressionStatement[55247-55275]:ExpressionStatement[55916-55944]"
    }, {
      "left" : "sinEpsA = temp2;",
      "right" : "sinEpsA = temp2;",
      "info" : "ExpressionStatement[55284-55300]:ExpressionStatement[55953-55969]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[55365-55379]:VariableDeclarationStatement[56034-56048]"
    }, {
      "left" : "double a = 0;",
      "right" : "double a = 0;",
      "info" : "VariableDeclarationStatement[56186-56199]:VariableDeclarationStatement[56855-56868]"
    }, {
      "left" : "double b = 0;",
      "right" : "double b = 0;",
      "info" : "VariableDeclarationStatement[56208-56221]:VariableDeclarationStatement[56877-56890]"
    }, {
      "left" : "double t = sintA;",
      "right" : "double t = sintA;",
      "info" : "VariableDeclarationStatement[56231-56248]:VariableDeclarationStatement[56900-56917]"
    }, {
      "left" : "double c = a + t;",
      "right" : "double c = a + t;",
      "info" : "VariableDeclarationStatement[56257-56274]:VariableDeclarationStatement[56926-56943]"
    }, {
      "left" : "double d = -(c - a - t);",
      "right" : "double d = -(c - a - t);",
      "info" : "VariableDeclarationStatement[56283-56307]:VariableDeclarationStatement[56952-56976]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[56316-56322]:ExpressionStatement[56985-56991]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[56331-56341]:ExpressionStatement[57000-57010]"
    }, {
      "left" : "t = costA * sinEpsA;",
      "right" : "t = costA * sinEpsA;",
      "info" : "ExpressionStatement[56351-56371]:ExpressionStatement[57020-57040]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[56380-56390]:ExpressionStatement[57049-57059]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[56399-56416]:ExpressionStatement[57068-57085]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[56425-56431]:ExpressionStatement[57094-57100]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[56440-56450]:ExpressionStatement[57109-57119]"
    }, {
      "left" : "b = b + sintA * cosEpsB + costA * sinEpsB;",
      "right" : "b = b + sintA * cosEpsB + costA * sinEpsB;",
      "info" : "ExpressionStatement[56460-56502]:ExpressionStatement[57129-57171]"
    }, {
      "left" : "b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;",
      "right" : "b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;",
      "info" : "ExpressionStatement[56708-56776]:ExpressionStatement[57377-57445]"
    }, {
      "left" : "if (xb != 0.0)",
      "right" : "if (xb != 0.0)",
      "info" : "IfStatement[57148-57414]:IfStatement[57817-58083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57163-57414]:Block[57832-58083]"
    }, {
      "left" : "t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;",
      "right" : "t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;",
      "info" : "ExpressionStatement[57177-57283]:ExpressionStatement[57846-57952]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[57322-57332]:ExpressionStatement[57991-58001]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[57345-57362]:ExpressionStatement[58014-58031]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[57375-57381]:ExpressionStatement[58044-58050]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[57394-57404]:ExpressionStatement[58063-58073]"
    }, {
      "left" : "result = a + b;",
      "right" : "result = a + b;",
      "info" : "ExpressionStatement[57424-57439]:ExpressionStatement[58093-58108]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[57449-57463]:ReturnStatement[58118-58132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57831-58063]:Block[58500-58732]"
    }, {
      "left" : "final double pi2a = 1.5707963267948966;",
      "right" : "final double pi2a = 1.5707963267948966;",
      "info" : "VariableDeclarationStatement[57841-57880]:VariableDeclarationStatement[58510-58549]"
    }, {
      "left" : "final double pi2b = 6.123233995736766E-17;",
      "right" : "final double pi2b = 6.123233995736766E-17;",
      "info" : "VariableDeclarationStatement[57889-57931]:VariableDeclarationStatement[58558-58600]"
    }, {
      "left" : "final double a = pi2a - xa;",
      "right" : "final double a = pi2a - xa;",
      "info" : "VariableDeclarationStatement[57941-57968]:VariableDeclarationStatement[58610-58637]"
    }, {
      "left" : "double b = -(a - pi2a + xa);",
      "right" : "double b = -(a - pi2a + xa);",
      "info" : "VariableDeclarationStatement[57977-58005]:VariableDeclarationStatement[58646-58674]"
    }, {
      "left" : "b += pi2b - xb;",
      "right" : "b += pi2b - xb;",
      "info" : "ExpressionStatement[58014-58029]:ExpressionStatement[58683-58698]"
    }, {
      "left" : "return sinQ(a, b);",
      "right" : "return sinQ(a, b);",
      "info" : "ReturnStatement[58039-58057]:ReturnStatement[58708-58726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58554-62586]:Block[59223-63255]"
    }, {
      "left" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "right" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "info" : "VariableDeclarationStatement[58565-58600]:VariableDeclarationStatement[59234-59269]"
    }, {
      "left" : "final double epsilon = xa - EIGHTHS[idx];",
      "right" : "final double epsilon = xa - EIGHTHS[idx];",
      "info" : "VariableDeclarationStatement[58609-58650]:VariableDeclarationStatement[59278-59319]"
    }, {
      "left" : "final double sintA = SINE_TABLE_A[idx];",
      "right" : "final double sintA = SINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[58698-58737]:VariableDeclarationStatement[59367-59406]"
    }, {
      "left" : "final double sintB = SINE_TABLE_B[idx];",
      "right" : "final double sintB = SINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[58746-58785]:VariableDeclarationStatement[59415-59454]"
    }, {
      "left" : "final double costA = COSINE_TABLE_A[idx];",
      "right" : "final double costA = COSINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[58794-58835]:VariableDeclarationStatement[59463-59504]"
    }, {
      "left" : "final double costB = COSINE_TABLE_B[idx];",
      "right" : "final double costB = COSINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[58844-58885]:VariableDeclarationStatement[59513-59554]"
    }, {
      "left" : "double sinEpsA = epsilon;",
      "right" : "double sinEpsA = epsilon;",
      "info" : "VariableDeclarationStatement[58952-58977]:VariableDeclarationStatement[59621-59646]"
    }, {
      "left" : "double sinEpsB = polySine(epsilon);",
      "right" : "double sinEpsB = polySine(epsilon);",
      "info" : "VariableDeclarationStatement[58986-59021]:VariableDeclarationStatement[59655-59690]"
    }, {
      "left" : "final double cosEpsA = 1.0;",
      "right" : "final double cosEpsA = 1.0;",
      "info" : "VariableDeclarationStatement[59030-59057]:VariableDeclarationStatement[59699-59726]"
    }, {
      "left" : "final double cosEpsB = polyCosine(epsilon);",
      "right" : "final double cosEpsB = polyCosine(epsilon);",
      "info" : "VariableDeclarationStatement[59066-59109]:VariableDeclarationStatement[59735-59778]"
    }, {
      "left" : "double temp = sinEpsA * HEX_40000000;",
      "right" : "double temp = sinEpsA * HEX_40000000;",
      "info" : "VariableDeclarationStatement[59158-59195]:VariableDeclarationStatement[59827-59864]"
    }, {
      "left" : "double temp2 = (sinEpsA + temp) - temp;",
      "right" : "double temp2 = (sinEpsA + temp) - temp;",
      "info" : "VariableDeclarationStatement[59204-59243]:VariableDeclarationStatement[59873-59912]"
    }, {
      "left" : "sinEpsB +=  sinEpsA - temp2;",
      "right" : "sinEpsB +=  sinEpsA - temp2;",
      "info" : "ExpressionStatement[59252-59280]:ExpressionStatement[59921-59949]"
    }, {
      "left" : "sinEpsA = temp2;",
      "right" : "sinEpsA = temp2;",
      "info" : "ExpressionStatement[59289-59305]:ExpressionStatement[59958-59974]"
    }, {
      "left" : "double a = 0;",
      "right" : "double a = 0;",
      "info" : "VariableDeclarationStatement[60168-60181]:VariableDeclarationStatement[60837-60850]"
    }, {
      "left" : "double b = 0;",
      "right" : "double b = 0;",
      "info" : "VariableDeclarationStatement[60190-60203]:VariableDeclarationStatement[60859-60872]"
    }, {
      "left" : "double t = sintA;",
      "right" : "double t = sintA;",
      "info" : "VariableDeclarationStatement[60237-60254]:VariableDeclarationStatement[60906-60923]"
    }, {
      "left" : "double c = a + t;",
      "right" : "double c = a + t;",
      "info" : "VariableDeclarationStatement[60263-60280]:VariableDeclarationStatement[60932-60949]"
    }, {
      "left" : "double d = -(c - a - t);",
      "right" : "double d = -(c - a - t);",
      "info" : "VariableDeclarationStatement[60289-60313]:VariableDeclarationStatement[60958-60982]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[60322-60328]:ExpressionStatement[60991-60997]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[60337-60347]:ExpressionStatement[61006-61016]"
    }, {
      "left" : "t = costA*sinEpsA;",
      "right" : "t = costA*sinEpsA;",
      "info" : "ExpressionStatement[60357-60375]:ExpressionStatement[61026-61044]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[60384-60394]:ExpressionStatement[61053-61063]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[60403-60420]:ExpressionStatement[61072-61089]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[60429-60435]:ExpressionStatement[61098-61104]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[60444-60454]:ExpressionStatement[61113-61123]"
    }, {
      "left" : "b = b + sintA*cosEpsB + costA*sinEpsB;",
      "right" : "b = b + sintA*cosEpsB + costA*sinEpsB;",
      "info" : "ExpressionStatement[60464-60502]:ExpressionStatement[61133-61171]"
    }, {
      "left" : "b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;",
      "right" : "b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;",
      "info" : "ExpressionStatement[60511-60573]:ExpressionStatement[61180-61242]"
    }, {
      "left" : "double sina = a + b;",
      "right" : "double sina = a + b;",
      "info" : "VariableDeclarationStatement[60583-60603]:VariableDeclarationStatement[61252-61272]"
    }, {
      "left" : "double sinb = -(sina - a - b);",
      "right" : "double sinb = -(sina - a - b);",
      "info" : "VariableDeclarationStatement[60612-60642]:VariableDeclarationStatement[61281-61311]"
    }, {
      "left" : "a = b = c = d = 0.0;",
      "right" : "a = b = c = d = 0.0;",
      "info" : "ExpressionStatement[60679-60699]:ExpressionStatement[61348-61368]"
    }, {
      "left" : "t = costA*cosEpsA;",
      "right" : "t = costA*cosEpsA;",
      "info" : "ExpressionStatement[60709-60727]:ExpressionStatement[61378-61396]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[60736-60746]:ExpressionStatement[61405-61415]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[60755-60772]:ExpressionStatement[61424-61441]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[60781-60787]:ExpressionStatement[61450-61456]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[60796-60806]:ExpressionStatement[61465-61475]"
    }, {
      "left" : "t = -sintA*sinEpsA;",
      "right" : "t = -sintA*sinEpsA;",
      "info" : "ExpressionStatement[60816-60835]:ExpressionStatement[61485-61504]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[60844-60854]:ExpressionStatement[61513-61523]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[60863-60880]:ExpressionStatement[61532-61549]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[60889-60895]:ExpressionStatement[61558-61564]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[60904-60914]:ExpressionStatement[61573-61583]"
    }, {
      "left" : "b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;",
      "right" : "b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;",
      "info" : "ExpressionStatement[60924-60978]:ExpressionStatement[61593-61647]"
    }, {
      "left" : "b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);",
      "right" : "b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);",
      "info" : "ExpressionStatement[60987-61043]:ExpressionStatement[61656-61712]"
    }, {
      "left" : "double cosa = a + b;",
      "right" : "double cosa = a + b;",
      "info" : "VariableDeclarationStatement[61053-61073]:VariableDeclarationStatement[61722-61742]"
    }, {
      "left" : "double cosb = -(cosa - a - b);",
      "right" : "double cosb = -(cosa - a - b);",
      "info" : "VariableDeclarationStatement[61082-61112]:VariableDeclarationStatement[61751-61781]"
    }, {
      "left" : "if (cotanFlag)",
      "right" : "if (cotanFlag)",
      "info" : "IfStatement[61122-61270]:IfStatement[61791-61939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61137-61270]:Block[61806-61939]"
    }, {
      "left" : "double tmp;",
      "right" : "double tmp;",
      "info" : "VariableDeclarationStatement[61151-61162]:VariableDeclarationStatement[61820-61831]"
    }, {
      "left" : "tmp = cosa;",
      "right" : "tmp = cosa;",
      "info" : "ExpressionStatement[61175-61186]:ExpressionStatement[61844-61855]"
    }, {
      "left" : "cosa = sina;",
      "right" : "cosa = sina;",
      "info" : "ExpressionStatement[61187-61199]:ExpressionStatement[61856-61868]"
    }, {
      "left" : "sina = tmp;",
      "right" : "sina = tmp;",
      "info" : "ExpressionStatement[61200-61211]:ExpressionStatement[61869-61880]"
    }, {
      "left" : "tmp = cosb;",
      "right" : "tmp = cosb;",
      "info" : "ExpressionStatement[61224-61235]:ExpressionStatement[61893-61904]"
    }, {
      "left" : "cosb = sinb;",
      "right" : "cosb = sinb;",
      "info" : "ExpressionStatement[61236-61248]:ExpressionStatement[61905-61917]"
    }, {
      "left" : "sinb = tmp;",
      "right" : "sinb = tmp;",
      "info" : "ExpressionStatement[61249-61260]:ExpressionStatement[61918-61929]"
    }, {
      "left" : "double est = sina/cosa;",
      "right" : "double est = sina/cosa;",
      "info" : "VariableDeclarationStatement[61581-61604]:VariableDeclarationStatement[62250-62273]"
    }, {
      "left" : "temp = est * HEX_40000000;",
      "right" : "temp = est * HEX_40000000;",
      "info" : "ExpressionStatement[61694-61720]:ExpressionStatement[62363-62389]"
    }, {
      "left" : "double esta = (est + temp) - temp;",
      "right" : "double esta = (est + temp) - temp;",
      "info" : "VariableDeclarationStatement[61729-61763]:VariableDeclarationStatement[62398-62432]"
    }, {
      "left" : "double estb =  est - esta;",
      "right" : "double estb =  est - esta;",
      "info" : "VariableDeclarationStatement[61772-61798]:VariableDeclarationStatement[62441-62467]"
    }, {
      "left" : "temp = cosa * HEX_40000000;",
      "right" : "temp = cosa * HEX_40000000;",
      "info" : "ExpressionStatement[61808-61835]:ExpressionStatement[62477-62504]"
    }, {
      "left" : "double cosaa = (cosa + temp) - temp;",
      "right" : "double cosaa = (cosa + temp) - temp;",
      "info" : "VariableDeclarationStatement[61844-61880]:VariableDeclarationStatement[62513-62549]"
    }, {
      "left" : "double cosab =  cosa - cosaa;",
      "right" : "double cosab =  cosa - cosaa;",
      "info" : "VariableDeclarationStatement[61889-61918]:VariableDeclarationStatement[62558-62587]"
    }, {
      "left" : "double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;",
      "right" : "double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;",
      "info" : "VariableDeclarationStatement[62012-62089]:VariableDeclarationStatement[62681-62758]"
    }, {
      "left" : "err += sinb/cosa;",
      "right" : "err += sinb/cosa;",
      "info" : "ExpressionStatement[62135-62152]:ExpressionStatement[62804-62821]"
    }, {
      "left" : "err += -sina * cosb / cosa / cosa;",
      "right" : "err += -sina * cosb / cosa / cosa;",
      "info" : "ExpressionStatement[62210-62244]:ExpressionStatement[62879-62913]"
    }, {
      "left" : "if (xb != 0.0)",
      "right" : "if (xb != 0.0)",
      "info" : "IfStatement[62286-62555]:IfStatement[62955-63224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62301-62555]:Block[62970-63224]"
    }, {
      "left" : "double xbadj = xb + est*est*xb;",
      "right" : "double xbadj = xb + est*est*xb;",
      "info" : "VariableDeclarationStatement[62412-62443]:VariableDeclarationStatement[63081-63112]"
    }, {
      "left" : "if (cotanFlag)",
      "right" : "if (cotanFlag)",
      "info" : "IfStatement[62456-62518]:IfStatement[63125-63187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62471-62518]:Block[63140-63187]"
    }, {
      "left" : "xbadj = -xbadj;",
      "right" : "xbadj = -xbadj;",
      "info" : "ExpressionStatement[62489-62504]:ExpressionStatement[63158-63173]"
    }, {
      "left" : "err += xbadj;",
      "right" : "err += xbadj;",
      "info" : "ExpressionStatement[62532-62545]:ExpressionStatement[63201-63214]"
    }, {
      "left" : "return est+err;",
      "right" : "return est+err;",
      "info" : "ReturnStatement[62565-62580]:ReturnStatement[63234-63249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63167-69057]:Block[63836-69726]"
    }, {
      "left" : "long inbits = Double.doubleToLongBits(x);",
      "right" : "long inbits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[63220-63261]:VariableDeclarationStatement[63889-63930]"
    }, {
      "left" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "VariableDeclarationStatement[63270-63323]:VariableDeclarationStatement[63939-63992]"
    }, {
      "left" : "inbits &= 0x000fffffffffffffL;",
      "right" : "inbits &= 0x000fffffffffffffL;",
      "info" : "ExpressionStatement[63385-63415]:ExpressionStatement[64054-64084]"
    }, {
      "left" : "inbits |= 0x0010000000000000L;",
      "right" : "inbits |= 0x0010000000000000L;",
      "info" : "ExpressionStatement[63424-63454]:ExpressionStatement[64093-64123]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[63520-63531]:ExpressionStatement[64189-64200]"
    }, {
      "left" : "inbits <<= 11;",
      "right" : "inbits <<= 11;",
      "info" : "ExpressionStatement[63540-63554]:ExpressionStatement[64209-64223]"
    }, {
      "left" : "long shpi0;",
      "right" : "long shpi0;",
      "info" : "VariableDeclarationStatement[63632-63643]:VariableDeclarationStatement[64301-64312]"
    }, {
      "left" : "long shpiA;",
      "right" : "long shpiA;",
      "info" : "VariableDeclarationStatement[63652-63663]:VariableDeclarationStatement[64321-64332]"
    }, {
      "left" : "long shpiB;",
      "right" : "long shpiB;",
      "info" : "VariableDeclarationStatement[63672-63683]:VariableDeclarationStatement[64341-64352]"
    }, {
      "left" : "int idx = exponent >> 6;",
      "right" : "int idx = exponent >> 6;",
      "info" : "VariableDeclarationStatement[63692-63716]:VariableDeclarationStatement[64361-64385]"
    }, {
      "left" : "int shift = exponent - (idx << 6);",
      "right" : "int shift = exponent - (idx << 6);",
      "info" : "VariableDeclarationStatement[63725-63759]:VariableDeclarationStatement[64394-64428]"
    }, {
      "left" : "if (shift != 0)",
      "right" : "if (shift != 0)",
      "info" : "IfStatement[63769-64228]:IfStatement[64438-64897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63785-64082]:Block[64454-64751]"
    }, {
      "left" : "shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);",
      "right" : "shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);",
      "info" : "ExpressionStatement[63799-63852]:ExpressionStatement[64468-64521]"
    }, {
      "left" : "shpi0 |= RECIP_2PI[idx] >>> (64-shift);",
      "right" : "shpi0 |= RECIP_2PI[idx] >>> (64-shift);",
      "info" : "ExpressionStatement[63865-63904]:ExpressionStatement[64534-64573]"
    }, {
      "left" : "shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));",
      "right" : "shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));",
      "info" : "ExpressionStatement[63917-63987]:ExpressionStatement[64586-64656]"
    }, {
      "left" : "shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));",
      "right" : "shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));",
      "info" : "ExpressionStatement[64000-64072]:ExpressionStatement[64669-64741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64088-64228]:Block[64757-64897]"
    }, {
      "left" : "shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];",
      "right" : "shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];",
      "info" : "ExpressionStatement[64102-64144]:ExpressionStatement[64771-64813]"
    }, {
      "left" : "shpiA = RECIP_2PI[idx];",
      "right" : "shpiA = RECIP_2PI[idx];",
      "info" : "ExpressionStatement[64157-64180]:ExpressionStatement[64826-64849]"
    }, {
      "left" : "shpiB = RECIP_2PI[idx+1];",
      "right" : "shpiB = RECIP_2PI[idx+1];",
      "info" : "ExpressionStatement[64193-64218]:ExpressionStatement[64862-64887]"
    }, {
      "left" : "long a = inbits >>> 32;",
      "right" : "long a = inbits >>> 32;",
      "info" : "VariableDeclarationStatement[64276-64299]:VariableDeclarationStatement[64945-64968]"
    }, {
      "left" : "long b = inbits & 0xffffffffL;",
      "right" : "long b = inbits & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[64308-64338]:VariableDeclarationStatement[64977-65007]"
    }, {
      "left" : "long c = shpiA >>> 32;",
      "right" : "long c = shpiA >>> 32;",
      "info" : "VariableDeclarationStatement[64348-64370]:VariableDeclarationStatement[65017-65039]"
    }, {
      "left" : "long d = shpiA & 0xffffffffL;",
      "right" : "long d = shpiA & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[64379-64408]:VariableDeclarationStatement[65048-65077]"
    }, {
      "left" : "long ac = a * c;",
      "right" : "long ac = a * c;",
      "info" : "VariableDeclarationStatement[64418-64434]:VariableDeclarationStatement[65087-65103]"
    }, {
      "left" : "long bd = b * d;",
      "right" : "long bd = b * d;",
      "info" : "VariableDeclarationStatement[64443-64459]:VariableDeclarationStatement[65112-65128]"
    }, {
      "left" : "long bc = b * c;",
      "right" : "long bc = b * c;",
      "info" : "VariableDeclarationStatement[64468-64484]:VariableDeclarationStatement[65137-65153]"
    }, {
      "left" : "long ad = a * d;",
      "right" : "long ad = a * d;",
      "info" : "VariableDeclarationStatement[64493-64509]:VariableDeclarationStatement[65162-65178]"
    }, {
      "left" : "long prodB = bd + (ad << 32);",
      "right" : "long prodB = bd + (ad << 32);",
      "info" : "VariableDeclarationStatement[64519-64548]:VariableDeclarationStatement[65188-65217]"
    }, {
      "left" : "long prodA = ac + (ad >>> 32);",
      "right" : "long prodA = ac + (ad >>> 32);",
      "info" : "VariableDeclarationStatement[64557-64587]:VariableDeclarationStatement[65226-65256]"
    }, {
      "left" : "boolean bita = (bd & 0x8000000000000000L) != 0;",
      "right" : "boolean bita = (bd & 0x8000000000000000L) != 0;",
      "info" : "VariableDeclarationStatement[64597-64644]:VariableDeclarationStatement[65266-65313]"
    }, {
      "left" : "boolean bitb = (ad & 0x80000000L ) != 0;",
      "right" : "boolean bitb = (ad & 0x80000000L ) != 0;",
      "info" : "VariableDeclarationStatement[64653-64693]:VariableDeclarationStatement[65322-65362]"
    }, {
      "left" : "boolean bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "boolean bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "VariableDeclarationStatement[64702-64754]:VariableDeclarationStatement[65371-65423]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[64784-64885]:IfStatement[65453-65554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64853-64885]:Block[65522-65554]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[64867-64875]:ExpressionStatement[65536-65544]"
    }, {
      "left" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[64895-64937]:ExpressionStatement[65564-65606]"
    }, {
      "left" : "bitb = (bc & 0x80000000L ) != 0;",
      "right" : "bitb = (bc & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[64946-64978]:ExpressionStatement[65615-65647]"
    }, {
      "left" : "prodB = prodB + (bc << 32);",
      "right" : "prodB = prodB + (bc << 32);",
      "info" : "ExpressionStatement[64988-65015]:ExpressionStatement[65657-65684]"
    }, {
      "left" : "prodA = prodA + (bc >>> 32);",
      "right" : "prodA = prodA + (bc >>> 32);",
      "info" : "ExpressionStatement[65024-65052]:ExpressionStatement[65693-65721]"
    }, {
      "left" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[65062-65106]:ExpressionStatement[65731-65775]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[65136-65237]:IfStatement[65805-65906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65205-65237]:Block[65874-65906]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[65219-65227]:ExpressionStatement[65888-65896]"
    }, {
      "left" : "c = shpiB >>> 32;",
      "right" : "c = shpiB >>> 32;",
      "info" : "ExpressionStatement[65285-65302]:ExpressionStatement[65954-65971]"
    }, {
      "left" : "d = shpiB & 0xffffffffL;",
      "right" : "d = shpiB & 0xffffffffL;",
      "info" : "ExpressionStatement[65311-65335]:ExpressionStatement[65980-66004]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[65344-65355]:ExpressionStatement[66013-66024]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[65364-65375]:ExpressionStatement[66033-66044]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[65384-65395]:ExpressionStatement[66053-66064]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[65433-65462]:ExpressionStatement[66102-66131]"
    }, {
      "left" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[65472-65514]:ExpressionStatement[66141-66183]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[65523-65563]:ExpressionStatement[66192-66232]"
    }, {
      "left" : "prodB += ac;",
      "right" : "prodB += ac;",
      "info" : "ExpressionStatement[65572-65584]:ExpressionStatement[66241-66253]"
    }, {
      "left" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[65593-65637]:ExpressionStatement[66262-66306]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[65666-65767]:IfStatement[66335-66436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65735-65767]:Block[66404-66436]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[65749-65757]:ExpressionStatement[66418-66426]"
    }, {
      "left" : "c = shpi0 >>> 32;",
      "right" : "c = shpi0 >>> 32;",
      "info" : "ExpressionStatement[65809-65826]:ExpressionStatement[66478-66495]"
    }, {
      "left" : "d = shpi0 & 0xffffffffL;",
      "right" : "d = shpi0 & 0xffffffffL;",
      "info" : "ExpressionStatement[65835-65859]:ExpressionStatement[66504-66528]"
    }, {
      "left" : "bd = b * d;",
      "right" : "bd = b * d;",
      "info" : "ExpressionStatement[65869-65880]:ExpressionStatement[66538-66549]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[65889-65900]:ExpressionStatement[66558-66569]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[65909-65920]:ExpressionStatement[66578-66589]"
    }, {
      "left" : "prodA += bd + ((bc + ad) << 32);",
      "right" : "prodA += bd + ((bc + ad) << 32);",
      "info" : "ExpressionStatement[65930-65962]:ExpressionStatement[66599-66631]"
    }, {
      "left" : "int intPart = (int)(prodA >>> 62);",
      "right" : "int intPart = (int)(prodA >>> 62);",
      "info" : "VariableDeclarationStatement[66336-66370]:VariableDeclarationStatement[67005-67039]"
    }, {
      "left" : "prodA <<= 2;",
      "right" : "prodA <<= 2;",
      "info" : "ExpressionStatement[66408-66420]:ExpressionStatement[67077-67089]"
    }, {
      "left" : "prodA |= prodB >>> 62;",
      "right" : "prodA |= prodB >>> 62;",
      "info" : "ExpressionStatement[66429-66451]:ExpressionStatement[67098-67120]"
    }, {
      "left" : "prodB <<= 2;",
      "right" : "prodB <<= 2;",
      "info" : "ExpressionStatement[66460-66472]:ExpressionStatement[67129-67141]"
    }, {
      "left" : "a = prodA >>> 32;",
      "right" : "a = prodA >>> 32;",
      "info" : "ExpressionStatement[66513-66530]:ExpressionStatement[67182-67199]"
    }, {
      "left" : "b = prodA & 0xffffffffL;",
      "right" : "b = prodA & 0xffffffffL;",
      "info" : "ExpressionStatement[66539-66563]:ExpressionStatement[67208-67232]"
    }, {
      "left" : "c = PI_O_4_BITS[0] >>> 32;",
      "right" : "c = PI_O_4_BITS[0] >>> 32;",
      "info" : "ExpressionStatement[66573-66599]:ExpressionStatement[67242-67268]"
    }, {
      "left" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "info" : "ExpressionStatement[66608-66641]:ExpressionStatement[67277-67310]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[66651-66662]:ExpressionStatement[67320-67331]"
    }, {
      "left" : "bd = b * d;",
      "right" : "bd = b * d;",
      "info" : "ExpressionStatement[66671-66682]:ExpressionStatement[67340-67351]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[66691-66702]:ExpressionStatement[67360-67371]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[66711-66722]:ExpressionStatement[67380-67391]"
    }, {
      "left" : "long prod2B = bd + (ad << 32);",
      "right" : "long prod2B = bd + (ad << 32);",
      "info" : "VariableDeclarationStatement[66732-66762]:VariableDeclarationStatement[67401-67431]"
    }, {
      "left" : "long prod2A = ac + (ad >>> 32);",
      "right" : "long prod2A = ac + (ad >>> 32);",
      "info" : "VariableDeclarationStatement[66771-66802]:VariableDeclarationStatement[67440-67471]"
    }, {
      "left" : "bita = (bd & 0x8000000000000000L) != 0;",
      "right" : "bita = (bd & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[66812-66851]:ExpressionStatement[67481-67520]"
    }, {
      "left" : "bitb = (ad & 0x80000000L ) != 0;",
      "right" : "bitb = (ad & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[66860-66892]:ExpressionStatement[67529-67561]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[66901-66946]:ExpressionStatement[67570-67615]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[66976-67078]:IfStatement[67645-67747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67045-67078]:Block[67714-67747]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[67059-67068]:ExpressionStatement[67728-67737]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67088-67131]:ExpressionStatement[67757-67800]"
    }, {
      "left" : "bitb = (bc & 0x80000000L ) != 0;",
      "right" : "bitb = (bc & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[67140-67172]:ExpressionStatement[67809-67841]"
    }, {
      "left" : "prod2B = prod2B + (bc << 32);",
      "right" : "prod2B = prod2B + (bc << 32);",
      "info" : "ExpressionStatement[67182-67211]:ExpressionStatement[67851-67880]"
    }, {
      "left" : "prod2A = prod2A + (bc >>> 32);",
      "right" : "prod2A = prod2A + (bc >>> 32);",
      "info" : "ExpressionStatement[67220-67250]:ExpressionStatement[67889-67919]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67260-67305]:ExpressionStatement[67929-67974]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[67335-67437]:IfStatement[68004-68106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67404-67437]:Block[68073-68106]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[67418-67427]:ExpressionStatement[68087-68096]"
    }, {
      "left" : "c = PI_O_4_BITS[1] >>> 32;",
      "right" : "c = PI_O_4_BITS[1] >>> 32;",
      "info" : "ExpressionStatement[67491-67517]:ExpressionStatement[68160-68186]"
    }, {
      "left" : "d = PI_O_4_BITS[1] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[1] & 0xffffffffL;",
      "info" : "ExpressionStatement[67526-67559]:ExpressionStatement[68195-68228]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[67568-67579]:ExpressionStatement[68237-68248]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[67588-67599]:ExpressionStatement[68257-68268]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[67608-67619]:ExpressionStatement[68277-68288]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[67657-67686]:ExpressionStatement[68326-68355]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67696-67739]:ExpressionStatement[68365-68408]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[67748-67788]:ExpressionStatement[68417-68457]"
    }, {
      "left" : "prod2B += ac;",
      "right" : "prod2B += ac;",
      "info" : "ExpressionStatement[67797-67810]:ExpressionStatement[68466-68479]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[67819-67864]:ExpressionStatement[68488-68533]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[67893-67995]:IfStatement[68562-68664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67962-67995]:Block[68631-68664]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[67976-67985]:ExpressionStatement[68645-68654]"
    }, {
      "left" : "a = prodB >>> 32;",
      "right" : "a = prodB >>> 32;",
      "info" : "ExpressionStatement[68050-68067]:ExpressionStatement[68719-68736]"
    }, {
      "left" : "b = prodB & 0xffffffffL;",
      "right" : "b = prodB & 0xffffffffL;",
      "info" : "ExpressionStatement[68076-68100]:ExpressionStatement[68745-68769]"
    }, {
      "left" : "c = PI_O_4_BITS[0] >>> 32;",
      "right" : "c = PI_O_4_BITS[0] >>> 32;",
      "info" : "ExpressionStatement[68109-68135]:ExpressionStatement[68778-68804]"
    }, {
      "left" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "info" : "ExpressionStatement[68144-68177]:ExpressionStatement[68813-68846]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[68186-68197]:ExpressionStatement[68855-68866]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[68206-68217]:ExpressionStatement[68875-68886]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[68226-68237]:ExpressionStatement[68895-68906]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[68275-68304]:ExpressionStatement[68944-68973]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[68314-68357]:ExpressionStatement[68983-69026]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[68366-68406]:ExpressionStatement[69035-69075]"
    }, {
      "left" : "prod2B += ac;",
      "right" : "prod2B += ac;",
      "info" : "ExpressionStatement[68415-68428]:ExpressionStatement[69084-69097]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[68437-68482]:ExpressionStatement[69106-69151]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[68511-68613]:IfStatement[69180-69282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68580-68613]:Block[69249-69282]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[68594-68603]:ExpressionStatement[69263-69272]"
    }, {
      "left" : "double tmpA = (prod2A >>> 12) / TWO_POWER_52;",
      "right" : "double tmpA = (prod2A >>> 12) / TWO_POWER_52;",
      "info" : "VariableDeclarationStatement[68655-68700]:VariableDeclarationStatement[69324-69369]"
    }, {
      "left" : "double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52;",
      "right" : "double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52;",
      "info" : "VariableDeclarationStatement[68732-68822]:VariableDeclarationStatement[69401-69491]"
    }, {
      "left" : "double sumA = tmpA + tmpB;",
      "right" : "double sumA = tmpA + tmpB;",
      "info" : "VariableDeclarationStatement[68844-68870]:VariableDeclarationStatement[69513-69539]"
    }, {
      "left" : "double sumB = -(sumA - tmpA - tmpB);",
      "right" : "double sumB = -(sumA - tmpA - tmpB);",
      "info" : "VariableDeclarationStatement[68879-68915]:VariableDeclarationStatement[69548-69584]"
    }, {
      "left" : "result[0] = intPart;",
      "right" : "result[0] = intPart;",
      "info" : "ExpressionStatement[68967-68987]:ExpressionStatement[69636-69656]"
    }, {
      "left" : "result[1] = sumA * 2.0;",
      "right" : "result[1] = sumA * 2.0;",
      "info" : "ExpressionStatement[68996-69019]:ExpressionStatement[69665-69688]"
    }, {
      "left" : "result[2] = sumB * 2.0;",
      "right" : "result[2] = sumB * 2.0;",
      "info" : "ExpressionStatement[69028-69051]:ExpressionStatement[69697-69720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69191-70814]:Block[69860-71483]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[69201-69226]:VariableDeclarationStatement[69870-69895]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[69235-69252]:VariableDeclarationStatement[69904-69921]"
    }, {
      "left" : "double xa;",
      "right" : "double xa;",
      "info" : "VariableDeclarationStatement[69261-69271]:VariableDeclarationStatement[69930-69940]"
    }, {
      "left" : "double xb = 0.0;",
      "right" : "double xb = 0.0;",
      "info" : "VariableDeclarationStatement[69280-69296]:VariableDeclarationStatement[69949-69965]"
    }, {
      "left" : "xa = x;",
      "right" : "xa = x;",
      "info" : "ExpressionStatement[69353-69360]:ExpressionStatement[70022-70029]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[69369-69442]:IfStatement[70038-70111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69380-69442]:Block[70049-70111]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[69394-69410]:ExpressionStatement[70063-70079]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[69423-69432]:ExpressionStatement[70092-70101]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[69499-69672]:IfStatement[70168-70341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69514-69672]:Block[70183-70341]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[69528-69567]:VariableDeclarationStatement[70197-70236]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[69580-69638]:IfStatement[70249-70307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69594-69638]:Block[70263-70307]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[69612-69624]:ReturnStatement[70281-70293]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[69651-69662]:ReturnStatement[70320-70331]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[69682-69772]:IfStatement[70351-70441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69730-69772]:Block[70399-70441]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[69744-69762]:ReturnStatement[70413-70431]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[69827-70406]:IfStatement[70496-71075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69847-70204]:Block[70516-70873]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[69983-70022]:VariableDeclarationStatement[70652-70691]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[70035-70071]:ExpressionStatement[70704-70740]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[70084-70124]:ExpressionStatement[70753-70793]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[70137-70159]:ExpressionStatement[70806-70828]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[70172-70194]:ExpressionStatement[70841-70863]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[70210-70406]:IfStatement[70879-71075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70239-70406]:Block[70908-71075]"
    }, {
      "left" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "right" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "info" : "VariableDeclarationStatement[70253-70296]:VariableDeclarationStatement[70922-70965]"
    }, {
      "left" : "quadrant = cw.getK() & 3;",
      "right" : "quadrant = cw.getK() & 3;",
      "info" : "ExpressionStatement[70309-70334]:ExpressionStatement[70978-71003]"
    }, {
      "left" : "xa = cw.getRemA();",
      "right" : "xa = cw.getRemA();",
      "info" : "ExpressionStatement[70347-70365]:ExpressionStatement[71016-71034]"
    }, {
      "left" : "xb = cw.getRemB();",
      "right" : "xb = cw.getRemB();",
      "info" : "ExpressionStatement[70378-70396]:ExpressionStatement[71047-71065]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[70416-70483]:IfStatement[71085-71152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70430-70483]:Block[71099-71152]"
    }, {
      "left" : "quadrant ^= 2;",
      "right" : "quadrant ^= 2;",
      "info" : "ExpressionStatement[70444-70458]:ExpressionStatement[71113-71127]"
    }, {
      "left" : "switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "right" : "switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "info" : "SwitchStatement[70493-70808]:SwitchStatement[71162-71477]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[70525-70532]:SwitchCase[71194-71201]"
    }, {
      "left" : "return sinQ(xa, xb);",
      "right" : "return sinQ(xa, xb);",
      "info" : "ReturnStatement[70549-70569]:ReturnStatement[71218-71238]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[70582-70589]:SwitchCase[71251-71258]"
    }, {
      "left" : "return cosQ(xa, xb);",
      "right" : "return cosQ(xa, xb);",
      "info" : "ReturnStatement[70606-70626]:ReturnStatement[71275-71295]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[70639-70646]:SwitchCase[71308-71315]"
    }, {
      "left" : "return -sinQ(xa, xb);",
      "right" : "return -sinQ(xa, xb);",
      "info" : "ReturnStatement[70663-70684]:ReturnStatement[71332-71353]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[70697-70704]:SwitchCase[71366-71373]"
    }, {
      "left" : "return -cosQ(xa, xb);",
      "right" : "return -cosQ(xa, xb);",
      "info" : "ReturnStatement[70721-70742]:ReturnStatement[71390-71411]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[70755-70763]:SwitchCase[71424-71432]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[70780-70798]:ReturnStatement[71449-71467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70950-72257]:Block[71619-72926]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[70960-70977]:VariableDeclarationStatement[71629-71646]"
    }, {
      "left" : "double xa = x;",
      "right" : "double xa = x;",
      "info" : "VariableDeclarationStatement[71034-71048]:VariableDeclarationStatement[71703-71717]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[71057-71101]:IfStatement[71726-71770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71068-71101]:Block[71737-71770]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[71082-71091]:ExpressionStatement[71751-71760]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[71111-71201]:IfStatement[71780-71870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71159-71201]:Block[71828-71870]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[71173-71191]:ReturnStatement[71842-71860]"
    }, {
      "left" : "double xb = 0;",
      "right" : "double xb = 0;",
      "info" : "VariableDeclarationStatement[71256-71270]:VariableDeclarationStatement[71925-71939]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[71279-71858]:IfStatement[71948-72527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71299-71656]:Block[71968-72325]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[71435-71474]:VariableDeclarationStatement[72104-72143]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[71487-71523]:ExpressionStatement[72156-72192]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[71536-71576]:ExpressionStatement[72205-72245]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[71589-71611]:ExpressionStatement[72258-72280]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[71624-71646]:ExpressionStatement[72293-72315]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[71662-71858]:IfStatement[72331-72527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71691-71858]:Block[72360-72527]"
    }, {
      "left" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "right" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "info" : "VariableDeclarationStatement[71705-71748]:VariableDeclarationStatement[72374-72417]"
    }, {
      "left" : "quadrant = cw.getK() & 3;",
      "right" : "quadrant = cw.getK() & 3;",
      "info" : "ExpressionStatement[71761-71786]:ExpressionStatement[72430-72455]"
    }, {
      "left" : "xa = cw.getRemA();",
      "right" : "xa = cw.getRemA();",
      "info" : "ExpressionStatement[71799-71817]:ExpressionStatement[72468-72486]"
    }, {
      "left" : "xb = cw.getRemB();",
      "right" : "xb = cw.getRemB();",
      "info" : "ExpressionStatement[71830-71848]:ExpressionStatement[72499-72517]"
    }, {
      "left" : "switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "right" : "switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "info" : "SwitchStatement[71936-72251]:SwitchStatement[72605-72920]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[71968-71975]:SwitchCase[72637-72644]"
    }, {
      "left" : "return cosQ(xa, xb);",
      "right" : "return cosQ(xa, xb);",
      "info" : "ReturnStatement[71992-72012]:ReturnStatement[72661-72681]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[72025-72032]:SwitchCase[72694-72701]"
    }, {
      "left" : "return -sinQ(xa, xb);",
      "right" : "return -sinQ(xa, xb);",
      "info" : "ReturnStatement[72049-72070]:ReturnStatement[72718-72739]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[72083-72090]:SwitchCase[72752-72759]"
    }, {
      "left" : "return -cosQ(xa, xb);",
      "right" : "return -cosQ(xa, xb);",
      "info" : "ReturnStatement[72107-72128]:ReturnStatement[72776-72797]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[72141-72148]:SwitchCase[72810-72817]"
    }, {
      "left" : "return sinQ(xa, xb);",
      "right" : "return sinQ(xa, xb);",
      "info" : "ReturnStatement[72165-72185]:ReturnStatement[72834-72854]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[72198-72206]:SwitchCase[72867-72875]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[72223-72241]:ReturnStatement[72892-72910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72394-74279]:Block[73063-74948]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[72404-72429]:VariableDeclarationStatement[73073-73098]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[72438-72455]:VariableDeclarationStatement[73107-73124]"
    }, {
      "left" : "double xa = x;",
      "right" : "double xa = x;",
      "info" : "VariableDeclarationStatement[72512-72526]:VariableDeclarationStatement[73181-73195]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[72535-72608]:IfStatement[73204-73277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72546-72608]:Block[73215-73277]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[72560-72576]:ExpressionStatement[73229-73245]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[72589-72598]:ExpressionStatement[73258-73267]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[72665-72838]:IfStatement[73334-73507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72680-72838]:Block[73349-73507]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[72694-72733]:VariableDeclarationStatement[73363-73402]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[72746-72804]:IfStatement[73415-73473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72760-72804]:Block[73429-73473]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[72778-72790]:ReturnStatement[73447-73459]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[72817-72828]:ReturnStatement[73486-73497]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[72848-72938]:IfStatement[73517-73607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72896-72938]:Block[73565-73607]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[72910-72928]:ReturnStatement[73579-73597]"
    }, {
      "left" : "double xb = 0;",
      "right" : "double xb = 0;",
      "info" : "VariableDeclarationStatement[72993-73007]:VariableDeclarationStatement[73662-73676]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[73016-73595]:IfStatement[73685-74264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73036-73393]:Block[73705-74062]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[73172-73211]:VariableDeclarationStatement[73841-73880]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[73224-73260]:ExpressionStatement[73893-73929]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[73273-73313]:ExpressionStatement[73942-73982]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[73326-73348]:ExpressionStatement[73995-74017]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[73361-73383]:ExpressionStatement[74030-74052]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[73399-73595]:IfStatement[74068-74264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73428-73595]:Block[74097-74264]"
    }, {
      "left" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "right" : "final CodyWaite cw = new CodyWaite(xa, xb);",
      "info" : "VariableDeclarationStatement[73442-73485]:VariableDeclarationStatement[74111-74154]"
    }, {
      "left" : "quadrant = cw.getK() & 3;",
      "right" : "quadrant = cw.getK() & 3;",
      "info" : "ExpressionStatement[73498-73523]:ExpressionStatement[74167-74192]"
    }, {
      "left" : "xa = cw.getRemA();",
      "right" : "xa = cw.getRemA();",
      "info" : "ExpressionStatement[73536-73554]:ExpressionStatement[74205-74223]"
    }, {
      "left" : "xb = cw.getRemB();",
      "right" : "xb = cw.getRemB();",
      "info" : "ExpressionStatement[73567-73585]:ExpressionStatement[74236-74254]"
    }, {
      "left" : "if (xa > 1.5)",
      "right" : "if (xa > 1.5)",
      "info" : "IfStatement[73605-74014]:IfStatement[74274-74683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73619-74014]:Block[74288-74683]"
    }, {
      "left" : "final double pi2a = 1.5707963267948966;",
      "right" : "final double pi2a = 1.5707963267948966;",
      "info" : "VariableDeclarationStatement[73686-73725]:VariableDeclarationStatement[74355-74394]"
    }, {
      "left" : "final double pi2b = 6.123233995736766E-17;",
      "right" : "final double pi2b = 6.123233995736766E-17;",
      "info" : "VariableDeclarationStatement[73738-73780]:VariableDeclarationStatement[74407-74449]"
    }, {
      "left" : "final double a = pi2a - xa;",
      "right" : "final double a = pi2a - xa;",
      "info" : "VariableDeclarationStatement[73794-73821]:VariableDeclarationStatement[74463-74490]"
    }, {
      "left" : "double b = -(a - pi2a + xa);",
      "right" : "double b = -(a - pi2a + xa);",
      "info" : "VariableDeclarationStatement[73834-73862]:VariableDeclarationStatement[74503-74531]"
    }, {
      "left" : "b += pi2b - xb;",
      "right" : "b += pi2b - xb;",
      "info" : "ExpressionStatement[73875-73890]:ExpressionStatement[74544-74559]"
    }, {
      "left" : "xa = a + b;",
      "right" : "xa = a + b;",
      "info" : "ExpressionStatement[73904-73915]:ExpressionStatement[74573-74584]"
    }, {
      "left" : "xb = -(xa - a - b);",
      "right" : "xb = -(xa - a - b);",
      "info" : "ExpressionStatement[73928-73947]:ExpressionStatement[74597-74616]"
    }, {
      "left" : "quadrant ^= 1;",
      "right" : "quadrant ^= 1;",
      "info" : "ExpressionStatement[73960-73974]:ExpressionStatement[74629-74643]"
    }, {
      "left" : "negative ^= true;",
      "right" : "negative ^= true;",
      "info" : "ExpressionStatement[73987-74004]:ExpressionStatement[74656-74673]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[74024-74038]:VariableDeclarationStatement[74693-74707]"
    }, {
      "left" : "if ((quadrant & 1) == 0)",
      "right" : "if ((quadrant & 1) == 0)",
      "info" : "IfStatement[74047-74184]:IfStatement[74716-74853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74072-74125]:Block[74741-74794]"
    }, {
      "left" : "result = tanQ(xa, xb, false);",
      "right" : "result = tanQ(xa, xb, false);",
      "info" : "ExpressionStatement[74086-74115]:ExpressionStatement[74755-74784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74131-74184]:Block[74800-74853]"
    }, {
      "left" : "result = -tanQ(xa, xb, true);",
      "right" : "result = -tanQ(xa, xb, true);",
      "info" : "ExpressionStatement[74145-74174]:ExpressionStatement[74814-74843]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[74194-74249]:IfStatement[74863-74918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74208-74249]:Block[74877-74918]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[74222-74239]:ExpressionStatement[74891-74908]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[74259-74273]:ReturnStatement[74928-74942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74414-74457]:Block[75083-75126]"
    }, {
      "left" : "return atan(x, 0.0, false);",
      "right" : "return atan(x, 0.0, false);",
      "info" : "ReturnStatement[74424-74451]:ReturnStatement[75093-75120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74865-79175]:Block[75534-79844]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[74875-74898]:VariableDeclarationStatement[75544-75567]"
    }, {
      "left" : "int idx;",
      "right" : "int idx;",
      "info" : "VariableDeclarationStatement[74907-74915]:VariableDeclarationStatement[75576-75584]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[74925-75050]:IfStatement[75594-75719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74940-75050]:Block[75609-75719]"
    }, {
      "left" : "return leftPlane ? copySign(Math.PI, xa) : xa;",
      "right" : "return leftPlane ? copySign(Math.PI, xa) : xa;",
      "info" : "ReturnStatement[74994-75040]:ReturnStatement[75663-75709]"
    }, {
      "left" : "if (xa < 0)",
      "right" : "if (xa < 0)",
      "info" : "IfStatement[75060-75178]:IfStatement[75729-75847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75072-75178]:Block[75741-75847]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[75110-75119]:ExpressionStatement[75779-75788]"
    }, {
      "left" : "xb = -xb;",
      "right" : "xb = -xb;",
      "info" : "ExpressionStatement[75132-75141]:ExpressionStatement[75801-75810]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[75154-75168]:ExpressionStatement[75823-75837]"
    }, {
      "left" : "if (xa > 1.633123935319537E16)",
      "right" : "if (xa > 1.633123935319537E16)",
      "info" : "IfStatement[75188-75332]:IfStatement[75857-76001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75219-75332]:Block[75888-76001]"
    }, {
      "left" : "return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);",
      "right" : "return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);",
      "info" : "ReturnStatement[75253-75322]:ReturnStatement[75922-75991]"
    }, {
      "left" : "if (xa < 1)",
      "right" : "if (xa < 1)",
      "info" : "IfStatement[75431-75696]:IfStatement[76100-76365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75443-75532]:Block[76112-76201]"
    }, {
      "left" : "idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
      "right" : "idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
      "info" : "ExpressionStatement[75457-75522]:ExpressionStatement[76126-76191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75538-75696]:Block[76207-76365]"
    }, {
      "left" : "final double oneOverXa = 1 / xa;",
      "right" : "final double oneOverXa = 1 / xa;",
      "info" : "VariableDeclarationStatement[75552-75584]:VariableDeclarationStatement[76221-76253]"
    }, {
      "left" : "idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);",
      "right" : "idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);",
      "info" : "ExpressionStatement[75597-75686]:ExpressionStatement[76266-76355]"
    }, {
      "left" : "double epsA = xa - TANGENT_TABLE_A[idx];",
      "right" : "double epsA = xa - TANGENT_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[75705-75745]:VariableDeclarationStatement[76374-76414]"
    }, {
      "left" : "double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);",
      "right" : "double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);",
      "info" : "VariableDeclarationStatement[75754-75804]:VariableDeclarationStatement[76423-76473]"
    }, {
      "left" : "epsB += xb - TANGENT_TABLE_B[idx];",
      "right" : "epsB += xb - TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[75813-75847]:ExpressionStatement[76482-76516]"
    }, {
      "left" : "double temp = epsA + epsB;",
      "right" : "double temp = epsA + epsB;",
      "info" : "VariableDeclarationStatement[75857-75883]:VariableDeclarationStatement[76526-76552]"
    }, {
      "left" : "epsB = -(temp - epsA - epsB);",
      "right" : "epsB = -(temp - epsA - epsB);",
      "info" : "ExpressionStatement[75892-75921]:ExpressionStatement[76561-76590]"
    }, {
      "left" : "epsA = temp;",
      "right" : "epsA = temp;",
      "info" : "ExpressionStatement[75930-75942]:ExpressionStatement[76599-76611]"
    }, {
      "left" : "temp = xa * HEX_40000000;",
      "right" : "temp = xa * HEX_40000000;",
      "info" : "ExpressionStatement[76005-76030]:ExpressionStatement[76674-76699]"
    }, {
      "left" : "double ya = xa + temp - temp;",
      "right" : "double ya = xa + temp - temp;",
      "info" : "VariableDeclarationStatement[76039-76068]:VariableDeclarationStatement[76708-76737]"
    }, {
      "left" : "double yb = xb + xa - ya;",
      "right" : "double yb = xb + xa - ya;",
      "info" : "VariableDeclarationStatement[76077-76102]:VariableDeclarationStatement[76746-76771]"
    }, {
      "left" : "xa = ya;",
      "right" : "xa = ya;",
      "info" : "ExpressionStatement[76111-76119]:ExpressionStatement[76780-76788]"
    }, {
      "left" : "xb += yb;",
      "right" : "xb += yb;",
      "info" : "ExpressionStatement[76128-76137]:ExpressionStatement[76797-76806]"
    }, {
      "left" : "if (idx == 0)",
      "right" : "if (idx == 0)",
      "info" : "IfStatement[76182-77537]:IfStatement[76851-78206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76196-76681]:Block[76865-77350]"
    }, {
      "left" : "final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));",
      "right" : "final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));",
      "info" : "VariableDeclarationStatement[76452-76543]:VariableDeclarationStatement[77121-77212]"
    }, {
      "left" : "ya = epsA * denom;",
      "right" : "ya = epsA * denom;",
      "info" : "ExpressionStatement[76622-76640]:ExpressionStatement[77291-77309]"
    }, {
      "left" : "yb = epsB * denom;",
      "right" : "yb = epsB * denom;",
      "info" : "ExpressionStatement[76653-76671]:ExpressionStatement[77322-77340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76687-77537]:Block[77356-78206]"
    }, {
      "left" : "double temp2 = xa * TANGENT_TABLE_A[idx];",
      "right" : "double temp2 = xa * TANGENT_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[76701-76742]:VariableDeclarationStatement[77370-77411]"
    }, {
      "left" : "double za = 1d + temp2;",
      "right" : "double za = 1d + temp2;",
      "info" : "VariableDeclarationStatement[76755-76778]:VariableDeclarationStatement[77424-77447]"
    }, {
      "left" : "double zb = -(za - 1d - temp2);",
      "right" : "double zb = -(za - 1d - temp2);",
      "info" : "VariableDeclarationStatement[76791-76822]:VariableDeclarationStatement[77460-77491]"
    }, {
      "left" : "temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];",
      "right" : "temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[76835-76897]:ExpressionStatement[77504-77566]"
    }, {
      "left" : "temp = za + temp2;",
      "right" : "temp = za + temp2;",
      "info" : "ExpressionStatement[76910-76928]:ExpressionStatement[77579-77597]"
    }, {
      "left" : "zb += -(temp - za - temp2);",
      "right" : "zb += -(temp - za - temp2);",
      "info" : "ExpressionStatement[76941-76968]:ExpressionStatement[77610-77637]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[76981-76991]:ExpressionStatement[77650-77660]"
    }, {
      "left" : "zb += xb * TANGENT_TABLE_B[idx];",
      "right" : "zb += xb * TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[77005-77037]:ExpressionStatement[77674-77706]"
    }, {
      "left" : "ya = epsA / za;",
      "right" : "ya = epsA / za;",
      "info" : "ExpressionStatement[77050-77065]:ExpressionStatement[77719-77734]"
    }, {
      "left" : "temp = ya * HEX_40000000;",
      "right" : "temp = ya * HEX_40000000;",
      "info" : "ExpressionStatement[77079-77104]:ExpressionStatement[77748-77773]"
    }, {
      "left" : "final double yaa = (ya + temp) - temp;",
      "right" : "final double yaa = (ya + temp) - temp;",
      "info" : "VariableDeclarationStatement[77117-77155]:VariableDeclarationStatement[77786-77824]"
    }, {
      "left" : "final double yab = ya - yaa;",
      "right" : "final double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[77168-77196]:VariableDeclarationStatement[77837-77865]"
    }, {
      "left" : "temp = za * HEX_40000000;",
      "right" : "temp = za * HEX_40000000;",
      "info" : "ExpressionStatement[77210-77235]:ExpressionStatement[77879-77904]"
    }, {
      "left" : "final double zaa = (za + temp) - temp;",
      "right" : "final double zaa = (za + temp) - temp;",
      "info" : "VariableDeclarationStatement[77248-77286]:VariableDeclarationStatement[77917-77955]"
    }, {
      "left" : "final double zab = za - zaa;",
      "right" : "final double zab = za - zaa;",
      "info" : "VariableDeclarationStatement[77299-77327]:VariableDeclarationStatement[77968-77996]"
    }, {
      "left" : "yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;",
      "right" : "yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;",
      "info" : "ExpressionStatement[77392-77457]:ExpressionStatement[78061-78126]"
    }, {
      "left" : "yb += -epsA * zb / za / za;",
      "right" : "yb += -epsA * zb / za / za;",
      "info" : "ExpressionStatement[77471-77498]:ExpressionStatement[78140-78167]"
    }, {
      "left" : "yb += epsB / za;",
      "right" : "yb += epsB / za;",
      "info" : "ExpressionStatement[77511-77527]:ExpressionStatement[78180-78196]"
    }, {
      "left" : "epsA = ya;",
      "right" : "epsA = ya;",
      "info" : "ExpressionStatement[77548-77558]:ExpressionStatement[78217-78227]"
    }, {
      "left" : "epsB = yb;",
      "right" : "epsB = yb;",
      "info" : "ExpressionStatement[77567-77577]:ExpressionStatement[78236-78246]"
    }, {
      "left" : "final double epsA2 = epsA * epsA;",
      "right" : "final double epsA2 = epsA * epsA;",
      "info" : "VariableDeclarationStatement[77621-77654]:VariableDeclarationStatement[78290-78323]"
    }, {
      "left" : "yb = 0.07490822288864472;",
      "right" : "yb = 0.07490822288864472;",
      "info" : "ExpressionStatement[77920-77945]:ExpressionStatement[78589-78614]"
    }, {
      "left" : "yb = yb * epsA2 + -0.09088450866185192;",
      "right" : "yb = yb * epsA2 + -0.09088450866185192;",
      "info" : "ExpressionStatement[77954-77993]:ExpressionStatement[78623-78662]"
    }, {
      "left" : "yb = yb * epsA2 + 0.11111095942313305;",
      "right" : "yb = yb * epsA2 + 0.11111095942313305;",
      "info" : "ExpressionStatement[78002-78040]:ExpressionStatement[78671-78709]"
    }, {
      "left" : "yb = yb * epsA2 + -0.1428571423679182;",
      "right" : "yb = yb * epsA2 + -0.1428571423679182;",
      "info" : "ExpressionStatement[78049-78087]:ExpressionStatement[78718-78756]"
    }, {
      "left" : "yb = yb * epsA2 + 0.19999999999923582;",
      "right" : "yb = yb * epsA2 + 0.19999999999923582;",
      "info" : "ExpressionStatement[78096-78134]:ExpressionStatement[78765-78803]"
    }, {
      "left" : "yb = yb * epsA2 + -0.33333333333333287;",
      "right" : "yb = yb * epsA2 + -0.33333333333333287;",
      "info" : "ExpressionStatement[78143-78182]:ExpressionStatement[78812-78851]"
    }, {
      "left" : "yb = yb * epsA2 * epsA;",
      "right" : "yb = yb * epsA2 * epsA;",
      "info" : "ExpressionStatement[78191-78214]:ExpressionStatement[78860-78883]"
    }, {
      "left" : "ya = epsA;",
      "right" : "ya = epsA;",
      "info" : "ExpressionStatement[78225-78235]:ExpressionStatement[78894-78904]"
    }, {
      "left" : "temp = ya + yb;",
      "right" : "temp = ya + yb;",
      "info" : "ExpressionStatement[78245-78260]:ExpressionStatement[78914-78929]"
    }, {
      "left" : "yb = -(temp - ya - yb);",
      "right" : "yb = -(temp - ya - yb);",
      "info" : "ExpressionStatement[78269-78292]:ExpressionStatement[78938-78961]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[78301-78311]:ExpressionStatement[78970-78980]"
    }, {
      "left" : "yb += epsB / (1d + epsA * epsA);",
      "right" : "yb += epsB / (1d + epsA * epsA);",
      "info" : "ExpressionStatement[78381-78413]:ExpressionStatement[79050-79082]"
    }, {
      "left" : "double za = EIGHTHS[idx] + ya;",
      "right" : "double za = EIGHTHS[idx] + ya;",
      "info" : "VariableDeclarationStatement[78466-78496]:VariableDeclarationStatement[79135-79165]"
    }, {
      "left" : "double zb = -(za - EIGHTHS[idx] - ya);",
      "right" : "double zb = -(za - EIGHTHS[idx] - ya);",
      "info" : "VariableDeclarationStatement[78505-78543]:VariableDeclarationStatement[79174-79212]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[78552-78567]:ExpressionStatement[79221-79236]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[78576-78600]:ExpressionStatement[79245-79269]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[78609-78619]:ExpressionStatement[79278-79288]"
    }, {
      "left" : "double result = za + zb;",
      "right" : "double result = za + zb;",
      "info" : "VariableDeclarationStatement[78629-78653]:VariableDeclarationStatement[79298-79322]"
    }, {
      "left" : "double resultb = -(result - za - zb);",
      "right" : "double resultb = -(result - za - zb);",
      "info" : "VariableDeclarationStatement[78662-78699]:VariableDeclarationStatement[79331-79368]"
    }, {
      "left" : "if (leftPlane)",
      "right" : "if (leftPlane)",
      "info" : "IfStatement[78709-79069]:IfStatement[79378-79738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78724-79069]:Block[79393-79738]"
    }, {
      "left" : "final double pia = 1.5707963267948966 * 2;",
      "right" : "final double pia = 1.5707963267948966 * 2;",
      "info" : "VariableDeclarationStatement[78781-78823]:VariableDeclarationStatement[79450-79492]"
    }, {
      "left" : "final double pib = 6.123233995736766E-17 * 2;",
      "right" : "final double pib = 6.123233995736766E-17 * 2;",
      "info" : "VariableDeclarationStatement[78836-78881]:VariableDeclarationStatement[79505-79550]"
    }, {
      "left" : "za = pia - result;",
      "right" : "za = pia - result;",
      "info" : "ExpressionStatement[78895-78913]:ExpressionStatement[79564-79582]"
    }, {
      "left" : "zb = -(za - pia + result);",
      "right" : "zb = -(za - pia + result);",
      "info" : "ExpressionStatement[78926-78952]:ExpressionStatement[79595-79621]"
    }, {
      "left" : "zb += pib - resultb;",
      "right" : "zb += pib - resultb;",
      "info" : "ExpressionStatement[78965-78985]:ExpressionStatement[79634-79654]"
    }, {
      "left" : "result = za + zb;",
      "right" : "result = za + zb;",
      "info" : "ExpressionStatement[78999-79016]:ExpressionStatement[79668-79685]"
    }, {
      "left" : "resultb = -(result - za - zb);",
      "right" : "resultb = -(result - za - zb);",
      "info" : "ExpressionStatement[79029-79059]:ExpressionStatement[79698-79728]"
    }, {
      "left" : "if (negate ^ leftPlane)",
      "right" : "if (negate ^ leftPlane)",
      "info" : "IfStatement[79080-79145]:IfStatement[79749-79814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79104-79145]:Block[79773-79814]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[79118-79135]:ExpressionStatement[79787-79804]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[79155-79169]:ReturnStatement[79824-79838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79412-82223]:Block[80081-82892]"
    }, {
      "left" : "if (x != x || y != y)",
      "right" : "if (x != x || y != y)",
      "info" : "IfStatement[79422-79486]:IfStatement[80091-80155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79444-79486]:Block[80113-80155]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[79458-79476]:ReturnStatement[80127-80145]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[79496-80131]:IfStatement[80165-80800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79508-80131]:Block[80177-80800]"
    }, {
      "left" : "final double result = x * y;",
      "right" : "final double result = x * y;",
      "info" : "VariableDeclarationStatement[79522-79550]:VariableDeclarationStatement[80191-80219]"
    }, {
      "left" : "final double invx = 1d / x;",
      "right" : "final double invx = 1d / x;",
      "info" : "VariableDeclarationStatement[79563-79590]:VariableDeclarationStatement[80232-80259]"
    }, {
      "left" : "final double invy = 1d / y;",
      "right" : "final double invy = 1d / y;",
      "info" : "VariableDeclarationStatement[79603-79630]:VariableDeclarationStatement[80272-80299]"
    }, {
      "left" : "if (invx == 0)",
      "right" : "if (invx == 0)",
      "info" : "IfStatement[79644-79860]:IfStatement[80313-80529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79659-79860]:Block[80328-80529]"
    }, {
      "left" : "if (x > 0)",
      "right" : "if (x > 0)",
      "info" : "IfStatement[79694-79846]:IfStatement[80363-80515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79705-79772]:Block[80374-80441]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[79727-79736]:ReturnStatement[80396-80405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79778-79846]:Block[80447-80515]"
    }, {
      "left" : "return copySign(Math.PI, y);",
      "right" : "return copySign(Math.PI, y);",
      "info" : "ReturnStatement[79800-79828]:ReturnStatement[80469-80497]"
    }, {
      "left" : "if (x < 0 || invx < 0)",
      "right" : "if (x < 0 || invx < 0)",
      "info" : "IfStatement[79874-80121]:IfStatement[80543-80790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79897-80069]:Block[80566-80738]"
    }, {
      "left" : "if (y < 0 || invy < 0)",
      "right" : "if (y < 0 || invy < 0)",
      "info" : "IfStatement[79915-80055]:IfStatement[80584-80724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79938-79994]:Block[80607-80663]"
    }, {
      "left" : "return -Math.PI;",
      "right" : "return -Math.PI;",
      "info" : "ReturnStatement[79960-79976]:ReturnStatement[80629-80645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80000-80055]:Block[80669-80724]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[80022-80037]:ReturnStatement[80691-80706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80075-80121]:Block[80744-80790]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[80093-80107]:ReturnStatement[80762-80776]"
    }, {
      "left" : "if (y == Double.POSITIVE_INFINITY)",
      "right" : "if (y == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[80174-80464]:IfStatement[80843-81133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80209-80464]:Block[80878-81133]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[80223-80313]:IfStatement[80892-80982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80258-80313]:Block[80927-80982]"
    }, {
      "left" : "return Math.PI * F_1_4;",
      "right" : "return Math.PI * F_1_4;",
      "info" : "ReturnStatement[80276-80299]:ReturnStatement[80945-80968]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[80327-80417]:IfStatement[80996-81086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80362-80417]:Block[81031-81086]"
    }, {
      "left" : "return Math.PI * F_3_4;",
      "right" : "return Math.PI * F_3_4;",
      "info" : "ReturnStatement[80380-80403]:ReturnStatement[81049-81072]"
    }, {
      "left" : "return Math.PI * F_1_2;",
      "right" : "return Math.PI * F_1_2;",
      "info" : "ReturnStatement[80431-80454]:ReturnStatement[81100-81123]"
    }, {
      "left" : "if (y == Double.NEGATIVE_INFINITY)",
      "right" : "if (y == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[80474-80767]:IfStatement[81143-81436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80509-80767]:Block[81178-81436]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[80523-80614]:IfStatement[81192-81283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80558-80614]:Block[81227-81283]"
    }, {
      "left" : "return -Math.PI * F_1_4;",
      "right" : "return -Math.PI * F_1_4;",
      "info" : "ReturnStatement[80576-80600]:ReturnStatement[81245-81269]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[80628-80719]:IfStatement[81297-81388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80663-80719]:Block[81332-81388]"
    }, {
      "left" : "return -Math.PI * F_3_4;",
      "right" : "return -Math.PI * F_3_4;",
      "info" : "ReturnStatement[80681-80705]:ReturnStatement[81350-81374]"
    }, {
      "left" : "return -Math.PI * F_1_2;",
      "right" : "return -Math.PI * F_1_2;",
      "info" : "ReturnStatement[80733-80757]:ReturnStatement[81402-81426]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[80777-80983]:IfStatement[81446-81652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80812-80983]:Block[81481-81652]"
    }, {
      "left" : "if (y > 0 || 1 / y > 0)",
      "right" : "if (y > 0 || 1 / y > 0)",
      "info" : "IfStatement[80826-80892]:IfStatement[81495-81561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80850-80892]:Block[81519-81561]"
    }, {
      "left" : "return 0d;",
      "right" : "return 0d;",
      "info" : "ReturnStatement[80868-80878]:ReturnStatement[81537-81547]"
    }, {
      "left" : "if (y < 0 || 1 / y < 0)",
      "right" : "if (y < 0 || 1 / y < 0)",
      "info" : "IfStatement[80906-80973]:IfStatement[81575-81642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80930-80973]:Block[81599-81642]"
    }, {
      "left" : "return -0d;",
      "right" : "return -0d;",
      "info" : "ReturnStatement[80948-80959]:ReturnStatement[81617-81628]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[80993-81221]:IfStatement[81662-81890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81036-81221]:Block[81705-81890]"
    }, {
      "left" : "if (y > 0.0 || 1 / y > 0.0)",
      "right" : "if (y > 0.0 || 1 / y > 0.0)",
      "info" : "IfStatement[81050-81125]:IfStatement[81719-81794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81078-81125]:Block[81747-81794]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[81096-81111]:ReturnStatement[81765-81780]"
    }, {
      "left" : "if (y < 0 || 1 / y < 0)",
      "right" : "if (y < 0 || 1 / y < 0)",
      "info" : "IfStatement[81139-81211]:IfStatement[81808-81880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81163-81211]:Block[81832-81880]"
    }, {
      "left" : "return -Math.PI;",
      "right" : "return -Math.PI;",
      "info" : "ReturnStatement[81181-81197]:ReturnStatement[81850-81866]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[81287-81496]:IfStatement[81956-82165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81299-81496]:Block[81968-82165]"
    }, {
      "left" : "if (y > 0 || 1 / y > 0)",
      "right" : "if (y > 0 || 1 / y > 0)",
      "info" : "IfStatement[81313-81392]:IfStatement[81982-82061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81337-81392]:Block[82006-82061]"
    }, {
      "left" : "return Math.PI * F_1_2;",
      "right" : "return Math.PI * F_1_2;",
      "info" : "ReturnStatement[81355-81378]:ReturnStatement[82024-82047]"
    }, {
      "left" : "if (y < 0 || 1 / y < 0)",
      "right" : "if (y < 0 || 1 / y < 0)",
      "info" : "IfStatement[81406-81486]:IfStatement[82075-82155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81430-81486]:Block[82099-82155]"
    }, {
      "left" : "return -Math.PI * F_1_2;",
      "right" : "return -Math.PI * F_1_2;",
      "info" : "ReturnStatement[81448-81472]:ReturnStatement[82117-82141]"
    }, {
      "left" : "final double r = y / x;",
      "right" : "final double r = y / x;",
      "info" : "VariableDeclarationStatement[81539-81562]:VariableDeclarationStatement[82208-82231]"
    }, {
      "left" : "if (Double.isInfinite(r))",
      "right" : "if (Double.isInfinite(r))",
      "info" : "IfStatement[81571-81689]:IfStatement[82240-82358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81597-81689]:Block[82266-82358]"
    }, {
      "left" : "return atan(r, 0, x < 0);",
      "right" : "return atan(r, 0, x < 0);",
      "info" : "ReturnStatement[81654-81679]:ReturnStatement[82323-82348]"
    }, {
      "left" : "double ra = doubleHighPart(r);",
      "right" : "double ra = doubleHighPart(r);",
      "info" : "VariableDeclarationStatement[81699-81729]:VariableDeclarationStatement[82368-82398]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[81738-81757]:VariableDeclarationStatement[82407-82426]"
    }, {
      "left" : "final double xa = doubleHighPart(x);",
      "right" : "final double xa = doubleHighPart(x);",
      "info" : "VariableDeclarationStatement[81786-81822]:VariableDeclarationStatement[82455-82491]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[81831-81856]:VariableDeclarationStatement[82500-82525]"
    }, {
      "left" : "rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;",
      "right" : "rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;",
      "info" : "ExpressionStatement[81866-81920]:ExpressionStatement[82535-82589]"
    }, {
      "left" : "final double temp = ra + rb;",
      "right" : "final double temp = ra + rb;",
      "info" : "VariableDeclarationStatement[81930-81958]:VariableDeclarationStatement[82599-82627]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[81967-81990]:ExpressionStatement[82636-82659]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[81999-82009]:ExpressionStatement[82668-82678]"
    }, {
      "left" : "if (ra == 0)",
      "right" : "if (ra == 0)",
      "info" : "IfStatement[82019-82120]:IfStatement[82688-82789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82032-82120]:Block[82701-82789]"
    }, {
      "left" : "ra = copySign(0d, y);",
      "right" : "ra = copySign(0d, y);",
      "info" : "ExpressionStatement[82089-82110]:ExpressionStatement[82758-82779]"
    }, {
      "left" : "final double result = atan(ra, rb, x < 0);",
      "right" : "final double result = atan(ra, rb, x < 0);",
      "info" : "VariableDeclarationStatement[82151-82193]:VariableDeclarationStatement[82820-82862]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[82203-82217]:ReturnStatement[82872-82886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82395-83927]:Block[83064-84596]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[82403-82453]:IfStatement[83072-83122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82415-82453]:Block[83084-83122]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[82427-82445]:ReturnStatement[83096-83114]"
    }, {
      "left" : "if (x > 1.0 || x < -1.0)",
      "right" : "if (x > 1.0 || x < -1.0)",
      "info" : "IfStatement[82461-82524]:IfStatement[83130-83193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82486-82524]:Block[83155-83193]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[82498-82516]:ReturnStatement[83167-83185]"
    }, {
      "left" : "if (x == 1.0)",
      "right" : "if (x == 1.0)",
      "info" : "IfStatement[82532-82585]:IfStatement[83201-83254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82546-82585]:Block[83215-83254]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[82558-82577]:ReturnStatement[83227-83246]"
    }, {
      "left" : "if (x == -1.0)",
      "right" : "if (x == -1.0)",
      "info" : "IfStatement[82593-82648]:IfStatement[83262-83317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82608-82648]:Block[83277-83317]"
    }, {
      "left" : "return -Math.PI/2.0;",
      "right" : "return -Math.PI/2.0;",
      "info" : "ReturnStatement[82620-82640]:ReturnStatement[83289-83309]"
    }, {
      "left" : "if (x == 0.0)",
      "right" : "if (x == 0.0)",
      "info" : "IfStatement[82656-82739]:IfStatement[83325-83408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82670-82739]:Block[83339-83408]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[82722-82731]:ReturnStatement[83391-83400]"
    }, {
      "left" : "double temp = x * HEX_40000000;",
      "right" : "double temp = x * HEX_40000000;",
      "info" : "VariableDeclarationStatement[82818-82849]:VariableDeclarationStatement[83487-83518]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[82856-82890]:VariableDeclarationStatement[83525-83559]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[82897-82922]:VariableDeclarationStatement[83566-83591]"
    }, {
      "left" : "double ya = xa*xa;",
      "right" : "double ya = xa*xa;",
      "info" : "VariableDeclarationStatement[82952-82970]:VariableDeclarationStatement[83621-83639]"
    }, {
      "left" : "double yb = xa*xb*2.0 + xb*xb;",
      "right" : "double yb = xa*xb*2.0 + xb*xb;",
      "info" : "VariableDeclarationStatement[82977-83007]:VariableDeclarationStatement[83646-83676]"
    }, {
      "left" : "ya = -ya;",
      "right" : "ya = -ya;",
      "info" : "ExpressionStatement[83043-83052]:ExpressionStatement[83712-83721]"
    }, {
      "left" : "yb = -yb;",
      "right" : "yb = -yb;",
      "info" : "ExpressionStatement[83059-83068]:ExpressionStatement[83728-83737]"
    }, {
      "left" : "double za = 1.0 + ya;",
      "right" : "double za = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[83076-83097]:VariableDeclarationStatement[83745-83766]"
    }, {
      "left" : "double zb = -(za - 1.0 - ya);",
      "right" : "double zb = -(za - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[83104-83133]:VariableDeclarationStatement[83773-83802]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[83141-83156]:ExpressionStatement[83810-83825]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[83163-83187]:ExpressionStatement[83832-83856]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[83194-83204]:ExpressionStatement[83863-83873]"
    }, {
      "left" : "double y;",
      "right" : "double y;",
      "info" : "VariableDeclarationStatement[83236-83245]:VariableDeclarationStatement[83905-83914]"
    }, {
      "left" : "y = sqrt(za);",
      "right" : "y = sqrt(za);",
      "info" : "ExpressionStatement[83252-83265]:ExpressionStatement[83921-83934]"
    }, {
      "left" : "temp = y * HEX_40000000;",
      "right" : "temp = y * HEX_40000000;",
      "info" : "ExpressionStatement[83272-83296]:ExpressionStatement[83941-83965]"
    }, {
      "left" : "ya = y + temp - temp;",
      "right" : "ya = y + temp - temp;",
      "info" : "ExpressionStatement[83303-83324]:ExpressionStatement[83972-83993]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[83331-83343]:ExpressionStatement[84000-84012]"
    }, {
      "left" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "right" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "info" : "ExpressionStatement[83388-83435]:ExpressionStatement[84057-84104]"
    }, {
      "left" : "double dx = zb / (2.0*y);",
      "right" : "double dx = zb / (2.0*y);",
      "info" : "VariableDeclarationStatement[83482-83507]:VariableDeclarationStatement[84151-84176]"
    }, {
      "left" : "double r = x/y;",
      "right" : "double r = x/y;",
      "info" : "VariableDeclarationStatement[83546-83561]:VariableDeclarationStatement[84215-84230]"
    }, {
      "left" : "temp = r * HEX_40000000;",
      "right" : "temp = r * HEX_40000000;",
      "info" : "ExpressionStatement[83568-83592]:ExpressionStatement[84237-84261]"
    }, {
      "left" : "double ra = r + temp - temp;",
      "right" : "double ra = r + temp - temp;",
      "info" : "VariableDeclarationStatement[83599-83627]:VariableDeclarationStatement[84268-84296]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[83634-83653]:VariableDeclarationStatement[84303-84322]"
    }, {
      "left" : "rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;",
      "right" : "rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;",
      "info" : "ExpressionStatement[83661-83707]:ExpressionStatement[84330-84376]"
    }, {
      "left" : "rb += -x * dx / y / y;",
      "right" : "rb += -x * dx / y / y;",
      "info" : "ExpressionStatement[83751-83773]:ExpressionStatement[84420-84442]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[83824-83839]:ExpressionStatement[84493-84508]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[83846-83869]:ExpressionStatement[84515-84538]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[83876-83886]:ExpressionStatement[84545-84555]"
    }, {
      "left" : "return atan(ra, rb, false);",
      "right" : "return atan(ra, rb, false);",
      "info" : "ReturnStatement[83894-83921]:ReturnStatement[84563-84590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84103-85736]:Block[84772-86405]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[84111-84161]:IfStatement[84780-84830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84123-84161]:Block[84792-84830]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[84135-84153]:ReturnStatement[84804-84822]"
    }, {
      "left" : "if (x > 1.0 || x < -1.0)",
      "right" : "if (x > 1.0 || x < -1.0)",
      "info" : "IfStatement[84169-84232]:IfStatement[84838-84901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84194-84232]:Block[84863-84901]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[84206-84224]:ReturnStatement[84875-84893]"
    }, {
      "left" : "if (x == -1.0)",
      "right" : "if (x == -1.0)",
      "info" : "IfStatement[84240-84290]:IfStatement[84909-84959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84255-84290]:Block[84924-84959]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[84267-84282]:ReturnStatement[84936-84951]"
    }, {
      "left" : "if (x == 1.0)",
      "right" : "if (x == 1.0)",
      "info" : "IfStatement[84298-84343]:IfStatement[84967-85012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84312-84343]:Block[84981-85012]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[84324-84335]:ReturnStatement[84993-85004]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[84351-84402]:IfStatement[85020-85071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84363-84402]:Block[85032-85071]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[84375-84394]:ReturnStatement[85044-85063]"
    }, {
      "left" : "double temp = x * HEX_40000000;",
      "right" : "double temp = x * HEX_40000000;",
      "info" : "VariableDeclarationStatement[84481-84512]:VariableDeclarationStatement[85150-85181]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[84519-84553]:VariableDeclarationStatement[85188-85222]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[84560-84585]:VariableDeclarationStatement[85229-85254]"
    }, {
      "left" : "double ya = xa*xa;",
      "right" : "double ya = xa*xa;",
      "info" : "VariableDeclarationStatement[84615-84633]:VariableDeclarationStatement[85284-85302]"
    }, {
      "left" : "double yb = xa*xb*2.0 + xb*xb;",
      "right" : "double yb = xa*xb*2.0 + xb*xb;",
      "info" : "VariableDeclarationStatement[84640-84670]:VariableDeclarationStatement[85309-85339]"
    }, {
      "left" : "ya = -ya;",
      "right" : "ya = -ya;",
      "info" : "ExpressionStatement[84706-84715]:ExpressionStatement[85375-85384]"
    }, {
      "left" : "yb = -yb;",
      "right" : "yb = -yb;",
      "info" : "ExpressionStatement[84722-84731]:ExpressionStatement[85391-85400]"
    }, {
      "left" : "double za = 1.0 + ya;",
      "right" : "double za = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[84739-84760]:VariableDeclarationStatement[85408-85429]"
    }, {
      "left" : "double zb = -(za - 1.0 - ya);",
      "right" : "double zb = -(za - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[84767-84796]:VariableDeclarationStatement[85436-85465]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[84804-84819]:ExpressionStatement[85473-85488]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[84826-84850]:ExpressionStatement[85495-85519]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[84857-84867]:ExpressionStatement[85526-85536]"
    }, {
      "left" : "double y = sqrt(za);",
      "right" : "double y = sqrt(za);",
      "info" : "VariableDeclarationStatement[84899-84919]:VariableDeclarationStatement[85568-85588]"
    }, {
      "left" : "temp = y * HEX_40000000;",
      "right" : "temp = y * HEX_40000000;",
      "info" : "ExpressionStatement[84926-84950]:ExpressionStatement[85595-85619]"
    }, {
      "left" : "ya = y + temp - temp;",
      "right" : "ya = y + temp - temp;",
      "info" : "ExpressionStatement[84957-84978]:ExpressionStatement[85626-85647]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[84985-84997]:ExpressionStatement[85654-85666]"
    }, {
      "left" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "right" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "info" : "ExpressionStatement[85042-85089]:ExpressionStatement[85711-85758]"
    }, {
      "left" : "yb += zb / (2.0*y);",
      "right" : "yb += zb / (2.0*y);",
      "info" : "ExpressionStatement[85136-85155]:ExpressionStatement[85805-85824]"
    }, {
      "left" : "y = ya+yb;",
      "right" : "y = ya+yb;",
      "info" : "ExpressionStatement[85162-85172]:ExpressionStatement[85831-85841]"
    }, {
      "left" : "yb = -(y - ya - yb);",
      "right" : "yb = -(y - ya - yb);",
      "info" : "ExpressionStatement[85179-85199]:ExpressionStatement[85848-85868]"
    }, {
      "left" : "double r = y/x;",
      "right" : "double r = y/x;",
      "info" : "VariableDeclarationStatement[85238-85253]:VariableDeclarationStatement[85907-85922]"
    }, {
      "left" : "if (Double.isInfinite(r))",
      "right" : "if (Double.isInfinite(r))",
      "info" : "IfStatement[85286-85409]:IfStatement[85955-86078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85312-85409]:Block[85981-86078]"
    }, {
      "left" : "return Math.PI/2;",
      "right" : "return Math.PI/2;",
      "info" : "ReturnStatement[85349-85366]:ReturnStatement[86018-86035]"
    }, {
      "left" : "double ra = doubleHighPart(r);",
      "right" : "double ra = doubleHighPart(r);",
      "info" : "VariableDeclarationStatement[85417-85447]:VariableDeclarationStatement[86086-86116]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[85454-85473]:VariableDeclarationStatement[86123-86142]"
    }, {
      "left" : "rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;",
      "right" : "rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;",
      "info" : "ExpressionStatement[85481-85527]:ExpressionStatement[86150-86196]"
    }, {
      "left" : "rb += yb / x;",
      "right" : "rb += yb / x;",
      "info" : "ExpressionStatement[85571-85584]:ExpressionStatement[86240-86253]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[85635-85650]:ExpressionStatement[86304-86319]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[85657-85680]:ExpressionStatement[86326-86349]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[85687-85697]:ExpressionStatement[86356-86366]"
    }, {
      "left" : "return atan(ra, rb, x<0);",
      "right" : "return atan(ra, rb, x<0);",
      "info" : "ReturnStatement[85705-85730]:ReturnStatement[86374-86399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85912-88435]:Block[86581-89104]"
    }, {
      "left" : "long inbits = Double.doubleToLongBits(x);",
      "right" : "long inbits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[85961-86002]:VariableDeclarationStatement[86630-86671]"
    }, {
      "left" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "VariableDeclarationStatement[86009-86062]:VariableDeclarationStatement[86678-86731]"
    }, {
      "left" : "boolean subnormal = false;",
      "right" : "boolean subnormal = false;",
      "info" : "VariableDeclarationStatement[86069-86095]:VariableDeclarationStatement[86738-86764]"
    }, {
      "left" : "if (exponent == -1023)",
      "right" : "if (exponent == -1023)",
      "info" : "IfStatement[86103-86418]:IfStatement[86772-87087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86126-86418]:Block[86795-87087]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[86138-86187]:IfStatement[86807-86856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86150-86187]:Block[86819-86856]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[86166-86175]:ReturnStatement[86835-86844]"
    }, {
      "left" : "subnormal = true;",
      "right" : "subnormal = true;",
      "info" : "ExpressionStatement[86239-86256]:ExpressionStatement[86908-86925]"
    }, {
      "left" : "x *= 1.8014398509481984E16;",
      "right" : "x *= 1.8014398509481984E16;",
      "info" : "ExpressionStatement[86267-86294]:ExpressionStatement[86936-86963]"
    }, {
      "left" : "inbits = Double.doubleToLongBits(x);",
      "right" : "inbits = Double.doubleToLongBits(x);",
      "info" : "ExpressionStatement[86314-86350]:ExpressionStatement[86983-87019]"
    }, {
      "left" : "exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "ExpressionStatement[86361-86410]:ExpressionStatement[87030-87079]"
    }, {
      "left" : "if (exponent == 1024)",
      "right" : "if (exponent == 1024)",
      "info" : "IfStatement[86426-86526]:IfStatement[87095-87195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86448-86526]:Block[87117-87195]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[86509-86518]:ReturnStatement[87178-87187]"
    }, {
      "left" : "int exp3 = exponent / 3;",
      "right" : "int exp3 = exponent / 3;",
      "info" : "VariableDeclarationStatement[86571-86595]:VariableDeclarationStatement[87240-87264]"
    }, {
      "left" : "double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);",
      "right" : "double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);",
      "info" : "VariableDeclarationStatement[86685-86835]:VariableDeclarationStatement[87354-87504]"
    }, {
      "left" : "final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);",
      "right" : "final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);",
      "info" : "VariableDeclarationStatement[86893-86991]:VariableDeclarationStatement[87562-87660]"
    }, {
      "left" : "double est = -0.010714690733195933;",
      "right" : "double est = -0.010714690733195933;",
      "info" : "VariableDeclarationStatement[87056-87091]:VariableDeclarationStatement[87725-87760]"
    }, {
      "left" : "est = est * mant + 0.0875862700108075;",
      "right" : "est = est * mant + 0.0875862700108075;",
      "info" : "ExpressionStatement[87098-87136]:ExpressionStatement[87767-87805]"
    }, {
      "left" : "est = est * mant + -0.3058015757857271;",
      "right" : "est = est * mant + -0.3058015757857271;",
      "info" : "ExpressionStatement[87143-87182]:ExpressionStatement[87812-87851]"
    }, {
      "left" : "est = est * mant + 0.7249995199969751;",
      "right" : "est = est * mant + 0.7249995199969751;",
      "info" : "ExpressionStatement[87189-87227]:ExpressionStatement[87858-87896]"
    }, {
      "left" : "est = est * mant + 0.5039018405998233;",
      "right" : "est = est * mant + 0.5039018405998233;",
      "info" : "ExpressionStatement[87234-87272]:ExpressionStatement[87903-87941]"
    }, {
      "left" : "est *= CBRTTWO[exponent % 3 + 2];",
      "right" : "est *= CBRTTWO[exponent % 3 + 2];",
      "info" : "ExpressionStatement[87280-87313]:ExpressionStatement[87949-87982]"
    }, {
      "left" : "final double xs = x / (p2*p2*p2);",
      "right" : "final double xs = x / (p2*p2*p2);",
      "info" : "VariableDeclarationStatement[87577-87610]:VariableDeclarationStatement[88246-88279]"
    }, {
      "left" : "est += (xs - est*est*est) / (3*est*est);",
      "right" : "est += (xs - est*est*est) / (3*est*est);",
      "info" : "ExpressionStatement[87617-87657]:ExpressionStatement[88286-88326]"
    }, {
      "left" : "est += (xs - est*est*est) / (3*est*est);",
      "right" : "est += (xs - est*est*est) / (3*est*est);",
      "info" : "ExpressionStatement[87664-87704]:ExpressionStatement[88333-88373]"
    }, {
      "left" : "double temp = est * HEX_40000000;",
      "right" : "double temp = est * HEX_40000000;",
      "info" : "VariableDeclarationStatement[87802-87835]:VariableDeclarationStatement[88471-88504]"
    }, {
      "left" : "double ya = est + temp - temp;",
      "right" : "double ya = est + temp - temp;",
      "info" : "VariableDeclarationStatement[87842-87872]:VariableDeclarationStatement[88511-88541]"
    }, {
      "left" : "double yb = est - ya;",
      "right" : "double yb = est - ya;",
      "info" : "VariableDeclarationStatement[87879-87900]:VariableDeclarationStatement[88548-88569]"
    }, {
      "left" : "double za = ya * ya;",
      "right" : "double za = ya * ya;",
      "info" : "VariableDeclarationStatement[87908-87928]:VariableDeclarationStatement[88577-88597]"
    }, {
      "left" : "double zb = ya * yb * 2.0 + yb * yb;",
      "right" : "double zb = ya * yb * 2.0 + yb * yb;",
      "info" : "VariableDeclarationStatement[87935-87971]:VariableDeclarationStatement[88604-88640]"
    }, {
      "left" : "temp = za * HEX_40000000;",
      "right" : "temp = za * HEX_40000000;",
      "info" : "ExpressionStatement[87978-88003]:ExpressionStatement[88647-88672]"
    }, {
      "left" : "double temp2 = za + temp - temp;",
      "right" : "double temp2 = za + temp - temp;",
      "info" : "VariableDeclarationStatement[88010-88042]:VariableDeclarationStatement[88679-88711]"
    }, {
      "left" : "zb += za - temp2;",
      "right" : "zb += za - temp2;",
      "info" : "ExpressionStatement[88049-88066]:ExpressionStatement[88718-88735]"
    }, {
      "left" : "za = temp2;",
      "right" : "za = temp2;",
      "info" : "ExpressionStatement[88073-88084]:ExpressionStatement[88742-88753]"
    }, {
      "left" : "zb = za * yb + ya * zb + zb * yb;",
      "right" : "zb = za * yb + ya * zb + zb * yb;",
      "info" : "ExpressionStatement[88092-88125]:ExpressionStatement[88761-88794]"
    }, {
      "left" : "za = za * ya;",
      "right" : "za = za * ya;",
      "info" : "ExpressionStatement[88132-88145]:ExpressionStatement[88801-88814]"
    }, {
      "left" : "double na = xs - za;",
      "right" : "double na = xs - za;",
      "info" : "VariableDeclarationStatement[88153-88173]:VariableDeclarationStatement[88822-88842]"
    }, {
      "left" : "double nb = -(na - xs + za);",
      "right" : "double nb = -(na - xs + za);",
      "info" : "VariableDeclarationStatement[88180-88208]:VariableDeclarationStatement[88849-88877]"
    }, {
      "left" : "nb -= zb;",
      "right" : "nb -= zb;",
      "info" : "ExpressionStatement[88215-88224]:ExpressionStatement[88884-88893]"
    }, {
      "left" : "est += (na+nb)/(3*est*est);",
      "right" : "est += (na+nb)/(3*est*est);",
      "info" : "ExpressionStatement[88232-88259]:ExpressionStatement[88901-88928]"
    }, {
      "left" : "est *= p2;",
      "right" : "est *= p2;",
      "info" : "ExpressionStatement[88322-88332]:ExpressionStatement[88991-89001]"
    }, {
      "left" : "if (subnormal)",
      "right" : "if (subnormal)",
      "info" : "IfStatement[88340-88410]:IfStatement[89009-89079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88355-88410]:Block[89024-89079]"
    }, {
      "left" : "est *= 3.814697265625E-6;",
      "right" : "est *= 3.814697265625E-6;",
      "info" : "ExpressionStatement[88367-88392]:ExpressionStatement[89036-89061]"
    }, {
      "left" : "return est;",
      "right" : "return est;",
      "info" : "ReturnStatement[88418-88429]:ReturnStatement[89087-89098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88645-89223]:Block[89314-89892]"
    }, {
      "left" : "if (Double.isInfinite(x) || x == 0.0)",
      "right" : "if (Double.isInfinite(x) || x == 0.0)",
      "info" : "IfStatement[88655-88766]:IfStatement[89324-89435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88693-88766]:Block[89362-89435]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[88747-88756]:ReturnStatement[89416-89425]"
    }, {
      "left" : "final double facta = 0.01745329052209854;",
      "right" : "final double facta = 0.01745329052209854;",
      "info" : "VariableDeclarationStatement[88839-88880]:VariableDeclarationStatement[89508-89549]"
    }, {
      "left" : "final double factb = 1.997844754509471E-9;",
      "right" : "final double factb = 1.997844754509471E-9;",
      "info" : "VariableDeclarationStatement[88889-88931]:VariableDeclarationStatement[89558-89600]"
    }, {
      "left" : "double xa = doubleHighPart(x);",
      "right" : "double xa = doubleHighPart(x);",
      "info" : "VariableDeclarationStatement[88941-88971]:VariableDeclarationStatement[89610-89640]"
    }, {
      "left" : "double xb = x - xa;",
      "right" : "double xb = x - xa;",
      "info" : "VariableDeclarationStatement[88980-88999]:VariableDeclarationStatement[89649-89668]"
    }, {
      "left" : "double result = xb * factb + xb * facta + xa * factb + xa * facta;",
      "right" : "double result = xb * factb + xb * facta + xa * factb + xa * facta;",
      "info" : "VariableDeclarationStatement[89009-89075]:VariableDeclarationStatement[89678-89744]"
    }, {
      "left" : "if (result == 0)",
      "right" : "if (result == 0)",
      "info" : "IfStatement[89084-89194]:IfStatement[89753-89863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89101-89194]:Block[89770-89863]"
    }, {
      "left" : "result = result * x;",
      "right" : "result = result * x;",
      "info" : "ExpressionStatement[89115-89135]:ExpressionStatement[89784-89804]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[89203-89217]:ReturnStatement[89872-89886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89433-89857]:Block[90102-90526]"
    }, {
      "left" : "if (Double.isInfinite(x) || x == 0.0)",
      "right" : "if (Double.isInfinite(x) || x == 0.0)",
      "info" : "IfStatement[89443-89554]:IfStatement[90112-90223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89481-89554]:Block[90150-90223]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[89535-89544]:ReturnStatement[90204-90213]"
    }, {
      "left" : "final double facta = 57.2957763671875;",
      "right" : "final double facta = 57.2957763671875;",
      "info" : "VariableDeclarationStatement[89627-89665]:VariableDeclarationStatement[90296-90334]"
    }, {
      "left" : "final double factb = 3.145894820876798E-6;",
      "right" : "final double factb = 3.145894820876798E-6;",
      "info" : "VariableDeclarationStatement[89674-89716]:VariableDeclarationStatement[90343-90385]"
    }, {
      "left" : "double xa = doubleHighPart(x);",
      "right" : "double xa = doubleHighPart(x);",
      "info" : "VariableDeclarationStatement[89726-89756]:VariableDeclarationStatement[90395-90425]"
    }, {
      "left" : "double xb = x - xa;",
      "right" : "double xb = x - xa;",
      "info" : "VariableDeclarationStatement[89765-89784]:VariableDeclarationStatement[90434-90453]"
    }, {
      "left" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "right" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "info" : "ReturnStatement[89794-89851]:ReturnStatement[90463-90520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90021-90061]:Block[90690-90730]"
    }, {
      "left" : "return (x < 0) ? -x : x;",
      "right" : "return (x < 0) ? -x : x;",
      "info" : "ReturnStatement[90031-90055]:ReturnStatement[90700-90724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90227-90268]:Block[90896-90937]"
    }, {
      "left" : "return (x < 0l) ? -x : x;",
      "right" : "return (x < 0l) ? -x : x;",
      "info" : "ReturnStatement[90237-90262]:ReturnStatement[90906-90931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90436-90516]:Block[91105-91185]"
    }, {
      "left" : "return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;",
      "right" : "return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;",
      "info" : "ReturnStatement[90446-90494]:ReturnStatement[91115-91163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90680-90757]:Block[91349-91426]"
    }, {
      "left" : "return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;",
      "right" : "return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;",
      "info" : "ReturnStatement[90690-90735]:ReturnStatement[91359-91404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90962-91141]:Block[91631-91810]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[90972-91054]:IfStatement[91641-91723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90998-91054]:Block[91667-91723]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[91012-91044]:ReturnStatement[91681-91713]"
    }, {
      "left" : "return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));",
      "right" : "return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));",
      "info" : "ReturnStatement[91063-91135]:ReturnStatement[91732-91804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91344-91515]:Block[92013-92184]"
    }, {
      "left" : "if (Float.isInfinite(x))",
      "right" : "if (Float.isInfinite(x))",
      "info" : "IfStatement[91354-91434]:IfStatement[92023-92103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91379-91434]:Block[92048-92103]"
    }, {
      "left" : "return Float.POSITIVE_INFINITY;",
      "right" : "return Float.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[91393-91424]:ReturnStatement[92062-92093]"
    }, {
      "left" : "return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));",
      "right" : "return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));",
      "info" : "ReturnStatement[91443-91509]:ReturnStatement[92112-92178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91743-94775]:Block[92412-95444]"
    }, {
      "left" : "if ((n > -1023) && (n < 1024))",
      "right" : "if ((n > -1023) && (n < 1024))",
      "info" : "IfStatement[91845-91962]:IfStatement[92514-92631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91876-91962]:Block[92545-92631]"
    }, {
      "left" : "return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);",
      "right" : "return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);",
      "info" : "ReturnStatement[91890-91952]:ReturnStatement[92559-92621]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0))",
      "info" : "IfStatement[92004-92094]:IfStatement[92673-92763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92061-92094]:Block[92730-92763]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[92075-92084]:ReturnStatement[92744-92753]"
    }, {
      "left" : "if (n < -2098)",
      "right" : "if (n < -2098)",
      "info" : "IfStatement[92103-92170]:IfStatement[92772-92839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92118-92170]:Block[92787-92839]"
    }, {
      "left" : "return (d > 0) ? 0.0 : -0.0;",
      "right" : "return (d > 0) ? 0.0 : -0.0;",
      "info" : "ReturnStatement[92132-92160]:ReturnStatement[92801-92829]"
    }, {
      "left" : "if (n > 2097)",
      "right" : "if (n > 2097)",
      "info" : "IfStatement[92179-92286]:IfStatement[92848-92955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92193-92286]:Block[92862-92955]"
    }, {
      "left" : "return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "right" : "return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[92207-92276]:ReturnStatement[92876-92945]"
    }, {
      "left" : "final long bits = Double.doubleToLongBits(d);",
      "right" : "final long bits = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[92319-92364]:VariableDeclarationStatement[92988-93033]"
    }, {
      "left" : "final long sign = bits & 0x8000000000000000L;",
      "right" : "final long sign = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[92373-92418]:VariableDeclarationStatement[93042-93087]"
    }, {
      "left" : "int  exponent   = ((int) (bits >>> 52)) & 0x7ff;",
      "right" : "int  exponent   = ((int) (bits >>> 52)) & 0x7ff;",
      "info" : "VariableDeclarationStatement[92427-92475]:VariableDeclarationStatement[93096-93144]"
    }, {
      "left" : "long mantissa   = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa   = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[92484-92529]:VariableDeclarationStatement[93153-93198]"
    }, {
      "left" : "int scaledExponent = exponent + n;",
      "right" : "int scaledExponent = exponent + n;",
      "info" : "VariableDeclarationStatement[92574-92608]:VariableDeclarationStatement[93243-93277]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[92618-94768]:IfStatement[93287-95437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92629-93798]:Block[93298-94467]"
    }, {
      "left" : "if (scaledExponent > 0)",
      "right" : "if (scaledExponent > 0)",
      "info" : "IfStatement[92695-93788]:IfStatement[93364-94457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92719-92930]:Block[93388-93599]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "info" : "ReturnStatement[92834-92916]:ReturnStatement[93503-93585]"
    }, {
      "left" : "if (scaledExponent > -53)",
      "right" : "if (scaledExponent > -53)",
      "info" : "IfStatement[92936-93788]:IfStatement[93605-94457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92962-93637]:Block[93631-94306]"
    }, {
      "left" : "mantissa = mantissa | (1L << 52);",
      "right" : "mantissa = mantissa | (1L << 52);",
      "info" : "ExpressionStatement[93117-93150]:ExpressionStatement[93786-93819]"
    }, {
      "left" : "final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));",
      "right" : "final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));",
      "info" : "VariableDeclarationStatement[93254-93327]:VariableDeclarationStatement[93923-93996]"
    }, {
      "left" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "right" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "info" : "ExpressionStatement[93344-93389]:ExpressionStatement[94013-94058]"
    }, {
      "left" : "if (mostSignificantLostBit != 0)",
      "right" : "if (mostSignificantLostBit != 0)",
      "info" : "IfStatement[93406-93557]:IfStatement[94075-94226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93439-93557]:Block[94108-94226]"
    }, {
      "left" : "mantissa++;",
      "right" : "mantissa++;",
      "info" : "ExpressionStatement[93528-93539]:ExpressionStatement[94197-94208]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | mantissa);",
      "info" : "ReturnStatement[93574-93622]:ReturnStatement[94243-94291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93643-93788]:Block[94312-94457]"
    }, {
      "left" : "return (sign == 0L) ? 0.0 : -0.0;",
      "right" : "return (sign == 0L) ? 0.0 : -0.0;",
      "info" : "ReturnStatement[93741-93774]:ReturnStatement[94410-94443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93804-94768]:Block[94473-95437]"
    }, {
      "left" : "if (exponent == 0)",
      "right" : "if (exponent == 0)",
      "info" : "IfStatement[93869-94758]:IfStatement[94538-95427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93888-94499]:Block[94557-95168]"
    }, {
      "left" : "while ((mantissa >>> 52) != 1)",
      "right" : "while ((mantissa >>> 52) != 1)",
      "info" : "WhileStatement[93970-94104]:WhileStatement[94639-94773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94001-94104]:Block[94670-94773]"
    }, {
      "left" : "mantissa = mantissa << 1;",
      "right" : "mantissa = mantissa << 1;",
      "info" : "ExpressionStatement[94023-94048]:ExpressionStatement[94692-94717]"
    }, {
      "left" : "--scaledExponent;",
      "right" : "--scaledExponent;",
      "info" : "ExpressionStatement[94069-94086]:ExpressionStatement[94738-94755]"
    }, {
      "left" : "++scaledExponent;",
      "right" : "++scaledExponent;",
      "info" : "ExpressionStatement[94121-94138]:ExpressionStatement[94790-94807]"
    }, {
      "left" : "mantissa = mantissa & 0x000fffffffffffffL;",
      "right" : "mantissa = mantissa & 0x000fffffffffffffL;",
      "info" : "ExpressionStatement[94155-94197]:ExpressionStatement[94824-94866]"
    }, {
      "left" : "if (scaledExponent < 2047)",
      "right" : "if (scaledExponent < 2047)",
      "info" : "IfStatement[94215-94484]:IfStatement[94884-95153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94242-94364]:Block[94911-95033]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "info" : "ReturnStatement[94264-94346]:ReturnStatement[94933-95015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94370-94484]:Block[95039-95153]"
    }, {
      "left" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[94392-94466]:ReturnStatement[95061-95135]"
    }, {
      "left" : "if (scaledExponent < 2047)",
      "right" : "if (scaledExponent < 2047)",
      "info" : "IfStatement[94505-94758]:IfStatement[95174-95427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94532-94646]:Block[95201-95315]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "right" : "return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);",
      "info" : "ReturnStatement[94550-94632]:ReturnStatement[95219-95301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94652-94758]:Block[95321-95427]"
    }, {
      "left" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[94670-94744]:ReturnStatement[95339-95413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95000-97920]:Block[95669-98589]"
    }, {
      "left" : "if ((n > -127) && (n < 128))",
      "right" : "if ((n > -127) && (n < 128))",
      "info" : "IfStatement[95102-95204]:IfStatement[95771-95873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95131-95204]:Block[95800-95873]"
    }, {
      "left" : "return f * Float.intBitsToFloat((n + 127) << 23);",
      "right" : "return f * Float.intBitsToFloat((n + 127) << 23);",
      "info" : "ReturnStatement[95145-95194]:ReturnStatement[95814-95863]"
    }, {
      "left" : "if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f))",
      "right" : "if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f))",
      "info" : "IfStatement[95246-95335]:IfStatement[95915-96004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95302-95335]:Block[95971-96004]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[95316-95325]:ReturnStatement[95985-95994]"
    }, {
      "left" : "if (n < -277)",
      "right" : "if (n < -277)",
      "info" : "IfStatement[95344-95412]:IfStatement[96013-96081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95358-95412]:Block[96027-96081]"
    }, {
      "left" : "return (f > 0) ? 0.0f : -0.0f;",
      "right" : "return (f > 0) ? 0.0f : -0.0f;",
      "info" : "ReturnStatement[95372-95402]:ReturnStatement[96041-96071]"
    }, {
      "left" : "if (n > 276)",
      "right" : "if (n > 276)",
      "info" : "IfStatement[95421-95525]:IfStatement[96090-96194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95434-95525]:Block[96103-96194]"
    }, {
      "left" : "return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "right" : "return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[95448-95515]:ReturnStatement[96117-96184]"
    }, {
      "left" : "final int bits = Float.floatToIntBits(f);",
      "right" : "final int bits = Float.floatToIntBits(f);",
      "info" : "VariableDeclarationStatement[95558-95599]:VariableDeclarationStatement[96227-96268]"
    }, {
      "left" : "final int sign = bits & 0x80000000;",
      "right" : "final int sign = bits & 0x80000000;",
      "info" : "VariableDeclarationStatement[95608-95643]:VariableDeclarationStatement[96277-96312]"
    }, {
      "left" : "int  exponent  = (bits >>> 23) & 0xff;",
      "right" : "int  exponent  = (bits >>> 23) & 0xff;",
      "info" : "VariableDeclarationStatement[95652-95690]:VariableDeclarationStatement[96321-96359]"
    }, {
      "left" : "int mantissa   = bits & 0x007fffff;",
      "right" : "int mantissa   = bits & 0x007fffff;",
      "info" : "VariableDeclarationStatement[95699-95734]:VariableDeclarationStatement[96368-96403]"
    }, {
      "left" : "int scaledExponent = exponent + n;",
      "right" : "int scaledExponent = exponent + n;",
      "info" : "VariableDeclarationStatement[95779-95813]:VariableDeclarationStatement[96448-96482]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[95823-97913]:IfStatement[96492-98582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95834-96985]:Block[96503-97654]"
    }, {
      "left" : "if (scaledExponent > 0)",
      "right" : "if (scaledExponent > 0)",
      "info" : "IfStatement[95899-96975]:IfStatement[96568-97644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95923-96122]:Block[96592-96791]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "info" : "ReturnStatement[96038-96108]:ReturnStatement[96707-96777]"
    }, {
      "left" : "if (scaledExponent > -24)",
      "right" : "if (scaledExponent > -24)",
      "info" : "IfStatement[96128-96975]:IfStatement[96797-97644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96154-96823]:Block[96823-97492]"
    }, {
      "left" : "mantissa = mantissa | (1 << 23);",
      "right" : "mantissa = mantissa | (1 << 23);",
      "info" : "ExpressionStatement[96309-96341]:ExpressionStatement[96978-97010]"
    }, {
      "left" : "final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));",
      "right" : "final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));",
      "info" : "VariableDeclarationStatement[96445-96516]:VariableDeclarationStatement[97114-97185]"
    }, {
      "left" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "right" : "mantissa = mantissa >>> (1 - scaledExponent);",
      "info" : "ExpressionStatement[96533-96578]:ExpressionStatement[97202-97247]"
    }, {
      "left" : "if (mostSignificantLostBit != 0)",
      "right" : "if (mostSignificantLostBit != 0)",
      "info" : "IfStatement[96595-96746]:IfStatement[97264-97415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96628-96746]:Block[97297-97415]"
    }, {
      "left" : "mantissa++;",
      "right" : "mantissa++;",
      "info" : "ExpressionStatement[96717-96728]:ExpressionStatement[97386-97397]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | mantissa);",
      "info" : "ReturnStatement[96763-96808]:ReturnStatement[97432-97477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96829-96975]:Block[97498-97644]"
    }, {
      "left" : "return (sign == 0) ? 0.0f : -0.0f;",
      "right" : "return (sign == 0) ? 0.0f : -0.0f;",
      "info" : "ReturnStatement[96927-96961]:ReturnStatement[97596-97630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96991-97913]:Block[97660-98582]"
    }, {
      "left" : "if (exponent == 0)",
      "right" : "if (exponent == 0)",
      "info" : "IfStatement[97055-97903]:IfStatement[97724-98572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97074-97660]:Block[97743-98329]"
    }, {
      "left" : "while ((mantissa >>> 23) != 1)",
      "right" : "while ((mantissa >>> 23) != 1)",
      "info" : "WhileStatement[97156-97290]:WhileStatement[97825-97959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97187-97290]:Block[97856-97959]"
    }, {
      "left" : "mantissa = mantissa << 1;",
      "right" : "mantissa = mantissa << 1;",
      "info" : "ExpressionStatement[97209-97234]:ExpressionStatement[97878-97903]"
    }, {
      "left" : "--scaledExponent;",
      "right" : "--scaledExponent;",
      "info" : "ExpressionStatement[97255-97272]:ExpressionStatement[97924-97941]"
    }, {
      "left" : "++scaledExponent;",
      "right" : "++scaledExponent;",
      "info" : "ExpressionStatement[97307-97324]:ExpressionStatement[97976-97993]"
    }, {
      "left" : "mantissa = mantissa & 0x007fffff;",
      "right" : "mantissa = mantissa & 0x007fffff;",
      "info" : "ExpressionStatement[97341-97374]:ExpressionStatement[98010-98043]"
    }, {
      "left" : "if (scaledExponent < 255)",
      "right" : "if (scaledExponent < 255)",
      "info" : "IfStatement[97392-97645]:IfStatement[98061-98314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97418-97528]:Block[98087-98197]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "info" : "ReturnStatement[97440-97510]:ReturnStatement[98109-98179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97534-97645]:Block[98203-98314]"
    }, {
      "left" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[97556-97627]:ReturnStatement[98225-98296]"
    }, {
      "left" : "if (scaledExponent < 255)",
      "right" : "if (scaledExponent < 255)",
      "info" : "IfStatement[97666-97903]:IfStatement[98335-98572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97692-97794]:Block[98361-98463]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "right" : "return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);",
      "info" : "ReturnStatement[97710-97780]:ReturnStatement[98379-98449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97800-97903]:Block[98469-98572]"
    }, {
      "left" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "right" : "return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[97818-97889]:ReturnStatement[98487-98558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99132-100042]:Block[99801-100711]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isNaN(direction))",
      "right" : "if (Double.isNaN(d) || Double.isNaN(direction))",
      "info" : "IfStatement[99195-99566]:IfStatement[99864-100235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99243-99285]:Block[99912-99954]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[99257-99275]:ReturnStatement[99926-99944]"
    }, {
      "left" : "if (d == direction)",
      "right" : "if (d == direction)",
      "info" : "IfStatement[99291-99566]:IfStatement[99960-100235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99311-99352]:Block[99980-100021]"
    }, {
      "left" : "return direction;",
      "right" : "return direction;",
      "info" : "ReturnStatement[99325-99342]:ReturnStatement[99994-100011]"
    }, {
      "left" : "if (Double.isInfinite(d))",
      "right" : "if (Double.isInfinite(d))",
      "info" : "IfStatement[99358-99566]:IfStatement[100027-100235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99384-99462]:Block[100053-100131]"
    }, {
      "left" : "return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;",
      "right" : "return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;",
      "info" : "ReturnStatement[99398-99452]:ReturnStatement[100067-100121]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[99468-99566]:IfStatement[100137-100235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99480-99566]:Block[100149-100235]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[99494-99556]:ReturnStatement[100163-100225]"
    }, {
      "left" : "final long bits = Double.doubleToLongBits(d);",
      "right" : "final long bits = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[99689-99734]:VariableDeclarationStatement[100358-100403]"
    }, {
      "left" : "final long sign = bits & 0x8000000000000000L;",
      "right" : "final long sign = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[99743-99788]:VariableDeclarationStatement[100412-100457]"
    }, {
      "left" : "if ((direction < d) ^ (sign == 0L))",
      "right" : "if ((direction < d) ^ (sign == 0L))",
      "info" : "IfStatement[99797-100035]:IfStatement[100466-100704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99833-99931]:Block[100502-100600]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));",
      "right" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));",
      "info" : "ReturnStatement[99847-99921]:ReturnStatement[100516-100590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99937-100035]:Block[100606-100704]"
    }, {
      "left" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));",
      "right" : "return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));",
      "info" : "ReturnStatement[99951-100025]:ReturnStatement[100620-100694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101264-102139]:Block[101933-102808]"
    }, {
      "left" : "if (Double.isNaN(f) || Double.isNaN(direction))",
      "right" : "if (Double.isNaN(f) || Double.isNaN(direction))",
      "info" : "IfStatement[101327-101702]:IfStatement[101996-102371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101375-101416]:Block[102044-102085]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[101389-101406]:ReturnStatement[102058-102075]"
    }, {
      "left" : "if (f == direction)",
      "right" : "if (f == direction)",
      "info" : "IfStatement[101422-101702]:IfStatement[102091-102371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101442-101491]:Block[102111-102160]"
    }, {
      "left" : "return (float) direction;",
      "right" : "return (float) direction;",
      "info" : "ReturnStatement[101456-101481]:ReturnStatement[102125-102150]"
    }, {
      "left" : "if (Float.isInfinite(f))",
      "right" : "if (Float.isInfinite(f))",
      "info" : "IfStatement[101497-101702]:IfStatement[102166-102371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101522-101599]:Block[102191-102268]"
    }, {
      "left" : "return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;",
      "right" : "return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;",
      "info" : "ReturnStatement[101536-101589]:ReturnStatement[102205-102258]"
    }, {
      "left" : "if (f == 0f)",
      "right" : "if (f == 0f)",
      "info" : "IfStatement[101605-101702]:IfStatement[102274-102371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101618-101702]:Block[102287-102371]"
    }, {
      "left" : "return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;",
      "info" : "ReturnStatement[101632-101692]:ReturnStatement[102301-102361]"
    }, {
      "left" : "final int bits = Float.floatToIntBits(f);",
      "right" : "final int bits = Float.floatToIntBits(f);",
      "info" : "VariableDeclarationStatement[101825-101866]:VariableDeclarationStatement[102494-102535]"
    }, {
      "left" : "final int sign = bits & 0x80000000;",
      "right" : "final int sign = bits & 0x80000000;",
      "info" : "VariableDeclarationStatement[101875-101910]:VariableDeclarationStatement[102544-102579]"
    }, {
      "left" : "if ((direction < f) ^ (sign == 0))",
      "right" : "if ((direction < f) ^ (sign == 0))",
      "info" : "IfStatement[101919-102132]:IfStatement[102588-102801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101954-102040]:Block[102623-102709]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));",
      "right" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));",
      "info" : "ReturnStatement[101968-102030]:ReturnStatement[102637-102699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102046-102132]:Block[102715-102801]"
    }, {
      "left" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));",
      "right" : "return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));",
      "info" : "ReturnStatement[102060-102122]:ReturnStatement[102729-102791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102372-102702]:Block[103041-103371]"
    }, {
      "left" : "long y;",
      "right" : "long y;",
      "info" : "VariableDeclarationStatement[102382-102389]:VariableDeclarationStatement[103051-103058]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[102399-102451]:IfStatement[103068-103120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102411-102451]:Block[103080-103120]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[102432-102441]:ReturnStatement[103101-103110]"
    }, {
      "left" : "if (x >= TWO_POWER_52 || x <= -TWO_POWER_52)",
      "right" : "if (x >= TWO_POWER_52 || x <= -TWO_POWER_52)",
      "info" : "IfStatement[102461-102539]:IfStatement[103130-103208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102506-102539]:Block[103175-103208]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[102520-102529]:ReturnStatement[103189-103198]"
    }, {
      "left" : "y = (long) x;",
      "right" : "y = (long) x;",
      "info" : "ExpressionStatement[102549-102562]:ExpressionStatement[103218-103231]"
    }, {
      "left" : "if (x < 0 && y != x)",
      "right" : "if (x < 0 && y != x)",
      "info" : "IfStatement[102571-102620]:IfStatement[103240-103289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102592-102620]:Block[103261-103289]"
    }, {
      "left" : "y--;",
      "right" : "y--;",
      "info" : "ExpressionStatement[102606-102610]:ExpressionStatement[103275-103279]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[102630-102677]:IfStatement[103299-103346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102642-102677]:Block[103311-103346]"
    }, {
      "left" : "return x*y;",
      "right" : "return x*y;",
      "info" : "ReturnStatement[102656-102667]:ReturnStatement[103325-103336]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[102687-102696]:ReturnStatement[103356-103365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102933-103192]:Block[103602-103861]"
    }, {
      "left" : "double y;",
      "right" : "double y;",
      "info" : "VariableDeclarationStatement[102943-102952]:VariableDeclarationStatement[103612-103621]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[102962-103014]:IfStatement[103631-103683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102974-103014]:Block[103643-103683]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[102995-103004]:ReturnStatement[103664-103673]"
    }, {
      "left" : "y = floor(x);",
      "right" : "y = floor(x);",
      "info" : "ExpressionStatement[103024-103037]:ExpressionStatement[103693-103706]"
    }, {
      "left" : "if (y == x)",
      "right" : "if (y == x)",
      "info" : "IfStatement[103046-103091]:IfStatement[103715-103760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103058-103091]:Block[103727-103760]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[103072-103081]:ReturnStatement[103741-103750]"
    }, {
      "left" : "y += 1.0;",
      "right" : "y += 1.0;",
      "info" : "ExpressionStatement[103101-103110]:ExpressionStatement[103770-103779]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[103120-103167]:IfStatement[103789-103836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103132-103167]:Block[103801-103836]"
    }, {
      "left" : "return x*y;",
      "right" : "return x*y;",
      "info" : "ReturnStatement[103146-103157]:ReturnStatement[103815-103826]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[103177-103186]:ReturnStatement[103846-103855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103511-103897]:Block[104180-104566]"
    }, {
      "left" : "double y = floor(x);",
      "right" : "double y = floor(x);",
      "info" : "VariableDeclarationStatement[103521-103541]:VariableDeclarationStatement[104190-104210]"
    }, {
      "left" : "double d = x - y;",
      "right" : "double d = x - y;",
      "info" : "VariableDeclarationStatement[103550-103567]:VariableDeclarationStatement[104219-104236]"
    }, {
      "left" : "if (d > 0.5)",
      "right" : "if (d > 0.5)",
      "info" : "IfStatement[103577-103727]:IfStatement[104246-104396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103590-103727]:Block[104259-104396]"
    }, {
      "left" : "if (y == -1.0)",
      "right" : "if (y == -1.0)",
      "info" : "IfStatement[103604-103691]:IfStatement[104273-104360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103619-103691]:Block[104288-104360]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[103637-103649]:ReturnStatement[104306-104318]"
    }, {
      "left" : "return y+1.0;",
      "right" : "return y+1.0;",
      "info" : "ReturnStatement[103704-103717]:ReturnStatement[104373-104386]"
    }, {
      "left" : "if (d < 0.5)",
      "right" : "if (d < 0.5)",
      "info" : "IfStatement[103736-103782]:IfStatement[104405-104451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103749-103782]:Block[104418-104451]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[103763-103772]:ReturnStatement[104432-104441]"
    }, {
      "left" : "long z = (long) y;",
      "right" : "long z = (long) y;",
      "info" : "VariableDeclarationStatement[103830-103848]:VariableDeclarationStatement[104499-104517]"
    }, {
      "left" : "return (z & 1) == 0 ? y : y + 1.0;",
      "right" : "return (z & 1) == 0 ? y : y + 1.0;",
      "info" : "ReturnStatement[103857-103891]:ReturnStatement[104526-104560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104074-104119]:Block[104743-104788]"
    }, {
      "left" : "return (long) floor(x + 0.5);",
      "right" : "return (long) floor(x + 0.5);",
      "info" : "ReturnStatement[104084-104113]:ReturnStatement[104753-104782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104297-104342]:Block[104966-105011]"
    }, {
      "left" : "return (int) floor(x + 0.5f);",
      "right" : "return (int) floor(x + 0.5f);",
      "info" : "ReturnStatement[104307-104336]:ReturnStatement[104976-105005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104562-104602]:Block[105231-105271]"
    }, {
      "left" : "return (a <= b) ? a : b;",
      "right" : "return (a <= b) ? a : b;",
      "info" : "ReturnStatement[104572-104596]:ReturnStatement[105241-105265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104825-104865]:Block[105494-105534]"
    }, {
      "left" : "return (a <= b) ? a : b;",
      "right" : "return (a <= b) ? a : b;",
      "info" : "ReturnStatement[104835-104859]:ReturnStatement[105504-105528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105091-105540]:Block[105760-106209]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[105101-105145]:IfStatement[105770-105814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105112-105145]:Block[105781-105814]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[105126-105135]:ReturnStatement[105795-105804]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[105154-105198]:IfStatement[105823-105867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105165-105198]:Block[105834-105867]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[105179-105188]:ReturnStatement[105848-105857]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[105254-105307]:IfStatement[105923-105976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105266-105307]:Block[105935-105976]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[105280-105297]:ReturnStatement[105949-105966]"
    }, {
      "left" : "int bits = Float.floatToRawIntBits(a);",
      "right" : "int bits = Float.floatToRawIntBits(a);",
      "info" : "VariableDeclarationStatement[105412-105450]:VariableDeclarationStatement[106081-106119]"
    }, {
      "left" : "if (bits == 0x80000000)",
      "right" : "if (bits == 0x80000000)",
      "info" : "IfStatement[105459-105516]:IfStatement[106128-106185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105483-105516]:Block[106152-106185]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[105497-105506]:ReturnStatement[106166-106175]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[105525-105534]:ReturnStatement[106194-106203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105769-106244]:Block[106438-106913]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[105779-105823]:IfStatement[106448-106492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105790-105823]:Block[106459-106492]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[105804-105813]:ReturnStatement[106473-106482]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[105832-105876]:IfStatement[106501-106545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105843-105876]:Block[106512-106545]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[105857-105866]:ReturnStatement[106526-106535]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[105932-105986]:IfStatement[106601-106655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105944-105986]:Block[106613-106655]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[105958-105976]:ReturnStatement[106627-106645]"
    }, {
      "left" : "long bits = Double.doubleToRawLongBits(a);",
      "right" : "long bits = Double.doubleToRawLongBits(a);",
      "info" : "VariableDeclarationStatement[106103-106145]:VariableDeclarationStatement[106772-106814]"
    }, {
      "left" : "if (bits == 0x8000000000000000L)",
      "right" : "if (bits == 0x8000000000000000L)",
      "info" : "IfStatement[106154-106220]:IfStatement[106823-106889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106187-106220]:Block[106856-106889]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[106201-106210]:ReturnStatement[106870-106879]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[106229-106238]:ReturnStatement[106898-106907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106464-106504]:Block[107133-107173]"
    }, {
      "left" : "return (a <= b) ? b : a;",
      "right" : "return (a <= b) ? b : a;",
      "info" : "ReturnStatement[106474-106498]:ReturnStatement[107143-107167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106727-106767]:Block[107396-107436]"
    }, {
      "left" : "return (a <= b) ? b : a;",
      "right" : "return (a <= b) ? b : a;",
      "info" : "ReturnStatement[106737-106761]:ReturnStatement[107406-107430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106993-107442]:Block[107662-108111]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[107003-107047]:IfStatement[107672-107716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107014-107047]:Block[107683-107716]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[107028-107037]:ReturnStatement[107697-107706]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[107056-107100]:IfStatement[107725-107769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107067-107100]:Block[107736-107769]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[107081-107090]:ReturnStatement[107750-107759]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[107156-107209]:IfStatement[107825-107878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107168-107209]:Block[107837-107878]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[107182-107199]:ReturnStatement[107851-107868]"
    }, {
      "left" : "int bits = Float.floatToRawIntBits(a);",
      "right" : "int bits = Float.floatToRawIntBits(a);",
      "info" : "VariableDeclarationStatement[107314-107352]:VariableDeclarationStatement[107983-108021]"
    }, {
      "left" : "if (bits == 0x80000000)",
      "right" : "if (bits == 0x80000000)",
      "info" : "IfStatement[107361-107418]:IfStatement[108030-108087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107385-107418]:Block[108054-108087]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[107399-107408]:ReturnStatement[108068-108077]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[107427-107436]:ReturnStatement[108096-108105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107671-108146]:Block[108340-108815]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[107681-107725]:IfStatement[108350-108394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107692-107725]:Block[108361-108394]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[107706-107715]:ReturnStatement[108375-108384]"
    }, {
      "left" : "if (a < b)",
      "right" : "if (a < b)",
      "info" : "IfStatement[107734-107778]:IfStatement[108403-108447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107745-107778]:Block[108414-108447]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[107759-107768]:ReturnStatement[108428-108437]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[107834-107888]:IfStatement[108503-108557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107846-107888]:Block[108515-108557]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[107860-107878]:ReturnStatement[108529-108547]"
    }, {
      "left" : "long bits = Double.doubleToRawLongBits(a);",
      "right" : "long bits = Double.doubleToRawLongBits(a);",
      "info" : "VariableDeclarationStatement[108005-108047]:VariableDeclarationStatement[108674-108716]"
    }, {
      "left" : "if (bits == 0x8000000000000000L)",
      "right" : "if (bits == 0x8000000000000000L)",
      "info" : "IfStatement[108056-108122]:IfStatement[108725-108791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108089-108122]:Block[108758-108791]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[108103-108112]:ReturnStatement[108772-108781]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[108131-108140]:ReturnStatement[108800-108809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108742-109886]:Block[109411-110555]"
    }, {
      "left" : "if (Double.isInfinite(x) || Double.isInfinite(y))",
      "right" : "if (Double.isInfinite(x) || Double.isInfinite(y))",
      "info" : "IfStatement[108752-109880]:IfStatement[109421-110549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108802-108858]:Block[109471-109527]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[108816-108848]:ReturnStatement[109485-109517]"
    }, {
      "left" : "if (Double.isNaN(x) || Double.isNaN(y))",
      "right" : "if (Double.isNaN(x) || Double.isNaN(y))",
      "info" : "IfStatement[108864-109880]:IfStatement[109533-110549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108904-108946]:Block[109573-109615]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[108918-108936]:ReturnStatement[109587-109605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108952-109880]:Block[109621-110549]"
    }, {
      "left" : "final int expX = getExponent(x);",
      "right" : "final int expX = getExponent(x);",
      "info" : "VariableDeclarationStatement[108967-108999]:VariableDeclarationStatement[109636-109668]"
    }, {
      "left" : "final int expY = getExponent(y);",
      "right" : "final int expY = getExponent(y);",
      "info" : "VariableDeclarationStatement[109012-109044]:VariableDeclarationStatement[109681-109713]"
    }, {
      "left" : "if (expX > expY + 27)",
      "right" : "if (expX > expY + 27)",
      "info" : "IfStatement[109057-109869]:IfStatement[109726-110538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109079-109179]:Block[109748-109848]"
    }, {
      "left" : "return abs(x);",
      "right" : "return abs(x);",
      "info" : "ReturnStatement[109151-109165]:ReturnStatement[109820-109834]"
    }, {
      "left" : "if (expY > expX + 27)",
      "right" : "if (expY > expX + 27)",
      "info" : "IfStatement[109185-109869]:IfStatement[109854-110538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109207-109307]:Block[109876-109976]"
    }, {
      "left" : "return abs(y);",
      "right" : "return abs(y);",
      "info" : "ReturnStatement[109279-109293]:ReturnStatement[109948-109962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109313-109869]:Block[109982-110538]"
    }, {
      "left" : "final int middleExp = (expX + expY) / 2;",
      "right" : "final int middleExp = (expX + expY) / 2;",
      "info" : "VariableDeclarationStatement[109415-109455]:VariableDeclarationStatement[110084-110124]"
    }, {
      "left" : "final double scaledX = scalb(x, -middleExp);",
      "right" : "final double scaledX = scalb(x, -middleExp);",
      "info" : "VariableDeclarationStatement[109534-109578]:VariableDeclarationStatement[110203-110247]"
    }, {
      "left" : "final double scaledY = scalb(y, -middleExp);",
      "right" : "final double scaledY = scalb(y, -middleExp);",
      "info" : "VariableDeclarationStatement[109595-109639]:VariableDeclarationStatement[110264-110308]"
    }, {
      "left" : "final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);",
      "right" : "final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);",
      "info" : "VariableDeclarationStatement[109702-109769]:VariableDeclarationStatement[110371-110438]"
    }, {
      "left" : "return scalb(scaledH, middleExp);",
      "right" : "return scalb(scaledH, middleExp);",
      "info" : "ReturnStatement[109821-109854]:ReturnStatement[110490-110523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111104-111210]:Block[111773-111879]"
    }, {
      "left" : "return StrictMath.IEEEremainder(dividend, divisor);",
      "right" : "return StrictMath.IEEEremainder(dividend, divisor);",
      "info" : "ReturnStatement[111114-111165]:ReturnStatement[111783-111834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111602-111868]:Block[112271-112537]"
    }, {
      "left" : "long m = Double.doubleToLongBits(magnitude);",
      "right" : "long m = Double.doubleToLongBits(magnitude);",
      "info" : "VariableDeclarationStatement[111612-111656]:VariableDeclarationStatement[112281-112325]"
    }, {
      "left" : "long s = Double.doubleToLongBits(sign);",
      "right" : "long s = Double.doubleToLongBits(sign);",
      "info" : "VariableDeclarationStatement[111665-111704]:VariableDeclarationStatement[112334-112373]"
    }, {
      "left" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "right" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "info" : "IfStatement[111713-111822]:IfStatement[112382-112491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111757-111822]:Block[112426-112491]"
    }, {
      "left" : "return magnitude;",
      "right" : "return magnitude;",
      "info" : "ReturnStatement[111795-111812]:ReturnStatement[112464-112481]"
    }, {
      "left" : "return -magnitude;",
      "right" : "return -magnitude;",
      "info" : "ReturnStatement[111831-111849]:ReturnStatement[112500-112518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112257-112515]:Block[112926-113184]"
    }, {
      "left" : "int m = Float.floatToIntBits(magnitude);",
      "right" : "int m = Float.floatToIntBits(magnitude);",
      "info" : "VariableDeclarationStatement[112267-112307]:VariableDeclarationStatement[112936-112976]"
    }, {
      "left" : "int s = Float.floatToIntBits(sign);",
      "right" : "int s = Float.floatToIntBits(sign);",
      "info" : "VariableDeclarationStatement[112316-112351]:VariableDeclarationStatement[112985-113020]"
    }, {
      "left" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "right" : "if ((m >= 0 && s >= 0) || (m < 0 && s < 0))",
      "info" : "IfStatement[112360-112469]:IfStatement[113029-113138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112404-112469]:Block[113073-113138]"
    }, {
      "left" : "return magnitude;",
      "right" : "return magnitude;",
      "info" : "ReturnStatement[112442-112459]:ReturnStatement[113111-113128]"
    }, {
      "left" : "return -magnitude;",
      "right" : "return -magnitude;",
      "info" : "ReturnStatement[112478-112496]:ReturnStatement[113147-113165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112894-112976]:Block[113563-113645]"
    }, {
      "left" : "return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;",
      "right" : "return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;",
      "info" : "ReturnStatement[112904-112970]:ReturnStatement[113573-113639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113352-113423]:Block[114021-114092]"
    }, {
      "left" : "return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;",
      "right" : "return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;",
      "info" : "ReturnStatement[113362-113417]:ReturnStatement[114031-114086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113624-114698]:Block[114293-115367]"
    }, {
      "left" : "PrintStream out = System.out;",
      "right" : "PrintStream out = System.out;",
      "info" : "VariableDeclarationStatement[113634-113663]:VariableDeclarationStatement[114303-114332]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_A\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",
      "info" : "ExpressionStatement[113672-113768]:ExpressionStatement[114341-114437]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"EXP_INT_TABLE_B\", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",
      "info" : "ExpressionStatement[113777-113873]:ExpressionStatement[114446-114542]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_A\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",
      "info" : "ExpressionStatement[113882-113982]:ExpressionStatement[114551-114651]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"EXP_FRAC_TABLE_B\", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",
      "info" : "ExpressionStatement[113991-114091]:ExpressionStatement[114660-114760]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);",
      "right" : "FastMathCalc.printarray(out, \"LN_MANT\",LN_MANT_LEN, lnMant.LN_MANT);",
      "info" : "ExpressionStatement[114100-114168]:ExpressionStatement[114769-114837]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"SINE_TABLE_A\", SINE_TABLE_LEN, SINE_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"SINE_TABLE_A\", SINE_TABLE_LEN, SINE_TABLE_A);",
      "info" : "ExpressionStatement[114177-114252]:ExpressionStatement[114846-114921]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"SINE_TABLE_B\", SINE_TABLE_LEN, SINE_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"SINE_TABLE_B\", SINE_TABLE_LEN, SINE_TABLE_B);",
      "info" : "ExpressionStatement[114261-114336]:ExpressionStatement[114930-115005]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"COSINE_TABLE_A\", SINE_TABLE_LEN, COSINE_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"COSINE_TABLE_A\", SINE_TABLE_LEN, COSINE_TABLE_A);",
      "info" : "ExpressionStatement[114345-114424]:ExpressionStatement[115014-115093]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"COSINE_TABLE_B\", SINE_TABLE_LEN, COSINE_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"COSINE_TABLE_B\", SINE_TABLE_LEN, COSINE_TABLE_B);",
      "info" : "ExpressionStatement[114433-114512]:ExpressionStatement[115102-115181]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_A\", SINE_TABLE_LEN, TANGENT_TABLE_A);",
      "right" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_A\", SINE_TABLE_LEN, TANGENT_TABLE_A);",
      "info" : "ExpressionStatement[114521-114602]:ExpressionStatement[115190-115271]"
    }, {
      "left" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_B\", SINE_TABLE_LEN, TANGENT_TABLE_B);",
      "right" : "FastMathCalc.printarray(out, \"TANGENT_TABLE_B\", SINE_TABLE_LEN, TANGENT_TABLE_B);",
      "info" : "ExpressionStatement[114611-114692]:ExpressionStatement[115280-115361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115302-116499]:Block[115971-117168]"
    }, {
      "left" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "right" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "info" : "IfStatement[115316-116489]:IfStatement[115985-117158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115349-116326]:Block[116018-116995]"
    }, {
      "left" : "EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];",
      "right" : "EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];",
      "info" : "ExpressionStatement[115367-115424]:ExpressionStatement[116036-116093]"
    }, {
      "left" : "EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];",
      "right" : "EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];",
      "info" : "ExpressionStatement[115441-115498]:ExpressionStatement[116110-116167]"
    }, {
      "left" : "final double tmp[] = new double[2];",
      "right" : "final double tmp[] = new double[2];",
      "info" : "VariableDeclarationStatement[115516-115551]:VariableDeclarationStatement[116185-116220]"
    }, {
      "left" : "final double recip[] = new double[2];",
      "right" : "final double recip[] = new double[2];",
      "info" : "VariableDeclarationStatement[115568-115605]:VariableDeclarationStatement[116237-116274]"
    }, {
      "left" : "for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++)",
      "right" : "for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++)",
      "info" : "ForStatement[115663-116312]:ForStatement[116332-116981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115722-116312]:Block[116391-116981]"
    }, {
      "left" : "FastMathCalc.expint(i, tmp);",
      "right" : "FastMathCalc.expint(i, tmp);",
      "info" : "ExpressionStatement[115744-115772]:ExpressionStatement[116413-116441]"
    }, {
      "left" : "EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];",
      "right" : "EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];",
      "info" : "ExpressionStatement[115793-115856]:ExpressionStatement[116462-116525]"
    }, {
      "left" : "EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];",
      "right" : "EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];",
      "info" : "ExpressionStatement[115877-115940]:ExpressionStatement[116546-116609]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[115962-116294]:IfStatement[116631-116963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115974-116294]:Block[116643-116963]"
    }, {
      "left" : "FastMathCalc.splitReciprocal(tmp, recip);",
      "right" : "FastMathCalc.splitReciprocal(tmp, recip);",
      "info" : "ExpressionStatement[116051-116092]:ExpressionStatement[116720-116761]"
    }, {
      "left" : "EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];",
      "right" : "EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];",
      "info" : "ExpressionStatement[116117-116182]:ExpressionStatement[116786-116851]"
    }, {
      "left" : "EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];",
      "right" : "EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];",
      "info" : "ExpressionStatement[116207-116272]:ExpressionStatement[116876-116941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116332-116489]:Block[117001-117158]"
    }, {
      "left" : "EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();",
      "right" : "EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();",
      "info" : "ExpressionStatement[116350-116404]:ExpressionStatement[117019-117073]"
    }, {
      "left" : "EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();",
      "right" : "EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();",
      "info" : "ExpressionStatement[116421-116475]:ExpressionStatement[117090-117144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117086-117886]:Block[117755-118555]"
    }, {
      "left" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "right" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "info" : "IfStatement[117100-117876]:IfStatement[117769-118545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117133-117709]:Block[117802-118378]"
    }, {
      "left" : "EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "right" : "EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "info" : "ExpressionStatement[117151-117210]:ExpressionStatement[117820-117879]"
    }, {
      "left" : "EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "right" : "EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];",
      "info" : "ExpressionStatement[117227-117286]:ExpressionStatement[117896-117955]"
    }, {
      "left" : "final double tmp[] = new double[2];",
      "right" : "final double tmp[] = new double[2];",
      "info" : "VariableDeclarationStatement[117304-117339]:VariableDeclarationStatement[117973-118008]"
    }, {
      "left" : "final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);",
      "right" : "final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);",
      "info" : "VariableDeclarationStatement[117398-117450]:VariableDeclarationStatement[118067-118119]"
    }, {
      "left" : "for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++)",
      "right" : "for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++)",
      "info" : "ForStatement[117467-117695]:ForStatement[118136-118364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117517-117695]:Block[118186-118364]"
    }, {
      "left" : "FastMathCalc.slowexp(i * factor, tmp);",
      "right" : "FastMathCalc.slowexp(i * factor, tmp);",
      "info" : "ExpressionStatement[117539-117577]:ExpressionStatement[118208-118246]"
    }, {
      "left" : "EXP_FRAC_TABLE_A[i] = tmp[0];",
      "right" : "EXP_FRAC_TABLE_A[i] = tmp[0];",
      "info" : "ExpressionStatement[117598-117627]:ExpressionStatement[118267-118296]"
    }, {
      "left" : "EXP_FRAC_TABLE_B[i] = tmp[1];",
      "right" : "EXP_FRAC_TABLE_B[i] = tmp[1];",
      "info" : "ExpressionStatement[117648-117677]:ExpressionStatement[118317-118346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117715-117876]:Block[118384-118545]"
    }, {
      "left" : "EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();",
      "right" : "EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();",
      "info" : "ExpressionStatement[117733-117789]:ExpressionStatement[118402-118458]"
    }, {
      "left" : "EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();",
      "right" : "EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();",
      "info" : "ExpressionStatement[117806-117862]:ExpressionStatement[118475-118531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118184-118684]:Block[118853-119353]"
    }, {
      "left" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "right" : "if (RECOMPUTE_TABLES_AT_RUNTIME)",
      "info" : "IfStatement[118198-118674]:IfStatement[118867-119343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118231-118591]:Block[118900-119260]"
    }, {
      "left" : "LN_MANT = new double[FastMath.LN_MANT_LEN][];",
      "right" : "LN_MANT = new double[FastMath.LN_MANT_LEN][];",
      "info" : "ExpressionStatement[118249-118294]:ExpressionStatement[118918-118963]"
    }, {
      "left" : "for (int i = 0; i < LN_MANT.length; i++)",
      "right" : "for (int i = 0; i < LN_MANT.length; i++)",
      "info" : "ForStatement[118353-118577]:ForStatement[119022-119246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118394-118577]:Block[119063-119246]"
    }, {
      "left" : "final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );",
      "right" : "final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );",
      "info" : "VariableDeclarationStatement[118416-118501]:VariableDeclarationStatement[119085-119170]"
    }, {
      "left" : "LN_MANT[i] = FastMathCalc.slowLog(d);",
      "right" : "LN_MANT[i] = FastMathCalc.slowLog(d);",
      "info" : "ExpressionStatement[118522-118559]:ExpressionStatement[119191-119228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118597-118674]:Block[119266-119343]"
    }, {
      "left" : "LN_MANT = FastMathLiteralArrays.loadLnMant();",
      "right" : "LN_MANT = FastMathLiteralArrays.loadLnMant();",
      "info" : "ExpressionStatement[118615-118660]:ExpressionStatement[119284-119329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119123-120200]:Block[119792-120869]"
    }, {
      "left" : "int k = (int)(xa * 0.6366197723675814);",
      "right" : "int k = (int)(xa * 0.6366197723675814);",
      "info" : "VariableDeclarationStatement[119214-119253]:VariableDeclarationStatement[119883-119922]"
    }, {
      "left" : "double remA;",
      "right" : "double remA;",
      "info" : "VariableDeclarationStatement[119301-119313]:VariableDeclarationStatement[119970-119982]"
    }, {
      "left" : "double remB;",
      "right" : "double remB;",
      "info" : "VariableDeclarationStatement[119326-119338]:VariableDeclarationStatement[119995-120007]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[119351-120090]:WhileStatement[120020-120759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119364-120090]:Block[120033-120759]"
    }, {
      "left" : "double a = -k * 1.570796251296997;",
      "right" : "double a = -k * 1.570796251296997;",
      "info" : "VariableDeclarationStatement[119382-119416]:VariableDeclarationStatement[120051-120085]"
    }, {
      "left" : "remA = xa + a;",
      "right" : "remA = xa + a;",
      "info" : "ExpressionStatement[119433-119447]:ExpressionStatement[120102-120116]"
    }, {
      "left" : "remB = -(remA - xa - a);",
      "right" : "remB = -(remA - xa - a);",
      "info" : "ExpressionStatement[119464-119488]:ExpressionStatement[120133-120157]"
    }, {
      "left" : "a = -k * 7.549789948768648E-8;",
      "right" : "a = -k * 7.549789948768648E-8;",
      "info" : "ExpressionStatement[119506-119536]:ExpressionStatement[120175-120205]"
    }, {
      "left" : "double b = remA;",
      "right" : "double b = remA;",
      "info" : "VariableDeclarationStatement[119553-119569]:VariableDeclarationStatement[120222-120238]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[119586-119599]:ExpressionStatement[120255-120268]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[119616-119640]:ExpressionStatement[120285-120309]"
    }, {
      "left" : "a = -k * 6.123233995736766E-17;",
      "right" : "a = -k * 6.123233995736766E-17;",
      "info" : "ExpressionStatement[119658-119689]:ExpressionStatement[120327-120358]"
    }, {
      "left" : "b = remA;",
      "right" : "b = remA;",
      "info" : "ExpressionStatement[119706-119715]:ExpressionStatement[120375-120384]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[119732-119745]:ExpressionStatement[120401-120414]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[119762-119786]:ExpressionStatement[120431-120455]"
    }, {
      "left" : "if (remA > 0)",
      "right" : "if (remA > 0)",
      "info" : "IfStatement[119804-119864]:IfStatement[120473-120533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119818-119864]:Block[120487-120533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[119840-119846]:BreakStatement[120509-120515]"
    }, {
      "left" : "--k;",
      "right" : "--k;",
      "info" : "ExpressionStatement[120072-120076]:ExpressionStatement[120741-120745]"
    }, {
      "left" : "this.finalK = k;",
      "right" : "this.finalK = k;",
      "info" : "ExpressionStatement[120104-120120]:ExpressionStatement[120773-120789]"
    }, {
      "left" : "this.finalRemA = remA;",
      "right" : "this.finalRemA = remA;",
      "info" : "ExpressionStatement[120133-120155]:ExpressionStatement[120802-120824]"
    }, {
      "left" : "this.finalRemB = remB;",
      "right" : "this.finalRemB = remB;",
      "info" : "ExpressionStatement[120168-120190]:ExpressionStatement[120837-120859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120266-120304]:Block[120935-120973]"
    }, {
      "left" : "return finalK;",
      "right" : "return finalK;",
      "info" : "ReturnStatement[120280-120294]:ReturnStatement[120949-120963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120378-120419]:Block[121047-121088]"
    }, {
      "left" : "return finalRemA;",
      "right" : "return finalRemA;",
      "info" : "ReturnStatement[120392-120409]:ReturnStatement[121061-121078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120493-120534]:Block[121162-121203]"
    }, {
      "left" : "return finalRemB;",
      "right" : "return finalRemB;",
      "info" : "ReturnStatement[120507-120524]:ReturnStatement[121176-121193]"
    } ]
  },
  "interFileMappings" : { }
}