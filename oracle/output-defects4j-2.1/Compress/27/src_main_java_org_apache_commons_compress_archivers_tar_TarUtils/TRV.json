{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final int BYTE_MASK = 255;",
      "right" : "private static final int BYTE_MASK = 255;",
      "info" : "FieldDeclaration[1422-1463]:FieldDeclaration[1422-1463]"
    }, {
      "left" : "static final ZipEncoding DEFAULT_ENCODING =\n        ZipEncodingHelper.getZipEncoding(null);",
      "right" : "static final ZipEncoding DEFAULT_ENCODING =\n        ZipEncodingHelper.getZipEncoding(null);",
      "info" : "FieldDeclaration[1469-1560]:FieldDeclaration[1469-1560]"
    }, {
      "left" : "static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n            public boolean canEncode(String name) { return true; }\n\n            public ByteBuffer encode(String name) {\n                final int length = name.length();\n                byte[] buf = new byte[length];\n\n                // copy until end of input or output is reached.\n                for (int i = 0; i < length; ++i) {\n                    buf[i] = (byte) name.charAt(i);\n                }\n                return ByteBuffer.wrap(buf);\n            }\n\n            public String decode(byte[] buffer) {\n                final int length = buffer.length;\n                StringBuilder result = new StringBuilder(length);\n\n                for (int i = 0; i < length; ++i) {\n                    byte b = buffer[i];\n                    if (b == 0) { // Trailing null\n                        break;\n                    }\n                    result.append((char) (b & 0xFF)); // Allow for sign-extension\n                }\n\n                return result.toString();\n            }\n        };",
      "right" : "static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n            public boolean canEncode(String name) { return true; }\n\n            public ByteBuffer encode(String name) {\n                final int length = name.length();\n                byte[] buf = new byte[length];\n\n                // copy until end of input or output is reached.\n                for (int i = 0; i < length; ++i) {\n                    buf[i] = (byte) name.charAt(i);\n                }\n                return ByteBuffer.wrap(buf);\n            }\n\n            public String decode(byte[] buffer) {\n                final int length = buffer.length;\n                StringBuilder result = new StringBuilder(length);\n\n                for (int i = 0; i < length; ++i) {\n                    byte b = buffer[i];\n                    if (b == 0) { // Trailing null\n                        break;\n                    }\n                    result.append((char) (b & 0xFF)); // Allow for sign-extension\n                }\n\n                return result.toString();\n            }\n        };",
      "info" : "FieldDeclaration[1566-2730]:FieldDeclaration[1566-2730]"
    }, {
      "left" : "public boolean canEncode(String name)",
      "right" : "public boolean canEncode(String name)",
      "info" : "MethodDeclaration[1749-1803]:MethodDeclaration[1749-1803]"
    }, {
      "left" : "public ByteBuffer encode(String name)",
      "right" : "public ByteBuffer encode(String name)",
      "info" : "MethodDeclaration[1817-2199]:MethodDeclaration[1817-2199]"
    }, {
      "left" : "public String decode(byte[] buffer)",
      "right" : "public String decode(byte[] buffer)",
      "info" : "MethodDeclaration[2213-2719]:MethodDeclaration[2213-2719]"
    }, {
      "left" : "private TarUtils(",
      "right" : "private TarUtils(",
      "info" : "MethodDeclaration[2736-2840]:MethodDeclaration[2736-2840]"
    }, {
      "left" : "public static long parseOctalOrBinary(final byte[] buffer, final int offset,\n                                          final int length)",
      "right" : "public static long parseOctalOrBinary(final byte[] buffer, final int offset,\n                                          final int length)",
      "info" : "MethodDeclaration[5418-6751]:MethodDeclaration[5253-6586]"
    }, {
      "left" : "private static long parseBinaryLong(final byte[] buffer, final int offset,\n                                        final int length,\n                                        final boolean negative)",
      "right" : "private static long parseBinaryLong(final byte[] buffer, final int offset,\n                                        final int length,\n                                        final boolean negative)",
      "info" : "MethodDeclaration[6757-7611]:MethodDeclaration[6592-7446]"
    }, {
      "left" : "private static long parseBinaryBigInteger(final byte[] buffer,\n                                              final int offset,\n                                              final int length,\n                                              final boolean negative)",
      "right" : "private static long parseBinaryBigInteger(final byte[] buffer,\n                                              final int offset,\n                                              final int length,\n                                              final boolean negative)",
      "info" : "MethodDeclaration[7617-8583]:MethodDeclaration[7452-8418]"
    }, {
      "left" : "public static boolean parseBoolean(final byte[] buffer, final int offset)",
      "right" : "public static boolean parseBoolean(final byte[] buffer, final int offset)",
      "info" : "MethodDeclaration[8589-9111]:MethodDeclaration[8424-8946]"
    }, {
      "left" : "private static String exceptionMessage(byte[] buffer, final int offset,\n            final int length, int current, final byte currentByte)",
      "right" : "private static String exceptionMessage(byte[] buffer, final int offset,\n            final int length, int current, final byte currentByte)",
      "info" : "MethodDeclaration[9172-10010]:MethodDeclaration[9007-9845]"
    }, {
      "left" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "right" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[10016-10822]:MethodDeclaration[9851-10657]"
    }, {
      "left" : "public static String parseName(byte[] buffer, final int offset,\n                                   final int length,\n                                   final ZipEncoding encoding)\n        throws IOException",
      "right" : "public static String parseName(byte[] buffer, final int offset,\n                                   final int length,\n                                   final ZipEncoding encoding)\n        throws IOException",
      "info" : "MethodDeclaration[10828-11826]:MethodDeclaration[10663-11661]"
    }, {
      "left" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[11832-12985]:MethodDeclaration[11667-12820]"
    }, {
      "left" : "public static int formatNameBytes(String name, byte[] buf, final int offset,\n                                      final int length,\n                                      final ZipEncoding encoding)\n        throws IOException",
      "right" : "public static int formatNameBytes(String name, byte[] buf, final int offset,\n                                      final int length,\n                                      final ZipEncoding encoding)\n        throws IOException",
      "info" : "MethodDeclaration[12991-14440]:MethodDeclaration[12826-14275]"
    }, {
      "left" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "right" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "info" : "MethodDeclaration[14446-15768]:MethodDeclaration[14281-15603]"
    }, {
      "left" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[15774-16735]:MethodDeclaration[15609-16570]"
    }, {
      "left" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[16741-17613]:MethodDeclaration[16576-17448]"
    }, {
      "left" : "public static int formatLongOctalOrBinaryBytes(\n        final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalOrBinaryBytes(\n        final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[17619-19071]:MethodDeclaration[17454-18906]"
    }, {
      "left" : "private static void formatLongBinary(final long value, byte[] buf,\n                                         final int offset, final int length,\n                                         final boolean negative)",
      "right" : "private static void formatLongBinary(final long value, byte[] buf,\n                                         final int offset, final int length,\n                                         final boolean negative)",
      "info" : "MethodDeclaration[19077-19818]:MethodDeclaration[18912-19653]"
    }, {
      "left" : "private static void formatBigIntegerBinary(final long value, byte[] buf,\n                                               final int offset,\n                                               final int length,\n                                               final boolean negative)",
      "right" : "private static void formatBigIntegerBinary(final long value, byte[] buf,\n                                               final int offset,\n                                               final int length,\n                                               final boolean negative)",
      "info" : "MethodDeclaration[19824-20471]:MethodDeclaration[19659-20306]"
    }, {
      "left" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[20477-21442]:MethodDeclaration[20312-21277]"
    }, {
      "left" : "public static long computeCheckSum(final byte[] buf)",
      "right" : "public static long computeCheckSum(final byte[] buf)",
      "info" : "MethodDeclaration[21448-21798]:MethodDeclaration[21283-21633]"
    }, {
      "left" : "public static boolean verifyCheckSum(byte[] header)",
      "right" : "public static boolean verifyCheckSum(byte[] header)",
      "info" : "MethodDeclaration[21804-24559]:MethodDeclaration[21639-24394]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1787-1803]:Block[1787-1803]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1789-1801]:ReturnStatement[1789-1801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1855-2199]:Block[1855-2199]"
    }, {
      "left" : "final int length = name.length();",
      "right" : "final int length = name.length();",
      "info" : "VariableDeclarationStatement[1873-1906]:VariableDeclarationStatement[1873-1906]"
    }, {
      "left" : "byte[] buf = new byte[length];",
      "right" : "byte[] buf = new byte[length];",
      "info" : "VariableDeclarationStatement[1923-1953]:VariableDeclarationStatement[1923-1953]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)",
      "right" : "for (int i = 0; i < length; ++i)",
      "info" : "ForStatement[2036-2140]:ForStatement[2036-2140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2069-2140]:Block[2069-2140]"
    }, {
      "left" : "buf[i] = (byte) name.charAt(i);",
      "right" : "buf[i] = (byte) name.charAt(i);",
      "info" : "ExpressionStatement[2091-2122]:ExpressionStatement[2091-2122]"
    }, {
      "left" : "return ByteBuffer.wrap(buf);",
      "right" : "return ByteBuffer.wrap(buf);",
      "info" : "ReturnStatement[2157-2185]:ReturnStatement[2157-2185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2249-2719]:Block[2249-2719]"
    }, {
      "left" : "final int length = buffer.length;",
      "right" : "final int length = buffer.length;",
      "info" : "VariableDeclarationStatement[2267-2300]:VariableDeclarationStatement[2267-2300]"
    }, {
      "left" : "StringBuilder result = new StringBuilder(length);",
      "right" : "StringBuilder result = new StringBuilder(length);",
      "info" : "VariableDeclarationStatement[2317-2366]:VariableDeclarationStatement[2317-2366]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)",
      "right" : "for (int i = 0; i < length; ++i)",
      "info" : "ForStatement[2384-2662]:ForStatement[2384-2662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2417-2662]:Block[2417-2662]"
    }, {
      "left" : "byte b = buffer[i];",
      "right" : "byte b = buffer[i];",
      "info" : "VariableDeclarationStatement[2439-2458]:VariableDeclarationStatement[2439-2458]"
    }, {
      "left" : "if (b == 0)",
      "right" : "if (b == 0)",
      "info" : "IfStatement[2479-2562]:IfStatement[2479-2562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2491-2562]:Block[2491-2562]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2534-2540]:BreakStatement[2534-2540]"
    }, {
      "left" : "result.append((char) (b & 0xFF));",
      "right" : "result.append((char) (b & 0xFF));",
      "info" : "ExpressionStatement[2583-2616]:ExpressionStatement[2583-2616]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[2680-2705]:ReturnStatement[2680-2705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2833-2840]:Block[2833-2840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6392-6751]:Block[6227-6586]"
    }, {
      "left" : "if ((buffer[offset] & 0x80) == 0)",
      "right" : "if ((buffer[offset] & 0x80) == 0)",
      "info" : "IfStatement[6403-6503]:IfStatement[6238-6338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6437-6503]:Block[6272-6338]"
    }, {
      "left" : "return parseOctal(buffer, offset, length);",
      "right" : "return parseOctal(buffer, offset, length);",
      "info" : "ReturnStatement[6451-6493]:ReturnStatement[6286-6328]"
    }, {
      "left" : "final boolean negative = buffer[offset] == (byte) 0xff;",
      "right" : "final boolean negative = buffer[offset] == (byte) 0xff;",
      "info" : "VariableDeclarationStatement[6512-6567]:VariableDeclarationStatement[6347-6402]"
    }, {
      "left" : "if (length < 9)",
      "right" : "if (length < 9)",
      "info" : "IfStatement[6576-6673]:IfStatement[6411-6508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6592-6673]:Block[6427-6508]"
    }, {
      "left" : "return parseBinaryLong(buffer, offset, length, negative);",
      "right" : "return parseBinaryLong(buffer, offset, length, negative);",
      "info" : "ReturnStatement[6606-6663]:ReturnStatement[6441-6498]"
    }, {
      "left" : "return parseBinaryBigInteger(buffer, offset, length, negative);",
      "right" : "return parseBinaryBigInteger(buffer, offset, length, negative);",
      "info" : "ReturnStatement[6682-6745]:ReturnStatement[6517-6580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6954-7611]:Block[6789-7446]"
    }, {
      "left" : "if (length >= 9)",
      "right" : "if (length >= 9)",
      "info" : "IfStatement[6964-7288]:IfStatement[6799-7123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6981-7288]:Block[6816-7123]"
    }, {
      "left" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "right" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "info" : "ThrowStatement[6995-7278]:ThrowStatement[6830-7113]"
    }, {
      "left" : "long val = 0;",
      "right" : "long val = 0;",
      "info" : "VariableDeclarationStatement[7297-7310]:VariableDeclarationStatement[7132-7145]"
    }, {
      "left" : "for (int i = 1; i < length; i++)",
      "right" : "for (int i = 1; i < length; i++)",
      "info" : "ForStatement[7319-7423]:ForStatement[7154-7258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7352-7423]:Block[7187-7258]"
    }, {
      "left" : "val = (val << 8) + (buffer[offset + i] & 0xff);",
      "right" : "val = (val << 8) + (buffer[offset + i] & 0xff);",
      "info" : "ExpressionStatement[7366-7413]:ExpressionStatement[7201-7248]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[7432-7567]:IfStatement[7267-7402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7446-7567]:Block[7281-7402]"
    }, {
      "left" : "val--;",
      "right" : "val--;",
      "info" : "ExpressionStatement[7490-7496]:ExpressionStatement[7325-7331]"
    }, {
      "left" : "val ^= (long) Math.pow(2, (length - 1) * 8) - 1;",
      "right" : "val ^= (long) Math.pow(2, (length - 1) * 8) - 1;",
      "info" : "ExpressionStatement[7509-7557]:ExpressionStatement[7344-7392]"
    }, {
      "left" : "return negative ? -val : val;",
      "right" : "return negative ? -val : val;",
      "info" : "ReturnStatement[7576-7605]:ReturnStatement[7411-7440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7878-8583]:Block[7713-8418]"
    }, {
      "left" : "byte[] remainder = new byte[length - 1];",
      "right" : "byte[] remainder = new byte[length - 1];",
      "info" : "VariableDeclarationStatement[7888-7928]:VariableDeclarationStatement[7723-7763]"
    }, {
      "left" : "System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);",
      "right" : "System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);",
      "info" : "ExpressionStatement[7937-8000]:ExpressionStatement[7772-7835]"
    }, {
      "left" : "BigInteger val = new BigInteger(remainder);",
      "right" : "BigInteger val = new BigInteger(remainder);",
      "info" : "VariableDeclarationStatement[8009-8052]:VariableDeclarationStatement[7844-7887]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[8061-8173]:IfStatement[7896-8008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8075-8173]:Block[7910-8008]"
    }, {
      "left" : "val = val.add(BigInteger.valueOf(-1)).not();",
      "right" : "val = val.add(BigInteger.valueOf(-1)).not();",
      "info" : "ExpressionStatement[8119-8163]:ExpressionStatement[7954-7998]"
    }, {
      "left" : "if (val.bitLength() > 63)",
      "right" : "if (val.bitLength() > 63)",
      "info" : "IfStatement[8182-8515]:IfStatement[8017-8350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8208-8515]:Block[8043-8350]"
    }, {
      "left" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "right" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "info" : "ThrowStatement[8222-8505]:ThrowStatement[8057-8340]"
    }, {
      "left" : "return negative ? -val.longValue() : val.longValue();",
      "right" : "return negative ? -val.longValue() : val.longValue();",
      "info" : "ReturnStatement[8524-8577]:ReturnStatement[8359-8412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9068-9111]:Block[8903-8946]"
    }, {
      "left" : "return buffer[offset] == 1;",
      "right" : "return buffer[offset] == 1;",
      "info" : "ReturnStatement[9078-9105]:ReturnStatement[8913-8940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9311-10010]:Block[9146-9845]"
    }, {
      "left" : "String string = new String(buffer, offset, length);",
      "right" : "String string = new String(buffer, offset, length);",
      "info" : "VariableDeclarationStatement[9723-9774]:VariableDeclarationStatement[9558-9609]"
    }, {
      "left" : "string=string.replaceAll(\"\\0\", \"{NUL}\");",
      "right" : "string=string.replaceAll(\"\\0\", \"{NUL}\");",
      "info" : "ExpressionStatement[9784-9824]:ExpressionStatement[9619-9659]"
    }, {
      "left" : "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;",
      "right" : "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;",
      "info" : "VariableDeclarationStatement[9879-9986]:VariableDeclarationStatement[9714-9821]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[9995-10004]:ReturnStatement[9830-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10456-10822]:Block[10291-10657]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10466-10816]:TryStatement[10301-10651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10470-10553]:Block[10305-10388]"
    }, {
      "left" : "return parseName(buffer, offset, length, DEFAULT_ENCODING);",
      "right" : "return parseName(buffer, offset, length, DEFAULT_ENCODING);",
      "info" : "ReturnStatement[10484-10543]:ReturnStatement[10319-10378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10577-10816]:Block[10412-10651]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10591-10806]:TryStatement[10426-10641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10595-10687]:Block[10430-10522]"
    }, {
      "left" : "return parseName(buffer, offset, length, FALLBACK_ENCODING);",
      "right" : "return parseName(buffer, offset, length, FALLBACK_ENCODING);",
      "info" : "ReturnStatement[10613-10673]:ReturnStatement[10448-10508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10712-10806]:Block[10547-10641]"
    }, {
      "left" : "throw new RuntimeException(ex2);",
      "right" : "throw new RuntimeException(ex2);",
      "info" : "ThrowStatement[10760-10792]:ThrowStatement[10595-10627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11477-11826]:Block[11312-11661]"
    }, {
      "left" : "int len = length;",
      "right" : "int len = length;",
      "info" : "VariableDeclarationStatement[11488-11505]:VariableDeclarationStatement[11323-11340]"
    }, {
      "left" : "for (; len > 0; len--)",
      "right" : "for (; len > 0; len--)",
      "info" : "ForStatement[11514-11634]:ForStatement[11349-11469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11537-11634]:Block[11372-11469]"
    }, {
      "left" : "if (buffer[offset + len - 1] != 0)",
      "right" : "if (buffer[offset + len - 1] != 0)",
      "info" : "IfStatement[11551-11624]:IfStatement[11386-11459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11586-11624]:Block[11421-11459]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11604-11610]:BreakStatement[11439-11445]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[11643-11801]:IfStatement[11478-11636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11656-11801]:Block[11491-11636]"
    }, {
      "left" : "byte[] b = new byte[len];",
      "right" : "byte[] b = new byte[len];",
      "info" : "VariableDeclarationStatement[11670-11695]:VariableDeclarationStatement[11505-11530]"
    }, {
      "left" : "System.arraycopy(buffer, offset, b, 0, len);",
      "right" : "System.arraycopy(buffer, offset, b, 0, len);",
      "info" : "ExpressionStatement[11708-11752]:ExpressionStatement[11543-11587]"
    }, {
      "left" : "return encoding.decode(b);",
      "right" : "return encoding.decode(b);",
      "info" : "ReturnStatement[11765-11791]:ReturnStatement[11600-11626]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[11810-11820]:ReturnStatement[11645-11655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12562-12985]:Block[12397-12820]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12572-12979]:TryStatement[12407-12814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12576-12668]:Block[12411-12503]"
    }, {
      "left" : "return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);",
      "right" : "return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);",
      "info" : "ReturnStatement[12590-12658]:ReturnStatement[12425-12493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12692-12979]:Block[12527-12814]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12706-12969]:TryStatement[12541-12804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12710-12850]:Block[12545-12685]"
    }, {
      "left" : "return formatNameBytes(name, buf, offset, length,\n                                       FALLBACK_ENCODING);",
      "right" : "return formatNameBytes(name, buf, offset, length,\n                                       FALLBACK_ENCODING);",
      "info" : "ReturnStatement[12728-12836]:ReturnStatement[12563-12671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12875-12969]:Block[12710-12804]"
    }, {
      "left" : "throw new RuntimeException(ex2);",
      "right" : "throw new RuntimeException(ex2);",
      "info" : "ThrowStatement[12923-12955]:ThrowStatement[12758-12790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13936-14440]:Block[13771-14275]"
    }, {
      "left" : "int len = name.length();",
      "right" : "int len = name.length();",
      "info" : "VariableDeclarationStatement[13946-13970]:VariableDeclarationStatement[13781-13805]"
    }, {
      "left" : "ByteBuffer b = encoding.encode(name);",
      "right" : "ByteBuffer b = encoding.encode(name);",
      "info" : "VariableDeclarationStatement[13979-14016]:VariableDeclarationStatement[13814-13851]"
    }, {
      "left" : "while (b.limit() > length && len > 0)",
      "right" : "while (b.limit() > length && len > 0)",
      "info" : "WhileStatement[14025-14133]:WhileStatement[13860-13968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14063-14133]:Block[13898-13968]"
    }, {
      "left" : "b = encoding.encode(name.substring(0, --len));",
      "right" : "b = encoding.encode(name.substring(0, --len));",
      "info" : "ExpressionStatement[14077-14123]:ExpressionStatement[13912-13958]"
    }, {
      "left" : "final int limit = b.limit() - b.position();",
      "right" : "final int limit = b.limit() - b.position();",
      "info" : "VariableDeclarationStatement[14142-14185]:VariableDeclarationStatement[13977-14020]"
    }, {
      "left" : "System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);",
      "right" : "System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);",
      "info" : "ExpressionStatement[14194-14259]:ExpressionStatement[14029-14094]"
    }, {
      "left" : "for (int i = limit; i < length; ++i)",
      "right" : "for (int i = limit; i < length; ++i)",
      "info" : "ForStatement[14320-14401]:ForStatement[14155-14236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14357-14401]:Block[14192-14236]"
    }, {
      "left" : "buf[offset + i] = 0;",
      "right" : "buf[offset + i] = 0;",
      "info" : "ExpressionStatement[14371-14391]:ExpressionStatement[14206-14226]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[14411-14434]:ReturnStatement[14246-14269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14953-15768]:Block[14788-15603]"
    }, {
      "left" : "int remaining = length;",
      "right" : "int remaining = length;",
      "info" : "VariableDeclarationStatement[14963-14986]:VariableDeclarationStatement[14798-14821]"
    }, {
      "left" : "remaining--;",
      "right" : "remaining--;",
      "info" : "ExpressionStatement[14995-15007]:ExpressionStatement[14830-14842]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[15016-15635]:IfStatement[14851-15470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15032-15098]:Block[14867-14933]"
    }, {
      "left" : "buffer[offset + remaining--] = (byte) '0';",
      "right" : "buffer[offset + remaining--] = (byte) '0';",
      "info" : "ExpressionStatement[15046-15088]:ExpressionStatement[14881-14923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15104-15635]:Block[14939-15470]"
    }, {
      "left" : "long val = value;",
      "right" : "long val = value;",
      "info" : "VariableDeclarationStatement[15118-15135]:VariableDeclarationStatement[14953-14970]"
    }, {
      "left" : "for (; remaining >= 0 && val != 0; --remaining)",
      "right" : "for (; remaining >= 0 && val != 0; --remaining)",
      "info" : "ForStatement[15148-15420]:ForStatement[14983-15255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15196-15420]:Block[15031-15255]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "right" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "info" : "ExpressionStatement[15260-15328]:ExpressionStatement[15095-15163]"
    }, {
      "left" : "val = val >>> 3;",
      "right" : "val = val >>> 3;",
      "info" : "ExpressionStatement[15345-15361]:ExpressionStatement[15180-15196]"
    }, {
      "left" : "if (val != 0)",
      "right" : "if (val != 0)",
      "info" : "IfStatement[15433-15625]:IfStatement[15268-15460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15446-15625]:Block[15281-15460]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "right" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "info" : "ThrowStatement[15464-15611]:ThrowStatement[15299-15446]"
    }, {
      "left" : "for (; remaining >= 0; --remaining)",
      "right" : "for (; remaining >= 0; --remaining)",
      "info" : "ForStatement[15645-15762]:ForStatement[15480-15597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15681-15762]:Block[15516-15597]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) '0';",
      "right" : "buffer[offset + remaining] = (byte) '0';",
      "info" : "ExpressionStatement[15712-15752]:ExpressionStatement[15547-15587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16466-16735]:Block[16301-16570]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[16477-16494]:VariableDeclarationStatement[16312-16329]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[16534-16585]:ExpressionStatement[16369-16420]"
    }, {
      "left" : "buf[offset + idx++] = (byte) ' ';",
      "right" : "buf[offset + idx++] = (byte) ' ';",
      "info" : "ExpressionStatement[16595-16628]:ExpressionStatement[16430-16463]"
    }, {
      "left" : "buf[offset + idx]   = 0;",
      "right" : "buf[offset + idx]   = 0;",
      "info" : "ExpressionStatement[16655-16679]:ExpressionStatement[16490-16514]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[16706-16729]:ReturnStatement[16541-16564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17414-17613]:Block[17249-17448]"
    }, {
      "left" : "int idx=length-1;",
      "right" : "int idx=length-1;",
      "info" : "VariableDeclarationStatement[17425-17442]:VariableDeclarationStatement[17260-17277]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[17465-17516]:ExpressionStatement[17300-17351]"
    }, {
      "left" : "buf[offset + idx] = (byte) ' ';",
      "right" : "buf[offset + idx] = (byte) ' ';",
      "info" : "ExpressionStatement[17525-17556]:ExpressionStatement[17360-17391]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[17584-17607]:ReturnStatement[17419-17442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18416-19071]:Block[18251-18906]"
    }, {
      "left" : "final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;",
      "right" : "final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;",
      "info" : "VariableDeclarationStatement[18494-18596]:VariableDeclarationStatement[18329-18431]"
    }, {
      "left" : "final boolean negative = value < 0;",
      "right" : "final boolean negative = value < 0;",
      "info" : "VariableDeclarationStatement[18606-18641]:VariableDeclarationStatement[18441-18476]"
    }, {
      "left" : "if (!negative && value <= maxAsOctalChar)",
      "right" : "if (!negative && value <= maxAsOctalChar)",
      "info" : "IfStatement[18650-18802]:IfStatement[18485-18637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18692-18802]:Block[18527-18637]"
    }, {
      "left" : "return formatLongOctalBytes(value, buf, offset, length);",
      "right" : "return formatLongOctalBytes(value, buf, offset, length);",
      "info" : "ReturnStatement[18736-18792]:ReturnStatement[18571-18627]"
    }, {
      "left" : "if (length < 9)",
      "right" : "if (length < 9)",
      "info" : "IfStatement[18812-18907]:IfStatement[18647-18742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18828-18907]:Block[18663-18742]"
    }, {
      "left" : "formatLongBinary(value, buf, offset, length, negative);",
      "right" : "formatLongBinary(value, buf, offset, length, negative);",
      "info" : "ExpressionStatement[18842-18897]:ExpressionStatement[18677-18732]"
    }, {
      "left" : "formatBigIntegerBinary(value, buf, offset, length, negative);",
      "right" : "formatBigIntegerBinary(value, buf, offset, length, negative);",
      "info" : "ExpressionStatement[18916-18977]:ExpressionStatement[18751-18812]"
    }, {
      "left" : "buf[offset] = (byte) (negative ? 0xff : 0x80);",
      "right" : "buf[offset] = (byte) (negative ? 0xff : 0x80);",
      "info" : "ExpressionStatement[18987-19033]:ExpressionStatement[18822-18868]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[19042-19065]:ReturnStatement[18877-18900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19286-19818]:Block[19121-19653]"
    }, {
      "left" : "final int bits = (length - 1) * 8;",
      "right" : "final int bits = (length - 1) * 8;",
      "info" : "VariableDeclarationStatement[19296-19330]:VariableDeclarationStatement[19131-19165]"
    }, {
      "left" : "final long max = 1l << bits;",
      "right" : "final long max = 1l << bits;",
      "info" : "VariableDeclarationStatement[19339-19367]:VariableDeclarationStatement[19174-19202]"
    }, {
      "left" : "long val = Math.abs(value);",
      "right" : "long val = Math.abs(value);",
      "info" : "VariableDeclarationStatement[19376-19403]:VariableDeclarationStatement[19211-19238]"
    }, {
      "left" : "if (val >= max)",
      "right" : "if (val >= max)",
      "info" : "IfStatement[19412-19570]:IfStatement[19247-19405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19428-19570]:Block[19263-19405]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Value \" + value +\n                \" is too large for \" + length + \" byte field.\");",
      "right" : "throw new IllegalArgumentException(\"Value \" + value +\n                \" is too large for \" + length + \" byte field.\");",
      "info" : "ThrowStatement[19442-19560]:ThrowStatement[19277-19395]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[19579-19684]:IfStatement[19414-19519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19593-19684]:Block[19428-19519]"
    }, {
      "left" : "val ^= max - 1;",
      "right" : "val ^= max - 1;",
      "info" : "ExpressionStatement[19607-19622]:ExpressionStatement[19442-19457]"
    }, {
      "left" : "val |= 0xff << bits;",
      "right" : "val |= 0xff << bits;",
      "info" : "ExpressionStatement[19635-19655]:ExpressionStatement[19470-19490]"
    }, {
      "left" : "val++;",
      "right" : "val++;",
      "info" : "ExpressionStatement[19668-19674]:ExpressionStatement[19503-19509]"
    }, {
      "left" : "for (int i = offset + length - 1; i >= offset; i--)",
      "right" : "for (int i = offset + length - 1; i >= offset; i--)",
      "info" : "ForStatement[19693-19812]:ForStatement[19528-19647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19745-19812]:Block[19580-19647]"
    }, {
      "left" : "buf[i] = (byte) val;",
      "right" : "buf[i] = (byte) val;",
      "info" : "ExpressionStatement[19759-19779]:ExpressionStatement[19594-19614]"
    }, {
      "left" : "val >>= 8;",
      "right" : "val >>= 8;",
      "info" : "ExpressionStatement[19792-19802]:ExpressionStatement[19627-19637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20098-20471]:Block[19933-20306]"
    }, {
      "left" : "BigInteger val = BigInteger.valueOf(value);",
      "right" : "BigInteger val = BigInteger.valueOf(value);",
      "info" : "VariableDeclarationStatement[20108-20151]:VariableDeclarationStatement[19943-19986]"
    }, {
      "left" : "final byte[] b = val.toByteArray();",
      "right" : "final byte[] b = val.toByteArray();",
      "info" : "VariableDeclarationStatement[20160-20195]:VariableDeclarationStatement[19995-20030]"
    }, {
      "left" : "final int len = b.length;",
      "right" : "final int len = b.length;",
      "info" : "VariableDeclarationStatement[20204-20229]:VariableDeclarationStatement[20039-20064]"
    }, {
      "left" : "final int off = offset + length - len;",
      "right" : "final int off = offset + length - len;",
      "info" : "VariableDeclarationStatement[20238-20276]:VariableDeclarationStatement[20073-20111]"
    }, {
      "left" : "System.arraycopy(b, 0, buf, off, len);",
      "right" : "System.arraycopy(b, 0, buf, off, len);",
      "info" : "ExpressionStatement[20285-20323]:ExpressionStatement[20120-20158]"
    }, {
      "left" : "final byte fill = (byte) (negative ? 0xff : 0);",
      "right" : "final byte fill = (byte) (negative ? 0xff : 0);",
      "info" : "VariableDeclarationStatement[20332-20379]:VariableDeclarationStatement[20167-20214]"
    }, {
      "left" : "for (int i = offset + 1; i < off; i++)",
      "right" : "for (int i = offset + 1; i < off; i++)",
      "info" : "ForStatement[20388-20465]:ForStatement[20223-20300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20427-20465]:Block[20262-20300]"
    }, {
      "left" : "buf[i] = fill;",
      "right" : "buf[i] = fill;",
      "info" : "ExpressionStatement[20441-20455]:ExpressionStatement[20276-20290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21179-21442]:Block[21014-21277]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[21190-21207]:VariableDeclarationStatement[21025-21042]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[21237-21288]:ExpressionStatement[21072-21123]"
    }, {
      "left" : "buf[offset + idx++]   = 0;",
      "right" : "buf[offset + idx++]   = 0;",
      "info" : "ExpressionStatement[21298-21324]:ExpressionStatement[21133-21159]"
    }, {
      "left" : "buf[offset + idx]     = (byte) ' ';",
      "right" : "buf[offset + idx]     = (byte) ' ';",
      "info" : "ExpressionStatement[21350-21385]:ExpressionStatement[21185-21220]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[21413-21436]:ReturnStatement[21248-21271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21662-21798]:Block[21497-21633]"
    }, {
      "left" : "long sum = 0;",
      "right" : "long sum = 0;",
      "info" : "VariableDeclarationStatement[21672-21685]:VariableDeclarationStatement[21507-21520]"
    }, {
      "left" : "for (byte element : buf)",
      "right" : "for (byte element : buf)",
      "info" : "EnhancedForStatement[21695-21771]:EnhancedForStatement[21530-21606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21720-21771]:Block[21555-21606]"
    }, {
      "left" : "sum += BYTE_MASK & element;",
      "right" : "sum += BYTE_MASK & element;",
      "info" : "ExpressionStatement[21734-21761]:ExpressionStatement[21569-21596]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[21781-21792]:ReturnStatement[21616-21627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23791-24559]:Block[23626-24394]"
    }, {
      "left" : "long storedSum = 0;",
      "right" : "long storedSum = 0;",
      "info" : "VariableDeclarationStatement[23801-23820]:VariableDeclarationStatement[23636-23655]"
    }, {
      "left" : "long unsignedSum = 0;",
      "right" : "long unsignedSum = 0;",
      "info" : "VariableDeclarationStatement[23829-23850]:VariableDeclarationStatement[23664-23685]"
    }, {
      "left" : "long signedSum = 0;",
      "right" : "long signedSum = 0;",
      "info" : "VariableDeclarationStatement[23859-23878]:VariableDeclarationStatement[23694-23713]"
    }, {
      "left" : "int digits = 0;",
      "right" : "int digits = 0;",
      "info" : "VariableDeclarationStatement[23888-23903]:VariableDeclarationStatement[23723-23738]"
    }, {
      "left" : "for (int i = 0; i < header.length; i++)",
      "right" : "for (int i = 0; i < header.length; i++)",
      "info" : "ForStatement[23912-24426]:ForStatement[23747-24261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23952-24426]:Block[23787-24261]"
    }, {
      "left" : "byte b = header[i];",
      "right" : "byte b = header[i];",
      "info" : "VariableDeclarationStatement[23966-23985]:VariableDeclarationStatement[23801-23820]"
    }, {
      "left" : "if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN)",
      "right" : "if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN)",
      "info" : "IfStatement[23998-24351]:IfStatement[23833-24186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24056-24351]:Block[23891-24186]"
    }, {
      "left" : "if ('0' <= b && b <= '7' && digits++ < 6)",
      "right" : "if ('0' <= b && b <= '7' && digits++ < 6)",
      "info" : "IfStatement[24074-24312]:IfStatement[23909-24147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24116-24192]:Block[23951-24027]"
    }, {
      "left" : "storedSum = storedSum * 8 + b - '0';",
      "right" : "storedSum = storedSum * 8 + b - '0';",
      "info" : "ExpressionStatement[24138-24174]:ExpressionStatement[23973-24009]"
    }, {
      "left" : "if (digits > 0)",
      "right" : "if (digits > 0)",
      "info" : "IfStatement[24198-24312]:IfStatement[24033-24147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24214-24312]:Block[24049-24147]"
    }, {
      "left" : "digits = 6;",
      "right" : "digits = 6;",
      "info" : "ExpressionStatement[24236-24247]:ExpressionStatement[24071-24082]"
    }, {
      "left" : "b = ' ';",
      "right" : "b = ' ';",
      "info" : "ExpressionStatement[24329-24337]:ExpressionStatement[24164-24172]"
    }, {
      "left" : "unsignedSum += 0xff & b;",
      "right" : "unsignedSum += 0xff & b;",
      "info" : "ExpressionStatement[24364-24388]:ExpressionStatement[24199-24223]"
    }, {
      "left" : "signedSum += b;",
      "right" : "signedSum += b;",
      "info" : "ExpressionStatement[24401-24416]:ExpressionStatement[24236-24251]"
    }, {
      "left" : "return storedSum == unsignedSum || storedSum == signedSum\n                || storedSum > unsignedSum;",
      "right" : "return storedSum == unsignedSum || storedSum == signedSum\n                || storedSum > unsignedSum;",
      "info" : "ReturnStatement[24436-24537]:ReturnStatement[24271-24372]"
    } ]
  },
  "interFileMappings" : { }
}