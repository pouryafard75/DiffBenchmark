{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractPatriciaTrie",
      "right" : "AbstractPatriciaTrie",
      "info" : "TypeDeclaration[1383-77730]:TypeDeclaration[1383-78087]"
    }, {
      "left" : "private static final long serialVersionUID = 5155253417231339498L;",
      "right" : "private static final long serialVersionUID = 5155253417231339498L;",
      "info" : "FieldDeclaration[1625-1691]:FieldDeclaration[1625-1691]"
    }, {
      "left" : "private transient TrieEntry<K, V> root = new TrieEntry<K, V>(null, null, -1);",
      "right" : "private transient TrieEntry<K, V> root = new TrieEntry<K, V>(null, null, -1);",
      "info" : "FieldDeclaration[1697-1820]:FieldDeclaration[1697-1820]"
    }, {
      "left" : "private transient volatile Set<K> keySet;",
      "right" : "private transient volatile Set<K> keySet;",
      "info" : "FieldDeclaration[1826-2106]:FieldDeclaration[1826-2106]"
    }, {
      "left" : "private transient volatile Collection<V> values;",
      "right" : "private transient volatile Collection<V> values;",
      "info" : "FieldDeclaration[2111-2159]:FieldDeclaration[2111-2159]"
    }, {
      "left" : "private transient volatile Set<Map.Entry<K,V>> entrySet;",
      "right" : "private transient volatile Set<Map.Entry<K,V>> entrySet;",
      "info" : "FieldDeclaration[2164-2220]:FieldDeclaration[2164-2220]"
    }, {
      "left" : "private transient int size = 0;",
      "right" : "private transient int size = 0;",
      "info" : "FieldDeclaration[2226-2306]:FieldDeclaration[2226-2306]"
    }, {
      "left" : "protected transient int modCount = 0;",
      "right" : "protected transient int modCount = 0;",
      "info" : "FieldDeclaration[2312-2518]:FieldDeclaration[2312-2518]"
    }, {
      "left" : "protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> keyAnalyzer)",
      "right" : "protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> keyAnalyzer)",
      "info" : "MethodDeclaration[2524-2632]:MethodDeclaration[2524-2632]"
    }, {
      "left" : "protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> keyAnalyzer,\n                                   final Map<? extends K, ? extends V> map)",
      "right" : "protected AbstractPatriciaTrie(final KeyAnalyzer<? super K> keyAnalyzer,\n                                   final Map<? extends K, ? extends V> map)",
      "info" : "MethodDeclaration[2638-3100]:MethodDeclaration[2638-3100]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[3184-3468]:MethodDeclaration[3184-3468]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[3474-3534]:MethodDeclaration[3474-3534]"
    }, {
      "left" : "void incrementSize()",
      "right" : "void incrementSize()",
      "info" : "MethodDeclaration[3540-3717]:MethodDeclaration[3540-3717]"
    }, {
      "left" : "void decrementSize()",
      "right" : "void decrementSize()",
      "info" : "MethodDeclaration[3723-3910]:MethodDeclaration[3723-3910]"
    }, {
      "left" : "private void incrementModCount()",
      "right" : "private void incrementModCount()",
      "info" : "MethodDeclaration[3916-4054]:MethodDeclaration[3916-4054]"
    }, {
      "left" : "public V put(final K key, final V value)",
      "right" : "public V put(final K key, final V value)",
      "info" : "MethodDeclaration[4060-6258]:MethodDeclaration[4060-6258]"
    }, {
      "left" : "TrieEntry<K, V> addEntry(final TrieEntry<K, V> entry, final int lengthInBits)",
      "right" : "TrieEntry<K, V> addEntry(final TrieEntry<K, V> entry, final int lengthInBits)",
      "info" : "MethodDeclaration[6264-7807]:MethodDeclaration[6264-7807]"
    }, {
      "left" : "public V get(final Object k)",
      "right" : "public V get(final Object k)",
      "info" : "MethodDeclaration[7813-7970]:MethodDeclaration[7813-7970]"
    }, {
      "left" : "TrieEntry<K,V> getEntry(final Object k)",
      "right" : "TrieEntry<K,V> getEntry(final Object k)",
      "info" : "MethodDeclaration[7976-8587]:MethodDeclaration[7976-8587]"
    }, {
      "left" : "public Map.Entry<K, V> select(final K key)",
      "right" : "public Map.Entry<K, V> select(final K key)",
      "info" : "MethodDeclaration[8593-9572]:MethodDeclaration[8593-9572]"
    }, {
      "left" : "public K selectKey(final K key)",
      "right" : "public K selectKey(final K key)",
      "info" : "MethodDeclaration[9578-10389]:MethodDeclaration[9578-10389]"
    }, {
      "left" : "public V selectValue(final K key)",
      "right" : "public V selectValue(final K key)",
      "info" : "MethodDeclaration[10395-11231]:MethodDeclaration[10395-11231]"
    }, {
      "left" : "private boolean selectR(final TrieEntry<K, V> h, final int bitIndex,\n                            final K key, final int lengthInBits,\n                            final Reference<Map.Entry<K, V>> reference)",
      "right" : "private boolean selectR(final TrieEntry<K, V> h, final int bitIndex,\n                            final K key, final int lengthInBits,\n                            final Reference<Map.Entry<K, V>> reference)",
      "info" : "MethodDeclaration[11237-12463]:MethodDeclaration[11237-12463]"
    }, {
      "left" : "public boolean containsKey(final Object k)",
      "right" : "public boolean containsKey(final Object k)",
      "info" : "MethodDeclaration[12469-12825]:MethodDeclaration[12469-12825]"
    }, {
      "left" : "public Set<Map.Entry<K,V>> entrySet()",
      "right" : "public Set<Map.Entry<K,V>> entrySet()",
      "info" : "MethodDeclaration[12831-12996]:MethodDeclaration[12831-12996]"
    }, {
      "left" : "public Set<K> keySet()",
      "right" : "public Set<K> keySet()",
      "info" : "MethodDeclaration[13002-13144]:MethodDeclaration[13002-13144]"
    }, {
      "left" : "public Collection<V> values()",
      "right" : "public Collection<V> values()",
      "info" : "MethodDeclaration[13150-13299]:MethodDeclaration[13150-13299]"
    }, {
      "left" : "public V remove(final Object k)",
      "right" : "public V remove(final Object k)",
      "info" : "MethodDeclaration[13305-14191]:MethodDeclaration[13305-14191]"
    }, {
      "left" : "TrieEntry<K, V> getNearestEntryForKey(final K key, final int lengthInBits)",
      "right" : "TrieEntry<K, V> getNearestEntryForKey(final K key, final int lengthInBits)",
      "info" : "MethodDeclaration[14197-15069]:MethodDeclaration[14197-15069]"
    }, {
      "left" : "V removeEntry(final TrieEntry<K, V> h)",
      "right" : "V removeEntry(final TrieEntry<K, V> h)",
      "info" : "MethodDeclaration[15075-15590]:MethodDeclaration[15075-15590]"
    }, {
      "left" : "private void removeExternalEntry(final TrieEntry<K, V> h)",
      "right" : "private void removeExternalEntry(final TrieEntry<K, V> h)",
      "info" : "MethodDeclaration[15596-16550]:MethodDeclaration[15596-16550]"
    }, {
      "left" : "private void removeInternalEntry(final TrieEntry<K, V> h)",
      "right" : "private void removeInternalEntry(final TrieEntry<K, V> h)",
      "info" : "MethodDeclaration[16556-19074]:MethodDeclaration[16556-19074]"
    }, {
      "left" : "TrieEntry<K, V> nextEntry(final TrieEntry<K, V> node)",
      "right" : "TrieEntry<K, V> nextEntry(final TrieEntry<K, V> node)",
      "info" : "MethodDeclaration[19080-19413]:MethodDeclaration[19080-19413]"
    }, {
      "left" : "TrieEntry<K, V> nextEntryImpl(final TrieEntry<K, V> start,\n            final TrieEntry<K, V> previous, final TrieEntry<K, V> tree)",
      "right" : "TrieEntry<K, V> nextEntryImpl(final TrieEntry<K, V> start,\n            final TrieEntry<K, V> previous, final TrieEntry<K, V> tree)",
      "info" : "MethodDeclaration[19419-23815]:MethodDeclaration[19419-23815]"
    }, {
      "left" : "TrieEntry<K, V> firstEntry()",
      "right" : "TrieEntry<K, V> firstEntry()",
      "info" : "MethodDeclaration[23821-24209]:MethodDeclaration[23821-24209]"
    }, {
      "left" : "TrieEntry<K, V> followLeft(TrieEntry<K, V> node)",
      "right" : "TrieEntry<K, V> followLeft(TrieEntry<K, V> node)",
      "info" : "MethodDeclaration[24215-24712]:MethodDeclaration[24215-24712]"
    }, {
      "left" : "public Comparator<? super K> comparator()",
      "right" : "public Comparator<? super K> comparator()",
      "info" : "MethodDeclaration[24797-24893]:MethodDeclaration[24797-24893]"
    }, {
      "left" : "public K firstKey()",
      "right" : "public K firstKey()",
      "info" : "MethodDeclaration[24899-25063]:MethodDeclaration[24899-25063]"
    }, {
      "left" : "public K lastKey()",
      "right" : "public K lastKey()",
      "info" : "MethodDeclaration[25069-25278]:MethodDeclaration[25069-25278]"
    }, {
      "left" : "public K nextKey(final K key)",
      "right" : "public K nextKey(final K key)",
      "info" : "MethodDeclaration[25284-25661]:MethodDeclaration[25284-25661]"
    }, {
      "left" : "public K previousKey(final K key)",
      "right" : "public K previousKey(final K key)",
      "info" : "MethodDeclaration[25667-26052]:MethodDeclaration[25667-26052]"
    }, {
      "left" : "public OrderedMapIterator<K, V> mapIterator()",
      "right" : "public OrderedMapIterator<K, V> mapIterator()",
      "info" : "MethodDeclaration[26058-26163]:MethodDeclaration[26058-26163]"
    }, {
      "left" : "public SortedMap<K, V> prefixMap(final K key)",
      "right" : "public SortedMap<K, V> prefixMap(final K key)",
      "info" : "MethodDeclaration[26169-26298]:MethodDeclaration[26169-26298]"
    }, {
      "left" : "private SortedMap<K, V> getPrefixMapByBits(final K key, final int offsetInBits, final int lengthInBits)",
      "right" : "private SortedMap<K, V> getPrefixMapByBits(final K key, final int offsetInBits, final int lengthInBits)",
      "info" : "MethodDeclaration[26304-27967]:MethodDeclaration[26304-27967]"
    }, {
      "left" : "public SortedMap<K, V> headMap(final K toKey)",
      "right" : "public SortedMap<K, V> headMap(final K toKey)",
      "info" : "MethodDeclaration[27973-28087]:MethodDeclaration[27973-28087]"
    }, {
      "left" : "public SortedMap<K, V> subMap(final K fromKey, final K toKey)",
      "right" : "public SortedMap<K, V> subMap(final K fromKey, final K toKey)",
      "info" : "MethodDeclaration[28093-28226]:MethodDeclaration[28093-28226]"
    }, {
      "left" : "public SortedMap<K, V> tailMap(final K fromKey)",
      "right" : "public SortedMap<K, V> tailMap(final K fromKey)",
      "info" : "MethodDeclaration[28232-28350]:MethodDeclaration[28232-28350]"
    }, {
      "left" : "TrieEntry<K,V> higherEntry(final K key)",
      "right" : "TrieEntry<K,V> higherEntry(final K key)",
      "info" : "MethodDeclaration[28356-30372]:MethodDeclaration[28356-30372]"
    }, {
      "left" : "TrieEntry<K,V> ceilingEntry(final K key)",
      "right" : "TrieEntry<K,V> ceilingEntry(final K key)",
      "info" : "MethodDeclaration[30378-32623]:MethodDeclaration[30378-32623]"
    }, {
      "left" : "TrieEntry<K,V> lowerEntry(final K key)",
      "right" : "TrieEntry<K,V> lowerEntry(final K key)",
      "info" : "MethodDeclaration[32629-34762]:MethodDeclaration[32629-34762]"
    }, {
      "left" : "TrieEntry<K,V> floorEntry(final K key)",
      "right" : "TrieEntry<K,V> floorEntry(final K key)",
      "info" : "MethodDeclaration[34768-36395]:MethodDeclaration[34768-36395]"
    }, {
      "left" : "TrieEntry<K, V> subtree(final K prefix, final int offsetInBits, final int lengthInBits)",
      "right" : "TrieEntry<K, V> subtree(final K prefix, final int offsetInBits, final int lengthInBits)",
      "info" : "MethodDeclaration[36401-38488]:MethodDeclaration[36401-38488]"
    }, {
      "left" : "TrieEntry<K, V> lastEntry()",
      "right" : "TrieEntry<K, V> lastEntry()",
      "info" : "MethodDeclaration[38494-38780]:MethodDeclaration[38494-38780]"
    }, {
      "left" : "TrieEntry<K, V> followRight(TrieEntry<K, V> node)",
      "right" : "TrieEntry<K, V> followRight(TrieEntry<K, V> node)",
      "info" : "MethodDeclaration[38786-39229]:MethodDeclaration[38786-39229]"
    }, {
      "left" : "TrieEntry<K, V> previousEntry(final TrieEntry<K, V> start)",
      "right" : "TrieEntry<K, V> previousEntry(final TrieEntry<K, V> start)",
      "info" : "MethodDeclaration[39235-41283]:MethodDeclaration[39235-41283]"
    }, {
      "left" : "TrieEntry<K, V> nextEntryInSubtree(final TrieEntry<K, V> node,\n            final TrieEntry<K, V> parentOfSubtree)",
      "right" : "TrieEntry<K, V> nextEntryInSubtree(final TrieEntry<K, V> node,\n            final TrieEntry<K, V> parentOfSubtree)",
      "info" : "MethodDeclaration[41289-41838]:MethodDeclaration[41289-41838]"
    }, {
      "left" : "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)",
      "right" : "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)",
      "info" : "MethodDeclaration[41844-42102]:MethodDeclaration[41844-42102]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "TypeDeclaration[42108-42689]:TypeDeclaration[42108-42689]"
    }, {
      "left" : "private E item;",
      "right" : "private E item;",
      "info" : "FieldDeclaration[42526-42541]:FieldDeclaration[42526-42541]"
    }, {
      "left" : "public void set(final E item)",
      "right" : "public void set(final E item)",
      "info" : "MethodDeclaration[42551-42622]:MethodDeclaration[42551-42622]"
    }, {
      "left" : "public E get()",
      "right" : "public E get()",
      "info" : "MethodDeclaration[42632-42683]:MethodDeclaration[42632-42683]"
    }, {
      "left" : "TrieEntry",
      "right" : "TrieEntry",
      "info" : "TypeDeclaration[42695-46478]:TypeDeclaration[42695-46478]"
    }, {
      "left" : "private static final long serialVersionUID = 4596023148184140013L;",
      "right" : "private static final long serialVersionUID = 4596023148184140013L;",
      "info" : "FieldDeclaration[42845-42911]:FieldDeclaration[42845-42911]"
    }, {
      "left" : "protected int bitIndex;",
      "right" : "protected int bitIndex;",
      "info" : "FieldDeclaration[42921-42994]:FieldDeclaration[42921-42994]"
    }, {
      "left" : "protected TrieEntry<K,V> parent;",
      "right" : "protected TrieEntry<K,V> parent;",
      "info" : "FieldDeclaration[43004-43077]:FieldDeclaration[43004-43077]"
    }, {
      "left" : "protected TrieEntry<K,V> left;",
      "right" : "protected TrieEntry<K,V> left;",
      "info" : "FieldDeclaration[43087-43162]:FieldDeclaration[43087-43162]"
    }, {
      "left" : "protected TrieEntry<K,V> right;",
      "right" : "protected TrieEntry<K,V> right;",
      "info" : "FieldDeclaration[43172-43249]:FieldDeclaration[43172-43249]"
    }, {
      "left" : "protected TrieEntry<K,V> predecessor;",
      "right" : "protected TrieEntry<K,V> predecessor;",
      "info" : "FieldDeclaration[43259-43348]:FieldDeclaration[43259-43348]"
    }, {
      "left" : "public TrieEntry(final K key, final V value, final int bitIndex)",
      "right" : "public TrieEntry(final K key, final V value, final int bitIndex)",
      "info" : "MethodDeclaration[43358-43635]:MethodDeclaration[43358-43635]"
    }, {
      "left" : "public boolean isEmpty()",
      "right" : "public boolean isEmpty()",
      "info" : "MethodDeclaration[43645-43886]:MethodDeclaration[43645-43886]"
    }, {
      "left" : "public boolean isInternalNode()",
      "right" : "public boolean isInternalNode()",
      "info" : "MethodDeclaration[43896-44072]:MethodDeclaration[43896-44072]"
    }, {
      "left" : "public boolean isExternalNode()",
      "right" : "public boolean isExternalNode()",
      "info" : "MethodDeclaration[44082-44244]:MethodDeclaration[44082-44244]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[44254-46472]:MethodDeclaration[44254-46472]"
    }, {
      "left" : "EntrySet",
      "right" : "EntrySet",
      "info" : "TypeDeclaration[46485-48018]:TypeDeclaration[46485-48018]"
    }, {
      "left" : "public Iterator<Map.Entry<K,V>> iterator()",
      "right" : "public Iterator<Map.Entry<K,V>> iterator()",
      "info" : "MethodDeclaration[46662-46774]:MethodDeclaration[46662-46774]"
    }, {
      "left" : "public boolean contains(final Object o)",
      "right" : "public boolean contains(final Object o)",
      "info" : "MethodDeclaration[46784-47090]:MethodDeclaration[46784-47090]"
    }, {
      "left" : "public boolean remove(final Object obj)",
      "right" : "public boolean remove(final Object obj)",
      "info" : "MethodDeclaration[47100-47504]:MethodDeclaration[47100-47504]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[47514-47614]:MethodDeclaration[47514-47614]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[47624-47720]:MethodDeclaration[47624-47720]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "TypeDeclaration[47730-48012]:TypeDeclaration[47730-48012]"
    }, {
      "left" : "public Map.Entry<K,V> next()",
      "right" : "public Map.Entry<K,V> next()",
      "info" : "MethodDeclaration[47900-48002]:MethodDeclaration[47900-48002]"
    }, {
      "left" : "KeySet",
      "right" : "KeySet",
      "info" : "TypeDeclaration[48024-49076]:TypeDeclaration[48024-49076]"
    }, {
      "left" : "public Iterator<K> iterator()",
      "right" : "public Iterator<K> iterator()",
      "info" : "MethodDeclaration[48182-48279]:MethodDeclaration[48182-48279]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[48289-48389]:MethodDeclaration[48289-48389]"
    }, {
      "left" : "public boolean contains(final Object o)",
      "right" : "public boolean contains(final Object o)",
      "info" : "MethodDeclaration[48399-48503]:MethodDeclaration[48399-48503]"
    }, {
      "left" : "public boolean remove(final Object o)",
      "right" : "public boolean remove(final Object o)",
      "info" : "MethodDeclaration[48513-48701]:MethodDeclaration[48513-48701]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[48711-48807]:MethodDeclaration[48711-48807]"
    }, {
      "left" : "KeyIterator",
      "right" : "KeyIterator",
      "info" : "TypeDeclaration[48817-49070]:TypeDeclaration[48817-49070]"
    }, {
      "left" : "public K next()",
      "right" : "public K next()",
      "info" : "MethodDeclaration[48962-49060]:MethodDeclaration[48962-49060]"
    }, {
      "left" : "Values",
      "right" : "Values",
      "info" : "TypeDeclaration[49082-50306]:TypeDeclaration[49082-50306]"
    }, {
      "left" : "public Iterator<V> iterator()",
      "right" : "public Iterator<V> iterator()",
      "info" : "MethodDeclaration[49245-49344]:MethodDeclaration[49245-49344]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[49354-49454]:MethodDeclaration[49354-49454]"
    }, {
      "left" : "public boolean contains(final Object o)",
      "right" : "public boolean contains(final Object o)",
      "info" : "MethodDeclaration[49464-49570]:MethodDeclaration[49464-49570]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[49580-49676]:MethodDeclaration[49580-49676]"
    }, {
      "left" : "public boolean remove(final Object o)",
      "right" : "public boolean remove(final Object o)",
      "info" : "MethodDeclaration[49686-50031]:MethodDeclaration[49686-50031]"
    }, {
      "left" : "ValueIterator",
      "right" : "ValueIterator",
      "info" : "TypeDeclaration[50041-50300]:TypeDeclaration[50041-50300]"
    }, {
      "left" : "public V next()",
      "right" : "public V next()",
      "info" : "MethodDeclaration[50190-50290]:MethodDeclaration[50190-50290]"
    }, {
      "left" : "TrieIterator",
      "right" : "TrieIterator",
      "info" : "TypeDeclaration[50312-52360]:TypeDeclaration[50312-52360]"
    }, {
      "left" : "protected int expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "right" : "protected int expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "info" : "FieldDeclaration[50429-50527]:FieldDeclaration[50429-50527]"
    }, {
      "left" : "protected TrieEntry<K, V> next;",
      "right" : "protected TrieEntry<K, V> next;",
      "info" : "FieldDeclaration[50537-50568]:FieldDeclaration[50537-50568]"
    }, {
      "left" : "protected TrieEntry<K, V> current;",
      "right" : "protected TrieEntry<K, V> current;",
      "info" : "FieldDeclaration[50604-50638]:FieldDeclaration[50604-50638]"
    }, {
      "left" : "protected TrieIterator()",
      "right" : "protected TrieIterator()",
      "info" : "MethodDeclaration[50678-50843]:MethodDeclaration[50678-50843]"
    }, {
      "left" : "protected TrieIterator(final TrieEntry<K, V> firstEntry)",
      "right" : "protected TrieIterator(final TrieEntry<K, V> firstEntry)",
      "info" : "MethodDeclaration[50853-51024]:MethodDeclaration[50853-51024]"
    }, {
      "left" : "protected TrieEntry<K,V> nextEntry()",
      "right" : "protected TrieEntry<K,V> nextEntry()",
      "info" : "MethodDeclaration[51034-51521]:MethodDeclaration[51034-51521]"
    }, {
      "left" : "protected TrieEntry<K, V> findNext(final TrieEntry<K, V> prior)",
      "right" : "protected TrieEntry<K, V> findNext(final TrieEntry<K, V> prior)",
      "info" : "MethodDeclaration[51531-51743]:MethodDeclaration[51531-51743]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[51753-51840]:MethodDeclaration[51753-51840]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[51850-52354]:MethodDeclaration[51850-52354]"
    }, {
      "left" : "TrieMapIterator",
      "right" : "TrieMapIterator",
      "info" : "TypeDeclaration[52366-54235]:TypeDeclaration[52366-54235]"
    }, {
      "left" : "protected TrieEntry<K, V> previous;",
      "right" : "protected TrieEntry<K, V> previous;",
      "info" : "FieldDeclaration[52540-52575]:FieldDeclaration[52540-52575]"
    }, {
      "left" : "public K next()",
      "right" : "public K next()",
      "info" : "MethodDeclaration[52616-52702]:MethodDeclaration[52616-52702]"
    }, {
      "left" : "public K getKey()",
      "right" : "public K getKey()",
      "info" : "MethodDeclaration[52712-52896]:MethodDeclaration[52712-52896]"
    }, {
      "left" : "public V getValue()",
      "right" : "public V getValue()",
      "info" : "MethodDeclaration[52906-53094]:MethodDeclaration[52906-53094]"
    }, {
      "left" : "public V setValue(final V value)",
      "right" : "public V setValue(final V value)",
      "info" : "MethodDeclaration[53104-53310]:MethodDeclaration[53104-53310]"
    }, {
      "left" : "public boolean hasPrevious()",
      "right" : "public boolean hasPrevious()",
      "info" : "MethodDeclaration[53320-53415]:MethodDeclaration[53320-53415]"
    }, {
      "left" : "public K previous()",
      "right" : "public K previous()",
      "info" : "MethodDeclaration[53425-53519]:MethodDeclaration[53425-53519]"
    }, {
      "left" : "protected TrieEntry<K, V> nextEntry()",
      "right" : "protected TrieEntry<K, V> nextEntry()",
      "info" : "MethodDeclaration[53529-53725]:MethodDeclaration[53529-53725]"
    }, {
      "left" : "protected TrieEntry<K,V> previousEntry()",
      "right" : "protected TrieEntry<K,V> previousEntry()",
      "info" : "MethodDeclaration[53735-54228]:MethodDeclaration[53735-54228]"
    }, {
      "left" : "RangeMap",
      "right" : "RangeMap",
      "info" : "TypeDeclaration[54241-59562]:TypeDeclaration[54241-59562]"
    }, {
      "left" : "private transient volatile Set<Map.Entry<K, V>> entrySet;",
      "right" : "private transient volatile Set<Map.Entry<K, V>> entrySet;",
      "info" : "FieldDeclaration[54406-54508]:FieldDeclaration[54406-54508]"
    }, {
      "left" : "protected abstract Set<Map.Entry<K, V>> createEntrySet();",
      "right" : "protected abstract Set<Map.Entry<K, V>> createEntrySet();",
      "info" : "MethodDeclaration[54518-54683]:MethodDeclaration[54518-54683]"
    }, {
      "left" : "protected abstract K getFromKey();",
      "right" : "protected abstract K getFromKey();",
      "info" : "MethodDeclaration[54693-54784]:MethodDeclaration[54693-54784]"
    }, {
      "left" : "protected abstract boolean isFromInclusive();",
      "right" : "protected abstract boolean isFromInclusive();",
      "info" : "MethodDeclaration[54794-54932]:MethodDeclaration[54794-54932]"
    }, {
      "left" : "protected abstract K getToKey();",
      "right" : "protected abstract K getToKey();",
      "info" : "MethodDeclaration[54942-55029]:MethodDeclaration[54942-55029]"
    }, {
      "left" : "protected abstract boolean isToInclusive();",
      "right" : "protected abstract boolean isToInclusive();",
      "info" : "MethodDeclaration[55039-55173]:MethodDeclaration[55039-55173]"
    }, {
      "left" : "public Comparator<? super K> comparator()",
      "right" : "public Comparator<? super K> comparator()",
      "info" : "MethodDeclaration[55183-55313]:MethodDeclaration[55183-55313]"
    }, {
      "left" : "public boolean containsKey(final Object key)",
      "right" : "public boolean containsKey(final Object key)",
      "info" : "MethodDeclaration[55323-55547]:MethodDeclaration[55323-55547]"
    }, {
      "left" : "public V remove(final Object key)",
      "right" : "public V remove(final Object key)",
      "info" : "MethodDeclaration[55557-55764]:MethodDeclaration[55557-55764]"
    }, {
      "left" : "public V get(final Object key)",
      "right" : "public V get(final Object key)",
      "info" : "MethodDeclaration[55774-55975]:MethodDeclaration[55774-55975]"
    }, {
      "left" : "public V put(final K key, final V value)",
      "right" : "public V put(final K key, final V value)",
      "info" : "MethodDeclaration[55985-56247]:MethodDeclaration[55985-56247]"
    }, {
      "left" : "public Set<Map.Entry<K, V>> entrySet()",
      "right" : "public Set<Map.Entry<K, V>> entrySet()",
      "info" : "MethodDeclaration[56257-56449]:MethodDeclaration[56257-56449]"
    }, {
      "left" : "public SortedMap<K, V> subMap(final K fromKey, final K toKey)",
      "right" : "public SortedMap<K, V> subMap(final K fromKey, final K toKey)",
      "info" : "MethodDeclaration[56459-56919]:MethodDeclaration[56459-56919]"
    }, {
      "left" : "public SortedMap<K, V> headMap(final K toKey)",
      "right" : "public SortedMap<K, V> headMap(final K toKey)",
      "info" : "MethodDeclaration[56929-57233]:MethodDeclaration[56929-57233]"
    }, {
      "left" : "public SortedMap<K, V> tailMap(final K fromKey)",
      "right" : "public SortedMap<K, V> tailMap(final K fromKey)",
      "info" : "MethodDeclaration[57243-57555]:MethodDeclaration[57243-57555]"
    }, {
      "left" : "protected boolean inRange(final K key)",
      "right" : "protected boolean inRange(final K key)",
      "info" : "MethodDeclaration[57565-57916]:MethodDeclaration[57565-57916]"
    }, {
      "left" : "protected boolean inRange2(final K key)",
      "right" : "protected boolean inRange2(final K key)",
      "info" : "MethodDeclaration[57926-58269]:MethodDeclaration[57926-58269]"
    }, {
      "left" : "protected boolean inFromRange(final K key, final boolean forceInclusive)",
      "right" : "protected boolean inFromRange(final K key, final boolean forceInclusive)",
      "info" : "MethodDeclaration[58279-58777]:MethodDeclaration[58279-58777]"
    }, {
      "left" : "protected boolean inToRange(final K key, final boolean forceInclusive)",
      "right" : "protected boolean inToRange(final K key, final boolean forceInclusive)",
      "info" : "MethodDeclaration[58787-59269]:MethodDeclaration[58787-59269]"
    }, {
      "left" : "protected abstract SortedMap<K, V> createRangeMap(K fromKey, boolean fromInclusive,\n                                                          K toKey, boolean toInclusive);",
      "right" : "protected abstract SortedMap<K, V> createRangeMap(K fromKey, boolean fromInclusive,\n                                                          K toKey, boolean toInclusive);",
      "info" : "MethodDeclaration[59279-59556]:MethodDeclaration[59279-59556]"
    }, {
      "left" : "RangeEntryMap",
      "right" : "RangeEntryMap",
      "info" : "TypeDeclaration[59567-62952]:TypeDeclaration[59567-62952]"
    }, {
      "left" : "private final K fromKey;",
      "right" : "private final K fromKey;",
      "info" : "FieldDeclaration[59693-59777]:FieldDeclaration[59693-59777]"
    }, {
      "left" : "private final K toKey;",
      "right" : "private final K toKey;",
      "info" : "FieldDeclaration[59786-59863]:FieldDeclaration[59786-59863]"
    }, {
      "left" : "private final boolean fromInclusive;",
      "right" : "private final boolean fromInclusive;",
      "info" : "FieldDeclaration[59872-59962]:FieldDeclaration[59872-59962]"
    }, {
      "left" : "private final boolean toInclusive;",
      "right" : "private final boolean toInclusive;",
      "info" : "FieldDeclaration[59971-60057]:FieldDeclaration[59971-60057]"
    }, {
      "left" : "protected RangeEntryMap(final K fromKey, final K toKey)",
      "right" : "protected RangeEntryMap(final K fromKey, final K toKey)",
      "info" : "MethodDeclaration[60066-60317]:MethodDeclaration[60066-60317]"
    }, {
      "left" : "protected RangeEntryMap(final K fromKey, final boolean fromInclusive,\n                               final K toKey, final boolean toInclusive)",
      "right" : "protected RangeEntryMap(final K fromKey, final boolean fromInclusive,\n                               final K toKey, final boolean toInclusive)",
      "info" : "MethodDeclaration[60326-61027]:MethodDeclaration[60326-61027]"
    }, {
      "left" : "public K firstKey()",
      "right" : "public K firstKey()",
      "info" : "MethodDeclaration[61036-61605]:MethodDeclaration[61036-61605]"
    }, {
      "left" : "public K lastKey()",
      "right" : "public K lastKey()",
      "info" : "MethodDeclaration[61614-62164]:MethodDeclaration[61614-62164]"
    }, {
      "left" : "protected Set<Entry<K, V>> createEntrySet()",
      "right" : "protected Set<Entry<K, V>> createEntrySet()",
      "info" : "MethodDeclaration[62173-62287]:MethodDeclaration[62173-62287]"
    }, {
      "left" : "public K getFromKey()",
      "right" : "public K getFromKey()",
      "info" : "MethodDeclaration[62296-62372]:MethodDeclaration[62296-62372]"
    }, {
      "left" : "public K getToKey()",
      "right" : "public K getToKey()",
      "info" : "MethodDeclaration[62381-62453]:MethodDeclaration[62381-62453]"
    }, {
      "left" : "public boolean isFromInclusive()",
      "right" : "public boolean isFromInclusive()",
      "info" : "MethodDeclaration[62462-62555]:MethodDeclaration[62462-62555]"
    }, {
      "left" : "public boolean isToInclusive()",
      "right" : "public boolean isToInclusive()",
      "info" : "MethodDeclaration[62564-62653]:MethodDeclaration[62564-62653]"
    }, {
      "left" : "protected SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive,\n                                                final K toKey, final boolean toInclusive)",
      "right" : "protected SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive,\n                                                final K toKey, final boolean toInclusive)",
      "info" : "MethodDeclaration[62662-62947]:MethodDeclaration[62662-62947]"
    }, {
      "left" : "RangeEntrySet",
      "right" : "RangeEntrySet",
      "info" : "TypeDeclaration[62958-66682]:TypeDeclaration[62958-66682]"
    }, {
      "left" : "private final RangeMap delegate;",
      "right" : "private final RangeMap delegate;",
      "info" : "FieldDeclaration[63099-63131]:FieldDeclaration[63099-63131]"
    }, {
      "left" : "private transient int size = -1;",
      "right" : "private transient int size = -1;",
      "info" : "FieldDeclaration[63141-63173]:FieldDeclaration[63141-63173]"
    }, {
      "left" : "private transient int expectedModCount;",
      "right" : "private transient int expectedModCount;",
      "info" : "FieldDeclaration[63183-63222]:FieldDeclaration[63183-63222]"
    }, {
      "left" : "public RangeEntrySet(final RangeMap delegate)",
      "right" : "public RangeEntrySet(final RangeMap delegate)",
      "info" : "MethodDeclaration[63232-63506]:MethodDeclaration[63232-63506]"
    }, {
      "left" : "public Iterator<Map.Entry<K, V>> iterator()",
      "right" : "public Iterator<Map.Entry<K, V>> iterator()",
      "info" : "MethodDeclaration[63516-64074]:MethodDeclaration[63516-64074]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[64084-64486]:MethodDeclaration[64084-64486]"
    }, {
      "left" : "public boolean isEmpty()",
      "right" : "public boolean isEmpty()",
      "info" : "MethodDeclaration[64496-64592]:MethodDeclaration[64496-64592]"
    }, {
      "left" : "public boolean contains(final Object o)",
      "right" : "public boolean contains(final Object o)",
      "info" : "MethodDeclaration[64602-65127]:MethodDeclaration[64602-65127]"
    }, {
      "left" : "public boolean remove(final Object o)",
      "right" : "public boolean remove(final Object o)",
      "info" : "MethodDeclaration[65137-65763]:MethodDeclaration[65137-65763]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "TypeDeclaration[65773-66676]:TypeDeclaration[65773-66676]"
    }, {
      "left" : "private final K excludedKey;",
      "right" : "private final K excludedKey;",
      "info" : "FieldDeclaration[65942-65970]:FieldDeclaration[65942-65970]"
    }, {
      "left" : "private EntryIterator(final TrieEntry<K,V> first, final TrieEntry<K,V> last)",
      "right" : "private EntryIterator(final TrieEntry<K,V> first, final TrieEntry<K,V> last)",
      "info" : "MethodDeclaration[65984-66258]:MethodDeclaration[65984-66258]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[66272-66406]:MethodDeclaration[66272-66406]"
    }, {
      "left" : "public Map.Entry<K,V> next()",
      "right" : "public Map.Entry<K,V> next()",
      "info" : "MethodDeclaration[66420-66666]:MethodDeclaration[66420-66666]"
    }, {
      "left" : "PrefixRangeMap",
      "right" : "PrefixRangeMap",
      "info" : "TypeDeclaration[66688-71878]:TypeDeclaration[66688-72235]"
    }, {
      "left" : "private final K prefix;",
      "right" : "private final K prefix;",
      "info" : "FieldDeclaration[66822-66845]:FieldDeclaration[66822-66845]"
    }, {
      "left" : "private final int offsetInBits;",
      "right" : "private final int offsetInBits;",
      "info" : "FieldDeclaration[66855-66886]:FieldDeclaration[66855-66886]"
    }, {
      "left" : "private final int lengthInBits;",
      "right" : "private final int lengthInBits;",
      "info" : "FieldDeclaration[66896-66927]:FieldDeclaration[66896-66927]"
    }, {
      "left" : "private K fromKey = null;",
      "right" : "private K fromKey = null;",
      "info" : "FieldDeclaration[66937-66962]:FieldDeclaration[66937-66962]"
    }, {
      "left" : "private K toKey = null;",
      "right" : "private K toKey = null;",
      "info" : "FieldDeclaration[66972-66995]:FieldDeclaration[66972-66995]"
    }, {
      "left" : "private transient int expectedModCount = 0;",
      "right" : "private transient int expectedModCount = 0;",
      "info" : "FieldDeclaration[67005-67048]:FieldDeclaration[67005-67048]"
    }, {
      "left" : "private int size = -1;",
      "right" : "private int size = -1;",
      "info" : "FieldDeclaration[67058-67080]:FieldDeclaration[67058-67080]"
    }, {
      "left" : "private PrefixRangeMap(final K prefix, final int offsetInBits, final int lengthInBits)",
      "right" : "private PrefixRangeMap(final K prefix, final int offsetInBits, final int lengthInBits)",
      "info" : "MethodDeclaration[67090-67383]:MethodDeclaration[67090-67383]"
    }, {
      "left" : "private int fixup()",
      "right" : "private int fixup()",
      "info" : "MethodDeclaration[67393-68941]:MethodDeclaration[67393-68941]"
    }, {
      "left" : "public K firstKey()",
      "right" : "public K firstKey()",
      "info" : "MethodDeclaration[68951-69460]:MethodDeclaration[68951-69460]"
    }, {
      "left" : "public K lastKey()",
      "right" : "public K lastKey()",
      "info" : "MethodDeclaration[69470-69969]:MethodDeclaration[69470-69969]"
    }, {
      "left" : "protected boolean inRange(final K key)",
      "right" : "protected boolean inRange(final K key)",
      "info" : "MethodDeclaration[69979-70252]:MethodDeclaration[69979-70252]"
    }, {
      "left" : "protected boolean inRange2(final K key)",
      "right" : "protected boolean inRange2(final K key)",
      "info" : "MethodDeclaration[70262-70433]:MethodDeclaration[70262-70433]"
    }, {
      "left" : "protected boolean inFromRange(final K key, final boolean forceInclusive)",
      "right" : "protected boolean inFromRange(final K key, final boolean forceInclusive)",
      "info" : "MethodDeclaration[70443-70752]:MethodDeclaration[70443-70752]"
    }, {
      "left" : "protected boolean inToRange(final K key, final boolean forceInclusive)",
      "right" : "protected boolean inToRange(final K key, final boolean forceInclusive)",
      "info" : "MethodDeclaration[70762-71067]:MethodDeclaration[70762-71067]"
    }, {
      "left" : "protected Set<Map.Entry<K, V>> createEntrySet()",
      "right" : "protected Set<Map.Entry<K, V>> createEntrySet()",
      "info" : "MethodDeclaration[71077-71204]:MethodDeclaration[71077-71204]"
    }, {
      "left" : "public K getFromKey()",
      "right" : "public K getFromKey()",
      "info" : "MethodDeclaration[71214-71293]:MethodDeclaration[71214-71293]"
    }, {
      "left" : "public K getToKey()",
      "right" : "public K getToKey()",
      "info" : "MethodDeclaration[71303-71378]:MethodDeclaration[71303-71378]"
    }, {
      "left" : "public boolean isFromInclusive()",
      "right" : "public boolean isFromInclusive()",
      "info" : "MethodDeclaration[71388-71476]:MethodDeclaration[71388-71476]"
    }, {
      "left" : "public boolean isToInclusive()",
      "right" : "public boolean isToInclusive()",
      "info" : "MethodDeclaration[71486-71572]:MethodDeclaration[71486-71572]"
    }, {
      "left" : "protected SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive,\n                                                 final K toKey, final boolean toInclusive)",
      "right" : "protected SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive,\n                                                 final K toKey, final boolean toInclusive)",
      "info" : "MethodDeclaration[71582-71871]:MethodDeclaration[71582-71871]"
    }, {
      "left" : "PrefixRangeEntrySet",
      "right" : "PrefixRangeEntrySet",
      "info" : "TypeDeclaration[71884-76707]:TypeDeclaration[72241-77064]"
    }, {
      "left" : "private final PrefixRangeMap delegate;",
      "right" : "private final PrefixRangeMap delegate;",
      "info" : "FieldDeclaration[72037-72075]:FieldDeclaration[72394-72432]"
    }, {
      "left" : "private TrieEntry<K, V> prefixStart;",
      "right" : "private TrieEntry<K, V> prefixStart;",
      "info" : "FieldDeclaration[72085-72121]:FieldDeclaration[72442-72478]"
    }, {
      "left" : "private int expectedModCount = 0;",
      "right" : "private int expectedModCount = 0;",
      "info" : "FieldDeclaration[72131-72164]:FieldDeclaration[72488-72521]"
    }, {
      "left" : "public PrefixRangeEntrySet(final PrefixRangeMap delegate)",
      "right" : "public PrefixRangeEntrySet(final PrefixRangeMap delegate)",
      "info" : "MethodDeclaration[72174-72384]:MethodDeclaration[72531-72741]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[72394-72478]:MethodDeclaration[72751-72835]"
    }, {
      "left" : "public Iterator<Map.Entry<K,V>> iterator()",
      "right" : "public Iterator<Map.Entry<K,V>> iterator()",
      "info" : "MethodDeclaration[72488-73259]:MethodDeclaration[72845-73616]"
    }, {
      "left" : "SingletonIterator",
      "right" : "SingletonIterator",
      "info" : "TypeDeclaration[73269-74265]:TypeDeclaration[73626-74622]"
    }, {
      "left" : "private final TrieEntry<K, V> entry;",
      "right" : "private final TrieEntry<K, V> entry;",
      "info" : "FieldDeclaration[73453-73489]:FieldDeclaration[73810-73846]"
    }, {
      "left" : "private int hit = 0;",
      "right" : "private int hit = 0;",
      "info" : "FieldDeclaration[73503-73523]:FieldDeclaration[73860-73880]"
    }, {
      "left" : "public SingletonIterator(final TrieEntry<K, V> entry)",
      "right" : "public SingletonIterator(final TrieEntry<K, V> entry)",
      "info" : "MethodDeclaration[73537-73642]:MethodDeclaration[73894-73999]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[73656-73751]:MethodDeclaration[74013-74108]"
    }, {
      "left" : "public Map.Entry<K, V> next()",
      "right" : "public Map.Entry<K, V> next()",
      "info" : "MethodDeclaration[73765-73992]:MethodDeclaration[74122-74349]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[74006-74255]:MethodDeclaration[74363-74612]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "TypeDeclaration[74275-76701]:TypeDeclaration[74632-77058]"
    }, {
      "left" : "private final K prefix;",
      "right" : "private final K prefix;",
      "info" : "FieldDeclaration[74513-74536]:FieldDeclaration[74870-74893]"
    }, {
      "left" : "private final int offset;",
      "right" : "private final int offset;",
      "info" : "FieldDeclaration[74549-74574]:FieldDeclaration[74906-74931]"
    }, {
      "left" : "private final int lengthInBits;",
      "right" : "private final int lengthInBits;",
      "info" : "FieldDeclaration[74587-74618]:FieldDeclaration[74944-74975]"
    }, {
      "left" : "private boolean lastOne;",
      "right" : "private boolean lastOne;",
      "info" : "FieldDeclaration[74631-74655]:FieldDeclaration[74988-75012]"
    }, {
      "left" : "private TrieEntry<K, V> subtree;",
      "right" : "private TrieEntry<K, V> subtree;",
      "info" : "FieldDeclaration[74669-74701]:FieldDeclaration[75026-75058]"
    }, {
      "left" : "EntryIterator(final TrieEntry<K, V> startScan, final K prefix,\n                    final int offset, final int lengthInBits)",
      "right" : "EntryIterator(final TrieEntry<K, V> startScan, final K prefix,\n                    final int offset, final int lengthInBits)",
      "info" : "MethodDeclaration[74747-75260]:MethodDeclaration[75104-75617]"
    }, {
      "left" : "public Map.Entry<K,V> next()",
      "right" : "public Map.Entry<K,V> next()",
      "info" : "MethodDeclaration[75274-75511]:MethodDeclaration[75631-75868]"
    }, {
      "left" : "protected TrieEntry<K, V> findNext(final TrieEntry<K, V> prior)",
      "right" : "protected TrieEntry<K, V> findNext(final TrieEntry<K, V> prior)",
      "info" : "MethodDeclaration[75525-75711]:MethodDeclaration[75882-76068]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[75725-76691]:MethodDeclaration[76082-77048]"
    }, {
      "left" : "// This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundExceptio",
      "right" : "// This will fail at runtime if the stream is incorrect\n    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundExceptio",
      "info" : "MethodDeclaration[76792-77327]:MethodDeclaration[77149-77684]"
    }, {
      "left" : "private void writeObject(final ObjectOutputStream stream) throws IOExceptio",
      "right" : "private void writeObject(final ObjectOutputStream stream) throws IOExceptio",
      "info" : "MethodDeclaration[77333-77727]:MethodDeclaration[77690-78084]"
    } ],
    "mappings" : [
 {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2524-2533]:Modifier[2524-2533]"
    }, {
      "left" : "AbstractPatriciaTrie",
      "right" : "AbstractPatriciaTrie",
      "info" : "SimpleName[2534-2554]:SimpleName[2534-2554]"
    }, {
      "left" : "final KeyAnalyzer<? super K> keyAnalyzer",
      "right" : "final KeyAnalyzer<? super K> keyAnalyzer",
      "info" : "SingleVariableDeclaration[2555-2595]:SingleVariableDeclaration[2555-2595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2597-2632]:Block[2597-2632]"
    }, {
      "left" : "super(keyAnalyzer);",
      "right" : "super(keyAnalyzer);",
      "info" : "SuperConstructorInvocation[2607-2626]:SuperConstructorInvocation[2607-2626]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2895-2904]:Modifier[2895-2904]"
    }, {
      "left" : "AbstractPatriciaTrie",
      "right" : "AbstractPatriciaTrie",
      "info" : "SimpleName[2905-2925]:SimpleName[2905-2925]"
    }, {
      "left" : "final KeyAnalyzer<? super K> keyAnalyzer",
      "right" : "final KeyAnalyzer<? super K> keyAnalyzer",
      "info" : "SingleVariableDeclaration[2926-2966]:SingleVariableDeclaration[2926-2966]"
    }, {
      "left" : "final Map<? extends K, ? extends V> map",
      "right" : "final Map<? extends K, ? extends V> map",
      "info" : "SingleVariableDeclaration[3003-3042]:SingleVariableDeclaration[3003-3042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3044-3100]:Block[3044-3100]"
    }, {
      "left" : "super(keyAnalyzer);",
      "right" : "super(keyAnalyzer);",
      "info" : "SuperConstructorInvocation[3054-3073]:SuperConstructorInvocation[3054-3073]"
    }, {
      "left" : "putAll(map);",
      "right" : "putAll(map);",
      "info" : "ExpressionStatement[3082-3094]:ExpressionStatement[3082-3094]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3184-3193]:MarkerAnnotation[3184-3193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3198-3204]:Modifier[3198-3204]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3205-3209]:PrimitiveType[3205-3209]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[3210-3215]:SimpleName[3210-3215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3218-3468]:Block[3218-3468]"
    }, {
      "left" : "root.key = null;",
      "right" : "root.key = null;",
      "info" : "ExpressionStatement[3228-3244]:ExpressionStatement[3228-3244]"
    }, {
      "left" : "root.bitIndex = -1;",
      "right" : "root.bitIndex = -1;",
      "info" : "ExpressionStatement[3253-3272]:ExpressionStatement[3253-3272]"
    }, {
      "left" : "root.value = null;",
      "right" : "root.value = null;",
      "info" : "ExpressionStatement[3281-3299]:ExpressionStatement[3281-3299]"
    }, {
      "left" : "root.parent = null;",
      "right" : "root.parent = null;",
      "info" : "ExpressionStatement[3309-3328]:ExpressionStatement[3309-3328]"
    }, {
      "left" : "root.left = root;",
      "right" : "root.left = root;",
      "info" : "ExpressionStatement[3337-3354]:ExpressionStatement[3337-3354]"
    }, {
      "left" : "root.right = null;",
      "right" : "root.right = null;",
      "info" : "ExpressionStatement[3363-3381]:ExpressionStatement[3363-3381]"
    }, {
      "left" : "root.predecessor = root;",
      "right" : "root.predecessor = root;",
      "info" : "ExpressionStatement[3390-3414]:ExpressionStatement[3390-3414]"
    }, {
      "left" : "size = 0;",
      "right" : "size = 0;",
      "info" : "ExpressionStatement[3424-3433]:ExpressionStatement[3424-3433]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[3442-3462]:ExpressionStatement[3442-3462]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3474-3483]:MarkerAnnotation[3474-3483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3488-3494]:Modifier[3488-3494]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3495-3498]:PrimitiveType[3495-3498]"
    }, {
      "left" : "size",
      "right" : "size",
      "info" : "SimpleName[3499-3503]:SimpleName[3499-3503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3506-3534]:Block[3506-3534]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[3516-3528]:ReturnStatement[3516-3528]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3644-3648]:PrimitiveType[3644-3648]"
    }, {
      "left" : "incrementSize",
      "right" : "incrementSize",
      "info" : "SimpleName[3649-3662]:SimpleName[3649-3662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3665-3717]:Block[3665-3717]"
    }, {
      "left" : "size++;",
      "right" : "size++;",
      "info" : "ExpressionStatement[3675-3682]:ExpressionStatement[3675-3682]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[3691-3711]:ExpressionStatement[3691-3711]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3837-3841]:PrimitiveType[3837-3841]"
    }, {
      "left" : "decrementSize",
      "right" : "decrementSize",
      "info" : "SimpleName[3842-3855]:SimpleName[3842-3855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3858-3910]:Block[3858-3910]"
    }, {
      "left" : "size--;",
      "right" : "size--;",
      "info" : "ExpressionStatement[3868-3875]:ExpressionStatement[3868-3875]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[3884-3904]:ExpressionStatement[3884-3904]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3994-4001]:Modifier[3994-4001]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4002-4006]:PrimitiveType[4002-4006]"
    }, {
      "left" : "incrementModCount",
      "right" : "incrementModCount",
      "info" : "SimpleName[4007-4024]:SimpleName[4007-4024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4027-4054]:Block[4027-4054]"
    }, {
      "left" : "++modCount;",
      "right" : "++modCount;",
      "info" : "ExpressionStatement[4037-4048]:ExpressionStatement[4037-4048]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4060-4069]:MarkerAnnotation[4060-4069]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4074-4080]:Modifier[4074-4080]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[4081-4082]:SimpleType[4081-4082]"
    }, {
      "left" : "put",
      "right" : "put",
      "info" : "SimpleName[4083-4086]:SimpleName[4083-4086]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[4087-4098]:SingleVariableDeclaration[4087-4098]"
    }, {
      "left" : "final V value",
      "right" : "final V value",
      "info" : "SingleVariableDeclaration[4100-4113]:SingleVariableDeclaration[4100-4113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4115-6258]:Block[4115-6258]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[4125-4219]:IfStatement[4125-4219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4142-4219]:Block[4142-4219]"
    }, {
      "left" : "throw new NullPointerException(\"Key cannot be null\");",
      "right" : "throw new NullPointerException(\"Key cannot be null\");",
      "info" : "ThrowStatement[4156-4209]:ThrowStatement[4156-4209]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[4229-4272]:VariableDeclarationStatement[4229-4272]"
    }, {
      "left" : "if (lengthInBits == 0)",
      "right" : "if (lengthInBits == 0)",
      "info" : "IfStatement[4378-4600]:IfStatement[4378-4600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4401-4600]:Block[4401-4600]"
    }, {
      "left" : "if (root.isEmpty())",
      "right" : "if (root.isEmpty())",
      "info" : "IfStatement[4415-4541]:IfStatement[4415-4541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4435-4483]:Block[4435-4483]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[4453-4469]:ExpressionStatement[4453-4469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4489-4541]:Block[4489-4541]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[4507-4527]:ExpressionStatement[4507-4527]"
    }, {
      "left" : "return root.setKeyValue(key, value);",
      "right" : "return root.setKeyValue(key, value);",
      "info" : "ReturnStatement[4554-4590]:ReturnStatement[4554-4590]"
    }, {
      "left" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[4610-4681]:VariableDeclarationStatement[4610-4681]"
    }, {
      "left" : "if (compareKeys(key, found.key))",
      "right" : "if (compareKeys(key, found.key))",
      "info" : "IfStatement[4690-4947]:IfStatement[4690-4947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4723-4947]:Block[4723-4947]"
    }, {
      "left" : "if (found.isEmpty())",
      "right" : "if (found.isEmpty())",
      "info" : "IfStatement[4737-4887]:IfStatement[4737-4887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4758-4829]:Block[4758-4829]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[4799-4815]:ExpressionStatement[4799-4815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4835-4887]:Block[4835-4887]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[4853-4873]:ExpressionStatement[4853-4873]"
    }, {
      "left" : "return found.setKeyValue(key, value);",
      "right" : "return found.setKeyValue(key, value);",
      "info" : "ReturnStatement[4900-4937]:ReturnStatement[4900-4937]"
    }, {
      "left" : "final int bitIndex = bitIndex(key, found.key);",
      "right" : "final int bitIndex = bitIndex(key, found.key);",
      "info" : "VariableDeclarationStatement[4957-5003]:VariableDeclarationStatement[4957-5003]"
    }, {
      "left" : "if (!KeyAnalyzer.isOutOfBoundsIndex(bitIndex))",
      "right" : "if (!KeyAnalyzer.isOutOfBoundsIndex(bitIndex))",
      "info" : "IfStatement[5012-6147]:IfStatement[5012-6147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5059-6147]:Block[5059-6147]"
    }, {
      "left" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "right" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "info" : "IfStatement[5073-6137]:IfStatement[5073-6137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5116-5390]:Block[5116-5390]"
    }, {
      "left" : "final TrieEntry<K, V> t = new TrieEntry<K, V>(key, value, bitIndex);",
      "right" : "final TrieEntry<K, V> t = new TrieEntry<K, V>(key, value, bitIndex);",
      "info" : "VariableDeclarationStatement[5203-5271]:VariableDeclarationStatement[5203-5271]"
    }, {
      "left" : "addEntry(t, lengthInBits);",
      "right" : "addEntry(t, lengthInBits);",
      "info" : "ExpressionStatement[5288-5314]:ExpressionStatement[5288-5314]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[5331-5347]:ExpressionStatement[5331-5347]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5364-5376]:ReturnStatement[5364-5376]"
    }, {
      "left" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "info" : "IfStatement[5396-6137]:IfStatement[5396-6137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5436-5819]:Block[5436-5819]"
    }, {
      "left" : "if (root.isEmpty())",
      "right" : "if (root.isEmpty())",
      "info" : "IfStatement[5609-5751]:IfStatement[5609-5751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5629-5685]:Block[5629-5685]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[5651-5667]:ExpressionStatement[5651-5667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5691-5751]:Block[5691-5751]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[5713-5733]:ExpressionStatement[5713-5733]"
    }, {
      "left" : "return root.setKeyValue(key, value);",
      "right" : "return root.setKeyValue(key, value);",
      "info" : "ReturnStatement[5768-5804]:ReturnStatement[5768-5804]"
    }, {
      "left" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "info" : "IfStatement[5825-6137]:IfStatement[5825-6137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5866-6137]:Block[5866-6137]"
    }, {
      "left" : "if (found != root)",
      "right" : "if (found != root)",
      "info" : "IfStatement[5986-6123]:IfStatement[5986-6123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6005-6123]:Block[6005-6123]"
    }, {
      "left" : "incrementModCount();",
      "right" : "incrementModCount();",
      "info" : "ExpressionStatement[6027-6047]:ExpressionStatement[6027-6047]"
    }, {
      "left" : "return found.setKeyValue(key, value);",
      "right" : "return found.setKeyValue(key, value);",
      "info" : "ReturnStatement[6068-6105]:ReturnStatement[6068-6105]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Failed to put: \" + key + \" -> \" + value + \", \" + bitIndex);",
      "right" : "throw new IllegalArgumentException(\"Failed to put: \" + key + \" -> \" + value + \", \" + bitIndex);",
      "info" : "ThrowStatement[6157-6252]:ThrowStatement[6157-6252]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[6341-6356]:ParameterizedType[6341-6356]"
    }, {
      "left" : "addEntry",
      "right" : "addEntry",
      "info" : "SimpleName[6357-6365]:SimpleName[6357-6365]"
    }, {
      "left" : "final TrieEntry<K, V> entry",
      "right" : "final TrieEntry<K, V> entry",
      "info" : "SingleVariableDeclaration[6366-6393]:SingleVariableDeclaration[6366-6393]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[6395-6417]:SingleVariableDeclaration[6395-6417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6419-7807]:Block[6419-7807]"
    }, {
      "left" : "TrieEntry<K, V> current = root.left;",
      "right" : "TrieEntry<K, V> current = root.left;",
      "info" : "VariableDeclarationStatement[6429-6465]:VariableDeclarationStatement[6429-6465]"
    }, {
      "left" : "TrieEntry<K, V> path = root;",
      "right" : "TrieEntry<K, V> path = root;",
      "info" : "VariableDeclarationStatement[6474-6502]:VariableDeclarationStatement[6474-6502]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[6511-7801]:WhileStatement[6511-7801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6523-7801]:Block[6523-7801]"
    }, {
      "left" : "if (current.bitIndex >= entry.bitIndex\n                    || current.bitIndex <= path.bitIndex)",
      "right" : "if (current.bitIndex >= entry.bitIndex\n                    || current.bitIndex <= path.bitIndex)",
      "info" : "IfStatement[6537-7573]:IfStatement[6537-7573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6634-7573]:Block[6634-7573]"
    }, {
      "left" : "entry.predecessor = entry;",
      "right" : "entry.predecessor = entry;",
      "info" : "ExpressionStatement[6652-6678]:ExpressionStatement[6652-6678]"
    }, {
      "left" : "if (!isBitSet(entry.key, entry.bitIndex, lengthInBits))",
      "right" : "if (!isBitSet(entry.key, entry.bitIndex, lengthInBits))",
      "info" : "IfStatement[6696-6962]:IfStatement[6696-6962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6752-6854]:Block[6752-6854]"
    }, {
      "left" : "entry.left = entry;",
      "right" : "entry.left = entry;",
      "info" : "ExpressionStatement[6774-6793]:ExpressionStatement[6774-6793]"
    }, {
      "left" : "entry.right = current;",
      "right" : "entry.right = current;",
      "info" : "ExpressionStatement[6814-6836]:ExpressionStatement[6814-6836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6860-6962]:Block[6860-6962]"
    }, {
      "left" : "entry.left = current;",
      "right" : "entry.left = current;",
      "info" : "ExpressionStatement[6882-6903]:ExpressionStatement[6882-6903]"
    }, {
      "left" : "entry.right = entry;",
      "right" : "entry.right = entry;",
      "info" : "ExpressionStatement[6924-6944]:ExpressionStatement[6924-6944]"
    }, {
      "left" : "entry.parent = path;",
      "right" : "entry.parent = path;",
      "info" : "ExpressionStatement[6980-7000]:ExpressionStatement[6980-7000]"
    }, {
      "left" : "if (current.bitIndex >= entry.bitIndex)",
      "right" : "if (current.bitIndex >= entry.bitIndex)",
      "info" : "IfStatement[7017-7120]:IfStatement[7017-7120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7057-7120]:Block[7057-7120]"
    }, {
      "left" : "current.parent = entry;",
      "right" : "current.parent = entry;",
      "info" : "ExpressionStatement[7079-7102]:ExpressionStatement[7079-7102]"
    }, {
      "left" : "if (current.bitIndex <= path.bitIndex)",
      "right" : "if (current.bitIndex <= path.bitIndex)",
      "info" : "IfStatement[7209-7316]:IfStatement[7209-7316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7248-7316]:Block[7248-7316]"
    }, {
      "left" : "current.predecessor = entry;",
      "right" : "current.predecessor = entry;",
      "info" : "ExpressionStatement[7270-7298]:ExpressionStatement[7270-7298]"
    }, {
      "left" : "if (path == root || !isBitSet(entry.key, path.bitIndex, lengthInBits))",
      "right" : "if (path == root || !isBitSet(entry.key, path.bitIndex, lengthInBits))",
      "info" : "IfStatement[7334-7528]:IfStatement[7334-7528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7405-7463]:Block[7405-7463]"
    }, {
      "left" : "path.left = entry;",
      "right" : "path.left = entry;",
      "info" : "ExpressionStatement[7427-7445]:ExpressionStatement[7427-7445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7469-7528]:Block[7469-7528]"
    }, {
      "left" : "path.right = entry;",
      "right" : "path.right = entry;",
      "info" : "ExpressionStatement[7491-7510]:ExpressionStatement[7491-7510]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[7546-7559]:ReturnStatement[7546-7559]"
    }, {
      "left" : "path = current;",
      "right" : "path = current;",
      "info" : "ExpressionStatement[7587-7602]:ExpressionStatement[7587-7602]"
    }, {
      "left" : "if (!isBitSet(entry.key, current.bitIndex, lengthInBits))",
      "right" : "if (!isBitSet(entry.key, current.bitIndex, lengthInBits))",
      "info" : "IfStatement[7616-7791]:IfStatement[7616-7791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7674-7729]:Block[7674-7729]"
    }, {
      "left" : "current = current.left;",
      "right" : "current = current.left;",
      "info" : "ExpressionStatement[7692-7715]:ExpressionStatement[7692-7715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7735-7791]:Block[7735-7791]"
    }, {
      "left" : "current = current.right;",
      "right" : "current = current.right;",
      "info" : "ExpressionStatement[7753-7777]:ExpressionStatement[7753-7777]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7813-7822]:MarkerAnnotation[7813-7822]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7827-7833]:Modifier[7827-7833]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[7834-7835]:SimpleType[7834-7835]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[7836-7839]:SimpleName[7836-7839]"
    }, {
      "left" : "final Object k",
      "right" : "final Object k",
      "info" : "SingleVariableDeclaration[7840-7854]:SingleVariableDeclaration[7840-7854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7856-7970]:Block[7856-7970]"
    }, {
      "left" : "final TrieEntry<K, V> entry = getEntry(k);",
      "right" : "final TrieEntry<K, V> entry = getEntry(k);",
      "info" : "VariableDeclarationStatement[7866-7908]:VariableDeclarationStatement[7866-7908]"
    }, {
      "left" : "return entry != null ? entry.getValue() : null;",
      "right" : "return entry != null ? entry.getValue() : null;",
      "info" : "ReturnStatement[7917-7964]:ReturnStatement[7917-7964]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[8233-8247]:ParameterizedType[8233-8247]"
    }, {
      "left" : "getEntry",
      "right" : "getEntry",
      "info" : "SimpleName[8248-8256]:SimpleName[8248-8256]"
    }, {
      "left" : "final Object k",
      "right" : "final Object k",
      "info" : "SingleVariableDeclaration[8257-8271]:SingleVariableDeclaration[8257-8271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8273-8587]:Block[8273-8587]"
    }, {
      "left" : "final K key = castKey(k);",
      "right" : "final K key = castKey(k);",
      "info" : "VariableDeclarationStatement[8283-8308]:VariableDeclarationStatement[8283-8308]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[8317-8370]:IfStatement[8317-8370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8334-8370]:Block[8334-8370]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8348-8360]:ReturnStatement[8348-8360]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[8380-8423]:VariableDeclarationStatement[8380-8423]"
    }, {
      "left" : "final TrieEntry<K,V> entry = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K,V> entry = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[8432-8502]:VariableDeclarationStatement[8432-8502]"
    }, {
      "left" : "return !entry.isEmpty() && compareKeys(key, entry.key) ? entry : null;",
      "right" : "return !entry.isEmpty() && compareKeys(key, entry.key) ? entry : null;",
      "info" : "ReturnStatement[8511-8581]:ReturnStatement[8511-8581]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9248-9254]:Modifier[9248-9254]"
    }, {
      "left" : "Map.Entry<K, V>",
      "right" : "Map.Entry<K, V>",
      "info" : "ParameterizedType[9255-9270]:ParameterizedType[9255-9270]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[9271-9277]:SimpleName[9271-9277]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[9278-9289]:SingleVariableDeclaration[9278-9289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9291-9572]:Block[9291-9572]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[9301-9344]:VariableDeclarationStatement[9301-9344]"
    }, {
      "left" : "final Reference<Map.Entry<K, V>> reference = new Reference<Map.Entry<K,V>>();",
      "right" : "final Reference<Map.Entry<K, V>> reference = new Reference<Map.Entry<K,V>>();",
      "info" : "VariableDeclarationStatement[9353-9430]:VariableDeclarationStatement[9353-9430]"
    }, {
      "left" : "if (!selectR(root.left, -1, key, lengthInBits, reference))",
      "right" : "if (!selectR(root.left, -1, key, lengthInBits, reference))",
      "info" : "IfStatement[9439-9545]:IfStatement[9439-9545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9498-9545]:Block[9498-9545]"
    }, {
      "left" : "return reference.get();",
      "right" : "return reference.get();",
      "info" : "ReturnStatement[9512-9535]:ReturnStatement[9512-9535]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9554-9566]:ReturnStatement[9554-9566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10204-10210]:Modifier[10204-10210]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[10211-10212]:SimpleType[10211-10212]"
    }, {
      "left" : "selectKey",
      "right" : "selectKey",
      "info" : "SimpleName[10213-10222]:SimpleName[10213-10222]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[10223-10234]:SingleVariableDeclaration[10223-10234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10236-10389]:Block[10236-10389]"
    }, {
      "left" : "final Map.Entry<K, V> entry = select(key);",
      "right" : "final Map.Entry<K, V> entry = select(key);",
      "info" : "VariableDeclarationStatement[10246-10288]:VariableDeclarationStatement[10246-10288]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[10297-10352]:IfStatement[10297-10352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10316-10352]:Block[10316-10352]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10330-10342]:ReturnStatement[10330-10342]"
    }, {
      "left" : "return entry.getKey();",
      "right" : "return entry.getKey();",
      "info" : "ReturnStatement[10361-10383]:ReturnStatement[10361-10383]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11042-11048]:Modifier[11042-11048]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[11049-11050]:SimpleType[11049-11050]"
    }, {
      "left" : "selectValue",
      "right" : "selectValue",
      "info" : "SimpleName[11051-11062]:SimpleName[11051-11062]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[11063-11074]:SingleVariableDeclaration[11063-11074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11076-11231]:Block[11076-11231]"
    }, {
      "left" : "final Map.Entry<K, V> entry = select(key);",
      "right" : "final Map.Entry<K, V> entry = select(key);",
      "info" : "VariableDeclarationStatement[11086-11128]:VariableDeclarationStatement[11086-11128]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[11137-11192]:IfStatement[11137-11192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11156-11192]:Block[11156-11192]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11170-11182]:ReturnStatement[11170-11182]"
    }, {
      "left" : "return entry.getValue();",
      "right" : "return entry.getValue();",
      "info" : "ReturnStatement[11201-11225]:ReturnStatement[11201-11225]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11472-11479]:Modifier[11472-11479]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11480-11487]:PrimitiveType[11480-11487]"
    }, {
      "left" : "selectR",
      "right" : "selectR",
      "info" : "SimpleName[11488-11495]:SimpleName[11488-11495]"
    }, {
      "left" : "final TrieEntry<K, V> h",
      "right" : "final TrieEntry<K, V> h",
      "info" : "SingleVariableDeclaration[11496-11519]:SingleVariableDeclaration[11496-11519]"
    }, {
      "left" : "final int bitIndex",
      "right" : "final int bitIndex",
      "info" : "SingleVariableDeclaration[11521-11539]:SingleVariableDeclaration[11521-11539]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[11569-11580]:SingleVariableDeclaration[11569-11580]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[11582-11604]:SingleVariableDeclaration[11582-11604]"
    }, {
      "left" : "final Reference<Map.Entry<K, V>> reference",
      "right" : "final Reference<Map.Entry<K, V>> reference",
      "info" : "SingleVariableDeclaration[11634-11676]:SingleVariableDeclaration[11634-11676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11678-12463]:Block[11678-12463]"
    }, {
      "left" : "if (h.bitIndex <= bitIndex)",
      "right" : "if (h.bitIndex <= bitIndex)",
      "info" : "IfStatement[11689-12003]:IfStatement[11689-12003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-12003]:Block[11717-12003]"
    }, {
      "left" : "if (!h.isEmpty())",
      "right" : "if (!h.isEmpty())",
      "info" : "IfStatement[11871-11968]:IfStatement[11871-11968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11889-11968]:Block[11889-11968]"
    }, {
      "left" : "reference.set(h);",
      "right" : "reference.set(h);",
      "info" : "ExpressionStatement[11907-11924]:ExpressionStatement[11907-11924]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11941-11954]:ReturnStatement[11941-11954]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11981-11993]:ReturnStatement[11981-11993]"
    }, {
      "left" : "if (!isBitSet(key, h.bitIndex, lengthInBits))",
      "right" : "if (!isBitSet(key, h.bitIndex, lengthInBits))",
      "info" : "IfStatement[12013-12435]:IfStatement[12013-12435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12059-12244]:Block[12059-12244]"
    }, {
      "left" : "if (selectR(h.left, h.bitIndex, key, lengthInBits, reference))",
      "right" : "if (selectR(h.left, h.bitIndex, key, lengthInBits, reference))",
      "info" : "IfStatement[12073-12234]:IfStatement[12073-12234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12136-12234]:Block[12136-12234]"
    }, {
      "left" : "return selectR(h.right, h.bitIndex, key, lengthInBits, reference);",
      "right" : "return selectR(h.right, h.bitIndex, key, lengthInBits, reference);",
      "info" : "ReturnStatement[12154-12220]:ReturnStatement[12154-12220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12250-12435]:Block[12250-12435]"
    }, {
      "left" : "if (selectR(h.right, h.bitIndex, key, lengthInBits, reference))",
      "right" : "if (selectR(h.right, h.bitIndex, key, lengthInBits, reference))",
      "info" : "IfStatement[12264-12425]:IfStatement[12264-12425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12328-12425]:Block[12328-12425]"
    }, {
      "left" : "return selectR(h.left, h.bitIndex, key, lengthInBits, reference);",
      "right" : "return selectR(h.left, h.bitIndex, key, lengthInBits, reference);",
      "info" : "ReturnStatement[12346-12411]:ReturnStatement[12346-12411]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12444-12457]:ReturnStatement[12444-12457]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12469-12478]:MarkerAnnotation[12469-12478]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12483-12489]:Modifier[12483-12489]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12490-12497]:PrimitiveType[12490-12497]"
    }, {
      "left" : "containsKey",
      "right" : "containsKey",
      "info" : "SimpleName[12498-12509]:SimpleName[12498-12509]"
    }, {
      "left" : "final Object k",
      "right" : "final Object k",
      "info" : "SingleVariableDeclaration[12510-12524]:SingleVariableDeclaration[12510-12524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12526-12825]:Block[12526-12825]"
    }, {
      "left" : "if (k == null)",
      "right" : "if (k == null)",
      "info" : "IfStatement[12536-12588]:IfStatement[12536-12588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12551-12588]:Block[12551-12588]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12565-12578]:ReturnStatement[12565-12578]"
    }, {
      "left" : "final K key = castKey(k);",
      "right" : "final K key = castKey(k);",
      "info" : "VariableDeclarationStatement[12598-12623]:VariableDeclarationStatement[12598-12623]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[12632-12675]:VariableDeclarationStatement[12632-12675]"
    }, {
      "left" : "final TrieEntry<K, V> entry = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K, V> entry = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[12684-12755]:VariableDeclarationStatement[12684-12755]"
    }, {
      "left" : "return !entry.isEmpty() && compareKeys(key, entry.key);",
      "right" : "return !entry.isEmpty() && compareKeys(key, entry.key);",
      "info" : "ReturnStatement[12764-12819]:ReturnStatement[12764-12819]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12831-12840]:MarkerAnnotation[12831-12840]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12845-12851]:Modifier[12845-12851]"
    }, {
      "left" : "Set<Map.Entry<K,V>>",
      "right" : "Set<Map.Entry<K,V>>",
      "info" : "ParameterizedType[12852-12871]:ParameterizedType[12852-12871]"
    }, {
      "left" : "entrySet",
      "right" : "entrySet",
      "info" : "SimpleName[12872-12880]:SimpleName[12872-12880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12883-12996]:Block[12883-12996]"
    }, {
      "left" : "if (entrySet == null)",
      "right" : "if (entrySet == null)",
      "info" : "IfStatement[12893-12965]:IfStatement[12893-12965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12915-12965]:Block[12915-12965]"
    }, {
      "left" : "entrySet = new EntrySet();",
      "right" : "entrySet = new EntrySet();",
      "info" : "ExpressionStatement[12929-12955]:ExpressionStatement[12929-12955]"
    }, {
      "left" : "return entrySet;",
      "right" : "return entrySet;",
      "info" : "ReturnStatement[12974-12990]:ReturnStatement[12974-12990]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13002-13011]:MarkerAnnotation[13002-13011]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13016-13022]:Modifier[13016-13022]"
    }, {
      "left" : "Set<K>",
      "right" : "Set<K>",
      "info" : "ParameterizedType[13023-13029]:ParameterizedType[13023-13029]"
    }, {
      "left" : "keySet",
      "right" : "keySet",
      "info" : "SimpleName[13030-13036]:SimpleName[13030-13036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13039-13144]:Block[13039-13144]"
    }, {
      "left" : "if (keySet == null)",
      "right" : "if (keySet == null)",
      "info" : "IfStatement[13049-13115]:IfStatement[13049-13115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13069-13115]:Block[13069-13115]"
    }, {
      "left" : "keySet = new KeySet();",
      "right" : "keySet = new KeySet();",
      "info" : "ExpressionStatement[13083-13105]:ExpressionStatement[13083-13105]"
    }, {
      "left" : "return keySet;",
      "right" : "return keySet;",
      "info" : "ReturnStatement[13124-13138]:ReturnStatement[13124-13138]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13150-13159]:MarkerAnnotation[13150-13159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13164-13170]:Modifier[13164-13170]"
    }, {
      "left" : "Collection<V>",
      "right" : "Collection<V>",
      "info" : "ParameterizedType[13171-13184]:ParameterizedType[13171-13184]"
    }, {
      "left" : "values",
      "right" : "values",
      "info" : "SimpleName[13185-13191]:SimpleName[13185-13191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13194-13299]:Block[13194-13299]"
    }, {
      "left" : "if (values == null)",
      "right" : "if (values == null)",
      "info" : "IfStatement[13204-13270]:IfStatement[13204-13270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13224-13270]:Block[13224-13270]"
    }, {
      "left" : "values = new Values();",
      "right" : "values = new Values();",
      "info" : "ExpressionStatement[13238-13260]:ExpressionStatement[13238-13260]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[13279-13293]:ReturnStatement[13279-13293]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13426-13435]:MarkerAnnotation[13426-13435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13440-13446]:Modifier[13440-13446]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[13447-13448]:SimpleType[13447-13448]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[13449-13455]:SimpleName[13449-13455]"
    }, {
      "left" : "final Object k",
      "right" : "final Object k",
      "info" : "SingleVariableDeclaration[13456-13470]:SingleVariableDeclaration[13456-13470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13472-14191]:Block[13472-14191]"
    }, {
      "left" : "if (k == null)",
      "right" : "if (k == null)",
      "info" : "IfStatement[13482-13533]:IfStatement[13482-13533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13497-13533]:Block[13497-13533]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13511-13523]:ReturnStatement[13511-13523]"
    }, {
      "left" : "final K key = castKey(k);",
      "right" : "final K key = castKey(k);",
      "info" : "VariableDeclarationStatement[13543-13568]:VariableDeclarationStatement[13543-13568]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[13577-13620]:VariableDeclarationStatement[13577-13620]"
    }, {
      "left" : "TrieEntry<K, V> current = root.left;",
      "right" : "TrieEntry<K, V> current = root.left;",
      "info" : "VariableDeclarationStatement[13629-13665]:VariableDeclarationStatement[13629-13665]"
    }, {
      "left" : "TrieEntry<K, V> path = root;",
      "right" : "TrieEntry<K, V> path = root;",
      "info" : "VariableDeclarationStatement[13674-13702]:VariableDeclarationStatement[13674-13702]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[13711-14185]:WhileStatement[13711-14185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13724-14185]:Block[13724-14185]"
    }, {
      "left" : "if (current.bitIndex <= path.bitIndex)",
      "right" : "if (current.bitIndex <= path.bitIndex)",
      "info" : "IfStatement[13738-13963]:IfStatement[13738-13963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13777-13963]:Block[13777-13963]"
    }, {
      "left" : "if (!current.isEmpty() && compareKeys(key, current.key))",
      "right" : "if (!current.isEmpty() && compareKeys(key, current.key))",
      "info" : "IfStatement[13795-13920]:IfStatement[13795-13920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13852-13920]:Block[13852-13920]"
    }, {
      "left" : "return removeEntry(current);",
      "right" : "return removeEntry(current);",
      "info" : "ReturnStatement[13874-13902]:ReturnStatement[13874-13902]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13937-13949]:ReturnStatement[13937-13949]"
    }, {
      "left" : "path = current;",
      "right" : "path = current;",
      "info" : "ExpressionStatement[13977-13992]:ExpressionStatement[13977-13992]"
    }, {
      "left" : "if (!isBitSet(key, current.bitIndex, lengthInBits))",
      "right" : "if (!isBitSet(key, current.bitIndex, lengthInBits))",
      "info" : "IfStatement[14006-14175]:IfStatement[14006-14175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14058-14113]:Block[14058-14113]"
    }, {
      "left" : "current = current.left;",
      "right" : "current = current.left;",
      "info" : "ExpressionStatement[14076-14099]:ExpressionStatement[14076-14099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14119-14175]:Block[14119-14175]"
    }, {
      "left" : "current = current.right;",
      "right" : "current = current.right;",
      "info" : "ExpressionStatement[14137-14161]:ExpressionStatement[14137-14161]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[14563-14578]:ParameterizedType[14563-14578]"
    }, {
      "left" : "getNearestEntryForKey",
      "right" : "getNearestEntryForKey",
      "info" : "SimpleName[14579-14600]:SimpleName[14579-14600]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[14601-14612]:SingleVariableDeclaration[14601-14612]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[14614-14636]:SingleVariableDeclaration[14614-14636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14638-15069]:Block[14638-15069]"
    }, {
      "left" : "TrieEntry<K, V> current = root.left;",
      "right" : "TrieEntry<K, V> current = root.left;",
      "info" : "VariableDeclarationStatement[14648-14684]:VariableDeclarationStatement[14648-14684]"
    }, {
      "left" : "TrieEntry<K, V> path = root;",
      "right" : "TrieEntry<K, V> path = root;",
      "info" : "VariableDeclarationStatement[14693-14721]:VariableDeclarationStatement[14693-14721]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[14730-15063]:WhileStatement[14730-15063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14742-15063]:Block[14742-15063]"
    }, {
      "left" : "if (current.bitIndex <= path.bitIndex)",
      "right" : "if (current.bitIndex <= path.bitIndex)",
      "info" : "IfStatement[14756-14842]:IfStatement[14756-14842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14795-14842]:Block[14795-14842]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[14813-14828]:ReturnStatement[14813-14828]"
    }, {
      "left" : "path = current;",
      "right" : "path = current;",
      "info" : "ExpressionStatement[14856-14871]:ExpressionStatement[14856-14871]"
    }, {
      "left" : "if (!isBitSet(key, current.bitIndex, lengthInBits))",
      "right" : "if (!isBitSet(key, current.bitIndex, lengthInBits))",
      "info" : "IfStatement[14884-15053]:IfStatement[14884-15053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14936-14991]:Block[14936-14991]"
    }, {
      "left" : "current = current.left;",
      "right" : "current = current.left;",
      "info" : "ExpressionStatement[14954-14977]:ExpressionStatement[14954-14977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14997-15053]:Block[14997-15053]"
    }, {
      "left" : "current = current.right;",
      "right" : "current = current.right;",
      "info" : "ExpressionStatement[15015-15039]:ExpressionStatement[15015-15039]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[15288-15289]:SimpleType[15288-15289]"
    }, {
      "left" : "removeEntry",
      "right" : "removeEntry",
      "info" : "SimpleName[15290-15301]:SimpleName[15290-15301]"
    }, {
      "left" : "final TrieEntry<K, V> h",
      "right" : "final TrieEntry<K, V> h",
      "info" : "SingleVariableDeclaration[15302-15325]:SingleVariableDeclaration[15302-15325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15327-15590]:Block[15327-15590]"
    }, {
      "left" : "if (h != root)",
      "right" : "if (h != root)",
      "info" : "IfStatement[15337-15516]:IfStatement[15337-15516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15352-15516]:Block[15352-15516]"
    }, {
      "left" : "if (h.isInternalNode())",
      "right" : "if (h.isInternalNode())",
      "info" : "IfStatement[15366-15506]:IfStatement[15366-15506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15390-15445]:Block[15390-15445]"
    }, {
      "left" : "removeInternalEntry(h);",
      "right" : "removeInternalEntry(h);",
      "info" : "ExpressionStatement[15408-15431]:ExpressionStatement[15408-15431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15451-15506]:Block[15451-15506]"
    }, {
      "left" : "removeExternalEntry(h);",
      "right" : "removeExternalEntry(h);",
      "info" : "ExpressionStatement[15469-15492]:ExpressionStatement[15469-15492]"
    }, {
      "left" : "decrementSize();",
      "right" : "decrementSize();",
      "info" : "ExpressionStatement[15526-15542]:ExpressionStatement[15526-15542]"
    }, {
      "left" : "return h.setKeyValue(null, null);",
      "right" : "return h.setKeyValue(null, null);",
      "info" : "ReturnStatement[15551-15584]:ReturnStatement[15551-15584]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15776-15783]:Modifier[15776-15783]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15784-15788]:PrimitiveType[15784-15788]"
    }, {
      "left" : "removeExternalEntry",
      "right" : "removeExternalEntry",
      "info" : "SimpleName[15789-15808]:SimpleName[15789-15808]"
    }, {
      "left" : "final TrieEntry<K, V> h",
      "right" : "final TrieEntry<K, V> h",
      "info" : "SingleVariableDeclaration[15809-15832]:SingleVariableDeclaration[15809-15832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15834-16550]:Block[15834-16550]"
    }, {
      "left" : "if (h == root)",
      "right" : "if (h == root)",
      "info" : "IfStatement[15844-16071]:IfStatement[15844-16071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15859-15947]:Block[15859-15947]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Cannot delete root Entry!\");",
      "right" : "throw new IllegalArgumentException(\"Cannot delete root Entry!\");",
      "info" : "ThrowStatement[15873-15937]:ThrowStatement[15873-15937]"
    }, {
      "left" : "if (!h.isExternalNode())",
      "right" : "if (!h.isExternalNode())",
      "info" : "IfStatement[15953-16071]:IfStatement[15953-16071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15978-16071]:Block[15978-16071]"
    }, {
      "left" : "throw new IllegalArgumentException(h + \" is not an external Entry!\");",
      "right" : "throw new IllegalArgumentException(h + \" is not an external Entry!\");",
      "info" : "ThrowStatement[15992-16061]:ThrowStatement[15992-16061]"
    }, {
      "left" : "final TrieEntry<K, V> parent = h.parent;",
      "right" : "final TrieEntry<K, V> parent = h.parent;",
      "info" : "VariableDeclarationStatement[16081-16121]:VariableDeclarationStatement[16081-16121]"
    }, {
      "left" : "final TrieEntry<K, V> child = h.left == h ? h.right : h.left;",
      "right" : "final TrieEntry<K, V> child = h.left == h ? h.right : h.left;",
      "info" : "VariableDeclarationStatement[16130-16191]:VariableDeclarationStatement[16130-16191]"
    }, {
      "left" : "if (parent.left == h)",
      "right" : "if (parent.left == h)",
      "info" : "IfStatement[16201-16318]:IfStatement[16201-16318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16223-16267]:Block[16223-16267]"
    }, {
      "left" : "parent.left = child;",
      "right" : "parent.left = child;",
      "info" : "ExpressionStatement[16237-16257]:ExpressionStatement[16237-16257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16273-16318]:Block[16273-16318]"
    }, {
      "left" : "parent.right = child;",
      "right" : "parent.right = child;",
      "info" : "ExpressionStatement[16287-16308]:ExpressionStatement[16287-16308]"
    }, {
      "left" : "if (child.bitIndex > parent.bitIndex)",
      "right" : "if (child.bitIndex > parent.bitIndex)",
      "info" : "IfStatement[16402-16543]:IfStatement[16402-16543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16440-16486]:Block[16440-16486]"
    }, {
      "left" : "child.parent = parent;",
      "right" : "child.parent = parent;",
      "info" : "ExpressionStatement[16454-16476]:ExpressionStatement[16454-16476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16492-16543]:Block[16492-16543]"
    }, {
      "left" : "child.predecessor = parent;",
      "right" : "child.predecessor = parent;",
      "info" : "ExpressionStatement[16506-16533]:ExpressionStatement[16506-16533]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16831-16838]:Modifier[16831-16838]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16839-16843]:PrimitiveType[16839-16843]"
    }, {
      "left" : "removeInternalEntry",
      "right" : "removeInternalEntry",
      "info" : "SimpleName[16844-16863]:SimpleName[16844-16863]"
    }, {
      "left" : "final TrieEntry<K, V> h",
      "right" : "final TrieEntry<K, V> h",
      "info" : "SingleVariableDeclaration[16864-16887]:SingleVariableDeclaration[16864-16887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16889-19074]:Block[16889-19074]"
    }, {
      "left" : "if (h == root)",
      "right" : "if (h == root)",
      "info" : "IfStatement[16899-17126]:IfStatement[16899-17126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16914-17002]:Block[16914-17002]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Cannot delete root Entry!\");",
      "right" : "throw new IllegalArgumentException(\"Cannot delete root Entry!\");",
      "info" : "ThrowStatement[16928-16992]:ThrowStatement[16928-16992]"
    }, {
      "left" : "if (!h.isInternalNode())",
      "right" : "if (!h.isInternalNode())",
      "info" : "IfStatement[17008-17126]:IfStatement[17008-17126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17033-17126]:Block[17033-17126]"
    }, {
      "left" : "throw new IllegalArgumentException(h + \" is not an internal Entry!\");",
      "right" : "throw new IllegalArgumentException(h + \" is not an internal Entry!\");",
      "info" : "ThrowStatement[17047-17116]:ThrowStatement[17047-17116]"
    }, {
      "left" : "final TrieEntry<K, V> p = h.predecessor;",
      "right" : "final TrieEntry<K, V> p = h.predecessor;",
      "info" : "VariableDeclarationStatement[17136-17176]:VariableDeclarationStatement[17136-17176]"
    }, {
      "left" : "p.bitIndex = h.bitIndex;",
      "right" : "p.bitIndex = h.bitIndex;",
      "info" : "ExpressionStatement[17214-17238]:ExpressionStatement[17214-17238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17303-18118]:Block[17303-18118]"
    }, {
      "left" : "final TrieEntry<K, V> parent = p.parent;",
      "right" : "final TrieEntry<K, V> parent = p.parent;",
      "info" : "VariableDeclarationStatement[17317-17357]:VariableDeclarationStatement[17317-17357]"
    }, {
      "left" : "final TrieEntry<K, V> child = p.left == h ? p.right : p.left;",
      "right" : "final TrieEntry<K, V> child = p.left == h ? p.right : p.left;",
      "info" : "VariableDeclarationStatement[17370-17431]:VariableDeclarationStatement[17370-17431]"
    }, {
      "left" : "if (p.predecessor == p && p.parent != h)",
      "right" : "if (p.predecessor == p && p.parent != h)",
      "info" : "IfStatement[17757-17855]:IfStatement[17757-17855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17798-17855]:Block[17798-17855]"
    }, {
      "left" : "p.predecessor = p.parent;",
      "right" : "p.predecessor = p.parent;",
      "info" : "ExpressionStatement[17816-17841]:ExpressionStatement[17816-17841]"
    }, {
      "left" : "if (parent.left == p)",
      "right" : "if (parent.left == p)",
      "info" : "IfStatement[17869-18002]:IfStatement[17869-18002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17891-17943]:Block[17891-17943]"
    }, {
      "left" : "parent.left = child;",
      "right" : "parent.left = child;",
      "info" : "ExpressionStatement[17909-17929]:ExpressionStatement[17909-17929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17949-18002]:Block[17949-18002]"
    }, {
      "left" : "parent.right = child;",
      "right" : "parent.right = child;",
      "info" : "ExpressionStatement[17967-17988]:ExpressionStatement[17967-17988]"
    }, {
      "left" : "if (child.bitIndex > parent.bitIndex)",
      "right" : "if (child.bitIndex > parent.bitIndex)",
      "info" : "IfStatement[18016-18108]:IfStatement[18016-18108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18054-18108]:Block[18054-18108]"
    }, {
      "left" : "child.parent = parent;",
      "right" : "child.parent = parent;",
      "info" : "ExpressionStatement[18072-18094]:ExpressionStatement[18072-18094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18170-18633]:Block[18170-18633]"
    }, {
      "left" : "if (h.left.parent == h)",
      "right" : "if (h.left.parent == h)",
      "info" : "IfStatement[18281-18355]:IfStatement[18281-18355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18305-18355]:Block[18305-18355]"
    }, {
      "left" : "h.left.parent = p;",
      "right" : "h.left.parent = p;",
      "info" : "ExpressionStatement[18323-18341]:ExpressionStatement[18323-18341]"
    }, {
      "left" : "if (h.right.parent == h)",
      "right" : "if (h.right.parent == h)",
      "info" : "IfStatement[18369-18445]:IfStatement[18369-18445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18394-18445]:Block[18394-18445]"
    }, {
      "left" : "h.right.parent = p;",
      "right" : "h.right.parent = p;",
      "info" : "ExpressionStatement[18412-18431]:ExpressionStatement[18412-18431]"
    }, {
      "left" : "if (h.parent.left == h)",
      "right" : "if (h.parent.left == h)",
      "info" : "IfStatement[18492-18623]:IfStatement[18492-18623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18516-18566]:Block[18516-18566]"
    }, {
      "left" : "h.parent.left = p;",
      "right" : "h.parent.left = p;",
      "info" : "ExpressionStatement[18534-18552]:ExpressionStatement[18534-18552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18572-18623]:Block[18572-18623]"
    }, {
      "left" : "h.parent.right = p;",
      "right" : "h.parent.right = p;",
      "info" : "ExpressionStatement[18590-18609]:ExpressionStatement[18590-18609]"
    }, {
      "left" : "p.parent = h.parent;",
      "right" : "p.parent = h.parent;",
      "info" : "ExpressionStatement[18727-18747]:ExpressionStatement[18727-18747]"
    }, {
      "left" : "p.left = h.left;",
      "right" : "p.left = h.left;",
      "info" : "ExpressionStatement[18756-18772]:ExpressionStatement[18756-18772]"
    }, {
      "left" : "p.right = h.right;",
      "right" : "p.right = h.right;",
      "info" : "ExpressionStatement[18781-18799]:ExpressionStatement[18781-18799]"
    }, {
      "left" : "if (isValidUplink(p.left, p))",
      "right" : "if (isValidUplink(p.left, p))",
      "info" : "IfStatement[18902-18979]:IfStatement[18902-18979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18932-18979]:Block[18932-18979]"
    }, {
      "left" : "p.left.predecessor = p;",
      "right" : "p.left.predecessor = p;",
      "info" : "ExpressionStatement[18946-18969]:ExpressionStatement[18946-18969]"
    }, {
      "left" : "if (isValidUplink(p.right, p))",
      "right" : "if (isValidUplink(p.right, p))",
      "info" : "IfStatement[18989-19068]:IfStatement[18989-19068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19020-19068]:Block[19020-19068]"
    }, {
      "left" : "p.right.predecessor = p;",
      "right" : "p.right.predecessor = p;",
      "info" : "ExpressionStatement[19034-19058]:ExpressionStatement[19034-19058]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[19221-19236]:ParameterizedType[19221-19236]"
    }, {
      "left" : "nextEntry",
      "right" : "nextEntry",
      "info" : "SimpleName[19237-19246]:SimpleName[19237-19246]"
    }, {
      "left" : "final TrieEntry<K, V> node",
      "right" : "final TrieEntry<K, V> node",
      "info" : "SingleVariableDeclaration[19247-19273]:SingleVariableDeclaration[19247-19273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19275-19413]:Block[19275-19413]"
    }, {
      "left" : "if (node == null)",
      "right" : "if (node == null)",
      "info" : "IfStatement[19285-19347]:IfStatement[19285-19347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19303-19347]:Block[19303-19347]"
    }, {
      "left" : "return firstEntry();",
      "right" : "return firstEntry();",
      "info" : "ReturnStatement[19317-19337]:ReturnStatement[19317-19337]"
    }, {
      "left" : "return nextEntryImpl(node.predecessor, node, null);",
      "right" : "return nextEntryImpl(node.predecessor, node, null);",
      "info" : "ReturnStatement[19356-19407]:ReturnStatement[19356-19407]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[20907-20922]:ParameterizedType[20907-20922]"
    }, {
      "left" : "nextEntryImpl",
      "right" : "nextEntryImpl",
      "info" : "SimpleName[20923-20936]:SimpleName[20923-20936]"
    }, {
      "left" : "final TrieEntry<K, V> start",
      "right" : "final TrieEntry<K, V> start",
      "info" : "SingleVariableDeclaration[20937-20964]:SingleVariableDeclaration[20937-20964]"
    }, {
      "left" : "final TrieEntry<K, V> previous",
      "right" : "final TrieEntry<K, V> previous",
      "info" : "SingleVariableDeclaration[20978-21008]:SingleVariableDeclaration[20978-21008]"
    }, {
      "left" : "final TrieEntry<K, V> tree",
      "right" : "final TrieEntry<K, V> tree",
      "info" : "SingleVariableDeclaration[21010-21036]:SingleVariableDeclaration[21010-21036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21038-23815]:Block[21038-23815]"
    }, {
      "left" : "TrieEntry<K, V> current = start;",
      "right" : "TrieEntry<K, V> current = start;",
      "info" : "VariableDeclarationStatement[21049-21081]:VariableDeclarationStatement[21049-21081]"
    }, {
      "left" : "if (previous == null || start != previous.predecessor)",
      "right" : "if (previous == null || start != previous.predecessor)",
      "info" : "IfStatement[21242-21725]:IfStatement[21242-21725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21297-21725]:Block[21297-21725]"
    }, {
      "left" : "while (!current.left.isEmpty())",
      "right" : "while (!current.left.isEmpty())",
      "info" : "WhileStatement[21311-21715]:WhileStatement[21311-21715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21343-21715]:Block[21343-21715]"
    }, {
      "left" : "if (previous == current.left)",
      "right" : "if (previous == current.left)",
      "info" : "IfStatement[21464-21540]:IfStatement[21464-21540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21494-21540]:Block[21494-21540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21516-21522]:BreakStatement[21516-21522]"
    }, {
      "left" : "if (isValidUplink(current.left, current))",
      "right" : "if (isValidUplink(current.left, current))",
      "info" : "IfStatement[21558-21660]:IfStatement[21558-21660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21600-21660]:Block[21600-21660]"
    }, {
      "left" : "return current.left;",
      "right" : "return current.left;",
      "info" : "ReturnStatement[21622-21642]:ReturnStatement[21622-21642]"
    }, {
      "left" : "current = current.left;",
      "right" : "current = current.left;",
      "info" : "ExpressionStatement[21678-21701]:ExpressionStatement[21678-21701]"
    }, {
      "left" : "if (current.isEmpty())",
      "right" : "if (current.isEmpty())",
      "info" : "IfStatement[21779-21838]:IfStatement[21779-21838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21802-21838]:Block[21802-21838]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21816-21828]:ReturnStatement[21816-21828]"
    }, {
      "left" : "if (current.right == null)",
      "right" : "if (current.right == null)",
      "info" : "IfStatement[22132-22195]:IfStatement[22132-22195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22159-22195]:Block[22159-22195]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22173-22185]:ReturnStatement[22173-22185]"
    }, {
      "left" : "if (previous != current.right)",
      "right" : "if (previous != current.right)",
      "info" : "IfStatement[22261-22602]:IfStatement[22261-22602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22292-22602]:Block[22292-22602]"
    }, {
      "left" : "if (isValidUplink(current.right, current))",
      "right" : "if (isValidUplink(current.right, current))",
      "info" : "IfStatement[22353-22449]:IfStatement[22353-22449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22396-22449]:Block[22396-22449]"
    }, {
      "left" : "return current.right;",
      "right" : "return current.right;",
      "info" : "ReturnStatement[22414-22435]:ReturnStatement[22414-22435]"
    }, {
      "left" : "return nextEntryImpl(current.right, previous, tree);",
      "right" : "return nextEntryImpl(current.right, previous, tree);",
      "info" : "ReturnStatement[22540-22592]:ReturnStatement[22540-22592]"
    }, {
      "left" : "while (current == current.parent.right)",
      "right" : "while (current == current.parent.right)",
      "info" : "WhileStatement[22745-22983]:WhileStatement[22745-22983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22785-22983]:Block[22785-22983]"
    }, {
      "left" : "if (current == tree)",
      "right" : "if (current == tree)",
      "info" : "IfStatement[22869-22934]:IfStatement[22869-22934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22890-22934]:Block[22890-22934]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22908-22920]:ReturnStatement[22908-22920]"
    }, {
      "left" : "current = current.parent;",
      "right" : "current = current.parent;",
      "info" : "ExpressionStatement[22948-22973]:ExpressionStatement[22948-22973]"
    }, {
      "left" : "if (current == tree)",
      "right" : "if (current == tree)",
      "info" : "IfStatement[23064-23121]:IfStatement[23064-23121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23085-23121]:Block[23085-23121]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23099-23111]:ReturnStatement[23099-23111]"
    }, {
      "left" : "if (current.parent.right == null)",
      "right" : "if (current.parent.right == null)",
      "info" : "IfStatement[23203-23273]:IfStatement[23203-23273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23237-23273]:Block[23237-23273]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23251-23263]:ReturnStatement[23251-23263]"
    }, {
      "left" : "if (previous != current.parent.right\n                && isValidUplink(current.parent.right, current.parent))",
      "right" : "if (previous != current.parent.right\n                && isValidUplink(current.parent.right, current.parent))",
      "info" : "IfStatement[23351-23512]:IfStatement[23351-23512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23460-23512]:Block[23460-23512]"
    }, {
      "left" : "return current.parent.right;",
      "right" : "return current.parent.right;",
      "info" : "ReturnStatement[23474-23502]:ReturnStatement[23474-23502]"
    }, {
      "left" : "if (current.parent.right == current.parent)",
      "right" : "if (current.parent.right == current.parent)",
      "info" : "IfStatement[23597-23677]:IfStatement[23597-23677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23641-23677]:Block[23641-23677]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23655-23667]:ReturnStatement[23655-23667]"
    }, {
      "left" : "return nextEntryImpl(current.parent.right, previous, tree);",
      "right" : "return nextEntryImpl(current.parent.right, previous, tree);",
      "info" : "ReturnStatement[23750-23809]:ReturnStatement[23750-23809]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[24035-24050]:ParameterizedType[24035-24050]"
    }, {
      "left" : "firstEntry",
      "right" : "firstEntry",
      "info" : "SimpleName[24051-24061]:SimpleName[24051-24061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24064-24209]:Block[24064-24209]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[24118-24169]:IfStatement[24118-24169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24133-24169]:Block[24133-24169]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24147-24159]:ReturnStatement[24147-24159]"
    }, {
      "left" : "return followLeft(root);",
      "right" : "return followLeft(root);",
      "info" : "ReturnStatement[24179-24203]:ReturnStatement[24179-24203]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[24294-24309]:ParameterizedType[24294-24309]"
    }, {
      "left" : "followLeft",
      "right" : "followLeft",
      "info" : "SimpleName[24310-24320]:SimpleName[24310-24320]"
    }, {
      "left" : "TrieEntry<K, V> node",
      "right" : "TrieEntry<K, V> node",
      "info" : "SingleVariableDeclaration[24321-24341]:SingleVariableDeclaration[24321-24341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24343-24712]:Block[24343-24712]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[24353-24706]:WhileStatement[24353-24706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24365-24706]:Block[24365-24706]"
    }, {
      "left" : "TrieEntry<K, V> child = node.left;",
      "right" : "TrieEntry<K, V> child = node.left;",
      "info" : "VariableDeclarationStatement[24379-24413]:VariableDeclarationStatement[24379-24413]"
    }, {
      "left" : "if (child.isEmpty())",
      "right" : "if (child.isEmpty())",
      "info" : "IfStatement[24501-24573]:IfStatement[24501-24573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24522-24573]:Block[24522-24573]"
    }, {
      "left" : "child = node.right;",
      "right" : "child = node.right;",
      "info" : "ExpressionStatement[24540-24559]:ExpressionStatement[24540-24559]"
    }, {
      "left" : "if (child.bitIndex <= node.bitIndex)",
      "right" : "if (child.bitIndex <= node.bitIndex)",
      "info" : "IfStatement[24587-24669]:IfStatement[24587-24669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24624-24669]:Block[24624-24669]"
    }, {
      "left" : "return child;",
      "right" : "return child;",
      "info" : "ReturnStatement[24642-24655]:ReturnStatement[24642-24655]"
    }, {
      "left" : "node = child;",
      "right" : "node = child;",
      "info" : "ExpressionStatement[24683-24696]:ExpressionStatement[24683-24696]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24797-24806]:MarkerAnnotation[24797-24806]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24811-24817]:Modifier[24811-24817]"
    }, {
      "left" : "Comparator<? super K>",
      "right" : "Comparator<? super K>",
      "info" : "ParameterizedType[24818-24839]:ParameterizedType[24818-24839]"
    }, {
      "left" : "comparator",
      "right" : "comparator",
      "info" : "SimpleName[24840-24850]:SimpleName[24840-24850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24853-24893]:Block[24853-24893]"
    }, {
      "left" : "return getKeyAnalyzer();",
      "right" : "return getKeyAnalyzer();",
      "info" : "ReturnStatement[24863-24887]:ReturnStatement[24863-24887]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24899-24908]:MarkerAnnotation[24899-24908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24913-24919]:Modifier[24913-24919]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[24920-24921]:SimpleType[24920-24921]"
    }, {
      "left" : "firstKey",
      "right" : "firstKey",
      "info" : "SimpleName[24922-24930]:SimpleName[24922-24930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24933-25063]:Block[24933-25063]"
    }, {
      "left" : "if (size() == 0)",
      "right" : "if (size() == 0)",
      "info" : "IfStatement[24943-25019]:IfStatement[24943-25019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24960-25019]:Block[24960-25019]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[24974-25009]:ThrowStatement[24974-25009]"
    }, {
      "left" : "return firstEntry().getKey();",
      "right" : "return firstEntry().getKey();",
      "info" : "ReturnStatement[25028-25057]:ReturnStatement[25028-25057]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25069-25078]:MarkerAnnotation[25069-25078]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25083-25089]:Modifier[25083-25089]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[25090-25091]:SimpleType[25090-25091]"
    }, {
      "left" : "lastKey",
      "right" : "lastKey",
      "info" : "SimpleName[25092-25099]:SimpleName[25092-25099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25102-25278]:Block[25102-25278]"
    }, {
      "left" : "final TrieEntry<K, V> entry = lastEntry();",
      "right" : "final TrieEntry<K, V> entry = lastEntry();",
      "info" : "VariableDeclarationStatement[25112-25154]:VariableDeclarationStatement[25112-25154]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[25163-25228]:IfStatement[25163-25228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25182-25228]:Block[25182-25228]"
    }, {
      "left" : "return entry.getKey();",
      "right" : "return entry.getKey();",
      "info" : "ReturnStatement[25196-25218]:ReturnStatement[25196-25218]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[25237-25272]:ThrowStatement[25237-25272]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25284-25293]:MarkerAnnotation[25284-25293]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25298-25304]:Modifier[25298-25304]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[25305-25306]:SimpleType[25305-25306]"
    }, {
      "left" : "nextKey",
      "right" : "nextKey",
      "info" : "SimpleName[25307-25314]:SimpleName[25307-25314]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[25315-25326]:SingleVariableDeclaration[25315-25326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25328-25661]:Block[25328-25661]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[25338-25412]:IfStatement[25338-25412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25355-25412]:Block[25355-25412]"
    }, {
      "left" : "throw new NullPointerException();",
      "right" : "throw new NullPointerException();",
      "info" : "ThrowStatement[25369-25402]:ThrowStatement[25369-25402]"
    }, {
      "left" : "final TrieEntry<K, V> entry = getEntry(key);",
      "right" : "final TrieEntry<K, V> entry = getEntry(key);",
      "info" : "VariableDeclarationStatement[25421-25465]:VariableDeclarationStatement[25421-25465]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[25474-25634]:IfStatement[25474-25634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25493-25634]:Block[25493-25634]"
    }, {
      "left" : "final TrieEntry<K, V> nextEntry = nextEntry(entry);",
      "right" : "final TrieEntry<K, V> nextEntry = nextEntry(entry);",
      "info" : "VariableDeclarationStatement[25507-25558]:VariableDeclarationStatement[25507-25558]"
    }, {
      "left" : "return nextEntry != null ? nextEntry.getKey() : null;",
      "right" : "return nextEntry != null ? nextEntry.getKey() : null;",
      "info" : "ReturnStatement[25571-25624]:ReturnStatement[25571-25624]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25643-25655]:ReturnStatement[25643-25655]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25667-25676]:MarkerAnnotation[25667-25676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25681-25687]:Modifier[25681-25687]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[25688-25689]:SimpleType[25688-25689]"
    }, {
      "left" : "previousKey",
      "right" : "previousKey",
      "info" : "SimpleName[25690-25701]:SimpleName[25690-25701]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[25702-25713]:SingleVariableDeclaration[25702-25713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25715-26052]:Block[25715-26052]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[25725-25799]:IfStatement[25725-25799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25742-25799]:Block[25742-25799]"
    }, {
      "left" : "throw new NullPointerException();",
      "right" : "throw new NullPointerException();",
      "info" : "ThrowStatement[25756-25789]:ThrowStatement[25756-25789]"
    }, {
      "left" : "final TrieEntry<K, V> entry = getEntry(key);",
      "right" : "final TrieEntry<K, V> entry = getEntry(key);",
      "info" : "VariableDeclarationStatement[25808-25852]:VariableDeclarationStatement[25808-25852]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[25861-26025]:IfStatement[25861-26025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25880-26025]:Block[25880-26025]"
    }, {
      "left" : "final TrieEntry<K, V> prevEntry = previousEntry(entry);",
      "right" : "final TrieEntry<K, V> prevEntry = previousEntry(entry);",
      "info" : "VariableDeclarationStatement[25894-25949]:VariableDeclarationStatement[25894-25949]"
    }, {
      "left" : "return prevEntry != null ? prevEntry.getKey() : null;",
      "right" : "return prevEntry != null ? prevEntry.getKey() : null;",
      "info" : "ReturnStatement[25962-26015]:ReturnStatement[25962-26015]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26034-26046]:ReturnStatement[26034-26046]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26058-26067]:MarkerAnnotation[26058-26067]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26072-26078]:Modifier[26072-26078]"
    }, {
      "left" : "OrderedMapIterator<K, V>",
      "right" : "OrderedMapIterator<K, V>",
      "info" : "ParameterizedType[26079-26103]:ParameterizedType[26079-26103]"
    }, {
      "left" : "mapIterator",
      "right" : "mapIterator",
      "info" : "SimpleName[26104-26115]:SimpleName[26104-26115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26118-26163]:Block[26118-26163]"
    }, {
      "left" : "return new TrieMapIterator();",
      "right" : "return new TrieMapIterator();",
      "info" : "ReturnStatement[26128-26157]:ReturnStatement[26128-26157]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26169-26178]:MarkerAnnotation[26169-26178]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26183-26189]:Modifier[26183-26189]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[26190-26205]:ParameterizedType[26190-26205]"
    }, {
      "left" : "prefixMap",
      "right" : "prefixMap",
      "info" : "SimpleName[26206-26215]:SimpleName[26206-26215]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[26216-26227]:SingleVariableDeclaration[26216-26227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26229-26298]:Block[26229-26298]"
    }, {
      "left" : "return getPrefixMapByBits(key, 0, lengthInBits(key));",
      "right" : "return getPrefixMapByBits(key, 0, lengthInBits(key));",
      "info" : "ReturnStatement[26239-26292]:ReturnStatement[26239-26292]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27464-27471]:Modifier[27464-27471]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[27472-27487]:ParameterizedType[27472-27487]"
    }, {
      "left" : "getPrefixMapByBits",
      "right" : "getPrefixMapByBits",
      "info" : "SimpleName[27488-27506]:SimpleName[27488-27506]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[27507-27518]:SingleVariableDeclaration[27507-27518]"
    }, {
      "left" : "final int offsetInBits",
      "right" : "final int offsetInBits",
      "info" : "SingleVariableDeclaration[27520-27542]:SingleVariableDeclaration[27520-27542]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[27544-27566]:SingleVariableDeclaration[27544-27566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27568-27967]:Block[27568-27967]"
    }, {
      "left" : "final int offsetLength = offsetInBits + lengthInBits;",
      "right" : "final int offsetLength = offsetInBits + lengthInBits;",
      "info" : "VariableDeclarationStatement[27579-27632]:VariableDeclarationStatement[27579-27632]"
    }, {
      "left" : "if (offsetLength > lengthInBits(key))",
      "right" : "if (offsetLength > lengthInBits(key))",
      "info" : "IfStatement[27641-27823]:IfStatement[27641-27823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27679-27823]:Block[27679-27823]"
    }, {
      "left" : "throw new IllegalArgumentException(offsetInBits + \" + \"\n                    + lengthInBits + \" > \" + lengthInBits(key));",
      "right" : "throw new IllegalArgumentException(offsetInBits + \" + \"\n                    + lengthInBits + \" > \" + lengthInBits(key));",
      "info" : "ThrowStatement[27693-27813]:ThrowStatement[27693-27813]"
    }, {
      "left" : "if (offsetLength == 0)",
      "right" : "if (offsetLength == 0)",
      "info" : "IfStatement[27833-27892]:IfStatement[27833-27892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27856-27892]:Block[27856-27892]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[27870-27882]:ReturnStatement[27870-27882]"
    }, {
      "left" : "return new PrefixRangeMap(key, offsetInBits, lengthInBits);",
      "right" : "return new PrefixRangeMap(key, offsetInBits, lengthInBits);",
      "info" : "ReturnStatement[27902-27961]:ReturnStatement[27902-27961]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27973-27982]:MarkerAnnotation[27973-27982]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27987-27993]:Modifier[27987-27993]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[27994-28009]:ParameterizedType[27994-28009]"
    }, {
      "left" : "headMap",
      "right" : "headMap",
      "info" : "SimpleName[28010-28017]:SimpleName[28010-28017]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[28018-28031]:SingleVariableDeclaration[28018-28031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28033-28087]:Block[28033-28087]"
    }, {
      "left" : "return new RangeEntryMap(null, toKey);",
      "right" : "return new RangeEntryMap(null, toKey);",
      "info" : "ReturnStatement[28043-28081]:ReturnStatement[28043-28081]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28093-28102]:MarkerAnnotation[28093-28102]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28107-28113]:Modifier[28107-28113]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[28114-28129]:ParameterizedType[28114-28129]"
    }, {
      "left" : "subMap",
      "right" : "subMap",
      "info" : "SimpleName[28130-28136]:SimpleName[28130-28136]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[28137-28152]:SingleVariableDeclaration[28137-28152]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[28154-28167]:SingleVariableDeclaration[28154-28167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28169-28226]:Block[28169-28226]"
    }, {
      "left" : "return new RangeEntryMap(fromKey, toKey);",
      "right" : "return new RangeEntryMap(fromKey, toKey);",
      "info" : "ReturnStatement[28179-28220]:ReturnStatement[28179-28220]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28232-28241]:MarkerAnnotation[28232-28241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28246-28252]:Modifier[28246-28252]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[28253-28268]:ParameterizedType[28253-28268]"
    }, {
      "left" : "tailMap",
      "right" : "tailMap",
      "info" : "SimpleName[28269-28276]:SimpleName[28269-28276]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[28277-28292]:SingleVariableDeclaration[28277-28292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28294-28350]:Block[28294-28350]"
    }, {
      "left" : "return new RangeEntryMap(fromKey, null);",
      "right" : "return new RangeEntryMap(fromKey, null);",
      "info" : "ReturnStatement[28304-28344]:ReturnStatement[28304-28344]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[28472-28486]:ParameterizedType[28472-28486]"
    }, {
      "left" : "higherEntry",
      "right" : "higherEntry",
      "info" : "SimpleName[28487-28498]:SimpleName[28487-28498]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[28499-28510]:SingleVariableDeclaration[28499-28510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28512-30372]:Block[28512-30372]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[28728-28771]:VariableDeclarationStatement[28728-28771]"
    }, {
      "left" : "if (lengthInBits == 0)",
      "right" : "if (lengthInBits == 0)",
      "info" : "IfStatement[28781-29217]:IfStatement[28781-29217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28804-29217]:Block[28804-29217]"
    }, {
      "left" : "if (!root.isEmpty())",
      "right" : "if (!root.isEmpty())",
      "info" : "IfStatement[28818-29098]:IfStatement[28818-29098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28839-29098]:Block[28839-29098]"
    }, {
      "left" : "if (size() > 1)",
      "right" : "if (size() > 1)",
      "info" : "IfStatement[28922-29001]:IfStatement[28922-29001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28938-29001]:Block[28938-29001]"
    }, {
      "left" : "return nextEntry(root);",
      "right" : "return nextEntry(root);",
      "info" : "ReturnStatement[28960-28983]:ReturnStatement[28960-28983]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29072-29084]:ReturnStatement[29072-29084]"
    }, {
      "left" : "return firstEntry();",
      "right" : "return firstEntry();",
      "info" : "ReturnStatement[29187-29207]:ReturnStatement[29187-29207]"
    }, {
      "left" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[29227-29298]:VariableDeclarationStatement[29227-29298]"
    }, {
      "left" : "if (compareKeys(key, found.key))",
      "right" : "if (compareKeys(key, found.key))",
      "info" : "IfStatement[29307-29388]:IfStatement[29307-29388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29340-29388]:Block[29340-29388]"
    }, {
      "left" : "return nextEntry(found);",
      "right" : "return nextEntry(found);",
      "info" : "ReturnStatement[29354-29378]:ReturnStatement[29354-29378]"
    }, {
      "left" : "final int bitIndex = bitIndex(key, found.key);",
      "right" : "final int bitIndex = bitIndex(key, found.key);",
      "info" : "VariableDeclarationStatement[29398-29444]:VariableDeclarationStatement[29398-29444]"
    }, {
      "left" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "right" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "info" : "IfStatement[29453-30258]:IfStatement[29453-30258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29496-29885]:Block[29496-29885]"
    }, {
      "left" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "right" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "info" : "VariableDeclarationStatement[29510-29581]:VariableDeclarationStatement[29510-29581]"
    }, {
      "left" : "addEntry(added, lengthInBits);",
      "right" : "addEntry(added, lengthInBits);",
      "info" : "ExpressionStatement[29594-29624]:ExpressionStatement[29594-29624]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[29637-29653]:ExpressionStatement[29637-29653]"
    }, {
      "left" : "final TrieEntry<K, V> ceil = nextEntry(added);",
      "right" : "final TrieEntry<K, V> ceil = nextEntry(added);",
      "info" : "VariableDeclarationStatement[29714-29760]:VariableDeclarationStatement[29714-29760]"
    }, {
      "left" : "removeEntry(added);",
      "right" : "removeEntry(added);",
      "info" : "ExpressionStatement[29773-29792]:ExpressionStatement[29773-29792]"
    }, {
      "left" : "modCount -= 2;",
      "right" : "modCount -= 2;",
      "info" : "ExpressionStatement[29805-29819]:ExpressionStatement[29805-29819]"
    }, {
      "left" : "return ceil;",
      "right" : "return ceil;",
      "info" : "ReturnStatement[29863-29875]:ReturnStatement[29863-29875]"
    }, {
      "left" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "info" : "IfStatement[29891-30258]:IfStatement[29891-30258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29931-30163]:Block[29931-30163]"
    }, {
      "left" : "if (!root.isEmpty())",
      "right" : "if (!root.isEmpty())",
      "info" : "IfStatement[29945-30153]:IfStatement[29945-30153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29966-30018]:Block[29966-30018]"
    }, {
      "left" : "return firstEntry();",
      "right" : "return firstEntry();",
      "info" : "ReturnStatement[29984-30004]:ReturnStatement[29984-30004]"
    }, {
      "left" : "if (size() > 1)",
      "right" : "if (size() > 1)",
      "info" : "IfStatement[30024-30153]:IfStatement[30024-30153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30040-30103]:Block[30040-30103]"
    }, {
      "left" : "return nextEntry(firstEntry());",
      "right" : "return nextEntry(firstEntry());",
      "info" : "ReturnStatement[30058-30089]:ReturnStatement[30058-30089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30109-30153]:Block[30109-30153]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30127-30139]:ReturnStatement[30127-30139]"
    }, {
      "left" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "info" : "IfStatement[30169-30258]:IfStatement[30169-30258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30210-30258]:Block[30210-30258]"
    }, {
      "left" : "return nextEntry(found);",
      "right" : "return nextEntry(found);",
      "info" : "ReturnStatement[30224-30248]:ReturnStatement[30224-30248]"
    }, {
      "left" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "right" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "info" : "ThrowStatement[30308-30366]:ThrowStatement[30308-30366]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[30539-30553]:ParameterizedType[30539-30553]"
    }, {
      "left" : "ceilingEntry",
      "right" : "ceilingEntry",
      "info" : "SimpleName[30554-30566]:SimpleName[30554-30566]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[30567-30578]:SingleVariableDeclaration[30567-30578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30580-32623]:Block[30580-32623]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[31402-31445]:VariableDeclarationStatement[31402-31445]"
    }, {
      "left" : "if (lengthInBits == 0)",
      "right" : "if (lengthInBits == 0)",
      "info" : "IfStatement[31455-31600]:IfStatement[31455-31600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31478-31600]:Block[31478-31600]"
    }, {
      "left" : "if (!root.isEmpty())",
      "right" : "if (!root.isEmpty())",
      "info" : "IfStatement[31492-31557]:IfStatement[31492-31557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31513-31557]:Block[31513-31557]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[31531-31543]:ReturnStatement[31531-31543]"
    }, {
      "left" : "return firstEntry();",
      "right" : "return firstEntry();",
      "info" : "ReturnStatement[31570-31590]:ReturnStatement[31570-31590]"
    }, {
      "left" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[31610-31681]:VariableDeclarationStatement[31610-31681]"
    }, {
      "left" : "if (compareKeys(key, found.key))",
      "right" : "if (compareKeys(key, found.key))",
      "info" : "IfStatement[31690-31760]:IfStatement[31690-31760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31723-31760]:Block[31723-31760]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[31737-31750]:ReturnStatement[31737-31750]"
    }, {
      "left" : "final int bitIndex = bitIndex(key, found.key);",
      "right" : "final int bitIndex = bitIndex(key, found.key);",
      "info" : "VariableDeclarationStatement[31770-31816]:VariableDeclarationStatement[31770-31816]"
    }, {
      "left" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "right" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "info" : "IfStatement[31825-32509]:IfStatement[31825-32509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31868-32257]:Block[31868-32257]"
    }, {
      "left" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "right" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "info" : "VariableDeclarationStatement[31882-31953]:VariableDeclarationStatement[31882-31953]"
    }, {
      "left" : "addEntry(added, lengthInBits);",
      "right" : "addEntry(added, lengthInBits);",
      "info" : "ExpressionStatement[31966-31996]:ExpressionStatement[31966-31996]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[32009-32025]:ExpressionStatement[32009-32025]"
    }, {
      "left" : "final TrieEntry<K, V> ceil = nextEntry(added);",
      "right" : "final TrieEntry<K, V> ceil = nextEntry(added);",
      "info" : "VariableDeclarationStatement[32086-32132]:VariableDeclarationStatement[32086-32132]"
    }, {
      "left" : "removeEntry(added);",
      "right" : "removeEntry(added);",
      "info" : "ExpressionStatement[32145-32164]:ExpressionStatement[32145-32164]"
    }, {
      "left" : "modCount -= 2;",
      "right" : "modCount -= 2;",
      "info" : "ExpressionStatement[32177-32191]:ExpressionStatement[32177-32191]"
    }, {
      "left" : "return ceil;",
      "right" : "return ceil;",
      "info" : "ReturnStatement[32235-32247]:ReturnStatement[32235-32247]"
    }, {
      "left" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "info" : "IfStatement[32263-32509]:IfStatement[32263-32509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32303-32425]:Block[32303-32425]"
    }, {
      "left" : "if (!root.isEmpty())",
      "right" : "if (!root.isEmpty())",
      "info" : "IfStatement[32317-32382]:IfStatement[32317-32382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32338-32382]:Block[32338-32382]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[32356-32368]:ReturnStatement[32356-32368]"
    }, {
      "left" : "return firstEntry();",
      "right" : "return firstEntry();",
      "info" : "ReturnStatement[32395-32415]:ReturnStatement[32395-32415]"
    }, {
      "left" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "info" : "IfStatement[32431-32509]:IfStatement[32431-32509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32472-32509]:Block[32472-32509]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[32486-32499]:ReturnStatement[32486-32499]"
    }, {
      "left" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "right" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "info" : "ThrowStatement[32559-32617]:ThrowStatement[32559-32617]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[32787-32801]:ParameterizedType[32787-32801]"
    }, {
      "left" : "lowerEntry",
      "right" : "lowerEntry",
      "info" : "SimpleName[32802-32812]:SimpleName[32802-32812]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[32813-32824]:SingleVariableDeclaration[32813-32824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32826-34762]:Block[32826-34762]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[33633-33676]:VariableDeclarationStatement[33633-33676]"
    }, {
      "left" : "if (lengthInBits == 0)",
      "right" : "if (lengthInBits == 0)",
      "info" : "IfStatement[33686-33789]:IfStatement[33686-33789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33709-33789]:Block[33709-33789]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33723-33735]:ReturnStatement[33723-33735]"
    }, {
      "left" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[33799-33870]:VariableDeclarationStatement[33799-33870]"
    }, {
      "left" : "if (compareKeys(key, found.key))",
      "right" : "if (compareKeys(key, found.key))",
      "info" : "IfStatement[33879-33964]:IfStatement[33879-33964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33912-33964]:Block[33912-33964]"
    }, {
      "left" : "return previousEntry(found);",
      "right" : "return previousEntry(found);",
      "info" : "ReturnStatement[33926-33954]:ReturnStatement[33926-33954]"
    }, {
      "left" : "final int bitIndex = bitIndex(key, found.key);",
      "right" : "final int bitIndex = bitIndex(key, found.key);",
      "info" : "VariableDeclarationStatement[33974-34020]:VariableDeclarationStatement[33974-34020]"
    }, {
      "left" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "right" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "info" : "IfStatement[34029-34648]:IfStatement[34029-34648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34072-34467]:Block[34072-34467]"
    }, {
      "left" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "right" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "info" : "VariableDeclarationStatement[34086-34157]:VariableDeclarationStatement[34086-34157]"
    }, {
      "left" : "addEntry(added, lengthInBits);",
      "right" : "addEntry(added, lengthInBits);",
      "info" : "ExpressionStatement[34170-34200]:ExpressionStatement[34170-34200]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[34213-34229]:ExpressionStatement[34213-34229]"
    }, {
      "left" : "final TrieEntry<K, V> prior = previousEntry(added);",
      "right" : "final TrieEntry<K, V> prior = previousEntry(added);",
      "info" : "VariableDeclarationStatement[34290-34341]:VariableDeclarationStatement[34290-34341]"
    }, {
      "left" : "removeEntry(added);",
      "right" : "removeEntry(added);",
      "info" : "ExpressionStatement[34354-34373]:ExpressionStatement[34354-34373]"
    }, {
      "left" : "modCount -= 2;",
      "right" : "modCount -= 2;",
      "info" : "ExpressionStatement[34386-34400]:ExpressionStatement[34386-34400]"
    }, {
      "left" : "return prior;",
      "right" : "return prior;",
      "info" : "ReturnStatement[34444-34457]:ReturnStatement[34444-34457]"
    }, {
      "left" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "info" : "IfStatement[34473-34648]:IfStatement[34473-34648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34513-34549]:Block[34513-34549]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34527-34539]:ReturnStatement[34527-34539]"
    }, {
      "left" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "info" : "IfStatement[34555-34648]:IfStatement[34555-34648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34596-34648]:Block[34596-34648]"
    }, {
      "left" : "return previousEntry(found);",
      "right" : "return previousEntry(found);",
      "info" : "ReturnStatement[34610-34638]:ReturnStatement[34610-34638]"
    }, {
      "left" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "right" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "info" : "ThrowStatement[34698-34756]:ThrowStatement[34698-34756]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[34929-34943]:ParameterizedType[34929-34943]"
    }, {
      "left" : "floorEntry",
      "right" : "floorEntry",
      "info" : "SimpleName[34944-34954]:SimpleName[34944-34954]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[34955-34966]:SingleVariableDeclaration[34955-34966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34968-36395]:Block[34968-36395]"
    }, {
      "left" : "final int lengthInBits = lengthInBits(key);",
      "right" : "final int lengthInBits = lengthInBits(key);",
      "info" : "VariableDeclarationStatement[35184-35227]:VariableDeclarationStatement[35184-35227]"
    }, {
      "left" : "if (lengthInBits == 0)",
      "right" : "if (lengthInBits == 0)",
      "info" : "IfStatement[35237-35374]:IfStatement[35237-35374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35260-35374]:Block[35260-35374]"
    }, {
      "left" : "if (!root.isEmpty())",
      "right" : "if (!root.isEmpty())",
      "info" : "IfStatement[35274-35339]:IfStatement[35274-35339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35295-35339]:Block[35295-35339]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[35313-35325]:ReturnStatement[35313-35325]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35352-35364]:ReturnStatement[35352-35364]"
    }, {
      "left" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "right" : "final TrieEntry<K, V> found = getNearestEntryForKey(key, lengthInBits);",
      "info" : "VariableDeclarationStatement[35384-35455]:VariableDeclarationStatement[35384-35455]"
    }, {
      "left" : "if (compareKeys(key, found.key))",
      "right" : "if (compareKeys(key, found.key))",
      "info" : "IfStatement[35464-35534]:IfStatement[35464-35534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35497-35534]:Block[35497-35534]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[35511-35524]:ReturnStatement[35511-35524]"
    }, {
      "left" : "final int bitIndex = bitIndex(key, found.key);",
      "right" : "final int bitIndex = bitIndex(key, found.key);",
      "info" : "VariableDeclarationStatement[35544-35590]:VariableDeclarationStatement[35544-35590]"
    }, {
      "left" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "right" : "if (KeyAnalyzer.isValidBitIndex(bitIndex))",
      "info" : "IfStatement[35599-36281]:IfStatement[35599-36281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35642-36037]:Block[35642-36037]"
    }, {
      "left" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "right" : "final TrieEntry<K, V> added = new TrieEntry<K, V>(key, null, bitIndex);",
      "info" : "VariableDeclarationStatement[35656-35727]:VariableDeclarationStatement[35656-35727]"
    }, {
      "left" : "addEntry(added, lengthInBits);",
      "right" : "addEntry(added, lengthInBits);",
      "info" : "ExpressionStatement[35740-35770]:ExpressionStatement[35740-35770]"
    }, {
      "left" : "incrementSize();",
      "right" : "incrementSize();",
      "info" : "ExpressionStatement[35783-35799]:ExpressionStatement[35783-35799]"
    }, {
      "left" : "final TrieEntry<K, V> floor = previousEntry(added);",
      "right" : "final TrieEntry<K, V> floor = previousEntry(added);",
      "info" : "VariableDeclarationStatement[35860-35911]:VariableDeclarationStatement[35860-35911]"
    }, {
      "left" : "removeEntry(added);",
      "right" : "removeEntry(added);",
      "info" : "ExpressionStatement[35924-35943]:ExpressionStatement[35924-35943]"
    }, {
      "left" : "modCount -= 2;",
      "right" : "modCount -= 2;",
      "info" : "ExpressionStatement[35956-35970]:ExpressionStatement[35956-35970]"
    }, {
      "left" : "return floor;",
      "right" : "return floor;",
      "info" : "ReturnStatement[36014-36027]:ReturnStatement[36014-36027]"
    }, {
      "left" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isNullBitKey(bitIndex))",
      "info" : "IfStatement[36043-36281]:IfStatement[36043-36281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36083-36197]:Block[36083-36197]"
    }, {
      "left" : "if (!root.isEmpty())",
      "right" : "if (!root.isEmpty())",
      "info" : "IfStatement[36097-36162]:IfStatement[36097-36162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36118-36162]:Block[36118-36162]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[36136-36148]:ReturnStatement[36136-36148]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36175-36187]:ReturnStatement[36175-36187]"
    }, {
      "left" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "right" : "if (KeyAnalyzer.isEqualBitKey(bitIndex))",
      "info" : "IfStatement[36203-36281]:IfStatement[36203-36281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36244-36281]:Block[36244-36281]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[36258-36271]:ReturnStatement[36258-36271]"
    }, {
      "left" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "right" : "throw new IllegalStateException(\"invalid lookup: \" + key);",
      "info" : "ThrowStatement[36331-36389]:ThrowStatement[36331-36389]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[36596-36611]:ParameterizedType[36596-36611]"
    }, {
      "left" : "subtree",
      "right" : "subtree",
      "info" : "SimpleName[36612-36619]:SimpleName[36612-36619]"
    }, {
      "left" : "final K prefix",
      "right" : "final K prefix",
      "info" : "SingleVariableDeclaration[36620-36634]:SingleVariableDeclaration[36620-36634]"
    }, {
      "left" : "final int offsetInBits",
      "right" : "final int offsetInBits",
      "info" : "SingleVariableDeclaration[36636-36658]:SingleVariableDeclaration[36636-36658]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[36660-36682]:SingleVariableDeclaration[36660-36682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36684-38488]:Block[36684-38488]"
    }, {
      "left" : "TrieEntry<K, V> current = root.left;",
      "right" : "TrieEntry<K, V> current = root.left;",
      "info" : "VariableDeclarationStatement[36694-36730]:VariableDeclarationStatement[36694-36730]"
    }, {
      "left" : "TrieEntry<K, V> path = root;",
      "right" : "TrieEntry<K, V> path = root;",
      "info" : "VariableDeclarationStatement[36739-36767]:VariableDeclarationStatement[36739-36767]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[36776-37169]:WhileStatement[36776-37169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36788-37169]:Block[36788-37169]"
    }, {
      "left" : "if (current.bitIndex <= path.bitIndex || lengthInBits <= current.bitIndex)",
      "right" : "if (current.bitIndex <= path.bitIndex || lengthInBits <= current.bitIndex)",
      "info" : "IfStatement[36802-36915]:IfStatement[36802-36915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36877-36915]:Block[36877-36915]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36895-36901]:BreakStatement[36895-36901]"
    }, {
      "left" : "path = current;",
      "right" : "path = current;",
      "info" : "ExpressionStatement[36929-36944]:ExpressionStatement[36929-36944]"
    }, {
      "left" : "if (!isBitSet(prefix, offsetInBits + current.bitIndex, offsetInBits + lengthInBits))",
      "right" : "if (!isBitSet(prefix, offsetInBits + current.bitIndex, offsetInBits + lengthInBits))",
      "info" : "IfStatement[36957-37159]:IfStatement[36957-37159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37042-37097]:Block[37042-37097]"
    }, {
      "left" : "current = current.left;",
      "right" : "current = current.left;",
      "info" : "ExpressionStatement[37060-37083]:ExpressionStatement[37060-37083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37103-37159]:Block[37103-37159]"
    }, {
      "left" : "current = current.right;",
      "right" : "current = current.right;",
      "info" : "ExpressionStatement[37121-37145]:ExpressionStatement[37121-37145]"
    }, {
      "left" : "final TrieEntry<K, V> entry = current.isEmpty() ? path : current;",
      "right" : "final TrieEntry<K, V> entry = current.isEmpty() ? path : current;",
      "info" : "VariableDeclarationStatement[37234-37299]:VariableDeclarationStatement[37234-37299]"
    }, {
      "left" : "if (entry.isEmpty())",
      "right" : "if (entry.isEmpty())",
      "info" : "IfStatement[37357-37414]:IfStatement[37357-37414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37378-37414]:Block[37378-37414]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37392-37404]:ReturnStatement[37392-37404]"
    }, {
      "left" : "final int endIndexInBits = offsetInBits + lengthInBits;",
      "right" : "final int endIndexInBits = offsetInBits + lengthInBits;",
      "info" : "VariableDeclarationStatement[37424-37479]:VariableDeclarationStatement[37424-37479]"
    }, {
      "left" : "if (entry == root && lengthInBits(entry.getKey()) < endIndexInBits)",
      "right" : "if (entry == root && lengthInBits(entry.getKey()) < endIndexInBits)",
      "info" : "IfStatement[37719-37823]:IfStatement[37719-37823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37787-37823]:Block[37787-37823]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37801-37813]:ReturnStatement[37801-37813]"
    }, {
      "left" : "if (isBitSet(prefix, endIndexInBits - 1, endIndexInBits)\n                != isBitSet(entry.key, lengthInBits - 1, lengthInBits(entry.key)))",
      "right" : "if (isBitSet(prefix, endIndexInBits - 1, endIndexInBits)\n                != isBitSet(entry.key, lengthInBits - 1, lengthInBits(entry.key)))",
      "info" : "IfStatement[37941-38117]:IfStatement[37941-38117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38081-38117]:Block[38081-38117]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[38095-38107]:ReturnStatement[38095-38107]"
    }, {
      "left" : "final int bitIndex = getKeyAnalyzer().bitIndex(prefix, offsetInBits, lengthInBits,\n                                                       entry.key, 0, lengthInBits(entry.getKey()));",
      "right" : "final int bitIndex = getKeyAnalyzer().bitIndex(prefix, offsetInBits, lengthInBits,\n                                                       entry.key, 0, lengthInBits(entry.getKey()));",
      "info" : "VariableDeclarationStatement[38185-38367]:VariableDeclarationStatement[38185-38367]"
    }, {
      "left" : "if (bitIndex >= 0 && bitIndex < lengthInBits)",
      "right" : "if (bitIndex >= 0 && bitIndex < lengthInBits)",
      "info" : "IfStatement[38377-38459]:IfStatement[38377-38459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38423-38459]:Block[38423-38459]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[38437-38449]:ReturnStatement[38437-38449]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[38469-38482]:ReturnStatement[38469-38482]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[38706-38721]:ParameterizedType[38706-38721]"
    }, {
      "left" : "lastEntry",
      "right" : "lastEntry",
      "info" : "SimpleName[38722-38731]:SimpleName[38722-38731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38734-38780]:Block[38734-38780]"
    }, {
      "left" : "return followRight(root.left);",
      "right" : "return followRight(root.left);",
      "info" : "ReturnStatement[38744-38774]:ReturnStatement[38744-38774]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[38865-38880]:ParameterizedType[38865-38880]"
    }, {
      "left" : "followRight",
      "right" : "followRight",
      "info" : "SimpleName[38881-38892]:SimpleName[38881-38892]"
    }, {
      "left" : "TrieEntry<K, V> node",
      "right" : "TrieEntry<K, V> node",
      "info" : "SingleVariableDeclaration[38893-38913]:SingleVariableDeclaration[38893-38913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38915-39229]:Block[38915-39229]"
    }, {
      "left" : "if (node.right == null)",
      "right" : "if (node.right == null)",
      "info" : "IfStatement[38969-39029]:IfStatement[38969-39029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38993-39029]:Block[38993-39029]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39007-39019]:ReturnStatement[39007-39019]"
    }, {
      "left" : "while (node.right.bitIndex > node.bitIndex)",
      "right" : "while (node.right.bitIndex > node.bitIndex)",
      "info" : "WhileStatement[39109-39195]:WhileStatement[39109-39195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39153-39195]:Block[39153-39195]"
    }, {
      "left" : "node = node.right;",
      "right" : "node = node.right;",
      "info" : "ExpressionStatement[39167-39185]:ExpressionStatement[39167-39185]"
    }, {
      "left" : "return node.right;",
      "right" : "return node.right;",
      "info" : "ReturnStatement[39205-39223]:ReturnStatement[39205-39223]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[40231-40246]:ParameterizedType[40231-40246]"
    }, {
      "left" : "previousEntry",
      "right" : "previousEntry",
      "info" : "SimpleName[40247-40260]:SimpleName[40247-40260]"
    }, {
      "left" : "final TrieEntry<K, V> start",
      "right" : "final TrieEntry<K, V> start",
      "info" : "SingleVariableDeclaration[40261-40288]:SingleVariableDeclaration[40261-40288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40290-41283]:Block[40290-41283]"
    }, {
      "left" : "if (start.predecessor == null)",
      "right" : "if (start.predecessor == null)",
      "info" : "IfStatement[40300-40424]:IfStatement[40300-40424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40331-40424]:Block[40331-40424]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have come from somewhere!\");",
      "right" : "throw new IllegalArgumentException(\"must have come from somewhere!\");",
      "info" : "ThrowStatement[40345-40414]:ThrowStatement[40345-40414]"
    }, {
      "left" : "if (start.predecessor.right == start)",
      "right" : "if (start.predecessor.right == start)",
      "info" : "IfStatement[40434-40676]:IfStatement[40434-40676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40472-40676]:Block[40472-40676]"
    }, {
      "left" : "if (isValidUplink(start.predecessor.left, start.predecessor))",
      "right" : "if (isValidUplink(start.predecessor.left, start.predecessor))",
      "info" : "IfStatement[40486-40610]:IfStatement[40486-40610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40548-40610]:Block[40548-40610]"
    }, {
      "left" : "return start.predecessor.left;",
      "right" : "return start.predecessor.left;",
      "info" : "ReturnStatement[40566-40596]:ReturnStatement[40566-40596]"
    }, {
      "left" : "return followRight(start.predecessor.left);",
      "right" : "return followRight(start.predecessor.left);",
      "info" : "ReturnStatement[40623-40666]:ReturnStatement[40623-40666]"
    }, {
      "left" : "TrieEntry<K, V> node = start.predecessor;",
      "right" : "TrieEntry<K, V> node = start.predecessor;",
      "info" : "VariableDeclarationStatement[40685-40726]:VariableDeclarationStatement[40685-40726]"
    }, {
      "left" : "while (node.parent != null && node == node.parent.left)",
      "right" : "while (node.parent != null && node == node.parent.left)",
      "info" : "WhileStatement[40735-40834]:WhileStatement[40735-40834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40791-40834]:Block[40791-40834]"
    }, {
      "left" : "node = node.parent;",
      "right" : "node = node.parent;",
      "info" : "ExpressionStatement[40805-40824]:ExpressionStatement[40805-40824]"
    }, {
      "left" : "if (node.parent == null)",
      "right" : "if (node.parent == null)",
      "info" : "IfStatement[40844-40946]:IfStatement[40844-40946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40869-40946]:Block[40869-40946]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40924-40936]:ReturnStatement[40924-40936]"
    }, {
      "left" : "if (isValidUplink(node.parent.left, node.parent))",
      "right" : "if (isValidUplink(node.parent.left, node.parent))",
      "info" : "IfStatement[40956-41231]:IfStatement[40956-41231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41006-41231]:Block[41006-41231]"
    }, {
      "left" : "if (node.parent.left == root)",
      "right" : "if (node.parent.left == root)",
      "info" : "IfStatement[41020-41184]:IfStatement[41020-41184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41050-41184]:Block[41050-41184]"
    }, {
      "left" : "if (root.isEmpty())",
      "right" : "if (root.isEmpty())",
      "info" : "IfStatement[41068-41140]:IfStatement[41068-41140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41088-41140]:Block[41088-41140]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41110-41122]:ReturnStatement[41110-41122]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[41157-41169]:ReturnStatement[41157-41169]"
    }, {
      "left" : "return node.parent.left;",
      "right" : "return node.parent.left;",
      "info" : "ReturnStatement[41197-41221]:ReturnStatement[41197-41221]"
    }, {
      "left" : "return followRight(node.parent.left);",
      "right" : "return followRight(node.parent.left);",
      "info" : "ReturnStatement[41240-41277]:ReturnStatement[41240-41277]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[41575-41590]:ParameterizedType[41575-41590]"
    }, {
      "left" : "nextEntryInSubtree",
      "right" : "nextEntryInSubtree",
      "info" : "SimpleName[41591-41609]:SimpleName[41591-41609]"
    }, {
      "left" : "final TrieEntry<K, V> node",
      "right" : "final TrieEntry<K, V> node",
      "info" : "SingleVariableDeclaration[41610-41636]:SingleVariableDeclaration[41610-41636]"
    }, {
      "left" : "final TrieEntry<K, V> parentOfSubtree",
      "right" : "final TrieEntry<K, V> parentOfSubtree",
      "info" : "SingleVariableDeclaration[41650-41687]:SingleVariableDeclaration[41650-41687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41689-41838]:Block[41689-41838]"
    }, {
      "left" : "if (node == null)",
      "right" : "if (node == null)",
      "info" : "IfStatement[41699-41761]:IfStatement[41699-41761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41717-41761]:Block[41717-41761]"
    }, {
      "left" : "return firstEntry();",
      "right" : "return firstEntry();",
      "info" : "ReturnStatement[41731-41751]:ReturnStatement[41731-41751]"
    }, {
      "left" : "return nextEntryImpl(node.predecessor, node, parentOfSubtree);",
      "right" : "return nextEntryImpl(node.predecessor, node, parentOfSubtree);",
      "info" : "ReturnStatement[41770-41832]:ReturnStatement[41770-41832]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41928-41934]:Modifier[41928-41934]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41935-41942]:PrimitiveType[41935-41942]"
    }, {
      "left" : "isValidUplink",
      "right" : "isValidUplink",
      "info" : "SimpleName[41943-41956]:SimpleName[41943-41956]"
    }, {
      "left" : "final TrieEntry<?, ?> next",
      "right" : "final TrieEntry<?, ?> next",
      "info" : "SingleVariableDeclaration[41957-41983]:SingleVariableDeclaration[41957-41983]"
    }, {
      "left" : "final TrieEntry<?, ?> from",
      "right" : "final TrieEntry<?, ?> from",
      "info" : "SingleVariableDeclaration[41985-42011]:SingleVariableDeclaration[41985-42011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42013-42102]:Block[42013-42102]"
    }, {
      "left" : "return next != null && next.bitIndex <= from.bitIndex && !next.isEmpty();",
      "right" : "return next != null && next.bitIndex <= from.bitIndex && !next.isEmpty();",
      "info" : "ReturnStatement[42023-42096]:ReturnStatement[42023-42096]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42481-42488]:Modifier[42481-42488]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42489-42495]:Modifier[42489-42495]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[42496-42501]:TYPE_DECLARATION_KIND[42496-42501]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[42502-42511]:SimpleName[42502-42511]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42551-42557]:Modifier[42551-42557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42558-42562]:PrimitiveType[42558-42562]"
    }, {
      "left" : "set",
      "right" : "set",
      "info" : "SimpleName[42563-42566]:SimpleName[42563-42566]"
    }, {
      "left" : "final E item",
      "right" : "final E item",
      "info" : "SingleVariableDeclaration[42567-42579]:SingleVariableDeclaration[42567-42579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42581-42622]:Block[42581-42622]"
    }, {
      "left" : "this.item = item;",
      "right" : "this.item = item;",
      "info" : "ExpressionStatement[42595-42612]:ExpressionStatement[42595-42612]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42632-42638]:Modifier[42632-42638]"
    }, {
      "left" : "E",
      "right" : "E",
      "info" : "SimpleType[42639-42640]:SimpleType[42639-42640]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[42641-42644]:SimpleName[42641-42644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42647-42683]:Block[42647-42683]"
    }, {
      "left" : "return item;",
      "right" : "return item;",
      "info" : "ReturnStatement[42661-42673]:ReturnStatement[42661-42673]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[42771-42780]:Modifier[42771-42780]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42781-42787]:Modifier[42781-42787]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[42788-42793]:TYPE_DECLARATION_KIND[42788-42793]"
    }, {
      "left" : "TrieEntry",
      "right" : "TrieEntry",
      "info" : "SimpleName[42794-42803]:SimpleName[42794-42803]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43358-43364]:Modifier[43358-43364]"
    }, {
      "left" : "TrieEntry",
      "right" : "TrieEntry",
      "info" : "SimpleName[43365-43374]:SimpleName[43365-43374]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[43375-43386]:SingleVariableDeclaration[43375-43386]"
    }, {
      "left" : "final V value",
      "right" : "final V value",
      "info" : "SingleVariableDeclaration[43388-43401]:SingleVariableDeclaration[43388-43401]"
    }, {
      "left" : "final int bitIndex",
      "right" : "final int bitIndex",
      "info" : "SingleVariableDeclaration[43403-43421]:SingleVariableDeclaration[43403-43421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43423-43635]:Block[43423-43635]"
    }, {
      "left" : "super(key, value);",
      "right" : "super(key, value);",
      "info" : "SuperConstructorInvocation[43437-43455]:SuperConstructorInvocation[43437-43455]"
    }, {
      "left" : "this.bitIndex = bitIndex;",
      "right" : "this.bitIndex = bitIndex;",
      "info" : "ExpressionStatement[43469-43494]:ExpressionStatement[43469-43494]"
    }, {
      "left" : "this.parent = null;",
      "right" : "this.parent = null;",
      "info" : "ExpressionStatement[43508-43527]:ExpressionStatement[43508-43527]"
    }, {
      "left" : "this.left = this;",
      "right" : "this.left = this;",
      "info" : "ExpressionStatement[43540-43557]:ExpressionStatement[43540-43557]"
    }, {
      "left" : "this.right = null;",
      "right" : "this.right = null;",
      "info" : "ExpressionStatement[43570-43588]:ExpressionStatement[43570-43588]"
    }, {
      "left" : "this.predecessor = this;",
      "right" : "this.predecessor = this;",
      "info" : "ExpressionStatement[43601-43625]:ExpressionStatement[43601-43625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43818-43824]:Modifier[43818-43824]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43825-43832]:PrimitiveType[43825-43832]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[43833-43840]:SimpleName[43833-43840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43843-43886]:Block[43843-43886]"
    }, {
      "left" : "return key == null;",
      "right" : "return key == null;",
      "info" : "ReturnStatement[43857-43876]:ReturnStatement[43857-43876]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43979-43985]:Modifier[43979-43985]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43986-43993]:PrimitiveType[43986-43993]"
    }, {
      "left" : "isInternalNode",
      "right" : "isInternalNode",
      "info" : "SimpleName[43994-44008]:SimpleName[43994-44008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44011-44072]:Block[44011-44072]"
    }, {
      "left" : "return left != this && right != this;",
      "right" : "return left != this && right != this;",
      "info" : "ReturnStatement[44025-44062]:ReturnStatement[44025-44062]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44163-44169]:Modifier[44163-44169]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44170-44177]:PrimitiveType[44170-44177]"
    }, {
      "left" : "isExternalNode",
      "right" : "isExternalNode",
      "info" : "SimpleName[44178-44192]:SimpleName[44178-44192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44195-44244]:Block[44195-44244]"
    }, {
      "left" : "return !isInternalNode();",
      "right" : "return !isInternalNode();",
      "info" : "ReturnStatement[44209-44234]:ReturnStatement[44209-44234]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44254-44263]:MarkerAnnotation[44254-44263]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44272-44278]:Modifier[44272-44278]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[44279-44285]:SimpleType[44279-44285]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[44286-44294]:SimpleName[44286-44294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44297-46472]:Block[44297-46472]"
    }, {
      "left" : "final StringBuilder buffer = new StringBuilder();",
      "right" : "final StringBuilder buffer = new StringBuilder();",
      "info" : "VariableDeclarationStatement[44311-44360]:VariableDeclarationStatement[44311-44360]"
    }, {
      "left" : "if (bitIndex == -1)",
      "right" : "if (bitIndex == -1)",
      "info" : "IfStatement[44374-44516]:IfStatement[44374-44516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44394-44454]:Block[44394-44454]"
    }, {
      "left" : "buffer.append(\"RootEntry(\");",
      "right" : "buffer.append(\"RootEntry(\");",
      "info" : "ExpressionStatement[44412-44440]:ExpressionStatement[44412-44440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44460-44516]:Block[44460-44516]"
    }, {
      "left" : "buffer.append(\"Entry(\");",
      "right" : "buffer.append(\"Entry(\");",
      "info" : "ExpressionStatement[44478-44502]:ExpressionStatement[44478-44502]"
    }, {
      "left" : "buffer.append(\"key=\").append(getKey()).append(\" [\").append(bitIndex).append(\"], \");",
      "right" : "buffer.append(\"key=\").append(getKey()).append(\" [\").append(bitIndex).append(\"], \");",
      "info" : "ExpressionStatement[44530-44613]:ExpressionStatement[44530-44613]"
    }, {
      "left" : "buffer.append(\"value=\").append(getValue()).append(\", \");",
      "right" : "buffer.append(\"value=\").append(getValue()).append(\", \");",
      "info" : "ExpressionStatement[44626-44682]:ExpressionStatement[44626-44682]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[44768-45149]:IfStatement[44768-45149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44788-45071]:Block[44788-45071]"
    }, {
      "left" : "if (parent.bitIndex == -1)",
      "right" : "if (parent.bitIndex == -1)",
      "info" : "IfStatement[44806-45057]:IfStatement[44806-45057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44833-44913]:Block[44833-44913]"
    }, {
      "left" : "buffer.append(\"parent=\").append(\"ROOT\");",
      "right" : "buffer.append(\"parent=\").append(\"ROOT\");",
      "info" : "ExpressionStatement[44855-44895]:ExpressionStatement[44855-44895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44919-45057]:Block[44919-45057]"
    }, {
      "left" : "buffer.append(\"parent=\").append(parent.getKey()).append(\" [\").append(parent.bitIndex).append(\"]\");",
      "right" : "buffer.append(\"parent=\").append(parent.getKey()).append(\" [\").append(parent.bitIndex).append(\"]\");",
      "info" : "ExpressionStatement[44941-45039]:ExpressionStatement[44941-45039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45077-45149]:Block[45077-45149]"
    }, {
      "left" : "buffer.append(\"parent=\").append(\"null\");",
      "right" : "buffer.append(\"parent=\").append(\"null\");",
      "info" : "ExpressionStatement[45095-45135]:ExpressionStatement[45095-45135]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[45162-45182]:ExpressionStatement[45162-45182]"
    }, {
      "left" : "if (left != null)",
      "right" : "if (left != null)",
      "info" : "IfStatement[45196-45563]:IfStatement[45196-45563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45214-45487]:Block[45214-45487]"
    }, {
      "left" : "if (left.bitIndex == -1)",
      "right" : "if (left.bitIndex == -1)",
      "info" : "IfStatement[45232-45473]:IfStatement[45232-45473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45257-45335]:Block[45257-45335]"
    }, {
      "left" : "buffer.append(\"left=\").append(\"ROOT\");",
      "right" : "buffer.append(\"left=\").append(\"ROOT\");",
      "info" : "ExpressionStatement[45279-45317]:ExpressionStatement[45279-45317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45341-45473]:Block[45341-45473]"
    }, {
      "left" : "buffer.append(\"left=\").append(left.getKey()).append(\" [\").append(left.bitIndex).append(\"]\");",
      "right" : "buffer.append(\"left=\").append(left.getKey()).append(\" [\").append(left.bitIndex).append(\"]\");",
      "info" : "ExpressionStatement[45363-45455]:ExpressionStatement[45363-45455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45493-45563]:Block[45493-45563]"
    }, {
      "left" : "buffer.append(\"left=\").append(\"null\");",
      "right" : "buffer.append(\"left=\").append(\"null\");",
      "info" : "ExpressionStatement[45511-45549]:ExpressionStatement[45511-45549]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[45576-45596]:ExpressionStatement[45576-45596]"
    }, {
      "left" : "if (right != null)",
      "right" : "if (right != null)",
      "info" : "IfStatement[45610-45984]:IfStatement[45610-45984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45629-45907]:Block[45629-45907]"
    }, {
      "left" : "if (right.bitIndex == -1)",
      "right" : "if (right.bitIndex == -1)",
      "info" : "IfStatement[45647-45893]:IfStatement[45647-45893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45673-45752]:Block[45673-45752]"
    }, {
      "left" : "buffer.append(\"right=\").append(\"ROOT\");",
      "right" : "buffer.append(\"right=\").append(\"ROOT\");",
      "info" : "ExpressionStatement[45695-45734]:ExpressionStatement[45695-45734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45758-45893]:Block[45758-45893]"
    }, {
      "left" : "buffer.append(\"right=\").append(right.getKey()).append(\" [\").append(right.bitIndex).append(\"]\");",
      "right" : "buffer.append(\"right=\").append(right.getKey()).append(\" [\").append(right.bitIndex).append(\"]\");",
      "info" : "ExpressionStatement[45780-45875]:ExpressionStatement[45780-45875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45913-45984]:Block[45913-45984]"
    }, {
      "left" : "buffer.append(\"right=\").append(\"null\");",
      "right" : "buffer.append(\"right=\").append(\"null\");",
      "info" : "ExpressionStatement[45931-45970]:ExpressionStatement[45931-45970]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[45997-46017]:ExpressionStatement[45997-46017]"
    }, {
      "left" : "if (predecessor != null)",
      "right" : "if (predecessor != null)",
      "info" : "IfStatement[46031-46391]:IfStatement[46031-46391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46056-46391]:Block[46056-46391]"
    }, {
      "left" : "if(predecessor.bitIndex == -1)",
      "right" : "if(predecessor.bitIndex == -1)",
      "info" : "IfStatement[46074-46377]:IfStatement[46074-46377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46105-46190]:Block[46105-46190]"
    }, {
      "left" : "buffer.append(\"predecessor=\").append(\"ROOT\");",
      "right" : "buffer.append(\"predecessor=\").append(\"ROOT\");",
      "info" : "ExpressionStatement[46127-46172]:ExpressionStatement[46127-46172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46196-46377]:Block[46196-46377]"
    }, {
      "left" : "buffer.append(\"predecessor=\").append(predecessor.getKey()).append(\" [\").\n                           append(predecessor.bitIndex).append(\"]\");",
      "right" : "buffer.append(\"predecessor=\").append(predecessor.getKey()).append(\" [\").\n                           append(predecessor.bitIndex).append(\"]\");",
      "info" : "ExpressionStatement[46218-46359]:ExpressionStatement[46218-46359]"
    }, {
      "left" : "buffer.append(\")\");",
      "right" : "buffer.append(\")\");",
      "info" : "ExpressionStatement[46405-46424]:ExpressionStatement[46405-46424]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[46437-46462]:ReturnStatement[46437-46462]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46592-46599]:Modifier[46592-46599]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[46600-46605]:TYPE_DECLARATION_KIND[46600-46605]"
    }, {
      "left" : "EntrySet",
      "right" : "EntrySet",
      "info" : "SimpleName[46606-46614]:SimpleName[46606-46614]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46662-46671]:MarkerAnnotation[46662-46671]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46680-46686]:Modifier[46680-46686]"
    }, {
      "left" : "Iterator<Map.Entry<K,V>>",
      "right" : "Iterator<Map.Entry<K,V>>",
      "info" : "ParameterizedType[46687-46711]:ParameterizedType[46687-46711]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[46712-46720]:SimpleName[46712-46720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46723-46774]:Block[46723-46774]"
    }, {
      "left" : "return new EntryIterator();",
      "right" : "return new EntryIterator();",
      "info" : "ReturnStatement[46737-46764]:ReturnStatement[46737-46764]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46784-46793]:MarkerAnnotation[46784-46793]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46802-46808]:Modifier[46802-46808]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46809-46816]:PrimitiveType[46809-46816]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[46817-46825]:SimpleName[46817-46825]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[46826-46840]:SingleVariableDeclaration[46826-46840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46842-47090]:Block[46842-47090]"
    }, {
      "left" : "if (!(o instanceof Map.Entry))",
      "right" : "if (!(o instanceof Map.Entry))",
      "info" : "IfStatement[46856-46932]:IfStatement[46856-46932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46887-46932]:Block[46887-46932]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46905-46918]:ReturnStatement[46905-46918]"
    }, {
      "left" : "final TrieEntry<K,V> candidate = getEntry(((Map.Entry<?, ?>)o).getKey());",
      "right" : "final TrieEntry<K,V> candidate = getEntry(((Map.Entry<?, ?>)o).getKey());",
      "info" : "VariableDeclarationStatement[46946-47019]:VariableDeclarationStatement[46946-47019]"
    }, {
      "left" : "return candidate != null && candidate.equals(o);",
      "right" : "return candidate != null && candidate.equals(o);",
      "info" : "ReturnStatement[47032-47080]:ReturnStatement[47032-47080]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47100-47109]:MarkerAnnotation[47100-47109]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47118-47124]:Modifier[47118-47124]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47125-47132]:PrimitiveType[47125-47132]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[47133-47139]:SimpleName[47133-47139]"
    }, {
      "left" : "final Object obj",
      "right" : "final Object obj",
      "info" : "SingleVariableDeclaration[47140-47156]:SingleVariableDeclaration[47140-47156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47158-47504]:Block[47158-47504]"
    }, {
      "left" : "if (obj instanceof Map.Entry == false)",
      "right" : "if (obj instanceof Map.Entry == false)",
      "info" : "IfStatement[47172-47256]:IfStatement[47172-47256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47211-47256]:Block[47211-47256]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47229-47242]:ReturnStatement[47229-47242]"
    }, {
      "left" : "if (contains(obj) == false)",
      "right" : "if (contains(obj) == false)",
      "info" : "IfStatement[47269-47342]:IfStatement[47269-47342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47297-47342]:Block[47297-47342]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47315-47328]:ReturnStatement[47315-47328]"
    }, {
      "left" : "final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;",
      "right" : "final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;",
      "info" : "VariableDeclarationStatement[47355-47407]:VariableDeclarationStatement[47355-47407]"
    }, {
      "left" : "AbstractPatriciaTrie.this.remove(entry.getKey());",
      "right" : "AbstractPatriciaTrie.this.remove(entry.getKey());",
      "info" : "ExpressionStatement[47420-47469]:ExpressionStatement[47420-47469]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47482-47494]:ReturnStatement[47482-47494]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47514-47523]:MarkerAnnotation[47514-47523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47532-47538]:Modifier[47532-47538]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[47539-47542]:PrimitiveType[47539-47542]"
    }, {
      "left" : "size",
      "right" : "size",
      "info" : "SimpleName[47543-47547]:SimpleName[47543-47547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47550-47614]:Block[47550-47614]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.size();",
      "right" : "return AbstractPatriciaTrie.this.size();",
      "info" : "ReturnStatement[47564-47604]:ReturnStatement[47564-47604]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47624-47633]:MarkerAnnotation[47624-47633]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47642-47648]:Modifier[47642-47648]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47649-47653]:PrimitiveType[47649-47653]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[47654-47659]:SimpleName[47654-47659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47662-47720]:Block[47662-47720]"
    }, {
      "left" : "AbstractPatriciaTrie.this.clear();",
      "right" : "AbstractPatriciaTrie.this.clear();",
      "info" : "ExpressionStatement[47676-47710]:ExpressionStatement[47676-47710]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47821-47828]:Modifier[47821-47828]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[47829-47834]:TYPE_DECLARATION_KIND[47829-47834]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "SimpleName[47835-47848]:SimpleName[47835-47848]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47900-47909]:MarkerAnnotation[47900-47909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47922-47928]:Modifier[47922-47928]"
    }, {
      "left" : "Map.Entry<K,V>",
      "right" : "Map.Entry<K,V>",
      "info" : "ParameterizedType[47929-47943]:ParameterizedType[47929-47943]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[47944-47948]:SimpleName[47944-47948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47951-48002]:Block[47951-48002]"
    }, {
      "left" : "return nextEntry();",
      "right" : "return nextEntry();",
      "info" : "ReturnStatement[47969-47988]:ReturnStatement[47969-47988]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48127-48134]:Modifier[48127-48134]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48135-48140]:TYPE_DECLARATION_KIND[48135-48140]"
    }, {
      "left" : "KeySet",
      "right" : "KeySet",
      "info" : "SimpleName[48141-48147]:SimpleName[48141-48147]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48182-48191]:MarkerAnnotation[48182-48191]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48200-48206]:Modifier[48200-48206]"
    }, {
      "left" : "Iterator<K>",
      "right" : "Iterator<K>",
      "info" : "ParameterizedType[48207-48218]:ParameterizedType[48207-48218]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[48219-48227]:SimpleName[48219-48227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48230-48279]:Block[48230-48279]"
    }, {
      "left" : "return new KeyIterator();",
      "right" : "return new KeyIterator();",
      "info" : "ReturnStatement[48244-48269]:ReturnStatement[48244-48269]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48289-48298]:MarkerAnnotation[48289-48298]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48307-48313]:Modifier[48307-48313]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[48314-48317]:PrimitiveType[48314-48317]"
    }, {
      "left" : "size",
      "right" : "size",
      "info" : "SimpleName[48318-48322]:SimpleName[48318-48322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48325-48389]:Block[48325-48389]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.size();",
      "right" : "return AbstractPatriciaTrie.this.size();",
      "info" : "ReturnStatement[48339-48379]:ReturnStatement[48339-48379]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48399-48408]:MarkerAnnotation[48399-48408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48417-48423]:Modifier[48417-48423]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48424-48431]:PrimitiveType[48424-48431]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[48432-48440]:SimpleName[48432-48440]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[48441-48455]:SingleVariableDeclaration[48441-48455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48457-48503]:Block[48457-48503]"
    }, {
      "left" : "return containsKey(o);",
      "right" : "return containsKey(o);",
      "info" : "ReturnStatement[48471-48493]:ReturnStatement[48471-48493]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48513-48522]:MarkerAnnotation[48513-48522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48531-48537]:Modifier[48531-48537]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48538-48545]:PrimitiveType[48538-48545]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[48546-48552]:SimpleName[48546-48552]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[48553-48567]:SingleVariableDeclaration[48553-48567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48569-48701]:Block[48569-48701]"
    }, {
      "left" : "final int size = size();",
      "right" : "final int size = size();",
      "info" : "VariableDeclarationStatement[48583-48607]:VariableDeclarationStatement[48583-48607]"
    }, {
      "left" : "AbstractPatriciaTrie.this.remove(o);",
      "right" : "AbstractPatriciaTrie.this.remove(o);",
      "info" : "ExpressionStatement[48620-48656]:ExpressionStatement[48620-48656]"
    }, {
      "left" : "return size != size();",
      "right" : "return size != size();",
      "info" : "ReturnStatement[48669-48691]:ReturnStatement[48669-48691]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48711-48720]:MarkerAnnotation[48711-48720]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48729-48735]:Modifier[48729-48735]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48736-48740]:PrimitiveType[48736-48740]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[48741-48746]:SimpleName[48741-48746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48749-48807]:Block[48749-48807]"
    }, {
      "left" : "AbstractPatriciaTrie.this.clear();",
      "right" : "AbstractPatriciaTrie.this.clear();",
      "info" : "ExpressionStatement[48763-48797]:ExpressionStatement[48763-48797]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48898-48905]:Modifier[48898-48905]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48906-48911]:TYPE_DECLARATION_KIND[48906-48911]"
    }, {
      "left" : "KeyIterator",
      "right" : "KeyIterator",
      "info" : "SimpleName[48912-48923]:SimpleName[48912-48923]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48962-48971]:MarkerAnnotation[48962-48971]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48984-48990]:Modifier[48984-48990]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[48991-48992]:SimpleType[48991-48992]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[48993-48997]:SimpleName[48993-48997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49000-49060]:Block[49000-49060]"
    }, {
      "left" : "return nextEntry().getKey();",
      "right" : "return nextEntry().getKey();",
      "info" : "ReturnStatement[49018-49046]:ReturnStatement[49018-49046]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49183-49190]:Modifier[49183-49190]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[49191-49196]:TYPE_DECLARATION_KIND[49191-49196]"
    }, {
      "left" : "Values",
      "right" : "Values",
      "info" : "SimpleName[49197-49203]:SimpleName[49197-49203]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49245-49254]:MarkerAnnotation[49245-49254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49263-49269]:Modifier[49263-49269]"
    }, {
      "left" : "Iterator<V>",
      "right" : "Iterator<V>",
      "info" : "ParameterizedType[49270-49281]:ParameterizedType[49270-49281]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[49282-49290]:SimpleName[49282-49290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49293-49344]:Block[49293-49344]"
    }, {
      "left" : "return new ValueIterator();",
      "right" : "return new ValueIterator();",
      "info" : "ReturnStatement[49307-49334]:ReturnStatement[49307-49334]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49354-49363]:MarkerAnnotation[49354-49363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49372-49378]:Modifier[49372-49378]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[49379-49382]:PrimitiveType[49379-49382]"
    }, {
      "left" : "size",
      "right" : "size",
      "info" : "SimpleName[49383-49387]:SimpleName[49383-49387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49390-49454]:Block[49390-49454]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.size();",
      "right" : "return AbstractPatriciaTrie.this.size();",
      "info" : "ReturnStatement[49404-49444]:ReturnStatement[49404-49444]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49464-49473]:MarkerAnnotation[49464-49473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49482-49488]:Modifier[49482-49488]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49489-49496]:PrimitiveType[49489-49496]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[49497-49505]:SimpleName[49497-49505]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[49506-49520]:SingleVariableDeclaration[49506-49520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49522-49570]:Block[49522-49570]"
    }, {
      "left" : "return containsValue(o);",
      "right" : "return containsValue(o);",
      "info" : "ReturnStatement[49536-49560]:ReturnStatement[49536-49560]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49580-49589]:MarkerAnnotation[49580-49589]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49598-49604]:Modifier[49598-49604]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49605-49609]:PrimitiveType[49605-49609]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[49610-49615]:SimpleName[49610-49615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49618-49676]:Block[49618-49676]"
    }, {
      "left" : "AbstractPatriciaTrie.this.clear();",
      "right" : "AbstractPatriciaTrie.this.clear();",
      "info" : "ExpressionStatement[49632-49666]:ExpressionStatement[49632-49666]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49686-49695]:MarkerAnnotation[49686-49695]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49704-49710]:Modifier[49704-49710]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49711-49718]:PrimitiveType[49711-49718]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[49719-49725]:SimpleName[49719-49725]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[49726-49740]:SingleVariableDeclaration[49726-49740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49742-50031]:Block[49742-50031]"
    }, {
      "left" : "for (final Iterator<V> it = iterator(); it.hasNext())",
      "right" : "for (final Iterator<V> it = iterator(); it.hasNext())",
      "info" : "ForStatement[49756-49995]:ForStatement[49756-49995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49812-49995]:Block[49812-49995]"
    }, {
      "left" : "final V value = it.next();",
      "right" : "final V value = it.next();",
      "info" : "VariableDeclarationStatement[49830-49856]:VariableDeclarationStatement[49830-49856]"
    }, {
      "left" : "if (compare(value, o))",
      "right" : "if (compare(value, o))",
      "info" : "IfStatement[49873-49981]:IfStatement[49873-49981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49896-49981]:Block[49896-49981]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[49918-49930]:ExpressionStatement[49918-49930]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49951-49963]:ReturnStatement[49951-49963]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50008-50021]:ReturnStatement[50008-50021]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50124-50131]:Modifier[50124-50131]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[50132-50137]:TYPE_DECLARATION_KIND[50132-50137]"
    }, {
      "left" : "ValueIterator",
      "right" : "ValueIterator",
      "info" : "SimpleName[50138-50151]:SimpleName[50138-50151]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50190-50199]:MarkerAnnotation[50190-50199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50212-50218]:Modifier[50212-50218]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[50219-50220]:SimpleType[50219-50220]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[50221-50225]:SimpleName[50221-50225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50228-50290]:Block[50228-50290]"
    }, {
      "left" : "return nextEntry().getValue();",
      "right" : "return nextEntry().getValue();",
      "info" : "ReturnStatement[50246-50276]:ReturnStatement[50246-50276]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[50364-50372]:Modifier[50364-50372]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[50373-50378]:TYPE_DECLARATION_KIND[50373-50378]"
    }, {
      "left" : "TrieIterator",
      "right" : "TrieIterator",
      "info" : "SimpleName[50379-50391]:SimpleName[50379-50391]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[50745-50754]:Modifier[50745-50754]"
    }, {
      "left" : "TrieIterator",
      "right" : "TrieIterator",
      "info" : "SimpleName[50755-50767]:SimpleName[50755-50767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50770-50843]:Block[50770-50843]"
    }, {
      "left" : "next = AbstractPatriciaTrie.this.nextEntry(null);",
      "right" : "next = AbstractPatriciaTrie.this.nextEntry(null);",
      "info" : "ExpressionStatement[50784-50833]:ExpressionStatement[50784-50833]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[50925-50934]:Modifier[50925-50934]"
    }, {
      "left" : "TrieIterator",
      "right" : "TrieIterator",
      "info" : "SimpleName[50935-50947]:SimpleName[50935-50947]"
    }, {
      "left" : "final TrieEntry<K, V> firstEntry",
      "right" : "final TrieEntry<K, V> firstEntry",
      "info" : "SingleVariableDeclaration[50948-50980]:SingleVariableDeclaration[50948-50980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50982-51024]:Block[50982-51024]"
    }, {
      "left" : "next = firstEntry;",
      "right" : "next = firstEntry;",
      "info" : "ExpressionStatement[50996-51014]:ExpressionStatement[50996-51014]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[51105-51114]:Modifier[51105-51114]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[51115-51129]:ParameterizedType[51115-51129]"
    }, {
      "left" : "nextEntry",
      "right" : "nextEntry",
      "info" : "SimpleName[51130-51139]:SimpleName[51130-51139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51142-51521]:Block[51142-51521]"
    }, {
      "left" : "if (expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "right" : "if (expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "info" : "IfStatement[51156-51292]:IfStatement[51156-51292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51216-51292]:Block[51216-51292]"
    }, {
      "left" : "throw new ConcurrentModificationException();",
      "right" : "throw new ConcurrentModificationException();",
      "info" : "ThrowStatement[51234-51278]:ThrowStatement[51234-51278]"
    }, {
      "left" : "final TrieEntry<K,V> e = next;",
      "right" : "final TrieEntry<K,V> e = next;",
      "info" : "VariableDeclarationStatement[51306-51336]:VariableDeclarationStatement[51306-51336]"
    }, {
      "left" : "if (e == null)",
      "right" : "if (e == null)",
      "info" : "IfStatement[51349-51431]:IfStatement[51349-51431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51364-51431]:Block[51364-51431]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[51382-51417]:ThrowStatement[51382-51417]"
    }, {
      "left" : "next = findNext(e);",
      "right" : "next = findNext(e);",
      "info" : "ExpressionStatement[51445-51464]:ExpressionStatement[51445-51464]"
    }, {
      "left" : "current = e;",
      "right" : "current = e;",
      "info" : "ExpressionStatement[51477-51489]:ExpressionStatement[51477-51489]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[51502-51511]:ReturnStatement[51502-51511]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[51605-51614]:Modifier[51605-51614]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[51615-51630]:ParameterizedType[51615-51630]"
    }, {
      "left" : "findNext",
      "right" : "findNext",
      "info" : "SimpleName[51631-51639]:SimpleName[51631-51639]"
    }, {
      "left" : "final TrieEntry<K, V> prior",
      "right" : "final TrieEntry<K, V> prior",
      "info" : "SingleVariableDeclaration[51640-51667]:SingleVariableDeclaration[51640-51667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51669-51743]:Block[51669-51743]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.nextEntry(prior);",
      "right" : "return AbstractPatriciaTrie.this.nextEntry(prior);",
      "info" : "ReturnStatement[51683-51733]:ReturnStatement[51683-51733]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51753-51762]:MarkerAnnotation[51753-51762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51771-51777]:Modifier[51771-51777]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51778-51785]:PrimitiveType[51778-51785]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[51786-51793]:SimpleName[51786-51793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51796-51840]:Block[51796-51840]"
    }, {
      "left" : "return next != null;",
      "right" : "return next != null;",
      "info" : "ReturnStatement[51810-51830]:ReturnStatement[51810-51830]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51850-51859]:MarkerAnnotation[51850-51859]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51868-51874]:Modifier[51868-51874]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51875-51879]:PrimitiveType[51875-51879]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[51880-51886]:SimpleName[51880-51886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51889-52354]:Block[51889-52354]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[51903-51990]:IfStatement[51903-51990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51924-51990]:Block[51924-51990]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[51942-51976]:ThrowStatement[51942-51976]"
    }, {
      "left" : "if (expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "right" : "if (expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "info" : "IfStatement[52004-52140]:IfStatement[52004-52140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52064-52140]:Block[52064-52140]"
    }, {
      "left" : "throw new ConcurrentModificationException();",
      "right" : "throw new ConcurrentModificationException();",
      "info" : "ThrowStatement[52082-52126]:ThrowStatement[52082-52126]"
    }, {
      "left" : "final TrieEntry<K, V> node = current;",
      "right" : "final TrieEntry<K, V> node = current;",
      "info" : "VariableDeclarationStatement[52154-52191]:VariableDeclarationStatement[52154-52191]"
    }, {
      "left" : "current = null;",
      "right" : "current = null;",
      "info" : "ExpressionStatement[52204-52219]:ExpressionStatement[52204-52219]"
    }, {
      "left" : "AbstractPatriciaTrie.this.removeEntry(node);",
      "right" : "AbstractPatriciaTrie.this.removeEntry(node);",
      "info" : "ExpressionStatement[52232-52276]:ExpressionStatement[52232-52276]"
    }, {
      "left" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "right" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "info" : "ExpressionStatement[52290-52344]:ExpressionStatement[52290-52344]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52439-52446]:Modifier[52439-52446]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[52447-52452]:TYPE_DECLARATION_KIND[52447-52452]"
    }, {
      "left" : "TrieMapIterator",
      "right" : "TrieMapIterator",
      "info" : "SimpleName[52453-52468]:SimpleName[52453-52468]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52616-52625]:MarkerAnnotation[52616-52625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52634-52640]:Modifier[52634-52640]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[52641-52642]:SimpleType[52641-52642]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[52643-52647]:SimpleName[52643-52647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52650-52702]:Block[52650-52702]"
    }, {
      "left" : "return nextEntry().getKey();",
      "right" : "return nextEntry().getKey();",
      "info" : "ReturnStatement[52664-52692]:ReturnStatement[52664-52692]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52712-52721]:MarkerAnnotation[52712-52721]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52730-52736]:Modifier[52730-52736]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[52737-52738]:SimpleType[52737-52738]"
    }, {
      "left" : "getKey",
      "right" : "getKey",
      "info" : "SimpleName[52739-52745]:SimpleName[52739-52745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52748-52896]:Block[52748-52896]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[52762-52849]:IfStatement[52762-52849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52783-52849]:Block[52783-52849]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[52801-52835]:ThrowStatement[52801-52835]"
    }, {
      "left" : "return current.getKey();",
      "right" : "return current.getKey();",
      "info" : "ReturnStatement[52862-52886]:ReturnStatement[52862-52886]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52906-52915]:MarkerAnnotation[52906-52915]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52924-52930]:Modifier[52924-52930]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[52931-52932]:SimpleType[52931-52932]"
    }, {
      "left" : "getValue",
      "right" : "getValue",
      "info" : "SimpleName[52933-52941]:SimpleName[52933-52941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52944-53094]:Block[52944-53094]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[52958-53045]:IfStatement[52958-53045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52979-53045]:Block[52979-53045]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[52997-53031]:ThrowStatement[52997-53031]"
    }, {
      "left" : "return current.getValue();",
      "right" : "return current.getValue();",
      "info" : "ReturnStatement[53058-53084]:ReturnStatement[53058-53084]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53104-53113]:MarkerAnnotation[53104-53113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53122-53128]:Modifier[53122-53128]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[53129-53130]:SimpleType[53129-53130]"
    }, {
      "left" : "setValue",
      "right" : "setValue",
      "info" : "SimpleName[53131-53139]:SimpleName[53131-53139]"
    }, {
      "left" : "final V value",
      "right" : "final V value",
      "info" : "SingleVariableDeclaration[53140-53153]:SingleVariableDeclaration[53140-53153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53155-53310]:Block[53155-53310]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[53169-53256]:IfStatement[53169-53256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53190-53256]:Block[53190-53256]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[53208-53242]:ThrowStatement[53208-53242]"
    }, {
      "left" : "return current.setValue(value);",
      "right" : "return current.setValue(value);",
      "info" : "ReturnStatement[53269-53300]:ReturnStatement[53269-53300]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53320-53329]:MarkerAnnotation[53320-53329]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53338-53344]:Modifier[53338-53344]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53345-53352]:PrimitiveType[53345-53352]"
    }, {
      "left" : "hasPrevious",
      "right" : "hasPrevious",
      "info" : "SimpleName[53353-53364]:SimpleName[53353-53364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53367-53415]:Block[53367-53415]"
    }, {
      "left" : "return previous != null;",
      "right" : "return previous != null;",
      "info" : "ReturnStatement[53381-53405]:ReturnStatement[53381-53405]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53425-53434]:MarkerAnnotation[53425-53434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53443-53449]:Modifier[53443-53449]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[53450-53451]:SimpleType[53450-53451]"
    }, {
      "left" : "previous",
      "right" : "previous",
      "info" : "SimpleName[53452-53460]:SimpleName[53452-53460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53463-53519]:Block[53463-53519]"
    }, {
      "left" : "return previousEntry().getKey();",
      "right" : "return previousEntry().getKey();",
      "info" : "ReturnStatement[53477-53509]:ReturnStatement[53477-53509]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53529-53538]:MarkerAnnotation[53529-53538]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[53547-53556]:Modifier[53547-53556]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[53557-53572]:ParameterizedType[53557-53572]"
    }, {
      "left" : "nextEntry",
      "right" : "nextEntry",
      "info" : "SimpleName[53573-53582]:SimpleName[53573-53582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53585-53725]:Block[53585-53725]"
    }, {
      "left" : "final TrieEntry<K, V> nextEntry = super.nextEntry();",
      "right" : "final TrieEntry<K, V> nextEntry = super.nextEntry();",
      "info" : "VariableDeclarationStatement[53599-53651]:VariableDeclarationStatement[53599-53651]"
    }, {
      "left" : "previous = nextEntry;",
      "right" : "previous = nextEntry;",
      "info" : "ExpressionStatement[53664-53685]:ExpressionStatement[53664-53685]"
    }, {
      "left" : "return nextEntry;",
      "right" : "return nextEntry;",
      "info" : "ReturnStatement[53698-53715]:ReturnStatement[53698-53715]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[53735-53744]:Modifier[53735-53744]"
    }, {
      "left" : "TrieEntry<K,V>",
      "right" : "TrieEntry<K,V>",
      "info" : "ParameterizedType[53745-53759]:ParameterizedType[53745-53759]"
    }, {
      "left" : "previousEntry",
      "right" : "previousEntry",
      "info" : "SimpleName[53760-53773]:SimpleName[53760-53773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53776-54228]:Block[53776-54228]"
    }, {
      "left" : "if (expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "right" : "if (expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "info" : "IfStatement[53790-53926]:IfStatement[53790-53926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53850-53926]:Block[53850-53926]"
    }, {
      "left" : "throw new ConcurrentModificationException();",
      "right" : "throw new ConcurrentModificationException();",
      "info" : "ThrowStatement[53868-53912]:ThrowStatement[53868-53912]"
    }, {
      "left" : "final TrieEntry<K,V> e = previous;",
      "right" : "final TrieEntry<K,V> e = previous;",
      "info" : "VariableDeclarationStatement[53940-53974]:VariableDeclarationStatement[53940-53974]"
    }, {
      "left" : "if (e == null)",
      "right" : "if (e == null)",
      "info" : "IfStatement[53987-54069]:IfStatement[53987-54069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54002-54069]:Block[54002-54069]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[54020-54055]:ThrowStatement[54020-54055]"
    }, {
      "left" : "previous = AbstractPatriciaTrie.this.previousEntry(e);",
      "right" : "previous = AbstractPatriciaTrie.this.previousEntry(e);",
      "info" : "ExpressionStatement[54083-54137]:ExpressionStatement[54083-54137]"
    }, {
      "left" : "next = current;",
      "right" : "next = current;",
      "info" : "ExpressionStatement[54150-54165]:ExpressionStatement[54150-54165]"
    }, {
      "left" : "current = e;",
      "right" : "current = e;",
      "info" : "ExpressionStatement[54178-54190]:ExpressionStatement[54178-54190]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[54203-54218]:ReturnStatement[54203-54218]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54298-54305]:Modifier[54298-54305]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[54306-54314]:Modifier[54306-54314]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[54315-54320]:TYPE_DECLARATION_KIND[54315-54320]"
    }, {
      "left" : "RangeMap",
      "right" : "RangeMap",
      "info" : "SimpleName[54321-54329]:SimpleName[54321-54329]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54626-54635]:Modifier[54626-54635]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[54636-54644]:Modifier[54636-54644]"
    }, {
      "left" : "Set<Map.Entry<K, V>>",
      "right" : "Set<Map.Entry<K, V>>",
      "info" : "ParameterizedType[54645-54665]:ParameterizedType[54645-54665]"
    }, {
      "left" : "createEntrySet",
      "right" : "createEntrySet",
      "info" : "SimpleName[54666-54680]:SimpleName[54666-54680]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54750-54759]:Modifier[54750-54759]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[54760-54768]:Modifier[54760-54768]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[54769-54770]:SimpleType[54769-54770]"
    }, {
      "left" : "getFromKey",
      "right" : "getFromKey",
      "info" : "SimpleName[54771-54781]:SimpleName[54771-54781]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54887-54896]:Modifier[54887-54896]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[54897-54905]:Modifier[54897-54905]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54906-54913]:PrimitiveType[54906-54913]"
    }, {
      "left" : "isFromInclusive",
      "right" : "isFromInclusive",
      "info" : "SimpleName[54914-54929]:SimpleName[54914-54929]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54997-55006]:Modifier[54997-55006]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[55007-55015]:Modifier[55007-55015]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[55016-55017]:SimpleType[55016-55017]"
    }, {
      "left" : "getToKey",
      "right" : "getToKey",
      "info" : "SimpleName[55018-55026]:SimpleName[55018-55026]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[55130-55139]:Modifier[55130-55139]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[55140-55148]:Modifier[55140-55148]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55149-55156]:PrimitiveType[55149-55156]"
    }, {
      "left" : "isToInclusive",
      "right" : "isToInclusive",
      "info" : "SimpleName[55157-55170]:SimpleName[55157-55170]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55183-55192]:MarkerAnnotation[55183-55192]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55201-55207]:Modifier[55201-55207]"
    }, {
      "left" : "Comparator<? super K>",
      "right" : "Comparator<? super K>",
      "info" : "ParameterizedType[55208-55229]:ParameterizedType[55208-55229]"
    }, {
      "left" : "comparator",
      "right" : "comparator",
      "info" : "SimpleName[55230-55240]:SimpleName[55230-55240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55243-55313]:Block[55243-55313]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.comparator();",
      "right" : "return AbstractPatriciaTrie.this.comparator();",
      "info" : "ReturnStatement[55257-55303]:ReturnStatement[55257-55303]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55323-55332]:MarkerAnnotation[55323-55332]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55341-55347]:Modifier[55341-55347]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55348-55355]:PrimitiveType[55348-55355]"
    }, {
      "left" : "containsKey",
      "right" : "containsKey",
      "info" : "SimpleName[55356-55367]:SimpleName[55356-55367]"
    }, {
      "left" : "final Object key",
      "right" : "final Object key",
      "info" : "SingleVariableDeclaration[55368-55384]:SingleVariableDeclaration[55368-55384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55386-55547]:Block[55386-55547]"
    }, {
      "left" : "if (!inRange(castKey(key)))",
      "right" : "if (!inRange(castKey(key)))",
      "info" : "IfStatement[55400-55473]:IfStatement[55400-55473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55428-55473]:Block[55428-55473]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55446-55459]:ReturnStatement[55446-55459]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.containsKey(key);",
      "right" : "return AbstractPatriciaTrie.this.containsKey(key);",
      "info" : "ReturnStatement[55487-55537]:ReturnStatement[55487-55537]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55557-55566]:MarkerAnnotation[55557-55566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55575-55581]:Modifier[55575-55581]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[55582-55583]:SimpleType[55582-55583]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[55584-55590]:SimpleName[55584-55590]"
    }, {
      "left" : "final Object key",
      "right" : "final Object key",
      "info" : "SingleVariableDeclaration[55591-55607]:SingleVariableDeclaration[55591-55607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55609-55764]:Block[55609-55764]"
    }, {
      "left" : "if (!inRange(castKey(key)))",
      "right" : "if (!inRange(castKey(key)))",
      "info" : "IfStatement[55623-55695]:IfStatement[55623-55695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55651-55695]:Block[55651-55695]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55669-55681]:ReturnStatement[55669-55681]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.remove(key);",
      "right" : "return AbstractPatriciaTrie.this.remove(key);",
      "info" : "ReturnStatement[55709-55754]:ReturnStatement[55709-55754]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55774-55783]:MarkerAnnotation[55774-55783]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55792-55798]:Modifier[55792-55798]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[55799-55800]:SimpleType[55799-55800]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[55801-55804]:SimpleName[55801-55804]"
    }, {
      "left" : "final Object key",
      "right" : "final Object key",
      "info" : "SingleVariableDeclaration[55805-55821]:SingleVariableDeclaration[55805-55821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55823-55975]:Block[55823-55975]"
    }, {
      "left" : "if (!inRange(castKey(key)))",
      "right" : "if (!inRange(castKey(key)))",
      "info" : "IfStatement[55837-55909]:IfStatement[55837-55909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55865-55909]:Block[55865-55909]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55883-55895]:ReturnStatement[55883-55895]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.get(key);",
      "right" : "return AbstractPatriciaTrie.this.get(key);",
      "info" : "ReturnStatement[55923-55965]:ReturnStatement[55923-55965]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55985-55994]:MarkerAnnotation[55985-55994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56003-56009]:Modifier[56003-56009]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[56010-56011]:SimpleType[56010-56011]"
    }, {
      "left" : "put",
      "right" : "put",
      "info" : "SimpleName[56012-56015]:SimpleName[56012-56015]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[56016-56027]:SingleVariableDeclaration[56016-56027]"
    }, {
      "left" : "final V value",
      "right" : "final V value",
      "info" : "SingleVariableDeclaration[56029-56042]:SingleVariableDeclaration[56029-56042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56044-56247]:Block[56044-56247]"
    }, {
      "left" : "if (!inRange(key))",
      "right" : "if (!inRange(key))",
      "info" : "IfStatement[56058-56175]:IfStatement[56058-56175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56077-56175]:Block[56077-56175]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Key is out of range: \" + key);",
      "right" : "throw new IllegalArgumentException(\"Key is out of range: \" + key);",
      "info" : "ThrowStatement[56095-56161]:ThrowStatement[56095-56161]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.put(key, value);",
      "right" : "return AbstractPatriciaTrie.this.put(key, value);",
      "info" : "ReturnStatement[56188-56237]:ReturnStatement[56188-56237]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56257-56266]:MarkerAnnotation[56257-56266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56275-56281]:Modifier[56275-56281]"
    }, {
      "left" : "Set<Map.Entry<K, V>>",
      "right" : "Set<Map.Entry<K, V>>",
      "info" : "ParameterizedType[56282-56302]:ParameterizedType[56282-56302]"
    }, {
      "left" : "entrySet",
      "right" : "entrySet",
      "info" : "SimpleName[56303-56311]:SimpleName[56303-56311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56314-56449]:Block[56314-56449]"
    }, {
      "left" : "if (entrySet == null)",
      "right" : "if (entrySet == null)",
      "info" : "IfStatement[56328-56410]:IfStatement[56328-56410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56350-56410]:Block[56350-56410]"
    }, {
      "left" : "entrySet = createEntrySet();",
      "right" : "entrySet = createEntrySet();",
      "info" : "ExpressionStatement[56368-56396]:ExpressionStatement[56368-56396]"
    }, {
      "left" : "return entrySet;",
      "right" : "return entrySet;",
      "info" : "ReturnStatement[56423-56439]:ReturnStatement[56423-56439]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56459-56468]:MarkerAnnotation[56459-56468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56477-56483]:Modifier[56477-56483]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[56484-56499]:ParameterizedType[56484-56499]"
    }, {
      "left" : "subMap",
      "right" : "subMap",
      "info" : "SimpleName[56500-56506]:SimpleName[56500-56506]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[56507-56522]:SingleVariableDeclaration[56507-56522]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[56524-56537]:SingleVariableDeclaration[56524-56537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56539-56919]:Block[56539-56919]"
    }, {
      "left" : "if (!inRange2(fromKey))",
      "right" : "if (!inRange2(fromKey))",
      "info" : "IfStatement[56553-56683]:IfStatement[56553-56683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56577-56683]:Block[56577-56683]"
    }, {
      "left" : "throw new IllegalArgumentException(\"FromKey is out of range: \" + fromKey);",
      "right" : "throw new IllegalArgumentException(\"FromKey is out of range: \" + fromKey);",
      "info" : "ThrowStatement[56595-56669]:ThrowStatement[56595-56669]"
    }, {
      "left" : "if (!inRange2(toKey))",
      "right" : "if (!inRange2(toKey))",
      "info" : "IfStatement[56697-56821]:IfStatement[56697-56821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56719-56821]:Block[56719-56821]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ToKey is out of range: \" + toKey);",
      "right" : "throw new IllegalArgumentException(\"ToKey is out of range: \" + toKey);",
      "info" : "ThrowStatement[56737-56807]:ThrowStatement[56737-56807]"
    }, {
      "left" : "return createRangeMap(fromKey, isFromInclusive(), toKey, isToInclusive());",
      "right" : "return createRangeMap(fromKey, isFromInclusive(), toKey, isToInclusive());",
      "info" : "ReturnStatement[56835-56909]:ReturnStatement[56835-56909]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56929-56938]:MarkerAnnotation[56929-56938]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56947-56953]:Modifier[56947-56953]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[56954-56969]:ParameterizedType[56954-56969]"
    }, {
      "left" : "headMap",
      "right" : "headMap",
      "info" : "SimpleName[56970-56977]:SimpleName[56970-56977]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[56978-56991]:SingleVariableDeclaration[56978-56991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56993-57233]:Block[56993-57233]"
    }, {
      "left" : "if (!inRange2(toKey))",
      "right" : "if (!inRange2(toKey))",
      "info" : "IfStatement[57007-57131]:IfStatement[57007-57131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57029-57131]:Block[57029-57131]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ToKey is out of range: \" + toKey);",
      "right" : "throw new IllegalArgumentException(\"ToKey is out of range: \" + toKey);",
      "info" : "ThrowStatement[57047-57117]:ThrowStatement[57047-57117]"
    }, {
      "left" : "return createRangeMap(getFromKey(), isFromInclusive(), toKey, isToInclusive());",
      "right" : "return createRangeMap(getFromKey(), isFromInclusive(), toKey, isToInclusive());",
      "info" : "ReturnStatement[57144-57223]:ReturnStatement[57144-57223]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57243-57252]:MarkerAnnotation[57243-57252]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57261-57267]:Modifier[57261-57267]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[57268-57283]:ParameterizedType[57268-57283]"
    }, {
      "left" : "tailMap",
      "right" : "tailMap",
      "info" : "SimpleName[57284-57291]:SimpleName[57284-57291]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[57292-57307]:SingleVariableDeclaration[57292-57307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57309-57555]:Block[57309-57555]"
    }, {
      "left" : "if (!inRange2(fromKey))",
      "right" : "if (!inRange2(fromKey))",
      "info" : "IfStatement[57323-57453]:IfStatement[57323-57453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57347-57453]:Block[57347-57453]"
    }, {
      "left" : "throw new IllegalArgumentException(\"FromKey is out of range: \" + fromKey);",
      "right" : "throw new IllegalArgumentException(\"FromKey is out of range: \" + fromKey);",
      "info" : "ThrowStatement[57365-57439]:ThrowStatement[57365-57439]"
    }, {
      "left" : "return createRangeMap(fromKey, isFromInclusive(), getToKey(), isToInclusive());",
      "right" : "return createRangeMap(fromKey, isFromInclusive(), getToKey(), isToInclusive());",
      "info" : "ReturnStatement[57466-57545]:ReturnStatement[57466-57545]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[57672-57681]:Modifier[57672-57681]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57682-57689]:PrimitiveType[57682-57689]"
    }, {
      "left" : "inRange",
      "right" : "inRange",
      "info" : "SimpleName[57690-57697]:SimpleName[57690-57697]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[57698-57709]:SingleVariableDeclaration[57698-57709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57711-57916]:Block[57711-57916]"
    }, {
      "left" : "final K fromKey = getFromKey();",
      "right" : "final K fromKey = getFromKey();",
      "info" : "VariableDeclarationStatement[57725-57756]:VariableDeclarationStatement[57725-57756]"
    }, {
      "left" : "final K toKey = getToKey();",
      "right" : "final K toKey = getToKey();",
      "info" : "VariableDeclarationStatement[57769-57796]:VariableDeclarationStatement[57769-57796]"
    }, {
      "left" : "return (fromKey == null || inFromRange(key, false)) && (toKey == null || inToRange(key, false));",
      "right" : "return (fromKey == null || inFromRange(key, false)) && (toKey == null || inToRange(key, false));",
      "info" : "ReturnStatement[57810-57906]:ReturnStatement[57810-57906]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[58025-58034]:Modifier[58025-58034]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58035-58042]:PrimitiveType[58035-58042]"
    }, {
      "left" : "inRange2",
      "right" : "inRange2",
      "info" : "SimpleName[58043-58051]:SimpleName[58043-58051]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[58052-58063]:SingleVariableDeclaration[58052-58063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58065-58269]:Block[58065-58269]"
    }, {
      "left" : "final K fromKey = getFromKey();",
      "right" : "final K fromKey = getFromKey();",
      "info" : "VariableDeclarationStatement[58079-58110]:VariableDeclarationStatement[58079-58110]"
    }, {
      "left" : "final K toKey = getToKey();",
      "right" : "final K toKey = getToKey();",
      "info" : "VariableDeclarationStatement[58123-58150]:VariableDeclarationStatement[58123-58150]"
    }, {
      "left" : "return (fromKey == null || inFromRange(key, false)) && (toKey == null || inToRange(key, true));",
      "right" : "return (fromKey == null || inFromRange(key, false)) && (toKey == null || inToRange(key, true));",
      "info" : "ReturnStatement[58164-58259]:ReturnStatement[58164-58259]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[58393-58402]:Modifier[58393-58402]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58403-58410]:PrimitiveType[58403-58410]"
    }, {
      "left" : "inFromRange",
      "right" : "inFromRange",
      "info" : "SimpleName[58411-58422]:SimpleName[58411-58422]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[58423-58434]:SingleVariableDeclaration[58423-58434]"
    }, {
      "left" : "final boolean forceInclusive",
      "right" : "final boolean forceInclusive",
      "info" : "SingleVariableDeclaration[58436-58464]:SingleVariableDeclaration[58436-58464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58466-58777]:Block[58466-58777]"
    }, {
      "left" : "final K fromKey = getFromKey();",
      "right" : "final K fromKey = getFromKey();",
      "info" : "VariableDeclarationStatement[58480-58511]:VariableDeclarationStatement[58480-58511]"
    }, {
      "left" : "final boolean fromInclusive = isFromInclusive();",
      "right" : "final boolean fromInclusive = isFromInclusive();",
      "info" : "VariableDeclarationStatement[58524-58572]:VariableDeclarationStatement[58524-58572]"
    }, {
      "left" : "final int ret = getKeyAnalyzer().compare(key, fromKey);",
      "right" : "final int ret = getKeyAnalyzer().compare(key, fromKey);",
      "info" : "VariableDeclarationStatement[58586-58641]:VariableDeclarationStatement[58586-58641]"
    }, {
      "left" : "if (fromInclusive || forceInclusive)",
      "right" : "if (fromInclusive || forceInclusive)",
      "info" : "IfStatement[58654-58739]:IfStatement[58654-58739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58691-58739]:Block[58691-58739]"
    }, {
      "left" : "return ret >= 0;",
      "right" : "return ret >= 0;",
      "info" : "ReturnStatement[58709-58725]:ReturnStatement[58709-58725]"
    }, {
      "left" : "return ret > 0;",
      "right" : "return ret > 0;",
      "info" : "ReturnStatement[58752-58767]:ReturnStatement[58752-58767]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[58899-58908]:Modifier[58899-58908]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58909-58916]:PrimitiveType[58909-58916]"
    }, {
      "left" : "inToRange",
      "right" : "inToRange",
      "info" : "SimpleName[58917-58926]:SimpleName[58917-58926]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[58927-58938]:SingleVariableDeclaration[58927-58938]"
    }, {
      "left" : "final boolean forceInclusive",
      "right" : "final boolean forceInclusive",
      "info" : "SingleVariableDeclaration[58940-58968]:SingleVariableDeclaration[58940-58968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58970-59269]:Block[58970-59269]"
    }, {
      "left" : "final K toKey = getToKey();",
      "right" : "final K toKey = getToKey();",
      "info" : "VariableDeclarationStatement[58984-59011]:VariableDeclarationStatement[58984-59011]"
    }, {
      "left" : "final boolean toInclusive = isToInclusive();",
      "right" : "final boolean toInclusive = isToInclusive();",
      "info" : "VariableDeclarationStatement[59024-59068]:VariableDeclarationStatement[59024-59068]"
    }, {
      "left" : "final int ret = getKeyAnalyzer().compare(key, toKey);",
      "right" : "final int ret = getKeyAnalyzer().compare(key, toKey);",
      "info" : "VariableDeclarationStatement[59082-59135]:VariableDeclarationStatement[59082-59135]"
    }, {
      "left" : "if (toInclusive || forceInclusive)",
      "right" : "if (toInclusive || forceInclusive)",
      "info" : "IfStatement[59148-59231]:IfStatement[59148-59231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59183-59231]:Block[59183-59231]"
    }, {
      "left" : "return ret <= 0;",
      "right" : "return ret <= 0;",
      "info" : "ReturnStatement[59201-59217]:ReturnStatement[59201-59217]"
    }, {
      "left" : "return ret < 0;",
      "right" : "return ret < 0;",
      "info" : "ReturnStatement[59244-59259]:ReturnStatement[59244-59259]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[59384-59393]:Modifier[59384-59393]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[59394-59402]:Modifier[59394-59402]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[59403-59418]:ParameterizedType[59403-59418]"
    }, {
      "left" : "createRangeMap",
      "right" : "createRangeMap",
      "info" : "SimpleName[59419-59433]:SimpleName[59419-59433]"
    }, {
      "left" : "K fromKey",
      "right" : "K fromKey",
      "info" : "SingleVariableDeclaration[59434-59443]:SingleVariableDeclaration[59434-59443]"
    }, {
      "left" : "boolean fromInclusive",
      "right" : "boolean fromInclusive",
      "info" : "SingleVariableDeclaration[59445-59466]:SingleVariableDeclaration[59445-59466]"
    }, {
      "left" : "K toKey",
      "right" : "K toKey",
      "info" : "SingleVariableDeclaration[59526-59533]:SingleVariableDeclaration[59526-59533]"
    }, {
      "left" : "boolean toInclusive",
      "right" : "boolean toInclusive",
      "info" : "SingleVariableDeclaration[59535-59554]:SingleVariableDeclaration[59535-59554]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59638-59645]:Modifier[59638-59645]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[59646-59651]:TYPE_DECLARATION_KIND[59646-59651]"
    }, {
      "left" : "RangeEntryMap",
      "right" : "RangeEntryMap",
      "info" : "SimpleName[59652-59665]:SimpleName[59652-59665]"
    }, {
      "left" : "RangeMap",
      "right" : "RangeMap",
      "info" : "SimpleType[59674-59682]:SimpleType[59674-59682]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60205-60214]:Modifier[60205-60214]"
    }, {
      "left" : "RangeEntryMap",
      "right" : "RangeEntryMap",
      "info" : "SimpleName[60215-60228]:SimpleName[60215-60228]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[60229-60244]:SingleVariableDeclaration[60229-60244]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[60246-60259]:SingleVariableDeclaration[60246-60259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60261-60317]:Block[60261-60317]"
    }, {
      "left" : "this(fromKey, true, toKey, false);",
      "right" : "this(fromKey, true, toKey, false);",
      "info" : "ConstructorInvocation[60274-60308]:ConstructorInvocation[60274-60308]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60391-60400]:Modifier[60391-60400]"
    }, {
      "left" : "RangeEntryMap",
      "right" : "RangeEntryMap",
      "info" : "SimpleName[60401-60414]:SimpleName[60401-60414]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[60415-60430]:SingleVariableDeclaration[60415-60430]"
    }, {
      "left" : "final boolean fromInclusive",
      "right" : "final boolean fromInclusive",
      "info" : "SingleVariableDeclaration[60432-60459]:SingleVariableDeclaration[60432-60459]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[60492-60505]:SingleVariableDeclaration[60492-60505]"
    }, {
      "left" : "final boolean toInclusive",
      "right" : "final boolean toInclusive",
      "info" : "SingleVariableDeclaration[60507-60532]:SingleVariableDeclaration[60507-60532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60534-61027]:Block[60534-61027]"
    }, {
      "left" : "if (fromKey == null && toKey == null)",
      "right" : "if (fromKey == null && toKey == null)",
      "info" : "IfStatement[60548-60678]:IfStatement[60548-60678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60586-60678]:Block[60586-60678]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have a from or to!\");",
      "right" : "throw new IllegalArgumentException(\"must have a from or to!\");",
      "info" : "ThrowStatement[60603-60665]:ThrowStatement[60603-60665]"
    }, {
      "left" : "if (fromKey != null && toKey != null && getKeyAnalyzer().compare(fromKey, toKey) > 0)",
      "right" : "if (fromKey != null && toKey != null && getKeyAnalyzer().compare(fromKey, toKey) > 0)",
      "info" : "IfStatement[60691-60861]:IfStatement[60691-60861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60777-60861]:Block[60777-60861]"
    }, {
      "left" : "throw new IllegalArgumentException(\"fromKey > toKey\");",
      "right" : "throw new IllegalArgumentException(\"fromKey > toKey\");",
      "info" : "ThrowStatement[60794-60848]:ThrowStatement[60794-60848]"
    }, {
      "left" : "this.fromKey = fromKey;",
      "right" : "this.fromKey = fromKey;",
      "info" : "ExpressionStatement[60874-60897]:ExpressionStatement[60874-60897]"
    }, {
      "left" : "this.fromInclusive = fromInclusive;",
      "right" : "this.fromInclusive = fromInclusive;",
      "info" : "ExpressionStatement[60909-60944]:ExpressionStatement[60909-60944]"
    }, {
      "left" : "this.toKey = toKey;",
      "right" : "this.toKey = toKey;",
      "info" : "ExpressionStatement[60956-60975]:ExpressionStatement[60956-60975]"
    }, {
      "left" : "this.toInclusive = toInclusive;",
      "right" : "this.toInclusive = toInclusive;",
      "info" : "ExpressionStatement[60987-61018]:ExpressionStatement[60987-61018]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[61036-61045]:MarkerAnnotation[61036-61045]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61050-61056]:Modifier[61050-61056]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[61057-61058]:SimpleType[61057-61058]"
    }, {
      "left" : "firstKey",
      "right" : "firstKey",
      "info" : "SimpleName[61059-61067]:SimpleName[61059-61067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61070-61605]:Block[61070-61605]"
    }, {
      "left" : "Map.Entry<K,V> e = null;",
      "right" : "Map.Entry<K,V> e = null;",
      "info" : "VariableDeclarationStatement[61083-61107]:VariableDeclarationStatement[61083-61107]"
    }, {
      "left" : "if (fromKey == null)",
      "right" : "if (fromKey == null)",
      "info" : "IfStatement[61119-61375]:IfStatement[61119-61375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61140-61187]:Block[61140-61187]"
    }, {
      "left" : "e = firstEntry();",
      "right" : "e = firstEntry();",
      "info" : "ExpressionStatement[61157-61174]:ExpressionStatement[61157-61174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61193-61375]:Block[61193-61375]"
    }, {
      "left" : "if (fromInclusive)",
      "right" : "if (fromInclusive)",
      "info" : "IfStatement[61210-61362]:IfStatement[61210-61362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61229-61293]:Block[61229-61293]"
    }, {
      "left" : "e = ceilingEntry(fromKey);",
      "right" : "e = ceilingEntry(fromKey);",
      "info" : "ExpressionStatement[61250-61276]:ExpressionStatement[61250-61276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61299-61362]:Block[61299-61362]"
    }, {
      "left" : "e = higherEntry(fromKey);",
      "right" : "e = higherEntry(fromKey);",
      "info" : "ExpressionStatement[61320-61345]:ExpressionStatement[61320-61345]"
    }, {
      "left" : "final K first = e != null ? e.getKey() : null;",
      "right" : "final K first = e != null ? e.getKey() : null;",
      "info" : "VariableDeclarationStatement[61388-61434]:VariableDeclarationStatement[61388-61434]"
    }, {
      "left" : "if (e == null || toKey != null && !inToRange(first, false))",
      "right" : "if (e == null || toKey != null && !inToRange(first, false))",
      "info" : "IfStatement[61446-61571]:IfStatement[61446-61571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61506-61571]:Block[61506-61571]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[61523-61558]:ThrowStatement[61523-61558]"
    }, {
      "left" : "return first;",
      "right" : "return first;",
      "info" : "ReturnStatement[61583-61596]:ReturnStatement[61583-61596]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[61614-61623]:MarkerAnnotation[61614-61623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61628-61634]:Modifier[61628-61634]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[61635-61636]:SimpleType[61635-61636]"
    }, {
      "left" : "lastKey",
      "right" : "lastKey",
      "info" : "SimpleName[61637-61644]:SimpleName[61637-61644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61647-62164]:Block[61647-62164]"
    }, {
      "left" : "Map.Entry<K,V> e;",
      "right" : "Map.Entry<K,V> e;",
      "info" : "VariableDeclarationStatement[61660-61677]:VariableDeclarationStatement[61660-61677]"
    }, {
      "left" : "if (toKey == null)",
      "right" : "if (toKey == null)",
      "info" : "IfStatement[61689-61933]:IfStatement[61689-61933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61708-61754]:Block[61708-61754]"
    }, {
      "left" : "e = lastEntry();",
      "right" : "e = lastEntry();",
      "info" : "ExpressionStatement[61725-61741]:ExpressionStatement[61725-61741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61760-61933]:Block[61760-61933]"
    }, {
      "left" : "if (toInclusive)",
      "right" : "if (toInclusive)",
      "info" : "IfStatement[61777-61920]:IfStatement[61777-61920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61794-61854]:Block[61794-61854]"
    }, {
      "left" : "e = floorEntry(toKey);",
      "right" : "e = floorEntry(toKey);",
      "info" : "ExpressionStatement[61815-61837]:ExpressionStatement[61815-61837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61860-61920]:Block[61860-61920]"
    }, {
      "left" : "e = lowerEntry(toKey);",
      "right" : "e = lowerEntry(toKey);",
      "info" : "ExpressionStatement[61881-61903]:ExpressionStatement[61881-61903]"
    }, {
      "left" : "final K last = e != null ? e.getKey() : null;",
      "right" : "final K last = e != null ? e.getKey() : null;",
      "info" : "VariableDeclarationStatement[61946-61991]:VariableDeclarationStatement[61946-61991]"
    }, {
      "left" : "if (e == null || fromKey != null && !inFromRange(last, false))",
      "right" : "if (e == null || fromKey != null && !inFromRange(last, false))",
      "info" : "IfStatement[62003-62131]:IfStatement[62003-62131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62066-62131]:Block[62066-62131]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[62083-62118]:ThrowStatement[62083-62118]"
    }, {
      "left" : "return last;",
      "right" : "return last;",
      "info" : "ReturnStatement[62143-62155]:ReturnStatement[62143-62155]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62173-62182]:MarkerAnnotation[62173-62182]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[62190-62199]:Modifier[62190-62199]"
    }, {
      "left" : "Set<Entry<K, V>>",
      "right" : "Set<Entry<K, V>>",
      "info" : "ParameterizedType[62200-62216]:ParameterizedType[62200-62216]"
    }, {
      "left" : "createEntrySet",
      "right" : "createEntrySet",
      "info" : "SimpleName[62217-62231]:SimpleName[62217-62231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62234-62287]:Block[62234-62287]"
    }, {
      "left" : "return new RangeEntrySet(this);",
      "right" : "return new RangeEntrySet(this);",
      "info" : "ReturnStatement[62247-62278]:ReturnStatement[62247-62278]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62296-62305]:MarkerAnnotation[62296-62305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62313-62319]:Modifier[62313-62319]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[62320-62321]:SimpleType[62320-62321]"
    }, {
      "left" : "getFromKey",
      "right" : "getFromKey",
      "info" : "SimpleName[62322-62332]:SimpleName[62322-62332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62335-62372]:Block[62335-62372]"
    }, {
      "left" : "return fromKey;",
      "right" : "return fromKey;",
      "info" : "ReturnStatement[62348-62363]:ReturnStatement[62348-62363]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62381-62390]:MarkerAnnotation[62381-62390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62398-62404]:Modifier[62398-62404]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[62405-62406]:SimpleType[62405-62406]"
    }, {
      "left" : "getToKey",
      "right" : "getToKey",
      "info" : "SimpleName[62407-62415]:SimpleName[62407-62415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62418-62453]:Block[62418-62453]"
    }, {
      "left" : "return toKey;",
      "right" : "return toKey;",
      "info" : "ReturnStatement[62431-62444]:ReturnStatement[62431-62444]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62462-62471]:MarkerAnnotation[62462-62471]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62479-62485]:Modifier[62479-62485]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62486-62493]:PrimitiveType[62486-62493]"
    }, {
      "left" : "isFromInclusive",
      "right" : "isFromInclusive",
      "info" : "SimpleName[62494-62509]:SimpleName[62494-62509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62512-62555]:Block[62512-62555]"
    }, {
      "left" : "return fromInclusive;",
      "right" : "return fromInclusive;",
      "info" : "ReturnStatement[62525-62546]:ReturnStatement[62525-62546]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62564-62573]:MarkerAnnotation[62564-62573]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62581-62587]:Modifier[62581-62587]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62588-62595]:PrimitiveType[62588-62595]"
    }, {
      "left" : "isToInclusive",
      "right" : "isToInclusive",
      "info" : "SimpleName[62596-62609]:SimpleName[62596-62609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62612-62653]:Block[62612-62653]"
    }, {
      "left" : "return toInclusive;",
      "right" : "return toInclusive;",
      "info" : "ReturnStatement[62625-62644]:ReturnStatement[62625-62644]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62662-62671]:MarkerAnnotation[62662-62671]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[62679-62688]:Modifier[62679-62688]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[62689-62704]:ParameterizedType[62689-62704]"
    }, {
      "left" : "createRangeMap",
      "right" : "createRangeMap",
      "info" : "SimpleName[62705-62719]:SimpleName[62705-62719]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[62720-62735]:SingleVariableDeclaration[62720-62735]"
    }, {
      "left" : "final boolean fromInclusive",
      "right" : "final boolean fromInclusive",
      "info" : "SingleVariableDeclaration[62737-62764]:SingleVariableDeclaration[62737-62764]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[62814-62827]:SingleVariableDeclaration[62814-62827]"
    }, {
      "left" : "final boolean toInclusive",
      "right" : "final boolean toInclusive",
      "info" : "SingleVariableDeclaration[62829-62854]:SingleVariableDeclaration[62829-62854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62856-62947]:Block[62856-62947]"
    }, {
      "left" : "return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);",
      "right" : "return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);",
      "info" : "ReturnStatement[62869-62938]:ReturnStatement[62869-62938]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63023-63030]:Modifier[63023-63030]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[63031-63036]:TYPE_DECLARATION_KIND[63031-63036]"
    }, {
      "left" : "RangeEntrySet",
      "right" : "RangeEntrySet",
      "info" : "SimpleName[63037-63050]:SimpleName[63037-63050]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63300-63306]:Modifier[63300-63306]"
    }, {
      "left" : "RangeEntrySet",
      "right" : "RangeEntrySet",
      "info" : "SimpleName[63307-63320]:SimpleName[63307-63320]"
    }, {
      "left" : "final RangeMap delegate",
      "right" : "final RangeMap delegate",
      "info" : "SingleVariableDeclaration[63321-63344]:SingleVariableDeclaration[63321-63344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63346-63506]:Block[63346-63506]"
    }, {
      "left" : "if (delegate == null)",
      "right" : "if (delegate == null)",
      "info" : "IfStatement[63360-63457]:IfStatement[63360-63457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63382-63457]:Block[63382-63457]"
    }, {
      "left" : "throw new NullPointerException(\"delegate\");",
      "right" : "throw new NullPointerException(\"delegate\");",
      "info" : "ThrowStatement[63400-63443]:ThrowStatement[63400-63443]"
    }, {
      "left" : "this.delegate = delegate;",
      "right" : "this.delegate = delegate;",
      "info" : "ExpressionStatement[63471-63496]:ExpressionStatement[63471-63496]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63516-63525]:MarkerAnnotation[63516-63525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63534-63540]:Modifier[63534-63540]"
    }, {
      "left" : "Iterator<Map.Entry<K, V>>",
      "right" : "Iterator<Map.Entry<K, V>>",
      "info" : "ParameterizedType[63541-63566]:ParameterizedType[63541-63566]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[63567-63575]:SimpleName[63567-63575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63578-64074]:Block[63578-64074]"
    }, {
      "left" : "final K fromKey = delegate.getFromKey();",
      "right" : "final K fromKey = delegate.getFromKey();",
      "info" : "VariableDeclarationStatement[63592-63632]:VariableDeclarationStatement[63592-63632]"
    }, {
      "left" : "final K toKey = delegate.getToKey();",
      "right" : "final K toKey = delegate.getToKey();",
      "info" : "VariableDeclarationStatement[63645-63681]:VariableDeclarationStatement[63645-63681]"
    }, {
      "left" : "TrieEntry<K, V> first = null;",
      "right" : "TrieEntry<K, V> first = null;",
      "info" : "VariableDeclarationStatement[63695-63724]:VariableDeclarationStatement[63695-63724]"
    }, {
      "left" : "if (fromKey == null)",
      "right" : "if (fromKey == null)",
      "info" : "IfStatement[63737-63879]:IfStatement[63737-63879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63758-63811]:Block[63758-63811]"
    }, {
      "left" : "first = firstEntry();",
      "right" : "first = firstEntry();",
      "info" : "ExpressionStatement[63776-63797]:ExpressionStatement[63776-63797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63817-63879]:Block[63817-63879]"
    }, {
      "left" : "first = ceilingEntry(fromKey);",
      "right" : "first = ceilingEntry(fromKey);",
      "info" : "ExpressionStatement[63835-63865]:ExpressionStatement[63835-63865]"
    }, {
      "left" : "TrieEntry<K, V> last = null;",
      "right" : "TrieEntry<K, V> last = null;",
      "info" : "VariableDeclarationStatement[63893-63921]:VariableDeclarationStatement[63893-63921]"
    }, {
      "left" : "if (toKey != null)",
      "right" : "if (toKey != null)",
      "info" : "IfStatement[63934-64012]:IfStatement[63934-64012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63953-64012]:Block[63953-64012]"
    }, {
      "left" : "last = ceilingEntry(toKey);",
      "right" : "last = ceilingEntry(toKey);",
      "info" : "ExpressionStatement[63971-63998]:ExpressionStatement[63971-63998]"
    }, {
      "left" : "return new EntryIterator(first, last);",
      "right" : "return new EntryIterator(first, last);",
      "info" : "ReturnStatement[64026-64064]:ReturnStatement[64026-64064]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[64084-64093]:MarkerAnnotation[64084-64093]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64102-64108]:Modifier[64102-64108]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[64109-64112]:PrimitiveType[64109-64112]"
    }, {
      "left" : "size",
      "right" : "size",
      "info" : "SimpleName[64113-64117]:SimpleName[64113-64117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64120-64486]:Block[64120-64486]"
    }, {
      "left" : "if (size == -1 || expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "right" : "if (size == -1 || expectedModCount != AbstractPatriciaTrie.this.modCount)",
      "info" : "IfStatement[64134-64451]:IfStatement[64134-64451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64208-64451]:Block[64208-64451]"
    }, {
      "left" : "size = 0;",
      "right" : "size = 0;",
      "info" : "ExpressionStatement[64226-64235]:ExpressionStatement[64226-64235]"
    }, {
      "left" : "for (final Iterator<?> it = iterator(); it.hasNext(); it.next())",
      "right" : "for (final Iterator<?> it = iterator(); it.hasNext(); it.next())",
      "info" : "ForStatement[64253-64365]:ForStatement[64253-64365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64318-64365]:Block[64318-64365]"
    }, {
      "left" : "++size;",
      "right" : "++size;",
      "info" : "ExpressionStatement[64340-64347]:ExpressionStatement[64340-64347]"
    }, {
      "left" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "right" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "info" : "ExpressionStatement[64383-64437]:ExpressionStatement[64383-64437]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[64464-64476]:ReturnStatement[64464-64476]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[64496-64505]:MarkerAnnotation[64496-64505]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64514-64520]:Modifier[64514-64520]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64521-64528]:PrimitiveType[64521-64528]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[64529-64536]:SimpleName[64529-64536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64539-64592]:Block[64539-64592]"
    }, {
      "left" : "return !iterator().hasNext();",
      "right" : "return !iterator().hasNext();",
      "info" : "ReturnStatement[64553-64582]:ReturnStatement[64553-64582]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[64602-64632]:SingleMemberAnnotation[64602-64632]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[64641-64650]:MarkerAnnotation[64641-64650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64659-64665]:Modifier[64659-64665]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64666-64673]:PrimitiveType[64666-64673]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[64674-64682]:SimpleName[64674-64682]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[64683-64697]:SingleVariableDeclaration[64683-64697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64699-65127]:Block[64699-65127]"
    }, {
      "left" : "if (!(o instanceof Map.Entry))",
      "right" : "if (!(o instanceof Map.Entry))",
      "info" : "IfStatement[64713-64789]:IfStatement[64713-64789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64744-64789]:Block[64744-64789]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64762-64775]:ReturnStatement[64762-64775]"
    }, {
      "left" : "final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;",
      "right" : "final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;",
      "info" : "VariableDeclarationStatement[64803-64853]:VariableDeclarationStatement[64803-64853]"
    }, {
      "left" : "final K key = entry.getKey();",
      "right" : "final K key = entry.getKey();",
      "info" : "VariableDeclarationStatement[64866-64895]:VariableDeclarationStatement[64866-64895]"
    }, {
      "left" : "if (!delegate.inRange(key))",
      "right" : "if (!delegate.inRange(key))",
      "info" : "IfStatement[64908-64981]:IfStatement[64908-64981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64936-64981]:Block[64936-64981]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64954-64967]:ReturnStatement[64954-64967]"
    }, {
      "left" : "final TrieEntry<K, V> node = getEntry(key);",
      "right" : "final TrieEntry<K, V> node = getEntry(key);",
      "info" : "VariableDeclarationStatement[64995-65038]:VariableDeclarationStatement[64995-65038]"
    }, {
      "left" : "return node != null && compare(node.getValue(), entry.getValue());",
      "right" : "return node != null && compare(node.getValue(), entry.getValue());",
      "info" : "ReturnStatement[65051-65117]:ReturnStatement[65051-65117]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[65137-65167]:SingleMemberAnnotation[65137-65167]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65176-65185]:MarkerAnnotation[65176-65185]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65194-65200]:Modifier[65194-65200]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65201-65208]:PrimitiveType[65201-65208]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[65209-65215]:SimpleName[65209-65215]"
    }, {
      "left" : "final Object o",
      "right" : "final Object o",
      "info" : "SingleVariableDeclaration[65216-65230]:SingleVariableDeclaration[65216-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65232-65763]:Block[65232-65763]"
    }, {
      "left" : "if (!(o instanceof Map.Entry))",
      "right" : "if (!(o instanceof Map.Entry))",
      "info" : "IfStatement[65246-65322]:IfStatement[65246-65322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65277-65322]:Block[65277-65322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65295-65308]:ReturnStatement[65295-65308]"
    }, {
      "left" : "final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;",
      "right" : "final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;",
      "info" : "VariableDeclarationStatement[65336-65386]:VariableDeclarationStatement[65336-65386]"
    }, {
      "left" : "final K key = entry.getKey();",
      "right" : "final K key = entry.getKey();",
      "info" : "VariableDeclarationStatement[65399-65428]:VariableDeclarationStatement[65399-65428]"
    }, {
      "left" : "if (!delegate.inRange(key))",
      "right" : "if (!delegate.inRange(key))",
      "info" : "IfStatement[65441-65514]:IfStatement[65441-65514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65469-65514]:Block[65469-65514]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65487-65500]:ReturnStatement[65487-65500]"
    }, {
      "left" : "final TrieEntry<K, V> node = getEntry(key);",
      "right" : "final TrieEntry<K, V> node = getEntry(key);",
      "info" : "VariableDeclarationStatement[65528-65571]:VariableDeclarationStatement[65528-65571]"
    }, {
      "left" : "if (node != null && compare(node.getValue(), entry.getValue()))",
      "right" : "if (node != null && compare(node.getValue(), entry.getValue()))",
      "info" : "IfStatement[65584-65727]:IfStatement[65584-65727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65648-65727]:Block[65648-65727]"
    }, {
      "left" : "removeEntry(node);",
      "right" : "removeEntry(node);",
      "info" : "ExpressionStatement[65666-65684]:ExpressionStatement[65666-65684]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65701-65713]:ReturnStatement[65701-65713]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65740-65753]:ReturnStatement[65740-65753]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65856-65863]:Modifier[65856-65863]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[65864-65869]:Modifier[65864-65869]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[65870-65875]:TYPE_DECLARATION_KIND[65870-65875]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "SimpleName[65876-65889]:SimpleName[65876-65889]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66064-66071]:Modifier[66064-66071]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "SimpleName[66072-66085]:SimpleName[66072-66085]"
    }, {
      "left" : "final TrieEntry<K,V> first",
      "right" : "final TrieEntry<K,V> first",
      "info" : "SingleVariableDeclaration[66086-66112]:SingleVariableDeclaration[66086-66112]"
    }, {
      "left" : "final TrieEntry<K,V> last",
      "right" : "final TrieEntry<K,V> last",
      "info" : "SingleVariableDeclaration[66114-66139]:SingleVariableDeclaration[66114-66139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66141-66258]:Block[66141-66258]"
    }, {
      "left" : "super(first);",
      "right" : "super(first);",
      "info" : "SuperConstructorInvocation[66159-66172]:SuperConstructorInvocation[66159-66172]"
    }, {
      "left" : "this.excludedKey = last != null ? last.getKey() : null;",
      "right" : "this.excludedKey = last != null ? last.getKey() : null;",
      "info" : "ExpressionStatement[66189-66244]:ExpressionStatement[66189-66244]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[66272-66281]:MarkerAnnotation[66272-66281]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66294-66300]:Modifier[66294-66300]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66301-66308]:PrimitiveType[66301-66308]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[66309-66316]:SimpleName[66309-66316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66319-66406]:Block[66319-66406]"
    }, {
      "left" : "return next != null && !compare(next.key, excludedKey);",
      "right" : "return next != null && !compare(next.key, excludedKey);",
      "info" : "ReturnStatement[66337-66392]:ReturnStatement[66337-66392]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[66420-66429]:MarkerAnnotation[66420-66429]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66442-66448]:Modifier[66442-66448]"
    }, {
      "left" : "Map.Entry<K,V>",
      "right" : "Map.Entry<K,V>",
      "info" : "ParameterizedType[66449-66463]:ParameterizedType[66449-66463]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[66464-66468]:SimpleName[66464-66468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66471-66666]:Block[66471-66666]"
    }, {
      "left" : "if (next == null || compare(next.key, excludedKey))",
      "right" : "if (next == null || compare(next.key, excludedKey))",
      "info" : "IfStatement[66489-66616]:IfStatement[66489-66616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66541-66616]:Block[66541-66616]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[66563-66598]:ThrowStatement[66563-66598]"
    }, {
      "left" : "return nextEntry();",
      "right" : "return nextEntry();",
      "info" : "ReturnStatement[66633-66652]:ReturnStatement[66633-66652]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66765-66772]:Modifier[66765-66772]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[66773-66778]:TYPE_DECLARATION_KIND[66773-66778]"
    }, {
      "left" : "PrefixRangeMap",
      "right" : "PrefixRangeMap",
      "info" : "SimpleName[66779-66793]:SimpleName[66779-66793]"
    }, {
      "left" : "RangeMap",
      "right" : "RangeMap",
      "info" : "SimpleType[66802-66810]:SimpleType[66802-66810]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67159-67166]:Modifier[67159-67166]"
    }, {
      "left" : "PrefixRangeMap",
      "right" : "PrefixRangeMap",
      "info" : "SimpleName[67167-67181]:SimpleName[67167-67181]"
    }, {
      "left" : "final K prefix",
      "right" : "final K prefix",
      "info" : "SingleVariableDeclaration[67182-67196]:SingleVariableDeclaration[67182-67196]"
    }, {
      "left" : "final int offsetInBits",
      "right" : "final int offsetInBits",
      "info" : "SingleVariableDeclaration[67198-67220]:SingleVariableDeclaration[67198-67220]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[67222-67244]:SingleVariableDeclaration[67222-67244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67246-67383]:Block[67246-67383]"
    }, {
      "left" : "this.prefix = prefix;",
      "right" : "this.prefix = prefix;",
      "info" : "ExpressionStatement[67260-67281]:ExpressionStatement[67260-67281]"
    }, {
      "left" : "this.offsetInBits = offsetInBits;",
      "right" : "this.offsetInBits = offsetInBits;",
      "info" : "ExpressionStatement[67294-67327]:ExpressionStatement[67294-67327]"
    }, {
      "left" : "this.lengthInBits = lengthInBits;",
      "right" : "this.lengthInBits = lengthInBits;",
      "info" : "ExpressionStatement[67340-67373]:ExpressionStatement[67340-67373]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67665-67672]:Modifier[67665-67672]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[67673-67676]:PrimitiveType[67673-67676]"
    }, {
      "left" : "fixup",
      "right" : "fixup",
      "info" : "SimpleName[67677-67682]:SimpleName[67677-67682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67685-68941]:Block[67685-68941]"
    }, {
      "left" : "if (size == - 1 || AbstractPatriciaTrie.this.modCount != expectedModCount)",
      "right" : "if (size == - 1 || AbstractPatriciaTrie.this.modCount != expectedModCount)",
      "info" : "IfStatement[67775-68905]:IfStatement[67775-68905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67850-68905]:Block[67850-68905]"
    }, {
      "left" : "final Iterator<Map.Entry<K, V>> it = super.entrySet().iterator();",
      "right" : "final Iterator<Map.Entry<K, V>> it = super.entrySet().iterator();",
      "info" : "VariableDeclarationStatement[67868-67933]:VariableDeclarationStatement[67868-67933]"
    }, {
      "left" : "size = 0;",
      "right" : "size = 0;",
      "info" : "ExpressionStatement[67950-67959]:ExpressionStatement[67950-67959]"
    }, {
      "left" : "Map.Entry<K, V> entry = null;",
      "right" : "Map.Entry<K, V> entry = null;",
      "info" : "VariableDeclarationStatement[67977-68006]:VariableDeclarationStatement[67977-68006]"
    }, {
      "left" : "if (it.hasNext())",
      "right" : "if (it.hasNext())",
      "info" : "IfStatement[68023-68129]:IfStatement[68023-68129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68041-68129]:Block[68041-68129]"
    }, {
      "left" : "entry = it.next();",
      "right" : "entry = it.next();",
      "info" : "ExpressionStatement[68063-68081]:ExpressionStatement[68063-68081]"
    }, {
      "left" : "size = 1;",
      "right" : "size = 1;",
      "info" : "ExpressionStatement[68102-68111]:ExpressionStatement[68102-68111]"
    }, {
      "left" : "fromKey = entry == null ? null : entry.getKey();",
      "right" : "fromKey = entry == null ? null : entry.getKey();",
      "info" : "ExpressionStatement[68147-68195]:ExpressionStatement[68147-68195]"
    }, {
      "left" : "if (fromKey != null)",
      "right" : "if (fromKey != null)",
      "info" : "IfStatement[68212-68410]:IfStatement[68212-68410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68233-68410]:Block[68233-68410]"
    }, {
      "left" : "final TrieEntry<K, V> prior = previousEntry((TrieEntry<K, V>)entry);",
      "right" : "final TrieEntry<K, V> prior = previousEntry((TrieEntry<K, V>)entry);",
      "info" : "VariableDeclarationStatement[68255-68323]:VariableDeclarationStatement[68255-68323]"
    }, {
      "left" : "fromKey = prior == null ? null : prior.getKey();",
      "right" : "fromKey = prior == null ? null : prior.getKey();",
      "info" : "ExpressionStatement[68344-68392]:ExpressionStatement[68344-68392]"
    }, {
      "left" : "toKey = fromKey;",
      "right" : "toKey = fromKey;",
      "info" : "ExpressionStatement[68428-68444]:ExpressionStatement[68428-68444]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[68462-68569]:WhileStatement[68462-68569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68483-68569]:Block[68483-68569]"
    }, {
      "left" : "++size;",
      "right" : "++size;",
      "info" : "ExpressionStatement[68505-68512]:ExpressionStatement[68505-68512]"
    }, {
      "left" : "entry = it.next();",
      "right" : "entry = it.next();",
      "info" : "ExpressionStatement[68533-68551]:ExpressionStatement[68533-68551]"
    }, {
      "left" : "toKey = entry == null ? null : entry.getKey();",
      "right" : "toKey = entry == null ? null : entry.getKey();",
      "info" : "ExpressionStatement[68587-68633]:ExpressionStatement[68587-68633]"
    }, {
      "left" : "if (toKey != null)",
      "right" : "if (toKey != null)",
      "info" : "IfStatement[68651-68819]:IfStatement[68651-68819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68670-68819]:Block[68670-68819]"
    }, {
      "left" : "entry = nextEntry((TrieEntry<K, V>)entry);",
      "right" : "entry = nextEntry((TrieEntry<K, V>)entry);",
      "info" : "ExpressionStatement[68692-68734]:ExpressionStatement[68692-68734]"
    }, {
      "left" : "toKey = entry == null ? null : entry.getKey();",
      "right" : "toKey = entry == null ? null : entry.getKey();",
      "info" : "ExpressionStatement[68755-68801]:ExpressionStatement[68755-68801]"
    }, {
      "left" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "right" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "info" : "ExpressionStatement[68837-68891]:ExpressionStatement[68837-68891]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[68919-68931]:ReturnStatement[68919-68931]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[68951-68960]:MarkerAnnotation[68951-68960]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68969-68975]:Modifier[68969-68975]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[68976-68977]:SimpleType[68976-68977]"
    }, {
      "left" : "firstKey",
      "right" : "firstKey",
      "info" : "SimpleName[68978-68986]:SimpleName[68978-68986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68989-69460]:Block[68989-69460]"
    }, {
      "left" : "fixup();",
      "right" : "fixup();",
      "info" : "ExpressionStatement[69003-69011]:ExpressionStatement[69003-69011]"
    }, {
      "left" : "Map.Entry<K,V> e = null;",
      "right" : "Map.Entry<K,V> e = null;",
      "info" : "VariableDeclarationStatement[69025-69049]:VariableDeclarationStatement[69025-69049]"
    }, {
      "left" : "if (fromKey == null)",
      "right" : "if (fromKey == null)",
      "info" : "IfStatement[69062-69195]:IfStatement[69062-69195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69083-69132]:Block[69083-69132]"
    }, {
      "left" : "e = firstEntry();",
      "right" : "e = firstEntry();",
      "info" : "ExpressionStatement[69101-69118]:ExpressionStatement[69101-69118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69138-69195]:Block[69138-69195]"
    }, {
      "left" : "e = higherEntry(fromKey);",
      "right" : "e = higherEntry(fromKey);",
      "info" : "ExpressionStatement[69156-69181]:ExpressionStatement[69156-69181]"
    }, {
      "left" : "final K first = e != null ? e.getKey() : null;",
      "right" : "final K first = e != null ? e.getKey() : null;",
      "info" : "VariableDeclarationStatement[69209-69255]:VariableDeclarationStatement[69209-69255]"
    }, {
      "left" : "if (e == null || !getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, first))",
      "right" : "if (e == null || !getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, first))",
      "info" : "IfStatement[69268-69423]:IfStatement[69268-69423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69356-69423]:Block[69356-69423]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[69374-69409]:ThrowStatement[69374-69409]"
    }, {
      "left" : "return first;",
      "right" : "return first;",
      "info" : "ReturnStatement[69437-69450]:ReturnStatement[69437-69450]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[69470-69479]:MarkerAnnotation[69470-69479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[69488-69494]:Modifier[69488-69494]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[69495-69496]:SimpleType[69495-69496]"
    }, {
      "left" : "lastKey",
      "right" : "lastKey",
      "info" : "SimpleName[69497-69504]:SimpleName[69497-69504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69507-69969]:Block[69507-69969]"
    }, {
      "left" : "fixup();",
      "right" : "fixup();",
      "info" : "ExpressionStatement[69521-69529]:ExpressionStatement[69521-69529]"
    }, {
      "left" : "Map.Entry<K,V> e = null;",
      "right" : "Map.Entry<K,V> e = null;",
      "info" : "VariableDeclarationStatement[69543-69567]:VariableDeclarationStatement[69543-69567]"
    }, {
      "left" : "if (toKey == null)",
      "right" : "if (toKey == null)",
      "info" : "IfStatement[69580-69707]:IfStatement[69580-69707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69599-69647]:Block[69599-69647]"
    }, {
      "left" : "e = lastEntry();",
      "right" : "e = lastEntry();",
      "info" : "ExpressionStatement[69617-69633]:ExpressionStatement[69617-69633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69653-69707]:Block[69653-69707]"
    }, {
      "left" : "e = lowerEntry(toKey);",
      "right" : "e = lowerEntry(toKey);",
      "info" : "ExpressionStatement[69671-69693]:ExpressionStatement[69671-69693]"
    }, {
      "left" : "final K last = e != null ? e.getKey() : null;",
      "right" : "final K last = e != null ? e.getKey() : null;",
      "info" : "VariableDeclarationStatement[69721-69766]:VariableDeclarationStatement[69721-69766]"
    }, {
      "left" : "if (e == null || !getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, last))",
      "right" : "if (e == null || !getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, last))",
      "info" : "IfStatement[69779-69933]:IfStatement[69779-69933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69866-69933]:Block[69866-69933]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[69884-69919]:ThrowStatement[69884-69919]"
    }, {
      "left" : "return last;",
      "right" : "return last;",
      "info" : "ReturnStatement[69947-69959]:ReturnStatement[69947-69959]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70097-70106]:MarkerAnnotation[70097-70106]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70115-70124]:Modifier[70115-70124]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[70125-70132]:PrimitiveType[70125-70132]"
    }, {
      "left" : "inRange",
      "right" : "inRange",
      "info" : "SimpleName[70133-70140]:SimpleName[70133-70140]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[70141-70152]:SingleVariableDeclaration[70141-70152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70154-70252]:Block[70154-70252]"
    }, {
      "left" : "return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);",
      "right" : "return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);",
      "info" : "ReturnStatement[70168-70242]:ReturnStatement[70168-70242]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70331-70340]:MarkerAnnotation[70331-70340]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70349-70358]:Modifier[70349-70358]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[70359-70366]:PrimitiveType[70359-70366]"
    }, {
      "left" : "inRange2",
      "right" : "inRange2",
      "info" : "SimpleName[70367-70375]:SimpleName[70367-70375]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[70376-70387]:SingleVariableDeclaration[70376-70387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70389-70433]:Block[70389-70433]"
    }, {
      "left" : "return inRange(key);",
      "right" : "return inRange(key);",
      "info" : "ReturnStatement[70403-70423]:ReturnStatement[70403-70423]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70563-70572]:MarkerAnnotation[70563-70572]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70581-70590]:Modifier[70581-70590]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[70591-70598]:PrimitiveType[70591-70598]"
    }, {
      "left" : "inFromRange",
      "right" : "inFromRange",
      "info" : "SimpleName[70599-70610]:SimpleName[70599-70610]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[70611-70622]:SingleVariableDeclaration[70611-70622]"
    }, {
      "left" : "final boolean forceInclusive",
      "right" : "final boolean forceInclusive",
      "info" : "SingleVariableDeclaration[70624-70652]:SingleVariableDeclaration[70624-70652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70654-70752]:Block[70654-70752]"
    }, {
      "left" : "return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);",
      "right" : "return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);",
      "info" : "ReturnStatement[70668-70742]:ReturnStatement[70668-70742]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70880-70889]:MarkerAnnotation[70880-70889]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70898-70907]:Modifier[70898-70907]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[70908-70915]:PrimitiveType[70908-70915]"
    }, {
      "left" : "inToRange",
      "right" : "inToRange",
      "info" : "SimpleName[70916-70925]:SimpleName[70916-70925]"
    }, {
      "left" : "final K key",
      "right" : "final K key",
      "info" : "SingleVariableDeclaration[70926-70937]:SingleVariableDeclaration[70926-70937]"
    }, {
      "left" : "final boolean forceInclusive",
      "right" : "final boolean forceInclusive",
      "info" : "SingleVariableDeclaration[70939-70967]:SingleVariableDeclaration[70939-70967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70969-71067]:Block[70969-71067]"
    }, {
      "left" : "return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);",
      "right" : "return getKeyAnalyzer().isPrefix(prefix, offsetInBits, lengthInBits, key);",
      "info" : "ReturnStatement[70983-71057]:ReturnStatement[70983-71057]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71077-71086]:MarkerAnnotation[71077-71086]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[71095-71104]:Modifier[71095-71104]"
    }, {
      "left" : "Set<Map.Entry<K, V>>",
      "right" : "Set<Map.Entry<K, V>>",
      "info" : "ParameterizedType[71105-71125]:ParameterizedType[71105-71125]"
    }, {
      "left" : "createEntrySet",
      "right" : "createEntrySet",
      "info" : "SimpleName[71126-71140]:SimpleName[71126-71140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71143-71204]:Block[71143-71204]"
    }, {
      "left" : "return new PrefixRangeEntrySet(this);",
      "right" : "return new PrefixRangeEntrySet(this);",
      "info" : "ReturnStatement[71157-71194]:ReturnStatement[71157-71194]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71214-71223]:MarkerAnnotation[71214-71223]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71232-71238]:Modifier[71232-71238]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[71239-71240]:SimpleType[71239-71240]"
    }, {
      "left" : "getFromKey",
      "right" : "getFromKey",
      "info" : "SimpleName[71241-71251]:SimpleName[71241-71251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71254-71293]:Block[71254-71293]"
    }, {
      "left" : "return fromKey;",
      "right" : "return fromKey;",
      "info" : "ReturnStatement[71268-71283]:ReturnStatement[71268-71283]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71303-71312]:MarkerAnnotation[71303-71312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71321-71327]:Modifier[71321-71327]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[71328-71329]:SimpleType[71328-71329]"
    }, {
      "left" : "getToKey",
      "right" : "getToKey",
      "info" : "SimpleName[71330-71338]:SimpleName[71330-71338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71341-71378]:Block[71341-71378]"
    }, {
      "left" : "return toKey;",
      "right" : "return toKey;",
      "info" : "ReturnStatement[71355-71368]:ReturnStatement[71355-71368]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71388-71397]:MarkerAnnotation[71388-71397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71406-71412]:Modifier[71406-71412]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[71413-71420]:PrimitiveType[71413-71420]"
    }, {
      "left" : "isFromInclusive",
      "right" : "isFromInclusive",
      "info" : "SimpleName[71421-71436]:SimpleName[71421-71436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71439-71476]:Block[71439-71476]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71453-71466]:ReturnStatement[71453-71466]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71486-71495]:MarkerAnnotation[71486-71495]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71504-71510]:Modifier[71504-71510]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[71511-71518]:PrimitiveType[71511-71518]"
    }, {
      "left" : "isToInclusive",
      "right" : "isToInclusive",
      "info" : "SimpleName[71519-71532]:SimpleName[71519-71532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71535-71572]:Block[71535-71572]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71549-71562]:ReturnStatement[71549-71562]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71582-71591]:MarkerAnnotation[71582-71591]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[71600-71609]:Modifier[71600-71609]"
    }, {
      "left" : "SortedMap<K, V>",
      "right" : "SortedMap<K, V>",
      "info" : "ParameterizedType[71610-71625]:ParameterizedType[71610-71625]"
    }, {
      "left" : "createRangeMap",
      "right" : "createRangeMap",
      "info" : "SimpleName[71626-71640]:SimpleName[71626-71640]"
    }, {
      "left" : "final K fromKey",
      "right" : "final K fromKey",
      "info" : "SingleVariableDeclaration[71641-71656]:SingleVariableDeclaration[71641-71656]"
    }, {
      "left" : "final boolean fromInclusive",
      "right" : "final boolean fromInclusive",
      "info" : "SingleVariableDeclaration[71658-71685]:SingleVariableDeclaration[71658-71685]"
    }, {
      "left" : "final K toKey",
      "right" : "final K toKey",
      "info" : "SingleVariableDeclaration[71736-71749]:SingleVariableDeclaration[71736-71749]"
    }, {
      "left" : "final boolean toInclusive",
      "right" : "final boolean toInclusive",
      "info" : "SingleVariableDeclaration[71751-71776]:SingleVariableDeclaration[71751-71776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71778-71871]:Block[71778-71871]"
    }, {
      "left" : "return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);",
      "right" : "return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);",
      "info" : "ReturnStatement[71792-71861]:ReturnStatement[71792-71861]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71964-71971]:Modifier[72321-72328]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[71972-71977]:Modifier[72329-72334]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[71978-71983]:TYPE_DECLARATION_KIND[72335-72340]"
    }, {
      "left" : "PrefixRangeEntrySet",
      "right" : "PrefixRangeEntrySet",
      "info" : "SimpleName[71984-72003]:SimpleName[72341-72360]"
    }, {
      "left" : "RangeEntrySet",
      "right" : "RangeEntrySet",
      "info" : "SimpleType[72012-72025]:SimpleType[72369-72382]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72248-72254]:Modifier[72605-72611]"
    }, {
      "left" : "PrefixRangeEntrySet",
      "right" : "PrefixRangeEntrySet",
      "info" : "SimpleName[72255-72274]:SimpleName[72612-72631]"
    }, {
      "left" : "final PrefixRangeMap delegate",
      "right" : "final PrefixRangeMap delegate",
      "info" : "SingleVariableDeclaration[72275-72304]:SingleVariableDeclaration[72632-72661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72306-72384]:Block[72663-72741]"
    }, {
      "left" : "super(delegate);",
      "right" : "super(delegate);",
      "info" : "SuperConstructorInvocation[72320-72336]:SuperConstructorInvocation[72677-72693]"
    }, {
      "left" : "this.delegate = delegate;",
      "right" : "this.delegate = delegate;",
      "info" : "ExpressionStatement[72349-72374]:ExpressionStatement[72706-72731]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[72394-72403]:MarkerAnnotation[72751-72760]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72412-72418]:Modifier[72769-72775]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[72419-72422]:PrimitiveType[72776-72779]"
    }, {
      "left" : "size",
      "right" : "size",
      "info" : "SimpleName[72423-72427]:SimpleName[72780-72784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72430-72478]:Block[72787-72835]"
    }, {
      "left" : "return delegate.fixup();",
      "right" : "return delegate.fixup();",
      "info" : "ReturnStatement[72444-72468]:ReturnStatement[72801-72825]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[72488-72497]:MarkerAnnotation[72845-72854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72506-72512]:Modifier[72863-72869]"
    }, {
      "left" : "Iterator<Map.Entry<K,V>>",
      "right" : "Iterator<Map.Entry<K,V>>",
      "info" : "ParameterizedType[72513-72537]:ParameterizedType[72870-72894]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[72538-72546]:SimpleName[72895-72903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72549-73259]:Block[72906-73616]"
    }, {
      "left" : "if (AbstractPatriciaTrie.this.modCount != expectedModCount)",
      "right" : "if (AbstractPatriciaTrie.this.modCount != expectedModCount)",
      "info" : "IfStatement[72563-72811]:IfStatement[72920-73168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72623-72811]:Block[72980-73168]"
    }, {
      "left" : "prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);",
      "right" : "prefixStart = subtree(delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);",
      "info" : "ExpressionStatement[72641-72726]:ExpressionStatement[72998-73083]"
    }, {
      "left" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "right" : "expectedModCount = AbstractPatriciaTrie.this.modCount;",
      "info" : "ExpressionStatement[72743-72797]:ExpressionStatement[73100-73154]"
    }, {
      "left" : "if (prefixStart == null)",
      "right" : "if (prefixStart == null)",
      "info" : "IfStatement[72825-73249]:IfStatement[73182-73606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72850-72980]:Block[73207-73337]"
    }, {
      "left" : "final Set<Map.Entry<K,V>> empty = Collections.emptySet();",
      "right" : "final Set<Map.Entry<K,V>> empty = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[72868-72925]:VariableDeclarationStatement[73225-73282]"
    }, {
      "left" : "return empty.iterator();",
      "right" : "return empty.iterator();",
      "info" : "ReturnStatement[72942-72966]:ReturnStatement[73299-73323]"
    }, {
      "left" : "if (delegate.lengthInBits > prefixStart.bitIndex)",
      "right" : "if (delegate.lengthInBits > prefixStart.bitIndex)",
      "info" : "IfStatement[72986-73249]:IfStatement[73343-73606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73036-73110]:Block[73393-73467]"
    }, {
      "left" : "return new SingletonIterator(prefixStart);",
      "right" : "return new SingletonIterator(prefixStart);",
      "info" : "ReturnStatement[73054-73096]:ReturnStatement[73411-73453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73116-73249]:Block[73473-73606]"
    }, {
      "left" : "return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);",
      "right" : "return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);",
      "info" : "ReturnStatement[73134-73235]:ReturnStatement[73491-73592]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[73363-73370]:Modifier[73720-73727]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[73371-73376]:Modifier[73728-73733]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[73377-73382]:TYPE_DECLARATION_KIND[73734-73739]"
    }, {
      "left" : "SingletonIterator",
      "right" : "SingletonIterator",
      "info" : "SimpleName[73383-73400]:SimpleName[73740-73757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73537-73543]:Modifier[73894-73900]"
    }, {
      "left" : "SingletonIterator",
      "right" : "SingletonIterator",
      "info" : "SimpleName[73544-73561]:SimpleName[73901-73918]"
    }, {
      "left" : "final TrieEntry<K, V> entry",
      "right" : "final TrieEntry<K, V> entry",
      "info" : "SingleVariableDeclaration[73562-73589]:SingleVariableDeclaration[73919-73946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73591-73642]:Block[73948-73999]"
    }, {
      "left" : "this.entry = entry;",
      "right" : "this.entry = entry;",
      "info" : "ExpressionStatement[73609-73628]:ExpressionStatement[73966-73985]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73656-73665]:MarkerAnnotation[74013-74022]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73678-73684]:Modifier[74035-74041]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[73685-73692]:PrimitiveType[74042-74049]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[73693-73700]:SimpleName[74050-74057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73703-73751]:Block[74060-74108]"
    }, {
      "left" : "return hit == 0;",
      "right" : "return hit == 0;",
      "info" : "ReturnStatement[73721-73737]:ReturnStatement[74078-74094]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73765-73774]:MarkerAnnotation[74122-74131]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73787-73793]:Modifier[74144-74150]"
    }, {
      "left" : "Map.Entry<K, V>",
      "right" : "Map.Entry<K, V>",
      "info" : "ParameterizedType[73794-73809]:ParameterizedType[74151-74166]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[73810-73814]:SimpleName[74167-74171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73817-73992]:Block[74174-74349]"
    }, {
      "left" : "if (hit != 0)",
      "right" : "if (hit != 0)",
      "info" : "IfStatement[73835-73924]:IfStatement[74192-74281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73849-73924]:Block[74206-74281]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[73871-73906]:ThrowStatement[74228-74263]"
    }, {
      "left" : "++hit;",
      "right" : "++hit;",
      "info" : "ExpressionStatement[73942-73948]:ExpressionStatement[74299-74305]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[73965-73978]:ReturnStatement[74322-74335]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[74006-74015]:MarkerAnnotation[74363-74372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74028-74034]:Modifier[74385-74391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[74035-74039]:PrimitiveType[74392-74396]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[74040-74046]:SimpleName[74397-74403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74049-74255]:Block[74406-74612]"
    }, {
      "left" : "if (hit != 1)",
      "right" : "if (hit != 1)",
      "info" : "IfStatement[74067-74155]:IfStatement[74424-74512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74081-74155]:Block[74438-74512]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[74103-74137]:ThrowStatement[74460-74494]"
    }, {
      "left" : "++hit;",
      "right" : "++hit;",
      "info" : "ExpressionStatement[74173-74179]:ExpressionStatement[74530-74536]"
    }, {
      "left" : "AbstractPatriciaTrie.this.removeEntry(entry);",
      "right" : "AbstractPatriciaTrie.this.removeEntry(entry);",
      "info" : "ExpressionStatement[74196-74241]:ExpressionStatement[74553-74598]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74366-74373]:Modifier[74723-74730]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[74374-74379]:Modifier[74731-74736]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[74380-74385]:TYPE_DECLARATION_KIND[74737-74742]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "SimpleName[74386-74399]:SimpleName[74743-74756]"
    }, {
      "left" : "EntryIterator",
      "right" : "EntryIterator",
      "info" : "SimpleName[74885-74898]:SimpleName[75242-75255]"
    }, {
      "left" : "final TrieEntry<K, V> startScan",
      "right" : "final TrieEntry<K, V> startScan",
      "info" : "SingleVariableDeclaration[74899-74930]:SingleVariableDeclaration[75256-75287]"
    }, {
      "left" : "final K prefix",
      "right" : "final K prefix",
      "info" : "SingleVariableDeclaration[74932-74946]:SingleVariableDeclaration[75289-75303]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[74968-74984]:SingleVariableDeclaration[75325-75341]"
    }, {
      "left" : "final int lengthInBits",
      "right" : "final int lengthInBits",
      "info" : "SingleVariableDeclaration[74986-75008]:SingleVariableDeclaration[75343-75365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75010-75260]:Block[75367-75617]"
    }, {
      "left" : "subtree = startScan;",
      "right" : "subtree = startScan;",
      "info" : "ExpressionStatement[75028-75048]:ExpressionStatement[75385-75405]"
    }, {
      "left" : "next = AbstractPatriciaTrie.this.followLeft(startScan);",
      "right" : "next = AbstractPatriciaTrie.this.followLeft(startScan);",
      "info" : "ExpressionStatement[75065-75120]:ExpressionStatement[75422-75477]"
    }, {
      "left" : "this.prefix = prefix;",
      "right" : "this.prefix = prefix;",
      "info" : "ExpressionStatement[75137-75158]:ExpressionStatement[75494-75515]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[75175-75196]:ExpressionStatement[75532-75553]"
    }, {
      "left" : "this.lengthInBits = lengthInBits;",
      "right" : "this.lengthInBits = lengthInBits;",
      "info" : "ExpressionStatement[75213-75246]:ExpressionStatement[75570-75603]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[75274-75283]:MarkerAnnotation[75631-75640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75296-75302]:Modifier[75653-75659]"
    }, {
      "left" : "Map.Entry<K,V>",
      "right" : "Map.Entry<K,V>",
      "info" : "ParameterizedType[75303-75317]:ParameterizedType[75660-75674]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[75318-75322]:SimpleName[75675-75679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75325-75511]:Block[75682-75868]"
    }, {
      "left" : "final Map.Entry<K, V> entry = nextEntry();",
      "right" : "final Map.Entry<K, V> entry = nextEntry();",
      "info" : "VariableDeclarationStatement[75343-75385]:VariableDeclarationStatement[75700-75742]"
    }, {
      "left" : "if (lastOne)",
      "right" : "if (lastOne)",
      "info" : "IfStatement[75402-75467]:IfStatement[75759-75824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75415-75467]:Block[75772-75824]"
    }, {
      "left" : "next = null;",
      "right" : "next = null;",
      "info" : "ExpressionStatement[75437-75449]:ExpressionStatement[75794-75806]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[75484-75497]:ReturnStatement[75841-75854]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[75525-75534]:MarkerAnnotation[75882-75891]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[75547-75556]:Modifier[75904-75913]"
    }, {
      "left" : "TrieEntry<K, V>",
      "right" : "TrieEntry<K, V>",
      "info" : "ParameterizedType[75557-75572]:ParameterizedType[75914-75929]"
    }, {
      "left" : "findNext",
      "right" : "findNext",
      "info" : "SimpleName[75573-75581]:SimpleName[75930-75938]"
    }, {
      "left" : "final TrieEntry<K, V> prior",
      "right" : "final TrieEntry<K, V> prior",
      "info" : "SingleVariableDeclaration[75582-75609]:SingleVariableDeclaration[75939-75966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75611-75711]:Block[75968-76068]"
    }, {
      "left" : "return AbstractPatriciaTrie.this.nextEntryInSubtree(prior, subtree);",
      "right" : "return AbstractPatriciaTrie.this.nextEntryInSubtree(prior, subtree);",
      "info" : "ReturnStatement[75629-75697]:ReturnStatement[75986-76054]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[75725-75734]:MarkerAnnotation[76082-76091]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75747-75753]:Modifier[76104-76110]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[75754-75758]:PrimitiveType[76111-76115]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[75759-75765]:SimpleName[76116-76122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75768-76691]:Block[76125-77048]"
    }, {
      "left" : "boolean needsFixing = false;",
      "right" : "boolean needsFixing = false;",
      "info" : "VariableDeclarationStatement[75918-75946]:VariableDeclarationStatement[76275-76303]"
    }, {
      "left" : "final int bitIdx = subtree.bitIndex;",
      "right" : "final int bitIdx = subtree.bitIndex;",
      "info" : "VariableDeclarationStatement[75963-75999]:VariableDeclarationStatement[76320-76356]"
    }, {
      "left" : "if (current == subtree)",
      "right" : "if (current == subtree)",
      "info" : "IfStatement[76016-76099]:IfStatement[76373-76456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76040-76099]:Block[76397-76456]"
    }, {
      "left" : "needsFixing = true;",
      "right" : "needsFixing = true;",
      "info" : "ExpressionStatement[76062-76081]:ExpressionStatement[76419-76438]"
    }, {
      "left" : "super.remove();",
      "right" : "super.remove();",
      "info" : "ExpressionStatement[76117-76132]:ExpressionStatement[76474-76489]"
    }, {
      "left" : "if (bitIdx != subtree.bitIndex || needsFixing)",
      "right" : "if (bitIdx != subtree.bitIndex || needsFixing)",
      "info" : "IfStatement[76270-76405]:IfStatement[76627-76762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76317-76405]:Block[76674-76762]"
    }, {
      "left" : "subtree = subtree(prefix, offset, lengthInBits);",
      "right" : "subtree = subtree(prefix, offset, lengthInBits);",
      "info" : "ExpressionStatement[76339-76387]:ExpressionStatement[76696-76744]"
    }, {
      "left" : "if (lengthInBits >= subtree.bitIndex)",
      "right" : "if (lengthInBits >= subtree.bitIndex)",
      "info" : "IfStatement[76584-76677]:IfStatement[76941-77034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76622-76677]:Block[76979-77034]"
    }, {
      "left" : "lastOne = true;",
      "right" : "lastOne = true;",
      "info" : "ExpressionStatement[76644-76659]:ExpressionStatement[77001-77016]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[76848-76878]:SingleMemberAnnotation[77205-77235]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76939-76946]:Modifier[77296-77303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[76947-76951]:PrimitiveType[77304-77308]"
    }, {
      "left" : "readObject",
      "right" : "readObject",
      "info" : "SimpleName[76952-76962]:SimpleName[77309-77319]"
    }, {
      "left" : "final ObjectInputStream stream",
      "right" : "final ObjectInputStream stream",
      "info" : "SingleVariableDeclaration[76963-76993]:SingleVariableDeclaration[77320-77350]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[77002-77013]:SimpleType[77359-77370]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[77015-77037]:SimpleType[77372-77394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77037-77327]:Block[77394-77684]"
    }, {
      "left" : "stream.defaultReadObject();",
      "right" : "stream.defaultReadObject();",
      "info" : "ExpressionStatement[77047-77074]:ExpressionStatement[77404-77431]"
    }, {
      "left" : "root = new TrieEntry<K, V>(null, null, -1);",
      "right" : "root = new TrieEntry<K, V>(null, null, -1);",
      "info" : "ExpressionStatement[77083-77126]:ExpressionStatement[77440-77483]"
    }, {
      "left" : "int size = stream.readInt();",
      "right" : "int size = stream.readInt();",
      "info" : "VariableDeclarationStatement[77135-77163]:VariableDeclarationStatement[77492-77520]"
    }, {
      "left" : "for(int i = 0; i < size; i++)",
      "right" : "for(int i = 0; i < size; i++)",
      "info" : "ForStatement[77172-77321]:ForStatement[77529-77678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77201-77321]:Block[77558-77678]"
    }, {
      "left" : "K k = (K) stream.readObject();",
      "right" : "K k = (K) stream.readObject();",
      "info" : "VariableDeclarationStatement[77215-77245]:VariableDeclarationStatement[77572-77602]"
    }, {
      "left" : "V v = (V) stream.readObject();",
      "right" : "V v = (V) stream.readObject();",
      "info" : "VariableDeclarationStatement[77258-77288]:VariableDeclarationStatement[77615-77645]"
    }, {
      "left" : "put(k, v);",
      "right" : "put(k, v);",
      "info" : "ExpressionStatement[77301-77311]:ExpressionStatement[77658-77668]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[77408-77415]:Modifier[77765-77772]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77416-77420]:PrimitiveType[77773-77777]"
    }, {
      "left" : "writeObject",
      "right" : "writeObject",
      "info" : "SimpleName[77421-77432]:SimpleName[77778-77789]"
    }, {
      "left" : "final ObjectOutputStream stream",
      "right" : "final ObjectOutputStream stream",
      "info" : "SingleVariableDeclaration[77433-77464]:SingleVariableDeclaration[77790-77821]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[77473-77484]:SimpleType[77830-77841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77484-77727]:Block[77841-78084]"
    }, {
      "left" : "stream.defaultWriteObject();",
      "right" : "stream.defaultWriteObject();",
      "info" : "ExpressionStatement[77494-77522]:ExpressionStatement[77851-77879]"
    }, {
      "left" : "stream.writeInt(this.size());",
      "right" : "stream.writeInt(this.size());",
      "info" : "ExpressionStatement[77531-77560]:ExpressionStatement[77888-77917]"
    }, {
      "left" : "for (final Entry<K, V> entry : entrySet())",
      "right" : "for (final Entry<K, V> entry : entrySet())",
      "info" : "EnhancedForStatement[77569-77721]:EnhancedForStatement[77926-78078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77612-77721]:Block[77969-78078]"
    }, {
      "left" : "stream.writeObject(entry.getKey());",
      "right" : "stream.writeObject(entry.getKey());",
      "info" : "ExpressionStatement[77626-77661]:ExpressionStatement[77983-78018]"
    }, {
      "left" : "stream.writeObject(entry.getValue());",
      "right" : "stream.writeObject(entry.getValue());",
      "info" : "ExpressionStatement[77674-77711]:ExpressionStatement[78031-78068]"
    } ]
  },
  "interFileMappings" : { }
}