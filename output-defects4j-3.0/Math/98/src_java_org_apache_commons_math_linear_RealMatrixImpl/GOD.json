{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "TypeDeclaration[923-43366]:TypeDeclaration[923-43363]"
    }, {
      "left" : "private static final long serialVersionUID = -4828886979278117018L;",
      "right" : "private static final long serialVersionUID = -4828886979278117018L;",
      "info" : "FieldDeclaration[2134-2244]:FieldDeclaration[2134-2244]"
    }, {
      "left" : "protected double data[][] = null;",
      "right" : "protected double data[][] = null;",
      "info" : "FieldDeclaration[2250-2316]:FieldDeclaration[2250-2316]"
    }, {
      "left" : "protected double lu[][] = null;",
      "right" : "protected double lu[][] = null;",
      "info" : "FieldDeclaration[2322-2484]:FieldDeclaration[2322-2484]"
    }, {
      "left" : "protected int[] permutation = null;",
      "right" : "protected int[] permutation = null;",
      "info" : "FieldDeclaration[2490-2581]:FieldDeclaration[2490-2581]"
    }, {
      "left" : "protected int parity = 1;",
      "right" : "protected int parity = 1;",
      "info" : "FieldDeclaration[2587-2686]:FieldDeclaration[2587-2686]"
    }, {
      "left" : "private static final double TOO_SMALL = 10E-12;",
      "right" : "private static final double TOO_SMALL = 10E-12;",
      "info" : "FieldDeclaration[2692-2811]:FieldDeclaration[2692-2811]"
    }, {
      "left" : "public RealMatrixImpl()",
      "right" : "public RealMatrixImpl()",
      "info" : "MethodDeclaration[2817-2901]:MethodDeclaration[2817-2901]"
    }, {
      "left" : "public RealMatrixImpl(int rowDimension, int columnDimension)",
      "right" : "public RealMatrixImpl(int rowDimension, int columnDimension)",
      "info" : "MethodDeclaration[2907-3559]:MethodDeclaration[2907-3559]"
    }, {
      "left" : "public RealMatrixImpl(double[][] d)",
      "right" : "public RealMatrixImpl(double[][] d)",
      "info" : "MethodDeclaration[3565-4251]:MethodDeclaration[3565-4251]"
    }, {
      "left" : "public RealMatrixImpl(double[][] d, boolean copyArray)",
      "right" : "public RealMatrixImpl(double[][] d, boolean copyArray)",
      "info" : "MethodDeclaration[4257-5896]:MethodDeclaration[4257-5896]"
    }, {
      "left" : "public RealMatrixImpl(double[] v)",
      "right" : "public RealMatrixImpl(double[] v)",
      "info" : "MethodDeclaration[5902-6405]:MethodDeclaration[5902-6405]"
    }, {
      "left" : "public RealMatrix copy()",
      "right" : "public RealMatrix copy()",
      "info" : "MethodDeclaration[6411-6609]:MethodDeclaration[6411-6609]"
    }, {
      "left" : "public RealMatrix add(RealMatrix m) throws IllegalArgumentException",
      "right" : "public RealMatrix add(RealMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[6615-7784]:MethodDeclaration[6615-7784]"
    }, {
      "left" : "public RealMatrixImpl add(RealMatrixImpl m) throws IllegalArgumentException",
      "right" : "public RealMatrixImpl add(RealMatrixImpl m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[7790-8842]:MethodDeclaration[7790-8842]"
    }, {
      "left" : "public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException",
      "right" : "public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8848-10024]:MethodDeclaration[8848-10024]"
    }, {
      "left" : "public RealMatrixImpl subtract(RealMatrixImpl m) throws IllegalArgumentException",
      "right" : "public RealMatrixImpl subtract(RealMatrixImpl m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[10030-11084]:MethodDeclaration[10030-11084]"
    }, {
      "left" : "public RealMatrix scalarAdd(double d)",
      "right" : "public RealMatrix scalarAdd(double d)",
      "info" : "MethodDeclaration[11090-11814]:MethodDeclaration[11090-11814]"
    }, {
      "left" : "public RealMatrix scalarMultiply(double d)",
      "right" : "public RealMatrix scalarMultiply(double d)",
      "info" : "MethodDeclaration[11820-12554]:MethodDeclaration[11820-12554]"
    }, {
      "left" : "public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException",
      "right" : "public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[12560-13955]:MethodDeclaration[12560-13955]"
    }, {
      "left" : "public RealMatrixImpl multiply(RealMatrixImpl m) throws IllegalArgumentException",
      "right" : "public RealMatrixImpl multiply(RealMatrixImpl m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[13961-15180]:MethodDeclaration[13961-15180]"
    }, {
      "left" : "public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException",
      "right" : "public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[15186-15565]:MethodDeclaration[15186-15565]"
    }, {
      "left" : "public double[][] getData()",
      "right" : "public double[][] getData()",
      "info" : "MethodDeclaration[15571-15827]:MethodDeclaration[15571-15827]"
    }, {
      "left" : "public double[][] getDataRef()",
      "right" : "public double[][] getDataRef()",
      "info" : "MethodDeclaration[15833-16091]:MethodDeclaration[15833-16091]"
    }, {
      "left" : "public double getNorm()",
      "right" : "public double getNorm()",
      "info" : "MethodDeclaration[16097-16515]:MethodDeclaration[16097-16515]"
    }, {
      "left" : "public RealMatrix getSubMatrix(int startRow, int endRow,\n                                   int startColumn, int endColumn)\n        throws MatrixIndexException",
      "right" : "public RealMatrix getSubMatrix(int startRow, int endRow,\n                                   int startColumn, int endColumn)\n        throws MatrixIndexException",
      "info" : "MethodDeclaration[16525-17846]:MethodDeclaration[16525-17846]"
    }, {
      "left" : "public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n        throws MatrixIndexException",
      "right" : "public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n        throws MatrixIndexException",
      "info" : "MethodDeclaration[17856-19285]:MethodDeclaration[17856-19285]"
    }, {
      "left" : "public void setSubMatrix(double[][] subMatrix, int row, int column) \n        throws MatrixIndexException",
      "right" : "public void setSubMatrix(double[][] subMatrix, int row, int column) \n        throws MatrixIndexException",
      "info" : "MethodDeclaration[19292-21942]:MethodDeclaration[19292-21942]"
    }, {
      "left" : "public RealMatrix getRowMatrix(int row) throws MatrixIndexException",
      "right" : "public RealMatrix getRowMatrix(int row) throws MatrixIndexException",
      "info" : "MethodDeclaration[21952-22632]:MethodDeclaration[21952-22632]"
    }, {
      "left" : "public RealMatrix getColumnMatrix(int column) throws MatrixIndexException",
      "right" : "public RealMatrix getColumnMatrix(int column) throws MatrixIndexException",
      "info" : "MethodDeclaration[22642-23399]:MethodDeclaration[22642-23399]"
    }, {
      "left" : "public double[] getRow(int row) throws MatrixIndexException",
      "right" : "public double[] getRow(int row) throws MatrixIndexException",
      "info" : "MethodDeclaration[23406-24171]:MethodDeclaration[23406-24171]"
    }, {
      "left" : "public double[] getColumn(int col) throws MatrixIndexException",
      "right" : "public double[] getColumn(int col) throws MatrixIndexException",
      "info" : "MethodDeclaration[24177-25006]:MethodDeclaration[24177-25006]"
    }, {
      "left" : "public double getEntry(int row, int column)\n        throws MatrixIndexException",
      "right" : "public double getEntry(int row, int column)\n        throws MatrixIndexException",
      "info" : "MethodDeclaration[25012-25881]:MethodDeclaration[25012-25881]"
    }, {
      "left" : "public RealMatrix transpose()",
      "right" : "public RealMatrix transpose()",
      "info" : "MethodDeclaration[25887-26443]:MethodDeclaration[25887-26443]"
    }, {
      "left" : "public RealMatrix inverse() throws InvalidMatrixException",
      "right" : "public RealMatrix inverse() throws InvalidMatrixException",
      "info" : "MethodDeclaration[26449-26774]:MethodDeclaration[26449-26774]"
    }, {
      "left" : "public double getDeterminant() throws InvalidMatrixException",
      "right" : "public double getDeterminant() throws InvalidMatrixException",
      "info" : "MethodDeclaration[26780-27375]:MethodDeclaration[26780-27375]"
    }, {
      "left" : "public boolean isSquare()",
      "right" : "public boolean isSquare()",
      "info" : "MethodDeclaration[27381-27577]:MethodDeclaration[27381-27577]"
    }, {
      "left" : "public boolean isSingular()",
      "right" : "public boolean isSingular()",
      "info" : "MethodDeclaration[27583-28015]:MethodDeclaration[27583-28015]"
    }, {
      "left" : "public int getRowDimension()",
      "right" : "public int getRowDimension()",
      "info" : "MethodDeclaration[28021-28129]:MethodDeclaration[28021-28129]"
    }, {
      "left" : "public int getColumnDimension()",
      "right" : "public int getColumnDimension()",
      "info" : "MethodDeclaration[28135-28252]:MethodDeclaration[28135-28252]"
    }, {
      "left" : "public double getTrace() throws IllegalArgumentException",
      "right" : "public double getTrace() throws IllegalArgumentException",
      "info" : "MethodDeclaration[28258-28695]:MethodDeclaration[28258-28695]"
    }, {
      "left" : "public double[] operate(double[] v) throws IllegalArgumentException",
      "right" : "public double[] operate(double[] v) throws IllegalArgumentException",
      "info" : "MethodDeclaration[28701-29488]:MethodDeclaration[28701-29485]"
    }, {
      "left" : "public double[] preMultiply(double[] v) throws IllegalArgumentException",
      "right" : "public double[] preMultiply(double[] v) throws IllegalArgumentException",
      "info" : "MethodDeclaration[29494-30237]:MethodDeclaration[29491-30234]"
    }, {
      "left" : "public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[30243-31292]:MethodDeclaration[30240-31289]"
    }, {
      "left" : "public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[31298-33722]:MethodDeclaration[31295-33719]"
    }, {
      "left" : "public void luDecompose() throws InvalidMatrixException",
      "right" : "public void luDecompose() throws InvalidMatrixException",
      "info" : "MethodDeclaration[33728-37085]:MethodDeclaration[33725-37082]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[37091-37861]:MethodDeclaration[37088-37858]"
    }, {
      "left" : "public boolean equals(Object object)",
      "right" : "public boolean equals(Object object)",
      "info" : "MethodDeclaration[37872-39108]:MethodDeclaration[37869-39105]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[39118-39732]:MethodDeclaration[39115-39729]"
    }, {
      "left" : "protected RealMatrix getLUMatrix() throws InvalidMatrixException",
      "right" : "protected RealMatrix getLUMatrix() throws InvalidMatrixException",
      "info" : "MethodDeclaration[39788-41297]:MethodDeclaration[39785-41294]"
    }, {
      "left" : "protected int[] getPermutation()",
      "right" : "protected int[] getPermutation()",
      "info" : "MethodDeclaration[41303-41919]:MethodDeclaration[41300-41916]"
    }, {
      "left" : "private double[][] copyOut()",
      "right" : "private double[][] copyOut()",
      "info" : "MethodDeclaration[41973-42484]:MethodDeclaration[41970-42481]"
    }, {
      "left" : "private void copyIn(double[][] in)",
      "right" : "private void copyIn(double[][] in)",
      "info" : "MethodDeclaration[42490-42911]:MethodDeclaration[42487-42908]"
    }, {
      "left" : "private boolean isValidCoordinate(int row, int col)",
      "right" : "private boolean isValidCoordinate(int row, int col)",
      "info" : "MethodDeclaration[42917-43363]:MethodDeclaration[42914-43360]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2059-2065]:Modifier[2059-2065]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2066-2071]:TYPE_DECLARATION_KIND[2066-2071]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleName[2072-2086]:SimpleName[2072-2086]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[2098-2108]:SimpleType[2098-2108]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[2110-2122]:SimpleType[2110-2122]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2870-2876]:Modifier[2870-2876]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleName[2877-2891]:SimpleName[2877-2891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2894-2901]:Block[2894-2901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3233-3239]:Modifier[3233-3239]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleName[3240-3254]:SimpleName[3240-3254]"
    }, {
      "left" : "int rowDimension",
      "right" : "int rowDimension",
      "info" : "SingleVariableDeclaration[3255-3271]:SingleVariableDeclaration[3255-3271]"
    }, {
      "left" : "int columnDimension",
      "right" : "int columnDimension",
      "info" : "SingleVariableDeclaration[3273-3292]:SingleVariableDeclaration[3273-3292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3294-3559]:Block[3294-3559]"
    }, {
      "left" : "if (rowDimension <= 0 || columnDimension <= 0)",
      "right" : "if (rowDimension <= 0 || columnDimension <= 0)",
      "info" : "IfStatement[3304-3476]:IfStatement[3304-3476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3351-3476]:Block[3351-3476]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"row and column dimensions must be postive\");",
      "right" : "throw new IllegalArgumentException(\n                    \"row and column dimensions must be postive\");",
      "info" : "ThrowStatement[3365-3466]:ThrowStatement[3365-3466]"
    }, {
      "left" : "data = new double[rowDimension][columnDimension];",
      "right" : "data = new double[rowDimension][columnDimension];",
      "info" : "ExpressionStatement[3485-3534]:ExpressionStatement[3485-3534]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[3543-3553]:ExpressionStatement[3543-3553]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4170-4176]:Modifier[4170-4176]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleName[4177-4191]:SimpleName[4177-4191]"
    }, {
      "left" : "double[][] d",
      "right" : "double[][] d",
      "info" : "SingleVariableDeclaration[4192-4204]:SingleVariableDeclaration[4192-4204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4206-4251]:Block[4206-4251]"
    }, {
      "left" : "copyIn(d);",
      "right" : "copyIn(d);",
      "info" : "ExpressionStatement[4216-4226]:ExpressionStatement[4216-4226]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[4235-4245]:ExpressionStatement[4235-4245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5036-5042]:Modifier[5036-5042]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleName[5043-5057]:SimpleName[5043-5057]"
    }, {
      "left" : "double[][] d",
      "right" : "double[][] d",
      "info" : "SingleVariableDeclaration[5058-5070]:SingleVariableDeclaration[5058-5070]"
    }, {
      "left" : "boolean copyArray",
      "right" : "boolean copyArray",
      "info" : "SingleVariableDeclaration[5072-5089]:SingleVariableDeclaration[5072-5089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5091-5896]:Block[5091-5896]"
    }, {
      "left" : "if (copyArray)",
      "right" : "if (copyArray)",
      "info" : "IfStatement[5101-5871]:IfStatement[5101-5871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5116-5150]:Block[5116-5150]"
    }, {
      "left" : "copyIn(d);",
      "right" : "copyIn(d);",
      "info" : "ExpressionStatement[5130-5140]:ExpressionStatement[5130-5140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5156-5871]:Block[5156-5871]"
    }, {
      "left" : "if (d == null)",
      "right" : "if (d == null)",
      "info" : "IfStatement[5170-5250]:IfStatement[5170-5250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5185-5250]:Block[5185-5250]"
    }, {
      "left" : "throw new NullPointerException();",
      "right" : "throw new NullPointerException();",
      "info" : "ThrowStatement[5203-5236]:ThrowStatement[5203-5236]"
    }, {
      "left" : "final int nRows = d.length;",
      "right" : "final int nRows = d.length;",
      "info" : "VariableDeclarationStatement[5266-5293]:VariableDeclarationStatement[5266-5293]"
    }, {
      "left" : "if (nRows == 0)",
      "right" : "if (nRows == 0)",
      "info" : "IfStatement[5306-5428]:IfStatement[5306-5428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5322-5428]:Block[5322-5428]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrix must have at least one row.\");",
      "right" : "throw new IllegalArgumentException(\"Matrix must have at least one row.\");",
      "info" : "ThrowStatement[5340-5413]:ThrowStatement[5340-5413]"
    }, {
      "left" : "final int nCols = d[0].length;",
      "right" : "final int nCols = d[0].length;",
      "info" : "VariableDeclarationStatement[5441-5471]:VariableDeclarationStatement[5441-5471]"
    }, {
      "left" : "if (nCols == 0)",
      "right" : "if (nCols == 0)",
      "info" : "IfStatement[5484-5609]:IfStatement[5484-5609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5500-5609]:Block[5500-5609]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrix must have at least one column.\");",
      "right" : "throw new IllegalArgumentException(\"Matrix must have at least one column.\");",
      "info" : "ThrowStatement[5518-5594]:ThrowStatement[5518-5594]"
    }, {
      "left" : "for (int r = 1; r < nRows; r++)",
      "right" : "for (int r = 1; r < nRows; r++)",
      "info" : "ForStatement[5622-5832]:ForStatement[5622-5832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5654-5832]:Block[5654-5832]"
    }, {
      "left" : "if (d[r].length != nCols)",
      "right" : "if (d[r].length != nCols)",
      "info" : "IfStatement[5672-5818]:IfStatement[5672-5818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5698-5818]:Block[5698-5818]"
    }, {
      "left" : "throw new IllegalArgumentException(\"All input rows must have the same length.\");",
      "right" : "throw new IllegalArgumentException(\"All input rows must have the same length.\");",
      "info" : "ThrowStatement[5720-5800]:ThrowStatement[5720-5800]"
    }, {
      "left" : "data = d;",
      "right" : "data = d;",
      "info" : "ExpressionStatement[5852-5861]:ExpressionStatement[5852-5861]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[5880-5890]:ExpressionStatement[5880-5890]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6198-6204]:Modifier[6198-6204]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleName[6205-6219]:SimpleName[6205-6219]"
    }, {
      "left" : "double[] v",
      "right" : "double[] v",
      "info" : "SingleVariableDeclaration[6220-6230]:SingleVariableDeclaration[6220-6230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6232-6405]:Block[6232-6405]"
    }, {
      "left" : "final int nRows = v.length;",
      "right" : "final int nRows = v.length;",
      "info" : "VariableDeclarationStatement[6242-6269]:VariableDeclarationStatement[6242-6269]"
    }, {
      "left" : "data = new double[nRows][1];",
      "right" : "data = new double[nRows][1];",
      "info" : "ExpressionStatement[6278-6306]:ExpressionStatement[6278-6306]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[6315-6399]:ForStatement[6315-6399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6353-6399]:Block[6353-6399]"
    }, {
      "left" : "data[row][0] = v[row];",
      "right" : "data[row][0] = v[row];",
      "info" : "ExpressionStatement[6367-6389]:ExpressionStatement[6367-6389]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6524-6530]:Modifier[6524-6530]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[6531-6541]:SimpleType[6531-6541]"
    }, {
      "left" : "copy",
      "right" : "copy",
      "info" : "SimpleName[6542-6546]:SimpleName[6542-6546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6549-6609]:Block[6549-6609]"
    }, {
      "left" : "return new RealMatrixImpl(copyOut(), false);",
      "right" : "return new RealMatrixImpl(copyOut(), false);",
      "info" : "ReturnStatement[6559-6603]:ReturnStatement[6559-6603]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6830-6836]:Modifier[6830-6836]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[6837-6847]:SimpleType[6837-6847]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[6848-6851]:SimpleName[6848-6851]"
    }, {
      "left" : "RealMatrix m",
      "right" : "RealMatrix m",
      "info" : "SingleVariableDeclaration[6852-6864]:SingleVariableDeclaration[6852-6864]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[6873-6897]:SimpleType[6873-6897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6898-7784]:Block[6898-7784]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6908-7778]:TryStatement[6908-7778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6912-6967]:Block[6912-6967]"
    }, {
      "left" : "return add((RealMatrixImpl) m);",
      "right" : "return add((RealMatrixImpl) m);",
      "info" : "ReturnStatement[6926-6957]:ReturnStatement[6926-6957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6999-7778]:Block[6999-7778]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[7013-7055]:VariableDeclarationStatement[7013-7055]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[7068-7113]:VariableDeclarationStatement[7068-7113]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[7126-7300]:IfStatement[7126-7300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7204-7300]:Block[7204-7300]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[7222-7286]:ThrowStatement[7222-7286]"
    }, {
      "left" : "final double[][] outData = new double[rowCount][columnCount];",
      "right" : "final double[][] outData = new double[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[7313-7374]:VariableDeclarationStatement[7313-7374]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[7387-7713]:ForStatement[7387-7713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7428-7713]:Block[7428-7713]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[7446-7484]:VariableDeclarationStatement[7446-7484]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[7501-7542]:VariableDeclarationStatement[7501-7542]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[7559-7697]:ForStatement[7559-7697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7603-7697]:Block[7603-7697]"
    }, {
      "left" : "outDataRow[col] = dataRow[col] + m.getEntry(row, col);",
      "right" : "outDataRow[col] = dataRow[col] + m.getEntry(row, col);",
      "info" : "ExpressionStatement[7625-7679]:ExpressionStatement[7625-7679]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[7726-7768]:ReturnStatement[7726-7768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8005-8011]:Modifier[8005-8011]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleType[8012-8026]:SimpleType[8012-8026]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[8027-8030]:SimpleName[8027-8030]"
    }, {
      "left" : "RealMatrixImpl m",
      "right" : "RealMatrixImpl m",
      "info" : "SingleVariableDeclaration[8031-8047]:SingleVariableDeclaration[8031-8047]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[8056-8080]:SimpleType[8056-8080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8081-8842]:Block[8081-8842]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[8091-8133]:VariableDeclarationStatement[8091-8133]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[8142-8187]:VariableDeclarationStatement[8142-8187]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[8196-8362]:IfStatement[8196-8362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8274-8362]:Block[8274-8362]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[8288-8352]:ThrowStatement[8288-8352]"
    }, {
      "left" : "final double[][] outData = new double[rowCount][columnCount];",
      "right" : "final double[][] outData = new double[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[8371-8432]:VariableDeclarationStatement[8371-8432]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[8441-8785]:ForStatement[8441-8785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8482-8785]:Block[8482-8785]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[8496-8534]:VariableDeclarationStatement[8496-8534]"
    }, {
      "left" : "final double[] mRow       = m.data[row];",
      "right" : "final double[] mRow       = m.data[row];",
      "info" : "VariableDeclarationStatement[8547-8587]:VariableDeclarationStatement[8547-8587]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[8600-8641]:VariableDeclarationStatement[8600-8641]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[8654-8773]:ForStatement[8654-8773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8698-8773]:Block[8698-8773]"
    }, {
      "left" : "outDataRow[col] = dataRow[col] + mRow[col];",
      "right" : "outDataRow[col] = dataRow[col] + mRow[col];",
      "info" : "ExpressionStatement[8716-8759]:ExpressionStatement[8716-8759]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[8794-8836]:ReturnStatement[8794-8836]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9060-9066]:Modifier[9060-9066]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[9067-9077]:SimpleType[9067-9077]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[9078-9086]:SimpleName[9078-9086]"
    }, {
      "left" : "RealMatrix m",
      "right" : "RealMatrix m",
      "info" : "SingleVariableDeclaration[9087-9099]:SingleVariableDeclaration[9087-9099]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[9108-9132]:SimpleType[9108-9132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9133-10024]:Block[9133-10024]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9143-10018]:TryStatement[9143-10018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-9207]:Block[9147-9207]"
    }, {
      "left" : "return subtract((RealMatrixImpl) m);",
      "right" : "return subtract((RealMatrixImpl) m);",
      "info" : "ReturnStatement[9161-9197]:ReturnStatement[9161-9197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9239-10018]:Block[9239-10018]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[9253-9295]:VariableDeclarationStatement[9253-9295]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[9308-9353]:VariableDeclarationStatement[9308-9353]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[9366-9540]:IfStatement[9366-9540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9444-9540]:Block[9444-9540]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[9462-9526]:ThrowStatement[9462-9526]"
    }, {
      "left" : "final double[][] outData = new double[rowCount][columnCount];",
      "right" : "final double[][] outData = new double[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[9553-9614]:VariableDeclarationStatement[9553-9614]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[9627-9953]:ForStatement[9627-9953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9668-9953]:Block[9668-9953]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[9686-9724]:VariableDeclarationStatement[9686-9724]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[9741-9782]:VariableDeclarationStatement[9741-9782]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[9799-9937]:ForStatement[9799-9937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9843-9937]:Block[9843-9937]"
    }, {
      "left" : "outDataRow[col] = dataRow[col] - m.getEntry(row, col);",
      "right" : "outDataRow[col] = dataRow[col] - m.getEntry(row, col);",
      "info" : "ExpressionStatement[9865-9919]:ExpressionStatement[9865-9919]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[9966-10008]:ReturnStatement[9966-10008]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10242-10248]:Modifier[10242-10248]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleType[10249-10263]:SimpleType[10249-10263]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[10264-10272]:SimpleName[10264-10272]"
    }, {
      "left" : "RealMatrixImpl m",
      "right" : "RealMatrixImpl m",
      "info" : "SingleVariableDeclaration[10273-10289]:SingleVariableDeclaration[10273-10289]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[10298-10322]:SimpleType[10298-10322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10323-11084]:Block[10323-11084]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[10333-10375]:VariableDeclarationStatement[10333-10375]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[10384-10429]:VariableDeclarationStatement[10384-10429]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[10438-10604]:IfStatement[10438-10604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10516-10604]:Block[10516-10604]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[10530-10594]:ThrowStatement[10530-10594]"
    }, {
      "left" : "final double[][] outData = new double[rowCount][columnCount];",
      "right" : "final double[][] outData = new double[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[10613-10674]:VariableDeclarationStatement[10613-10674]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[10683-11027]:ForStatement[10683-11027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10724-11027]:Block[10724-11027]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[10738-10776]:VariableDeclarationStatement[10738-10776]"
    }, {
      "left" : "final double[] mRow       = m.data[row];",
      "right" : "final double[] mRow       = m.data[row];",
      "info" : "VariableDeclarationStatement[10789-10829]:VariableDeclarationStatement[10789-10829]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[10842-10883]:VariableDeclarationStatement[10842-10883]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[10896-11015]:ForStatement[10896-11015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10940-11015]:Block[10940-11015]"
    }, {
      "left" : "outDataRow[col] = dataRow[col] - mRow[col];",
      "right" : "outDataRow[col] = dataRow[col] - mRow[col];",
      "info" : "ExpressionStatement[10958-11001]:ExpressionStatement[10958-11001]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[11036-11078]:ReturnStatement[11036-11078]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11253-11259]:Modifier[11253-11259]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[11260-11270]:SimpleType[11260-11270]"
    }, {
      "left" : "scalarAdd",
      "right" : "scalarAdd",
      "info" : "SimpleName[11271-11280]:SimpleName[11271-11280]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[11281-11289]:SingleVariableDeclaration[11281-11289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11291-11814]:Block[11291-11814]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[11301-11343]:VariableDeclarationStatement[11301-11343]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[11352-11397]:VariableDeclarationStatement[11352-11397]"
    }, {
      "left" : "final double[][] outData = new double[rowCount][columnCount];",
      "right" : "final double[][] outData = new double[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[11406-11467]:VariableDeclarationStatement[11406-11467]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[11476-11757]:ForStatement[11476-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11517-11757]:Block[11517-11757]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[11531-11569]:VariableDeclarationStatement[11531-11569]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[11582-11623]:VariableDeclarationStatement[11582-11623]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[11636-11747]:ForStatement[11636-11747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11680-11747]:Block[11680-11747]"
    }, {
      "left" : "outDataRow[col] = dataRow[col] + d;",
      "right" : "outDataRow[col] = dataRow[col] + d;",
      "info" : "ExpressionStatement[11698-11733]:ExpressionStatement[11698-11733]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[11766-11808]:ReturnStatement[11766-11808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11988-11994]:Modifier[11988-11994]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[11995-12005]:SimpleType[11995-12005]"
    }, {
      "left" : "scalarMultiply",
      "right" : "scalarMultiply",
      "info" : "SimpleName[12006-12020]:SimpleName[12006-12020]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[12021-12029]:SingleVariableDeclaration[12021-12029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12031-12554]:Block[12031-12554]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[12041-12083]:VariableDeclarationStatement[12041-12083]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[12092-12137]:VariableDeclarationStatement[12092-12137]"
    }, {
      "left" : "final double[][] outData = new double[rowCount][columnCount];",
      "right" : "final double[][] outData = new double[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[12146-12207]:VariableDeclarationStatement[12146-12207]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[12216-12497]:ForStatement[12216-12497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12257-12497]:Block[12257-12497]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[12271-12309]:VariableDeclarationStatement[12271-12309]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[12322-12363]:VariableDeclarationStatement[12322-12363]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[12376-12487]:ForStatement[12376-12487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12420-12487]:Block[12420-12487]"
    }, {
      "left" : "outDataRow[col] = dataRow[col] * d;",
      "right" : "outDataRow[col] = dataRow[col] * d;",
      "info" : "ExpressionStatement[12438-12473]:ExpressionStatement[12438-12473]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[12506-12548]:ReturnStatement[12506-12548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12823-12829]:Modifier[12823-12829]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[12830-12840]:SimpleType[12830-12840]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[12841-12849]:SimpleName[12841-12849]"
    }, {
      "left" : "RealMatrix m",
      "right" : "RealMatrix m",
      "info" : "SingleVariableDeclaration[12850-12862]:SingleVariableDeclaration[12850-12862]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[12871-12895]:SimpleType[12871-12895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12896-13955]:Block[12896-13955]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12906-13949]:TryStatement[12906-13949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12910-12970]:Block[12910-12970]"
    }, {
      "left" : "return multiply((RealMatrixImpl) m);",
      "right" : "return multiply((RealMatrixImpl) m);",
      "info" : "ReturnStatement[12924-12960]:ReturnStatement[12924-12960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13002-13949]:Block[13002-13949]"
    }, {
      "left" : "if (this.getColumnDimension() != m.getRowDimension())",
      "right" : "if (this.getColumnDimension() != m.getRowDimension())",
      "info" : "IfStatement[13016-13184]:IfStatement[13016-13184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13070-13184]:Block[13070-13184]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "right" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "info" : "ThrowStatement[13088-13170]:ThrowStatement[13088-13170]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[13197-13238]:VariableDeclarationStatement[13197-13238]"
    }, {
      "left" : "final int nCols = m.getColumnDimension();",
      "right" : "final int nCols = m.getColumnDimension();",
      "info" : "VariableDeclarationStatement[13251-13292]:VariableDeclarationStatement[13251-13292]"
    }, {
      "left" : "final int nSum = this.getColumnDimension();",
      "right" : "final int nSum = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[13305-13348]:VariableDeclarationStatement[13305-13348]"
    }, {
      "left" : "final double[][] outData = new double[nRows][nCols];",
      "right" : "final double[][] outData = new double[nRows][nCols];",
      "info" : "VariableDeclarationStatement[13361-13413]:VariableDeclarationStatement[13361-13413]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[13426-13884]:ForStatement[13426-13884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13464-13884]:Block[13464-13884]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[13482-13520]:VariableDeclarationStatement[13482-13520]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[13537-13578]:VariableDeclarationStatement[13537-13578]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[13595-13870]:ForStatement[13595-13870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-13870]:Block[13633-13870]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[13655-13670]:VariableDeclarationStatement[13655-13670]"
    }, {
      "left" : "for (int i = 0; i < nSum; i++)",
      "right" : "for (int i = 0; i < nSum; i++)",
      "info" : "ForStatement[13691-13809]:ForStatement[13691-13809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13722-13809]:Block[13722-13809]"
    }, {
      "left" : "sum += dataRow[i] * m.getEntry(i, col);",
      "right" : "sum += dataRow[i] * m.getEntry(i, col);",
      "info" : "ExpressionStatement[13748-13787]:ExpressionStatement[13748-13787]"
    }, {
      "left" : "outDataRow[col] = sum;",
      "right" : "outDataRow[col] = sum;",
      "info" : "ExpressionStatement[13830-13852]:ExpressionStatement[13830-13852]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[13897-13939]:ReturnStatement[13897-13939]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14224-14230]:Modifier[14224-14230]"
    }, {
      "left" : "RealMatrixImpl",
      "right" : "RealMatrixImpl",
      "info" : "SimpleType[14231-14245]:SimpleType[14231-14245]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[14246-14254]:SimpleName[14246-14254]"
    }, {
      "left" : "RealMatrixImpl m",
      "right" : "RealMatrixImpl m",
      "info" : "SingleVariableDeclaration[14255-14271]:SingleVariableDeclaration[14255-14271]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[14280-14304]:SimpleType[14280-14304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14305-15180]:Block[14305-15180]"
    }, {
      "left" : "if (this.getColumnDimension() != m.getRowDimension())",
      "right" : "if (this.getColumnDimension() != m.getRowDimension())",
      "info" : "IfStatement[14315-14475]:IfStatement[14315-14475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14369-14475]:Block[14369-14475]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "right" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "info" : "ThrowStatement[14383-14465]:ThrowStatement[14383-14465]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[14484-14525]:VariableDeclarationStatement[14484-14525]"
    }, {
      "left" : "final int nCols = m.getColumnDimension();",
      "right" : "final int nCols = m.getColumnDimension();",
      "info" : "VariableDeclarationStatement[14534-14575]:VariableDeclarationStatement[14534-14575]"
    }, {
      "left" : "final int nSum = this.getColumnDimension();",
      "right" : "final int nSum = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[14584-14627]:VariableDeclarationStatement[14584-14627]"
    }, {
      "left" : "final double[][] outData = new double[nRows][nCols];",
      "right" : "final double[][] outData = new double[nRows][nCols];",
      "info" : "VariableDeclarationStatement[14636-14688]:VariableDeclarationStatement[14636-14688]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[14697-15111]:ForStatement[14697-15111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14735-15111]:Block[14735-15111]"
    }, {
      "left" : "final double[] dataRow    = data[row];",
      "right" : "final double[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[14749-14787]:VariableDeclarationStatement[14749-14787]"
    }, {
      "left" : "final double[] outDataRow = outData[row];",
      "right" : "final double[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[14800-14841]:VariableDeclarationStatement[14800-14841]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[14854-15101]:ForStatement[14854-15101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14892-15101]:Block[14892-15101]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[14910-14925]:VariableDeclarationStatement[14910-14925]"
    }, {
      "left" : "for (int i = 0; i < nSum; i++)",
      "right" : "for (int i = 0; i < nSum; i++)",
      "info" : "ForStatement[14942-15048]:ForStatement[14942-15048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14973-15048]:Block[14973-15048]"
    }, {
      "left" : "sum += dataRow[i] * m.data[i][col];",
      "right" : "sum += dataRow[i] * m.data[i][col];",
      "info" : "ExpressionStatement[14995-15030]:ExpressionStatement[14995-15030]"
    }, {
      "left" : "outDataRow[col] = sum;",
      "right" : "outDataRow[col] = sum;",
      "info" : "ExpressionStatement[15065-15087]:ExpressionStatement[15065-15087]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[15132-15174]:ReturnStatement[15132-15174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15449-15455]:Modifier[15449-15455]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[15456-15466]:SimpleType[15456-15466]"
    }, {
      "left" : "preMultiply",
      "right" : "preMultiply",
      "info" : "SimpleName[15467-15478]:SimpleName[15467-15478]"
    }, {
      "left" : "RealMatrix m",
      "right" : "RealMatrix m",
      "info" : "SingleVariableDeclaration[15479-15491]:SingleVariableDeclaration[15479-15491]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[15500-15524]:SimpleType[15500-15524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15525-15565]:Block[15525-15565]"
    }, {
      "left" : "return m.multiply(this);",
      "right" : "return m.multiply(this);",
      "info" : "ReturnStatement[15535-15559]:ReturnStatement[15535-15559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15766-15772]:Modifier[15766-15772]"
    }, {
      "left" : "double[][]",
      "right" : "double[][]",
      "info" : "ArrayType[15773-15783]:ArrayType[15773-15783]"
    }, {
      "left" : "getData",
      "right" : "getData",
      "info" : "SimpleName[15784-15791]:SimpleName[15784-15791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15794-15827]:Block[15794-15827]"
    }, {
      "left" : "return copyOut();",
      "right" : "return copyOut();",
      "info" : "ReturnStatement[15804-15821]:ReturnStatement[15804-15821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16032-16038]:Modifier[16032-16038]"
    }, {
      "left" : "double[][]",
      "right" : "double[][]",
      "info" : "ArrayType[16039-16049]:ArrayType[16039-16049]"
    }, {
      "left" : "getDataRef",
      "right" : "getDataRef",
      "info" : "SimpleName[16050-16060]:SimpleName[16050-16060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16063-16091]:Block[16063-16091]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[16073-16085]:ReturnStatement[16073-16085]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16140-16146]:Modifier[16140-16146]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[16147-16153]:PrimitiveType[16147-16153]"
    }, {
      "left" : "getNorm",
      "right" : "getNorm",
      "info" : "SimpleName[16154-16161]:SimpleName[16154-16161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16164-16515]:Block[16164-16515]"
    }, {
      "left" : "double maxColSum = 0;",
      "right" : "double maxColSum = 0;",
      "info" : "VariableDeclarationStatement[16174-16195]:VariableDeclarationStatement[16174-16195]"
    }, {
      "left" : "for (int col = 0; col < this.getColumnDimension(); col++)",
      "right" : "for (int col = 0; col < this.getColumnDimension(); col++)",
      "info" : "ForStatement[16204-16483]:ForStatement[16204-16483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16262-16483]:Block[16262-16483]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[16276-16291]:VariableDeclarationStatement[16276-16291]"
    }, {
      "left" : "for (int row = 0; row < this.getRowDimension(); row++)",
      "right" : "for (int row = 0; row < this.getRowDimension(); row++)",
      "info" : "ForStatement[16304-16423]:ForStatement[16304-16423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16359-16423]:Block[16359-16423]"
    }, {
      "left" : "sum += Math.abs(data[row][col]);",
      "right" : "sum += Math.abs(data[row][col]);",
      "info" : "ExpressionStatement[16377-16409]:ExpressionStatement[16377-16409]"
    }, {
      "left" : "maxColSum = Math.max(maxColSum, sum);",
      "right" : "maxColSum = Math.max(maxColSum, sum);",
      "info" : "ExpressionStatement[16436-16473]:ExpressionStatement[16436-16473]"
    }, {
      "left" : "return maxColSum;",
      "right" : "return maxColSum;",
      "info" : "ReturnStatement[16492-16509]:ReturnStatement[16492-16509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16982-16988]:Modifier[16982-16988]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[16989-16999]:SimpleType[16989-16999]"
    }, {
      "left" : "getSubMatrix",
      "right" : "getSubMatrix",
      "info" : "SimpleName[17000-17012]:SimpleName[17000-17012]"
    }, {
      "left" : "int startRow",
      "right" : "int startRow",
      "info" : "SingleVariableDeclaration[17013-17025]:SingleVariableDeclaration[17013-17025]"
    }, {
      "left" : "int endRow",
      "right" : "int endRow",
      "info" : "SingleVariableDeclaration[17027-17037]:SingleVariableDeclaration[17027-17037]"
    }, {
      "left" : "int startColumn",
      "right" : "int startColumn",
      "info" : "SingleVariableDeclaration[17074-17089]:SingleVariableDeclaration[17074-17089]"
    }, {
      "left" : "int endColumn",
      "right" : "int endColumn",
      "info" : "SingleVariableDeclaration[17091-17104]:SingleVariableDeclaration[17091-17104]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[17121-17141]:SimpleType[17121-17141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17142-17846]:Block[17142-17846]"
    }, {
      "left" : "if (startRow < 0 || startRow > endRow || endRow > data.length ||\n             startColumn < 0 || startColumn > endColumn ||\n             endColumn > data[0].length)",
      "right" : "if (startRow < 0 || startRow > endRow || endRow > data.length ||\n             startColumn < 0 || startColumn > endColumn ||\n             endColumn > data[0].length)",
      "info" : "IfStatement[17152-17434]:IfStatement[17152-17434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17317-17434]:Block[17317-17434]"
    }, {
      "left" : "throw new MatrixIndexException(\n                    \"invalid row or column index selection\");",
      "right" : "throw new MatrixIndexException(\n                    \"invalid row or column index selection\");",
      "info" : "ThrowStatement[17331-17424]:ThrowStatement[17331-17424]"
    }, {
      "left" : "final double[][] subMatrixData =\n            new double[endRow - startRow + 1][endColumn - startColumn + 1];",
      "right" : "final double[][] subMatrixData =\n            new double[endRow - startRow + 1][endColumn - startColumn + 1];",
      "info" : "VariableDeclarationStatement[17443-17551]:VariableDeclarationStatement[17443-17551]"
    }, {
      "left" : "for (int i = startRow; i <= endRow; i++)",
      "right" : "for (int i = startRow; i <= endRow; i++)",
      "info" : "ForStatement[17560-17783]:ForStatement[17560-17783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17601-17783]:Block[17601-17783]"
    }, {
      "left" : "System.arraycopy(data[i], startColumn,\n                             subMatrixData[i - startRow], 0,\n                             endColumn - startColumn + 1);",
      "right" : "System.arraycopy(data[i], startColumn,\n                             subMatrixData[i - startRow], 0,\n                             endColumn - startColumn + 1);",
      "info" : "ExpressionStatement[17615-17773]:ExpressionStatement[17615-17773]"
    }, {
      "left" : "return new RealMatrixImpl(subMatrixData, false);",
      "right" : "return new RealMatrixImpl(subMatrixData, false);",
      "info" : "ReturnStatement[17792-17840]:ReturnStatement[17792-17840]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18302-18308]:Modifier[18302-18308]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[18309-18319]:SimpleType[18309-18319]"
    }, {
      "left" : "getSubMatrix",
      "right" : "getSubMatrix",
      "info" : "SimpleName[18320-18332]:SimpleName[18320-18332]"
    }, {
      "left" : "int[] selectedRows",
      "right" : "int[] selectedRows",
      "info" : "SingleVariableDeclaration[18333-18351]:SingleVariableDeclaration[18333-18351]"
    }, {
      "left" : "int[] selectedColumns",
      "right" : "int[] selectedColumns",
      "info" : "SingleVariableDeclaration[18353-18374]:SingleVariableDeclaration[18353-18374]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[18391-18411]:SimpleType[18391-18411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18412-19285]:Block[18412-19285]"
    }, {
      "left" : "if (selectedRows.length * selectedColumns.length == 0)",
      "right" : "if (selectedRows.length * selectedColumns.length == 0)",
      "info" : "IfStatement[18422-18611]:IfStatement[18422-18611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18477-18611]:Block[18477-18611]"
    }, {
      "left" : "throw new MatrixIndexException(\n                    \"selected row and column index arrays must be non-empty\");",
      "right" : "throw new MatrixIndexException(\n                    \"selected row and column index arrays must be non-empty\");",
      "info" : "ThrowStatement[18491-18601]:ThrowStatement[18491-18601]"
    }, {
      "left" : "final double[][] subMatrixData =\n            new double[selectedRows.length][selectedColumns.length];",
      "right" : "final double[][] subMatrixData =\n            new double[selectedRows.length][selectedColumns.length];",
      "info" : "VariableDeclarationStatement[18620-18721]:VariableDeclarationStatement[18620-18721]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18730-19222]:TryStatement[18730-19222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18735-19096]:Block[18735-19096]"
    }, {
      "left" : "for (int i = 0; i < selectedRows.length; i++)",
      "right" : "for (int i = 0; i < selectedRows.length; i++)",
      "info" : "ForStatement[18749-19086]:ForStatement[18749-19086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18795-19086]:Block[18795-19086]"
    }, {
      "left" : "final double[] subI = subMatrixData[i];",
      "right" : "final double[] subI = subMatrixData[i];",
      "info" : "VariableDeclarationStatement[18813-18852]:VariableDeclarationStatement[18813-18852]"
    }, {
      "left" : "final double[] dataSelectedI = data[selectedRows[i]];",
      "right" : "final double[] dataSelectedI = data[selectedRows[i]];",
      "info" : "VariableDeclarationStatement[18869-18922]:VariableDeclarationStatement[18869-18922]"
    }, {
      "left" : "for (int j = 0; j < selectedColumns.length; j++)",
      "right" : "for (int j = 0; j < selectedColumns.length; j++)",
      "info" : "ForStatement[18939-19072]:ForStatement[18939-19072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18988-19072]:Block[18988-19072]"
    }, {
      "left" : "subI[j] = dataSelectedI[selectedColumns[j]];",
      "right" : "subI[j] = dataSelectedI[selectedColumns[j]];",
      "info" : "ExpressionStatement[19010-19054]:ExpressionStatement[19010-19054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19138-19222]:Block[19138-19222]"
    }, {
      "left" : "throw new MatrixIndexException(\"matrix dimension mismatch\");",
      "right" : "throw new MatrixIndexException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[19152-19212]:ThrowStatement[19152-19212]"
    }, {
      "left" : "return new RealMatrixImpl(subMatrixData, false);",
      "right" : "return new RealMatrixImpl(subMatrixData, false);",
      "info" : "ReturnStatement[19231-19279]:ReturnStatement[19231-19279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20370-20376]:Modifier[20370-20376]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20377-20381]:PrimitiveType[20377-20381]"
    }, {
      "left" : "setSubMatrix",
      "right" : "setSubMatrix",
      "info" : "SimpleName[20382-20394]:SimpleName[20382-20394]"
    }, {
      "left" : "double[][] subMatrix",
      "right" : "double[][] subMatrix",
      "info" : "SingleVariableDeclaration[20395-20415]:SingleVariableDeclaration[20395-20415]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[20417-20424]:SingleVariableDeclaration[20417-20424]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[20426-20436]:SingleVariableDeclaration[20426-20436]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[20454-20474]:SimpleType[20454-20474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20475-21942]:Block[20475-21942]"
    }, {
      "left" : "if ((row < 0) || (column < 0))",
      "right" : "if ((row < 0) || (column < 0))",
      "info" : "IfStatement[20485-20638]:IfStatement[20485-20638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20515-20638]:Block[20515-20638]"
    }, {
      "left" : "throw new MatrixIndexException\n                (\"invalid row or column index selection\");",
      "right" : "throw new MatrixIndexException\n                (\"invalid row or column index selection\");",
      "info" : "ThrowStatement[20529-20618]:ThrowStatement[20529-20618]"
    }, {
      "left" : "final int nRows = subMatrix.length;",
      "right" : "final int nRows = subMatrix.length;",
      "info" : "VariableDeclarationStatement[20647-20682]:VariableDeclarationStatement[20647-20682]"
    }, {
      "left" : "if (nRows == 0)",
      "right" : "if (nRows == 0)",
      "info" : "IfStatement[20691-20818]:IfStatement[20691-20818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20707-20818]:Block[20707-20818]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "info" : "ThrowStatement[20721-20807]:ThrowStatement[20721-20807]"
    }, {
      "left" : "final int nCols = subMatrix[0].length;",
      "right" : "final int nCols = subMatrix[0].length;",
      "info" : "VariableDeclarationStatement[20827-20865]:VariableDeclarationStatement[20827-20865]"
    }, {
      "left" : "if (nCols == 0)",
      "right" : "if (nCols == 0)",
      "info" : "IfStatement[20874-21004]:IfStatement[20874-21004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20890-21004]:Block[20890-21004]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "info" : "ThrowStatement[20904-20993]:ThrowStatement[20904-20993]"
    }, {
      "left" : "for (int r = 1; r < nRows; r++)",
      "right" : "for (int r = 1; r < nRows; r++)",
      "info" : "ForStatement[21013-21232]:ForStatement[21013-21232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21045-21232]:Block[21045-21232]"
    }, {
      "left" : "if (subMatrix[r].length != nCols)",
      "right" : "if (subMatrix[r].length != nCols)",
      "info" : "IfStatement[21059-21222]:IfStatement[21059-21222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21093-21222]:Block[21093-21222]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "info" : "ThrowStatement[21111-21208]:ThrowStatement[21111-21208]"
    }, {
      "left" : "if (data == null)",
      "right" : "if (data == null)",
      "info" : "IfStatement[21248-21545]:IfStatement[21248-21545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21266-21545]:Block[21266-21545]"
    }, {
      "left" : "if ((row > 0)||(column > 0))",
      "right" : "if ((row > 0)||(column > 0))",
      "info" : "IfStatement[21280-21409]:IfStatement[21280-21409]"
    }, {
      "left" : "throw new MatrixIndexException\n                (\"matrix must be initialized to perfom this method\");",
      "right" : "throw new MatrixIndexException\n                (\"matrix must be initialized to perfom this method\");",
      "info" : "ThrowStatement[21309-21409]:ThrowStatement[21309-21409]"
    }, {
      "left" : "data = new double[nRows][nCols];",
      "right" : "data = new double[nRows][nCols];",
      "info" : "ExpressionStatement[21422-21454]:ExpressionStatement[21422-21454]"
    }, {
      "left" : "System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);",
      "right" : "System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);",
      "info" : "ExpressionStatement[21467-21525]:ExpressionStatement[21467-21525]"
    }, {
      "left" : "if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))",
      "right" : "if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))",
      "info" : "IfStatement[21557-21768]:IfStatement[21557-21768]"
    }, {
      "left" : "throw new MatrixIndexException(\n                    \"invalid row or column index selection\");",
      "right" : "throw new MatrixIndexException(\n                    \"invalid row or column index selection\");",
      "info" : "ThrowStatement[21675-21768]:ThrowStatement[21675-21768]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[21796-21916]:ForStatement[21796-21916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21828-21916]:Block[21828-21916]"
    }, {
      "left" : "System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);",
      "right" : "System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);",
      "info" : "ExpressionStatement[21842-21906]:ExpressionStatement[21842-21906]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[21926-21936]:ExpressionStatement[21926-21936]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22223-22229]:Modifier[22223-22229]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[22230-22240]:SimpleType[22230-22240]"
    }, {
      "left" : "getRowMatrix",
      "right" : "getRowMatrix",
      "info" : "SimpleName[22241-22253]:SimpleName[22241-22253]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[22254-22261]:SingleVariableDeclaration[22254-22261]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[22270-22290]:SimpleType[22270-22290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22291-22632]:Block[22291-22632]"
    }, {
      "left" : "if ( !isValidCoordinate( row, 0))",
      "right" : "if ( !isValidCoordinate( row, 0))",
      "info" : "IfStatement[22301-22414]:IfStatement[22301-22414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22335-22414]:Block[22335-22414]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal row argument\");",
      "right" : "throw new MatrixIndexException(\"illegal row argument\");",
      "info" : "ThrowStatement[22349-22404]:ThrowStatement[22349-22404]"
    }, {
      "left" : "final int ncols = this.getColumnDimension();",
      "right" : "final int ncols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[22423-22467]:VariableDeclarationStatement[22423-22467]"
    }, {
      "left" : "final double[][] out = new double[1][ncols];",
      "right" : "final double[][] out = new double[1][ncols];",
      "info" : "VariableDeclarationStatement[22476-22520]:VariableDeclarationStatement[22476-22520]"
    }, {
      "left" : "System.arraycopy(data[row], 0, out[0], 0, ncols);",
      "right" : "System.arraycopy(data[row], 0, out[0], 0, ncols);",
      "info" : "ExpressionStatement[22530-22579]:ExpressionStatement[22530-22579]"
    }, {
      "left" : "return new RealMatrixImpl(out, false);",
      "right" : "return new RealMatrixImpl(out, false);",
      "info" : "ReturnStatement[22588-22626]:ReturnStatement[22588-22626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22936-22942]:Modifier[22936-22942]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[22943-22953]:SimpleType[22943-22953]"
    }, {
      "left" : "getColumnMatrix",
      "right" : "getColumnMatrix",
      "info" : "SimpleName[22954-22969]:SimpleName[22954-22969]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[22970-22980]:SingleVariableDeclaration[22970-22980]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[22989-23009]:SimpleType[22989-23009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23010-23399]:Block[23010-23399]"
    }, {
      "left" : "if ( !isValidCoordinate( 0, column))",
      "right" : "if ( !isValidCoordinate( 0, column))",
      "info" : "IfStatement[23020-23139]:IfStatement[23020-23139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23057-23139]:Block[23057-23139]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal column argument\");",
      "right" : "throw new MatrixIndexException(\"illegal column argument\");",
      "info" : "ThrowStatement[23071-23129]:ThrowStatement[23071-23129]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[23148-23189]:VariableDeclarationStatement[23148-23189]"
    }, {
      "left" : "final double[][] out = new double[nRows][1];",
      "right" : "final double[][] out = new double[nRows][1];",
      "info" : "VariableDeclarationStatement[23198-23242]:VariableDeclarationStatement[23198-23242]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[23252-23346]:ForStatement[23252-23346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23290-23346]:Block[23290-23346]"
    }, {
      "left" : "out[row][0] = data[row][column];",
      "right" : "out[row][0] = data[row][column];",
      "info" : "ExpressionStatement[23304-23336]:ExpressionStatement[23304-23336]"
    }, {
      "left" : "return new RealMatrixImpl(out, false);",
      "right" : "return new RealMatrixImpl(out, false);",
      "info" : "ReturnStatement[23355-23393]:ReturnStatement[23355-23393]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23804-23810]:Modifier[23804-23810]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[23811-23819]:ArrayType[23811-23819]"
    }, {
      "left" : "getRow",
      "right" : "getRow",
      "info" : "SimpleName[23820-23826]:SimpleName[23820-23826]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[23827-23834]:SingleVariableDeclaration[23827-23834]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[23843-23863]:SimpleType[23843-23863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23864-24171]:Block[23864-24171]"
    }, {
      "left" : "if ( !isValidCoordinate( row, 0 ))",
      "right" : "if ( !isValidCoordinate( row, 0 ))",
      "info" : "IfStatement[23874-23989]:IfStatement[23874-23989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23910-23989]:Block[23910-23989]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal row argument\");",
      "right" : "throw new MatrixIndexException(\"illegal row argument\");",
      "info" : "ThrowStatement[23924-23979]:ThrowStatement[23924-23979]"
    }, {
      "left" : "final int ncols = this.getColumnDimension();",
      "right" : "final int ncols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[23998-24042]:VariableDeclarationStatement[23998-24042]"
    }, {
      "left" : "final double[] out = new double[ncols];",
      "right" : "final double[] out = new double[ncols];",
      "info" : "VariableDeclarationStatement[24051-24090]:VariableDeclarationStatement[24051-24090]"
    }, {
      "left" : "System.arraycopy(data[row], 0, out, 0, ncols);",
      "right" : "System.arraycopy(data[row], 0, out, 0, ncols);",
      "info" : "ExpressionStatement[24099-24145]:ExpressionStatement[24099-24145]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[24154-24165]:ReturnStatement[24154-24165]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24596-24602]:Modifier[24596-24602]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[24603-24611]:ArrayType[24603-24611]"
    }, {
      "left" : "getColumn",
      "right" : "getColumn",
      "info" : "SimpleName[24612-24621]:SimpleName[24612-24621]"
    }, {
      "left" : "int col",
      "right" : "int col",
      "info" : "SingleVariableDeclaration[24622-24629]:SingleVariableDeclaration[24622-24629]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[24638-24658]:SimpleType[24638-24658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24659-25006]:Block[24659-25006]"
    }, {
      "left" : "if ( !isValidCoordinate(0, col))",
      "right" : "if ( !isValidCoordinate(0, col))",
      "info" : "IfStatement[24669-24785]:IfStatement[24669-24785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24703-24785]:Block[24703-24785]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal column argument\");",
      "right" : "throw new MatrixIndexException(\"illegal column argument\");",
      "info" : "ThrowStatement[24717-24775]:ThrowStatement[24717-24775]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[24794-24835]:VariableDeclarationStatement[24794-24835]"
    }, {
      "left" : "final double[] out = new double[nRows];",
      "right" : "final double[] out = new double[nRows];",
      "info" : "VariableDeclarationStatement[24844-24883]:VariableDeclarationStatement[24844-24883]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[24892-24980]:ForStatement[24892-24980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24930-24980]:Block[24930-24980]"
    }, {
      "left" : "out[row] = data[row][col];",
      "right" : "out[row] = data[row][col];",
      "info" : "ExpressionStatement[24944-24970]:ExpressionStatement[24944-24970]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[24989-25000]:ReturnStatement[24989-25000]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25604-25610]:Modifier[25604-25610]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[25611-25617]:PrimitiveType[25611-25617]"
    }, {
      "left" : "getEntry",
      "right" : "getEntry",
      "info" : "SimpleName[25618-25626]:SimpleName[25618-25626]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[25627-25634]:SingleVariableDeclaration[25627-25634]"
    }, {
      "left" : "int column",
      "right" : "int column",
      "info" : "SingleVariableDeclaration[25636-25646]:SingleVariableDeclaration[25636-25646]"
    }, {
      "left" : "MatrixIndexException",
      "right" : "MatrixIndexException",
      "info" : "SimpleType[25663-25683]:SimpleType[25663-25683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25684-25881]:Block[25684-25881]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25694-25875]:TryStatement[25694-25875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25698-25747]:Block[25698-25747]"
    }, {
      "left" : "return data[row][column];",
      "right" : "return data[row][column];",
      "info" : "ReturnStatement[25712-25737]:ReturnStatement[25712-25737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25789-25875]:Block[25789-25875]"
    }, {
      "left" : "throw new MatrixIndexException(\"matrix entry does not exist\");",
      "right" : "throw new MatrixIndexException(\"matrix entry does not exist\");",
      "info" : "ThrowStatement[25803-25865]:ThrowStatement[25803-25865]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25979-25985]:Modifier[25979-25985]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[25986-25996]:SimpleType[25986-25996]"
    }, {
      "left" : "transpose",
      "right" : "transpose",
      "info" : "SimpleName[25997-26006]:SimpleName[25997-26006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26009-26443]:Block[26009-26443]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[26019-26055]:VariableDeclarationStatement[26019-26055]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[26064-26103]:VariableDeclarationStatement[26064-26103]"
    }, {
      "left" : "final double[][] outData = new double[nCols][nRows];",
      "right" : "final double[][] outData = new double[nCols][nRows];",
      "info" : "VariableDeclarationStatement[26112-26164]:VariableDeclarationStatement[26112-26164]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[26173-26386]:ForStatement[26173-26386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26211-26386]:Block[26211-26386]"
    }, {
      "left" : "final double[] dataRow = data[row];",
      "right" : "final double[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[26225-26260]:VariableDeclarationStatement[26225-26260]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[26273-26376]:ForStatement[26273-26376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26311-26376]:Block[26311-26376]"
    }, {
      "left" : "outData[col][row] = dataRow[col];",
      "right" : "outData[col][row] = dataRow[col];",
      "info" : "ExpressionStatement[26329-26362]:ExpressionStatement[26329-26362]"
    }, {
      "left" : "return new RealMatrixImpl(outData, false);",
      "right" : "return new RealMatrixImpl(outData, false);",
      "info" : "ReturnStatement[26395-26437]:ReturnStatement[26395-26437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26630-26636]:Modifier[26630-26636]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[26637-26647]:SimpleType[26637-26647]"
    }, {
      "left" : "inverse",
      "right" : "inverse",
      "info" : "SimpleName[26648-26655]:SimpleName[26648-26655]"
    }, {
      "left" : "InvalidMatrixException",
      "right" : "InvalidMatrixException",
      "info" : "SimpleType[26665-26687]:SimpleType[26665-26687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26688-26774]:Block[26688-26774]"
    }, {
      "left" : "return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));",
      "right" : "return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));",
      "info" : "ReturnStatement[26698-26768]:ReturnStatement[26698-26768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26885-26891]:Modifier[26885-26891]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[26892-26898]:PrimitiveType[26892-26898]"
    }, {
      "left" : "getDeterminant",
      "right" : "getDeterminant",
      "info" : "SimpleName[26899-26913]:SimpleName[26899-26913]"
    }, {
      "left" : "InvalidMatrixException",
      "right" : "InvalidMatrixException",
      "info" : "SimpleType[26923-26945]:SimpleType[26923-26945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26946-27375]:Block[26946-27375]"
    }, {
      "left" : "if (!isSquare())",
      "right" : "if (!isSquare())",
      "info" : "IfStatement[26956-27054]:IfStatement[26956-27054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26973-27054]:Block[26973-27054]"
    }, {
      "left" : "throw new InvalidMatrixException(\"matrix is not square\");",
      "right" : "throw new InvalidMatrixException(\"matrix is not square\");",
      "info" : "ThrowStatement[26987-27044]:ThrowStatement[26987-27044]"
    }, {
      "left" : "if (isSingular())",
      "right" : "if (isSingular())",
      "info" : "IfStatement[27063-27369]:IfStatement[27063-27369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27081-27185]:Block[27081-27185]"
    }, {
      "left" : "return 0d;",
      "right" : "return 0d;",
      "info" : "ReturnStatement[27165-27175]:ReturnStatement[27165-27175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27191-27369]:Block[27191-27369]"
    }, {
      "left" : "double det = parity;",
      "right" : "double det = parity;",
      "info" : "VariableDeclarationStatement[27205-27225]:VariableDeclarationStatement[27205-27225]"
    }, {
      "left" : "for (int i = 0; i < this.getRowDimension(); i++)",
      "right" : "for (int i = 0; i < this.getRowDimension(); i++)",
      "info" : "ForStatement[27238-27335]:ForStatement[27238-27335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27287-27335]:Block[27287-27335]"
    }, {
      "left" : "det *= lu[i][i];",
      "right" : "det *= lu[i][i];",
      "info" : "ExpressionStatement[27305-27321]:ExpressionStatement[27305-27321]"
    }, {
      "left" : "return det;",
      "right" : "return det;",
      "info" : "ReturnStatement[27348-27359]:ReturnStatement[27348-27359]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27474-27480]:Modifier[27474-27480]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27481-27488]:PrimitiveType[27481-27488]"
    }, {
      "left" : "isSquare",
      "right" : "isSquare",
      "info" : "SimpleName[27489-27497]:SimpleName[27489-27497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27500-27577]:Block[27500-27577]"
    }, {
      "left" : "return (this.getColumnDimension() == this.getRowDimension());",
      "right" : "return (this.getColumnDimension() == this.getRowDimension());",
      "info" : "ReturnStatement[27510-27571]:ReturnStatement[27510-27571]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27645-27651]:Modifier[27645-27651]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27652-27659]:PrimitiveType[27652-27659]"
    }, {
      "left" : "isSingular",
      "right" : "isSingular",
      "info" : "SimpleName[27660-27670]:SimpleName[27660-27670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27673-28015]:Block[27673-28015]"
    }, {
      "left" : "if (lu == null)",
      "right" : "if (lu == null)",
      "info" : "IfStatement[27683-28009]:IfStatement[27683-28009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27699-27882]:Block[27699-27882]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27713-27872]:TryStatement[27713-27872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27717-27793]:Block[27717-27793]"
    }, {
      "left" : "luDecompose();",
      "right" : "luDecompose();",
      "info" : "ExpressionStatement[27735-27749]:ExpressionStatement[27735-27749]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27766-27779]:ReturnStatement[27766-27779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27828-27872]:Block[27828-27872]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27846-27858]:ReturnStatement[27846-27858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27888-28009]:Block[27888-28009]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27953-27966]:ReturnStatement[27953-27966]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28065-28071]:Modifier[28065-28071]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28072-28075]:PrimitiveType[28072-28075]"
    }, {
      "left" : "getRowDimension",
      "right" : "getRowDimension",
      "info" : "SimpleName[28076-28091]:SimpleName[28076-28091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28094-28129]:Block[28094-28129]"
    }, {
      "left" : "return data.length;",
      "right" : "return data.length;",
      "info" : "ReturnStatement[28104-28123]:ReturnStatement[28104-28123]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28182-28188]:Modifier[28182-28188]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28189-28192]:PrimitiveType[28189-28192]"
    }, {
      "left" : "getColumnDimension",
      "right" : "getColumnDimension",
      "info" : "SimpleName[28193-28211]:SimpleName[28193-28211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28214-28252]:Block[28214-28252]"
    }, {
      "left" : "return data[0].length;",
      "right" : "return data[0].length;",
      "info" : "ReturnStatement[28224-28246]:ReturnStatement[28224-28246]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28363-28369]:Modifier[28363-28369]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[28370-28376]:PrimitiveType[28370-28376]"
    }, {
      "left" : "getTrace",
      "right" : "getTrace",
      "info" : "SimpleName[28377-28385]:SimpleName[28377-28385]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[28395-28419]:SimpleType[28395-28419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28420-28695]:Block[28420-28695]"
    }, {
      "left" : "if (!isSquare())",
      "right" : "if (!isSquare())",
      "info" : "IfStatement[28430-28530]:IfStatement[28430-28530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28447-28530]:Block[28447-28530]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix is not square\");",
      "right" : "throw new IllegalArgumentException(\"matrix is not square\");",
      "info" : "ThrowStatement[28461-28520]:ThrowStatement[28461-28520]"
    }, {
      "left" : "double trace = data[0][0];",
      "right" : "double trace = data[0][0];",
      "info" : "VariableDeclarationStatement[28539-28565]:VariableDeclarationStatement[28539-28565]"
    }, {
      "left" : "for (int i = 1; i < this.getRowDimension(); i++)",
      "right" : "for (int i = 1; i < this.getRowDimension(); i++)",
      "info" : "ForStatement[28574-28667]:ForStatement[28574-28667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28623-28667]:Block[28623-28667]"
    }, {
      "left" : "trace += data[i][i];",
      "right" : "trace += data[i][i];",
      "info" : "ExpressionStatement[28637-28657]:ExpressionStatement[28637-28657]"
    }, {
      "left" : "return trace;",
      "right" : "return trace;",
      "info" : "ReturnStatement[28676-28689]:ReturnStatement[28676-28689]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28857-28863]:Modifier[28857-28863]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[28864-28872]:ArrayType[28864-28872]"
    }, {
      "left" : "operate",
      "right" : "operate",
      "info" : "SimpleName[28873-28880]:SimpleName[28873-28880]"
    }, {
      "left" : "double[] v",
      "right" : "double[] v",
      "info" : "SingleVariableDeclaration[28881-28891]:SingleVariableDeclaration[28881-28891]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[28900-28924]:SimpleType[28900-28924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28925-29488]:Block[28925-29485]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[28935-28976]:VariableDeclarationStatement[28935-28976]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[28985-29029]:VariableDeclarationStatement[28985-29029]"
    }, {
      "left" : "if (v.length != nCols)",
      "right" : "if (v.length != nCols)",
      "info" : "IfStatement[29038-29147]:IfStatement[29038-29147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29061-29147]:Block[29061-29147]"
    }, {
      "left" : "throw new IllegalArgumentException(\"vector has wrong length\");",
      "right" : "throw new IllegalArgumentException(\"vector has wrong length\");",
      "info" : "ThrowStatement[29075-29137]:ThrowStatement[29075-29137]"
    }, {
      "left" : "final double[] out = new double[v.length];",
      "right" : "final double[] out = new double[nRows];",
      "info" : "VariableDeclarationStatement[29156-29198]:VariableDeclarationStatement[29156-29195]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[29207-29462]:ForStatement[29204-29459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29245-29462]:Block[29242-29459]"
    }, {
      "left" : "final double[] dataRow = data[row];",
      "right" : "final double[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[29259-29294]:VariableDeclarationStatement[29256-29291]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[29307-29322]:VariableDeclarationStatement[29304-29319]"
    }, {
      "left" : "for (int i = 0; i < nCols; i++)",
      "right" : "for (int i = 0; i < nCols; i++)",
      "info" : "ForStatement[29335-29424]:ForStatement[29332-29421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29367-29424]:Block[29364-29421]"
    }, {
      "left" : "sum += dataRow[i] * v[i];",
      "right" : "sum += dataRow[i] * v[i];",
      "info" : "ExpressionStatement[29385-29410]:ExpressionStatement[29382-29407]"
    }, {
      "left" : "out[row] = sum;",
      "right" : "out[row] = sum;",
      "info" : "ExpressionStatement[29437-29452]:ExpressionStatement[29434-29449]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[29471-29482]:ReturnStatement[29468-29479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29651-29657]:Modifier[29648-29654]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[29658-29666]:ArrayType[29655-29663]"
    }, {
      "left" : "preMultiply",
      "right" : "preMultiply",
      "info" : "SimpleName[29667-29678]:SimpleName[29664-29675]"
    }, {
      "left" : "double[] v",
      "right" : "double[] v",
      "info" : "SingleVariableDeclaration[29679-29689]:SingleVariableDeclaration[29676-29686]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[29698-29722]:SimpleType[29695-29719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29723-30237]:Block[29720-30234]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[29733-29774]:VariableDeclarationStatement[29730-29771]"
    }, {
      "left" : "if (v.length != nRows)",
      "right" : "if (v.length != nRows)",
      "info" : "IfStatement[29783-29892]:IfStatement[29780-29889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29806-29892]:Block[29803-29889]"
    }, {
      "left" : "throw new IllegalArgumentException(\"vector has wrong length\");",
      "right" : "throw new IllegalArgumentException(\"vector has wrong length\");",
      "info" : "ThrowStatement[29820-29882]:ThrowStatement[29817-29879]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[29901-29945]:VariableDeclarationStatement[29898-29942]"
    }, {
      "left" : "final double[] out = new double[nCols];",
      "right" : "final double[] out = new double[nCols];",
      "info" : "VariableDeclarationStatement[29954-29993]:VariableDeclarationStatement[29951-29990]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[30002-30211]:ForStatement[29999-30208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30040-30211]:Block[30037-30208]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[30054-30069]:VariableDeclarationStatement[30051-30066]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[30082-30173]:ForStatement[30079-30170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30114-30173]:Block[30111-30170]"
    }, {
      "left" : "sum += data[i][col] * v[i];",
      "right" : "sum += data[i][col] * v[i];",
      "info" : "ExpressionStatement[30132-30159]:ExpressionStatement[30129-30156]"
    }, {
      "left" : "out[col] = sum;",
      "right" : "out[col] = sum;",
      "info" : "ExpressionStatement[30186-30201]:ExpressionStatement[30183-30198]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[30220-30231]:ReturnStatement[30217-30228]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30707-30713]:Modifier[30704-30710]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[30714-30722]:ArrayType[30711-30719]"
    }, {
      "left" : "solve",
      "right" : "solve",
      "info" : "SimpleName[30723-30728]:SimpleName[30720-30725]"
    }, {
      "left" : "double[] b",
      "right" : "double[] b",
      "info" : "SingleVariableDeclaration[30729-30739]:SingleVariableDeclaration[30726-30736]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[30748-30772]:SimpleType[30745-30769]"
    }, {
      "left" : "InvalidMatrixException",
      "right" : "InvalidMatrixException",
      "info" : "SimpleType[30774-30796]:SimpleType[30771-30793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30797-31292]:Block[30794-31289]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[30807-30848]:VariableDeclarationStatement[30804-30845]"
    }, {
      "left" : "if (b.length != nRows)",
      "right" : "if (b.length != nRows)",
      "info" : "IfStatement[30857-30975]:IfStatement[30854-30972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30880-30975]:Block[30877-30972]"
    }, {
      "left" : "throw new IllegalArgumentException(\"constant vector has wrong length\");",
      "right" : "throw new IllegalArgumentException(\"constant vector has wrong length\");",
      "info" : "ThrowStatement[30894-30965]:ThrowStatement[30891-30962]"
    }, {
      "left" : "final RealMatrix bMatrix = new RealMatrixImpl(b);",
      "right" : "final RealMatrix bMatrix = new RealMatrixImpl(b);",
      "info" : "VariableDeclarationStatement[30984-31033]:VariableDeclarationStatement[30981-31030]"
    }, {
      "left" : "final double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();",
      "right" : "final double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();",
      "info" : "VariableDeclarationStatement[31042-31119]:VariableDeclarationStatement[31039-31116]"
    }, {
      "left" : "final double[] out = new double[nRows];",
      "right" : "final double[] out = new double[nRows];",
      "info" : "VariableDeclarationStatement[31128-31167]:VariableDeclarationStatement[31125-31164]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[31176-31266]:ForStatement[31173-31263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31214-31266]:Block[31211-31263]"
    }, {
      "left" : "out[row] = solution[row][0];",
      "right" : "out[row] = solution[row][0];",
      "info" : "ExpressionStatement[31228-31256]:ExpressionStatement[31225-31253]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[31275-31286]:ReturnStatement[31272-31283]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31783-31789]:Modifier[31780-31786]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[31790-31800]:SimpleType[31787-31797]"
    }, {
      "left" : "solve",
      "right" : "solve",
      "info" : "SimpleName[31801-31806]:SimpleName[31798-31803]"
    }, {
      "left" : "RealMatrix b",
      "right" : "RealMatrix b",
      "info" : "SingleVariableDeclaration[31807-31819]:SingleVariableDeclaration[31804-31816]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[31828-31852]:SimpleType[31825-31849]"
    }, {
      "left" : "InvalidMatrixException",
      "right" : "InvalidMatrixException",
      "info" : "SimpleType[31854-31876]:SimpleType[31851-31873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31878-33722]:Block[31875-33719]"
    }, {
      "left" : "if (b.getRowDimension() != this.getRowDimension())",
      "right" : "if (b.getRowDimension() != this.getRowDimension())",
      "info" : "IfStatement[31888-32025]:IfStatement[31885-32022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31939-32025]:Block[31936-32022]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Incorrect row dimension\");",
      "right" : "throw new IllegalArgumentException(\"Incorrect row dimension\");",
      "info" : "ThrowStatement[31953-32015]:ThrowStatement[31950-32012]"
    }, {
      "left" : "if (!this.isSquare())",
      "right" : "if (!this.isSquare())",
      "info" : "IfStatement[32034-32149]:IfStatement[32031-32146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32056-32149]:Block[32053-32146]"
    }, {
      "left" : "throw new InvalidMatrixException(\"coefficient matrix is not square\");",
      "right" : "throw new InvalidMatrixException(\"coefficient matrix is not square\");",
      "info" : "ThrowStatement[32070-32139]:ThrowStatement[32067-32136]"
    }, {
      "left" : "if (this.isSingular())",
      "right" : "if (this.isSingular())",
      "info" : "IfStatement[32158-32295]:IfStatement[32155-32292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32181-32295]:Block[32178-32292]"
    }, {
      "left" : "throw new InvalidMatrixException(\"Matrix is singular.\");",
      "right" : "throw new InvalidMatrixException(\"Matrix is singular.\");",
      "info" : "ThrowStatement[32229-32285]:ThrowStatement[32226-32282]"
    }, {
      "left" : "final int nCol  = this.getColumnDimension();",
      "right" : "final int nCol  = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[32305-32349]:VariableDeclarationStatement[32302-32346]"
    }, {
      "left" : "final int nColB = b.getColumnDimension();",
      "right" : "final int nColB = b.getColumnDimension();",
      "info" : "VariableDeclarationStatement[32358-32399]:VariableDeclarationStatement[32355-32396]"
    }, {
      "left" : "final int nRowB = b.getRowDimension();",
      "right" : "final int nRowB = b.getRowDimension();",
      "info" : "VariableDeclarationStatement[32408-32446]:VariableDeclarationStatement[32405-32443]"
    }, {
      "left" : "final double[][] bp = new double[nRowB][nColB];",
      "right" : "final double[][] bp = new double[nRowB][nColB];",
      "info" : "VariableDeclarationStatement[32491-32538]:VariableDeclarationStatement[32488-32535]"
    }, {
      "left" : "for (int row = 0; row < nRowB; row++)",
      "right" : "for (int row = 0; row < nRowB; row++)",
      "info" : "ForStatement[32547-32770]:ForStatement[32544-32767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32585-32770]:Block[32582-32767]"
    }, {
      "left" : "final double[] bpRow = bp[row];",
      "right" : "final double[] bpRow = bp[row];",
      "info" : "VariableDeclarationStatement[32599-32630]:VariableDeclarationStatement[32596-32627]"
    }, {
      "left" : "for (int col = 0; col < nColB; col++)",
      "right" : "for (int col = 0; col < nColB; col++)",
      "info" : "ForStatement[32643-32760]:ForStatement[32640-32757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32681-32760]:Block[32678-32757]"
    }, {
      "left" : "bpRow[col] = b.getEntry(permutation[row], col);",
      "right" : "bpRow[col] = b.getEntry(permutation[row], col);",
      "info" : "ExpressionStatement[32699-32746]:ExpressionStatement[32696-32743]"
    }, {
      "left" : "for (int col = 0; col < nCol; col++)",
      "right" : "for (int col = 0; col < nCol; col++)",
      "info" : "ForStatement[32804-33126]:ForStatement[32801-33123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32841-33126]:Block[32838-33123]"
    }, {
      "left" : "for (int i = col + 1; i < nCol; i++)",
      "right" : "for (int i = col + 1; i < nCol; i++)",
      "info" : "ForStatement[32855-33116]:ForStatement[32852-33113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32892-33116]:Block[32889-33113]"
    }, {
      "left" : "final double[] bpI = bp[i];",
      "right" : "final double[] bpI = bp[i];",
      "info" : "VariableDeclarationStatement[32910-32937]:VariableDeclarationStatement[32907-32934]"
    }, {
      "left" : "final double[] luI = lu[i];",
      "right" : "final double[] luI = lu[i];",
      "info" : "VariableDeclarationStatement[32954-32981]:VariableDeclarationStatement[32951-32978]"
    }, {
      "left" : "for (int j = 0; j < nColB; j++)",
      "right" : "for (int j = 0; j < nColB; j++)",
      "info" : "ForStatement[32998-33102]:ForStatement[32995-33099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33030-33102]:Block[33027-33099]"
    }, {
      "left" : "bpI[j] -= bp[col][j] * luI[col];",
      "right" : "bpI[j] -= bp[col][j] * luI[col];",
      "info" : "ExpressionStatement[33052-33084]:ExpressionStatement[33049-33081]"
    }, {
      "left" : "for (int col = nCol - 1; col >= 0; col--)",
      "right" : "for (int col = nCol - 1; col >= 0; col--)",
      "info" : "ForStatement[33160-33668]:ForStatement[33157-33665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33202-33668]:Block[33199-33665]"
    }, {
      "left" : "final double[] bpCol = bp[col];",
      "right" : "final double[] bpCol = bp[col];",
      "info" : "VariableDeclarationStatement[33216-33247]:VariableDeclarationStatement[33213-33244]"
    }, {
      "left" : "final double luDiag = lu[col][col];",
      "right" : "final double luDiag = lu[col][col];",
      "info" : "VariableDeclarationStatement[33260-33295]:VariableDeclarationStatement[33257-33292]"
    }, {
      "left" : "for (int j = 0; j < nColB; j++)",
      "right" : "for (int j = 0; j < nColB; j++)",
      "info" : "ForStatement[33308-33391]:ForStatement[33305-33388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33340-33391]:Block[33337-33388]"
    }, {
      "left" : "bpCol[j] /= luDiag;",
      "right" : "bpCol[j] /= luDiag;",
      "info" : "ExpressionStatement[33358-33377]:ExpressionStatement[33355-33374]"
    }, {
      "left" : "for (int i = 0; i < col; i++)",
      "right" : "for (int i = 0; i < col; i++)",
      "info" : "ForStatement[33404-33658]:ForStatement[33401-33655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33434-33658]:Block[33431-33655]"
    }, {
      "left" : "final double[] bpI = bp[i];",
      "right" : "final double[] bpI = bp[i];",
      "info" : "VariableDeclarationStatement[33452-33479]:VariableDeclarationStatement[33449-33476]"
    }, {
      "left" : "final double[] luI = lu[i];",
      "right" : "final double[] luI = lu[i];",
      "info" : "VariableDeclarationStatement[33496-33523]:VariableDeclarationStatement[33493-33520]"
    }, {
      "left" : "for (int j = 0; j < nColB; j++)",
      "right" : "for (int j = 0; j < nColB; j++)",
      "info" : "ForStatement[33540-33644]:ForStatement[33537-33641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33572-33644]:Block[33569-33641]"
    }, {
      "left" : "bpI[j] -= bp[col][j] * luI[col];",
      "right" : "bpI[j] -= bp[col][j] * luI[col];",
      "info" : "ExpressionStatement[33594-33626]:ExpressionStatement[33591-33623]"
    }, {
      "left" : "return new RealMatrixImpl(bp, false);",
      "right" : "return new RealMatrixImpl(bp, false);",
      "info" : "ReturnStatement[33678-33715]:ReturnStatement[33675-33712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34611-34617]:Modifier[34608-34614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34618-34622]:PrimitiveType[34615-34619]"
    }, {
      "left" : "luDecompose",
      "right" : "luDecompose",
      "info" : "SimpleName[34623-34634]:SimpleName[34620-34631]"
    }, {
      "left" : "InvalidMatrixException",
      "right" : "InvalidMatrixException",
      "info" : "SimpleType[34644-34666]:SimpleType[34641-34663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34667-37085]:Block[34664-37082]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[34678-34719]:VariableDeclarationStatement[34675-34716]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[34728-34772]:VariableDeclarationStatement[34725-34769]"
    }, {
      "left" : "if (nRows != nCols)",
      "right" : "if (nRows != nCols)",
      "info" : "IfStatement[34781-34914]:IfStatement[34778-34911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34801-34914]:Block[34798-34911]"
    }, {
      "left" : "throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");",
      "right" : "throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");",
      "info" : "ThrowStatement[34815-34904]:ThrowStatement[34812-34901]"
    }, {
      "left" : "lu = getData();",
      "right" : "lu = getData();",
      "info" : "ExpressionStatement[34923-34938]:ExpressionStatement[34920-34935]"
    }, {
      "left" : "permutation = new int[nRows];",
      "right" : "permutation = new int[nRows];",
      "info" : "ExpressionStatement[34999-35028]:ExpressionStatement[34996-35025]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[35037-35122]:ForStatement[35034-35119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35075-35122]:Block[35072-35119]"
    }, {
      "left" : "permutation[row] = row;",
      "right" : "permutation[row] = row;",
      "info" : "ExpressionStatement[35089-35112]:ExpressionStatement[35086-35109]"
    }, {
      "left" : "parity = 1;",
      "right" : "parity = 1;",
      "info" : "ExpressionStatement[35131-35142]:ExpressionStatement[35128-35139]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[35181-37079]:ForStatement[35178-37076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35219-37079]:Block[35216-37076]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[35234-35249]:VariableDeclarationStatement[35231-35246]"
    }, {
      "left" : "for (int row = 0; row < col; row++)",
      "right" : "for (int row = 0; row < col; row++)",
      "info" : "ForStatement[35284-35567]:ForStatement[35281-35564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35320-35567]:Block[35317-35564]"
    }, {
      "left" : "final double[] luRow = lu[row];",
      "right" : "final double[] luRow = lu[row];",
      "info" : "VariableDeclarationStatement[35338-35369]:VariableDeclarationStatement[35335-35366]"
    }, {
      "left" : "sum = luRow[col];",
      "right" : "sum = luRow[col];",
      "info" : "ExpressionStatement[35386-35403]:ExpressionStatement[35383-35400]"
    }, {
      "left" : "for (int i = 0; i < row; i++)",
      "right" : "for (int i = 0; i < row; i++)",
      "info" : "ForStatement[35420-35519]:ForStatement[35417-35516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35450-35519]:Block[35447-35516]"
    }, {
      "left" : "sum -= luRow[i] * lu[i][col];",
      "right" : "sum -= luRow[i] * lu[i][col];",
      "info" : "ExpressionStatement[35472-35501]:ExpressionStatement[35469-35498]"
    }, {
      "left" : "luRow[col] = sum;",
      "right" : "luRow[col] = sum;",
      "info" : "ExpressionStatement[35536-35553]:ExpressionStatement[35533-35550]"
    }, {
      "left" : "int max = col;",
      "right" : "int max = col;",
      "info" : "VariableDeclarationStatement[35602-35616]:VariableDeclarationStatement[35599-35613]"
    }, {
      "left" : "double largest = 0d;",
      "right" : "double largest = 0d;",
      "info" : "VariableDeclarationStatement[35648-35668]:VariableDeclarationStatement[35645-35665]"
    }, {
      "left" : "for (int row = col; row < nRows; row++)",
      "right" : "for (int row = col; row < nRows; row++)",
      "info" : "ForStatement[35681-36162]:ForStatement[35678-36159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35721-36162]:Block[35718-36159]"
    }, {
      "left" : "final double[] luRow = lu[row];",
      "right" : "final double[] luRow = lu[row];",
      "info" : "VariableDeclarationStatement[35739-35770]:VariableDeclarationStatement[35736-35767]"
    }, {
      "left" : "sum = luRow[col];",
      "right" : "sum = luRow[col];",
      "info" : "ExpressionStatement[35787-35804]:ExpressionStatement[35784-35801]"
    }, {
      "left" : "for (int i = 0; i < col; i++)",
      "right" : "for (int i = 0; i < col; i++)",
      "info" : "ForStatement[35821-35920]:ForStatement[35818-35917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35851-35920]:Block[35848-35917]"
    }, {
      "left" : "sum -= luRow[i] * lu[i][col];",
      "right" : "sum -= luRow[i] * lu[i][col];",
      "info" : "ExpressionStatement[35873-35902]:ExpressionStatement[35870-35899]"
    }, {
      "left" : "luRow[col] = sum;",
      "right" : "luRow[col] = sum;",
      "info" : "ExpressionStatement[35937-35954]:ExpressionStatement[35934-35951]"
    }, {
      "left" : "if (Math.abs(sum) > largest)",
      "right" : "if (Math.abs(sum) > largest)",
      "info" : "IfStatement[36024-36148]:IfStatement[36021-36145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36053-36148]:Block[36050-36145]"
    }, {
      "left" : "largest = Math.abs(sum);",
      "right" : "largest = Math.abs(sum);",
      "info" : "ExpressionStatement[36075-36099]:ExpressionStatement[36072-36096]"
    }, {
      "left" : "max = row;",
      "right" : "max = row;",
      "info" : "ExpressionStatement[36120-36130]:ExpressionStatement[36117-36127]"
    }, {
      "left" : "if (Math.abs(lu[max][col]) < TOO_SMALL)",
      "right" : "if (Math.abs(lu[max][col]) < TOO_SMALL)",
      "info" : "IfStatement[36209-36363]:IfStatement[36206-36360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36249-36363]:Block[36246-36360]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[36267-36277]:ExpressionStatement[36264-36274]"
    }, {
      "left" : "throw new InvalidMatrixException(\"matrix is singular\");",
      "right" : "throw new InvalidMatrixException(\"matrix is singular\");",
      "info" : "ThrowStatement[36294-36349]:ThrowStatement[36291-36346]"
    }, {
      "left" : "if (max != col)",
      "right" : "if (max != col)",
      "info" : "IfStatement[36411-36836]:IfStatement[36408-36833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36427-36836]:Block[36424-36833]"
    }, {
      "left" : "double tmp = 0;",
      "right" : "double tmp = 0;",
      "info" : "VariableDeclarationStatement[36445-36460]:VariableDeclarationStatement[36442-36457]"
    }, {
      "left" : "for (int i = 0; i < nCols; i++)",
      "right" : "for (int i = 0; i < nCols; i++)",
      "info" : "ForStatement[36477-36649]:ForStatement[36474-36646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36509-36649]:Block[36506-36646]"
    }, {
      "left" : "tmp = lu[max][i];",
      "right" : "tmp = lu[max][i];",
      "info" : "ExpressionStatement[36531-36548]:ExpressionStatement[36528-36545]"
    }, {
      "left" : "lu[max][i] = lu[col][i];",
      "right" : "lu[max][i] = lu[col][i];",
      "info" : "ExpressionStatement[36569-36593]:ExpressionStatement[36566-36590]"
    }, {
      "left" : "lu[col][i] = tmp;",
      "right" : "lu[col][i] = tmp;",
      "info" : "ExpressionStatement[36614-36631]:ExpressionStatement[36611-36628]"
    }, {
      "left" : "int temp = permutation[max];",
      "right" : "int temp = permutation[max];",
      "info" : "VariableDeclarationStatement[36666-36694]:VariableDeclarationStatement[36663-36691]"
    }, {
      "left" : "permutation[max] = permutation[col];",
      "right" : "permutation[max] = permutation[col];",
      "info" : "ExpressionStatement[36711-36747]:ExpressionStatement[36708-36744]"
    }, {
      "left" : "permutation[col] = temp;",
      "right" : "permutation[col] = temp;",
      "info" : "ExpressionStatement[36764-36788]:ExpressionStatement[36761-36785]"
    }, {
      "left" : "parity = -parity;",
      "right" : "parity = -parity;",
      "info" : "ExpressionStatement[36805-36822]:ExpressionStatement[36802-36819]"
    }, {
      "left" : "final double luDiag = lu[col][col];",
      "right" : "final double luDiag = lu[col][col];",
      "info" : "VariableDeclarationStatement[36922-36957]:VariableDeclarationStatement[36919-36954]"
    }, {
      "left" : "for (int row = col + 1; row < nRows; row++)",
      "right" : "for (int row = col + 1; row < nRows; row++)",
      "info" : "ForStatement[36970-37069]:ForStatement[36967-37066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37014-37069]:Block[37011-37066]"
    }, {
      "left" : "lu[row][col] /= luDiag;",
      "right" : "lu[row][col] /= luDiag;",
      "info" : "ExpressionStatement[37032-37055]:ExpressionStatement[37029-37052]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37214-37220]:Modifier[37211-37217]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[37221-37227]:SimpleType[37218-37224]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[37228-37236]:SimpleName[37225-37233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37239-37861]:Block[37236-37858]"
    }, {
      "left" : "StringBuffer res = new StringBuffer();",
      "right" : "StringBuffer res = new StringBuffer();",
      "info" : "VariableDeclarationStatement[37249-37287]:VariableDeclarationStatement[37246-37284]"
    }, {
      "left" : "res.append(\"RealMatrixImpl{\");",
      "right" : "res.append(\"RealMatrixImpl{\");",
      "info" : "ExpressionStatement[37296-37326]:ExpressionStatement[37293-37323]"
    }, {
      "left" : "if (data != null)",
      "right" : "if (data != null)",
      "info" : "IfStatement[37335-37799]:IfStatement[37332-37796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37353-37799]:Block[37350-37796]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[37367-37788]:ForStatement[37364-37785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37405-37788]:Block[37402-37785]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[37423-37490]:IfStatement[37420-37487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37434-37490]:Block[37431-37487]"
    }, {
      "left" : "res.append(\",\");",
      "right" : "res.append(\",\");",
      "info" : "ExpressionStatement[37456-37472]:ExpressionStatement[37453-37469]"
    }, {
      "left" : "res.append(\"{\");",
      "right" : "res.append(\"{\");",
      "info" : "ExpressionStatement[37507-37523]:ExpressionStatement[37504-37520]"
    }, {
      "left" : "for (int j = 0; j < data[0].length; j++)",
      "right" : "for (int j = 0; j < data[0].length; j++)",
      "info" : "ForStatement[37540-37740]:ForStatement[37537-37737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37581-37740]:Block[37578-37737]"
    }, {
      "left" : "if (j > 0)",
      "right" : "if (j > 0)",
      "info" : "IfStatement[37603-37678]:IfStatement[37600-37675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37614-37678]:Block[37611-37675]"
    }, {
      "left" : "res.append(\",\");",
      "right" : "res.append(\",\");",
      "info" : "ExpressionStatement[37640-37656]:ExpressionStatement[37637-37653]"
    }, {
      "left" : "res.append(data[i][j]);",
      "right" : "res.append(data[i][j]);",
      "info" : "ExpressionStatement[37699-37722]:ExpressionStatement[37696-37719]"
    }, {
      "left" : "res.append(\"}\");",
      "right" : "res.append(\"}\");",
      "info" : "ExpressionStatement[37758-37774]:ExpressionStatement[37755-37771]"
    }, {
      "left" : "res.append(\"}\");",
      "right" : "res.append(\"}\");",
      "info" : "ExpressionStatement[37808-37824]:ExpressionStatement[37805-37821]"
    }, {
      "left" : "return res.toString();",
      "right" : "return res.toString();",
      "info" : "ReturnStatement[37833-37855]:ReturnStatement[37830-37852]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38277-38283]:Modifier[38274-38280]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38284-38291]:PrimitiveType[38281-38288]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[38292-38298]:SimpleName[38289-38295]"
    }, {
      "left" : "Object object",
      "right" : "Object object",
      "info" : "SingleVariableDeclaration[38299-38312]:SingleVariableDeclaration[38296-38309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38314-39108]:Block[38311-39105]"
    }, {
      "left" : "if (object == this)",
      "right" : "if (object == this)",
      "info" : "IfStatement[38324-38381]:IfStatement[38321-38378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38345-38381]:Block[38342-38378]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38359-38371]:ReturnStatement[38356-38368]"
    }, {
      "left" : "if (object instanceof RealMatrixImpl == false)",
      "right" : "if (object instanceof RealMatrixImpl == false)",
      "info" : "IfStatement[38390-38474]:IfStatement[38387-38471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38437-38474]:Block[38434-38471]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38451-38464]:ReturnStatement[38448-38461]"
    }, {
      "left" : "RealMatrix m = (RealMatrix) object;",
      "right" : "RealMatrix m = (RealMatrix) object;",
      "info" : "VariableDeclarationStatement[38483-38518]:VariableDeclarationStatement[38480-38515]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[38527-38563]:VariableDeclarationStatement[38524-38560]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[38572-38611]:VariableDeclarationStatement[38569-38608]"
    }, {
      "left" : "if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows)",
      "right" : "if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows)",
      "info" : "IfStatement[38620-38726]:IfStatement[38617-38723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38689-38726]:Block[38686-38723]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38703-38716]:ReturnStatement[38700-38713]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[38735-39081]:ForStatement[38732-39078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38773-39081]:Block[38770-39078]"
    }, {
      "left" : "final double[] dataRow = data[row];",
      "right" : "final double[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[38787-38822]:VariableDeclarationStatement[38784-38819]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[38835-39071]:ForStatement[38832-39068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38873-39071]:Block[38870-39068]"
    }, {
      "left" : "if (Double.doubleToLongBits(dataRow[col]) != \n                    Double.doubleToLongBits(m.getEntry(row, col)))",
      "right" : "if (Double.doubleToLongBits(dataRow[col]) != \n                    Double.doubleToLongBits(m.getEntry(row, col)))",
      "info" : "IfStatement[38891-39057]:IfStatement[38888-39054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39004-39057]:Block[39001-39054]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39026-39039]:ReturnStatement[39023-39036]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39090-39102]:ReturnStatement[39087-39099]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39220-39226]:Modifier[39217-39223]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[39227-39230]:PrimitiveType[39224-39227]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[39231-39239]:SimpleName[39228-39236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39242-39732]:Block[39239-39729]"
    }, {
      "left" : "int ret = 7;",
      "right" : "int ret = 7;",
      "info" : "VariableDeclarationStatement[39252-39264]:VariableDeclarationStatement[39249-39261]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[39273-39309]:VariableDeclarationStatement[39270-39306]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[39318-39357]:VariableDeclarationStatement[39315-39354]"
    }, {
      "left" : "ret = ret * 31 + nRows;",
      "right" : "ret = ret * 31 + nRows;",
      "info" : "ExpressionStatement[39366-39389]:ExpressionStatement[39363-39386]"
    }, {
      "left" : "ret = ret * 31 + nCols;",
      "right" : "ret = ret * 31 + nCols;",
      "info" : "ExpressionStatement[39398-39421]:ExpressionStatement[39395-39418]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[39430-39706]:ForStatement[39427-39703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39468-39706]:Block[39465-39703]"
    }, {
      "left" : "final double[] dataRow = data[row];",
      "right" : "final double[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[39482-39517]:VariableDeclarationStatement[39479-39514]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[39530-39696]:ForStatement[39527-39693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39568-39696]:Block[39565-39693]"
    }, {
      "left" : "ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                   MathUtils.hash(dataRow[col]);",
      "right" : "ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                   MathUtils.hash(dataRow[col]);",
      "info" : "ExpressionStatement[39585-39683]:ExpressionStatement[39582-39680]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[39715-39726]:ReturnStatement[39712-39723]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[41123-41132]:Modifier[41120-41129]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[41133-41143]:SimpleType[41130-41140]"
    }, {
      "left" : "getLUMatrix",
      "right" : "getLUMatrix",
      "info" : "SimpleName[41144-41155]:SimpleName[41141-41152]"
    }, {
      "left" : "InvalidMatrixException",
      "right" : "InvalidMatrixException",
      "info" : "SimpleType[41165-41187]:SimpleType[41162-41184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41188-41297]:Block[41185-41294]"
    }, {
      "left" : "if (lu == null)",
      "right" : "if (lu == null)",
      "info" : "IfStatement[41198-41252]:IfStatement[41195-41249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41214-41252]:Block[41211-41249]"
    }, {
      "left" : "luDecompose();",
      "right" : "luDecompose();",
      "info" : "ExpressionStatement[41228-41242]:ExpressionStatement[41225-41239]"
    }, {
      "left" : "return new RealMatrixImpl(lu);",
      "right" : "return new RealMatrixImpl(lu);",
      "info" : "ReturnStatement[41261-41291]:ReturnStatement[41258-41288]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[41734-41743]:Modifier[41731-41740]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[41744-41749]:ArrayType[41741-41746]"
    }, {
      "left" : "getPermutation",
      "right" : "getPermutation",
      "info" : "SimpleName[41750-41764]:SimpleName[41747-41761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41767-41919]:Block[41764-41916]"
    }, {
      "left" : "final int[] out = new int[permutation.length];",
      "right" : "final int[] out = new int[permutation.length];",
      "info" : "VariableDeclarationStatement[41777-41823]:VariableDeclarationStatement[41774-41820]"
    }, {
      "left" : "System.arraycopy(permutation, 0, out, 0, permutation.length);",
      "right" : "System.arraycopy(permutation, 0, out, 0, permutation.length);",
      "info" : "ExpressionStatement[41832-41893]:ExpressionStatement[41829-41890]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[41902-41913]:ReturnStatement[41899-41910]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42106-42113]:Modifier[42103-42110]"
    }, {
      "left" : "double[][]",
      "right" : "double[][]",
      "info" : "ArrayType[42114-42124]:ArrayType[42111-42121]"
    }, {
      "left" : "copyOut",
      "right" : "copyOut",
      "info" : "SimpleName[42125-42132]:SimpleName[42122-42129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42135-42484]:Block[42132-42481]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[42145-42186]:VariableDeclarationStatement[42142-42183]"
    }, {
      "left" : "final double[][] out = new double[nRows][this.getColumnDimension()];",
      "right" : "final double[][] out = new double[nRows][this.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[42195-42263]:VariableDeclarationStatement[42192-42260]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[42346-42458]:ForStatement[42343-42455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42378-42458]:Block[42375-42455]"
    }, {
      "left" : "System.arraycopy(data[i], 0, out[i], 0, data[i].length);",
      "right" : "System.arraycopy(data[i], 0, out[i], 0, data[i].length);",
      "info" : "ExpressionStatement[42392-42448]:ExpressionStatement[42389-42445]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[42467-42478]:ReturnStatement[42464-42475]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42839-42846]:Modifier[42836-42843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42847-42851]:PrimitiveType[42844-42848]"
    }, {
      "left" : "copyIn",
      "right" : "copyIn",
      "info" : "SimpleName[42852-42858]:SimpleName[42849-42855]"
    }, {
      "left" : "double[][] in",
      "right" : "double[][] in",
      "info" : "SingleVariableDeclaration[42859-42872]:SingleVariableDeclaration[42856-42869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42874-42911]:Block[42871-42908]"
    }, {
      "left" : "setSubMatrix(in,0,0);",
      "right" : "setSubMatrix(in,0,0);",
      "info" : "ExpressionStatement[42884-42905]:ExpressionStatement[42881-42902]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43136-43143]:Modifier[43133-43140]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43144-43151]:PrimitiveType[43141-43148]"
    }, {
      "left" : "isValidCoordinate",
      "right" : "isValidCoordinate",
      "info" : "SimpleName[43152-43169]:SimpleName[43149-43166]"
    }, {
      "left" : "int row",
      "right" : "int row",
      "info" : "SingleVariableDeclaration[43170-43177]:SingleVariableDeclaration[43167-43174]"
    }, {
      "left" : "int col",
      "right" : "int col",
      "info" : "SingleVariableDeclaration[43179-43186]:SingleVariableDeclaration[43176-43183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43188-43363]:Block[43185-43360]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[43198-43234]:VariableDeclarationStatement[43195-43231]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[43243-43282]:VariableDeclarationStatement[43240-43279]"
    }, {
      "left" : "return !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);",
      "right" : "return !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);",
      "info" : "ReturnStatement[43291-43357]:ReturnStatement[43288-43354]"
    } ]
  },
  "interFileMappings" : { }
}