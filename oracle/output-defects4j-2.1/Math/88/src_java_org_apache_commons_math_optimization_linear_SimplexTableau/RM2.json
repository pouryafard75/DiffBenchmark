{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SimplexTableau",
      "right" : "SimplexTableau",
      "info" : "TypeDeclaration[1484-20063]:TypeDeclaration[1484-19983]"
    }, {
      "left" : "private static final long serialVersionUID = -1369660067587938365L;",
      "right" : "private static final long serialVersionUID = -1369660067587938365L;",
      "info" : "FieldDeclaration[2458-2569]:FieldDeclaration[2458-2569]"
    }, {
      "left" : "private final LinearObjectiveFunction f;",
      "right" : "private final LinearObjectiveFunction f;",
      "info" : "FieldDeclaration[2575-2653]:FieldDeclaration[2575-2653]"
    }, {
      "left" : "private final Collection<LinearConstraint> constraints;",
      "right" : "private final Collection<LinearConstraint> constraints;",
      "info" : "FieldDeclaration[2659-2745]:FieldDeclaration[2659-2745]"
    }, {
      "left" : "private final boolean restrictToNonNegative;",
      "right" : "private final boolean restrictToNonNegative;",
      "info" : "FieldDeclaration[2751-2864]:FieldDeclaration[2751-2864]"
    }, {
      "left" : "protected transient RealMatrix tableau;",
      "right" : "protected transient RealMatrix tableau;",
      "info" : "FieldDeclaration[2870-2936]:FieldDeclaration[2870-2936]"
    }, {
      "left" : "protected final int numDecisionVariables;",
      "right" : "protected final int numDecisionVariables;",
      "info" : "FieldDeclaration[2942-3024]:FieldDeclaration[2942-3024]"
    }, {
      "left" : "protected final int numSlackVariables;",
      "right" : "protected final int numSlackVariables;",
      "info" : "FieldDeclaration[3030-3106]:FieldDeclaration[3030-3106]"
    }, {
      "left" : "protected int numArtificialVariables;",
      "right" : "protected int numArtificialVariables;",
      "info" : "FieldDeclaration[3112-3192]:FieldDeclaration[3112-3192]"
    }, {
      "left" : "protected final double epsilon;",
      "right" : "protected final double epsilon;",
      "info" : "FieldDeclaration[3198-3298]:FieldDeclaration[3198-3298]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "info" : "MethodDeclaration[3308-4717]:MethodDeclaration[3308-4717]"
    }, {
      "left" : "protected double[][] createTableau(final boolean maximize)",
      "right" : "protected double[][] createTableau(final boolean maximize)",
      "info" : "MethodDeclaration[4723-7804]:MethodDeclaration[4723-7804]"
    }, {
      "left" : "public int getNumVariables()",
      "right" : "public int getNumVariables()",
      "info" : "MethodDeclaration[7810-7977]:MethodDeclaration[7810-7977]"
    }, {
      "left" : "public List<LinearConstraint> getNormalizedConstraints()",
      "right" : "public List<LinearConstraint> getNormalizedConstraints()",
      "info" : "MethodDeclaration[7983-8416]:MethodDeclaration[7983-8416]"
    }, {
      "left" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "right" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "info" : "MethodDeclaration[8422-9127]:MethodDeclaration[8422-9127]"
    }, {
      "left" : "protected final int getNumObjectiveFunctions()",
      "right" : "protected final int getNumObjectiveFunctions()",
      "info" : "MethodDeclaration[9133-9367]:MethodDeclaration[9133-9367]"
    }, {
      "left" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "right" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "info" : "MethodDeclaration[9373-9881]:MethodDeclaration[9373-9881]"
    }, {
      "left" : "private void initialize()",
      "right" : "private void initialize()",
      "info" : "MethodDeclaration[9887-10304]:MethodDeclaration[9887-10304]"
    }, {
      "left" : "protected static double getInvertedCoeffiecientSum(final RealVector coefficients)",
      "right" : "protected static double getInvertedCoeffiecientSum(final RealVector coefficients)",
      "info" : "MethodDeclaration[10310-10756]:MethodDeclaration[10310-10756]"
    }, {
      "left" : "private Integer getBasicRow(final int col)",
      "right" : "private Integer getBasicRow(final int col)",
      "info" : "MethodDeclaration[10762-11365]:MethodDeclaration[10762-11365]"
    }, {
      "left" : "protected void discardArtificialVariables()",
      "right" : "protected void discardArtificialVariables()",
      "info" : "MethodDeclaration[11371-12087]:MethodDeclaration[11371-12087]"
    }, {
      "left" : "private void copyArray(final double[] src, final double[] dest,\n                           final int destPos)",
      "right" : "private void copyArray(final double[] src, final double[] dest,\n                           final int destPos)",
      "info" : "MethodDeclaration[12094-12431]:MethodDeclaration[12094-12431]"
    }, {
      "left" : "protected RealPointValuePair getSolution()",
      "right" : "protected RealPointValuePair getSolution()",
      "info" : "MethodDeclaration[12437-13785]:MethodDeclaration[12437-13705]"
    }, {
      "left" : "protected void divideRow(final int dividendRow, final double divisor)",
      "right" : "protected void divideRow(final int dividendRow, final double divisor)",
      "info" : "MethodDeclaration[13791-14322]:MethodDeclaration[13711-14242]"
    }, {
      "left" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "right" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "info" : "MethodDeclaration[14328-15014]:MethodDeclaration[14248-14934]"
    }, {
      "left" : "protected final int getWidth()",
      "right" : "protected final int getWidth()",
      "info" : "MethodDeclaration[15020-15192]:MethodDeclaration[14940-15112]"
    }, {
      "left" : "protected final int getHeight()",
      "right" : "protected final int getHeight()",
      "info" : "MethodDeclaration[15198-15370]:MethodDeclaration[15118-15290]"
    }, {
      "left" : "protected final double getEntry(final int row, final int column)",
      "right" : "protected final double getEntry(final int row, final int column)",
      "info" : "MethodDeclaration[15376-15639]:MethodDeclaration[15296-15559]"
    }, {
      "left" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "right" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "info" : "MethodDeclaration[15645-15956]:MethodDeclaration[15565-15876]"
    }, {
      "left" : "protected final int getSlackVariableOffset()",
      "right" : "protected final int getSlackVariableOffset()",
      "info" : "MethodDeclaration[15962-16197]:MethodDeclaration[15882-16117]"
    }, {
      "left" : "protected final int getArtificialVariableOffset()",
      "right" : "protected final int getArtificialVariableOffset()",
      "info" : "MethodDeclaration[16203-16473]:MethodDeclaration[16123-16393]"
    }, {
      "left" : "protected final int getRhsOffset()",
      "right" : "protected final int getRhsOffset()",
      "info" : "MethodDeclaration[16479-16659]:MethodDeclaration[16399-16579]"
    }, {
      "left" : "protected final int getNumDecisionVariables()",
      "right" : "protected final int getNumDecisionVariables()",
      "info" : "MethodDeclaration[16665-17110]:MethodDeclaration[16585-17030]"
    }, {
      "left" : "protected final int getOriginalNumDecisionVariables()",
      "right" : "protected final int getOriginalNumDecisionVariables()",
      "info" : "MethodDeclaration[17116-17427]:MethodDeclaration[17036-17347]"
    }, {
      "left" : "protected final int getNumSlackVariables()",
      "right" : "protected final int getNumSlackVariables()",
      "info" : "MethodDeclaration[17433-17616]:MethodDeclaration[17353-17536]"
    }, {
      "left" : "protected final int getNumArtificialVariables()",
      "right" : "protected final int getNumArtificialVariables()",
      "info" : "MethodDeclaration[17622-17825]:MethodDeclaration[17542-17745]"
    }, {
      "left" : "protected final double[][] getData()",
      "right" : "protected final double[][] getData()",
      "info" : "MethodDeclaration[17831-17982]:MethodDeclaration[17751-17902]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[17988-18849]:MethodDeclaration[17908-18769]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[18859-19264]:MethodDeclaration[18779-19184]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "right" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "info" : "MethodDeclaration[19270-19603]:MethodDeclaration[19190-19523]"
    }, {
      "left" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "right" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "info" : "MethodDeclaration[19609-20061]:MethodDeclaration[19529-19981]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3983-4717]:Block[3983-4717]"
    }, {
      "left" : "this.f                      = f;",
      "right" : "this.f                      = f;",
      "info" : "ExpressionStatement[3993-4025]:ExpressionStatement[3993-4025]"
    }, {
      "left" : "this.constraints            = constraints;",
      "right" : "this.constraints            = constraints;",
      "info" : "ExpressionStatement[4034-4076]:ExpressionStatement[4034-4076]"
    }, {
      "left" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "right" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "info" : "ExpressionStatement[4085-4137]:ExpressionStatement[4085-4137]"
    }, {
      "left" : "this.epsilon                = epsilon;",
      "right" : "this.epsilon                = epsilon;",
      "info" : "ExpressionStatement[4146-4184]:ExpressionStatement[4146-4184]"
    }, {
      "left" : "this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);",
      "right" : "this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);",
      "info" : "ExpressionStatement[4193-4275]:ExpressionStatement[4193-4275]"
    }, {
      "left" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[4284-4438]:ExpressionStatement[4284-4438]"
    }, {
      "left" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[4447-4600]:ExpressionStatement[4447-4600]"
    }, {
      "left" : "this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));",
      "right" : "this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));",
      "info" : "ExpressionStatement[4609-4689]:ExpressionStatement[4609-4689]"
    }, {
      "left" : "initialize();",
      "right" : "initialize();",
      "info" : "ExpressionStatement[4698-4711]:ExpressionStatement[4698-4711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-7804]:Block[4941-7804]"
    }, {
      "left" : "List<LinearConstraint> constraints = getNormalizedConstraints();",
      "right" : "List<LinearConstraint> constraints = getNormalizedConstraints();",
      "info" : "VariableDeclarationStatement[4999-5063]:VariableDeclarationStatement[4999-5063]"
    }, {
      "left" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "right" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "info" : "VariableDeclarationStatement[5072-5191]:VariableDeclarationStatement[5072-5191]"
    }, {
      "left" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "right" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "info" : "VariableDeclarationStatement[5218-5279]:VariableDeclarationStatement[5218-5279]"
    }, {
      "left" : "double[][] matrix = new double[height][width];",
      "right" : "double[][] matrix = new double[height][width];",
      "info" : "VariableDeclarationStatement[5288-5334]:VariableDeclarationStatement[5288-5334]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[5394-5473]:IfStatement[5394-5473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5431-5473]:Block[5431-5473]"
    }, {
      "left" : "matrix[0][0] = -1;",
      "right" : "matrix[0][0] = -1;",
      "info" : "ExpressionStatement[5445-5463]:ExpressionStatement[5445-5463]"
    }, {
      "left" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "right" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[5482-5537]:VariableDeclarationStatement[5482-5537]"
    }, {
      "left" : "matrix[zIndex][zIndex] = maximize ? 1 : -1;",
      "right" : "matrix[zIndex][zIndex] = maximize ? 1 : -1;",
      "info" : "ExpressionStatement[5546-5589]:ExpressionStatement[5546-5589]"
    }, {
      "left" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "right" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "info" : "VariableDeclarationStatement[5598-5714]:VariableDeclarationStatement[5598-5714]"
    }, {
      "left" : "copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",
      "right" : "copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",
      "info" : "ExpressionStatement[5727-5814]:ExpressionStatement[5727-5814]"
    }, {
      "left" : "matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();",
      "right" : "matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();",
      "info" : "ExpressionStatement[5827-5929]:ExpressionStatement[5827-5929]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[5947-6136]:IfStatement[5947-6136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5975-6136]:Block[5975-6136]"
    }, {
      "left" : "matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);",
      "right" : "matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);",
      "info" : "ExpressionStatement[5997-6118]:ExpressionStatement[5997-6118]"
    }, {
      "left" : "int slackVar = 0;",
      "right" : "int slackVar = 0;",
      "info" : "VariableDeclarationStatement[6204-6221]:VariableDeclarationStatement[6204-6221]"
    }, {
      "left" : "int artificialVar = 0;",
      "right" : "int artificialVar = 0;",
      "info" : "VariableDeclarationStatement[6238-6260]:VariableDeclarationStatement[6238-6260]"
    }, {
      "left" : "for (int i = 0; i < constraints.size(); i++)",
      "right" : "for (int i = 0; i < constraints.size(); i++)",
      "info" : "ForStatement[6277-7766]:ForStatement[6277-7766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6322-7766]:Block[6322-7766]"
    }, {
      "left" : "LinearConstraint constraint = constraints.get(i);",
      "right" : "LinearConstraint constraint = constraints.get(i);",
      "info" : "VariableDeclarationStatement[6344-6393]:VariableDeclarationStatement[6344-6393]"
    }, {
      "left" : "int row = getNumObjectiveFunctions() + i;",
      "right" : "int row = getNumObjectiveFunctions() + i;",
      "info" : "VariableDeclarationStatement[6414-6455]:VariableDeclarationStatement[6414-6455]"
    }, {
      "left" : "copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",
      "right" : "copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",
      "info" : "ExpressionStatement[6531-6597]:ExpressionStatement[6531-6597]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[6645-6850]:IfStatement[6645-6850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6673-6850]:Block[6673-6850]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());",
      "right" : "matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());",
      "info" : "ExpressionStatement[6699-6828]:ExpressionStatement[6699-6828]"
    }, {
      "left" : "matrix[row][width - 1] = constraint.getValue();",
      "right" : "matrix[row][width - 1] = constraint.getValue();",
      "info" : "ExpressionStatement[6899-6946]:ExpressionStatement[6899-6946]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "info" : "IfStatement[7007-7348]:IfStatement[7007-7348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7061-7174]:Block[7061-7174]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() + slackVar++] = 1;",
      "right" : "matrix[row][getSlackVariableOffset() + slackVar++] = 1;",
      "info" : "ExpressionStatement[7087-7142]:ExpressionStatement[7087-7142]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "info" : "IfStatement[7180-7348]:IfStatement[7180-7348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7234-7348]:Block[7234-7348]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() + slackVar++] = -1;",
      "right" : "matrix[row][getSlackVariableOffset() + slackVar++] = -1;",
      "info" : "ExpressionStatement[7260-7316]:ExpressionStatement[7260-7316]"
    }, {
      "left" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ))",
      "right" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ))",
      "info" : "IfStatement[7414-7748]:IfStatement[7414-7748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7547-7748]:Block[7547-7748]"
    }, {
      "left" : "matrix[0][getArtificialVariableOffset() + artificialVar] = 1;",
      "right" : "matrix[0][getArtificialVariableOffset() + artificialVar] = 1;",
      "info" : "ExpressionStatement[7573-7634]:ExpressionStatement[7573-7634]"
    }, {
      "left" : "matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;",
      "right" : "matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;",
      "info" : "ExpressionStatement[7660-7725]:ExpressionStatement[7660-7725]"
    }, {
      "left" : "return matrix;",
      "right" : "return matrix;",
      "info" : "ReturnStatement[7784-7798]:ReturnStatement[7784-7798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7919-7977]:Block[7919-7977]"
    }, {
      "left" : "return f.getCoefficients().getDimension();",
      "right" : "return f.getCoefficients().getDimension();",
      "info" : "ReturnStatement[7929-7971]:ReturnStatement[7929-7971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8184-8416]:Block[8184-8416]"
    }, {
      "left" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "right" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "info" : "VariableDeclarationStatement[8194-8264]:VariableDeclarationStatement[8194-8264]"
    }, {
      "left" : "for (LinearConstraint constraint : constraints)",
      "right" : "for (LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[8273-8383]:EnhancedForStatement[8273-8383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8321-8383]:Block[8321-8383]"
    }, {
      "left" : "normalized.add(normalize(constraint));",
      "right" : "normalized.add(normalize(constraint));",
      "info" : "ExpressionStatement[8335-8373]:ExpressionStatement[8335-8373]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[8392-8410]:ReturnStatement[8392-8410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8664-9127]:Block[8664-9127]"
    }, {
      "left" : "if (constraint.getValue() < 0)",
      "right" : "if (constraint.getValue() < 0)",
      "info" : "IfStatement[8674-8964]:IfStatement[8674-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8705-8964]:Block[8705-8964]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "info" : "ReturnStatement[8719-8954]:ReturnStatement[8719-8954]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());",
      "info" : "ReturnStatement[8973-9121]:ReturnStatement[8973-9121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9304-9367]:Block[9304-9367]"
    }, {
      "left" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "right" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "info" : "ReturnStatement[9314-9361]:ReturnStatement[9314-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9652-9881]:Block[9652-9881]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[9662-9676]:VariableDeclarationStatement[9662-9676]"
    }, {
      "left" : "for (final LinearConstraint constraint : constraints)",
      "right" : "for (final LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[9685-9853]:EnhancedForStatement[9685-9853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9739-9853]:Block[9739-9853]"
    }, {
      "left" : "if (constraint.getRelationship() == relationship)",
      "right" : "if (constraint.getRelationship() == relationship)",
      "info" : "IfStatement[9753-9843]:IfStatement[9753-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-9843]:Block[9803-9843]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[9821-9829]:ExpressionStatement[9821-9829]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[9862-9875]:ReturnStatement[9862-9875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10072-10304]:Block[10072-10304]"
    }, {
      "left" : "for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++)",
      "right" : "for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++)",
      "info" : "ForStatement[10082-10298]:ForStatement[10082-10298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10167-10298]:Block[10167-10298]"
    }, {
      "left" : "int row = getBasicRow(getArtificialVariableOffset() + artificialVar);",
      "right" : "int row = getBasicRow(getArtificialVariableOffset() + artificialVar);",
      "info" : "VariableDeclarationStatement[10181-10250]:VariableDeclarationStatement[10181-10250]"
    }, {
      "left" : "subtractRow(0, row, 1.0);",
      "right" : "subtractRow(0, row, 1.0);",
      "info" : "ExpressionStatement[10263-10288]:ExpressionStatement[10263-10288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10603-10756]:Block[10603-10756]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[10613-10628]:VariableDeclarationStatement[10613-10628]"
    }, {
      "left" : "for (double coefficient : coefficients.getData())",
      "right" : "for (double coefficient : coefficients.getData())",
      "info" : "EnhancedForStatement[10637-10730]:EnhancedForStatement[10637-10730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10687-10730]:Block[10687-10730]"
    }, {
      "left" : "sum -= coefficient;",
      "right" : "sum -= coefficient;",
      "info" : "ExpressionStatement[10701-10720]:ExpressionStatement[10701-10720]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[10739-10750]:ReturnStatement[10739-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11004-11365]:Block[11004-11365]"
    }, {
      "left" : "Integer row = null;",
      "right" : "Integer row = null;",
      "info" : "VariableDeclarationStatement[11014-11033]:VariableDeclarationStatement[11014-11033]"
    }, {
      "left" : "for (int i = getNumObjectiveFunctions(); i < getHeight(); i++)",
      "right" : "for (int i = getNumObjectiveFunctions(); i < getHeight(); i++)",
      "info" : "ForStatement[11042-11339]:ForStatement[11042-11339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11105-11339]:Block[11105-11339]"
    }, {
      "left" : "if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon))",
      "right" : "if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon))",
      "info" : "IfStatement[11119-11329]:IfStatement[11119-11329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11174-11329]:Block[11174-11329]"
    }, {
      "left" : "if (row == null)",
      "right" : "if (row == null)",
      "info" : "IfStatement[11192-11315]:IfStatement[11192-11315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11209-11257]:Block[11209-11257]"
    }, {
      "left" : "row = i;",
      "right" : "row = i;",
      "info" : "ExpressionStatement[11231-11239]:ExpressionStatement[11231-11239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11263-11315]:Block[11263-11315]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11285-11297]:ReturnStatement[11285-11297]"
    }, {
      "left" : "return row;",
      "right" : "return row;",
      "info" : "ReturnStatement[11348-11359]:ReturnStatement[11348-11359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11521-12087]:Block[11521-12087]"
    }, {
      "left" : "if (numArtificialVariables == 0)",
      "right" : "if (numArtificialVariables == 0)",
      "info" : "IfStatement[11531-11595]:IfStatement[11531-11595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11564-11595]:Block[11564-11595]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11578-11585]:ReturnStatement[11578-11585]"
    }, {
      "left" : "int width = getWidth() - numArtificialVariables - 1;",
      "right" : "int width = getWidth() - numArtificialVariables - 1;",
      "info" : "VariableDeclarationStatement[11604-11656]:VariableDeclarationStatement[11604-11656]"
    }, {
      "left" : "int height = getHeight() - 1;",
      "right" : "int height = getHeight() - 1;",
      "info" : "VariableDeclarationStatement[11665-11694]:VariableDeclarationStatement[11665-11694]"
    }, {
      "left" : "double[][] matrix = new double[height][width];",
      "right" : "double[][] matrix = new double[height][width];",
      "info" : "VariableDeclarationStatement[11703-11749]:VariableDeclarationStatement[11703-11749]"
    }, {
      "left" : "for (int i = 0; i < height; i++)",
      "right" : "for (int i = 0; i < height; i++)",
      "info" : "ForStatement[11758-11989]:ForStatement[11758-11989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11791-11989]:Block[11791-11989]"
    }, {
      "left" : "for (int j = 0; j < width - 1; j++)",
      "right" : "for (int j = 0; j < width - 1; j++)",
      "info" : "ForStatement[11805-11911]:ForStatement[11805-11911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11841-11911]:Block[11841-11911]"
    }, {
      "left" : "matrix[i][j] = getEntry(i + 1, j + 1);",
      "right" : "matrix[i][j] = getEntry(i + 1, j + 1);",
      "info" : "ExpressionStatement[11859-11897]:ExpressionStatement[11859-11897]"
    }, {
      "left" : "matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",
      "right" : "matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",
      "info" : "ExpressionStatement[11924-11979]:ExpressionStatement[11924-11979]"
    }, {
      "left" : "this.tableau = new RealMatrixImpl(matrix);",
      "right" : "this.tableau = new RealMatrixImpl(matrix);",
      "info" : "ExpressionStatement[11998-12040]:ExpressionStatement[11998-12040]"
    }, {
      "left" : "this.numArtificialVariables = 0;",
      "right" : "this.numArtificialVariables = 0;",
      "info" : "ExpressionStatement[12049-12081]:ExpressionStatement[12049-12081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12343-12431]:Block[12343-12431]"
    }, {
      "left" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "right" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "info" : "ExpressionStatement[12353-12424]:ExpressionStatement[12353-12424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12666-13785]:Block[12666-13705]"
    }, {
      "left" : "double[] coefficients = new double[getOriginalNumDecisionVariables()];",
      "right" : "double[] coefficients = new double[getOriginalNumDecisionVariables()];",
      "info" : "VariableDeclarationStatement[12676-12746]:VariableDeclarationStatement[12676-12746]"
    }, {
      "left" : "Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());",
      "right" : "Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());",
      "info" : "VariableDeclarationStatement[12755-12862]:VariableDeclarationStatement[12755-12862]"
    }, {
      "left" : "double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",
      "right" : "double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",
      "info" : "VariableDeclarationStatement[12871-12951]:VariableDeclarationStatement[12871-12951]"
    }, {
      "left" : "for (int i = 0; i < coefficients.length; i++)",
      "right" : "for (int i = 0; i < coefficients.length; i++)",
      "info" : "ForStatement[12960-13700]:ForStatement[13017-13620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13006-13700]:Block[13063-13620]"
    }, {
      "left" : "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
      "right" : "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
      "info" : "ExpressionStatement[13020-13075]:ExpressionStatement[13077-13132]"
    }, {
      "left" : "coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);",
      "right" : "coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);",
      "info" : "ExpressionStatement[13229-13392]:ExpressionStatement[13433-13596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13427-13690]:Block[13179-13368]"
    }, {
      "left" : "coefficients[i] = 0;",
      "right" : "coefficients[i] = 0;",
      "info" : "ExpressionStatement[13616-13636]:ExpressionStatement[13334-13354]"
    }, {
      "left" : "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
      "right" : "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
      "info" : "ReturnStatement[13709-13779]:ReturnStatement[13629-13699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14168-14322]:Block[14088-14242]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14178-14316]:ForStatement[14098-14236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14215-14316]:Block[14135-14236]"
    }, {
      "left" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "right" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "info" : "ExpressionStatement[14229-14306]:ExpressionStatement[14149-14226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14795-15014]:Block[14715-14934]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14805-15008]:ForStatement[14725-14928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14842-15008]:Block[14762-14928]"
    }, {
      "left" : "tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));",
      "right" : "tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));",
      "info" : "ExpressionStatement[14856-14998]:ExpressionStatement[14776-14918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15140-15192]:Block[15060-15112]"
    }, {
      "left" : "return tableau.getColumnDimension();",
      "right" : "return tableau.getColumnDimension();",
      "info" : "ReturnStatement[15150-15186]:ReturnStatement[15070-15106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15321-15370]:Block[15241-15290]"
    }, {
      "left" : "return tableau.getRowDimension();",
      "right" : "return tableau.getRowDimension();",
      "info" : "ReturnStatement[15331-15364]:ReturnStatement[15251-15284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15586-15639]:Block[15506-15559]"
    }, {
      "left" : "return tableau.getEntry(row, column);",
      "right" : "return tableau.getEntry(row, column);",
      "info" : "ReturnStatement[15596-15633]:ReturnStatement[15516-15553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15903-15956]:Block[15823-15876]"
    }, {
      "left" : "tableau.setEntry(row, column, value);",
      "right" : "tableau.setEntry(row, column, value);",
      "info" : "ExpressionStatement[15913-15950]:ExpressionStatement[15833-15870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16124-16197]:Block[16044-16117]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "info" : "ReturnStatement[16134-16191]:ReturnStatement[16054-16111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16380-16473]:Block[16300-16393]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "info" : "ReturnStatement[16390-16467]:ReturnStatement[16310-16387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16621-16659]:Block[16541-16579]"
    }, {
      "left" : "return getWidth() - 1;",
      "right" : "return getWidth() - 1;",
      "info" : "ReturnStatement[16631-16653]:ReturnStatement[16551-16573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17066-17110]:Block[16986-17030]"
    }, {
      "left" : "return numDecisionVariables;",
      "right" : "return numDecisionVariables;",
      "info" : "ReturnStatement[17076-17104]:ReturnStatement[16996-17024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17332-17427]:Block[17252-17347]"
    }, {
      "left" : "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;",
      "right" : "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;",
      "info" : "ReturnStatement[17342-17421]:ReturnStatement[17262-17341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17575-17616]:Block[17495-17536]"
    }, {
      "left" : "return numSlackVariables;",
      "right" : "return numSlackVariables;",
      "info" : "ReturnStatement[17585-17610]:ReturnStatement[17505-17530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17779-17825]:Block[17699-17745]"
    }, {
      "left" : "return numArtificialVariables;",
      "right" : "return numArtificialVariables;",
      "info" : "ReturnStatement[17789-17819]:ReturnStatement[17709-17739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17941-17982]:Block[17861-17902]"
    }, {
      "left" : "return tableau.getData();",
      "right" : "return tableau.getData();",
      "info" : "ReturnStatement[17951-17976]:ReturnStatement[17871-17896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18063-18849]:Block[17983-18769]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[18072-18122]:IfStatement[17992-18042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18091-18122]:Block[18011-18042]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18102-18114]:ReturnStatement[18022-18034]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[18130-18180]:IfStatement[18050-18100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18149-18180]:Block[18069-18100]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18159-18172]:ReturnStatement[18079-18092]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18188-18842]:TryStatement[18108-18762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18192-18748]:Block[18112-18668]"
    }, {
      "left" : "SimplexTableau rhs = (SimplexTableau) other;",
      "right" : "SimplexTableau rhs = (SimplexTableau) other;",
      "info" : "VariableDeclarationStatement[18205-18249]:VariableDeclarationStatement[18125-18169]"
    }, {
      "left" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "right" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "info" : "ReturnStatement[18260-18739]:ReturnStatement[18180-18659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18779-18842]:Block[18699-18762]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18821-18834]:ReturnStatement[18741-18754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18920-19264]:Block[18840-19184]"
    }, {
      "left" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "right" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "info" : "ReturnStatement[18930-19258]:ReturnStatement[18850-19178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19507-19603]:Block[19427-19523]"
    }, {
      "left" : "oos.defaultWriteObject();",
      "right" : "oos.defaultWriteObject();",
      "info" : "ExpressionStatement[19517-19542]:ExpressionStatement[19437-19462]"
    }, {
      "left" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "right" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "info" : "ExpressionStatement[19551-19597]:ExpressionStatement[19471-19517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19956-20061]:Block[19876-19981]"
    }, {
      "left" : "ois.defaultReadObject();",
      "right" : "ois.defaultReadObject();",
      "info" : "ExpressionStatement[19966-19990]:ExpressionStatement[19886-19910]"
    }, {
      "left" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "right" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "info" : "ExpressionStatement[19999-20055]:ExpressionStatement[19919-19975]"
    } ]
  },
  "interFileMappings" : { }
}