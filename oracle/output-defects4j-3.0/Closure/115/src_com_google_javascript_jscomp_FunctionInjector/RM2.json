{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FunctionInjector",
      "right" : "FunctionInjector",
      "info" : "TypeDeclaration[1093-33112]:TypeDeclaration[1093-32703]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1319-1359]:FieldDeclaration[1319-1359]"
    }, {
      "left" : "private final Supplier<String> safeNameIdSupplier;",
      "right" : "private final Supplier<String> safeNameIdSupplier;",
      "info" : "FieldDeclaration[1362-1412]:FieldDeclaration[1362-1412]"
    }, {
      "left" : "private final boolean allowDecomposition;",
      "right" : "private final boolean allowDecomposition;",
      "info" : "FieldDeclaration[1415-1456]:FieldDeclaration[1415-1456]"
    }, {
      "left" : "private Set<String> knownConstants = Sets.newHashSet();",
      "right" : "private Set<String> knownConstants = Sets.newHashSet();",
      "info" : "FieldDeclaration[1459-1514]:FieldDeclaration[1459-1514]"
    }, {
      "left" : "private final boolean assumeStrictThis;",
      "right" : "private final boolean assumeStrictThis;",
      "info" : "FieldDeclaration[1517-1556]:FieldDeclaration[1517-1556]"
    }, {
      "left" : "private final boolean assumeMinimumCapture;",
      "right" : "private final boolean assumeMinimumCapture;",
      "info" : "FieldDeclaration[1559-1602]:FieldDeclaration[1559-1602]"
    }, {
      "left" : "public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture)",
      "right" : "public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture)",
      "info" : "MethodDeclaration[1606-2351]:MethodDeclaration[1606-2351]"
    }, {
      "left" : "enum : InliningMode",
      "right" : "enum : InliningMode",
      "info" : "EnumDeclaration[2355-2739]:EnumDeclaration[2355-2739]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "TypeDeclaration[2743-3072]:TypeDeclaration[2743-3072]"
    }, {
      "left" : "final Node callNode;",
      "right" : "final Node callNode;",
      "info" : "FieldDeclaration[2835-2855]:FieldDeclaration[2835-2855]"
    }, {
      "left" : "final JSModule module;",
      "right" : "final JSModule module;",
      "info" : "FieldDeclaration[2860-2882]:FieldDeclaration[2860-2882]"
    }, {
      "left" : "final InliningMode mode;",
      "right" : "final InliningMode mode;",
      "info" : "FieldDeclaration[2887-2911]:FieldDeclaration[2887-2911]"
    }, {
      "left" : "Reference(Node callNode, JSModule module, InliningMode mode",
      "right" : "Reference(Node callNode, JSModule module, InliningMode mode",
      "info" : "MethodDeclaration[2917-3068]:MethodDeclaration[2917-3068]"
    }, {
      "left" : "private static final int NAME_COST_ESTIMATE =\n      InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;",
      "right" : "private static final int NAME_COST_ESTIMATE =\n      InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;",
      "info" : "FieldDeclaration[3076-3481]:FieldDeclaration[3076-3481]"
    }, {
      "left" : "private static final int COMMA_COST = 1;",
      "right" : "private static final int COMMA_COST = 1;",
      "info" : "FieldDeclaration[3485-3578]:FieldDeclaration[3485-3578]"
    }, {
      "left" : "private static final int PAREN_COST = 2;",
      "right" : "private static final int PAREN_COST = 2;",
      "info" : "FieldDeclaration[3582-3681]:FieldDeclaration[3582-3681]"
    }, {
      "left" : "boolean doesFunctionMeetMinimumRequirements(\n      final String fnName, Node fnNode)",
      "right" : "boolean doesFunctionMeetMinimumRequirements(\n      final String fnName, Node fnNode)",
      "info" : "MethodDeclaration[3686-5508]:MethodDeclaration[3686-5508]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[5054-5397]:MethodDeclaration[5054-5397]"
    }, {
      "left" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t,\n      Node callNode, Node fnNode, Set<String> needAliases,\n      InliningMode mode, boolean referencesThis, boolean containsFunctions)",
      "right" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t,\n      Node callNode, Node fnNode, Set<String> needAliases,\n      InliningMode mode, boolean referencesThis, boolean containsFunctions)",
      "info" : "MethodDeclaration[5512-7768]:MethodDeclaration[5512-7768]"
    }, {
      "left" : "private boolean isSupportedCallType(Node callNode)",
      "right" : "private boolean isSupportedCallType(Node callNode)",
      "info" : "MethodDeclaration[7772-8427]:MethodDeclaration[7772-8427]"
    }, {
      "left" : "Node inline(\n      Node callNode, String fnName, Node fnNode, InliningMode mode)",
      "right" : "Node inline(\n      Node callNode, String fnName, Node fnNode, InliningMode mode)",
      "info" : "MethodDeclaration[8431-8811]:MethodDeclaration[8431-8811]"
    }, {
      "left" : "private Node inlineReturnValue(Node callNode, Node fnNode)",
      "right" : "private Node inlineReturnValue(Node callNode, Node fnNode)",
      "info" : "MethodDeclaration[8815-10202]:MethodDeclaration[8815-10202]"
    }, {
      "left" : "enum : CallSiteType",
      "right" : "enum : CallSiteType",
      "info" : "EnumDeclaration[10206-13023]:EnumDeclaration[10206-13023]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[10410-10552]:MethodDeclaration[10410-10552]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[10693-10806]:MethodDeclaration[10693-10806]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[11050-11163]:MethodDeclaration[11050-11163]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[11451-11564]:MethodDeclaration[11451-11564]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[11965-12324]:MethodDeclaration[11965-12324]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[12560-12935]:MethodDeclaration[12560-12935]"
    }, {
      "left" : "public abstract void prepare(FunctionInjector injector, Node callNode);",
      "right" : "public abstract void prepare(FunctionInjector injector, Node callNode);",
      "info" : "MethodDeclaration[12948-13019]:MethodDeclaration[12948-13019]"
    }, {
      "left" : "private CallSiteType classifyCallSite(Node callNode)",
      "right" : "private CallSiteType classifyCallSite(Node callNode)",
      "info" : "MethodDeclaration[13027-14849]:MethodDeclaration[13027-14849]"
    }, {
      "left" : "private ExpressionDecomposer getDecomposer()",
      "right" : "private ExpressionDecomposer getDecomposer()",
      "info" : "MethodDeclaration[14853-14995]:MethodDeclaration[14853-14995]"
    }, {
      "left" : "void maybePrepareCall(Node callNode)",
      "right" : "void maybePrepareCall(Node callNode)",
      "info" : "MethodDeclaration[14999-15278]:MethodDeclaration[14999-15278]"
    }, {
      "left" : "private Node inlineFunction(\n      Node callNode, Node fnNode, String fnName)",
      "right" : "private Node inlineFunction(\n      Node callNode, Node fnNode, String fnName)",
      "info" : "MethodDeclaration[15282-18312]:MethodDeclaration[15282-18312]"
    }, {
      "left" : "boolean isDirectCallNodeReplacementPossible(Node fnNode)",
      "right" : "boolean isDirectCallNodeReplacementPossible(Node fnNode)",
      "info" : "MethodDeclaration[18316-19128]:MethodDeclaration[18316-19128]"
    }, {
      "left" : "enum : CanInlineResult",
      "right" : "enum : CanInlineResult",
      "info" : "EnumDeclaration[19132-19197]:EnumDeclaration[19132-19197]"
    }, {
      "left" : "private CanInlineResult canInlineReferenceAsStatementBlock(\n      NodeTraversal t, Node callNode, Node fnNode, Set<String> namesToAlias)",
      "right" : "private CanInlineResult canInlineReferenceAsStatementBlock(\n      NodeTraversal t, Node callNode, Node fnNode, Set<String> namesToAlias)",
      "info" : "MethodDeclaration[19201-20397]:MethodDeclaration[19201-20397]"
    }, {
      "left" : "private boolean callMeetsBlockInliningRequirements(\n      NodeTraversal t, Node callNode, final Node fnNode,\n      Set<String> namesToAlias)",
      "right" : "private boolean callMeetsBlockInliningRequirements(\n      NodeTraversal t, Node callNode, final Node fnNode,\n      Set<String> namesToAlias)",
      "info" : "MethodDeclaration[20401-22997]:MethodDeclaration[20401-22997]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[21817-22089]:MethodDeclaration[21817-22089]"
    }, {
      "left" : "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode)",
      "right" : "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode)",
      "info" : "MethodDeclaration[23001-25955]:MethodDeclaration[23001-25546]"
    }, {
      "left" : "boolean inliningLowersCost(\n      JSModule fnModule, Node fnNode, Collection<? extends Reference> refs,\n      Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
      "right" : "boolean inliningLowersCost(\n      JSModule fnModule, Node fnNode, Collection<? extends Reference> refs,\n      Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
      "info" : "MethodDeclaration[25959-28176]:MethodDeclaration[25550-27767]"
    }, {
      "left" : "private boolean doesLowerCost(\n      Node fnNode, int callCost,\n      int directInlines, int costDeltaDirect,\n      int blockInlines, int costDeltaBlock,\n      boolean removable)",
      "right" : "private boolean doesLowerCost(\n      Node fnNode, int callCost,\n      int directInlines, int costDeltaDirect,\n      int blockInlines, int costDeltaBlock,\n      boolean removable)",
      "info" : "MethodDeclaration[28180-29324]:MethodDeclaration[27771-28915]"
    }, {
      "left" : "private static int estimateCallCost(Node fnNode, boolean referencesThis)",
      "right" : "private static int estimateCallCost(Node fnNode, boolean referencesThis)",
      "info" : "MethodDeclaration[29328-30205]:MethodDeclaration[28919-29796]"
    }, {
      "left" : "private static int inlineCostDelta(\n      Node fnNode, Set<String> namesToAlias, InliningMode mode)",
      "right" : "private static int inlineCostDelta(\n      Node fnNode, Set<String> namesToAlias, InliningMode mode)",
      "info" : "MethodDeclaration[30209-32701]:MethodDeclaration[29800-32292]"
    }, {
      "left" : "public void setKnownConstants(Set<String> knownConstants)",
      "right" : "public void setKnownConstants(Set<String> knownConstants)",
      "info" : "MethodDeclaration[32705-33110]:MethodDeclaration[32296-32701]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1291-1296]:TYPE_DECLARATION_KIND[1291-1296]"
    }, {
      "left" : "FunctionInjector",
      "right" : "FunctionInjector",
      "info" : "SimpleName[1297-1313]:SimpleName[1297-1313]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1819-1825]:Modifier[1819-1825]"
    }, {
      "left" : "FunctionInjector",
      "right" : "FunctionInjector",
      "info" : "SimpleName[1826-1842]:SimpleName[1826-1842]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1850-1875]:SingleVariableDeclaration[1850-1875]"
    }, {
      "left" : "Supplier<String> safeNameIdSupplier",
      "right" : "Supplier<String> safeNameIdSupplier",
      "info" : "SingleVariableDeclaration[1883-1918]:SingleVariableDeclaration[1883-1918]"
    }, {
      "left" : "boolean allowDecomposition",
      "right" : "boolean allowDecomposition",
      "info" : "SingleVariableDeclaration[1926-1952]:SingleVariableDeclaration[1926-1952]"
    }, {
      "left" : "boolean assumeStrictThis",
      "right" : "boolean assumeStrictThis",
      "info" : "SingleVariableDeclaration[1960-1984]:SingleVariableDeclaration[1960-1984]"
    }, {
      "left" : "boolean assumeMinimumCapture",
      "right" : "boolean assumeMinimumCapture",
      "info" : "SingleVariableDeclaration[1992-2020]:SingleVariableDeclaration[1992-2020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2022-2351]:Block[2022-2351]"
    }, {
      "left" : "Preconditions.checkNotNull(compiler);",
      "right" : "Preconditions.checkNotNull(compiler);",
      "info" : "ExpressionStatement[2028-2065]:ExpressionStatement[2028-2065]"
    }, {
      "left" : "Preconditions.checkNotNull(safeNameIdSupplier);",
      "right" : "Preconditions.checkNotNull(safeNameIdSupplier);",
      "info" : "ExpressionStatement[2070-2117]:ExpressionStatement[2070-2117]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2122-2147]:ExpressionStatement[2122-2147]"
    }, {
      "left" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "right" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "info" : "ExpressionStatement[2152-2197]:ExpressionStatement[2152-2197]"
    }, {
      "left" : "this.allowDecomposition = allowDecomposition;",
      "right" : "this.allowDecomposition = allowDecomposition;",
      "info" : "ExpressionStatement[2202-2247]:ExpressionStatement[2202-2247]"
    }, {
      "left" : "this.assumeStrictThis = assumeStrictThis;",
      "right" : "this.assumeStrictThis = assumeStrictThis;",
      "info" : "ExpressionStatement[2252-2293]:ExpressionStatement[2252-2293]"
    }, {
      "left" : "this.assumeMinimumCapture = assumeMinimumCapture;",
      "right" : "this.assumeMinimumCapture = assumeMinimumCapture;",
      "info" : "ExpressionStatement[2298-2347]:ExpressionStatement[2298-2347]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2806-2812]:Modifier[2806-2812]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2813-2818]:TYPE_DECLARATION_KIND[2813-2818]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[2819-2828]:SimpleName[2819-2828]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[2917-2926]:SimpleName[2917-2926]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[2927-2940]:SingleVariableDeclaration[2927-2940]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[2942-2957]:SingleVariableDeclaration[2942-2957]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[2959-2976]:SingleVariableDeclaration[2959-2976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2977-3068]:Block[2977-3068]"
    }, {
      "left" : "this.callNode = callNode;",
      "right" : "this.callNode = callNode;",
      "info" : "ExpressionStatement[2985-3010]:ExpressionStatement[2985-3010]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[3017-3038]:ExpressionStatement[3017-3038]"
    }, {
      "left" : "this.mode = mode;",
      "right" : "this.mode = mode;",
      "info" : "ExpressionStatement[3045-3062]:ExpressionStatement[3045-3062]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4017-4024]:PrimitiveType[4017-4024]"
    }, {
      "left" : "doesFunctionMeetMinimumRequirements",
      "right" : "doesFunctionMeetMinimumRequirements",
      "info" : "SimpleName[4025-4060]:SimpleName[4025-4060]"
    }, {
      "left" : "final String fnName",
      "right" : "final String fnName",
      "info" : "SingleVariableDeclaration[4068-4087]:SingleVariableDeclaration[4068-4087]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[4089-4100]:SingleVariableDeclaration[4089-4100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4102-5508]:Block[4102-5508]"
    }, {
      "left" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "right" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "info" : "VariableDeclarationStatement[4108-4154]:VariableDeclarationStatement[4108-4154]"
    }, {
      "left" : "if (!compiler.getCodingConvention().isInlinableFunction(fnNode))",
      "right" : "if (!compiler.getCodingConvention().isInlinableFunction(fnNode))",
      "info" : "IfStatement[4528-4620]:IfStatement[4528-4620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4593-4620]:Block[4593-4620]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4601-4614]:ReturnStatement[4601-4614]"
    }, {
      "left" : "final String fnRecursionName = fnNode.getFirstChild().getString();",
      "right" : "final String fnRecursionName = fnNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4626-4692]:VariableDeclarationStatement[4626-4692]"
    }, {
      "left" : "Preconditions.checkState(fnRecursionName != null);",
      "right" : "Preconditions.checkState(fnRecursionName != null);",
      "info" : "ExpressionStatement[4697-4747]:ExpressionStatement[4697-4747]"
    }, {
      "left" : "boolean referencesArguments = NodeUtil.isNameReferenced(\n        block, \"arguments\", NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "boolean referencesArguments = NodeUtil.isNameReferenced(\n        block, \"arguments\", NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "VariableDeclarationStatement[4824-4938]:VariableDeclarationStatement[4824-4938]"
    }, {
      "left" : "Predicate<Node> p = new Predicate<Node>(){\n      @Override\n      public boolean apply(Node n) {\n        if (n.isName()) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n    };",
      "right" : "Predicate<Node> p = new Predicate<Node>(){\n      @Override\n      public boolean apply(Node n) {\n        if (n.isName()) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n    };",
      "info" : "VariableDeclarationStatement[5005-5404]:VariableDeclarationStatement[5005-5404]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5054-5063]:MarkerAnnotation[5054-5063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5070-5076]:Modifier[5070-5076]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5077-5084]:PrimitiveType[5077-5084]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5085-5090]:SimpleName[5085-5090]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5091-5097]:SingleVariableDeclaration[5091-5097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5099-5397]:Block[5099-5397]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[5109-5367]:IfStatement[5109-5367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5125-5367]:Block[5125-5367]"
    }, {
      "left" : "return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));",
      "right" : "return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));",
      "info" : "ReturnStatement[5137-5357]:ReturnStatement[5137-5357]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5376-5389]:ReturnStatement[5376-5389]"
    }, {
      "left" : "return !referencesArguments\n        && !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());",
      "right" : "return !referencesArguments\n        && !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[5410-5504]:ReturnStatement[5410-5504]"
    }, {
      "left" : "CanInlineResult",
      "right" : "CanInlineResult",
      "info" : "SimpleType[6070-6085]:SimpleType[6070-6085]"
    }, {
      "left" : "canInlineReferenceToFunction",
      "right" : "canInlineReferenceToFunction",
      "info" : "SimpleName[6086-6114]:SimpleName[6086-6114]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6115-6130]:SingleVariableDeclaration[6115-6130]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[6138-6151]:SingleVariableDeclaration[6138-6151]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[6153-6164]:SingleVariableDeclaration[6153-6164]"
    }, {
      "left" : "Set<String> needAliases",
      "right" : "Set<String> needAliases",
      "info" : "SingleVariableDeclaration[6166-6189]:SingleVariableDeclaration[6166-6189]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[6197-6214]:SingleVariableDeclaration[6197-6214]"
    }, {
      "left" : "boolean referencesThis",
      "right" : "boolean referencesThis",
      "info" : "SingleVariableDeclaration[6216-6238]:SingleVariableDeclaration[6216-6238]"
    }, {
      "left" : "boolean containsFunctions",
      "right" : "boolean containsFunctions",
      "info" : "SingleVariableDeclaration[6240-6265]:SingleVariableDeclaration[6240-6265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6267-7768]:Block[6267-7768]"
    }, {
      "left" : "if (!isSupportedCallType(callNode))",
      "right" : "if (!isSupportedCallType(callNode))",
      "info" : "IfStatement[6483-6559]:IfStatement[6483-6559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6519-6559]:Block[6519-6559]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[6527-6553]:ReturnStatement[6527-6553]"
    }, {
      "left" : "if (containsFunctions)",
      "right" : "if (containsFunctions)",
      "info" : "IfStatement[6843-7293]:IfStatement[6843-7293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6866-7293]:Block[6866-7293]"
    }, {
      "left" : "if (!assumeMinimumCapture && !t.inGlobalScope())",
      "right" : "if (!assumeMinimumCapture && !t.inGlobalScope())",
      "info" : "IfStatement[6874-7287]:IfStatement[6874-7287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6923-7075]:Block[6923-7075]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[7041-7067]:ReturnStatement[7041-7067]"
    }, {
      "left" : "if (NodeUtil.isWithinLoop(callNode))",
      "right" : "if (NodeUtil.isWithinLoop(callNode))",
      "info" : "IfStatement[7081-7287]:IfStatement[7081-7287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7118-7287]:Block[7118-7287]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[7253-7279]:ReturnStatement[7253-7279]"
    }, {
      "left" : "if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode))",
      "right" : "if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode))",
      "info" : "IfStatement[7346-7552]:IfStatement[7346-7552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7410-7552]:Block[7410-7552]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[7520-7546]:ReturnStatement[7520-7546]"
    }, {
      "left" : "if (mode == InliningMode.DIRECT)",
      "right" : "if (mode == InliningMode.DIRECT)",
      "info" : "IfStatement[7558-7764]:IfStatement[7558-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7591-7657]:Block[7591-7657]"
    }, {
      "left" : "return canInlineReferenceDirectly(callNode, fnNode);",
      "right" : "return canInlineReferenceDirectly(callNode, fnNode);",
      "info" : "ReturnStatement[7599-7651]:ReturnStatement[7599-7651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7663-7764]:Block[7663-7764]"
    }, {
      "left" : "return canInlineReferenceAsStatementBlock(\n          t, callNode, fnNode, needAliases);",
      "right" : "return canInlineReferenceAsStatementBlock(\n          t, callNode, fnNode, needAliases);",
      "info" : "ReturnStatement[7671-7758]:ReturnStatement[7671-7758]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7955-7962]:Modifier[7955-7962]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7963-7970]:PrimitiveType[7963-7970]"
    }, {
      "left" : "isSupportedCallType",
      "right" : "isSupportedCallType",
      "info" : "SimpleName[7971-7990]:SimpleName[7971-7990]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[7991-8004]:SingleVariableDeclaration[7991-8004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8006-8427]:Block[8006-8427]"
    }, {
      "left" : "if (!callNode.getFirstChild().isName())",
      "right" : "if (!callNode.getFirstChild().isName())",
      "info" : "IfStatement[8012-8405]:IfStatement[8012-8405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8052-8405]:Block[8052-8405]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "right" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "info" : "IfStatement[8060-8399]:IfStatement[8060-8399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8105-8316]:Block[8105-8316]"
    }, {
      "left" : "if (!assumeStrictThis)",
      "right" : "if (!assumeStrictThis)",
      "info" : "IfStatement[8115-8308]:IfStatement[8115-8308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8138-8308]:Block[8138-8308]"
    }, {
      "left" : "Node thisValue = callNode.getFirstChild().getNext();",
      "right" : "Node thisValue = callNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[8150-8202]:VariableDeclarationStatement[8150-8202]"
    }, {
      "left" : "if (thisValue == null || !thisValue.isThis())",
      "right" : "if (thisValue == null || !thisValue.isThis())",
      "info" : "IfStatement[8213-8298]:IfStatement[8213-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8259-8298]:Block[8259-8298]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8273-8286]:ReturnStatement[8273-8286]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectApply(callNode))",
      "right" : "if (NodeUtil.isFunctionObjectApply(callNode))",
      "info" : "IfStatement[8322-8399]:IfStatement[8322-8399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8368-8399]:Block[8368-8399]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8378-8391]:ReturnStatement[8378-8391]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8411-8423]:ReturnStatement[8411-8423]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8486-8490]:SimpleType[8486-8490]"
    }, {
      "left" : "inline",
      "right" : "inline",
      "info" : "SimpleName[8491-8497]:SimpleName[8491-8497]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[8505-8518]:SingleVariableDeclaration[8505-8518]"
    }, {
      "left" : "String fnName",
      "right" : "String fnName",
      "info" : "SingleVariableDeclaration[8520-8533]:SingleVariableDeclaration[8520-8533]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[8535-8546]:SingleVariableDeclaration[8535-8546]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[8548-8565]:SingleVariableDeclaration[8548-8565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8567-8811]:Block[8567-8811]"
    }, {
      "left" : "Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());",
      "right" : "Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());",
      "info" : "ExpressionStatement[8573-8643]:ExpressionStatement[8573-8643]"
    }, {
      "left" : "if (mode == InliningMode.DIRECT)",
      "right" : "if (mode == InliningMode.DIRECT)",
      "info" : "IfStatement[8649-8807]:IfStatement[8649-8807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8682-8739]:Block[8682-8739]"
    }, {
      "left" : "return inlineReturnValue(callNode, fnNode);",
      "right" : "return inlineReturnValue(callNode, fnNode);",
      "info" : "ReturnStatement[8690-8733]:ReturnStatement[8690-8733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8745-8807]:Block[8745-8807]"
    }, {
      "left" : "return inlineFunction(callNode, fnNode, fnName);",
      "right" : "return inlineFunction(callNode, fnNode, fnName);",
      "info" : "ReturnStatement[8753-8801]:ReturnStatement[8753-8801]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8971-8978]:Modifier[8971-8978]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8979-8983]:SimpleType[8979-8983]"
    }, {
      "left" : "inlineReturnValue",
      "right" : "inlineReturnValue",
      "info" : "SimpleName[8984-9001]:SimpleName[8984-9001]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[9002-9015]:SingleVariableDeclaration[9002-9015]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[9017-9028]:SingleVariableDeclaration[9017-9028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9030-10202]:Block[9030-10202]"
    }, {
      "left" : "Node block = fnNode.getLastChild();",
      "right" : "Node block = fnNode.getLastChild();",
      "info" : "VariableDeclarationStatement[9036-9071]:VariableDeclarationStatement[9036-9071]"
    }, {
      "left" : "Node callParentNode = callNode.getParent();",
      "right" : "Node callParentNode = callNode.getParent();",
      "info" : "VariableDeclarationStatement[9076-9119]:VariableDeclarationStatement[9076-9119]"
    }, {
      "left" : "Map<String, Node> argMap =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.safeNameIdSupplier);",
      "right" : "Map<String, Node> argMap =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[9373-9517]:VariableDeclarationStatement[9373-9517]"
    }, {
      "left" : "Node newExpression;",
      "right" : "Node newExpression;",
      "info" : "VariableDeclarationStatement[9523-9542]:VariableDeclarationStatement[9523-9542]"
    }, {
      "left" : "if (!block.hasChildren())",
      "right" : "if (!block.hasChildren())",
      "info" : "IfStatement[9547-10113]:IfStatement[9547-10113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9573-9674]:Block[9573-9674]"
    }, {
      "left" : "Node srcLocation = block;",
      "right" : "Node srcLocation = block;",
      "info" : "VariableDeclarationStatement[9581-9606]:VariableDeclarationStatement[9581-9606]"
    }, {
      "left" : "newExpression = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "newExpression = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "ExpressionStatement[9613-9668]:ExpressionStatement[9613-9668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9680-10113]:Block[9680-10113]"
    }, {
      "left" : "Node returnNode = block.getFirstChild();",
      "right" : "Node returnNode = block.getFirstChild();",
      "info" : "VariableDeclarationStatement[9688-9728]:VariableDeclarationStatement[9688-9728]"
    }, {
      "left" : "Preconditions.checkArgument(returnNode.isReturn());",
      "right" : "Preconditions.checkArgument(returnNode.isReturn());",
      "info" : "ExpressionStatement[9735-9786]:ExpressionStatement[9735-9786]"
    }, {
      "left" : "Node safeReturnNode = returnNode.cloneTree();",
      "right" : "Node safeReturnNode = returnNode.cloneTree();",
      "info" : "VariableDeclarationStatement[9832-9877]:VariableDeclarationStatement[9832-9877]"
    }, {
      "left" : "Node inlineResult = FunctionArgumentInjector.inject(\n          null, safeReturnNode, null, argMap);",
      "right" : "Node inlineResult = FunctionArgumentInjector.inject(\n          null, safeReturnNode, null, argMap);",
      "info" : "VariableDeclarationStatement[9884-9983]:VariableDeclarationStatement[9884-9983]"
    }, {
      "left" : "Preconditions.checkArgument(safeReturnNode == inlineResult);",
      "right" : "Preconditions.checkArgument(safeReturnNode == inlineResult);",
      "info" : "ExpressionStatement[9990-10050]:ExpressionStatement[9990-10050]"
    }, {
      "left" : "newExpression = safeReturnNode.removeFirstChild();",
      "right" : "newExpression = safeReturnNode.removeFirstChild();",
      "info" : "ExpressionStatement[10057-10107]:ExpressionStatement[10057-10107]"
    }, {
      "left" : "callParentNode.replaceChild(callNode, newExpression);",
      "right" : "callParentNode.replaceChild(callNode, newExpression);",
      "info" : "ExpressionStatement[10119-10172]:ExpressionStatement[10119-10172]"
    }, {
      "left" : "return newExpression;",
      "right" : "return newExpression;",
      "info" : "ReturnStatement[10177-10198]:ReturnStatement[10177-10198]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10410-10419]:MarkerAnnotation[10410-10419]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10426-10432]:Modifier[10426-10432]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10433-10437]:PrimitiveType[10433-10437]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[10438-10445]:SimpleName[10438-10445]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[10446-10471]:SingleVariableDeclaration[10446-10471]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[10473-10486]:SingleVariableDeclaration[10473-10486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10488-10552]:Block[10488-10552]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected\");",
      "right" : "throw new IllegalStateException(\"unexpected\");",
      "info" : "ThrowStatement[10498-10544]:ThrowStatement[10498-10544]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10693-10702]:MarkerAnnotation[10693-10702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10709-10715]:Modifier[10709-10715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10716-10720]:PrimitiveType[10716-10720]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[10721-10728]:SimpleName[10721-10728]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[10729-10754]:SingleVariableDeclaration[10729-10754]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[10756-10769]:SingleVariableDeclaration[10756-10769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10771-10806]:Block[10771-10806]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11050-11059]:MarkerAnnotation[11050-11059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11066-11072]:Modifier[11066-11072]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11073-11077]:PrimitiveType[11073-11077]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[11078-11085]:SimpleName[11078-11085]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[11086-11111]:SingleVariableDeclaration[11086-11111]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[11113-11126]:SingleVariableDeclaration[11113-11126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11128-11163]:Block[11128-11163]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11451-11460]:MarkerAnnotation[11451-11460]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11467-11473]:Modifier[11467-11473]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11474-11478]:PrimitiveType[11474-11478]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[11479-11486]:SimpleName[11479-11486]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[11487-11512]:SingleVariableDeclaration[11487-11512]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[11514-11527]:SingleVariableDeclaration[11514-11527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11529-11564]:Block[11529-11564]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11965-11974]:MarkerAnnotation[11965-11974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11981-11987]:Modifier[11981-11987]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11988-11992]:PrimitiveType[11988-11992]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[11993-12000]:SimpleName[11993-12000]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[12001-12026]:SingleVariableDeclaration[12001-12026]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[12028-12041]:SingleVariableDeclaration[12028-12041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12043-12324]:Block[12043-12324]"
    }, {
      "left" : "injector.getDecomposer().moveExpression(callNode);",
      "right" : "injector.getDecomposer().moveExpression(callNode);",
      "info" : "ExpressionStatement[12053-12103]:ExpressionStatement[12053-12103]"
    }, {
      "left" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[12146-12210]:VariableDeclarationStatement[12146-12210]"
    }, {
      "left" : "Preconditions.checkState(this != callSiteType);",
      "right" : "Preconditions.checkState(this != callSiteType);",
      "info" : "ExpressionStatement[12219-12266]:ExpressionStatement[12219-12266]"
    }, {
      "left" : "callSiteType.prepare(injector, callNode);",
      "right" : "callSiteType.prepare(injector, callNode);",
      "info" : "ExpressionStatement[12275-12316]:ExpressionStatement[12275-12316]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12560-12569]:MarkerAnnotation[12560-12569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12576-12582]:Modifier[12576-12582]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12583-12587]:PrimitiveType[12583-12587]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[12588-12595]:SimpleName[12588-12595]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[12596-12621]:SingleVariableDeclaration[12596-12621]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[12623-12636]:SingleVariableDeclaration[12623-12636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12638-12935]:Block[12638-12935]"
    }, {
      "left" : "injector.getDecomposer().maybeExposeExpression(callNode);",
      "right" : "injector.getDecomposer().maybeExposeExpression(callNode);",
      "info" : "ExpressionStatement[12648-12705]:ExpressionStatement[12648-12705]"
    }, {
      "left" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[12757-12821]:VariableDeclarationStatement[12757-12821]"
    }, {
      "left" : "Preconditions.checkState(this != callSiteType);",
      "right" : "Preconditions.checkState(this != callSiteType);",
      "info" : "ExpressionStatement[12830-12877]:ExpressionStatement[12830-12877]"
    }, {
      "left" : "callSiteType.prepare(injector, callNode);",
      "right" : "callSiteType.prepare(injector, callNode);",
      "info" : "ExpressionStatement[12886-12927]:ExpressionStatement[12886-12927]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12948-12954]:Modifier[12948-12954]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[12955-12963]:Modifier[12955-12963]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12964-12968]:PrimitiveType[12964-12968]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[12969-12976]:SimpleName[12969-12976]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[12977-13002]:SingleVariableDeclaration[12977-13002]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[13004-13017]:SingleVariableDeclaration[13004-13017]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13110-13117]:Modifier[13110-13117]"
    }, {
      "left" : "CallSiteType",
      "right" : "CallSiteType",
      "info" : "SimpleType[13118-13130]:SimpleType[13118-13130]"
    }, {
      "left" : "classifyCallSite",
      "right" : "classifyCallSite",
      "info" : "SimpleName[13131-13147]:SimpleName[13131-13147]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[13148-13161]:SingleVariableDeclaration[13148-13161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13163-14849]:Block[13163-14849]"
    }, {
      "left" : "Node parent = callNode.getParent();",
      "right" : "Node parent = callNode.getParent();",
      "info" : "VariableDeclarationStatement[13169-13204]:VariableDeclarationStatement[13169-13204]"
    }, {
      "left" : "Node grandParent = parent.getParent();",
      "right" : "Node grandParent = parent.getParent();",
      "info" : "VariableDeclarationStatement[13209-13247]:VariableDeclarationStatement[13209-13247]"
    }, {
      "left" : "if (NodeUtil.isExprCall(parent))",
      "right" : "if (NodeUtil.isExprCall(parent))",
      "info" : "IfStatement[13282-14807]:IfStatement[13282-14807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13315-13413]:Block[13315-13413]"
    }, {
      "left" : "return CallSiteType.SIMPLE_CALL;",
      "right" : "return CallSiteType.SIMPLE_CALL;",
      "info" : "ReturnStatement[13375-13407]:ReturnStatement[13375-13407]"
    }, {
      "left" : "if (NodeUtil.isExprAssign(grandParent)\n        && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)\n        && parent.getFirstChild().isName()\n        && !NodeUtil.isConstantName(parent.getFirstChild()))",
      "right" : "if (NodeUtil.isExprAssign(grandParent)\n        && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)\n        && parent.getFirstChild().isName()\n        && !NodeUtil.isConstantName(parent.getFirstChild()))",
      "info" : "IfStatement[13419-14807]:IfStatement[13419-14807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13624-13737]:Block[13624-13737]"
    }, {
      "left" : "return CallSiteType.SIMPLE_ASSIGNMENT;",
      "right" : "return CallSiteType.SIMPLE_ASSIGNMENT;",
      "info" : "ReturnStatement[13693-13731]:ReturnStatement[13693-13731]"
    }, {
      "left" : "if (parent.isName()\n        && !NodeUtil.isConstantName(parent)\n        && grandParent.isVar()\n        && grandParent.hasOneChild())",
      "right" : "if (parent.isName()\n        && !NodeUtil.isConstantName(parent)\n        && grandParent.isVar()\n        && grandParent.hasOneChild())",
      "info" : "IfStatement[13743-14807]:IfStatement[13743-14807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13876-14144]:Block[13876-14144]"
    }, {
      "left" : "return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;",
      "right" : "return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;",
      "info" : "ReturnStatement[14091-14138]:ReturnStatement[14091-14138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14150-14807]:Block[14150-14807]"
    }, {
      "left" : "Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);",
      "right" : "Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);",
      "info" : "VariableDeclarationStatement[14158-14230]:VariableDeclarationStatement[14158-14230]"
    }, {
      "left" : "if (expressionRoot != null)",
      "right" : "if (expressionRoot != null)",
      "info" : "IfStatement[14237-14801]:IfStatement[14237-14801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14265-14801]:Block[14265-14801]"
    }, {
      "left" : "ExpressionDecomposer decomposer = new ExpressionDecomposer(\n            compiler, safeNameIdSupplier, knownConstants);",
      "right" : "ExpressionDecomposer decomposer = new ExpressionDecomposer(\n            compiler, safeNameIdSupplier, knownConstants);",
      "info" : "VariableDeclarationStatement[14275-14393]:VariableDeclarationStatement[14275-14393]"
    }, {
      "left" : "DecompositionType type = decomposer.canExposeExpression(\n            callNode);",
      "right" : "DecompositionType type = decomposer.canExposeExpression(\n            callNode);",
      "info" : "VariableDeclarationStatement[14402-14481]:VariableDeclarationStatement[14402-14481]"
    }, {
      "left" : "if (type == DecompositionType.MOVABLE)",
      "right" : "if (type == DecompositionType.MOVABLE)",
      "info" : "IfStatement[14490-14793]:IfStatement[14490-14793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14529-14582]:Block[14529-14582]"
    }, {
      "left" : "return CallSiteType.EXPRESSION;",
      "right" : "return CallSiteType.EXPRESSION;",
      "info" : "ReturnStatement[14541-14572]:ReturnStatement[14541-14572]"
    }, {
      "left" : "if (type == DecompositionType.DECOMPOSABLE)",
      "right" : "if (type == DecompositionType.DECOMPOSABLE)",
      "info" : "IfStatement[14588-14793]:IfStatement[14588-14793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14632-14698]:Block[14632-14698]"
    }, {
      "left" : "return CallSiteType.DECOMPOSABLE_EXPRESSION;",
      "right" : "return CallSiteType.DECOMPOSABLE_EXPRESSION;",
      "info" : "ReturnStatement[14644-14688]:ReturnStatement[14644-14688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14704-14793]:Block[14704-14793]"
    }, {
      "left" : "Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);",
      "right" : "Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);",
      "info" : "ExpressionStatement[14716-14783]:ExpressionStatement[14716-14783]"
    }, {
      "left" : "return CallSiteType.UNSUPPORTED;",
      "right" : "return CallSiteType.UNSUPPORTED;",
      "info" : "ReturnStatement[14813-14845]:ReturnStatement[14813-14845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14853-14860]:Modifier[14853-14860]"
    }, {
      "left" : "ExpressionDecomposer",
      "right" : "ExpressionDecomposer",
      "info" : "SimpleType[14861-14881]:SimpleType[14861-14881]"
    }, {
      "left" : "getDecomposer",
      "right" : "getDecomposer",
      "info" : "SimpleName[14882-14895]:SimpleName[14882-14895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14898-14995]:Block[14898-14995]"
    }, {
      "left" : "return new ExpressionDecomposer(\n        compiler, safeNameIdSupplier, knownConstants);",
      "right" : "return new ExpressionDecomposer(\n        compiler, safeNameIdSupplier, knownConstants);",
      "info" : "ReturnStatement[14904-14991]:ReturnStatement[14904-14991]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15134-15138]:PrimitiveType[15134-15138]"
    }, {
      "left" : "maybePrepareCall",
      "right" : "maybePrepareCall",
      "info" : "SimpleName[15139-15155]:SimpleName[15139-15155]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[15156-15169]:SingleVariableDeclaration[15156-15169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15171-15278]:Block[15171-15278]"
    }, {
      "left" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[15177-15232]:VariableDeclarationStatement[15177-15232]"
    }, {
      "left" : "callSiteType.prepare(this, callNode);",
      "right" : "callSiteType.prepare(this, callNode);",
      "info" : "ExpressionStatement[15237-15274]:ExpressionStatement[15237-15274]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15450-15457]:Modifier[15450-15457]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15458-15462]:SimpleType[15458-15462]"
    }, {
      "left" : "inlineFunction",
      "right" : "inlineFunction",
      "info" : "SimpleName[15463-15477]:SimpleName[15463-15477]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[15485-15498]:SingleVariableDeclaration[15485-15498]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[15500-15511]:SingleVariableDeclaration[15500-15511]"
    }, {
      "left" : "String fnName",
      "right" : "String fnName",
      "info" : "SingleVariableDeclaration[15513-15526]:SingleVariableDeclaration[15513-15526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15528-18312]:Block[15528-18312]"
    }, {
      "left" : "Node parent = callNode.getParent();",
      "right" : "Node parent = callNode.getParent();",
      "info" : "VariableDeclarationStatement[15534-15569]:VariableDeclarationStatement[15534-15569]"
    }, {
      "left" : "Node grandParent = parent.getParent();",
      "right" : "Node grandParent = parent.getParent();",
      "info" : "VariableDeclarationStatement[15574-15612]:VariableDeclarationStatement[15574-15612]"
    }, {
      "left" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[15741-15796]:VariableDeclarationStatement[15741-15796]"
    }, {
      "left" : "Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);",
      "right" : "Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);",
      "info" : "ExpressionStatement[15801-15871]:ExpressionStatement[15801-15871]"
    }, {
      "left" : "boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);",
      "right" : "boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);",
      "info" : "VariableDeclarationStatement[15877-15932]:VariableDeclarationStatement[15877-15932]"
    }, {
      "left" : "String resultName = null;",
      "right" : "String resultName = null;",
      "info" : "VariableDeclarationStatement[16080-16105]:VariableDeclarationStatement[16080-16105]"
    }, {
      "left" : "boolean needsDefaultReturnResult = true;",
      "right" : "boolean needsDefaultReturnResult = true;",
      "info" : "VariableDeclarationStatement[16110-16150]:VariableDeclarationStatement[16110-16150]"
    }, {
      "left" : "switch (callSiteType) {\n      case SIMPLE_ASSIGNMENT:\n        resultName = parent.getFirstChild().getString();\n        break;\n\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        resultName = parent.getString();\n        break;\n\n      case SIMPLE_CALL:\n        resultName = null;  // \"foo()\" doesn't need a result.\n        needsDefaultReturnResult = false;\n        break;\n\n      case EXPRESSION:\n        throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");\n\n      case DECOMPOSABLE_EXPRESSION:\n        throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "right" : "switch (callSiteType) {\n      case SIMPLE_ASSIGNMENT:\n        resultName = parent.getFirstChild().getString();\n        break;\n\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        resultName = parent.getString();\n        break;\n\n      case SIMPLE_CALL:\n        resultName = null;  // \"foo()\" doesn't need a result.\n        needsDefaultReturnResult = false;\n        break;\n\n      case EXPRESSION:\n        throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");\n\n      case DECOMPOSABLE_EXPRESSION:\n        throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "info" : "SwitchStatement[16155-16900]:SwitchStatement[16155-16900]"
    }, {
      "left" : "case SIMPLE_ASSIGNMENT:",
      "right" : "case SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[16185-16208]:SwitchCase[16185-16208]"
    }, {
      "left" : "resultName = parent.getFirstChild().getString();",
      "right" : "resultName = parent.getFirstChild().getString();",
      "info" : "ExpressionStatement[16217-16265]:ExpressionStatement[16217-16265]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16274-16280]:BreakStatement[16274-16280]"
    }, {
      "left" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "right" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[16288-16320]:SwitchCase[16288-16320]"
    }, {
      "left" : "resultName = parent.getString();",
      "right" : "resultName = parent.getString();",
      "info" : "ExpressionStatement[16329-16361]:ExpressionStatement[16329-16361]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16370-16376]:BreakStatement[16370-16376]"
    }, {
      "left" : "case SIMPLE_CALL:",
      "right" : "case SIMPLE_CALL:",
      "info" : "SwitchCase[16384-16401]:SwitchCase[16384-16401]"
    }, {
      "left" : "resultName = null;",
      "right" : "resultName = null;",
      "info" : "ExpressionStatement[16410-16428]:ExpressionStatement[16410-16428]"
    }, {
      "left" : "needsDefaultReturnResult = false;",
      "right" : "needsDefaultReturnResult = false;",
      "info" : "ExpressionStatement[16472-16505]:ExpressionStatement[16472-16505]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16514-16520]:BreakStatement[16514-16520]"
    }, {
      "left" : "case EXPRESSION:",
      "right" : "case EXPRESSION:",
      "info" : "SwitchCase[16528-16544]:SwitchCase[16528-16544]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");",
      "right" : "throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");",
      "info" : "ThrowStatement[16553-16652]:ThrowStatement[16553-16652]"
    }, {
      "left" : "case DECOMPOSABLE_EXPRESSION:",
      "right" : "case DECOMPOSABLE_EXPRESSION:",
      "info" : "SwitchCase[16660-16689]:SwitchCase[16660-16689]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");",
      "right" : "throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");",
      "info" : "ThrowStatement[16698-16807]:ThrowStatement[16698-16807]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16815-16823]:SwitchCase[16815-16823]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "right" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "info" : "ThrowStatement[16832-16894]:ThrowStatement[16832-16894]"
    }, {
      "left" : "FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n        compiler, this.safeNameIdSupplier);",
      "right" : "FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n        compiler, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[16906-17010]:VariableDeclarationStatement[16906-17010]"
    }, {
      "left" : "Node newBlock = mutator.mutate(\n        fnName, fnNode, callNode, resultName,\n        needsDefaultReturnResult, isCallInLoop);",
      "right" : "Node newBlock = mutator.mutate(\n        fnName, fnNode, callNode, resultName,\n        needsDefaultReturnResult, isCallInLoop);",
      "info" : "VariableDeclarationStatement[17016-17142]:VariableDeclarationStatement[17016-17142]"
    }, {
      "left" : "Node greatGrandParent = grandParent.getParent();",
      "right" : "Node greatGrandParent = grandParent.getParent();",
      "info" : "VariableDeclarationStatement[17308-17356]:VariableDeclarationStatement[17308-17356]"
    }, {
      "left" : "switch (callSiteType) {\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        // Remove the call from the name node.\n        parent.removeChild(parent.getFirstChild());\n        Preconditions.checkState(parent.getFirstChild() == null);\n        // Add the call, after the VAR.\n        greatGrandParent.addChildAfter(newBlock, grandParent);\n        break;\n\n      case SIMPLE_ASSIGNMENT:\n        // The assignment is now part of the inline function so\n        // replace it completely.\n        Preconditions.checkState(grandParent.isExprResult());\n        greatGrandParent.replaceChild(grandParent, newBlock);\n        break;\n\n      case SIMPLE_CALL:\n        // If nothing is looking at the result just replace the call.\n        Preconditions.checkState(parent.isExprResult());\n        grandParent.replaceChild(parent, newBlock);\n        break;\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "right" : "switch (callSiteType) {\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        // Remove the call from the name node.\n        parent.removeChild(parent.getFirstChild());\n        Preconditions.checkState(parent.getFirstChild() == null);\n        // Add the call, after the VAR.\n        greatGrandParent.addChildAfter(newBlock, grandParent);\n        break;\n\n      case SIMPLE_ASSIGNMENT:\n        // The assignment is now part of the inline function so\n        // replace it completely.\n        Preconditions.checkState(grandParent.isExprResult());\n        greatGrandParent.replaceChild(grandParent, newBlock);\n        break;\n\n      case SIMPLE_CALL:\n        // If nothing is looking at the result just replace the call.\n        Preconditions.checkState(parent.isExprResult());\n        grandParent.replaceChild(parent, newBlock);\n        break;\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "info" : "SwitchStatement[17361-18286]:SwitchStatement[17361-18286]"
    }, {
      "left" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "right" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[17391-17423]:SwitchCase[17391-17423]"
    }, {
      "left" : "parent.removeChild(parent.getFirstChild());",
      "right" : "parent.removeChild(parent.getFirstChild());",
      "info" : "ExpressionStatement[17479-17522]:ExpressionStatement[17479-17522]"
    }, {
      "left" : "Preconditions.checkState(parent.getFirstChild() == null);",
      "right" : "Preconditions.checkState(parent.getFirstChild() == null);",
      "info" : "ExpressionStatement[17531-17588]:ExpressionStatement[17531-17588]"
    }, {
      "left" : "greatGrandParent.addChildAfter(newBlock, grandParent);",
      "right" : "greatGrandParent.addChildAfter(newBlock, grandParent);",
      "info" : "ExpressionStatement[17637-17691]:ExpressionStatement[17637-17691]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17700-17706]:BreakStatement[17700-17706]"
    }, {
      "left" : "case SIMPLE_ASSIGNMENT:",
      "right" : "case SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[17714-17737]:SwitchCase[17714-17737]"
    }, {
      "left" : "Preconditions.checkState(grandParent.isExprResult());",
      "right" : "Preconditions.checkState(grandParent.isExprResult());",
      "info" : "ExpressionStatement[17844-17897]:ExpressionStatement[17844-17897]"
    }, {
      "left" : "greatGrandParent.replaceChild(grandParent, newBlock);",
      "right" : "greatGrandParent.replaceChild(grandParent, newBlock);",
      "info" : "ExpressionStatement[17906-17959]:ExpressionStatement[17906-17959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17968-17974]:BreakStatement[17968-17974]"
    }, {
      "left" : "case SIMPLE_CALL:",
      "right" : "case SIMPLE_CALL:",
      "info" : "SwitchCase[17982-17999]:SwitchCase[17982-17999]"
    }, {
      "left" : "Preconditions.checkState(parent.isExprResult());",
      "right" : "Preconditions.checkState(parent.isExprResult());",
      "info" : "ExpressionStatement[18078-18126]:ExpressionStatement[18078-18126]"
    }, {
      "left" : "grandParent.replaceChild(parent, newBlock);",
      "right" : "grandParent.replaceChild(parent, newBlock);",
      "info" : "ExpressionStatement[18135-18178]:ExpressionStatement[18135-18178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18187-18193]:BreakStatement[18187-18193]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18201-18209]:SwitchCase[18201-18209]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "right" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "info" : "ThrowStatement[18218-18280]:ThrowStatement[18218-18280]"
    }, {
      "left" : "return newBlock;",
      "right" : "return newBlock;",
      "info" : "ReturnStatement[18292-18308]:ReturnStatement[18292-18308]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18469-18476]:PrimitiveType[18469-18476]"
    }, {
      "left" : "isDirectCallNodeReplacementPossible",
      "right" : "isDirectCallNodeReplacementPossible",
      "info" : "SimpleName[18477-18512]:SimpleName[18477-18512]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[18513-18524]:SingleVariableDeclaration[18513-18524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18526-19128]:Block[18526-19128]"
    }, {
      "left" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "right" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "info" : "VariableDeclarationStatement[18578-18624]:VariableDeclarationStatement[18578-18624]"
    }, {
      "left" : "if (!block.hasChildren())",
      "right" : "if (!block.hasChildren())",
      "info" : "IfStatement[18788-19105]:IfStatement[18788-19105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18814-18879]:Block[18814-18879]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18861-18873]:ReturnStatement[18861-18873]"
    }, {
      "left" : "if (block.hasOneChild())",
      "right" : "if (block.hasOneChild())",
      "info" : "IfStatement[18885-19105]:IfStatement[18885-19105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18910-19105]:Block[18910-19105]"
    }, {
      "left" : "if (block.getFirstChild().isReturn()\n          && block.getFirstChild().getFirstChild() != null)",
      "right" : "if (block.getFirstChild().isReturn()\n          && block.getFirstChild().getFirstChild() != null)",
      "info" : "IfStatement[18972-19099]:IfStatement[18972-19099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19069-19099]:Block[19069-19099]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19079-19091]:ReturnStatement[19079-19091]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19111-19124]:ReturnStatement[19111-19124]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19560-19567]:Modifier[19560-19567]"
    }, {
      "left" : "CanInlineResult",
      "right" : "CanInlineResult",
      "info" : "SimpleType[19568-19583]:SimpleType[19568-19583]"
    }, {
      "left" : "canInlineReferenceAsStatementBlock",
      "right" : "canInlineReferenceAsStatementBlock",
      "info" : "SimpleName[19584-19618]:SimpleName[19584-19618]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19626-19641]:SingleVariableDeclaration[19626-19641]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[19643-19656]:SingleVariableDeclaration[19643-19656]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[19658-19669]:SingleVariableDeclaration[19658-19669]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[19671-19695]:SingleVariableDeclaration[19671-19695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19697-20397]:Block[19697-20397]"
    }, {
      "left" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[19703-19758]:VariableDeclarationStatement[19703-19758]"
    }, {
      "left" : "if (callSiteType == CallSiteType.UNSUPPORTED)",
      "right" : "if (callSiteType == CallSiteType.UNSUPPORTED)",
      "info" : "IfStatement[19763-19849]:IfStatement[19763-19849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19809-19849]:Block[19809-19849]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[19817-19843]:ReturnStatement[19817-19843]"
    }, {
      "left" : "if (!allowDecomposition\n        && (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n            || callSiteType == CallSiteType.EXPRESSION))",
      "right" : "if (!allowDecomposition\n        && (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n            || callSiteType == CallSiteType.EXPRESSION))",
      "info" : "IfStatement[19855-20041]:IfStatement[19855-20041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20001-20041]:Block[20001-20041]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[20009-20035]:ReturnStatement[20009-20035]"
    }, {
      "left" : "if (!callMeetsBlockInliningRequirements(\n            t, callNode, fnNode, namesToAlias))",
      "right" : "if (!callMeetsBlockInliningRequirements(\n            t, callNode, fnNode, namesToAlias))",
      "info" : "IfStatement[20047-20176]:IfStatement[20047-20176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20136-20176]:Block[20136-20176]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[20144-20170]:ReturnStatement[20144-20170]"
    }, {
      "left" : "if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n        || callSiteType == CallSiteType.EXPRESSION)",
      "right" : "if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n        || callSiteType == CallSiteType.EXPRESSION)",
      "info" : "IfStatement[20182-20393]:IfStatement[20182-20393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20291-20346]:Block[20291-20346]"
    }, {
      "left" : "return CanInlineResult.AFTER_PREPARATION;",
      "right" : "return CanInlineResult.AFTER_PREPARATION;",
      "info" : "ReturnStatement[20299-20340]:ReturnStatement[20299-20340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20352-20393]:Block[20352-20393]"
    }, {
      "left" : "return CanInlineResult.YES;",
      "right" : "return CanInlineResult.YES;",
      "info" : "ReturnStatement[20360-20387]:ReturnStatement[20360-20387]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20608-20615]:Modifier[20608-20615]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20616-20623]:PrimitiveType[20616-20623]"
    }, {
      "left" : "callMeetsBlockInliningRequirements",
      "right" : "callMeetsBlockInliningRequirements",
      "info" : "SimpleName[20624-20658]:SimpleName[20624-20658]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20666-20681]:SingleVariableDeclaration[20666-20681]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[20683-20696]:SingleVariableDeclaration[20683-20696]"
    }, {
      "left" : "final Node fnNode",
      "right" : "final Node fnNode",
      "info" : "SingleVariableDeclaration[20698-20715]:SingleVariableDeclaration[20698-20715]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[20723-20747]:SingleVariableDeclaration[20723-20747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20749-22997]:Block[20749-22997]"
    }, {
      "left" : "final boolean assumeMinimumCapture = this.assumeMinimumCapture;",
      "right" : "final boolean assumeMinimumCapture = this.assumeMinimumCapture;",
      "info" : "VariableDeclarationStatement[20755-20818]:VariableDeclarationStatement[20755-20818]"
    }, {
      "left" : "boolean fnContainsVars = NodeUtil.has(\n        NodeUtil.getFunctionBody(fnNode),\n        new NodeUtil.MatchDeclaration(),\n        new NodeUtil.MatchShallowStatement());",
      "right" : "boolean fnContainsVars = NodeUtil.has(\n        NodeUtil.getFunctionBody(fnNode),\n        new NodeUtil.MatchDeclaration(),\n        new NodeUtil.MatchShallowStatement());",
      "info" : "VariableDeclarationStatement[21286-21454]:VariableDeclarationStatement[21286-21454]"
    }, {
      "left" : "boolean forbidTemps = false;",
      "right" : "boolean forbidTemps = false;",
      "info" : "VariableDeclarationStatement[21459-21487]:VariableDeclarationStatement[21459-21487]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[21492-22198]:IfStatement[21492-22198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21516-22198]:Block[21516-22198]"
    }, {
      "left" : "Node fnCaller = t.getScopeRoot();",
      "right" : "Node fnCaller = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[21524-21557]:VariableDeclarationStatement[21524-21557]"
    }, {
      "left" : "Node fnCallerBody = fnCaller.getLastChild();",
      "right" : "Node fnCallerBody = fnCaller.getLastChild();",
      "info" : "VariableDeclarationStatement[21564-21608]:VariableDeclarationStatement[21564-21608]"
    }, {
      "left" : "Predicate<Node> match = new Predicate<Node>(){\n        @Override\n        public boolean apply(Node n) {\n          if (n.isName()) {\n            return n.getString().equals(\"eval\");\n          }\n          if (!assumeMinimumCapture && n.isFunction()) {\n            return n != fnNode;\n          }\n          return false;\n        }\n      };",
      "right" : "Predicate<Node> match = new Predicate<Node>(){\n        @Override\n        public boolean apply(Node n) {\n          if (n.isName()) {\n            return n.getString().equals(\"eval\");\n          }\n          if (!assumeMinimumCapture && n.isFunction()) {\n            return n != fnNode;\n          }\n          return false;\n        }\n      };",
      "info" : "VariableDeclarationStatement[21762-22098]:VariableDeclarationStatement[21762-22098]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21817-21826]:MarkerAnnotation[21817-21826]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21835-21841]:Modifier[21835-21841]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21842-21849]:PrimitiveType[21842-21849]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[21850-21855]:SimpleName[21850-21855]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21856-21862]:SingleVariableDeclaration[21856-21862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21864-22089]:Block[21864-22089]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[21876-21954]:IfStatement[21876-21954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21892-21954]:Block[21892-21954]"
    }, {
      "left" : "return n.getString().equals(\"eval\");",
      "right" : "return n.getString().equals(\"eval\");",
      "info" : "ReturnStatement[21906-21942]:ReturnStatement[21906-21942]"
    }, {
      "left" : "if (!assumeMinimumCapture && n.isFunction())",
      "right" : "if (!assumeMinimumCapture && n.isFunction())",
      "info" : "IfStatement[21965-22055]:IfStatement[21965-22055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22010-22055]:Block[22010-22055]"
    }, {
      "left" : "return n != fnNode;",
      "right" : "return n != fnNode;",
      "info" : "ReturnStatement[22024-22043]:ReturnStatement[22024-22043]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22066-22079]:ReturnStatement[22066-22079]"
    }, {
      "left" : "forbidTemps = NodeUtil.has(fnCallerBody,\n          match, NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "forbidTemps = NodeUtil.has(fnCallerBody,\n          match, NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[22105-22192]:ExpressionStatement[22105-22192]"
    }, {
      "left" : "if (fnContainsVars && forbidTemps)",
      "right" : "if (fnContainsVars && forbidTemps)",
      "info" : "IfStatement[22204-22266]:IfStatement[22204-22266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22239-22266]:Block[22239-22266]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22247-22260]:ReturnStatement[22247-22260]"
    }, {
      "left" : "if (forbidTemps)",
      "right" : "if (forbidTemps)",
      "info" : "IfStatement[22413-22975]:IfStatement[22413-22975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22430-22975]:Block[22430-22975]"
    }, {
      "left" : "Map<String, Node> args =\n          FunctionArgumentInjector.getFunctionCallParameterMap(\n              fnNode, callNode, this.safeNameIdSupplier);",
      "right" : "Map<String, Node> args =\n          FunctionArgumentInjector.getFunctionCallParameterMap(\n              fnNode, callNode, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[22438-22584]:VariableDeclarationStatement[22438-22584]"
    }, {
      "left" : "boolean hasArgs = !args.isEmpty();",
      "right" : "boolean hasArgs = !args.isEmpty();",
      "info" : "VariableDeclarationStatement[22591-22625]:VariableDeclarationStatement[22591-22625]"
    }, {
      "left" : "if (hasArgs)",
      "right" : "if (hasArgs)",
      "info" : "IfStatement[22632-22969]:IfStatement[22632-22969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22645-22969]:Block[22645-22969]"
    }, {
      "left" : "Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);",
      "right" : "Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);",
      "info" : "VariableDeclarationStatement[22685-22745]:VariableDeclarationStatement[22685-22745]"
    }, {
      "left" : "FunctionArgumentInjector.maybeAddTempsForCallArguments(\n            fnNode, args, allNamesToAlias, compiler.getCodingConvention());",
      "right" : "FunctionArgumentInjector.maybeAddTempsForCallArguments(\n            fnNode, args, allNamesToAlias, compiler.getCodingConvention());",
      "info" : "ExpressionStatement[22754-22885]:ExpressionStatement[22754-22885]"
    }, {
      "left" : "if (!allNamesToAlias.isEmpty())",
      "right" : "if (!allNamesToAlias.isEmpty())",
      "info" : "IfStatement[22894-22961]:IfStatement[22894-22961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22926-22961]:Block[22926-22961]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22938-22951]:ReturnStatement[22938-22951]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22981-22993]:ReturnStatement[22981-22993]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23471-23478]:Modifier[23471-23478]"
    }, {
      "left" : "canInlineReferenceDirectly",
      "right" : "canInlineReferenceDirectly",
      "info" : "SimpleName[23495-23521]:SimpleName[23495-23521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23557-25955]:Block[23557-25546]"
    }, {
      "left" : "if (!isDirectCallNodeReplacementPossible(fnNode))",
      "right" : "if (!isDirectCallNodeReplacementPossible(fnNode))",
      "info" : "IfStatement[23563-23653]:IfStatement[23563-23653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23613-23653]:Block[23613-23653]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[23621-23647]:ReturnStatement[23621-23647]"
    }, {
      "left" : "Node block = fnNode.getLastChild();",
      "right" : "Node block = fnNode.getLastChild();",
      "info" : "VariableDeclarationStatement[23659-23694]:VariableDeclarationStatement[23659-23694]"
    }, {
      "left" : "Node cArg = callNode.getFirstChild().getNext();",
      "right" : "Node cArg = callNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[24034-24081]:VariableDeclarationStatement[23744-23791]"
    }, {
      "left" : "if (!callNode.getFirstChild().isName())",
      "right" : "if (!callNode.getFirstChild().isName())",
      "info" : "IfStatement[24253-24696]:IfStatement[23963-24406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24293-24696]:Block[24003-24406]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "right" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "info" : "IfStatement[24301-24690]:IfStatement[24011-24400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24346-24541]:Block[24056-24251]"
    }, {
      "left" : "if (cArg == null || !cArg.isThis())",
      "right" : "if (cArg == null || !cArg.isThis())",
      "info" : "IfStatement[24418-24502]:IfStatement[24128-24212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24454-24502]:Block[24164-24212]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[24466-24492]:ReturnStatement[24176-24202]"
    }, {
      "left" : "cArg = cArg.getNext();",
      "right" : "cArg = cArg.getNext();",
      "info" : "ExpressionStatement[24511-24533]:ExpressionStatement[24221-24243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24547-24690]:Block[24257-24400]"
    }, {
      "left" : "Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));",
      "right" : "Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));",
      "info" : "ExpressionStatement[24614-24682]:ExpressionStatement[24324-24392]"
    }, {
      "left" : "Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();",
      "right" : "Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();",
      "info" : "VariableDeclarationStatement[24755-24825]:VariableDeclarationStatement[24465-24535]"
    }, {
      "left" : "while (cArg != null || fnParam != null)",
      "right" : "while (cArg != null || fnParam != null)",
      "info" : "WhileStatement[24830-25918]:WhileStatement[24540-25509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24870-25918]:Block[24580-25509]"
    }, {
      "left" : "if (fnParam != null)",
      "right" : "if (fnParam != null)",
      "info" : "IfStatement[24959-25626]:IfStatement[24669-25217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24980-25626]:Block[24690-25217]"
    }, {
      "left" : "if (cArg != null)",
      "right" : "if (cArg != null)",
      "info" : "IfStatement[24990-25546]:IfStatement[24700-25137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25008-25546]:Block[24718-25137]"
    }, {
      "left" : "if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1)",
      "right" : "if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1)",
      "info" : "IfStatement[25333-25536]:IfStatement[24924-25127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25484-25536]:Block[25075-25127]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[25498-25524]:ReturnStatement[25089-25115]"
    }, {
      "left" : "fnParam = fnParam.getNext();",
      "right" : "fnParam = fnParam.getNext();",
      "info" : "ExpressionStatement[25590-25618]:ExpressionStatement[25181-25209]"
    }, {
      "left" : "if (cArg != null)",
      "right" : "if (cArg != null)",
      "info" : "IfStatement[25748-25912]:IfStatement[25339-25503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25766-25912]:Block[25357-25503]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(cArg, compiler))",
      "right" : "if (NodeUtil.mayHaveSideEffects(cArg, compiler))",
      "info" : "IfStatement[25776-25873]:IfStatement[25367-25464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25825-25873]:Block[25416-25464]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[25837-25863]:ReturnStatement[25428-25454]"
    }, {
      "left" : "cArg = cArg.getNext();",
      "right" : "cArg = cArg.getNext();",
      "info" : "ExpressionStatement[25882-25904]:ExpressionStatement[25473-25495]"
    }, {
      "left" : "return CanInlineResult.YES;",
      "right" : "return CanInlineResult.YES;",
      "info" : "ReturnStatement[25924-25951]:ReturnStatement[25515-25542]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26071-26078]:PrimitiveType[25662-25669]"
    }, {
      "left" : "inliningLowersCost",
      "right" : "inliningLowersCost",
      "info" : "SimpleName[26079-26097]:SimpleName[25670-25688]"
    }, {
      "left" : "JSModule fnModule",
      "right" : "JSModule fnModule",
      "info" : "SingleVariableDeclaration[26105-26122]:SingleVariableDeclaration[25696-25713]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[26124-26135]:SingleVariableDeclaration[25715-25726]"
    }, {
      "left" : "Collection<? extends Reference> refs",
      "right" : "Collection<? extends Reference> refs",
      "info" : "SingleVariableDeclaration[26137-26173]:SingleVariableDeclaration[25728-25764]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[26181-26205]:SingleVariableDeclaration[25772-25796]"
    }, {
      "left" : "boolean isRemovable",
      "right" : "boolean isRemovable",
      "info" : "SingleVariableDeclaration[26207-26226]:SingleVariableDeclaration[25798-25817]"
    }, {
      "left" : "boolean referencesThis",
      "right" : "boolean referencesThis",
      "info" : "SingleVariableDeclaration[26228-26250]:SingleVariableDeclaration[25819-25841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26252-28176]:Block[25843-27767]"
    }, {
      "left" : "int referenceCount = refs.size();",
      "right" : "int referenceCount = refs.size();",
      "info" : "VariableDeclarationStatement[26258-26291]:VariableDeclarationStatement[25849-25882]"
    }, {
      "left" : "if (referenceCount == 0)",
      "right" : "if (referenceCount == 0)",
      "info" : "IfStatement[26296-26347]:IfStatement[25887-25938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26321-26347]:Block[25912-25938]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26329-26341]:ReturnStatement[25920-25932]"
    }, {
      "left" : "int referencesUsingBlockInlining = 0;",
      "right" : "int referencesUsingBlockInlining = 0;",
      "info" : "VariableDeclarationStatement[26353-26390]:VariableDeclarationStatement[25944-25981]"
    }, {
      "left" : "boolean checkModules = isRemovable && fnModule != null;",
      "right" : "boolean checkModules = isRemovable && fnModule != null;",
      "info" : "VariableDeclarationStatement[26396-26451]:VariableDeclarationStatement[25987-26042]"
    }, {
      "left" : "JSModuleGraph moduleGraph = compiler.getModuleGraph();",
      "right" : "JSModuleGraph moduleGraph = compiler.getModuleGraph();",
      "info" : "VariableDeclarationStatement[26456-26510]:VariableDeclarationStatement[26047-26101]"
    }, {
      "left" : "for (Reference ref : refs)",
      "right" : "for (Reference ref : refs)",
      "info" : "EnhancedForStatement[26516-27103]:EnhancedForStatement[26107-26694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26543-27103]:Block[26134-26694]"
    }, {
      "left" : "if (ref.mode == InliningMode.BLOCK)",
      "right" : "if (ref.mode == InliningMode.BLOCK)",
      "info" : "IfStatement[26551-26636]:IfStatement[26142-26227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26587-26636]:Block[26178-26227]"
    }, {
      "left" : "referencesUsingBlockInlining++;",
      "right" : "referencesUsingBlockInlining++;",
      "info" : "ExpressionStatement[26597-26628]:ExpressionStatement[26188-26219]"
    }, {
      "left" : "if (checkModules && ref.module != null)",
      "right" : "if (checkModules && ref.module != null)",
      "info" : "IfStatement[26713-27097]:IfStatement[26304-26688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26753-27097]:Block[26344-26688]"
    }, {
      "left" : "if (ref.module != fnModule &&\n            !moduleGraph.dependsOn(ref.module, fnModule))",
      "right" : "if (ref.module != fnModule &&\n            !moduleGraph.dependsOn(ref.module, fnModule))",
      "info" : "IfStatement[26763-27089]:IfStatement[26354-26680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26851-27089]:Block[26442-26680]"
    }, {
      "left" : "isRemovable = false;",
      "right" : "isRemovable = false;",
      "info" : "ExpressionStatement[26986-27006]:ExpressionStatement[26577-26597]"
    }, {
      "left" : "checkModules = false;",
      "right" : "checkModules = false;",
      "info" : "ExpressionStatement[27017-27038]:ExpressionStatement[26608-26629]"
    }, {
      "left" : "int referencesUsingDirectInlining = referenceCount -\n        referencesUsingBlockInlining;",
      "right" : "int referencesUsingDirectInlining = referenceCount -\n        referencesUsingBlockInlining;",
      "info" : "VariableDeclarationStatement[27109-27199]:VariableDeclarationStatement[26700-26790]"
    }, {
      "left" : "if (referenceCount == 1 && isRemovable &&\n        referencesUsingDirectInlining == 1)",
      "right" : "if (referenceCount == 1 && isRemovable &&\n        referencesUsingDirectInlining == 1)",
      "info" : "IfStatement[27573-27685]:IfStatement[27164-27276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27659-27685]:Block[27250-27276]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27667-27679]:ReturnStatement[27258-27270]"
    }, {
      "left" : "int callCost = estimateCallCost(fnNode, referencesThis);",
      "right" : "int callCost = estimateCallCost(fnNode, referencesThis);",
      "info" : "VariableDeclarationStatement[27691-27747]:VariableDeclarationStatement[27282-27338]"
    }, {
      "left" : "int overallCallCost = callCost * referenceCount;",
      "right" : "int overallCallCost = callCost * referenceCount;",
      "info" : "VariableDeclarationStatement[27752-27800]:VariableDeclarationStatement[27343-27391]"
    }, {
      "left" : "int costDeltaDirect = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.DIRECT);",
      "right" : "int costDeltaDirect = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.DIRECT);",
      "info" : "VariableDeclarationStatement[27806-27896]:VariableDeclarationStatement[27397-27487]"
    }, {
      "left" : "int costDeltaBlock = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.BLOCK);",
      "right" : "int costDeltaBlock = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.BLOCK);",
      "info" : "VariableDeclarationStatement[27901-27989]:VariableDeclarationStatement[27492-27580]"
    }, {
      "left" : "return doesLowerCost(fnNode, overallCallCost,\n        referencesUsingDirectInlining, costDeltaDirect,\n        referencesUsingBlockInlining, costDeltaBlock,\n        isRemovable);",
      "right" : "return doesLowerCost(fnNode, overallCallCost,\n        referencesUsingDirectInlining, costDeltaDirect,\n        referencesUsingBlockInlining, costDeltaBlock,\n        isRemovable);",
      "info" : "ReturnStatement[27995-28172]:ReturnStatement[27586-27763]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28239-28246]:Modifier[27830-27837]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28247-28254]:PrimitiveType[27838-27845]"
    }, {
      "left" : "doesLowerCost",
      "right" : "doesLowerCost",
      "info" : "SimpleName[28255-28268]:SimpleName[27846-27859]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[28276-28287]:SingleVariableDeclaration[27867-27878]"
    }, {
      "left" : "int callCost",
      "right" : "int callCost",
      "info" : "SingleVariableDeclaration[28289-28301]:SingleVariableDeclaration[27880-27892]"
    }, {
      "left" : "int directInlines",
      "right" : "int directInlines",
      "info" : "SingleVariableDeclaration[28309-28326]:SingleVariableDeclaration[27900-27917]"
    }, {
      "left" : "int costDeltaDirect",
      "right" : "int costDeltaDirect",
      "info" : "SingleVariableDeclaration[28328-28347]:SingleVariableDeclaration[27919-27938]"
    }, {
      "left" : "int blockInlines",
      "right" : "int blockInlines",
      "info" : "SingleVariableDeclaration[28355-28371]:SingleVariableDeclaration[27946-27962]"
    }, {
      "left" : "int costDeltaBlock",
      "right" : "int costDeltaBlock",
      "info" : "SingleVariableDeclaration[28373-28391]:SingleVariableDeclaration[27964-27982]"
    }, {
      "left" : "boolean removable",
      "right" : "boolean removable",
      "info" : "SingleVariableDeclaration[28399-28416]:SingleVariableDeclaration[27990-28007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28418-29324]:Block[28009-28915]"
    }, {
      "left" : "int fnInstanceCount = directInlines + blockInlines - (removable ? 1 : 0);",
      "right" : "int fnInstanceCount = directInlines + blockInlines - (removable ? 1 : 0);",
      "info" : "VariableDeclarationStatement[28656-28729]:VariableDeclarationStatement[28247-28320]"
    }, {
      "left" : "if (fnInstanceCount == 0)",
      "right" : "if (fnInstanceCount == 0)",
      "info" : "IfStatement[28767-29083]:IfStatement[28358-28674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28793-29083]:Block[28384-28674]"
    }, {
      "left" : "if (blockInlines > 0 && costDeltaBlock > 0)",
      "right" : "if (blockInlines > 0 && costDeltaBlock > 0)",
      "info" : "IfStatement[28983-29058]:IfStatement[28574-28649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29027-29058]:Block[28618-28649]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29037-29050]:ReturnStatement[28628-28641]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29065-29077]:ReturnStatement[28656-28668]"
    }, {
      "left" : "int costDelta = (directInlines * costDeltaDirect) +\n        (blockInlines * costDeltaBlock);",
      "right" : "int costDelta = (directInlines * costDeltaDirect) +\n        (blockInlines * costDeltaBlock);",
      "info" : "VariableDeclarationStatement[29089-29181]:VariableDeclarationStatement[28680-28772]"
    }, {
      "left" : "int threshold = (callCost - costDelta) / fnInstanceCount;",
      "right" : "int threshold = (callCost - costDelta) / fnInstanceCount;",
      "info" : "VariableDeclarationStatement[29186-29243]:VariableDeclarationStatement[28777-28834]"
    }, {
      "left" : "return InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;",
      "right" : "return InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;",
      "info" : "ReturnStatement[29249-29320]:ReturnStatement[28840-28911]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29496-29503]:Modifier[29087-29094]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29504-29510]:Modifier[29095-29101]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29511-29514]:PrimitiveType[29102-29105]"
    }, {
      "left" : "estimateCallCost",
      "right" : "estimateCallCost",
      "info" : "SimpleName[29515-29531]:SimpleName[29106-29122]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[29532-29543]:SingleVariableDeclaration[29123-29134]"
    }, {
      "left" : "boolean referencesThis",
      "right" : "boolean referencesThis",
      "info" : "SingleVariableDeclaration[29545-29567]:SingleVariableDeclaration[29136-29158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29569-30205]:Block[29160-29796]"
    }, {
      "left" : "Node argsNode = NodeUtil.getFunctionParameters(fnNode);",
      "right" : "Node argsNode = NodeUtil.getFunctionParameters(fnNode);",
      "info" : "VariableDeclarationStatement[29575-29630]:VariableDeclarationStatement[29166-29221]"
    }, {
      "left" : "int numArgs = argsNode.getChildCount();",
      "right" : "int numArgs = argsNode.getChildCount();",
      "info" : "VariableDeclarationStatement[29635-29674]:VariableDeclarationStatement[29226-29265]"
    }, {
      "left" : "int callCost = NAME_COST_ESTIMATE + PAREN_COST;",
      "right" : "int callCost = NAME_COST_ESTIMATE + PAREN_COST;",
      "info" : "VariableDeclarationStatement[29680-29727]:VariableDeclarationStatement[29271-29318]"
    }, {
      "left" : "if (numArgs > 0)",
      "right" : "if (numArgs > 0)",
      "info" : "IfStatement[29732-29837]:IfStatement[29323-29428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29749-29837]:Block[29340-29428]"
    }, {
      "left" : "callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);",
      "right" : "callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);",
      "info" : "ExpressionStatement[29757-29831]:ExpressionStatement[29348-29422]"
    }, {
      "left" : "if (referencesThis)",
      "right" : "if (referencesThis)",
      "info" : "IfStatement[29843-30179]:IfStatement[29434-29770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29863-30179]:Block[29454-29770]"
    }, {
      "left" : "callCost += 5 + 5;",
      "right" : "callCost += 5 + 5;",
      "info" : "ExpressionStatement[30133-30151]:ExpressionStatement[29724-29742]"
    }, {
      "left" : "return callCost;",
      "right" : "return callCost;",
      "info" : "ReturnStatement[30185-30201]:ReturnStatement[29776-29792]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30312-30319]:Modifier[29903-29910]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30320-30326]:Modifier[29911-29917]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30327-30330]:PrimitiveType[29918-29921]"
    }, {
      "left" : "inlineCostDelta",
      "right" : "inlineCostDelta",
      "info" : "SimpleName[30331-30346]:SimpleName[29922-29937]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[30354-30365]:SingleVariableDeclaration[29945-29956]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[30367-30391]:SingleVariableDeclaration[29958-29982]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[30393-30410]:SingleVariableDeclaration[29984-30001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30412-32701]:Block[30003-32292]"
    }, {
      "left" : "int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();",
      "right" : "int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();",
      "info" : "VariableDeclarationStatement[30534-30606]:VariableDeclarationStatement[30125-30197]"
    }, {
      "left" : "int commaCount = (paramCount > 1) ? paramCount - 1 : 0;",
      "right" : "int commaCount = (paramCount > 1) ? paramCount - 1 : 0;",
      "info" : "VariableDeclarationStatement[30611-30666]:VariableDeclarationStatement[30202-30257]"
    }, {
      "left" : "int costDeltaFunctionOverhead = 15 + commaCount +\n        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);",
      "right" : "int costDeltaFunctionOverhead = 15 + commaCount +\n        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);",
      "info" : "VariableDeclarationStatement[30671-30790]:VariableDeclarationStatement[30262-30381]"
    }, {
      "left" : "Node block = fnNode.getLastChild();",
      "right" : "Node block = fnNode.getLastChild();",
      "info" : "VariableDeclarationStatement[30796-30831]:VariableDeclarationStatement[30387-30422]"
    }, {
      "left" : "if (!block.hasChildren())",
      "right" : "if (!block.hasChildren())",
      "info" : "IfStatement[30836-30971]:IfStatement[30427-30562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30862-30971]:Block[30453-30562]"
    }, {
      "left" : "return -costDeltaFunctionOverhead;",
      "right" : "return -costDeltaFunctionOverhead;",
      "info" : "ReturnStatement[30931-30965]:ReturnStatement[30522-30556]"
    }, {
      "left" : "if (mode == InliningMode.DIRECT)",
      "right" : "if (mode == InliningMode.DIRECT)",
      "info" : "IfStatement[30977-32697]:IfStatement[30568-32288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31010-31163]:Block[30601-30754]"
    }, {
      "left" : "return -(costDeltaFunctionOverhead + 7);",
      "right" : "return -(costDeltaFunctionOverhead + 7);",
      "info" : "ReturnStatement[31117-31157]:ReturnStatement[30708-30748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31169-32697]:Block[30760-32288]"
    }, {
      "left" : "int aliasCount = namesToAlias.size();",
      "right" : "int aliasCount = namesToAlias.size();",
      "info" : "VariableDeclarationStatement[31177-31214]:VariableDeclarationStatement[30768-30805]"
    }, {
      "left" : "final int inlineBlockOverhead = 4;",
      "right" : "final int inlineBlockOverhead = 4;",
      "info" : "VariableDeclarationStatement[31814-31848]:VariableDeclarationStatement[31405-31439]"
    }, {
      "left" : "final int perReturnOverhead = 2;",
      "right" : "final int perReturnOverhead = 2;",
      "info" : "VariableDeclarationStatement[31865-31897]:VariableDeclarationStatement[31456-31488]"
    }, {
      "left" : "final int perReturnResultOverhead = 3;",
      "right" : "final int perReturnResultOverhead = 3;",
      "info" : "VariableDeclarationStatement[31932-31970]:VariableDeclarationStatement[31523-31561]"
    }, {
      "left" : "final int perAliasOverhead = 3;",
      "right" : "final int perAliasOverhead = 3;",
      "info" : "VariableDeclarationStatement[31986-32017]:VariableDeclarationStatement[31577-31608]"
    }, {
      "left" : "int returnCount = NodeUtil.getNodeTypeReferenceCount(\n          block, Token.RETURN, new NodeUtil.MatchShallowStatement());",
      "right" : "int returnCount = NodeUtil.getNodeTypeReferenceCount(\n          block, Token.RETURN, new NodeUtil.MatchShallowStatement());",
      "info" : "VariableDeclarationStatement[32207-32330]:VariableDeclarationStatement[31798-31921]"
    }, {
      "left" : "int resultCount = (returnCount > 0) ? returnCount - 1 : 0;",
      "right" : "int resultCount = (returnCount > 0) ? returnCount - 1 : 0;",
      "info" : "VariableDeclarationStatement[32337-32395]:VariableDeclarationStatement[31928-31986]"
    }, {
      "left" : "int baseOverhead = (returnCount > 0) ? inlineBlockOverhead : 0;",
      "right" : "int baseOverhead = (returnCount > 0) ? inlineBlockOverhead : 0;",
      "info" : "VariableDeclarationStatement[32402-32465]:VariableDeclarationStatement[31993-32056]"
    }, {
      "left" : "int overhead = baseOverhead\n          + returnCount * perReturnOverhead\n          + resultCount * perReturnResultOverhead\n          + aliasCount * perAliasOverhead;",
      "right" : "int overhead = baseOverhead\n          + returnCount * perReturnOverhead\n          + resultCount * perReturnResultOverhead\n          + aliasCount * perAliasOverhead;",
      "info" : "VariableDeclarationStatement[32473-32637]:VariableDeclarationStatement[32064-32228]"
    }, {
      "left" : "return (overhead - costDeltaFunctionOverhead);",
      "right" : "return (overhead - costDeltaFunctionOverhead);",
      "info" : "ReturnStatement[32645-32691]:ReturnStatement[32236-32282]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32817-32823]:Modifier[32408-32414]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32824-32828]:PrimitiveType[32415-32419]"
    }, {
      "left" : "setKnownConstants",
      "right" : "setKnownConstants",
      "info" : "SimpleName[32829-32846]:SimpleName[32420-32437]"
    }, {
      "left" : "Set<String> knownConstants",
      "right" : "Set<String> knownConstants",
      "info" : "SingleVariableDeclaration[32847-32873]:SingleVariableDeclaration[32438-32464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32875-33110]:Block[32466-32701]"
    }, {
      "left" : "Preconditions.checkState(this.knownConstants.isEmpty());",
      "right" : "Preconditions.checkState(this.knownConstants.isEmpty());",
      "info" : "ExpressionStatement[33008-33064]:ExpressionStatement[32599-32655]"
    }, {
      "left" : "this.knownConstants = knownConstants;",
      "right" : "this.knownConstants = knownConstants;",
      "info" : "ExpressionStatement[33069-33106]:ExpressionStatement[32660-32697]"
    } ]
  },
  "interFileMappings" : { }
}