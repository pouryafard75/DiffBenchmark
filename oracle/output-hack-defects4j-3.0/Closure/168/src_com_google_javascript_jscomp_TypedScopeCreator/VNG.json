{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[4578-76453]:TypeDeclaration[4578-76453]"
    }, {
      "left" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "right" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "info" : "FieldDeclaration[5133-5307]:FieldDeclaration[5133-5307]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[5311-5488]:FieldDeclaration[5311-5488]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5492-5679]:FieldDeclaration[5492-5679]"
    }, {
      "left" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5683-5867]:FieldDeclaration[5683-5867]"
    }, {
      "left" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5871-6056]:FieldDeclaration[5871-6056]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[6060-6239]:FieldDeclaration[6060-6239]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "right" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "info" : "FieldDeclaration[6243-6413]:FieldDeclaration[6243-6413]"
    }, {
      "left" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "right" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "info" : "FieldDeclaration[6417-6607]:FieldDeclaration[6417-6607]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6611-6651]:FieldDeclaration[6611-6651]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[6654-6707]:FieldDeclaration[6654-6707]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[6710-6748]:FieldDeclaration[6710-6748]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[6751-6799]:FieldDeclaration[6751-6799]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[6802-6844]:FieldDeclaration[6802-6844]"
    }, {
      "left" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[6847-6925]:FieldDeclaration[6847-6925]"
    }, {
      "left" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "right" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[6928-7015]:FieldDeclaration[6928-7015]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "right" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[7068-7163]:FieldDeclaration[7068-7163]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[7167-7840]:TypeDeclaration[7167-7840]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[7346-7362]:FieldDeclaration[7346-7362]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[7367-7385]:FieldDeclaration[7367-7385]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[7391-7728]:MethodDeclaration[7391-7728]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[7734-7836]:MethodDeclaration[7734-7836]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[7844-7946]:MethodDeclaration[7844-7946]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[7950-8288]:MethodDeclaration[7950-8288]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[8292-10400]:MethodDeclaration[8292-10400]"
    }, {
      "left" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "right" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "info" : "MethodDeclaration[10404-12357]:MethodDeclaration[10404-12357]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[12361-13889]:MethodDeclaration[12361-13889]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[13893-14197]:MethodDeclaration[13893-14197]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[14201-14361]:MethodDeclaration[14201-14361]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[14365-14484]:MethodDeclaration[14365-14484]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "TypeDeclaration[14488-16009]:TypeDeclaration[14488-16009]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[14587-14625]:FieldDeclaration[14587-14625]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "right" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[14631-14720]:MethodDeclaration[14631-14720]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[14726-15567]:MethodDeclaration[14726-15567]"
    }, {
      "left" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "right" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "info" : "MethodDeclaration[15573-16005]:MethodDeclaration[15573-16005]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[16013-16123]:MethodDeclaration[16013-16123]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[16127-66953]:TypeDeclaration[16127-66953]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[16218-16290]:FieldDeclaration[16218-16290]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16296-16380]:FieldDeclaration[16296-16380]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[16386-16540]:FieldDeclaration[16386-16540]"
    }, {
      "left" : "private List<Node> lentObjectLiterals = null;",
      "right" : "private List<Node> lentObjectLiterals = null;",
      "info" : "FieldDeclaration[16546-17002]:FieldDeclaration[16546-17002]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[17008-17262]:FieldDeclaration[17008-17262]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[17268-17363]:FieldDeclaration[17268-17363]"
    }, {
      "left" : "private InputId inputId;",
      "right" : "private InputId inputId;",
      "info" : "FieldDeclaration[17369-17449]:FieldDeclaration[17369-17449]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[17455-17530]:MethodDeclaration[17455-17530]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[17536-17649]:MethodDeclaration[17536-17649]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[17655-18155]:MethodDeclaration[17655-18155]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[18161-19204]:MethodDeclaration[18161-19204]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19210-20975]:MethodDeclaration[19210-20975]"
    }, {
      "left" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "right" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[20981-22186]:MethodDeclaration[20981-22186]"
    }, {
      "left" : "private void defineObjectLiteral(Node objectLit)",
      "right" : "private void defineObjectLiteral(Node objectLit)",
      "info" : "MethodDeclaration[22192-23866]:MethodDeclaration[22192-23866]"
    }, {
      "left" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "right" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "info" : "MethodDeclaration[23872-25640]:MethodDeclaration[23872-25640]"
    }, {
      "left" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[25646-26550]:MethodDeclaration[25646-26550]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[26556-26856]:MethodDeclaration[26556-26856]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[26862-27081]:MethodDeclaration[26862-27081]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[27087-27713]:MethodDeclaration[27087-27713]"
    }, {
      "left" : "void defineFunctionLiteral(Node n, Node parent)",
      "right" : "void defineFunctionLiteral(Node n, Node parent)",
      "info" : "MethodDeclaration[27719-28620]:MethodDeclaration[27719-28620]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[28626-29430]:MethodDeclaration[28626-29430]"
    }, {
      "left" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "right" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "info" : "MethodDeclaration[29436-30110]:MethodDeclaration[29436-30110]"
    }, {
      "left" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "right" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[30116-35397]:MethodDeclaration[30116-35397]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[35403-36270]:MethodDeclaration[35403-36270]"
    }, {
      "left" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "right" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "info" : "MethodDeclaration[36276-38596]:MethodDeclaration[36276-38596]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[38602-39126]:MethodDeclaration[38602-39126]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[39132-40310]:MethodDeclaration[39132-40310]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "info" : "MethodDeclaration[40317-46550]:MethodDeclaration[40317-46550]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[46556-46796]:MethodDeclaration[46556-46796]"
    }, {
      "left" : "private Scope getQnameRootScope(Node n)",
      "right" : "private Scope getQnameRootScope(Node n)",
      "info" : "MethodDeclaration[46802-47149]:MethodDeclaration[46802-47149]"
    }, {
      "left" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "right" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "info" : "MethodDeclaration[47155-50046]:MethodDeclaration[47155-50046]"
    }, {
      "left" : "private FunctionType getFunctionType(@Nullable Var v)",
      "right" : "private FunctionType getFunctionType(@Nullable Var v)",
      "info" : "MethodDeclaration[50052-50263]:MethodDeclaration[50052-50263]"
    }, {
      "left" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "right" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "info" : "MethodDeclaration[50269-50584]:MethodDeclaration[50269-50584]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[50590-53715]:MethodDeclaration[50590-53715]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[53721-55632]:MethodDeclaration[53721-55632]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[55638-60740]:MethodDeclaration[55638-60740]"
    }, {
      "left" : "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType)",
      "right" : "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType)",
      "info" : "MethodDeclaration[60746-63296]:MethodDeclaration[60746-63296]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[63302-63850]:MethodDeclaration[63302-63850]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[63856-65169]:MethodDeclaration[63856-65169]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[65175-66924]:TypeDeclaration[65175-66924]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[65396-65430]:FieldDeclaration[65396-65430]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[65438-65520]:MethodDeclaration[65438-65520]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[65528-66011]:MethodDeclaration[65528-66011]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "info" : "MethodDeclaration[66019-66918]:MethodDeclaration[66019-66918]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[66957-67346]:TypeDeclaration[66957-67346]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[67072-67096]:FieldDeclaration[67072-67096]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[67101-67132]:FieldDeclaration[67101-67132]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[67137-67168]:FieldDeclaration[67137-67168]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[67174-67342]:MethodDeclaration[67174-67342]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[67350-69562]:TypeDeclaration[67350-69562]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[67536-67603]:MethodDeclaration[67536-67603]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[67609-68183]:MethodDeclaration[67609-68183]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[68189-68431]:MethodDeclaration[68189-68431]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[68437-69558]:MethodDeclaration[68437-69558]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[69592-73194]:TypeDeclaration[69592-73194]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[69767-69900]:MethodDeclaration[69767-69900]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[69906-70711]:MethodDeclaration[69906-70711]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[70717-71251]:MethodDeclaration[70717-71251]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[71257-72122]:MethodDeclaration[71257-72122]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[72128-73166]:MethodDeclaration[72128-73166]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "TypeDeclaration[73223-76160]:TypeDeclaration[73223-76160]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[73491-73531]:FieldDeclaration[73491-73531]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> data;",
      "right" : "private final Map<Node, AstFunctionContents> data;",
      "info" : "FieldDeclaration[73536-73586]:FieldDeclaration[73536-73586]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "right" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "info" : "MethodDeclaration[73592-73763]:MethodDeclaration[73592-73763]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[73769-74036]:MethodDeclaration[73769-74036]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[74042-74223]:MethodDeclaration[74042-74223]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[74229-76156]:MethodDeclaration[74229-76156]"
    }, {
      "left" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "right" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "info" : "MethodDeclaration[76164-76451]:MethodDeclaration[76164-76451]"
    } ],
    "mappings" : [
 {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[5116-5128]:SimpleType[5116-5128]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7310-7317]:Modifier[7310-7317]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7318-7323]:TYPE_DECLARATION_KIND[7318-7323]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7324-7339]:SimpleName[7324-7339]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7391-7406]:SimpleName[7391-7406]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[7407-7416]:SingleVariableDeclaration[7407-7416]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7418-7429]:SingleVariableDeclaration[7418-7429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7431-7728]:Block[7431-7728]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[7439-7472]:ExpressionStatement[7439-7472]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[7479-7512]:ExpressionStatement[7479-7512]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[7519-7536]:ExpressionStatement[7519-7536]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[7543-7560]:ExpressionStatement[7543-7560]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[7701-7722]:ExpressionStatement[7701-7722]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7734-7738]:PrimitiveType[7734-7738]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[7739-7746]:SimpleName[7739-7746]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[7747-7758]:SingleVariableDeclaration[7747-7758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7760-7836]:Block[7760-7836]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[7768-7830]:ExpressionStatement[7768-7830]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7844-7861]:SimpleName[7844-7861]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7862-7887]:SingleVariableDeclaration[7862-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7889-7946]:Block[7889-7946]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[7895-7942]:ConstructorInvocation[7895-7942]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7950-7967]:SimpleName[7950-7967]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7968-7993]:SingleVariableDeclaration[7968-7993]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[8001-8034]:SingleVariableDeclaration[8001-8034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8036-8288]:Block[8036-8288]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[8042-8067]:ExpressionStatement[8042-8067]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[8072-8117]:ExpressionStatement[8072-8117]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[8122-8163]:ExpressionStatement[8122-8163]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[8168-8215]:ExpressionStatement[8168-8215]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[8220-8284]:ExpressionStatement[8220-8284]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8429-8438]:MarkerAnnotation[8429-8438]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8441-8447]:Modifier[8441-8447]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8448-8453]:SimpleType[8448-8453]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[8454-8465]:SimpleName[8454-8465]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8466-8475]:SingleVariableDeclaration[8466-8475]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[8477-8489]:SingleVariableDeclaration[8477-8489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8491-10400]:Block[8491-10400]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[8686-8708]:VariableDeclarationStatement[8686-8708]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[8713-8754]:VariableDeclarationStatement[8713-8754]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8759-9463]:IfStatement[8759-9463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8779-9258]:Block[8779-9258]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "right" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "info" : "ExpressionStatement[8845-8975]:ExpressionStatement[8845-8975]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[9034-9070]:ExpressionStatement[9034-9070]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9078-9151]:VariableDeclarationStatement[9078-9151]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[9158-9192]:ExpressionStatement[9158-9192]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[9199-9252]:ExpressionStatement[9199-9252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9264-9463]:Block[9264-9463]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[9272-9307]:ExpressionStatement[9272-9307]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9314-9384]:VariableDeclarationStatement[9314-9384]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[9391-9424]:ExpressionStatement[9391-9424]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[9431-9457]:ExpressionStatement[9431-9457]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[9469-9508]:ExpressionStatement[9469-9508]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[9513-9541]:ExpressionStatement[9513-9541]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[9709-10181]:EnhancedForStatement[9709-10181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9767-10181]:Block[9767-10181]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[9775-9814]:VariableDeclarationStatement[9775-9814]"
    }, {
      "left" : "if (type != null && type.isFunctionType())",
      "right" : "if (type != null && type.isFunctionType())",
      "info" : "IfStatement[9821-10175]:IfStatement[9821-10175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9864-10175]:Block[9864-10175]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[9874-9923]:VariableDeclarationStatement[9874-9923]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[9932-9979]:VariableDeclarationStatement[9932-9979]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[9988-10167]:IfStatement[9988-10167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10021-10167]:Block[10021-10167]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[10033-10157]:ExpressionStatement[10033-10157]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[10187-10375]:IfStatement[10187-10375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10207-10375]:Block[10207-10375]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[10215-10369]:ExpressionStatement[10215-10369]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[10380-10396]:ReturnStatement[10380-10396]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10689-10693]:PrimitiveType[10689-10693]"
    }, {
      "left" : "patchGlobalScope",
      "right" : "patchGlobalScope",
      "info" : "SimpleName[10694-10710]:SimpleName[10694-10710]"
    }, {
      "left" : "Scope globalScope",
      "right" : "Scope globalScope",
      "info" : "SingleVariableDeclaration[10711-10728]:SingleVariableDeclaration[10711-10728]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[10730-10745]:SingleVariableDeclaration[10730-10745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10747-12357]:Block[10747-12357]"
    }, {
      "left" : "Preconditions.checkState(scriptRoot.isScript());",
      "right" : "Preconditions.checkState(scriptRoot.isScript());",
      "info" : "ExpressionStatement[10902-10950]:ExpressionStatement[10902-10950]"
    }, {
      "left" : "Preconditions.checkNotNull(globalScope);",
      "right" : "Preconditions.checkNotNull(globalScope);",
      "info" : "ExpressionStatement[10955-10995]:ExpressionStatement[10955-10995]"
    }, {
      "left" : "Preconditions.checkState(globalScope.isGlobal());",
      "right" : "Preconditions.checkState(globalScope.isGlobal());",
      "info" : "ExpressionStatement[11000-11049]:ExpressionStatement[11000-11049]"
    }, {
      "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "info" : "VariableDeclarationStatement[11055-11110]:VariableDeclarationStatement[11055-11110]"
    }, {
      "left" : "Preconditions.checkNotNull(scriptName);",
      "right" : "Preconditions.checkNotNull(scriptName);",
      "info" : "ExpressionStatement[11115-11154]:ExpressionStatement[11115-11154]"
    }, {
      "left" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "right" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "info" : "EnhancedForStatement[11159-11354]:EnhancedForStatement[11159-11354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11232-11354]:Block[11232-11354]"
    }, {
      "left" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "right" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "info" : "IfStatement[11240-11348]:IfStatement[11240-11348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11293-11348]:Block[11293-11348]"
    }, {
      "left" : "functionAnalysisResults.remove(node);",
      "right" : "functionAnalysisResults.remove(node);",
      "info" : "ExpressionStatement[11303-11340]:ExpressionStatement[11303-11340]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "right" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "info" : "ExpressionStatement[11360-11463]:ExpressionStatement[11360-11463]"
    }, {
      "left" : "Iterator<Var> varIter = globalScope.getVars();",
      "right" : "Iterator<Var> varIter = globalScope.getVars();",
      "info" : "VariableDeclarationStatement[11766-11812]:VariableDeclarationStatement[11766-11812]"
    }, {
      "left" : "List<Var> varsToRemove = Lists.newArrayList();",
      "right" : "List<Var> varsToRemove = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11817-11863]:VariableDeclarationStatement[11817-11863]"
    }, {
      "left" : "while (varIter.hasNext())",
      "right" : "while (varIter.hasNext())",
      "info" : "WhileStatement[11868-12032]:WhileStatement[11868-12032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11894-12032]:Block[11894-12032]"
    }, {
      "left" : "Var oldVar = varIter.next();",
      "right" : "Var oldVar = varIter.next();",
      "info" : "VariableDeclarationStatement[11902-11930]:VariableDeclarationStatement[11902-11930]"
    }, {
      "left" : "if (scriptName.equals(oldVar.getInputName()))",
      "right" : "if (scriptName.equals(oldVar.getInputName()))",
      "info" : "IfStatement[11937-12026]:IfStatement[11937-12026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11983-12026]:Block[11983-12026]"
    }, {
      "left" : "varsToRemove.add(oldVar);",
      "right" : "varsToRemove.add(oldVar);",
      "info" : "ExpressionStatement[11993-12018]:ExpressionStatement[11993-12018]"
    }, {
      "left" : "for (Var var : varsToRemove)",
      "right" : "for (Var var : varsToRemove)",
      "info" : "EnhancedForStatement[12037-12172]:EnhancedForStatement[12037-12172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12066-12172]:Block[12066-12172]"
    }, {
      "left" : "globalScope.undeclare(var);",
      "right" : "globalScope.undeclare(var);",
      "info" : "ExpressionStatement[12074-12101]:ExpressionStatement[12074-12101]"
    }, {
      "left" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "right" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "info" : "ExpressionStatement[12108-12166]:ExpressionStatement[12108-12166]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "info" : "VariableDeclarationStatement[12219-12289]:VariableDeclarationStatement[12219-12289]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "info" : "ExpressionStatement[12294-12353]:ExpressionStatement[12294-12353]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[12489-12507]:MarkerAnnotation[12489-12507]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[12510-12515]:SimpleType[12510-12515]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[12516-12534]:SimpleName[12516-12534]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[12535-12544]:SingleVariableDeclaration[12535-12544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12546-13889]:Block[12546-13889]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "info" : "ExpressionStatement[12553-12645]:ExpressionStatement[12553-12645]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[12651-12687]:VariableDeclarationStatement[12651-12687]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12692-12742]:ExpressionStatement[12692-12742]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12747-12806]:ExpressionStatement[12747-12806]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12811-12860]:ExpressionStatement[12811-12860]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12865-12915]:ExpressionStatement[12865-12915]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12920-12975]:ExpressionStatement[12920-12975]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12980-13033]:ExpressionStatement[12980-13033]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13038-13096]:ExpressionStatement[13038-13096]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13101-13152]:ExpressionStatement[13101-13152]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13157-13213]:ExpressionStatement[13157-13213]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13218-13278]:ExpressionStatement[13218-13278]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13283-13334]:ExpressionStatement[13283-13334]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13339-13397]:ExpressionStatement[13339-13397]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13402-13459]:ExpressionStatement[13402-13459]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13464-13519]:ExpressionStatement[13464-13519]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13524-13578]:ExpressionStatement[13524-13578]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[13583-13633]:ExpressionStatement[13583-13633]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[13811-13870]:ExpressionStatement[13811-13870]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[13876-13885]:ReturnStatement[13876-13885]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13893-13900]:Modifier[13893-13900]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13901-13905]:PrimitiveType[13901-13905]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[13906-13931]:SimpleName[13906-13931]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[13932-13943]:SingleVariableDeclaration[13932-13943]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[13945-13961]:SingleVariableDeclaration[13945-13961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13963-14197]:Block[13963-14197]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[13969-14026]:VariableDeclarationStatement[13969-14026]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[14031-14099]:ExpressionStatement[14031-14099]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[14104-14193]:ExpressionStatement[14104-14193]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14201-14208]:Modifier[14201-14208]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14209-14213]:PrimitiveType[14209-14213]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[14214-14236]:SimpleName[14214-14236]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14237-14248]:SingleVariableDeclaration[14237-14248]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14250-14261]:SingleVariableDeclaration[14250-14261]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[14269-14285]:SingleVariableDeclaration[14269-14285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14287-14361]:Block[14287-14361]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[14293-14357]:ExpressionStatement[14293-14357]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14365-14372]:Modifier[14365-14372]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14373-14377]:PrimitiveType[14373-14377]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[14378-14395]:SimpleName[14378-14395]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14396-14407]:SingleVariableDeclaration[14396-14407]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14409-14420]:SingleVariableDeclaration[14409-14420]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[14422-14430]:SingleVariableDeclaration[14422-14430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14432-14484]:Block[14432-14484]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[14438-14480]:ExpressionStatement[14438-14480]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14488-14495]:Modifier[14488-14495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14496-14502]:Modifier[14496-14502]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14503-14508]:TYPE_DECLARATION_KIND[14503-14508]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14509-14533]:SimpleName[14509-14533]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[14548-14580]:SimpleType[14548-14580]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14631-14655]:SimpleName[14631-14655]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[14656-14679]:SingleVariableDeclaration[14656-14679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14681-14720]:Block[14681-14720]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[14689-14714]:ExpressionStatement[14689-14714]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14726-14735]:MarkerAnnotation[14726-14735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14740-14746]:Modifier[14740-14746]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14747-14751]:PrimitiveType[14747-14751]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14752-14757]:SimpleName[14752-14757]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14758-14773]:SingleVariableDeclaration[14758-14773]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14775-14784]:SingleVariableDeclaration[14775-14784]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14786-14797]:SingleVariableDeclaration[14786-14797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14799-15567]:Block[14799-15567]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[14807-14828]:VariableDeclarationStatement[14807-14828]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[14835-15561]:SwitchStatement[14835-15561]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14869-14884]:SwitchCase[14869-14884]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[14895-15130]:ForStatement[14895-15130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14990-15130]:Block[14990-15130]"
    }, {
      "left" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "right" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "info" : "ExpressionStatement[15004-15118]:ExpressionStatement[15004-15118]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15141-15147]:BreakStatement[15141-15147]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[15156-15179]:SwitchCase[15156-15179]"
    }, {
      "left" : "Node firstChild = node.getFirstChild();",
      "right" : "Node firstChild = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[15190-15229]:VariableDeclarationStatement[15190-15229]"
    }, {
      "left" : "if (firstChild.isAssign())",
      "right" : "if (firstChild.isAssign())",
      "info" : "IfStatement[15240-15536]:IfStatement[15240-15536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15267-15425]:Block[15267-15425]"
    }, {
      "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15281-15413]:ExpressionStatement[15281-15413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15431-15536]:Block[15431-15536]"
    }, {
      "left" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15445-15524]:ExpressionStatement[15445-15524]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15547-15553]:BreakStatement[15547-15553]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15573-15580]:Modifier[15573-15580]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15581-15585]:PrimitiveType[15581-15585]"
    }, {
      "left" : "identifyNameNode",
      "right" : "identifyNameNode",
      "info" : "SimpleName[15586-15602]:SimpleName[15586-15602]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[15612-15625]:SingleVariableDeclaration[15612-15625]"
    }, {
      "left" : "Node valueNode",
      "right" : "Node valueNode",
      "info" : "SingleVariableDeclaration[15627-15641]:SingleVariableDeclaration[15627-15641]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[15643-15657]:SingleVariableDeclaration[15643-15657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15659-16005]:Block[15659-16005]"
    }, {
      "left" : "if (nameNode.isQualifiedName())",
      "right" : "if (nameNode.isQualifiedName())",
      "info" : "IfStatement[15667-15999]:IfStatement[15667-15999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15699-15999]:Block[15699-15999]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15709-15991]:IfStatement[15709-15991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15727-15991]:Block[15727-15991]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[15739-15981]:IfStatement[15739-15981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15772-15860]:Block[15772-15860]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15786-15848]:ExpressionStatement[15786-15848]"
    }, {
      "left" : "if (info.hasTypedefType())",
      "right" : "if (info.hasTypedefType())",
      "info" : "IfStatement[15866-15981]:IfStatement[15866-15981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15893-15981]:Block[15893-15981]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15907-15969]:ExpressionStatement[15907-15969]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16013-16020]:Modifier[16013-16020]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[16021-16027]:SimpleType[16021-16027]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[16028-16041]:SimpleName[16028-16041]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[16042-16065]:SingleVariableDeclaration[16042-16065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16067-16123]:Block[16067-16123]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[16073-16119]:ReturnStatement[16073-16119]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16127-16134]:Modifier[16127-16134]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[16135-16143]:Modifier[16135-16143]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16144-16149]:TYPE_DECLARATION_KIND[16144-16149]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[16150-16170]:SimpleName[16150-16170]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[16188-16210]:SimpleType[16188-16210]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17455-17462]:Modifier[17455-17462]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[17463-17483]:SimpleName[17463-17483]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[17484-17495]:SingleVariableDeclaration[17484-17495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17497-17530]:Block[17497-17530]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[17505-17524]:ExpressionStatement[17505-17524]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17536-17540]:PrimitiveType[17536-17540]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[17541-17556]:SimpleName[17541-17556]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17557-17566]:SingleVariableDeclaration[17557-17566]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[17568-17579]:SingleVariableDeclaration[17568-17579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17581-17649]:Block[17581-17649]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[17589-17643]:ExpressionStatement[17589-17643]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17655-17659]:PrimitiveType[17655-17659]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[17660-17672]:SimpleName[17660-17672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17675-18155]:Block[17675-18155]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[17732-17824]:EnhancedForStatement[17732-17824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17782-17824]:Block[17782-17824]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[17792-17816]:ExpressionStatement[17792-17816]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[17887-17924]:VariableDeclarationStatement[17887-17924]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[17931-18022]:WhileStatement[17931-18022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17954-18022]:Block[17954-18022]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[17964-18014]:ExpressionStatement[17964-18014]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[18109-18149]:ExpressionStatement[18109-18149]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18161-18170]:MarkerAnnotation[18161-18170]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18175-18181]:Modifier[18175-18181]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18182-18187]:Modifier[18182-18187]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18188-18195]:PrimitiveType[18188-18195]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[18196-18210]:SimpleName[18196-18210]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18211-18226]:SingleVariableDeclaration[18211-18226]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18228-18234]:SingleVariableDeclaration[18228-18234]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18244-18255]:SingleVariableDeclaration[18244-18255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18257-19204]:Block[18257-19204]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[18265-18290]:ExpressionStatement[18265-18290]"
    }, {
      "left" : "if (n.isFunction() ||\n          n.isScript())",
      "right" : "if (n.isFunction() ||\n          n.isScript())",
      "info" : "IfStatement[18297-18445]:IfStatement[18297-18445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18343-18445]:Block[18343-18445]"
    }, {
      "left" : "Preconditions.checkNotNull(inputId);",
      "right" : "Preconditions.checkNotNull(inputId);",
      "info" : "ExpressionStatement[18353-18389]:ExpressionStatement[18353-18389]"
    }, {
      "left" : "sourceName = NodeUtil.getSourceName(n);",
      "right" : "sourceName = NodeUtil.getSourceName(n);",
      "info" : "ExpressionStatement[18398-18437]:ExpressionStatement[18398-18437]"
    }, {
      "left" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "VariableDeclarationStatement[18577-18708]:VariableDeclarationStatement[18577-18708]"
    }, {
      "left" : "if (descend)",
      "right" : "if (descend)",
      "info" : "IfStatement[18716-19175]:IfStatement[18716-19175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18729-19175]:Block[18729-19175]"
    }, {
      "left" : "if (NodeUtil.isStatementParent(n))",
      "right" : "if (NodeUtil.isStatementParent(n))",
      "info" : "IfStatement[18865-19167]:IfStatement[18865-19167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18900-19167]:Block[18900-19167]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "info" : "ForStatement[18912-19157]:ForStatement[18912-19157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19019-19157]:Block[19019-19157]"
    }, {
      "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "info" : "IfStatement[19033-19145]:IfStatement[19033-19145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19083-19145]:Block[19083-19145]"
    }, {
      "left" : "defineFunctionLiteral(child, n);",
      "right" : "defineFunctionLiteral(child, n);",
      "info" : "ExpressionStatement[19099-19131]:ExpressionStatement[19099-19131]"
    }, {
      "left" : "return descend;",
      "right" : "return descend;",
      "info" : "ReturnStatement[19183-19198]:ReturnStatement[19183-19198]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19210-19219]:MarkerAnnotation[19210-19219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19224-19230]:Modifier[19224-19230]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19231-19235]:PrimitiveType[19231-19235]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[19236-19241]:SimpleName[19236-19241]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19242-19257]:SingleVariableDeclaration[19242-19257]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19259-19265]:SingleVariableDeclaration[19259-19265]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19267-19278]:SingleVariableDeclaration[19267-19278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19280-20975]:Block[19280-20975]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[19288-19313]:ExpressionStatement[19288-19313]"
    }, {
      "left" : "attachLiteralTypes(t, n);",
      "right" : "attachLiteralTypes(t, n);",
      "info" : "ExpressionStatement[19320-19345]:ExpressionStatement[19320-19345]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[19353-20661]:SwitchStatement[19353-20661]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[19384-19400]:SwitchCase[19384-19400]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[19411-19452]:ExpressionStatement[19411-19452]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "info" : "ExpressionStatement[19463-19533]:ExpressionStatement[19463-19533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19544-19550]:BreakStatement[19544-19550]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[19560-19580]:SwitchCase[19560-19580]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[19591-19697]:IfStatement[19591-19697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19645-19697]:Block[19645-19697]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[19659-19685]:ExpressionStatement[19659-19685]"
    }, {
      "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[19774-19880]:IfStatement[19774-19880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19821-19880]:Block[19821-19880]"
    }, {
      "left" : "defineFunctionLiteral(n, parent);",
      "right" : "defineFunctionLiteral(n, parent);",
      "info" : "ExpressionStatement[19835-19868]:ExpressionStatement[19835-19868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19891-19897]:BreakStatement[19891-19897]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[19907-19925]:SwitchCase[19907-19925]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19986-20022]:VariableDeclarationStatement[19986-20022]"
    }, {
      "left" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[20033-20233]:IfStatement[20033-20233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20107-20233]:Block[20107-20233]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[20121-20221]:ExpressionStatement[20121-20221]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20244-20250]:BreakStatement[20244-20250]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[20260-20277]:SwitchCase[20260-20277]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[20288-20311]:ExpressionStatement[20288-20311]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20322-20328]:BreakStatement[20322-20328]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[20338-20353]:SwitchCase[20338-20353]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[20364-20385]:ExpressionStatement[20364-20385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20396-20402]:BreakStatement[20396-20402]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[20412-20431]:SwitchCase[20412-20431]"
    }, {
      "left" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "right" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "info" : "IfStatement[20482-20636]:IfStatement[20482-20636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20546-20636]:Block[20546-20636]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[20560-20624]:ExpressionStatement[20560-20624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20647-20653]:BreakStatement[20647-20653]"
    }, {
      "left" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
      "right" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
      "info" : "IfStatement[20732-20969]:IfStatement[20732-20969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20826-20969]:Block[20826-20969]"
    }, {
      "left" : "for (Node objLit : lentObjectLiterals)",
      "right" : "for (Node objLit : lentObjectLiterals)",
      "info" : "EnhancedForStatement[20836-20925]:EnhancedForStatement[20836-20925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20875-20925]:Block[20875-20925]"
    }, {
      "left" : "defineObjectLiteral(objLit);",
      "right" : "defineObjectLiteral(objLit);",
      "info" : "ExpressionStatement[20887-20915]:ExpressionStatement[20887-20915]"
    }, {
      "left" : "lentObjectLiterals.clear();",
      "right" : "lentObjectLiterals.clear();",
      "info" : "ExpressionStatement[20934-20961]:ExpressionStatement[20934-20961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20981-20988]:Modifier[20981-20988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20989-20993]:PrimitiveType[20989-20993]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[20994-21012]:SimpleName[20994-21012]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[21013-21028]:SingleVariableDeclaration[21013-21028]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21030-21036]:SingleVariableDeclaration[21030-21036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21038-22186]:Block[21038-22186]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "info" : "SwitchStatement[21046-22180]:SwitchStatement[21046-22180]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[21077-21093]:SwitchCase[21077-21093]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[21104-21142]:ExpressionStatement[21104-21142]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21153-21159]:BreakStatement[21153-21159]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21169-21185]:SwitchCase[21169-21185]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[21196-21234]:ExpressionStatement[21196-21234]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21245-21251]:BreakStatement[21245-21251]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[21261-21279]:SwitchCase[21261-21279]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[21290-21330]:ExpressionStatement[21290-21330]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21341-21347]:BreakStatement[21341-21347]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[21357-21375]:SwitchCase[21357-21375]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[21386-21426]:ExpressionStatement[21386-21426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21437-21443]:BreakStatement[21437-21443]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[21453-21469]:SwitchCase[21453-21469]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[21478-21495]:SwitchCase[21478-21495]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[21506-21547]:ExpressionStatement[21506-21547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21558-21564]:BreakStatement[21558-21564]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[21574-21592]:SwitchCase[21574-21592]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[21603-21643]:ExpressionStatement[21603-21643]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21654-21660]:BreakStatement[21654-21660]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[21670-21691]:SwitchCase[21670-21691]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21702-21736]:VariableDeclarationStatement[21702-21736]"
    }, {
      "left" : "if (info != null &&\n              info.getLendsName() != null)",
      "right" : "if (info != null &&\n              info.getLendsName() != null)",
      "info" : "IfStatement[21747-22034]:IfStatement[21747-22034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21810-21979]:Block[21810-21979]"
    }, {
      "left" : "if (lentObjectLiterals == null)",
      "right" : "if (lentObjectLiterals == null)",
      "info" : "IfStatement[21824-21928]:IfStatement[21824-21928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21856-21928]:Block[21856-21928]"
    }, {
      "left" : "lentObjectLiterals = Lists.newArrayList();",
      "right" : "lentObjectLiterals = Lists.newArrayList();",
      "info" : "ExpressionStatement[21872-21914]:ExpressionStatement[21872-21914]"
    }, {
      "left" : "lentObjectLiterals.add(n);",
      "right" : "lentObjectLiterals.add(n);",
      "info" : "ExpressionStatement[21941-21967]:ExpressionStatement[21941-21967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21985-22034]:Block[21985-22034]"
    }, {
      "left" : "defineObjectLiteral(n);",
      "right" : "defineObjectLiteral(n);",
      "info" : "ExpressionStatement[21999-22022]:ExpressionStatement[21999-22022]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22045-22051]:BreakStatement[22045-22051]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22192-22199]:Modifier[22192-22199]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22200-22204]:PrimitiveType[22200-22204]"
    }, {
      "left" : "defineObjectLiteral",
      "right" : "defineObjectLiteral",
      "info" : "SimpleName[22205-22224]:SimpleName[22205-22224]"
    }, {
      "left" : "Node objectLit",
      "right" : "Node objectLit",
      "info" : "SingleVariableDeclaration[22225-22239]:SingleVariableDeclaration[22225-22239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22241-23866]:Block[22241-23866]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[22288-22307]:VariableDeclarationStatement[22288-22307]"
    }, {
      "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[22314-22356]:VariableDeclarationStatement[22314-22356]"
    }, {
      "left" : "if (info != null &&\n          info.getLendsName() != null)",
      "right" : "if (info != null &&\n          info.getLendsName() != null)",
      "info" : "IfStatement[22363-23152]:IfStatement[22363-23152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22422-23152]:Block[22422-23152]"
    }, {
      "left" : "String lendsName = info.getLendsName();",
      "right" : "String lendsName = info.getLendsName();",
      "info" : "VariableDeclarationStatement[22432-22471]:VariableDeclarationStatement[22432-22471]"
    }, {
      "left" : "Var lendsVar = scope.getVar(lendsName);",
      "right" : "Var lendsVar = scope.getVar(lendsName);",
      "info" : "VariableDeclarationStatement[22480-22519]:VariableDeclarationStatement[22480-22519]"
    }, {
      "left" : "if (lendsVar == null)",
      "right" : "if (lendsVar == null)",
      "info" : "IfStatement[22528-23144]:IfStatement[22528-23144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22550-22666]:Block[22550-22666]"
    }, {
      "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "info" : "ExpressionStatement[22562-22656]:ExpressionStatement[22562-22656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22672-23144]:Block[22672-23144]"
    }, {
      "left" : "type = lendsVar.getType();",
      "right" : "type = lendsVar.getType();",
      "info" : "ExpressionStatement[22684-22710]:ExpressionStatement[22684-22710]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[22721-22813]:IfStatement[22721-22813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22739-22813]:Block[22739-22813]"
    }, {
      "left" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[22753-22801]:ExpressionStatement[22753-22801]"
    }, {
      "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[22824-23134]:IfStatement[22824-23134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22886-23076]:Block[22886-23076]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "info" : "ExpressionStatement[22900-23039]:ExpressionStatement[22900-23039]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[23052-23064]:ExpressionStatement[23052-23064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23082-23134]:Block[23082-23134]"
    }, {
      "left" : "objectLit.setJSType(type);",
      "right" : "objectLit.setJSType(type);",
      "info" : "ExpressionStatement[23096-23122]:ExpressionStatement[23096-23122]"
    }, {
      "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "info" : "ExpressionStatement[23160-23204]:ExpressionStatement[23160-23204]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "info" : "VariableDeclarationStatement[23211-23259]:VariableDeclarationStatement[23211-23259]"
    }, {
      "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[23266-23321]:VariableDeclarationStatement[23266-23321]"
    }, {
      "left" : "boolean createdEnumType = false;",
      "right" : "boolean createdEnumType = false;",
      "info" : "VariableDeclarationStatement[23328-23360]:VariableDeclarationStatement[23328-23360]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[23367-23534]:IfStatement[23367-23534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23416-23534]:Block[23416-23534]"
    }, {
      "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "info" : "ExpressionStatement[23426-23494]:ExpressionStatement[23426-23494]"
    }, {
      "left" : "createdEnumType = true;",
      "right" : "createdEnumType = true;",
      "info" : "ExpressionStatement[23503-23526]:ExpressionStatement[23503-23526]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[23542-23626]:IfStatement[23542-23626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23560-23626]:Block[23560-23626]"
    }, {
      "left" : "type = typeRegistry.createAnonymousObjectType();",
      "right" : "type = typeRegistry.createAnonymousObjectType();",
      "info" : "ExpressionStatement[23570-23618]:ExpressionStatement[23570-23618]"
    }, {
      "left" : "setDeferredType(objectLit, type);",
      "right" : "setDeferredType(objectLit, type);",
      "info" : "ExpressionStatement[23634-23667]:ExpressionStatement[23634-23667]"
    }, {
      "left" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "right" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "info" : "ExpressionStatement[23753-23860]:ExpressionStatement[23753-23860]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24258-24262]:PrimitiveType[24258-24262]"
    }, {
      "left" : "processObjectLitProperties",
      "right" : "processObjectLitProperties",
      "info" : "SimpleName[24263-24289]:SimpleName[24263-24289]"
    }, {
      "left" : "Node objLit",
      "right" : "Node objLit",
      "info" : "SingleVariableDeclaration[24299-24310]:SingleVariableDeclaration[24299-24310]"
    }, {
      "left" : "ObjectType objLitType",
      "right" : "ObjectType objLitType",
      "info" : "SingleVariableDeclaration[24312-24333]:SingleVariableDeclaration[24312-24333]"
    }, {
      "left" : "boolean declareOnOwner",
      "right" : "boolean declareOnOwner",
      "info" : "SingleVariableDeclaration[24343-24365]:SingleVariableDeclaration[24343-24365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24367-25640]:Block[24367-25640]"
    }, {
      "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "info" : "ForStatement[24375-25634]:ForStatement[24375-25634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24476-25634]:Block[24476-25634]"
    }, {
      "left" : "Node value = keyNode.getFirstChild();",
      "right" : "Node value = keyNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[24486-24523]:VariableDeclarationStatement[24486-24523]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "info" : "VariableDeclarationStatement[24532-24590]:VariableDeclarationStatement[24532-24590]"
    }, {
      "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[24599-24639]:VariableDeclarationStatement[24599-24639]"
    }, {
      "left" : "JSType valueType =\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);",
      "right" : "JSType valueType =\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);",
      "info" : "VariableDeclarationStatement[24648-24746]:VariableDeclarationStatement[24648-24746]"
    }, {
      "left" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "right" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "info" : "VariableDeclarationStatement[24755-24934]:VariableDeclarationStatement[24755-24934]"
    }, {
      "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "info" : "VariableDeclarationStatement[25049-25108]:VariableDeclarationStatement[25049-25108]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[25117-25357]:IfStatement[25117-25357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25144-25274]:Block[25144-25274]"
    }, {
      "left" : "boolean inferred = keyType == null;",
      "right" : "boolean inferred = keyType == null;",
      "info" : "VariableDeclarationStatement[25156-25191]:VariableDeclarationStatement[25156-25191]"
    }, {
      "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "info" : "ExpressionStatement[25202-25264]:ExpressionStatement[25202-25264]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[25280-25357]:IfStatement[25280-25357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25301-25357]:Block[25301-25357]"
    }, {
      "left" : "setDeferredType(keyNode, keyType);",
      "right" : "setDeferredType(keyNode, keyType);",
      "info" : "ExpressionStatement[25313-25347]:ExpressionStatement[25313-25347]"
    }, {
      "left" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "right" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "info" : "IfStatement[25367-25626]:IfStatement[25367-25626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25428-25626]:Block[25428-25626]"
    }, {
      "left" : "boolean isExtern = keyNode.isFromExterns();",
      "right" : "boolean isExtern = keyNode.isFromExterns();",
      "info" : "VariableDeclarationStatement[25498-25541]:VariableDeclarationStatement[25498-25541]"
    }, {
      "left" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "right" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "info" : "ExpressionStatement[25552-25616]:ExpressionStatement[25552-25616]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25876-25883]:Modifier[25876-25883]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[25884-25890]:SimpleType[25884-25890]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[25891-25918]:SimpleName[25891-25918]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[25919-25936]:SingleVariableDeclaration[25919-25936]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[25946-25955]:SingleVariableDeclaration[25946-25955]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[25957-25971]:SingleVariableDeclaration[25957-25971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25973-26550]:Block[25973-26550]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[25981-26002]:VariableDeclarationStatement[25981-26002]"
    }, {
      "left" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "right" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "info" : "VariableDeclarationStatement[26009-26170]:VariableDeclarationStatement[26009-26170]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[26177-26523]:IfStatement[26177-26523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26195-26523]:Block[26195-26523]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[26205-26515]:IfStatement[26205-26515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26225-26301]:Block[26225-26301]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[26237-26291]:ExpressionStatement[26237-26291]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[26307-26515]:IfStatement[26307-26515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26364-26515]:Block[26364-26515]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[26376-26416]:VariableDeclarationStatement[26376-26416]"
    }, {
      "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "info" : "ExpressionStatement[26427-26505]:ExpressionStatement[26427-26505]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[26530-26544]:ReturnStatement[26530-26544]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26700-26704]:PrimitiveType[26700-26704]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[26705-26725]:SimpleName[26705-26725]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26726-26732]:SingleVariableDeclaration[26726-26732]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[26734-26742]:SingleVariableDeclaration[26734-26742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26744-26856]:Block[26744-26856]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[26752-26797]:ExpressionStatement[26752-26797]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[26804-26850]:ExpressionStatement[26804-26850]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26912-26916]:PrimitiveType[26912-26916]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[26917-26928]:SimpleName[26917-26928]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26929-26935]:SingleVariableDeclaration[26929-26935]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26937-26948]:SingleVariableDeclaration[26937-26948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26950-27081]:Block[26950-27081]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[26958-26995]:ExpressionStatement[26958-26995]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27002-27037]:VariableDeclarationStatement[27002-27037]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[27044-27075]:ExpressionStatement[27044-27075]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27140-27144]:PrimitiveType[27140-27144]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[27145-27154]:SimpleName[27145-27154]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27155-27161]:SingleVariableDeclaration[27155-27161]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27163-27174]:SingleVariableDeclaration[27163-27174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27176-27713]:Block[27176-27713]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[27184-27219]:ExpressionStatement[27184-27219]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[27226-27260]:VariableDeclarationStatement[27226-27260]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[27267-27707]:IfStatement[27267-27707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27296-27559]:Block[27296-27559]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[27306-27440]:IfStatement[27306-27440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27324-27440]:Block[27324-27440]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[27367-27430]:ExpressionStatement[27367-27430]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[27449-27551]:EnhancedForStatement[27449-27551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27480-27551]:Block[27480-27551]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[27492-27541]:ExpressionStatement[27492-27541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27565-27707]:Block[27565-27707]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27575-27605]:VariableDeclarationStatement[27575-27605]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[27614-27699]:ExpressionStatement[27614-27699]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27770-27774]:PrimitiveType[27770-27774]"
    }, {
      "left" : "defineFunctionLiteral",
      "right" : "defineFunctionLiteral",
      "info" : "SimpleName[27775-27796]:SimpleName[27775-27796]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27797-27803]:SingleVariableDeclaration[27797-27803]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27805-27816]:SingleVariableDeclaration[27805-27816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27818-28620]:Block[27818-28620]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[27826-27866]:ExpressionStatement[27826-27866]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(n);",
      "right" : "Node lValue = NodeUtil.getBestLValue(n);",
      "info" : "VariableDeclarationStatement[27981-28021]:VariableDeclarationStatement[27981-28021]"
    }, {
      "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[28028-28074]:VariableDeclarationStatement[28028-28074]"
    }, {
      "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[28081-28138]:VariableDeclarationStatement[28081-28138]"
    }, {
      "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "info" : "VariableDeclarationStatement[28145-28242]:VariableDeclarationStatement[28145-28242]"
    }, {
      "left" : "setDeferredType(n, functionType);",
      "right" : "setDeferredType(n, functionType);",
      "info" : "ExpressionStatement[28308-28341]:ExpressionStatement[28308-28341]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[28510-28614]:IfStatement[28510-28614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28549-28614]:Block[28549-28614]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[28559-28606]:ExpressionStatement[28559-28606]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29010-29017]:Modifier[29010-29017]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29018-29022]:PrimitiveType[29018-29022]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[29023-29033]:SimpleName[29023-29033]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[29034-29043]:SingleVariableDeclaration[29034-29043]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[29045-29053]:SingleVariableDeclaration[29045-29053]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29055-29066]:SingleVariableDeclaration[29055-29066]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[29068-29082]:SingleVariableDeclaration[29068-29082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29084-29430]:Block[29084-29430]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[29092-29126]:VariableDeclarationStatement[29092-29126]"
    }, {
      "left" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "right" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "info" : "VariableDeclarationStatement[29159-29220]:VariableDeclarationStatement[29159-29220]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[29227-29389]:IfStatement[29227-29389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29245-29389]:Block[29245-29389]"
    }, {
      "left" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[29304-29381]:ExpressionStatement[29304-29381]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[29396-29424]:ExpressionStatement[29396-29424]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29760-29767]:Modifier[29760-29767]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29768-29775]:PrimitiveType[29768-29775]"
    }, {
      "left" : "shouldUseFunctionLiteralType",
      "right" : "shouldUseFunctionLiteralType",
      "info" : "SimpleName[29776-29804]:SimpleName[29776-29804]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[29814-29831]:SingleVariableDeclaration[29814-29831]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[29833-29847]:SingleVariableDeclaration[29833-29847]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[29849-29860]:SingleVariableDeclaration[29849-29860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29862-30110]:Block[29862-30110]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[29870-29918]:IfStatement[29870-29918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29888-29918]:Block[29888-29918]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29898-29910]:ReturnStatement[29898-29910]"
    }, {
      "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[29925-30041]:IfStatement[29925-30041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30010-30041]:Block[30010-30041]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30020-30033]:ReturnStatement[30020-30033]"
    }, {
      "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "info" : "ReturnStatement[30048-30104]:ReturnStatement[30048-30104]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31137-31144]:Modifier[31137-31144]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[31145-31157]:SimpleType[31145-31157]"
    }, {
      "left" : "createFunctionTypeFromNodes",
      "right" : "createFunctionTypeFromNodes",
      "info" : "SimpleName[31158-31185]:SimpleName[31158-31185]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[31195-31216]:SingleVariableDeclaration[31195-31216]"
    }, {
      "left" : "@Nullable String name",
      "right" : "@Nullable String name",
      "info" : "SingleVariableDeclaration[31226-31247]:SingleVariableDeclaration[31226-31247]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[31257-31281]:SingleVariableDeclaration[31257-31281]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[31291-31316]:SingleVariableDeclaration[31291-31316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31318-35397]:Block[31318-35397]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[31327-31360]:VariableDeclarationStatement[31327-31360]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[31442-32085]:IfStatement[31442-32085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31510-32085]:Block[31510-32085]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[31520-31570]:VariableDeclarationStatement[31520-31570]"
    }, {
      "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "info" : "IfStatement[31579-32077]:IfStatement[31579-32077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31667-32077]:Block[31667-32077]"
    }, {
      "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[31679-31743]:VariableDeclarationStatement[31679-31743]"
    }, {
      "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "info" : "IfStatement[31754-32067]:IfStatement[31754-32067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31869-32067]:Block[31869-32067]"
    }, {
      "left" : "functionType = aliasedType;",
      "right" : "functionType = aliasedType;",
      "info" : "ExpressionStatement[31883-31910]:ExpressionStatement[31883-31910]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[31924-32055]:IfStatement[31924-32055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31962-32055]:Block[31962-32055]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[31978-32041]:ExpressionStatement[31978-32041]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[32093-35345]:IfStatement[32093-35345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32119-35345]:Block[32119-35345]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[32129-32183]:VariableDeclarationStatement[32129-32183]"
    }, {
      "left" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "right" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "info" : "VariableDeclarationStatement[32192-32264]:VariableDeclarationStatement[32192-32264]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[32273-32315]:VariableDeclarationStatement[32273-32315]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[32324-32412]:VariableDeclarationStatement[32324-32412]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[32421-32482]:VariableDeclarationStatement[32421-32482]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[32492-32889]:IfStatement[32492-32889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32528-32889]:Block[32528-32889]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[32540-32599]:VariableDeclarationStatement[32540-32599]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[32685-32728]:ExpressionStatement[32685-32728]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[32739-32879]:IfStatement[32739-32879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32766-32879]:Block[32766-32879]"
    }, {
      "left" : "functionType = type.toMaybeFunctionType();",
      "right" : "functionType = type.toMaybeFunctionType();",
      "info" : "ExpressionStatement[32780-32822]:ExpressionStatement[32780-32822]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[32835-32867]:ExpressionStatement[32835-32867]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[32899-35337]:IfStatement[32899-35337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32925-35337]:Block[32925-35337]"
    }, {
      "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "info" : "VariableDeclarationStatement[32992-33049]:VariableDeclarationStatement[32992-33049]"
    }, {
      "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "info" : "VariableDeclarationStatement[33060-33117]:VariableDeclarationStatement[33060-33117]"
    }, {
      "left" : "Var ownerVar = null;",
      "right" : "Var ownerVar = null;",
      "info" : "VariableDeclarationStatement[33128-33148]:VariableDeclarationStatement[33128-33148]"
    }, {
      "left" : "String propName = null;",
      "right" : "String propName = null;",
      "info" : "VariableDeclarationStatement[33159-33182]:VariableDeclarationStatement[33159-33182]"
    }, {
      "left" : "ObjectType ownerType = null;",
      "right" : "ObjectType ownerType = null;",
      "info" : "VariableDeclarationStatement[33193-33221]:VariableDeclarationStatement[33193-33221]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[33232-33540]:IfStatement[33232-33540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33255-33540]:Block[33255-33540]"
    }, {
      "left" : "ownerVar = scope.getVar(ownerName);",
      "right" : "ownerVar = scope.getVar(ownerName);",
      "info" : "ExpressionStatement[33269-33304]:ExpressionStatement[33269-33304]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[33317-33417]:IfStatement[33317-33417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33339-33417]:Block[33339-33417]"
    }, {
      "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "info" : "ExpressionStatement[33355-33403]:ExpressionStatement[33355-33403]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[33430-33528]:IfStatement[33430-33528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33448-33528]:Block[33448-33528]"
    }, {
      "left" : "propName = name.substring(ownerName.length() + 1);",
      "right" : "propName = name.substring(ownerName.length() + 1);",
      "info" : "ExpressionStatement[33464-33514]:ExpressionStatement[33464-33514]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[33552-33591]:VariableDeclarationStatement[33552-33591]"
    }, {
      "left" : "if (ownerType != null && propName != null)",
      "right" : "if (ownerType != null && propName != null)",
      "info" : "IfStatement[33602-33752]:IfStatement[33602-33752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33645-33752]:Block[33645-33752]"
    }, {
      "left" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[33659-33740]:ExpressionStatement[33659-33740]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[33764-34156]:VariableDeclarationStatement[33764-34156]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[34206-34242]:VariableDeclarationStatement[34206-34242]"
    }, {
      "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n              ownerType.getOwnerFunction().hasInstanceType())",
      "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n              ownerType.getOwnerFunction().hasInstanceType())",
      "info" : "IfStatement[34253-35109]:IfStatement[34253-35109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34379-34538]:Block[34379-34538]"
    }, {
      "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "info" : "ExpressionStatement[34393-34486]:ExpressionStatement[34393-34486]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[34499-34526]:ExpressionStatement[34499-34526]"
    }, {
      "left" : "if (ownerNode != null && ownerNode.isThis())",
      "right" : "if (ownerNode != null && ownerNode.isThis())",
      "info" : "IfStatement[34544-35109]:IfStatement[34544-35109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34589-35109]:Block[34589-35109]"
    }, {
      "left" : "JSType injectedThisType = ownerNode.getJSType();",
      "right" : "JSType injectedThisType = ownerNode.getJSType();",
      "info" : "VariableDeclarationStatement[34850-34898]:VariableDeclarationStatement[34850-34898]"
    }, {
      "left" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
      "right" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
      "info" : "ExpressionStatement[34911-35057]:ExpressionStatement[34911-35057]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[35070-35097]:ExpressionStatement[35070-35097]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[35121-35201]:IfStatement[35121-35201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35147-35201]:Block[35147-35201]"
    }, {
      "left" : "builder.inferThisType(info);",
      "right" : "builder.inferThisType(info);",
      "info" : "ExpressionStatement[35161-35189]:ExpressionStatement[35161-35189]"
    }, {
      "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "info" : "ExpressionStatement[35213-35327]:ExpressionStatement[35213-35327]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[35371-35391]:ReturnStatement[35371-35391]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35490-35497]:Modifier[35490-35497]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[35498-35510]:SimpleType[35498-35510]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[35511-35533]:SimpleName[35511-35533]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[35543-35563]:SingleVariableDeclaration[35543-35563]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[35565-35580]:SingleVariableDeclaration[35565-35580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35582-36270]:Block[35582-36270]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[35676-35730]:VariableDeclarationStatement[35676-35730]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[35737-36244]:IfStatement[35737-36244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35788-35844]:Block[35788-35844]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[35798-35836]:ReturnStatement[35798-35836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35850-36244]:Block[35850-36244]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[35962-36236]:EnhancedForStatement[35962-36236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36045-36236]:Block[36045-36236]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[36057-36100]:ExpressionStatement[36057-36100]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[36111-36226]:IfStatement[36111-36226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36162-36226]:Block[36162-36226]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[36176-36214]:ReturnStatement[36176-36214]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36252-36264]:ReturnStatement[36252-36264]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36960-36967]:Modifier[36960-36967]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[36968-36976]:SimpleType[36968-36976]"
    }, {
      "left" : "createEnumTypeFromNodes",
      "right" : "createEnumTypeFromNodes",
      "info" : "SimpleName[36977-37000]:SimpleName[36977-37000]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[37001-37012]:SingleVariableDeclaration[37001-37012]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[37014-37025]:SingleVariableDeclaration[37014-37025]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[37035-37049]:SingleVariableDeclaration[37035-37049]"
    }, {
      "left" : "Node lValueNode",
      "right" : "Node lValueNode",
      "info" : "SingleVariableDeclaration[37051-37066]:SingleVariableDeclaration[37051-37066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37068-38596]:Block[37068-38596]"
    }, {
      "left" : "Preconditions.checkNotNull(info);",
      "right" : "Preconditions.checkNotNull(info);",
      "info" : "ExpressionStatement[37076-37109]:ExpressionStatement[37076-37109]"
    }, {
      "left" : "Preconditions.checkState(info.hasEnumParameterType());",
      "right" : "Preconditions.checkState(info.hasEnumParameterType());",
      "info" : "ExpressionStatement[37116-37170]:ExpressionStatement[37116-37170]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[37178-37203]:VariableDeclarationStatement[37178-37203]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[37210-37482]:IfStatement[37210-37482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37258-37482]:Block[37258-37482]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[37303-37353]:VariableDeclarationStatement[37303-37353]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[37362-37474]:IfStatement[37362-37474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37416-37474]:Block[37416-37474]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[37428-37464]:ExpressionStatement[37428-37464]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[37490-38443]:IfStatement[37490-38443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37512-38443]:Block[37512-38443]"
    }, {
      "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[37522-37614]:VariableDeclarationStatement[37522-37614]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "info" : "ExpressionStatement[37623-37690]:ExpressionStatement[37623-37690]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[37700-38435]:IfStatement[37700-38435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37744-38435]:Block[37744-38435]"
    }, {
      "left" : "Node key = rValue.getFirstChild();",
      "right" : "Node key = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[37791-37825]:VariableDeclarationStatement[37791-37825]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[37836-38425]:WhileStatement[37836-38425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37856-38425]:Block[37856-38425]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[37870-37916]:VariableDeclarationStatement[37870-37916]"
    }, {
      "left" : "if (keyName == null)",
      "right" : "if (keyName == null)",
      "info" : "IfStatement[37929-38380]:IfStatement[37929-38380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37950-38130]:Block[37950-38130]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[38022-38116]:ExpressionStatement[38022-38116]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[38136-38380]:IfStatement[38136-38380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38183-38307]:Block[38183-38307]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[38199-38293]:ExpressionStatement[38199-38293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38313-38380]:Block[38313-38380]"
    }, {
      "left" : "enumType.defineElement(keyName, key);",
      "right" : "enumType.defineElement(keyName, key);",
      "info" : "ExpressionStatement[38329-38366]:ExpressionStatement[38329-38366]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[38393-38413]:ExpressionStatement[38393-38413]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[38451-38566]:IfStatement[38451-38566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38489-38566]:Block[38489-38566]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[38499-38558]:ExpressionStatement[38499-38558]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[38574-38590]:ReturnStatement[38574-38590]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39006-39013]:Modifier[39006-39013]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39014-39018]:PrimitiveType[39014-39018]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[39019-39029]:SimpleName[39019-39029]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[39030-39039]:SingleVariableDeclaration[39030-39039]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[39041-39052]:SingleVariableDeclaration[39041-39052]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[39054-39065]:SingleVariableDeclaration[39054-39065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39067-39126]:Block[39067-39126]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[39075-39120]:ExpressionStatement[39075-39120]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39615-39619]:PrimitiveType[39615-39619]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[39620-39630]:SimpleName[39620-39630]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39631-39637]:SingleVariableDeclaration[39631-39637]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[39639-39650]:SingleVariableDeclaration[39639-39650]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[39652-39663]:SingleVariableDeclaration[39652-39663]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[39665-39681]:SingleVariableDeclaration[39665-39681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39683-40310]:Block[39683-40310]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[39691-39745]:ExpressionStatement[39691-39745]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[39890-40237]:IfStatement[39890-40237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39906-40084]:Block[39906-40084]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "right" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "info" : "ExpressionStatement[39916-40076]:ExpressionStatement[39916-40076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40090-40237]:Block[40090-40237]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "right" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "info" : "ExpressionStatement[40100-40229]:ExpressionStatement[40100-40229]"
    }, {
      "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "info" : "ExpressionStatement[40244-40304]:ExpressionStatement[40244-40304]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40746-40750]:PrimitiveType[40746-40750]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[40751-40761]:SimpleName[40751-40761]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40762-40768]:SingleVariableDeclaration[40762-40768]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[40770-40781]:SingleVariableDeclaration[40770-40781]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[40783-40802]:SingleVariableDeclaration[40783-40802]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[40812-40823]:SingleVariableDeclaration[40812-40823]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[40825-40841]:SingleVariableDeclaration[40825-40841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40843-46550]:Block[40843-46550]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[40851-40904]:ExpressionStatement[40851-40904]"
    }, {
      "left" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "right" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "info" : "VariableDeclarationStatement[40912-40965]:VariableDeclarationStatement[40912-40965]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "info" : "VariableDeclarationStatement[40972-41094]:VariableDeclarationStatement[40972-41094]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[41302-41333]:VariableDeclarationStatement[41302-41333]"
    }, {
      "left" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "right" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "info" : "IfStatement[41340-41721]:IfStatement[41340-41721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41423-41721]:Block[41423-41721]"
    }, {
      "left" : "Scope globalScope = scope.getGlobalScope();",
      "right" : "Scope globalScope = scope.getGlobalScope();",
      "info" : "VariableDeclarationStatement[41433-41476]:VariableDeclarationStatement[41433-41476]"
    }, {
      "left" : "if (!globalScope.isDeclared(variableName, false))",
      "right" : "if (!globalScope.isDeclared(variableName, false))",
      "info" : "IfStatement[41599-41713]:IfStatement[41599-41713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41649-41713]:Block[41649-41713]"
    }, {
      "left" : "scopeToDeclareIn = scope.getGlobalScope();",
      "right" : "scopeToDeclareIn = scope.getGlobalScope();",
      "info" : "ExpressionStatement[41661-41703]:ExpressionStatement[41661-41703]"
    }, {
      "left" : "boolean isExtern = n.isFromExterns();",
      "right" : "boolean isExtern = n.isFromExterns();",
      "info" : "VariableDeclarationStatement[41846-41883]:VariableDeclarationStatement[41846-41883]"
    }, {
      "left" : "Var newVar = null;",
      "right" : "Var newVar = null;",
      "info" : "VariableDeclarationStatement[41890-41908]:VariableDeclarationStatement[41890-41908]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(inputId);",
      "right" : "CompilerInput input = compiler.getInput(inputId);",
      "info" : "VariableDeclarationStatement[41952-42001]:VariableDeclarationStatement[41952-42001]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[42008-42814]:IfStatement[42008-42814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42062-42255]:Block[42062-42255]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[42072-42123]:VariableDeclarationStatement[42072-42123]"
    }, {
      "left" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "right" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[42132-42247]:ExpressionStatement[42132-42247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42261-42814]:Block[42261-42814]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[42271-42336]:IfStatement[42271-42336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42289-42336]:Block[42289-42336]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[42301-42326]:ExpressionStatement[42301-42326]"
    }, {
      "left" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[42346-42430]:ExpressionStatement[42346-42430]"
    }, {
      "left" : "if (type instanceof EnumType)",
      "right" : "if (type instanceof EnumType)",
      "info" : "IfStatement[42440-42806]:IfStatement[42440-42806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42470-42806]:Block[42470-42806]"
    }, {
      "left" : "Node initialValue = newVar.getInitialValue();",
      "right" : "Node initialValue = newVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[42482-42527]:VariableDeclarationStatement[42482-42527]"
    }, {
      "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "info" : "VariableDeclarationStatement[42538-42677]:VariableDeclarationStatement[42538-42677]"
    }, {
      "left" : "if (!isValidValue)",
      "right" : "if (!isValidValue)",
      "info" : "IfStatement[42688-42796]:IfStatement[42688-42796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42707-42796]:Block[42707-42796]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[42721-42784]:ExpressionStatement[42721-42784]"
    }, {
      "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "info" : "VariableDeclarationStatement[42899-42954]:VariableDeclarationStatement[42899-42954]"
    }, {
      "left" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "right" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "info" : "IfStatement[42961-45607]:IfStatement[42961-45607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43074-45607]:Block[43074-45607]"
    }, {
      "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "info" : "IfStatement[43084-45599]:IfStatement[43084-45599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43205-45599]:Block[43205-45599]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[43272-43336]:VariableDeclarationStatement[43272-43336]"
    }, {
      "left" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "right" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "info" : "VariableDeclarationStatement[43347-43411]:VariableDeclarationStatement[43347-43411]"
    }, {
      "left" : "prototypeSlot.setNode(n);",
      "right" : "prototypeSlot.setNode(n);",
      "info" : "ExpressionStatement[43872-43897]:ExpressionStatement[43872-43897]"
    }, {
      "left" : "String prototypeName = variableName + \".prototype\";",
      "right" : "String prototypeName = variableName + \".prototype\";",
      "info" : "VariableDeclarationStatement[43909-43960]:VariableDeclarationStatement[43909-43960]"
    }, {
      "left" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "right" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "info" : "VariableDeclarationStatement[44192-44250]:VariableDeclarationStatement[44192-44250]"
    }, {
      "left" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "right" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "info" : "IfStatement[44261-44396]:IfStatement[44261-44396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44329-44396]:Block[44329-44396]"
    }, {
      "left" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "right" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "info" : "ExpressionStatement[44343-44384]:ExpressionStatement[44343-44384]"
    }, {
      "left" : "scopeToDeclareIn.declare(prototypeName,\n              n, prototypeSlot.getType(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(prototypeName,\n              n, prototypeSlot.getType(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[44408-44702]:ExpressionStatement[44408-44702]"
    }, {
      "left" : "if (newVar.getInitialValue() == null &&\n              !isExtern &&\n              // We want to make sure that when we declare a new instance\n              // type (with @constructor) that there's actually a ctor for it.\n              // This doesn't apply to structural constructors\n              // (like function(new:Array). Checking the constructed\n              // type against the variable name is a sufficient check for\n              // this.\n              variableName.equals(\n                  fnType.getInstanceType().getReferenceName()))",
      "right" : "if (newVar.getInitialValue() == null &&\n              !isExtern &&\n              // We want to make sure that when we declare a new instance\n              // type (with @constructor) that there's actually a ctor for it.\n              // This doesn't apply to structural constructors\n              // (like function(new:Array). Checking the constructed\n              // type against the variable name is a sufficient check for\n              // this.\n              variableName.equals(\n                  fnType.getInstanceType().getReferenceName()))",
      "info" : "IfStatement[44816-45589]:IfStatement[44816-45589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45364-45589]:Block[45364-45589]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, n,\n                    fnType.isConstructor() ?\n                    CTOR_INITIALIZER : IFACE_INITIALIZER,\n                    variableName));",
      "right" : "compiler.report(\n                JSError.make(sourceName, n,\n                    fnType.isConstructor() ?\n                    CTOR_INITIALIZER : IFACE_INITIALIZER,\n                    variableName));",
      "info" : "ExpressionStatement[45378-45577]:ExpressionStatement[45378-45577]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[45615-46042]:IfStatement[45615-46042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45646-46042]:Block[45646-46042]"
    }, {
      "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[45656-45738]:VariableDeclarationStatement[45656-45738]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[45747-46034]:IfStatement[45747-46034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45761-45949]:Block[45761-45949]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "info" : "ExpressionStatement[45773-45939]:ExpressionStatement[45773-45939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45955-46034]:Block[45955-46034]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "info" : "ExpressionStatement[45967-46024]:ExpressionStatement[45967-46024]"
    }, {
      "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "info" : "IfStatement[46050-46544]:IfStatement[46050-46544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46195-46544]:Block[46195-46544]"
    }, {
      "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "info" : "VariableDeclarationStatement[46205-46310]:VariableDeclarationStatement[46205-46310]"
    }, {
      "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "info" : "ExpressionStatement[46319-46372]:ExpressionStatement[46319-46372]"
    }, {
      "left" : "globalThisCtor.getPrototype().clearCachedValues();",
      "right" : "globalThisCtor.getPrototype().clearCachedValues();",
      "info" : "ExpressionStatement[46381-46431]:ExpressionStatement[46381-46431]"
    }, {
      "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "info" : "ExpressionStatement[46440-46536]:ExpressionStatement[46440-46536]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46648-46655]:Modifier[46648-46655]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46656-46663]:PrimitiveType[46656-46663]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[46664-46690]:SimpleName[46664-46690]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46691-46697]:SingleVariableDeclaration[46691-46697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46699-46796]:Block[46699-46796]"
    }, {
      "left" : "Scope scope = getQnameRootScope(n);",
      "right" : "Scope scope = getQnameRootScope(n);",
      "info" : "VariableDeclarationStatement[46707-46742]:VariableDeclarationStatement[46707-46742]"
    }, {
      "left" : "return scope != null && scope.isGlobal();",
      "right" : "return scope != null && scope.isGlobal();",
      "info" : "ReturnStatement[46749-46790]:ReturnStatement[46749-46790]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46874-46881]:Modifier[46874-46881]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[46882-46887]:SimpleType[46882-46887]"
    }, {
      "left" : "getQnameRootScope",
      "right" : "getQnameRootScope",
      "info" : "SimpleName[46888-46905]:SimpleName[46888-46905]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46906-46912]:SingleVariableDeclaration[46906-46912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46914-47149]:Block[46914-47149]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[46922-46969]:VariableDeclarationStatement[46922-46969]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[46976-47124]:IfStatement[46976-47124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46995-47124]:Block[46995-47124]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[47005-47046]:VariableDeclarationStatement[47005-47046]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[47055-47116]:IfStatement[47055-47116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47072-47116]:Block[47072-47116]"
    }, {
      "left" : "return var.getScope();",
      "right" : "return var.getScope();",
      "info" : "ReturnStatement[47084-47106]:ReturnStatement[47084-47106]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47131-47143]:ReturnStatement[47131-47143]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47504-47511]:Modifier[47504-47511]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[47512-47518]:SimpleType[47512-47518]"
    }, {
      "left" : "getDeclaredType",
      "right" : "getDeclaredType",
      "info" : "SimpleName[47519-47534]:SimpleName[47519-47534]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[47535-47552]:SingleVariableDeclaration[47535-47552]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[47554-47568]:SingleVariableDeclaration[47554-47568]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[47578-47589]:SingleVariableDeclaration[47578-47589]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[47591-47612]:SingleVariableDeclaration[47591-47612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47614-50046]:Block[47614-50046]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[47622-49971]:IfStatement[47622-49971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47658-47737]:Block[47658-47737]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[47668-47729]:ReturnStatement[47668-47729]"
    }, {
      "left" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "right" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "info" : "IfStatement[47743-49971]:IfStatement[47743-49971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47905-47949]:Block[47905-47949]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[47915-47941]:ReturnStatement[47915-47941]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[47955-49971]:IfStatement[47955-49971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47973-49971]:Block[47973-49971]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[47983-49963]:IfStatement[47983-49963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48016-48263]:Block[48016-48263]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[48028-48253]:IfStatement[48028-48253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48072-48124]:Block[48072-48124]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[48086-48112]:ReturnStatement[48086-48112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48130-48253]:Block[48130-48253]"
    }, {
      "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[48144-48241]:ReturnStatement[48144-48241]"
    }, {
      "left" : "if (info.isConstructor() || info.isInterface())",
      "right" : "if (info.isConstructor() || info.isInterface())",
      "info" : "IfStatement[48269-49963]:IfStatement[48269-49963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48317-48438]:Block[48317-48438]"
    }, {
      "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[48329-48428]:ReturnStatement[48329-48428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48444-49963]:Block[48444-49963]"
    }, {
      "left" : "if (info.isConstant())",
      "right" : "if (info.isConstant())",
      "info" : "IfStatement[48524-49953]:IfStatement[48524-49953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48547-49953]:Block[48547-49953]"
    }, {
      "left" : "JSType knownType = null;",
      "right" : "JSType knownType = null;",
      "info" : "VariableDeclarationStatement[48561-48585]:VariableDeclarationStatement[48561-48585]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[48598-49941]:IfStatement[48598-49941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48618-49941]:Block[48618-49941]"
    }, {
      "left" : "JSDocInfo rValueInfo = rValue.getJSDocInfo();",
      "right" : "JSDocInfo rValueInfo = rValue.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[48634-48679]:VariableDeclarationStatement[48634-48679]"
    }, {
      "left" : "if (rValueInfo != null && rValueInfo.hasType())",
      "right" : "if (rValueInfo != null && rValueInfo.hasType())",
      "info" : "IfStatement[48694-49927]:IfStatement[48694-49927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48742-48914]:Block[48742-48914]"
    }, {
      "left" : "return rValueInfo.getType().evaluate(scope, typeRegistry);",
      "right" : "return rValueInfo.getType().evaluate(scope, typeRegistry);",
      "info" : "ReturnStatement[48840-48898]:ReturnStatement[48840-48898]"
    }, {
      "left" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "right" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "info" : "IfStatement[48920-49927]:IfStatement[48920-49927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49009-49197]:Block[49009-49197]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[49155-49181]:ReturnStatement[49155-49181]"
    }, {
      "left" : "if (rValue.isOr())",
      "right" : "if (rValue.isOr())",
      "info" : "IfStatement[49203-49927]:IfStatement[49203-49927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49222-49927]:Block[49222-49927]"
    }, {
      "left" : "Node firstClause = rValue.getFirstChild();",
      "right" : "Node firstClause = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[49434-49476]:VariableDeclarationStatement[49434-49476]"
    }, {
      "left" : "Node secondClause = firstClause.getNext();",
      "right" : "Node secondClause = firstClause.getNext();",
      "info" : "VariableDeclarationStatement[49493-49535]:VariableDeclarationStatement[49493-49535]"
    }, {
      "left" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "right" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "info" : "VariableDeclarationStatement[49552-49707]:VariableDeclarationStatement[49552-49707]"
    }, {
      "left" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "right" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "info" : "IfStatement[49724-49911]:IfStatement[49724-49911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49841-49911]:Block[49841-49911]"
    }, {
      "left" : "return secondClause.getJSType();",
      "right" : "return secondClause.getJSType();",
      "info" : "ReturnStatement[49861-49893]:ReturnStatement[49861-49893]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[49979-50040]:ReturnStatement[49979-50040]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50052-50059]:Modifier[50052-50059]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[50060-50072]:SimpleType[50060-50072]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[50073-50088]:SimpleName[50073-50088]"
    }, {
      "left" : "@Nullable Var v",
      "right" : "@Nullable Var v",
      "info" : "SingleVariableDeclaration[50089-50104]:SingleVariableDeclaration[50089-50104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50106-50263]:Block[50106-50263]"
    }, {
      "left" : "JSType t = v == null ? null : v.getType();",
      "right" : "JSType t = v == null ? null : v.getType();",
      "info" : "VariableDeclarationStatement[50114-50156]:VariableDeclarationStatement[50114-50156]"
    }, {
      "left" : "ObjectType o = t == null ? null : t.dereference();",
      "right" : "ObjectType o = t == null ? null : t.dereference();",
      "info" : "VariableDeclarationStatement[50163-50213]:VariableDeclarationStatement[50163-50213]"
    }, {
      "left" : "return JSType.toMaybeFunctionType(o);",
      "right" : "return JSType.toMaybeFunctionType(o);",
      "info" : "ReturnStatement[50220-50257]:ReturnStatement[50220-50257]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50356-50363]:Modifier[50356-50363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50364-50368]:PrimitiveType[50364-50368]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls",
      "right" : "checkForCallingConventionDefiningCalls",
      "info" : "SimpleName[50369-50407]:SimpleName[50369-50407]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50417-50423]:SingleVariableDeclaration[50417-50423]"
    }, {
      "left" : "Map<String, String> delegateCallingConventions",
      "right" : "Map<String, String> delegateCallingConventions",
      "info" : "SingleVariableDeclaration[50425-50471]:SingleVariableDeclaration[50425-50471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50473-50584]:Block[50473-50584]"
    }, {
      "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[50481-50578]:ExpressionStatement[50481-50578]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50787-50794]:Modifier[50787-50794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50795-50799]:PrimitiveType[50795-50799]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[50800-50826]:SimpleName[50800-50826]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[50836-50851]:SingleVariableDeclaration[50836-50851]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50853-50859]:SingleVariableDeclaration[50853-50859]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50861-50872]:SingleVariableDeclaration[50861-50872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50874-53715]:Block[50874-53715]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[50882-50972]:VariableDeclarationStatement[50882-50972]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[50979-52148]:IfStatement[50979-52148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51005-52148]:Block[51005-52148]"
    }, {
      "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[51015-51112]:VariableDeclarationStatement[51015-51112]"
    }, {
      "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[51121-51214]:VariableDeclarationStatement[51121-51214]"
    }, {
      "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "info" : "IfStatement[51223-52140]:IfStatement[51223-52140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51333-52140]:Block[51333-52140]"
    }, {
      "left" : "ObjectType superClass = superCtor.getInstanceType();",
      "right" : "ObjectType superClass = superCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[51345-51397]:VariableDeclarationStatement[51345-51397]"
    }, {
      "left" : "ObjectType subClass = subCtor.getInstanceType();",
      "right" : "ObjectType subClass = subCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[51408-51456]:VariableDeclarationStatement[51408-51456]"
    }, {
      "left" : "superCtor = superClass.getConstructor();",
      "right" : "superCtor = superClass.getConstructor();",
      "info" : "ExpressionStatement[51654-51694]:ExpressionStatement[51654-51694]"
    }, {
      "left" : "subCtor = subClass.getConstructor();",
      "right" : "subCtor = subClass.getConstructor();",
      "info" : "ExpressionStatement[51705-51741]:ExpressionStatement[51705-51741]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "info" : "IfStatement[51753-51951]:IfStatement[51753-51951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51871-51951]:Block[51871-51951]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[51885-51939]:ExpressionStatement[51885-51939]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[51963-52130]:IfStatement[51963-52130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52005-52130]:Block[52005-52130]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[52019-52118]:ExpressionStatement[52019-52118]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[52156-52248]:VariableDeclarationStatement[52156-52248]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[52255-52778]:IfStatement[52255-52778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52293-52778]:Block[52293-52778]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[52303-52404]:VariableDeclarationStatement[52303-52404]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[52413-52770]:IfStatement[52413-52770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52437-52770]:Block[52437-52770]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[52449-52505]:VariableDeclarationStatement[52449-52505]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[52517-52760]:IfStatement[52517-52760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52543-52760]:Block[52543-52760]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[52557-52643]:VariableDeclarationStatement[52557-52643]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[52656-52748]:ExpressionStatement[52656-52748]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[52786-52884]:VariableDeclarationStatement[52786-52884]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[52891-52991]:IfStatement[52891-52991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52925-52991]:Block[52925-52991]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[52935-52983]:ExpressionStatement[52935-52983]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
      "info" : "VariableDeclarationStatement[52999-53088]:VariableDeclarationStatement[52999-53088]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[53095-53709]:IfStatement[53095-53709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53126-53709]:Block[53126-53709]"
    }, {
      "left" : "if (objectLiteralCast.diagnosticType == null)",
      "right" : "if (objectLiteralCast.diagnosticType == null)",
      "info" : "IfStatement[53136-53701]:IfStatement[53136-53701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53182-53569]:Block[53182-53569]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[53194-53293]:VariableDeclarationStatement[53194-53293]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[53304-53559]:IfStatement[53304-53559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53355-53433]:Block[53355-53433]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[53369-53421]:ExpressionStatement[53369-53421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53439-53559]:Block[53439-53559]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[53453-53547]:ExpressionStatement[53453-53547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53575-53701]:Block[53575-53701]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
      "info" : "ExpressionStatement[53587-53691]:ExpressionStatement[53587-53691]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53799-53806]:Modifier[53799-53806]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53807-53811]:PrimitiveType[53807-53811]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[53812-53837]:SimpleName[53812-53837]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[53847-53888]:SingleVariableDeclaration[53847-53888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53890-55632]:Block[53890-55632]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[53898-54008]:VariableDeclarationStatement[53898-54008]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[54015-54131]:VariableDeclarationStatement[54015-54131]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[54138-54266]:VariableDeclarationStatement[54138-54266]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[54273-55626]:IfStatement[54273-55626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54383-55626]:Block[54383-55626]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[54393-54455]:VariableDeclarationStatement[54393-54455]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[54464-54532]:VariableDeclarationStatement[54464-54532]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[54541-54611]:VariableDeclarationStatement[54541-54611]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[54621-55618]:IfStatement[54621-55618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54717-55618]:Block[54717-55618]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[54729-54826]:VariableDeclarationStatement[54729-54826]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[54837-54928]:ExpressionStatement[54837-54928]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[54939-55117]:VariableDeclarationStatement[54939-55117]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[55129-55303]:VariableDeclarationStatement[55129-55303]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[55314-55368]:ExpressionStatement[55314-55368]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[55380-55539]:ExpressionStatement[55380-55539]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[55550-55608]:ExpressionStatement[55550-55608]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56061-56065]:PrimitiveType[56061-56065]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[56066-56091]:SimpleName[56066-56091]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[56092-56107]:SingleVariableDeclaration[56092-56107]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[56109-56123]:SingleVariableDeclaration[56109-56123]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[56133-56139]:SingleVariableDeclaration[56133-56139]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[56141-56152]:SingleVariableDeclaration[56141-56152]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[56154-56167]:SingleVariableDeclaration[56154-56167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56169-60740]:Block[56169-60740]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[56177-56212]:VariableDeclarationStatement[56177-56212]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[56219-56267]:VariableDeclarationStatement[56219-56267]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[56274-56310]:VariableDeclarationStatement[56274-56310]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[56317-56364]:VariableDeclarationStatement[56317-56364]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[56371-56435]:ExpressionStatement[56371-56435]"
    }, {
      "left" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[57092-57165]:VariableDeclarationStatement[57092-57165]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[57172-57301]:IfStatement[57172-57301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57215-57301]:Block[57215-57301]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[57260-57293]:ExpressionStatement[57260-57293]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[57544-58799]:IfStatement[57544-58799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57578-58799]:Block[57578-58799]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[57588-57619]:VariableDeclarationStatement[57588-57619]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[57628-58791]:IfStatement[57628-58791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57646-58791]:Block[57646-58791]"
    }, {
      "left" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "right" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "info" : "VariableDeclarationStatement[57975-58029]:VariableDeclarationStatement[57975-58029]"
    }, {
      "left" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "right" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "info" : "IfStatement[58040-58692]:IfStatement[58040-58692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58136-58270]:Block[58136-58270]"
    }, {
      "left" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "right" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "info" : "ExpressionStatement[58150-58258]:ExpressionStatement[58150-58258]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[58276-58692]:IfStatement[58276-58692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58304-58692]:Block[58304-58692]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58673-58680]:ReturnStatement[58673-58680]"
    }, {
      "left" : "if (qVar.getScope() == scope)",
      "right" : "if (qVar.getScope() == scope)",
      "info" : "IfStatement[58703-58781]:IfStatement[58703-58781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58733-58781]:Block[58733-58781]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[58747-58769]:ExpressionStatement[58747-58769]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[58807-59062]:IfStatement[58807-59062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58830-59062]:Block[58830-59062]"
    }, {
      "left" : "if (parent.isExprResult())",
      "right" : "if (parent.isExprResult())",
      "info" : "IfStatement[58840-59037]:IfStatement[58840-59037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58867-59037]:Block[58867-59037]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[58879-59027]:ExpressionStatement[58879-59027]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[59047-59054]:ReturnStatement[59047-59054]"
    }, {
      "left" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "right" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "info" : "VariableDeclarationStatement[59070-59161]:VariableDeclarationStatement[59070-59161]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[59168-60734]:IfStatement[59168-60734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59183-60039]:Block[59183-60039]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[59193-59241]:VariableDeclarationStatement[59193-59241]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[59250-59846]:IfStatement[59250-59846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59273-59846]:Block[59273-59846]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[59386-59453]:VariableDeclarationStatement[59386-59453]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[59464-59836]:IfStatement[59464-59836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59679-59836]:Block[59679-59836]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "info" : "ExpressionStatement[59767-59824]:ExpressionStatement[59767-59824]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[59988-60031]:ExpressionStatement[59988-60031]"
    }, {
      "left" : "if (rhsValue != null && rhsValue.isTrue())",
      "right" : "if (rhsValue != null && rhsValue.isTrue())",
      "info" : "IfStatement[60045-60734]:IfStatement[60045-60734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60088-60734]:Block[60088-60734]"
    }, {
      "left" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "right" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "info" : "VariableDeclarationStatement[60164-60254]:VariableDeclarationStatement[60164-60254]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[60263-60726]:IfStatement[60263-60726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60286-60726]:Block[60286-60726]"
    }, {
      "left" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[60298-60349]:VariableDeclarationStatement[60298-60349]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[60360-60427]:VariableDeclarationStatement[60360-60427]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[60438-60539]:VariableDeclarationStatement[60438-60539]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[60550-60716]:IfStatement[60550-60716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60633-60716]:Block[60633-60716]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "info" : "ExpressionStatement[60647-60704]:ExpressionStatement[60647-60704]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61773-61780]:Modifier[61773-61780]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61781-61788]:PrimitiveType[61781-61788]"
    }, {
      "left" : "isQualifiedNameInferred",
      "right" : "isQualifiedNameInferred",
      "info" : "SimpleName[61789-61812]:SimpleName[61789-61812]"
    }, {
      "left" : "String qName",
      "right" : "String qName",
      "info" : "SingleVariableDeclaration[61822-61834]:SingleVariableDeclaration[61822-61834]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[61836-61842]:SingleVariableDeclaration[61836-61842]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[61844-61858]:SingleVariableDeclaration[61844-61858]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[61868-61881]:SingleVariableDeclaration[61868-61881]"
    }, {
      "left" : "JSType valueType",
      "right" : "JSType valueType",
      "info" : "SingleVariableDeclaration[61883-61899]:SingleVariableDeclaration[61883-61899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61901-63296]:Block[61901-63296]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[61909-61962]:IfStatement[61909-61962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61932-61962]:Block[61932-61962]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61942-61954]:ReturnStatement[61942-61954]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[61970-61994]:VariableDeclarationStatement[61970-61994]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[62001-62278]:IfStatement[62001-62278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62019-62278]:Block[62019-62278]"
    }, {
      "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[62029-62270]:ExpressionStatement[62029-62270]"
    }, {
      "left" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "right" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "info" : "IfStatement[62286-63267]:IfStatement[62286-63267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62345-63267]:Block[62345-63267]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[62355-63259]:IfStatement[62355-63259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62373-62408]:Block[62373-62408]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62385-62398]:ReturnStatement[62385-62398]"
    }, {
      "left" : "if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName())",
      "right" : "if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName())",
      "info" : "IfStatement[62414-63259]:IfStatement[62414-63259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62494-63259]:Block[62494-63259]"
    }, {
      "left" : "for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent())",
      "right" : "for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent())",
      "info" : "ForStatement[62629-62882]:ForStatement[62629-62882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62772-62882]:Block[62772-62882]"
    }, {
      "left" : "if (NodeUtil.isControlStructure(current))",
      "right" : "if (NodeUtil.isControlStructure(current))",
      "info" : "IfStatement[62786-62870]:IfStatement[62786-62870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62828-62870]:Block[62828-62870]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62844-62856]:ReturnStatement[62844-62856]"
    }, {
      "left" : "AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[63014-63107]:VariableDeclarationStatement[63014-63107]"
    }, {
      "left" : "if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName))",
      "right" : "if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName))",
      "info" : "IfStatement[63118-63249]:IfStatement[63118-63249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63210-63249]:Block[63210-63249]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63224-63237]:ReturnStatement[63224-63237]"
    }, {
      "left" : "return inferred;",
      "right" : "return inferred;",
      "info" : "ReturnStatement[63274-63290]:ReturnStatement[63274-63290]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63522-63529]:Modifier[63522-63529]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[63530-63540]:SimpleType[63530-63540]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[63541-63554]:SimpleName[63541-63554]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[63555-63570]:SingleVariableDeclaration[63555-63570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63572-63850]:Block[63572-63850]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[63580-63618]:VariableDeclarationStatement[63580-63618]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[63625-63825]:IfStatement[63625-63825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63647-63825]:Block[63647-63825]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[63657-63698]:VariableDeclarationStatement[63657-63698]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[63707-63817]:ReturnStatement[63707-63817]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[63832-63844]:ReturnStatement[63832-63844]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63987-63991]:PrimitiveType[63987-63991]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[63992-64015]:SimpleName[63992-64015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64018-65169]:Block[64018-65169]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[64026-65163]:EnhancedForStatement[64026-65163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64072-65163]:Block[64072-65163]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[64082-64101]:VariableDeclarationStatement[64082-64101]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[64110-64138]:VariableDeclarationStatement[64110-64138]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[64147-64183]:VariableDeclarationStatement[64147-64183]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[64192-64239]:VariableDeclarationStatement[64192-64239]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[64248-64282]:VariableDeclarationStatement[64248-64282]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[64291-64324]:VariableDeclarationStatement[64291-64324]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[64334-64401]:IfStatement[64334-64401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64370-64401]:Block[64370-64401]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[64382-64391]:ContinueStatement[64382-64391]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[64518-64566]:VariableDeclarationStatement[64518-64566]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[64575-64647]:VariableDeclarationStatement[64575-64647]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[64656-64697]:ExpressionStatement[64656-64697]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[64707-65155]:IfStatement[64707-65155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64795-65021]:Block[64795-65021]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "info" : "ExpressionStatement[64937-65011]:ExpressionStatement[64937-65011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65027-65155]:Block[65027-65155]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[65039-65145]:ExpressionStatement[65039-65145]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65301-65308]:Modifier[65301-65308]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[65309-65314]:Modifier[65309-65314]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[65315-65320]:TYPE_DECLARATION_KIND[65315-65320]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[65321-65338]:SimpleName[65321-65338]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[65355-65387]:SimpleType[65355-65387]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[65438-65455]:SimpleName[65438-65455]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[65456-65475]:SingleVariableDeclaration[65456-65475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65477-65520]:Block[65477-65520]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[65487-65512]:ExpressionStatement[65487-65512]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65528-65537]:MarkerAnnotation[65528-65537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65544-65550]:Modifier[65544-65550]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65551-65555]:PrimitiveType[65551-65555]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[65556-65561]:SimpleName[65556-65561]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65562-65577]:SingleVariableDeclaration[65562-65577]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65579-65585]:SingleVariableDeclaration[65579-65585]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[65587-65598]:SingleVariableDeclaration[65587-65598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65600-66011]:Block[65600-66011]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult())",
      "info" : "IfStatement[65610-66003]:IfStatement[65610-66003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65632-66003]:Block[65632-66003]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[65644-65675]:VariableDeclarationStatement[65644-65675]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "info" : "SwitchStatement[65686-65993]:SwitchStatement[65686-65993]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[65725-65743]:SwitchCase[65725-65743]"
    }, {
      "left" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "right" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "info" : "ExpressionStatement[65758-65850]:ExpressionStatement[65758-65850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65865-65871]:BreakStatement[65865-65871]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[65884-65903]:SwitchCase[65884-65903]"
    }, {
      "left" : "maybeCollectMember(t, child, child, null);",
      "right" : "maybeCollectMember(t, child, child, null);",
      "info" : "ExpressionStatement[65918-65960]:ExpressionStatement[65918-65960]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65975-65981]:BreakStatement[65975-65981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66019-66026]:Modifier[66019-66026]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66027-66031]:PrimitiveType[66027-66031]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[66032-66050]:SimpleName[66032-66050]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[66051-66066]:SingleVariableDeclaration[66051-66066]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[66078-66089]:SingleVariableDeclaration[66078-66089]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[66091-66113]:SingleVariableDeclaration[66091-66113]"
    }, {
      "left" : "@Nullable Node value",
      "right" : "@Nullable Node value",
      "info" : "SingleVariableDeclaration[66115-66135]:SingleVariableDeclaration[66115-66135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66137-66918]:Block[66137-66918]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[66147-66197]:VariableDeclarationStatement[66147-66197]"
    }, {
      "left" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "right" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "info" : "IfStatement[66393-66523]:IfStatement[66393-66523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66494-66523]:Block[66494-66523]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[66506-66513]:ReturnStatement[66506-66513]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[66533-66576]:ExpressionStatement[66533-66576]"
    }, {
      "left" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "right" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "info" : "VariableDeclarationStatement[66585-66657]:VariableDeclarationStatement[66585-66657]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[66666-66700]:VariableDeclarationStatement[66666-66700]"
    }, {
      "left" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "right" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "info" : "IfStatement[66709-66910]:IfStatement[66709-66910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66779-66910]:Block[66779-66910]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "info" : "ExpressionStatement[66791-66900]:ExpressionStatement[66791-66900]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67023-67030]:Modifier[67023-67030]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67031-67037]:Modifier[67031-67037]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[67038-67043]:Modifier[67038-67043]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[67044-67049]:TYPE_DECLARATION_KIND[67044-67049]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[67050-67065]:SimpleName[67050-67065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67174-67181]:Modifier[67174-67181]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[67182-67197]:SimpleName[67182-67197]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[67198-67207]:SingleVariableDeclaration[67198-67207]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[67209-67225]:SingleVariableDeclaration[67209-67225]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[67227-67243]:SingleVariableDeclaration[67227-67243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67245-67342]:Block[67245-67342]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[67253-67270]:ExpressionStatement[67253-67270]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[67277-67302]:ExpressionStatement[67277-67302]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[67309-67336]:ExpressionStatement[67309-67336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67461-67468]:Modifier[67461-67468]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[67469-67474]:Modifier[67469-67474]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[67475-67480]:TYPE_DECLARATION_KIND[67475-67480]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[67481-67499]:SimpleName[67481-67499]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[67508-67528]:SimpleType[67508-67528]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67536-67543]:Modifier[67536-67543]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[67544-67562]:SimpleName[67544-67562]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[67563-67574]:SingleVariableDeclaration[67563-67574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67576-67603]:Block[67576-67603]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[67584-67597]:SuperConstructorInvocation[67584-67597]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[67853-67862]:MarkerAnnotation[67853-67862]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67863-67869]:Modifier[67863-67869]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67870-67874]:PrimitiveType[67870-67874]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[67875-67880]:SimpleName[67875-67880]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[67881-67896]:SingleVariableDeclaration[67881-67896]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[67898-67904]:SingleVariableDeclaration[67898-67904]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[67906-67917]:SingleVariableDeclaration[67906-67917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67919-68183]:Block[67919-68183]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[67927-67953]:ExpressionStatement[67927-67953]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[67961-68177]:SwitchStatement[67961-68177]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[67993-68008]:SwitchCase[67993-68008]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[68049-68152]:IfStatement[68049-68152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68070-68152]:Block[68070-68152]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[68084-68140]:ExpressionStatement[68084-68140]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68163-68169]:BreakStatement[68163-68169]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[68189-68198]:MarkerAnnotation[68189-68198]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68203-68207]:PrimitiveType[68203-68207]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[68208-68233]:SimpleName[68208-68233]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[68243-68258]:SingleVariableDeclaration[68243-68258]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[68260-68274]:SingleVariableDeclaration[68260-68274]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[68284-68290]:SingleVariableDeclaration[68284-68290]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[68292-68303]:SingleVariableDeclaration[68292-68303]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[68305-68318]:SingleVariableDeclaration[68305-68318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68320-68431]:Block[68320-68431]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[68328-68356]:ExpressionStatement[68328-68356]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[68363-68425]:ExpressionStatement[68363-68425]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68598-68605]:Modifier[68598-68605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68606-68610]:PrimitiveType[68606-68610]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[68611-68626]:SimpleName[68611-68626]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[68636-68651]:SingleVariableDeclaration[68636-68651]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[68653-68667]:SingleVariableDeclaration[68653-68667]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[68669-68683]:SingleVariableDeclaration[68669-68683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68685-69558]:Block[68685-69558]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[68693-68762]:IfStatement[68693-68762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68737-68762]:Block[68737-68762]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68747-68754]:ReturnStatement[68747-68754]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[68770-68816]:VariableDeclarationStatement[68770-68816]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[68823-68869]:IfStatement[68823-68869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68844-68869]:Block[68844-68869]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68854-68861]:ReturnStatement[68854-68861]"
    }, {
      "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[69044-69107]:ExpressionStatement[69044-69107]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[69115-69185]:VariableDeclarationStatement[69115-69185]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[69192-69350]:IfStatement[69192-69350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69214-69350]:Block[69214-69350]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[69224-69342]:ExpressionStatement[69224-69342]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[69358-69412]:ExpressionStatement[69358-69412]"
    }, {
      "left" : "if (candidate.isGetProp())",
      "right" : "if (candidate.isGetProp())",
      "info" : "IfStatement[69419-69552]:IfStatement[69419-69552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69446-69552]:Block[69446-69552]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[69456-69544]:ExpressionStatement[69456-69544]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69694-69701]:Modifier[69694-69701]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[69702-69707]:Modifier[69702-69707]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[69708-69713]:TYPE_DECLARATION_KIND[69708-69713]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[69714-69731]:SimpleName[69714-69731]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[69740-69760]:SimpleType[69740-69760]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69834-69841]:Modifier[69834-69841]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[69842-69859]:SimpleName[69842-69859]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[69860-69871]:SingleVariableDeclaration[69860-69871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69873-69900]:Block[69873-69900]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[69881-69894]:SuperConstructorInvocation[69881-69894]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69967-69971]:PrimitiveType[69967-69971]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[69972-69977]:SimpleName[69972-69977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69980-70711]:Block[69980-70711]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[69988-70048]:ExpressionStatement[69988-70048]"
    }, {
      "left" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[70056-70145]:VariableDeclarationStatement[70056-70145]"
    }, {
      "left" : "if (contents != null)",
      "right" : "if (contents != null)",
      "info" : "IfStatement[70152-70705]:IfStatement[70152-70705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70174-70705]:Block[70174-70705]"
    }, {
      "left" : "for (String varName : contents.getEscapedVarNames())",
      "right" : "for (String varName : contents.getEscapedVarNames())",
      "info" : "EnhancedForStatement[70184-70375]:EnhancedForStatement[70184-70375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70237-70375]:Block[70237-70375]"
    }, {
      "left" : "Var v = scope.getVar(varName);",
      "right" : "Var v = scope.getVar(varName);",
      "info" : "VariableDeclarationStatement[70249-70279]:VariableDeclarationStatement[70249-70279]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[70290-70338]:ExpressionStatement[70290-70338]"
    }, {
      "left" : "v.markEscaped();",
      "right" : "v.markEscaped();",
      "info" : "ExpressionStatement[70349-70365]:ExpressionStatement[70349-70365]"
    }, {
      "left" : "for (Multiset.Entry<String> entry :\n                 contents.getAssignedNameCounts().entrySet())",
      "right" : "for (Multiset.Entry<String> entry :\n                 contents.getAssignedNameCounts().entrySet())",
      "info" : "EnhancedForStatement[70385-70697]:EnhancedForStatement[70385-70697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70483-70697]:Block[70483-70697]"
    }, {
      "left" : "Var v = scope.getVar(entry.getElement());",
      "right" : "Var v = scope.getVar(entry.getElement());",
      "info" : "VariableDeclarationStatement[70495-70536]:VariableDeclarationStatement[70495-70536]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[70547-70595]:ExpressionStatement[70547-70595]"
    }, {
      "left" : "if (entry.getCount() == 1)",
      "right" : "if (entry.getCount() == 1)",
      "info" : "IfStatement[70606-70687]:IfStatement[70606-70687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70633-70687]:Block[70633-70687]"
    }, {
      "left" : "v.markAssignedExactlyOnce();",
      "right" : "v.markAssignedExactlyOnce();",
      "info" : "ExpressionStatement[70647-70675]:ExpressionStatement[70647-70675]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70975-70984]:MarkerAnnotation[70975-70984]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70985-70991]:Modifier[70985-70991]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70992-70996]:PrimitiveType[70992-70996]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[70997-71002]:SimpleName[70997-71002]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[71003-71018]:SingleVariableDeclaration[71003-71018]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[71020-71026]:SingleVariableDeclaration[71020-71026]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[71028-71039]:SingleVariableDeclaration[71028-71039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71041-71251]:Block[71041-71251]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[71049-71086]:IfStatement[71049-71086]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71079-71086]:ReturnStatement[71079-71086]"
    }, {
      "left" : "if (n.isParamList() && parent == scope.getRootNode())",
      "right" : "if (n.isParamList() && parent == scope.getRootNode())",
      "info" : "IfStatement[71094-71211]:IfStatement[71094-71211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71148-71211]:Block[71148-71211]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[71158-71187]:ExpressionStatement[71158-71187]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71196-71203]:ReturnStatement[71196-71203]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[71219-71245]:ExpressionStatement[71219-71245]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71319-71326]:Modifier[71319-71326]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71327-71331]:PrimitiveType[71327-71331]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[71332-71352]:SimpleName[71332-71352]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[71353-71364]:SingleVariableDeclaration[71353-71364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71366-72122]:Block[71366-72122]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[71410-71451]:VariableDeclarationStatement[71410-71451]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[71458-71497]:VariableDeclarationStatement[71458-71497]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[71504-72083]:IfStatement[71504-72083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71527-72083]:Block[71527-72083]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[71537-71576]:VariableDeclarationStatement[71537-71576]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[71585-72075]:IfStatement[71585-72075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71995-72075]:Block[71995-72075]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[72007-72065]:ExpressionStatement[72007-72065]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[72091-72116]:ExpressionStatement[72091-72116]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72191-72198]:Modifier[72191-72198]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72199-72203]:PrimitiveType[72199-72203]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[72204-72220]:SimpleName[72204-72220]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[72221-72238]:SingleVariableDeclaration[72221-72238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72240-73166]:Block[72240-73166]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[72248-72308]:VariableDeclarationStatement[72248-72308]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[72315-72351]:VariableDeclarationStatement[72315-72351]"
    }, {
      "left" : "boolean isFnTypeInferred = functionNode.getBooleanProp(\n          Node.INFERRED_FUNCTION);",
      "right" : "boolean isFnTypeInferred = functionNode.getBooleanProp(\n          Node.INFERRED_FUNCTION);",
      "info" : "VariableDeclarationStatement[72358-72448]:VariableDeclarationStatement[72358-72448]"
    }, {
      "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "info" : "VariableDeclarationStatement[72455-72546]:VariableDeclarationStatement[72455-72546]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[72553-73160]:IfStatement[72553-73160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72579-73160]:Block[72579-73160]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[72589-72645]:VariableDeclarationStatement[72589-72645]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[72654-73152]:IfStatement[72654-73152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72683-73152]:Block[72683-73152]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[72695-72749]:VariableDeclarationStatement[72695-72749]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[72760-73142]:EnhancedForStatement[72760-73142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72811-73142]:Block[72811-73142]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[72825-73130]:IfStatement[72825-73130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72853-73043]:Block[72853-73043]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), isFnTypeInferred);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), isFnTypeInferred);",
      "info" : "ExpressionStatement[72869-72972]:ExpressionStatement[72869-72972]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[72987-73029]:ExpressionStatement[72987-73029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73049-73130]:Block[73049-73130]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[73065-73116]:ExpressionStatement[73065-73116]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[73376-73383]:Modifier[73376-73383]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73384-73390]:Modifier[73384-73390]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[73391-73396]:TYPE_DECLARATION_KIND[73391-73396]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[73397-73423]:SimpleName[73397-73423]"
    }, {
      "left" : "AbstractScopedCallback",
      "right" : "AbstractScopedCallback",
      "info" : "SimpleType[73438-73460]:SimpleType[73438-73460]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[73472-73484]:SimpleType[73472-73484]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[73592-73618]:SimpleName[73592-73618]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[73628-73653]:SingleVariableDeclaration[73628-73653]"
    }, {
      "left" : "Map<Node, AstFunctionContents> outParam",
      "right" : "Map<Node, AstFunctionContents> outParam",
      "info" : "SingleVariableDeclaration[73655-73694]:SingleVariableDeclaration[73655-73694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73696-73763]:Block[73696-73763]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[73704-73729]:ExpressionStatement[73704-73729]"
    }, {
      "left" : "this.data = outParam;",
      "right" : "this.data = outParam;",
      "info" : "ExpressionStatement[73736-73757]:ExpressionStatement[73736-73757]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73769-73778]:MarkerAnnotation[73769-73778]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73779-73785]:Modifier[73779-73785]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73786-73790]:PrimitiveType[73786-73790]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[73791-73798]:SimpleName[73791-73798]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[73799-73811]:SingleVariableDeclaration[73799-73811]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[73813-73822]:SingleVariableDeclaration[73813-73822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73824-74036]:Block[73824-74036]"
    }, {
      "left" : "if (externs == null)",
      "right" : "if (externs == null)",
      "info" : "IfStatement[73832-74030]:IfStatement[73832-74030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73853-73916]:Block[73853-73916]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[73863-73908]:ExpressionStatement[73863-73908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73922-74030]:Block[73922-74030]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "info" : "ExpressionStatement[73932-74022]:ExpressionStatement[73932-74022]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[74042-74051]:MarkerAnnotation[74042-74051]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74052-74058]:Modifier[74052-74058]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[74059-74063]:PrimitiveType[74059-74063]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[74064-74074]:SimpleName[74064-74074]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[74075-74090]:SingleVariableDeclaration[74075-74090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74092-74223]:Block[74092-74223]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[74100-74217]:IfStatement[74100-74217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74124-74217]:Block[74124-74217]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[74134-74160]:VariableDeclarationStatement[74134-74160]"
    }, {
      "left" : "data.put(n, new AstFunctionContents(n));",
      "right" : "data.put(n, new AstFunctionContents(n));",
      "info" : "ExpressionStatement[74169-74209]:ExpressionStatement[74169-74209]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[74229-74238]:MarkerAnnotation[74229-74238]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74239-74245]:Modifier[74239-74245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[74246-74250]:PrimitiveType[74246-74250]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[74251-74256]:SimpleName[74251-74256]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[74257-74272]:SingleVariableDeclaration[74257-74272]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[74274-74280]:SingleVariableDeclaration[74274-74280]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[74282-74293]:SingleVariableDeclaration[74282-74293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74295-76156]:Block[74295-76156]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[74303-74351]:IfStatement[74303-74351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74326-74351]:Block[74326-74351]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74336-74343]:ReturnStatement[74336-74343]"
    }, {
      "left" : "if (n.isReturn() && n.getFirstChild() != null)",
      "right" : "if (n.isReturn() && n.getFirstChild() != null)",
      "info" : "IfStatement[74359-74474]:IfStatement[74359-74474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74406-74474]:Block[74406-74474]"
    }, {
      "left" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "right" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "info" : "ExpressionStatement[74416-74466]:ExpressionStatement[74416-74466]"
    }, {
      "left" : "if (t.getScopeDepth() <= 2)",
      "right" : "if (t.getScopeDepth() <= 1)",
      "info" : "IfStatement[74482-74926]:IfStatement[74482-74926]"
    }, {
      "left" : "2",
      "right" : "1",
      "info" : "NumberLiteral[74507-74508]:NumberLiteral[74507-74508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74510-74926]:Block[74510-74926]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74911-74918]:ReturnStatement[74911-74918]"
    }, {
      "left" : "if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n))",
      "right" : "if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n))",
      "info" : "IfStatement[74934-76150]:IfStatement[74934-76150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75164-75638]:Block[75164-75638]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[75174-75202]:VariableDeclarationStatement[75174-75202]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[75211-75238]:VariableDeclarationStatement[75211-75238]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[75247-75276]:VariableDeclarationStatement[75247-75276]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[75285-75630]:IfStatement[75285-75630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75302-75630]:Block[75302-75630]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[75314-75348]:VariableDeclarationStatement[75314-75348]"
    }, {
      "left" : "if (ownerScope.isLocal())",
      "right" : "if (ownerScope.isLocal())",
      "info" : "IfStatement[75359-75471]:IfStatement[75359-75471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75385-75471]:Block[75385-75471]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordAssignedName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordAssignedName(name);",
      "info" : "ExpressionStatement[75399-75459]:ExpressionStatement[75399-75459]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[75483-75620]:IfStatement[75483-75620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75532-75620]:Block[75532-75620]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "info" : "ExpressionStatement[75546-75608]:ExpressionStatement[75546-75608]"
    }, {
      "left" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
      "right" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
      "info" : "IfStatement[75644-76150]:IfStatement[75644-76150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75728-76150]:Block[75728-76150]"
    }, {
      "left" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
      "right" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
      "info" : "VariableDeclarationStatement[75738-75799]:VariableDeclarationStatement[75738-75799]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[75808-75835]:VariableDeclarationStatement[75808-75835]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[75844-75873]:VariableDeclarationStatement[75844-75873]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[75882-76142]:IfStatement[75882-76142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75899-76142]:Block[75899-76142]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[75911-75945]:VariableDeclarationStatement[75911-75945]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[75956-76132]:IfStatement[75956-76132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76005-76132]:Block[76005-76132]"
    }, {
      "left" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
      "right" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
      "info" : "ExpressionStatement[76019-76120]:ExpressionStatement[76019-76120]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76164-76171]:Modifier[76164-76171]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleType[76172-76191]:SimpleType[76172-76191]"
    }, {
      "left" : "getFunctionAnalysisResults",
      "right" : "getFunctionAnalysisResults",
      "info" : "SimpleName[76192-76218]:SimpleName[76192-76218]"
    }, {
      "left" : "@Nullable Node n",
      "right" : "@Nullable Node n",
      "info" : "SingleVariableDeclaration[76219-76235]:SingleVariableDeclaration[76219-76235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76237-76451]:Block[76237-76451]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[76243-76284]:IfStatement[76243-76284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76258-76284]:Block[76258-76284]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[76266-76278]:ReturnStatement[76266-76278]"
    }, {
      "left" : "return functionAnalysisResults.get(n);",
      "right" : "return functionAnalysisResults.get(n);",
      "info" : "ReturnStatement[76409-76447]:ReturnStatement[76409-76447]"
    } ]
  },
  "interFileMappings" : { }
}