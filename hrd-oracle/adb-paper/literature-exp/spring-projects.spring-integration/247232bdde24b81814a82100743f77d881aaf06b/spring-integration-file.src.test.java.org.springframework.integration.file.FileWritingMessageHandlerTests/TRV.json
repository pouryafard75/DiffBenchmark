{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final String DEFAULT_ENCODING = \"UTF-8\";",
      "right" : "static final String DEFAULT_ENCODING = \"UTF-8\";",
      "info" : "FieldDeclaration[2143-2190]:FieldDeclaration[2228-2275]"
    }, {
      "left" : "static final String SAMPLE_CONTENT = \"HelloWorld\\näöüß\";",
      "right" : "static final String SAMPLE_CONTENT = \"HelloWorld\\näöüß\";",
      "info" : "FieldDeclaration[2193-2249]:FieldDeclaration[2278-2334]"
    }, {
      "left" : "private File sourceFile;",
      "right" : "private File sourceFile;",
      "info" : "FieldDeclaration[2253-2277]:FieldDeclaration[2338-2362]"
    }, {
      "left" : "@Rule\n\tpublic TemporaryFolder temp = new TemporaryFolder() {\n\t\t@Override\n\t\tpublic void create() throws IOException {\n\t\t\tsuper.create();\n\t\t\toutputDirectory = temp.newFolder(\"outputDirectory\");\n\t\t\thandler = new FileWritingMessageHandler(outputDirectory);\n\t\t\thandler.setBeanFactory(mock(BeanFactory.class));\n\t\t\thandler.afterPropertiesSet();\n\t\t\tsourceFile = temp.newFile(\"sourceFile\");\n\t\t\tFileCopyUtils.copy(SAMPLE_CONTENT.getBytes(DEFAULT_ENCODING),\n\t\t\t\tnew FileOutputStream(sourceFile, false));\n\t\t}\n\t};",
      "right" : "@Rule\n\tpublic TemporaryFolder temp = new TemporaryFolder() {\n\t\t@Override\n\t\tpublic void create() throws IOException {\n\t\t\tsuper.create();\n\t\t\toutputDirectory = temp.newFolder(\"outputDirectory\");\n\t\t\thandler = new FileWritingMessageHandler(outputDirectory);\n\t\t\thandler.setBeanFactory(mock(BeanFactory.class));\n\t\t\thandler.afterPropertiesSet();\n\t\t\tsourceFile = temp.newFile(\"sourceFile\");\n\t\t\tFileCopyUtils.copy(SAMPLE_CONTENT.getBytes(DEFAULT_ENCODING),\n\t\t\t\tnew FileOutputStream(sourceFile, false));\n\t\t}\n\t};",
      "info" : "FieldDeclaration[2280-2780]:FieldDeclaration[2365-2865]"
    }, {
      "left" : "public void create() throws IOException",
      "right" : "public void create() throws IOException",
      "info" : "MethodDeclaration[2343-2776]:MethodDeclaration[2428-2861]"
    }, {
      "left" : "private File outputDirectory;",
      "right" : "private File outputDirectory;",
      "info" : "FieldDeclaration[2783-2812]:FieldDeclaration[2868-2897]"
    }, {
      "left" : "private FileWritingMessageHandler handler;",
      "right" : "private FileWritingMessageHandler handler;",
      "info" : "FieldDeclaration[2815-2857]:FieldDeclaration[2900-2942]"
    }, {
      "left" : "public void setup() throws Exception",
      "right" : "public void setup() throws Exception",
      "info" : "MethodDeclaration[2860-2971]:MethodDeclaration[2945-3056]"
    }, {
      "left" : "public void unsupportedType() throws Exception",
      "right" : "public void unsupportedType() throws Exception",
      "info" : "MethodDeclaration[2974-3192]:MethodDeclaration[3059-3277]"
    }, {
      "left" : "public void supportedType() throws Exception",
      "right" : "public void supportedType() throws Exception",
      "info" : "MethodDeclaration[3195-3421]:MethodDeclaration[3280-3506]"
    }, {
      "left" : "public void stringPayloadCopiedToNewFile() throws Exception",
      "right" : "public void stringPayloadCopiedToNewFile() throws Exception",
      "info" : "MethodDeclaration[3424-3804]:MethodDeclaration[3509-3889]"
    }, {
      "left" : "public void stringPayloadCopiedToNewFileWithNewLines() throws Exception",
      "right" : "public void stringPayloadCopiedToNewFileWithNewLines() throws Exception",
      "info" : "MethodDeclaration[3807-4308]:MethodDeclaration[3892-4393]"
    }, {
      "left" : "public void byteArrayPayloadCopiedToNewFile() throws Exception",
      "right" : "public void byteArrayPayloadCopiedToNewFile() throws Exception",
      "info" : "MethodDeclaration[4311-4686]:MethodDeclaration[4396-4771]"
    }, {
      "left" : "public void byteArrayPayloadCopiedToNewFileWithNewLines() throws Exception",
      "right" : "public void byteArrayPayloadCopiedToNewFileWithNewLines() throws Exception",
      "info" : "MethodDeclaration[4689-5185]:MethodDeclaration[4774-5270]"
    }, {
      "left" : "public void filePayloadCopiedToNewFile() throws Exception",
      "right" : "public void filePayloadCopiedToNewFile() throws Exception",
      "info" : "MethodDeclaration[5188-5522]:MethodDeclaration[5273-5607]"
    }, {
      "left" : "public void filePayloadCopiedToNewFileWithNewLines() throws Exception",
      "right" : "public void filePayloadCopiedToNewFileWithNewLines() throws Exception",
      "info" : "MethodDeclaration[5525-5952]:MethodDeclaration[5610-6037]"
    }, {
      "left" : "// INT-3289 ignored because it won't fail on all OS\n\tpublic void testCreateDirFail()",
      "right" : "// INT-3289 ignored because it won't fail on all OS\n\tpublic void testCreateDirFail()",
      "info" : "MethodDeclaration[5955-6411]:MethodDeclaration[6909-7365]"
    }, {
      "left" : "public void deleteFilesFalseByDefault() throws Exception",
      "right" : "public void deleteFilesFalseByDefault() throws Exception",
      "info" : "MethodDeclaration[6414-6782]:MethodDeclaration[7368-7736]"
    }, {
      "left" : "public void deleteFilesTrueWithFilePayload() throws Exception",
      "right" : "public void deleteFilesTrueWithFilePayload() throws Exception",
      "info" : "MethodDeclaration[6785-7197]:MethodDeclaration[7739-8151]"
    }, {
      "left" : "public void deleteSourceFileWithStringPayloadAndFileInstanceHeader() throws Exception",
      "right" : "public void deleteSourceFileWithStringPayloadAndFileInstanceHeader() throws Exception",
      "info" : "MethodDeclaration[7200-7774]:MethodDeclaration[8154-8728]"
    }, {
      "left" : "public void deleteSourceFileWithStringPayloadAndFilePathHeader() throws Exception",
      "right" : "public void deleteSourceFileWithStringPayloadAndFilePathHeader() throws Exception",
      "info" : "MethodDeclaration[7777-8365]:MethodDeclaration[8731-9319]"
    }, {
      "left" : "public void deleteSourceFileWithByteArrayPayloadAndFileInstanceHeader() throws Exception",
      "right" : "public void deleteSourceFileWithByteArrayPayloadAndFileInstanceHeader() throws Exception",
      "info" : "MethodDeclaration[8368-8977]:MethodDeclaration[9322-9931]"
    }, {
      "left" : "public void deleteSourceFileWithByteArrayPayloadAndFilePathHeader() throws Exception",
      "right" : "public void deleteSourceFileWithByteArrayPayloadAndFilePathHeader() throws Exception",
      "info" : "MethodDeclaration[8980-9603]:MethodDeclaration[9934-10557]"
    }, {
      "left" : "public void customFileNameGenerator() throws Exception",
      "right" : "public void customFileNameGenerator() throws Exception",
      "info" : "MethodDeclaration[9606-10162]:MethodDeclaration[11822-12378]"
    }, {
      "left" : "public String generateFileName(Message<?> message)",
      "right" : "public String generateFileName(Message<?> message)",
      "info" : "MethodDeclaration[9854-9948]:MethodDeclaration[12070-12164]"
    }, {
      "left" : "public void existingFileIgnored() throws Exception",
      "right" : "public void existingFileIgnored() throws Exception",
      "info" : "MethodDeclaration[10165-10761]:MethodDeclaration[12381-12977]"
    }, {
      "left" : "public void existingWritingFileIgnored() throws Exception",
      "right" : "public void existingWritingFileIgnored() throws Exception",
      "info" : "MethodDeclaration[10764-11508]:MethodDeclaration[12980-13724]"
    }, {
      "left" : "public void existingWritingFileNotIgnoredIfEmptySuffix() throws Exception",
      "right" : "public void existingWritingFileNotIgnoredIfEmptySuffix() throws Exception",
      "info" : "MethodDeclaration[11511-12343]:MethodDeclaration[13727-14559]"
    }, {
      "left" : "void assertFileContentIsMatching(Message<?> result) throws IOException, UnsupportedEncodingException",
      "right" : "void assertFileContentIsMatching(Message<?> result) throws IOException, UnsupportedEncodingException",
      "info" : "MethodDeclaration[12346-12498]:MethodDeclaration[14562-14714]"
    }, {
      "left" : "void assertFileContentIs(Message<?> result, String expected) throws IOException, UnsupportedEncodingException",
      "right" : "void assertFileContentIs(Message<?> result, String expected) throws IOException, UnsupportedEncodingException",
      "info" : "MethodDeclaration[12501-12809]:MethodDeclaration[14717-15025]"
    }, {
      "left" : "void assertFileContentIs(File destFile, String expected) throws IOException, UnsupportedEncodingException",
      "right" : "void assertFileContentIs(File destFile, String expected) throws IOException, UnsupportedEncodingException",
      "info" : "MethodDeclaration[12812-13147]:MethodDeclaration[15028-15363]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2343-2352]:MarkerAnnotation[2428-2437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2355-2361]:Modifier[2440-2446]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2362-2366]:PrimitiveType[2447-2451]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[2367-2373]:SimpleName[2452-2458]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2383-2394]:SimpleType[2468-2479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2395-2776]:Block[2480-2861]"
    }, {
      "left" : "super.create();",
      "right" : "super.create();",
      "info" : "ExpressionStatement[2400-2415]:ExpressionStatement[2485-2500]"
    }, {
      "left" : "outputDirectory = temp.newFolder(\"outputDirectory\");",
      "right" : "outputDirectory = temp.newFolder(\"outputDirectory\");",
      "info" : "ExpressionStatement[2419-2471]:ExpressionStatement[2504-2556]"
    }, {
      "left" : "handler = new FileWritingMessageHandler(outputDirectory);",
      "right" : "handler = new FileWritingMessageHandler(outputDirectory);",
      "info" : "ExpressionStatement[2475-2532]:ExpressionStatement[2560-2617]"
    }, {
      "left" : "handler.setBeanFactory(mock(BeanFactory.class));",
      "right" : "handler.setBeanFactory(mock(BeanFactory.class));",
      "info" : "ExpressionStatement[2536-2584]:ExpressionStatement[2621-2669]"
    }, {
      "left" : "handler.afterPropertiesSet();",
      "right" : "handler.afterPropertiesSet();",
      "info" : "ExpressionStatement[2588-2617]:ExpressionStatement[2673-2702]"
    }, {
      "left" : "sourceFile = temp.newFile(\"sourceFile\");",
      "right" : "sourceFile = temp.newFile(\"sourceFile\");",
      "info" : "ExpressionStatement[2621-2661]:ExpressionStatement[2706-2746]"
    }, {
      "left" : "FileCopyUtils.copy(SAMPLE_CONTENT.getBytes(DEFAULT_ENCODING),\n\t\t\t\tnew FileOutputStream(sourceFile, false));",
      "right" : "FileCopyUtils.copy(SAMPLE_CONTENT.getBytes(DEFAULT_ENCODING),\n\t\t\t\tnew FileOutputStream(sourceFile, false));",
      "info" : "ExpressionStatement[2665-2772]:ExpressionStatement[2750-2857]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[2860-2867]:MarkerAnnotation[2945-2952]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2869-2875]:Modifier[2954-2960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2876-2880]:PrimitiveType[2961-2965]"
    }, {
      "left" : "setup",
      "right" : "setup",
      "info" : "SimpleName[2881-2886]:SimpleName[2966-2971]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2896-2905]:SimpleType[2981-2990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2906-2971]:Block[2991-3056]"
    }, {
      "left" : "@Test(expected = MessageHandlingException.class)",
      "right" : "@Test(expected = MessageHandlingException.class)",
      "info" : "NormalAnnotation[2974-3022]:NormalAnnotation[3059-3107]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3024-3030]:Modifier[3109-3115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3031-3035]:PrimitiveType[3116-3120]"
    }, {
      "left" : "unsupportedType",
      "right" : "unsupportedType",
      "info" : "SimpleName[3036-3051]:SimpleName[3121-3136]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3061-3070]:SimpleType[3146-3155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3071-3192]:Block[3156-3277]"
    }, {
      "left" : "handler.handleMessage(new GenericMessage<Integer>(99));",
      "right" : "handler.handleMessage(new GenericMessage<Integer>(99));",
      "info" : "ExpressionStatement[3075-3130]:ExpressionStatement[3160-3215]"
    }, {
      "left" : "assertThat(outputDirectory.listFiles()[0], nullValue());",
      "right" : "assertThat(outputDirectory.listFiles()[0], nullValue());",
      "info" : "ExpressionStatement[3133-3189]:ExpressionStatement[3218-3274]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3195-3200]:MarkerAnnotation[3280-3285]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3202-3208]:Modifier[3287-3293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3209-3213]:PrimitiveType[3294-3298]"
    }, {
      "left" : "supportedType",
      "right" : "supportedType",
      "info" : "SimpleName[3214-3227]:SimpleName[3299-3312]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3237-3246]:SimpleType[3322-3331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3247-3421]:Block[3332-3506]"
    }, {
      "left" : "handler.setOutputChannel(new NullChannel());",
      "right" : "handler.setOutputChannel(new NullChannel());",
      "info" : "ExpressionStatement[3251-3295]:ExpressionStatement[3336-3380]"
    }, {
      "left" : "handler.handleMessage(new GenericMessage<String>(\"test\"));",
      "right" : "handler.handleMessage(new GenericMessage<String>(\"test\"));",
      "info" : "ExpressionStatement[3298-3356]:ExpressionStatement[3383-3441]"
    }, {
      "left" : "assertThat(outputDirectory.listFiles()[0], notNullValue());",
      "right" : "assertThat(outputDirectory.listFiles()[0], notNullValue());",
      "info" : "ExpressionStatement[3359-3418]:ExpressionStatement[3444-3503]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3424-3429]:MarkerAnnotation[3509-3514]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3431-3437]:Modifier[3516-3522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3438-3442]:PrimitiveType[3523-3527]"
    }, {
      "left" : "stringPayloadCopiedToNewFile",
      "right" : "stringPayloadCopiedToNewFile",
      "info" : "SimpleName[3443-3471]:SimpleName[3528-3556]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3481-3490]:SimpleType[3566-3575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3491-3804]:Block[3576-3889]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "info" : "VariableDeclarationStatement[3495-3567]:VariableDeclarationStatement[3580-3652]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[3570-3611]:VariableDeclarationStatement[3655-3696]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[3614-3651]:ExpressionStatement[3699-3736]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[3654-3687]:ExpressionStatement[3739-3772]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[3690-3721]:ExpressionStatement[3775-3806]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[3724-3762]:VariableDeclarationStatement[3809-3847]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[3765-3801]:ExpressionStatement[3850-3886]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3807-3812]:MarkerAnnotation[3892-3897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3814-3820]:Modifier[3899-3905]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3821-3825]:PrimitiveType[3906-3910]"
    }, {
      "left" : "stringPayloadCopiedToNewFileWithNewLines",
      "right" : "stringPayloadCopiedToNewFileWithNewLines",
      "info" : "SimpleName[3826-3866]:SimpleName[3911-3951]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3876-3885]:SimpleType[3961-3970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3886-4308]:Block[3971-4393]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "info" : "VariableDeclarationStatement[3890-3962]:VariableDeclarationStatement[3975-4047]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[3965-4006]:VariableDeclarationStatement[4050-4091]"
    }, {
      "left" : "String newLine = System.getProperty(\"line.separator\");",
      "right" : "String newLine = System.getProperty(\"line.separator\");",
      "info" : "VariableDeclarationStatement[4009-4063]:VariableDeclarationStatement[4094-4148]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[4066-4103]:ExpressionStatement[4151-4188]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[4106-4139]:ExpressionStatement[4191-4224]"
    }, {
      "left" : "handler.setAppendNewLine(true);",
      "right" : "handler.setAppendNewLine(true);",
      "info" : "ExpressionStatement[4142-4173]:ExpressionStatement[4227-4258]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[4176-4207]:ExpressionStatement[4261-4292]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[4210-4248]:VariableDeclarationStatement[4295-4333]"
    }, {
      "left" : "assertFileContentIs(result, SAMPLE_CONTENT + newLine);",
      "right" : "assertFileContentIs(result, SAMPLE_CONTENT + newLine);",
      "info" : "ExpressionStatement[4251-4305]:ExpressionStatement[4336-4390]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4311-4316]:MarkerAnnotation[4396-4401]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4318-4324]:Modifier[4403-4409]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4325-4329]:PrimitiveType[4410-4414]"
    }, {
      "left" : "byteArrayPayloadCopiedToNewFile",
      "right" : "byteArrayPayloadCopiedToNewFile",
      "info" : "SimpleName[4330-4361]:SimpleName[4415-4446]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[4371-4380]:SimpleType[4456-4465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4381-4686]:Block[4466-4771]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING)).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING)).build();",
      "info" : "VariableDeclarationStatement[4385-4489]:VariableDeclarationStatement[4470-4574]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[4492-4533]:VariableDeclarationStatement[4577-4618]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[4536-4569]:ExpressionStatement[4621-4654]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[4572-4603]:ExpressionStatement[4657-4688]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[4606-4644]:VariableDeclarationStatement[4691-4729]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[4647-4683]:ExpressionStatement[4732-4768]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4689-4694]:MarkerAnnotation[4774-4779]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4696-4702]:Modifier[4781-4787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4703-4707]:PrimitiveType[4788-4792]"
    }, {
      "left" : "byteArrayPayloadCopiedToNewFileWithNewLines",
      "right" : "byteArrayPayloadCopiedToNewFileWithNewLines",
      "info" : "SimpleName[4708-4751]:SimpleName[4793-4836]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[4761-4770]:SimpleType[4846-4855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4771-5185]:Block[4856-5270]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING)).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING)).build();",
      "info" : "VariableDeclarationStatement[4775-4879]:VariableDeclarationStatement[4860-4964]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[4882-4923]:VariableDeclarationStatement[4967-5008]"
    }, {
      "left" : "String newLine = System.getProperty(\"line.separator\");",
      "right" : "String newLine = System.getProperty(\"line.separator\");",
      "info" : "VariableDeclarationStatement[4926-4980]:VariableDeclarationStatement[5011-5065]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[4983-5016]:ExpressionStatement[5068-5101]"
    }, {
      "left" : "handler.setAppendNewLine(true);",
      "right" : "handler.setAppendNewLine(true);",
      "info" : "ExpressionStatement[5019-5050]:ExpressionStatement[5104-5135]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[5053-5084]:ExpressionStatement[5138-5169]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[5087-5125]:VariableDeclarationStatement[5172-5210]"
    }, {
      "left" : "assertFileContentIs(result, SAMPLE_CONTENT + newLine);",
      "right" : "assertFileContentIs(result, SAMPLE_CONTENT + newLine);",
      "info" : "ExpressionStatement[5128-5182]:ExpressionStatement[5213-5267]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5188-5193]:MarkerAnnotation[5273-5278]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5195-5201]:Modifier[5280-5286]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5202-5206]:PrimitiveType[5287-5291]"
    }, {
      "left" : "filePayloadCopiedToNewFile",
      "right" : "filePayloadCopiedToNewFile",
      "info" : "SimpleName[5207-5233]:SimpleName[5292-5318]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[5243-5252]:SimpleType[5328-5337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5253-5522]:Block[5338-5607]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "info" : "VariableDeclarationStatement[5257-5325]:VariableDeclarationStatement[5342-5410]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[5328-5369]:VariableDeclarationStatement[5413-5454]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[5372-5405]:ExpressionStatement[5457-5490]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[5408-5439]:ExpressionStatement[5493-5524]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[5442-5480]:VariableDeclarationStatement[5527-5565]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[5483-5519]:ExpressionStatement[5568-5604]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5525-5530]:MarkerAnnotation[5610-5615]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5532-5538]:Modifier[5617-5623]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5539-5543]:PrimitiveType[5624-5628]"
    }, {
      "left" : "filePayloadCopiedToNewFileWithNewLines",
      "right" : "filePayloadCopiedToNewFileWithNewLines",
      "info" : "SimpleName[5544-5582]:SimpleName[5629-5667]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[5592-5601]:SimpleType[5677-5686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5602-5952]:Block[5687-6037]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "info" : "VariableDeclarationStatement[5606-5674]:VariableDeclarationStatement[5691-5759]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[5677-5718]:VariableDeclarationStatement[5762-5803]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[5721-5754]:ExpressionStatement[5806-5839]"
    }, {
      "left" : "handler.setAppendNewLine(true);",
      "right" : "handler.setAppendNewLine(true);",
      "info" : "ExpressionStatement[5757-5788]:ExpressionStatement[5842-5873]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[5791-5822]:ExpressionStatement[5876-5907]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[5825-5863]:VariableDeclarationStatement[5910-5948]"
    }, {
      "left" : "assertFileContentIs(result, SAMPLE_CONTENT + System.getProperty(\"line.separator\"));",
      "right" : "assertFileContentIs(result, SAMPLE_CONTENT + System.getProperty(\"line.separator\"));",
      "info" : "ExpressionStatement[5866-5949]:ExpressionStatement[5951-6034]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5955-5960]:MarkerAnnotation[6909-6914]"
    }, {
      "left" : "@Ignore",
      "right" : "@Ignore",
      "info" : "MarkerAnnotation[5961-5968]:MarkerAnnotation[6915-6922]"
    }, {
      "left" : "// INT-3289 ignored because it won't fail on all OS",
      "right" : "// INT-3289 ignored because it won't fail on all OS",
      "info" : "LineComment[5969-6020]:LineComment[6923-6974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6022-6028]:Modifier[6976-6982]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6029-6033]:PrimitiveType[6983-6987]"
    }, {
      "left" : "testCreateDirFail",
      "right" : "testCreateDirFail",
      "info" : "SimpleName[6034-6051]:SimpleName[6988-7005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6054-6411]:Block[7008-7365]"
    }, {
      "left" : "File dir = new File(\"/foo\");",
      "right" : "File dir = new File(\"/foo\");",
      "info" : "VariableDeclarationStatement[6058-6086]:VariableDeclarationStatement[7012-7040]"
    }, {
      "left" : "FileWritingMessageHandler handler = new FileWritingMessageHandler(dir);",
      "right" : "FileWritingMessageHandler handler = new FileWritingMessageHandler(dir);",
      "info" : "VariableDeclarationStatement[6089-6160]:VariableDeclarationStatement[7043-7114]"
    }, {
      "left" : "handler.setBeanFactory(mock(BeanFactory.class));",
      "right" : "handler.setBeanFactory(mock(BeanFactory.class));",
      "info" : "ExpressionStatement[6163-6211]:ExpressionStatement[7117-7165]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6214-6408]:TryStatement[7168-7362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6218-6287]:Block[7172-7241]"
    }, {
      "left" : "handler.afterPropertiesSet();",
      "right" : "handler.afterPropertiesSet();",
      "info" : "ExpressionStatement[6223-6252]:ExpressionStatement[7177-7206]"
    }, {
      "left" : "fail(\"Expected exception\");",
      "right" : "fail(\"Expected exception\");",
      "info" : "ExpressionStatement[6256-6283]:ExpressionStatement[7210-7237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6325-6408]:Block[7279-7362]"
    }, {
      "left" : "assertThat(e.getMessage(), containsString(\"[/foo] could not be created\"));",
      "right" : "assertThat(e.getMessage(), containsString(\"[/foo] could not be created\"));",
      "info" : "ExpressionStatement[6330-6404]:ExpressionStatement[7284-7358]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6414-6419]:MarkerAnnotation[7368-7373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6421-6427]:Modifier[7375-7381]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6428-6432]:PrimitiveType[7382-7386]"
    }, {
      "left" : "deleteFilesFalseByDefault",
      "right" : "deleteFilesFalseByDefault",
      "info" : "SimpleName[6433-6458]:SimpleName[7387-7412]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6468-6477]:SimpleType[7422-7431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6478-6782]:Block[7432-7736]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[6482-6523]:VariableDeclarationStatement[7436-7477]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[6526-6559]:ExpressionStatement[7480-7513]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "info" : "VariableDeclarationStatement[6562-6630]:VariableDeclarationStatement[7516-7584]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[6633-6664]:ExpressionStatement[7587-7618]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[6667-6705]:VariableDeclarationStatement[7621-7659]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[6708-6744]:ExpressionStatement[7662-7698]"
    }, {
      "left" : "assertTrue(sourceFile.exists());",
      "right" : "assertTrue(sourceFile.exists());",
      "info" : "ExpressionStatement[6747-6779]:ExpressionStatement[7701-7733]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6785-6790]:MarkerAnnotation[7739-7744]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6792-6798]:Modifier[7746-7752]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6799-6803]:PrimitiveType[7753-7757]"
    }, {
      "left" : "deleteFilesTrueWithFilePayload",
      "right" : "deleteFilesTrueWithFilePayload",
      "info" : "SimpleName[6804-6834]:SimpleName[7758-7788]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6844-6853]:SimpleType[7798-7807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6854-7197]:Block[7808-8151]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[6858-6899]:VariableDeclarationStatement[7812-7853]"
    }, {
      "left" : "handler.setDeleteSourceFiles(true);",
      "right" : "handler.setDeleteSourceFiles(true);",
      "info" : "ExpressionStatement[6902-6937]:ExpressionStatement[7856-7891]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[6940-6973]:ExpressionStatement[7894-7927]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(sourceFile).build();",
      "info" : "VariableDeclarationStatement[6976-7044]:VariableDeclarationStatement[7930-7998]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[7047-7078]:ExpressionStatement[8001-8032]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[7081-7119]:VariableDeclarationStatement[8035-8073]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[7122-7158]:ExpressionStatement[8076-8112]"
    }, {
      "left" : "assertFalse(sourceFile.exists());",
      "right" : "assertFalse(sourceFile.exists());",
      "info" : "ExpressionStatement[7161-7194]:ExpressionStatement[8115-8148]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7200-7205]:MarkerAnnotation[8154-8159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7207-7213]:Modifier[8161-8167]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7214-7218]:PrimitiveType[8168-8172]"
    }, {
      "left" : "deleteSourceFileWithStringPayloadAndFileInstanceHeader",
      "right" : "deleteSourceFileWithStringPayloadAndFileInstanceHeader",
      "info" : "SimpleName[7219-7273]:SimpleName[8173-8227]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7283-7292]:SimpleType[8237-8246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7293-7774]:Block[8247-8728]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[7297-7338]:VariableDeclarationStatement[8251-8292]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[7341-7378]:ExpressionStatement[8295-8332]"
    }, {
      "left" : "handler.setDeleteSourceFiles(true);",
      "right" : "handler.setDeleteSourceFiles(true);",
      "info" : "ExpressionStatement[7381-7416]:ExpressionStatement[8335-8370]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[7419-7452]:ExpressionStatement[8373-8406]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT)\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile)\n\t\t\t\t.build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT)\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile)\n\t\t\t\t.build();",
      "info" : "VariableDeclarationStatement[7455-7586]:VariableDeclarationStatement[8409-8540]"
    }, {
      "left" : "assertTrue(sourceFile.exists());",
      "right" : "assertTrue(sourceFile.exists());",
      "info" : "ExpressionStatement[7589-7621]:ExpressionStatement[8543-8575]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[7624-7655]:ExpressionStatement[8578-8609]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[7658-7696]:VariableDeclarationStatement[8612-8650]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[7699-7735]:ExpressionStatement[8653-8689]"
    }, {
      "left" : "assertFalse(sourceFile.exists());",
      "right" : "assertFalse(sourceFile.exists());",
      "info" : "ExpressionStatement[7738-7771]:ExpressionStatement[8692-8725]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7777-7782]:MarkerAnnotation[8731-8736]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7784-7790]:Modifier[8738-8744]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7791-7795]:PrimitiveType[8745-8749]"
    }, {
      "left" : "deleteSourceFileWithStringPayloadAndFilePathHeader",
      "right" : "deleteSourceFileWithStringPayloadAndFilePathHeader",
      "info" : "SimpleName[7796-7846]:SimpleName[8750-8800]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7856-7865]:SimpleType[8810-8819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7866-8365]:Block[8820-9319]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[7870-7911]:VariableDeclarationStatement[8824-8865]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[7914-7951]:ExpressionStatement[8868-8905]"
    }, {
      "left" : "handler.setDeleteSourceFiles(true);",
      "right" : "handler.setDeleteSourceFiles(true);",
      "info" : "ExpressionStatement[7954-7989]:ExpressionStatement[8908-8943]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[7992-8025]:ExpressionStatement[8946-8979]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT)\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile.getAbsolutePath())\n\t\t\t\t.build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT)\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile.getAbsolutePath())\n\t\t\t\t.build();",
      "info" : "VariableDeclarationStatement[8028-8177]:VariableDeclarationStatement[8982-9131]"
    }, {
      "left" : "assertTrue(sourceFile.exists());",
      "right" : "assertTrue(sourceFile.exists());",
      "info" : "ExpressionStatement[8180-8212]:ExpressionStatement[9134-9166]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[8215-8246]:ExpressionStatement[9169-9200]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[8249-8287]:VariableDeclarationStatement[9203-9241]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[8290-8326]:ExpressionStatement[9244-9280]"
    }, {
      "left" : "assertFalse(sourceFile.exists());",
      "right" : "assertFalse(sourceFile.exists());",
      "info" : "ExpressionStatement[8329-8362]:ExpressionStatement[9283-9316]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8368-8373]:MarkerAnnotation[9322-9327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8375-8381]:Modifier[9329-9335]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8382-8386]:PrimitiveType[9336-9340]"
    }, {
      "left" : "deleteSourceFileWithByteArrayPayloadAndFileInstanceHeader",
      "right" : "deleteSourceFileWithByteArrayPayloadAndFileInstanceHeader",
      "info" : "SimpleName[8387-8444]:SimpleName[9341-9398]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8454-8463]:SimpleType[9408-9417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8464-8977]:Block[9418-9931]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[8468-8509]:VariableDeclarationStatement[9422-9463]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[8512-8549]:ExpressionStatement[9466-9503]"
    }, {
      "left" : "handler.setDeleteSourceFiles(true);",
      "right" : "handler.setDeleteSourceFiles(true);",
      "info" : "ExpressionStatement[8552-8587]:ExpressionStatement[9506-9541]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[8590-8623]:ExpressionStatement[9544-9577]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING))\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile)\n\t\t\t\t.build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING))\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile)\n\t\t\t\t.build();",
      "info" : "VariableDeclarationStatement[8626-8789]:VariableDeclarationStatement[9580-9743]"
    }, {
      "left" : "assertTrue(sourceFile.exists());",
      "right" : "assertTrue(sourceFile.exists());",
      "info" : "ExpressionStatement[8792-8824]:ExpressionStatement[9746-9778]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[8827-8858]:ExpressionStatement[9781-9812]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[8861-8899]:VariableDeclarationStatement[9815-9853]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[8902-8938]:ExpressionStatement[9856-9892]"
    }, {
      "left" : "assertFalse(sourceFile.exists());",
      "right" : "assertFalse(sourceFile.exists());",
      "info" : "ExpressionStatement[8941-8974]:ExpressionStatement[9895-9928]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8980-8985]:MarkerAnnotation[9934-9939]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8987-8993]:Modifier[9941-9947]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8994-8998]:PrimitiveType[9948-9952]"
    }, {
      "left" : "deleteSourceFileWithByteArrayPayloadAndFilePathHeader",
      "right" : "deleteSourceFileWithByteArrayPayloadAndFilePathHeader",
      "info" : "SimpleName[8999-9052]:SimpleName[9953-10006]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[9062-9071]:SimpleType[10016-10025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9072-9603]:Block[10026-10557]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[9076-9117]:VariableDeclarationStatement[10030-10071]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[9120-9157]:ExpressionStatement[10074-10111]"
    }, {
      "left" : "handler.setDeleteSourceFiles(true);",
      "right" : "handler.setDeleteSourceFiles(true);",
      "info" : "ExpressionStatement[9160-9195]:ExpressionStatement[10114-10149]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[9198-9231]:ExpressionStatement[10152-10185]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING))\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile.getAbsolutePath())\n\t\t\t\t.build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(\n\t\t\t\tSAMPLE_CONTENT.getBytes(DEFAULT_ENCODING))\n\t\t\t\t.setHeader(FileHeaders.ORIGINAL_FILE, sourceFile.getAbsolutePath())\n\t\t\t\t.build();",
      "info" : "VariableDeclarationStatement[9234-9415]:VariableDeclarationStatement[10188-10369]"
    }, {
      "left" : "assertTrue(sourceFile.exists());",
      "right" : "assertTrue(sourceFile.exists());",
      "info" : "ExpressionStatement[9418-9450]:ExpressionStatement[10372-10404]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[9453-9484]:ExpressionStatement[10407-10438]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[9487-9525]:VariableDeclarationStatement[10441-10479]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[9528-9564]:ExpressionStatement[10482-10518]"
    }, {
      "left" : "assertFalse(sourceFile.exists());",
      "right" : "assertFalse(sourceFile.exists());",
      "info" : "ExpressionStatement[9567-9600]:ExpressionStatement[10521-10554]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9606-9611]:MarkerAnnotation[11822-11827]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9613-9619]:Modifier[11829-11835]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9620-9624]:PrimitiveType[11836-11840]"
    }, {
      "left" : "customFileNameGenerator",
      "right" : "customFileNameGenerator",
      "info" : "SimpleName[9625-9648]:SimpleName[11841-11864]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[9658-9667]:SimpleType[11874-11883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9668-10162]:Block[11884-12378]"
    }, {
      "left" : "final String anyFilename = \"fooBar.test\";",
      "right" : "final String anyFilename = \"fooBar.test\";",
      "info" : "VariableDeclarationStatement[9672-9713]:VariableDeclarationStatement[11888-11929]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[9716-9757]:VariableDeclarationStatement[11932-11973]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[9760-9793]:ExpressionStatement[11976-12009]"
    }, {
      "left" : "handler.setFileNameGenerator(new FileNameGenerator() {\n\t\t\t@Override\n\t\t\tpublic String generateFileName(Message<?> message) {\n\t\t\t\treturn anyFilename;\n\t\t\t}\n\t\t});",
      "right" : "handler.setFileNameGenerator(new FileNameGenerator() {\n\t\t\t@Override\n\t\t\tpublic String generateFileName(Message<?> message) {\n\t\t\t\treturn anyFilename;\n\t\t\t}\n\t\t});",
      "info" : "ExpressionStatement[9796-9954]:ExpressionStatement[12012-12170]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9854-9863]:MarkerAnnotation[12070-12079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9867-9873]:Modifier[12083-12089]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9874-9880]:SimpleType[12090-12096]"
    }, {
      "left" : "generateFileName",
      "right" : "generateFileName",
      "info" : "SimpleName[9881-9897]:SimpleName[12097-12113]"
    }, {
      "left" : "Message<?> message",
      "right" : "Message<?> message",
      "info" : "SingleVariableDeclaration[9898-9916]:SingleVariableDeclaration[12114-12132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9918-9948]:Block[12134-12164]"
    }, {
      "left" : "return anyFilename;",
      "right" : "return anyFilename;",
      "info" : "ReturnStatement[9924-9943]:ReturnStatement[12140-12159]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(\"test\").build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(\"test\").build();",
      "info" : "VariableDeclarationStatement[9957-10021]:VariableDeclarationStatement[12173-12237]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[10024-10055]:ExpressionStatement[12240-12271]"
    }, {
      "left" : "File result = (File) output.receive(0).getPayload();",
      "right" : "File result = (File) output.receive(0).getPayload();",
      "info" : "VariableDeclarationStatement[10058-10110]:VariableDeclarationStatement[12274-12326]"
    }, {
      "left" : "assertThat(result.getName(), is(anyFilename));",
      "right" : "assertThat(result.getName(), is(anyFilename));",
      "info" : "ExpressionStatement[10113-10159]:ExpressionStatement[12329-12375]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10165-10170]:MarkerAnnotation[12381-12386]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10172-10178]:Modifier[12388-12394]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10179-10183]:PrimitiveType[12395-12399]"
    }, {
      "left" : "existingFileIgnored",
      "right" : "existingFileIgnored",
      "info" : "SimpleName[10184-10203]:SimpleName[12400-12419]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[10213-10222]:SimpleType[12429-12438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10223-10761]:Block[12439-12977]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "info" : "VariableDeclarationStatement[10227-10299]:VariableDeclarationStatement[12443-12515]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[10302-10343]:VariableDeclarationStatement[12518-12559]"
    }, {
      "left" : "File outFile = temp.newFile(\"/outputDirectory/\" + message.getHeaders().getId().toString() + \".msg\");",
      "right" : "File outFile = temp.newFile(\"/outputDirectory/\" + message.getHeaders().getId().toString() + \".msg\");",
      "info" : "VariableDeclarationStatement[10346-10446]:VariableDeclarationStatement[12562-12662]"
    }, {
      "left" : "FileCopyUtils.copy(\"foo\".getBytes(), new FileOutputStream(outFile));",
      "right" : "FileCopyUtils.copy(\"foo\".getBytes(), new FileOutputStream(outFile));",
      "info" : "ExpressionStatement[10449-10517]:ExpressionStatement[12665-12733]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[10520-10557]:ExpressionStatement[12736-12773]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[10560-10593]:ExpressionStatement[12776-12809]"
    }, {
      "left" : "handler.setFileExistsMode(FileExistsMode.IGNORE);",
      "right" : "handler.setFileExistsMode(FileExistsMode.IGNORE);",
      "info" : "ExpressionStatement[10596-10645]:ExpressionStatement[12812-12861]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[10648-10679]:ExpressionStatement[12864-12895]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[10682-10720]:VariableDeclarationStatement[12898-12936]"
    }, {
      "left" : "assertFileContentIs(result, \"foo\");",
      "right" : "assertFileContentIs(result, \"foo\");",
      "info" : "ExpressionStatement[10723-10758]:ExpressionStatement[12939-12974]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[10764-10769]:MarkerAnnotation[12980-12985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10771-10777]:Modifier[12987-12993]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10778-10782]:PrimitiveType[12994-12998]"
    }, {
      "left" : "existingWritingFileIgnored",
      "right" : "existingWritingFileIgnored",
      "info" : "SimpleName[10783-10809]:SimpleName[12999-13025]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[10819-10828]:SimpleType[13035-13044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10829-11508]:Block[13045-13724]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "info" : "VariableDeclarationStatement[10833-10905]:VariableDeclarationStatement[13049-13121]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[10908-10949]:VariableDeclarationStatement[13124-13165]"
    }, {
      "left" : "File outFile = temp.newFile(\"/outputDirectory/\" + message.getHeaders().getId().toString() + \".msg.writing\");",
      "right" : "File outFile = temp.newFile(\"/outputDirectory/\" + message.getHeaders().getId().toString() + \".msg.writing\");",
      "info" : "VariableDeclarationStatement[10952-11060]:VariableDeclarationStatement[13168-13276]"
    }, {
      "left" : "FileCopyUtils.copy(\"foo\".getBytes(), new FileOutputStream(outFile));",
      "right" : "FileCopyUtils.copy(\"foo\".getBytes(), new FileOutputStream(outFile));",
      "info" : "ExpressionStatement[11063-11131]:ExpressionStatement[13279-13347]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[11134-11171]:ExpressionStatement[13350-13387]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[11174-11207]:ExpressionStatement[13390-13423]"
    }, {
      "left" : "handler.setFileExistsMode(FileExistsMode.IGNORE);",
      "right" : "handler.setFileExistsMode(FileExistsMode.IGNORE);",
      "info" : "ExpressionStatement[11210-11259]:ExpressionStatement[13426-13475]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[11262-11293]:ExpressionStatement[13478-13509]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[11296-11334]:VariableDeclarationStatement[13512-13550]"
    }, {
      "left" : "File destFile = (File) result.getPayload();",
      "right" : "File destFile = (File) result.getPayload();",
      "info" : "VariableDeclarationStatement[11337-11380]:VariableDeclarationStatement[13553-13596]"
    }, {
      "left" : "assertNotSame(destFile, sourceFile);",
      "right" : "assertNotSame(destFile, sourceFile);",
      "info" : "ExpressionStatement[11383-11419]:ExpressionStatement[13599-13635]"
    }, {
      "left" : "assertThat(destFile.exists(), is(false));",
      "right" : "assertThat(destFile.exists(), is(false));",
      "info" : "ExpressionStatement[11422-11463]:ExpressionStatement[13638-13679]"
    }, {
      "left" : "assertThat(outFile.exists(), is(true));",
      "right" : "assertThat(outFile.exists(), is(true));",
      "info" : "ExpressionStatement[11466-11505]:ExpressionStatement[13682-13721]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11511-11516]:MarkerAnnotation[13727-13732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11518-11524]:Modifier[13734-13740]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11525-11529]:PrimitiveType[13741-13745]"
    }, {
      "left" : "existingWritingFileNotIgnoredIfEmptySuffix",
      "right" : "existingWritingFileNotIgnoredIfEmptySuffix",
      "info" : "SimpleName[11530-11572]:SimpleName[13746-13788]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[11582-11591]:SimpleType[13798-13807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11592-12343]:Block[13808-14559]"
    }, {
      "left" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "right" : "Message<?> message = MessageBuilder.withPayload(SAMPLE_CONTENT).build();",
      "info" : "VariableDeclarationStatement[11596-11668]:VariableDeclarationStatement[13812-13884]"
    }, {
      "left" : "QueueChannel output = new QueueChannel();",
      "right" : "QueueChannel output = new QueueChannel();",
      "info" : "VariableDeclarationStatement[11671-11712]:VariableDeclarationStatement[13887-13928]"
    }, {
      "left" : "File outFile = temp.newFile(\"/outputDirectory/\" + message.getHeaders().getId().toString() + \".msg.writing\");",
      "right" : "File outFile = temp.newFile(\"/outputDirectory/\" + message.getHeaders().getId().toString() + \".msg.writing\");",
      "info" : "VariableDeclarationStatement[11715-11823]:VariableDeclarationStatement[13931-14039]"
    }, {
      "left" : "FileCopyUtils.copy(\"foo\".getBytes(), new FileOutputStream(outFile));",
      "right" : "FileCopyUtils.copy(\"foo\".getBytes(), new FileOutputStream(outFile));",
      "info" : "ExpressionStatement[11826-11894]:ExpressionStatement[14042-14110]"
    }, {
      "left" : "handler.setCharset(DEFAULT_ENCODING);",
      "right" : "handler.setCharset(DEFAULT_ENCODING);",
      "info" : "ExpressionStatement[11897-11934]:ExpressionStatement[14113-14150]"
    }, {
      "left" : "handler.setOutputChannel(output);",
      "right" : "handler.setOutputChannel(output);",
      "info" : "ExpressionStatement[11937-11970]:ExpressionStatement[14153-14186]"
    }, {
      "left" : "handler.setFileExistsMode(FileExistsMode.IGNORE);",
      "right" : "handler.setFileExistsMode(FileExistsMode.IGNORE);",
      "info" : "ExpressionStatement[11973-12022]:ExpressionStatement[14189-14238]"
    }, {
      "left" : "handler.setTemporaryFileSuffix(\"\");",
      "right" : "handler.setTemporaryFileSuffix(\"\");",
      "info" : "ExpressionStatement[12025-12060]:ExpressionStatement[14241-14276]"
    }, {
      "left" : "handler.handleMessage(message);",
      "right" : "handler.handleMessage(message);",
      "info" : "ExpressionStatement[12063-12094]:ExpressionStatement[14279-14310]"
    }, {
      "left" : "Message<?> result = output.receive(0);",
      "right" : "Message<?> result = output.receive(0);",
      "info" : "VariableDeclarationStatement[12097-12135]:VariableDeclarationStatement[14313-14351]"
    }, {
      "left" : "File destFile = (File) result.getPayload();",
      "right" : "File destFile = (File) result.getPayload();",
      "info" : "VariableDeclarationStatement[12138-12181]:VariableDeclarationStatement[14354-14397]"
    }, {
      "left" : "assertNotSame(destFile, sourceFile);",
      "right" : "assertNotSame(destFile, sourceFile);",
      "info" : "ExpressionStatement[12184-12220]:ExpressionStatement[14400-14436]"
    }, {
      "left" : "assertFileContentIsMatching(result);",
      "right" : "assertFileContentIsMatching(result);",
      "info" : "ExpressionStatement[12223-12259]:ExpressionStatement[14439-14475]"
    }, {
      "left" : "assertThat(outFile.exists(), is(true));",
      "right" : "assertThat(outFile.exists(), is(true));",
      "info" : "ExpressionStatement[12262-12301]:ExpressionStatement[14478-14517]"
    }, {
      "left" : "assertFileContentIs(outFile, \"foo\");",
      "right" : "assertFileContentIs(outFile, \"foo\");",
      "info" : "ExpressionStatement[12304-12340]:ExpressionStatement[14520-14556]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12346-12350]:PrimitiveType[14562-14566]"
    }, {
      "left" : "assertFileContentIsMatching",
      "right" : "assertFileContentIsMatching",
      "info" : "SimpleName[12351-12378]:SimpleName[14567-14594]"
    }, {
      "left" : "Message<?> result",
      "right" : "Message<?> result",
      "info" : "SingleVariableDeclaration[12379-12396]:SingleVariableDeclaration[14595-14612]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12405-12416]:SimpleType[14621-14632]"
    }, {
      "left" : "UnsupportedEncodingException",
      "right" : "UnsupportedEncodingException",
      "info" : "SimpleType[12418-12446]:SimpleType[14634-14662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12447-12498]:Block[14663-14714]"
    }, {
      "left" : "assertFileContentIs(result, SAMPLE_CONTENT);",
      "right" : "assertFileContentIs(result, SAMPLE_CONTENT);",
      "info" : "ExpressionStatement[12451-12495]:ExpressionStatement[14667-14711]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12501-12505]:PrimitiveType[14717-14721]"
    }, {
      "left" : "assertFileContentIs",
      "right" : "assertFileContentIs",
      "info" : "SimpleName[12506-12525]:SimpleName[14722-14741]"
    }, {
      "left" : "Message<?> result",
      "right" : "Message<?> result",
      "info" : "SingleVariableDeclaration[12526-12543]:SingleVariableDeclaration[14742-14759]"
    }, {
      "left" : "String expected",
      "right" : "String expected",
      "info" : "SingleVariableDeclaration[12545-12560]:SingleVariableDeclaration[14761-14776]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12569-12580]:SimpleType[14785-14796]"
    }, {
      "left" : "UnsupportedEncodingException",
      "right" : "UnsupportedEncodingException",
      "info" : "SimpleType[12582-12610]:SimpleType[14798-14826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12611-12809]:Block[14827-15025]"
    }, {
      "left" : "assertThat(result, is(notNullValue()));",
      "right" : "assertThat(result, is(notNullValue()));",
      "info" : "ExpressionStatement[12615-12654]:ExpressionStatement[14831-14870]"
    }, {
      "left" : "assertThat(result.getPayload(), is(instanceOf(File.class)));",
      "right" : "assertThat(result.getPayload(), is(instanceOf(File.class)));",
      "info" : "ExpressionStatement[12657-12717]:ExpressionStatement[14873-14933]"
    }, {
      "left" : "File destFile = (File) result.getPayload();",
      "right" : "File destFile = (File) result.getPayload();",
      "info" : "VariableDeclarationStatement[12720-12763]:VariableDeclarationStatement[14936-14979]"
    }, {
      "left" : "assertFileContentIs(destFile, expected);",
      "right" : "assertFileContentIs(destFile, expected);",
      "info" : "ExpressionStatement[12766-12806]:ExpressionStatement[14982-15022]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12812-12816]:PrimitiveType[15028-15032]"
    }, {
      "left" : "assertFileContentIs",
      "right" : "assertFileContentIs",
      "info" : "SimpleName[12817-12836]:SimpleName[15033-15052]"
    }, {
      "left" : "File destFile",
      "right" : "File destFile",
      "info" : "SingleVariableDeclaration[12837-12850]:SingleVariableDeclaration[15053-15066]"
    }, {
      "left" : "String expected",
      "right" : "String expected",
      "info" : "SingleVariableDeclaration[12852-12867]:SingleVariableDeclaration[15068-15083]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12876-12887]:SimpleType[15092-15103]"
    }, {
      "left" : "UnsupportedEncodingException",
      "right" : "UnsupportedEncodingException",
      "info" : "SimpleType[12889-12917]:SimpleType[15105-15133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12918-13147]:Block[15134-15363]"
    }, {
      "left" : "assertNotSame(destFile, sourceFile);",
      "right" : "assertNotSame(destFile, sourceFile);",
      "info" : "ExpressionStatement[12922-12958]:ExpressionStatement[15138-15174]"
    }, {
      "left" : "assertThat(destFile.exists(), is(true));",
      "right" : "assertThat(destFile.exists(), is(true));",
      "info" : "ExpressionStatement[12961-13001]:ExpressionStatement[15177-15217]"
    }, {
      "left" : "byte[] destFileContent = FileCopyUtils.copyToByteArray(destFile);",
      "right" : "byte[] destFileContent = FileCopyUtils.copyToByteArray(destFile);",
      "info" : "VariableDeclarationStatement[13004-13069]:VariableDeclarationStatement[15220-15285]"
    }, {
      "left" : "assertThat(new String(destFileContent, DEFAULT_ENCODING), is(expected));",
      "right" : "assertThat(new String(destFileContent, DEFAULT_ENCODING), is(expected));",
      "info" : "ExpressionStatement[13072-13144]:ExpressionStatement[15288-15360]"
    } ]
  },
  "interFileMappings" : { }
}