{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RandomStringUtils",
      "right" : "RandomStringUtils",
      "info" : "TypeDeclaration[866-12671]:TypeDeclaration[866-12860]"
    }, {
      "left" : "private static final Random RANDOM = new Random();",
      "right" : "private static final Random RANDOM = new Random();",
      "info" : "FieldDeclaration[1532-1770]:FieldDeclaration[1532-1770]"
    }, {
      "left" : "public RandomStringUtils()",
      "right" : "public RandomStringUtils()",
      "info" : "MethodDeclaration[1776-2147]:MethodDeclaration[1776-2147]"
    }, {
      "left" : "public static String random(int count)",
      "right" : "public static String random(int count)",
      "info" : "MethodDeclaration[2245-2626]:MethodDeclaration[2245-2626]"
    }, {
      "left" : "public static String randomAscii(int count)",
      "right" : "public static String randomAscii(int count)",
      "info" : "MethodDeclaration[2632-3098]:MethodDeclaration[2632-3098]"
    }, {
      "left" : "public static String randomAlphabetic(int count)",
      "right" : "public static String randomAlphabetic(int count)",
      "info" : "MethodDeclaration[3108-3512]:MethodDeclaration[3108-3512]"
    }, {
      "left" : "public static String randomAlphanumeric(int count)",
      "right" : "public static String randomAlphanumeric(int count)",
      "info" : "MethodDeclaration[3522-3930]:MethodDeclaration[3522-3930]"
    }, {
      "left" : "public static String randomNumeric(int count)",
      "right" : "public static String randomNumeric(int count)",
      "info" : "MethodDeclaration[3940-4338]:MethodDeclaration[3940-4338]"
    }, {
      "left" : "public static String random(int count, boolean letters, boolean numbers)",
      "right" : "public static String random(int count, boolean letters, boolean numbers)",
      "info" : "MethodDeclaration[4344-5013]:MethodDeclaration[4344-5013]"
    }, {
      "left" : "public static String random(int count, int start, int end, boolean letters, boolean numbers)",
      "right" : "public static String random(int count, int start, int end, boolean letters, boolean numbers)",
      "info" : "MethodDeclaration[5023-5856]:MethodDeclaration[5023-5856]"
    }, {
      "left" : "public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars)",
      "right" : "public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars)",
      "info" : "MethodDeclaration[5862-7008]:MethodDeclaration[5862-7008]"
    }, {
      "left" : "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random)",
      "right" : "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random)",
      "info" : "MethodDeclaration[7014-11133]:MethodDeclaration[7014-11322]"
    }, {
      "left" : "public static String random(int count, String chars)",
      "right" : "public static String random(int count, String chars)",
      "info" : "MethodDeclaration[11139-11950]:MethodDeclaration[11328-12139]"
    }, {
      "left" : "public static String random(int count, char... chars)",
      "right" : "public static String random(int count, char... chars)",
      "info" : "MethodDeclaration[11956-12664]:MethodDeclaration[12145-12853]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2125-2147]:Block[2125-2147]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2133-2141]:SuperConstructorInvocation[2133-2141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2575-2626]:Block[2575-2626]"
    }, {
      "left" : "return random(count, false, false);",
      "right" : "return random(count, false, false);",
      "info" : "ReturnStatement[2585-2620]:ReturnStatement[2585-2620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3038-3098]:Block[3038-3098]"
    }, {
      "left" : "return random(count, 32, 127, false, false);",
      "right" : "return random(count, 32, 127, false, false);",
      "info" : "ReturnStatement[3048-3092]:ReturnStatement[3048-3092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3462-3512]:Block[3462-3512]"
    }, {
      "left" : "return random(count, true, false);",
      "right" : "return random(count, true, false);",
      "info" : "ReturnStatement[3472-3506]:ReturnStatement[3472-3506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3881-3930]:Block[3881-3930]"
    }, {
      "left" : "return random(count, true, true);",
      "right" : "return random(count, true, true);",
      "info" : "ReturnStatement[3891-3924]:ReturnStatement[3891-3924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4288-4338]:Block[4288-4338]"
    }, {
      "left" : "return random(count, false, true);",
      "right" : "return random(count, false, true);",
      "info" : "ReturnStatement[4298-4332]:ReturnStatement[4298-4332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4952-5013]:Block[4952-5013]"
    }, {
      "left" : "return random(count, 0, 0, letters, numbers);",
      "right" : "return random(count, 0, 0, letters, numbers);",
      "info" : "ReturnStatement[4962-5007]:ReturnStatement[4962-5007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5775-5856]:Block[5775-5856]"
    }, {
      "left" : "return random(count, start, end, letters, numbers, null, RANDOM);",
      "right" : "return random(count, start, end, letters, numbers, null, RANDOM);",
      "info" : "ReturnStatement[5785-5850]:ReturnStatement[5785-5850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6926-7008]:Block[6926-7008]"
    }, {
      "left" : "return random(count, start, end, letters, numbers, chars, RANDOM);",
      "right" : "return random(count, start, end, letters, numbers, chars, RANDOM);",
      "info" : "ReturnStatement[6936-7002]:ReturnStatement[6936-7002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8773-11133]:Block[8773-11322]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[8783-8977]:IfStatement[8783-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8799-8833]:Block[8799-8833]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[8813-8823]:ReturnStatement[8813-8823]"
    }, {
      "left" : "if (count < 0)",
      "right" : "if (count < 0)",
      "info" : "IfStatement[8839-8977]:IfStatement[8839-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8854-8977]:Block[8854-8977]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");",
      "right" : "throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");",
      "info" : "ThrowStatement[8868-8967]:ThrowStatement[8868-8967]"
    }, {
      "left" : "if (chars != null && chars.length == 0)",
      "right" : "if (chars != null && chars.length == 0)",
      "info" : "IfStatement[8986-9122]:IfStatement[8986-9122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9026-9122]:Block[9026-9122]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The chars array must not be empty\");",
      "right" : "throw new IllegalArgumentException(\"The chars array must not be empty\");",
      "info" : "ThrowStatement[9040-9112]:ThrowStatement[9040-9112]"
    }, {
      "left" : "if (start == 0 && end == 0)",
      "right" : "if (start == 0 && end == 0)",
      "info" : "IfStatement[9132-9491]:IfStatement[9132-9680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9160-9491]:Block[9160-9491]"
    }, {
      "left" : "if (chars != null)",
      "right" : "if (chars != null)",
      "info" : "IfStatement[9174-9481]:IfStatement[9174-9481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9193-9244]:Block[9193-9244]"
    }, {
      "left" : "end = chars.length;",
      "right" : "end = chars.length;",
      "info" : "ExpressionStatement[9211-9230]:ExpressionStatement[9211-9230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9250-9481]:Block[9250-9481]"
    }, {
      "left" : "if (!letters && !numbers)",
      "right" : "if (!letters && !numbers)",
      "info" : "IfStatement[9268-9467]:IfStatement[9268-9467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9294-9358]:Block[9294-9358]"
    }, {
      "left" : "end = Integer.MAX_VALUE;",
      "right" : "end = Integer.MAX_VALUE;",
      "info" : "ExpressionStatement[9316-9340]:ExpressionStatement[9316-9340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9364-9467]:Block[9364-9467]"
    }, {
      "left" : "end = 'z' + 1;",
      "right" : "end = 'z' + 1;",
      "info" : "ExpressionStatement[9386-9400]:ExpressionStatement[9386-9400]"
    }, {
      "left" : "start = ' ';",
      "right" : "start = ' ';",
      "info" : "ExpressionStatement[9421-9433]:ExpressionStatement[9421-9433]"
    }, {
      "left" : "char[] buffer = new char[count];",
      "right" : "char[] buffer = new char[count];",
      "info" : "VariableDeclarationStatement[9501-9533]:VariableDeclarationStatement[9690-9722]"
    }, {
      "left" : "int gap = end - start;",
      "right" : "int gap = end - start;",
      "info" : "VariableDeclarationStatement[9542-9564]:VariableDeclarationStatement[9731-9753]"
    }, {
      "left" : "while (count-- != 0)",
      "right" : "while (count-- != 0)",
      "info" : "WhileStatement[9574-11092]:WhileStatement[9763-11281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9595-11092]:Block[9784-11281]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[9609-9617]:VariableDeclarationStatement[9798-9806]"
    }, {
      "left" : "if (chars == null)",
      "right" : "if (chars == null)",
      "info" : "IfStatement[9630-9801]:IfStatement[9819-9990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9649-9723]:Block[9838-9912]"
    }, {
      "left" : "ch = (char) (random.nextInt(gap) + start);",
      "right" : "ch = (char) (random.nextInt(gap) + start);",
      "info" : "ExpressionStatement[9667-9709]:ExpressionStatement[9856-9898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9729-9801]:Block[9918-9990]"
    }, {
      "left" : "ch = chars[random.nextInt(gap) + start];",
      "right" : "ch = chars[random.nextInt(gap) + start];",
      "info" : "ExpressionStatement[9747-9787]:ExpressionStatement[9936-9976]"
    }, {
      "left" : "if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers)",
      "right" : "if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers)",
      "info" : "IfStatement[9814-11082]:IfStatement[10003-11271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9953-11036]:Block[10142-11225]"
    }, {
      "left" : "if(ch >= 56320 && ch <= 57343)",
      "right" : "if(ch >= 56320 && ch <= 57343)",
      "info" : "IfStatement[9971-11022]:IfStatement[10160-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10002-10381]:Block[10191-10570]"
    }, {
      "left" : "if(count == 0)",
      "right" : "if(count == 0)",
      "info" : "IfStatement[10024-10363]:IfStatement[10213-10552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10039-10095]:Block[10228-10284]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10065-10073]:ExpressionStatement[10254-10262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10101-10363]:Block[10290-10552]"
    }, {
      "left" : "buffer[count] = ch;",
      "right" : "buffer[count] = ch;",
      "info" : "ExpressionStatement[10211-10230]:ExpressionStatement[10400-10419]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[10255-10263]:ExpressionStatement[10444-10452]"
    }, {
      "left" : "buffer[count] = (char) (55296 + random.nextInt(128));",
      "right" : "buffer[count] = (char) (55296 + random.nextInt(128));",
      "info" : "ExpressionStatement[10288-10341]:ExpressionStatement[10477-10530]"
    }, {
      "left" : "if(ch >= 55296 && ch <= 56191)",
      "right" : "if(ch >= 55296 && ch <= 56191)",
      "info" : "IfStatement[10387-11022]:IfStatement[10576-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10418-10798]:Block[10607-10987]"
    }, {
      "left" : "if(count == 0)",
      "right" : "if(count == 0)",
      "info" : "IfStatement[10440-10780]:IfStatement[10629-10969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10455-10511]:Block[10644-10700]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10481-10489]:ExpressionStatement[10670-10678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10517-10780]:Block[10706-10969]"
    }, {
      "left" : "buffer[count] = (char) (56320 + random.nextInt(128));",
      "right" : "buffer[count] = (char) (56320 + random.nextInt(128));",
      "info" : "ExpressionStatement[10628-10681]:ExpressionStatement[10817-10870]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[10706-10714]:ExpressionStatement[10895-10903]"
    }, {
      "left" : "buffer[count] = ch;",
      "right" : "buffer[count] = ch;",
      "info" : "ExpressionStatement[10739-10758]:ExpressionStatement[10928-10947]"
    }, {
      "left" : "if(ch >= 56192 && ch <= 56319)",
      "right" : "if(ch >= 56192 && ch <= 56319)",
      "info" : "IfStatement[10804-11022]:IfStatement[10993-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10835-10957]:Block[11024-11146]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10931-10939]:ExpressionStatement[11120-11128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10963-11022]:Block[11152-11211]"
    }, {
      "left" : "buffer[count] = ch;",
      "right" : "buffer[count] = ch;",
      "info" : "ExpressionStatement[10985-11004]:ExpressionStatement[11174-11193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11042-11082]:Block[11231-11271]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[11060-11068]:ExpressionStatement[11249-11257]"
    }, {
      "left" : "return new String(buffer);",
      "right" : "return new String(buffer);",
      "info" : "ReturnStatement[11101-11127]:ReturnStatement[11290-11316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11785-11950]:Block[11974-12139]"
    }, {
      "left" : "if (chars == null)",
      "right" : "if (chars == null)",
      "info" : "IfStatement[11795-11893]:IfStatement[11984-12082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11814-11893]:Block[12003-12082]"
    }, {
      "left" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "right" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "info" : "ReturnStatement[11828-11883]:ReturnStatement[12017-12072]"
    }, {
      "left" : "return random(count, chars.toCharArray());",
      "right" : "return random(count, chars.toCharArray());",
      "info" : "ReturnStatement[11902-11944]:ReturnStatement[12091-12133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12474-12664]:Block[12663-12853]"
    }, {
      "left" : "if (chars == null)",
      "right" : "if (chars == null)",
      "info" : "IfStatement[12484-12582]:IfStatement[12673-12771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12503-12582]:Block[12692-12771]"
    }, {
      "left" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "right" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "info" : "ReturnStatement[12517-12572]:ReturnStatement[12706-12761]"
    }, {
      "left" : "return random(count, 0, chars.length, false, false, chars, RANDOM);",
      "right" : "return random(count, 0, chars.length, false, false, chars, RANDOM);",
      "info" : "ReturnStatement[12591-12658]:ReturnStatement[12780-12847]"
    } ]
  },
  "interFileMappings" : { }
}