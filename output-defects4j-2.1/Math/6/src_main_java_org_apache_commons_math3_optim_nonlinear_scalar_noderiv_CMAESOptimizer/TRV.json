{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private int lambda;",
      "right" : "private int lambda;",
      "info" : "FieldDeclaration[4124-4551]:FieldDeclaration[4124-4551]"
    }, {
      "left" : "private final boolean isActiveCMA;",
      "right" : "private final boolean isActiveCMA;",
      "info" : "FieldDeclaration[4575-4960]:FieldDeclaration[4575-4960]"
    }, {
      "left" : "private final int checkFeasableCount;",
      "right" : "private final int checkFeasableCount;",
      "info" : "FieldDeclaration[4965-5159]:FieldDeclaration[4965-5159]"
    }, {
      "left" : "private double[] inputSigma;",
      "right" : "private double[] inputSigma;",
      "info" : "FieldDeclaration[5164-5226]:FieldDeclaration[5164-5226]"
    }, {
      "left" : "private int dimension;",
      "right" : "private int dimension;",
      "info" : "FieldDeclaration[5231-5312]:FieldDeclaration[5231-5312]"
    }, {
      "left" : "private int diagonalOnly;",
      "right" : "private int diagonalOnly;",
      "info" : "FieldDeclaration[5317-5823]:FieldDeclaration[5317-5823]"
    }, {
      "left" : "private boolean isMinimize = true;",
      "right" : "private boolean isMinimize = true;",
      "info" : "FieldDeclaration[5828-5921]:FieldDeclaration[5828-5921]"
    }, {
      "left" : "private final boolean generateStatistics;",
      "right" : "private final boolean generateStatistics;",
      "info" : "FieldDeclaration[5926-6025]:FieldDeclaration[5926-6025]"
    }, {
      "left" : "private final int maxIterations;",
      "right" : "private final int maxIterations;",
      "info" : "FieldDeclaration[6059-6140]:FieldDeclaration[6059-6140]"
    }, {
      "left" : "private final double stopFitness;",
      "right" : "private final double stopFitness;",
      "info" : "FieldDeclaration[6145-6214]:FieldDeclaration[6145-6214]"
    }, {
      "left" : "private double stopTolUpX;",
      "right" : "private double stopTolUpX;",
      "info" : "FieldDeclaration[6219-6293]:FieldDeclaration[6219-6293]"
    }, {
      "left" : "private double stopTolX;",
      "right" : "private double stopTolX;",
      "info" : "FieldDeclaration[6298-6368]:FieldDeclaration[6298-6368]"
    }, {
      "left" : "private double stopTolFun;",
      "right" : "private double stopTolFun;",
      "info" : "FieldDeclaration[6373-6450]:FieldDeclaration[6373-6450]"
    }, {
      "left" : "private double stopTolHistFun;",
      "right" : "private double stopTolHistFun;",
      "info" : "FieldDeclaration[6455-6545]:FieldDeclaration[6455-6545]"
    }, {
      "left" : "private int mu;",
      "right" : "private int mu;",
      "info" : "FieldDeclaration[6588-6658]:FieldDeclaration[6588-6658]"
    }, {
      "left" : "private double logMu2;",
      "right" : "private double logMu2;",
      "info" : "FieldDeclaration[6666-6737]:FieldDeclaration[6666-6737]"
    }, {
      "left" : "private RealMatrix weights;",
      "right" : "private RealMatrix weights;",
      "info" : "FieldDeclaration[6742-6814]:FieldDeclaration[6742-6814]"
    }, {
      "left" : "private double mueff;",
      "right" : "private double mueff;",
      "info" : "FieldDeclaration[6819-6890]:FieldDeclaration[6819-6890]"
    }, {
      "left" : "private double sigma;",
      "right" : "private double sigma;",
      "info" : "FieldDeclaration[6948-7024]:FieldDeclaration[6948-7024]"
    }, {
      "left" : "private double cc;",
      "right" : "private double cc;",
      "info" : "FieldDeclaration[7029-7079]:FieldDeclaration[7029-7079]"
    }, {
      "left" : "private double cs;",
      "right" : "private double cs;",
      "info" : "FieldDeclaration[7084-7148]:FieldDeclaration[7084-7148]"
    }, {
      "left" : "private double damps;",
      "right" : "private double damps;",
      "info" : "FieldDeclaration[7153-7208]:FieldDeclaration[7153-7208]"
    }, {
      "left" : "private double ccov1;",
      "right" : "private double ccov1;",
      "info" : "FieldDeclaration[7213-7280]:FieldDeclaration[7213-7280]"
    }, {
      "left" : "private double ccovmu;",
      "right" : "private double ccovmu;",
      "info" : "FieldDeclaration[7285-7352]:FieldDeclaration[7285-7352]"
    }, {
      "left" : "private double chiN;",
      "right" : "private double chiN;",
      "info" : "FieldDeclaration[7357-7435]:FieldDeclaration[7357-7435]"
    }, {
      "left" : "private double ccov1Sep;",
      "right" : "private double ccov1Sep;",
      "info" : "FieldDeclaration[7440-7524]:FieldDeclaration[7440-7524]"
    }, {
      "left" : "private double ccovmuSep;",
      "right" : "private double ccovmuSep;",
      "info" : "FieldDeclaration[7529-7613]:FieldDeclaration[7529-7613]"
    }, {
      "left" : "private RealMatrix xmean;",
      "right" : "private RealMatrix xmean;",
      "info" : "FieldDeclaration[7672-7729]:FieldDeclaration[7672-7729]"
    }, {
      "left" : "private RealMatrix pc;",
      "right" : "private RealMatrix pc;",
      "info" : "FieldDeclaration[7734-7783]:FieldDeclaration[7734-7783]"
    }, {
      "left" : "private RealMatrix ps;",
      "right" : "private RealMatrix ps;",
      "info" : "FieldDeclaration[7788-7847]:FieldDeclaration[7788-7847]"
    }, {
      "left" : "private double normps;",
      "right" : "private double normps;",
      "info" : "FieldDeclaration[7852-7920]:FieldDeclaration[7852-7920]"
    }, {
      "left" : "private RealMatrix B;",
      "right" : "private RealMatrix B;",
      "info" : "FieldDeclaration[7925-7976]:FieldDeclaration[7925-7976]"
    }, {
      "left" : "private RealMatrix D;",
      "right" : "private RealMatrix D;",
      "info" : "FieldDeclaration[7981-8022]:FieldDeclaration[7981-8022]"
    }, {
      "left" : "private RealMatrix BD;",
      "right" : "private RealMatrix BD;",
      "info" : "FieldDeclaration[8027-8088]:FieldDeclaration[8027-8088]"
    }, {
      "left" : "private RealMatrix diagD;",
      "right" : "private RealMatrix diagD;",
      "info" : "FieldDeclaration[8093-8173]:FieldDeclaration[8093-8173]"
    }, {
      "left" : "private RealMatrix C;",
      "right" : "private RealMatrix C;",
      "info" : "FieldDeclaration[8178-8229]:FieldDeclaration[8178-8229]"
    }, {
      "left" : "private RealMatrix diagC;",
      "right" : "private RealMatrix diagC;",
      "info" : "FieldDeclaration[8234-8308]:FieldDeclaration[8234-8308]"
    }, {
      "left" : "private int iterations;",
      "right" : "private int iterations;",
      "info" : "FieldDeclaration[8313-8387]:FieldDeclaration[8313-8387]"
    }, {
      "left" : "private double[] fitnessHistory;",
      "right" : "private double[] fitnessHistory;",
      "info" : "FieldDeclaration[8393-8466]:FieldDeclaration[8393-8466]"
    }, {
      "left" : "private int historySize;",
      "right" : "private int historySize;",
      "info" : "FieldDeclaration[8471-8544]:FieldDeclaration[8471-8544]"
    }, {
      "left" : "private final RandomGenerator random;",
      "right" : "private final RandomGenerator random;",
      "info" : "FieldDeclaration[8550-8616]:FieldDeclaration[8550-8616]"
    }, {
      "left" : "private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();",
      "right" : "private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();",
      "info" : "FieldDeclaration[8622-8734]:FieldDeclaration[8622-8734]"
    }, {
      "left" : "private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();",
      "right" : "private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();",
      "info" : "FieldDeclaration[8739-8857]:FieldDeclaration[8739-8857]"
    }, {
      "left" : "private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();",
      "right" : "private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();",
      "info" : "FieldDeclaration[8862-8978]:FieldDeclaration[8862-8978]"
    }, {
      "left" : "private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();",
      "right" : "private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();",
      "info" : "FieldDeclaration[8983-9095]:FieldDeclaration[8983-9095]"
    }, {
      "left" : "public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker)",
      "right" : "public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[9101-10522]:MethodDeclaration[9101-10522]"
    }, {
      "left" : "public List<Double> getStatisticsSigmaHistory()",
      "right" : "public List<Double> getStatisticsSigmaHistory()",
      "info" : "MethodDeclaration[10528-10678]:MethodDeclaration[10528-10678]"
    }, {
      "left" : "public List<RealMatrix> getStatisticsMeanHistory()",
      "right" : "public List<RealMatrix> getStatisticsMeanHistory()",
      "info" : "MethodDeclaration[10684-10835]:MethodDeclaration[10684-10835]"
    }, {
      "left" : "public List<Double> getStatisticsFitnessHistory()",
      "right" : "public List<Double> getStatisticsFitnessHistory()",
      "info" : "MethodDeclaration[10841-10997]:MethodDeclaration[10841-10997]"
    }, {
      "left" : "public List<RealMatrix> getStatisticsDHistory()",
      "right" : "public List<RealMatrix> getStatisticsDHistory()",
      "info" : "MethodDeclaration[11003-11145]:MethodDeclaration[11003-11145]"
    }, {
      "left" : "Sigma",
      "right" : "Sigma",
      "info" : "TypeDeclaration[11151-12379]:TypeDeclaration[11151-12379]"
    }, {
      "left" : "private final double[] sigma;",
      "right" : "private final double[] sigma;",
      "info" : "FieldDeclaration[11724-11782]:FieldDeclaration[11724-11782]"
    }, {
      "left" : "public Sigma(double[] s)\n            throws NotPositiveException",
      "right" : "public Sigma(double[] s)\n            throws NotPositiveException",
      "info" : "MethodDeclaration[11792-12230]:MethodDeclaration[11792-12230]"
    }, {
      "left" : "public double[] getSigma()",
      "right" : "public double[] getSigma()",
      "info" : "MethodDeclaration[12240-12373]:MethodDeclaration[12240-12373]"
    }, {
      "left" : "PopulationSize",
      "right" : "PopulationSize",
      "info" : "TypeDeclaration[12385-13499]:TypeDeclaration[12385-13499]"
    }, {
      "left" : "private final int lambda;",
      "right" : "private final int lambda;",
      "info" : "FieldDeclaration[12926-12983]:FieldDeclaration[12926-12983]"
    }, {
      "left" : "public PopulationSize(int size)\n            throws NotStrictlyPositiveException",
      "right" : "public PopulationSize(int size)\n            throws NotStrictlyPositiveException",
      "info" : "MethodDeclaration[12993-13350]:MethodDeclaration[12993-13350]"
    }, {
      "left" : "public int getPopulationSize()",
      "right" : "public int getPopulationSize()",
      "info" : "MethodDeclaration[13360-13493]:MethodDeclaration[13360-13493]"
    }, {
      "left" : "public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException",
      "right" : "public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException",
      "info" : "MethodDeclaration[13505-14396]:MethodDeclaration[13505-14396]"
    }, {
      "left" : "protected void parseOptimizationData(OptimizationData... optData)",
      "right" : "protected void parseOptimizationData(OptimizationData... optData)",
      "info" : "MethodDeclaration[21476-22472]:MethodDeclaration[21515-22511]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[22478-23164]:MethodDeclaration[22517-23203]"
    }, {
      "left" : "private void initializeCMA(double[] guess)",
      "right" : "private void initializeCMA(double[] guess)",
      "info" : "MethodDeclaration[23170-26418]:MethodDeclaration[23209-26457]"
    }, {
      "left" : "private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold)",
      "right" : "private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold)",
      "info" : "MethodDeclaration[26424-27346]:MethodDeclaration[26463-27385]"
    }, {
      "left" : "private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz)",
      "right" : "private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz)",
      "info" : "MethodDeclaration[27352-28475]:MethodDeclaration[27391-28514]"
    }, {
      "left" : "private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold)",
      "right" : "private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold)",
      "info" : "MethodDeclaration[28481-32453]:MethodDeclaration[28520-32492]"
    }, {
      "left" : "private void updateBD(double negccov)",
      "right" : "private void updateBD(double negccov)",
      "info" : "MethodDeclaration[32459-34010]:MethodDeclaration[32498-34049]"
    }, {
      "left" : "private static void push(double[] vals, double val)",
      "right" : "private static void push(double[] vals, double val)",
      "info" : "MethodDeclaration[34016-34359]:MethodDeclaration[34055-34398]"
    }, {
      "left" : "private int[] sortedIndices(final double[] doubles)",
      "right" : "private int[] sortedIndices(final double[] doubles)",
      "info" : "MethodDeclaration[34365-34978]:MethodDeclaration[34404-35017]"
    }, {
      "left" : "DoubleIndex",
      "right" : "DoubleIndex",
      "info" : "TypeDeclaration[34984-36251]:TypeDeclaration[35023-36290]"
    }, {
      "left" : "private final double value;",
      "right" : "private final double value;",
      "info" : "FieldDeclaration[35167-35227]:FieldDeclaration[35206-35266]"
    }, {
      "left" : "private final int index;",
      "right" : "private final int index;",
      "info" : "FieldDeclaration[35236-35300]:FieldDeclaration[35275-35339]"
    }, {
      "left" : "DoubleIndex(double value, int index)",
      "right" : "DoubleIndex(double value, int index)",
      "info" : "MethodDeclaration[35310-35537]:MethodDeclaration[35349-35576]"
    }, {
      "left" : "public int compareTo(DoubleIndex o)",
      "right" : "public int compareTo(DoubleIndex o)",
      "info" : "MethodDeclaration[35547-35674]:MethodDeclaration[35586-35713]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[35684-36025]:MethodDeclaration[35723-36064]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[36035-36245]:MethodDeclaration[36074-36284]"
    }, {
      "left" : "FitnessFunction",
      "right" : "FitnessFunction",
      "info" : "TypeDeclaration[36257-39591]:TypeDeclaration[36296-39630]"
    }, {
      "left" : "private double valueRange;",
      "right" : "private double valueRange;",
      "info" : "FieldDeclaration[36485-36573]:FieldDeclaration[36524-36612]"
    }, {
      "left" : "private final boolean isRepairMode;",
      "right" : "private final boolean isRepairMode;",
      "info" : "FieldDeclaration[36582-36751]:FieldDeclaration[36621-36790]"
    }, {
      "left" : "public FitnessFunction()",
      "right" : "public FitnessFunction()",
      "info" : "MethodDeclaration[36761-36902]:MethodDeclaration[36800-36941]"
    }, {
      "left" : "public double value(final double[] point)",
      "right" : "public double value(final double[] point)",
      "info" : "MethodDeclaration[36912-37505]:MethodDeclaration[36951-37544]"
    }, {
      "left" : "public boolean isFeasible(final double[] x)",
      "right" : "public boolean isFeasible(final double[] x)",
      "info" : "MethodDeclaration[37515-38095]:MethodDeclaration[37554-38134]"
    }, {
      "left" : "public void setValueRange(double valueRange)",
      "right" : "public void setValueRange(double valueRange)",
      "info" : "MethodDeclaration[38105-38289]:MethodDeclaration[38144-38328]"
    }, {
      "left" : "private double[] repair(final double[] x)",
      "right" : "private double[] repair(final double[] x)",
      "info" : "MethodDeclaration[38299-39037]:MethodDeclaration[38338-39076]"
    }, {
      "left" : "private double penalty(final double[] x, final double[] repaired)",
      "right" : "private double penalty(final double[] x, final double[] repaired)",
      "info" : "MethodDeclaration[39047-39585]:MethodDeclaration[39086-39624]"
    }, {
      "left" : "private static RealMatrix log(final RealMatrix m)",
      "right" : "private static RealMatrix log(final RealMatrix m)",
      "info" : "MethodDeclaration[39682-40186]:MethodDeclaration[39721-40225]"
    }, {
      "left" : "private static RealMatrix sqrt(final RealMatrix m)",
      "right" : "private static RealMatrix sqrt(final RealMatrix m)",
      "info" : "MethodDeclaration[40192-40701]:MethodDeclaration[40231-40740]"
    }, {
      "left" : "private static RealMatrix square(final RealMatrix m)",
      "right" : "private static RealMatrix square(final RealMatrix m)",
      "info" : "MethodDeclaration[40707-41236]:MethodDeclaration[40746-41275]"
    }, {
      "left" : "private static RealMatrix times(final RealMatrix m, final RealMatrix n)",
      "right" : "private static RealMatrix times(final RealMatrix m, final RealMatrix n)",
      "info" : "MethodDeclaration[41242-41829]:MethodDeclaration[41281-41868]"
    }, {
      "left" : "private static RealMatrix divide(final RealMatrix m, final RealMatrix n)",
      "right" : "private static RealMatrix divide(final RealMatrix m, final RealMatrix n)",
      "info" : "MethodDeclaration[41835-42416]:MethodDeclaration[41874-42455]"
    }, {
      "left" : "private static RealMatrix selectColumns(final RealMatrix m, final int[] cols)",
      "right" : "private static RealMatrix selectColumns(final RealMatrix m, final int[] cols)",
      "info" : "MethodDeclaration[42422-42956]:MethodDeclaration[42461-42995]"
    }, {
      "left" : "private static RealMatrix triu(final RealMatrix m, int k)",
      "right" : "private static RealMatrix triu(final RealMatrix m, int k)",
      "info" : "MethodDeclaration[42962-43497]:MethodDeclaration[43001-43536]"
    }, {
      "left" : "private static RealMatrix sumRows(final RealMatrix m)",
      "right" : "private static RealMatrix sumRows(final RealMatrix m)",
      "info" : "MethodDeclaration[43503-44029]:MethodDeclaration[43542-44068]"
    }, {
      "left" : "private static RealMatrix diag(final RealMatrix m)",
      "right" : "private static RealMatrix diag(final RealMatrix m)",
      "info" : "MethodDeclaration[44035-44859]:MethodDeclaration[44074-44898]"
    }, {
      "left" : "private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2)",
      "right" : "private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2)",
      "info" : "MethodDeclaration[44865-45310]:MethodDeclaration[44904-45349]"
    }, {
      "left" : "private static RealMatrix ones(int n, int m)",
      "right" : "private static RealMatrix ones(int n, int m)",
      "info" : "MethodDeclaration[45316-45675]:MethodDeclaration[45355-45714]"
    }, {
      "left" : "private static RealMatrix eye(int n, int m)",
      "right" : "private static RealMatrix eye(int n, int m)",
      "info" : "MethodDeclaration[45681-46124]:MethodDeclaration[45720-46163]"
    }, {
      "left" : "private static RealMatrix zeros(int n, int m)",
      "right" : "private static RealMatrix zeros(int n, int m)",
      "info" : "MethodDeclaration[46130-46358]:MethodDeclaration[46169-46397]"
    }, {
      "left" : "private static RealMatrix repmat(final RealMatrix mat, int n, int m)",
      "right" : "private static RealMatrix repmat(final RealMatrix mat, int n, int m)",
      "info" : "MethodDeclaration[46364-47026]:MethodDeclaration[46403-47065]"
    }, {
      "left" : "private static RealMatrix sequence(double start, double end, double step)",
      "right" : "private static RealMatrix sequence(double start, double end, double step)",
      "info" : "MethodDeclaration[47032-47562]:MethodDeclaration[47071-47601]"
    }, {
      "left" : "private static double max(final RealMatrix m)",
      "right" : "private static double max(final RealMatrix m)",
      "info" : "MethodDeclaration[47568-48050]:MethodDeclaration[47607-48089]"
    }, {
      "left" : "private static double min(final RealMatrix m)",
      "right" : "private static double min(final RealMatrix m)",
      "info" : "MethodDeclaration[48056-48537]:MethodDeclaration[48095-48576]"
    }, {
      "left" : "private static double max(final double[] m)",
      "right" : "private static double max(final double[] m)",
      "info" : "MethodDeclaration[48543-48874]:MethodDeclaration[48582-48913]"
    }, {
      "left" : "private static double min(final double[] m)",
      "right" : "private static double min(final double[] m)",
      "info" : "MethodDeclaration[48880-49210]:MethodDeclaration[48919-49249]"
    }, {
      "left" : "private static int[] inverse(final int[] indices)",
      "right" : "private static int[] inverse(final int[] indices)",
      "info" : "MethodDeclaration[49216-49569]:MethodDeclaration[49255-49608]"
    }, {
      "left" : "private static int[] reverse(final int[] indices)",
      "right" : "private static int[] reverse(final int[] indices)",
      "info" : "MethodDeclaration[49575-49948]:MethodDeclaration[49614-49987]"
    }, {
      "left" : "private double[] randn(int size)",
      "right" : "private double[] randn(int size)",
      "info" : "MethodDeclaration[49954-50273]:MethodDeclaration[49993-50312]"
    }, {
      "left" : "private RealMatrix randn1(int size, int popSize)",
      "right" : "private RealMatrix randn1(int size, int popSize)",
      "info" : "MethodDeclaration[50279-50760]:MethodDeclaration[50318-50799]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10187-10522]:Block[10187-10522]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[10197-10212]:SuperConstructorInvocation[10197-10212]"
    }, {
      "left" : "this.maxIterations = maxIterations;",
      "right" : "this.maxIterations = maxIterations;",
      "info" : "ExpressionStatement[10221-10256]:ExpressionStatement[10221-10256]"
    }, {
      "left" : "this.stopFitness = stopFitness;",
      "right" : "this.stopFitness = stopFitness;",
      "info" : "ExpressionStatement[10265-10296]:ExpressionStatement[10265-10296]"
    }, {
      "left" : "this.isActiveCMA = isActiveCMA;",
      "right" : "this.isActiveCMA = isActiveCMA;",
      "info" : "ExpressionStatement[10305-10336]:ExpressionStatement[10305-10336]"
    }, {
      "left" : "this.diagonalOnly = diagonalOnly;",
      "right" : "this.diagonalOnly = diagonalOnly;",
      "info" : "ExpressionStatement[10345-10378]:ExpressionStatement[10345-10378]"
    }, {
      "left" : "this.checkFeasableCount = checkFeasableCount;",
      "right" : "this.checkFeasableCount = checkFeasableCount;",
      "info" : "ExpressionStatement[10387-10432]:ExpressionStatement[10387-10432]"
    }, {
      "left" : "this.random = random;",
      "right" : "this.random = random;",
      "info" : "ExpressionStatement[10441-10462]:ExpressionStatement[10441-10462]"
    }, {
      "left" : "this.generateStatistics = generateStatistics;",
      "right" : "this.generateStatistics = generateStatistics;",
      "info" : "ExpressionStatement[10471-10516]:ExpressionStatement[10471-10516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10632-10678]:Block[10632-10678]"
    }, {
      "left" : "return statisticsSigmaHistory;",
      "right" : "return statisticsSigmaHistory;",
      "info" : "ReturnStatement[10642-10672]:ReturnStatement[10642-10672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10790-10835]:Block[10790-10835]"
    }, {
      "left" : "return statisticsMeanHistory;",
      "right" : "return statisticsMeanHistory;",
      "info" : "ReturnStatement[10800-10829]:ReturnStatement[10800-10829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10949-10997]:Block[10949-10997]"
    }, {
      "left" : "return statisticsFitnessHistory;",
      "right" : "return statisticsFitnessHistory;",
      "info" : "ReturnStatement[10959-10991]:ReturnStatement[10959-10991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11103-11145]:Block[11103-11145]"
    }, {
      "left" : "return statisticsDHistory;",
      "right" : "return statisticsDHistory;",
      "info" : "ReturnStatement[11113-11139]:ReturnStatement[11113-11139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12016-12230]:Block[12016-12230]"
    }, {
      "left" : "for (int i = 0; i < s.length; i++)",
      "right" : "for (int i = 0; i < s.length; i++)",
      "info" : "ForStatement[12030-12188]:ForStatement[12030-12188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12065-12188]:Block[12065-12188]"
    }, {
      "left" : "if (s[i] < 0)",
      "right" : "if (s[i] < 0)",
      "info" : "IfStatement[12083-12174]:IfStatement[12083-12174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12097-12174]:Block[12097-12174]"
    }, {
      "left" : "throw new NotPositiveException(s[i]);",
      "right" : "throw new NotPositiveException(s[i]);",
      "info" : "ThrowStatement[12119-12156]:ThrowStatement[12119-12156]"
    }, {
      "left" : "sigma = s.clone();",
      "right" : "sigma = s.clone();",
      "info" : "ExpressionStatement[12202-12220]:ExpressionStatement[12202-12220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12328-12373]:Block[12328-12373]"
    }, {
      "left" : "return sigma.clone();",
      "right" : "return sigma.clone();",
      "info" : "ReturnStatement[12342-12363]:ReturnStatement[12342-12363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13207-13350]:Block[13207-13350]"
    }, {
      "left" : "if (size <= 0)",
      "right" : "if (size <= 0)",
      "info" : "IfStatement[13221-13313]:IfStatement[13221-13313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13236-13313]:Block[13236-13313]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(size);",
      "right" : "throw new NotStrictlyPositiveException(size);",
      "info" : "ThrowStatement[13254-13299]:ThrowStatement[13254-13299]"
    }, {
      "left" : "lambda = size;",
      "right" : "lambda = size;",
      "info" : "ExpressionStatement[13326-13340]:ExpressionStatement[13326-13340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13455-13493]:Block[13455-13493]"
    }, {
      "left" : "return lambda;",
      "right" : "return lambda;",
      "info" : "ReturnStatement[13469-13483]:ReturnStatement[13469-13483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14295-14396]:Block[14295-14396]"
    }, {
      "left" : "return super.optimize(optData);",
      "right" : "return super.optimize(optData);",
      "info" : "ReturnStatement[14359-14390]:ReturnStatement[14359-14390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21860-22472]:Block[21899-22511]"
    }, {
      "left" : "super.parseOptimizationData(optData);",
      "right" : "super.parseOptimizationData(optData);",
      "info" : "ExpressionStatement[21924-21961]:ExpressionStatement[21963-22000]"
    }, {
      "left" : "for (OptimizationData data : optData)",
      "right" : "for (OptimizationData data : optData)",
      "info" : "EnhancedForStatement[22092-22438]:EnhancedForStatement[22131-22477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22130-22438]:Block[22169-22477]"
    }, {
      "left" : "if (data instanceof Sigma)",
      "right" : "if (data instanceof Sigma)",
      "info" : "IfStatement[22144-22268]:IfStatement[22183-22307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22171-22268]:Block[22210-22307]"
    }, {
      "left" : "inputSigma = ((Sigma) data).getSigma();",
      "right" : "inputSigma = ((Sigma) data).getSigma();",
      "info" : "ExpressionStatement[22189-22228]:ExpressionStatement[22228-22267]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22245-22254]:ContinueStatement[22284-22293]"
    }, {
      "left" : "if (data instanceof PopulationSize)",
      "right" : "if (data instanceof PopulationSize)",
      "info" : "IfStatement[22281-22428]:IfStatement[22320-22467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22317-22428]:Block[22356-22467]"
    }, {
      "left" : "lambda = ((PopulationSize) data).getPopulationSize();",
      "right" : "lambda = ((PopulationSize) data).getPopulationSize();",
      "info" : "ExpressionStatement[22335-22388]:ExpressionStatement[22374-22427]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22405-22414]:ContinueStatement[22444-22453]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[22448-22466]:ExpressionStatement[22487-22505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22602-23164]:Block[22641-23203]"
    }, {
      "left" : "final double[] init = getStartPoint();",
      "right" : "final double[] init = getStartPoint();",
      "info" : "VariableDeclarationStatement[22612-22650]:VariableDeclarationStatement[22651-22689]"
    }, {
      "left" : "final double[] lB = getLowerBound();",
      "right" : "final double[] lB = getLowerBound();",
      "info" : "VariableDeclarationStatement[22659-22695]:VariableDeclarationStatement[22698-22734]"
    }, {
      "left" : "final double[] uB = getUpperBound();",
      "right" : "final double[] uB = getUpperBound();",
      "info" : "VariableDeclarationStatement[22704-22740]:VariableDeclarationStatement[22743-22779]"
    }, {
      "left" : "if (inputSigma != null)",
      "right" : "if (inputSigma != null)",
      "info" : "IfStatement[22750-23158]:IfStatement[22789-23197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22774-23158]:Block[22813-23197]"
    }, {
      "left" : "if (inputSigma.length != init.length)",
      "right" : "if (inputSigma.length != init.length)",
      "info" : "IfStatement[22788-22927]:IfStatement[22827-22966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22826-22927]:Block[22865-22966]"
    }, {
      "left" : "throw new DimensionMismatchException(inputSigma.length, init.length);",
      "right" : "throw new DimensionMismatchException(inputSigma.length, init.length);",
      "info" : "ThrowStatement[22844-22913]:ThrowStatement[22883-22952]"
    }, {
      "left" : "for (int i = 0; i < init.length; i++)",
      "right" : "for (int i = 0; i < init.length; i++)",
      "info" : "ForStatement[22940-23148]:ForStatement[22979-23187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22978-23148]:Block[23017-23187]"
    }, {
      "left" : "if (inputSigma[i] > uB[i] - lB[i])",
      "right" : "if (inputSigma[i] > uB[i] - lB[i])",
      "info" : "IfStatement[22996-23134]:IfStatement[23035-23173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23031-23134]:Block[23070-23173]"
    }, {
      "left" : "throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);",
      "right" : "throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);",
      "info" : "ThrowStatement[23053-23116]:ThrowStatement[23092-23155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23368-26418]:Block[23407-26457]"
    }, {
      "left" : "if (lambda <= 0)",
      "right" : "if (lambda <= 0)",
      "info" : "IfStatement[23378-23466]:IfStatement[23417-23505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23395-23466]:Block[23434-23505]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(lambda);",
      "right" : "throw new NotStrictlyPositiveException(lambda);",
      "info" : "ThrowStatement[23409-23456]:ThrowStatement[23448-23495]"
    }, {
      "left" : "final double[][] sigmaArray = new double[guess.length][1];",
      "right" : "final double[][] sigmaArray = new double[guess.length][1];",
      "info" : "VariableDeclarationStatement[23503-23561]:VariableDeclarationStatement[23542-23600]"
    }, {
      "left" : "for (int i = 0; i < guess.length; i++)",
      "right" : "for (int i = 0; i < guess.length; i++)",
      "info" : "ForStatement[23570-23666]:ForStatement[23609-23705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23609-23666]:Block[23648-23705]"
    }, {
      "left" : "sigmaArray[i][0] = inputSigma[i];",
      "right" : "sigmaArray[i][0] = inputSigma[i];",
      "info" : "ExpressionStatement[23623-23656]:ExpressionStatement[23662-23695]"
    }, {
      "left" : "final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",
      "right" : "final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",
      "info" : "VariableDeclarationStatement[23675-23746]:VariableDeclarationStatement[23714-23785]"
    }, {
      "left" : "sigma = max(insigma);",
      "right" : "sigma = max(insigma);",
      "info" : "ExpressionStatement[23755-23776]:ExpressionStatement[23794-23815]"
    }, {
      "left" : "stopTolUpX = 1e3 * max(insigma);",
      "right" : "stopTolUpX = 1e3 * max(insigma);",
      "info" : "ExpressionStatement[23859-23891]:ExpressionStatement[23898-23930]"
    }, {
      "left" : "stopTolX = 1e-11 * max(insigma);",
      "right" : "stopTolX = 1e-11 * max(insigma);",
      "info" : "ExpressionStatement[23900-23932]:ExpressionStatement[23939-23971]"
    }, {
      "left" : "stopTolFun = 1e-12;",
      "right" : "stopTolFun = 1e-12;",
      "info" : "ExpressionStatement[23941-23960]:ExpressionStatement[23980-23999]"
    }, {
      "left" : "stopTolHistFun = 1e-13;",
      "right" : "stopTolHistFun = 1e-13;",
      "info" : "ExpressionStatement[23969-23992]:ExpressionStatement[24008-24031]"
    }, {
      "left" : "mu = lambda / 2;",
      "right" : "mu = lambda / 2;",
      "info" : "ExpressionStatement[24054-24070]:ExpressionStatement[24093-24109]"
    }, {
      "left" : "logMu2 = Math.log(mu + 0.5);",
      "right" : "logMu2 = Math.log(mu + 0.5);",
      "info" : "ExpressionStatement[24125-24153]:ExpressionStatement[24164-24192]"
    }, {
      "left" : "weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",
      "right" : "weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",
      "info" : "ExpressionStatement[24162-24233]:ExpressionStatement[24201-24272]"
    }, {
      "left" : "double sumw = 0;",
      "right" : "double sumw = 0;",
      "info" : "VariableDeclarationStatement[24242-24258]:VariableDeclarationStatement[24281-24297]"
    }, {
      "left" : "double sumwq = 0;",
      "right" : "double sumwq = 0;",
      "info" : "VariableDeclarationStatement[24267-24284]:VariableDeclarationStatement[24306-24323]"
    }, {
      "left" : "for (int i = 0; i < mu; i++)",
      "right" : "for (int i = 0; i < mu; i++)",
      "info" : "ForStatement[24293-24431]:ForStatement[24332-24470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24322-24431]:Block[24361-24470]"
    }, {
      "left" : "double w = weights.getEntry(i, 0);",
      "right" : "double w = weights.getEntry(i, 0);",
      "info" : "VariableDeclarationStatement[24336-24370]:VariableDeclarationStatement[24375-24409]"
    }, {
      "left" : "sumw += w;",
      "right" : "sumw += w;",
      "info" : "ExpressionStatement[24383-24393]:ExpressionStatement[24422-24432]"
    }, {
      "left" : "sumwq += w * w;",
      "right" : "sumwq += w * w;",
      "info" : "ExpressionStatement[24406-24421]:ExpressionStatement[24445-24460]"
    }, {
      "left" : "weights = weights.scalarMultiply(1 / sumw);",
      "right" : "weights = weights.scalarMultiply(1 / sumw);",
      "info" : "ExpressionStatement[24440-24483]:ExpressionStatement[24479-24522]"
    }, {
      "left" : "mueff = sumw * sumw / sumwq;",
      "right" : "mueff = sumw * sumw / sumwq;",
      "info" : "ExpressionStatement[24492-24520]:ExpressionStatement[24531-24559]"
    }, {
      "left" : "cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);",
      "right" : "cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);",
      "info" : "ExpressionStatement[24635-24722]:ExpressionStatement[24674-24761]"
    }, {
      "left" : "cs = (mueff + 2) / (dimension + mueff + 3.);",
      "right" : "cs = (mueff + 2) / (dimension + mueff + 3.);",
      "info" : "ExpressionStatement[24731-24775]:ExpressionStatement[24770-24814]"
    }, {
      "left" : "damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /\n                                               (dimension + 1)) - 1)) *\n            Math.max(0.3,\n                     1 - dimension / (1e-6 + maxIterations)) + cs;",
      "right" : "damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /\n                                               (dimension + 1)) - 1)) *\n            Math.max(0.3,\n                     1 - dimension / (1e-6 + maxIterations)) + cs;",
      "info" : "ExpressionStatement[24784-25001]:ExpressionStatement[24823-25040]"
    }, {
      "left" : "ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);",
      "right" : "ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);",
      "info" : "ExpressionStatement[25029-25089]:ExpressionStatement[25068-25128]"
    }, {
      "left" : "ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                          ((dimension + 2) * (dimension + 2) + mueff));",
      "right" : "ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                          ((dimension + 2) * (dimension + 2) + mueff));",
      "info" : "ExpressionStatement[25098-25228]:ExpressionStatement[25137-25267]"
    }, {
      "left" : "ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",
      "right" : "ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",
      "info" : "ExpressionStatement[25237-25291]:ExpressionStatement[25276-25330]"
    }, {
      "left" : "ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",
      "right" : "ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",
      "info" : "ExpressionStatement[25300-25364]:ExpressionStatement[25339-25403]"
    }, {
      "left" : "chiN = Math.sqrt(dimension) *\n            (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));",
      "right" : "chiN = Math.sqrt(dimension) *\n            (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));",
      "info" : "ExpressionStatement[25373-25494]:ExpressionStatement[25412-25533]"
    }, {
      "left" : "xmean = MatrixUtils.createColumnRealMatrix(guess);",
      "right" : "xmean = MatrixUtils.createColumnRealMatrix(guess);",
      "info" : "ExpressionStatement[25570-25620]:ExpressionStatement[25609-25659]"
    }, {
      "left" : "diagD = insigma.scalarMultiply(1 / sigma);",
      "right" : "diagD = insigma.scalarMultiply(1 / sigma);",
      "info" : "ExpressionStatement[25652-25694]:ExpressionStatement[25691-25733]"
    }, {
      "left" : "diagC = square(diagD);",
      "right" : "diagC = square(diagD);",
      "info" : "ExpressionStatement[25703-25725]:ExpressionStatement[25742-25764]"
    }, {
      "left" : "pc = zeros(dimension, 1);",
      "right" : "pc = zeros(dimension, 1);",
      "info" : "ExpressionStatement[25734-25759]:ExpressionStatement[25773-25798]"
    }, {
      "left" : "ps = zeros(dimension, 1);",
      "right" : "ps = zeros(dimension, 1);",
      "info" : "ExpressionStatement[25803-25828]:ExpressionStatement[25842-25867]"
    }, {
      "left" : "normps = ps.getFrobeniusNorm();",
      "right" : "normps = ps.getFrobeniusNorm();",
      "info" : "ExpressionStatement[25872-25903]:ExpressionStatement[25911-25942]"
    }, {
      "left" : "B = eye(dimension, dimension);",
      "right" : "B = eye(dimension, dimension);",
      "info" : "ExpressionStatement[25913-25943]:ExpressionStatement[25952-25982]"
    }, {
      "left" : "D = ones(dimension, 1);",
      "right" : "D = ones(dimension, 1);",
      "info" : "ExpressionStatement[25952-25975]:ExpressionStatement[25991-26014]"
    }, {
      "left" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "right" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "info" : "ExpressionStatement[26018-26073]:ExpressionStatement[26057-26112]"
    }, {
      "left" : "C = B.multiply(diag(square(D)).multiply(B.transpose()));",
      "right" : "C = B.multiply(diag(square(D)).multiply(B.transpose()));",
      "info" : "ExpressionStatement[26082-26138]:ExpressionStatement[26121-26177]"
    }, {
      "left" : "historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);",
      "right" : "historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);",
      "info" : "ExpressionStatement[26161-26225]:ExpressionStatement[26200-26264]"
    }, {
      "left" : "fitnessHistory = new double[historySize];",
      "right" : "fitnessHistory = new double[historySize];",
      "info" : "ExpressionStatement[26234-26275]:ExpressionStatement[26273-26314]"
    }, {
      "left" : "for (int i = 0; i < historySize; i++)",
      "right" : "for (int i = 0; i < historySize; i++)",
      "info" : "ForStatement[26313-26412]:ForStatement[26352-26451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26351-26412]:Block[26390-26451]"
    }, {
      "left" : "fitnessHistory[i] = Double.MAX_VALUE;",
      "right" : "fitnessHistory[i] = Double.MAX_VALUE;",
      "info" : "ExpressionStatement[26365-26402]:ExpressionStatement[26404-26441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26795-27346]:Block[26834-27385]"
    }, {
      "left" : "ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        Math.sqrt(cs * (2 - cs) * mueff)));",
      "right" : "ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        Math.sqrt(cs * (2 - cs) * mueff)));",
      "info" : "ExpressionStatement[26805-26950]:ExpressionStatement[26844-26989]"
    }, {
      "left" : "normps = ps.getFrobeniusNorm();",
      "right" : "normps = ps.getFrobeniusNorm();",
      "info" : "ExpressionStatement[26959-26990]:ExpressionStatement[26998-27029]"
    }, {
      "left" : "final boolean hsig = normps /\n            Math.sqrt(1 - Math.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);",
      "right" : "final boolean hsig = normps /\n            Math.sqrt(1 - Math.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);",
      "info" : "VariableDeclarationStatement[26999-27145]:VariableDeclarationStatement[27038-27184]"
    }, {
      "left" : "pc = pc.scalarMultiply(1 - cc);",
      "right" : "pc = pc.scalarMultiply(1 - cc);",
      "info" : "ExpressionStatement[27154-27185]:ExpressionStatement[27193-27224]"
    }, {
      "left" : "if (hsig)",
      "right" : "if (hsig)",
      "info" : "IfStatement[27194-27319]:IfStatement[27233-27358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27204-27319]:Block[27243-27358]"
    }, {
      "left" : "pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));",
      "right" : "pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));",
      "info" : "ExpressionStatement[27218-27309]:ExpressionStatement[27257-27348]"
    }, {
      "left" : "return hsig;",
      "right" : "return hsig;",
      "info" : "ReturnStatement[27328-27340]:ReturnStatement[27367-27379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27727-28475]:Block[27766-28514]"
    }, {
      "left" : "double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);",
      "right" : "double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);",
      "info" : "VariableDeclarationStatement[27780-27832]:VariableDeclarationStatement[27819-27871]"
    }, {
      "left" : "oldFac += 1 - ccov1Sep - ccovmuSep;",
      "right" : "oldFac += 1 - ccov1Sep - ccovmuSep;",
      "info" : "ExpressionStatement[27841-27876]:ExpressionStatement[27880-27915]"
    }, {
      "left" : "diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));",
      "right" : "diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));",
      "info" : "ExpressionStatement[27885-28156]:ExpressionStatement[27924-28195]"
    }, {
      "left" : "diagD = sqrt(diagC);",
      "right" : "diagD = sqrt(diagC);",
      "info" : "ExpressionStatement[28165-28185]:ExpressionStatement[28204-28224]"
    }, {
      "left" : "if (diagonalOnly > 1 &&\n            iterations > diagonalOnly)",
      "right" : "if (diagonalOnly > 1 &&\n            iterations > diagonalOnly)",
      "info" : "IfStatement[28213-28469]:IfStatement[28252-28508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28276-28469]:Block[28315-28508]"
    }, {
      "left" : "diagonalOnly = 0;",
      "right" : "diagonalOnly = 0;",
      "info" : "ExpressionStatement[28340-28357]:ExpressionStatement[28379-28396]"
    }, {
      "left" : "B = eye(dimension, dimension);",
      "right" : "B = eye(dimension, dimension);",
      "info" : "ExpressionStatement[28370-28400]:ExpressionStatement[28409-28439]"
    }, {
      "left" : "BD = diag(diagD);",
      "right" : "BD = diag(diagD);",
      "info" : "ExpressionStatement[28413-28430]:ExpressionStatement[28452-28469]"
    }, {
      "left" : "C = diag(diagC);",
      "right" : "C = diag(diagC);",
      "info" : "ExpressionStatement[28443-28459]:ExpressionStatement[28482-28498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29163-32453]:Block[29202-32492]"
    }, {
      "left" : "double negccov = 0;",
      "right" : "double negccov = 0;",
      "info" : "VariableDeclarationStatement[29173-29192]:VariableDeclarationStatement[29212-29231]"
    }, {
      "left" : "if (ccov1 + ccovmu > 0)",
      "right" : "if (ccov1 + ccovmu > 0)",
      "info" : "IfStatement[29201-32420]:IfStatement[29240-32459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29225-32420]:Block[29264-32459]"
    }, {
      "left" : "final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma);",
      "right" : "final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma);",
      "info" : "VariableDeclarationStatement[29239-29345]:VariableDeclarationStatement[29278-29384]"
    }, {
      "left" : "final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1);",
      "right" : "final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1);",
      "info" : "VariableDeclarationStatement[29383-29475]:VariableDeclarationStatement[29422-29514]"
    }, {
      "left" : "double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);",
      "right" : "double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);",
      "info" : "VariableDeclarationStatement[29554-29603]:VariableDeclarationStatement[29593-29642]"
    }, {
      "left" : "oldFac += 1 - ccov1 - ccovmu;",
      "right" : "oldFac += 1 - ccov1 - ccovmu;",
      "info" : "ExpressionStatement[29616-29645]:ExpressionStatement[29655-29684]"
    }, {
      "left" : "if (isActiveCMA)",
      "right" : "if (isActiveCMA)",
      "info" : "IfStatement[29658-32410]:IfStatement[29697-32449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29675-31998]:Block[29714-32037]"
    }, {
      "left" : "negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (Math.pow(dimension + 2, 1.5) + 2 * mueff);",
      "right" : "negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (Math.pow(dimension + 2, 1.5) + 2 * mueff);",
      "info" : "ExpressionStatement[29749-29852]:ExpressionStatement[29788-29891]"
    }, {
      "left" : "final double negminresidualvariance = 0.66;",
      "right" : "final double negminresidualvariance = 0.66;",
      "info" : "VariableDeclarationStatement[29977-30020]:VariableDeclarationStatement[30016-30059]"
    }, {
      "left" : "final double negalphaold = 0.5;",
      "right" : "final double negalphaold = 0.5;",
      "info" : "VariableDeclarationStatement[30095-30126]:VariableDeclarationStatement[30134-30165]"
    }, {
      "left" : "final int[] arReverseIndex = reverse(arindex);",
      "right" : "final int[] arReverseIndex = reverse(arindex);",
      "info" : "VariableDeclarationStatement[30217-30263]:VariableDeclarationStatement[30256-30302]"
    }, {
      "left" : "RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",
      "right" : "RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",
      "info" : "VariableDeclarationStatement[30280-30358]:VariableDeclarationStatement[30319-30397]"
    }, {
      "left" : "RealMatrix arnorms = sqrt(sumRows(square(arzneg)));",
      "right" : "RealMatrix arnorms = sqrt(sumRows(square(arzneg)));",
      "info" : "VariableDeclarationStatement[30375-30426]:VariableDeclarationStatement[30414-30465]"
    }, {
      "left" : "final int[] idxnorms = sortedIndices(arnorms.getRow(0));",
      "right" : "final int[] idxnorms = sortedIndices(arnorms.getRow(0));",
      "info" : "VariableDeclarationStatement[30443-30499]:VariableDeclarationStatement[30482-30538]"
    }, {
      "left" : "final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",
      "right" : "final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",
      "info" : "VariableDeclarationStatement[30516-30582]:VariableDeclarationStatement[30555-30621]"
    }, {
      "left" : "final int[] idxReverse = reverse(idxnorms);",
      "right" : "final int[] idxReverse = reverse(idxnorms);",
      "info" : "VariableDeclarationStatement[30599-30642]:VariableDeclarationStatement[30638-30681]"
    }, {
      "left" : "final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",
      "right" : "final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",
      "info" : "VariableDeclarationStatement[30659-30728]:VariableDeclarationStatement[30698-30767]"
    }, {
      "left" : "arnorms = divide(arnormsReverse, arnormsSorted);",
      "right" : "arnorms = divide(arnormsReverse, arnormsSorted);",
      "info" : "ExpressionStatement[30745-30793]:ExpressionStatement[30784-30832]"
    }, {
      "left" : "final int[] idxInv = inverse(idxnorms);",
      "right" : "final int[] idxInv = inverse(idxnorms);",
      "info" : "VariableDeclarationStatement[30810-30849]:VariableDeclarationStatement[30849-30888]"
    }, {
      "left" : "final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",
      "right" : "final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",
      "info" : "VariableDeclarationStatement[30866-30927]:VariableDeclarationStatement[30905-30966]"
    }, {
      "left" : "final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);",
      "right" : "final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);",
      "info" : "VariableDeclarationStatement[30999-31127]:VariableDeclarationStatement[31038-31166]"
    }, {
      "left" : "if (negccov > negcovMax)",
      "right" : "if (negccov > negcovMax)",
      "info" : "IfStatement[31144-31229]:IfStatement[31183-31268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31169-31229]:Block[31208-31268]"
    }, {
      "left" : "negccov = negcovMax;",
      "right" : "negccov = negcovMax;",
      "info" : "ExpressionStatement[31191-31211]:ExpressionStatement[31230-31250]"
    }, {
      "left" : "arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",
      "right" : "arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",
      "info" : "ExpressionStatement[31246-31303]:ExpressionStatement[31285-31342]"
    }, {
      "left" : "final RealMatrix artmp = BD.multiply(arzneg);",
      "right" : "final RealMatrix artmp = BD.multiply(arzneg);",
      "info" : "VariableDeclarationStatement[31320-31365]:VariableDeclarationStatement[31359-31404]"
    }, {
      "left" : "final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());",
      "right" : "final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());",
      "info" : "VariableDeclarationStatement[31382-31464]:VariableDeclarationStatement[31421-31503]"
    }, {
      "left" : "oldFac += negalphaold * negccov;",
      "right" : "oldFac += negalphaold * negccov;",
      "info" : "ExpressionStatement[31481-31513]:ExpressionStatement[31520-31552]"
    }, {
      "left" : "C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));",
      "right" : "C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));",
      "info" : "ExpressionStatement[31530-31984]:ExpressionStatement[31569-32023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32004-32410]:Block[32043-32449]"
    }, {
      "left" : "C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));",
      "right" : "C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));",
      "info" : "ExpressionStatement[32079-32396]:ExpressionStatement[32118-32435]"
    }, {
      "left" : "updateBD(negccov);",
      "right" : "updateBD(negccov);",
      "info" : "ExpressionStatement[32429-32447]:ExpressionStatement[32468-32486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32600-34010]:Block[32639-34049]"
    }, {
      "left" : "if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1)",
      "right" : "if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1)",
      "info" : "IfStatement[32610-34004]:IfStatement[32649-34043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32728-34004]:Block[32767-34043]"
    }, {
      "left" : "C = triu(C, 0).add(triu(C, 1).transpose());",
      "right" : "C = triu(C, 0).add(triu(C, 1).transpose());",
      "info" : "ExpressionStatement[32775-32818]:ExpressionStatement[32814-32857]"
    }, {
      "left" : "final EigenDecomposition eig = new EigenDecomposition(C);",
      "right" : "final EigenDecomposition eig = new EigenDecomposition(C);",
      "info" : "VariableDeclarationStatement[32890-32947]:VariableDeclarationStatement[32929-32986]"
    }, {
      "left" : "B = eig.getV();",
      "right" : "B = eig.getV();",
      "info" : "ExpressionStatement[32960-32975]:ExpressionStatement[32999-33014]"
    }, {
      "left" : "D = eig.getD();",
      "right" : "D = eig.getD();",
      "info" : "ExpressionStatement[33039-33054]:ExpressionStatement[33078-33093]"
    }, {
      "left" : "diagD = diag(D);",
      "right" : "diagD = diag(D);",
      "info" : "ExpressionStatement[33067-33083]:ExpressionStatement[33106-33122]"
    }, {
      "left" : "if (min(diagD) <= 0)",
      "right" : "if (min(diagD) <= 0)",
      "info" : "IfStatement[33096-33533]:IfStatement[33135-33572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33117-33533]:Block[33156-33572]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[33135-33313]:ForStatement[33174-33352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33171-33313]:Block[33210-33352]"
    }, {
      "left" : "if (diagD.getEntry(i, 0) < 0)",
      "right" : "if (diagD.getEntry(i, 0) < 0)",
      "info" : "IfStatement[33193-33295]:IfStatement[33232-33334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33223-33295]:Block[33262-33334]"
    }, {
      "left" : "diagD.setEntry(i, 0, 0);",
      "right" : "diagD.setEntry(i, 0, 0);",
      "info" : "ExpressionStatement[33249-33273]:ExpressionStatement[33288-33312]"
    }, {
      "left" : "final double tfac = max(diagD) / 1e14;",
      "right" : "final double tfac = max(diagD) / 1e14;",
      "info" : "VariableDeclarationStatement[33330-33368]:VariableDeclarationStatement[33369-33407]"
    }, {
      "left" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "right" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[33385-33443]:ExpressionStatement[33424-33482]"
    }, {
      "left" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "right" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[33460-33519]:ExpressionStatement[33499-33558]"
    }, {
      "left" : "if (max(diagD) > 1e14 * min(diagD))",
      "right" : "if (max(diagD) > 1e14 * min(diagD))",
      "info" : "IfStatement[33546-33816]:IfStatement[33585-33855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33582-33816]:Block[33621-33855]"
    }, {
      "left" : "final double tfac = max(diagD) / 1e14 - min(diagD);",
      "right" : "final double tfac = max(diagD) / 1e14 - min(diagD);",
      "info" : "VariableDeclarationStatement[33600-33651]:VariableDeclarationStatement[33639-33690]"
    }, {
      "left" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "right" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[33668-33726]:ExpressionStatement[33707-33765]"
    }, {
      "left" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "right" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[33743-33802]:ExpressionStatement[33782-33841]"
    }, {
      "left" : "diagC = diag(C);",
      "right" : "diagC = diag(C);",
      "info" : "ExpressionStatement[33829-33845]:ExpressionStatement[33868-33884]"
    }, {
      "left" : "diagD = sqrt(diagD);",
      "right" : "diagD = sqrt(diagD);",
      "info" : "ExpressionStatement[33858-33878]:ExpressionStatement[33897-33917]"
    }, {
      "left" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "right" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "info" : "ExpressionStatement[33929-33984]:ExpressionStatement[33968-34023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34236-34359]:Block[34275-34398]"
    }, {
      "left" : "for (int i = vals.length-1; i > 0; i--)",
      "right" : "for (int i = vals.length-1; i > 0; i--)",
      "info" : "ForStatement[34246-34330]:ForStatement[34285-34369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34286-34330]:Block[34325-34369]"
    }, {
      "left" : "vals[i] = vals[i-1];",
      "right" : "vals[i] = vals[i-1];",
      "info" : "ExpressionStatement[34300-34320]:ExpressionStatement[34339-34359]"
    }, {
      "left" : "vals[0] = val;",
      "right" : "vals[0] = val;",
      "info" : "ExpressionStatement[34339-34353]:ExpressionStatement[34378-34392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34585-34978]:Block[34624-35017]"
    }, {
      "left" : "final DoubleIndex[] dis = new DoubleIndex[doubles.length];",
      "right" : "final DoubleIndex[] dis = new DoubleIndex[doubles.length];",
      "info" : "VariableDeclarationStatement[34595-34653]:VariableDeclarationStatement[34634-34692]"
    }, {
      "left" : "for (int i = 0; i < doubles.length; i++)",
      "right" : "for (int i = 0; i < doubles.length; i++)",
      "info" : "ForStatement[34662-34767]:ForStatement[34701-34806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34703-34767]:Block[34742-34806]"
    }, {
      "left" : "dis[i] = new DoubleIndex(doubles[i], i);",
      "right" : "dis[i] = new DoubleIndex(doubles[i], i);",
      "info" : "ExpressionStatement[34717-34757]:ExpressionStatement[34756-34796]"
    }, {
      "left" : "Arrays.sort(dis);",
      "right" : "Arrays.sort(dis);",
      "info" : "ExpressionStatement[34776-34793]:ExpressionStatement[34815-34832]"
    }, {
      "left" : "final int[] indices = new int[doubles.length];",
      "right" : "final int[] indices = new int[doubles.length];",
      "info" : "VariableDeclarationStatement[34802-34848]:VariableDeclarationStatement[34841-34887]"
    }, {
      "left" : "for (int i = 0; i < doubles.length; i++)",
      "right" : "for (int i = 0; i < doubles.length; i++)",
      "info" : "ForStatement[34857-34948]:ForStatement[34896-34987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34898-34948]:Block[34937-34987]"
    }, {
      "left" : "indices[i] = dis[i].index;",
      "right" : "indices[i] = dis[i].index;",
      "info" : "ExpressionStatement[34912-34938]:ExpressionStatement[34951-34977]"
    }, {
      "left" : "return indices;",
      "right" : "return indices;",
      "info" : "ReturnStatement[34957-34972]:ReturnStatement[34996-35011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35462-35537]:Block[35501-35576]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[35476-35495]:ExpressionStatement[35515-35534]"
    }, {
      "left" : "this.index = index;",
      "right" : "this.index = index;",
      "info" : "ExpressionStatement[35508-35527]:ExpressionStatement[35547-35566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35612-35674]:Block[35651-35713]"
    }, {
      "left" : "return Double.compare(value, o.value);",
      "right" : "return Double.compare(value, o.value);",
      "info" : "ReturnStatement[35626-35664]:ReturnStatement[35665-35703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35767-36025]:Block[35806-36064]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[35782-35845]:IfStatement[35821-35884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35801-35845]:Block[35840-35884]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35819-35831]:ReturnStatement[35858-35870]"
    }, {
      "left" : "if (other instanceof DoubleIndex)",
      "right" : "if (other instanceof DoubleIndex)",
      "info" : "IfStatement[35859-35988]:IfStatement[35898-36027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35893-35988]:Block[35932-36027]"
    }, {
      "left" : "return Double.compare(value, ((DoubleIndex) other).value) == 0;",
      "right" : "return Double.compare(value, ((DoubleIndex) other).value) == 0;",
      "info" : "ReturnStatement[35911-35974]:ReturnStatement[35950-36013]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36002-36015]:ReturnStatement[36041-36054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36104-36245]:Block[36143-36284]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(value);",
      "right" : "long bits = Double.doubleToLongBits(value);",
      "info" : "VariableDeclarationStatement[36118-36161]:VariableDeclarationStatement[36157-36200]"
    }, {
      "left" : "return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);",
      "right" : "return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);",
      "info" : "ReturnStatement[36174-36235]:ReturnStatement[36213-36274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36830-36902]:Block[36869-36941]"
    }, {
      "left" : "valueRange = 1;",
      "right" : "valueRange = 1;",
      "info" : "ExpressionStatement[36844-36859]:ExpressionStatement[36883-36898]"
    }, {
      "left" : "isRepairMode = true;",
      "right" : "isRepairMode = true;",
      "info" : "ExpressionStatement[36872-36892]:ExpressionStatement[36911-36931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37104-37505]:Block[37143-37544]"
    }, {
      "left" : "double value;",
      "right" : "double value;",
      "info" : "VariableDeclarationStatement[37118-37131]:VariableDeclarationStatement[37157-37170]"
    }, {
      "left" : "if (isRepairMode)",
      "right" : "if (isRepairMode)",
      "info" : "IfStatement[37144-37447]:IfStatement[37183-37486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37162-37352]:Block[37201-37391]"
    }, {
      "left" : "double[] repaired = repair(point);",
      "right" : "double[] repaired = repair(point);",
      "info" : "VariableDeclarationStatement[37180-37214]:VariableDeclarationStatement[37219-37253]"
    }, {
      "left" : "value = CMAESOptimizer.this.computeObjectiveValue(repaired) +\n                    penalty(point, repaired);",
      "right" : "value = CMAESOptimizer.this.computeObjectiveValue(repaired) +\n                    penalty(point, repaired);",
      "info" : "ExpressionStatement[37231-37338]:ExpressionStatement[37270-37377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37358-37447]:Block[37397-37486]"
    }, {
      "left" : "value = CMAESOptimizer.this.computeObjectiveValue(point);",
      "right" : "value = CMAESOptimizer.this.computeObjectiveValue(point);",
      "info" : "ExpressionStatement[37376-37433]:ExpressionStatement[37415-37472]"
    }, {
      "left" : "return isMinimize ? value : -value;",
      "right" : "return isMinimize ? value : -value;",
      "info" : "ReturnStatement[37460-37495]:ReturnStatement[37499-37534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37681-38095]:Block[37720-38134]"
    }, {
      "left" : "final double[] lB = CMAESOptimizer.this.getLowerBound();",
      "right" : "final double[] lB = CMAESOptimizer.this.getLowerBound();",
      "info" : "VariableDeclarationStatement[37695-37751]:VariableDeclarationStatement[37734-37790]"
    }, {
      "left" : "final double[] uB = CMAESOptimizer.this.getUpperBound();",
      "right" : "final double[] uB = CMAESOptimizer.this.getUpperBound();",
      "info" : "VariableDeclarationStatement[37764-37820]:VariableDeclarationStatement[37803-37859]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[37834-38060]:ForStatement[37873-38099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37869-38060]:Block[37908-38099]"
    }, {
      "left" : "if (x[i] < lB[i])",
      "right" : "if (x[i] < lB[i])",
      "info" : "IfStatement[37887-37958]:IfStatement[37926-37997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37905-37958]:Block[37944-37997]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37927-37940]:ReturnStatement[37966-37979]"
    }, {
      "left" : "if (x[i] > uB[i])",
      "right" : "if (x[i] > uB[i])",
      "info" : "IfStatement[37975-38046]:IfStatement[38014-38085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37993-38046]:Block[38032-38085]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38015-38028]:ReturnStatement[38054-38067]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38073-38085]:ReturnStatement[38112-38124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38236-38289]:Block[38275-38328]"
    }, {
      "left" : "this.valueRange = valueRange;",
      "right" : "this.valueRange = valueRange;",
      "info" : "ExpressionStatement[38250-38279]:ExpressionStatement[38289-38318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38491-39037]:Block[38530-39076]"
    }, {
      "left" : "final double[] lB = CMAESOptimizer.this.getLowerBound();",
      "right" : "final double[] lB = CMAESOptimizer.this.getLowerBound();",
      "info" : "VariableDeclarationStatement[38505-38561]:VariableDeclarationStatement[38544-38600]"
    }, {
      "left" : "final double[] uB = CMAESOptimizer.this.getUpperBound();",
      "right" : "final double[] uB = CMAESOptimizer.this.getUpperBound();",
      "info" : "VariableDeclarationStatement[38574-38630]:VariableDeclarationStatement[38613-38669]"
    }, {
      "left" : "final double[] repaired = new double[x.length];",
      "right" : "final double[] repaired = new double[x.length];",
      "info" : "VariableDeclarationStatement[38644-38691]:VariableDeclarationStatement[38683-38730]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[38704-38998]:ForStatement[38743-39037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38739-38998]:Block[38778-39037]"
    }, {
      "left" : "if (x[i] < lB[i])",
      "right" : "if (x[i] < lB[i])",
      "info" : "IfStatement[38757-38984]:IfStatement[38796-39023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38775-38835]:Block[38814-38874]"
    }, {
      "left" : "repaired[i] = lB[i];",
      "right" : "repaired[i] = lB[i];",
      "info" : "ExpressionStatement[38797-38817]:ExpressionStatement[38836-38856]"
    }, {
      "left" : "if (x[i] > uB[i])",
      "right" : "if (x[i] > uB[i])",
      "info" : "IfStatement[38841-38984]:IfStatement[38880-39023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38859-38919]:Block[38898-38958]"
    }, {
      "left" : "repaired[i] = uB[i];",
      "right" : "repaired[i] = uB[i];",
      "info" : "ExpressionStatement[38881-38901]:ExpressionStatement[38920-38940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38925-38984]:Block[38964-39023]"
    }, {
      "left" : "repaired[i] = x[i];",
      "right" : "repaired[i] = x[i];",
      "info" : "ExpressionStatement[38947-38966]:ExpressionStatement[38986-39005]"
    }, {
      "left" : "return repaired;",
      "right" : "return repaired;",
      "info" : "ReturnStatement[39011-39027]:ReturnStatement[39050-39066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39321-39585]:Block[39360-39624]"
    }, {
      "left" : "double penalty = 0;",
      "right" : "double penalty = 0;",
      "info" : "VariableDeclarationStatement[39335-39354]:VariableDeclarationStatement[39374-39393]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[39367-39523]:ForStatement[39406-39562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39402-39523]:Block[39441-39562]"
    }, {
      "left" : "double diff = Math.abs(x[i] - repaired[i]);",
      "right" : "double diff = Math.abs(x[i] - repaired[i]);",
      "info" : "VariableDeclarationStatement[39420-39463]:VariableDeclarationStatement[39459-39502]"
    }, {
      "left" : "penalty += diff * valueRange;",
      "right" : "penalty += diff * valueRange;",
      "info" : "ExpressionStatement[39480-39509]:ExpressionStatement[39519-39548]"
    }, {
      "left" : "return isMinimize ? penalty : -penalty;",
      "right" : "return isMinimize ? penalty : -penalty;",
      "info" : "ReturnStatement[39536-39575]:ReturnStatement[39575-39614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39845-40186]:Block[39884-40225]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[39855-39932]:VariableDeclarationStatement[39894-39971]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[39941-40129]:ForStatement[39980-40168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39987-40129]:Block[40026-40168]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[40001-40119]:ForStatement[40040-40158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40050-40119]:Block[40089-40158]"
    }, {
      "left" : "d[r][c] = Math.log(m.getEntry(r, c));",
      "right" : "d[r][c] = Math.log(m.getEntry(r, c));",
      "info" : "ExpressionStatement[40068-40105]:ExpressionStatement[40107-40144]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[40138-40180]:ReturnStatement[40177-40219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40359-40701]:Block[40398-40740]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[40369-40446]:VariableDeclarationStatement[40408-40485]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[40455-40644]:ForStatement[40494-40683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40501-40644]:Block[40540-40683]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[40515-40634]:ForStatement[40554-40673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40564-40634]:Block[40603-40673]"
    }, {
      "left" : "d[r][c] = Math.sqrt(m.getEntry(r, c));",
      "right" : "d[r][c] = Math.sqrt(m.getEntry(r, c));",
      "info" : "ExpressionStatement[40582-40620]:ExpressionStatement[40621-40659]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[40653-40695]:ReturnStatement[40692-40734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40871-41236]:Block[40910-41275]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[40881-40958]:VariableDeclarationStatement[40920-40997]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[40967-41179]:ForStatement[41006-41218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41013-41179]:Block[41052-41218]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[41027-41169]:ForStatement[41066-41208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41076-41169]:Block[41115-41208]"
    }, {
      "left" : "double e = m.getEntry(r, c);",
      "right" : "double e = m.getEntry(r, c);",
      "info" : "VariableDeclarationStatement[41094-41122]:VariableDeclarationStatement[41133-41161]"
    }, {
      "left" : "d[r][c] = e * e;",
      "right" : "d[r][c] = e * e;",
      "info" : "ExpressionStatement[41139-41155]:ExpressionStatement[41178-41194]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[41188-41230]:ReturnStatement[41227-41269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41479-41829]:Block[41518-41868]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[41489-41566]:VariableDeclarationStatement[41528-41605]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[41575-41772]:ForStatement[41614-41811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41621-41772]:Block[41660-41811]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[41635-41762]:ForStatement[41674-41801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41684-41762]:Block[41723-41801]"
    }, {
      "left" : "d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",
      "right" : "d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",
      "info" : "ExpressionStatement[41702-41748]:ExpressionStatement[41741-41787]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[41781-41823]:ReturnStatement[41820-41862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42066-42416]:Block[42105-42455]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[42076-42153]:VariableDeclarationStatement[42115-42192]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[42162-42359]:ForStatement[42201-42398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42208-42359]:Block[42247-42398]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[42222-42349]:ForStatement[42261-42388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42271-42349]:Block[42310-42388]"
    }, {
      "left" : "d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",
      "right" : "d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",
      "info" : "ExpressionStatement[42289-42335]:ExpressionStatement[42328-42374]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[42368-42410]:ReturnStatement[42407-42449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42641-42956]:Block[42680-42995]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][cols.length];",
      "right" : "final double[][] d = new double[m.getRowDimension()][cols.length];",
      "info" : "VariableDeclarationStatement[42651-42717]:VariableDeclarationStatement[42690-42756]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[42726-42899]:ForStatement[42765-42938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42772-42899]:Block[42811-42938]"
    }, {
      "left" : "for (int c = 0; c < cols.length; c++)",
      "right" : "for (int c = 0; c < cols.length; c++)",
      "info" : "ForStatement[42786-42889]:ForStatement[42825-42928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42824-42889]:Block[42863-42928]"
    }, {
      "left" : "d[r][c] = m.getEntry(r, cols[c]);",
      "right" : "d[r][c] = m.getEntry(r, cols[c]);",
      "info" : "ExpressionStatement[42842-42875]:ExpressionStatement[42881-42914]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[42908-42950]:ReturnStatement[42947-42989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43149-43497]:Block[43188-43536]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[43159-43236]:VariableDeclarationStatement[43198-43275]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[43245-43440]:ForStatement[43284-43479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43291-43440]:Block[43330-43479]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[43305-43430]:ForStatement[43344-43469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43354-43430]:Block[43393-43469]"
    }, {
      "left" : "d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",
      "right" : "d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",
      "info" : "ExpressionStatement[43372-43416]:ExpressionStatement[43411-43455]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[43449-43491]:ReturnStatement[43488-43530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43664-44029]:Block[43703-44068]"
    }, {
      "left" : "final double[][] d = new double[1][m.getColumnDimension()];",
      "right" : "final double[][] d = new double[1][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[43674-43733]:VariableDeclarationStatement[43713-43772]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[43742-43972]:ForStatement[43781-44011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43791-43972]:Block[43830-44011]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[43805-43820]:VariableDeclarationStatement[43844-43859]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[43833-43935]:ForStatement[43872-43974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43879-43935]:Block[43918-43974]"
    }, {
      "left" : "sum += m.getEntry(r, c);",
      "right" : "sum += m.getEntry(r, c);",
      "info" : "ExpressionStatement[43897-43921]:ExpressionStatement[43936-43960]"
    }, {
      "left" : "d[0][c] = sum;",
      "right" : "d[0][c] = sum;",
      "info" : "ExpressionStatement[43948-43962]:ExpressionStatement[43987-44001]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[43981-44023]:ReturnStatement[44020-44062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44277-44859]:Block[44316-44898]"
    }, {
      "left" : "if (m.getColumnDimension() == 1)",
      "right" : "if (m.getColumnDimension() == 1)",
      "info" : "IfStatement[44287-44853]:IfStatement[44326-44892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44320-44591]:Block[44359-44630]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];",
      "right" : "final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];",
      "info" : "VariableDeclarationStatement[44334-44408]:VariableDeclarationStatement[44373-44447]"
    }, {
      "left" : "for (int i = 0; i < m.getRowDimension(); i++)",
      "right" : "for (int i = 0; i < m.getRowDimension(); i++)",
      "info" : "ForStatement[44421-44526]:ForStatement[44460-44565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44467-44526]:Block[44506-44565]"
    }, {
      "left" : "d[i][i] = m.getEntry(i, 0);",
      "right" : "d[i][i] = m.getEntry(i, 0);",
      "info" : "ExpressionStatement[44485-44512]:ExpressionStatement[44524-44551]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[44539-44581]:ReturnStatement[44578-44620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44597-44853]:Block[44636-44892]"
    }, {
      "left" : "final double[][] d = new double[m.getRowDimension()][1];",
      "right" : "final double[][] d = new double[m.getRowDimension()][1];",
      "info" : "VariableDeclarationStatement[44611-44667]:VariableDeclarationStatement[44650-44706]"
    }, {
      "left" : "for (int i = 0; i < m.getColumnDimension(); i++)",
      "right" : "for (int i = 0; i < m.getColumnDimension(); i++)",
      "info" : "ForStatement[44680-44788]:ForStatement[44719-44827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44729-44788]:Block[44768-44827]"
    }, {
      "left" : "d[i][0] = m.getEntry(i, i);",
      "right" : "d[i][0] = m.getEntry(i, i);",
      "info" : "ExpressionStatement[44747-44774]:ExpressionStatement[44786-44813]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[44801-44843]:ReturnStatement[44840-44882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45180-45310]:Block[45219-45349]"
    }, {
      "left" : "for (int i = 0; i < m1.getRowDimension(); i++)",
      "right" : "for (int i = 0; i < m1.getRowDimension(); i++)",
      "info" : "ForStatement[45190-45304]:ForStatement[45229-45343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45237-45304]:Block[45276-45343]"
    }, {
      "left" : "m2.setEntry(i, col2, m1.getEntry(i, col1));",
      "right" : "m2.setEntry(i, col2, m1.getEntry(i, col1));",
      "info" : "ExpressionStatement[45251-45294]:ExpressionStatement[45290-45333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45488-45675]:Block[45527-45714]"
    }, {
      "left" : "final double[][] d = new double[n][m];",
      "right" : "final double[][] d = new double[n][m];",
      "info" : "VariableDeclarationStatement[45498-45536]:VariableDeclarationStatement[45537-45575]"
    }, {
      "left" : "for (int r = 0; r < n; r++)",
      "right" : "for (int r = 0; r < n; r++)",
      "info" : "ForStatement[45545-45618]:ForStatement[45584-45657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45573-45618]:Block[45612-45657]"
    }, {
      "left" : "Arrays.fill(d[r], 1);",
      "right" : "Arrays.fill(d[r], 1);",
      "info" : "ExpressionStatement[45587-45608]:ExpressionStatement[45626-45647]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[45627-45669]:ReturnStatement[45666-45708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45903-46124]:Block[45942-46163]"
    }, {
      "left" : "final double[][] d = new double[n][m];",
      "right" : "final double[][] d = new double[n][m];",
      "info" : "VariableDeclarationStatement[45913-45951]:VariableDeclarationStatement[45952-45990]"
    }, {
      "left" : "for (int r = 0; r < n; r++)",
      "right" : "for (int r = 0; r < n; r++)",
      "info" : "ForStatement[45960-46067]:ForStatement[45999-46106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45988-46067]:Block[46027-46106]"
    }, {
      "left" : "if (r < m)",
      "right" : "if (r < m)",
      "info" : "IfStatement[46002-46057]:IfStatement[46041-46096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46013-46057]:Block[46052-46096]"
    }, {
      "left" : "d[r][r] = 1;",
      "right" : "d[r][r] = 1;",
      "info" : "ExpressionStatement[46031-46043]:ExpressionStatement[46070-46082]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[46076-46118]:ReturnStatement[46115-46157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46304-46358]:Block[46343-46397]"
    }, {
      "left" : "return new Array2DRowRealMatrix(n, m);",
      "right" : "return new Array2DRowRealMatrix(n, m);",
      "info" : "ReturnStatement[46314-46352]:ReturnStatement[46353-46391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46646-47026]:Block[46685-47065]"
    }, {
      "left" : "final int rd = mat.getRowDimension();",
      "right" : "final int rd = mat.getRowDimension();",
      "info" : "VariableDeclarationStatement[46656-46693]:VariableDeclarationStatement[46695-46732]"
    }, {
      "left" : "final int cd = mat.getColumnDimension();",
      "right" : "final int cd = mat.getColumnDimension();",
      "info" : "VariableDeclarationStatement[46702-46742]:VariableDeclarationStatement[46741-46781]"
    }, {
      "left" : "final double[][] d = new double[n * rd][m * cd];",
      "right" : "final double[][] d = new double[n * rd][m * cd];",
      "info" : "VariableDeclarationStatement[46751-46799]:VariableDeclarationStatement[46790-46838]"
    }, {
      "left" : "for (int r = 0; r < n * rd; r++)",
      "right" : "for (int r = 0; r < n * rd; r++)",
      "info" : "ForStatement[46808-46969]:ForStatement[46847-47008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46841-46969]:Block[46880-47008]"
    }, {
      "left" : "for (int c = 0; c < m * cd; c++)",
      "right" : "for (int c = 0; c < m * cd; c++)",
      "info" : "ForStatement[46855-46959]:ForStatement[46894-46998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46888-46959]:Block[46927-46998]"
    }, {
      "left" : "d[r][c] = mat.getEntry(r % rd, c % cd);",
      "right" : "d[r][c] = mat.getEntry(r % rd, c % cd);",
      "info" : "ExpressionStatement[46906-46945]:ExpressionStatement[46945-46984]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[46978-47020]:ReturnStatement[47017-47059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47258-47562]:Block[47297-47601]"
    }, {
      "left" : "final int size = (int) ((end - start) / step + 1);",
      "right" : "final int size = (int) ((end - start) / step + 1);",
      "info" : "VariableDeclarationStatement[47268-47318]:VariableDeclarationStatement[47307-47357]"
    }, {
      "left" : "final double[][] d = new double[size][1];",
      "right" : "final double[][] d = new double[size][1];",
      "info" : "VariableDeclarationStatement[47327-47368]:VariableDeclarationStatement[47366-47407]"
    }, {
      "left" : "double value = start;",
      "right" : "double value = start;",
      "info" : "VariableDeclarationStatement[47377-47398]:VariableDeclarationStatement[47416-47437]"
    }, {
      "left" : "for (int r = 0; r < size; r++)",
      "right" : "for (int r = 0; r < size; r++)",
      "info" : "ForStatement[47407-47505]:ForStatement[47446-47544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47438-47505]:Block[47477-47544]"
    }, {
      "left" : "d[r][0] = value;",
      "right" : "d[r][0] = value;",
      "info" : "ExpressionStatement[47452-47468]:ExpressionStatement[47491-47507]"
    }, {
      "left" : "value += step;",
      "right" : "value += step;",
      "info" : "ExpressionStatement[47481-47495]:ExpressionStatement[47520-47534]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[47514-47556]:ReturnStatement[47553-47595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47717-48050]:Block[47756-48089]"
    }, {
      "left" : "double max = -Double.MAX_VALUE;",
      "right" : "double max = -Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[47727-47758]:VariableDeclarationStatement[47766-47797]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[47767-48024]:ForStatement[47806-48063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47813-48024]:Block[47852-48063]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[47827-48014]:ForStatement[47866-48053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47876-48014]:Block[47915-48053]"
    }, {
      "left" : "double e = m.getEntry(r, c);",
      "right" : "double e = m.getEntry(r, c);",
      "info" : "VariableDeclarationStatement[47894-47922]:VariableDeclarationStatement[47933-47961]"
    }, {
      "left" : "if (max < e)",
      "right" : "if (max < e)",
      "info" : "IfStatement[47939-48000]:IfStatement[47978-48039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47952-48000]:Block[47991-48039]"
    }, {
      "left" : "max = e;",
      "right" : "max = e;",
      "info" : "ExpressionStatement[47974-47982]:ExpressionStatement[48013-48021]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[48033-48044]:ReturnStatement[48072-48083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48205-48537]:Block[48244-48576]"
    }, {
      "left" : "double min = Double.MAX_VALUE;",
      "right" : "double min = Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[48215-48245]:VariableDeclarationStatement[48254-48284]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[48254-48511]:ForStatement[48293-48550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48300-48511]:Block[48339-48550]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[48314-48501]:ForStatement[48353-48540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48363-48501]:Block[48402-48540]"
    }, {
      "left" : "double e = m.getEntry(r, c);",
      "right" : "double e = m.getEntry(r, c);",
      "info" : "VariableDeclarationStatement[48381-48409]:VariableDeclarationStatement[48420-48448]"
    }, {
      "left" : "if (min > e)",
      "right" : "if (min > e)",
      "info" : "IfStatement[48426-48487]:IfStatement[48465-48526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48439-48487]:Block[48478-48526]"
    }, {
      "left" : "min = e;",
      "right" : "min = e;",
      "info" : "ExpressionStatement[48461-48469]:ExpressionStatement[48500-48508]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[48520-48531]:ReturnStatement[48559-48570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48680-48874]:Block[48719-48913]"
    }, {
      "left" : "double max = -Double.MAX_VALUE;",
      "right" : "double max = -Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[48690-48721]:VariableDeclarationStatement[48729-48760]"
    }, {
      "left" : "for (int r = 0; r < m.length; r++)",
      "right" : "for (int r = 0; r < m.length; r++)",
      "info" : "ForStatement[48730-48848]:ForStatement[48769-48887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48765-48848]:Block[48804-48887]"
    }, {
      "left" : "if (max < m[r])",
      "right" : "if (max < m[r])",
      "info" : "IfStatement[48779-48838]:IfStatement[48818-48877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48795-48838]:Block[48834-48877]"
    }, {
      "left" : "max = m[r];",
      "right" : "max = m[r];",
      "info" : "ExpressionStatement[48813-48824]:ExpressionStatement[48852-48863]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[48857-48868]:ReturnStatement[48896-48907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49017-49210]:Block[49056-49249]"
    }, {
      "left" : "double min = Double.MAX_VALUE;",
      "right" : "double min = Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[49027-49057]:VariableDeclarationStatement[49066-49096]"
    }, {
      "left" : "for (int r = 0; r < m.length; r++)",
      "right" : "for (int r = 0; r < m.length; r++)",
      "info" : "ForStatement[49066-49184]:ForStatement[49105-49223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49101-49184]:Block[49140-49223]"
    }, {
      "left" : "if (min > m[r])",
      "right" : "if (min > m[r])",
      "info" : "IfStatement[49115-49174]:IfStatement[49154-49213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49131-49174]:Block[49170-49213]"
    }, {
      "left" : "min = m[r];",
      "right" : "min = m[r];",
      "info" : "ExpressionStatement[49149-49160]:ExpressionStatement[49188-49199]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[49193-49204]:ReturnStatement[49232-49243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49385-49569]:Block[49424-49608]"
    }, {
      "left" : "final int[] inverse = new int[indices.length];",
      "right" : "final int[] inverse = new int[indices.length];",
      "info" : "VariableDeclarationStatement[49395-49441]:VariableDeclarationStatement[49434-49480]"
    }, {
      "left" : "for (int i = 0; i < indices.length; i++)",
      "right" : "for (int i = 0; i < indices.length; i++)",
      "info" : "ForStatement[49450-49539]:ForStatement[49489-49578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49491-49539]:Block[49530-49578]"
    }, {
      "left" : "inverse[indices[i]] = i;",
      "right" : "inverse[indices[i]] = i;",
      "info" : "ExpressionStatement[49505-49529]:ExpressionStatement[49544-49568]"
    }, {
      "left" : "return inverse;",
      "right" : "return inverse;",
      "info" : "ReturnStatement[49548-49563]:ReturnStatement[49587-49602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49743-49948]:Block[49782-49987]"
    }, {
      "left" : "final int[] reverse = new int[indices.length];",
      "right" : "final int[] reverse = new int[indices.length];",
      "info" : "VariableDeclarationStatement[49753-49799]:VariableDeclarationStatement[49792-49838]"
    }, {
      "left" : "for (int i = 0; i < indices.length; i++)",
      "right" : "for (int i = 0; i < indices.length; i++)",
      "info" : "ForStatement[49808-49918]:ForStatement[49847-49957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49849-49918]:Block[49888-49957]"
    }, {
      "left" : "reverse[i] = indices[indices.length - i - 1];",
      "right" : "reverse[i] = indices[indices.length - i - 1];",
      "info" : "ExpressionStatement[49863-49908]:ExpressionStatement[49902-49947]"
    }, {
      "left" : "return reverse;",
      "right" : "return reverse;",
      "info" : "ReturnStatement[49927-49942]:ReturnStatement[49966-49981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50098-50273]:Block[50137-50312]"
    }, {
      "left" : "final double[] randn = new double[size];",
      "right" : "final double[] randn = new double[size];",
      "info" : "VariableDeclarationStatement[50108-50148]:VariableDeclarationStatement[50147-50187]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[50157-50245]:ForStatement[50196-50284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50188-50245]:Block[50227-50284]"
    }, {
      "left" : "randn[i] = random.nextGaussian();",
      "right" : "randn[i] = random.nextGaussian();",
      "info" : "ExpressionStatement[50202-50235]:ExpressionStatement[50241-50274]"
    }, {
      "left" : "return randn;",
      "right" : "return randn;",
      "info" : "ReturnStatement[50254-50267]:ReturnStatement[50293-50306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50484-50760]:Block[50523-50799]"
    }, {
      "left" : "final double[][] d = new double[size][popSize];",
      "right" : "final double[][] d = new double[size][popSize];",
      "info" : "VariableDeclarationStatement[50494-50541]:VariableDeclarationStatement[50533-50580]"
    }, {
      "left" : "for (int r = 0; r < size; r++)",
      "right" : "for (int r = 0; r < size; r++)",
      "info" : "ForStatement[50550-50703]:ForStatement[50589-50742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50581-50703]:Block[50620-50742]"
    }, {
      "left" : "for (int c = 0; c < popSize; c++)",
      "right" : "for (int c = 0; c < popSize; c++)",
      "info" : "ForStatement[50595-50693]:ForStatement[50634-50732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50629-50693]:Block[50668-50732]"
    }, {
      "left" : "d[r][c] = random.nextGaussian();",
      "right" : "d[r][c] = random.nextGaussian();",
      "info" : "ExpressionStatement[50647-50679]:ExpressionStatement[50686-50718]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[50712-50754]:ReturnStatement[50751-50793]"
    } ]
  },
  "interFileMappings" : { }
}