{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SubTypeValidator",
      "right" : "SubTypeValidator",
      "info" : "TypeDeclaration[305-4961]:TypeDeclaration[305-5195]"
    }, {
      "left" : "protected final static String PREFIX_SPRING = \"org.springframework.\";",
      "right" : "protected final static String PREFIX_SPRING = \"org.springframework.\";",
      "info" : "FieldDeclaration[573-642]:FieldDeclaration[573-642]"
    }, {
      "left" : "protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;",
      "right" : "protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;",
      "info" : "FieldDeclaration[649-869]:FieldDeclaration[721-941]"
    }, {
      "left" : "protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;",
      "right" : "protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;",
      "info" : "FieldDeclaration[2597-2758]:FieldDeclaration[2669-2830]"
    }, {
      "left" : "private final static SubTypeValidator instance = new SubTypeValidator();",
      "right" : "private final static SubTypeValidator instance = new SubTypeValidator();",
      "info" : "FieldDeclaration[2764-2836]:FieldDeclaration[2836-2908]"
    }, {
      "left" : "protected SubTypeValidator()",
      "right" : "protected SubTypeValidator()",
      "info" : "MethodDeclaration[2842-2874]:MethodDeclaration[2914-2946]"
    }, {
      "left" : "public static SubTypeValidator instance()",
      "right" : "public static SubTypeValidator instance()",
      "info" : "MethodDeclaration[2880-2942]:MethodDeclaration[2952-3014]"
    }, {
      "left" : "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
      "right" : "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
      "info" : "MethodDeclaration[2948-4959]:MethodDeclaration[3020-5193]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[881-2591]:Block[953-2663]"
    }, {
      "left" : "Set<String> s = new HashSet<String>();",
      "right" : "Set<String> s = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[891-929]:VariableDeclarationStatement[963-1001]"
    }, {
      "left" : "s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");",
      "right" : "s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");",
      "info" : "ExpressionStatement[1040-1108]:ExpressionStatement[1112-1180]"
    }, {
      "left" : "s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
      "right" : "s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
      "info" : "ExpressionStatement[1117-1189]:ExpressionStatement[1189-1261]"
    }, {
      "left" : "s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
      "right" : "s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
      "info" : "ExpressionStatement[1198-1267]:ExpressionStatement[1270-1339]"
    }, {
      "left" : "s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");",
      "right" : "s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");",
      "info" : "ExpressionStatement[1276-1349]:ExpressionStatement[1348-1421]"
    }, {
      "left" : "s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
      "right" : "s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
      "info" : "ExpressionStatement[1358-1412]:ExpressionStatement[1430-1484]"
    }, {
      "left" : "s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
      "right" : "s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
      "info" : "ExpressionStatement[1421-1472]:ExpressionStatement[1493-1544]"
    }, {
      "left" : "s.add(\"org.springframework.beans.factory.ObjectFactory\");",
      "right" : "s.add(\"org.springframework.beans.factory.ObjectFactory\");",
      "info" : "ExpressionStatement[1481-1538]:ExpressionStatement[1553-1610]"
    }, {
      "left" : "s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
      "right" : "s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
      "info" : "ExpressionStatement[1547-1615]:ExpressionStatement[1619-1687]"
    }, {
      "left" : "s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
      "right" : "s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
      "info" : "ExpressionStatement[1624-1675]:ExpressionStatement[1696-1747]"
    }, {
      "left" : "s.add(\"com.sun.rowset.JdbcRowSetImpl\");",
      "right" : "s.add(\"com.sun.rowset.JdbcRowSetImpl\");",
      "info" : "ExpressionStatement[1754-1793]:ExpressionStatement[1826-1865]"
    }, {
      "left" : "s.add(\"java.util.logging.FileHandler\");",
      "right" : "s.add(\"java.util.logging.FileHandler\");",
      "info" : "ExpressionStatement[1843-1882]:ExpressionStatement[1915-1954]"
    }, {
      "left" : "s.add(\"java.rmi.server.UnicastRemoteObject\");",
      "right" : "s.add(\"java.rmi.server.UnicastRemoteObject\");",
      "info" : "ExpressionStatement[1891-1936]:ExpressionStatement[1963-2008]"
    }, {
      "left" : "s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
      "right" : "s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
      "info" : "ExpressionStatement[2095-2169]:ExpressionStatement[2167-2241]"
    }, {
      "left" : "s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");",
      "right" : "s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");",
      "info" : "ExpressionStatement[2391-2445]:ExpressionStatement[2463-2517]"
    }, {
      "left" : "s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
      "right" : "s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
      "info" : "ExpressionStatement[2454-2513]:ExpressionStatement[2526-2585]"
    }, {
      "left" : "DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
      "right" : "DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
      "info" : "ExpressionStatement[2523-2585]:ExpressionStatement[2595-2657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2871-2874]:Block[2943-2946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2922-2942]:Block[2994-3014]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[2924-2940]:ReturnStatement[2996-3012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3052-4959]:Block[3124-5193]"
    }, {
      "left" : "final Class<?> raw = type.getRawClass();",
      "right" : "final Class<?> raw = type.getRawClass();",
      "info" : "VariableDeclarationStatement[3189-3229]:VariableDeclarationStatement[3261-3301]"
    }, {
      "left" : "String full = raw.getName();",
      "right" : "String full = raw.getName();",
      "info" : "VariableDeclarationStatement[3238-3266]:VariableDeclarationStatement[3310-3338]"
    }, {
      "left" : "main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            if (raw.isInterface()) {\n                ;\n            } else if (full.startsWith(PREFIX_SPRING)) {\n                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        break main_check;\n                    }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource \n                }\n            }\n            return;\n        } while (false);",
      "right" : "main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            if (raw.isInterface()) {\n                ;\n            } else if (full.startsWith(PREFIX_SPRING)) {\n                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        break main_check;\n                    }\n                }\n            } else if (full.startsWith(PREFIX_C3P0)) {\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource \n                if (full.endsWith(\"DataSource\")) {\n                    break main_check;\n                }\n            }\n            return;\n        } while (false);",
      "info" : "LabeledStatement[3276-4800]:LabeledStatement[3348-5034]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[3296-4800]:DoStatement[3368-5034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3299-4785]:Block[3371-5019]"
    }, {
      "left" : "if (_cfgIllegalClassNames.contains(full))",
      "right" : "if (_cfgIllegalClassNames.contains(full))",
      "info" : "IfStatement[3313-3393]:IfStatement[3385-3465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3355-3393]:Block[3427-3465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3373-3379]:BreakStatement[3445-3451]"
    }, {
      "left" : "if (raw.isInterface())",
      "right" : "if (raw.isInterface())",
      "info" : "IfStatement[3636-4755]:IfStatement[3708-4989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3659-3692]:Block[3731-3764]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[3677-3678]:EmptyStatement[3749-3750]"
    }, {
      "left" : "if (full.startsWith(PREFIX_SPRING))",
      "right" : "if (full.startsWith(PREFIX_SPRING))",
      "info" : "IfStatement[3698-4755]:IfStatement[3770-4989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3734-4755]:Block[3806-4421]"
    }, {
      "left" : "for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass())",
      "right" : "for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass())",
      "info" : "ForStatement[3752-4741]:ForStatement[3824-4407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3843-4741]:Block[3915-4407]"
    }, {
      "left" : "String name = cls.getSimpleName();",
      "right" : "String name = cls.getSimpleName();",
      "info" : "VariableDeclarationStatement[3865-3899]:VariableDeclarationStatement[3937-3971]"
    }, {
      "left" : "if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name))",
      "right" : "if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name))",
      "info" : "IfStatement[4028-4317]:IfStatement[4100-4389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4252-4317]:Block[4324-4389]"
    }, {
      "left" : "break main_check;",
      "right" : "break main_check;",
      "info" : "BreakStatement[4278-4295]:BreakStatement[4350-4367]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4768-4775]:ReturnStatement[5002-5009]"
    }, {
      "left" : "throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));",
      "right" : "throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));",
      "info" : "ThrowStatement[4810-4953]:ThrowStatement[5044-5187]"
    } ]
  },
  "interFileMappings" : { }
}