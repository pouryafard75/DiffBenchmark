{
  "matchedElements" : [
 {
    "left" : "class : CoalesceVariableNames",
    "right" : "class : CoalesceVariableNames",
    "info" : "TypeDeclaration[1816-15778]:TypeDeclaration[1816-15905]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[2633-2673]:FieldDeclaration[2633-2673]"
  }, {
    "left" : "colorings",
    "right" : "colorings",
    "info" : "FieldDeclaration[2676-2732]:FieldDeclaration[2676-2732]"
  }, {
    "left" : "usePseudoNames",
    "right" : "usePseudoNames",
    "info" : "FieldDeclaration[2735-2772]:FieldDeclaration[2735-2772]"
  }, {
    "left" : "coloringTieBreaker",
    "right" : "coloringTieBreaker",
    "info" : "FieldDeclaration[2776-2949]:FieldDeclaration[2776-2949]"
  }, {
    "left" : "public compare(v1 , v2 ) : int",
    "right" : "public compare(v1 , v2 ) : int",
    "info" : "MethodDeclaration[2868-2944]:MethodDeclaration[2868-2944]"
  }, {
    "left" : "package CoalesceVariableNames(compiler , usePseudoNames boolean)",
    "right" : "package CoalesceVariableNames(compiler , usePseudoNames boolean)",
    "info" : "MethodDeclaration[2953-3281]:MethodDeclaration[2953-3281]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[3285-3397]:MethodDeclaration[3285-3397]"
  }, {
    "left" : "public enterScope(t ) : void",
    "right" : "public enterScope(t ) : void",
    "info" : "MethodDeclaration[3401-4587]:MethodDeclaration[3401-4714]"
  }, {
    "left" : "public exitScope(t ) : void",
    "right" : "public exitScope(t ) : void",
    "info" : "MethodDeclaration[4591-4717]:MethodDeclaration[4718-4844]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[4721-6699]:MethodDeclaration[4848-6826]"
  }, {
    "left" : "private computeVariableNamesInterferenceGraph(t , cfg , escaped ) : ",
    "right" : "private computeVariableNamesInterferenceGraph(t , cfg , escaped ) : ",
    "info" : "MethodDeclaration[6703-9874]:MethodDeclaration[6830-10001]"
  }, {
    "left" : "private checkRanges(rangesToCheck , root ) : void",
    "right" : "private checkRanges(rangesToCheck , root ) : void",
    "info" : "MethodDeclaration[9878-10622]:MethodDeclaration[10005-10749]"
  }, {
    "left" : "class : CombinedCfgNodeLiveRangeChecker",
    "right" : "class : CombinedCfgNodeLiveRangeChecker",
    "info" : "TypeDeclaration[10626-11388]:TypeDeclaration[10753-11515]"
  }, {
    "left" : "callbacks",
    "right" : "callbacks",
    "info" : "FieldDeclaration[10933-10993]:FieldDeclaration[11060-11120]"
  }, {
    "left" : "package CombinedCfgNodeLiveRangeChecker(callbacks ...)",
    "right" : "package CombinedCfgNodeLiveRangeChecker(callbacks ...)",
    "info" : "MethodDeclaration[10999-11128]:MethodDeclaration[11126-11255]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[11134-11384]:MethodDeclaration[11261-11511]"
  }, {
    "left" : "class : CombinedLiveRangeChecker",
    "right" : "class : CombinedLiveRangeChecker",
    "info" : "TypeDeclaration[11392-12592]:TypeDeclaration[11519-12719]"
  }, {
    "left" : "callback1",
    "right" : "callback1",
    "info" : "FieldDeclaration[11688-11729]:FieldDeclaration[11815-11856]"
  }, {
    "left" : "callback2",
    "right" : "callback2",
    "info" : "FieldDeclaration[11734-11775]:FieldDeclaration[11861-11902]"
  }, {
    "left" : "package CombinedLiveRangeChecker(callback1 , callback2 )",
    "right" : "package CombinedLiveRangeChecker(callback1 , callback2 )",
    "info" : "MethodDeclaration[11781-11954]:MethodDeclaration[11908-12081]"
  }, {
    "left" : "public shouldVisit(n ) : boolean",
    "right" : "public shouldVisit(n ) : boolean",
    "info" : "MethodDeclaration[11960-12163]:MethodDeclaration[12087-12290]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[12169-12320]:MethodDeclaration[12296-12447]"
  }, {
    "left" : "package connectIfCrossed(interferenceGraph ) : void",
    "right" : "package connectIfCrossed(interferenceGraph ) : void",
    "info" : "MethodDeclaration[12326-12588]:MethodDeclaration[12453-12715]"
  }, {
    "left" : "private removeVarDeclaration(name ) : void",
    "right" : "private removeVarDeclaration(name ) : void",
    "info" : "MethodDeclaration[12596-13857]:MethodDeclaration[12723-13984]"
  }, {
    "left" : "class : LiveRangeChecker",
    "right" : "class : LiveRangeChecker",
    "info" : "TypeDeclaration[13861-15776]:TypeDeclaration[13988-15903]"
  }, {
    "left" : "defFound",
    "right" : "defFound",
    "info" : "FieldDeclaration[13952-13977]:FieldDeclaration[14079-14104]"
  }, {
    "left" : "crossed",
    "right" : "crossed",
    "info" : "FieldDeclaration[13982-14006]:FieldDeclaration[14109-14133]"
  }, {
    "left" : "def",
    "right" : "def",
    "info" : "FieldDeclaration[14011-14033]:FieldDeclaration[14138-14160]"
  }, {
    "left" : "use",
    "right" : "use",
    "info" : "FieldDeclaration[14038-14060]:FieldDeclaration[14165-14187]"
  }, {
    "left" : "public LiveRangeChecker(def , use )",
    "right" : "public LiveRangeChecker(def , use )",
    "info" : "MethodDeclaration[14066-14159]:MethodDeclaration[14193-14286]"
  }, {
    "left" : "package getDef() : ",
    "right" : "package getDef() : ",
    "info" : "MethodDeclaration[14165-14203]:MethodDeclaration[14292-14330]"
  }, {
    "left" : "public shouldVisit(n ) : boolean",
    "right" : "public shouldVisit(n ) : boolean",
    "info" : "MethodDeclaration[14209-14453]:MethodDeclaration[14336-14580]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[14459-14716]:MethodDeclaration[14586-14843]"
  }, {
    "left" : "private isAssignTo(var , n , parent ) : boolean",
    "right" : "private isAssignTo(var , n , parent ) : boolean",
    "info" : "MethodDeclaration[14722-15548]:MethodDeclaration[14849-15675]"
  }, {
    "left" : "private isReadFrom(var , name ) : boolean",
    "right" : "private isReadFrom(var , name ) : boolean",
    "info" : "MethodDeclaration[15554-15772]:MethodDeclaration[15681-15899]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2522-2527]:TYPE_DECLARATION_KIND[2522-2527]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2868-2874]:Modifier[2868-2874]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[2875-2878]:PrimitiveType[2875-2878]"
  }, {
    "left" : "compare",
    "right" : "compare",
    "info" : "SimpleName[2879-2886]:SimpleName[2879-2886]"
  }, {
    "left" : "Var v1",
    "right" : "Var v1",
    "info" : "SingleVariableDeclaration[2887-2893]:SingleVariableDeclaration[2887-2893]"
  }, {
    "left" : "Var v2",
    "right" : "Var v2",
    "info" : "SingleVariableDeclaration[2895-2901]:SingleVariableDeclaration[2895-2901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2903-2944]:Block[2903-2944]"
  }, {
    "left" : "return v1.index - v2.index;",
    "right" : "return v1.index - v2.index;",
    "info" : "ReturnStatement[2911-2938]:ReturnStatement[2911-2938]"
  }, {
    "left" : "CoalesceVariableNames",
    "right" : "CoalesceVariableNames",
    "info" : "SimpleName[3092-3113]:SimpleName[3092-3113]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[3114-3139]:SingleVariableDeclaration[3114-3139]"
  }, {
    "left" : "boolean usePseudoNames",
    "right" : "boolean usePseudoNames",
    "info" : "SingleVariableDeclaration[3141-3163]:SingleVariableDeclaration[3141-3163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3165-3281]:Block[3165-3281]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[3171-3196]:ExpressionStatement[3171-3196]"
  }, {
    "left" : "colorings = Lists.newLinkedList();",
    "right" : "colorings = Lists.newLinkedList();",
    "info" : "ExpressionStatement[3201-3235]:ExpressionStatement[3201-3235]"
  }, {
    "left" : "this.usePseudoNames = usePseudoNames;",
    "right" : "this.usePseudoNames = usePseudoNames;",
    "info" : "ExpressionStatement[3240-3277]:ExpressionStatement[3240-3277]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3285-3294]:MarkerAnnotation[3285-3294]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3297-3303]:Modifier[3297-3303]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3304-3308]:PrimitiveType[3304-3308]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[3309-3316]:SimpleName[3309-3316]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[3317-3329]:SingleVariableDeclaration[3317-3329]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[3331-3340]:SingleVariableDeclaration[3331-3340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3342-3397]:Block[3342-3397]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, this);",
    "right" : "NodeTraversal.traverse(compiler, root, this);",
    "info" : "ExpressionStatement[3348-3393]:ExpressionStatement[3348-3393]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3401-3410]:MarkerAnnotation[3401-3410]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3413-3419]:Modifier[3413-3419]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3420-3424]:PrimitiveType[3420-3424]"
  }, {
    "left" : "enterScope",
    "right" : "enterScope",
    "info" : "SimpleName[3425-3435]:SimpleName[3425-3435]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3436-3451]:SingleVariableDeclaration[3436-3451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3453-4587]:Block[3453-4714]"
  }, {
    "left" : "Scope scope = t.getScope();",
    "right" : "Scope scope = t.getScope();",
    "info" : "VariableDeclarationStatement[3719-3746]:VariableDeclarationStatement[3719-3746]"
  }, {
    "left" : "if (scope.isGlobal())",
    "right" : "if (scope.isGlobal())",
    "info" : "IfStatement[3751-3794]:IfStatement[3751-3794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3773-3794]:Block[3773-3794]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[3781-3788]:ReturnStatement[3781-3788]"
  }, {
    "left" : "ControlFlowGraph<Node> cfg = t.getControlFlowGraph();",
    "right" : "ControlFlowGraph<Node> cfg = t.getControlFlowGraph();",
    "info" : "VariableDeclarationStatement[3799-3852]:VariableDeclarationStatement[3799-3852]"
  }, {
    "left" : "LiveVariablesAnalysis liveness =\n        new LiveVariablesAnalysis(cfg, scope, compiler);",
    "right" : "LiveVariablesAnalysis liveness =\n        new LiveVariablesAnalysis(cfg, scope, compiler);",
    "info" : "VariableDeclarationStatement[3858-3947]:VariableDeclarationStatement[3858-3947]"
  }, {
    "left" : "liveness.analyze();",
    "right" : "liveness.analyze();",
    "info" : "ExpressionStatement[4232-4251]:ExpressionStatement[4359-4378]"
  }, {
    "left" : "UndiGraph<Var, Void> interferenceGraph =\n        computeVariableNamesInterferenceGraph(\n            t, cfg, liveness.getEscapedLocals());",
    "right" : "UndiGraph<Var, Void> interferenceGraph =\n        computeVariableNamesInterferenceGraph(\n            t, cfg, liveness.getEscapedLocals());",
    "info" : "VariableDeclarationStatement[4257-4394]:VariableDeclarationStatement[4384-4521]"
  }, {
    "left" : "GraphColoring<Var, Void> coloring =\n        new GreedyGraphColoring<Var, Void>(interferenceGraph,\n            coloringTieBreaker);",
    "right" : "GraphColoring<Var, Void> coloring =\n        new GreedyGraphColoring<Var, Void>(interferenceGraph,\n            coloringTieBreaker);",
    "info" : "VariableDeclarationStatement[4400-4530]:VariableDeclarationStatement[4527-4657]"
  }, {
    "left" : "coloring.color();",
    "right" : "coloring.color();",
    "info" : "ExpressionStatement[4536-4553]:ExpressionStatement[4663-4680]"
  }, {
    "left" : "colorings.push(coloring);",
    "right" : "colorings.push(coloring);",
    "info" : "ExpressionStatement[4558-4583]:ExpressionStatement[4685-4710]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4591-4600]:MarkerAnnotation[4718-4727]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4603-4609]:Modifier[4730-4736]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4610-4614]:PrimitiveType[4737-4741]"
  }, {
    "left" : "exitScope",
    "right" : "exitScope",
    "info" : "SimpleName[4615-4624]:SimpleName[4742-4751]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4625-4640]:SingleVariableDeclaration[4752-4767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4642-4717]:Block[4769-4844]"
  }, {
    "left" : "if (t.inGlobalScope())",
    "right" : "if (t.inGlobalScope())",
    "info" : "IfStatement[4648-4692]:IfStatement[4775-4819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4671-4692]:Block[4798-4819]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4679-4686]:ReturnStatement[4806-4813]"
  }, {
    "left" : "colorings.pop();",
    "right" : "colorings.pop();",
    "info" : "ExpressionStatement[4697-4713]:ExpressionStatement[4824-4840]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4721-4730]:MarkerAnnotation[4848-4857]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4733-4739]:Modifier[4860-4866]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4740-4744]:PrimitiveType[4867-4871]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[4745-4750]:SimpleName[4872-4877]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4751-4766]:SingleVariableDeclaration[4878-4893]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4768-4774]:SingleVariableDeclaration[4895-4901]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[4776-4787]:SingleVariableDeclaration[4903-4914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4789-6699]:Block[4916-6826]"
  }, {
    "left" : "if (colorings.isEmpty() || !NodeUtil.isName(n) ||\n        NodeUtil.isFunction(parent))",
    "right" : "if (colorings.isEmpty() || !NodeUtil.isName(n) ||\n        NodeUtil.isFunction(parent))",
    "info" : "IfStatement[4795-4942]:IfStatement[4922-5069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4882-4942]:Block[5009-5069]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4929-4936]:ReturnStatement[5056-5063]"
  }, {
    "left" : "Var var = t.getScope().getVar(n.getString());",
    "right" : "Var var = t.getScope().getVar(n.getString());",
    "info" : "VariableDeclarationStatement[4947-4992]:VariableDeclarationStatement[5074-5119]"
  }, {
    "left" : "GraphNode<Var, ?> vNode = colorings.peek().getGraph().getNode(var);",
    "right" : "GraphNode<Var, ?> vNode = colorings.peek().getGraph().getNode(var);",
    "info" : "VariableDeclarationStatement[4997-5064]:VariableDeclarationStatement[5124-5191]"
  }, {
    "left" : "if (vNode == null)",
    "right" : "if (vNode == null)",
    "info" : "IfStatement[5069-5139]:IfStatement[5196-5266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5088-5139]:Block[5215-5266]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5126-5133]:ReturnStatement[5253-5260]"
  }, {
    "left" : "Var coalescedVar = colorings.peek().getPartitionSuperNode(var);",
    "right" : "Var coalescedVar = colorings.peek().getPartitionSuperNode(var);",
    "info" : "VariableDeclarationStatement[5144-5207]:VariableDeclarationStatement[5271-5334]"
  }, {
    "left" : "if (!usePseudoNames)",
    "right" : "if (!usePseudoNames)",
    "info" : "IfStatement[5213-6695]:IfStatement[5340-6822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5234-5541]:Block[5361-5668]"
  }, {
    "left" : "if (vNode.getValue().equals(coalescedVar))",
    "right" : "if (vNode.getValue().equals(coalescedVar))",
    "info" : "IfStatement[5242-5366]:IfStatement[5369-5493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5285-5366]:Block[5412-5493]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[5351-5358]:ReturnStatement[5478-5485]"
  }, {
    "left" : "n.setString(coalescedVar.name);",
    "right" : "n.setString(coalescedVar.name);",
    "info" : "ExpressionStatement[5391-5422]:ExpressionStatement[5518-5549]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[5429-5457]:ExpressionStatement[5556-5584]"
  }, {
    "left" : "if (NodeUtil.isVar(parent))",
    "right" : "if (NodeUtil.isVar(parent))",
    "info" : "IfStatement[5465-5535]:IfStatement[5592-5662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5493-5535]:Block[5620-5662]"
  }, {
    "left" : "removeVarDeclaration(n);",
    "right" : "removeVarDeclaration(n);",
    "info" : "ExpressionStatement[5503-5527]:ExpressionStatement[5630-5654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5547-6695]:Block[5674-6822]"
  }, {
    "left" : "String pseudoName = null;",
    "right" : "String pseudoName = null;",
    "info" : "VariableDeclarationStatement[5733-5758]:VariableDeclarationStatement[5860-5885]"
  }, {
    "left" : "Set<String> allMergedNames = Sets.newTreeSet();",
    "right" : "Set<String> allMergedNames = Sets.newTreeSet();",
    "info" : "VariableDeclarationStatement[5765-5812]:VariableDeclarationStatement[5892-5939]"
  }, {
    "left" : "for (Iterator<Var> i = t.getScope().getVars(); i.hasNext())",
    "right" : "for (Iterator<Var> i = t.getScope().getVars(); i.hasNext())",
    "info" : "ForStatement[5819-6253]:ForStatement[5946-6380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5880-6253]:Block[6007-6380]"
  }, {
    "left" : "Var iVar = i.next();",
    "right" : "Var iVar = i.next();",
    "info" : "VariableDeclarationStatement[5890-5910]:VariableDeclarationStatement[6017-6037]"
  }, {
    "left" : "if (colorings.peek().getGraph().getNode(iVar) != null &&\n            coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar)))",
    "right" : "if (colorings.peek().getGraph().getNode(iVar) != null &&\n            coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar)))",
    "info" : "IfStatement[6057-6245]:IfStatement[6184-6372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6193-6245]:Block[6320-6372]"
  }, {
    "left" : "allMergedNames.add(iVar.name);",
    "right" : "allMergedNames.add(iVar.name);",
    "info" : "ExpressionStatement[6205-6235]:ExpressionStatement[6332-6362]"
  }, {
    "left" : "if (allMergedNames.size() == 1)",
    "right" : "if (allMergedNames.size() == 1)",
    "info" : "IfStatement[6294-6351]:IfStatement[6421-6478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6326-6351]:Block[6453-6478]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6336-6343]:ReturnStatement[6463-6470]"
  }, {
    "left" : "pseudoName = Joiner.on(\"_\").join(allMergedNames);",
    "right" : "pseudoName = Joiner.on(\"_\").join(allMergedNames);",
    "info" : "ExpressionStatement[6359-6408]:ExpressionStatement[6486-6535]"
  }, {
    "left" : "while (t.getScope().isDeclared(pseudoName, true))",
    "right" : "while (t.getScope().isDeclared(pseudoName, true))",
    "info" : "WhileStatement[6416-6502]:WhileStatement[6543-6629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6466-6502]:Block[6593-6629]"
  }, {
    "left" : "pseudoName += \"$\";",
    "right" : "pseudoName += \"$\";",
    "info" : "ExpressionStatement[6476-6494]:ExpressionStatement[6603-6621]"
  }, {
    "left" : "n.setString(pseudoName);",
    "right" : "n.setString(pseudoName);",
    "info" : "ExpressionStatement[6510-6534]:ExpressionStatement[6637-6661]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[6541-6569]:ExpressionStatement[6668-6696]"
  }, {
    "left" : "if (!vNode.getValue().equals(coalescedVar) && NodeUtil.isVar(parent))",
    "right" : "if (!vNode.getValue().equals(coalescedVar) && NodeUtil.isVar(parent))",
    "info" : "IfStatement[6577-6689]:IfStatement[6704-6816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6647-6689]:Block[6774-6816]"
  }, {
    "left" : "removeVarDeclaration(n);",
    "right" : "removeVarDeclaration(n);",
    "info" : "ExpressionStatement[6657-6681]:ExpressionStatement[6784-6808]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6703-6710]:Modifier[6830-6837]"
  }, {
    "left" : "UndiGraph<Var, Void>",
    "right" : "UndiGraph<Var, Void>",
    "info" : "ParameterizedType[6711-6731]:ParameterizedType[6838-6858]"
  }, {
    "left" : "computeVariableNamesInterferenceGraph",
    "right" : "computeVariableNamesInterferenceGraph",
    "info" : "SimpleName[6732-6769]:SimpleName[6859-6896]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[6777-6792]:SingleVariableDeclaration[6904-6919]"
  }, {
    "left" : "ControlFlowGraph<Node> cfg",
    "right" : "ControlFlowGraph<Node> cfg",
    "info" : "SingleVariableDeclaration[6794-6820]:SingleVariableDeclaration[6921-6947]"
  }, {
    "left" : "Set<Var> escaped",
    "right" : "Set<Var> escaped",
    "info" : "SingleVariableDeclaration[6822-6838]:SingleVariableDeclaration[6949-6965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6840-9874]:Block[6967-10001]"
  }, {
    "left" : "UndiGraph<Var, Void> interferenceGraph =\n        new LinkedUndirectedGraph<Var, Void>();",
    "right" : "UndiGraph<Var, Void> interferenceGraph =\n        new LinkedUndirectedGraph<Var, Void>();",
    "info" : "VariableDeclarationStatement[6846-6934]:VariableDeclarationStatement[6973-7061]"
  }, {
    "left" : "Scope scope = t.getScope();",
    "right" : "Scope scope = t.getScope();",
    "info" : "VariableDeclarationStatement[6939-6966]:VariableDeclarationStatement[7066-7093]"
  }, {
    "left" : "for (Iterator<Var> i = scope.getVars(); i.hasNext())",
    "right" : "for (Iterator<Var> i = scope.getVars(); i.hasNext())",
    "info" : "ForStatement[7030-7680]:ForStatement[7157-7807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7084-7680]:Block[7211-7807]"
  }, {
    "left" : "Var v = i.next();",
    "right" : "Var v = i.next();",
    "info" : "VariableDeclarationStatement[7092-7109]:VariableDeclarationStatement[7219-7236]"
  }, {
    "left" : "if (!escaped.contains(v))",
    "right" : "if (!escaped.contains(v))",
    "info" : "IfStatement[7116-7674]:IfStatement[7243-7801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7142-7674]:Block[7269-7801]"
  }, {
    "left" : "if (!NodeUtil.isFunction(v.getParentNode()))",
    "right" : "if (!NodeUtil.isFunction(v.getParentNode()))",
    "info" : "IfStatement[7567-7666]:IfStatement[7694-7793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7612-7666]:Block[7739-7793]"
  }, {
    "left" : "interferenceGraph.createNode(v);",
    "right" : "interferenceGraph.createNode(v);",
    "info" : "ExpressionStatement[7624-7656]:ExpressionStatement[7751-7783]"
  }, {
    "left" : "for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes())",
    "right" : "for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes())",
    "info" : "EnhancedForStatement[7843-9840]:EnhancedForStatement[7970-9967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7913-9840]:Block[8040-9967]"
  }, {
    "left" : "FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();",
    "right" : "FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();",
    "info" : "VariableDeclarationStatement[7921-7984]:VariableDeclarationStatement[8048-8111]"
  }, {
    "left" : "if (cfg.isImplicitReturn(cfgNode))",
    "right" : "if (cfg.isImplicitReturn(cfgNode))",
    "info" : "IfStatement[7991-8053]:IfStatement[8118-8180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8026-8053]:Block[8153-8180]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[8036-8045]:ContinueStatement[8163-8172]"
  }, {
    "left" : "int varsInScope = scope.getVarCount();",
    "right" : "int varsInScope = scope.getVarCount();",
    "info" : "VariableDeclarationStatement[8061-8099]:VariableDeclarationStatement[8188-8226]"
  }, {
    "left" : "ArrayList<CombinedLiveRangeChecker> rangesToCheck =\n          new ArrayList<CombinedLiveRangeChecker>(\n              varsInScope * varsInScope);",
    "right" : "ArrayList<CombinedLiveRangeChecker> rangesToCheck =\n          new ArrayList<CombinedLiveRangeChecker>(\n              varsInScope * varsInScope);",
    "info" : "VariableDeclarationStatement[8106-8250]:VariableDeclarationStatement[8233-8377]"
  }, {
    "left" : "for (Iterator<Var> i1 = scope.getVars(); i1.hasNext())",
    "right" : "for (Iterator<Var> i1 = scope.getVars(); i1.hasNext())",
    "info" : "ForStatement[8258-9614]:ForStatement[8385-9741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8314-9614]:Block[8441-9741]"
  }, {
    "left" : "Var v1 = i1.next();",
    "right" : "Var v1 = i1.next();",
    "info" : "VariableDeclarationStatement[8324-8343]:VariableDeclarationStatement[8451-8470]"
  }, {
    "left" : "for (Iterator<Var> i2 = scope.getVars(); i2.hasNext())",
    "right" : "for (Iterator<Var> i2 = scope.getVars(); i2.hasNext())",
    "info" : "ForStatement[8352-9606]:ForStatement[8479-9733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8408-9606]:Block[8535-9733]"
  }, {
    "left" : "Var v2 = i2.next();",
    "right" : "Var v2 = i2.next();",
    "info" : "VariableDeclarationStatement[8420-8439]:VariableDeclarationStatement[8547-8566]"
  }, {
    "left" : "if (v1 == v2 || !interferenceGraph.hasNode(v1) ||\n              !interferenceGraph.hasNode(v2))",
    "right" : "if (v1 == v2 || !interferenceGraph.hasNode(v1) ||\n              !interferenceGraph.hasNode(v2))",
    "info" : "IfStatement[8451-8724]:IfStatement[8578-8851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8547-8724]:Block[8674-8851]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[8703-8712]:ContinueStatement[8830-8839]"
  }, {
    "left" : "boolean v1OutLive = state.getOut().isLive(v1);",
    "right" : "boolean v1OutLive = state.getOut().isLive(v1);",
    "info" : "VariableDeclarationStatement[8736-8782]:VariableDeclarationStatement[8863-8909]"
  }, {
    "left" : "boolean v2OutLive = state.getOut().isLive(v2);",
    "right" : "boolean v2OutLive = state.getOut().isLive(v2);",
    "info" : "VariableDeclarationStatement[8793-8839]:VariableDeclarationStatement[8920-8966]"
  }, {
    "left" : "if (v1.getParentNode().getType() == Token.LP &&\n              v2.getParentNode().getType() == Token.LP)",
    "right" : "if (v1.getParentNode().getType() == Token.LP &&\n              v2.getParentNode().getType() == Token.LP)",
    "info" : "IfStatement[8922-9596]:IfStatement[9049-9723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9026-9102]:Block[9153-9229]"
  }, {
    "left" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
    "right" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
    "info" : "ExpressionStatement[9040-9090]:ExpressionStatement[9167-9217]"
  }, {
    "left" : "if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) ||\n              (v1OutLive && v2OutLive))",
    "right" : "if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) ||\n              (v1OutLive && v2OutLive))",
    "info" : "IfStatement[9108-9596]:IfStatement[9235-9723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9210-9286]:Block[9337-9413]"
  }, {
    "left" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
    "right" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
    "info" : "ExpressionStatement[9224-9274]:ExpressionStatement[9351-9401]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9292-9596]:Block[9419-9723]"
  }, {
    "left" : "LiveRangeChecker checker1 =\n                new LiveRangeChecker(v1, v2OutLive ? null : v2);",
    "right" : "LiveRangeChecker checker1 =\n                new LiveRangeChecker(v1, v2OutLive ? null : v2);",
    "info" : "VariableDeclarationStatement[9306-9398]:VariableDeclarationStatement[9433-9525]"
  }, {
    "left" : "LiveRangeChecker checker2 =\n                new LiveRangeChecker(v2, v1OutLive ? null : v1);",
    "right" : "LiveRangeChecker checker2 =\n                new LiveRangeChecker(v2, v1OutLive ? null : v1);",
    "info" : "VariableDeclarationStatement[9411-9503]:VariableDeclarationStatement[9538-9630]"
  }, {
    "left" : "rangesToCheck.add(new CombinedLiveRangeChecker(checker1, checker2));",
    "right" : "rangesToCheck.add(new CombinedLiveRangeChecker(checker1, checker2));",
    "info" : "ExpressionStatement[9516-9584]:ExpressionStatement[9643-9711]"
  }, {
    "left" : "checkRanges(rangesToCheck, cfgNode.getValue());",
    "right" : "checkRanges(rangesToCheck, cfgNode.getValue());",
    "info" : "ExpressionStatement[9667-9714]:ExpressionStatement[9794-9841]"
  }, {
    "left" : "for (CombinedLiveRangeChecker range : rangesToCheck)",
    "right" : "for (CombinedLiveRangeChecker range : rangesToCheck)",
    "info" : "EnhancedForStatement[9721-9834]:EnhancedForStatement[9848-9961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9774-9834]:Block[9901-9961]"
  }, {
    "left" : "range.connectIfCrossed(interferenceGraph);",
    "right" : "range.connectIfCrossed(interferenceGraph);",
    "info" : "ExpressionStatement[9784-9826]:ExpressionStatement[9911-9953]"
  }, {
    "left" : "return interferenceGraph;",
    "right" : "return interferenceGraph;",
    "info" : "ReturnStatement[9845-9870]:ReturnStatement[9972-9997]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10362-10369]:Modifier[10489-10496]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10370-10374]:PrimitiveType[10497-10501]"
  }, {
    "left" : "checkRanges",
    "right" : "checkRanges",
    "info" : "SimpleName[10375-10386]:SimpleName[10502-10513]"
  }, {
    "left" : "ArrayList<CombinedLiveRangeChecker> rangesToCheck",
    "right" : "ArrayList<CombinedLiveRangeChecker> rangesToCheck",
    "info" : "SingleVariableDeclaration[10394-10443]:SingleVariableDeclaration[10521-10570]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[10445-10454]:SingleVariableDeclaration[10572-10581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10456-10622]:Block[10583-10749]"
  }, {
    "left" : "CombinedCfgNodeLiveRangeChecker callbacks =\n      new CombinedCfgNodeLiveRangeChecker(rangesToCheck);",
    "right" : "CombinedCfgNodeLiveRangeChecker callbacks =\n      new CombinedCfgNodeLiveRangeChecker(rangesToCheck);",
    "info" : "VariableDeclarationStatement[10462-10563]:VariableDeclarationStatement[10589-10690]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, callbacks);",
    "right" : "NodeTraversal.traverse(compiler, root, callbacks);",
    "info" : "ExpressionStatement[10568-10618]:ExpressionStatement[10695-10745]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10826-10833]:Modifier[10953-10960]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10834-10840]:Modifier[10961-10967]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[10841-10846]:TYPE_DECLARATION_KIND[10968-10973]"
  }, {
    "left" : "CombinedCfgNodeLiveRangeChecker",
    "right" : "CombinedCfgNodeLiveRangeChecker",
    "info" : "SimpleName[10999-11030]:SimpleName[11126-11157]"
  }, {
    "left" : "ArrayList<CombinedLiveRangeChecker> callbacks",
    "right" : "ArrayList<CombinedLiveRangeChecker> callbacks",
    "info" : "SingleVariableDeclaration[11040-11085]:SingleVariableDeclaration[11167-11212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11087-11128]:Block[11214-11255]"
  }, {
    "left" : "this.callbacks = callbacks;",
    "right" : "this.callbacks = callbacks;",
    "info" : "ExpressionStatement[11095-11122]:ExpressionStatement[11222-11249]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11134-11143]:MarkerAnnotation[11261-11270]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11148-11154]:Modifier[11275-11281]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11155-11159]:PrimitiveType[11282-11286]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[11160-11165]:SimpleName[11287-11292]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[11166-11181]:SingleVariableDeclaration[11293-11308]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11183-11189]:SingleVariableDeclaration[11310-11316]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[11191-11202]:SingleVariableDeclaration[11318-11329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11204-11384]:Block[11331-11511]"
  }, {
    "left" : "if (CombinedLiveRangeChecker.shouldVisit(n))",
    "right" : "if (CombinedLiveRangeChecker.shouldVisit(n))",
    "info" : "IfStatement[11212-11378]:IfStatement[11339-11505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11257-11378]:Block[11384-11505]"
  }, {
    "left" : "for (CombinedLiveRangeChecker callback : callbacks)",
    "right" : "for (CombinedLiveRangeChecker callback : callbacks)",
    "info" : "EnhancedForStatement[11267-11370]:EnhancedForStatement[11394-11497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11319-11370]:Block[11446-11497]"
  }, {
    "left" : "callback.visit(t, n, parent);",
    "right" : "callback.visit(t, n, parent);",
    "info" : "ExpressionStatement[11331-11360]:ExpressionStatement[11458-11487]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11588-11595]:Modifier[11715-11722]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11596-11602]:Modifier[11723-11729]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[11603-11608]:TYPE_DECLARATION_KIND[11730-11735]"
  }, {
    "left" : "CombinedLiveRangeChecker",
    "right" : "CombinedLiveRangeChecker",
    "info" : "SimpleName[11781-11805]:SimpleName[11908-11932]"
  }, {
    "left" : "LiveRangeChecker callback1",
    "right" : "LiveRangeChecker callback1",
    "info" : "SingleVariableDeclaration[11815-11841]:SingleVariableDeclaration[11942-11968]"
  }, {
    "left" : "LiveRangeChecker callback2",
    "right" : "LiveRangeChecker callback2",
    "info" : "SingleVariableDeclaration[11851-11877]:SingleVariableDeclaration[11978-12004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11879-11954]:Block[12006-12081]"
  }, {
    "left" : "this.callback1 = callback1;",
    "right" : "this.callback1 = callback1;",
    "info" : "ExpressionStatement[11887-11914]:ExpressionStatement[12014-12041]"
  }, {
    "left" : "this.callback2 = callback2;",
    "right" : "this.callback2 = callback2;",
    "info" : "ExpressionStatement[11921-11948]:ExpressionStatement[12048-12075]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12068-12074]:Modifier[12195-12201]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12075-12081]:Modifier[12202-12208]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12082-12089]:PrimitiveType[12209-12216]"
  }, {
    "left" : "shouldVisit",
    "right" : "shouldVisit",
    "info" : "SimpleName[12090-12101]:SimpleName[12217-12228]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12102-12108]:SingleVariableDeclaration[12229-12235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12110-12163]:Block[12237-12290]"
  }, {
    "left" : "return LiveRangeChecker.shouldVisit(n);",
    "right" : "return LiveRangeChecker.shouldVisit(n);",
    "info" : "ReturnStatement[12118-12157]:ReturnStatement[12245-12284]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12169-12178]:MarkerAnnotation[12296-12305]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12183-12189]:Modifier[12310-12316]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12190-12194]:PrimitiveType[12317-12321]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[12195-12200]:SimpleName[12322-12327]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[12201-12216]:SingleVariableDeclaration[12328-12343]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12218-12224]:SingleVariableDeclaration[12345-12351]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[12226-12237]:SingleVariableDeclaration[12353-12364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12239-12320]:Block[12366-12447]"
  }, {
    "left" : "callback1.visit(t, n, parent);",
    "right" : "callback1.visit(t, n, parent);",
    "info" : "ExpressionStatement[12247-12277]:ExpressionStatement[12374-12404]"
  }, {
    "left" : "callback2.visit(t, n, parent);",
    "right" : "callback2.visit(t, n, parent);",
    "info" : "ExpressionStatement[12284-12314]:ExpressionStatement[12411-12441]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12326-12330]:PrimitiveType[12453-12457]"
  }, {
    "left" : "connectIfCrossed",
    "right" : "connectIfCrossed",
    "info" : "SimpleName[12331-12347]:SimpleName[12458-12474]"
  }, {
    "left" : "UndiGraph<Var, Void> interferenceGraph",
    "right" : "UndiGraph<Var, Void> interferenceGraph",
    "info" : "SingleVariableDeclaration[12348-12386]:SingleVariableDeclaration[12475-12513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12388-12588]:Block[12515-12715]"
  }, {
    "left" : "if (callback1.crossed || callback2.crossed)",
    "right" : "if (callback1.crossed || callback2.crossed)",
    "info" : "IfStatement[12396-12582]:IfStatement[12523-12709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12440-12582]:Block[12567-12709]"
  }, {
    "left" : "Var v1 = callback1.getDef();",
    "right" : "Var v1 = callback1.getDef();",
    "info" : "VariableDeclarationStatement[12450-12478]:VariableDeclarationStatement[12577-12605]"
  }, {
    "left" : "Var v2 = callback2.getDef();",
    "right" : "Var v2 = callback2.getDef();",
    "info" : "VariableDeclarationStatement[12487-12515]:VariableDeclarationStatement[12614-12642]"
  }, {
    "left" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
    "right" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
    "info" : "ExpressionStatement[12524-12574]:ExpressionStatement[12651-12701]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12744-12751]:Modifier[12871-12878]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12752-12756]:PrimitiveType[12879-12883]"
  }, {
    "left" : "removeVarDeclaration",
    "right" : "removeVarDeclaration",
    "info" : "SimpleName[12757-12777]:SimpleName[12884-12904]"
  }, {
    "left" : "Node name",
    "right" : "Node name",
    "info" : "SingleVariableDeclaration[12778-12787]:SingleVariableDeclaration[12905-12914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12789-13857]:Block[12916-13984]"
  }, {
    "left" : "Node var = name.getParent();",
    "right" : "Node var = name.getParent();",
    "info" : "VariableDeclarationStatement[12795-12823]:VariableDeclarationStatement[12922-12950]"
  }, {
    "left" : "Node parent = var.getParent();",
    "right" : "Node parent = var.getParent();",
    "info" : "VariableDeclarationStatement[12828-12858]:VariableDeclarationStatement[12955-12985]"
  }, {
    "left" : "if (NodeUtil.isForIn(parent))",
    "right" : "if (NodeUtil.isForIn(parent))",
    "info" : "IfStatement[12912-13853]:IfStatement[13039-13980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12942-13016]:Block[13069-13143]"
  }, {
    "left" : "var.removeChild(name);",
    "right" : "var.removeChild(name);",
    "info" : "ExpressionStatement[12950-12972]:ExpressionStatement[13077-13099]"
  }, {
    "left" : "parent.replaceChild(var, name);",
    "right" : "parent.replaceChild(var, name);",
    "info" : "ExpressionStatement[12979-13010]:ExpressionStatement[13106-13137]"
  }, {
    "left" : "if (var.getChildCount() == 1)",
    "right" : "if (var.getChildCount() == 1)",
    "info" : "IfStatement[13022-13853]:IfStatement[13149-13980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13052-13703]:Block[13179-13830]"
  }, {
    "left" : "if (name.hasChildren())",
    "right" : "if (name.hasChildren())",
    "info" : "IfStatement[13138-13697]:IfStatement[13265-13824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13162-13528]:Block[13289-13655]"
  }, {
    "left" : "Node value = name.removeFirstChild();",
    "right" : "Node value = name.removeFirstChild();",
    "info" : "VariableDeclarationStatement[13172-13209]:VariableDeclarationStatement[13299-13336]"
  }, {
    "left" : "var.removeChild(name);",
    "right" : "var.removeChild(name);",
    "info" : "ExpressionStatement[13218-13240]:ExpressionStatement[13345-13367]"
  }, {
    "left" : "Node assign = new Node(Token.ASSIGN, name, value);",
    "right" : "Node assign = new Node(Token.ASSIGN, name, value);",
    "info" : "VariableDeclarationStatement[13249-13299]:VariableDeclarationStatement[13376-13426]"
  }, {
    "left" : "if (parent.getType() != Token.FOR)",
    "right" : "if (parent.getType() != Token.FOR)",
    "info" : "IfStatement[13386-13477]:IfStatement[13513-13604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13421-13477]:Block[13548-13604]"
  }, {
    "left" : "assign = NodeUtil.newExpr(assign);",
    "right" : "assign = NodeUtil.newExpr(assign);",
    "info" : "ExpressionStatement[13433-13467]:ExpressionStatement[13560-13594]"
  }, {
    "left" : "parent.replaceChild(var, assign);",
    "right" : "parent.replaceChild(var, assign);",
    "info" : "ExpressionStatement[13486-13519]:ExpressionStatement[13613-13646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13534-13697]:Block[13661-13824]"
  }, {
    "left" : "NodeUtil.removeChild(parent, var);",
    "right" : "NodeUtil.removeChild(parent, var);",
    "info" : "ExpressionStatement[13655-13689]:ExpressionStatement[13782-13816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13709-13853]:Block[13836-13980]"
  }, {
    "left" : "if (!name.hasChildren())",
    "right" : "if (!name.hasChildren())",
    "info" : "IfStatement[13717-13782]:IfStatement[13844-13909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13742-13782]:Block[13869-13909]"
  }, {
    "left" : "var.removeChild(name);",
    "right" : "var.removeChild(name);",
    "info" : "ExpressionStatement[13752-13774]:ExpressionStatement[13879-13901]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13861-13868]:Modifier[13988-13995]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13869-13875]:Modifier[13996-14002]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[13876-13881]:TYPE_DECLARATION_KIND[14003-14008]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14066-14072]:Modifier[14193-14199]"
  }, {
    "left" : "LiveRangeChecker",
    "right" : "LiveRangeChecker",
    "info" : "SimpleName[14073-14089]:SimpleName[14200-14216]"
  }, {
    "left" : "Var def",
    "right" : "Var def",
    "info" : "SingleVariableDeclaration[14090-14097]:SingleVariableDeclaration[14217-14224]"
  }, {
    "left" : "Var use",
    "right" : "Var use",
    "info" : "SingleVariableDeclaration[14099-14106]:SingleVariableDeclaration[14226-14233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14108-14159]:Block[14235-14286]"
  }, {
    "left" : "this.def = def;",
    "right" : "this.def = def;",
    "info" : "ExpressionStatement[14116-14131]:ExpressionStatement[14243-14258]"
  }, {
    "left" : "this.use = use;",
    "right" : "this.use = use;",
    "info" : "ExpressionStatement[14138-14153]:ExpressionStatement[14265-14280]"
  }, {
    "left" : "Var",
    "right" : "Var",
    "info" : "SimpleType[14165-14168]:SimpleType[14292-14295]"
  }, {
    "left" : "getDef",
    "right" : "getDef",
    "info" : "SimpleName[14169-14175]:SimpleName[14296-14302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14178-14203]:Block[14305-14330]"
  }, {
    "left" : "return def;",
    "right" : "return def;",
    "info" : "ReturnStatement[14186-14197]:ReturnStatement[14313-14324]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14302-14308]:Modifier[14429-14435]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14309-14315]:Modifier[14436-14442]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14316-14323]:PrimitiveType[14443-14450]"
  }, {
    "left" : "shouldVisit",
    "right" : "shouldVisit",
    "info" : "SimpleName[14324-14335]:SimpleName[14451-14462]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14336-14342]:SingleVariableDeclaration[14463-14469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14344-14453]:Block[14471-14580]"
  }, {
    "left" : "return (NodeUtil.isName(n)\n        || (n.hasChildren() && NodeUtil.isName(n.getFirstChild())));",
    "right" : "return (NodeUtil.isName(n)\n        || (n.hasChildren() && NodeUtil.isName(n.getFirstChild())));",
    "info" : "ReturnStatement[14352-14447]:ReturnStatement[14479-14574]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14459-14468]:MarkerAnnotation[14586-14595]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14473-14479]:Modifier[14600-14606]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14480-14484]:PrimitiveType[14607-14611]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[14485-14490]:SimpleName[14612-14617]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14491-14506]:SingleVariableDeclaration[14618-14633]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14508-14514]:SingleVariableDeclaration[14635-14641]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14516-14527]:SingleVariableDeclaration[14643-14654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14529-14716]:Block[14656-14843]"
  }, {
    "left" : "if (!defFound && isAssignTo(def, n, parent))",
    "right" : "if (!defFound && isAssignTo(def, n, parent))",
    "info" : "IfStatement[14537-14616]:IfStatement[14664-14743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14582-14616]:Block[14709-14743]"
  }, {
    "left" : "defFound = true;",
    "right" : "defFound = true;",
    "info" : "ExpressionStatement[14592-14608]:ExpressionStatement[14719-14735]"
  }, {
    "left" : "if (defFound && (use == null || isReadFrom(use, n)))",
    "right" : "if (defFound && (use == null || isReadFrom(use, n)))",
    "info" : "IfStatement[14624-14710]:IfStatement[14751-14837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14677-14710]:Block[14804-14837]"
  }, {
    "left" : "crossed = true;",
    "right" : "crossed = true;",
    "info" : "ExpressionStatement[14687-14702]:ExpressionStatement[14814-14829]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14722-14729]:Modifier[14849-14856]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14730-14736]:Modifier[14857-14863]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14737-14744]:PrimitiveType[14864-14871]"
  }, {
    "left" : "isAssignTo",
    "right" : "isAssignTo",
    "info" : "SimpleName[14745-14755]:SimpleName[14872-14882]"
  }, {
    "left" : "Var var",
    "right" : "Var var",
    "info" : "SingleVariableDeclaration[14756-14763]:SingleVariableDeclaration[14883-14890]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14765-14771]:SingleVariableDeclaration[14892-14898]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14773-14784]:SingleVariableDeclaration[14900-14911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14786-15548]:Block[14913-15675]"
  }, {
    "left" : "if (NodeUtil.isName(n) && var.getName().equals(n.getString()) &&\n          parent != null)",
    "right" : "if (NodeUtil.isName(n) && var.getName().equals(n.getString()) &&\n          parent != null)",
    "info" : "IfStatement[14794-15542]:IfStatement[14921-15669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14885-15287]:Block[15012-15414]"
  }, {
    "left" : "if (parent.getType() == Token.LP)",
    "right" : "if (parent.getType() == Token.LP)",
    "info" : "IfStatement[14895-15235]:IfStatement[15022-15362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14929-15039]:Block[15056-15166]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15017-15029]:ReturnStatement[15144-15156]"
  }, {
    "left" : "if (NodeUtil.isVar(parent))",
    "right" : "if (NodeUtil.isVar(parent))",
    "info" : "IfStatement[15045-15235]:IfStatement[15172-15362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15073-15235]:Block[15200-15362]"
  }, {
    "left" : "return n.hasChildren();",
    "right" : "return n.hasChildren();",
    "info" : "ReturnStatement[15202-15225]:ReturnStatement[15329-15352]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15244-15257]:ReturnStatement[15371-15384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15293-15542]:Block[15420-15669]"
  }, {
    "left" : "Node name = n.getFirstChild();",
    "right" : "Node name = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[15358-15388]:VariableDeclarationStatement[15485-15515]"
  }, {
    "left" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          NodeUtil.isAssignmentOp(n);",
    "right" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          NodeUtil.isAssignmentOp(n);",
    "info" : "ReturnStatement[15397-15534]:ReturnStatement[15524-15661]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15554-15561]:Modifier[15681-15688]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15562-15568]:Modifier[15689-15695]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15569-15576]:PrimitiveType[15696-15703]"
  }, {
    "left" : "isReadFrom",
    "right" : "isReadFrom",
    "info" : "SimpleName[15577-15587]:SimpleName[15704-15714]"
  }, {
    "left" : "Var var",
    "right" : "Var var",
    "info" : "SingleVariableDeclaration[15588-15595]:SingleVariableDeclaration[15715-15722]"
  }, {
    "left" : "Node name",
    "right" : "Node name",
    "info" : "SingleVariableDeclaration[15597-15606]:SingleVariableDeclaration[15724-15733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15608-15772]:Block[15735-15899]"
  }, {
    "left" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          !NodeUtil.isLhs(name, name.getParent());",
    "right" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          !NodeUtil.isLhs(name, name.getParent());",
    "info" : "ReturnStatement[15616-15766]:ReturnStatement[15743-15893]"
  } ]
}