{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public final static int TYPE_BOOLEAN = 1;",
      "right" : "public final static int TYPE_BOOLEAN = 1;",
      "info" : "FieldDeclaration[1154-1195]:FieldDeclaration[1256-1297]"
    }, {
      "left" : "public final static int TYPE_BYTE = 2;",
      "right" : "public final static int TYPE_BYTE = 2;",
      "info" : "FieldDeclaration[1200-1238]:FieldDeclaration[1302-1340]"
    }, {
      "left" : "public final static int TYPE_SHORT = 3;",
      "right" : "public final static int TYPE_SHORT = 3;",
      "info" : "FieldDeclaration[1243-1282]:FieldDeclaration[1345-1384]"
    }, {
      "left" : "public final static int TYPE_CHAR = 4;",
      "right" : "public final static int TYPE_CHAR = 4;",
      "info" : "FieldDeclaration[1287-1325]:FieldDeclaration[1389-1427]"
    }, {
      "left" : "public final static int TYPE_INT = 5;",
      "right" : "public final static int TYPE_INT = 5;",
      "info" : "FieldDeclaration[1330-1367]:FieldDeclaration[1432-1469]"
    }, {
      "left" : "public final static int TYPE_LONG = 6;",
      "right" : "public final static int TYPE_LONG = 6;",
      "info" : "FieldDeclaration[1372-1410]:FieldDeclaration[1474-1512]"
    }, {
      "left" : "public final static int TYPE_FLOAT = 7;",
      "right" : "public final static int TYPE_FLOAT = 7;",
      "info" : "FieldDeclaration[1415-1454]:FieldDeclaration[1517-1556]"
    }, {
      "left" : "public final static int TYPE_DOUBLE = 8;",
      "right" : "public final static int TYPE_DOUBLE = 8;",
      "info" : "FieldDeclaration[1459-1499]:FieldDeclaration[1561-1601]"
    }, {
      "left" : "public final static int TYPE_LOCALE = 9;",
      "right" : "public final static int TYPE_LOCALE = 9;",
      "info" : "FieldDeclaration[1504-1544]:FieldDeclaration[1606-1646]"
    }, {
      "left" : "public final static int TYPE_DATE = 10;",
      "right" : "public final static int TYPE_DATE = 10;",
      "info" : "FieldDeclaration[1549-1588]:FieldDeclaration[1651-1690]"
    }, {
      "left" : "public final static int TYPE_CALENDAR = 11;",
      "right" : "public final static int TYPE_CALENDAR = 11;",
      "info" : "FieldDeclaration[1593-1636]:FieldDeclaration[1695-1738]"
    }, {
      "left" : "public final static int TYPE_UUID = 12;",
      "right" : "public final static int TYPE_UUID = 12;",
      "info" : "FieldDeclaration[1641-1680]:FieldDeclaration[1743-1782]"
    }, {
      "left" : "public final static int TYPE_URI = 13;",
      "right" : "public final static int TYPE_URI = 13;",
      "info" : "FieldDeclaration[1685-1723]:FieldDeclaration[1787-1825]"
    }, {
      "left" : "public final static int TYPE_URL = 14;",
      "right" : "public final static int TYPE_URL = 14;",
      "info" : "FieldDeclaration[1728-1766]:FieldDeclaration[1830-1868]"
    }, {
      "left" : "public final static int TYPE_CLASS = 15;",
      "right" : "public final static int TYPE_CLASS = 15;",
      "info" : "FieldDeclaration[1771-1811]:FieldDeclaration[1873-1913]"
    }, {
      "left" : "public final static int TYPE_CURRENCY = 16;",
      "right" : "public final static int TYPE_CURRENCY = 16;",
      "info" : "FieldDeclaration[1816-1859]:FieldDeclaration[1918-1961]"
    }, {
      "left" : "final protected int _kind;",
      "right" : "final protected int _kind;",
      "info" : "FieldDeclaration[1865-1891]:FieldDeclaration[1967-1993]"
    }, {
      "left" : "protected final FromStringDeserializer<?> _deser;",
      "right" : "protected final FromStringDeserializer<?> _deser;",
      "info" : "FieldDeclaration[1937-2071]:FieldDeclaration[2039-2173]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "info" : "MethodDeclaration[2081-2172]:MethodDeclaration[2183-2274]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "info" : "MethodDeclaration[2178-2342]:MethodDeclaration[2280-2444]"
    }, {
      "left" : "public static StdKeyDeserializer forType(Class<?> raw)",
      "right" : "public static StdKeyDeserializer forType(Class<?> raw)",
      "info" : "MethodDeclaration[2348-4137]:MethodDeclaration[2450-4239]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[4143-4942]:MethodDeclaration[4245-5044]"
    }, {
      "left" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[5005-8601]:MethodDeclaration[5107-8703]"
    }, {
      "left" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "right" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8789-8902]:MethodDeclaration[8891-9004]"
    }, {
      "left" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "right" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8908-9021]:MethodDeclaration[9010-9123]"
    }, {
      "left" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "right" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9027-9153]:MethodDeclaration[9129-9255]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "TypeDeclaration[9362-10232]:TypeDeclaration[9464-10334]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[9451-9499]:FieldDeclaration[9553-9601]"
    }, {
      "left" : "private final static StringKD sString = new StringKD(String.class);",
      "right" : "private final static StringKD sString = new StringKD(String.class);",
      "info" : "FieldDeclaration[9508-9575]:FieldDeclaration[9610-9677]"
    }, {
      "left" : "private final static StringKD sObject = new StringKD(Object.class);",
      "right" : "private final static StringKD sObject = new StringKD(Object.class);",
      "info" : "FieldDeclaration[9584-9651]:FieldDeclaration[9686-9753]"
    }, {
      "left" : "private StringKD(Class<?> nominalType)",
      "right" : "private StringKD(Class<?> nominalType)",
      "info" : "MethodDeclaration[9669-9735]:MethodDeclaration[9771-9837]"
    }, {
      "left" : "public static StringKD forType(Class<?> nominalType)",
      "right" : "public static StringKD forType(Class<?> nominalType)",
      "info" : "MethodDeclaration[9745-10049]:MethodDeclaration[9847-10151]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "info" : "MethodDeclaration[10059-10226]:MethodDeclaration[10161-10328]"
    }, {
      "left" : "protected final JsonDeserializer<?> _delegate;",
      "right" : "protected final JsonDeserializer<?> _delegate;",
      "info" : "FieldDeclaration[10864-10910]:FieldDeclaration[10966-11012]"
    }, {
      "left" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "right" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "info" : "MethodDeclaration[10928-11063]:MethodDeclaration[11030-11165]"
    }, {
      "left" : "EnumKD",
      "right" : "EnumKD",
      "info" : "TypeDeclaration[11971-14039]:TypeDeclaration[12238-14306]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[12058-12106]:FieldDeclaration[12325-12373]"
    }, {
      "left" : "protected final EnumResolver _byNameResolver;",
      "right" : "protected final EnumResolver _byNameResolver;",
      "info" : "FieldDeclaration[12116-12161]:FieldDeclaration[12383-12428]"
    }, {
      "left" : "protected final AnnotatedMethod _factory;",
      "right" : "protected final AnnotatedMethod _factory;",
      "info" : "FieldDeclaration[12171-12212]:FieldDeclaration[12438-12479]"
    }, {
      "left" : "protected EnumResolver _byToStringResolver;",
      "right" : "protected EnumResolver _byToStringResolver;",
      "info" : "FieldDeclaration[12222-12441]:FieldDeclaration[12489-12708]"
    }, {
      "left" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "right" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "info" : "MethodDeclaration[12459-12637]:MethodDeclaration[12726-12904]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws IOException",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[12647-13593]:MethodDeclaration[12914-13860]"
    }, {
      "left" : "private EnumResolver _getToStringResolver(DeserializationContext ctxt)",
      "right" : "private EnumResolver _getToStringResolver(DeserializationContext ctxt)",
      "info" : "MethodDeclaration[13603-14033]:MethodDeclaration[13870-14300]"
    }, {
      "left" : "StringCtorKeyDeserializer",
      "right" : "StringCtorKeyDeserializer",
      "info" : "TypeDeclaration[14049-14678]:TypeDeclaration[14316-14945]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[14258-14306]:FieldDeclaration[14525-14573]"
    }, {
      "left" : "protected final Constructor<?> _ctor;",
      "right" : "protected final Constructor<?> _ctor;",
      "info" : "FieldDeclaration[14316-14353]:FieldDeclaration[14583-14620]"
    }, {
      "left" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "right" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "info" : "MethodDeclaration[14363-14503]:MethodDeclaration[14630-14770]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[14513-14672]:MethodDeclaration[14780-14939]"
    }, {
      "left" : "StringFactoryKeyDeserializer",
      "right" : "StringFactoryKeyDeserializer",
      "info" : "TypeDeclaration[14684-15315]:TypeDeclaration[14951-15582]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[14896-14944]:FieldDeclaration[15163-15211]"
    }, {
      "left" : "final Method _factoryMethod;",
      "right" : "final Method _factoryMethod;",
      "info" : "FieldDeclaration[14954-14982]:FieldDeclaration[15221-15249]"
    }, {
      "left" : "public StringFactoryKeyDeserializer(Method fm)",
      "right" : "public StringFactoryKeyDeserializer(Method fm)",
      "info" : "MethodDeclaration[14992-15130]:MethodDeclaration[15259-15397]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[15140-15309]:MethodDeclaration[15407-15576]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2134-2172]:Block[2236-2274]"
    }, {
      "left" : "this(kind, cls, null);",
      "right" : "this(kind, cls, null);",
      "info" : "ConstructorInvocation[2144-2166]:ConstructorInvocation[2246-2268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2264-2342]:Block[2366-2444]"
    }, {
      "left" : "_kind = kind;",
      "right" : "_kind = kind;",
      "info" : "ExpressionStatement[2274-2287]:ExpressionStatement[2376-2389]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[2296-2312]:ExpressionStatement[2398-2414]"
    }, {
      "left" : "_deser = deser;",
      "right" : "_deser = deser;",
      "info" : "ExpressionStatement[2321-2336]:ExpressionStatement[2423-2438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2407-4137]:Block[2509-4239]"
    }, {
      "left" : "int kind;",
      "right" : "int kind;",
      "info" : "VariableDeclarationStatement[2417-2426]:VariableDeclarationStatement[2519-2528]"
    }, {
      "left" : "if (raw == String.class || raw == Object.class)",
      "right" : "if (raw == String.class || raw == Object.class)",
      "info" : "IfStatement[2467-4081]:IfStatement[2569-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2515-2568]:Block[2617-2670]"
    }, {
      "left" : "return StringKD.forType(raw);",
      "right" : "return StringKD.forType(raw);",
      "info" : "ReturnStatement[2529-2558]:ReturnStatement[2631-2660]"
    }, {
      "left" : "if (raw == UUID.class)",
      "right" : "if (raw == UUID.class)",
      "info" : "IfStatement[2574-4081]:IfStatement[2676-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2597-2638]:Block[2699-2740]"
    }, {
      "left" : "kind = TYPE_UUID;",
      "right" : "kind = TYPE_UUID;",
      "info" : "ExpressionStatement[2611-2628]:ExpressionStatement[2713-2730]"
    }, {
      "left" : "if (raw == Integer.class)",
      "right" : "if (raw == Integer.class)",
      "info" : "IfStatement[2644-4081]:IfStatement[2746-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2670-2710]:Block[2772-2812]"
    }, {
      "left" : "kind = TYPE_INT;",
      "right" : "kind = TYPE_INT;",
      "info" : "ExpressionStatement[2684-2700]:ExpressionStatement[2786-2802]"
    }, {
      "left" : "if (raw == Long.class)",
      "right" : "if (raw == Long.class)",
      "info" : "IfStatement[2716-4081]:IfStatement[2818-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2739-2780]:Block[2841-2882]"
    }, {
      "left" : "kind = TYPE_LONG;",
      "right" : "kind = TYPE_LONG;",
      "info" : "ExpressionStatement[2753-2770]:ExpressionStatement[2855-2872]"
    }, {
      "left" : "if (raw == Date.class)",
      "right" : "if (raw == Date.class)",
      "info" : "IfStatement[2786-4081]:IfStatement[2888-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2809-2850]:Block[2911-2952]"
    }, {
      "left" : "kind = TYPE_DATE;",
      "right" : "kind = TYPE_DATE;",
      "info" : "ExpressionStatement[2823-2840]:ExpressionStatement[2925-2942]"
    }, {
      "left" : "if (raw == Calendar.class)",
      "right" : "if (raw == Calendar.class)",
      "info" : "IfStatement[2856-4081]:IfStatement[2958-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2883-2964]:Block[2985-3066]"
    }, {
      "left" : "kind = TYPE_CALENDAR;",
      "right" : "kind = TYPE_CALENDAR;",
      "info" : "ExpressionStatement[2897-2918]:ExpressionStatement[2999-3020]"
    }, {
      "left" : "if (raw == Boolean.class)",
      "right" : "if (raw == Boolean.class)",
      "info" : "IfStatement[2970-4081]:IfStatement[3072-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2996-3040]:Block[3098-3142]"
    }, {
      "left" : "kind = TYPE_BOOLEAN;",
      "right" : "kind = TYPE_BOOLEAN;",
      "info" : "ExpressionStatement[3010-3030]:ExpressionStatement[3112-3132]"
    }, {
      "left" : "if (raw == Byte.class)",
      "right" : "if (raw == Byte.class)",
      "info" : "IfStatement[3046-4081]:IfStatement[3148-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3069-3110]:Block[3171-3212]"
    }, {
      "left" : "kind = TYPE_BYTE;",
      "right" : "kind = TYPE_BYTE;",
      "info" : "ExpressionStatement[3083-3100]:ExpressionStatement[3185-3202]"
    }, {
      "left" : "if (raw == Character.class)",
      "right" : "if (raw == Character.class)",
      "info" : "IfStatement[3116-4081]:IfStatement[3218-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3144-3185]:Block[3246-3287]"
    }, {
      "left" : "kind = TYPE_CHAR;",
      "right" : "kind = TYPE_CHAR;",
      "info" : "ExpressionStatement[3158-3175]:ExpressionStatement[3260-3277]"
    }, {
      "left" : "if (raw == Short.class)",
      "right" : "if (raw == Short.class)",
      "info" : "IfStatement[3191-4081]:IfStatement[3293-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3215-3257]:Block[3317-3359]"
    }, {
      "left" : "kind = TYPE_SHORT;",
      "right" : "kind = TYPE_SHORT;",
      "info" : "ExpressionStatement[3229-3247]:ExpressionStatement[3331-3349]"
    }, {
      "left" : "if (raw == Float.class)",
      "right" : "if (raw == Float.class)",
      "info" : "IfStatement[3263-4081]:IfStatement[3365-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3287-3329]:Block[3389-3431]"
    }, {
      "left" : "kind = TYPE_FLOAT;",
      "right" : "kind = TYPE_FLOAT;",
      "info" : "ExpressionStatement[3301-3319]:ExpressionStatement[3403-3421]"
    }, {
      "left" : "if (raw == Double.class)",
      "right" : "if (raw == Double.class)",
      "info" : "IfStatement[3335-4081]:IfStatement[3437-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3360-3403]:Block[3462-3505]"
    }, {
      "left" : "kind = TYPE_DOUBLE;",
      "right" : "kind = TYPE_DOUBLE;",
      "info" : "ExpressionStatement[3374-3393]:ExpressionStatement[3476-3495]"
    }, {
      "left" : "if (raw == URI.class)",
      "right" : "if (raw == URI.class)",
      "info" : "IfStatement[3409-4081]:IfStatement[3511-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3471]:Block[3533-3573]"
    }, {
      "left" : "kind = TYPE_URI;",
      "right" : "kind = TYPE_URI;",
      "info" : "ExpressionStatement[3445-3461]:ExpressionStatement[3547-3563]"
    }, {
      "left" : "if (raw == URL.class)",
      "right" : "if (raw == URL.class)",
      "info" : "IfStatement[3477-4081]:IfStatement[3579-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3499-3539]:Block[3601-3641]"
    }, {
      "left" : "kind = TYPE_URL;",
      "right" : "kind = TYPE_URL;",
      "info" : "ExpressionStatement[3513-3529]:ExpressionStatement[3615-3631]"
    }, {
      "left" : "if (raw == Class.class)",
      "right" : "if (raw == Class.class)",
      "info" : "IfStatement[3545-4081]:IfStatement[3647-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3569-3611]:Block[3671-3713]"
    }, {
      "left" : "kind = TYPE_CLASS;",
      "right" : "kind = TYPE_CLASS;",
      "info" : "ExpressionStatement[3583-3601]:ExpressionStatement[3685-3703]"
    }, {
      "left" : "if (raw == Locale.class)",
      "right" : "if (raw == Locale.class)",
      "info" : "IfStatement[3617-4081]:IfStatement[3719-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3642-3822]:Block[3744-3924]"
    }, {
      "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
      "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
      "info" : "VariableDeclarationStatement[3656-3744]:VariableDeclarationStatement[3758-3846]"
    }, {
      "left" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
      "right" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
      "info" : "ReturnStatement[3757-3812]:ReturnStatement[3859-3914]"
    }, {
      "left" : "if (raw == Currency.class)",
      "right" : "if (raw == Currency.class)",
      "info" : "IfStatement[3828-4081]:IfStatement[3930-4183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3855-4039]:Block[3957-4141]"
    }, {
      "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
      "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
      "info" : "VariableDeclarationStatement[3869-3959]:VariableDeclarationStatement[3971-4061]"
    }, {
      "left" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
      "right" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
      "info" : "ReturnStatement[3972-4029]:ReturnStatement[4074-4131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4045-4081]:Block[4147-4183]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4059-4071]:ReturnStatement[4161-4173]"
    }, {
      "left" : "return new StdKeyDeserializer(kind, raw);",
      "right" : "return new StdKeyDeserializer(kind, raw);",
      "info" : "ReturnStatement[4090-4131]:ReturnStatement[4192-4233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4258-4942]:Block[4360-5044]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[4268-4349]:IfStatement[4370-4451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4285-4349]:Block[4387-4451]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4327-4339]:ReturnStatement[4429-4441]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4358-4698]:TryStatement[4460-4800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4362-4499]:Block[4464-4601]"
    }, {
      "left" : "Object result = _parse(key, ctxt);",
      "right" : "Object result = _parse(key, ctxt);",
      "info" : "VariableDeclarationStatement[4376-4410]:VariableDeclarationStatement[4478-4512]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[4423-4489]:IfStatement[4525-4591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4443-4489]:Block[4545-4591]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4461-4475]:ReturnStatement[4563-4577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4521-4698]:Block[4623-4800]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\",\n                    re.getClass().getName(), re.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\",\n                    re.getClass().getName(), re.getMessage());",
      "info" : "ReturnStatement[4535-4688]:ReturnStatement[4637-4790]"
    }, {
      "left" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[4707-4854]:IfStatement[4809-4956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4818-4854]:Block[4920-4956]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4832-4844]:ReturnStatement[4934-4946]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "info" : "ReturnStatement[4863-4936]:ReturnStatement[4965-5038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5091-8601]:Block[5193-8703]"
    }, {
      "left" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
      "right" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
      "info" : "SwitchStatement[5101-8595]:SwitchStatement[5203-8697]"
    }, {
      "left" : "case TYPE_BOOLEAN:",
      "right" : "case TYPE_BOOLEAN:",
      "info" : "SwitchCase[5126-5144]:SwitchCase[5228-5246]"
    }, {
      "left" : "if (\"true\".equals(key))",
      "right" : "if (\"true\".equals(key))",
      "info" : "IfStatement[5157-5233]:IfStatement[5259-5335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5181-5233]:Block[5283-5335]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[5199-5219]:ReturnStatement[5301-5321]"
    }, {
      "left" : "if (\"false\".equals(key))",
      "right" : "if (\"false\".equals(key))",
      "info" : "IfStatement[5246-5324]:IfStatement[5348-5426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5271-5324]:Block[5373-5426]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[5289-5310]:ReturnStatement[5391-5412]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
      "info" : "ReturnStatement[5337-5411]:ReturnStatement[5439-5513]"
    }, {
      "left" : "case TYPE_BYTE:",
      "right" : "case TYPE_BYTE:",
      "info" : "SwitchCase[5420-5435]:SwitchCase[5522-5537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5448-5839]:Block[5550-5941]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5466-5493]:VariableDeclarationStatement[5568-5595]"
    }, {
      "left" : "if (value < Byte.MIN_VALUE || value > 255)",
      "right" : "if (value < Byte.MIN_VALUE || value > 255)",
      "info" : "IfStatement[5591-5774]:IfStatement[5693-5876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5634-5774]:Block[5736-5876]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");",
      "info" : "ReturnStatement[5656-5756]:ReturnStatement[5758-5858]"
    }, {
      "left" : "return Byte.valueOf((byte) value);",
      "right" : "return Byte.valueOf((byte) value);",
      "info" : "ReturnStatement[5791-5825]:ReturnStatement[5893-5927]"
    }, {
      "left" : "case TYPE_SHORT:",
      "right" : "case TYPE_SHORT:",
      "info" : "SwitchCase[5848-5864]:SwitchCase[5950-5966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5877-6263]:Block[5979-6365]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5895-5922]:VariableDeclarationStatement[5997-6024]"
    }, {
      "left" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "right" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "info" : "IfStatement[5939-6196]:IfStatement[6041-6298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5995-6196]:Block[6097-6298]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");",
      "info" : "ReturnStatement[6017-6118]:ReturnStatement[6119-6220]"
    }, {
      "left" : "return Short.valueOf((short) value);",
      "right" : "return Short.valueOf((short) value);",
      "info" : "ReturnStatement[6213-6249]:ReturnStatement[6315-6351]"
    }, {
      "left" : "case TYPE_CHAR:",
      "right" : "case TYPE_CHAR:",
      "info" : "SwitchCase[6272-6287]:SwitchCase[6374-6389]"
    }, {
      "left" : "if (key.length() == 1)",
      "right" : "if (key.length() == 1)",
      "info" : "IfStatement[6300-6395]:IfStatement[6402-6497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6323-6395]:Block[6425-6497]"
    }, {
      "left" : "return Character.valueOf(key.charAt(0));",
      "right" : "return Character.valueOf(key.charAt(0));",
      "info" : "ReturnStatement[6341-6381]:ReturnStatement[6443-6483]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
      "info" : "ReturnStatement[6408-6491]:ReturnStatement[6510-6593]"
    }, {
      "left" : "case TYPE_INT:",
      "right" : "case TYPE_INT:",
      "info" : "SwitchCase[6500-6514]:SwitchCase[6602-6616]"
    }, {
      "left" : "return _parseInt(key);",
      "right" : "return _parseInt(key);",
      "info" : "ReturnStatement[6527-6549]:ReturnStatement[6629-6651]"
    }, {
      "left" : "case TYPE_LONG:",
      "right" : "case TYPE_LONG:",
      "info" : "SwitchCase[6559-6574]:SwitchCase[6661-6676]"
    }, {
      "left" : "return _parseLong(key);",
      "right" : "return _parseLong(key);",
      "info" : "ReturnStatement[6587-6610]:ReturnStatement[6689-6712]"
    }, {
      "left" : "case TYPE_FLOAT:",
      "right" : "case TYPE_FLOAT:",
      "info" : "SwitchCase[6620-6636]:SwitchCase[6722-6738]"
    }, {
      "left" : "return Float.valueOf((float) _parseDouble(key));",
      "right" : "return Float.valueOf((float) _parseDouble(key));",
      "info" : "ReturnStatement[6741-6789]:ReturnStatement[6843-6891]"
    }, {
      "left" : "case TYPE_DOUBLE:",
      "right" : "case TYPE_DOUBLE:",
      "info" : "SwitchCase[6798-6815]:SwitchCase[6900-6917]"
    }, {
      "left" : "return _parseDouble(key);",
      "right" : "return _parseDouble(key);",
      "info" : "ReturnStatement[6828-6853]:ReturnStatement[6930-6955]"
    }, {
      "left" : "case TYPE_LOCALE:",
      "right" : "case TYPE_LOCALE:",
      "info" : "SwitchCase[6862-6879]:SwitchCase[6964-6981]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6892-7097]:TryStatement[6994-7199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6896-6966]:Block[6998-7068]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[6914-6952]:ReturnStatement[7016-7054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6989-7097]:Block[7091-7199]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");",
      "info" : "ReturnStatement[7007-7083]:ReturnStatement[7109-7185]"
    }, {
      "left" : "case TYPE_CURRENCY:",
      "right" : "case TYPE_CURRENCY:",
      "info" : "SwitchCase[7106-7125]:SwitchCase[7208-7227]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7138-7345]:TryStatement[7240-7447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7142-7212]:Block[7244-7314]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[7160-7198]:ReturnStatement[7262-7300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7235-7345]:Block[7337-7447]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");",
      "info" : "ReturnStatement[7253-7331]:ReturnStatement[7355-7433]"
    }, {
      "left" : "case TYPE_DATE:",
      "right" : "case TYPE_DATE:",
      "info" : "SwitchCase[7354-7369]:SwitchCase[7456-7471]"
    }, {
      "left" : "return ctxt.parseDate(key);",
      "right" : "return ctxt.parseDate(key);",
      "info" : "ReturnStatement[7382-7409]:ReturnStatement[7484-7511]"
    }, {
      "left" : "case TYPE_CALENDAR:",
      "right" : "case TYPE_CALENDAR:",
      "info" : "SwitchCase[7418-7437]:SwitchCase[7520-7539]"
    }, {
      "left" : "java.util.Date date = ctxt.parseDate(key);",
      "right" : "java.util.Date date = ctxt.parseDate(key);",
      "info" : "VariableDeclarationStatement[7450-7492]:VariableDeclarationStatement[7552-7594]"
    }, {
      "left" : "return (date == null)  ? null : ctxt.constructCalendar(date);",
      "right" : "return (date == null)  ? null : ctxt.constructCalendar(date);",
      "info" : "ReturnStatement[7505-7566]:ReturnStatement[7607-7668]"
    }, {
      "left" : "case TYPE_UUID:",
      "right" : "case TYPE_UUID:",
      "info" : "SwitchCase[7575-7590]:SwitchCase[7677-7692]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7603-7794]:TryStatement[7705-7896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7607-7667]:Block[7709-7769]"
    }, {
      "left" : "return UUID.fromString(key);",
      "right" : "return UUID.fromString(key);",
      "info" : "ReturnStatement[7625-7653]:ReturnStatement[7727-7755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7688-7794]:Block[7790-7896]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "info" : "ReturnStatement[7706-7780]:ReturnStatement[7808-7882]"
    }, {
      "left" : "case TYPE_URI:",
      "right" : "case TYPE_URI:",
      "info" : "SwitchCase[7803-7817]:SwitchCase[7905-7919]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7830-8016]:TryStatement[7932-8118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7834-7889]:Block[7936-7991]"
    }, {
      "left" : "return URI.create(key);",
      "right" : "return URI.create(key);",
      "info" : "ReturnStatement[7852-7875]:ReturnStatement[7954-7977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7910-8016]:Block[8012-8118]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "info" : "ReturnStatement[7928-8002]:ReturnStatement[8030-8104]"
    }, {
      "left" : "case TYPE_URL:",
      "right" : "case TYPE_URL:",
      "info" : "SwitchCase[8025-8039]:SwitchCase[8127-8141]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8052-8247]:TryStatement[8154-8349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8056-8108]:Block[8158-8210]"
    }, {
      "left" : "return new URL(key);",
      "right" : "return new URL(key);",
      "info" : "ReturnStatement[8074-8094]:ReturnStatement[8176-8196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8141-8247]:Block[8243-8349]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "info" : "ReturnStatement[8159-8233]:ReturnStatement[8261-8335]"
    }, {
      "left" : "case TYPE_CLASS:",
      "right" : "case TYPE_CLASS:",
      "info" : "SwitchCase[8256-8272]:SwitchCase[8358-8374]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8285-8476]:TryStatement[8387-8578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8289-8348]:Block[8391-8450]"
    }, {
      "left" : "return ctxt.findClass(key);",
      "right" : "return ctxt.findClass(key);",
      "info" : "ReturnStatement[8307-8334]:ReturnStatement[8409-8436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8369-8476]:Block[8471-8578]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
      "info" : "ReturnStatement[8387-8462]:ReturnStatement[8489-8564]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8485-8493]:SwitchCase[8587-8595]"
    }, {
      "left" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
      "right" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
      "info" : "ThrowStatement[8506-8585]:ThrowStatement[8608-8687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8857-8902]:Block[8959-9004]"
    }, {
      "left" : "return Integer.parseInt(key);",
      "right" : "return Integer.parseInt(key);",
      "info" : "ReturnStatement[8867-8896]:ReturnStatement[8969-8998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8978-9021]:Block[9080-9123]"
    }, {
      "left" : "return Long.parseLong(key);",
      "right" : "return Long.parseLong(key);",
      "info" : "ReturnStatement[8988-9015]:ReturnStatement[9090-9117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9101-9153]:Block[9203-9255]"
    }, {
      "left" : "return NumberInput.parseDouble(key);",
      "right" : "return NumberInput.parseDouble(key);",
      "info" : "ReturnStatement[9111-9147]:ReturnStatement[9213-9249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9708-9735]:Block[9810-9837]"
    }, {
      "left" : "super(-1, nominalType);",
      "right" : "super(-1, nominalType);",
      "info" : "SuperConstructorInvocation[9710-9733]:SuperConstructorInvocation[9812-9835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9806-10049]:Block[9908-10151]"
    }, {
      "left" : "if (nominalType == String.class)",
      "right" : "if (nominalType == String.class)",
      "info" : "IfStatement[9820-9900]:IfStatement[9922-10002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9853-9900]:Block[9955-10002]"
    }, {
      "left" : "return sString;",
      "right" : "return sString;",
      "info" : "ReturnStatement[9871-9886]:ReturnStatement[9973-9988]"
    }, {
      "left" : "if (nominalType == Object.class)",
      "right" : "if (nominalType == Object.class)",
      "info" : "IfStatement[9913-9993]:IfStatement[10015-10095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9946-9993]:Block[10048-10095]"
    }, {
      "left" : "return sObject;",
      "right" : "return sObject;",
      "info" : "ReturnStatement[9964-9979]:ReturnStatement[10066-10081]"
    }, {
      "left" : "return new StringKD(nominalType);",
      "right" : "return new StringKD(nominalType);",
      "info" : "ReturnStatement[10006-10039]:ReturnStatement[10108-10141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10191-10226]:Block[10293-10328]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[10205-10216]:ReturnStatement[10307-10318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10992-11063]:Block[11094-11165]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[11006-11022]:ExpressionStatement[11108-11124]"
    }, {
      "left" : "_delegate = deser;",
      "right" : "_delegate = deser;",
      "info" : "ExpressionStatement[11035-11053]:ExpressionStatement[11137-11155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12518-12637]:Block[12785-12904]"
    }, {
      "left" : "super(-1, er.getEnumClass());",
      "right" : "super(-1, er.getEnumClass());",
      "info" : "SuperConstructorInvocation[12532-12561]:SuperConstructorInvocation[12799-12828]"
    }, {
      "left" : "_byNameResolver = er;",
      "right" : "_byNameResolver = er;",
      "info" : "ExpressionStatement[12574-12595]:ExpressionStatement[12841-12862]"
    }, {
      "left" : "_factory = factory;",
      "right" : "_factory = factory;",
      "info" : "ExpressionStatement[12608-12627]:ExpressionStatement[12875-12894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12754-13593]:Block[13021-13860]"
    }, {
      "left" : "if (_factory != null)",
      "right" : "if (_factory != null)",
      "info" : "IfStatement[12768-12987]:IfStatement[13035-13254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12790-12987]:Block[13057-13254]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12808-12973]:TryStatement[13075-13240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12812-12879]:Block[13079-13146]"
    }, {
      "left" : "return _factory.call1(key);",
      "right" : "return _factory.call1(key);",
      "info" : "ReturnStatement[12834-12861]:ReturnStatement[13101-13128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12900-12973]:Block[13167-13240]"
    }, {
      "left" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "right" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "info" : "ExpressionStatement[12922-12955]:ExpressionStatement[13189-13222]"
    }, {
      "left" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
      "right" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
      "info" : "VariableDeclarationStatement[13000-13152]:VariableDeclarationStatement[13267-13419]"
    }, {
      "left" : "Enum<?> e = res.findEnum(key);",
      "right" : "Enum<?> e = res.findEnum(key);",
      "info" : "VariableDeclarationStatement[13165-13195]:VariableDeclarationStatement[13432-13462]"
    }, {
      "left" : "if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[13208-13561]:IfStatement[13475-13828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13313-13561]:Block[13580-13828]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
      "info" : "ReturnStatement[13331-13465]:ReturnStatement[13598-13732]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[13574-13583]:ReturnStatement[13841-13850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13682-14033]:Block[13949-14300]"
    }, {
      "left" : "EnumResolver res = _byToStringResolver;",
      "right" : "EnumResolver res = _byToStringResolver;",
      "info" : "VariableDeclarationStatement[13696-13735]:VariableDeclarationStatement[13963-14002]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[13748-13999]:IfStatement[14015-14266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13765-13999]:Block[14032-14266]"
    }, {
      "left" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
      "right" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
      "info" : "SynchronizedStatement[13783-13985]:SynchronizedStatement[14050-14252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13803-13985]:Block[14070-14252]"
    }, {
      "left" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
      "right" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
      "info" : "ExpressionStatement[13825-13967]:ExpressionStatement[14092-14234]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[14012-14023]:ReturnStatement[14279-14290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14417-14503]:Block[14684-14770]"
    }, {
      "left" : "super(-1, ctor.getDeclaringClass());",
      "right" : "super(-1, ctor.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[14431-14467]:SuperConstructorInvocation[14698-14734]"
    }, {
      "left" : "_ctor = ctor;",
      "right" : "_ctor = ctor;",
      "info" : "ExpressionStatement[14480-14493]:ExpressionStatement[14747-14760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14618-14672]:Block[14885-14939]"
    }, {
      "left" : "return _ctor.newInstance(key);",
      "right" : "return _ctor.newInstance(key);",
      "info" : "ReturnStatement[14632-14662]:ReturnStatement[14899-14929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15039-15130]:Block[15306-15397]"
    }, {
      "left" : "super(-1, fm.getDeclaringClass());",
      "right" : "super(-1, fm.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[15053-15087]:SuperConstructorInvocation[15320-15354]"
    }, {
      "left" : "_factoryMethod = fm;",
      "right" : "_factoryMethod = fm;",
      "info" : "ExpressionStatement[15100-15120]:ExpressionStatement[15367-15387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15245-15309]:Block[15512-15576]"
    }, {
      "left" : "return _factoryMethod.invoke(null, key);",
      "right" : "return _factoryMethod.invoke(null, key);",
      "info" : "ReturnStatement[15259-15299]:ReturnStatement[15526-15566]"
    } ]
  },
  "interFileMappings" : { }
}