{
  "matchedElements" : [
 {
    "left" : "class : FunctionTypeBuilder",
    "right" : "class : FunctionTypeBuilder",
    "info" : "TypeDeclaration[1924-25828]:TypeDeclaration[1924-25859]"
  }, {
    "left" : "fnName",
    "right" : "fnName",
    "info" : "FieldDeclaration[2739-2767]:FieldDeclaration[2739-2767]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[2770-2810]:FieldDeclaration[2770-2810]"
  }, {
    "left" : "codingConvention",
    "right" : "codingConvention",
    "info" : "FieldDeclaration[2813-2861]:FieldDeclaration[2813-2861]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[2864-2906]:FieldDeclaration[2864-2906]"
  }, {
    "left" : "errorRoot",
    "right" : "errorRoot",
    "info" : "FieldDeclaration[2909-2938]:FieldDeclaration[2909-2938]"
  }, {
    "left" : "sourceName",
    "right" : "sourceName",
    "info" : "FieldDeclaration[2941-2973]:FieldDeclaration[2941-2973]"
  }, {
    "left" : "scope",
    "right" : "scope",
    "info" : "FieldDeclaration[2976-3002]:FieldDeclaration[2976-3002]"
  }, {
    "left" : "returnType",
    "right" : "returnType",
    "info" : "FieldDeclaration[3006-3039]:FieldDeclaration[3006-3039]"
  }, {
    "left" : "returnTypeInferred",
    "right" : "returnTypeInferred",
    "info" : "FieldDeclaration[3042-3085]:FieldDeclaration[3042-3085]"
  }, {
    "left" : "implementedInterfaces",
    "right" : "implementedInterfaces",
    "info" : "FieldDeclaration[3088-3142]:FieldDeclaration[3088-3142]"
  }, {
    "left" : "baseType",
    "right" : "baseType",
    "info" : "FieldDeclaration[3145-3180]:FieldDeclaration[3145-3180]"
  }, {
    "left" : "thisType",
    "right" : "thisType",
    "info" : "FieldDeclaration[3183-3218]:FieldDeclaration[3183-3218]"
  }, {
    "left" : "isConstructor",
    "right" : "isConstructor",
    "info" : "FieldDeclaration[3221-3259]:FieldDeclaration[3221-3259]"
  }, {
    "left" : "isInterface",
    "right" : "isInterface",
    "info" : "FieldDeclaration[3262-3298]:FieldDeclaration[3262-3298]"
  }, {
    "left" : "parametersNode",
    "right" : "parametersNode",
    "info" : "FieldDeclaration[3301-3336]:FieldDeclaration[3301-3336]"
  }, {
    "left" : "sourceNode",
    "right" : "sourceNode",
    "info" : "FieldDeclaration[3339-3370]:FieldDeclaration[3339-3370]"
  }, {
    "left" : "templateTypeName",
    "right" : "templateTypeName",
    "info" : "FieldDeclaration[3373-3412]:FieldDeclaration[3373-3412]"
  }, {
    "left" : "EXTENDS_WITHOUT_TYPEDEF",
    "right" : "EXTENDS_WITHOUT_TYPEDEF",
    "info" : "FieldDeclaration[3416-3597]:FieldDeclaration[3416-3597]"
  }, {
    "left" : "EXTENDS_NON_OBJECT",
    "right" : "EXTENDS_NON_OBJECT",
    "info" : "FieldDeclaration[3601-3748]:FieldDeclaration[3601-3748]"
  }, {
    "left" : "RESOLVED_TAG_EMPTY",
    "right" : "RESOLVED_TAG_EMPTY",
    "info" : "FieldDeclaration[3752-3907]:FieldDeclaration[3752-3907]"
  }, {
    "left" : "IMPLEMENTS_WITHOUT_CONSTRUCTOR",
    "right" : "IMPLEMENTS_WITHOUT_CONSTRUCTOR",
    "info" : "FieldDeclaration[3911-4123]:FieldDeclaration[3911-4123]"
  }, {
    "left" : "VAR_ARGS_MUST_BE_LAST",
    "right" : "VAR_ARGS_MUST_BE_LAST",
    "info" : "FieldDeclaration[4127-4285]:FieldDeclaration[4127-4285]"
  }, {
    "left" : "OPTIONAL_ARG_AT_END",
    "right" : "OPTIONAL_ARG_AT_END",
    "info" : "FieldDeclaration[4289-4443]:FieldDeclaration[4289-4443]"
  }, {
    "left" : "INEXISTANT_PARAM",
    "right" : "INEXISTANT_PARAM",
    "info" : "FieldDeclaration[4447-4612]:FieldDeclaration[4447-4612]"
  }, {
    "left" : "TYPE_REDEFINITION",
    "right" : "TYPE_REDEFINITION",
    "info" : "FieldDeclaration[4616-4816]:FieldDeclaration[4616-4816]"
  }, {
    "left" : "TEMPLATE_TYPE_DUPLICATED",
    "right" : "TEMPLATE_TYPE_DUPLICATED",
    "info" : "FieldDeclaration[4820-4994]:FieldDeclaration[4820-4994]"
  }, {
    "left" : "TEMPLATE_TYPE_EXPECTED",
    "right" : "TEMPLATE_TYPE_EXPECTED",
    "info" : "FieldDeclaration[4998-5161]:FieldDeclaration[4998-5161]"
  }, {
    "left" : "THIS_TYPE_NON_OBJECT",
    "right" : "THIS_TYPE_NON_OBJECT",
    "info" : "FieldDeclaration[5165-5373]:FieldDeclaration[5165-5373]"
  }, {
    "left" : "class : ExtendedTypeValidator",
    "right" : "class : ExtendedTypeValidator",
    "info" : "TypeDeclaration[5377-6116]:TypeDeclaration[5377-6116]"
  }, {
    "left" : "public apply(type ) : boolean",
    "right" : "public apply(type ) : boolean",
    "info" : "MethodDeclaration[5448-6112]:MethodDeclaration[5448-6112]"
  }, {
    "left" : "class : ImplementedTypeValidator",
    "right" : "class : ImplementedTypeValidator",
    "info" : "TypeDeclaration[6121-6849]:TypeDeclaration[6121-6849]"
  }, {
    "left" : "public apply(type ) : boolean",
    "right" : "public apply(type ) : boolean",
    "info" : "MethodDeclaration[6195-6845]:MethodDeclaration[6195-6845]"
  }, {
    "left" : "class : ThisTypeValidator",
    "right" : "class : ThisTypeValidator",
    "info" : "TypeDeclaration[6854-7573]:TypeDeclaration[6854-7604]"
  }, {
    "left" : "public apply(type ) : boolean",
    "right" : "public apply(type ) : boolean",
    "info" : "MethodDeclaration[6921-7569]:MethodDeclaration[6921-7600]"
  }, {
    "left" : "package FunctionTypeBuilder(fnName , compiler , errorRoot , sourceName , scope )",
    "right" : "package FunctionTypeBuilder(fnName , compiler , errorRoot , sourceName , scope )",
    "info" : "MethodDeclaration[7578-8341]:MethodDeclaration[7609-8372]"
  }, {
    "left" : "package setSourceNode(sourceNode ) : ",
    "right" : "package setSourceNode(sourceNode ) : ",
    "info" : "MethodDeclaration[8345-8520]:MethodDeclaration[8376-8551]"
  }, {
    "left" : "package inferFromOverriddenFunction(oldType , paramsParent ) : ",
    "right" : "package inferFromOverriddenFunction(oldType , paramsParent ) : ",
    "info" : "MethodDeclaration[8524-10947]:MethodDeclaration[8555-10978]"
  }, {
    "left" : "package inferReturnType(info ) : ",
    "right" : "package inferReturnType(info ) : ",
    "info" : "MethodDeclaration[10951-11443]:MethodDeclaration[10982-11474]"
  }, {
    "left" : "package inferReturnStatementsAsLastResort(functionBlock ) : ",
    "right" : "package inferReturnStatementsAsLastResort(functionBlock ) : ",
    "info" : "MethodDeclaration[11447-12711]:MethodDeclaration[11478-12742]"
  }, {
    "left" : "package inferInheritance(info ) : ",
    "right" : "package inferInheritance(info ) : ",
    "info" : "MethodDeclaration[12715-14485]:MethodDeclaration[12746-14516]"
  }, {
    "left" : "package inferThisType(info , type ) : ",
    "right" : "package inferThisType(info , type ) : ",
    "info" : "MethodDeclaration[14489-14803]:MethodDeclaration[14520-14834]"
  }, {
    "left" : "package inferThisType(info , owner ) : ",
    "right" : "package inferThisType(info , owner ) : ",
    "info" : "MethodDeclaration[14807-16224]:MethodDeclaration[14838-16255]"
  }, {
    "left" : "package inferParameterTypes(info ) : ",
    "right" : "package inferParameterTypes(info ) : ",
    "info" : "MethodDeclaration[16228-16584]:MethodDeclaration[16259-16615]"
  }, {
    "left" : "package inferParameterTypes(argsParent , info ) : ",
    "right" : "package inferParameterTypes(argsParent , info ) : ",
    "info" : "MethodDeclaration[16588-19016]:MethodDeclaration[16619-19047]"
  }, {
    "left" : "private isOptionalParameter(param , info ) : boolean",
    "right" : "private isOptionalParameter(param , info ) : boolean",
    "info" : "MethodDeclaration[19020-19421]:MethodDeclaration[19051-19452]"
  }, {
    "left" : "private isVarArgsParameter(param , info ) : boolean",
    "right" : "private isVarArgsParameter(param , info ) : boolean",
    "info" : "MethodDeclaration[19425-19872]:MethodDeclaration[19456-19903]"
  }, {
    "left" : "package inferTemplateTypeName(info ) : ",
    "right" : "package inferTemplateTypeName(info ) : ",
    "info" : "MethodDeclaration[19876-20167]:MethodDeclaration[19907-20198]"
  }, {
    "left" : "private addParameter(builder , paramType , warnedAboutArgList boolean, isOptional boolean, isVarArgs boolean) : boolean",
    "right" : "private addParameter(builder , paramType , warnedAboutArgList boolean, isOptional boolean, isVarArgs boolean) : boolean",
    "info" : "MethodDeclaration[20171-21757]:MethodDeclaration[20202-21788]"
  }, {
    "left" : "package buildAndRegister() : ",
    "right" : "package buildAndRegister() : ",
    "info" : "MethodDeclaration[21761-23006]:MethodDeclaration[21792-23037]"
  }, {
    "left" : "private maybeSetBaseType(fnType ) : void",
    "right" : "private maybeSetBaseType(fnType ) : void",
    "info" : "MethodDeclaration[23010-23144]:MethodDeclaration[23041-23175]"
  }, {
    "left" : "private getOrCreateConstructor() : ",
    "right" : "private getOrCreateConstructor() : ",
    "info" : "MethodDeclaration[23148-25218]:MethodDeclaration[23179-25249]"
  }, {
    "left" : "private reportWarning(warning , ) : void",
    "right" : "private reportWarning(warning , ) : void",
    "info" : "MethodDeclaration[25222-25368]:MethodDeclaration[25253-25399]"
  }, {
    "left" : "private reportError(error , ) : void",
    "right" : "private reportError(error , ) : void",
    "info" : "MethodDeclaration[25372-25512]:MethodDeclaration[25403-25543]"
  }, {
    "left" : "package isFunctionTypeDeclaration(info ) : boolean",
    "right" : "package isFunctionTypeDeclaration(info ) : boolean",
    "info" : "MethodDeclaration[25516-25826]:MethodDeclaration[25547-25857]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5377-5384]:Modifier[5377-5384]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[5385-5390]:TYPE_DECLARATION_KIND[5385-5390]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5448-5457]:MarkerAnnotation[5448-5457]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5462-5468]:Modifier[5462-5468]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5469-5476]:PrimitiveType[5469-5476]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[5477-5482]:SimpleName[5477-5482]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[5483-5494]:SingleVariableDeclaration[5483-5494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5496-6112]:Block[5496-6112]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(type);",
    "right" : "ObjectType objectType = ObjectType.cast(type);",
    "info" : "VariableDeclarationStatement[5504-5550]:VariableDeclarationStatement[5504-5550]"
  }, {
    "left" : "if (objectType == null)",
    "right" : "if (objectType == null)",
    "info" : "IfStatement[5557-6086]:IfStatement[5557-6086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5581-5658]:Block[5581-5658]"
  }, {
    "left" : "reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());",
    "right" : "reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());",
    "info" : "ExpressionStatement[5591-5650]:ExpressionStatement[5591-5650]"
  }, {
    "left" : "if (objectType.isUnknownType() &&\n          // If this has a supertype that hasn't been resolved yet,\n          // then we can assume this type will be ok once the super\n          // type resolves.\n          (objectType.getImplicitPrototype() == null ||\n           objectType.getImplicitPrototype().isResolved()))",
    "right" : "if (objectType.isUnknownType() &&\n          // If this has a supertype that hasn't been resolved yet,\n          // then we can assume this type will be ok once the super\n          // type resolves.\n          (objectType.getImplicitPrototype() == null ||\n           objectType.getImplicitPrototype().isResolved()))",
    "info" : "IfStatement[5664-6086]:IfStatement[5664-6086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5978-6050]:Block[5978-6050]"
  }, {
    "left" : "reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);",
    "right" : "reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);",
    "info" : "ExpressionStatement[5988-6042]:ExpressionStatement[5988-6042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6056-6086]:Block[6056-6086]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6066-6078]:ReturnStatement[6066-6078]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6093-6106]:ReturnStatement[6093-6106]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6121-6128]:Modifier[6121-6128]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6129-6134]:TYPE_DECLARATION_KIND[6129-6134]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6195-6204]:MarkerAnnotation[6195-6204]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6209-6215]:Modifier[6209-6215]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6216-6223]:PrimitiveType[6216-6223]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[6224-6229]:SimpleName[6224-6229]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[6230-6241]:SingleVariableDeclaration[6230-6241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6243-6845]:Block[6243-6845]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(type);",
    "right" : "ObjectType objectType = ObjectType.cast(type);",
    "info" : "VariableDeclarationStatement[6251-6297]:VariableDeclarationStatement[6251-6297]"
  }, {
    "left" : "if (objectType == null)",
    "right" : "if (objectType == null)",
    "info" : "IfStatement[6304-6819]:IfStatement[6304-6819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6328-6388]:Block[6328-6388]"
  }, {
    "left" : "reportError(BAD_IMPLEMENTED_TYPE, fnName);",
    "right" : "reportError(BAD_IMPLEMENTED_TYPE, fnName);",
    "info" : "ExpressionStatement[6338-6380]:ExpressionStatement[6338-6380]"
  }, {
    "left" : "if (objectType.isUnknownType() &&\n          // If this has a supertype that hasn't been resolved yet,\n          // then we can assume this type will be ok once the super\n          // type resolves.\n          (objectType.getImplicitPrototype() == null ||\n           objectType.getImplicitPrototype().isResolved()))",
    "right" : "if (objectType.isUnknownType() &&\n          // If this has a supertype that hasn't been resolved yet,\n          // then we can assume this type will be ok once the super\n          // type resolves.\n          (objectType.getImplicitPrototype() == null ||\n           objectType.getImplicitPrototype().isResolved()))",
    "info" : "IfStatement[6394-6819]:IfStatement[6394-6819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6708-6783]:Block[6708-6783]"
  }, {
    "left" : "reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);",
    "right" : "reportWarning(RESOLVED_TAG_EMPTY, \"@implements\", fnName);",
    "info" : "ExpressionStatement[6718-6775]:ExpressionStatement[6718-6775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6789-6819]:Block[6789-6819]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6799-6811]:ReturnStatement[6799-6811]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6826-6839]:ReturnStatement[6826-6839]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6854-6861]:Modifier[6854-6861]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6862-6867]:TYPE_DECLARATION_KIND[6862-6867]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6921-6930]:MarkerAnnotation[6921-6930]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6935-6941]:Modifier[6935-6941]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6942-6949]:PrimitiveType[6942-6949]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[6950-6955]:SimpleName[6950-6955]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[6956-6967]:SingleVariableDeclaration[6956-6967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6969-7569]:Block[6969-7600]"
  }, {
    "left" : "if (!type.isSubtype(\n              typeRegistry.getNativeType(OBJECT_TYPE)))",
    "right" : "if (!type.restrictByNotNullOrUndefined().isSubtype(\n              typeRegistry.getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[7374-7544]:IfStatement[7374-7575]"
  }, {
    "left" : "type",
    "right" : "type",
    "info" : "METHOD_INVOCATION_RECEIVER[7379-7383]:METHOD_INVOCATION_RECEIVER[7379-7383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7451-7544]:Block[7482-7575]"
  }, {
    "left" : "reportWarning(THIS_TYPE_NON_OBJECT, type.toString());",
    "right" : "reportWarning(THIS_TYPE_NON_OBJECT, type.toString());",
    "info" : "ExpressionStatement[7461-7514]:ExpressionStatement[7492-7545]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7523-7536]:ReturnStatement[7554-7567]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7551-7563]:ReturnStatement[7582-7594]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleName[7896-7915]:SimpleName[7927-7946]"
  }, {
    "left" : "String fnName",
    "right" : "String fnName",
    "info" : "SingleVariableDeclaration[7916-7929]:SingleVariableDeclaration[7947-7960]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[7931-7956]:SingleVariableDeclaration[7962-7987]"
  }, {
    "left" : "Node errorRoot",
    "right" : "Node errorRoot",
    "info" : "SingleVariableDeclaration[7964-7978]:SingleVariableDeclaration[7995-8009]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[7980-7997]:SingleVariableDeclaration[8011-8028]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[7999-8010]:SingleVariableDeclaration[8030-8041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8012-8341]:Block[8043-8372]"
  }, {
    "left" : "Preconditions.checkNotNull(errorRoot);",
    "right" : "Preconditions.checkNotNull(errorRoot);",
    "info" : "ExpressionStatement[8018-8056]:ExpressionStatement[8049-8087]"
  }, {
    "left" : "this.fnName = fnName == null ? \"\" : fnName;",
    "right" : "this.fnName = fnName == null ? \"\" : fnName;",
    "info" : "ExpressionStatement[8062-8105]:ExpressionStatement[8093-8136]"
  }, {
    "left" : "this.codingConvention = compiler.getCodingConvention();",
    "right" : "this.codingConvention = compiler.getCodingConvention();",
    "info" : "ExpressionStatement[8110-8165]:ExpressionStatement[8141-8196]"
  }, {
    "left" : "this.typeRegistry = compiler.getTypeRegistry();",
    "right" : "this.typeRegistry = compiler.getTypeRegistry();",
    "info" : "ExpressionStatement[8170-8217]:ExpressionStatement[8201-8248]"
  }, {
    "left" : "this.errorRoot = errorRoot;",
    "right" : "this.errorRoot = errorRoot;",
    "info" : "ExpressionStatement[8222-8249]:ExpressionStatement[8253-8280]"
  }, {
    "left" : "this.sourceName = sourceName;",
    "right" : "this.sourceName = sourceName;",
    "info" : "ExpressionStatement[8254-8283]:ExpressionStatement[8285-8314]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[8288-8313]:ExpressionStatement[8319-8344]"
  }, {
    "left" : "this.scope = scope;",
    "right" : "this.scope = scope;",
    "info" : "ExpressionStatement[8318-8337]:ExpressionStatement[8349-8368]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[8403-8422]:SimpleType[8434-8453]"
  }, {
    "left" : "setSourceNode",
    "right" : "setSourceNode",
    "info" : "SimpleName[8423-8436]:SimpleName[8454-8467]"
  }, {
    "left" : "@Nullable Node sourceNode",
    "right" : "@Nullable Node sourceNode",
    "info" : "SingleVariableDeclaration[8437-8462]:SingleVariableDeclaration[8468-8493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8464-8520]:Block[8495-8551]"
  }, {
    "left" : "this.sourceNode = sourceNode;",
    "right" : "this.sourceNode = sourceNode;",
    "info" : "ExpressionStatement[8470-8499]:ExpressionStatement[8501-8530]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[8504-8516]:ReturnStatement[8535-8547]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[8925-8944]:SimpleType[8956-8975]"
  }, {
    "left" : "inferFromOverriddenFunction",
    "right" : "inferFromOverriddenFunction",
    "info" : "SimpleName[8945-8972]:SimpleName[8976-9003]"
  }, {
    "left" : "@Nullable FunctionType oldType",
    "right" : "@Nullable FunctionType oldType",
    "info" : "SingleVariableDeclaration[8980-9010]:SingleVariableDeclaration[9011-9041]"
  }, {
    "left" : "@Nullable Node paramsParent",
    "right" : "@Nullable Node paramsParent",
    "info" : "SingleVariableDeclaration[9012-9039]:SingleVariableDeclaration[9043-9070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9041-10947]:Block[9072-10978]"
  }, {
    "left" : "if (oldType == null)",
    "right" : "if (oldType == null)",
    "info" : "IfStatement[9047-9094]:IfStatement[9078-9125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9068-9094]:Block[9099-9125]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[9076-9088]:ReturnStatement[9107-9119]"
  }, {
    "left" : "returnType = oldType.getReturnType();",
    "right" : "returnType = oldType.getReturnType();",
    "info" : "ExpressionStatement[9100-9137]:ExpressionStatement[9131-9168]"
  }, {
    "left" : "returnTypeInferred = oldType.isReturnTypeInferred();",
    "right" : "returnTypeInferred = oldType.isReturnTypeInferred();",
    "info" : "ExpressionStatement[9142-9194]:ExpressionStatement[9173-9225]"
  }, {
    "left" : "if (paramsParent == null)",
    "right" : "if (paramsParent == null)",
    "info" : "IfStatement[9199-10926]:IfStatement[9230-10957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9225-9434]:Block[9256-9465]"
  }, {
    "left" : "parametersNode = oldType.getParametersNode();",
    "right" : "parametersNode = oldType.getParametersNode();",
    "info" : "ExpressionStatement[9266-9311]:ExpressionStatement[9297-9342]"
  }, {
    "left" : "if (parametersNode == null)",
    "right" : "if (parametersNode == null)",
    "info" : "IfStatement[9318-9428]:IfStatement[9349-9459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9346-9428]:Block[9377-9459]"
  }, {
    "left" : "parametersNode = new FunctionParamBuilder(typeRegistry).build();",
    "right" : "parametersNode = new FunctionParamBuilder(typeRegistry).build();",
    "info" : "ExpressionStatement[9356-9420]:ExpressionStatement[9387-9451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9440-10926]:Block[9471-10957]"
  }, {
    "left" : "FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);",
    "right" : "FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);",
    "info" : "VariableDeclarationStatement[9565-9650]:VariableDeclarationStatement[9596-9681]"
  }, {
    "left" : "Iterator<Node> oldParams = oldType.getParameters().iterator();",
    "right" : "Iterator<Node> oldParams = oldType.getParameters().iterator();",
    "info" : "VariableDeclarationStatement[9657-9719]:VariableDeclarationStatement[9688-9750]"
  }, {
    "left" : "boolean warnedAboutArgList = false;",
    "right" : "boolean warnedAboutArgList = false;",
    "info" : "VariableDeclarationStatement[9726-9761]:VariableDeclarationStatement[9757-9792]"
  }, {
    "left" : "boolean oldParamsListHitOptArgs = false;",
    "right" : "boolean oldParamsListHitOptArgs = false;",
    "info" : "VariableDeclarationStatement[9768-9808]:VariableDeclarationStatement[9799-9839]"
  }, {
    "left" : "for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext())",
    "right" : "for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext())",
    "info" : "ForStatement[9815-10875]:ForStatement[9846-10906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9942-10875]:Block[9973-10906]"
  }, {
    "left" : "if (oldParams.hasNext())",
    "right" : "if (oldParams.hasNext())",
    "info" : "IfStatement[9952-10867]:IfStatement[9983-10898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9977-10509]:Block[10008-10540]"
  }, {
    "left" : "Node oldParam = oldParams.next();",
    "right" : "Node oldParam = oldParams.next();",
    "info" : "VariableDeclarationStatement[9989-10022]:VariableDeclarationStatement[10020-10053]"
  }, {
    "left" : "Node newParam = paramBuilder.newParameterFromNode(oldParam);",
    "right" : "Node newParam = paramBuilder.newParameterFromNode(oldParam);",
    "info" : "VariableDeclarationStatement[10033-10093]:VariableDeclarationStatement[10064-10124]"
  }, {
    "left" : "oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();",
    "right" : "oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();",
    "info" : "ExpressionStatement[10105-10235]:ExpressionStatement[10136-10266]"
  }, {
    "left" : "if (currentParam.getNext() != null && newParam.isVarArgs())",
    "right" : "if (currentParam.getNext() != null && newParam.isVarArgs())",
    "info" : "IfStatement[10343-10499]:IfStatement[10374-10530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10403-10499]:Block[10434-10530]"
  }, {
    "left" : "newParam.setVarArgs(false);",
    "right" : "newParam.setVarArgs(false);",
    "info" : "ExpressionStatement[10417-10444]:ExpressionStatement[10448-10475]"
  }, {
    "left" : "newParam.setOptionalArg(true);",
    "right" : "newParam.setOptionalArg(true);",
    "info" : "ExpressionStatement[10457-10487]:ExpressionStatement[10488-10518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10515-10867]:Block[10546-10898]"
  }, {
    "left" : "warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));",
    "right" : "warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));",
    "info" : "ExpressionStatement[10527-10857]:ExpressionStatement[10558-10888]"
  }, {
    "left" : "parametersNode = paramBuilder.build();",
    "right" : "parametersNode = paramBuilder.build();",
    "info" : "ExpressionStatement[10882-10920]:ExpressionStatement[10913-10951]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[10931-10943]:ReturnStatement[10962-10974]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[11006-11025]:SimpleType[11037-11056]"
  }, {
    "left" : "inferReturnType",
    "right" : "inferReturnType",
    "info" : "SimpleName[11026-11041]:SimpleName[11057-11072]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[11042-11066]:SingleVariableDeclaration[11073-11097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11068-11443]:Block[11099-11474]"
  }, {
    "left" : "if (info != null && info.hasReturnType())",
    "right" : "if (info != null && info.hasReturnType())",
    "info" : "IfStatement[11074-11228]:IfStatement[11105-11259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11116-11228]:Block[11147-11259]"
  }, {
    "left" : "returnType = info.getReturnType().evaluate(scope, typeRegistry);",
    "right" : "returnType = info.getReturnType().evaluate(scope, typeRegistry);",
    "info" : "ExpressionStatement[11124-11188]:ExpressionStatement[11155-11219]"
  }, {
    "left" : "returnTypeInferred = false;",
    "right" : "returnTypeInferred = false;",
    "info" : "ExpressionStatement[11195-11222]:ExpressionStatement[11226-11253]"
  }, {
    "left" : "if (templateTypeName != null &&\n        returnType != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType())",
    "right" : "if (templateTypeName != null &&\n        returnType != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType())",
    "info" : "IfStatement[11234-11422]:IfStatement[11265-11453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11364-11422]:Block[11395-11453]"
  }, {
    "left" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
    "right" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
    "info" : "ExpressionStatement[11372-11416]:ExpressionStatement[11403-11447]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[11427-11439]:ReturnStatement[11458-11470]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[11565-11584]:SimpleType[11596-11615]"
  }, {
    "left" : "inferReturnStatementsAsLastResort",
    "right" : "inferReturnStatementsAsLastResort",
    "info" : "SimpleName[11585-11618]:SimpleName[11616-11649]"
  }, {
    "left" : "@Nullable Node functionBlock",
    "right" : "@Nullable Node functionBlock",
    "info" : "SingleVariableDeclaration[11626-11654]:SingleVariableDeclaration[11657-11685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11656-12711]:Block[11687-12742]"
  }, {
    "left" : "if (functionBlock == null || compiler.getInput(sourceName).isExtern())",
    "right" : "if (functionBlock == null || compiler.getInput(sourceName).isExtern())",
    "info" : "IfStatement[11662-11759]:IfStatement[11693-11790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11733-11759]:Block[11764-11790]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[11741-11753]:ReturnStatement[11772-11784]"
  }, {
    "left" : "Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[11764-11832]:ExpressionStatement[11795-11863]"
  }, {
    "left" : "if (returnType == null)",
    "right" : "if (returnType == null)",
    "info" : "IfStatement[11837-12690]:IfStatement[11868-12721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11861-12690]:Block[11892-12721]"
  }, {
    "left" : "boolean hasNonEmptyReturns = false;",
    "right" : "boolean hasNonEmptyReturns = false;",
    "info" : "VariableDeclarationStatement[11869-11904]:VariableDeclarationStatement[11900-11935]"
  }, {
    "left" : "List<Node> worklist = Lists.newArrayList(functionBlock);",
    "right" : "List<Node> worklist = Lists.newArrayList(functionBlock);",
    "info" : "VariableDeclarationStatement[11911-11967]:VariableDeclarationStatement[11942-11998]"
  }, {
    "left" : "while (!worklist.isEmpty())",
    "right" : "while (!worklist.isEmpty())",
    "info" : "WhileStatement[11974-12547]:WhileStatement[12005-12578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12002-12547]:Block[12033-12578]"
  }, {
    "left" : "Node current = worklist.remove(worklist.size() - 1);",
    "right" : "Node current = worklist.remove(worklist.size() - 1);",
    "info" : "VariableDeclarationStatement[12012-12064]:VariableDeclarationStatement[12043-12095]"
  }, {
    "left" : "int cType = current.getType();",
    "right" : "int cType = current.getType();",
    "info" : "VariableDeclarationStatement[12073-12103]:VariableDeclarationStatement[12104-12134]"
  }, {
    "left" : "if (cType == Token.RETURN && current.getFirstChild() != null ||\n            cType == Token.THROW)",
    "right" : "if (cType == Token.RETURN && current.getFirstChild() != null ||\n            cType == Token.THROW)",
    "info" : "IfStatement[12112-12539]:IfStatement[12143-12570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12210-12275]:Block[12241-12306]"
  }, {
    "left" : "hasNonEmptyReturns = true;",
    "right" : "hasNonEmptyReturns = true;",
    "info" : "ExpressionStatement[12222-12248]:ExpressionStatement[12253-12279]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12259-12265]:BreakStatement[12290-12296]"
  }, {
    "left" : "if (NodeUtil.isStatementBlock(current) ||\n            NodeUtil.isControlStructure(current))",
    "right" : "if (NodeUtil.isStatementBlock(current) ||\n            NodeUtil.isControlStructure(current))",
    "info" : "IfStatement[12281-12539]:IfStatement[12312-12570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12373-12539]:Block[12404-12570]"
  }, {
    "left" : "for (Node child = current.getFirstChild();\n               child != null; child = child.getNext())",
    "right" : "for (Node child = current.getFirstChild();\n               child != null; child = child.getNext())",
    "info" : "ForStatement[12385-12529]:ForStatement[12416-12560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12483-12529]:Block[12514-12560]"
  }, {
    "left" : "worklist.add(child);",
    "right" : "worklist.add(child);",
    "info" : "ExpressionStatement[12497-12517]:ExpressionStatement[12528-12548]"
  }, {
    "left" : "if (!hasNonEmptyReturns)",
    "right" : "if (!hasNonEmptyReturns)",
    "info" : "IfStatement[12555-12684]:IfStatement[12586-12715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12580-12684]:Block[12611-12715]"
  }, {
    "left" : "returnType = typeRegistry.getNativeType(VOID_TYPE);",
    "right" : "returnType = typeRegistry.getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[12590-12641]:ExpressionStatement[12621-12672]"
  }, {
    "left" : "returnTypeInferred = true;",
    "right" : "returnTypeInferred = true;",
    "info" : "ExpressionStatement[12650-12676]:ExpressionStatement[12681-12707]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[12695-12707]:ReturnStatement[12726-12738]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[12850-12869]:SimpleType[12881-12900]"
  }, {
    "left" : "inferInheritance",
    "right" : "inferInheritance",
    "info" : "SimpleName[12870-12886]:SimpleName[12901-12917]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[12887-12911]:SingleVariableDeclaration[12918-12942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12913-14485]:Block[12944-14516]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[12919-14463]:IfStatement[12950-14494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12937-14463]:Block[12968-14494]"
  }, {
    "left" : "isConstructor = info.isConstructor();",
    "right" : "isConstructor = info.isConstructor();",
    "info" : "ExpressionStatement[12945-12982]:ExpressionStatement[12976-13013]"
  }, {
    "left" : "isInterface = info.isInterface();",
    "right" : "isInterface = info.isInterface();",
    "info" : "ExpressionStatement[12989-13022]:ExpressionStatement[13020-13053]"
  }, {
    "left" : "if (info.hasBaseType())",
    "right" : "if (info.hasBaseType())",
    "info" : "IfStatement[13049-13483]:IfStatement[13080-13514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13073-13483]:Block[13104-13514]"
  }, {
    "left" : "if (isConstructor || isInterface)",
    "right" : "if (isConstructor || isInterface)",
    "info" : "IfStatement[13083-13475]:IfStatement[13114-13506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13117-13400]:Block[13148-13431]"
  }, {
    "left" : "JSType maybeBaseType =\n              info.getBaseType().evaluate(scope, typeRegistry);",
    "right" : "JSType maybeBaseType =\n              info.getBaseType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[13129-13215]:VariableDeclarationStatement[13160-13246]"
  }, {
    "left" : "if (maybeBaseType != null &&\n              maybeBaseType.setValidator(new ExtendedTypeValidator()))",
    "right" : "if (maybeBaseType != null &&\n              maybeBaseType.setValidator(new ExtendedTypeValidator()))",
    "info" : "IfStatement[13226-13390]:IfStatement[13257-13421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13326-13390]:Block[13357-13421]"
  }, {
    "left" : "baseType = (ObjectType) maybeBaseType;",
    "right" : "baseType = (ObjectType) maybeBaseType;",
    "info" : "ExpressionStatement[13340-13378]:ExpressionStatement[13371-13409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13406-13475]:Block[13437-13506]"
  }, {
    "left" : "reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);",
    "right" : "reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);",
    "info" : "ExpressionStatement[13418-13465]:ExpressionStatement[13449-13496]"
  }, {
    "left" : "if (isConstructor || isInterface)",
    "right" : "if (isConstructor || isInterface)",
    "info" : "IfStatement[13523-14457]:IfStatement[13554-14488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13557-14334]:Block[13588-14365]"
  }, {
    "left" : "implementedInterfaces = Lists.newArrayList();",
    "right" : "implementedInterfaces = Lists.newArrayList();",
    "info" : "ExpressionStatement[13567-13612]:ExpressionStatement[13598-13643]"
  }, {
    "left" : "for (JSTypeExpression t : info.getImplementedInterfaces())",
    "right" : "for (JSTypeExpression t : info.getImplementedInterfaces())",
    "info" : "EnhancedForStatement[13621-13955]:EnhancedForStatement[13652-13986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13680-13955]:Block[13711-13986]"
  }, {
    "left" : "JSType maybeInterType = t.evaluate(scope, typeRegistry);",
    "right" : "JSType maybeInterType = t.evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[13692-13748]:VariableDeclarationStatement[13723-13779]"
  }, {
    "left" : "if (maybeInterType != null &&\n              maybeInterType.setValidator(new ImplementedTypeValidator()))",
    "right" : "if (maybeInterType != null &&\n              maybeInterType.setValidator(new ImplementedTypeValidator()))",
    "info" : "IfStatement[13759-13945]:IfStatement[13790-13976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13864-13945]:Block[13895-13976]"
  }, {
    "left" : "implementedInterfaces.add((ObjectType) maybeInterType);",
    "right" : "implementedInterfaces.add((ObjectType) maybeInterType);",
    "info" : "ExpressionStatement[13878-13933]:ExpressionStatement[13909-13964]"
  }, {
    "left" : "if (baseType != null)",
    "right" : "if (baseType != null)",
    "info" : "IfStatement[13964-14326]:IfStatement[13995-14357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13986-14326]:Block[14017-14357]"
  }, {
    "left" : "JSType maybeFunctionType = baseType.getConstructor();",
    "right" : "JSType maybeFunctionType = baseType.getConstructor();",
    "info" : "VariableDeclarationStatement[13998-14051]:VariableDeclarationStatement[14029-14082]"
  }, {
    "left" : "if (maybeFunctionType instanceof FunctionType)",
    "right" : "if (maybeFunctionType instanceof FunctionType)",
    "info" : "IfStatement[14062-14316]:IfStatement[14093-14347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14109-14316]:Block[14140-14347]"
  }, {
    "left" : "FunctionType functionType = baseType.getConstructor();",
    "right" : "FunctionType functionType = baseType.getConstructor();",
    "info" : "VariableDeclarationStatement[14123-14177]:VariableDeclarationStatement[14154-14208]"
  }, {
    "left" : "Iterables.addAll(\n                implementedInterfaces,\n                functionType.getImplementedInterfaces());",
    "right" : "Iterables.addAll(\n                implementedInterfaces,\n                functionType.getImplementedInterfaces());",
    "info" : "ExpressionStatement[14190-14304]:ExpressionStatement[14221-14335]"
  }, {
    "left" : "if (info.getImplementedInterfaceCount() > 0)",
    "right" : "if (info.getImplementedInterfaceCount() > 0)",
    "info" : "IfStatement[14340-14457]:IfStatement[14371-14488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14385-14457]:Block[14416-14488]"
  }, {
    "left" : "reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);",
    "right" : "reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);",
    "info" : "ExpressionStatement[14395-14449]:ExpressionStatement[14426-14480]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[14469-14481]:ReturnStatement[14500-14512]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[14574-14593]:SimpleType[14605-14624]"
  }, {
    "left" : "inferThisType",
    "right" : "inferThisType",
    "info" : "SimpleName[14594-14607]:SimpleName[14625-14638]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[14608-14622]:SingleVariableDeclaration[14639-14653]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[14624-14635]:SingleVariableDeclaration[14655-14666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14637-14803]:Block[14668-14834]"
  }, {
    "left" : "ObjectType objType = ObjectType.cast(type);",
    "right" : "ObjectType objType = ObjectType.cast(type);",
    "info" : "VariableDeclarationStatement[14643-14686]:VariableDeclarationStatement[14674-14717]"
  }, {
    "left" : "if (objType != null && (info == null || !info.hasType()))",
    "right" : "if (objType != null && (info == null || !info.hasType()))",
    "info" : "IfStatement[14691-14782]:IfStatement[14722-14813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14749-14782]:Block[14780-14813]"
  }, {
    "left" : "thisType = objType;",
    "right" : "thisType = objType;",
    "info" : "ExpressionStatement[14757-14776]:ExpressionStatement[14788-14807]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[14787-14799]:ReturnStatement[14818-14830]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[15134-15153]:SimpleType[15165-15184]"
  }, {
    "left" : "inferThisType",
    "right" : "inferThisType",
    "info" : "SimpleName[15154-15167]:SimpleName[15185-15198]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[15168-15182]:SingleVariableDeclaration[15199-15213]"
  }, {
    "left" : "@Nullable Node owner",
    "right" : "@Nullable Node owner",
    "info" : "SingleVariableDeclaration[15190-15210]:SingleVariableDeclaration[15221-15241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15212-16224]:Block[15243-16255]"
  }, {
    "left" : "ObjectType maybeThisType = null;",
    "right" : "ObjectType maybeThisType = null;",
    "info" : "VariableDeclarationStatement[15218-15250]:VariableDeclarationStatement[15249-15281]"
  }, {
    "left" : "if (info != null && info.hasThisType())",
    "right" : "if (info != null && info.hasThisType())",
    "info" : "IfStatement[15255-15402]:IfStatement[15286-15433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15295-15402]:Block[15326-15433]"
  }, {
    "left" : "maybeThisType = ObjectType.cast(\n          info.getThisType().evaluate(scope, typeRegistry));",
    "right" : "maybeThisType = ObjectType.cast(\n          info.getThisType().evaluate(scope, typeRegistry));",
    "info" : "ExpressionStatement[15303-15396]:ExpressionStatement[15334-15427]"
  }, {
    "left" : "if (maybeThisType != null)",
    "right" : "if (maybeThisType != null)",
    "info" : "IfStatement[15407-16202]:IfStatement[15438-16233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15434-15527]:Block[15465-15558]"
  }, {
    "left" : "thisType = maybeThisType;",
    "right" : "thisType = maybeThisType;",
    "info" : "ExpressionStatement[15442-15467]:ExpressionStatement[15473-15498]"
  }, {
    "left" : "thisType.setValidator(new ThisTypeValidator());",
    "right" : "thisType.setValidator(new ThisTypeValidator());",
    "info" : "ExpressionStatement[15474-15521]:ExpressionStatement[15505-15552]"
  }, {
    "left" : "if (owner != null &&\n               (info == null || !info.hasType()))",
    "right" : "if (owner != null &&\n               (info == null || !info.hasType()))",
    "info" : "IfStatement[15533-16202]:IfStatement[15564-16233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15604-16202]:Block[15635-16233]"
  }, {
    "left" : "String ownerTypeName = owner.getQualifiedName();",
    "right" : "String ownerTypeName = owner.getQualifiedName();",
    "info" : "VariableDeclarationStatement[15890-15938]:VariableDeclarationStatement[15921-15969]"
  }, {
    "left" : "ObjectType ownerType = ObjectType.cast(\n          typeRegistry.getForgivingType(\n              scope, ownerTypeName, sourceName,\n              owner.getLineno(), owner.getCharno()));",
    "right" : "ObjectType ownerType = ObjectType.cast(\n          typeRegistry.getForgivingType(\n              scope, ownerTypeName, sourceName,\n              owner.getLineno(), owner.getCharno()));",
    "info" : "VariableDeclarationStatement[15945-16127]:VariableDeclarationStatement[15976-16158]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[16134-16196]:IfStatement[16165-16227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16157-16196]:Block[16188-16227]"
  }, {
    "left" : "thisType = ownerType;",
    "right" : "thisType = ownerType;",
    "info" : "ExpressionStatement[16167-16188]:ExpressionStatement[16198-16219]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[16208-16220]:ReturnStatement[16239-16251]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[16296-16315]:SimpleType[16327-16346]"
  }, {
    "left" : "inferParameterTypes",
    "right" : "inferParameterTypes",
    "info" : "SimpleName[16316-16335]:SimpleName[16347-16366]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[16336-16350]:SingleVariableDeclaration[16367-16381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16352-16584]:Block[16383-16615]"
  }, {
    "left" : "Node lp = new Node(Token.LP);",
    "right" : "Node lp = new Node(Token.LP);",
    "info" : "VariableDeclarationStatement[16392-16421]:VariableDeclarationStatement[16423-16452]"
  }, {
    "left" : "for (String name : info.getParameterNames())",
    "right" : "for (String name : info.getParameterNames())",
    "info" : "EnhancedForStatement[16426-16537]:EnhancedForStatement[16457-16568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16471-16537]:Block[16502-16568]"
  }, {
    "left" : "lp.addChildToBack(Node.newString(Token.NAME, name));",
    "right" : "lp.addChildToBack(Node.newString(Token.NAME, name));",
    "info" : "ExpressionStatement[16479-16531]:ExpressionStatement[16510-16562]"
  }, {
    "left" : "return inferParameterTypes(lp, info);",
    "right" : "return inferParameterTypes(lp, info);",
    "info" : "ReturnStatement[16543-16580]:ReturnStatement[16574-16611]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[16686-16705]:SimpleType[16717-16736]"
  }, {
    "left" : "inferParameterTypes",
    "right" : "inferParameterTypes",
    "info" : "SimpleName[16706-16725]:SimpleName[16737-16756]"
  }, {
    "left" : "@Nullable Node argsParent",
    "right" : "@Nullable Node argsParent",
    "info" : "SingleVariableDeclaration[16726-16751]:SingleVariableDeclaration[16757-16782]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[16759-16783]:SingleVariableDeclaration[16790-16814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16785-19016]:Block[16816-19047]"
  }, {
    "left" : "if (argsParent == null)",
    "right" : "if (argsParent == null)",
    "info" : "IfStatement[16791-16934]:IfStatement[16822-16965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16815-16934]:Block[16846-16965]"
  }, {
    "left" : "if (info == null)",
    "right" : "if (info == null)",
    "info" : "IfStatement[16823-16928]:IfStatement[16854-16959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16841-16871]:Block[16872-16902]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[16851-16863]:ReturnStatement[16882-16894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16877-16928]:Block[16908-16959]"
  }, {
    "left" : "return inferParameterTypes(info);",
    "right" : "return inferParameterTypes(info);",
    "info" : "ReturnStatement[16887-16920]:ReturnStatement[16918-16951]"
  }, {
    "left" : "Node oldParameterType = null;",
    "right" : "Node oldParameterType = null;",
    "info" : "VariableDeclarationStatement[16957-16986]:VariableDeclarationStatement[16988-17017]"
  }, {
    "left" : "if (parametersNode != null)",
    "right" : "if (parametersNode != null)",
    "info" : "IfStatement[16991-17083]:IfStatement[17022-17114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17019-17083]:Block[17050-17114]"
  }, {
    "left" : "oldParameterType = parametersNode.getFirstChild();",
    "right" : "oldParameterType = parametersNode.getFirstChild();",
    "info" : "ExpressionStatement[17027-17077]:ExpressionStatement[17058-17108]"
  }, {
    "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
    "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
    "info" : "VariableDeclarationStatement[17089-17159]:VariableDeclarationStatement[17120-17190]"
  }, {
    "left" : "boolean warnedAboutArgList = false;",
    "right" : "boolean warnedAboutArgList = false;",
    "info" : "VariableDeclarationStatement[17164-17199]:VariableDeclarationStatement[17195-17230]"
  }, {
    "left" : "Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());",
    "right" : "Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());",
    "info" : "VariableDeclarationStatement[17204-17336]:VariableDeclarationStatement[17235-17367]"
  }, {
    "left" : "boolean foundTemplateType = false;",
    "right" : "boolean foundTemplateType = false;",
    "info" : "VariableDeclarationStatement[17341-17375]:VariableDeclarationStatement[17372-17406]"
  }, {
    "left" : "for (Node arg : argsParent.children())",
    "right" : "for (Node arg : argsParent.children())",
    "info" : "EnhancedForStatement[17380-18719]:EnhancedForStatement[17411-18750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17419-18719]:Block[17450-18750]"
  }, {
    "left" : "String argumentName = arg.getString();",
    "right" : "String argumentName = arg.getString();",
    "info" : "VariableDeclarationStatement[17427-17465]:VariableDeclarationStatement[17458-17496]"
  }, {
    "left" : "allJsDocParams.remove(argumentName);",
    "right" : "allJsDocParams.remove(argumentName);",
    "info" : "ExpressionStatement[17472-17508]:ExpressionStatement[17503-17539]"
  }, {
    "left" : "JSType parameterType = null;",
    "right" : "JSType parameterType = null;",
    "info" : "VariableDeclarationStatement[17545-17573]:VariableDeclarationStatement[17576-17604]"
  }, {
    "left" : "boolean isOptionalParam = isOptionalParameter(arg, info);",
    "right" : "boolean isOptionalParam = isOptionalParameter(arg, info);",
    "info" : "VariableDeclarationStatement[17580-17637]:VariableDeclarationStatement[17611-17668]"
  }, {
    "left" : "boolean isVarArgs = isVarArgsParameter(arg, info);",
    "right" : "boolean isVarArgs = isVarArgsParameter(arg, info);",
    "info" : "VariableDeclarationStatement[17644-17694]:VariableDeclarationStatement[17675-17725]"
  }, {
    "left" : "if (info != null && info.hasParameterType(argumentName))",
    "right" : "if (info != null && info.hasParameterType(argumentName))",
    "info" : "IfStatement[17701-18210]:IfStatement[17732-18241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17758-17870]:Block[17789-17901]"
  }, {
    "left" : "parameterType =\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);",
    "right" : "parameterType =\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);",
    "info" : "ExpressionStatement[17768-17862]:ExpressionStatement[17799-17893]"
  }, {
    "left" : "if (oldParameterType != null &&\n          oldParameterType.getJSType() != null)",
    "right" : "if (oldParameterType != null &&\n          oldParameterType.getJSType() != null)",
    "info" : "IfStatement[17876-18210]:IfStatement[17907-18241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17956-18129]:Block[17987-18160]"
  }, {
    "left" : "parameterType = oldParameterType.getJSType();",
    "right" : "parameterType = oldParameterType.getJSType();",
    "info" : "ExpressionStatement[17966-18011]:ExpressionStatement[17997-18042]"
  }, {
    "left" : "isOptionalParam = oldParameterType.isOptionalArg();",
    "right" : "isOptionalParam = oldParameterType.isOptionalArg();",
    "info" : "ExpressionStatement[18020-18071]:ExpressionStatement[18051-18102]"
  }, {
    "left" : "isVarArgs = oldParameterType.isVarArgs();",
    "right" : "isVarArgs = oldParameterType.isVarArgs();",
    "info" : "ExpressionStatement[18080-18121]:ExpressionStatement[18111-18152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18135-18210]:Block[18166-18241]"
  }, {
    "left" : "parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
    "right" : "parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[18145-18202]:ExpressionStatement[18176-18233]"
  }, {
    "left" : "if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType())",
    "right" : "if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType())",
    "info" : "IfStatement[18218-18466]:IfStatement[18249-18497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18323-18466]:Block[18354-18497]"
  }, {
    "left" : "if (foundTemplateType)",
    "right" : "if (foundTemplateType)",
    "info" : "IfStatement[18333-18424]:IfStatement[18364-18455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18356-18424]:Block[18387-18455]"
  }, {
    "left" : "reportError(TEMPLATE_TYPE_DUPLICATED, fnName);",
    "right" : "reportError(TEMPLATE_TYPE_DUPLICATED, fnName);",
    "info" : "ExpressionStatement[18368-18414]:ExpressionStatement[18399-18445]"
  }, {
    "left" : "foundTemplateType = true;",
    "right" : "foundTemplateType = true;",
    "info" : "ExpressionStatement[18433-18458]:ExpressionStatement[18464-18489]"
  }, {
    "left" : "warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);",
    "right" : "warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);",
    "info" : "ExpressionStatement[18473-18611]:ExpressionStatement[18504-18642]"
  }, {
    "left" : "if (oldParameterType != null)",
    "right" : "if (oldParameterType != null)",
    "info" : "IfStatement[18619-18713]:IfStatement[18650-18744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18649-18713]:Block[18680-18744]"
  }, {
    "left" : "oldParameterType = oldParameterType.getNext();",
    "right" : "oldParameterType = oldParameterType.getNext();",
    "info" : "ExpressionStatement[18659-18705]:ExpressionStatement[18690-18736]"
  }, {
    "left" : "if (templateTypeName != null && !foundTemplateType)",
    "right" : "if (templateTypeName != null && !foundTemplateType)",
    "info" : "IfStatement[18725-18835]:IfStatement[18756-18866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18777-18835]:Block[18808-18866]"
  }, {
    "left" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
    "right" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
    "info" : "ExpressionStatement[18785-18829]:ExpressionStatement[18816-18860]"
  }, {
    "left" : "for (String inexistentName : allJsDocParams)",
    "right" : "for (String inexistentName : allJsDocParams)",
    "info" : "EnhancedForStatement[18841-18956]:EnhancedForStatement[18872-18987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18886-18956]:Block[18917-18987]"
  }, {
    "left" : "reportWarning(INEXISTANT_PARAM, inexistentName, fnName);",
    "right" : "reportWarning(INEXISTANT_PARAM, inexistentName, fnName);",
    "info" : "ExpressionStatement[18894-18950]:ExpressionStatement[18925-18981]"
  }, {
    "left" : "parametersNode = builder.build();",
    "right" : "parametersNode = builder.build();",
    "info" : "ExpressionStatement[18962-18995]:ExpressionStatement[18993-19026]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19000-19012]:ReturnStatement[19031-19043]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19091-19098]:Modifier[19122-19129]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19099-19106]:PrimitiveType[19130-19137]"
  }, {
    "left" : "isOptionalParameter",
    "right" : "isOptionalParameter",
    "info" : "SimpleName[19107-19126]:SimpleName[19138-19157]"
  }, {
    "left" : "Node param",
    "right" : "Node param",
    "info" : "SingleVariableDeclaration[19134-19144]:SingleVariableDeclaration[19165-19175]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[19146-19170]:SingleVariableDeclaration[19177-19201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19172-19421]:Block[19203-19452]"
  }, {
    "left" : "if (codingConvention.isOptionalParameter(param))",
    "right" : "if (codingConvention.isOptionalParameter(param))",
    "info" : "IfStatement[19178-19253]:IfStatement[19209-19284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19227-19253]:Block[19258-19284]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19235-19247]:ReturnStatement[19266-19278]"
  }, {
    "left" : "String paramName = param.getString();",
    "right" : "String paramName = param.getString();",
    "info" : "VariableDeclarationStatement[19259-19296]:VariableDeclarationStatement[19290-19327]"
  }, {
    "left" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();",
    "right" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();",
    "info" : "ReturnStatement[19301-19417]:ReturnStatement[19332-19448]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19548-19555]:Modifier[19579-19586]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19556-19563]:PrimitiveType[19587-19594]"
  }, {
    "left" : "isVarArgsParameter",
    "right" : "isVarArgsParameter",
    "info" : "SimpleName[19564-19582]:SimpleName[19595-19613]"
  }, {
    "left" : "Node param",
    "right" : "Node param",
    "info" : "SingleVariableDeclaration[19590-19600]:SingleVariableDeclaration[19621-19631]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[19602-19626]:SingleVariableDeclaration[19633-19657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19628-19872]:Block[19659-19903]"
  }, {
    "left" : "if (codingConvention.isVarArgsParameter(param))",
    "right" : "if (codingConvention.isVarArgsParameter(param))",
    "info" : "IfStatement[19634-19708]:IfStatement[19665-19739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19682-19708]:Block[19713-19739]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19690-19702]:ReturnStatement[19721-19733]"
  }, {
    "left" : "String paramName = param.getString();",
    "right" : "String paramName = param.getString();",
    "info" : "VariableDeclarationStatement[19714-19751]:VariableDeclarationStatement[19745-19782]"
  }, {
    "left" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();",
    "right" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();",
    "info" : "ReturnStatement[19756-19868]:ReturnStatement[19787-19899]"
  }, {
    "left" : "FunctionTypeBuilder",
    "right" : "FunctionTypeBuilder",
    "info" : "SimpleType[19936-19955]:SimpleType[19967-19986]"
  }, {
    "left" : "inferTemplateTypeName",
    "right" : "inferTemplateTypeName",
    "info" : "SimpleName[19956-19977]:SimpleName[19987-20008]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[19978-20002]:SingleVariableDeclaration[20009-20033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20004-20167]:Block[20035-20198]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[20010-20146]:IfStatement[20041-20177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20028-20146]:Block[20059-20177]"
  }, {
    "left" : "templateTypeName = info.getTemplateTypeName();",
    "right" : "templateTypeName = info.getTemplateTypeName();",
    "info" : "ExpressionStatement[20036-20082]:ExpressionStatement[20067-20113]"
  }, {
    "left" : "typeRegistry.setTemplateTypeName(templateTypeName);",
    "right" : "typeRegistry.setTemplateTypeName(templateTypeName);",
    "info" : "ExpressionStatement[20089-20140]:ExpressionStatement[20120-20171]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[20151-20163]:ReturnStatement[20182-20194]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20596-20603]:Modifier[20627-20634]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20604-20611]:PrimitiveType[20635-20642]"
  }, {
    "left" : "addParameter",
    "right" : "addParameter",
    "info" : "SimpleName[20612-20624]:SimpleName[20643-20655]"
  }, {
    "left" : "FunctionParamBuilder builder",
    "right" : "FunctionParamBuilder builder",
    "info" : "SingleVariableDeclaration[20625-20653]:SingleVariableDeclaration[20656-20684]"
  }, {
    "left" : "JSType paramType",
    "right" : "JSType paramType",
    "info" : "SingleVariableDeclaration[20661-20677]:SingleVariableDeclaration[20692-20708]"
  }, {
    "left" : "boolean warnedAboutArgList",
    "right" : "boolean warnedAboutArgList",
    "info" : "SingleVariableDeclaration[20679-20705]:SingleVariableDeclaration[20710-20736]"
  }, {
    "left" : "boolean isOptional",
    "right" : "boolean isOptional",
    "info" : "SingleVariableDeclaration[20713-20731]:SingleVariableDeclaration[20744-20762]"
  }, {
    "left" : "boolean isVarArgs",
    "right" : "boolean isVarArgs",
    "info" : "SingleVariableDeclaration[20733-20750]:SingleVariableDeclaration[20764-20781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20752-21757]:Block[20783-21788]"
  }, {
    "left" : "boolean emittedWarning = false;",
    "right" : "boolean emittedWarning = false;",
    "info" : "VariableDeclarationStatement[20758-20789]:VariableDeclarationStatement[20789-20820]"
  }, {
    "left" : "if (isOptional)",
    "right" : "if (isOptional)",
    "info" : "IfStatement[20794-21726]:IfStatement[20825-21757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20810-21143]:Block[20841-21174]"
  }, {
    "left" : "if (!builder.addOptionalParams(paramType) && !warnedAboutArgList)",
    "right" : "if (!builder.addOptionalParams(paramType) && !warnedAboutArgList)",
    "info" : "IfStatement[20985-21137]:IfStatement[21016-21168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21051-21137]:Block[21082-21168]"
  }, {
    "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
    "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
    "info" : "ExpressionStatement[21061-21098]:ExpressionStatement[21092-21129]"
  }, {
    "left" : "emittedWarning = true;",
    "right" : "emittedWarning = true;",
    "info" : "ExpressionStatement[21107-21129]:ExpressionStatement[21138-21160]"
  }, {
    "left" : "if (isVarArgs)",
    "right" : "if (isVarArgs)",
    "info" : "IfStatement[21149-21726]:IfStatement[21180-21757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21164-21323]:Block[21195-21354]"
  }, {
    "left" : "if (!builder.addVarArgs(paramType) && !warnedAboutArgList)",
    "right" : "if (!builder.addVarArgs(paramType) && !warnedAboutArgList)",
    "info" : "IfStatement[21172-21317]:IfStatement[21203-21348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21231-21317]:Block[21262-21348]"
  }, {
    "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
    "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
    "info" : "ExpressionStatement[21241-21278]:ExpressionStatement[21272-21309]"
  }, {
    "left" : "emittedWarning = true;",
    "right" : "emittedWarning = true;",
    "info" : "ExpressionStatement[21287-21309]:ExpressionStatement[21318-21340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21329-21726]:Block[21360-21757]"
  }, {
    "left" : "if (!builder.addRequiredParams(paramType) && !warnedAboutArgList)",
    "right" : "if (!builder.addRequiredParams(paramType) && !warnedAboutArgList)",
    "info" : "IfStatement[21337-21720]:IfStatement[21368-21751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21403-21720]:Block[21434-21751]"
  }, {
    "left" : "if (builder.hasVarArgs())",
    "right" : "if (builder.hasVarArgs())",
    "info" : "IfStatement[21533-21681]:IfStatement[21564-21712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21559-21618]:Block[21590-21649]"
  }, {
    "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
    "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
    "info" : "ExpressionStatement[21571-21608]:ExpressionStatement[21602-21639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21624-21681]:Block[21655-21712]"
  }, {
    "left" : "reportWarning(OPTIONAL_ARG_AT_END);",
    "right" : "reportWarning(OPTIONAL_ARG_AT_END);",
    "info" : "ExpressionStatement[21636-21671]:ExpressionStatement[21667-21702]"
  }, {
    "left" : "emittedWarning = true;",
    "right" : "emittedWarning = true;",
    "info" : "ExpressionStatement[21690-21712]:ExpressionStatement[21721-21743]"
  }, {
    "left" : "return emittedWarning;",
    "right" : "return emittedWarning;",
    "info" : "ReturnStatement[21731-21753]:ReturnStatement[21762-21784]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[21833-21845]:SimpleType[21864-21876]"
  }, {
    "left" : "buildAndRegister",
    "right" : "buildAndRegister",
    "info" : "SimpleName[21846-21862]:SimpleName[21877-21893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21865-23006]:Block[21896-23037]"
  }, {
    "left" : "if (returnType == null)",
    "right" : "if (returnType == null)",
    "info" : "IfStatement[21871-21963]:IfStatement[21902-21994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21895-21963]:Block[21926-21994]"
  }, {
    "left" : "returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
    "right" : "returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[21903-21957]:ExpressionStatement[21934-21988]"
  }, {
    "left" : "if (parametersNode == null)",
    "right" : "if (parametersNode == null)",
    "info" : "IfStatement[21969-22111]:IfStatement[22000-22142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21997-22111]:Block[22028-22142]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"All Function types must have params and a return type\");",
    "right" : "throw new IllegalStateException(\n          \"All Function types must have params and a return type\");",
    "info" : "ThrowStatement[22005-22105]:ThrowStatement[22036-22136]"
  }, {
    "left" : "FunctionType fnType;",
    "right" : "FunctionType fnType;",
    "info" : "VariableDeclarationStatement[22117-22137]:VariableDeclarationStatement[22148-22168]"
  }, {
    "left" : "if (isConstructor)",
    "right" : "if (isConstructor)",
    "info" : "IfStatement[22142-22829]:IfStatement[22173-22860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22161-22209]:Block[22192-22240]"
  }, {
    "left" : "fnType = getOrCreateConstructor();",
    "right" : "fnType = getOrCreateConstructor();",
    "info" : "ExpressionStatement[22169-22203]:ExpressionStatement[22200-22234]"
  }, {
    "left" : "if (isInterface)",
    "right" : "if (isInterface)",
    "info" : "IfStatement[22215-22829]:IfStatement[22246-22860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22232-22467]:Block[22263-22498]"
  }, {
    "left" : "fnType = typeRegistry.createInterfaceType(fnName, sourceNode);",
    "right" : "fnType = typeRegistry.createInterfaceType(fnName, sourceNode);",
    "info" : "ExpressionStatement[22240-22302]:ExpressionStatement[22271-22333]"
  }, {
    "left" : "if (scope.isGlobal() && !fnName.isEmpty())",
    "right" : "if (scope.isGlobal() && !fnName.isEmpty())",
    "info" : "IfStatement[22309-22429]:IfStatement[22340-22460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22352-22429]:Block[22383-22460]"
  }, {
    "left" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
    "right" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
    "info" : "ExpressionStatement[22362-22421]:ExpressionStatement[22393-22452]"
  }, {
    "left" : "maybeSetBaseType(fnType);",
    "right" : "maybeSetBaseType(fnType);",
    "info" : "ExpressionStatement[22436-22461]:ExpressionStatement[22467-22492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22473-22829]:Block[22504-22860]"
  }, {
    "left" : "fnType = new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(sourceNode)\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType, returnTypeInferred)\n          .withTypeOfThis(thisType)\n          .withTemplateName(templateTypeName)\n          .build();",
    "right" : "fnType = new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(sourceNode)\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType, returnTypeInferred)\n          .withTypeOfThis(thisType)\n          .withTemplateName(templateTypeName)\n          .build();",
    "info" : "ExpressionStatement[22481-22791]:ExpressionStatement[22512-22822]"
  }, {
    "left" : "maybeSetBaseType(fnType);",
    "right" : "maybeSetBaseType(fnType);",
    "info" : "ExpressionStatement[22798-22823]:ExpressionStatement[22829-22854]"
  }, {
    "left" : "if (implementedInterfaces != null)",
    "right" : "if (implementedInterfaces != null)",
    "info" : "IfStatement[22835-22939]:IfStatement[22866-22970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22870-22939]:Block[22901-22970]"
  }, {
    "left" : "fnType.setImplementedInterfaces(implementedInterfaces);",
    "right" : "fnType.setImplementedInterfaces(implementedInterfaces);",
    "info" : "ExpressionStatement[22878-22933]:ExpressionStatement[22909-22964]"
  }, {
    "left" : "typeRegistry.clearTemplateTypeName();",
    "right" : "typeRegistry.clearTemplateTypeName();",
    "info" : "ExpressionStatement[22945-22982]:ExpressionStatement[22976-23013]"
  }, {
    "left" : "return fnType;",
    "right" : "return fnType;",
    "info" : "ReturnStatement[22988-23002]:ReturnStatement[23019-23033]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23010-23017]:Modifier[23041-23048]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23018-23022]:PrimitiveType[23049-23053]"
  }, {
    "left" : "maybeSetBaseType",
    "right" : "maybeSetBaseType",
    "info" : "SimpleName[23023-23039]:SimpleName[23054-23070]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[23040-23059]:SingleVariableDeclaration[23071-23090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23061-23144]:Block[23092-23175]"
  }, {
    "left" : "if (baseType != null)",
    "right" : "if (baseType != null)",
    "info" : "IfStatement[23067-23140]:IfStatement[23098-23171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23089-23140]:Block[23120-23171]"
  }, {
    "left" : "fnType.setPrototypeBasedOn(baseType);",
    "right" : "fnType.setPrototypeBasedOn(baseType);",
    "info" : "ExpressionStatement[23097-23134]:ExpressionStatement[23128-23165]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23888-23895]:Modifier[23919-23926]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[23896-23908]:SimpleType[23927-23939]"
  }, {
    "left" : "getOrCreateConstructor",
    "right" : "getOrCreateConstructor",
    "info" : "SimpleName[23909-23931]:SimpleName[23940-23962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23934-25218]:Block[23965-25249]"
  }, {
    "left" : "FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, sourceNode, parametersNode, returnType);",
    "right" : "FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, sourceNode, parametersNode, returnType);",
    "info" : "VariableDeclarationStatement[23940-24054]:VariableDeclarationStatement[23971-24085]"
  }, {
    "left" : "JSType existingType = typeRegistry.getType(fnName);",
    "right" : "JSType existingType = typeRegistry.getType(fnName);",
    "info" : "VariableDeclarationStatement[24059-24110]:VariableDeclarationStatement[24090-24141]"
  }, {
    "left" : "if (existingType != null)",
    "right" : "if (existingType != null)",
    "info" : "IfStatement[24116-25042]:IfStatement[24147-25073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24142-25042]:Block[24173-25073]"
  }, {
    "left" : "boolean isInstanceObject = existingType instanceof InstanceObjectType;",
    "right" : "boolean isInstanceObject = existingType instanceof InstanceObjectType;",
    "info" : "VariableDeclarationStatement[24150-24220]:VariableDeclarationStatement[24181-24251]"
  }, {
    "left" : "if (isInstanceObject || fnName.equals(\"Function\"))",
    "right" : "if (isInstanceObject || fnName.equals(\"Function\"))",
    "info" : "IfStatement[24227-25036]:IfStatement[24258-25067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24278-24791]:Block[24309-24822]"
  }, {
    "left" : "FunctionType existingFn =\n            isInstanceObject ?\n            ((InstanceObjectType) existingType).getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);",
    "right" : "FunctionType existingFn =\n            isInstanceObject ?\n            ((InstanceObjectType) existingType).getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);",
    "info" : "VariableDeclarationStatement[24288-24483]:VariableDeclarationStatement[24319-24514]"
  }, {
    "left" : "if (existingFn.getSource() == null)",
    "right" : "if (existingFn.getSource() == null)",
    "info" : "IfStatement[24493-24584]:IfStatement[24524-24615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24529-24584]:Block[24560-24615]"
  }, {
    "left" : "existingFn.setSource(sourceNode);",
    "right" : "existingFn.setSource(sourceNode);",
    "info" : "ExpressionStatement[24541-24574]:ExpressionStatement[24572-24605]"
  }, {
    "left" : "if (!existingFn.hasEqualCallType(fnType))",
    "right" : "if (!existingFn.hasEqualCallType(fnType))",
    "info" : "IfStatement[24594-24755]:IfStatement[24625-24786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24636-24755]:Block[24667-24786]"
  }, {
    "left" : "reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());",
    "right" : "reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());",
    "info" : "ExpressionStatement[24648-24745]:ExpressionStatement[24679-24776]"
  }, {
    "left" : "return existingFn;",
    "right" : "return existingFn;",
    "info" : "ReturnStatement[24765-24783]:ReturnStatement[24796-24814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24797-25036]:Block[24828-25067]"
  }, {
    "left" : "maybeSetBaseType(fnType);",
    "right" : "maybeSetBaseType(fnType);",
    "info" : "ExpressionStatement[25048-25073]:ExpressionStatement[25079-25104]"
  }, {
    "left" : "if (scope.isGlobal() && !fnName.isEmpty())",
    "right" : "if (scope.isGlobal() && !fnName.isEmpty())",
    "info" : "IfStatement[25079-25195]:IfStatement[25110-25226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25122-25195]:Block[25153-25226]"
  }, {
    "left" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
    "right" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
    "info" : "ExpressionStatement[25130-25189]:ExpressionStatement[25161-25220]"
  }, {
    "left" : "return fnType;",
    "right" : "return fnType;",
    "info" : "ReturnStatement[25200-25214]:ReturnStatement[25231-25245]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25222-25229]:Modifier[25253-25260]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25230-25234]:PrimitiveType[25261-25265]"
  }, {
    "left" : "reportWarning",
    "right" : "reportWarning",
    "info" : "SimpleName[25235-25248]:SimpleName[25266-25279]"
  }, {
    "left" : "DiagnosticType warning",
    "right" : "DiagnosticType warning",
    "info" : "SingleVariableDeclaration[25249-25271]:SingleVariableDeclaration[25280-25302]"
  }, {
    "left" : "String ... args",
    "right" : "String ... args",
    "info" : "SingleVariableDeclaration[25273-25288]:SingleVariableDeclaration[25304-25319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25290-25368]:Block[25321-25399]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, errorRoot, warning, args));",
    "right" : "compiler.report(JSError.make(sourceName, errorRoot, warning, args));",
    "info" : "ExpressionStatement[25296-25364]:ExpressionStatement[25327-25395]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25372-25379]:Modifier[25403-25410]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25380-25384]:PrimitiveType[25411-25415]"
  }, {
    "left" : "reportError",
    "right" : "reportError",
    "info" : "SimpleName[25385-25396]:SimpleName[25416-25427]"
  }, {
    "left" : "DiagnosticType error",
    "right" : "DiagnosticType error",
    "info" : "SingleVariableDeclaration[25397-25417]:SingleVariableDeclaration[25428-25448]"
  }, {
    "left" : "String ... args",
    "right" : "String ... args",
    "info" : "SingleVariableDeclaration[25419-25434]:SingleVariableDeclaration[25450-25465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25436-25512]:Block[25467-25543]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, errorRoot, error, args));",
    "right" : "compiler.report(JSError.make(sourceName, errorRoot, error, args));",
    "info" : "ExpressionStatement[25442-25508]:ExpressionStatement[25473-25539]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25599-25605]:Modifier[25630-25636]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25606-25613]:PrimitiveType[25637-25644]"
  }, {
    "left" : "isFunctionTypeDeclaration",
    "right" : "isFunctionTypeDeclaration",
    "info" : "SimpleName[25614-25639]:SimpleName[25645-25670]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[25640-25654]:SingleVariableDeclaration[25671-25685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25656-25826]:Block[25687-25857]"
  }, {
    "left" : "return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();",
    "right" : "return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();",
    "info" : "ReturnStatement[25662-25822]:ReturnStatement[25693-25853]"
  } ]
}