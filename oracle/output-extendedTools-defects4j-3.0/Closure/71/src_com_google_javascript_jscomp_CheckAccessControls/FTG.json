{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CheckAccessControls",
      "right" : "CheckAccessControls",
      "info" : "TypeDeclaration[1269-22254]:TypeDeclaration[1269-22266]"
    }, {
      "left" : "static final DiagnosticType DEPRECATED_NAME = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_VAR\",\n      \"Variable {0} has been deprecated.\");",
      "right" : "static final DiagnosticType DEPRECATED_NAME = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_VAR\",\n      \"Variable {0} has been deprecated.\");",
      "info" : "FieldDeclaration[1928-2070]:FieldDeclaration[1928-2070]"
    }, {
      "left" : "static final DiagnosticType DEPRECATED_NAME_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_VAR_REASON\",\n      \"Variable {0} has been deprecated: {1}\");",
      "right" : "static final DiagnosticType DEPRECATED_NAME_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_VAR_REASON\",\n      \"Variable {0} has been deprecated: {1}\");",
      "info" : "FieldDeclaration[2074-2234]:FieldDeclaration[2074-2234]"
    }, {
      "left" : "static final DiagnosticType DEPRECATED_PROP = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_PROP\",\n      \"Property {0} of type {1} has been deprecated.\");",
      "right" : "static final DiagnosticType DEPRECATED_PROP = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_PROP\",\n      \"Property {0} of type {1} has been deprecated.\");",
      "info" : "FieldDeclaration[2238-2393]:FieldDeclaration[2238-2393]"
    }, {
      "left" : "static final DiagnosticType DEPRECATED_PROP_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_PROP_REASON\",\n      \"Property {0} of type {1} has been deprecated: {2}\");",
      "right" : "static final DiagnosticType DEPRECATED_PROP_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_PROP_REASON\",\n      \"Property {0} of type {1} has been deprecated: {2}\");",
      "info" : "FieldDeclaration[2397-2570]:FieldDeclaration[2397-2570]"
    }, {
      "left" : "static final DiagnosticType DEPRECATED_CLASS = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_CLASS\",\n      \"Class {0} has been deprecated.\");",
      "right" : "static final DiagnosticType DEPRECATED_CLASS = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_CLASS\",\n      \"Class {0} has been deprecated.\");",
      "info" : "FieldDeclaration[2574-2716]:FieldDeclaration[2574-2716]"
    }, {
      "left" : "static final DiagnosticType DEPRECATED_CLASS_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_CLASS_REASON\",\n      \"Class {0} has been deprecated: {1}\");",
      "right" : "static final DiagnosticType DEPRECATED_CLASS_REASON = DiagnosticType.disabled(\n      \"JSC_DEPRECATED_CLASS_REASON\",\n      \"Class {0} has been deprecated: {1}\");",
      "info" : "FieldDeclaration[2720-2880]:FieldDeclaration[2720-2880]"
    }, {
      "left" : "static final DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\n          \"Access to private variable {0} not allowed outside file {1}.\");",
      "right" : "static final DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PRIVATE_GLOBAL_ACCESS\",\n          \"Access to private variable {0} not allowed outside file {1}.\");",
      "info" : "FieldDeclaration[2884-3088]:FieldDeclaration[2884-3088]"
    }, {
      "left" : "static final DiagnosticType BAD_PRIVATE_PROPERTY_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PRIVATE_PROPERTY_ACCESS\",\n          \"Access to private property {0} of {1} not allowed here.\");",
      "right" : "static final DiagnosticType BAD_PRIVATE_PROPERTY_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PRIVATE_PROPERTY_ACCESS\",\n          \"Access to private property {0} of {1} not allowed here.\");",
      "info" : "FieldDeclaration[3092-3295]:FieldDeclaration[3092-3295]"
    }, {
      "left" : "static final DiagnosticType BAD_PROTECTED_PROPERTY_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PROTECTED_PROPERTY_ACCESS\",\n          \"Access to protected property {0} of {1} not allowed here.\");",
      "right" : "static final DiagnosticType BAD_PROTECTED_PROPERTY_ACCESS =\n      DiagnosticType.disabled(\n          \"JSC_BAD_PROTECTED_PROPERTY_ACCESS\",\n          \"Access to protected property {0} of {1} not allowed here.\");",
      "info" : "FieldDeclaration[3299-3508]:FieldDeclaration[3299-3508]"
    }, {
      "left" : "static final DiagnosticType PRIVATE_OVERRIDE =\n      DiagnosticType.disabled(\n          \"JSC_PRIVATE_OVERRIDE\",\n          \"Overriding private property of {0}.\");",
      "right" : "static final DiagnosticType PRIVATE_OVERRIDE =\n      DiagnosticType.disabled(\n          \"JSC_PRIVATE_OVERRIDE\",\n          \"Overriding private property of {0}.\");",
      "info" : "FieldDeclaration[3512-3673]:FieldDeclaration[3512-3673]"
    }, {
      "left" : "static final DiagnosticType VISIBILITY_MISMATCH =\n      DiagnosticType.disabled(\n          \"JSC_VISIBILITY_MISMATCH\",\n          \"Overriding {0} property of {1} with {2} property.\");",
      "right" : "static final DiagnosticType VISIBILITY_MISMATCH =\n      DiagnosticType.disabled(\n          \"JSC_VISIBILITY_MISMATCH\",\n          \"Overriding {0} property of {1} with {2} property.\");",
      "info" : "FieldDeclaration[3677-3858]:FieldDeclaration[3677-3858]"
    }, {
      "left" : "static final DiagnosticType CONST_PROPERTY_REASSIGNED_VALUE =\n      DiagnosticType.warning(\n        \"JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE\",\n        \"constant property {0} assigned a value more than once\");",
      "right" : "static final DiagnosticType CONST_PROPERTY_REASSIGNED_VALUE =\n      DiagnosticType.warning(\n        \"JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE\",\n        \"constant property {0} assigned a value more than once\");",
      "info" : "FieldDeclaration[3862-4069]:FieldDeclaration[3862-4069]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[4073-4113]:FieldDeclaration[4073-4113]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[4116-4154]:FieldDeclaration[4116-4154]"
    }, {
      "left" : "private int deprecatedDepth = 0;",
      "right" : "private int deprecatedDepth = 0;",
      "info" : "FieldDeclaration[4198-4230]:FieldDeclaration[4198-4230]"
    }, {
      "left" : "private int methodDepth = 0;",
      "right" : "private int methodDepth = 0;",
      "info" : "FieldDeclaration[4233-4261]:FieldDeclaration[4233-4261]"
    }, {
      "left" : "private JSType currentClass = null;",
      "right" : "private JSType currentClass = null;",
      "info" : "FieldDeclaration[4264-4299]:FieldDeclaration[4264-4299]"
    }, {
      "left" : "private final Multimap<String, String> initializedConstantProperties;",
      "right" : "private final Multimap<String, String> initializedConstantProperties;",
      "info" : "FieldDeclaration[4303-4372]:FieldDeclaration[4303-4372]"
    }, {
      "left" : "CheckAccessControls(AbstractCompiler compiler)",
      "right" : "CheckAccessControls(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[4376-4572]:MethodDeclaration[4376-4572]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4576-4688]:MethodDeclaration[4576-4688]"
    }, {
      "left" : "public void hotSwapScript(Node scriptRoot)",
      "right" : "public void hotSwapScript(Node scriptRoot)",
      "info" : "MethodDeclaration[4692-4808]:MethodDeclaration[4692-4808]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[4812-5153]:MethodDeclaration[4812-5153]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[5157-5474]:MethodDeclaration[5157-5474]"
    }, {
      "left" : "private JSType getClassOfMethod(Node n, Node parent)",
      "right" : "private JSType getClassOfMethod(Node n, Node parent)",
      "info" : "MethodDeclaration[5478-6764]:MethodDeclaration[5478-6764]"
    }, {
      "left" : "private JSType normalizeClassType(JSType type)",
      "right" : "private JSType normalizeClassType(JSType type)",
      "info" : "MethodDeclaration[6768-7351]:MethodDeclaration[6768-7351]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7355-7445]:MethodDeclaration[7355-7445]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7449-7929]:MethodDeclaration[7449-7929]"
    }, {
      "left" : "private void checkConstructorDeprecation(NodeTraversal t, Node n,\n      Node parent)",
      "right" : "private void checkConstructorDeprecation(NodeTraversal t, Node n,\n      Node parent)",
      "info" : "MethodDeclaration[7933-8644]:MethodDeclaration[7933-8644]"
    }, {
      "left" : "private void checkNameDeprecation(NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkNameDeprecation(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[8648-9553]:MethodDeclaration[8648-9553]"
    }, {
      "left" : "private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkPropertyDeprecation(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9557-10671]:MethodDeclaration[9557-10671]"
    }, {
      "left" : "private void checkNameVisibility(NodeTraversal t, Node name, Node parent)",
      "right" : "private void checkNameVisibility(NodeTraversal t, Node name, Node parent)",
      "info" : "MethodDeclaration[10675-11612]:MethodDeclaration[10675-11612]"
    }, {
      "left" : "private void checkConstantProperty(NodeTraversal t,\n      Node getprop)",
      "right" : "private void checkConstantProperty(NodeTraversal t,\n      Node getprop)",
      "info" : "MethodDeclaration[11616-13664]:MethodDeclaration[11616-13664]"
    }, {
      "left" : "private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent)",
      "right" : "private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent)",
      "info" : "MethodDeclaration[13668-17646]:MethodDeclaration[13668-17658]"
    }, {
      "left" : "private static boolean isValidPrivateConstructorAccess(Node parent)",
      "right" : "private static boolean isValidPrivateConstructorAccess(Node parent)",
      "info" : "MethodDeclaration[17650-18257]:MethodDeclaration[17662-18269]"
    }, {
      "left" : "private boolean shouldEmitDeprecationWarning(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "private boolean shouldEmitDeprecationWarning(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[18261-19286]:MethodDeclaration[18273-19298]"
    }, {
      "left" : "private boolean canAccessDeprecatedTypes(NodeTraversal t)",
      "right" : "private boolean canAccessDeprecatedTypes(NodeTraversal t)",
      "info" : "MethodDeclaration[19290-20128]:MethodDeclaration[19302-20140]"
    }, {
      "left" : "private static boolean isDeprecatedFunction(Node n, Node parent)",
      "right" : "private static boolean isDeprecatedFunction(Node n, Node parent)",
      "info" : "MethodDeclaration[20132-20472]:MethodDeclaration[20144-20484]"
    }, {
      "left" : "private static String getTypeDeprecationInfo(JSType type)",
      "right" : "private static String getTypeDeprecationInfo(JSType type)",
      "info" : "MethodDeclaration[20476-21286]:MethodDeclaration[20488-21298]"
    }, {
      "left" : "private static String getPropertyDeprecationInfo(ObjectType type,\n                                                   String prop)",
      "right" : "private static String getPropertyDeprecationInfo(ObjectType type,\n                                                   String prop)",
      "info" : "MethodDeclaration[21290-22068]:MethodDeclaration[21302-22080]"
    }, {
      "left" : "private static JSType dereference(JSType type)",
      "right" : "private static JSType dereference(JSType type)",
      "info" : "MethodDeclaration[22072-22252]:MethodDeclaration[22084-22264]"
    } ],
    "mappings" : [
 {
      "left" : "ScopedCallback",
      "right" : "ScopedCallback",
      "info" : "SimpleType[1887-1901]:SimpleType[1887-1901]"
    }, {
      "left" : "HotSwapCompilerPass",
      "right" : "HotSwapCompilerPass",
      "info" : "SimpleType[1903-1922]:SimpleType[1903-1922]"
    }, {
      "left" : "CheckAccessControls",
      "right" : "CheckAccessControls",
      "info" : "SimpleName[4376-4395]:SimpleName[4376-4395]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4396-4421]:SingleVariableDeclaration[4396-4421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4423-4572]:Block[4423-4572]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4429-4454]:ExpressionStatement[4429-4454]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[4459-4504]:ExpressionStatement[4459-4504]"
    }, {
      "left" : "this.initializedConstantProperties = HashMultimap.create();",
      "right" : "this.initializedConstantProperties = HashMultimap.create();",
      "info" : "ExpressionStatement[4509-4568]:ExpressionStatement[4509-4568]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4576-4585]:MarkerAnnotation[4576-4585]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4588-4594]:Modifier[4588-4594]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4595-4599]:PrimitiveType[4595-4599]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4600-4607]:SimpleName[4600-4607]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4608-4620]:SingleVariableDeclaration[4608-4620]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4622-4631]:SingleVariableDeclaration[4622-4631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4633-4688]:Block[4633-4688]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[4639-4684]:ExpressionStatement[4639-4684]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4692-4701]:MarkerAnnotation[4692-4701]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4704-4710]:Modifier[4704-4710]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4711-4715]:PrimitiveType[4711-4715]"
    }, {
      "left" : "hotSwapScript",
      "right" : "hotSwapScript",
      "info" : "SimpleName[4716-4729]:SimpleName[4716-4729]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[4730-4745]:SingleVariableDeclaration[4730-4745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4747-4808]:Block[4747-4808]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, this);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, this);",
      "info" : "ExpressionStatement[4753-4804]:ExpressionStatement[4753-4804]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4812-4818]:Modifier[4812-4818]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4819-4823]:PrimitiveType[4819-4823]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[4824-4834]:SimpleName[4824-4834]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4835-4850]:SingleVariableDeclaration[4835-4850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4852-5153]:Block[4852-5153]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[4858-5149]:IfStatement[4858-5149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4882-5149]:Block[4882-5149]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[4890-4916]:VariableDeclarationStatement[4890-4916]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[4923-4951]:VariableDeclarationStatement[4923-4951]"
    }, {
      "left" : "if (isDeprecatedFunction(n, parent))",
      "right" : "if (isDeprecatedFunction(n, parent))",
      "info" : "IfStatement[4958-5031]:IfStatement[4958-5031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4995-5031]:Block[4995-5031]"
    }, {
      "left" : "deprecatedDepth++;",
      "right" : "deprecatedDepth++;",
      "info" : "ExpressionStatement[5005-5023]:ExpressionStatement[5005-5023]"
    }, {
      "left" : "if (methodDepth == 0)",
      "right" : "if (methodDepth == 0)",
      "info" : "IfStatement[5039-5122]:IfStatement[5039-5122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5061-5122]:Block[5061-5122]"
    }, {
      "left" : "currentClass = getClassOfMethod(n, parent);",
      "right" : "currentClass = getClassOfMethod(n, parent);",
      "info" : "ExpressionStatement[5071-5114]:ExpressionStatement[5071-5114]"
    }, {
      "left" : "methodDepth++;",
      "right" : "methodDepth++;",
      "info" : "ExpressionStatement[5129-5143]:ExpressionStatement[5129-5143]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5157-5163]:Modifier[5157-5163]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5164-5168]:PrimitiveType[5164-5168]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[5169-5178]:SimpleName[5169-5178]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5179-5194]:SingleVariableDeclaration[5179-5194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5196-5474]:Block[5196-5474]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[5202-5470]:IfStatement[5202-5470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5226-5470]:Block[5226-5470]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[5234-5260]:VariableDeclarationStatement[5234-5260]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5267-5295]:VariableDeclarationStatement[5267-5295]"
    }, {
      "left" : "if (isDeprecatedFunction(n, parent))",
      "right" : "if (isDeprecatedFunction(n, parent))",
      "info" : "IfStatement[5302-5375]:IfStatement[5302-5375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5339-5375]:Block[5339-5375]"
    }, {
      "left" : "deprecatedDepth--;",
      "right" : "deprecatedDepth--;",
      "info" : "ExpressionStatement[5349-5367]:ExpressionStatement[5349-5367]"
    }, {
      "left" : "methodDepth--;",
      "right" : "methodDepth--;",
      "info" : "ExpressionStatement[5383-5397]:ExpressionStatement[5383-5397]"
    }, {
      "left" : "if (methodDepth == 0)",
      "right" : "if (methodDepth == 0)",
      "info" : "IfStatement[5404-5464]:IfStatement[5404-5464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5426-5464]:Block[5426-5464]"
    }, {
      "left" : "currentClass = null;",
      "right" : "currentClass = null;",
      "info" : "ExpressionStatement[5436-5456]:ExpressionStatement[5436-5456]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5587-5594]:Modifier[5587-5594]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[5595-5601]:SimpleType[5595-5601]"
    }, {
      "left" : "getClassOfMethod",
      "right" : "getClassOfMethod",
      "info" : "SimpleName[5602-5618]:SimpleName[5602-5618]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5619-5625]:SingleVariableDeclaration[5619-5625]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[5627-5638]:SingleVariableDeclaration[5627-5638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5640-6764]:Block[5640-6764]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN)",
      "right" : "if (parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[5646-6742]:IfStatement[5646-6742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5684-6593]:Block[5684-6593]"
    }, {
      "left" : "Node lValue = parent.getFirstChild();",
      "right" : "Node lValue = parent.getFirstChild();",
      "info" : "VariableDeclarationStatement[5692-5729]:VariableDeclarationStatement[5692-5729]"
    }, {
      "left" : "if (lValue.isQualifiedName())",
      "right" : "if (lValue.isQualifiedName())",
      "info" : "IfStatement[5736-6587]:IfStatement[5736-6587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5766-6587]:Block[5766-6587]"
    }, {
      "left" : "if (lValue.getType() == Token.GETPROP)",
      "right" : "if (lValue.getType() == Token.GETPROP)",
      "info" : "IfStatement[5776-6579]:IfStatement[5776-6579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5815-6404]:Block[5815-6404]"
    }, {
      "left" : "JSType lValueType = lValue.getJSType();",
      "right" : "JSType lValueType = lValue.getJSType();",
      "info" : "VariableDeclarationStatement[5887-5926]:VariableDeclarationStatement[5887-5926]"
    }, {
      "left" : "if (lValueType != null && lValueType.isConstructor())",
      "right" : "if (lValueType != null && lValueType.isConstructor())",
      "info" : "IfStatement[5937-6394]:IfStatement[5937-6394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5991-6185]:Block[5991-6185]"
    }, {
      "left" : "return ((FunctionType) lValueType).getInstanceType();",
      "right" : "return ((FunctionType) lValueType).getInstanceType();",
      "info" : "ReturnStatement[6120-6173]:ReturnStatement[6120-6173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6191-6394]:Block[6191-6394]"
    }, {
      "left" : "return normalizeClassType(lValue.getFirstChild().getJSType());",
      "right" : "return normalizeClassType(lValue.getFirstChild().getJSType());",
      "info" : "ReturnStatement[6320-6382]:ReturnStatement[6320-6382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6410-6579]:Block[6410-6579]"
    }, {
      "left" : "return normalizeClassType(lValue.getJSType());",
      "right" : "return normalizeClassType(lValue.getJSType());",
      "info" : "ReturnStatement[6523-6569]:ReturnStatement[6523-6569]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n) ||\n               parent.getType() == Token.NAME)",
      "right" : "if (NodeUtil.isFunctionDeclaration(n) ||\n               parent.getType() == Token.NAME)",
      "info" : "IfStatement[6599-6742]:IfStatement[6599-6742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6687-6742]:Block[6687-6742]"
    }, {
      "left" : "return normalizeClassType(n.getJSType());",
      "right" : "return normalizeClassType(n.getJSType());",
      "info" : "ReturnStatement[6695-6736]:ReturnStatement[6695-6736]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6748-6760]:ReturnStatement[6748-6760]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6906-6913]:Modifier[6906-6913]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[6914-6920]:SimpleType[6914-6920]"
    }, {
      "left" : "normalizeClassType",
      "right" : "normalizeClassType",
      "info" : "SimpleName[6921-6939]:SimpleName[6921-6939]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[6940-6951]:SingleVariableDeclaration[6940-6951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6953-7351]:Block[6953-7351]"
    }, {
      "left" : "if (type == null || type.isUnknownType())",
      "right" : "if (type == null || type.isUnknownType())",
      "info" : "IfStatement[6959-7330]:IfStatement[6959-7330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7001-7027]:Block[7001-7027]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[7009-7021]:ReturnStatement[7009-7021]"
    }, {
      "left" : "if (type.isConstructor())",
      "right" : "if (type.isConstructor())",
      "info" : "IfStatement[7033-7330]:IfStatement[7033-7330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7059-7120]:Block[7059-7120]"
    }, {
      "left" : "return ((FunctionType) type).getInstanceType();",
      "right" : "return ((FunctionType) type).getInstanceType();",
      "info" : "ReturnStatement[7067-7114]:ReturnStatement[7067-7114]"
    }, {
      "left" : "if (type.isFunctionPrototypeType())",
      "right" : "if (type.isFunctionPrototypeType())",
      "info" : "IfStatement[7126-7330]:IfStatement[7126-7330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7162-7330]:Block[7162-7330]"
    }, {
      "left" : "FunctionType owner = ((FunctionPrototypeType) type).getOwnerFunction();",
      "right" : "FunctionType owner = ((FunctionPrototypeType) type).getOwnerFunction();",
      "info" : "VariableDeclarationStatement[7170-7241]:VariableDeclarationStatement[7170-7241]"
    }, {
      "left" : "if (owner.isConstructor())",
      "right" : "if (owner.isConstructor())",
      "info" : "IfStatement[7248-7324]:IfStatement[7248-7324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7275-7324]:Block[7275-7324]"
    }, {
      "left" : "return owner.getInstanceType();",
      "right" : "return owner.getInstanceType();",
      "info" : "ReturnStatement[7285-7316]:ReturnStatement[7285-7316]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[7335-7347]:ReturnStatement[7335-7347]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7355-7361]:Modifier[7355-7361]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7362-7369]:PrimitiveType[7362-7369]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[7370-7384]:SimpleName[7370-7384]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7385-7400]:SingleVariableDeclaration[7385-7400]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7402-7408]:SingleVariableDeclaration[7402-7408]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7410-7421]:SingleVariableDeclaration[7410-7421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7423-7445]:Block[7423-7445]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7429-7441]:ReturnStatement[7429-7441]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7449-7455]:Modifier[7449-7455]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7456-7460]:PrimitiveType[7456-7460]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[7461-7466]:SimpleName[7461-7466]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7467-7482]:SingleVariableDeclaration[7467-7482]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7484-7490]:SingleVariableDeclaration[7484-7490]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7492-7503]:SingleVariableDeclaration[7492-7503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7505-7929]:Block[7505-7929]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n        checkNameDeprecation(t, n, parent);\n        checkNameVisibility(t, n, parent);\n        break;\n      case Token.GETPROP:\n        checkPropertyDeprecation(t, n, parent);\n        checkPropertyVisibility(t, n, parent);\n        checkConstantProperty(t, n);\n        break;\n      case Token.NEW:\n        checkConstructorDeprecation(t, n, parent);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n        checkNameDeprecation(t, n, parent);\n        checkNameVisibility(t, n, parent);\n        break;\n      case Token.GETPROP:\n        checkPropertyDeprecation(t, n, parent);\n        checkPropertyVisibility(t, n, parent);\n        checkConstantProperty(t, n);\n        break;\n      case Token.NEW:\n        checkConstructorDeprecation(t, n, parent);\n        break;\n    }",
      "info" : "SwitchStatement[7511-7925]:SwitchStatement[7511-7925]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7540-7556]:SwitchCase[7540-7556]"
    }, {
      "left" : "checkNameDeprecation(t, n, parent);",
      "right" : "checkNameDeprecation(t, n, parent);",
      "info" : "ExpressionStatement[7565-7600]:ExpressionStatement[7565-7600]"
    }, {
      "left" : "checkNameVisibility(t, n, parent);",
      "right" : "checkNameVisibility(t, n, parent);",
      "info" : "ExpressionStatement[7609-7643]:ExpressionStatement[7609-7643]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7652-7658]:BreakStatement[7652-7658]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[7665-7684]:SwitchCase[7665-7684]"
    }, {
      "left" : "checkPropertyDeprecation(t, n, parent);",
      "right" : "checkPropertyDeprecation(t, n, parent);",
      "info" : "ExpressionStatement[7693-7732]:ExpressionStatement[7693-7732]"
    }, {
      "left" : "checkPropertyVisibility(t, n, parent);",
      "right" : "checkPropertyVisibility(t, n, parent);",
      "info" : "ExpressionStatement[7741-7779]:ExpressionStatement[7741-7779]"
    }, {
      "left" : "checkConstantProperty(t, n);",
      "right" : "checkConstantProperty(t, n);",
      "info" : "ExpressionStatement[7788-7816]:ExpressionStatement[7788-7816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7825-7831]:BreakStatement[7825-7831]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[7838-7853]:SwitchCase[7838-7853]"
    }, {
      "left" : "checkConstructorDeprecation(t, n, parent);",
      "right" : "checkConstructorDeprecation(t, n, parent);",
      "info" : "ExpressionStatement[7862-7904]:ExpressionStatement[7862-7904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7913-7919]:BreakStatement[7913-7919]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8023-8030]:Modifier[8023-8030]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8031-8035]:PrimitiveType[8031-8035]"
    }, {
      "left" : "checkConstructorDeprecation",
      "right" : "checkConstructorDeprecation",
      "info" : "SimpleName[8036-8063]:SimpleName[8036-8063]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8064-8079]:SingleVariableDeclaration[8064-8079]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8081-8087]:SingleVariableDeclaration[8081-8087]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[8095-8106]:SingleVariableDeclaration[8095-8106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8108-8644]:Block[8108-8644]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[8114-8142]:VariableDeclarationStatement[8114-8142]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[8148-8640]:IfStatement[8148-8640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8166-8640]:Block[8166-8640]"
    }, {
      "left" : "String deprecationInfo = getTypeDeprecationInfo(type);",
      "right" : "String deprecationInfo = getTypeDeprecationInfo(type);",
      "info" : "VariableDeclarationStatement[8174-8228]:VariableDeclarationStatement[8174-8228]"
    }, {
      "left" : "if (deprecationInfo != null &&\n          shouldEmitDeprecationWarning(t, n, parent))",
      "right" : "if (deprecationInfo != null &&\n          shouldEmitDeprecationWarning(t, n, parent))",
      "info" : "IfStatement[8236-8634]:IfStatement[8236-8634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8321-8634]:Block[8321-8634]"
    }, {
      "left" : "if (!deprecationInfo.isEmpty())",
      "right" : "if (!deprecationInfo.isEmpty())",
      "info" : "IfStatement[8332-8626]:IfStatement[8332-8626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8364-8516]:Block[8364-8516]"
    }, {
      "left" : "compiler.report(\n                t.makeError(n, DEPRECATED_CLASS_REASON,\n                    type.toString(), deprecationInfo));",
      "right" : "compiler.report(\n                t.makeError(n, DEPRECATED_CLASS_REASON,\n                    type.toString(), deprecationInfo));",
      "info" : "ExpressionStatement[8378-8506]:ExpressionStatement[8378-8506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8522-8626]:Block[8522-8626]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, DEPRECATED_CLASS, type.toString()));",
      "right" : "compiler.report(\n              t.makeError(n, DEPRECATED_CLASS, type.toString()));",
      "info" : "ExpressionStatement[8534-8616]:ExpressionStatement[8534-8616]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8739-8746]:Modifier[8739-8746]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8747-8751]:PrimitiveType[8747-8751]"
    }, {
      "left" : "checkNameDeprecation",
      "right" : "checkNameDeprecation",
      "info" : "SimpleName[8752-8772]:SimpleName[8752-8772]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8773-8788]:SingleVariableDeclaration[8773-8788]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8790-8796]:SingleVariableDeclaration[8790-8796]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[8798-8809]:SingleVariableDeclaration[8798-8809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8811-9553]:Block[8811-9553]"
    }, {
      "left" : "if (parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR ||\n        parent.getType() == Token.NEW)",
      "right" : "if (parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR ||\n        parent.getType() == Token.NEW)",
      "info" : "IfStatement[8875-9010]:IfStatement[8875-9010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8989-9010]:Block[8989-9010]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8997-9004]:ReturnStatement[8997-9004]"
    }, {
      "left" : "Scope.Var var = t.getScope().getVar(n.getString());",
      "right" : "Scope.Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[9016-9067]:VariableDeclarationStatement[9016-9067]"
    }, {
      "left" : "JSDocInfo docInfo = var == null ? null : var.getJSDocInfo();",
      "right" : "JSDocInfo docInfo = var == null ? null : var.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[9072-9132]:VariableDeclarationStatement[9072-9132]"
    }, {
      "left" : "if (docInfo != null && docInfo.isDeprecated() &&\n        shouldEmitDeprecationWarning(t, n, parent))",
      "right" : "if (docInfo != null && docInfo.isDeprecated() &&\n        shouldEmitDeprecationWarning(t, n, parent))",
      "info" : "IfStatement[9138-9549]:IfStatement[9138-9549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9239-9549]:Block[9239-9549]"
    }, {
      "left" : "if (docInfo.getDeprecationReason() != null)",
      "right" : "if (docInfo.getDeprecationReason() != null)",
      "info" : "IfStatement[9248-9543]:IfStatement[9248-9543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9292-9442]:Block[9292-9442]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, DEPRECATED_NAME_REASON, n.getString(),\n                docInfo.getDeprecationReason()));",
      "right" : "compiler.report(\n            t.makeError(n, DEPRECATED_NAME_REASON, n.getString(),\n                docInfo.getDeprecationReason()));",
      "info" : "ExpressionStatement[9302-9434]:ExpressionStatement[9302-9434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9448-9543]:Block[9448-9543]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, DEPRECATED_NAME, n.getString()));",
      "right" : "compiler.report(\n            t.makeError(n, DEPRECATED_NAME, n.getString()));",
      "info" : "ExpressionStatement[9458-9535]:ExpressionStatement[9458-9535]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9656-9663]:Modifier[9656-9663]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9664-9668]:PrimitiveType[9664-9668]"
    }, {
      "left" : "checkPropertyDeprecation",
      "right" : "checkPropertyDeprecation",
      "info" : "SimpleName[9669-9693]:SimpleName[9669-9693]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9694-9709]:SingleVariableDeclaration[9694-9709]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9711-9717]:SingleVariableDeclaration[9711-9717]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[9719-9730]:SingleVariableDeclaration[9719-9730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9732-10671]:Block[9732-10671]"
    }, {
      "left" : "if (parent.getType() == Token.NEW)",
      "right" : "if (parent.getType() == Token.NEW)",
      "info" : "IfStatement[9781-9837]:IfStatement[9781-9837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9816-9837]:Block[9816-9837]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9824-9831]:ReturnStatement[9824-9831]"
    }, {
      "left" : "ObjectType objectType =\n        ObjectType.cast(dereference(n.getFirstChild().getJSType()));",
      "right" : "ObjectType objectType =\n        ObjectType.cast(dereference(n.getFirstChild().getJSType()));",
      "info" : "VariableDeclarationStatement[9843-9935]:VariableDeclarationStatement[9843-9935]"
    }, {
      "left" : "String propertyName = n.getLastChild().getString();",
      "right" : "String propertyName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[9940-9991]:VariableDeclarationStatement[9940-9991]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[9997-10667]:IfStatement[9997-10667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10021-10667]:Block[10021-10667]"
    }, {
      "left" : "String deprecationInfo\n          = getPropertyDeprecationInfo(objectType, propertyName);",
      "right" : "String deprecationInfo\n          = getPropertyDeprecationInfo(objectType, propertyName);",
      "info" : "VariableDeclarationStatement[10029-10117]:VariableDeclarationStatement[10029-10117]"
    }, {
      "left" : "if (deprecationInfo != null &&\n          shouldEmitDeprecationWarning(t, n, parent))",
      "right" : "if (deprecationInfo != null &&\n          shouldEmitDeprecationWarning(t, n, parent))",
      "info" : "IfStatement[10125-10661]:IfStatement[10125-10661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10210-10661]:Block[10210-10661]"
    }, {
      "left" : "if (!deprecationInfo.isEmpty())",
      "right" : "if (!deprecationInfo.isEmpty())",
      "info" : "IfStatement[10221-10653]:IfStatement[10221-10653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10253-10471]:Block[10253-10471]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, DEPRECATED_PROP_REASON, propertyName,\n                  validator.getReadableJSTypeName(n.getFirstChild(), true),\n                  deprecationInfo));",
      "right" : "compiler.report(\n              t.makeError(n, DEPRECATED_PROP_REASON, propertyName,\n                  validator.getReadableJSTypeName(n.getFirstChild(), true),\n                  deprecationInfo));",
      "info" : "ExpressionStatement[10265-10461]:ExpressionStatement[10265-10461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10477-10653]:Block[10477-10653]"
    }, {
      "left" : "compiler.report(\n              t.makeError(n, DEPRECATED_PROP, propertyName,\n                  validator.getReadableJSTypeName(n.getFirstChild(), true)));",
      "right" : "compiler.report(\n              t.makeError(n, DEPRECATED_PROP, propertyName,\n                  validator.getReadableJSTypeName(n.getFirstChild(), true)));",
      "info" : "ExpressionStatement[10489-10643]:ExpressionStatement[10489-10643]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10830-10837]:Modifier[10830-10837]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10838-10842]:PrimitiveType[10838-10842]"
    }, {
      "left" : "checkNameVisibility",
      "right" : "checkNameVisibility",
      "info" : "SimpleName[10843-10862]:SimpleName[10843-10862]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10863-10878]:SingleVariableDeclaration[10863-10878]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[10880-10889]:SingleVariableDeclaration[10880-10889]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10891-10902]:SingleVariableDeclaration[10891-10902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10904-11612]:Block[10904-11612]"
    }, {
      "left" : "Var var = t.getScope().getVar(name.getString());",
      "right" : "Var var = t.getScope().getVar(name.getString());",
      "info" : "VariableDeclarationStatement[10910-10958]:VariableDeclarationStatement[10910-10958]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[10963-11608]:IfStatement[10963-11608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10980-11608]:Block[10980-11608]"
    }, {
      "left" : "JSDocInfo docInfo = var.getJSDocInfo();",
      "right" : "JSDocInfo docInfo = var.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[10988-11027]:VariableDeclarationStatement[10988-11027]"
    }, {
      "left" : "if (docInfo != null)",
      "right" : "if (docInfo != null)",
      "info" : "IfStatement[11034-11602]:IfStatement[11034-11602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11055-11602]:Block[11055-11602]"
    }, {
      "left" : "Visibility visibility = docInfo.getVisibility();",
      "right" : "Visibility visibility = docInfo.getVisibility();",
      "info" : "VariableDeclarationStatement[11137-11185]:VariableDeclarationStatement[11137-11185]"
    }, {
      "left" : "if (visibility == Visibility.PRIVATE &&\n            !t.getInput().getName().equals(docInfo.getSourceName()))",
      "right" : "if (visibility == Visibility.PRIVATE &&\n            !t.getInput().getName().equals(docInfo.getSourceName()))",
      "info" : "IfStatement[11194-11594]:IfStatement[11194-11594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11303-11594]:Block[11303-11594]"
    }, {
      "left" : "if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent))",
      "right" : "if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent))",
      "info" : "IfStatement[11315-11434]:IfStatement[11315-11434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11401-11434]:Block[11401-11434]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11415-11422]:ReturnStatement[11415-11422]"
    }, {
      "left" : "compiler.report(\n              t.makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,\n                  name.getString(), docInfo.getSourceName()));",
      "right" : "compiler.report(\n              t.makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,\n                  name.getString(), docInfo.getSourceName()));",
      "info" : "ExpressionStatement[11446-11584]:ExpressionStatement[11446-11584]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11777-11784]:Modifier[11777-11784]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11785-11789]:PrimitiveType[11785-11789]"
    }, {
      "left" : "checkConstantProperty",
      "right" : "checkConstantProperty",
      "info" : "SimpleName[11790-11811]:SimpleName[11790-11811]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11812-11827]:SingleVariableDeclaration[11812-11827]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[11835-11847]:SingleVariableDeclaration[11835-11847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11849-13664]:Block[11849-13664]"
    }, {
      "left" : "Node parent = getprop.getParent();",
      "right" : "Node parent = getprop.getParent();",
      "info" : "VariableDeclarationStatement[11901-11935]:VariableDeclarationStatement[11901-11935]"
    }, {
      "left" : "if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)\n        && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC))",
      "right" : "if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)\n        && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC))",
      "info" : "IfStatement[11940-12116]:IfStatement[11940-12116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12095-12116]:Block[12095-12116]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12103-12110]:ReturnStatement[12103-12110]"
    }, {
      "left" : "ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));",
      "right" : "ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));",
      "info" : "VariableDeclarationStatement[12122-12218]:VariableDeclarationStatement[12122-12218]"
    }, {
      "left" : "String propertyName = getprop.getLastChild().getString();",
      "right" : "String propertyName = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[12223-12280]:VariableDeclarationStatement[12223-12280]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[12342-13660]:IfStatement[12342-13660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12366-13660]:Block[12366-13660]"
    }, {
      "left" : "ObjectType oType = objectType;",
      "right" : "ObjectType oType = objectType;",
      "info" : "VariableDeclarationStatement[12374-12404]:VariableDeclarationStatement[12374-12404]"
    }, {
      "left" : "while (oType != null)",
      "right" : "while (oType != null)",
      "info" : "WhileStatement[12411-12824]:WhileStatement[12411-12824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12433-12824]:Block[12433-12824]"
    }, {
      "left" : "if (oType.hasReferenceName())",
      "right" : "if (oType.hasReferenceName())",
      "info" : "IfStatement[12443-12770]:IfStatement[12443-12770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12473-12770]:Block[12473-12770]"
    }, {
      "left" : "if (initializedConstantProperties.containsEntry(\n                  oType.getReferenceName(), propertyName))",
      "right" : "if (initializedConstantProperties.containsEntry(\n                  oType.getReferenceName(), propertyName))",
      "info" : "IfStatement[12485-12760]:IfStatement[12485-12760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12593-12760]:Block[12593-12760]"
    }, {
      "left" : "compiler.report(\n                t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE,\n                    propertyName));",
      "right" : "compiler.report(\n                t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE,\n                    propertyName));",
      "info" : "ExpressionStatement[12607-12729]:ExpressionStatement[12607-12729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12742-12748]:BreakStatement[12742-12748]"
    }, {
      "left" : "oType = oType.getImplicitPrototype();",
      "right" : "oType = oType.getImplicitPrototype();",
      "info" : "ExpressionStatement[12779-12816]:ExpressionStatement[12779-12816]"
    }, {
      "left" : "JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);",
      "right" : "JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);",
      "info" : "VariableDeclarationStatement[12832-12898]:VariableDeclarationStatement[12832-12898]"
    }, {
      "left" : "if (info != null && info.isConstant()\n          && objectType.hasReferenceName())",
      "right" : "if (info != null && info.isConstant()\n          && objectType.hasReferenceName())",
      "info" : "IfStatement[12905-13096]:IfStatement[12905-13096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12987-13096]:Block[12987-13096]"
    }, {
      "left" : "initializedConstantProperties.put(objectType.getReferenceName(),\n            propertyName);",
      "right" : "initializedConstantProperties.put(objectType.getReferenceName(),\n            propertyName);",
      "info" : "ExpressionStatement[12997-13088]:ExpressionStatement[12997-13088]"
    }, {
      "left" : "if (objectType.isInstanceType())",
      "right" : "if (objectType.isInstanceType())",
      "info" : "IfStatement[13172-13654]:IfStatement[13172-13654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13205-13654]:Block[13205-13654]"
    }, {
      "left" : "ObjectType prototype = objectType.getImplicitPrototype();",
      "right" : "ObjectType prototype = objectType.getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[13215-13272]:VariableDeclarationStatement[13215-13272]"
    }, {
      "left" : "if (prototype != null)",
      "right" : "if (prototype != null)",
      "info" : "IfStatement[13281-13646]:IfStatement[13281-13646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13304-13646]:Block[13304-13646]"
    }, {
      "left" : "JSDocInfo prototypeInfo\n            = prototype.getOwnPropertyJSDocInfo(propertyName);",
      "right" : "JSDocInfo prototypeInfo\n            = prototype.getOwnPropertyJSDocInfo(propertyName);",
      "info" : "VariableDeclarationStatement[13316-13402]:VariableDeclarationStatement[13316-13402]"
    }, {
      "left" : "if (prototypeInfo != null && prototypeInfo.isConstant()\n              && prototype.hasReferenceName())",
      "right" : "if (prototypeInfo != null && prototypeInfo.isConstant()\n              && prototype.hasReferenceName())",
      "info" : "IfStatement[13413-13636]:IfStatement[13413-13636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13516-13636]:Block[13516-13636]"
    }, {
      "left" : "initializedConstantProperties.put(prototype.getReferenceName(),\n                propertyName);",
      "right" : "initializedConstantProperties.put(prototype.getReferenceName(),\n                propertyName);",
      "info" : "ExpressionStatement[13530-13624]:ExpressionStatement[13530-13624]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13833-13840]:Modifier[13833-13840]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13841-13845]:PrimitiveType[13841-13845]"
    }, {
      "left" : "checkPropertyVisibility",
      "right" : "checkPropertyVisibility",
      "info" : "SimpleName[13846-13869]:SimpleName[13846-13869]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13870-13885]:SingleVariableDeclaration[13870-13885]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[13893-13905]:SingleVariableDeclaration[13893-13905]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13907-13918]:SingleVariableDeclaration[13907-13918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13920-17646]:Block[13920-17658]"
    }, {
      "left" : "ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));",
      "right" : "ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));",
      "info" : "VariableDeclarationStatement[13926-14024]:VariableDeclarationStatement[13926-14024]"
    }, {
      "left" : "String propertyName = getprop.getLastChild().getString();",
      "right" : "String propertyName = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[14029-14086]:VariableDeclarationStatement[14029-14086]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[14092-17642]:IfStatement[14092-17654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14116-17642]:Block[14116-17654]"
    }, {
      "left" : "boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;",
      "right" : "boolean isOverride = parent.getJSDocInfo() != null &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;",
      "info" : "VariableDeclarationStatement[14227-14359]:VariableDeclarationStatement[14227-14371]"
    }, {
      "left" : "t",
      "right" : "parent",
      "info" : "SimpleName[14248-14249]:SimpleName[14248-14254]"
    }, {
      "left" : "t.inGlobalScope()",
      "right" : "parent.getJSDocInfo()",
      "info" : "MethodInvocation[14248-14265]:MethodInvocation[14248-14269]"
    }, {
      "left" : "inGlobalScope",
      "right" : "getJSDocInfo",
      "info" : "SimpleName[14250-14263]:SimpleName[14255-14267]"
    }, {
      "left" : "if (isOverride)",
      "right" : "if (isOverride)",
      "info" : "IfStatement[14458-14539]:IfStatement[14470-14551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14474-14539]:Block[14486-14551]"
    }, {
      "left" : "objectType = objectType.getImplicitPrototype();",
      "right" : "objectType = objectType.getImplicitPrototype();",
      "info" : "ExpressionStatement[14484-14531]:ExpressionStatement[14496-14543]"
    }, {
      "left" : "JSDocInfo docInfo = null;",
      "right" : "JSDocInfo docInfo = null;",
      "info" : "VariableDeclarationStatement[14546-14571]:VariableDeclarationStatement[14558-14583]"
    }, {
      "left" : "for (; objectType != null;\n           objectType = objectType.getImplicitPrototype())",
      "right" : "for (; objectType != null;\n           objectType = objectType.getImplicitPrototype())",
      "info" : "ForStatement[14578-14862]:ForStatement[14590-14874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14664-14862]:Block[14676-14874]"
    }, {
      "left" : "docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);",
      "right" : "docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);",
      "info" : "ExpressionStatement[14674-14733]:ExpressionStatement[14686-14745]"
    }, {
      "left" : "if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED)",
      "right" : "if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED)",
      "info" : "IfStatement[14742-14854]:IfStatement[14754-14866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14826-14854]:Block[14838-14866]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14838-14844]:BreakStatement[14850-14856]"
    }, {
      "left" : "if (objectType == null)",
      "right" : "if (objectType == null)",
      "info" : "IfStatement[14870-14990]:IfStatement[14882-15002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14894-14990]:Block[14906-15002]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14975-14982]:ReturnStatement[14987-14994]"
    }, {
      "left" : "boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());",
      "right" : "boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());",
      "info" : "VariableDeclarationStatement[14998-15083]:VariableDeclarationStatement[15010-15095]"
    }, {
      "left" : "Visibility visibility = docInfo.getVisibility();",
      "right" : "Visibility visibility = docInfo.getVisibility();",
      "info" : "VariableDeclarationStatement[15090-15138]:VariableDeclarationStatement[15102-15150]"
    }, {
      "left" : "JSType ownerType = normalizeClassType(objectType);",
      "right" : "JSType ownerType = normalizeClassType(objectType);",
      "info" : "VariableDeclarationStatement[15145-15195]:VariableDeclarationStatement[15157-15207]"
    }, {
      "left" : "if (isOverride)",
      "right" : "if (isOverride)",
      "info" : "IfStatement[15202-17636]:IfStatement[15214-17648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15218-16208]:Block[15230-16220]"
    }, {
      "left" : "JSDocInfo overridingInfo = parent.getJSDocInfo();",
      "right" : "JSDocInfo overridingInfo = parent.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[15330-15379]:VariableDeclarationStatement[15342-15391]"
    }, {
      "left" : "Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();",
      "right" : "Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();",
      "info" : "VariableDeclarationStatement[15388-15513]:VariableDeclarationStatement[15400-15525]"
    }, {
      "left" : "if (visibility == Visibility.PRIVATE && !sameInput)",
      "right" : "if (visibility == Visibility.PRIVATE && !sameInput)",
      "info" : "IfStatement[15705-16200]:IfStatement[15717-16212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15757-15891]:Block[15769-15903]"
    }, {
      "left" : "compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));",
      "right" : "compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));",
      "info" : "ExpressionStatement[15769-15881]:ExpressionStatement[15781-15893]"
    }, {
      "left" : "if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility)",
      "right" : "if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility)",
      "info" : "IfStatement[15897-16200]:IfStatement[15909-16212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15997-16200]:Block[16009-16212]"
    }, {
      "left" : "compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), objectType.toString(),\n                  overridingVisibility.name()));",
      "right" : "compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), objectType.toString(),\n                  overridingVisibility.name()));",
      "info" : "ExpressionStatement[16009-16190]:ExpressionStatement[16021-16202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16214-17636]:Block[16226-17648]"
    }, {
      "left" : "if (sameInput)",
      "right" : "if (sameInput)",
      "info" : "IfStatement[16224-17628]:IfStatement[16236-17640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16239-16332]:Block[16251-16344]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16315-16322]:ReturnStatement[16327-16334]"
    }, {
      "left" : "if (visibility == Visibility.PRIVATE &&\n            (currentClass == null || ownerType.differsFrom(currentClass)))",
      "right" : "if (visibility == Visibility.PRIVATE &&\n            (currentClass == null || ownerType.differsFrom(currentClass)))",
      "info" : "IfStatement[16338-17628]:IfStatement[16350-17640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16453-16950]:Block[16465-16962]"
    }, {
      "left" : "if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent))",
      "right" : "if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent))",
      "info" : "IfStatement[16465-16584]:IfStatement[16477-16596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16551-16584]:Block[16563-16596]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16565-16572]:ReturnStatement[16577-16584]"
    }, {
      "left" : "compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));",
      "right" : "compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));",
      "info" : "ExpressionStatement[16703-16940]:ExpressionStatement[16715-16952]"
    }, {
      "left" : "if (visibility == Visibility.PROTECTED)",
      "right" : "if (visibility == Visibility.PROTECTED)",
      "info" : "IfStatement[16956-17628]:IfStatement[16968-17640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16996-17628]:Block[17008-17640]"
    }, {
      "left" : "if (currentClass == null || !currentClass.isSubtype(ownerType))",
      "right" : "if (currentClass == null || !currentClass.isSubtype(ownerType))",
      "info" : "IfStatement[17298-17618]:IfStatement[17310-17630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17362-17618]:Block[17374-17630]"
    }, {
      "left" : "compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));",
      "right" : "compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));",
      "info" : "ExpressionStatement[17376-17606]:ExpressionStatement[17388-17618]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18142-18149]:Modifier[18154-18161]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18150-18156]:Modifier[18162-18168]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18157-18164]:PrimitiveType[18169-18176]"
    }, {
      "left" : "isValidPrivateConstructorAccess",
      "right" : "isValidPrivateConstructorAccess",
      "info" : "SimpleName[18165-18196]:SimpleName[18177-18208]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18197-18208]:SingleVariableDeclaration[18209-18220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18210-18257]:Block[18222-18269]"
    }, {
      "left" : "return parent.getType() != Token.NEW;",
      "right" : "return parent.getType() != Token.NEW;",
      "info" : "ReturnStatement[18216-18253]:ReturnStatement[18228-18265]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18486-18493]:Modifier[18498-18505]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18494-18501]:PrimitiveType[18506-18513]"
    }, {
      "left" : "shouldEmitDeprecationWarning",
      "right" : "shouldEmitDeprecationWarning",
      "info" : "SimpleName[18502-18530]:SimpleName[18514-18542]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18538-18553]:SingleVariableDeclaration[18550-18565]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18555-18561]:SingleVariableDeclaration[18567-18573]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18563-18574]:SingleVariableDeclaration[18575-18586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18576-19286]:Block[18588-19298]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[18840-19022]:IfStatement[18852-19034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18863-19022]:Block[18875-19034]"
    }, {
      "left" : "if (!((parent.getType() == Token.CALL && parent.getFirstChild() == n) ||\n              n.getType() == Token.NEW))",
      "right" : "if (!((parent.getType() == Token.CALL && parent.getFirstChild() == n) ||\n              n.getType() == Token.NEW))",
      "info" : "IfStatement[18871-19016]:IfStatement[18883-19028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18985-19016]:Block[18997-19028]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18995-19008]:ReturnStatement[19007-19020]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP && n == parent.getFirstChild() &&\n        NodeUtil.isAssignmentOp(parent))",
      "right" : "if (n.getType() == Token.GETPROP && n == parent.getFirstChild() &&\n        NodeUtil.isAssignmentOp(parent))",
      "info" : "IfStatement[19105-19240]:IfStatement[19117-19252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19213-19240]:Block[19225-19252]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19221-19234]:ReturnStatement[19233-19246]"
    }, {
      "left" : "return !canAccessDeprecatedTypes(t);",
      "right" : "return !canAccessDeprecatedTypes(t);",
      "info" : "ReturnStatement[19246-19282]:ReturnStatement[19258-19294]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19632-19639]:Modifier[19644-19651]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19640-19647]:PrimitiveType[19652-19659]"
    }, {
      "left" : "canAccessDeprecatedTypes",
      "right" : "canAccessDeprecatedTypes",
      "info" : "SimpleName[19648-19672]:SimpleName[19660-19684]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19673-19688]:SingleVariableDeclaration[19685-19700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19690-20128]:Block[19702-20140]"
    }, {
      "left" : "Node scopeRoot = t.getScopeRoot();",
      "right" : "Node scopeRoot = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[19696-19730]:VariableDeclarationStatement[19708-19742]"
    }, {
      "left" : "Node scopeRootParent = scopeRoot.getParent();",
      "right" : "Node scopeRootParent = scopeRoot.getParent();",
      "info" : "VariableDeclarationStatement[19735-19780]:VariableDeclarationStatement[19747-19792]"
    }, {
      "left" : "return\n      // Case #1\n      (deprecatedDepth > 0) ||\n      // Case #2\n      (getTypeDeprecationInfo(t.getScope().getTypeOfThis()) != null) ||\n        // Case #3\n      (scopeRootParent != null && scopeRootParent.getType() == Token.ASSIGN &&\n       getTypeDeprecationInfo(\n           getClassOfMethod(scopeRoot, scopeRootParent)) != null);",
      "right" : "return\n      // Case #1\n      (deprecatedDepth > 0) ||\n      // Case #2\n      (getTypeDeprecationInfo(t.getScope().getTypeOfThis()) != null) ||\n        // Case #3\n      (scopeRootParent != null && scopeRootParent.getType() == Token.ASSIGN &&\n       getTypeDeprecationInfo(\n           getClassOfMethod(scopeRoot, scopeRootParent)) != null);",
      "info" : "ReturnStatement[19785-20124]:ReturnStatement[19797-20136]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20214-20221]:Modifier[20226-20233]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20222-20228]:Modifier[20234-20240]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20229-20236]:PrimitiveType[20241-20248]"
    }, {
      "left" : "isDeprecatedFunction",
      "right" : "isDeprecatedFunction",
      "info" : "SimpleName[20237-20257]:SimpleName[20249-20269]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20258-20264]:SingleVariableDeclaration[20270-20276]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20266-20277]:SingleVariableDeclaration[20278-20289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20279-20472]:Block[20291-20484]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[20285-20449]:IfStatement[20297-20461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20320-20449]:Block[20332-20461]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[20328-20356]:VariableDeclarationStatement[20340-20368]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[20363-20443]:IfStatement[20375-20455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20381-20443]:Block[20393-20455]"
    }, {
      "left" : "return getTypeDeprecationInfo(type) != null;",
      "right" : "return getTypeDeprecationInfo(type) != null;",
      "info" : "ReturnStatement[20391-20435]:ReturnStatement[20403-20447]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20455-20468]:ReturnStatement[20467-20480]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20700-20707]:Modifier[20712-20719]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20708-20714]:Modifier[20720-20726]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20715-20721]:SimpleType[20727-20733]"
    }, {
      "left" : "getTypeDeprecationInfo",
      "right" : "getTypeDeprecationInfo",
      "info" : "SimpleName[20722-20744]:SimpleName[20734-20756]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[20745-20756]:SingleVariableDeclaration[20757-20768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20758-21286]:Block[20770-21298]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[20764-20808]:IfStatement[20776-20820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20782-20808]:Block[20794-20820]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20790-20802]:ReturnStatement[20802-20814]"
    }, {
      "left" : "JSDocInfo info = type.getJSDocInfo();",
      "right" : "JSDocInfo info = type.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20814-20851]:VariableDeclarationStatement[20826-20863]"
    }, {
      "left" : "if (info != null && info.isDeprecated())",
      "right" : "if (info != null && info.isDeprecated())",
      "info" : "IfStatement[20856-21022]:IfStatement[20868-21034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20897-21022]:Block[20909-21034]"
    }, {
      "left" : "if (info.getDeprecationReason() != null)",
      "right" : "if (info.getDeprecationReason() != null)",
      "info" : "IfStatement[20905-20999]:IfStatement[20917-21011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20946-20999]:Block[20958-21011]"
    }, {
      "left" : "return info.getDeprecationReason();",
      "right" : "return info.getDeprecationReason();",
      "info" : "ReturnStatement[20956-20991]:ReturnStatement[20968-21003]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[21006-21016]:ReturnStatement[21018-21028]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[21027-21070]:VariableDeclarationStatement[21039-21082]"
    }, {
      "left" : "if (objType != null)",
      "right" : "if (objType != null)",
      "info" : "IfStatement[21075-21265]:IfStatement[21087-21277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21096-21265]:Block[21108-21277]"
    }, {
      "left" : "ObjectType implicitProto = objType.getImplicitPrototype();",
      "right" : "ObjectType implicitProto = objType.getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[21104-21162]:VariableDeclarationStatement[21116-21174]"
    }, {
      "left" : "if (implicitProto != null)",
      "right" : "if (implicitProto != null)",
      "info" : "IfStatement[21169-21259]:IfStatement[21181-21271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21196-21259]:Block[21208-21271]"
    }, {
      "left" : "return getTypeDeprecationInfo(implicitProto);",
      "right" : "return getTypeDeprecationInfo(implicitProto);",
      "info" : "ReturnStatement[21206-21251]:ReturnStatement[21218-21263]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21270-21282]:ReturnStatement[21282-21294]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21526-21533]:Modifier[21538-21545]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21534-21540]:Modifier[21546-21552]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[21541-21547]:SimpleType[21553-21559]"
    }, {
      "left" : "getPropertyDeprecationInfo",
      "right" : "getPropertyDeprecationInfo",
      "info" : "SimpleName[21548-21574]:SimpleName[21560-21586]"
    }, {
      "left" : "ObjectType type",
      "right" : "ObjectType type",
      "info" : "SingleVariableDeclaration[21575-21590]:SingleVariableDeclaration[21587-21602]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[21643-21654]:SingleVariableDeclaration[21655-21666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21656-22068]:Block[21668-22080]"
    }, {
      "left" : "JSDocInfo info = type.getOwnPropertyJSDocInfo(prop);",
      "right" : "JSDocInfo info = type.getOwnPropertyJSDocInfo(prop);",
      "info" : "VariableDeclarationStatement[21662-21714]:VariableDeclarationStatement[21674-21726]"
    }, {
      "left" : "if (info != null && info.isDeprecated())",
      "right" : "if (info != null && info.isDeprecated())",
      "info" : "IfStatement[21719-21886]:IfStatement[21731-21898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21760-21886]:Block[21772-21898]"
    }, {
      "left" : "if (info.getDeprecationReason() != null)",
      "right" : "if (info.getDeprecationReason() != null)",
      "info" : "IfStatement[21768-21862]:IfStatement[21780-21874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21809-21862]:Block[21821-21874]"
    }, {
      "left" : "return info.getDeprecationReason();",
      "right" : "return info.getDeprecationReason();",
      "info" : "ReturnStatement[21819-21854]:ReturnStatement[21831-21866]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[21870-21880]:ReturnStatement[21882-21892]"
    }, {
      "left" : "ObjectType implicitProto = type.getImplicitPrototype();",
      "right" : "ObjectType implicitProto = type.getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[21891-21946]:VariableDeclarationStatement[21903-21958]"
    }, {
      "left" : "if (implicitProto != null)",
      "right" : "if (implicitProto != null)",
      "info" : "IfStatement[21951-22047]:IfStatement[21963-22059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21978-22047]:Block[21990-22059]"
    }, {
      "left" : "return getPropertyDeprecationInfo(implicitProto, prop);",
      "right" : "return getPropertyDeprecationInfo(implicitProto, prop);",
      "info" : "ReturnStatement[21986-22041]:ReturnStatement[21998-22053]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22052-22064]:ReturnStatement[22064-22076]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22147-22154]:Modifier[22159-22166]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22155-22161]:Modifier[22167-22173]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[22162-22168]:SimpleType[22174-22180]"
    }, {
      "left" : "dereference",
      "right" : "dereference",
      "info" : "SimpleName[22169-22180]:SimpleName[22181-22192]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[22181-22192]:SingleVariableDeclaration[22193-22204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22194-22252]:Block[22206-22264]"
    }, {
      "left" : "return type == null ? null : type.dereference();",
      "right" : "return type == null ? null : type.dereference();",
      "info" : "ReturnStatement[22200-22248]:ReturnStatement[22212-22260]"
    } ]
  },
  "interFileMappings" : { }
}