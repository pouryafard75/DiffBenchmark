{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[4530-5397]:MethodDeclaration[4530-5397]"
    }, {
      "left" : "public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format)\n            throws IOException",
      "right" : "public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format)\n            throws IOException",
      "info" : "MethodDeclaration[5403-6648]:MethodDeclaration[5403-6648]"
    }, {
      "left" : "public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[6654-7478]:MethodDeclaration[6654-7478]"
    }, {
      "left" : "public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[7484-8456]:MethodDeclaration[7484-8456]"
    }, {
      "left" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[8462-9206]:MethodDeclaration[8462-9206]"
    }, {
      "left" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[9212-10297]:MethodDeclaration[9212-10297]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[10362-10393]:FieldDeclaration[10362-10393]"
    }, {
      "left" : "private final Map<String, Integer> headerMap;",
      "right" : "private final Map<String, Integer> headerMap;",
      "info" : "FieldDeclaration[10399-10499]:FieldDeclaration[10399-10499]"
    }, {
      "left" : "private final Lexer lexer;",
      "right" : "private final Lexer lexer;",
      "info" : "FieldDeclaration[10505-10531]:FieldDeclaration[10505-10531]"
    }, {
      "left" : "private final List<String> recordList = new ArrayList<>();",
      "right" : "private final List<String> recordList = new ArrayList<>();",
      "info" : "FieldDeclaration[10542-10678]:FieldDeclaration[10597-10733]"
    }, {
      "left" : "private long recordNumber;",
      "right" : "private long recordNumber;",
      "info" : "FieldDeclaration[10684-10767]:FieldDeclaration[10739-10822]"
    }, {
      "left" : "private final long characterOffset;",
      "right" : "private final long characterOffset;",
      "info" : "FieldDeclaration[10773-10978]:FieldDeclaration[10828-11033]"
    }, {
      "left" : "private final Token reusableToken = new Token();",
      "right" : "private final Token reusableToken = new Token();",
      "info" : "FieldDeclaration[10984-11032]:FieldDeclaration[11039-11087]"
    }, {
      "left" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "right" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[11038-11894]:MethodDeclaration[11093-11949]"
    }, {
      "left" : "private void addRecordValue(final boolean lastRecord)",
      "right" : "private void addRecordValue(final boolean lastRecord)",
      "info" : "MethodDeclaration[13396-13866]:MethodDeclaration[13509-13979]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[13872-14125]:MethodDeclaration[13985-14238]"
    }, {
      "left" : "public long getCurrentLineNumber()",
      "right" : "public long getCurrentLineNumber()",
      "info" : "MethodDeclaration[14131-14516]:MethodDeclaration[14244-14629]"
    }, {
      "left" : "public String getFirstEndOfLine()",
      "right" : "public String getFirstEndOfLine()",
      "info" : "MethodDeclaration[14522-14738]:MethodDeclaration[14635-14851]"
    }, {
      "left" : "public Map<String, Integer> getHeaderMap()",
      "right" : "public Map<String, Integer> getHeaderMap()",
      "info" : "MethodDeclaration[14744-15133]:MethodDeclaration[14857-15246]"
    }, {
      "left" : "public long getRecordNumber()",
      "right" : "public long getRecordNumber()",
      "info" : "MethodDeclaration[15139-15505]:MethodDeclaration[15252-15618]"
    }, {
      "left" : "public List<CSVRecord> getRecords() throws IOException",
      "right" : "public List<CSVRecord> getRecords() throws IOException",
      "info" : "MethodDeclaration[15511-16185]:MethodDeclaration[15624-16298]"
    }, {
      "left" : "private Map<String, Integer> initializeHeader() throws IOException",
      "right" : "private Map<String, Integer> initializeHeader() throws IOException",
      "info" : "MethodDeclaration[16191-18201]:MethodDeclaration[16304-18314]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[18207-18390]:MethodDeclaration[18320-18503]"
    }, {
      "left" : "private CSVRecord current;",
      "right" : "private CSVRecord current;",
      "info" : "FieldDeclaration[18846-18872]:FieldDeclaration[19022-19048]"
    }, {
      "left" : "private CSVRecord getNextRecord()",
      "right" : "private CSVRecord getNextRecord()",
      "info" : "MethodDeclaration[18884-19206]:MethodDeclaration[19060-19382]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[19218-19512]:MethodDeclaration[19394-19688]"
    }, {
      "left" : "public CSVRecord next()",
      "right" : "public CSVRecord next()",
      "info" : "MethodDeclaration[19524-20104]:MethodDeclaration[19700-20280]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[20116-20221]:MethodDeclaration[20292-20397]"
    }, {
      "left" : "CSVRecord nextRecord() throws IOException",
      "right" : "CSVRecord nextRecord() throws IOException",
      "info" : "MethodDeclaration[20240-22338]:MethodDeclaration[20410-22508]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5205-5397]:Block[5205-5397]"
    }, {
      "left" : "Assertions.notNull(file, \"file\");",
      "right" : "Assertions.notNull(file, \"file\");",
      "info" : "ExpressionStatement[5215-5248]:ExpressionStatement[5215-5248]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[5257-5294]:ExpressionStatement[5257-5294]"
    }, {
      "left" : "return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
      "right" : "return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
      "info" : "ReturnStatement[5303-5391]:ReturnStatement[5303-5391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6464-6648]:Block[6464-6648]"
    }, {
      "left" : "Assertions.notNull(inputStream, \"inputStream\");",
      "right" : "Assertions.notNull(inputStream, \"inputStream\");",
      "info" : "ExpressionStatement[6474-6521]:ExpressionStatement[6474-6521]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[6530-6567]:ExpressionStatement[6530-6567]"
    }, {
      "left" : "return parse(new InputStreamReader(inputStream, charset), format);",
      "right" : "return parse(new InputStreamReader(inputStream, charset), format);",
      "info" : "ReturnStatement[6576-6642]:ReturnStatement[6576-6642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7313-7478]:Block[7313-7478]"
    }, {
      "left" : "Assertions.notNull(path, \"path\");",
      "right" : "Assertions.notNull(path, \"path\");",
      "info" : "ExpressionStatement[7323-7356]:ExpressionStatement[7323-7356]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[7365-7402]:ExpressionStatement[7365-7402]"
    }, {
      "left" : "return parse(Files.newBufferedReader(path, charset), format);",
      "right" : "return parse(Files.newBufferedReader(path, charset), format);",
      "info" : "ReturnStatement[7411-7472]:ReturnStatement[7411-7472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8403-8456]:Block[8403-8456]"
    }, {
      "left" : "return new CSVParser(reader, format);",
      "right" : "return new CSVParser(reader, format);",
      "info" : "ReturnStatement[8413-8450]:ReturnStatement[8413-8450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9042-9206]:Block[9042-9206]"
    }, {
      "left" : "Assertions.notNull(string, \"string\");",
      "right" : "Assertions.notNull(string, \"string\");",
      "info" : "ExpressionStatement[9052-9089]:ExpressionStatement[9052-9089]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[9098-9135]:ExpressionStatement[9098-9135]"
    }, {
      "left" : "return new CSVParser(new StringReader(string), format);",
      "right" : "return new CSVParser(new StringReader(string), format);",
      "info" : "ReturnStatement[9145-9200]:ReturnStatement[9145-9200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10067-10297]:Block[10067-10297]"
    }, {
      "left" : "Assertions.notNull(url, \"url\");",
      "right" : "Assertions.notNull(url, \"url\");",
      "info" : "ExpressionStatement[10077-10108]:ExpressionStatement[10077-10108]"
    }, {
      "left" : "Assertions.notNull(charset, \"charset\");",
      "right" : "Assertions.notNull(charset, \"charset\");",
      "info" : "ExpressionStatement[10117-10156]:ExpressionStatement[10117-10156]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[10165-10202]:ExpressionStatement[10165-10202]"
    }, {
      "left" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
      "right" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
      "info" : "ReturnStatement[10212-10291]:ReturnStatement[10212-10291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11851-11894]:Block[11906-11949]"
    }, {
      "left" : "this(reader, format, 0, 1);",
      "right" : "this(reader, format, 0, 1);",
      "info" : "ConstructorInvocation[11861-11888]:ConstructorInvocation[11916-11943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13450-13866]:Block[13563-13979]"
    }, {
      "left" : "final String input = this.reusableToken.content.toString();",
      "right" : "final String input = this.reusableToken.content.toString();",
      "info" : "VariableDeclarationStatement[13460-13519]:VariableDeclarationStatement[13573-13632]"
    }, {
      "left" : "final String inputClean = this.format.getTrim() ? input.trim() : input;",
      "right" : "final String inputClean = this.format.getTrim() ? input.trim() : input;",
      "info" : "VariableDeclarationStatement[13528-13599]:VariableDeclarationStatement[13641-13712]"
    }, {
      "left" : "if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter())",
      "right" : "if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter())",
      "info" : "IfStatement[13608-13717]:IfStatement[13721-13830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13686-13717]:Block[13799-13830]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13700-13707]:ReturnStatement[13813-13820]"
    }, {
      "left" : "final String nullString = this.format.getNullString();",
      "right" : "final String nullString = this.format.getNullString();",
      "info" : "VariableDeclarationStatement[13726-13780]:VariableDeclarationStatement[13839-13893]"
    }, {
      "left" : "this.recordList.add(inputClean.equals(nullString) ? null : inputClean);",
      "right" : "this.recordList.add(inputClean.equals(nullString) ? null : inputClean);",
      "info" : "ExpressionStatement[13789-13860]:ExpressionStatement[13902-13973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14042-14125]:Block[14155-14238]"
    }, {
      "left" : "if (this.lexer != null)",
      "right" : "if (this.lexer != null)",
      "info" : "IfStatement[14052-14119]:IfStatement[14165-14232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14076-14119]:Block[14189-14232]"
    }, {
      "left" : "this.lexer.close();",
      "right" : "this.lexer.close();",
      "info" : "ExpressionStatement[14090-14109]:ExpressionStatement[14203-14222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14459-14516]:Block[14572-14629]"
    }, {
      "left" : "return this.lexer.getCurrentLineNumber();",
      "right" : "return this.lexer.getCurrentLineNumber();",
      "info" : "ReturnStatement[14469-14510]:ReturnStatement[14582-14623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14695-14738]:Block[14808-14851]"
    }, {
      "left" : "return lexer.getFirstEol();",
      "right" : "return lexer.getFirstEol();",
      "info" : "ReturnStatement[14705-14732]:ReturnStatement[14818-14845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15042-15133]:Block[15155-15246]"
    }, {
      "left" : "return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);",
      "right" : "return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);",
      "info" : "ReturnStatement[15052-15127]:ReturnStatement[15165-15240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15464-15505]:Block[15577-15618]"
    }, {
      "left" : "return this.recordNumber;",
      "right" : "return this.recordNumber;",
      "info" : "ReturnStatement[15474-15499]:ReturnStatement[15587-15612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15980-16185]:Block[16093-16298]"
    }, {
      "left" : "CSVRecord rec;",
      "right" : "CSVRecord rec;",
      "info" : "VariableDeclarationStatement[15990-16004]:VariableDeclarationStatement[16103-16117]"
    }, {
      "left" : "final List<CSVRecord> records = new ArrayList<>();",
      "right" : "final List<CSVRecord> records = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[16013-16063]:VariableDeclarationStatement[16126-16176]"
    }, {
      "left" : "while ((rec = this.nextRecord()) != null)",
      "right" : "while ((rec = this.nextRecord()) != null)",
      "info" : "WhileStatement[16072-16155]:WhileStatement[16185-16268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16114-16155]:Block[16227-16268]"
    }, {
      "left" : "records.add(rec);",
      "right" : "records.add(rec);",
      "info" : "ExpressionStatement[16128-16145]:ExpressionStatement[16241-16258]"
    }, {
      "left" : "return records;",
      "right" : "return records;",
      "info" : "ReturnStatement[16164-16179]:ReturnStatement[16277-16292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16504-18201]:Block[16617-18314]"
    }, {
      "left" : "Map<String, Integer> hdrMap = null;",
      "right" : "Map<String, Integer> hdrMap = null;",
      "info" : "VariableDeclarationStatement[16514-16549]:VariableDeclarationStatement[16627-16662]"
    }, {
      "left" : "final String[] formatHeader = this.format.getHeader();",
      "right" : "final String[] formatHeader = this.format.getHeader();",
      "info" : "VariableDeclarationStatement[16558-16612]:VariableDeclarationStatement[16671-16725]"
    }, {
      "left" : "if (formatHeader != null)",
      "right" : "if (formatHeader != null)",
      "info" : "IfStatement[16621-18172]:IfStatement[16734-18285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16647-18172]:Block[16760-18285]"
    }, {
      "left" : "hdrMap = this.format.getIgnoreHeaderCase() ?\n                    new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :\n                    new LinkedHashMap<String, Integer>();",
      "right" : "hdrMap = this.format.getIgnoreHeaderCase() ?\n                    new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :\n                    new LinkedHashMap<String, Integer>();",
      "info" : "ExpressionStatement[16661-16845]:ExpressionStatement[16774-16958]"
    }, {
      "left" : "String[] headerRecord = null;",
      "right" : "String[] headerRecord = null;",
      "info" : "VariableDeclarationStatement[16859-16888]:VariableDeclarationStatement[16972-17001]"
    }, {
      "left" : "if (formatHeader.length == 0)",
      "right" : "if (formatHeader.length == 0)",
      "info" : "IfStatement[16901-17373]:IfStatement[17014-17486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16931-17193]:Block[17044-17306]"
    }, {
      "left" : "final CSVRecord nextRecord = this.nextRecord();",
      "right" : "final CSVRecord nextRecord = this.nextRecord();",
      "info" : "VariableDeclarationStatement[17016-17063]:VariableDeclarationStatement[17129-17176]"
    }, {
      "left" : "if (nextRecord != null)",
      "right" : "if (nextRecord != null)",
      "info" : "IfStatement[17080-17179]:IfStatement[17193-17292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17104-17179]:Block[17217-17292]"
    }, {
      "left" : "headerRecord = nextRecord.values();",
      "right" : "headerRecord = nextRecord.values();",
      "info" : "ExpressionStatement[17126-17161]:ExpressionStatement[17239-17274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17199-17373]:Block[17312-17486]"
    }, {
      "left" : "if (this.format.getSkipHeaderRecord())",
      "right" : "if (this.format.getSkipHeaderRecord())",
      "info" : "IfStatement[17217-17314]:IfStatement[17330-17427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17256-17314]:Block[17369-17427]"
    }, {
      "left" : "this.nextRecord();",
      "right" : "this.nextRecord();",
      "info" : "ExpressionStatement[17278-17296]:ExpressionStatement[17391-17409]"
    }, {
      "left" : "headerRecord = formatHeader;",
      "right" : "headerRecord = formatHeader;",
      "info" : "ExpressionStatement[17331-17359]:ExpressionStatement[17444-17472]"
    }, {
      "left" : "if (headerRecord != null)",
      "right" : "if (headerRecord != null)",
      "info" : "IfStatement[17435-18162]:IfStatement[17548-18275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17461-18162]:Block[17574-18275]"
    }, {
      "left" : "for (int i = 0; i < headerRecord.length; i++)",
      "right" : "for (int i = 0; i < headerRecord.length; i++)",
      "info" : "ForStatement[17479-18148]:ForStatement[17592-18261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17525-18148]:Block[17638-18261]"
    }, {
      "left" : "final String header = headerRecord[i];",
      "right" : "final String header = headerRecord[i];",
      "info" : "VariableDeclarationStatement[17547-17585]:VariableDeclarationStatement[17660-17698]"
    }, {
      "left" : "final boolean containsHeader = hdrMap.containsKey(header);",
      "right" : "final boolean containsHeader = hdrMap.containsKey(header);",
      "info" : "VariableDeclarationStatement[17606-17664]:VariableDeclarationStatement[17719-17777]"
    }, {
      "left" : "final boolean emptyHeader = header == null || header.trim().isEmpty();",
      "right" : "final boolean emptyHeader = header == null || header.trim().isEmpty();",
      "info" : "VariableDeclarationStatement[17685-17755]:VariableDeclarationStatement[17798-17868]"
    }, {
      "left" : "if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames()))",
      "right" : "if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames()))",
      "info" : "IfStatement[17776-18070]:IfStatement[17889-18183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17859-18070]:Block[17972-18183]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));",
      "right" : "throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));",
      "info" : "ThrowStatement[17885-18048]:ThrowStatement[17998-18161]"
    }, {
      "left" : "hdrMap.put(header, Integer.valueOf(i));",
      "right" : "hdrMap.put(header, Integer.valueOf(i));",
      "info" : "ExpressionStatement[18091-18130]:ExpressionStatement[18204-18243]"
    }, {
      "left" : "return hdrMap;",
      "right" : "return hdrMap;",
      "info" : "ReturnStatement[18181-18195]:ReturnStatement[18294-18308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18345-18390]:Block[18458-18503]"
    }, {
      "left" : "return this.lexer.isClosed();",
      "right" : "return this.lexer.isClosed();",
      "info" : "ReturnStatement[18355-18384]:ReturnStatement[18468-18497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18918-19206]:Block[19094-19382]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18932-19196]:TryStatement[19108-19372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18936-19003]:Block[19112-19179]"
    }, {
      "left" : "return CSVParser.this.nextRecord();",
      "right" : "return CSVParser.this.nextRecord();",
      "info" : "ReturnStatement[18954-18989]:ReturnStatement[19130-19165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19032-19196]:Block[19208-19372]"
    }, {
      "left" : "throw new IllegalStateException(\n                        e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);",
      "right" : "throw new IllegalStateException(\n                        e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);",
      "info" : "ThrowStatement[19050-19182]:ThrowStatement[19226-19358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19261-19512]:Block[19437-19688]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[19275-19351]:IfStatement[19451-19527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19306-19351]:Block[19482-19527]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19324-19337]:ReturnStatement[19500-19513]"
    }, {
      "left" : "if (this.current == null)",
      "right" : "if (this.current == null)",
      "info" : "IfStatement[19364-19458]:IfStatement[19540-19634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19390-19458]:Block[19566-19634]"
    }, {
      "left" : "this.current = this.getNextRecord();",
      "right" : "this.current = this.getNextRecord();",
      "info" : "ExpressionStatement[19408-19444]:ExpressionStatement[19584-19620]"
    }, {
      "left" : "return this.current != null;",
      "right" : "return this.current != null;",
      "info" : "ReturnStatement[19474-19502]:ReturnStatement[19650-19678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19566-20104]:Block[19742-20280]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[19580-19705]:IfStatement[19756-19881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19611-19705]:Block[19787-19881]"
    }, {
      "left" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "right" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "info" : "ThrowStatement[19629-19691]:ThrowStatement[19805-19867]"
    }, {
      "left" : "CSVRecord next = this.current;",
      "right" : "CSVRecord next = this.current;",
      "info" : "VariableDeclarationStatement[19718-19748]:VariableDeclarationStatement[19894-19924]"
    }, {
      "left" : "this.current = null;",
      "right" : "this.current = null;",
      "info" : "ExpressionStatement[19761-19781]:ExpressionStatement[19937-19957]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[19797-20066]:IfStatement[19973-20242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19815-20066]:Block[19991-20242]"
    }, {
      "left" : "next = this.getNextRecord();",
      "right" : "next = this.getNextRecord();",
      "info" : "ExpressionStatement[19883-19911]:ExpressionStatement[20059-20087]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[19928-20052]:IfStatement[20104-20228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19946-20052]:Block[20122-20228]"
    }, {
      "left" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "right" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "info" : "ThrowStatement[19968-20034]:ThrowStatement[20144-20210]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[20082-20094]:ReturnStatement[20258-20270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20155-20221]:Block[20331-20397]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[20169-20211]:ThrowStatement[20345-20387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20563-22338]:Block[20733-22508]"
    }, {
      "left" : "CSVRecord result = null;",
      "right" : "CSVRecord result = null;",
      "info" : "VariableDeclarationStatement[20573-20597]:VariableDeclarationStatement[20743-20767]"
    }, {
      "left" : "this.recordList.clear();",
      "right" : "this.recordList.clear();",
      "info" : "ExpressionStatement[20606-20630]:ExpressionStatement[20776-20800]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[20639-20663]:VariableDeclarationStatement[20809-20833]"
    }, {
      "left" : "final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;",
      "right" : "final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;",
      "info" : "VariableDeclarationStatement[20672-20755]:VariableDeclarationStatement[20842-20925]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[20764-21973]:DoStatement[20934-22143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20767-21931]:Block[20937-22101]"
    }, {
      "left" : "this.reusableToken.reset();",
      "right" : "this.reusableToken.reset();",
      "info" : "ExpressionStatement[20781-20808]:ExpressionStatement[20951-20978]"
    }, {
      "left" : "this.lexer.nextToken(this.reusableToken);",
      "right" : "this.lexer.nextToken(this.reusableToken);",
      "info" : "ExpressionStatement[20821-20862]:ExpressionStatement[20991-21032]"
    }, {
      "left" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue(false);\n                break;\n            case EORECORD:\n                this.addRecordValue(true);\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue(true);\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
      "right" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue(false);\n                break;\n            case EORECORD:\n                this.addRecordValue(true);\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue(true);\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
      "info" : "SwitchStatement[20875-21921]:SwitchStatement[21045-22091]"
    }, {
      "left" : "case TOKEN:",
      "right" : "case TOKEN:",
      "info" : "SwitchCase[20922-20933]:SwitchCase[21092-21103]"
    }, {
      "left" : "this.addRecordValue(false);",
      "right" : "this.addRecordValue(false);",
      "info" : "ExpressionStatement[20950-20977]:ExpressionStatement[21120-21147]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20994-21000]:BreakStatement[21164-21170]"
    }, {
      "left" : "case EORECORD:",
      "right" : "case EORECORD:",
      "info" : "SwitchCase[21013-21027]:SwitchCase[21183-21197]"
    }, {
      "left" : "this.addRecordValue(true);",
      "right" : "this.addRecordValue(true);",
      "info" : "ExpressionStatement[21044-21070]:ExpressionStatement[21214-21240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21087-21093]:BreakStatement[21257-21263]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[21106-21115]:SwitchCase[21276-21285]"
    }, {
      "left" : "if (this.reusableToken.isReady)",
      "right" : "if (this.reusableToken.isReady)",
      "info" : "IfStatement[21132-21230]:IfStatement[21302-21400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21164-21230]:Block[21334-21400]"
    }, {
      "left" : "this.addRecordValue(true);",
      "right" : "this.addRecordValue(true);",
      "info" : "ExpressionStatement[21186-21212]:ExpressionStatement[21356-21382]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21247-21253]:BreakStatement[21417-21423]"
    }, {
      "left" : "case INVALID:",
      "right" : "case INVALID:",
      "info" : "SwitchCase[21266-21279]:SwitchCase[21436-21449]"
    }, {
      "left" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "right" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "info" : "ThrowStatement[21296-21387]:ThrowStatement[21466-21557]"
    }, {
      "left" : "case COMMENT:",
      "right" : "case COMMENT:",
      "info" : "SwitchCase[21400-21413]:SwitchCase[21570-21583]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[21451-21635]:IfStatement[21621-21805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21467-21565]:Block[21637-21735]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[21522-21547]:ExpressionStatement[21692-21717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21571-21635]:Block[21741-21805]"
    }, {
      "left" : "sb.append(Constants.LF);",
      "right" : "sb.append(Constants.LF);",
      "info" : "ExpressionStatement[21593-21617]:ExpressionStatement[21763-21787]"
    }, {
      "left" : "sb.append(this.reusableToken.content);",
      "right" : "sb.append(this.reusableToken.content);",
      "info" : "ExpressionStatement[21652-21690]:ExpressionStatement[21822-21860]"
    }, {
      "left" : "this.reusableToken.type = TOKEN;",
      "right" : "this.reusableToken.type = TOKEN;",
      "info" : "ExpressionStatement[21707-21739]:ExpressionStatement[21877-21909]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21778-21784]:BreakStatement[21948-21954]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21797-21805]:SwitchCase[21967-21975]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
      "right" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
      "info" : "ThrowStatement[21822-21907]:ThrowStatement[21992-22077]"
    }, {
      "left" : "if (!this.recordList.isEmpty())",
      "right" : "if (!this.recordList.isEmpty())",
      "info" : "IfStatement[21983-22309]:IfStatement[22153-22479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22015-22309]:Block[22185-22479]"
    }, {
      "left" : "this.recordNumber++;",
      "right" : "this.recordNumber++;",
      "info" : "ExpressionStatement[22029-22049]:ExpressionStatement[22199-22219]"
    }, {
      "left" : "final String comment = sb == null ? null : sb.toString();",
      "right" : "final String comment = sb == null ? null : sb.toString();",
      "info" : "VariableDeclarationStatement[22062-22119]:VariableDeclarationStatement[22232-22289]"
    }, {
      "left" : "result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\n                    this.recordNumber, startCharPosition);",
      "right" : "result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\n                    this.recordNumber, startCharPosition);",
      "info" : "ExpressionStatement[22132-22299]:ExpressionStatement[22302-22469]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[22318-22332]:ReturnStatement[22488-22502]"
    } ]
  },
  "interFileMappings" : { }
}