{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
      "right" : "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
      "info" : "FieldDeclaration[985-1147]:FieldDeclaration[985-1147]"
    }, {
      "left" : "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
      "right" : "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
      "info" : "FieldDeclaration[1153-1295]:FieldDeclaration[1153-1295]"
    }, {
      "left" : "private static final double EXP_INT_TABLE_A[] = new double[1500];",
      "right" : "private static final double EXP_INT_TABLE_A[] = new double[1500];",
      "info" : "FieldDeclaration[1301-1485]:FieldDeclaration[1301-1485]"
    }, {
      "left" : "private static final double EXP_INT_TABLE_B[] = new double[1500];",
      "right" : "private static final double EXP_INT_TABLE_B[] = new double[1500];",
      "info" : "FieldDeclaration[1491-1674]:FieldDeclaration[1491-1674]"
    }, {
      "left" : "private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
      "right" : "private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
      "info" : "FieldDeclaration[1680-1880]:FieldDeclaration[1680-1880]"
    }, {
      "left" : "private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
      "right" : "private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
      "info" : "FieldDeclaration[1886-2086]:FieldDeclaration[1886-2086]"
    }, {
      "left" : "private static final double FACT[] = new double[20];",
      "right" : "private static final double FACT[] = new double[20];",
      "info" : "FieldDeclaration[2092-2202]:FieldDeclaration[2092-2202]"
    }, {
      "left" : "private static final double LN_MANT[][] = new double[1024][];",
      "right" : "private static final double LN_MANT[][] = new double[1024][];",
      "info" : "FieldDeclaration[2208-2360]:FieldDeclaration[2208-2360]"
    }, {
      "left" : "private static final double LN_2_A = 0.693147063255310059;",
      "right" : "private static final double LN_2_A = 0.693147063255310059;",
      "info" : "FieldDeclaration[2366-2455]:FieldDeclaration[2366-2455]"
    }, {
      "left" : "private static final double LN_2_B = 1.17304635250823482e-7;",
      "right" : "private static final double LN_2_B = 1.17304635250823482e-7;",
      "info" : "FieldDeclaration[2461-2551]:FieldDeclaration[2461-2551]"
    }, {
      "left" : "private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
      "right" : "private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
      "info" : "FieldDeclaration[2557-3468]:FieldDeclaration[2557-3468]"
    }, {
      "left" : "private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
      "right" : "private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
      "info" : "FieldDeclaration[3474-4011]:FieldDeclaration[3474-4011]"
    }, {
      "left" : "private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
      "right" : "private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
      "info" : "FieldDeclaration[4017-4426]:FieldDeclaration[4017-4426]"
    }, {
      "left" : "private static final double SINE_TABLE_A[] = new double[14];",
      "right" : "private static final double SINE_TABLE_A[] = new double[14];",
      "info" : "FieldDeclaration[4432-4527]:FieldDeclaration[4432-4527]"
    }, {
      "left" : "private static final double SINE_TABLE_B[] = new double[14];",
      "right" : "private static final double SINE_TABLE_B[] = new double[14];",
      "info" : "FieldDeclaration[4533-4627]:FieldDeclaration[4533-4627]"
    }, {
      "left" : "private static final double COSINE_TABLE_A[] = new double[14];",
      "right" : "private static final double COSINE_TABLE_A[] = new double[14];",
      "info" : "FieldDeclaration[4633-4732]:FieldDeclaration[4633-4732]"
    }, {
      "left" : "private static final double COSINE_TABLE_B[] = new double[14];",
      "right" : "private static final double COSINE_TABLE_B[] = new double[14];",
      "info" : "FieldDeclaration[4738-4836]:FieldDeclaration[4738-4836]"
    }, {
      "left" : "private static final double TANGENT_TABLE_A[] = new double[14];",
      "right" : "private static final double TANGENT_TABLE_A[] = new double[14];",
      "info" : "FieldDeclaration[4842-4959]:FieldDeclaration[4842-4959]"
    }, {
      "left" : "private static final double TANGENT_TABLE_B[] = new double[14];",
      "right" : "private static final double TANGENT_TABLE_B[] = new double[14];",
      "info" : "FieldDeclaration[4965-5081]:FieldDeclaration[4965-5081]"
    }, {
      "left" : "private static long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
      "right" : "private static long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
      "info" : "FieldDeclaration[5087-5953]:FieldDeclaration[5087-5953]"
    }, {
      "left" : "private static long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
      "right" : "private static long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
      "info" : "FieldDeclaration[5959-6149]:FieldDeclaration[5959-6149]"
    }, {
      "left" : "private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
      "right" : "private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
      "info" : "FieldDeclaration[6155-6429]:FieldDeclaration[6155-6429]"
    }, {
      "left" : "private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
      "right" : "private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
      "info" : "FieldDeclaration[6435-6771]:FieldDeclaration[6435-6771]"
    }, {
      "left" : "private FastMath()",
      "right" : "private FastMath()",
      "info" : "MethodDeclaration[7978-8047]:MethodDeclaration[7978-8047]"
    }, {
      "left" : "public static double sqrt(final double a)",
      "right" : "public static double sqrt(final double a)",
      "info" : "MethodDeclaration[8053-8267]:MethodDeclaration[8053-8267]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[8273-9549]:MethodDeclaration[8273-9549]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[9555-12316]:MethodDeclaration[9555-12316]"
    }, {
      "left" : "public static double tanh(double x)",
      "right" : "public static double tanh(double x)",
      "info" : "MethodDeclaration[12322-15254]:MethodDeclaration[12322-15254]"
    }, {
      "left" : "public static double acosh(final double a)",
      "right" : "public static double acosh(final double a)",
      "info" : "MethodDeclaration[15260-15533]:MethodDeclaration[15260-15533]"
    }, {
      "left" : "public static double asinh(double a)",
      "right" : "public static double asinh(double a)",
      "info" : "MethodDeclaration[15539-16955]:MethodDeclaration[15539-16955]"
    }, {
      "left" : "public static double atanh(double a)",
      "right" : "public static double atanh(double a)",
      "info" : "MethodDeclaration[16961-18178]:MethodDeclaration[16961-18178]"
    }, {
      "left" : "public static double signum(final double a)",
      "right" : "public static double signum(final double a)",
      "info" : "MethodDeclaration[18184-18567]:MethodDeclaration[18184-18567]"
    }, {
      "left" : "public static double nextUp(final double a)",
      "right" : "public static double nextUp(final double a)",
      "info" : "MethodDeclaration[18573-18857]:MethodDeclaration[18573-18857]"
    }, {
      "left" : "public static double random()",
      "right" : "public static double random()",
      "info" : "MethodDeclaration[18863-19049]:MethodDeclaration[18863-19049]"
    }, {
      "left" : "public static double exp(double x)",
      "right" : "public static double exp(double x)",
      "info" : "MethodDeclaration[19055-19900]:MethodDeclaration[19055-19900]"
    }, {
      "left" : "private static double exp(double x, double extra, double[] hiPrec)",
      "right" : "private static double exp(double x, double extra, double[] hiPrec)",
      "info" : "MethodDeclaration[19906-24553]:MethodDeclaration[19906-24553]"
    }, {
      "left" : "public static double expm1(double x)",
      "right" : "public static double expm1(double x)",
      "info" : "MethodDeclaration[24559-24747]:MethodDeclaration[24559-24747]"
    }, {
      "left" : "private static double expm1(double x, double hiPrecOut[])",
      "right" : "private static double expm1(double x, double hiPrecOut[])",
      "info" : "MethodDeclaration[24753-29070]:MethodDeclaration[24753-29070]"
    }, {
      "left" : "private static double slowexp(final double x, final double result[])",
      "right" : "private static double slowexp(final double x, final double result[])",
      "info" : "MethodDeclaration[29076-30108]:MethodDeclaration[29076-30108]"
    }, {
      "left" : "private static void split(final double d, final double split[])",
      "right" : "private static void split(final double d, final double split[])",
      "info" : "MethodDeclaration[30114-30751]:MethodDeclaration[30114-30751]"
    }, {
      "left" : "private static void resplit(final double a[])",
      "right" : "private static void resplit(final double a[])",
      "info" : "MethodDeclaration[30757-31315]:MethodDeclaration[30757-31315]"
    }, {
      "left" : "private static void splitMult(double a[], double b[], double ans[])",
      "right" : "private static void splitMult(double a[], double b[], double ans[])",
      "info" : "MethodDeclaration[31321-31726]:MethodDeclaration[31321-31726]"
    }, {
      "left" : "private static void splitAdd(final double a[], final double b[], final double ans[])",
      "right" : "private static void splitAdd(final double a[], final double b[], final double ans[])",
      "info" : "MethodDeclaration[31732-32087]:MethodDeclaration[31732-32087]"
    }, {
      "left" : "private static void splitReciprocal(final double in[], final double result[])",
      "right" : "private static void splitReciprocal(final double in[], final double result[])",
      "info" : "MethodDeclaration[32093-33865]:MethodDeclaration[32093-33865]"
    }, {
      "left" : "private static void quadMult(final double a[], final double b[], final double result[])",
      "right" : "private static void quadMult(final double a[], final double b[], final double result[])",
      "info" : "MethodDeclaration[33871-35502]:MethodDeclaration[33871-35502]"
    }, {
      "left" : "private static double expint(int p, final double result[])",
      "right" : "private static double expint(int p, final double result[])",
      "info" : "MethodDeclaration[35508-36870]:MethodDeclaration[35508-36870]"
    }, {
      "left" : "public static double log(final double x)",
      "right" : "public static double log(final double x)",
      "info" : "MethodDeclaration[36877-37052]:MethodDeclaration[36877-37052]"
    }, {
      "left" : "private static double log(final double x, final double[] hiPrec)",
      "right" : "private static double log(final double x, final double[] hiPrec)",
      "info" : "MethodDeclaration[37058-44192]:MethodDeclaration[37058-44192]"
    }, {
      "left" : "public static double log1p(final double x)",
      "right" : "public static double log1p(final double x)",
      "info" : "MethodDeclaration[44198-45155]:MethodDeclaration[44198-45155]"
    }, {
      "left" : "public static double log10(final double x)",
      "right" : "public static double log10(final double x)",
      "info" : "MethodDeclaration[45161-45718]:MethodDeclaration[45161-45718]"
    }, {
      "left" : "public static double pow(double x, double y)",
      "right" : "public static double pow(double x, double y)",
      "info" : "MethodDeclaration[45724-49897]:MethodDeclaration[45724-49897]"
    }, {
      "left" : "private static double[] slowLog(double xi)",
      "right" : "private static double[] slowLog(double xi)",
      "info" : "MethodDeclaration[49903-51688]:MethodDeclaration[49903-51688]"
    }, {
      "left" : "private static double slowSin(final double x, final double result[])",
      "right" : "private static double slowSin(final double x, final double result[])",
      "info" : "MethodDeclaration[51694-52825]:MethodDeclaration[51694-52825]"
    }, {
      "left" : "private static double slowCos(final double x, final double result[])",
      "right" : "private static double slowCos(final double x, final double result[])",
      "info" : "MethodDeclaration[52831-53967]:MethodDeclaration[52831-53967]"
    }, {
      "left" : "private static void buildSinCosTables()",
      "right" : "private static void buildSinCosTables()",
      "info" : "MethodDeclaration[53973-57116]:MethodDeclaration[53973-57116]"
    }, {
      "left" : "private static double polySine(final double x)",
      "right" : "private static double polySine(final double x)",
      "info" : "MethodDeclaration[57122-57639]:MethodDeclaration[57122-57639]"
    }, {
      "left" : "private static double polyCosine(double x)",
      "right" : "private static double polyCosine(double x)",
      "info" : "MethodDeclaration[57645-58109]:MethodDeclaration[57645-58109]"
    }, {
      "left" : "private static double sinQ(double xa, double xb)",
      "right" : "private static double sinQ(double xa, double xb)",
      "info" : "MethodDeclaration[58115-61373]:MethodDeclaration[58115-61373]"
    }, {
      "left" : "private static double cosQ(double xa, double xb)",
      "right" : "private static double cosQ(double xa, double xb)",
      "info" : "MethodDeclaration[61379-61967]:MethodDeclaration[61379-61967]"
    }, {
      "left" : "private static double tanQ(double xa, double xb, boolean cotanFlag)",
      "right" : "private static double tanQ(double xa, double xb, boolean cotanFlag)",
      "info" : "MethodDeclaration[61973-66491]:MethodDeclaration[61973-66491]"
    }, {
      "left" : "private static void reducePayneHanek(double x, double result[])",
      "right" : "private static void reducePayneHanek(double x, double result[])",
      "info" : "MethodDeclaration[66497-72980]:MethodDeclaration[66497-72980]"
    }, {
      "left" : "public static double sin(double x)",
      "right" : "public static double sin(double x)",
      "info" : "MethodDeclaration[72986-75664]:MethodDeclaration[72986-75664]"
    }, {
      "left" : "public static double cos(double x)",
      "right" : "public static double cos(double x)",
      "info" : "MethodDeclaration[75670-78033]:MethodDeclaration[75670-78033]"
    }, {
      "left" : "public static double tan(double x)",
      "right" : "public static double tan(double x)",
      "info" : "MethodDeclaration[78039-80983]:MethodDeclaration[78039-80983]"
    }, {
      "left" : "public static double atan(double x)",
      "right" : "public static double atan(double x)",
      "info" : "MethodDeclaration[80989-81161]:MethodDeclaration[80989-81161]"
    }, {
      "left" : "private static double atan(double xa, double xb, boolean leftPlane)",
      "right" : "private static double atan(double xa, double xb, boolean leftPlane)",
      "info" : "MethodDeclaration[81167-85733]:MethodDeclaration[81167-85733]"
    }, {
      "left" : "public static double atan2(double y, double x)",
      "right" : "public static double atan2(double y, double x)",
      "info" : "MethodDeclaration[85739-88715]:MethodDeclaration[85739-88715]"
    }, {
      "left" : "public static double asin(double x)",
      "right" : "public static double asin(double x)",
      "info" : "MethodDeclaration[88721-90328]:MethodDeclaration[88721-90328]"
    }, {
      "left" : "public static double acos(double x)",
      "right" : "public static double acos(double x)",
      "info" : "MethodDeclaration[90334-92009]:MethodDeclaration[90334-92009]"
    }, {
      "left" : "public static double cbrt(double x)",
      "right" : "public static double cbrt(double x)",
      "info" : "MethodDeclaration[92015-94708]:MethodDeclaration[92015-94708]"
    }, {
      "left" : "public static double toRadians(double x)",
      "right" : "public static double toRadians(double x)",
      "info" : "MethodDeclaration[94714-95199]:MethodDeclaration[94714-95199]"
    }, {
      "left" : "public static double toDegrees(double x)",
      "right" : "public static double toDegrees(double x)",
      "info" : "MethodDeclaration[95205-95687]:MethodDeclaration[95205-95687]"
    }, {
      "left" : "public static int abs(final int x)",
      "right" : "public static int abs(final int x)",
      "info" : "MethodDeclaration[95693-95891]:MethodDeclaration[95693-95891]"
    }, {
      "left" : "public static long abs(final long x)",
      "right" : "public static long abs(final long x)",
      "info" : "MethodDeclaration[95897-96098]:MethodDeclaration[95897-96098]"
    }, {
      "left" : "public static float abs(final float x)",
      "right" : "public static float abs(final float x)",
      "info" : "MethodDeclaration[96104-96309]:MethodDeclaration[96104-96309]"
    }, {
      "left" : "public static double abs(double x)",
      "right" : "public static double abs(double x)",
      "info" : "MethodDeclaration[96315-96515]:MethodDeclaration[96315-96515]"
    }, {
      "left" : "public static double ulp(double x)",
      "right" : "public static double ulp(double x)",
      "info" : "MethodDeclaration[96521-96809]:MethodDeclaration[96521-96809]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[96815-99144]:MethodDeclaration[96815-99144]"
    }, {
      "left" : "public static double floor(double x)",
      "right" : "public static double floor(double x)",
      "info" : "MethodDeclaration[99150-99728]:MethodDeclaration[99150-99728]"
    }, {
      "left" : "public static double ceil(double x)",
      "right" : "public static double ceil(double x)",
      "info" : "MethodDeclaration[99734-100218]:MethodDeclaration[99734-100218]"
    }, {
      "left" : "public static double rint(double x)",
      "right" : "public static double rint(double x)",
      "info" : "MethodDeclaration[100224-100823]:MethodDeclaration[100224-100823]"
    }, {
      "left" : "public static long round(double x)",
      "right" : "public static long round(double x)",
      "info" : "MethodDeclaration[100829-101045]:MethodDeclaration[100829-101045]"
    }, {
      "left" : "public static int round(final float x)",
      "right" : "public static int round(final float x)",
      "info" : "MethodDeclaration[101051-101260]:MethodDeclaration[101051-101260]"
    }, {
      "left" : "public static int min(final int a, final int b)",
      "right" : "public static int min(final int a, final int b)",
      "info" : "MethodDeclaration[101266-101520]:MethodDeclaration[101266-101520]"
    }, {
      "left" : "public static long min(final long a, final long b)",
      "right" : "public static long min(final long a, final long b)",
      "info" : "MethodDeclaration[101526-101783]:MethodDeclaration[101526-101783]"
    }, {
      "left" : "public static float min(final float a, final float b)",
      "right" : "public static float min(final float a, final float b)",
      "info" : "MethodDeclaration[101789-102084]:MethodDeclaration[101789-102084]"
    }, {
      "left" : "public static double min(final double a, final double b)",
      "right" : "public static double min(final double a, final double b)",
      "info" : "MethodDeclaration[102090-102390]:MethodDeclaration[102090-102390]"
    }, {
      "left" : "public static int max(final int a, final int b)",
      "right" : "public static int max(final int a, final int b)",
      "info" : "MethodDeclaration[102396-102650]:MethodDeclaration[102396-102650]"
    }, {
      "left" : "public static long max(final long a, final long b)",
      "right" : "public static long max(final long a, final long b)",
      "info" : "MethodDeclaration[102656-102913]:MethodDeclaration[102656-102913]"
    }, {
      "left" : "public static double max(final double a, final double b)",
      "right" : "public static double max(final double a, final double b)",
      "info" : "MethodDeclaration[103220-103520]:MethodDeclaration[103220-103520]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8021-8028]:Modifier[8021-8028]"
    }, {
      "left" : "FastMath",
      "right" : "FastMath",
      "info" : "SimpleName[8029-8037]:SimpleName[8029-8037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8040-8047]:Block[8040-8047]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8189-8195]:Modifier[8189-8195]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8196-8202]:Modifier[8196-8202]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8203-8209]:PrimitiveType[8203-8209]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[8210-8214]:SimpleName[8210-8214]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[8215-8229]:SingleVariableDeclaration[8215-8229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8231-8267]:Block[8231-8267]"
    }, {
      "left" : "return Math.sqrt(a);",
      "right" : "return Math.sqrt(a);",
      "info" : "ReturnStatement[8241-8261]:ReturnStatement[8241-8261]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8421-8427]:Modifier[8421-8427]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8428-8434]:Modifier[8428-8434]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8435-8441]:PrimitiveType[8435-8441]"
    }, {
      "left" : "cosh",
      "right" : "cosh",
      "info" : "SimpleName[8442-8446]:SimpleName[8442-8446]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[8447-8455]:SingleVariableDeclaration[8447-8455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8457-9549]:Block[8457-9549]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[8465-8506]:IfStatement[8465-8506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8477-8506]:Block[8477-8506]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[8489-8498]:ReturnStatement[8489-8498]"
    }, {
      "left" : "if (x > 20.0)",
      "right" : "if (x > 20.0)",
      "info" : "IfStatement[8514-8566]:IfStatement[8514-8566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8528-8566]:Block[8528-8566]"
    }, {
      "left" : "return exp(x)/2.0;",
      "right" : "return exp(x)/2.0;",
      "info" : "ReturnStatement[8540-8558]:ReturnStatement[8540-8558]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[8574-8626]:IfStatement[8574-8626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8587-8626]:Block[8587-8626]"
    }, {
      "left" : "return exp(-x)/2.0;",
      "right" : "return exp(-x)/2.0;",
      "info" : "ReturnStatement[8599-8618]:ReturnStatement[8599-8618]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[8634-8666]:VariableDeclarationStatement[8634-8666]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[8673-8713]:IfStatement[8673-8713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8686-8713]:Block[8686-8713]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[8698-8705]:ExpressionStatement[8698-8705]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[8720-8740]:ExpressionStatement[8720-8740]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[8748-8782]:VariableDeclarationStatement[8748-8782]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[8789-8831]:VariableDeclarationStatement[8789-8831]"
    }, {
      "left" : "double temp = ya * 1073741824.0;",
      "right" : "double temp = ya * 1073741824.0;",
      "info" : "VariableDeclarationStatement[8839-8871]:VariableDeclarationStatement[8839-8871]"
    }, {
      "left" : "double yaa = ya + temp - temp;",
      "right" : "double yaa = ya + temp - temp;",
      "info" : "VariableDeclarationStatement[8878-8908]:VariableDeclarationStatement[8878-8908]"
    }, {
      "left" : "double yab = ya - yaa;",
      "right" : "double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[8915-8937]:VariableDeclarationStatement[8915-8937]"
    }, {
      "left" : "double recip = 1.0/ya;",
      "right" : "double recip = 1.0/ya;",
      "info" : "VariableDeclarationStatement[8966-8988]:VariableDeclarationStatement[8966-8988]"
    }, {
      "left" : "temp = recip * 1073741824.0;",
      "right" : "temp = recip * 1073741824.0;",
      "info" : "ExpressionStatement[8995-9023]:ExpressionStatement[8995-9023]"
    }, {
      "left" : "double recipa = recip + temp - temp;",
      "right" : "double recipa = recip + temp - temp;",
      "info" : "VariableDeclarationStatement[9030-9066]:VariableDeclarationStatement[9030-9066]"
    }, {
      "left" : "double recipb = recip - recipa;",
      "right" : "double recipb = recip - recipa;",
      "info" : "VariableDeclarationStatement[9073-9104]:VariableDeclarationStatement[9073-9104]"
    }, {
      "left" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "right" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "info" : "ExpressionStatement[9154-9230]:ExpressionStatement[9154-9230]"
    }, {
      "left" : "recipb += -yb * recip * recip;",
      "right" : "recipb += -yb * recip * recip;",
      "info" : "ExpressionStatement[9261-9291]:ExpressionStatement[9261-9291]"
    }, {
      "left" : "temp = ya + recipa;",
      "right" : "temp = ya + recipa;",
      "info" : "ExpressionStatement[9320-9339]:ExpressionStatement[9320-9339]"
    }, {
      "left" : "yb += -(temp - ya - recipa);",
      "right" : "yb += -(temp - ya - recipa);",
      "info" : "ExpressionStatement[9346-9374]:ExpressionStatement[9346-9374]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[9381-9391]:ExpressionStatement[9381-9391]"
    }, {
      "left" : "temp = ya + recipb;",
      "right" : "temp = ya + recipb;",
      "info" : "ExpressionStatement[9398-9417]:ExpressionStatement[9398-9417]"
    }, {
      "left" : "yb += -(temp - ya - recipb);",
      "right" : "yb += -(temp - ya - recipb);",
      "info" : "ExpressionStatement[9424-9452]:ExpressionStatement[9424-9452]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[9459-9469]:ExpressionStatement[9459-9469]"
    }, {
      "left" : "double result = ya + yb;",
      "right" : "double result = ya + yb;",
      "info" : "VariableDeclarationStatement[9477-9501]:VariableDeclarationStatement[9477-9501]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[9508-9522]:ExpressionStatement[9508-9522]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[9529-9543]:ReturnStatement[9529-9543]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9699-9705]:Modifier[9699-9705]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9706-9712]:Modifier[9706-9712]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[9713-9719]:PrimitiveType[9713-9719]"
    }, {
      "left" : "sinh",
      "right" : "sinh",
      "info" : "SimpleName[9720-9724]:SimpleName[9720-9724]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[9725-9733]:SingleVariableDeclaration[9725-9733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9735-12316]:Block[9735-12316]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[9743-9766]:VariableDeclarationStatement[9743-9766]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[9773-9814]:IfStatement[9773-9814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9785-9814]:Block[9785-9814]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[9797-9806]:ReturnStatement[9797-9806]"
    }, {
      "left" : "if (x > 20.0)",
      "right" : "if (x > 20.0)",
      "info" : "IfStatement[9822-9874]:IfStatement[9822-9874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9836-9874]:Block[9836-9874]"
    }, {
      "left" : "return exp(x)/2.0;",
      "right" : "return exp(x)/2.0;",
      "info" : "ReturnStatement[9848-9866]:ReturnStatement[9848-9866]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[9882-9935]:IfStatement[9882-9935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9895-9935]:Block[9895-9935]"
    }, {
      "left" : "return -exp(-x)/2.0;",
      "right" : "return -exp(-x)/2.0;",
      "info" : "ReturnStatement[9907-9927]:ReturnStatement[9907-9927]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[9943-9984]:IfStatement[9943-9984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9955-9984]:Block[9955-9984]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[9967-9976]:ReturnStatement[9967-9976]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[9992-10057]:IfStatement[9992-10057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10005-10057]:Block[10005-10057]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[10017-10024]:ExpressionStatement[10017-10024]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[10035-10049]:ExpressionStatement[10035-10049]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[10065-10079]:VariableDeclarationStatement[10065-10079]"
    }, {
      "left" : "if (x > 0.25)",
      "right" : "if (x > 0.25)",
      "info" : "IfStatement[10087-12231]:IfStatement[10087-12231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10101-11108]:Block[10101-11108]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[10113-10145]:VariableDeclarationStatement[10113-10145]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[10156-10176]:ExpressionStatement[10156-10176]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[10188-10222]:VariableDeclarationStatement[10188-10222]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[10233-10275]:VariableDeclarationStatement[10233-10275]"
    }, {
      "left" : "double temp = ya * 1073741824.0;",
      "right" : "double temp = ya * 1073741824.0;",
      "info" : "VariableDeclarationStatement[10287-10319]:VariableDeclarationStatement[10287-10319]"
    }, {
      "left" : "double yaa = ya + temp - temp;",
      "right" : "double yaa = ya + temp - temp;",
      "info" : "VariableDeclarationStatement[10330-10360]:VariableDeclarationStatement[10330-10360]"
    }, {
      "left" : "double yab = ya - yaa;",
      "right" : "double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[10371-10393]:VariableDeclarationStatement[10371-10393]"
    }, {
      "left" : "double recip = 1.0/ya;",
      "right" : "double recip = 1.0/ya;",
      "info" : "VariableDeclarationStatement[10430-10452]:VariableDeclarationStatement[10430-10452]"
    }, {
      "left" : "temp = recip * 1073741824.0;",
      "right" : "temp = recip * 1073741824.0;",
      "info" : "ExpressionStatement[10463-10491]:ExpressionStatement[10463-10491]"
    }, {
      "left" : "double recipa = recip + temp - temp;",
      "right" : "double recipa = recip + temp - temp;",
      "info" : "VariableDeclarationStatement[10502-10538]:VariableDeclarationStatement[10502-10538]"
    }, {
      "left" : "double recipb = recip - recipa;",
      "right" : "double recipb = recip - recipa;",
      "info" : "VariableDeclarationStatement[10549-10580]:VariableDeclarationStatement[10549-10580]"
    }, {
      "left" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "right" : "recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;",
      "info" : "ExpressionStatement[10638-10714]:ExpressionStatement[10638-10714]"
    }, {
      "left" : "recipb += -yb * recip * recip;",
      "right" : "recipb += -yb * recip * recip;",
      "info" : "ExpressionStatement[10753-10783]:ExpressionStatement[10753-10783]"
    }, {
      "left" : "recipa = -recipa;",
      "right" : "recipa = -recipa;",
      "info" : "ExpressionStatement[10795-10812]:ExpressionStatement[10795-10812]"
    }, {
      "left" : "recipb = -recipb;",
      "right" : "recipb = -recipb;",
      "info" : "ExpressionStatement[10823-10840]:ExpressionStatement[10823-10840]"
    }, {
      "left" : "temp = ya + recipa;",
      "right" : "temp = ya + recipa;",
      "info" : "ExpressionStatement[10877-10896]:ExpressionStatement[10877-10896]"
    }, {
      "left" : "yb += -(temp - ya - recipa);",
      "right" : "yb += -(temp - ya - recipa);",
      "info" : "ExpressionStatement[10907-10935]:ExpressionStatement[10907-10935]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[10946-10956]:ExpressionStatement[10946-10956]"
    }, {
      "left" : "temp = ya + recipb;",
      "right" : "temp = ya + recipb;",
      "info" : "ExpressionStatement[10967-10986]:ExpressionStatement[10967-10986]"
    }, {
      "left" : "yb += -(temp - ya - recipb);",
      "right" : "yb += -(temp - ya - recipb);",
      "info" : "ExpressionStatement[10997-11025]:ExpressionStatement[10997-11025]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[11036-11046]:ExpressionStatement[11036-11046]"
    }, {
      "left" : "result = ya + yb;",
      "right" : "result = ya + yb;",
      "info" : "ExpressionStatement[11058-11075]:ExpressionStatement[11058-11075]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[11086-11100]:ExpressionStatement[11086-11100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11120-12231]:Block[11120-12231]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[11132-11164]:VariableDeclarationStatement[11132-11164]"
    }, {
      "left" : "expm1(x, hiPrec);",
      "right" : "expm1(x, hiPrec);",
      "info" : "ExpressionStatement[11175-11192]:ExpressionStatement[11175-11192]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[11204-11238]:VariableDeclarationStatement[11204-11238]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[11249-11291]:VariableDeclarationStatement[11249-11291]"
    }, {
      "left" : "double denom = 1.0 + ya;",
      "right" : "double denom = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[11366-11390]:VariableDeclarationStatement[11366-11390]"
    }, {
      "left" : "double denomr = 1.0 / denom;",
      "right" : "double denomr = 1.0 / denom;",
      "info" : "VariableDeclarationStatement[11401-11429]:VariableDeclarationStatement[11401-11429]"
    }, {
      "left" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "right" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "info" : "VariableDeclarationStatement[11440-11481]:VariableDeclarationStatement[11440-11481]"
    }, {
      "left" : "double ratio = ya * denomr;",
      "right" : "double ratio = ya * denomr;",
      "info" : "VariableDeclarationStatement[11492-11519]:VariableDeclarationStatement[11492-11519]"
    }, {
      "left" : "double temp = ratio * 1073741824.0;",
      "right" : "double temp = ratio * 1073741824.0;",
      "info" : "VariableDeclarationStatement[11530-11565]:VariableDeclarationStatement[11530-11565]"
    }, {
      "left" : "double ra = ratio + temp - temp;",
      "right" : "double ra = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[11576-11608]:VariableDeclarationStatement[11576-11608]"
    }, {
      "left" : "double rb = ratio - ra;",
      "right" : "double rb = ratio - ra;",
      "info" : "VariableDeclarationStatement[11619-11642]:VariableDeclarationStatement[11619-11642]"
    }, {
      "left" : "temp = denom * 1073741824.0;",
      "right" : "temp = denom * 1073741824.0;",
      "info" : "ExpressionStatement[11654-11682]:ExpressionStatement[11654-11682]"
    }, {
      "left" : "double za = denom + temp - temp;",
      "right" : "double za = denom + temp - temp;",
      "info" : "VariableDeclarationStatement[11693-11725]:VariableDeclarationStatement[11693-11725]"
    }, {
      "left" : "double zb = denom - za;",
      "right" : "double zb = denom - za;",
      "info" : "VariableDeclarationStatement[11736-11759]:VariableDeclarationStatement[11736-11759]"
    }, {
      "left" : "rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;",
      "right" : "rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;",
      "info" : "ExpressionStatement[11771-11823]:ExpressionStatement[11771-11823]"
    }, {
      "left" : "rb += yb*denomr;",
      "right" : "rb += yb*denomr;",
      "info" : "ExpressionStatement[11862-11878]:ExpressionStatement[11862-11878]"
    }, {
      "left" : "rb += -ya * denomb * denomr * denomr;",
      "right" : "rb += -ya * denomb * denomr * denomr;",
      "info" : "ExpressionStatement[11925-11962]:ExpressionStatement[11925-11962]"
    }, {
      "left" : "temp = ya + ra;",
      "right" : "temp = ya + ra;",
      "info" : "ExpressionStatement[12016-12031]:ExpressionStatement[12016-12031]"
    }, {
      "left" : "yb += -(temp - ya - ra);",
      "right" : "yb += -(temp - ya - ra);",
      "info" : "ExpressionStatement[12042-12066]:ExpressionStatement[12042-12066]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[12077-12087]:ExpressionStatement[12077-12087]"
    }, {
      "left" : "temp = ya + rb;",
      "right" : "temp = ya + rb;",
      "info" : "ExpressionStatement[12098-12113]:ExpressionStatement[12098-12113]"
    }, {
      "left" : "yb += -(temp - ya - rb);",
      "right" : "yb += -(temp - ya - rb);",
      "info" : "ExpressionStatement[12124-12148]:ExpressionStatement[12124-12148]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[12159-12169]:ExpressionStatement[12159-12169]"
    }, {
      "left" : "result = ya + yb;",
      "right" : "result = ya + yb;",
      "info" : "ExpressionStatement[12181-12198]:ExpressionStatement[12181-12198]"
    }, {
      "left" : "result *= 0.5;",
      "right" : "result *= 0.5;",
      "info" : "ExpressionStatement[12209-12223]:ExpressionStatement[12209-12223]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[12239-12288]:IfStatement[12239-12288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12251-12288]:Block[12251-12288]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[12263-12280]:ExpressionStatement[12263-12280]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12296-12310]:ReturnStatement[12296-12310]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12472-12478]:Modifier[12472-12478]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12479-12485]:Modifier[12479-12485]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[12486-12492]:PrimitiveType[12486-12492]"
    }, {
      "left" : "tanh",
      "right" : "tanh",
      "info" : "SimpleName[12493-12497]:SimpleName[12493-12497]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[12498-12506]:SingleVariableDeclaration[12498-12506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12508-15254]:Block[12508-15254]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[12516-12539]:VariableDeclarationStatement[12516-12539]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[12547-12588]:IfStatement[12547-12588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12559-12588]:Block[12559-12588]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[12571-12580]:ReturnStatement[12571-12580]"
    }, {
      "left" : "if (x > 20.0)",
      "right" : "if (x > 20.0)",
      "info" : "IfStatement[12596-12641]:IfStatement[12596-12641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12610-12641]:Block[12610-12641]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[12622-12633]:ReturnStatement[12622-12633]"
    }, {
      "left" : "if (x < -20)",
      "right" : "if (x < -20)",
      "info" : "IfStatement[12649-12694]:IfStatement[12649-12694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12662-12694]:Block[12662-12694]"
    }, {
      "left" : "return -1.0;",
      "right" : "return -1.0;",
      "info" : "ReturnStatement[12674-12686]:ReturnStatement[12674-12686]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[12702-12743]:IfStatement[12702-12743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12714-12743]:Block[12714-12743]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[12726-12735]:ReturnStatement[12726-12735]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[12751-12816]:IfStatement[12751-12816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12764-12816]:Block[12764-12816]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[12776-12783]:ExpressionStatement[12776-12783]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[12794-12808]:ExpressionStatement[12794-12808]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[12824-12838]:VariableDeclarationStatement[12824-12838]"
    }, {
      "left" : "if (x >= 0.5)",
      "right" : "if (x >= 0.5)",
      "info" : "IfStatement[12845-15169]:IfStatement[12845-15169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12859-14062]:Block[12859-14062]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[12871-12903]:VariableDeclarationStatement[12871-12903]"
    }, {
      "left" : "exp(x*2.0, 0.0, hiPrec);",
      "right" : "exp(x*2.0, 0.0, hiPrec);",
      "info" : "ExpressionStatement[12967-12991]:ExpressionStatement[12967-12991]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[13003-13037]:VariableDeclarationStatement[13003-13037]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[13048-13090]:VariableDeclarationStatement[13048-13090]"
    }, {
      "left" : "double na = -1.0 + ya;",
      "right" : "double na = -1.0 + ya;",
      "info" : "VariableDeclarationStatement[13128-13150]:VariableDeclarationStatement[13128-13150]"
    }, {
      "left" : "double nb = -(na + 1.0 - ya);",
      "right" : "double nb = -(na + 1.0 - ya);",
      "info" : "VariableDeclarationStatement[13161-13190]:VariableDeclarationStatement[13161-13190]"
    }, {
      "left" : "double temp = na + yb;",
      "right" : "double temp = na + yb;",
      "info" : "VariableDeclarationStatement[13201-13223]:VariableDeclarationStatement[13201-13223]"
    }, {
      "left" : "nb += -(temp - na - yb);",
      "right" : "nb += -(temp - na - yb);",
      "info" : "ExpressionStatement[13234-13258]:ExpressionStatement[13234-13258]"
    }, {
      "left" : "na = temp;",
      "right" : "na = temp;",
      "info" : "ExpressionStatement[13269-13279]:ExpressionStatement[13269-13279]"
    }, {
      "left" : "double da = 1.0 + ya;",
      "right" : "double da = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[13319-13340]:VariableDeclarationStatement[13319-13340]"
    }, {
      "left" : "double db = -(da - 1.0 - ya);",
      "right" : "double db = -(da - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[13351-13380]:VariableDeclarationStatement[13351-13380]"
    }, {
      "left" : "temp = da + yb;",
      "right" : "temp = da + yb;",
      "info" : "ExpressionStatement[13391-13406]:ExpressionStatement[13391-13406]"
    }, {
      "left" : "db += -(temp - da - yb);",
      "right" : "db += -(temp - da - yb);",
      "info" : "ExpressionStatement[13417-13441]:ExpressionStatement[13417-13441]"
    }, {
      "left" : "da = temp;",
      "right" : "da = temp;",
      "info" : "ExpressionStatement[13452-13462]:ExpressionStatement[13452-13462]"
    }, {
      "left" : "temp = da * 1073741824.0;",
      "right" : "temp = da * 1073741824.0;",
      "info" : "ExpressionStatement[13474-13499]:ExpressionStatement[13474-13499]"
    }, {
      "left" : "double daa = da + temp - temp;",
      "right" : "double daa = da + temp - temp;",
      "info" : "VariableDeclarationStatement[13510-13540]:VariableDeclarationStatement[13510-13540]"
    }, {
      "left" : "double dab = da - daa;",
      "right" : "double dab = da - daa;",
      "info" : "VariableDeclarationStatement[13551-13573]:VariableDeclarationStatement[13551-13573]"
    }, {
      "left" : "double ratio = na/da;",
      "right" : "double ratio = na/da;",
      "info" : "VariableDeclarationStatement[13612-13633]:VariableDeclarationStatement[13612-13633]"
    }, {
      "left" : "temp = ratio * 1073741824.0;",
      "right" : "temp = ratio * 1073741824.0;",
      "info" : "ExpressionStatement[13644-13672]:ExpressionStatement[13644-13672]"
    }, {
      "left" : "double ratioa = ratio + temp - temp;",
      "right" : "double ratioa = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[13683-13719]:VariableDeclarationStatement[13683-13719]"
    }, {
      "left" : "double ratiob = ratio - ratioa;",
      "right" : "double ratiob = ratio - ratioa;",
      "info" : "VariableDeclarationStatement[13730-13761]:VariableDeclarationStatement[13730-13761]"
    }, {
      "left" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "right" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "info" : "ExpressionStatement[13819-13891]:ExpressionStatement[13819-13891]"
    }, {
      "left" : "ratiob += nb / da;",
      "right" : "ratiob += nb / da;",
      "info" : "ExpressionStatement[13931-13949]:ExpressionStatement[13931-13949]"
    }, {
      "left" : "ratiob += -db * na / da / da;",
      "right" : "ratiob += -db * na / da / da;",
      "info" : "ExpressionStatement[13988-14017]:ExpressionStatement[13988-14017]"
    }, {
      "left" : "result = ratioa + ratiob;",
      "right" : "result = ratioa + ratiob;",
      "info" : "ExpressionStatement[14029-14054]:ExpressionStatement[14029-14054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14074-15169]:Block[14074-15169]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[14086-14118]:VariableDeclarationStatement[14086-14118]"
    }, {
      "left" : "expm1(x*2.0, hiPrec);",
      "right" : "expm1(x*2.0, hiPrec);",
      "info" : "ExpressionStatement[14180-14201]:ExpressionStatement[14180-14201]"
    }, {
      "left" : "double ya = hiPrec[0] + hiPrec[1];",
      "right" : "double ya = hiPrec[0] + hiPrec[1];",
      "info" : "VariableDeclarationStatement[14213-14247]:VariableDeclarationStatement[14213-14247]"
    }, {
      "left" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "right" : "double yb = -(ya - hiPrec[0] - hiPrec[1]);",
      "info" : "VariableDeclarationStatement[14258-14300]:VariableDeclarationStatement[14258-14300]"
    }, {
      "left" : "double na = ya;",
      "right" : "double na = ya;",
      "info" : "VariableDeclarationStatement[14338-14353]:VariableDeclarationStatement[14338-14353]"
    }, {
      "left" : "double nb = yb;",
      "right" : "double nb = yb;",
      "info" : "VariableDeclarationStatement[14364-14379]:VariableDeclarationStatement[14364-14379]"
    }, {
      "left" : "double da = 2.0 + ya;",
      "right" : "double da = 2.0 + ya;",
      "info" : "VariableDeclarationStatement[14419-14440]:VariableDeclarationStatement[14419-14440]"
    }, {
      "left" : "double db = -(da - 2.0 - ya);",
      "right" : "double db = -(da - 2.0 - ya);",
      "info" : "VariableDeclarationStatement[14451-14480]:VariableDeclarationStatement[14451-14480]"
    }, {
      "left" : "double temp = da + yb;",
      "right" : "double temp = da + yb;",
      "info" : "VariableDeclarationStatement[14491-14513]:VariableDeclarationStatement[14491-14513]"
    }, {
      "left" : "db += -(temp - da - yb);",
      "right" : "db += -(temp - da - yb);",
      "info" : "ExpressionStatement[14524-14548]:ExpressionStatement[14524-14548]"
    }, {
      "left" : "da = temp;",
      "right" : "da = temp;",
      "info" : "ExpressionStatement[14559-14569]:ExpressionStatement[14559-14569]"
    }, {
      "left" : "temp = da * 1073741824.0;",
      "right" : "temp = da * 1073741824.0;",
      "info" : "ExpressionStatement[14581-14606]:ExpressionStatement[14581-14606]"
    }, {
      "left" : "double daa = da + temp - temp;",
      "right" : "double daa = da + temp - temp;",
      "info" : "VariableDeclarationStatement[14617-14647]:VariableDeclarationStatement[14617-14647]"
    }, {
      "left" : "double dab = da - daa;",
      "right" : "double dab = da - daa;",
      "info" : "VariableDeclarationStatement[14658-14680]:VariableDeclarationStatement[14658-14680]"
    }, {
      "left" : "double ratio = na/da;",
      "right" : "double ratio = na/da;",
      "info" : "VariableDeclarationStatement[14719-14740]:VariableDeclarationStatement[14719-14740]"
    }, {
      "left" : "temp = ratio * 1073741824.0;",
      "right" : "temp = ratio * 1073741824.0;",
      "info" : "ExpressionStatement[14751-14779]:ExpressionStatement[14751-14779]"
    }, {
      "left" : "double ratioa = ratio + temp - temp;",
      "right" : "double ratioa = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[14790-14826]:VariableDeclarationStatement[14790-14826]"
    }, {
      "left" : "double ratiob = ratio - ratioa;",
      "right" : "double ratiob = ratio - ratioa;",
      "info" : "VariableDeclarationStatement[14837-14868]:VariableDeclarationStatement[14837-14868]"
    }, {
      "left" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "right" : "ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;",
      "info" : "ExpressionStatement[14926-14998]:ExpressionStatement[14926-14998]"
    }, {
      "left" : "ratiob += nb / da;",
      "right" : "ratiob += nb / da;",
      "info" : "ExpressionStatement[15038-15056]:ExpressionStatement[15038-15056]"
    }, {
      "left" : "ratiob += -db * na / da / da;",
      "right" : "ratiob += -db * na / da / da;",
      "info" : "ExpressionStatement[15095-15124]:ExpressionStatement[15095-15124]"
    }, {
      "left" : "result = ratioa + ratiob;",
      "right" : "result = ratioa + ratiob;",
      "info" : "ExpressionStatement[15136-15161]:ExpressionStatement[15136-15161]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[15177-15226]:IfStatement[15177-15226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15189-15226]:Block[15189-15226]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[15201-15218]:ExpressionStatement[15201-15218]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15234-15248]:ReturnStatement[15234-15248]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15424-15430]:Modifier[15424-15430]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15431-15437]:Modifier[15431-15437]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[15438-15444]:PrimitiveType[15438-15444]"
    }, {
      "left" : "acosh",
      "right" : "acosh",
      "info" : "SimpleName[15445-15450]:SimpleName[15445-15450]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[15451-15465]:SingleVariableDeclaration[15451-15465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15467-15533]:Block[15467-15533]"
    }, {
      "left" : "return FastMath.log(a + FastMath.sqrt(a * a - 1));",
      "right" : "return FastMath.log(a + FastMath.sqrt(a * a - 1));",
      "info" : "ReturnStatement[15477-15527]:ReturnStatement[15477-15527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15699-15705]:Modifier[15699-15705]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15706-15712]:Modifier[15706-15712]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[15713-15719]:PrimitiveType[15713-15719]"
    }, {
      "left" : "asinh",
      "right" : "asinh",
      "info" : "SimpleName[15720-15725]:SimpleName[15720-15725]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[15726-15734]:SingleVariableDeclaration[15726-15734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15736-16955]:Block[15736-16955]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[15747-15772]:VariableDeclarationStatement[15747-15772]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[15781-15852]:IfStatement[15781-15852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15792-15852]:Block[15792-15852]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[15806-15822]:ExpressionStatement[15806-15822]"
    }, {
      "left" : "a = -a;",
      "right" : "a = -a;",
      "info" : "ExpressionStatement[15835-15842]:ExpressionStatement[15835-15842]"
    }, {
      "left" : "double absAsinh;",
      "right" : "double absAsinh;",
      "info" : "VariableDeclarationStatement[15862-15878]:VariableDeclarationStatement[15862-15878]"
    }, {
      "left" : "if (a > 0.167)",
      "right" : "if (a > 0.167)",
      "info" : "IfStatement[15887-16899]:IfStatement[15887-16899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15902-15980]:Block[15902-15980]"
    }, {
      "left" : "absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);",
      "right" : "absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);",
      "info" : "ExpressionStatement[15916-15970]:ExpressionStatement[15916-15970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15986-16899]:Block[15986-16899]"
    }, {
      "left" : "final double a2 = a * a;",
      "right" : "final double a2 = a * a;",
      "info" : "VariableDeclarationStatement[16000-16024]:VariableDeclarationStatement[16000-16024]"
    }, {
      "left" : "if (a > 0.097)",
      "right" : "if (a > 0.097)",
      "info" : "IfStatement[16037-16889]:IfStatement[16037-16889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16052-16348]:Block[16052-16348]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);",
      "right" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);",
      "info" : "ExpressionStatement[16070-16334]:ExpressionStatement[16070-16334]"
    }, {
      "left" : "if (a > 0.036)",
      "right" : "if (a > 0.036)",
      "info" : "IfStatement[16354-16889]:IfStatement[16354-16889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16369-16597]:Block[16369-16597]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);",
      "right" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);",
      "info" : "ExpressionStatement[16387-16583]:ExpressionStatement[16387-16583]"
    }, {
      "left" : "if (a > 0.0036)",
      "right" : "if (a > 0.0036)",
      "info" : "IfStatement[16603-16889]:IfStatement[16603-16889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16619-16780]:Block[16619-16780]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);",
      "right" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);",
      "info" : "ExpressionStatement[16637-16766]:ExpressionStatement[16637-16766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16786-16889]:Block[16786-16889]"
    }, {
      "left" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);",
      "right" : "absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);",
      "info" : "ExpressionStatement[16804-16875]:ExpressionStatement[16804-16875]"
    }, {
      "left" : "return negative ? -absAsinh : absAsinh;",
      "right" : "return negative ? -absAsinh : absAsinh;",
      "info" : "ReturnStatement[16909-16948]:ReturnStatement[16909-16948]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17127-17133]:Modifier[17127-17133]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17134-17140]:Modifier[17134-17140]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[17141-17147]:PrimitiveType[17141-17147]"
    }, {
      "left" : "atanh",
      "right" : "atanh",
      "info" : "SimpleName[17148-17153]:SimpleName[17148-17153]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[17154-17162]:SingleVariableDeclaration[17154-17162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17164-18178]:Block[17164-18178]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[17175-17200]:VariableDeclarationStatement[17175-17200]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[17209-17280]:IfStatement[17209-17280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17220-17280]:Block[17220-17280]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[17234-17250]:ExpressionStatement[17234-17250]"
    }, {
      "left" : "a = -a;",
      "right" : "a = -a;",
      "info" : "ExpressionStatement[17263-17270]:ExpressionStatement[17263-17270]"
    }, {
      "left" : "double absAtanh;",
      "right" : "double absAtanh;",
      "info" : "VariableDeclarationStatement[17290-17306]:VariableDeclarationStatement[17290-17306]"
    }, {
      "left" : "if (a > 0.15)",
      "right" : "if (a > 0.15)",
      "info" : "IfStatement[17315-18122]:IfStatement[17315-18122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17329-17402]:Block[17329-17402]"
    }, {
      "left" : "absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));",
      "right" : "absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));",
      "info" : "ExpressionStatement[17343-17392]:ExpressionStatement[17343-17392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17408-18122]:Block[17408-18122]"
    }, {
      "left" : "final double a2 = a * a;",
      "right" : "final double a2 = a * a;",
      "info" : "VariableDeclarationStatement[17422-17446]:VariableDeclarationStatement[17422-17446]"
    }, {
      "left" : "if (a > 0.087)",
      "right" : "if (a > 0.087)",
      "info" : "IfStatement[17459-18112]:IfStatement[17459-18112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17474-17681]:Block[17474-17681]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));",
      "right" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));",
      "info" : "ExpressionStatement[17492-17667]:ExpressionStatement[17492-17667]"
    }, {
      "left" : "if (a > 0.031)",
      "right" : "if (a > 0.031)",
      "info" : "IfStatement[17687-18112]:IfStatement[17687-18112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17702-17869]:Block[17702-17869]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));",
      "right" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));",
      "info" : "ExpressionStatement[17720-17855]:ExpressionStatement[17720-17855]"
    }, {
      "left" : "if (a > 0.003)",
      "right" : "if (a > 0.003)",
      "info" : "IfStatement[17875-18112]:IfStatement[17875-18112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17890-18017]:Block[17890-18017]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));",
      "right" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));",
      "info" : "ExpressionStatement[17908-18003]:ExpressionStatement[17908-18003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18023-18112]:Block[18023-18112]"
    }, {
      "left" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));",
      "right" : "absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));",
      "info" : "ExpressionStatement[18041-18098]:ExpressionStatement[18041-18098]"
    }, {
      "left" : "return negative ? -absAtanh : absAtanh;",
      "right" : "return negative ? -absAtanh : absAtanh;",
      "info" : "ReturnStatement[18132-18171]:ReturnStatement[18132-18171]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18424-18430]:Modifier[18424-18430]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18431-18437]:Modifier[18431-18437]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[18438-18444]:PrimitiveType[18438-18444]"
    }, {
      "left" : "signum",
      "right" : "signum",
      "info" : "SimpleName[18445-18451]:SimpleName[18445-18451]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[18452-18466]:SingleVariableDeclaration[18452-18466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18468-18567]:Block[18468-18567]"
    }, {
      "left" : "return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));",
      "right" : "return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));",
      "info" : "ReturnStatement[18478-18561]:ReturnStatement[18478-18561]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18751-18757]:Modifier[18751-18757]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18758-18764]:Modifier[18758-18764]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[18765-18771]:PrimitiveType[18765-18771]"
    }, {
      "left" : "nextUp",
      "right" : "nextUp",
      "info" : "SimpleName[18772-18778]:SimpleName[18772-18778]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[18779-18793]:SingleVariableDeclaration[18779-18793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18795-18857]:Block[18795-18857]"
    }, {
      "left" : "return nextAfter(a, Double.POSITIVE_INFINITY);",
      "right" : "return nextAfter(a, Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[18805-18851]:ReturnStatement[18805-18851]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18982-18988]:Modifier[18982-18988]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18989-18995]:Modifier[18989-18995]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[18996-19002]:PrimitiveType[18996-19002]"
    }, {
      "left" : "random",
      "right" : "random",
      "info" : "SimpleName[19003-19009]:SimpleName[19003-19009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19012-19049]:Block[19012-19049]"
    }, {
      "left" : "return Math.random();",
      "right" : "return Math.random();",
      "info" : "ReturnStatement[19022-19043]:ReturnStatement[19022-19043]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19824-19830]:Modifier[19824-19830]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19831-19837]:Modifier[19831-19837]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[19838-19844]:PrimitiveType[19838-19844]"
    }, {
      "left" : "exp",
      "right" : "exp",
      "info" : "SimpleName[19845-19848]:SimpleName[19845-19848]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[19849-19857]:SingleVariableDeclaration[19849-19857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19859-19900]:Block[19859-19900]"
    }, {
      "left" : "return exp(x, 0.0, null);",
      "right" : "return exp(x, 0.0, null);",
      "info" : "ReturnStatement[19869-19894]:ReturnStatement[19869-19894]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20206-20213]:Modifier[20206-20213]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20214-20220]:Modifier[20214-20220]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[20221-20227]:PrimitiveType[20221-20227]"
    }, {
      "left" : "exp",
      "right" : "exp",
      "info" : "SimpleName[20228-20231]:SimpleName[20228-20231]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[20232-20240]:SingleVariableDeclaration[20232-20240]"
    }, {
      "left" : "double extra",
      "right" : "double extra",
      "info" : "SingleVariableDeclaration[20242-20254]:SingleVariableDeclaration[20242-20254]"
    }, {
      "left" : "double[] hiPrec",
      "right" : "double[] hiPrec",
      "info" : "SingleVariableDeclaration[20256-20271]:SingleVariableDeclaration[20256-20271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20273-24553]:Block[20273-24553]"
    }, {
      "left" : "double intPartA;",
      "right" : "double intPartA;",
      "info" : "VariableDeclarationStatement[20283-20299]:VariableDeclarationStatement[20283-20299]"
    }, {
      "left" : "double intPartB;",
      "right" : "double intPartB;",
      "info" : "VariableDeclarationStatement[20308-20324]:VariableDeclarationStatement[20308-20324]"
    }, {
      "left" : "int intVal;",
      "right" : "int intVal;",
      "info" : "VariableDeclarationStatement[20333-20344]:VariableDeclarationStatement[20333-20344]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[20497-22124]:IfStatement[20497-22124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20510-21725]:Block[20510-21725]"
    }, {
      "left" : "intVal = (int) -x;",
      "right" : "intVal = (int) -x;",
      "info" : "ExpressionStatement[20524-20542]:ExpressionStatement[20524-20542]"
    }, {
      "left" : "if (intVal > 746)",
      "right" : "if (intVal > 746)",
      "info" : "IfStatement[20556-20747]:IfStatement[20556-20747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20574-20747]:Block[20574-20747]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[20592-20705]:IfStatement[20592-20705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20612-20705]:Block[20612-20705]"
    }, {
      "left" : "hiPrec[0] = 0.0;",
      "right" : "hiPrec[0] = 0.0;",
      "info" : "ExpressionStatement[20634-20650]:ExpressionStatement[20634-20650]"
    }, {
      "left" : "hiPrec[1] = 0.0;",
      "right" : "hiPrec[1] = 0.0;",
      "info" : "ExpressionStatement[20671-20687]:ExpressionStatement[20671-20687]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[20722-20733]:ReturnStatement[20722-20733]"
    }, {
      "left" : "if (intVal > 709)",
      "right" : "if (intVal > 709)",
      "info" : "IfStatement[20761-21146]:IfStatement[20761-21146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20779-21146]:Block[20779-21146]"
    }, {
      "left" : "final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",
      "right" : "final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",
      "info" : "VariableDeclarationStatement[20856-20935]:VariableDeclarationStatement[20856-20935]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[20952-21101]:IfStatement[20952-21101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20972-21101]:Block[20972-21101]"
    }, {
      "left" : "hiPrec[0] /= 285040095144011776.0;",
      "right" : "hiPrec[0] /= 285040095144011776.0;",
      "info" : "ExpressionStatement[20994-21028]:ExpressionStatement[20994-21028]"
    }, {
      "left" : "hiPrec[1] /= 285040095144011776.0;",
      "right" : "hiPrec[1] /= 285040095144011776.0;",
      "info" : "ExpressionStatement[21049-21083]:ExpressionStatement[21049-21083]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[21118-21132]:ReturnStatement[21118-21132]"
    }, {
      "left" : "if (intVal == 709)",
      "right" : "if (intVal == 709)",
      "info" : "IfStatement[21160-21556]:IfStatement[21160-21556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21179-21556]:Block[21179-21556]"
    }, {
      "left" : "final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
      "right" : "final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",
      "info" : "VariableDeclarationStatement[21266-21345]:VariableDeclarationStatement[21266-21345]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[21362-21511]:IfStatement[21362-21511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21382-21511]:Block[21382-21511]"
    }, {
      "left" : "hiPrec[0] /= 4.455505956692756620;",
      "right" : "hiPrec[0] /= 4.455505956692756620;",
      "info" : "ExpressionStatement[21404-21438]:ExpressionStatement[21404-21438]"
    }, {
      "left" : "hiPrec[1] /= 4.455505956692756620;",
      "right" : "hiPrec[1] /= 4.455505956692756620;",
      "info" : "ExpressionStatement[21459-21493]:ExpressionStatement[21459-21493]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[21528-21542]:ReturnStatement[21528-21542]"
    }, {
      "left" : "intVal++;",
      "right" : "intVal++;",
      "info" : "ExpressionStatement[21570-21579]:ExpressionStatement[21570-21579]"
    }, {
      "left" : "intPartA = EXP_INT_TABLE_A[750-intVal];",
      "right" : "intPartA = EXP_INT_TABLE_A[750-intVal];",
      "info" : "ExpressionStatement[21593-21632]:ExpressionStatement[21593-21632]"
    }, {
      "left" : "intPartB = EXP_INT_TABLE_B[750-intVal];",
      "right" : "intPartB = EXP_INT_TABLE_B[750-intVal];",
      "info" : "ExpressionStatement[21645-21684]:ExpressionStatement[21645-21684]"
    }, {
      "left" : "intVal = -intVal;",
      "right" : "intVal = -intVal;",
      "info" : "ExpressionStatement[21698-21715]:ExpressionStatement[21698-21715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21731-22124]:Block[21731-22124]"
    }, {
      "left" : "intVal = (int) x;",
      "right" : "intVal = (int) x;",
      "info" : "ExpressionStatement[21745-21762]:ExpressionStatement[21745-21762]"
    }, {
      "left" : "if (intVal > 709)",
      "right" : "if (intVal > 709)",
      "info" : "IfStatement[21776-22009]:IfStatement[21776-22009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21794-22009]:Block[21794-22009]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[21812-21946]:IfStatement[21812-21946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21832-21946]:Block[21832-21946]"
    }, {
      "left" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[21854-21891]:ExpressionStatement[21854-21891]"
    }, {
      "left" : "hiPrec[1] = 0.0;",
      "right" : "hiPrec[1] = 0.0;",
      "info" : "ExpressionStatement[21912-21928]:ExpressionStatement[21912-21928]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[21963-21995]:ReturnStatement[21963-21995]"
    }, {
      "left" : "intPartA = EXP_INT_TABLE_A[750+intVal];",
      "right" : "intPartA = EXP_INT_TABLE_A[750+intVal];",
      "info" : "ExpressionStatement[22023-22062]:ExpressionStatement[22023-22062]"
    }, {
      "left" : "intPartB = EXP_INT_TABLE_B[750+intVal];",
      "right" : "intPartB = EXP_INT_TABLE_B[750+intVal];",
      "info" : "ExpressionStatement[22075-22114]:ExpressionStatement[22075-22114]"
    }, {
      "left" : "final int intFrac = (int) ((x - intVal) * 1024.0);",
      "right" : "final int intFrac = (int) ((x - intVal) * 1024.0);",
      "info" : "VariableDeclarationStatement[22361-22411]:VariableDeclarationStatement[22361-22411]"
    }, {
      "left" : "final double fracPartA = EXP_FRAC_TABLE_A[intFrac];",
      "right" : "final double fracPartA = EXP_FRAC_TABLE_A[intFrac];",
      "info" : "VariableDeclarationStatement[22420-22471]:VariableDeclarationStatement[22420-22471]"
    }, {
      "left" : "final double fracPartB = EXP_FRAC_TABLE_B[intFrac];",
      "right" : "final double fracPartB = EXP_FRAC_TABLE_B[intFrac];",
      "info" : "VariableDeclarationStatement[22480-22531]:VariableDeclarationStatement[22480-22531]"
    }, {
      "left" : "final double epsilon = x - (intVal + intFrac / 1024.0);",
      "right" : "final double epsilon = x - (intVal + intFrac / 1024.0);",
      "info" : "VariableDeclarationStatement[22783-22838]:VariableDeclarationStatement[22783-22838]"
    }, {
      "left" : "double z = 0.04168701738764507;",
      "right" : "double z = 0.04168701738764507;",
      "info" : "VariableDeclarationStatement[23252-23283]:VariableDeclarationStatement[23252-23283]"
    }, {
      "left" : "z = z * epsilon + 0.1666666505023083;",
      "right" : "z = z * epsilon + 0.1666666505023083;",
      "info" : "ExpressionStatement[23292-23329]:ExpressionStatement[23292-23329]"
    }, {
      "left" : "z = z * epsilon + 0.5000000000042687;",
      "right" : "z = z * epsilon + 0.5000000000042687;",
      "info" : "ExpressionStatement[23338-23375]:ExpressionStatement[23338-23375]"
    }, {
      "left" : "z = z * epsilon + 1.0;",
      "right" : "z = z * epsilon + 1.0;",
      "info" : "ExpressionStatement[23384-23406]:ExpressionStatement[23384-23406]"
    }, {
      "left" : "z = z * epsilon + -3.940510424527919E-20;",
      "right" : "z = z * epsilon + -3.940510424527919E-20;",
      "info" : "ExpressionStatement[23415-23456]:ExpressionStatement[23415-23456]"
    }, {
      "left" : "double tempA = intPartA * fracPartA;",
      "right" : "double tempA = intPartA * fracPartA;",
      "info" : "VariableDeclarationStatement[23690-23726]:VariableDeclarationStatement[23690-23726]"
    }, {
      "left" : "double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;",
      "right" : "double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;",
      "info" : "VariableDeclarationStatement[23735-23817]:VariableDeclarationStatement[23735-23817]"
    }, {
      "left" : "final double tempC = tempB + tempA;",
      "right" : "final double tempC = tempB + tempA;",
      "info" : "VariableDeclarationStatement[24095-24130]:VariableDeclarationStatement[24095-24130]"
    }, {
      "left" : "final double result;",
      "right" : "final double result;",
      "info" : "VariableDeclarationStatement[24139-24159]:VariableDeclarationStatement[24139-24159]"
    }, {
      "left" : "if (extra != 0.0)",
      "right" : "if (extra != 0.0)",
      "info" : "IfStatement[24168-24336]:IfStatement[24168-24336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24186-24273]:Block[24186-24273]"
    }, {
      "left" : "result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;",
      "right" : "result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;",
      "info" : "ExpressionStatement[24200-24263]:ExpressionStatement[24200-24263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24279-24336]:Block[24279-24336]"
    }, {
      "left" : "result = tempC*z + tempB + tempA;",
      "right" : "result = tempC*z + tempB + tempA;",
      "info" : "ExpressionStatement[24293-24326]:ExpressionStatement[24293-24326]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[24346-24523]:IfStatement[24346-24523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24366-24523]:Block[24366-24523]"
    }, {
      "left" : "hiPrec[0] = tempA;",
      "right" : "hiPrec[0] = tempA;",
      "info" : "ExpressionStatement[24424-24442]:ExpressionStatement[24424-24442]"
    }, {
      "left" : "hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;",
      "right" : "hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;",
      "info" : "ExpressionStatement[24455-24513]:ExpressionStatement[24455-24513]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24533-24547]:ReturnStatement[24533-24547]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24674-24680]:Modifier[24674-24680]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24681-24687]:Modifier[24681-24687]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[24688-24694]:PrimitiveType[24688-24694]"
    }, {
      "left" : "expm1",
      "right" : "expm1",
      "info" : "SimpleName[24695-24700]:SimpleName[24695-24700]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[24701-24709]:SingleVariableDeclaration[24701-24709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24711-24747]:Block[24711-24747]"
    }, {
      "left" : "return expm1(x, null);",
      "right" : "return expm1(x, null);",
      "info" : "ReturnStatement[24719-24741]:ReturnStatement[24719-24741]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24955-24962]:Modifier[24955-24962]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24963-24969]:Modifier[24963-24969]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[24970-24976]:PrimitiveType[24970-24976]"
    }, {
      "left" : "expm1",
      "right" : "expm1",
      "info" : "SimpleName[24977-24982]:SimpleName[24977-24982]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[24983-24991]:SingleVariableDeclaration[24983-24991]"
    }, {
      "left" : "double hiPrecOut[]",
      "right" : "double hiPrecOut[]",
      "info" : "SingleVariableDeclaration[24993-25011]:SingleVariableDeclaration[24993-25011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25013-29070]:Block[25013-29070]"
    }, {
      "left" : "if (x != x || x == 0.0)",
      "right" : "if (x != x || x == 0.0)",
      "info" : "IfStatement[25023-25095]:IfStatement[25023-25095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25047-25095]:Block[25047-25095]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[25076-25085]:ReturnStatement[25076-25085]"
    }, {
      "left" : "if (x <= -1.0 || x >= 1.0)",
      "right" : "if (x <= -1.0 || x >= 1.0)",
      "info" : "IfStatement[25105-25579]:IfStatement[25105-25579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25132-25579]:Block[25132-25579]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[25219-25251]:VariableDeclarationStatement[25219-25251]"
    }, {
      "left" : "exp(x, 0.0, hiPrec);",
      "right" : "exp(x, 0.0, hiPrec);",
      "info" : "ExpressionStatement[25264-25284]:ExpressionStatement[25264-25284]"
    }, {
      "left" : "if (x > 0.0)",
      "right" : "if (x > 0.0)",
      "info" : "IfStatement[25297-25569]:IfStatement[25297-25569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25310-25378]:Block[25310-25378]"
    }, {
      "left" : "return -1.0 + hiPrec[0] + hiPrec[1];",
      "right" : "return -1.0 + hiPrec[0] + hiPrec[1];",
      "info" : "ReturnStatement[25328-25364]:ReturnStatement[25328-25364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25384-25569]:Block[25384-25569]"
    }, {
      "left" : "final double ra = -1.0 + hiPrec[0];",
      "right" : "final double ra = -1.0 + hiPrec[0];",
      "info" : "VariableDeclarationStatement[25402-25437]:VariableDeclarationStatement[25402-25437]"
    }, {
      "left" : "double rb = -(ra + 1.0 - hiPrec[0]);",
      "right" : "double rb = -(ra + 1.0 - hiPrec[0]);",
      "info" : "VariableDeclarationStatement[25454-25490]:VariableDeclarationStatement[25454-25490]"
    }, {
      "left" : "rb += hiPrec[1];",
      "right" : "rb += hiPrec[1];",
      "info" : "ExpressionStatement[25507-25523]:ExpressionStatement[25507-25523]"
    }, {
      "left" : "return ra + rb;",
      "right" : "return ra + rb;",
      "info" : "ReturnStatement[25540-25555]:ReturnStatement[25540-25555]"
    }, {
      "left" : "double baseA;",
      "right" : "double baseA;",
      "info" : "VariableDeclarationStatement[25589-25602]:VariableDeclarationStatement[25589-25602]"
    }, {
      "left" : "double baseB;",
      "right" : "double baseB;",
      "info" : "VariableDeclarationStatement[25611-25624]:VariableDeclarationStatement[25611-25624]"
    }, {
      "left" : "double epsilon;",
      "right" : "double epsilon;",
      "info" : "VariableDeclarationStatement[25633-25648]:VariableDeclarationStatement[25633-25648]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[25657-25682]:VariableDeclarationStatement[25657-25682]"
    }, {
      "left" : "if (x < 0.0)",
      "right" : "if (x < 0.0)",
      "info" : "IfStatement[25692-25765]:IfStatement[25692-25765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25705-25765]:Block[25705-25765]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[25719-25726]:ExpressionStatement[25719-25726]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[25739-25755]:ExpressionStatement[25739-25755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25775-26230]:Block[25775-26230]"
    }, {
      "left" : "int intFrac = (int) (x * 1024.0);",
      "right" : "int intFrac = (int) (x * 1024.0);",
      "info" : "VariableDeclarationStatement[25789-25822]:VariableDeclarationStatement[25789-25822]"
    }, {
      "left" : "double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;",
      "right" : "double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;",
      "info" : "VariableDeclarationStatement[25835-25882]:VariableDeclarationStatement[25835-25882]"
    }, {
      "left" : "double tempB = EXP_FRAC_TABLE_B[intFrac];",
      "right" : "double tempB = EXP_FRAC_TABLE_B[intFrac];",
      "info" : "VariableDeclarationStatement[25895-25936]:VariableDeclarationStatement[25895-25936]"
    }, {
      "left" : "double temp = tempA + tempB;",
      "right" : "double temp = tempA + tempB;",
      "info" : "VariableDeclarationStatement[25950-25978]:VariableDeclarationStatement[25950-25978]"
    }, {
      "left" : "tempB = -(temp - tempA - tempB);",
      "right" : "tempB = -(temp - tempA - tempB);",
      "info" : "ExpressionStatement[25991-26023]:ExpressionStatement[25991-26023]"
    }, {
      "left" : "tempA = temp;",
      "right" : "tempA = temp;",
      "info" : "ExpressionStatement[26036-26049]:ExpressionStatement[26036-26049]"
    }, {
      "left" : "temp = tempA * 1073741824.0;",
      "right" : "temp = tempA * 1073741824.0;",
      "info" : "ExpressionStatement[26063-26091]:ExpressionStatement[26063-26091]"
    }, {
      "left" : "baseA = tempA + temp - temp;",
      "right" : "baseA = tempA + temp - temp;",
      "info" : "ExpressionStatement[26104-26132]:ExpressionStatement[26104-26132]"
    }, {
      "left" : "baseB = tempB + (tempA - baseA);",
      "right" : "baseB = tempB + (tempA - baseA);",
      "info" : "ExpressionStatement[26145-26177]:ExpressionStatement[26145-26177]"
    }, {
      "left" : "epsilon = x - intFrac/1024.0;",
      "right" : "epsilon = x - intFrac/1024.0;",
      "info" : "ExpressionStatement[26191-26220]:ExpressionStatement[26191-26220]"
    }, {
      "left" : "double zb = 0.008336750013465571;",
      "right" : "double zb = 0.008336750013465571;",
      "info" : "VariableDeclarationStatement[26278-26311]:VariableDeclarationStatement[26278-26311]"
    }, {
      "left" : "zb = zb * epsilon + 0.041666663879186654;",
      "right" : "zb = zb * epsilon + 0.041666663879186654;",
      "info" : "ExpressionStatement[26320-26361]:ExpressionStatement[26320-26361]"
    }, {
      "left" : "zb = zb * epsilon + 0.16666666666745392;",
      "right" : "zb = zb * epsilon + 0.16666666666745392;",
      "info" : "ExpressionStatement[26370-26410]:ExpressionStatement[26370-26410]"
    }, {
      "left" : "zb = zb * epsilon + 0.49999999999999994;",
      "right" : "zb = zb * epsilon + 0.49999999999999994;",
      "info" : "ExpressionStatement[26419-26459]:ExpressionStatement[26419-26459]"
    }, {
      "left" : "zb = zb * epsilon;",
      "right" : "zb = zb * epsilon;",
      "info" : "ExpressionStatement[26468-26486]:ExpressionStatement[26468-26486]"
    }, {
      "left" : "zb = zb * epsilon;",
      "right" : "zb = zb * epsilon;",
      "info" : "ExpressionStatement[26495-26513]:ExpressionStatement[26495-26513]"
    }, {
      "left" : "double za = epsilon;",
      "right" : "double za = epsilon;",
      "info" : "VariableDeclarationStatement[26523-26543]:VariableDeclarationStatement[26523-26543]"
    }, {
      "left" : "double temp = za + zb;",
      "right" : "double temp = za + zb;",
      "info" : "VariableDeclarationStatement[26552-26574]:VariableDeclarationStatement[26552-26574]"
    }, {
      "left" : "zb = -(temp - za - zb);",
      "right" : "zb = -(temp - za - zb);",
      "info" : "ExpressionStatement[26583-26606]:ExpressionStatement[26583-26606]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[26615-26625]:ExpressionStatement[26615-26625]"
    }, {
      "left" : "temp = za * 1073741824.0;",
      "right" : "temp = za * 1073741824.0;",
      "info" : "ExpressionStatement[26635-26660]:ExpressionStatement[26635-26660]"
    }, {
      "left" : "temp = za + temp - temp;",
      "right" : "temp = za + temp - temp;",
      "info" : "ExpressionStatement[26669-26693]:ExpressionStatement[26669-26693]"
    }, {
      "left" : "zb += za - temp;",
      "right" : "zb += za - temp;",
      "info" : "ExpressionStatement[26702-26718]:ExpressionStatement[26702-26718]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[26727-26737]:ExpressionStatement[26727-26737]"
    }, {
      "left" : "double ya = za * baseA;",
      "right" : "double ya = za * baseA;",
      "info" : "VariableDeclarationStatement[26835-26858]:VariableDeclarationStatement[26835-26858]"
    }, {
      "left" : "temp = ya + za * baseB;",
      "right" : "temp = ya + za * baseB;",
      "info" : "ExpressionStatement[26921-26944]:ExpressionStatement[26921-26944]"
    }, {
      "left" : "double yb = -(temp - ya - za * baseB);",
      "right" : "double yb = -(temp - ya - za * baseB);",
      "info" : "VariableDeclarationStatement[26953-26991]:VariableDeclarationStatement[26953-26991]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27000-27010]:ExpressionStatement[27000-27010]"
    }, {
      "left" : "temp = ya + zb * baseA;",
      "right" : "temp = ya + zb * baseA;",
      "info" : "ExpressionStatement[27020-27043]:ExpressionStatement[27020-27043]"
    }, {
      "left" : "yb += -(temp - ya - zb * baseA);",
      "right" : "yb += -(temp - ya - zb * baseA);",
      "info" : "ExpressionStatement[27052-27084]:ExpressionStatement[27052-27084]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27093-27103]:ExpressionStatement[27093-27103]"
    }, {
      "left" : "temp = ya + zb * baseB;",
      "right" : "temp = ya + zb * baseB;",
      "info" : "ExpressionStatement[27113-27136]:ExpressionStatement[27113-27136]"
    }, {
      "left" : "yb += -(temp - ya - zb*baseB);",
      "right" : "yb += -(temp - ya - zb*baseB);",
      "info" : "ExpressionStatement[27145-27175]:ExpressionStatement[27145-27175]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27184-27194]:ExpressionStatement[27184-27194]"
    }, {
      "left" : "temp = ya + baseA;",
      "right" : "temp = ya + baseA;",
      "info" : "ExpressionStatement[27268-27286]:ExpressionStatement[27268-27286]"
    }, {
      "left" : "yb += -(temp - baseA - ya);",
      "right" : "yb += -(temp - baseA - ya);",
      "info" : "ExpressionStatement[27295-27322]:ExpressionStatement[27295-27322]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27331-27341]:ExpressionStatement[27331-27341]"
    }, {
      "left" : "temp = ya + za;",
      "right" : "temp = ya + za;",
      "info" : "ExpressionStatement[27351-27366]:ExpressionStatement[27351-27366]"
    }, {
      "left" : "yb += -(temp - ya - za);",
      "right" : "yb += -(temp - ya - za);",
      "info" : "ExpressionStatement[27442-27466]:ExpressionStatement[27442-27466]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27475-27485]:ExpressionStatement[27475-27485]"
    }, {
      "left" : "temp = ya + baseB;",
      "right" : "temp = ya + baseB;",
      "info" : "ExpressionStatement[27495-27513]:ExpressionStatement[27495-27513]"
    }, {
      "left" : "yb += -(temp - ya - baseB);",
      "right" : "yb += -(temp - ya - baseB);",
      "info" : "ExpressionStatement[27598-27625]:ExpressionStatement[27598-27625]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27634-27644]:ExpressionStatement[27634-27644]"
    }, {
      "left" : "temp = ya + zb;",
      "right" : "temp = ya + zb;",
      "info" : "ExpressionStatement[27654-27669]:ExpressionStatement[27654-27669]"
    }, {
      "left" : "yb += -(temp - ya - zb);",
      "right" : "yb += -(temp - ya - zb);",
      "info" : "ExpressionStatement[27745-27769]:ExpressionStatement[27745-27769]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[27778-27788]:ExpressionStatement[27778-27788]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[27798-28933]:IfStatement[27798-28933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27812-28933]:Block[27812-28933]"
    }, {
      "left" : "double denom = 1.0 + ya;",
      "right" : "double denom = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[27891-27915]:VariableDeclarationStatement[27891-27915]"
    }, {
      "left" : "double denomr = 1.0 / denom;",
      "right" : "double denomr = 1.0 / denom;",
      "info" : "VariableDeclarationStatement[27928-27956]:VariableDeclarationStatement[27928-27956]"
    }, {
      "left" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "right" : "double denomb = -(denom - 1.0 - ya) + yb;",
      "info" : "VariableDeclarationStatement[27969-28010]:VariableDeclarationStatement[27969-28010]"
    }, {
      "left" : "double ratio = ya * denomr;",
      "right" : "double ratio = ya * denomr;",
      "info" : "VariableDeclarationStatement[28023-28050]:VariableDeclarationStatement[28023-28050]"
    }, {
      "left" : "temp = ratio * 1073741824.0;",
      "right" : "temp = ratio * 1073741824.0;",
      "info" : "ExpressionStatement[28063-28091]:ExpressionStatement[28063-28091]"
    }, {
      "left" : "final double ra = ratio + temp - temp;",
      "right" : "final double ra = ratio + temp - temp;",
      "info" : "VariableDeclarationStatement[28104-28142]:VariableDeclarationStatement[28104-28142]"
    }, {
      "left" : "double rb = ratio - ra;",
      "right" : "double rb = ratio - ra;",
      "info" : "VariableDeclarationStatement[28155-28178]:VariableDeclarationStatement[28155-28178]"
    }, {
      "left" : "temp = denom * 1073741824.0;",
      "right" : "temp = denom * 1073741824.0;",
      "info" : "ExpressionStatement[28192-28220]:ExpressionStatement[28192-28220]"
    }, {
      "left" : "za = denom + temp - temp;",
      "right" : "za = denom + temp - temp;",
      "info" : "ExpressionStatement[28233-28258]:ExpressionStatement[28233-28258]"
    }, {
      "left" : "zb = denom - za;",
      "right" : "zb = denom - za;",
      "info" : "ExpressionStatement[28271-28287]:ExpressionStatement[28271-28287]"
    }, {
      "left" : "rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;",
      "right" : "rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;",
      "info" : "ExpressionStatement[28301-28361]:ExpressionStatement[28301-28361]"
    }, {
      "left" : "rb += yb * denomr;",
      "right" : "rb += yb * denomr;",
      "info" : "ExpressionStatement[28737-28755]:ExpressionStatement[28737-28755]"
    }, {
      "left" : "rb += -ya * denomb * denomr * denomr;",
      "right" : "rb += -ya * denomb * denomr * denomr;",
      "info" : "ExpressionStatement[28802-28839]:ExpressionStatement[28802-28839]"
    }, {
      "left" : "ya = -ra;",
      "right" : "ya = -ra;",
      "info" : "ExpressionStatement[28892-28901]:ExpressionStatement[28892-28901]"
    }, {
      "left" : "yb = -rb;",
      "right" : "yb = -rb;",
      "info" : "ExpressionStatement[28914-28923]:ExpressionStatement[28914-28923]"
    }, {
      "left" : "if (hiPrecOut != null)",
      "right" : "if (hiPrecOut != null)",
      "info" : "IfStatement[28943-29039]:IfStatement[28943-29039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28966-29039]:Block[28966-29039]"
    }, {
      "left" : "hiPrecOut[0] = ya;",
      "right" : "hiPrecOut[0] = ya;",
      "info" : "ExpressionStatement[28980-28998]:ExpressionStatement[28980-28998]"
    }, {
      "left" : "hiPrecOut[1] = yb;",
      "right" : "hiPrecOut[1] = yb;",
      "info" : "ExpressionStatement[29011-29029]:ExpressionStatement[29011-29029]"
    }, {
      "left" : "return ya + yb;",
      "right" : "return ya + yb;",
      "info" : "ReturnStatement[29049-29064]:ReturnStatement[29049-29064]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29367-29374]:Modifier[29367-29374]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29375-29381]:Modifier[29375-29381]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[29382-29388]:PrimitiveType[29382-29388]"
    }, {
      "left" : "slowexp",
      "right" : "slowexp",
      "info" : "SimpleName[29389-29396]:SimpleName[29389-29396]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[29397-29411]:SingleVariableDeclaration[29397-29411]"
    }, {
      "left" : "final double result[]",
      "right" : "final double result[]",
      "info" : "SingleVariableDeclaration[29413-29434]:SingleVariableDeclaration[29413-29434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29436-30108]:Block[29436-30108]"
    }, {
      "left" : "final double xs[] = new double[2];",
      "right" : "final double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[29446-29480]:VariableDeclarationStatement[29446-29480]"
    }, {
      "left" : "final double ys[] = new double[2];",
      "right" : "final double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[29489-29523]:VariableDeclarationStatement[29489-29523]"
    }, {
      "left" : "final double facts[] = new double[2];",
      "right" : "final double facts[] = new double[2];",
      "info" : "VariableDeclarationStatement[29532-29569]:VariableDeclarationStatement[29532-29569]"
    }, {
      "left" : "final double as[] = new double[2];",
      "right" : "final double as[] = new double[2];",
      "info" : "VariableDeclarationStatement[29578-29612]:VariableDeclarationStatement[29578-29612]"
    }, {
      "left" : "split(x, xs);",
      "right" : "split(x, xs);",
      "info" : "ExpressionStatement[29621-29634]:ExpressionStatement[29621-29634]"
    }, {
      "left" : "ys[0] = ys[1] = 0.0;",
      "right" : "ys[0] = ys[1] = 0.0;",
      "info" : "ExpressionStatement[29643-29663]:ExpressionStatement[29643-29663]"
    }, {
      "left" : "for (int i = 19; i >= 0; i--)",
      "right" : "for (int i = 19; i >= 0; i--)",
      "info" : "ForStatement[29673-29968]:ForStatement[29673-29968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29703-29968]:Block[29703-29968]"
    }, {
      "left" : "splitMult(xs, ys, as);",
      "right" : "splitMult(xs, ys, as);",
      "info" : "ExpressionStatement[29717-29739]:ExpressionStatement[29717-29739]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[29752-29766]:ExpressionStatement[29752-29766]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[29779-29793]:ExpressionStatement[29779-29793]"
    }, {
      "left" : "split(FACT[i], as);",
      "right" : "split(FACT[i], as);",
      "info" : "ExpressionStatement[29807-29826]:ExpressionStatement[29807-29826]"
    }, {
      "left" : "splitReciprocal(as, facts);",
      "right" : "splitReciprocal(as, facts);",
      "info" : "ExpressionStatement[29839-29866]:ExpressionStatement[29839-29866]"
    }, {
      "left" : "splitAdd(ys, facts, as);",
      "right" : "splitAdd(ys, facts, as);",
      "info" : "ExpressionStatement[29880-29904]:ExpressionStatement[29880-29904]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[29917-29931]:ExpressionStatement[29917-29931]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[29944-29958]:ExpressionStatement[29944-29958]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[29978-30071]:IfStatement[29978-30071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29998-30071]:Block[29998-30071]"
    }, {
      "left" : "result[0] = ys[0];",
      "right" : "result[0] = ys[0];",
      "info" : "ExpressionStatement[30012-30030]:ExpressionStatement[30012-30030]"
    }, {
      "left" : "result[1] = ys[1];",
      "right" : "result[1] = ys[1];",
      "info" : "ExpressionStatement[30043-30061]:ExpressionStatement[30043-30061]"
    }, {
      "left" : "return ys[0] + ys[1];",
      "right" : "return ys[0] + ys[1];",
      "info" : "ReturnStatement[30081-30102]:ReturnStatement[30081-30102]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30345-30352]:Modifier[30345-30352]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30353-30359]:Modifier[30353-30359]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30360-30364]:PrimitiveType[30360-30364]"
    }, {
      "left" : "split",
      "right" : "split",
      "info" : "SimpleName[30365-30370]:SimpleName[30365-30370]"
    }, {
      "left" : "final double d",
      "right" : "final double d",
      "info" : "SingleVariableDeclaration[30371-30385]:SingleVariableDeclaration[30371-30385]"
    }, {
      "left" : "final double split[]",
      "right" : "final double split[]",
      "info" : "SingleVariableDeclaration[30387-30407]:SingleVariableDeclaration[30387-30407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30409-30751]:Block[30409-30751]"
    }, {
      "left" : "if (d < 8e298 && d > -8e298)",
      "right" : "if (d < 8e298 && d > -8e298)",
      "info" : "IfStatement[30419-30745]:IfStatement[30419-30745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30448-30579]:Block[30448-30579]"
    }, {
      "left" : "final double a = d * 1073741824.0;",
      "right" : "final double a = d * 1073741824.0;",
      "info" : "VariableDeclarationStatement[30462-30496]:VariableDeclarationStatement[30462-30496]"
    }, {
      "left" : "split[0] = (d + a) - a;",
      "right" : "split[0] = (d + a) - a;",
      "info" : "ExpressionStatement[30509-30532]:ExpressionStatement[30509-30532]"
    }, {
      "left" : "split[1] = d - split[0];",
      "right" : "split[1] = d - split[0];",
      "info" : "ExpressionStatement[30545-30569]:ExpressionStatement[30545-30569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30585-30745]:Block[30585-30745]"
    }, {
      "left" : "final double a = d * 9.31322574615478515625E-10;",
      "right" : "final double a = d * 9.31322574615478515625E-10;",
      "info" : "VariableDeclarationStatement[30599-30647]:VariableDeclarationStatement[30599-30647]"
    }, {
      "left" : "split[0] = (d + a - d) * 1073741824.0;",
      "right" : "split[0] = (d + a - d) * 1073741824.0;",
      "info" : "ExpressionStatement[30660-30698]:ExpressionStatement[30660-30698]"
    }, {
      "left" : "split[1] = d - split[0];",
      "right" : "split[1] = d - split[0];",
      "info" : "ExpressionStatement[30711-30735]:ExpressionStatement[30711-30735]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30871-30878]:Modifier[30871-30878]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30879-30885]:Modifier[30879-30885]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30886-30890]:PrimitiveType[30886-30890]"
    }, {
      "left" : "resplit",
      "right" : "resplit",
      "info" : "SimpleName[30891-30898]:SimpleName[30891-30898]"
    }, {
      "left" : "final double a[]",
      "right" : "final double a[]",
      "info" : "SingleVariableDeclaration[30899-30915]:SingleVariableDeclaration[30899-30915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30917-31315]:Block[30917-31315]"
    }, {
      "left" : "final double c = a[0] + a[1];",
      "right" : "final double c = a[0] + a[1];",
      "info" : "VariableDeclarationStatement[30927-30956]:VariableDeclarationStatement[30927-30956]"
    }, {
      "left" : "final double d = -(c - a[0] - a[1]);",
      "right" : "final double d = -(c - a[0] - a[1]);",
      "info" : "VariableDeclarationStatement[30965-31001]:VariableDeclarationStatement[30965-31001]"
    }, {
      "left" : "if (c < 8e298 && c > -8e298)",
      "right" : "if (c < 8e298 && c > -8e298)",
      "info" : "IfStatement[31011-31309]:IfStatement[31011-31309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31040-31157]:Block[31040-31157]"
    }, {
      "left" : "double z = c * 1073741824.0;",
      "right" : "double z = c * 1073741824.0;",
      "info" : "VariableDeclarationStatement[31054-31082]:VariableDeclarationStatement[31054-31082]"
    }, {
      "left" : "a[0] = (c + z) - z;",
      "right" : "a[0] = (c + z) - z;",
      "info" : "ExpressionStatement[31095-31114]:ExpressionStatement[31095-31114]"
    }, {
      "left" : "a[1] = c - a[0] + d;",
      "right" : "a[1] = c - a[0] + d;",
      "info" : "ExpressionStatement[31127-31147]:ExpressionStatement[31127-31147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31163-31309]:Block[31163-31309]"
    }, {
      "left" : "double z = c * 9.31322574615478515625E-10;",
      "right" : "double z = c * 9.31322574615478515625E-10;",
      "info" : "VariableDeclarationStatement[31177-31219]:VariableDeclarationStatement[31177-31219]"
    }, {
      "left" : "a[0] = (c + z - c) * 1073741824.0;",
      "right" : "a[0] = (c + z - c) * 1073741824.0;",
      "info" : "ExpressionStatement[31232-31266]:ExpressionStatement[31232-31266]"
    }, {
      "left" : "a[1] = c - a[0] + d;",
      "right" : "a[1] = c - a[0] + d;",
      "info" : "ExpressionStatement[31279-31299]:ExpressionStatement[31279-31299]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31518-31525]:Modifier[31518-31525]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31526-31532]:Modifier[31526-31532]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31533-31537]:PrimitiveType[31533-31537]"
    }, {
      "left" : "splitMult",
      "right" : "splitMult",
      "info" : "SimpleName[31538-31547]:SimpleName[31538-31547]"
    }, {
      "left" : "double a[]",
      "right" : "double a[]",
      "info" : "SingleVariableDeclaration[31548-31558]:SingleVariableDeclaration[31548-31558]"
    }, {
      "left" : "double b[]",
      "right" : "double b[]",
      "info" : "SingleVariableDeclaration[31560-31570]:SingleVariableDeclaration[31560-31570]"
    }, {
      "left" : "double ans[]",
      "right" : "double ans[]",
      "info" : "SingleVariableDeclaration[31572-31584]:SingleVariableDeclaration[31572-31584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31586-31726]:Block[31586-31726]"
    }, {
      "left" : "ans[0] = a[0] * b[0];",
      "right" : "ans[0] = a[0] * b[0];",
      "info" : "ExpressionStatement[31596-31617]:ExpressionStatement[31596-31617]"
    }, {
      "left" : "ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];",
      "right" : "ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];",
      "info" : "ExpressionStatement[31626-31675]:ExpressionStatement[31626-31675]"
    }, {
      "left" : "resplit(ans);",
      "right" : "resplit(ans);",
      "info" : "ExpressionStatement[31707-31720]:ExpressionStatement[31707-31720]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31912-31919]:Modifier[31912-31919]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31920-31926]:Modifier[31920-31926]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31927-31931]:PrimitiveType[31927-31931]"
    }, {
      "left" : "splitAdd",
      "right" : "splitAdd",
      "info" : "SimpleName[31932-31940]:SimpleName[31932-31940]"
    }, {
      "left" : "final double a[]",
      "right" : "final double a[]",
      "info" : "SingleVariableDeclaration[31941-31957]:SingleVariableDeclaration[31941-31957]"
    }, {
      "left" : "final double b[]",
      "right" : "final double b[]",
      "info" : "SingleVariableDeclaration[31959-31975]:SingleVariableDeclaration[31959-31975]"
    }, {
      "left" : "final double ans[]",
      "right" : "final double ans[]",
      "info" : "SingleVariableDeclaration[31977-31995]:SingleVariableDeclaration[31977-31995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31997-32087]:Block[31997-32087]"
    }, {
      "left" : "ans[0] = a[0] + b[0];",
      "right" : "ans[0] = a[0] + b[0];",
      "info" : "ExpressionStatement[32007-32028]:ExpressionStatement[32007-32028]"
    }, {
      "left" : "ans[1] = a[1] + b[1];",
      "right" : "ans[1] = a[1] + b[1];",
      "info" : "ExpressionStatement[32037-32058]:ExpressionStatement[32037-32058]"
    }, {
      "left" : "resplit(ans);",
      "right" : "resplit(ans);",
      "info" : "ExpressionStatement[32068-32081]:ExpressionStatement[32068-32081]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32960-32967]:Modifier[32960-32967]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32968-32974]:Modifier[32968-32974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32975-32979]:PrimitiveType[32975-32979]"
    }, {
      "left" : "splitReciprocal",
      "right" : "splitReciprocal",
      "info" : "SimpleName[32980-32995]:SimpleName[32980-32995]"
    }, {
      "left" : "final double in[]",
      "right" : "final double in[]",
      "info" : "SingleVariableDeclaration[32996-33013]:SingleVariableDeclaration[32996-33013]"
    }, {
      "left" : "final double result[]",
      "right" : "final double result[]",
      "info" : "SingleVariableDeclaration[33015-33036]:SingleVariableDeclaration[33015-33036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33038-33865]:Block[33038-33865]"
    }, {
      "left" : "final double b = 1.0/4194304.0;",
      "right" : "final double b = 1.0/4194304.0;",
      "info" : "VariableDeclarationStatement[33048-33079]:VariableDeclarationStatement[33048-33079]"
    }, {
      "left" : "final double a = 1.0 - b;",
      "right" : "final double a = 1.0 - b;",
      "info" : "VariableDeclarationStatement[33088-33113]:VariableDeclarationStatement[33088-33113]"
    }, {
      "left" : "if (in[0] == 0.0)",
      "right" : "if (in[0] == 0.0)",
      "info" : "IfStatement[33123-33204]:IfStatement[33123-33204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33141-33204]:Block[33141-33204]"
    }, {
      "left" : "in[0] = in[1];",
      "right" : "in[0] = in[1];",
      "info" : "ExpressionStatement[33155-33169]:ExpressionStatement[33155-33169]"
    }, {
      "left" : "in[1] = 0.0;",
      "right" : "in[1] = 0.0;",
      "info" : "ExpressionStatement[33182-33194]:ExpressionStatement[33182-33194]"
    }, {
      "left" : "result[0] = a / in[0];",
      "right" : "result[0] = a / in[0];",
      "info" : "ExpressionStatement[33214-33236]:ExpressionStatement[33214-33236]"
    }, {
      "left" : "result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);",
      "right" : "result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);",
      "info" : "ExpressionStatement[33245-33305]:ExpressionStatement[33245-33305]"
    }, {
      "left" : "if (result[1] != result[1])",
      "right" : "if (result[1] != result[1])",
      "info" : "IfStatement[33315-33417]:IfStatement[33315-33417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33343-33417]:Block[33343-33417]"
    }, {
      "left" : "result[1] = 0.0;",
      "right" : "result[1] = 0.0;",
      "info" : "ExpressionStatement[33391-33407]:ExpressionStatement[33391-33407]"
    }, {
      "left" : "resplit(result);",
      "right" : "resplit(result);",
      "info" : "ExpressionStatement[33449-33465]:ExpressionStatement[33449-33465]"
    }, {
      "left" : "for (int i = 0; i < 2; i++)",
      "right" : "for (int i = 0; i < 2; i++)",
      "info" : "ForStatement[33475-33859]:ForStatement[33475-33859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33503-33859]:Block[33503-33859]"
    }, {
      "left" : "double err = 1.0 - result[0] * in[0] - result[0] * in[1] -\n            result[1] * in[0] - result[1] * in[1];",
      "right" : "double err = 1.0 - result[0] * in[0] - result[0] * in[1] -\n            result[1] * in[0] - result[1] * in[1];",
      "info" : "VariableDeclarationStatement[33581-33690]:VariableDeclarationStatement[33581-33690]"
    }, {
      "left" : "err = err * (result[0] + result[1]);",
      "right" : "err = err * (result[0] + result[1]);",
      "info" : "ExpressionStatement[33737-33773]:ExpressionStatement[33737-33773]"
    }, {
      "left" : "result[1] += err;",
      "right" : "result[1] += err;",
      "info" : "ExpressionStatement[33832-33849]:ExpressionStatement[33832-33849]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34104-34111]:Modifier[34104-34111]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34112-34118]:Modifier[34112-34118]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34119-34123]:PrimitiveType[34119-34123]"
    }, {
      "left" : "quadMult",
      "right" : "quadMult",
      "info" : "SimpleName[34124-34132]:SimpleName[34124-34132]"
    }, {
      "left" : "final double a[]",
      "right" : "final double a[]",
      "info" : "SingleVariableDeclaration[34133-34149]:SingleVariableDeclaration[34133-34149]"
    }, {
      "left" : "final double b[]",
      "right" : "final double b[]",
      "info" : "SingleVariableDeclaration[34151-34167]:SingleVariableDeclaration[34151-34167]"
    }, {
      "left" : "final double result[]",
      "right" : "final double result[]",
      "info" : "SingleVariableDeclaration[34169-34190]:SingleVariableDeclaration[34169-34190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34192-35502]:Block[34192-35502]"
    }, {
      "left" : "final double xs[] = new double[2];",
      "right" : "final double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[34202-34236]:VariableDeclarationStatement[34202-34236]"
    }, {
      "left" : "final double ys[] = new double[2];",
      "right" : "final double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[34245-34279]:VariableDeclarationStatement[34245-34279]"
    }, {
      "left" : "final double zs[] = new double[2];",
      "right" : "final double zs[] = new double[2];",
      "info" : "VariableDeclarationStatement[34288-34322]:VariableDeclarationStatement[34288-34322]"
    }, {
      "left" : "split(a[0], xs);",
      "right" : "split(a[0], xs);",
      "info" : "ExpressionStatement[34358-34374]:ExpressionStatement[34358-34374]"
    }, {
      "left" : "split(b[0], ys);",
      "right" : "split(b[0], ys);",
      "info" : "ExpressionStatement[34383-34399]:ExpressionStatement[34383-34399]"
    }, {
      "left" : "splitMult(xs, ys, zs);",
      "right" : "splitMult(xs, ys, zs);",
      "info" : "ExpressionStatement[34408-34430]:ExpressionStatement[34408-34430]"
    }, {
      "left" : "result[0] = zs[0];",
      "right" : "result[0] = zs[0];",
      "info" : "ExpressionStatement[34440-34458]:ExpressionStatement[34440-34458]"
    }, {
      "left" : "result[1] = zs[1];",
      "right" : "result[1] = zs[1];",
      "info" : "ExpressionStatement[34467-34485]:ExpressionStatement[34467-34485]"
    }, {
      "left" : "split(b[1], ys);",
      "right" : "split(b[1], ys);",
      "info" : "ExpressionStatement[34521-34537]:ExpressionStatement[34521-34537]"
    }, {
      "left" : "splitMult(xs, ys, zs);",
      "right" : "splitMult(xs, ys, zs);",
      "info" : "ExpressionStatement[34546-34568]:ExpressionStatement[34546-34568]"
    }, {
      "left" : "double tmp = result[0] + zs[0];",
      "right" : "double tmp = result[0] + zs[0];",
      "info" : "VariableDeclarationStatement[34578-34609]:VariableDeclarationStatement[34578-34609]"
    }, {
      "left" : "result[1] = result[1] - (tmp - result[0] - zs[0]);",
      "right" : "result[1] = result[1] - (tmp - result[0] - zs[0]);",
      "info" : "ExpressionStatement[34618-34668]:ExpressionStatement[34618-34668]"
    }, {
      "left" : "result[0] = tmp;",
      "right" : "result[0] = tmp;",
      "info" : "ExpressionStatement[34677-34693]:ExpressionStatement[34677-34693]"
    }, {
      "left" : "tmp = result[0] + zs[1];",
      "right" : "tmp = result[0] + zs[1];",
      "info" : "ExpressionStatement[34702-34726]:ExpressionStatement[34702-34726]"
    }, {
      "left" : "result[1] = result[1] - (tmp - result[0] - zs[1]);",
      "right" : "result[1] = result[1] - (tmp - result[0] - zs[1]);",
      "info" : "ExpressionStatement[34735-34785]:ExpressionStatement[34735-34785]"
    }, {
      "left" : "result[0] = tmp;",
      "right" : "result[0] = tmp;",
      "info" : "ExpressionStatement[34794-34810]:ExpressionStatement[34794-34810]"
    }, {
      "left" : "split(a[1], xs);",
      "right" : "split(a[1], xs);",
      "info" : "ExpressionStatement[34846-34862]:ExpressionStatement[34846-34862]"
    }, {
      "left" : "split(b[0], ys);",
      "right" : "split(b[0], ys);",
      "info" : "ExpressionStatement[34871-34887]:ExpressionStatement[34871-34887]"
    }, {
      "left" : "splitMult(xs, ys, zs);",
      "right" : "splitMult(xs, ys, zs);",
      "info" : "ExpressionStatement[34896-34918]:ExpressionStatement[34896-34918]"
    }, {
      "left" : "tmp = result[0] + zs[0];",
      "right" : "tmp = result[0] + zs[0];",
      "info" : "ExpressionStatement[34928-34952]:ExpressionStatement[34928-34952]"
    }, {
      "left" : "result[1] = result[1] - (tmp - result[0] - zs[0]);",
      "right" : "result[1] = result[1] - (tmp - result[0] - zs[0]);",
      "info" : "ExpressionStatement[34961-35011]:ExpressionStatement[34961-35011]"
    }, {
      "left" : "result[0] = tmp;",
      "right" : "result[0] = tmp;",
      "info" : "ExpressionStatement[35020-35036]:ExpressionStatement[35020-35036]"
    }, {
      "left" : "tmp = result[0] + zs[1];",
      "right" : "tmp = result[0] + zs[1];",
      "info" : "ExpressionStatement[35045-35069]:ExpressionStatement[35045-35069]"
    }, {
      "left" : "result[1] = result[1] - (tmp - result[0] - zs[1]);",
      "right" : "result[1] = result[1] - (tmp - result[0] - zs[1]);",
      "info" : "ExpressionStatement[35078-35128]:ExpressionStatement[35078-35128]"
    }, {
      "left" : "result[0] = tmp;",
      "right" : "result[0] = tmp;",
      "info" : "ExpressionStatement[35137-35153]:ExpressionStatement[35137-35153]"
    }, {
      "left" : "split(a[1], xs);",
      "right" : "split(a[1], xs);",
      "info" : "ExpressionStatement[35189-35205]:ExpressionStatement[35189-35205]"
    }, {
      "left" : "split(b[1], ys);",
      "right" : "split(b[1], ys);",
      "info" : "ExpressionStatement[35214-35230]:ExpressionStatement[35214-35230]"
    }, {
      "left" : "splitMult(xs, ys, zs);",
      "right" : "splitMult(xs, ys, zs);",
      "info" : "ExpressionStatement[35239-35261]:ExpressionStatement[35239-35261]"
    }, {
      "left" : "tmp = result[0] + zs[0];",
      "right" : "tmp = result[0] + zs[0];",
      "info" : "ExpressionStatement[35271-35295]:ExpressionStatement[35271-35295]"
    }, {
      "left" : "result[1] = result[1] - (tmp - result[0] - zs[0]);",
      "right" : "result[1] = result[1] - (tmp - result[0] - zs[0]);",
      "info" : "ExpressionStatement[35304-35354]:ExpressionStatement[35304-35354]"
    }, {
      "left" : "result[0] = tmp;",
      "right" : "result[0] = tmp;",
      "info" : "ExpressionStatement[35363-35379]:ExpressionStatement[35363-35379]"
    }, {
      "left" : "tmp = result[0] + zs[1];",
      "right" : "tmp = result[0] + zs[1];",
      "info" : "ExpressionStatement[35388-35412]:ExpressionStatement[35388-35412]"
    }, {
      "left" : "result[1] = result[1] - (tmp - result[0] - zs[1]);",
      "right" : "result[1] = result[1] - (tmp - result[0] - zs[1]);",
      "info" : "ExpressionStatement[35421-35471]:ExpressionStatement[35421-35471]"
    }, {
      "left" : "result[0] = tmp;",
      "right" : "result[0] = tmp;",
      "info" : "ExpressionStatement[35480-35496]:ExpressionStatement[35480-35496]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35789-35796]:Modifier[35789-35796]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35797-35803]:Modifier[35797-35803]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[35804-35810]:PrimitiveType[35804-35810]"
    }, {
      "left" : "expint",
      "right" : "expint",
      "info" : "SimpleName[35811-35817]:SimpleName[35811-35817]"
    }, {
      "left" : "int p",
      "right" : "int p",
      "info" : "SingleVariableDeclaration[35818-35823]:SingleVariableDeclaration[35818-35823]"
    }, {
      "left" : "final double result[]",
      "right" : "final double result[]",
      "info" : "SingleVariableDeclaration[35825-35846]:SingleVariableDeclaration[35825-35846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35848-36870]:Block[35848-36870]"
    }, {
      "left" : "final double xs[] = new double[2];",
      "right" : "final double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[35884-35918]:VariableDeclarationStatement[35884-35918]"
    }, {
      "left" : "final double as[] = new double[2];",
      "right" : "final double as[] = new double[2];",
      "info" : "VariableDeclarationStatement[35927-35961]:VariableDeclarationStatement[35927-35961]"
    }, {
      "left" : "final double ys[] = new double[2];",
      "right" : "final double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[35970-36004]:VariableDeclarationStatement[35970-36004]"
    }, {
      "left" : "xs[0] = 2.718281828459045;",
      "right" : "xs[0] = 2.718281828459045;",
      "info" : "ExpressionStatement[36345-36371]:ExpressionStatement[36345-36371]"
    }, {
      "left" : "xs[1] = 1.4456468917292502E-16;",
      "right" : "xs[1] = 1.4456468917292502E-16;",
      "info" : "ExpressionStatement[36380-36411]:ExpressionStatement[36380-36411]"
    }, {
      "left" : "split(1.0, ys);",
      "right" : "split(1.0, ys);",
      "info" : "ExpressionStatement[36421-36436]:ExpressionStatement[36421-36436]"
    }, {
      "left" : "while (p > 0)",
      "right" : "while (p > 0)",
      "info" : "WhileStatement[36446-36700]:WhileStatement[36446-36700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36460-36700]:Block[36460-36700]"
    }, {
      "left" : "if ((p & 1) != 0)",
      "right" : "if ((p & 1) != 0)",
      "info" : "IfStatement[36474-36591]:IfStatement[36474-36591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36492-36591]:Block[36492-36591]"
    }, {
      "left" : "quadMult(ys, xs, as);",
      "right" : "quadMult(ys, xs, as);",
      "info" : "ExpressionStatement[36510-36531]:ExpressionStatement[36510-36531]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[36548-36562]:ExpressionStatement[36548-36562]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[36563-36577]:ExpressionStatement[36563-36577]"
    }, {
      "left" : "quadMult(xs, xs, as);",
      "right" : "quadMult(xs, xs, as);",
      "info" : "ExpressionStatement[36605-36626]:ExpressionStatement[36605-36626]"
    }, {
      "left" : "xs[0] = as[0];",
      "right" : "xs[0] = as[0];",
      "info" : "ExpressionStatement[36639-36653]:ExpressionStatement[36639-36653]"
    }, {
      "left" : "xs[1] = as[1];",
      "right" : "xs[1] = as[1];",
      "info" : "ExpressionStatement[36654-36668]:ExpressionStatement[36654-36668]"
    }, {
      "left" : "p >>= 1;",
      "right" : "p >>= 1;",
      "info" : "ExpressionStatement[36682-36690]:ExpressionStatement[36682-36690]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[36710-36833]:IfStatement[36710-36833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36730-36833]:Block[36730-36833]"
    }, {
      "left" : "result[0] = ys[0];",
      "right" : "result[0] = ys[0];",
      "info" : "ExpressionStatement[36744-36762]:ExpressionStatement[36744-36762]"
    }, {
      "left" : "result[1] = ys[1];",
      "right" : "result[1] = ys[1];",
      "info" : "ExpressionStatement[36775-36793]:ExpressionStatement[36775-36793]"
    }, {
      "left" : "resplit(result);",
      "right" : "resplit(result);",
      "info" : "ExpressionStatement[36807-36823]:ExpressionStatement[36807-36823]"
    }, {
      "left" : "return ys[0] + ys[1];",
      "right" : "return ys[0] + ys[1];",
      "info" : "ReturnStatement[36843-36864]:ReturnStatement[36843-36864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36975-36981]:Modifier[36975-36981]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36982-36988]:Modifier[36982-36988]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[36989-36995]:PrimitiveType[36989-36995]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[36996-36999]:SimpleName[36996-36999]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[37000-37014]:SingleVariableDeclaration[37000-37014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37016-37052]:Block[37016-37052]"
    }, {
      "left" : "return log(x, null);",
      "right" : "return log(x, null);",
      "info" : "ReturnStatement[37026-37046]:ReturnStatement[37026-37046]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37299-37306]:Modifier[37299-37306]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37307-37313]:Modifier[37307-37313]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[37314-37320]:PrimitiveType[37314-37320]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[37321-37324]:SimpleName[37321-37324]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[37325-37339]:SingleVariableDeclaration[37325-37339]"
    }, {
      "left" : "final double[] hiPrec",
      "right" : "final double[] hiPrec",
      "info" : "SingleVariableDeclaration[37341-37362]:SingleVariableDeclaration[37341-37362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37364-44192]:Block[37364-44192]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[37374-37413]:VariableDeclarationStatement[37374-37413]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0 || x != x)",
      "right" : "if ((bits & 0x8000000000000000L) != 0 || x != x)",
      "info" : "IfStatement[37485-37723]:IfStatement[37485-37723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37534-37723]:Block[37534-37723]"
    }, {
      "left" : "if (x != 0.0)",
      "right" : "if (x != 0.0)",
      "info" : "IfStatement[37548-37713]:IfStatement[37548-37713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37562-37713]:Block[37562-37713]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[37580-37663]:IfStatement[37580-37663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37600-37663]:Block[37600-37663]"
    }, {
      "left" : "hiPrec[0] = Double.NaN;",
      "right" : "hiPrec[0] = Double.NaN;",
      "info" : "ExpressionStatement[37622-37645]:ExpressionStatement[37622-37645]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[37681-37699]:ReturnStatement[37681-37699]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[37790-37984]:IfStatement[37790-37984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37825-37984]:Block[37825-37984]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[37839-37928]:IfStatement[37839-37928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37859-37928]:Block[37859-37928]"
    }, {
      "left" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[37877-37914]:ExpressionStatement[37877-37914]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[37942-37974]:ReturnStatement[37942-37974]"
    }, {
      "left" : "int exp = (int)(bits >> 52)-1023;",
      "right" : "int exp = (int)(bits >> 52)-1023;",
      "info" : "VariableDeclarationStatement[38029-38062]:VariableDeclarationStatement[38029-38062]"
    }, {
      "left" : "if ((bits & 0x7ff0000000000000L) == 0)",
      "right" : "if ((bits & 0x7ff0000000000000L) == 0)",
      "info" : "IfStatement[38072-38573]:IfStatement[38072-38573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38111-38573]:Block[38111-38573]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[38151-38366]:IfStatement[38151-38366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38163-38366]:Block[38163-38366]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[38205-38302]:IfStatement[38205-38302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38225-38302]:Block[38225-38302]"
    }, {
      "left" : "hiPrec[0] = Double.NEGATIVE_INFINITY;",
      "right" : "hiPrec[0] = Double.NEGATIVE_INFINITY;",
      "info" : "ExpressionStatement[38247-38284]:ExpressionStatement[38247-38284]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[38320-38352]:ReturnStatement[38320-38352]"
    }, {
      "left" : "bits <<= 1;",
      "right" : "bits <<= 1;",
      "info" : "ExpressionStatement[38430-38441]:ExpressionStatement[38430-38441]"
    }, {
      "left" : "while ( (bits & 0x0010000000000000L) == 0)",
      "right" : "while ( (bits & 0x0010000000000000L) == 0)",
      "info" : "WhileStatement[38454-38563]:WhileStatement[38454-38563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38497-38563]:Block[38497-38563]"
    }, {
      "left" : "exp--;",
      "right" : "exp--;",
      "info" : "ExpressionStatement[38515-38521]:ExpressionStatement[38515-38521]"
    }, {
      "left" : "bits <<= 1;",
      "right" : "bits <<= 1;",
      "info" : "ExpressionStatement[38538-38549]:ExpressionStatement[38538-38549]"
    }, {
      "left" : "if (exp == -1 || exp == 0)",
      "right" : "if (exp == -1 || exp == 0)",
      "info" : "IfStatement[38584-40323]:IfStatement[38584-40323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38611-40323]:Block[38611-40323]"
    }, {
      "left" : "if (x < 1.01 && x > 0.99 && hiPrec == null)",
      "right" : "if (x < 1.01 && x > 0.99 && hiPrec == null)",
      "info" : "IfStatement[38625-40313]:IfStatement[38625-40313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38669-40313]:Block[38669-40313]"
    }, {
      "left" : "double xa = x - 1.0;",
      "right" : "double xa = x - 1.0;",
      "info" : "VariableDeclarationStatement[38897-38917]:VariableDeclarationStatement[38897-38917]"
    }, {
      "left" : "double xb = xa - x + 1.0;",
      "right" : "double xb = xa - x + 1.0;",
      "info" : "VariableDeclarationStatement[38934-38959]:VariableDeclarationStatement[38934-38959]"
    }, {
      "left" : "double tmp = xa * 1073741824.0;",
      "right" : "double tmp = xa * 1073741824.0;",
      "info" : "VariableDeclarationStatement[38976-39007]:VariableDeclarationStatement[38976-39007]"
    }, {
      "left" : "double aa = xa + tmp - tmp;",
      "right" : "double aa = xa + tmp - tmp;",
      "info" : "VariableDeclarationStatement[39024-39051]:VariableDeclarationStatement[39024-39051]"
    }, {
      "left" : "double ab = xa - aa;",
      "right" : "double ab = xa - aa;",
      "info" : "VariableDeclarationStatement[39068-39088]:VariableDeclarationStatement[39068-39088]"
    }, {
      "left" : "xa = aa;",
      "right" : "xa = aa;",
      "info" : "ExpressionStatement[39105-39113]:ExpressionStatement[39105-39113]"
    }, {
      "left" : "xb = ab;",
      "right" : "xb = ab;",
      "info" : "ExpressionStatement[39130-39138]:ExpressionStatement[39130-39138]"
    }, {
      "left" : "double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];",
      "right" : "double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];",
      "info" : "VariableDeclarationStatement[39156-39209]:VariableDeclarationStatement[39156-39209]"
    }, {
      "left" : "double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];",
      "right" : "double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];",
      "info" : "VariableDeclarationStatement[39226-39279]:VariableDeclarationStatement[39226-39279]"
    }, {
      "left" : "for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--)",
      "right" : "for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--)",
      "info" : "ForStatement[39297-39989]:ForStatement[39297-39989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39349-39989]:Block[39349-39989]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[39416-39429]:ExpressionStatement[39416-39429]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[39450-39483]:ExpressionStatement[39450-39483]"
    }, {
      "left" : "tmp = aa * 1073741824.0;",
      "right" : "tmp = aa * 1073741824.0;",
      "info" : "ExpressionStatement[39550-39574]:ExpressionStatement[39550-39574]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[39595-39615]:ExpressionStatement[39595-39615]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[39636-39654]:ExpressionStatement[39636-39654]"
    }, {
      "left" : "aa = ya + LN_QUICK_COEF[i][0];",
      "right" : "aa = ya + LN_QUICK_COEF[i][0];",
      "info" : "ExpressionStatement[39727-39757]:ExpressionStatement[39727-39757]"
    }, {
      "left" : "ab = yb + LN_QUICK_COEF[i][1];",
      "right" : "ab = yb + LN_QUICK_COEF[i][1];",
      "info" : "ExpressionStatement[39778-39808]:ExpressionStatement[39778-39808]"
    }, {
      "left" : "tmp = aa * 1073741824.0;",
      "right" : "tmp = aa * 1073741824.0;",
      "info" : "ExpressionStatement[39867-39891]:ExpressionStatement[39867-39891]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[39912-39932]:ExpressionStatement[39912-39932]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[39953-39971]:ExpressionStatement[39953-39971]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[40048-40061]:ExpressionStatement[40048-40061]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[40078-40111]:ExpressionStatement[40078-40111]"
    }, {
      "left" : "tmp = aa * 1073741824.0;",
      "right" : "tmp = aa * 1073741824.0;",
      "info" : "ExpressionStatement[40170-40194]:ExpressionStatement[40170-40194]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[40211-40231]:ExpressionStatement[40211-40231]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[40248-40266]:ExpressionStatement[40248-40266]"
    }, {
      "left" : "return ya + yb;",
      "right" : "return ya + yb;",
      "info" : "ReturnStatement[40284-40299]:ReturnStatement[40284-40299]"
    }, {
      "left" : "double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];",
      "right" : "double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];",
      "info" : "VariableDeclarationStatement[40416-40482]:VariableDeclarationStatement[40416-40482]"
    }, {
      "left" : "double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));",
      "right" : "double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));",
      "info" : "VariableDeclarationStatement[40790-40893]:VariableDeclarationStatement[40790-40893]"
    }, {
      "left" : "double lnza = 0.0;",
      "right" : "double lnza = 0.0;",
      "info" : "VariableDeclarationStatement[40903-40921]:VariableDeclarationStatement[40903-40921]"
    }, {
      "left" : "double lnzb = 0.0;",
      "right" : "double lnzb = 0.0;",
      "info" : "VariableDeclarationStatement[40930-40948]:VariableDeclarationStatement[40930-40948]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[40958-43137]:IfStatement[40958-43137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40978-42680]:Block[40978-42680]"
    }, {
      "left" : "double tmp = epsilon * 1073741824.0;",
      "right" : "double tmp = epsilon * 1073741824.0;",
      "info" : "VariableDeclarationStatement[41029-41065]:VariableDeclarationStatement[41029-41065]"
    }, {
      "left" : "double aa = epsilon + tmp - tmp;",
      "right" : "double aa = epsilon + tmp - tmp;",
      "info" : "VariableDeclarationStatement[41078-41110]:VariableDeclarationStatement[41078-41110]"
    }, {
      "left" : "double ab = epsilon - aa;",
      "right" : "double ab = epsilon - aa;",
      "info" : "VariableDeclarationStatement[41123-41148]:VariableDeclarationStatement[41123-41148]"
    }, {
      "left" : "double xa = aa;",
      "right" : "double xa = aa;",
      "info" : "VariableDeclarationStatement[41161-41176]:VariableDeclarationStatement[41161-41176]"
    }, {
      "left" : "double xb = ab;",
      "right" : "double xb = ab;",
      "info" : "VariableDeclarationStatement[41189-41204]:VariableDeclarationStatement[41189-41204]"
    }, {
      "left" : "double numer = (double)(bits & 0x3ffffffffffL);",
      "right" : "double numer = (double)(bits & 0x3ffffffffffL);",
      "info" : "VariableDeclarationStatement[41290-41337]:VariableDeclarationStatement[41290-41337]"
    }, {
      "left" : "double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);",
      "right" : "double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);",
      "info" : "VariableDeclarationStatement[41350-41415]:VariableDeclarationStatement[41350-41415]"
    }, {
      "left" : "aa = numer - xa*denom - xb * denom;",
      "right" : "aa = numer - xa*denom - xb * denom;",
      "info" : "ExpressionStatement[41428-41463]:ExpressionStatement[41428-41463]"
    }, {
      "left" : "xb += aa / denom;",
      "right" : "xb += aa / denom;",
      "info" : "ExpressionStatement[41476-41493]:ExpressionStatement[41476-41493]"
    }, {
      "left" : "double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];",
      "right" : "double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];",
      "info" : "VariableDeclarationStatement[41553-41610]:VariableDeclarationStatement[41553-41610]"
    }, {
      "left" : "double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];",
      "right" : "double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];",
      "info" : "VariableDeclarationStatement[41623-41680]:VariableDeclarationStatement[41623-41680]"
    }, {
      "left" : "for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--)",
      "right" : "for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--)",
      "info" : "ForStatement[41694-42333]:ForStatement[41694-42333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41748-42333]:Block[41748-42333]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[41807-41820]:ExpressionStatement[41807-41820]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[41837-41870]:ExpressionStatement[41837-41870]"
    }, {
      "left" : "tmp = aa * 1073741824.0;",
      "right" : "tmp = aa * 1073741824.0;",
      "info" : "ExpressionStatement[41929-41953]:ExpressionStatement[41929-41953]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[41970-41990]:ExpressionStatement[41970-41990]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[42007-42025]:ExpressionStatement[42007-42025]"
    }, {
      "left" : "aa = ya + LN_HI_PREC_COEF[i][0];",
      "right" : "aa = ya + LN_HI_PREC_COEF[i][0];",
      "info" : "ExpressionStatement[42091-42123]:ExpressionStatement[42091-42123]"
    }, {
      "left" : "ab = yb + LN_HI_PREC_COEF[i][1];",
      "right" : "ab = yb + LN_HI_PREC_COEF[i][1];",
      "info" : "ExpressionStatement[42140-42172]:ExpressionStatement[42140-42172]"
    }, {
      "left" : "tmp = aa * 1073741824.0;",
      "right" : "tmp = aa * 1073741824.0;",
      "info" : "ExpressionStatement[42223-42247]:ExpressionStatement[42223-42247]"
    }, {
      "left" : "ya = aa + tmp - tmp;",
      "right" : "ya = aa + tmp - tmp;",
      "info" : "ExpressionStatement[42264-42284]:ExpressionStatement[42264-42284]"
    }, {
      "left" : "yb = aa - ya + ab;",
      "right" : "yb = aa - ya + ab;",
      "info" : "ExpressionStatement[42301-42319]:ExpressionStatement[42301-42319]"
    }, {
      "left" : "aa = ya * xa;",
      "right" : "aa = ya * xa;",
      "info" : "ExpressionStatement[42384-42397]:ExpressionStatement[42384-42397]"
    }, {
      "left" : "ab = ya * xb + yb * xa + yb * xb;",
      "right" : "ab = ya * xb + yb * xa + yb * xb;",
      "info" : "ExpressionStatement[42410-42443]:ExpressionStatement[42410-42443]"
    }, {
      "left" : "lnza = aa + ab;",
      "right" : "lnza = aa + ab;",
      "info" : "ExpressionStatement[42617-42632]:ExpressionStatement[42617-42632]"
    }, {
      "left" : "lnzb = -(lnza - aa - ab);",
      "right" : "lnzb = -(lnza - aa - ab);",
      "info" : "ExpressionStatement[42645-42670]:ExpressionStatement[42645-42670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42686-43137]:Block[42686-43137]"
    }, {
      "left" : "lnza = -0.16624882440418567;",
      "right" : "lnza = -0.16624882440418567;",
      "info" : "ExpressionStatement[42811-42839]:ExpressionStatement[42811-42839]"
    }, {
      "left" : "lnza = lnza * epsilon + 0.19999954120254515;",
      "right" : "lnza = lnza * epsilon + 0.19999954120254515;",
      "info" : "ExpressionStatement[42852-42896]:ExpressionStatement[42852-42896]"
    }, {
      "left" : "lnza = lnza * epsilon + -0.2499999997677497;",
      "right" : "lnza = lnza * epsilon + -0.2499999997677497;",
      "info" : "ExpressionStatement[42909-42953]:ExpressionStatement[42909-42953]"
    }, {
      "left" : "lnza = lnza * epsilon + 0.3333333333332802;",
      "right" : "lnza = lnza * epsilon + 0.3333333333332802;",
      "info" : "ExpressionStatement[42966-43009]:ExpressionStatement[42966-43009]"
    }, {
      "left" : "lnza = lnza * epsilon + -0.5;",
      "right" : "lnza = lnza * epsilon + -0.5;",
      "info" : "ExpressionStatement[43022-43051]:ExpressionStatement[43022-43051]"
    }, {
      "left" : "lnza = lnza * epsilon + 1.0;",
      "right" : "lnza = lnza * epsilon + 1.0;",
      "info" : "ExpressionStatement[43064-43092]:ExpressionStatement[43064-43092]"
    }, {
      "left" : "lnza = lnza * epsilon;",
      "right" : "lnza = lnza * epsilon;",
      "info" : "ExpressionStatement[43105-43127]:ExpressionStatement[43105-43127]"
    }, {
      "left" : "double a = LN_2_A*exp;",
      "right" : "double a = LN_2_A*exp;",
      "info" : "VariableDeclarationStatement[43565-43587]:VariableDeclarationStatement[43565-43587]"
    }, {
      "left" : "double b = 0.0;",
      "right" : "double b = 0.0;",
      "info" : "VariableDeclarationStatement[43596-43611]:VariableDeclarationStatement[43596-43611]"
    }, {
      "left" : "double c = a+lnm[0];",
      "right" : "double c = a+lnm[0];",
      "info" : "VariableDeclarationStatement[43620-43640]:VariableDeclarationStatement[43620-43640]"
    }, {
      "left" : "double d = -(c-a-lnm[0]);",
      "right" : "double d = -(c-a-lnm[0]);",
      "info" : "VariableDeclarationStatement[43649-43674]:VariableDeclarationStatement[43649-43674]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43683-43689]:ExpressionStatement[43683-43689]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43698-43708]:ExpressionStatement[43698-43708]"
    }, {
      "left" : "c = a + lnza;",
      "right" : "c = a + lnza;",
      "info" : "ExpressionStatement[43718-43731]:ExpressionStatement[43718-43731]"
    }, {
      "left" : "d = -(c - a - lnza);",
      "right" : "d = -(c - a - lnza);",
      "info" : "ExpressionStatement[43740-43760]:ExpressionStatement[43740-43760]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43769-43775]:ExpressionStatement[43769-43775]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43784-43794]:ExpressionStatement[43784-43794]"
    }, {
      "left" : "c = a + LN_2_B*exp;",
      "right" : "c = a + LN_2_B*exp;",
      "info" : "ExpressionStatement[43804-43823]:ExpressionStatement[43804-43823]"
    }, {
      "left" : "d = -(c - a - LN_2_B*exp);",
      "right" : "d = -(c - a - LN_2_B*exp);",
      "info" : "ExpressionStatement[43832-43858]:ExpressionStatement[43832-43858]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43867-43873]:ExpressionStatement[43867-43873]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43882-43892]:ExpressionStatement[43882-43892]"
    }, {
      "left" : "c = a + lnm[1];",
      "right" : "c = a + lnm[1];",
      "info" : "ExpressionStatement[43902-43917]:ExpressionStatement[43902-43917]"
    }, {
      "left" : "d = -(c - a - lnm[1]);",
      "right" : "d = -(c - a - lnm[1]);",
      "info" : "ExpressionStatement[43926-43948]:ExpressionStatement[43926-43948]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[43957-43963]:ExpressionStatement[43957-43963]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[43972-43982]:ExpressionStatement[43972-43982]"
    }, {
      "left" : "c = a + lnzb;",
      "right" : "c = a + lnzb;",
      "info" : "ExpressionStatement[43992-44005]:ExpressionStatement[43992-44005]"
    }, {
      "left" : "d = -(c - a - lnzb);",
      "right" : "d = -(c - a - lnzb);",
      "info" : "ExpressionStatement[44014-44034]:ExpressionStatement[44014-44034]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[44043-44049]:ExpressionStatement[44043-44049]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[44058-44068]:ExpressionStatement[44058-44068]"
    }, {
      "left" : "if (hiPrec != null)",
      "right" : "if (hiPrec != null)",
      "info" : "IfStatement[44078-44163]:IfStatement[44078-44163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44098-44163]:Block[44098-44163]"
    }, {
      "left" : "hiPrec[0] = a;",
      "right" : "hiPrec[0] = a;",
      "info" : "ExpressionStatement[44112-44126]:ExpressionStatement[44112-44126]"
    }, {
      "left" : "hiPrec[1] = b;",
      "right" : "hiPrec[1] = b;",
      "info" : "ExpressionStatement[44139-44153]:ExpressionStatement[44139-44153]"
    }, {
      "left" : "return a + b;",
      "right" : "return a + b;",
      "info" : "ReturnStatement[44173-44186]:ReturnStatement[44173-44186]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44285-44291]:Modifier[44285-44291]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44292-44298]:Modifier[44292-44298]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[44299-44305]:PrimitiveType[44299-44305]"
    }, {
      "left" : "log1p",
      "right" : "log1p",
      "info" : "SimpleName[44306-44311]:SimpleName[44306-44311]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[44312-44326]:SingleVariableDeclaration[44312-44326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44328-45155]:Block[44328-45155]"
    }, {
      "left" : "double xpa = 1.0 + x;",
      "right" : "double xpa = 1.0 + x;",
      "info" : "VariableDeclarationStatement[44338-44359]:VariableDeclarationStatement[44338-44359]"
    }, {
      "left" : "double xpb = -(xpa - 1.0 - x);",
      "right" : "double xpb = -(xpa - 1.0 - x);",
      "info" : "VariableDeclarationStatement[44368-44398]:VariableDeclarationStatement[44368-44398]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[44408-44473]:IfStatement[44408-44473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44421-44473]:Block[44421-44473]"
    }, {
      "left" : "return x/0.0;",
      "right" : "return x/0.0;",
      "info" : "ReturnStatement[44435-44448]:ReturnStatement[44435-44448]"
    }, {
      "left" : "if (x > 0 && 1/x == 0)",
      "right" : "if (x > 0 && 1/x == 0)",
      "info" : "IfStatement[44483-44555]:IfStatement[44483-44555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44506-44555]:Block[44506-44555]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[44536-44545]:ReturnStatement[44536-44545]"
    }, {
      "left" : "if (x>1e-6 || x<-1e-6)",
      "right" : "if (x>1e-6 || x<-1e-6)",
      "info" : "IfStatement[44565-44962]:IfStatement[44565-44962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44588-44962]:Block[44588-44962]"
    }, {
      "left" : "double hiPrec[] = new double[2];",
      "right" : "double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[44602-44634]:VariableDeclarationStatement[44602-44634]"
    }, {
      "left" : "log(xpa, hiPrec);",
      "right" : "log(xpa, hiPrec);",
      "info" : "ExpressionStatement[44648-44665]:ExpressionStatement[44648-44665]"
    }, {
      "left" : "double fx1 = xpb/xpa;",
      "right" : "double fx1 = xpb/xpa;",
      "info" : "VariableDeclarationStatement[44794-44815]:VariableDeclarationStatement[44794-44815]"
    }, {
      "left" : "double epsilon = 0.5 * fx1 + 1.0;",
      "right" : "double epsilon = 0.5 * fx1 + 1.0;",
      "info" : "VariableDeclarationStatement[44829-44862]:VariableDeclarationStatement[44829-44862]"
    }, {
      "left" : "epsilon = epsilon * fx1;",
      "right" : "epsilon = epsilon * fx1;",
      "info" : "ExpressionStatement[44875-44899]:ExpressionStatement[44875-44899]"
    }, {
      "left" : "return epsilon + hiPrec[1] + hiPrec[0];",
      "right" : "return epsilon + hiPrec[1] + hiPrec[0];",
      "info" : "ReturnStatement[44913-44952]:ReturnStatement[44913-44952]"
    }, {
      "left" : "double y = x * 0.333333333333333 - 0.5;",
      "right" : "double y = x * 0.333333333333333 - 0.5;",
      "info" : "VariableDeclarationStatement[45047-45086]:VariableDeclarationStatement[45047-45086]"
    }, {
      "left" : "y = y * x + 1.0;",
      "right" : "y = y * x + 1.0;",
      "info" : "ExpressionStatement[45095-45111]:ExpressionStatement[45095-45111]"
    }, {
      "left" : "y = y * x;",
      "right" : "y = y * x;",
      "info" : "ExpressionStatement[45120-45130]:ExpressionStatement[45120-45130]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[45140-45149]:ReturnStatement[45140-45149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45257-45263]:Modifier[45257-45263]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45264-45270]:Modifier[45264-45270]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[45271-45277]:PrimitiveType[45271-45277]"
    }, {
      "left" : "log10",
      "right" : "log10",
      "info" : "SimpleName[45278-45283]:SimpleName[45278-45283]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[45284-45298]:SingleVariableDeclaration[45284-45298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45300-45718]:Block[45300-45718]"
    }, {
      "left" : "final double hiPrec[] = new double[2];",
      "right" : "final double hiPrec[] = new double[2];",
      "info" : "VariableDeclarationStatement[45310-45348]:VariableDeclarationStatement[45310-45348]"
    }, {
      "left" : "log(x, hiPrec);",
      "right" : "log(x, hiPrec);",
      "info" : "ExpressionStatement[45358-45373]:ExpressionStatement[45358-45373]"
    }, {
      "left" : "final double tmp = hiPrec[0] * 1073741824.0;",
      "right" : "final double tmp = hiPrec[0] * 1073741824.0;",
      "info" : "VariableDeclarationStatement[45383-45427]:VariableDeclarationStatement[45383-45427]"
    }, {
      "left" : "final double lna = hiPrec[0] + tmp - tmp;",
      "right" : "final double lna = hiPrec[0] + tmp - tmp;",
      "info" : "VariableDeclarationStatement[45436-45477]:VariableDeclarationStatement[45436-45477]"
    }, {
      "left" : "final double lnb = hiPrec[0] - lna + hiPrec[1];",
      "right" : "final double lnb = hiPrec[0] - lna + hiPrec[1];",
      "info" : "VariableDeclarationStatement[45486-45533]:VariableDeclarationStatement[45486-45533]"
    }, {
      "left" : "final double rln10a = 0.4342944622039795;",
      "right" : "final double rln10a = 0.4342944622039795;",
      "info" : "VariableDeclarationStatement[45543-45584]:VariableDeclarationStatement[45543-45584]"
    }, {
      "left" : "final double rln10b = 1.9699272335463627E-8;",
      "right" : "final double rln10b = 1.9699272335463627E-8;",
      "info" : "VariableDeclarationStatement[45593-45637]:VariableDeclarationStatement[45593-45637]"
    }, {
      "left" : "return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;",
      "right" : "return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;",
      "info" : "ReturnStatement[45647-45712]:ReturnStatement[45647-45712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45860-45866]:Modifier[45860-45866]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45867-45873]:Modifier[45867-45873]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[45874-45880]:PrimitiveType[45874-45880]"
    }, {
      "left" : "pow",
      "right" : "pow",
      "info" : "SimpleName[45881-45884]:SimpleName[45881-45884]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[45885-45893]:SingleVariableDeclaration[45885-45893]"
    }, {
      "left" : "double y",
      "right" : "double y",
      "info" : "SingleVariableDeclaration[45895-45903]:SingleVariableDeclaration[45895-45903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45905-49897]:Block[45905-49897]"
    }, {
      "left" : "final double lns[] = new double[2];",
      "right" : "final double lns[] = new double[2];",
      "info" : "VariableDeclarationStatement[45915-45950]:VariableDeclarationStatement[45915-45950]"
    }, {
      "left" : "if (y == 0.0)",
      "right" : "if (y == 0.0)",
      "info" : "IfStatement[45960-46009]:IfStatement[45960-46009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45974-46009]:Block[45974-46009]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[45988-45999]:ReturnStatement[45988-45999]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[46019-46076]:IfStatement[46019-46076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46031-46076]:Block[46031-46076]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[46057-46066]:ReturnStatement[46057-46066]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[46087-46825]:IfStatement[46087-46825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46099-46825]:Block[46099-46825]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[46113-46152]:VariableDeclarationStatement[46113-46152]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0)",
      "right" : "if ((bits & 0x8000000000000000L) != 0)",
      "info" : "IfStatement[46165-46627]:IfStatement[46165-46627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46204-46627]:Block[46204-46627]"
    }, {
      "left" : "long yi = (long) y;",
      "right" : "long yi = (long) y;",
      "info" : "VariableDeclarationStatement[46247-46266]:VariableDeclarationStatement[46247-46266]"
    }, {
      "left" : "if (y < 0 && y == yi && (yi & 1) == 1)",
      "right" : "if (y < 0 && y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[46284-46395]:IfStatement[46284-46395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46323-46395]:Block[46323-46395]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[46345-46377]:ReturnStatement[46345-46377]"
    }, {
      "left" : "if (y < 0 && y == yi && (yi & 1) == 1)",
      "right" : "if (y < 0 && y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[46413-46504]:IfStatement[46413-46504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46452-46504]:Block[46452-46504]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[46474-46486]:ReturnStatement[46474-46486]"
    }, {
      "left" : "if (y > 0 && y == yi && (yi & 1) == 1)",
      "right" : "if (y > 0 && y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[46522-46613]:IfStatement[46522-46613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46561-46613]:Block[46561-46613]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[46583-46595]:ReturnStatement[46583-46595]"
    }, {
      "left" : "if (y < 0)",
      "right" : "if (y < 0)",
      "info" : "IfStatement[46641-46716]:IfStatement[46641-46716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46652-46716]:Block[46652-46716]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[46670-46702]:ReturnStatement[46670-46702]"
    }, {
      "left" : "if (y > 0)",
      "right" : "if (y > 0)",
      "info" : "IfStatement[46729-46783]:IfStatement[46729-46783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46740-46783]:Block[46740-46783]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[46758-46769]:ReturnStatement[46758-46769]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[46797-46815]:ReturnStatement[46797-46815]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[46835-47098]:IfStatement[46835-47098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46870-47098]:Block[46870-47098]"
    }, {
      "left" : "if (y != y)",
      "right" : "if (y != y)",
      "info" : "IfStatement[46884-46949]:IfStatement[46884-46949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46896-46949]:Block[46896-46949]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[46926-46935]:ReturnStatement[46926-46935]"
    }, {
      "left" : "if (y < 0.0)",
      "right" : "if (y < 0.0)",
      "info" : "IfStatement[46962-47088]:IfStatement[46962-47088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46975-47018]:Block[46975-47018]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[46993-47004]:ReturnStatement[46993-47004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47024-47088]:Block[47024-47088]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[47042-47074]:ReturnStatement[47042-47074]"
    }, {
      "left" : "if (y == Double.POSITIVE_INFINITY)",
      "right" : "if (y == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[47108-47361]:IfStatement[47108-47361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47143-47361]:Block[47143-47361]"
    }, {
      "left" : "if (x * x == 1.0)",
      "right" : "if (x * x == 1.0)",
      "info" : "IfStatement[47157-47207]:IfStatement[47157-47207]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[47189-47207]:ReturnStatement[47189-47207]"
    }, {
      "left" : "if (x * x > 1.0)",
      "right" : "if (x * x > 1.0)",
      "info" : "IfStatement[47221-47351]:IfStatement[47221-47351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47238-47302]:Block[47238-47302]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[47256-47288]:ReturnStatement[47256-47288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47308-47351]:Block[47308-47351]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[47326-47337]:ReturnStatement[47326-47337]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[47371-47945]:IfStatement[47371-47945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47406-47945]:Block[47406-47945]"
    }, {
      "left" : "if (y != y)",
      "right" : "if (y != y)",
      "info" : "IfStatement[47420-47485]:IfStatement[47420-47485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47432-47485]:Block[47432-47485]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[47462-47471]:ReturnStatement[47462-47471]"
    }, {
      "left" : "if (y < 0)",
      "right" : "if (y < 0)",
      "info" : "IfStatement[47499-47689]:IfStatement[47499-47689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47510-47689]:Block[47510-47689]"
    }, {
      "left" : "long yi = (long) y;",
      "right" : "long yi = (long) y;",
      "info" : "VariableDeclarationStatement[47528-47547]:VariableDeclarationStatement[47528-47547]"
    }, {
      "left" : "if (y == yi && (yi & 1) == 1)",
      "right" : "if (y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[47564-47646]:IfStatement[47564-47646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47594-47646]:Block[47594-47646]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[47616-47628]:ReturnStatement[47616-47628]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[47664-47675]:ReturnStatement[47664-47675]"
    }, {
      "left" : "if (y > 0)",
      "right" : "if (y > 0)",
      "info" : "IfStatement[47703-47935]:IfStatement[47703-47935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47715-47935]:Block[47715-47935]"
    }, {
      "left" : "long yi = (long) y;",
      "right" : "long yi = (long) y;",
      "info" : "VariableDeclarationStatement[47733-47752]:VariableDeclarationStatement[47733-47752]"
    }, {
      "left" : "if (y == yi && (yi & 1) == 1)",
      "right" : "if (y == yi && (yi & 1) == 1)",
      "info" : "IfStatement[47769-47871]:IfStatement[47769-47871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47799-47871]:Block[47799-47871]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[47821-47853]:ReturnStatement[47821-47853]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[47889-47921]:ReturnStatement[47889-47921]"
    }, {
      "left" : "if (y == Double.NEGATIVE_INFINITY)",
      "right" : "if (y == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[47955-48227]:IfStatement[47955-48227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47990-48227]:Block[47990-48227]"
    }, {
      "left" : "if (x * x == 1.0)",
      "right" : "if (x * x == 1.0)",
      "info" : "IfStatement[48005-48073]:IfStatement[48005-48073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48023-48073]:Block[48023-48073]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[48041-48059]:ReturnStatement[48041-48059]"
    }, {
      "left" : "if (x * x < 1.0)",
      "right" : "if (x * x < 1.0)",
      "info" : "IfStatement[48087-48217]:IfStatement[48087-48217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48104-48168]:Block[48104-48168]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[48122-48154]:ReturnStatement[48122-48154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48174-48217]:Block[48174-48217]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[48192-48203]:ReturnStatement[48192-48203]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[48275-48678]:IfStatement[48275-48678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48286-48678]:Block[48286-48678]"
    }, {
      "left" : "if (y >= 4503599627370496.0 || y <= -4503599627370496.0)",
      "right" : "if (y >= 4503599627370496.0 || y <= -4503599627370496.0)",
      "info" : "IfStatement[48349-48456]:IfStatement[48349-48456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48406-48456]:Block[48406-48456]"
    }, {
      "left" : "return pow(-x, y);",
      "right" : "return pow(-x, y);",
      "info" : "ReturnStatement[48424-48442]:ReturnStatement[48424-48442]"
    }, {
      "left" : "if (y == (long) y)",
      "right" : "if (y == (long) y)",
      "info" : "IfStatement[48470-48668]:IfStatement[48470-48668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48489-48612]:Block[48489-48612]"
    }, {
      "left" : "return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",
      "right" : "return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",
      "info" : "ReturnStatement[48545-48598]:ReturnStatement[48545-48598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48618-48668]:Block[48618-48668]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[48636-48654]:ReturnStatement[48636-48654]"
    }, {
      "left" : "double ya;",
      "right" : "double ya;",
      "info" : "VariableDeclarationStatement[48745-48755]:VariableDeclarationStatement[48745-48755]"
    }, {
      "left" : "double yb;",
      "right" : "double yb;",
      "info" : "VariableDeclarationStatement[48764-48774]:VariableDeclarationStatement[48764-48774]"
    }, {
      "left" : "if (y < 8e298 && y > -8e298)",
      "right" : "if (y < 8e298 && y > -8e298)",
      "info" : "IfStatement[48783-49156]:IfStatement[48783-49156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48812-48926]:Block[48812-48926]"
    }, {
      "left" : "double tmp1 = y * 1073741824.0;",
      "right" : "double tmp1 = y * 1073741824.0;",
      "info" : "VariableDeclarationStatement[48826-48857]:VariableDeclarationStatement[48826-48857]"
    }, {
      "left" : "ya = y + tmp1 - tmp1;",
      "right" : "ya = y + tmp1 - tmp1;",
      "info" : "ExpressionStatement[48870-48891]:ExpressionStatement[48870-48891]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[48904-48916]:ExpressionStatement[48904-48916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48932-49156]:Block[48932-49156]"
    }, {
      "left" : "double tmp1 = y * 9.31322574615478515625E-10;",
      "right" : "double tmp1 = y * 9.31322574615478515625E-10;",
      "info" : "VariableDeclarationStatement[48946-48991]:VariableDeclarationStatement[48946-48991]"
    }, {
      "left" : "double tmp2 = tmp1 * 9.31322574615478515625E-10;",
      "right" : "double tmp2 = tmp1 * 9.31322574615478515625E-10;",
      "info" : "VariableDeclarationStatement[49004-49052]:VariableDeclarationStatement[49004-49052]"
    }, {
      "left" : "ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;",
      "right" : "ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;",
      "info" : "ExpressionStatement[49065-49121]:ExpressionStatement[49065-49121]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[49134-49146]:ExpressionStatement[49134-49146]"
    }, {
      "left" : "log(x, lns);",
      "right" : "log(x, lns);",
      "info" : "ExpressionStatement[49194-49206]:ExpressionStatement[49194-49206]"
    }, {
      "left" : "double lna = lns[0];",
      "right" : "double lna = lns[0];",
      "info" : "VariableDeclarationStatement[49215-49235]:VariableDeclarationStatement[49215-49235]"
    }, {
      "left" : "double lnb = lns[1];",
      "right" : "double lnb = lns[1];",
      "info" : "VariableDeclarationStatement[49244-49264]:VariableDeclarationStatement[49244-49264]"
    }, {
      "left" : "double tmp1 = lna * 1073741824.0;",
      "right" : "double tmp1 = lna * 1073741824.0;",
      "info" : "VariableDeclarationStatement[49300-49333]:VariableDeclarationStatement[49300-49333]"
    }, {
      "left" : "double tmp2 = lna + tmp1 - tmp1;",
      "right" : "double tmp2 = lna + tmp1 - tmp1;",
      "info" : "VariableDeclarationStatement[49342-49374]:VariableDeclarationStatement[49342-49374]"
    }, {
      "left" : "lnb += lna - tmp2;",
      "right" : "lnb += lna - tmp2;",
      "info" : "ExpressionStatement[49383-49401]:ExpressionStatement[49383-49401]"
    }, {
      "left" : "lna = tmp2;",
      "right" : "lna = tmp2;",
      "info" : "ExpressionStatement[49410-49421]:ExpressionStatement[49410-49421]"
    }, {
      "left" : "final double aa = lna * ya;",
      "right" : "final double aa = lna * ya;",
      "info" : "VariableDeclarationStatement[49460-49487]:VariableDeclarationStatement[49460-49487]"
    }, {
      "left" : "final double ab = lna * yb + lnb * ya + lnb * yb;",
      "right" : "final double ab = lna * yb + lnb * ya + lnb * yb;",
      "info" : "VariableDeclarationStatement[49496-49545]:VariableDeclarationStatement[49496-49545]"
    }, {
      "left" : "lna = aa+ab;",
      "right" : "lna = aa+ab;",
      "info" : "ExpressionStatement[49555-49567]:ExpressionStatement[49555-49567]"
    }, {
      "left" : "lnb = -(lna - aa - ab);",
      "right" : "lnb = -(lna - aa - ab);",
      "info" : "ExpressionStatement[49576-49599]:ExpressionStatement[49576-49599]"
    }, {
      "left" : "double z = 1.0 / 120.0;",
      "right" : "double z = 1.0 / 120.0;",
      "info" : "VariableDeclarationStatement[49609-49632]:VariableDeclarationStatement[49609-49632]"
    }, {
      "left" : "z = z * lnb + (1.0 / 24.0);",
      "right" : "z = z * lnb + (1.0 / 24.0);",
      "info" : "ExpressionStatement[49641-49668]:ExpressionStatement[49641-49668]"
    }, {
      "left" : "z = z * lnb + (1.0 / 6.0);",
      "right" : "z = z * lnb + (1.0 / 6.0);",
      "info" : "ExpressionStatement[49677-49703]:ExpressionStatement[49677-49703]"
    }, {
      "left" : "z = z * lnb + 0.5;",
      "right" : "z = z * lnb + 0.5;",
      "info" : "ExpressionStatement[49712-49730]:ExpressionStatement[49712-49730]"
    }, {
      "left" : "z = z * lnb + 1.0;",
      "right" : "z = z * lnb + 1.0;",
      "info" : "ExpressionStatement[49739-49757]:ExpressionStatement[49739-49757]"
    }, {
      "left" : "z = z * lnb;",
      "right" : "z = z * lnb;",
      "info" : "ExpressionStatement[49766-49778]:ExpressionStatement[49766-49778]"
    }, {
      "left" : "final double result = exp(lna, z, null);",
      "right" : "final double result = exp(lna, z, null);",
      "info" : "VariableDeclarationStatement[49788-49828]:VariableDeclarationStatement[49788-49828]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[49877-49891]:ReturnStatement[49877-49891]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50692-50699]:Modifier[50692-50699]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50700-50706]:Modifier[50700-50706]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[50707-50715]:ArrayType[50707-50715]"
    }, {
      "left" : "slowLog",
      "right" : "slowLog",
      "info" : "SimpleName[50716-50723]:SimpleName[50716-50723]"
    }, {
      "left" : "double xi",
      "right" : "double xi",
      "info" : "SingleVariableDeclaration[50724-50733]:SingleVariableDeclaration[50724-50733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50735-51688]:Block[50735-51688]"
    }, {
      "left" : "double x[] = new double[2];",
      "right" : "double x[] = new double[2];",
      "info" : "VariableDeclarationStatement[50745-50772]:VariableDeclarationStatement[50745-50772]"
    }, {
      "left" : "double x2[] = new double[2];",
      "right" : "double x2[] = new double[2];",
      "info" : "VariableDeclarationStatement[50781-50809]:VariableDeclarationStatement[50781-50809]"
    }, {
      "left" : "double y[] = new double[2];",
      "right" : "double y[] = new double[2];",
      "info" : "VariableDeclarationStatement[50818-50845]:VariableDeclarationStatement[50818-50845]"
    }, {
      "left" : "double a[] = new double[2];",
      "right" : "double a[] = new double[2];",
      "info" : "VariableDeclarationStatement[50854-50881]:VariableDeclarationStatement[50854-50881]"
    }, {
      "left" : "split(xi, x);",
      "right" : "split(xi, x);",
      "info" : "ExpressionStatement[50891-50904]:ExpressionStatement[50891-50904]"
    }, {
      "left" : "x[0] += 1.0;",
      "right" : "x[0] += 1.0;",
      "info" : "ExpressionStatement[50948-50960]:ExpressionStatement[50948-50960]"
    }, {
      "left" : "resplit(x);",
      "right" : "resplit(x);",
      "info" : "ExpressionStatement[50969-50980]:ExpressionStatement[50969-50980]"
    }, {
      "left" : "splitReciprocal(x, a);",
      "right" : "splitReciprocal(x, a);",
      "info" : "ExpressionStatement[50989-51011]:ExpressionStatement[50989-51011]"
    }, {
      "left" : "x[0] -= 2.0;",
      "right" : "x[0] -= 2.0;",
      "info" : "ExpressionStatement[51020-51032]:ExpressionStatement[51020-51032]"
    }, {
      "left" : "resplit(x);",
      "right" : "resplit(x);",
      "info" : "ExpressionStatement[51041-51052]:ExpressionStatement[51041-51052]"
    }, {
      "left" : "splitMult(x, a, y);",
      "right" : "splitMult(x, a, y);",
      "info" : "ExpressionStatement[51061-51080]:ExpressionStatement[51061-51080]"
    }, {
      "left" : "x[0] = y[0];",
      "right" : "x[0] = y[0];",
      "info" : "ExpressionStatement[51089-51101]:ExpressionStatement[51089-51101]"
    }, {
      "left" : "x[1] = y[1];",
      "right" : "x[1] = y[1];",
      "info" : "ExpressionStatement[51110-51122]:ExpressionStatement[51110-51122]"
    }, {
      "left" : "splitMult(x, x, x2);",
      "right" : "splitMult(x, x, x2);",
      "info" : "ExpressionStatement[51160-51180]:ExpressionStatement[51160-51180]"
    }, {
      "left" : "y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];",
      "right" : "y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];",
      "info" : "ExpressionStatement[51237-51285]:ExpressionStatement[51237-51285]"
    }, {
      "left" : "y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];",
      "right" : "y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];",
      "info" : "ExpressionStatement[51294-51342]:ExpressionStatement[51294-51342]"
    }, {
      "left" : "for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--)",
      "right" : "for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--)",
      "info" : "ForStatement[51352-51592]:ForStatement[51352-51592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51402-51592]:Block[51402-51592]"
    }, {
      "left" : "splitMult(y, x2, a);",
      "right" : "splitMult(y, x2, a);",
      "info" : "ExpressionStatement[51416-51436]:ExpressionStatement[51416-51436]"
    }, {
      "left" : "y[0] = a[0];",
      "right" : "y[0] = a[0];",
      "info" : "ExpressionStatement[51449-51461]:ExpressionStatement[51449-51461]"
    }, {
      "left" : "y[1] = a[1];",
      "right" : "y[1] = a[1];",
      "info" : "ExpressionStatement[51474-51486]:ExpressionStatement[51474-51486]"
    }, {
      "left" : "splitAdd(y, LN_SPLIT_COEF[i], a);",
      "right" : "splitAdd(y, LN_SPLIT_COEF[i], a);",
      "info" : "ExpressionStatement[51499-51532]:ExpressionStatement[51499-51532]"
    }, {
      "left" : "y[0] = a[0];",
      "right" : "y[0] = a[0];",
      "info" : "ExpressionStatement[51545-51557]:ExpressionStatement[51545-51557]"
    }, {
      "left" : "y[1] = a[1];",
      "right" : "y[1] = a[1];",
      "info" : "ExpressionStatement[51570-51582]:ExpressionStatement[51570-51582]"
    }, {
      "left" : "splitMult(y, x, a);",
      "right" : "splitMult(y, x, a);",
      "info" : "ExpressionStatement[51602-51621]:ExpressionStatement[51602-51621]"
    }, {
      "left" : "y[0] = a[0];",
      "right" : "y[0] = a[0];",
      "info" : "ExpressionStatement[51630-51642]:ExpressionStatement[51630-51642]"
    }, {
      "left" : "y[1] = a[1];",
      "right" : "y[1] = a[1];",
      "info" : "ExpressionStatement[51651-51663]:ExpressionStatement[51651-51663]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[51673-51682]:ReturnStatement[51673-51682]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51909-51916]:Modifier[51909-51916]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51917-51923]:Modifier[51917-51923]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[51924-51930]:PrimitiveType[51924-51930]"
    }, {
      "left" : "slowSin",
      "right" : "slowSin",
      "info" : "SimpleName[51931-51938]:SimpleName[51931-51938]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[51939-51953]:SingleVariableDeclaration[51939-51953]"
    }, {
      "left" : "final double result[]",
      "right" : "final double result[]",
      "info" : "SingleVariableDeclaration[51955-51976]:SingleVariableDeclaration[51955-51976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51978-52825]:Block[51978-52825]"
    }, {
      "left" : "final double xs[] = new double[2];",
      "right" : "final double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[51988-52022]:VariableDeclarationStatement[51988-52022]"
    }, {
      "left" : "final double ys[] = new double[2];",
      "right" : "final double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[52031-52065]:VariableDeclarationStatement[52031-52065]"
    }, {
      "left" : "final double facts[] = new double[2];",
      "right" : "final double facts[] = new double[2];",
      "info" : "VariableDeclarationStatement[52074-52111]:VariableDeclarationStatement[52074-52111]"
    }, {
      "left" : "final double as[] = new double[2];",
      "right" : "final double as[] = new double[2];",
      "info" : "VariableDeclarationStatement[52120-52154]:VariableDeclarationStatement[52120-52154]"
    }, {
      "left" : "split(x, xs);",
      "right" : "split(x, xs);",
      "info" : "ExpressionStatement[52163-52176]:ExpressionStatement[52163-52176]"
    }, {
      "left" : "ys[0] = ys[1] = 0.0;",
      "right" : "ys[0] = ys[1] = 0.0;",
      "info" : "ExpressionStatement[52185-52205]:ExpressionStatement[52185-52205]"
    }, {
      "left" : "for (int i = 19; i >= 0; i--)",
      "right" : "for (int i = 19; i >= 0; i--)",
      "info" : "ForStatement[52215-52685]:ForStatement[52215-52685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52245-52685]:Block[52245-52685]"
    }, {
      "left" : "splitMult(xs, ys, as);",
      "right" : "splitMult(xs, ys, as);",
      "info" : "ExpressionStatement[52259-52281]:ExpressionStatement[52259-52281]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[52294-52308]:ExpressionStatement[52294-52308]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[52309-52323]:ExpressionStatement[52309-52323]"
    }, {
      "left" : "if ( (i & 1) == 0)",
      "right" : "if ( (i & 1) == 0)",
      "info" : "IfStatement[52337-52397]:IfStatement[52337-52397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52356-52397]:Block[52356-52397]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[52374-52383]:ContinueStatement[52374-52383]"
    }, {
      "left" : "split(FACT[i], as);",
      "right" : "split(FACT[i], as);",
      "info" : "ExpressionStatement[52411-52430]:ExpressionStatement[52411-52430]"
    }, {
      "left" : "splitReciprocal(as, facts);",
      "right" : "splitReciprocal(as, facts);",
      "info" : "ExpressionStatement[52443-52470]:ExpressionStatement[52443-52470]"
    }, {
      "left" : "if ( (i & 2) != 0)",
      "right" : "if ( (i & 2) != 0)",
      "info" : "IfStatement[52484-52595]:IfStatement[52484-52595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52504-52595]:Block[52504-52595]"
    }, {
      "left" : "facts[0] = -facts[0];",
      "right" : "facts[0] = -facts[0];",
      "info" : "ExpressionStatement[52522-52543]:ExpressionStatement[52522-52543]"
    }, {
      "left" : "facts[1] = -facts[1];",
      "right" : "facts[1] = -facts[1];",
      "info" : "ExpressionStatement[52560-52581]:ExpressionStatement[52560-52581]"
    }, {
      "left" : "splitAdd(ys, facts, as);",
      "right" : "splitAdd(ys, facts, as);",
      "info" : "ExpressionStatement[52609-52633]:ExpressionStatement[52609-52633]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[52646-52660]:ExpressionStatement[52646-52660]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[52661-52675]:ExpressionStatement[52661-52675]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[52695-52788]:IfStatement[52695-52788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52715-52788]:Block[52715-52788]"
    }, {
      "left" : "result[0] = ys[0];",
      "right" : "result[0] = ys[0];",
      "info" : "ExpressionStatement[52729-52747]:ExpressionStatement[52729-52747]"
    }, {
      "left" : "result[1] = ys[1];",
      "right" : "result[1] = ys[1];",
      "info" : "ExpressionStatement[52760-52778]:ExpressionStatement[52760-52778]"
    }, {
      "left" : "return ys[0] + ys[1];",
      "right" : "return ys[0] + ys[1];",
      "info" : "ReturnStatement[52798-52819]:ReturnStatement[52798-52819]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53050-53057]:Modifier[53050-53057]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53058-53064]:Modifier[53058-53064]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[53065-53071]:PrimitiveType[53065-53071]"
    }, {
      "left" : "slowCos",
      "right" : "slowCos",
      "info" : "SimpleName[53072-53079]:SimpleName[53072-53079]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[53080-53094]:SingleVariableDeclaration[53080-53094]"
    }, {
      "left" : "final double result[]",
      "right" : "final double result[]",
      "info" : "SingleVariableDeclaration[53096-53117]:SingleVariableDeclaration[53096-53117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53119-53967]:Block[53119-53967]"
    }, {
      "left" : "final double xs[] = new double[2];",
      "right" : "final double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[53130-53164]:VariableDeclarationStatement[53130-53164]"
    }, {
      "left" : "final double ys[] = new double[2];",
      "right" : "final double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[53173-53207]:VariableDeclarationStatement[53173-53207]"
    }, {
      "left" : "final double facts[] = new double[2];",
      "right" : "final double facts[] = new double[2];",
      "info" : "VariableDeclarationStatement[53216-53253]:VariableDeclarationStatement[53216-53253]"
    }, {
      "left" : "final double as[] = new double[2];",
      "right" : "final double as[] = new double[2];",
      "info" : "VariableDeclarationStatement[53262-53296]:VariableDeclarationStatement[53262-53296]"
    }, {
      "left" : "split(x, xs);",
      "right" : "split(x, xs);",
      "info" : "ExpressionStatement[53305-53318]:ExpressionStatement[53305-53318]"
    }, {
      "left" : "ys[0] = ys[1] = 0.0;",
      "right" : "ys[0] = ys[1] = 0.0;",
      "info" : "ExpressionStatement[53327-53347]:ExpressionStatement[53327-53347]"
    }, {
      "left" : "for (int i = 19; i >= 0; i--)",
      "right" : "for (int i = 19; i >= 0; i--)",
      "info" : "ForStatement[53357-53827]:ForStatement[53357-53827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53387-53827]:Block[53387-53827]"
    }, {
      "left" : "splitMult(xs, ys, as);",
      "right" : "splitMult(xs, ys, as);",
      "info" : "ExpressionStatement[53401-53423]:ExpressionStatement[53401-53423]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[53436-53450]:ExpressionStatement[53436-53450]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[53451-53465]:ExpressionStatement[53451-53465]"
    }, {
      "left" : "if ( (i & 1) != 0)",
      "right" : "if ( (i & 1) != 0)",
      "info" : "IfStatement[53479-53539]:IfStatement[53479-53539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53498-53539]:Block[53498-53539]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53516-53525]:ContinueStatement[53516-53525]"
    }, {
      "left" : "split(FACT[i], as);",
      "right" : "split(FACT[i], as);",
      "info" : "ExpressionStatement[53553-53572]:ExpressionStatement[53553-53572]"
    }, {
      "left" : "splitReciprocal(as, facts);",
      "right" : "splitReciprocal(as, facts);",
      "info" : "ExpressionStatement[53585-53612]:ExpressionStatement[53585-53612]"
    }, {
      "left" : "if ( (i & 2) != 0)",
      "right" : "if ( (i & 2) != 0)",
      "info" : "IfStatement[53626-53737]:IfStatement[53626-53737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53646-53737]:Block[53646-53737]"
    }, {
      "left" : "facts[0] = -facts[0];",
      "right" : "facts[0] = -facts[0];",
      "info" : "ExpressionStatement[53664-53685]:ExpressionStatement[53664-53685]"
    }, {
      "left" : "facts[1] = -facts[1];",
      "right" : "facts[1] = -facts[1];",
      "info" : "ExpressionStatement[53702-53723]:ExpressionStatement[53702-53723]"
    }, {
      "left" : "splitAdd(ys, facts, as);",
      "right" : "splitAdd(ys, facts, as);",
      "info" : "ExpressionStatement[53751-53775]:ExpressionStatement[53751-53775]"
    }, {
      "left" : "ys[0] = as[0];",
      "right" : "ys[0] = as[0];",
      "info" : "ExpressionStatement[53788-53802]:ExpressionStatement[53788-53802]"
    }, {
      "left" : "ys[1] = as[1];",
      "right" : "ys[1] = as[1];",
      "info" : "ExpressionStatement[53803-53817]:ExpressionStatement[53803-53817]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[53837-53930]:IfStatement[53837-53930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53857-53930]:Block[53857-53930]"
    }, {
      "left" : "result[0] = ys[0];",
      "right" : "result[0] = ys[0];",
      "info" : "ExpressionStatement[53871-53889]:ExpressionStatement[53871-53889]"
    }, {
      "left" : "result[1] = ys[1];",
      "right" : "result[1] = ys[1];",
      "info" : "ExpressionStatement[53902-53920]:ExpressionStatement[53902-53920]"
    }, {
      "left" : "return ys[0] + ys[1];",
      "right" : "return ys[0] + ys[1];",
      "info" : "ReturnStatement[53940-53961]:ReturnStatement[53940-53961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54023-54030]:Modifier[54023-54030]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54031-54037]:Modifier[54031-54037]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54038-54042]:PrimitiveType[54038-54042]"
    }, {
      "left" : "buildSinCosTables",
      "right" : "buildSinCosTables",
      "info" : "SimpleName[54043-54060]:SimpleName[54043-54060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54063-57116]:Block[54063-57116]"
    }, {
      "left" : "final double result[] = new double[2];",
      "right" : "final double result[] = new double[2];",
      "info" : "VariableDeclarationStatement[54073-54111]:VariableDeclarationStatement[54073-54111]"
    }, {
      "left" : "for (int i = 0; i < 7; i++)",
      "right" : "for (int i = 0; i < 7; i++)",
      "info" : "ForStatement[54171-54476]:ForStatement[54171-54476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54199-54476]:Block[54199-54476]"
    }, {
      "left" : "double x = i / 8.0;",
      "right" : "double x = i / 8.0;",
      "info" : "VariableDeclarationStatement[54213-54232]:VariableDeclarationStatement[54213-54232]"
    }, {
      "left" : "slowSin(x, result);",
      "right" : "slowSin(x, result);",
      "info" : "ExpressionStatement[54246-54265]:ExpressionStatement[54246-54265]"
    }, {
      "left" : "SINE_TABLE_A[i] = result[0];",
      "right" : "SINE_TABLE_A[i] = result[0];",
      "info" : "ExpressionStatement[54278-54306]:ExpressionStatement[54278-54306]"
    }, {
      "left" : "SINE_TABLE_B[i] = result[1];",
      "right" : "SINE_TABLE_B[i] = result[1];",
      "info" : "ExpressionStatement[54319-54347]:ExpressionStatement[54319-54347]"
    }, {
      "left" : "slowCos(x, result);",
      "right" : "slowCos(x, result);",
      "info" : "ExpressionStatement[54361-54380]:ExpressionStatement[54361-54380]"
    }, {
      "left" : "COSINE_TABLE_A[i] = result[0];",
      "right" : "COSINE_TABLE_A[i] = result[0];",
      "info" : "ExpressionStatement[54393-54423]:ExpressionStatement[54393-54423]"
    }, {
      "left" : "COSINE_TABLE_B[i] = result[1];",
      "right" : "COSINE_TABLE_B[i] = result[1];",
      "info" : "ExpressionStatement[54436-54466]:ExpressionStatement[54436-54466]"
    }, {
      "left" : "for (int i = 7; i < 14; i++)",
      "right" : "for (int i = 7; i < 14; i++)",
      "info" : "ForStatement[54571-56583]:ForStatement[54571-56583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54600-56583]:Block[54600-56583]"
    }, {
      "left" : "double xs[] = new double[2];",
      "right" : "double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[54614-54642]:VariableDeclarationStatement[54614-54642]"
    }, {
      "left" : "double ys[] = new double[2];",
      "right" : "double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[54655-54683]:VariableDeclarationStatement[54655-54683]"
    }, {
      "left" : "double as[] = new double[2];",
      "right" : "double as[] = new double[2];",
      "info" : "VariableDeclarationStatement[54696-54724]:VariableDeclarationStatement[54696-54724]"
    }, {
      "left" : "double bs[] = new double[2];",
      "right" : "double bs[] = new double[2];",
      "info" : "VariableDeclarationStatement[54737-54765]:VariableDeclarationStatement[54737-54765]"
    }, {
      "left" : "double temps[] = new double[2];",
      "right" : "double temps[] = new double[2];",
      "info" : "VariableDeclarationStatement[54778-54809]:VariableDeclarationStatement[54778-54809]"
    }, {
      "left" : "if ( (i & 1) == 0)",
      "right" : "if ( (i & 1) == 0)",
      "info" : "IfStatement[54823-56573]:IfStatement[54823-56573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54842-55590]:Block[54842-55590]"
    }, {
      "left" : "xs[0] = SINE_TABLE_A[i/2];",
      "right" : "xs[0] = SINE_TABLE_A[i/2];",
      "info" : "ExpressionStatement[54902-54928]:ExpressionStatement[54902-54928]"
    }, {
      "left" : "xs[1] = SINE_TABLE_B[i/2];",
      "right" : "xs[1] = SINE_TABLE_B[i/2];",
      "info" : "ExpressionStatement[54945-54971]:ExpressionStatement[54945-54971]"
    }, {
      "left" : "ys[0] = COSINE_TABLE_A[i/2];",
      "right" : "ys[0] = COSINE_TABLE_A[i/2];",
      "info" : "ExpressionStatement[54988-55016]:ExpressionStatement[54988-55016]"
    }, {
      "left" : "ys[1] = COSINE_TABLE_B[i/2];",
      "right" : "ys[1] = COSINE_TABLE_B[i/2];",
      "info" : "ExpressionStatement[55033-55061]:ExpressionStatement[55033-55061]"
    }, {
      "left" : "splitMult(xs, ys, result);",
      "right" : "splitMult(xs, ys, result);",
      "info" : "ExpressionStatement[55114-55140]:ExpressionStatement[55114-55140]"
    }, {
      "left" : "SINE_TABLE_A[i] = result[0] * 2.0;",
      "right" : "SINE_TABLE_A[i] = result[0] * 2.0;",
      "info" : "ExpressionStatement[55157-55191]:ExpressionStatement[55157-55191]"
    }, {
      "left" : "SINE_TABLE_B[i] = result[1] * 2.0;",
      "right" : "SINE_TABLE_B[i] = result[1] * 2.0;",
      "info" : "ExpressionStatement[55208-55242]:ExpressionStatement[55208-55242]"
    }, {
      "left" : "splitMult(ys, ys, as);",
      "right" : "splitMult(ys, ys, as);",
      "info" : "ExpressionStatement[55297-55319]:ExpressionStatement[55297-55319]"
    }, {
      "left" : "splitMult(xs, xs, temps);",
      "right" : "splitMult(xs, xs, temps);",
      "info" : "ExpressionStatement[55336-55361]:ExpressionStatement[55336-55361]"
    }, {
      "left" : "temps[0] = -temps[0];",
      "right" : "temps[0] = -temps[0];",
      "info" : "ExpressionStatement[55378-55399]:ExpressionStatement[55378-55399]"
    }, {
      "left" : "temps[1] = -temps[1];",
      "right" : "temps[1] = -temps[1];",
      "info" : "ExpressionStatement[55416-55437]:ExpressionStatement[55416-55437]"
    }, {
      "left" : "splitAdd(as, temps, result);",
      "right" : "splitAdd(as, temps, result);",
      "info" : "ExpressionStatement[55454-55482]:ExpressionStatement[55454-55482]"
    }, {
      "left" : "COSINE_TABLE_A[i] = result[0];",
      "right" : "COSINE_TABLE_A[i] = result[0];",
      "info" : "ExpressionStatement[55499-55529]:ExpressionStatement[55499-55529]"
    }, {
      "left" : "COSINE_TABLE_B[i] = result[1];",
      "right" : "COSINE_TABLE_B[i] = result[1];",
      "info" : "ExpressionStatement[55546-55576]:ExpressionStatement[55546-55576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55596-56573]:Block[55596-56573]"
    }, {
      "left" : "xs[0] = SINE_TABLE_A[i/2];",
      "right" : "xs[0] = SINE_TABLE_A[i/2];",
      "info" : "ExpressionStatement[55614-55640]:ExpressionStatement[55614-55640]"
    }, {
      "left" : "xs[1] = SINE_TABLE_B[i/2];",
      "right" : "xs[1] = SINE_TABLE_B[i/2];",
      "info" : "ExpressionStatement[55657-55683]:ExpressionStatement[55657-55683]"
    }, {
      "left" : "ys[0] = COSINE_TABLE_A[i/2];",
      "right" : "ys[0] = COSINE_TABLE_A[i/2];",
      "info" : "ExpressionStatement[55700-55728]:ExpressionStatement[55700-55728]"
    }, {
      "left" : "ys[1] = COSINE_TABLE_B[i/2];",
      "right" : "ys[1] = COSINE_TABLE_B[i/2];",
      "info" : "ExpressionStatement[55745-55773]:ExpressionStatement[55745-55773]"
    }, {
      "left" : "as[0] = SINE_TABLE_A[i/2+1];",
      "right" : "as[0] = SINE_TABLE_A[i/2+1];",
      "info" : "ExpressionStatement[55790-55818]:ExpressionStatement[55790-55818]"
    }, {
      "left" : "as[1] = SINE_TABLE_B[i/2+1];",
      "right" : "as[1] = SINE_TABLE_B[i/2+1];",
      "info" : "ExpressionStatement[55835-55863]:ExpressionStatement[55835-55863]"
    }, {
      "left" : "bs[0] = COSINE_TABLE_A[i/2+1];",
      "right" : "bs[0] = COSINE_TABLE_A[i/2+1];",
      "info" : "ExpressionStatement[55880-55910]:ExpressionStatement[55880-55910]"
    }, {
      "left" : "bs[1] = COSINE_TABLE_B[i/2+1];",
      "right" : "bs[1] = COSINE_TABLE_B[i/2+1];",
      "info" : "ExpressionStatement[55927-55957]:ExpressionStatement[55927-55957]"
    }, {
      "left" : "splitMult(xs, bs, temps);",
      "right" : "splitMult(xs, bs, temps);",
      "info" : "ExpressionStatement[56010-56035]:ExpressionStatement[56010-56035]"
    }, {
      "left" : "splitMult(ys, as, result);",
      "right" : "splitMult(ys, as, result);",
      "info" : "ExpressionStatement[56052-56078]:ExpressionStatement[56052-56078]"
    }, {
      "left" : "splitAdd(result, temps, result);",
      "right" : "splitAdd(result, temps, result);",
      "info" : "ExpressionStatement[56095-56127]:ExpressionStatement[56095-56127]"
    }, {
      "left" : "SINE_TABLE_A[i] = result[0];",
      "right" : "SINE_TABLE_A[i] = result[0];",
      "info" : "ExpressionStatement[56144-56172]:ExpressionStatement[56144-56172]"
    }, {
      "left" : "SINE_TABLE_B[i] = result[1];",
      "right" : "SINE_TABLE_B[i] = result[1];",
      "info" : "ExpressionStatement[56189-56217]:ExpressionStatement[56189-56217]"
    }, {
      "left" : "splitMult(ys, bs, result);",
      "right" : "splitMult(ys, bs, result);",
      "info" : "ExpressionStatement[56272-56298]:ExpressionStatement[56272-56298]"
    }, {
      "left" : "splitMult(xs, as, temps);",
      "right" : "splitMult(xs, as, temps);",
      "info" : "ExpressionStatement[56315-56340]:ExpressionStatement[56315-56340]"
    }, {
      "left" : "temps[0] = -temps[0];",
      "right" : "temps[0] = -temps[0];",
      "info" : "ExpressionStatement[56357-56378]:ExpressionStatement[56357-56378]"
    }, {
      "left" : "temps[1] = -temps[1];",
      "right" : "temps[1] = -temps[1];",
      "info" : "ExpressionStatement[56395-56416]:ExpressionStatement[56395-56416]"
    }, {
      "left" : "splitAdd(result, temps, result);",
      "right" : "splitAdd(result, temps, result);",
      "info" : "ExpressionStatement[56433-56465]:ExpressionStatement[56433-56465]"
    }, {
      "left" : "COSINE_TABLE_A[i] = result[0];",
      "right" : "COSINE_TABLE_A[i] = result[0];",
      "info" : "ExpressionStatement[56482-56512]:ExpressionStatement[56482-56512]"
    }, {
      "left" : "COSINE_TABLE_B[i] = result[1];",
      "right" : "COSINE_TABLE_B[i] = result[1];",
      "info" : "ExpressionStatement[56529-56559]:ExpressionStatement[56529-56559]"
    }, {
      "left" : "for (int i = 0; i < 14; i++)",
      "right" : "for (int i = 0; i < 14; i++)",
      "info" : "ForStatement[56637-57109]:ForStatement[56637-57109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56666-57109]:Block[56666-57109]"
    }, {
      "left" : "double xs[] = new double[2];",
      "right" : "double xs[] = new double[2];",
      "info" : "VariableDeclarationStatement[56680-56708]:VariableDeclarationStatement[56680-56708]"
    }, {
      "left" : "double ys[] = new double[2];",
      "right" : "double ys[] = new double[2];",
      "info" : "VariableDeclarationStatement[56721-56749]:VariableDeclarationStatement[56721-56749]"
    }, {
      "left" : "double as[] = new double[2];",
      "right" : "double as[] = new double[2];",
      "info" : "VariableDeclarationStatement[56762-56790]:VariableDeclarationStatement[56762-56790]"
    }, {
      "left" : "as[0] = COSINE_TABLE_A[i];",
      "right" : "as[0] = COSINE_TABLE_A[i];",
      "info" : "ExpressionStatement[56804-56830]:ExpressionStatement[56804-56830]"
    }, {
      "left" : "as[1] = COSINE_TABLE_B[i];",
      "right" : "as[1] = COSINE_TABLE_B[i];",
      "info" : "ExpressionStatement[56843-56869]:ExpressionStatement[56843-56869]"
    }, {
      "left" : "splitReciprocal(as, ys);",
      "right" : "splitReciprocal(as, ys);",
      "info" : "ExpressionStatement[56883-56907]:ExpressionStatement[56883-56907]"
    }, {
      "left" : "xs[0] = SINE_TABLE_A[i];",
      "right" : "xs[0] = SINE_TABLE_A[i];",
      "info" : "ExpressionStatement[56921-56945]:ExpressionStatement[56921-56945]"
    }, {
      "left" : "xs[1] = SINE_TABLE_B[i];",
      "right" : "xs[1] = SINE_TABLE_B[i];",
      "info" : "ExpressionStatement[56958-56982]:ExpressionStatement[56958-56982]"
    }, {
      "left" : "splitMult(xs, ys, as);",
      "right" : "splitMult(xs, ys, as);",
      "info" : "ExpressionStatement[56996-57018]:ExpressionStatement[56996-57018]"
    }, {
      "left" : "TANGENT_TABLE_A[i] = as[0];",
      "right" : "TANGENT_TABLE_A[i] = as[0];",
      "info" : "ExpressionStatement[57032-57059]:ExpressionStatement[57032-57059]"
    }, {
      "left" : "TANGENT_TABLE_B[i] = as[1];",
      "right" : "TANGENT_TABLE_B[i] = as[1];",
      "info" : "ExpressionStatement[57072-57099]:ExpressionStatement[57072-57099]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57302-57309]:Modifier[57302-57309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57310-57316]:Modifier[57310-57316]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[57317-57323]:PrimitiveType[57317-57323]"
    }, {
      "left" : "polySine",
      "right" : "polySine",
      "info" : "SimpleName[57324-57332]:SimpleName[57324-57332]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[57333-57347]:SingleVariableDeclaration[57333-57347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57353-57639]:Block[57353-57639]"
    }, {
      "left" : "double x2 = x*x;",
      "right" : "double x2 = x*x;",
      "info" : "VariableDeclarationStatement[57363-57379]:VariableDeclarationStatement[57363-57379]"
    }, {
      "left" : "double p = 2.7553817452272217E-6;",
      "right" : "double p = 2.7553817452272217E-6;",
      "info" : "VariableDeclarationStatement[57389-57422]:VariableDeclarationStatement[57389-57422]"
    }, {
      "left" : "p = p * x2 + -1.9841269659586505E-4;",
      "right" : "p = p * x2 + -1.9841269659586505E-4;",
      "info" : "ExpressionStatement[57431-57467]:ExpressionStatement[57431-57467]"
    }, {
      "left" : "p = p * x2 + 0.008333333333329196;",
      "right" : "p = p * x2 + 0.008333333333329196;",
      "info" : "ExpressionStatement[57476-57510]:ExpressionStatement[57476-57510]"
    }, {
      "left" : "p = p * x2 + -0.16666666666666666;",
      "right" : "p = p * x2 + -0.16666666666666666;",
      "info" : "ExpressionStatement[57519-57553]:ExpressionStatement[57519-57553]"
    }, {
      "left" : "p = p * x2 * x;",
      "right" : "p = p * x2 * x;",
      "info" : "ExpressionStatement[57599-57614]:ExpressionStatement[57599-57614]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[57624-57633]:ReturnStatement[57624-57633]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57825-57832]:Modifier[57825-57832]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57833-57839]:Modifier[57833-57839]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[57840-57846]:PrimitiveType[57840-57846]"
    }, {
      "left" : "polyCosine",
      "right" : "polyCosine",
      "info" : "SimpleName[57847-57857]:SimpleName[57847-57857]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[57858-57866]:SingleVariableDeclaration[57858-57866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57868-58109]:Block[57868-58109]"
    }, {
      "left" : "double x2 = x*x;",
      "right" : "double x2 = x*x;",
      "info" : "VariableDeclarationStatement[57878-57894]:VariableDeclarationStatement[57878-57894]"
    }, {
      "left" : "double p = 2.479773539153719E-5;",
      "right" : "double p = 2.479773539153719E-5;",
      "info" : "VariableDeclarationStatement[57904-57936]:VariableDeclarationStatement[57904-57936]"
    }, {
      "left" : "p = p * x2 + -0.0013888888689039883;",
      "right" : "p = p * x2 + -0.0013888888689039883;",
      "info" : "ExpressionStatement[57945-57981]:ExpressionStatement[57945-57981]"
    }, {
      "left" : "p = p * x2 + 0.041666666666621166;",
      "right" : "p = p * x2 + 0.041666666666621166;",
      "info" : "ExpressionStatement[57990-58024]:ExpressionStatement[57990-58024]"
    }, {
      "left" : "p = p * x2 + -0.49999999999999994;",
      "right" : "p = p * x2 + -0.49999999999999994;",
      "info" : "ExpressionStatement[58033-58067]:ExpressionStatement[58033-58067]"
    }, {
      "left" : "p *= x2;",
      "right" : "p *= x2;",
      "info" : "ExpressionStatement[58076-58084]:ExpressionStatement[58076-58084]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[58094-58103]:ReturnStatement[58094-58103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58398-58405]:Modifier[58398-58405]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58406-58412]:Modifier[58406-58412]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[58413-58419]:PrimitiveType[58413-58419]"
    }, {
      "left" : "sinQ",
      "right" : "sinQ",
      "info" : "SimpleName[58420-58424]:SimpleName[58420-58424]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[58425-58434]:SingleVariableDeclaration[58425-58434]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[58436-58445]:SingleVariableDeclaration[58436-58445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58447-61373]:Block[58447-61373]"
    }, {
      "left" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "right" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "info" : "VariableDeclarationStatement[58457-58492]:VariableDeclarationStatement[58457-58492]"
    }, {
      "left" : "final double epsilon = xa - EIGHTHES[idx];",
      "right" : "final double epsilon = xa - EIGHTHES[idx];",
      "info" : "VariableDeclarationStatement[58501-58543]:VariableDeclarationStatement[58501-58543]"
    }, {
      "left" : "final double sintA = SINE_TABLE_A[idx];",
      "right" : "final double sintA = SINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[58591-58630]:VariableDeclarationStatement[58591-58630]"
    }, {
      "left" : "final double sintB = SINE_TABLE_B[idx];",
      "right" : "final double sintB = SINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[58639-58678]:VariableDeclarationStatement[58639-58678]"
    }, {
      "left" : "final double costA = COSINE_TABLE_A[idx];",
      "right" : "final double costA = COSINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[58687-58728]:VariableDeclarationStatement[58687-58728]"
    }, {
      "left" : "final double costB = COSINE_TABLE_B[idx];",
      "right" : "final double costB = COSINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[58737-58778]:VariableDeclarationStatement[58737-58778]"
    }, {
      "left" : "double sinEpsA = epsilon;",
      "right" : "double sinEpsA = epsilon;",
      "info" : "VariableDeclarationStatement[58845-58870]:VariableDeclarationStatement[58845-58870]"
    }, {
      "left" : "double sinEpsB = polySine(epsilon);",
      "right" : "double sinEpsB = polySine(epsilon);",
      "info" : "VariableDeclarationStatement[58879-58914]:VariableDeclarationStatement[58879-58914]"
    }, {
      "left" : "final double cosEpsA = 1.0;",
      "right" : "final double cosEpsA = 1.0;",
      "info" : "VariableDeclarationStatement[58923-58950]:VariableDeclarationStatement[58923-58950]"
    }, {
      "left" : "final double cosEpsB = polyCosine(epsilon);",
      "right" : "final double cosEpsB = polyCosine(epsilon);",
      "info" : "VariableDeclarationStatement[58959-59002]:VariableDeclarationStatement[58959-59002]"
    }, {
      "left" : "final double temp = sinEpsA * 1073741824.0;",
      "right" : "final double temp = sinEpsA * 1073741824.0;",
      "info" : "VariableDeclarationStatement[59051-59094]:VariableDeclarationStatement[59051-59094]"
    }, {
      "left" : "double temp2 = (sinEpsA + temp) - temp;",
      "right" : "double temp2 = (sinEpsA + temp) - temp;",
      "info" : "VariableDeclarationStatement[59103-59142]:VariableDeclarationStatement[59103-59142]"
    }, {
      "left" : "sinEpsB +=  sinEpsA - temp2;",
      "right" : "sinEpsB +=  sinEpsA - temp2;",
      "info" : "ExpressionStatement[59151-59179]:ExpressionStatement[59151-59179]"
    }, {
      "left" : "sinEpsA = temp2;",
      "right" : "sinEpsA = temp2;",
      "info" : "ExpressionStatement[59188-59204]:ExpressionStatement[59188-59204]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[59269-59283]:VariableDeclarationStatement[59269-59283]"
    }, {
      "left" : "double a = 0;",
      "right" : "double a = 0;",
      "info" : "VariableDeclarationStatement[60090-60103]:VariableDeclarationStatement[60090-60103]"
    }, {
      "left" : "double b = 0;",
      "right" : "double b = 0;",
      "info" : "VariableDeclarationStatement[60112-60125]:VariableDeclarationStatement[60112-60125]"
    }, {
      "left" : "double t = sintA;",
      "right" : "double t = sintA;",
      "info" : "VariableDeclarationStatement[60135-60152]:VariableDeclarationStatement[60135-60152]"
    }, {
      "left" : "double c = a + t;",
      "right" : "double c = a + t;",
      "info" : "VariableDeclarationStatement[60161-60178]:VariableDeclarationStatement[60161-60178]"
    }, {
      "left" : "double d = -(c - a - t);",
      "right" : "double d = -(c - a - t);",
      "info" : "VariableDeclarationStatement[60187-60211]:VariableDeclarationStatement[60187-60211]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[60220-60226]:ExpressionStatement[60220-60226]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[60235-60245]:ExpressionStatement[60235-60245]"
    }, {
      "left" : "t = costA * sinEpsA;",
      "right" : "t = costA * sinEpsA;",
      "info" : "ExpressionStatement[60255-60275]:ExpressionStatement[60255-60275]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[60284-60294]:ExpressionStatement[60284-60294]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[60303-60320]:ExpressionStatement[60303-60320]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[60329-60335]:ExpressionStatement[60329-60335]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[60344-60354]:ExpressionStatement[60344-60354]"
    }, {
      "left" : "b = b + sintA * cosEpsB + costA * sinEpsB;",
      "right" : "b = b + sintA * cosEpsB + costA * sinEpsB;",
      "info" : "ExpressionStatement[60364-60406]:ExpressionStatement[60364-60406]"
    }, {
      "left" : "b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;",
      "right" : "b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;",
      "info" : "ExpressionStatement[60612-60680]:ExpressionStatement[60612-60680]"
    }, {
      "left" : "if (xb != 0.0)",
      "right" : "if (xb != 0.0)",
      "info" : "IfStatement[61052-61318]:IfStatement[61052-61318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61067-61318]:Block[61067-61318]"
    }, {
      "left" : "t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;",
      "right" : "t = ((costA + costB) * (cosEpsA + cosEpsB) -\n                 (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;",
      "info" : "ExpressionStatement[61081-61187]:ExpressionStatement[61081-61187]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[61226-61236]:ExpressionStatement[61226-61236]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[61249-61266]:ExpressionStatement[61249-61266]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[61279-61285]:ExpressionStatement[61279-61285]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[61298-61308]:ExpressionStatement[61298-61308]"
    }, {
      "left" : "result = a + b;",
      "right" : "result = a + b;",
      "info" : "ExpressionStatement[61328-61343]:ExpressionStatement[61328-61343]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[61353-61367]:ReturnStatement[61353-61367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61686-61693]:Modifier[61686-61693]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61694-61700]:Modifier[61694-61700]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[61701-61707]:PrimitiveType[61701-61707]"
    }, {
      "left" : "cosQ",
      "right" : "cosQ",
      "info" : "SimpleName[61708-61712]:SimpleName[61708-61712]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[61713-61722]:SingleVariableDeclaration[61713-61722]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[61724-61733]:SingleVariableDeclaration[61724-61733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61735-61967]:Block[61735-61967]"
    }, {
      "left" : "final double pi2a = 1.5707963267948966;",
      "right" : "final double pi2a = 1.5707963267948966;",
      "info" : "VariableDeclarationStatement[61745-61784]:VariableDeclarationStatement[61745-61784]"
    }, {
      "left" : "final double pi2b = 6.123233995736766E-17;",
      "right" : "final double pi2b = 6.123233995736766E-17;",
      "info" : "VariableDeclarationStatement[61793-61835]:VariableDeclarationStatement[61793-61835]"
    }, {
      "left" : "final double a = pi2a - xa;",
      "right" : "final double a = pi2a - xa;",
      "info" : "VariableDeclarationStatement[61845-61872]:VariableDeclarationStatement[61845-61872]"
    }, {
      "left" : "double b = -(a - pi2a + xa);",
      "right" : "double b = -(a - pi2a + xa);",
      "info" : "VariableDeclarationStatement[61881-61909]:VariableDeclarationStatement[61881-61909]"
    }, {
      "left" : "b += pi2b - xb;",
      "right" : "b += pi2b - xb;",
      "info" : "ExpressionStatement[61918-61933]:ExpressionStatement[61918-61933]"
    }, {
      "left" : "return sinQ(a, b);",
      "right" : "return sinQ(a, b);",
      "info" : "ReturnStatement[61943-61961]:ReturnStatement[61943-61961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62390-62397]:Modifier[62390-62397]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62398-62404]:Modifier[62398-62404]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[62405-62411]:PrimitiveType[62405-62411]"
    }, {
      "left" : "tanQ",
      "right" : "tanQ",
      "info" : "SimpleName[62412-62416]:SimpleName[62412-62416]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[62417-62426]:SingleVariableDeclaration[62417-62426]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[62428-62437]:SingleVariableDeclaration[62428-62437]"
    }, {
      "left" : "boolean cotanFlag",
      "right" : "boolean cotanFlag",
      "info" : "SingleVariableDeclaration[62439-62456]:SingleVariableDeclaration[62439-62456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62458-66491]:Block[62458-66491]"
    }, {
      "left" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "right" : "int idx = (int) ((xa * 8.0) + 0.5);",
      "info" : "VariableDeclarationStatement[62469-62504]:VariableDeclarationStatement[62469-62504]"
    }, {
      "left" : "final double epsilon = xa - EIGHTHES[idx];",
      "right" : "final double epsilon = xa - EIGHTHES[idx];",
      "info" : "VariableDeclarationStatement[62513-62555]:VariableDeclarationStatement[62513-62555]"
    }, {
      "left" : "final double sintA = SINE_TABLE_A[idx];",
      "right" : "final double sintA = SINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[62603-62642]:VariableDeclarationStatement[62603-62642]"
    }, {
      "left" : "final double sintB = SINE_TABLE_B[idx];",
      "right" : "final double sintB = SINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[62651-62690]:VariableDeclarationStatement[62651-62690]"
    }, {
      "left" : "final double costA = COSINE_TABLE_A[idx];",
      "right" : "final double costA = COSINE_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[62699-62740]:VariableDeclarationStatement[62699-62740]"
    }, {
      "left" : "final double costB = COSINE_TABLE_B[idx];",
      "right" : "final double costB = COSINE_TABLE_B[idx];",
      "info" : "VariableDeclarationStatement[62749-62790]:VariableDeclarationStatement[62749-62790]"
    }, {
      "left" : "double sinEpsA = epsilon;",
      "right" : "double sinEpsA = epsilon;",
      "info" : "VariableDeclarationStatement[62857-62882]:VariableDeclarationStatement[62857-62882]"
    }, {
      "left" : "double sinEpsB = polySine(epsilon);",
      "right" : "double sinEpsB = polySine(epsilon);",
      "info" : "VariableDeclarationStatement[62891-62926]:VariableDeclarationStatement[62891-62926]"
    }, {
      "left" : "final double cosEpsA = 1.0;",
      "right" : "final double cosEpsA = 1.0;",
      "info" : "VariableDeclarationStatement[62935-62962]:VariableDeclarationStatement[62935-62962]"
    }, {
      "left" : "final double cosEpsB = polyCosine(epsilon);",
      "right" : "final double cosEpsB = polyCosine(epsilon);",
      "info" : "VariableDeclarationStatement[62971-63014]:VariableDeclarationStatement[62971-63014]"
    }, {
      "left" : "double temp = sinEpsA * 1073741824.0;",
      "right" : "double temp = sinEpsA * 1073741824.0;",
      "info" : "VariableDeclarationStatement[63063-63100]:VariableDeclarationStatement[63063-63100]"
    }, {
      "left" : "double temp2 = (sinEpsA + temp) - temp;",
      "right" : "double temp2 = (sinEpsA + temp) - temp;",
      "info" : "VariableDeclarationStatement[63109-63148]:VariableDeclarationStatement[63109-63148]"
    }, {
      "left" : "sinEpsB +=  sinEpsA - temp2;",
      "right" : "sinEpsB +=  sinEpsA - temp2;",
      "info" : "ExpressionStatement[63157-63185]:ExpressionStatement[63157-63185]"
    }, {
      "left" : "sinEpsA = temp2;",
      "right" : "sinEpsA = temp2;",
      "info" : "ExpressionStatement[63194-63210]:ExpressionStatement[63194-63210]"
    }, {
      "left" : "double a = 0;",
      "right" : "double a = 0;",
      "info" : "VariableDeclarationStatement[64073-64086]:VariableDeclarationStatement[64073-64086]"
    }, {
      "left" : "double b = 0;",
      "right" : "double b = 0;",
      "info" : "VariableDeclarationStatement[64095-64108]:VariableDeclarationStatement[64095-64108]"
    }, {
      "left" : "double t = sintA;",
      "right" : "double t = sintA;",
      "info" : "VariableDeclarationStatement[64142-64159]:VariableDeclarationStatement[64142-64159]"
    }, {
      "left" : "double c = a + t;",
      "right" : "double c = a + t;",
      "info" : "VariableDeclarationStatement[64168-64185]:VariableDeclarationStatement[64168-64185]"
    }, {
      "left" : "double d = -(c - a - t);",
      "right" : "double d = -(c - a - t);",
      "info" : "VariableDeclarationStatement[64194-64218]:VariableDeclarationStatement[64194-64218]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[64227-64233]:ExpressionStatement[64227-64233]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[64242-64252]:ExpressionStatement[64242-64252]"
    }, {
      "left" : "t = costA*sinEpsA;",
      "right" : "t = costA*sinEpsA;",
      "info" : "ExpressionStatement[64262-64280]:ExpressionStatement[64262-64280]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[64289-64299]:ExpressionStatement[64289-64299]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[64308-64325]:ExpressionStatement[64308-64325]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[64334-64340]:ExpressionStatement[64334-64340]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[64349-64359]:ExpressionStatement[64349-64359]"
    }, {
      "left" : "b = b + sintA*cosEpsB + costA*sinEpsB;",
      "right" : "b = b + sintA*cosEpsB + costA*sinEpsB;",
      "info" : "ExpressionStatement[64369-64407]:ExpressionStatement[64369-64407]"
    }, {
      "left" : "b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;",
      "right" : "b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;",
      "info" : "ExpressionStatement[64416-64478]:ExpressionStatement[64416-64478]"
    }, {
      "left" : "double sina = a + b;",
      "right" : "double sina = a + b;",
      "info" : "VariableDeclarationStatement[64488-64508]:VariableDeclarationStatement[64488-64508]"
    }, {
      "left" : "double sinb = -(sina - a - b);",
      "right" : "double sinb = -(sina - a - b);",
      "info" : "VariableDeclarationStatement[64517-64547]:VariableDeclarationStatement[64517-64547]"
    }, {
      "left" : "a = b = c = d = 0.0;",
      "right" : "a = b = c = d = 0.0;",
      "info" : "ExpressionStatement[64584-64604]:ExpressionStatement[64584-64604]"
    }, {
      "left" : "t = costA*cosEpsA;",
      "right" : "t = costA*cosEpsA;",
      "info" : "ExpressionStatement[64614-64632]:ExpressionStatement[64614-64632]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[64641-64651]:ExpressionStatement[64641-64651]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[64660-64677]:ExpressionStatement[64660-64677]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[64686-64692]:ExpressionStatement[64686-64692]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[64701-64711]:ExpressionStatement[64701-64711]"
    }, {
      "left" : "t = -sintA*sinEpsA;",
      "right" : "t = -sintA*sinEpsA;",
      "info" : "ExpressionStatement[64721-64740]:ExpressionStatement[64721-64740]"
    }, {
      "left" : "c = a + t;",
      "right" : "c = a + t;",
      "info" : "ExpressionStatement[64749-64759]:ExpressionStatement[64749-64759]"
    }, {
      "left" : "d = -(c - a - t);",
      "right" : "d = -(c - a - t);",
      "info" : "ExpressionStatement[64768-64785]:ExpressionStatement[64768-64785]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[64794-64800]:ExpressionStatement[64794-64800]"
    }, {
      "left" : "b = b + d;",
      "right" : "b = b + d;",
      "info" : "ExpressionStatement[64809-64819]:ExpressionStatement[64809-64819]"
    }, {
      "left" : "b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;",
      "right" : "b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;",
      "info" : "ExpressionStatement[64829-64883]:ExpressionStatement[64829-64883]"
    }, {
      "left" : "b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);",
      "right" : "b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);",
      "info" : "ExpressionStatement[64892-64948]:ExpressionStatement[64892-64948]"
    }, {
      "left" : "double cosa = a + b;",
      "right" : "double cosa = a + b;",
      "info" : "VariableDeclarationStatement[64958-64978]:VariableDeclarationStatement[64958-64978]"
    }, {
      "left" : "double cosb = -(cosa - a - b);",
      "right" : "double cosb = -(cosa - a - b);",
      "info" : "VariableDeclarationStatement[64987-65017]:VariableDeclarationStatement[64987-65017]"
    }, {
      "left" : "if (cotanFlag)",
      "right" : "if (cotanFlag)",
      "info" : "IfStatement[65027-65175]:IfStatement[65027-65175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65042-65175]:Block[65042-65175]"
    }, {
      "left" : "double tmp;",
      "right" : "double tmp;",
      "info" : "VariableDeclarationStatement[65056-65067]:VariableDeclarationStatement[65056-65067]"
    }, {
      "left" : "tmp = cosa;",
      "right" : "tmp = cosa;",
      "info" : "ExpressionStatement[65080-65091]:ExpressionStatement[65080-65091]"
    }, {
      "left" : "cosa = sina;",
      "right" : "cosa = sina;",
      "info" : "ExpressionStatement[65092-65104]:ExpressionStatement[65092-65104]"
    }, {
      "left" : "sina = tmp;",
      "right" : "sina = tmp;",
      "info" : "ExpressionStatement[65105-65116]:ExpressionStatement[65105-65116]"
    }, {
      "left" : "tmp = cosb;",
      "right" : "tmp = cosb;",
      "info" : "ExpressionStatement[65129-65140]:ExpressionStatement[65129-65140]"
    }, {
      "left" : "cosb = sinb;",
      "right" : "cosb = sinb;",
      "info" : "ExpressionStatement[65141-65153]:ExpressionStatement[65141-65153]"
    }, {
      "left" : "sinb = tmp;",
      "right" : "sinb = tmp;",
      "info" : "ExpressionStatement[65154-65165]:ExpressionStatement[65154-65165]"
    }, {
      "left" : "double est = sina/cosa;",
      "right" : "double est = sina/cosa;",
      "info" : "VariableDeclarationStatement[65486-65509]:VariableDeclarationStatement[65486-65509]"
    }, {
      "left" : "temp = est * 1073741824.0;",
      "right" : "temp = est * 1073741824.0;",
      "info" : "ExpressionStatement[65599-65625]:ExpressionStatement[65599-65625]"
    }, {
      "left" : "double esta = (est + temp) - temp;",
      "right" : "double esta = (est + temp) - temp;",
      "info" : "VariableDeclarationStatement[65634-65668]:VariableDeclarationStatement[65634-65668]"
    }, {
      "left" : "double estb =  est - esta;",
      "right" : "double estb =  est - esta;",
      "info" : "VariableDeclarationStatement[65677-65703]:VariableDeclarationStatement[65677-65703]"
    }, {
      "left" : "temp = cosa * 1073741824.0;",
      "right" : "temp = cosa * 1073741824.0;",
      "info" : "ExpressionStatement[65713-65740]:ExpressionStatement[65713-65740]"
    }, {
      "left" : "double cosaa = (cosa + temp) - temp;",
      "right" : "double cosaa = (cosa + temp) - temp;",
      "info" : "VariableDeclarationStatement[65749-65785]:VariableDeclarationStatement[65749-65785]"
    }, {
      "left" : "double cosab =  cosa - cosaa;",
      "right" : "double cosab =  cosa - cosaa;",
      "info" : "VariableDeclarationStatement[65794-65823]:VariableDeclarationStatement[65794-65823]"
    }, {
      "left" : "double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;",
      "right" : "double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;",
      "info" : "VariableDeclarationStatement[65917-65994]:VariableDeclarationStatement[65917-65994]"
    }, {
      "left" : "err += sinb/cosa;",
      "right" : "err += sinb/cosa;",
      "info" : "ExpressionStatement[66040-66057]:ExpressionStatement[66040-66057]"
    }, {
      "left" : "err += -sina * cosb / cosa / cosa;",
      "right" : "err += -sina * cosb / cosa / cosa;",
      "info" : "ExpressionStatement[66115-66149]:ExpressionStatement[66115-66149]"
    }, {
      "left" : "if (xb != 0.0)",
      "right" : "if (xb != 0.0)",
      "info" : "IfStatement[66191-66460]:IfStatement[66191-66460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66206-66460]:Block[66206-66460]"
    }, {
      "left" : "double xbadj = xb + est*est*xb;",
      "right" : "double xbadj = xb + est*est*xb;",
      "info" : "VariableDeclarationStatement[66317-66348]:VariableDeclarationStatement[66317-66348]"
    }, {
      "left" : "if (cotanFlag)",
      "right" : "if (cotanFlag)",
      "info" : "IfStatement[66361-66423]:IfStatement[66361-66423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66376-66423]:Block[66376-66423]"
    }, {
      "left" : "xbadj = -xbadj;",
      "right" : "xbadj = -xbadj;",
      "info" : "ExpressionStatement[66394-66409]:ExpressionStatement[66394-66409]"
    }, {
      "left" : "err += xbadj;",
      "right" : "err += xbadj;",
      "info" : "ExpressionStatement[66437-66450]:ExpressionStatement[66437-66450]"
    }, {
      "left" : "return est+err;",
      "right" : "return est+err;",
      "info" : "ReturnStatement[66470-66485]:ReturnStatement[66470-66485]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67004-67011]:Modifier[67004-67011]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67012-67018]:Modifier[67012-67018]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67019-67023]:PrimitiveType[67019-67023]"
    }, {
      "left" : "reducePayneHanek",
      "right" : "reducePayneHanek",
      "info" : "SimpleName[67024-67040]:SimpleName[67024-67040]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[67041-67049]:SingleVariableDeclaration[67041-67049]"
    }, {
      "left" : "double result[]",
      "right" : "double result[]",
      "info" : "SingleVariableDeclaration[67051-67066]:SingleVariableDeclaration[67051-67066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67072-72980]:Block[67072-72980]"
    }, {
      "left" : "long inbits = Double.doubleToLongBits(x);",
      "right" : "long inbits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[67125-67166]:VariableDeclarationStatement[67125-67166]"
    }, {
      "left" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "VariableDeclarationStatement[67175-67228]:VariableDeclarationStatement[67175-67228]"
    }, {
      "left" : "inbits &= 0x000fffffffffffffL;",
      "right" : "inbits &= 0x000fffffffffffffL;",
      "info" : "ExpressionStatement[67290-67320]:ExpressionStatement[67290-67320]"
    }, {
      "left" : "inbits |= 0x0010000000000000L;",
      "right" : "inbits |= 0x0010000000000000L;",
      "info" : "ExpressionStatement[67329-67359]:ExpressionStatement[67329-67359]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[67425-67436]:ExpressionStatement[67425-67436]"
    }, {
      "left" : "inbits <<= 11;",
      "right" : "inbits <<= 11;",
      "info" : "ExpressionStatement[67445-67459]:ExpressionStatement[67445-67459]"
    }, {
      "left" : "long shpi0;",
      "right" : "long shpi0;",
      "info" : "VariableDeclarationStatement[67537-67548]:VariableDeclarationStatement[67537-67548]"
    }, {
      "left" : "long shpiA;",
      "right" : "long shpiA;",
      "info" : "VariableDeclarationStatement[67557-67568]:VariableDeclarationStatement[67557-67568]"
    }, {
      "left" : "long shpiB;",
      "right" : "long shpiB;",
      "info" : "VariableDeclarationStatement[67577-67588]:VariableDeclarationStatement[67577-67588]"
    }, {
      "left" : "int idx = exponent >> 6;",
      "right" : "int idx = exponent >> 6;",
      "info" : "VariableDeclarationStatement[67597-67621]:VariableDeclarationStatement[67597-67621]"
    }, {
      "left" : "int shift = exponent - (idx << 6);",
      "right" : "int shift = exponent - (idx << 6);",
      "info" : "VariableDeclarationStatement[67630-67664]:VariableDeclarationStatement[67630-67664]"
    }, {
      "left" : "if (shift != 0)",
      "right" : "if (shift != 0)",
      "info" : "IfStatement[67674-68133]:IfStatement[67674-68133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67690-67987]:Block[67690-67987]"
    }, {
      "left" : "shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);",
      "right" : "shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);",
      "info" : "ExpressionStatement[67704-67757]:ExpressionStatement[67704-67757]"
    }, {
      "left" : "shpi0 |= RECIP_2PI[idx] >>> (64-shift);",
      "right" : "shpi0 |= RECIP_2PI[idx] >>> (64-shift);",
      "info" : "ExpressionStatement[67770-67809]:ExpressionStatement[67770-67809]"
    }, {
      "left" : "shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));",
      "right" : "shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));",
      "info" : "ExpressionStatement[67822-67892]:ExpressionStatement[67822-67892]"
    }, {
      "left" : "shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));",
      "right" : "shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));",
      "info" : "ExpressionStatement[67905-67977]:ExpressionStatement[67905-67977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67993-68133]:Block[67993-68133]"
    }, {
      "left" : "shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];",
      "right" : "shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];",
      "info" : "ExpressionStatement[68007-68049]:ExpressionStatement[68007-68049]"
    }, {
      "left" : "shpiA = RECIP_2PI[idx];",
      "right" : "shpiA = RECIP_2PI[idx];",
      "info" : "ExpressionStatement[68062-68085]:ExpressionStatement[68062-68085]"
    }, {
      "left" : "shpiB = RECIP_2PI[idx+1];",
      "right" : "shpiB = RECIP_2PI[idx+1];",
      "info" : "ExpressionStatement[68098-68123]:ExpressionStatement[68098-68123]"
    }, {
      "left" : "long a = inbits >>> 32;",
      "right" : "long a = inbits >>> 32;",
      "info" : "VariableDeclarationStatement[68181-68204]:VariableDeclarationStatement[68181-68204]"
    }, {
      "left" : "long b = inbits & 0xffffffffL;",
      "right" : "long b = inbits & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[68213-68243]:VariableDeclarationStatement[68213-68243]"
    }, {
      "left" : "long c = shpiA >>> 32;",
      "right" : "long c = shpiA >>> 32;",
      "info" : "VariableDeclarationStatement[68253-68275]:VariableDeclarationStatement[68253-68275]"
    }, {
      "left" : "long d = shpiA & 0xffffffffL;",
      "right" : "long d = shpiA & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[68284-68313]:VariableDeclarationStatement[68284-68313]"
    }, {
      "left" : "long ac = a * c;",
      "right" : "long ac = a * c;",
      "info" : "VariableDeclarationStatement[68323-68339]:VariableDeclarationStatement[68323-68339]"
    }, {
      "left" : "long bd = b * d;",
      "right" : "long bd = b * d;",
      "info" : "VariableDeclarationStatement[68348-68364]:VariableDeclarationStatement[68348-68364]"
    }, {
      "left" : "long bc = b * c;",
      "right" : "long bc = b * c;",
      "info" : "VariableDeclarationStatement[68373-68389]:VariableDeclarationStatement[68373-68389]"
    }, {
      "left" : "long ad = a * d;",
      "right" : "long ad = a * d;",
      "info" : "VariableDeclarationStatement[68398-68414]:VariableDeclarationStatement[68398-68414]"
    }, {
      "left" : "long prodB = bd + (ad << 32);",
      "right" : "long prodB = bd + (ad << 32);",
      "info" : "VariableDeclarationStatement[68424-68453]:VariableDeclarationStatement[68424-68453]"
    }, {
      "left" : "long prodA = ac + (ad >>> 32);",
      "right" : "long prodA = ac + (ad >>> 32);",
      "info" : "VariableDeclarationStatement[68462-68492]:VariableDeclarationStatement[68462-68492]"
    }, {
      "left" : "boolean bita = (bd & 0x8000000000000000L) != 0;",
      "right" : "boolean bita = (bd & 0x8000000000000000L) != 0;",
      "info" : "VariableDeclarationStatement[68502-68549]:VariableDeclarationStatement[68502-68549]"
    }, {
      "left" : "boolean bitb = (ad & 0x80000000L ) != 0;",
      "right" : "boolean bitb = (ad & 0x80000000L ) != 0;",
      "info" : "VariableDeclarationStatement[68558-68598]:VariableDeclarationStatement[68558-68598]"
    }, {
      "left" : "boolean bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "boolean bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "VariableDeclarationStatement[68607-68659]:VariableDeclarationStatement[68607-68659]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[68689-68790]:IfStatement[68689-68790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68758-68790]:Block[68758-68790]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[68772-68780]:ExpressionStatement[68772-68780]"
    }, {
      "left" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[68800-68842]:ExpressionStatement[68800-68842]"
    }, {
      "left" : "bitb = (bc & 0x80000000L ) != 0;",
      "right" : "bitb = (bc & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[68851-68883]:ExpressionStatement[68851-68883]"
    }, {
      "left" : "prodB = prodB + (bc << 32);",
      "right" : "prodB = prodB + (bc << 32);",
      "info" : "ExpressionStatement[68893-68920]:ExpressionStatement[68893-68920]"
    }, {
      "left" : "prodA = prodA + (bc >>> 32);",
      "right" : "prodA = prodA + (bc >>> 32);",
      "info" : "ExpressionStatement[68929-68957]:ExpressionStatement[68929-68957]"
    }, {
      "left" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[68967-69011]:ExpressionStatement[68967-69011]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[69041-69142]:IfStatement[69041-69142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69110-69142]:Block[69110-69142]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[69124-69132]:ExpressionStatement[69124-69132]"
    }, {
      "left" : "c = shpiB >>> 32;",
      "right" : "c = shpiB >>> 32;",
      "info" : "ExpressionStatement[69190-69207]:ExpressionStatement[69190-69207]"
    }, {
      "left" : "d = shpiB & 0xffffffffL;",
      "right" : "d = shpiB & 0xffffffffL;",
      "info" : "ExpressionStatement[69216-69240]:ExpressionStatement[69216-69240]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[69249-69260]:ExpressionStatement[69249-69260]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[69269-69280]:ExpressionStatement[69269-69280]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[69289-69300]:ExpressionStatement[69289-69300]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[69338-69367]:ExpressionStatement[69338-69367]"
    }, {
      "left" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bita = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[69377-69419]:ExpressionStatement[69377-69419]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[69428-69468]:ExpressionStatement[69428-69468]"
    }, {
      "left" : "prodB += ac;",
      "right" : "prodB += ac;",
      "info" : "ExpressionStatement[69477-69489]:ExpressionStatement[69477-69489]"
    }, {
      "left" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prodB & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[69498-69542]:ExpressionStatement[69498-69542]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[69571-69672]:IfStatement[69571-69672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69640-69672]:Block[69640-69672]"
    }, {
      "left" : "prodA++;",
      "right" : "prodA++;",
      "info" : "ExpressionStatement[69654-69662]:ExpressionStatement[69654-69662]"
    }, {
      "left" : "c = shpi0 >>> 32;",
      "right" : "c = shpi0 >>> 32;",
      "info" : "ExpressionStatement[69714-69731]:ExpressionStatement[69714-69731]"
    }, {
      "left" : "d = shpi0 & 0xffffffffL;",
      "right" : "d = shpi0 & 0xffffffffL;",
      "info" : "ExpressionStatement[69740-69764]:ExpressionStatement[69740-69764]"
    }, {
      "left" : "bd = b * d;",
      "right" : "bd = b * d;",
      "info" : "ExpressionStatement[69774-69785]:ExpressionStatement[69774-69785]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[69794-69805]:ExpressionStatement[69794-69805]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[69814-69825]:ExpressionStatement[69814-69825]"
    }, {
      "left" : "prodA += bd + ((bc + ad) << 32);",
      "right" : "prodA += bd + ((bc + ad) << 32);",
      "info" : "ExpressionStatement[69835-69867]:ExpressionStatement[69835-69867]"
    }, {
      "left" : "int intPart = (int)(prodA >>> 62);",
      "right" : "int intPart = (int)(prodA >>> 62);",
      "info" : "VariableDeclarationStatement[70241-70275]:VariableDeclarationStatement[70241-70275]"
    }, {
      "left" : "prodA <<= 2;",
      "right" : "prodA <<= 2;",
      "info" : "ExpressionStatement[70313-70325]:ExpressionStatement[70313-70325]"
    }, {
      "left" : "prodA |= prodB >>> 62;",
      "right" : "prodA |= prodB >>> 62;",
      "info" : "ExpressionStatement[70334-70356]:ExpressionStatement[70334-70356]"
    }, {
      "left" : "prodB <<= 2;",
      "right" : "prodB <<= 2;",
      "info" : "ExpressionStatement[70365-70377]:ExpressionStatement[70365-70377]"
    }, {
      "left" : "a = prodA >>> 32;",
      "right" : "a = prodA >>> 32;",
      "info" : "ExpressionStatement[70418-70435]:ExpressionStatement[70418-70435]"
    }, {
      "left" : "b = prodA & 0xffffffffL;",
      "right" : "b = prodA & 0xffffffffL;",
      "info" : "ExpressionStatement[70444-70468]:ExpressionStatement[70444-70468]"
    }, {
      "left" : "c = PI_O_4_BITS[0] >>> 32;",
      "right" : "c = PI_O_4_BITS[0] >>> 32;",
      "info" : "ExpressionStatement[70478-70504]:ExpressionStatement[70478-70504]"
    }, {
      "left" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "info" : "ExpressionStatement[70513-70546]:ExpressionStatement[70513-70546]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[70556-70567]:ExpressionStatement[70556-70567]"
    }, {
      "left" : "bd = b * d;",
      "right" : "bd = b * d;",
      "info" : "ExpressionStatement[70576-70587]:ExpressionStatement[70576-70587]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[70596-70607]:ExpressionStatement[70596-70607]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[70616-70627]:ExpressionStatement[70616-70627]"
    }, {
      "left" : "long prod2B = bd + (ad << 32);",
      "right" : "long prod2B = bd + (ad << 32);",
      "info" : "VariableDeclarationStatement[70637-70667]:VariableDeclarationStatement[70637-70667]"
    }, {
      "left" : "long prod2A = ac + (ad >>> 32);",
      "right" : "long prod2A = ac + (ad >>> 32);",
      "info" : "VariableDeclarationStatement[70676-70707]:VariableDeclarationStatement[70676-70707]"
    }, {
      "left" : "bita = (bd & 0x8000000000000000L) != 0;",
      "right" : "bita = (bd & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[70717-70756]:ExpressionStatement[70717-70756]"
    }, {
      "left" : "bitb = (ad & 0x80000000L ) != 0;",
      "right" : "bitb = (ad & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[70765-70797]:ExpressionStatement[70765-70797]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[70806-70851]:ExpressionStatement[70806-70851]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[70881-70983]:IfStatement[70881-70983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70950-70983]:Block[70950-70983]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[70964-70973]:ExpressionStatement[70964-70973]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[70993-71036]:ExpressionStatement[70993-71036]"
    }, {
      "left" : "bitb = (bc & 0x80000000L ) != 0;",
      "right" : "bitb = (bc & 0x80000000L ) != 0;",
      "info" : "ExpressionStatement[71045-71077]:ExpressionStatement[71045-71077]"
    }, {
      "left" : "prod2B = prod2B + (bc << 32);",
      "right" : "prod2B = prod2B + (bc << 32);",
      "info" : "ExpressionStatement[71087-71116]:ExpressionStatement[71087-71116]"
    }, {
      "left" : "prod2A = prod2A + (bc >>> 32);",
      "right" : "prod2A = prod2A + (bc >>> 32);",
      "info" : "ExpressionStatement[71125-71155]:ExpressionStatement[71125-71155]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[71165-71210]:ExpressionStatement[71165-71210]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[71240-71342]:IfStatement[71240-71342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71309-71342]:Block[71309-71342]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[71323-71332]:ExpressionStatement[71323-71332]"
    }, {
      "left" : "c = PI_O_4_BITS[1] >>> 32;",
      "right" : "c = PI_O_4_BITS[1] >>> 32;",
      "info" : "ExpressionStatement[71396-71422]:ExpressionStatement[71396-71422]"
    }, {
      "left" : "d = PI_O_4_BITS[1] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[1] & 0xffffffffL;",
      "info" : "ExpressionStatement[71431-71464]:ExpressionStatement[71431-71464]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[71473-71484]:ExpressionStatement[71473-71484]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[71493-71504]:ExpressionStatement[71493-71504]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[71513-71524]:ExpressionStatement[71513-71524]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[71562-71591]:ExpressionStatement[71562-71591]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[71601-71644]:ExpressionStatement[71601-71644]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[71653-71693]:ExpressionStatement[71653-71693]"
    }, {
      "left" : "prod2B += ac;",
      "right" : "prod2B += ac;",
      "info" : "ExpressionStatement[71702-71715]:ExpressionStatement[71702-71715]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[71724-71769]:ExpressionStatement[71724-71769]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[71798-71900]:IfStatement[71798-71900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71867-71900]:Block[71867-71900]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[71881-71890]:ExpressionStatement[71881-71890]"
    }, {
      "left" : "a = prodB >>> 32;",
      "right" : "a = prodB >>> 32;",
      "info" : "ExpressionStatement[71955-71972]:ExpressionStatement[71955-71972]"
    }, {
      "left" : "b = prodB & 0xffffffffL;",
      "right" : "b = prodB & 0xffffffffL;",
      "info" : "ExpressionStatement[71981-72005]:ExpressionStatement[71981-72005]"
    }, {
      "left" : "c = PI_O_4_BITS[0] >>> 32;",
      "right" : "c = PI_O_4_BITS[0] >>> 32;",
      "info" : "ExpressionStatement[72014-72040]:ExpressionStatement[72014-72040]"
    }, {
      "left" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "right" : "d = PI_O_4_BITS[0] & 0xffffffffL;",
      "info" : "ExpressionStatement[72049-72082]:ExpressionStatement[72049-72082]"
    }, {
      "left" : "ac = a * c;",
      "right" : "ac = a * c;",
      "info" : "ExpressionStatement[72091-72102]:ExpressionStatement[72091-72102]"
    }, {
      "left" : "bc = b * c;",
      "right" : "bc = b * c;",
      "info" : "ExpressionStatement[72111-72122]:ExpressionStatement[72111-72122]"
    }, {
      "left" : "ad = a * d;",
      "right" : "ad = a * d;",
      "info" : "ExpressionStatement[72131-72142]:ExpressionStatement[72131-72142]"
    }, {
      "left" : "ac = ac + ((bc + ad) >>> 32);",
      "right" : "ac = ac + ((bc + ad) >>> 32);",
      "info" : "ExpressionStatement[72180-72209]:ExpressionStatement[72180-72209]"
    }, {
      "left" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bita = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[72219-72262]:ExpressionStatement[72219-72262]"
    }, {
      "left" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "right" : "bitb = (ac & 0x8000000000000000L ) != 0;",
      "info" : "ExpressionStatement[72271-72311]:ExpressionStatement[72271-72311]"
    }, {
      "left" : "prod2B += ac;",
      "right" : "prod2B += ac;",
      "info" : "ExpressionStatement[72320-72333]:ExpressionStatement[72320-72333]"
    }, {
      "left" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "right" : "bitsum = (prod2B & 0x8000000000000000L) != 0;",
      "info" : "ExpressionStatement[72342-72387]:ExpressionStatement[72342-72387]"
    }, {
      "left" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "right" : "if ( (bita && bitb) ||\n                ((bita || bitb) && !bitsum))",
      "info" : "IfStatement[72416-72518]:IfStatement[72416-72518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72485-72518]:Block[72485-72518]"
    }, {
      "left" : "prod2A++;",
      "right" : "prod2A++;",
      "info" : "ExpressionStatement[72499-72508]:ExpressionStatement[72499-72508]"
    }, {
      "left" : "double tmpA = (prod2A >>> 12) / 4503599627370496.0;",
      "right" : "double tmpA = (prod2A >>> 12) / 4503599627370496.0;",
      "info" : "VariableDeclarationStatement[72560-72611]:VariableDeclarationStatement[72560-72611]"
    }, {
      "left" : "double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0;",
      "right" : "double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0;",
      "info" : "VariableDeclarationStatement[72643-72745]:VariableDeclarationStatement[72643-72745]"
    }, {
      "left" : "double sumA = tmpA + tmpB;",
      "right" : "double sumA = tmpA + tmpB;",
      "info" : "VariableDeclarationStatement[72767-72793]:VariableDeclarationStatement[72767-72793]"
    }, {
      "left" : "double sumB = -(sumA - tmpA - tmpB);",
      "right" : "double sumB = -(sumA - tmpA - tmpB);",
      "info" : "VariableDeclarationStatement[72802-72838]:VariableDeclarationStatement[72802-72838]"
    }, {
      "left" : "result[0] = intPart;",
      "right" : "result[0] = intPart;",
      "info" : "ExpressionStatement[72890-72910]:ExpressionStatement[72890-72910]"
    }, {
      "left" : "result[1] = sumA * 2.0;",
      "right" : "result[1] = sumA * 2.0;",
      "info" : "ExpressionStatement[72919-72942]:ExpressionStatement[72919-72942]"
    }, {
      "left" : "result[2] = sumB * 2.0;",
      "right" : "result[2] = sumB * 2.0;",
      "info" : "ExpressionStatement[72951-72974]:ExpressionStatement[72951-72974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73074-73080]:Modifier[73074-73080]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73081-73087]:Modifier[73081-73087]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[73088-73094]:PrimitiveType[73088-73094]"
    }, {
      "left" : "sin",
      "right" : "sin",
      "info" : "SimpleName[73095-73098]:SimpleName[73095-73098]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[73099-73107]:SingleVariableDeclaration[73099-73107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73109-75664]:Block[73109-75664]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[73119-73144]:VariableDeclarationStatement[73119-73144]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[73153-73170]:VariableDeclarationStatement[73153-73170]"
    }, {
      "left" : "double xa;",
      "right" : "double xa;",
      "info" : "VariableDeclarationStatement[73179-73189]:VariableDeclarationStatement[73179-73189]"
    }, {
      "left" : "double xb = 0.0;",
      "right" : "double xb = 0.0;",
      "info" : "VariableDeclarationStatement[73198-73214]:VariableDeclarationStatement[73198-73214]"
    }, {
      "left" : "xa = x;",
      "right" : "xa = x;",
      "info" : "ExpressionStatement[73271-73278]:ExpressionStatement[73271-73278]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[73287-73360]:IfStatement[73287-73360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73298-73360]:Block[73298-73360]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[73312-73328]:ExpressionStatement[73312-73328]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[73341-73350]:ExpressionStatement[73341-73350]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[73417-73590]:IfStatement[73417-73590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73432-73590]:Block[73432-73590]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[73446-73485]:VariableDeclarationStatement[73446-73485]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[73498-73556]:IfStatement[73498-73556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73512-73556]:Block[73512-73556]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[73530-73542]:ReturnStatement[73530-73542]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[73569-73580]:ReturnStatement[73569-73580]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[73600-73690]:IfStatement[73600-73690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73648-73690]:Block[73648-73690]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[73662-73680]:ReturnStatement[73662-73680]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[73745-75256]:IfStatement[73745-75256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73765-74122]:Block[73765-74122]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[73901-73940]:VariableDeclarationStatement[73901-73940]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[73953-73989]:ExpressionStatement[73953-73989]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[74002-74042]:ExpressionStatement[74002-74042]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[74055-74077]:ExpressionStatement[74055-74077]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[74090-74112]:ExpressionStatement[74090-74112]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[74128-75256]:IfStatement[74128-75256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74157-75256]:Block[74157-75256]"
    }, {
      "left" : "int k = (int)(xa * 0.6366197723675814);",
      "right" : "int k = (int)(xa * 0.6366197723675814);",
      "info" : "VariableDeclarationStatement[74314-74353]:VariableDeclarationStatement[74314-74353]"
    }, {
      "left" : "double remA;",
      "right" : "double remA;",
      "info" : "VariableDeclarationStatement[74400-74412]:VariableDeclarationStatement[74400-74412]"
    }, {
      "left" : "double remB;",
      "right" : "double remB;",
      "info" : "VariableDeclarationStatement[74425-74437]:VariableDeclarationStatement[74425-74437]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[74450-75170]:WhileStatement[74450-75170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74463-75170]:Block[74463-75170]"
    }, {
      "left" : "double a = -k * 1.570796251296997;",
      "right" : "double a = -k * 1.570796251296997;",
      "info" : "VariableDeclarationStatement[74481-74515]:VariableDeclarationStatement[74481-74515]"
    }, {
      "left" : "remA = xa + a;",
      "right" : "remA = xa + a;",
      "info" : "ExpressionStatement[74532-74546]:ExpressionStatement[74532-74546]"
    }, {
      "left" : "remB = -(remA - xa - a);",
      "right" : "remB = -(remA - xa - a);",
      "info" : "ExpressionStatement[74563-74587]:ExpressionStatement[74563-74587]"
    }, {
      "left" : "a = -k * 7.549789948768648E-8;",
      "right" : "a = -k * 7.549789948768648E-8;",
      "info" : "ExpressionStatement[74605-74635]:ExpressionStatement[74605-74635]"
    }, {
      "left" : "double b = remA;",
      "right" : "double b = remA;",
      "info" : "VariableDeclarationStatement[74652-74668]:VariableDeclarationStatement[74652-74668]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[74685-74698]:ExpressionStatement[74685-74698]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[74715-74739]:ExpressionStatement[74715-74739]"
    }, {
      "left" : "a = -k * 6.123233995736766E-17;",
      "right" : "a = -k * 6.123233995736766E-17;",
      "info" : "ExpressionStatement[74757-74788]:ExpressionStatement[74757-74788]"
    }, {
      "left" : "b = remA;",
      "right" : "b = remA;",
      "info" : "ExpressionStatement[74805-74814]:ExpressionStatement[74805-74814]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[74831-74844]:ExpressionStatement[74831-74844]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[74861-74885]:ExpressionStatement[74861-74885]"
    }, {
      "left" : "if (remA > 0.0)",
      "right" : "if (remA > 0.0)",
      "info" : "IfStatement[74903-74945]:IfStatement[74903-74945]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[74939-74945]:BreakStatement[74939-74945]"
    }, {
      "left" : "k--;",
      "right" : "k--;",
      "info" : "ExpressionStatement[75152-75156]:ExpressionStatement[75152-75156]"
    }, {
      "left" : "quadrant = k & 3;",
      "right" : "quadrant = k & 3;",
      "info" : "ExpressionStatement[75183-75200]:ExpressionStatement[75183-75200]"
    }, {
      "left" : "xa = remA;",
      "right" : "xa = remA;",
      "info" : "ExpressionStatement[75213-75223]:ExpressionStatement[75213-75223]"
    }, {
      "left" : "xb = remB;",
      "right" : "xb = remB;",
      "info" : "ExpressionStatement[75236-75246]:ExpressionStatement[75236-75246]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[75266-75333]:IfStatement[75266-75333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75280-75333]:Block[75280-75333]"
    }, {
      "left" : "quadrant ^= 2;",
      "right" : "quadrant ^= 2;",
      "info" : "ExpressionStatement[75294-75308]:ExpressionStatement[75294-75308]"
    }, {
      "left" : "switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "right" : "switch (quadrant) {\n            case 0:\n                return sinQ(xa, xb);\n            case 1:\n                return cosQ(xa, xb);\n            case 2:\n                return -sinQ(xa, xb);\n            case 3:\n                return -cosQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "info" : "SwitchStatement[75343-75658]:SwitchStatement[75343-75658]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[75375-75382]:SwitchCase[75375-75382]"
    }, {
      "left" : "return sinQ(xa, xb);",
      "right" : "return sinQ(xa, xb);",
      "info" : "ReturnStatement[75399-75419]:ReturnStatement[75399-75419]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[75432-75439]:SwitchCase[75432-75439]"
    }, {
      "left" : "return cosQ(xa, xb);",
      "right" : "return cosQ(xa, xb);",
      "info" : "ReturnStatement[75456-75476]:ReturnStatement[75456-75476]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[75489-75496]:SwitchCase[75489-75496]"
    }, {
      "left" : "return -sinQ(xa, xb);",
      "right" : "return -sinQ(xa, xb);",
      "info" : "ReturnStatement[75513-75534]:ReturnStatement[75513-75534]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[75547-75554]:SwitchCase[75547-75554]"
    }, {
      "left" : "return -cosQ(xa, xb);",
      "right" : "return -cosQ(xa, xb);",
      "info" : "ReturnStatement[75571-75592]:ReturnStatement[75571-75592]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[75605-75613]:SwitchCase[75605-75613]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[75630-75648]:ReturnStatement[75630-75648]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75759-75765]:Modifier[75759-75765]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75766-75772]:Modifier[75766-75772]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[75773-75779]:PrimitiveType[75773-75779]"
    }, {
      "left" : "cos",
      "right" : "cos",
      "info" : "SimpleName[75780-75783]:SimpleName[75780-75783]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[75784-75792]:SingleVariableDeclaration[75784-75792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75794-78033]:Block[75794-78033]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[75804-75821]:VariableDeclarationStatement[75804-75821]"
    }, {
      "left" : "double xa = x;",
      "right" : "double xa = x;",
      "info" : "VariableDeclarationStatement[75878-75892]:VariableDeclarationStatement[75878-75892]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[75901-75945]:IfStatement[75901-75945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75912-75945]:Block[75912-75945]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[75926-75935]:ExpressionStatement[75926-75935]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[75955-76045]:IfStatement[75955-76045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76003-76045]:Block[76003-76045]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[76017-76035]:ReturnStatement[76017-76035]"
    }, {
      "left" : "double xb = 0;",
      "right" : "double xb = 0;",
      "info" : "VariableDeclarationStatement[76100-76114]:VariableDeclarationStatement[76100-76114]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[76123-77634]:IfStatement[76123-77634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76143-76500]:Block[76143-76500]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[76279-76318]:VariableDeclarationStatement[76279-76318]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[76331-76367]:ExpressionStatement[76331-76367]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[76380-76420]:ExpressionStatement[76380-76420]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[76433-76455]:ExpressionStatement[76433-76455]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[76468-76490]:ExpressionStatement[76468-76490]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[76506-77634]:IfStatement[76506-77634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76535-77634]:Block[76535-77634]"
    }, {
      "left" : "int k = (int)(xa * 0.6366197723675814);",
      "right" : "int k = (int)(xa * 0.6366197723675814);",
      "info" : "VariableDeclarationStatement[76692-76731]:VariableDeclarationStatement[76692-76731]"
    }, {
      "left" : "double remA;",
      "right" : "double remA;",
      "info" : "VariableDeclarationStatement[76778-76790]:VariableDeclarationStatement[76778-76790]"
    }, {
      "left" : "double remB;",
      "right" : "double remB;",
      "info" : "VariableDeclarationStatement[76803-76815]:VariableDeclarationStatement[76803-76815]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[76828-77548]:WhileStatement[76828-77548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76841-77548]:Block[76841-77548]"
    }, {
      "left" : "double a = -k * 1.570796251296997;",
      "right" : "double a = -k * 1.570796251296997;",
      "info" : "VariableDeclarationStatement[76859-76893]:VariableDeclarationStatement[76859-76893]"
    }, {
      "left" : "remA = xa + a;",
      "right" : "remA = xa + a;",
      "info" : "ExpressionStatement[76910-76924]:ExpressionStatement[76910-76924]"
    }, {
      "left" : "remB = -(remA - xa - a);",
      "right" : "remB = -(remA - xa - a);",
      "info" : "ExpressionStatement[76941-76965]:ExpressionStatement[76941-76965]"
    }, {
      "left" : "a = -k * 7.549789948768648E-8;",
      "right" : "a = -k * 7.549789948768648E-8;",
      "info" : "ExpressionStatement[76983-77013]:ExpressionStatement[76983-77013]"
    }, {
      "left" : "double b = remA;",
      "right" : "double b = remA;",
      "info" : "VariableDeclarationStatement[77030-77046]:VariableDeclarationStatement[77030-77046]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[77063-77076]:ExpressionStatement[77063-77076]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[77093-77117]:ExpressionStatement[77093-77117]"
    }, {
      "left" : "a = -k * 6.123233995736766E-17;",
      "right" : "a = -k * 6.123233995736766E-17;",
      "info" : "ExpressionStatement[77135-77166]:ExpressionStatement[77135-77166]"
    }, {
      "left" : "b = remA;",
      "right" : "b = remA;",
      "info" : "ExpressionStatement[77183-77192]:ExpressionStatement[77183-77192]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[77209-77222]:ExpressionStatement[77209-77222]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[77239-77263]:ExpressionStatement[77239-77263]"
    }, {
      "left" : "if (remA > 0.0)",
      "right" : "if (remA > 0.0)",
      "info" : "IfStatement[77281-77323]:IfStatement[77281-77323]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77317-77323]:BreakStatement[77317-77323]"
    }, {
      "left" : "k--;",
      "right" : "k--;",
      "info" : "ExpressionStatement[77530-77534]:ExpressionStatement[77530-77534]"
    }, {
      "left" : "quadrant = k & 3;",
      "right" : "quadrant = k & 3;",
      "info" : "ExpressionStatement[77561-77578]:ExpressionStatement[77561-77578]"
    }, {
      "left" : "xa = remA;",
      "right" : "xa = remA;",
      "info" : "ExpressionStatement[77591-77601]:ExpressionStatement[77591-77601]"
    }, {
      "left" : "xb = remB;",
      "right" : "xb = remB;",
      "info" : "ExpressionStatement[77614-77624]:ExpressionStatement[77614-77624]"
    }, {
      "left" : "switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "right" : "switch (quadrant) {\n            case 0:\n                return cosQ(xa, xb);\n            case 1:\n                return -sinQ(xa, xb);\n            case 2:\n                return -cosQ(xa, xb);\n            case 3:\n                return sinQ(xa, xb);\n            default:\n                return Double.NaN;\n        }",
      "info" : "SwitchStatement[77712-78027]:SwitchStatement[77712-78027]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[77744-77751]:SwitchCase[77744-77751]"
    }, {
      "left" : "return cosQ(xa, xb);",
      "right" : "return cosQ(xa, xb);",
      "info" : "ReturnStatement[77768-77788]:ReturnStatement[77768-77788]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[77801-77808]:SwitchCase[77801-77808]"
    }, {
      "left" : "return -sinQ(xa, xb);",
      "right" : "return -sinQ(xa, xb);",
      "info" : "ReturnStatement[77825-77846]:ReturnStatement[77825-77846]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[77859-77866]:SwitchCase[77859-77866]"
    }, {
      "left" : "return -cosQ(xa, xb);",
      "right" : "return -cosQ(xa, xb);",
      "info" : "ReturnStatement[77883-77904]:ReturnStatement[77883-77904]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[77917-77924]:SwitchCase[77917-77924]"
    }, {
      "left" : "return sinQ(xa, xb);",
      "right" : "return sinQ(xa, xb);",
      "info" : "ReturnStatement[77941-77961]:ReturnStatement[77941-77961]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[77974-77982]:SwitchCase[77974-77982]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[77999-78017]:ReturnStatement[77999-78017]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78130-78136]:Modifier[78130-78136]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78137-78143]:Modifier[78137-78143]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[78144-78150]:PrimitiveType[78144-78150]"
    }, {
      "left" : "tan",
      "right" : "tan",
      "info" : "SimpleName[78151-78154]:SimpleName[78151-78154]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[78155-78163]:SingleVariableDeclaration[78155-78163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78165-80983]:Block[78165-80983]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[78175-78200]:VariableDeclarationStatement[78175-78200]"
    }, {
      "left" : "int quadrant = 0;",
      "right" : "int quadrant = 0;",
      "info" : "VariableDeclarationStatement[78209-78226]:VariableDeclarationStatement[78209-78226]"
    }, {
      "left" : "double xa = x;",
      "right" : "double xa = x;",
      "info" : "VariableDeclarationStatement[78283-78297]:VariableDeclarationStatement[78283-78297]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[78306-78379]:IfStatement[78306-78379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78317-78379]:Block[78317-78379]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[78331-78347]:ExpressionStatement[78331-78347]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[78360-78369]:ExpressionStatement[78360-78369]"
    }, {
      "left" : "if (xa == 0.0)",
      "right" : "if (xa == 0.0)",
      "info" : "IfStatement[78436-78609]:IfStatement[78436-78609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78451-78609]:Block[78451-78609]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[78465-78504]:VariableDeclarationStatement[78465-78504]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[78517-78575]:IfStatement[78517-78575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78531-78575]:Block[78531-78575]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[78549-78561]:ReturnStatement[78549-78561]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[78588-78599]:ReturnStatement[78588-78599]"
    }, {
      "left" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "right" : "if (xa != xa || xa == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[78619-78709]:IfStatement[78619-78709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78667-78709]:Block[78667-78709]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[78681-78699]:ReturnStatement[78681-78699]"
    }, {
      "left" : "double xb = 0;",
      "right" : "double xb = 0;",
      "info" : "VariableDeclarationStatement[78764-78778]:VariableDeclarationStatement[78764-78778]"
    }, {
      "left" : "if (xa > 3294198.0)",
      "right" : "if (xa > 3294198.0)",
      "info" : "IfStatement[78787-80298]:IfStatement[78787-80298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78807-79164]:Block[78807-79164]"
    }, {
      "left" : "double reduceResults[] = new double[3];",
      "right" : "double reduceResults[] = new double[3];",
      "info" : "VariableDeclarationStatement[78943-78982]:VariableDeclarationStatement[78943-78982]"
    }, {
      "left" : "reducePayneHanek(xa, reduceResults);",
      "right" : "reducePayneHanek(xa, reduceResults);",
      "info" : "ExpressionStatement[78995-79031]:ExpressionStatement[78995-79031]"
    }, {
      "left" : "quadrant = ((int) reduceResults[0]) & 3;",
      "right" : "quadrant = ((int) reduceResults[0]) & 3;",
      "info" : "ExpressionStatement[79044-79084]:ExpressionStatement[79044-79084]"
    }, {
      "left" : "xa = reduceResults[1];",
      "right" : "xa = reduceResults[1];",
      "info" : "ExpressionStatement[79097-79119]:ExpressionStatement[79097-79119]"
    }, {
      "left" : "xb = reduceResults[2];",
      "right" : "xb = reduceResults[2];",
      "info" : "ExpressionStatement[79132-79154]:ExpressionStatement[79132-79154]"
    }, {
      "left" : "if (xa > 1.5707963267948966)",
      "right" : "if (xa > 1.5707963267948966)",
      "info" : "IfStatement[79170-80298]:IfStatement[79170-80298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79199-80298]:Block[79199-80298]"
    }, {
      "left" : "int k = (int)(xa * 0.6366197723675814);",
      "right" : "int k = (int)(xa * 0.6366197723675814);",
      "info" : "VariableDeclarationStatement[79356-79395]:VariableDeclarationStatement[79356-79395]"
    }, {
      "left" : "double remA;",
      "right" : "double remA;",
      "info" : "VariableDeclarationStatement[79442-79454]:VariableDeclarationStatement[79442-79454]"
    }, {
      "left" : "double remB;",
      "right" : "double remB;",
      "info" : "VariableDeclarationStatement[79467-79479]:VariableDeclarationStatement[79467-79479]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[79492-80212]:WhileStatement[79492-80212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79505-80212]:Block[79505-80212]"
    }, {
      "left" : "double a = -k * 1.570796251296997;",
      "right" : "double a = -k * 1.570796251296997;",
      "info" : "VariableDeclarationStatement[79523-79557]:VariableDeclarationStatement[79523-79557]"
    }, {
      "left" : "remA = xa + a;",
      "right" : "remA = xa + a;",
      "info" : "ExpressionStatement[79574-79588]:ExpressionStatement[79574-79588]"
    }, {
      "left" : "remB = -(remA - xa - a);",
      "right" : "remB = -(remA - xa - a);",
      "info" : "ExpressionStatement[79605-79629]:ExpressionStatement[79605-79629]"
    }, {
      "left" : "a = -k * 7.549789948768648E-8;",
      "right" : "a = -k * 7.549789948768648E-8;",
      "info" : "ExpressionStatement[79647-79677]:ExpressionStatement[79647-79677]"
    }, {
      "left" : "double b = remA;",
      "right" : "double b = remA;",
      "info" : "VariableDeclarationStatement[79694-79710]:VariableDeclarationStatement[79694-79710]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[79727-79740]:ExpressionStatement[79727-79740]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[79757-79781]:ExpressionStatement[79757-79781]"
    }, {
      "left" : "a = -k * 6.123233995736766E-17;",
      "right" : "a = -k * 6.123233995736766E-17;",
      "info" : "ExpressionStatement[79799-79830]:ExpressionStatement[79799-79830]"
    }, {
      "left" : "b = remA;",
      "right" : "b = remA;",
      "info" : "ExpressionStatement[79847-79856]:ExpressionStatement[79847-79856]"
    }, {
      "left" : "remA = a + b;",
      "right" : "remA = a + b;",
      "info" : "ExpressionStatement[79873-79886]:ExpressionStatement[79873-79886]"
    }, {
      "left" : "remB += -(remA - b - a);",
      "right" : "remB += -(remA - b - a);",
      "info" : "ExpressionStatement[79903-79927]:ExpressionStatement[79903-79927]"
    }, {
      "left" : "if (remA > 0.0)",
      "right" : "if (remA > 0.0)",
      "info" : "IfStatement[79945-79987]:IfStatement[79945-79987]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[79981-79987]:BreakStatement[79981-79987]"
    }, {
      "left" : "k--;",
      "right" : "k--;",
      "info" : "ExpressionStatement[80194-80198]:ExpressionStatement[80194-80198]"
    }, {
      "left" : "quadrant = k & 3;",
      "right" : "quadrant = k & 3;",
      "info" : "ExpressionStatement[80225-80242]:ExpressionStatement[80225-80242]"
    }, {
      "left" : "xa = remA;",
      "right" : "xa = remA;",
      "info" : "ExpressionStatement[80255-80265]:ExpressionStatement[80255-80265]"
    }, {
      "left" : "xb = remB;",
      "right" : "xb = remB;",
      "info" : "ExpressionStatement[80278-80288]:ExpressionStatement[80278-80288]"
    }, {
      "left" : "if (xa > 1.5)",
      "right" : "if (xa > 1.5)",
      "info" : "IfStatement[80308-80718]:IfStatement[80308-80718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80322-80718]:Block[80322-80718]"
    }, {
      "left" : "final double pi2a = 1.5707963267948966;",
      "right" : "final double pi2a = 1.5707963267948966;",
      "info" : "VariableDeclarationStatement[80390-80429]:VariableDeclarationStatement[80390-80429]"
    }, {
      "left" : "final double pi2b = 6.123233995736766E-17;",
      "right" : "final double pi2b = 6.123233995736766E-17;",
      "info" : "VariableDeclarationStatement[80442-80484]:VariableDeclarationStatement[80442-80484]"
    }, {
      "left" : "final double a = pi2a - xa;",
      "right" : "final double a = pi2a - xa;",
      "info" : "VariableDeclarationStatement[80498-80525]:VariableDeclarationStatement[80498-80525]"
    }, {
      "left" : "double b = -(a - pi2a + xa);",
      "right" : "double b = -(a - pi2a + xa);",
      "info" : "VariableDeclarationStatement[80538-80566]:VariableDeclarationStatement[80538-80566]"
    }, {
      "left" : "b += pi2b - xb;",
      "right" : "b += pi2b - xb;",
      "info" : "ExpressionStatement[80579-80594]:ExpressionStatement[80579-80594]"
    }, {
      "left" : "xa = a + b;",
      "right" : "xa = a + b;",
      "info" : "ExpressionStatement[80608-80619]:ExpressionStatement[80608-80619]"
    }, {
      "left" : "xb = -(xa - a - b);",
      "right" : "xb = -(xa - a - b);",
      "info" : "ExpressionStatement[80632-80651]:ExpressionStatement[80632-80651]"
    }, {
      "left" : "quadrant ^= 1;",
      "right" : "quadrant ^= 1;",
      "info" : "ExpressionStatement[80664-80678]:ExpressionStatement[80664-80678]"
    }, {
      "left" : "negative ^= true;",
      "right" : "negative ^= true;",
      "info" : "ExpressionStatement[80691-80708]:ExpressionStatement[80691-80708]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[80728-80742]:VariableDeclarationStatement[80728-80742]"
    }, {
      "left" : "if ((quadrant & 1) == 0)",
      "right" : "if ((quadrant & 1) == 0)",
      "info" : "IfStatement[80751-80888]:IfStatement[80751-80888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80776-80829]:Block[80776-80829]"
    }, {
      "left" : "result = tanQ(xa, xb, false);",
      "right" : "result = tanQ(xa, xb, false);",
      "info" : "ExpressionStatement[80790-80819]:ExpressionStatement[80790-80819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80835-80888]:Block[80835-80888]"
    }, {
      "left" : "result = -tanQ(xa, xb, true);",
      "right" : "result = -tanQ(xa, xb, true);",
      "info" : "ExpressionStatement[80849-80878]:ExpressionStatement[80849-80878]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[80898-80953]:IfStatement[80898-80953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80912-80953]:Block[80912-80953]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[80926-80943]:ExpressionStatement[80926-80943]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[80963-80977]:ReturnStatement[80963-80977]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[81082-81088]:Modifier[81082-81088]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[81089-81095]:Modifier[81089-81095]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[81096-81102]:PrimitiveType[81096-81102]"
    }, {
      "left" : "atan",
      "right" : "atan",
      "info" : "SimpleName[81103-81107]:SimpleName[81103-81107]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[81108-81116]:SingleVariableDeclaration[81108-81116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81118-81161]:Block[81118-81161]"
    }, {
      "left" : "return atan(x, 0.0, false);",
      "right" : "return atan(x, 0.0, false);",
      "info" : "ReturnStatement[81128-81155]:ReturnStatement[81128-81155]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[81495-81502]:Modifier[81495-81502]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[81503-81509]:Modifier[81503-81509]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[81510-81516]:PrimitiveType[81510-81516]"
    }, {
      "left" : "atan",
      "right" : "atan",
      "info" : "SimpleName[81517-81521]:SimpleName[81517-81521]"
    }, {
      "left" : "double xa",
      "right" : "double xa",
      "info" : "SingleVariableDeclaration[81522-81531]:SingleVariableDeclaration[81522-81531]"
    }, {
      "left" : "double xb",
      "right" : "double xb",
      "info" : "SingleVariableDeclaration[81533-81542]:SingleVariableDeclaration[81533-81542]"
    }, {
      "left" : "boolean leftPlane",
      "right" : "boolean leftPlane",
      "info" : "SingleVariableDeclaration[81544-81561]:SingleVariableDeclaration[81544-81561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81563-85733]:Block[81563-85733]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[81573-81596]:VariableDeclarationStatement[81573-81596]"
    }, {
      "left" : "int idx;",
      "right" : "int idx;",
      "info" : "VariableDeclarationStatement[81605-81613]:VariableDeclarationStatement[81605-81613]"
    }, {
      "left" : "if (xa < 0)",
      "right" : "if (xa < 0)",
      "info" : "IfStatement[81623-81741]:IfStatement[81623-81741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81635-81741]:Block[81635-81741]"
    }, {
      "left" : "xa = -xa;",
      "right" : "xa = -xa;",
      "info" : "ExpressionStatement[81673-81682]:ExpressionStatement[81673-81682]"
    }, {
      "left" : "xb = -xb;",
      "right" : "xb = -xb;",
      "info" : "ExpressionStatement[81695-81704]:ExpressionStatement[81695-81704]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[81717-81731]:ExpressionStatement[81717-81731]"
    }, {
      "left" : "if (xa > 1.633123935319537E16)",
      "right" : "if (xa > 1.633123935319537E16)",
      "info" : "IfStatement[81751-81887]:IfStatement[81751-81887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81782-81887]:Block[81782-81887]"
    }, {
      "left" : "return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);",
      "right" : "return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);",
      "info" : "ReturnStatement[81816-81877]:ReturnStatement[81816-81877]"
    }, {
      "left" : "if (xa < 1.0)",
      "right" : "if (xa < 1.0)",
      "info" : "IfStatement[81986-82227]:IfStatement[81986-82227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82000-82089]:Block[82000-82089]"
    }, {
      "left" : "idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
      "right" : "idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);",
      "info" : "ExpressionStatement[82014-82079]:ExpressionStatement[82014-82079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82095-82227]:Block[82095-82227]"
    }, {
      "left" : "double temp = 1.0/xa;",
      "right" : "double temp = 1.0/xa;",
      "info" : "VariableDeclarationStatement[82109-82130]:VariableDeclarationStatement[82109-82130]"
    }, {
      "left" : "idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);",
      "right" : "idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);",
      "info" : "ExpressionStatement[82143-82217]:ExpressionStatement[82143-82217]"
    }, {
      "left" : "double epsA = xa - TANGENT_TABLE_A[idx];",
      "right" : "double epsA = xa - TANGENT_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[82236-82276]:VariableDeclarationStatement[82236-82276]"
    }, {
      "left" : "double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);",
      "right" : "double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);",
      "info" : "VariableDeclarationStatement[82285-82335]:VariableDeclarationStatement[82285-82335]"
    }, {
      "left" : "epsB += xb - TANGENT_TABLE_B[idx];",
      "right" : "epsB += xb - TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[82344-82378]:ExpressionStatement[82344-82378]"
    }, {
      "left" : "double temp = epsA + epsB;",
      "right" : "double temp = epsA + epsB;",
      "info" : "VariableDeclarationStatement[82388-82414]:VariableDeclarationStatement[82388-82414]"
    }, {
      "left" : "epsB = -(temp - epsA - epsB);",
      "right" : "epsB = -(temp - epsA - epsB);",
      "info" : "ExpressionStatement[82423-82452]:ExpressionStatement[82423-82452]"
    }, {
      "left" : "epsA = temp;",
      "right" : "epsA = temp;",
      "info" : "ExpressionStatement[82461-82473]:ExpressionStatement[82461-82473]"
    }, {
      "left" : "temp = xa * 1073741824.0;",
      "right" : "temp = xa * 1073741824.0;",
      "info" : "ExpressionStatement[82536-82561]:ExpressionStatement[82536-82561]"
    }, {
      "left" : "double ya = xa + temp - temp;",
      "right" : "double ya = xa + temp - temp;",
      "info" : "VariableDeclarationStatement[82570-82599]:VariableDeclarationStatement[82570-82599]"
    }, {
      "left" : "double yb = xb + xa - ya;",
      "right" : "double yb = xb + xa - ya;",
      "info" : "VariableDeclarationStatement[82608-82633]:VariableDeclarationStatement[82608-82633]"
    }, {
      "left" : "xa = ya;",
      "right" : "xa = ya;",
      "info" : "ExpressionStatement[82642-82650]:ExpressionStatement[82642-82650]"
    }, {
      "left" : "xb += yb;",
      "right" : "xb += yb;",
      "info" : "ExpressionStatement[82659-82668]:ExpressionStatement[82659-82668]"
    }, {
      "left" : "if (idx == 0)",
      "right" : "if (idx == 0)",
      "info" : "IfStatement[82713-84066]:IfStatement[82713-84066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82727-83208]:Block[82727-83208]"
    }, {
      "left" : "double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));",
      "right" : "double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));",
      "info" : "VariableDeclarationStatement[82983-83070]:VariableDeclarationStatement[82983-83070]"
    }, {
      "left" : "ya = epsA * denom;",
      "right" : "ya = epsA * denom;",
      "info" : "ExpressionStatement[83149-83167]:ExpressionStatement[83149-83167]"
    }, {
      "left" : "yb = epsB * denom;",
      "right" : "yb = epsB * denom;",
      "info" : "ExpressionStatement[83180-83198]:ExpressionStatement[83180-83198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83214-84066]:Block[83214-84066]"
    }, {
      "left" : "double temp2 = xa * TANGENT_TABLE_A[idx];",
      "right" : "double temp2 = xa * TANGENT_TABLE_A[idx];",
      "info" : "VariableDeclarationStatement[83228-83269]:VariableDeclarationStatement[83228-83269]"
    }, {
      "left" : "double za = 1.0 + temp2;",
      "right" : "double za = 1.0 + temp2;",
      "info" : "VariableDeclarationStatement[83282-83306]:VariableDeclarationStatement[83282-83306]"
    }, {
      "left" : "double zb = -(za - 1.0 - temp2);",
      "right" : "double zb = -(za - 1.0 - temp2);",
      "info" : "VariableDeclarationStatement[83319-83351]:VariableDeclarationStatement[83319-83351]"
    }, {
      "left" : "temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];",
      "right" : "temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[83364-83426]:ExpressionStatement[83364-83426]"
    }, {
      "left" : "temp = za + temp2;",
      "right" : "temp = za + temp2;",
      "info" : "ExpressionStatement[83439-83457]:ExpressionStatement[83439-83457]"
    }, {
      "left" : "zb += -(temp - za - temp2);",
      "right" : "zb += -(temp - za - temp2);",
      "info" : "ExpressionStatement[83470-83497]:ExpressionStatement[83470-83497]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[83510-83520]:ExpressionStatement[83510-83520]"
    }, {
      "left" : "zb += xb * TANGENT_TABLE_B[idx];",
      "right" : "zb += xb * TANGENT_TABLE_B[idx];",
      "info" : "ExpressionStatement[83534-83566]:ExpressionStatement[83534-83566]"
    }, {
      "left" : "ya = epsA / za;",
      "right" : "ya = epsA / za;",
      "info" : "ExpressionStatement[83579-83594]:ExpressionStatement[83579-83594]"
    }, {
      "left" : "temp = ya * 1073741824.0;",
      "right" : "temp = ya * 1073741824.0;",
      "info" : "ExpressionStatement[83608-83633]:ExpressionStatement[83608-83633]"
    }, {
      "left" : "final double yaa = (ya + temp) - temp;",
      "right" : "final double yaa = (ya + temp) - temp;",
      "info" : "VariableDeclarationStatement[83646-83684]:VariableDeclarationStatement[83646-83684]"
    }, {
      "left" : "final double yab = ya - yaa;",
      "right" : "final double yab = ya - yaa;",
      "info" : "VariableDeclarationStatement[83697-83725]:VariableDeclarationStatement[83697-83725]"
    }, {
      "left" : "temp = za * 1073741824.0;",
      "right" : "temp = za * 1073741824.0;",
      "info" : "ExpressionStatement[83739-83764]:ExpressionStatement[83739-83764]"
    }, {
      "left" : "final double zaa = (za + temp) - temp;",
      "right" : "final double zaa = (za + temp) - temp;",
      "info" : "VariableDeclarationStatement[83777-83815]:VariableDeclarationStatement[83777-83815]"
    }, {
      "left" : "final double zab = za - zaa;",
      "right" : "final double zab = za - zaa;",
      "info" : "VariableDeclarationStatement[83828-83856]:VariableDeclarationStatement[83828-83856]"
    }, {
      "left" : "yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;",
      "right" : "yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;",
      "info" : "ExpressionStatement[83921-83986]:ExpressionStatement[83921-83986]"
    }, {
      "left" : "yb += -epsA * zb / za / za;",
      "right" : "yb += -epsA * zb / za / za;",
      "info" : "ExpressionStatement[84000-84027]:ExpressionStatement[84000-84027]"
    }, {
      "left" : "yb += epsB / za;",
      "right" : "yb += epsB / za;",
      "info" : "ExpressionStatement[84040-84056]:ExpressionStatement[84040-84056]"
    }, {
      "left" : "epsA = ya;",
      "right" : "epsA = ya;",
      "info" : "ExpressionStatement[84077-84087]:ExpressionStatement[84077-84087]"
    }, {
      "left" : "epsB = yb;",
      "right" : "epsB = yb;",
      "info" : "ExpressionStatement[84096-84106]:ExpressionStatement[84096-84106]"
    }, {
      "left" : "double epsA2 = epsA*epsA;",
      "right" : "double epsA2 = epsA*epsA;",
      "info" : "VariableDeclarationStatement[84150-84175]:VariableDeclarationStatement[84150-84175]"
    }, {
      "left" : "yb = 0.07490822288864472;",
      "right" : "yb = 0.07490822288864472;",
      "info" : "ExpressionStatement[84441-84466]:ExpressionStatement[84441-84466]"
    }, {
      "left" : "yb = yb * epsA2 + -0.09088450866185192;",
      "right" : "yb = yb * epsA2 + -0.09088450866185192;",
      "info" : "ExpressionStatement[84475-84514]:ExpressionStatement[84475-84514]"
    }, {
      "left" : "yb = yb * epsA2 + 0.11111095942313305;",
      "right" : "yb = yb * epsA2 + 0.11111095942313305;",
      "info" : "ExpressionStatement[84523-84561]:ExpressionStatement[84523-84561]"
    }, {
      "left" : "yb = yb * epsA2 + -0.1428571423679182;",
      "right" : "yb = yb * epsA2 + -0.1428571423679182;",
      "info" : "ExpressionStatement[84570-84608]:ExpressionStatement[84570-84608]"
    }, {
      "left" : "yb = yb * epsA2 + 0.19999999999923582;",
      "right" : "yb = yb * epsA2 + 0.19999999999923582;",
      "info" : "ExpressionStatement[84617-84655]:ExpressionStatement[84617-84655]"
    }, {
      "left" : "yb = yb * epsA2 + -0.33333333333333287;",
      "right" : "yb = yb * epsA2 + -0.33333333333333287;",
      "info" : "ExpressionStatement[84664-84703]:ExpressionStatement[84664-84703]"
    }, {
      "left" : "yb = yb * epsA2 * epsA;",
      "right" : "yb = yb * epsA2 * epsA;",
      "info" : "ExpressionStatement[84712-84735]:ExpressionStatement[84712-84735]"
    }, {
      "left" : "ya = epsA;",
      "right" : "ya = epsA;",
      "info" : "ExpressionStatement[84746-84756]:ExpressionStatement[84746-84756]"
    }, {
      "left" : "temp = ya + yb;",
      "right" : "temp = ya + yb;",
      "info" : "ExpressionStatement[84766-84781]:ExpressionStatement[84766-84781]"
    }, {
      "left" : "yb = -(temp - ya - yb);",
      "right" : "yb = -(temp - ya - yb);",
      "info" : "ExpressionStatement[84790-84813]:ExpressionStatement[84790-84813]"
    }, {
      "left" : "ya = temp;",
      "right" : "ya = temp;",
      "info" : "ExpressionStatement[84822-84832]:ExpressionStatement[84822-84832]"
    }, {
      "left" : "yb += epsB / (1.0 + epsA * epsA);",
      "right" : "yb += epsB / (1.0 + epsA * epsA);",
      "info" : "ExpressionStatement[84902-84935]:ExpressionStatement[84902-84935]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[84945-84959]:VariableDeclarationStatement[84945-84959]"
    }, {
      "left" : "double resultb;",
      "right" : "double resultb;",
      "info" : "VariableDeclarationStatement[84968-84983]:VariableDeclarationStatement[84968-84983]"
    }, {
      "left" : "double za = EIGHTHES[idx] + ya;",
      "right" : "double za = EIGHTHES[idx] + ya;",
      "info" : "VariableDeclarationStatement[85036-85067]:VariableDeclarationStatement[85036-85067]"
    }, {
      "left" : "double zb = -(za - EIGHTHES[idx] - ya);",
      "right" : "double zb = -(za - EIGHTHES[idx] - ya);",
      "info" : "VariableDeclarationStatement[85076-85115]:VariableDeclarationStatement[85076-85115]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[85124-85139]:ExpressionStatement[85124-85139]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[85148-85172]:ExpressionStatement[85148-85172]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[85181-85191]:ExpressionStatement[85181-85191]"
    }, {
      "left" : "result = za + zb;",
      "right" : "result = za + zb;",
      "info" : "ExpressionStatement[85201-85218]:ExpressionStatement[85201-85218]"
    }, {
      "left" : "resultb = -(result - za - zb);",
      "right" : "resultb = -(result - za - zb);",
      "info" : "ExpressionStatement[85227-85257]:ExpressionStatement[85227-85257]"
    }, {
      "left" : "if (leftPlane)",
      "right" : "if (leftPlane)",
      "info" : "IfStatement[85267-85627]:IfStatement[85267-85627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85282-85627]:Block[85282-85627]"
    }, {
      "left" : "final double pia = 1.5707963267948966*2.0;",
      "right" : "final double pia = 1.5707963267948966*2.0;",
      "info" : "VariableDeclarationStatement[85339-85381]:VariableDeclarationStatement[85339-85381]"
    }, {
      "left" : "final double pib = 6.123233995736766E-17*2.0;",
      "right" : "final double pib = 6.123233995736766E-17*2.0;",
      "info" : "VariableDeclarationStatement[85394-85439]:VariableDeclarationStatement[85394-85439]"
    }, {
      "left" : "za = pia - result;",
      "right" : "za = pia - result;",
      "info" : "ExpressionStatement[85453-85471]:ExpressionStatement[85453-85471]"
    }, {
      "left" : "zb = -(za - pia + result);",
      "right" : "zb = -(za - pia + result);",
      "info" : "ExpressionStatement[85484-85510]:ExpressionStatement[85484-85510]"
    }, {
      "left" : "zb += pib - resultb;",
      "right" : "zb += pib - resultb;",
      "info" : "ExpressionStatement[85523-85543]:ExpressionStatement[85523-85543]"
    }, {
      "left" : "result = za + zb;",
      "right" : "result = za + zb;",
      "info" : "ExpressionStatement[85557-85574]:ExpressionStatement[85557-85574]"
    }, {
      "left" : "resultb = -(result - za - zb);",
      "right" : "resultb = -(result - za - zb);",
      "info" : "ExpressionStatement[85587-85617]:ExpressionStatement[85587-85617]"
    }, {
      "left" : "if (negate ^ leftPlane)",
      "right" : "if (negate ^ leftPlane)",
      "info" : "IfStatement[85638-85703]:IfStatement[85638-85703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85662-85703]:Block[85662-85703]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[85676-85693]:ExpressionStatement[85676-85693]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[85713-85727]:ReturnStatement[85713-85727]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[85911-85917]:Modifier[85911-85917]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[85918-85924]:Modifier[85918-85924]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[85925-85931]:PrimitiveType[85925-85931]"
    }, {
      "left" : "atan2",
      "right" : "atan2",
      "info" : "SimpleName[85932-85937]:SimpleName[85932-85937]"
    }, {
      "left" : "double y",
      "right" : "double y",
      "info" : "SingleVariableDeclaration[85938-85946]:SingleVariableDeclaration[85938-85946]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[85948-85956]:SingleVariableDeclaration[85948-85956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85958-88715]:Block[85958-88715]"
    }, {
      "left" : "if (x !=x || y != y)",
      "right" : "if (x !=x || y != y)",
      "info" : "IfStatement[85968-86031]:IfStatement[85968-86031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85989-86031]:Block[85989-86031]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[86003-86021]:ReturnStatement[86003-86021]"
    }, {
      "left" : "if (y == 0.0)",
      "right" : "if (y == 0.0)",
      "info" : "IfStatement[86041-86738]:IfStatement[86041-86738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86055-86738]:Block[86055-86738]"
    }, {
      "left" : "double result = x*y;",
      "right" : "double result = x*y;",
      "info" : "VariableDeclarationStatement[86069-86089]:VariableDeclarationStatement[86069-86089]"
    }, {
      "left" : "double invx = 1.0/x;",
      "right" : "double invx = 1.0/x;",
      "info" : "VariableDeclarationStatement[86102-86122]:VariableDeclarationStatement[86102-86122]"
    }, {
      "left" : "double invy = 1.0/y;",
      "right" : "double invy = 1.0/y;",
      "info" : "VariableDeclarationStatement[86135-86155]:VariableDeclarationStatement[86135-86155]"
    }, {
      "left" : "if (invx == 0.0)",
      "right" : "if (invx == 0.0)",
      "info" : "IfStatement[86169-86358]:IfStatement[86169-86358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86186-86358]:Block[86186-86358]"
    }, {
      "left" : "if (x > 0)",
      "right" : "if (x > 0)",
      "info" : "IfStatement[86221-86344]:IfStatement[86221-86344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86232-86283]:Block[86232-86283]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[86254-86265]:ReturnStatement[86254-86265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86289-86344]:Block[86289-86344]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[86311-86326]:ReturnStatement[86311-86326]"
    }, {
      "left" : "if (result != result)",
      "right" : "if (result != result)",
      "info" : "IfStatement[86372-86459]:IfStatement[86372-86459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86394-86459]:Block[86394-86459]"
    }, {
      "left" : "return x/y;",
      "right" : "return x/y;",
      "info" : "ReturnStatement[86434-86445]:ReturnStatement[86434-86445]"
    }, {
      "left" : "if (x < 0.0 || invx < 0.0)",
      "right" : "if (x < 0.0 || invx < 0.0)",
      "info" : "IfStatement[86473-86728]:IfStatement[86473-86728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86500-86676]:Block[86500-86676]"
    }, {
      "left" : "if (y < 0.0 || invy < 0.0)",
      "right" : "if (y < 0.0 || invy < 0.0)",
      "info" : "IfStatement[86518-86662]:IfStatement[86518-86662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86545-86601]:Block[86545-86601]"
    }, {
      "left" : "return -Math.PI;",
      "right" : "return -Math.PI;",
      "info" : "ReturnStatement[86567-86583]:ReturnStatement[86567-86583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86607-86662]:Block[86607-86662]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[86629-86644]:ReturnStatement[86629-86644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86682-86728]:Block[86682-86728]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[86700-86714]:ReturnStatement[86700-86714]"
    }, {
      "left" : "if (y == Double.POSITIVE_INFINITY)",
      "right" : "if (y == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[86748-87030]:IfStatement[86748-87030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86783-87030]:Block[86783-87030]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[86797-86883]:IfStatement[86797-86883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86832-86883]:Block[86832-86883]"
    }, {
      "left" : "return Math.PI/4.0;",
      "right" : "return Math.PI/4.0;",
      "info" : "ReturnStatement[86850-86869]:ReturnStatement[86850-86869]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[86897-86987]:IfStatement[86897-86987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86932-86987]:Block[86932-86987]"
    }, {
      "left" : "return Math.PI*3.0/4.0;",
      "right" : "return Math.PI*3.0/4.0;",
      "info" : "ReturnStatement[86950-86973]:ReturnStatement[86950-86973]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[87001-87020]:ReturnStatement[87001-87020]"
    }, {
      "left" : "if (y == Double.NEGATIVE_INFINITY)",
      "right" : "if (y == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[87040-87325]:IfStatement[87040-87325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87075-87325]:Block[87075-87325]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[87089-87176]:IfStatement[87089-87176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87124-87176]:Block[87124-87176]"
    }, {
      "left" : "return -Math.PI/4.0;",
      "right" : "return -Math.PI/4.0;",
      "info" : "ReturnStatement[87142-87162]:ReturnStatement[87142-87162]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[87190-87281]:IfStatement[87190-87281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87225-87281]:Block[87225-87281]"
    }, {
      "left" : "return -Math.PI*3.0/4.0;",
      "right" : "return -Math.PI*3.0/4.0;",
      "info" : "ReturnStatement[87243-87267]:ReturnStatement[87243-87267]"
    }, {
      "left" : "return -Math.PI/2.0;",
      "right" : "return -Math.PI/2.0;",
      "info" : "ReturnStatement[87295-87315]:ReturnStatement[87295-87315]"
    }, {
      "left" : "if (x == Double.POSITIVE_INFINITY)",
      "right" : "if (x == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[87335-87547]:IfStatement[87335-87547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87370-87547]:Block[87370-87547]"
    }, {
      "left" : "if (y > 0.0 || 1/y > 0.0)",
      "right" : "if (y > 0.0 || 1/y > 0.0)",
      "info" : "IfStatement[87384-87453]:IfStatement[87384-87453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87410-87453]:Block[87410-87453]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[87428-87439]:ReturnStatement[87428-87439]"
    }, {
      "left" : "if (y < 0.0 || 1/y < 0.0)",
      "right" : "if (y < 0.0 || 1/y < 0.0)",
      "info" : "IfStatement[87467-87537]:IfStatement[87467-87537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87493-87537]:Block[87493-87537]"
    }, {
      "left" : "return -0.0;",
      "right" : "return -0.0;",
      "info" : "ReturnStatement[87511-87523]:ReturnStatement[87511-87523]"
    }, {
      "left" : "if (x == Double.NEGATIVE_INFINITY)",
      "right" : "if (x == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[87557-87785]:IfStatement[87557-87785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87600-87785]:Block[87600-87785]"
    }, {
      "left" : "if (y > 0.0 || 1/y > 0.0)",
      "right" : "if (y > 0.0 || 1/y > 0.0)",
      "info" : "IfStatement[87614-87687]:IfStatement[87614-87687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87640-87687]:Block[87640-87687]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[87658-87673]:ReturnStatement[87658-87673]"
    }, {
      "left" : "if (y < 0.0 || 1/y < 0.0)",
      "right" : "if (y < 0.0 || 1/y < 0.0)",
      "info" : "IfStatement[87701-87775]:IfStatement[87701-87775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87727-87775]:Block[87727-87775]"
    }, {
      "left" : "return -Math.PI;",
      "right" : "return -Math.PI;",
      "info" : "ReturnStatement[87745-87761]:ReturnStatement[87745-87761]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[87795-88000]:IfStatement[87795-88000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87807-88000]:Block[87807-88000]"
    }, {
      "left" : "if (y > 0.0 || 1/y > 0.0)",
      "right" : "if (y > 0.0 || 1/y > 0.0)",
      "info" : "IfStatement[87821-87898]:IfStatement[87821-87898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87847-87898]:Block[87847-87898]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[87865-87884]:ReturnStatement[87865-87884]"
    }, {
      "left" : "if (y < 0.0 || 1/y < 0.0)",
      "right" : "if (y < 0.0 || 1/y < 0.0)",
      "info" : "IfStatement[87912-87990]:IfStatement[87912-87990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87938-87990]:Block[87938-87990]"
    }, {
      "left" : "return -Math.PI/2.0;",
      "right" : "return -Math.PI/2.0;",
      "info" : "ReturnStatement[87956-87976]:ReturnStatement[87956-87976]"
    }, {
      "left" : "if (x > 8e298 || x < -8e298)",
      "right" : "if (x > 8e298 || x < -8e298)",
      "info" : "IfStatement[88010-88179]:IfStatement[88010-88179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88039-88179]:Block[88039-88179]"
    }, {
      "left" : "x *= 9.31322574615478515625E-10;",
      "right" : "x *= 9.31322574615478515625E-10;",
      "info" : "ExpressionStatement[88092-88124]:ExpressionStatement[88092-88124]"
    }, {
      "left" : "y *= 9.31322574615478515625E-10;",
      "right" : "y *= 9.31322574615478515625E-10;",
      "info" : "ExpressionStatement[88137-88169]:ExpressionStatement[88137-88169]"
    }, {
      "left" : "double temp = x * 1073741824.0;",
      "right" : "double temp = x * 1073741824.0;",
      "info" : "VariableDeclarationStatement[88208-88239]:VariableDeclarationStatement[88208-88239]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[88248-88282]:VariableDeclarationStatement[88248-88282]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[88291-88316]:VariableDeclarationStatement[88291-88316]"
    }, {
      "left" : "final double r = y/x;",
      "right" : "final double r = y/x;",
      "info" : "VariableDeclarationStatement[88359-88380]:VariableDeclarationStatement[88359-88380]"
    }, {
      "left" : "temp = r * 1073741824.0;",
      "right" : "temp = r * 1073741824.0;",
      "info" : "ExpressionStatement[88389-88413]:ExpressionStatement[88389-88413]"
    }, {
      "left" : "double ra = r + temp - temp;",
      "right" : "double ra = r + temp - temp;",
      "info" : "VariableDeclarationStatement[88422-88450]:VariableDeclarationStatement[88422-88450]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[88459-88478]:VariableDeclarationStatement[88459-88478]"
    }, {
      "left" : "rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;",
      "right" : "rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;",
      "info" : "ExpressionStatement[88488-88542]:ExpressionStatement[88488-88542]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[88552-88567]:ExpressionStatement[88552-88567]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[88576-88599]:ExpressionStatement[88576-88599]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[88608-88618]:ExpressionStatement[88608-88618]"
    }, {
      "left" : "double result = atan(ra, rb, x < 0);",
      "right" : "double result = atan(ra, rb, x < 0);",
      "info" : "VariableDeclarationStatement[88649-88685]:VariableDeclarationStatement[88649-88685]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[88695-88709]:ReturnStatement[88695-88709]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[88851-88857]:Modifier[88851-88857]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[88858-88864]:Modifier[88858-88864]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[88865-88871]:PrimitiveType[88865-88871]"
    }, {
      "left" : "asin",
      "right" : "asin",
      "info" : "SimpleName[88872-88876]:SimpleName[88872-88876]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[88877-88885]:SingleVariableDeclaration[88877-88885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88887-90328]:Block[88887-90328]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[88895-88945]:IfStatement[88895-88945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88907-88945]:Block[88907-88945]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[88919-88937]:ReturnStatement[88919-88937]"
    }, {
      "left" : "if (x > 1.0 || x < -1.0)",
      "right" : "if (x > 1.0 || x < -1.0)",
      "info" : "IfStatement[88953-89016]:IfStatement[88953-89016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88978-89016]:Block[88978-89016]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[88990-89008]:ReturnStatement[88990-89008]"
    }, {
      "left" : "if (x == 1.0)",
      "right" : "if (x == 1.0)",
      "info" : "IfStatement[89024-89077]:IfStatement[89024-89077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89038-89077]:Block[89038-89077]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[89050-89069]:ReturnStatement[89050-89069]"
    }, {
      "left" : "if (x == -1.0)",
      "right" : "if (x == -1.0)",
      "info" : "IfStatement[89085-89140]:IfStatement[89085-89140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89100-89140]:Block[89100-89140]"
    }, {
      "left" : "return -Math.PI/2.0;",
      "right" : "return -Math.PI/2.0;",
      "info" : "ReturnStatement[89112-89132]:ReturnStatement[89112-89132]"
    }, {
      "left" : "double temp = x * 1073741824.0;",
      "right" : "double temp = x * 1073741824.0;",
      "info" : "VariableDeclarationStatement[89219-89250]:VariableDeclarationStatement[89219-89250]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[89257-89291]:VariableDeclarationStatement[89257-89291]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[89298-89323]:VariableDeclarationStatement[89298-89323]"
    }, {
      "left" : "double ya = xa*xa;",
      "right" : "double ya = xa*xa;",
      "info" : "VariableDeclarationStatement[89353-89371]:VariableDeclarationStatement[89353-89371]"
    }, {
      "left" : "double yb = xa*xb*2.0 + xb*xb;",
      "right" : "double yb = xa*xb*2.0 + xb*xb;",
      "info" : "VariableDeclarationStatement[89378-89408]:VariableDeclarationStatement[89378-89408]"
    }, {
      "left" : "ya = -ya;",
      "right" : "ya = -ya;",
      "info" : "ExpressionStatement[89444-89453]:ExpressionStatement[89444-89453]"
    }, {
      "left" : "yb = -yb;",
      "right" : "yb = -yb;",
      "info" : "ExpressionStatement[89460-89469]:ExpressionStatement[89460-89469]"
    }, {
      "left" : "double za = 1.0 + ya;",
      "right" : "double za = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[89477-89498]:VariableDeclarationStatement[89477-89498]"
    }, {
      "left" : "double zb = -(za - 1.0 - ya);",
      "right" : "double zb = -(za - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[89505-89534]:VariableDeclarationStatement[89505-89534]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[89542-89557]:ExpressionStatement[89542-89557]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[89564-89588]:ExpressionStatement[89564-89588]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[89595-89605]:ExpressionStatement[89595-89605]"
    }, {
      "left" : "double y;",
      "right" : "double y;",
      "info" : "VariableDeclarationStatement[89637-89646]:VariableDeclarationStatement[89637-89646]"
    }, {
      "left" : "y = sqrt(za);",
      "right" : "y = sqrt(za);",
      "info" : "ExpressionStatement[89653-89666]:ExpressionStatement[89653-89666]"
    }, {
      "left" : "temp = y * 1073741824.0;",
      "right" : "temp = y * 1073741824.0;",
      "info" : "ExpressionStatement[89673-89697]:ExpressionStatement[89673-89697]"
    }, {
      "left" : "ya = y + temp - temp;",
      "right" : "ya = y + temp - temp;",
      "info" : "ExpressionStatement[89704-89725]:ExpressionStatement[89704-89725]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[89732-89744]:ExpressionStatement[89732-89744]"
    }, {
      "left" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "right" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "info" : "ExpressionStatement[89789-89836]:ExpressionStatement[89789-89836]"
    }, {
      "left" : "double dx = zb / (2.0*y);",
      "right" : "double dx = zb / (2.0*y);",
      "info" : "VariableDeclarationStatement[89883-89908]:VariableDeclarationStatement[89883-89908]"
    }, {
      "left" : "double r = x/y;",
      "right" : "double r = x/y;",
      "info" : "VariableDeclarationStatement[89947-89962]:VariableDeclarationStatement[89947-89962]"
    }, {
      "left" : "temp = r * 1073741824.0;",
      "right" : "temp = r * 1073741824.0;",
      "info" : "ExpressionStatement[89969-89993]:ExpressionStatement[89969-89993]"
    }, {
      "left" : "double ra = r + temp - temp;",
      "right" : "double ra = r + temp - temp;",
      "info" : "VariableDeclarationStatement[90000-90028]:VariableDeclarationStatement[90000-90028]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[90035-90054]:VariableDeclarationStatement[90035-90054]"
    }, {
      "left" : "rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;",
      "right" : "rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;",
      "info" : "ExpressionStatement[90062-90108]:ExpressionStatement[90062-90108]"
    }, {
      "left" : "rb += -x * dx / y / y;",
      "right" : "rb += -x * dx / y / y;",
      "info" : "ExpressionStatement[90152-90174]:ExpressionStatement[90152-90174]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[90225-90240]:ExpressionStatement[90225-90240]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[90247-90270]:ExpressionStatement[90247-90270]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[90277-90287]:ExpressionStatement[90277-90287]"
    }, {
      "left" : "return atan(ra, rb, false);",
      "right" : "return atan(ra, rb, false);",
      "info" : "ReturnStatement[90295-90322]:ReturnStatement[90295-90322]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[90468-90474]:Modifier[90468-90474]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90475-90481]:Modifier[90475-90481]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[90482-90488]:PrimitiveType[90482-90488]"
    }, {
      "left" : "acos",
      "right" : "acos",
      "info" : "SimpleName[90489-90493]:SimpleName[90489-90493]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[90494-90502]:SingleVariableDeclaration[90494-90502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90504-92009]:Block[90504-92009]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[90512-90562]:IfStatement[90512-90562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90524-90562]:Block[90524-90562]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[90536-90554]:ReturnStatement[90536-90554]"
    }, {
      "left" : "if (x > 1.0 || x < -1.0)",
      "right" : "if (x > 1.0 || x < -1.0)",
      "info" : "IfStatement[90570-90633]:IfStatement[90570-90633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90595-90633]:Block[90595-90633]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[90607-90625]:ReturnStatement[90607-90625]"
    }, {
      "left" : "if (x == -1.0)",
      "right" : "if (x == -1.0)",
      "info" : "IfStatement[90641-90691]:IfStatement[90641-90691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90656-90691]:Block[90656-90691]"
    }, {
      "left" : "return Math.PI;",
      "right" : "return Math.PI;",
      "info" : "ReturnStatement[90668-90683]:ReturnStatement[90668-90683]"
    }, {
      "left" : "if (x == 1.0)",
      "right" : "if (x == 1.0)",
      "info" : "IfStatement[90699-90744]:IfStatement[90699-90744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90713-90744]:Block[90713-90744]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[90725-90736]:ReturnStatement[90725-90736]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[90752-90803]:IfStatement[90752-90803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90764-90803]:Block[90764-90803]"
    }, {
      "left" : "return Math.PI/2.0;",
      "right" : "return Math.PI/2.0;",
      "info" : "ReturnStatement[90776-90795]:ReturnStatement[90776-90795]"
    }, {
      "left" : "double temp = x * 1073741824.0;",
      "right" : "double temp = x * 1073741824.0;",
      "info" : "VariableDeclarationStatement[90882-90913]:VariableDeclarationStatement[90882-90913]"
    }, {
      "left" : "final double xa = x + temp - temp;",
      "right" : "final double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[90920-90954]:VariableDeclarationStatement[90920-90954]"
    }, {
      "left" : "final double xb = x - xa;",
      "right" : "final double xb = x - xa;",
      "info" : "VariableDeclarationStatement[90961-90986]:VariableDeclarationStatement[90961-90986]"
    }, {
      "left" : "double ya = xa*xa;",
      "right" : "double ya = xa*xa;",
      "info" : "VariableDeclarationStatement[91016-91034]:VariableDeclarationStatement[91016-91034]"
    }, {
      "left" : "double yb = xa*xb*2.0 + xb*xb;",
      "right" : "double yb = xa*xb*2.0 + xb*xb;",
      "info" : "VariableDeclarationStatement[91041-91071]:VariableDeclarationStatement[91041-91071]"
    }, {
      "left" : "ya = -ya;",
      "right" : "ya = -ya;",
      "info" : "ExpressionStatement[91107-91116]:ExpressionStatement[91107-91116]"
    }, {
      "left" : "yb = -yb;",
      "right" : "yb = -yb;",
      "info" : "ExpressionStatement[91123-91132]:ExpressionStatement[91123-91132]"
    }, {
      "left" : "double za = 1.0 + ya;",
      "right" : "double za = 1.0 + ya;",
      "info" : "VariableDeclarationStatement[91140-91161]:VariableDeclarationStatement[91140-91161]"
    }, {
      "left" : "double zb = -(za - 1.0 - ya);",
      "right" : "double zb = -(za - 1.0 - ya);",
      "info" : "VariableDeclarationStatement[91168-91197]:VariableDeclarationStatement[91168-91197]"
    }, {
      "left" : "temp = za + yb;",
      "right" : "temp = za + yb;",
      "info" : "ExpressionStatement[91205-91220]:ExpressionStatement[91205-91220]"
    }, {
      "left" : "zb += -(temp - za - yb);",
      "right" : "zb += -(temp - za - yb);",
      "info" : "ExpressionStatement[91227-91251]:ExpressionStatement[91227-91251]"
    }, {
      "left" : "za = temp;",
      "right" : "za = temp;",
      "info" : "ExpressionStatement[91258-91268]:ExpressionStatement[91258-91268]"
    }, {
      "left" : "double y = sqrt(za);",
      "right" : "double y = sqrt(za);",
      "info" : "VariableDeclarationStatement[91300-91320]:VariableDeclarationStatement[91300-91320]"
    }, {
      "left" : "temp = y * 1073741824.0;",
      "right" : "temp = y * 1073741824.0;",
      "info" : "ExpressionStatement[91327-91351]:ExpressionStatement[91327-91351]"
    }, {
      "left" : "ya = y + temp - temp;",
      "right" : "ya = y + temp - temp;",
      "info" : "ExpressionStatement[91358-91379]:ExpressionStatement[91358-91379]"
    }, {
      "left" : "yb = y - ya;",
      "right" : "yb = y - ya;",
      "info" : "ExpressionStatement[91386-91398]:ExpressionStatement[91386-91398]"
    }, {
      "left" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "right" : "yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);",
      "info" : "ExpressionStatement[91443-91490]:ExpressionStatement[91443-91490]"
    }, {
      "left" : "yb += zb / (2.0*y);",
      "right" : "yb += zb / (2.0*y);",
      "info" : "ExpressionStatement[91537-91556]:ExpressionStatement[91537-91556]"
    }, {
      "left" : "y = ya+yb;",
      "right" : "y = ya+yb;",
      "info" : "ExpressionStatement[91563-91573]:ExpressionStatement[91563-91573]"
    }, {
      "left" : "yb = -(y - ya - yb);",
      "right" : "yb = -(y - ya - yb);",
      "info" : "ExpressionStatement[91580-91600]:ExpressionStatement[91580-91600]"
    }, {
      "left" : "double r = y/x;",
      "right" : "double r = y/x;",
      "info" : "VariableDeclarationStatement[91639-91654]:VariableDeclarationStatement[91639-91654]"
    }, {
      "left" : "temp = r * 1073741824.0;",
      "right" : "temp = r * 1073741824.0;",
      "info" : "ExpressionStatement[91661-91685]:ExpressionStatement[91661-91685]"
    }, {
      "left" : "double ra = r + temp - temp;",
      "right" : "double ra = r + temp - temp;",
      "info" : "VariableDeclarationStatement[91692-91720]:VariableDeclarationStatement[91692-91720]"
    }, {
      "left" : "double rb = r - ra;",
      "right" : "double rb = r - ra;",
      "info" : "VariableDeclarationStatement[91727-91746]:VariableDeclarationStatement[91727-91746]"
    }, {
      "left" : "rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;",
      "right" : "rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;",
      "info" : "ExpressionStatement[91754-91800]:ExpressionStatement[91754-91800]"
    }, {
      "left" : "rb += yb / x;",
      "right" : "rb += yb / x;",
      "info" : "ExpressionStatement[91844-91857]:ExpressionStatement[91844-91857]"
    }, {
      "left" : "temp = ra + rb;",
      "right" : "temp = ra + rb;",
      "info" : "ExpressionStatement[91908-91923]:ExpressionStatement[91908-91923]"
    }, {
      "left" : "rb = -(temp - ra - rb);",
      "right" : "rb = -(temp - ra - rb);",
      "info" : "ExpressionStatement[91930-91953]:ExpressionStatement[91930-91953]"
    }, {
      "left" : "ra = temp;",
      "right" : "ra = temp;",
      "info" : "ExpressionStatement[91960-91970]:ExpressionStatement[91960-91970]"
    }, {
      "left" : "return atan(ra, rb, x<0);",
      "right" : "return atan(ra, rb, x<0);",
      "info" : "ReturnStatement[91978-92003]:ReturnStatement[91978-92003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92149-92155]:Modifier[92149-92155]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[92156-92162]:Modifier[92156-92162]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[92163-92169]:PrimitiveType[92163-92169]"
    }, {
      "left" : "cbrt",
      "right" : "cbrt",
      "info" : "SimpleName[92170-92174]:SimpleName[92170-92174]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[92175-92183]:SingleVariableDeclaration[92175-92183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92185-94708]:Block[92185-94708]"
    }, {
      "left" : "long inbits = Double.doubleToLongBits(x);",
      "right" : "long inbits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[92234-92275]:VariableDeclarationStatement[92234-92275]"
    }, {
      "left" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "VariableDeclarationStatement[92282-92335]:VariableDeclarationStatement[92282-92335]"
    }, {
      "left" : "boolean subnormal = false;",
      "right" : "boolean subnormal = false;",
      "info" : "VariableDeclarationStatement[92342-92368]:VariableDeclarationStatement[92342-92368]"
    }, {
      "left" : "if (exponent == -1023)",
      "right" : "if (exponent == -1023)",
      "info" : "IfStatement[92376-92691]:IfStatement[92376-92691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92399-92691]:Block[92399-92691]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[92411-92460]:IfStatement[92411-92460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92423-92460]:Block[92423-92460]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[92439-92448]:ReturnStatement[92439-92448]"
    }, {
      "left" : "subnormal = true;",
      "right" : "subnormal = true;",
      "info" : "ExpressionStatement[92512-92529]:ExpressionStatement[92512-92529]"
    }, {
      "left" : "x *= 1.8014398509481984E16;",
      "right" : "x *= 1.8014398509481984E16;",
      "info" : "ExpressionStatement[92540-92567]:ExpressionStatement[92540-92567]"
    }, {
      "left" : "inbits = Double.doubleToLongBits(x);",
      "right" : "inbits = Double.doubleToLongBits(x);",
      "info" : "ExpressionStatement[92587-92623]:ExpressionStatement[92587-92623]"
    }, {
      "left" : "exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "right" : "exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;",
      "info" : "ExpressionStatement[92634-92683]:ExpressionStatement[92634-92683]"
    }, {
      "left" : "if (exponent == 1024)",
      "right" : "if (exponent == 1024)",
      "info" : "IfStatement[92699-92799]:IfStatement[92699-92799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92721-92799]:Block[92721-92799]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[92782-92791]:ReturnStatement[92782-92791]"
    }, {
      "left" : "int exp3 = exponent / 3;",
      "right" : "int exp3 = exponent / 3;",
      "info" : "VariableDeclarationStatement[92844-92868]:VariableDeclarationStatement[92844-92868]"
    }, {
      "left" : "double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);",
      "right" : "double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |\n                                          (long)(((exp3 + 1023) & 0x7ff)) << 52);",
      "info" : "VariableDeclarationStatement[92958-93108]:VariableDeclarationStatement[92958-93108]"
    }, {
      "left" : "final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);",
      "right" : "final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);",
      "info" : "VariableDeclarationStatement[93166-93264]:VariableDeclarationStatement[93166-93264]"
    }, {
      "left" : "double est = -0.010714690733195933;",
      "right" : "double est = -0.010714690733195933;",
      "info" : "VariableDeclarationStatement[93329-93364]:VariableDeclarationStatement[93329-93364]"
    }, {
      "left" : "est = est * mant + 0.0875862700108075;",
      "right" : "est = est * mant + 0.0875862700108075;",
      "info" : "ExpressionStatement[93371-93409]:ExpressionStatement[93371-93409]"
    }, {
      "left" : "est = est * mant + -0.3058015757857271;",
      "right" : "est = est * mant + -0.3058015757857271;",
      "info" : "ExpressionStatement[93416-93455]:ExpressionStatement[93416-93455]"
    }, {
      "left" : "est = est * mant + 0.7249995199969751;",
      "right" : "est = est * mant + 0.7249995199969751;",
      "info" : "ExpressionStatement[93462-93500]:ExpressionStatement[93462-93500]"
    }, {
      "left" : "est = est * mant + 0.5039018405998233;",
      "right" : "est = est * mant + 0.5039018405998233;",
      "info" : "ExpressionStatement[93507-93545]:ExpressionStatement[93507-93545]"
    }, {
      "left" : "est *= CBRTTWO[exponent % 3 + 2];",
      "right" : "est *= CBRTTWO[exponent % 3 + 2];",
      "info" : "ExpressionStatement[93553-93586]:ExpressionStatement[93553-93586]"
    }, {
      "left" : "final double xs = x / (p2*p2*p2);",
      "right" : "final double xs = x / (p2*p2*p2);",
      "info" : "VariableDeclarationStatement[93850-93883]:VariableDeclarationStatement[93850-93883]"
    }, {
      "left" : "est += (xs - est*est*est) / (3*est*est);",
      "right" : "est += (xs - est*est*est) / (3*est*est);",
      "info" : "ExpressionStatement[93890-93930]:ExpressionStatement[93890-93930]"
    }, {
      "left" : "est += (xs - est*est*est) / (3*est*est);",
      "right" : "est += (xs - est*est*est) / (3*est*est);",
      "info" : "ExpressionStatement[93937-93977]:ExpressionStatement[93937-93977]"
    }, {
      "left" : "double temp = est * 1073741824.0;",
      "right" : "double temp = est * 1073741824.0;",
      "info" : "VariableDeclarationStatement[94075-94108]:VariableDeclarationStatement[94075-94108]"
    }, {
      "left" : "double ya = est + temp - temp;",
      "right" : "double ya = est + temp - temp;",
      "info" : "VariableDeclarationStatement[94115-94145]:VariableDeclarationStatement[94115-94145]"
    }, {
      "left" : "double yb = est - ya;",
      "right" : "double yb = est - ya;",
      "info" : "VariableDeclarationStatement[94152-94173]:VariableDeclarationStatement[94152-94173]"
    }, {
      "left" : "double za = ya * ya;",
      "right" : "double za = ya * ya;",
      "info" : "VariableDeclarationStatement[94181-94201]:VariableDeclarationStatement[94181-94201]"
    }, {
      "left" : "double zb = ya * yb * 2.0 + yb * yb;",
      "right" : "double zb = ya * yb * 2.0 + yb * yb;",
      "info" : "VariableDeclarationStatement[94208-94244]:VariableDeclarationStatement[94208-94244]"
    }, {
      "left" : "temp = za * 1073741824.0;",
      "right" : "temp = za * 1073741824.0;",
      "info" : "ExpressionStatement[94251-94276]:ExpressionStatement[94251-94276]"
    }, {
      "left" : "double temp2 = za + temp - temp;",
      "right" : "double temp2 = za + temp - temp;",
      "info" : "VariableDeclarationStatement[94283-94315]:VariableDeclarationStatement[94283-94315]"
    }, {
      "left" : "zb += za - temp2;",
      "right" : "zb += za - temp2;",
      "info" : "ExpressionStatement[94322-94339]:ExpressionStatement[94322-94339]"
    }, {
      "left" : "za = temp2;",
      "right" : "za = temp2;",
      "info" : "ExpressionStatement[94346-94357]:ExpressionStatement[94346-94357]"
    }, {
      "left" : "zb = za * yb + ya * zb + zb * yb;",
      "right" : "zb = za * yb + ya * zb + zb * yb;",
      "info" : "ExpressionStatement[94365-94398]:ExpressionStatement[94365-94398]"
    }, {
      "left" : "za = za * ya;",
      "right" : "za = za * ya;",
      "info" : "ExpressionStatement[94405-94418]:ExpressionStatement[94405-94418]"
    }, {
      "left" : "double na = xs - za;",
      "right" : "double na = xs - za;",
      "info" : "VariableDeclarationStatement[94426-94446]:VariableDeclarationStatement[94426-94446]"
    }, {
      "left" : "double nb = -(na - xs + za);",
      "right" : "double nb = -(na - xs + za);",
      "info" : "VariableDeclarationStatement[94453-94481]:VariableDeclarationStatement[94453-94481]"
    }, {
      "left" : "nb -= zb;",
      "right" : "nb -= zb;",
      "info" : "ExpressionStatement[94488-94497]:ExpressionStatement[94488-94497]"
    }, {
      "left" : "est += (na+nb)/(3*est*est);",
      "right" : "est += (na+nb)/(3*est*est);",
      "info" : "ExpressionStatement[94505-94532]:ExpressionStatement[94505-94532]"
    }, {
      "left" : "est *= p2;",
      "right" : "est *= p2;",
      "info" : "ExpressionStatement[94595-94605]:ExpressionStatement[94595-94605]"
    }, {
      "left" : "if (subnormal)",
      "right" : "if (subnormal)",
      "info" : "IfStatement[94613-94683]:IfStatement[94613-94683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94628-94683]:Block[94628-94683]"
    }, {
      "left" : "est *= 3.814697265625E-6;",
      "right" : "est *= 3.814697265625E-6;",
      "info" : "ExpressionStatement[94640-94665]:ExpressionStatement[94640-94665]"
    }, {
      "left" : "return est;",
      "right" : "return est;",
      "info" : "ReturnStatement[94691-94702]:ReturnStatement[94691-94702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[94873-94879]:Modifier[94873-94879]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[94880-94886]:Modifier[94880-94886]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[94887-94893]:PrimitiveType[94887-94893]"
    }, {
      "left" : "toRadians",
      "right" : "toRadians",
      "info" : "SimpleName[94894-94903]:SimpleName[94894-94903]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[94904-94912]:SingleVariableDeclaration[94904-94912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94918-95199]:Block[94918-95199]"
    }, {
      "left" : "final double facta = 0.01745329052209854;",
      "right" : "final double facta = 0.01745329052209854;",
      "info" : "VariableDeclarationStatement[94928-94969]:VariableDeclarationStatement[94928-94969]"
    }, {
      "left" : "final double factb = 1.997844754509471E-9;",
      "right" : "final double factb = 1.997844754509471E-9;",
      "info" : "VariableDeclarationStatement[94978-95020]:VariableDeclarationStatement[94978-95020]"
    }, {
      "left" : "double temp = x * 1073741824.0;",
      "right" : "double temp = x * 1073741824.0;",
      "info" : "VariableDeclarationStatement[95030-95061]:VariableDeclarationStatement[95030-95061]"
    }, {
      "left" : "double xa = x + temp - temp;",
      "right" : "double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[95070-95098]:VariableDeclarationStatement[95070-95098]"
    }, {
      "left" : "double xb = x - xa;",
      "right" : "double xb = x - xa;",
      "info" : "VariableDeclarationStatement[95107-95126]:VariableDeclarationStatement[95107-95126]"
    }, {
      "left" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "right" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "info" : "ReturnStatement[95136-95193]:ReturnStatement[95136-95193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[95364-95370]:Modifier[95364-95370]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[95371-95377]:Modifier[95371-95377]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[95378-95384]:PrimitiveType[95378-95384]"
    }, {
      "left" : "toDegrees",
      "right" : "toDegrees",
      "info" : "SimpleName[95385-95394]:SimpleName[95385-95394]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[95395-95403]:SingleVariableDeclaration[95395-95403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95409-95687]:Block[95409-95687]"
    }, {
      "left" : "final double facta = 57.2957763671875;",
      "right" : "final double facta = 57.2957763671875;",
      "info" : "VariableDeclarationStatement[95419-95457]:VariableDeclarationStatement[95419-95457]"
    }, {
      "left" : "final double factb = 3.145894820876798E-6;",
      "right" : "final double factb = 3.145894820876798E-6;",
      "info" : "VariableDeclarationStatement[95466-95508]:VariableDeclarationStatement[95466-95508]"
    }, {
      "left" : "double temp = x * 1073741824.0;",
      "right" : "double temp = x * 1073741824.0;",
      "info" : "VariableDeclarationStatement[95518-95549]:VariableDeclarationStatement[95518-95549]"
    }, {
      "left" : "double xa = x + temp - temp;",
      "right" : "double xa = x + temp - temp;",
      "info" : "VariableDeclarationStatement[95558-95586]:VariableDeclarationStatement[95558-95586]"
    }, {
      "left" : "double xb = x - xa;",
      "right" : "double xb = x - xa;",
      "info" : "VariableDeclarationStatement[95595-95614]:VariableDeclarationStatement[95595-95614]"
    }, {
      "left" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "right" : "return xb * factb + xb * facta + xa * factb + xa * facta;",
      "info" : "ReturnStatement[95624-95681]:ReturnStatement[95624-95681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[95816-95822]:Modifier[95816-95822]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[95823-95829]:Modifier[95823-95829]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[95830-95833]:PrimitiveType[95830-95833]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[95834-95837]:SimpleName[95834-95837]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[95838-95849]:SingleVariableDeclaration[95838-95849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95851-95891]:Block[95851-95891]"
    }, {
      "left" : "return (x < 0) ? -x : x;",
      "right" : "return (x < 0) ? -x : x;",
      "info" : "ReturnStatement[95861-95885]:ReturnStatement[95861-95885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96020-96026]:Modifier[96020-96026]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[96027-96033]:Modifier[96027-96033]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[96034-96038]:PrimitiveType[96034-96038]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[96039-96042]:SimpleName[96039-96042]"
    }, {
      "left" : "final long x",
      "right" : "final long x",
      "info" : "SingleVariableDeclaration[96043-96055]:SingleVariableDeclaration[96043-96055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96057-96098]:Block[96057-96098]"
    }, {
      "left" : "return (x < 0l) ? -x : x;",
      "right" : "return (x < 0l) ? -x : x;",
      "info" : "ReturnStatement[96067-96092]:ReturnStatement[96067-96092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96227-96233]:Modifier[96227-96233]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[96234-96240]:Modifier[96234-96240]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[96241-96246]:PrimitiveType[96241-96246]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[96247-96250]:SimpleName[96247-96250]"
    }, {
      "left" : "final float x",
      "right" : "final float x",
      "info" : "SingleVariableDeclaration[96251-96264]:SingleVariableDeclaration[96251-96264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96266-96309]:Block[96266-96309]"
    }, {
      "left" : "return (x < 0.0f) ? -x : x;",
      "right" : "return (x < 0.0f) ? -x : x;",
      "info" : "ReturnStatement[96276-96303]:ReturnStatement[96276-96303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96438-96444]:Modifier[96438-96444]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[96445-96451]:Modifier[96445-96451]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[96452-96458]:PrimitiveType[96452-96458]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[96459-96462]:SimpleName[96459-96462]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[96463-96471]:SingleVariableDeclaration[96463-96471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96473-96515]:Block[96473-96515]"
    }, {
      "left" : "return (x < 0.0) ? -x : x;",
      "right" : "return (x < 0.0) ? -x : x;",
      "info" : "ReturnStatement[96483-96509]:ReturnStatement[96483-96509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96686-96692]:Modifier[96686-96692]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[96693-96699]:Modifier[96693-96699]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[96700-96706]:PrimitiveType[96700-96706]"
    }, {
      "left" : "ulp",
      "right" : "ulp",
      "info" : "SimpleName[96707-96710]:SimpleName[96707-96710]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[96711-96719]:SingleVariableDeclaration[96711-96719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96721-96809]:Block[96721-96809]"
    }, {
      "left" : "return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));",
      "right" : "return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));",
      "info" : "ReturnStatement[96731-96803]:ReturnStatement[96731-96803]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[97549-97555]:Modifier[97549-97555]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[97556-97562]:Modifier[97556-97562]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[97563-97569]:PrimitiveType[97563-97569]"
    }, {
      "left" : "nextAfter",
      "right" : "nextAfter",
      "info" : "SimpleName[97570-97579]:SimpleName[97570-97579]"
    }, {
      "left" : "double d",
      "right" : "double d",
      "info" : "SingleVariableDeclaration[97580-97588]:SingleVariableDeclaration[97580-97588]"
    }, {
      "left" : "double direction",
      "right" : "double direction",
      "info" : "SingleVariableDeclaration[97590-97606]:SingleVariableDeclaration[97590-97606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97608-99144]:Block[97608-99144]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[97671-97853]:IfStatement[97671-97853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97716-97749]:Block[97716-97749]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[97730-97739]:ReturnStatement[97730-97739]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[97755-97853]:IfStatement[97755-97853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97767-97853]:Block[97767-97853]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[97781-97843]:ReturnStatement[97781-97843]"
    }, {
      "left" : "long bits     = Double.doubleToLongBits(d);",
      "right" : "long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[98022-98065]:VariableDeclarationStatement[98022-98065]"
    }, {
      "left" : "long sign     = bits & 0x8000000000000000L;",
      "right" : "long sign     = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[98074-98117]:VariableDeclarationStatement[98074-98117]"
    }, {
      "left" : "long exponent = bits & 0x7ff0000000000000L;",
      "right" : "long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[98126-98169]:VariableDeclarationStatement[98126-98169]"
    }, {
      "left" : "long mantissa = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[98178-98221]:VariableDeclarationStatement[98178-98221]"
    }, {
      "left" : "if (d * (direction - d) >= 0)",
      "right" : "if (d * (direction - d) >= 0)",
      "info" : "IfStatement[98231-99137]:IfStatement[98231-99137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98261-98670]:Block[98261-98670]"
    }, {
      "left" : "if (mantissa == 0x000fffffffffffffL)",
      "right" : "if (mantissa == 0x000fffffffffffffL)",
      "info" : "IfStatement[98322-98660]:IfStatement[98322-98660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98359-98510]:Block[98359-98510]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                               (exponent + 0x0010000000000000L));",
      "right" : "return Double.longBitsToDouble(sign |\n                                               (exponent + 0x0010000000000000L));",
      "info" : "ReturnStatement[98377-98496]:ReturnStatement[98377-98496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98516-98660]:Block[98516-98660]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                               exponent | (mantissa + 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                               exponent | (mantissa + 1));",
      "info" : "ReturnStatement[98534-98646]:ReturnStatement[98534-98646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98676-99137]:Block[98676-99137]"
    }, {
      "left" : "if (mantissa == 0L)",
      "right" : "if (mantissa == 0L)",
      "info" : "IfStatement[98737-99127]:IfStatement[98737-99127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98757-98977]:Block[98757-98977]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                               (exponent - 0x0010000000000000L) |\n                                               0x000fffffffffffffL);",
      "right" : "return Double.longBitsToDouble(sign |\n                                               (exponent - 0x0010000000000000L) |\n                                               0x000fffffffffffffL);",
      "info" : "ReturnStatement[98775-98963]:ReturnStatement[98775-98963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98983-99127]:Block[98983-99127]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                               exponent | (mantissa - 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                               exponent | (mantissa - 1));",
      "info" : "ReturnStatement[99001-99113]:ReturnStatement[99001-99113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[99340-99346]:Modifier[99340-99346]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[99347-99353]:Modifier[99347-99353]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[99354-99360]:PrimitiveType[99354-99360]"
    }, {
      "left" : "floor",
      "right" : "floor",
      "info" : "SimpleName[99361-99366]:SimpleName[99361-99366]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[99367-99375]:SingleVariableDeclaration[99367-99375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99377-99728]:Block[99377-99728]"
    }, {
      "left" : "long y;",
      "right" : "long y;",
      "info" : "VariableDeclarationStatement[99387-99394]:VariableDeclarationStatement[99387-99394]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[99404-99456]:IfStatement[99404-99456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99416-99456]:Block[99416-99456]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[99437-99446]:ReturnStatement[99437-99446]"
    }, {
      "left" : "if (x >= 4503599627370496.0 || x <= -4503599627370496.0)",
      "right" : "if (x >= 4503599627370496.0 || x <= -4503599627370496.0)",
      "info" : "IfStatement[99466-99556]:IfStatement[99466-99556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99523-99556]:Block[99523-99556]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[99537-99546]:ReturnStatement[99537-99546]"
    }, {
      "left" : "y = (long) x;",
      "right" : "y = (long) x;",
      "info" : "ExpressionStatement[99566-99579]:ExpressionStatement[99566-99579]"
    }, {
      "left" : "if (x < 0 && y != x)",
      "right" : "if (x < 0 && y != x)",
      "info" : "IfStatement[99588-99637]:IfStatement[99588-99637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99609-99637]:Block[99609-99637]"
    }, {
      "left" : "y--;",
      "right" : "y--;",
      "info" : "ExpressionStatement[99623-99627]:ExpressionStatement[99623-99627]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[99647-99694]:IfStatement[99647-99694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99659-99694]:Block[99659-99694]"
    }, {
      "left" : "return x*y;",
      "right" : "return x*y;",
      "info" : "ReturnStatement[99673-99684]:ReturnStatement[99673-99684]"
    }, {
      "left" : "return (double) y;",
      "right" : "return (double) y;",
      "info" : "ReturnStatement[99704-99722]:ReturnStatement[99704-99722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[99923-99929]:Modifier[99923-99929]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[99930-99936]:Modifier[99930-99936]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[99937-99943]:PrimitiveType[99937-99943]"
    }, {
      "left" : "ceil",
      "right" : "ceil",
      "info" : "SimpleName[99944-99948]:SimpleName[99944-99948]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[99949-99957]:SingleVariableDeclaration[99949-99957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99959-100218]:Block[99959-100218]"
    }, {
      "left" : "double y;",
      "right" : "double y;",
      "info" : "VariableDeclarationStatement[99969-99978]:VariableDeclarationStatement[99969-99978]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[99988-100040]:IfStatement[99988-100040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100000-100040]:Block[100000-100040]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[100021-100030]:ReturnStatement[100021-100030]"
    }, {
      "left" : "y = floor(x);",
      "right" : "y = floor(x);",
      "info" : "ExpressionStatement[100050-100063]:ExpressionStatement[100050-100063]"
    }, {
      "left" : "if (y == x)",
      "right" : "if (y == x)",
      "info" : "IfStatement[100072-100117]:IfStatement[100072-100117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100084-100117]:Block[100084-100117]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[100098-100107]:ReturnStatement[100098-100107]"
    }, {
      "left" : "y += 1.0;",
      "right" : "y += 1.0;",
      "info" : "ExpressionStatement[100127-100136]:ExpressionStatement[100127-100136]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[100146-100193]:IfStatement[100146-100193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100158-100193]:Block[100158-100193]"
    }, {
      "left" : "return x*y;",
      "right" : "return x*y;",
      "info" : "ReturnStatement[100172-100183]:ReturnStatement[100172-100183]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[100203-100212]:ReturnStatement[100203-100212]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[100501-100507]:Modifier[100501-100507]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[100508-100514]:Modifier[100508-100514]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[100515-100521]:PrimitiveType[100515-100521]"
    }, {
      "left" : "rint",
      "right" : "rint",
      "info" : "SimpleName[100522-100526]:SimpleName[100522-100526]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[100527-100535]:SingleVariableDeclaration[100527-100535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100537-100823]:Block[100537-100823]"
    }, {
      "left" : "double y = floor(x);",
      "right" : "double y = floor(x);",
      "info" : "VariableDeclarationStatement[100547-100567]:VariableDeclarationStatement[100547-100567]"
    }, {
      "left" : "double d = x - y;",
      "right" : "double d = x - y;",
      "info" : "VariableDeclarationStatement[100576-100593]:VariableDeclarationStatement[100576-100593]"
    }, {
      "left" : "if (d > 0.5)",
      "right" : "if (d > 0.5)",
      "info" : "IfStatement[100603-100653]:IfStatement[100603-100653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100616-100653]:Block[100616-100653]"
    }, {
      "left" : "return y+1.0;",
      "right" : "return y+1.0;",
      "info" : "ReturnStatement[100630-100643]:ReturnStatement[100630-100643]"
    }, {
      "left" : "if (d < 0.5)",
      "right" : "if (d < 0.5)",
      "info" : "IfStatement[100662-100708]:IfStatement[100662-100708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100675-100708]:Block[100675-100708]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[100689-100698]:ReturnStatement[100689-100698]"
    }, {
      "left" : "long z = (long) y;",
      "right" : "long z = (long) y;",
      "info" : "VariableDeclarationStatement[100756-100774]:VariableDeclarationStatement[100756-100774]"
    }, {
      "left" : "return (z & 1) == 0 ? y : y + 1.0;",
      "right" : "return (z & 1) == 0 ? y : y + 1.0;",
      "info" : "ReturnStatement[100783-100817]:ReturnStatement[100783-100817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[100965-100971]:Modifier[100965-100971]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[100972-100978]:Modifier[100972-100978]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[100979-100983]:PrimitiveType[100979-100983]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[100984-100989]:SimpleName[100984-100989]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[100990-100998]:SingleVariableDeclaration[100990-100998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101000-101045]:Block[101000-101045]"
    }, {
      "left" : "return (long) floor(x + 0.5);",
      "right" : "return (long) floor(x + 0.5);",
      "info" : "ReturnStatement[101010-101039]:ReturnStatement[101010-101039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101184-101190]:Modifier[101184-101190]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[101191-101197]:Modifier[101191-101197]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[101198-101201]:PrimitiveType[101198-101201]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[101202-101207]:SimpleName[101202-101207]"
    }, {
      "left" : "final float x",
      "right" : "final float x",
      "info" : "SingleVariableDeclaration[101208-101221]:SingleVariableDeclaration[101208-101221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101223-101260]:Block[101223-101260]"
    }, {
      "left" : "return Math.round(x);",
      "right" : "return Math.round(x);",
      "info" : "ReturnStatement[101233-101254]:ReturnStatement[101233-101254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101432-101438]:Modifier[101432-101438]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[101439-101445]:Modifier[101439-101445]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[101446-101449]:PrimitiveType[101446-101449]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[101450-101453]:SimpleName[101450-101453]"
    }, {
      "left" : "final int a",
      "right" : "final int a",
      "info" : "SingleVariableDeclaration[101454-101465]:SingleVariableDeclaration[101454-101465]"
    }, {
      "left" : "final int b",
      "right" : "final int b",
      "info" : "SingleVariableDeclaration[101467-101478]:SingleVariableDeclaration[101467-101478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101480-101520]:Block[101480-101520]"
    }, {
      "left" : "return (a <= b) ? a : b;",
      "right" : "return (a <= b) ? a : b;",
      "info" : "ReturnStatement[101490-101514]:ReturnStatement[101490-101514]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101692-101698]:Modifier[101692-101698]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[101699-101705]:Modifier[101699-101705]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[101706-101710]:PrimitiveType[101706-101710]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[101711-101714]:SimpleName[101711-101714]"
    }, {
      "left" : "final long a",
      "right" : "final long a",
      "info" : "SingleVariableDeclaration[101715-101727]:SingleVariableDeclaration[101715-101727]"
    }, {
      "left" : "final long b",
      "right" : "final long b",
      "info" : "SingleVariableDeclaration[101729-101741]:SingleVariableDeclaration[101729-101741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101743-101783]:Block[101743-101783]"
    }, {
      "left" : "return (a <= b) ? a : b;",
      "right" : "return (a <= b) ? a : b;",
      "info" : "ReturnStatement[101753-101777]:ReturnStatement[101753-101777]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101955-101961]:Modifier[101955-101961]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[101962-101968]:Modifier[101962-101968]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[101969-101974]:PrimitiveType[101969-101974]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[101975-101978]:SimpleName[101975-101978]"
    }, {
      "left" : "final float a",
      "right" : "final float a",
      "info" : "SingleVariableDeclaration[101979-101992]:SingleVariableDeclaration[101979-101992]"
    }, {
      "left" : "final float b",
      "right" : "final float b",
      "info" : "SingleVariableDeclaration[101994-102007]:SingleVariableDeclaration[101994-102007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102009-102084]:Block[102009-102084]"
    }, {
      "left" : "return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);",
      "right" : "return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);",
      "info" : "ReturnStatement[102019-102078]:ReturnStatement[102019-102078]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[102256-102262]:Modifier[102256-102262]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[102263-102269]:Modifier[102263-102269]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[102270-102276]:PrimitiveType[102270-102276]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[102277-102280]:SimpleName[102277-102280]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[102281-102295]:SingleVariableDeclaration[102281-102295]"
    }, {
      "left" : "final double b",
      "right" : "final double b",
      "info" : "SingleVariableDeclaration[102297-102311]:SingleVariableDeclaration[102297-102311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102313-102390]:Block[102313-102390]"
    }, {
      "left" : "return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);",
      "right" : "return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);",
      "info" : "ReturnStatement[102323-102384]:ReturnStatement[102323-102384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[102562-102568]:Modifier[102562-102568]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[102569-102575]:Modifier[102569-102575]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[102576-102579]:PrimitiveType[102576-102579]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[102580-102583]:SimpleName[102580-102583]"
    }, {
      "left" : "final int a",
      "right" : "final int a",
      "info" : "SingleVariableDeclaration[102584-102595]:SingleVariableDeclaration[102584-102595]"
    }, {
      "left" : "final int b",
      "right" : "final int b",
      "info" : "SingleVariableDeclaration[102597-102608]:SingleVariableDeclaration[102597-102608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102610-102650]:Block[102610-102650]"
    }, {
      "left" : "return (a <= b) ? b : a;",
      "right" : "return (a <= b) ? b : a;",
      "info" : "ReturnStatement[102620-102644]:ReturnStatement[102620-102644]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[102822-102828]:Modifier[102822-102828]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[102829-102835]:Modifier[102829-102835]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[102836-102840]:PrimitiveType[102836-102840]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[102841-102844]:SimpleName[102841-102844]"
    }, {
      "left" : "final long a",
      "right" : "final long a",
      "info" : "SingleVariableDeclaration[102845-102857]:SingleVariableDeclaration[102845-102857]"
    }, {
      "left" : "final long b",
      "right" : "final long b",
      "info" : "SingleVariableDeclaration[102859-102871]:SingleVariableDeclaration[102859-102871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102873-102913]:Block[102873-102913]"
    }, {
      "left" : "return (a <= b) ? b : a;",
      "right" : "return (a <= b) ? b : a;",
      "info" : "ReturnStatement[102883-102907]:ReturnStatement[102883-102907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[103386-103392]:Modifier[103386-103392]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[103393-103399]:Modifier[103393-103399]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[103400-103406]:PrimitiveType[103400-103406]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[103407-103410]:SimpleName[103407-103410]"
    }, {
      "left" : "final double a",
      "right" : "final double a",
      "info" : "SingleVariableDeclaration[103411-103425]:SingleVariableDeclaration[103411-103425]"
    }, {
      "left" : "final double b",
      "right" : "final double b",
      "info" : "SingleVariableDeclaration[103427-103441]:SingleVariableDeclaration[103427-103441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103443-103520]:Block[103443-103520]"
    }, {
      "left" : "return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);",
      "right" : "return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);",
      "info" : "ReturnStatement[103453-103514]:ReturnStatement[103453-103514]"
    } ]
  },
  "interFileMappings" : { }
}