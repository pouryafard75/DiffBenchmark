{
  "matchedElements" : [
 {
    "left" : "class : UnionType",
    "right" : "class : UnionType",
    "info" : "TypeDeclaration[2070-17697]:TypeDeclaration[2070-17706]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2716-2764]:FieldDeclaration[2716-2764]"
  }, {
    "left" : "alternates",
    "right" : "alternates",
    "info" : "FieldDeclaration[2768-2798]:FieldDeclaration[2768-2798]"
  }, {
    "left" : "hashcode",
    "right" : "hashcode",
    "info" : "FieldDeclaration[2801-2828]:FieldDeclaration[2801-2828]"
  }, {
    "left" : "package UnionType(registry , alternates ...)",
    "right" : "package UnionType(registry , alternates ...)",
    "info" : "MethodDeclaration[2832-3101]:MethodDeclaration[2832-3101]"
  }, {
    "left" : "public getAlternates() : ",
    "right" : "public getAlternates() : ",
    "info" : "MethodDeclaration[3105-3328]:MethodDeclaration[3105-3328]"
  }, {
    "left" : "public matchesNumberContext() : boolean",
    "right" : "public matchesNumberContext() : boolean",
    "info" : "MethodDeclaration[3332-3808]:MethodDeclaration[3332-3808]"
  }, {
    "left" : "public matchesStringContext() : boolean",
    "right" : "public matchesStringContext() : boolean",
    "info" : "MethodDeclaration[3812-4539]:MethodDeclaration[3812-4539]"
  }, {
    "left" : "public matchesObjectContext() : boolean",
    "right" : "public matchesObjectContext() : boolean",
    "info" : "MethodDeclaration[4543-5455]:MethodDeclaration[4543-5455]"
  }, {
    "left" : "public findPropertyType(propertyName ) : ",
    "right" : "public findPropertyType(propertyName ) : ",
    "info" : "MethodDeclaration[5459-6080]:MethodDeclaration[5459-6080]"
  }, {
    "left" : "public canAssignTo(that ) : boolean",
    "right" : "public canAssignTo(that ) : boolean",
    "info" : "MethodDeclaration[6084-6333]:MethodDeclaration[6084-6333]"
  }, {
    "left" : "public canBeCalled() : boolean",
    "right" : "public canBeCalled() : boolean",
    "info" : "MethodDeclaration[6337-6500]:MethodDeclaration[6337-6500]"
  }, {
    "left" : "public autobox() : ",
    "right" : "public autobox() : ",
    "info" : "MethodDeclaration[6504-6726]:MethodDeclaration[6504-6726]"
  }, {
    "left" : "public restrictByNotNullOrUndefined() : ",
    "right" : "public restrictByNotNullOrUndefined() : ",
    "info" : "MethodDeclaration[6730-6994]:MethodDeclaration[6730-6994]"
  }, {
    "left" : "public testForEquality(that ) : ",
    "right" : "public testForEquality(that ) : ",
    "info" : "MethodDeclaration[6998-7330]:MethodDeclaration[6998-7330]"
  }, {
    "left" : "public isNullable() : boolean",
    "right" : "public isNullable() : boolean",
    "info" : "MethodDeclaration[7334-7783]:MethodDeclaration[7334-7783]"
  }, {
    "left" : "public isUnknownType() : boolean",
    "right" : "public isUnknownType() : boolean",
    "info" : "MethodDeclaration[7787-7953]:MethodDeclaration[7787-7953]"
  }, {
    "left" : "public isStruct() : boolean",
    "right" : "public isStruct() : boolean",
    "info" : "MethodDeclaration[7957-8122]:MethodDeclaration[7957-8122]"
  }, {
    "left" : "public isDict() : boolean",
    "right" : "public isDict() : boolean",
    "info" : "MethodDeclaration[8126-8287]:MethodDeclaration[8126-8287]"
  }, {
    "left" : "public getLeastSupertype(that ) : ",
    "right" : "public getLeastSupertype(that ) : ",
    "info" : "MethodDeclaration[8291-8614]:MethodDeclaration[8291-8614]"
  }, {
    "left" : "package meet(that ) : ",
    "right" : "package meet(that ) : ",
    "info" : "MethodDeclaration[8618-9409]:MethodDeclaration[8618-9409]"
  }, {
    "left" : "package checkUnionEquivalenceHelper(that , tolerateUnknowns boolean) : boolean",
    "right" : "package checkUnionEquivalenceHelper(that , eqMethod ) : boolean",
    "info" : "MethodDeclaration[9413-9890]:MethodDeclaration[9413-9905]"
  }, {
    "left" : "private hasAlternate(type , tolerateUnknowns boolean) : boolean",
    "right" : "private hasAlternate(type , eqMethod ) : boolean",
    "info" : "MethodDeclaration[9894-10132]:MethodDeclaration[9909-10141]"
  }, {
    "left" : "public hasProperty(pname ) : boolean",
    "right" : "public hasProperty(pname ) : boolean",
    "info" : "MethodDeclaration[10136-10331]:MethodDeclaration[10145-10340]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[10335-10400]:MethodDeclaration[10344-10409]"
  }, {
    "left" : "public toMaybeUnionType() : ",
    "right" : "public toMaybeUnionType() : ",
    "info" : "MethodDeclaration[10404-10474]:MethodDeclaration[10413-10483]"
  }, {
    "left" : "public isObject() : boolean",
    "right" : "public isObject() : boolean",
    "info" : "MethodDeclaration[10478-10651]:MethodDeclaration[10487-10660]"
  }, {
    "left" : "public contains(type ) : boolean",
    "right" : "public contains(type ) : boolean",
    "info" : "MethodDeclaration[10655-11065]:MethodDeclaration[10664-11074]"
  }, {
    "left" : "public getRestrictedUnion(type ) : ",
    "right" : "public getRestrictedUnion(type ) : ",
    "info" : "MethodDeclaration[11069-11814]:MethodDeclaration[11078-11823]"
  }, {
    "left" : "package toStringHelper(forAnnotations boolean) : ",
    "right" : "package toStringHelper(forAnnotations boolean) : ",
    "info" : "MethodDeclaration[11818-12317]:MethodDeclaration[11827-12326]"
  }, {
    "left" : "public isSubtype(that ) : boolean",
    "right" : "public isSubtype(that ) : boolean",
    "info" : "MethodDeclaration[12321-12648]:MethodDeclaration[12330-12657]"
  }, {
    "left" : "public getRestrictedTypeGivenToBooleanOutcome(outcome boolean) : ",
    "right" : "public getRestrictedTypeGivenToBooleanOutcome(outcome boolean) : ",
    "info" : "MethodDeclaration[12652-13022]:MethodDeclaration[12661-13031]"
  }, {
    "left" : "public getPossibleToBooleanOutcomes() : ",
    "right" : "public getPossibleToBooleanOutcomes() : ",
    "info" : "MethodDeclaration[13026-13368]:MethodDeclaration[13035-13377]"
  }, {
    "left" : "public getTypesUnderEquality(that ) : ",
    "right" : "public getTypesUnderEquality(that ) : ",
    "info" : "MethodDeclaration[13372-13938]:MethodDeclaration[13381-13947]"
  }, {
    "left" : "public getTypesUnderInequality(that ) : ",
    "right" : "public getTypesUnderInequality(that ) : ",
    "info" : "MethodDeclaration[13942-14512]:MethodDeclaration[13951-14521]"
  }, {
    "left" : "public getTypesUnderShallowInequality(that ) : ",
    "right" : "public getTypesUnderShallowInequality(that ) : ",
    "info" : "MethodDeclaration[14516-15100]:MethodDeclaration[14525-15109]"
  }, {
    "left" : "public visit(visitor ) : ",
    "right" : "public visit(visitor ) : ",
    "info" : "MethodDeclaration[15104-15200]:MethodDeclaration[15113-15209]"
  }, {
    "left" : "package resolveInternal(t , scope ) : ",
    "right" : "package resolveInternal(t , scope ) : ",
    "info" : "MethodDeclaration[15204-15874]:MethodDeclaration[15213-15883]"
  }, {
    "left" : "public toDebugHashCodeString() : ",
    "right" : "public toDebugHashCodeString() : ",
    "info" : "MethodDeclaration[15878-16129]:MethodDeclaration[15887-16138]"
  }, {
    "left" : "public setValidator(validator ) : boolean",
    "right" : "public setValidator(validator ) : boolean",
    "info" : "MethodDeclaration[16133-16297]:MethodDeclaration[16142-16306]"
  }, {
    "left" : "public collapseUnion() : ",
    "right" : "public collapseUnion() : ",
    "info" : "MethodDeclaration[16301-17338]:MethodDeclaration[16310-17347]"
  }, {
    "left" : "public matchConstraint(constraint ) : void",
    "right" : "public matchConstraint(constraint ) : void",
    "info" : "MethodDeclaration[17342-17499]:MethodDeclaration[17351-17508]"
  }, {
    "left" : "public hasAnyTemplateInternal() : boolean",
    "right" : "public hasAnyTemplateInternal() : boolean",
    "info" : "MethodDeclaration[17503-17695]:MethodDeclaration[17512-17704]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2674-2680]:Modifier[2674-2680]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2681-2686]:TYPE_DECLARATION_KIND[2681-2686]"
  }, {
    "left" : "UnionType",
    "right" : "UnionType",
    "info" : "SimpleName[2927-2936]:SimpleName[2927-2936]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[2937-2960]:SingleVariableDeclaration[2937-2960]"
  }, {
    "left" : "Collection<JSType> alternates",
    "right" : "Collection<JSType> alternates",
    "info" : "SingleVariableDeclaration[2962-2991]:SingleVariableDeclaration[2962-2991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2993-3101]:Block[2993-3101]"
  }, {
    "left" : "super(registry);",
    "right" : "super(registry);",
    "info" : "SuperConstructorInvocation[2999-3015]:SuperConstructorInvocation[2999-3015]"
  }, {
    "left" : "this.alternates = alternates;",
    "right" : "this.alternates = alternates;",
    "info" : "ExpressionStatement[3020-3049]:ExpressionStatement[3020-3049]"
  }, {
    "left" : "this.hashcode = this.alternates.hashCode();",
    "right" : "this.hashcode = this.alternates.hashCode();",
    "info" : "ExpressionStatement[3054-3097]:ExpressionStatement[3054-3097]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3260-3266]:Modifier[3260-3266]"
  }, {
    "left" : "Iterable<JSType>",
    "right" : "Iterable<JSType>",
    "info" : "ParameterizedType[3267-3283]:ParameterizedType[3267-3283]"
  }, {
    "left" : "getAlternates",
    "right" : "getAlternates",
    "info" : "SimpleName[3284-3297]:SimpleName[3284-3297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3300-3328]:Block[3300-3328]"
  }, {
    "left" : "return alternates;",
    "right" : "return alternates;",
    "info" : "ReturnStatement[3306-3324]:ReturnStatement[3306-3324]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3550-3559]:MarkerAnnotation[3550-3559]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3562-3568]:Modifier[3562-3568]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3569-3576]:PrimitiveType[3569-3576]"
  }, {
    "left" : "matchesNumberContext",
    "right" : "matchesNumberContext",
    "info" : "SimpleName[3577-3597]:SimpleName[3577-3597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3600-3808]:Block[3600-3808]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[3684-3786]:EnhancedForStatement[3684-3786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3712-3786]:Block[3712-3786]"
  }, {
    "left" : "if (t.matchesNumberContext())",
    "right" : "if (t.matchesNumberContext())",
    "info" : "IfStatement[3720-3780]:IfStatement[3720-3780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3750-3780]:Block[3750-3780]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3760-3772]:ReturnStatement[3760-3772]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3791-3804]:ReturnStatement[3791-3804]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4281-4290]:MarkerAnnotation[4281-4290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4293-4299]:Modifier[4293-4299]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4300-4307]:PrimitiveType[4300-4307]"
  }, {
    "left" : "matchesStringContext",
    "right" : "matchesStringContext",
    "info" : "SimpleName[4308-4328]:SimpleName[4308-4328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4331-4539]:Block[4331-4539]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[4415-4517]:EnhancedForStatement[4415-4517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4443-4517]:Block[4443-4517]"
  }, {
    "left" : "if (t.matchesStringContext())",
    "right" : "if (t.matchesStringContext())",
    "info" : "IfStatement[4451-4511]:IfStatement[4451-4511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4481-4511]:Block[4481-4511]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4491-4503]:ReturnStatement[4491-4503]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4522-4535]:ReturnStatement[4522-4535]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5197-5206]:MarkerAnnotation[5197-5206]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5209-5215]:Modifier[5209-5215]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5216-5223]:PrimitiveType[5216-5223]"
  }, {
    "left" : "matchesObjectContext",
    "right" : "matchesObjectContext",
    "info" : "SimpleName[5224-5244]:SimpleName[5224-5244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5247-5455]:Block[5247-5455]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[5331-5433]:EnhancedForStatement[5331-5433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5359-5433]:Block[5359-5433]"
  }, {
    "left" : "if (t.matchesObjectContext())",
    "right" : "if (t.matchesObjectContext())",
    "info" : "IfStatement[5367-5427]:IfStatement[5367-5427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5397-5427]:Block[5397-5427]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[5407-5419]:ReturnStatement[5407-5419]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5438-5451]:ReturnStatement[5438-5451]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5459-5468]:MarkerAnnotation[5459-5468]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5471-5477]:Modifier[5471-5477]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[5478-5484]:SimpleType[5478-5484]"
  }, {
    "left" : "findPropertyType",
    "right" : "findPropertyType",
    "info" : "SimpleName[5485-5501]:SimpleName[5485-5501]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[5502-5521]:SingleVariableDeclaration[5502-5521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5523-6080]:Block[5523-6080]"
  }, {
    "left" : "JSType propertyType = null;",
    "right" : "JSType propertyType = null;",
    "info" : "VariableDeclarationStatement[5529-5556]:VariableDeclarationStatement[5529-5556]"
  }, {
    "left" : "for (JSType alternate : getAlternates())",
    "right" : "for (JSType alternate : getAlternates())",
    "info" : "EnhancedForStatement[5562-6050]:EnhancedForStatement[5562-6050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5603-6050]:Block[5603-6050]"
  }, {
    "left" : "if (alternate.isNullType() || alternate.isVoidType())",
    "right" : "if (alternate.isNullType() || alternate.isVoidType())",
    "info" : "IfStatement[5656-5737]:IfStatement[5656-5737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5710-5737]:Block[5710-5737]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[5720-5729]:ContinueStatement[5720-5729]"
  }, {
    "left" : "JSType altPropertyType = alternate.findPropertyType(propertyName);",
    "right" : "JSType altPropertyType = alternate.findPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[5745-5811]:VariableDeclarationStatement[5745-5811]"
  }, {
    "left" : "if (altPropertyType == null)",
    "right" : "if (altPropertyType == null)",
    "info" : "IfStatement[5818-5874]:IfStatement[5818-5874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5847-5874]:Block[5847-5874]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[5857-5866]:ContinueStatement[5857-5866]"
  }, {
    "left" : "if (propertyType == null)",
    "right" : "if (propertyType == null)",
    "info" : "IfStatement[5882-6044]:IfStatement[5882-6044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5908-5957]:Block[5908-5957]"
  }, {
    "left" : "propertyType = altPropertyType;",
    "right" : "propertyType = altPropertyType;",
    "info" : "ExpressionStatement[5918-5949]:ExpressionStatement[5918-5949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5963-6044]:Block[5963-6044]"
  }, {
    "left" : "propertyType = propertyType.getLeastSupertype(altPropertyType);",
    "right" : "propertyType = propertyType.getLeastSupertype(altPropertyType);",
    "info" : "ExpressionStatement[5973-6036]:ExpressionStatement[5973-6036]"
  }, {
    "left" : "return propertyType;",
    "right" : "return propertyType;",
    "info" : "ReturnStatement[6056-6076]:ReturnStatement[6056-6076]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6084-6093]:MarkerAnnotation[6084-6093]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6096-6102]:Modifier[6096-6102]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6103-6110]:PrimitiveType[6103-6110]"
  }, {
    "left" : "canAssignTo",
    "right" : "canAssignTo",
    "info" : "SimpleName[6111-6122]:SimpleName[6111-6122]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[6123-6134]:SingleVariableDeclaration[6123-6134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6136-6333]:Block[6136-6333]"
  }, {
    "left" : "boolean canAssign = true;",
    "right" : "boolean canAssign = true;",
    "info" : "VariableDeclarationStatement[6142-6167]:VariableDeclarationStatement[6142-6167]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6172-6307]:EnhancedForStatement[6172-6307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6200-6307]:Block[6200-6307]"
  }, {
    "left" : "if (t.isUnknownType())",
    "right" : "if (t.isUnknownType())",
    "info" : "IfStatement[6208-6261]:IfStatement[6208-6261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6231-6261]:Block[6231-6261]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6241-6253]:ReturnStatement[6241-6253]"
  }, {
    "left" : "canAssign &= t.canAssignTo(that);",
    "right" : "canAssign &= t.canAssignTo(that);",
    "info" : "ExpressionStatement[6268-6301]:ExpressionStatement[6268-6301]"
  }, {
    "left" : "return canAssign;",
    "right" : "return canAssign;",
    "info" : "ReturnStatement[6312-6329]:ReturnStatement[6312-6329]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6337-6346]:MarkerAnnotation[6337-6346]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6349-6355]:Modifier[6349-6355]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6356-6363]:PrimitiveType[6356-6363]"
  }, {
    "left" : "canBeCalled",
    "right" : "canBeCalled",
    "info" : "SimpleName[6364-6375]:SimpleName[6364-6375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6378-6500]:Block[6378-6500]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6384-6479]:EnhancedForStatement[6384-6479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6412-6479]:Block[6412-6479]"
  }, {
    "left" : "if (!t.canBeCalled())",
    "right" : "if (!t.canBeCalled())",
    "info" : "IfStatement[6420-6473]:IfStatement[6420-6473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6442-6473]:Block[6442-6473]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6452-6465]:ReturnStatement[6452-6465]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6484-6496]:ReturnStatement[6484-6496]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6504-6513]:MarkerAnnotation[6504-6513]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6516-6522]:Modifier[6516-6522]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[6523-6529]:SimpleType[6523-6529]"
  }, {
    "left" : "autobox",
    "right" : "autobox",
    "info" : "SimpleName[6530-6537]:SimpleName[6530-6537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6540-6726]:Block[6540-6726]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[6546-6607]:VariableDeclarationStatement[6546-6607]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6612-6691]:EnhancedForStatement[6612-6691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6640-6691]:Block[6640-6691]"
  }, {
    "left" : "restricted.addAlternate(t.autobox());",
    "right" : "restricted.addAlternate(t.autobox());",
    "info" : "ExpressionStatement[6648-6685]:ExpressionStatement[6648-6685]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[6696-6722]:ReturnStatement[6696-6722]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6730-6739]:MarkerAnnotation[6730-6739]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6742-6748]:Modifier[6742-6748]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[6749-6755]:SimpleType[6749-6755]"
  }, {
    "left" : "restrictByNotNullOrUndefined",
    "right" : "restrictByNotNullOrUndefined",
    "info" : "SimpleName[6756-6784]:SimpleName[6756-6784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6787-6994]:Block[6787-6994]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[6793-6854]:VariableDeclarationStatement[6793-6854]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6859-6959]:EnhancedForStatement[6859-6959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6887-6959]:Block[6887-6959]"
  }, {
    "left" : "restricted.addAlternate(t.restrictByNotNullOrUndefined());",
    "right" : "restricted.addAlternate(t.restrictByNotNullOrUndefined());",
    "info" : "ExpressionStatement[6895-6953]:ExpressionStatement[6895-6953]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[6964-6990]:ReturnStatement[6964-6990]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6998-7007]:MarkerAnnotation[6998-7007]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7010-7016]:Modifier[7010-7016]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[7017-7029]:SimpleType[7017-7029]"
  }, {
    "left" : "testForEquality",
    "right" : "testForEquality",
    "info" : "SimpleName[7030-7045]:SimpleName[7030-7045]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[7046-7057]:SingleVariableDeclaration[7046-7057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7059-7330]:Block[7059-7330]"
  }, {
    "left" : "TernaryValue result = null;",
    "right" : "TernaryValue result = null;",
    "info" : "VariableDeclarationStatement[7065-7092]:VariableDeclarationStatement[7065-7092]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[7097-7307]:EnhancedForStatement[7097-7307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7125-7307]:Block[7125-7307]"
  }, {
    "left" : "TernaryValue test = t.testForEquality(that);",
    "right" : "TernaryValue test = t.testForEquality(that);",
    "info" : "VariableDeclarationStatement[7133-7177]:VariableDeclarationStatement[7133-7177]"
  }, {
    "left" : "if (result == null)",
    "right" : "if (result == null)",
    "info" : "IfStatement[7184-7301]:IfStatement[7184-7301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7204-7236]:Block[7204-7236]"
  }, {
    "left" : "result = test;",
    "right" : "result = test;",
    "info" : "ExpressionStatement[7214-7228]:ExpressionStatement[7214-7228]"
  }, {
    "left" : "if (!result.equals(test))",
    "right" : "if (!result.equals(test))",
    "info" : "IfStatement[7242-7301]:IfStatement[7242-7301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7268-7301]:Block[7268-7301]"
  }, {
    "left" : "return UNKNOWN;",
    "right" : "return UNKNOWN;",
    "info" : "ReturnStatement[7278-7293]:ReturnStatement[7278-7293]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[7312-7326]:ReturnStatement[7312-7326]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7623-7632]:MarkerAnnotation[7623-7632]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7635-7641]:Modifier[7635-7641]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7642-7649]:PrimitiveType[7642-7649]"
  }, {
    "left" : "isNullable",
    "right" : "isNullable",
    "info" : "SimpleName[7650-7660]:SimpleName[7650-7660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7663-7783]:Block[7663-7783]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[7669-7761]:EnhancedForStatement[7669-7761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7697-7761]:Block[7697-7761]"
  }, {
    "left" : "if (t.isNullable())",
    "right" : "if (t.isNullable())",
    "info" : "IfStatement[7705-7755]:IfStatement[7705-7755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7725-7755]:Block[7725-7755]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7735-7747]:ReturnStatement[7735-7747]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7766-7779]:ReturnStatement[7766-7779]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7787-7796]:MarkerAnnotation[7787-7796]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7799-7805]:Modifier[7799-7805]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7806-7813]:PrimitiveType[7806-7813]"
  }, {
    "left" : "isUnknownType",
    "right" : "isUnknownType",
    "info" : "SimpleName[7814-7827]:SimpleName[7814-7827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7830-7953]:Block[7830-7953]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[7836-7931]:EnhancedForStatement[7836-7931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7864-7931]:Block[7864-7931]"
  }, {
    "left" : "if (t.isUnknownType())",
    "right" : "if (t.isUnknownType())",
    "info" : "IfStatement[7872-7925]:IfStatement[7872-7925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7895-7925]:Block[7895-7925]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7905-7917]:ReturnStatement[7905-7917]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7936-7949]:ReturnStatement[7936-7949]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7957-7966]:MarkerAnnotation[7957-7966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7969-7975]:Modifier[7969-7975]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7976-7983]:PrimitiveType[7976-7983]"
  }, {
    "left" : "isStruct",
    "right" : "isStruct",
    "info" : "SimpleName[7984-7992]:SimpleName[7984-7992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7995-8122]:Block[7995-8122]"
  }, {
    "left" : "for (JSType typ : getAlternates())",
    "right" : "for (JSType typ : getAlternates())",
    "info" : "EnhancedForStatement[8001-8100]:EnhancedForStatement[8001-8100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8036-8100]:Block[8036-8100]"
  }, {
    "left" : "if (typ.isStruct())",
    "right" : "if (typ.isStruct())",
    "info" : "IfStatement[8044-8094]:IfStatement[8044-8094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8064-8094]:Block[8064-8094]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8074-8086]:ReturnStatement[8074-8086]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8105-8118]:ReturnStatement[8105-8118]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8126-8135]:MarkerAnnotation[8126-8135]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8138-8144]:Modifier[8138-8144]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8145-8152]:PrimitiveType[8145-8152]"
  }, {
    "left" : "isDict",
    "right" : "isDict",
    "info" : "SimpleName[8153-8159]:SimpleName[8153-8159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8162-8287]:Block[8162-8287]"
  }, {
    "left" : "for (JSType typ : getAlternates())",
    "right" : "for (JSType typ : getAlternates())",
    "info" : "EnhancedForStatement[8168-8265]:EnhancedForStatement[8168-8265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8203-8265]:Block[8203-8265]"
  }, {
    "left" : "if (typ.isDict())",
    "right" : "if (typ.isDict())",
    "info" : "IfStatement[8211-8259]:IfStatement[8211-8259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8229-8259]:Block[8229-8259]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8239-8251]:ReturnStatement[8239-8251]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8270-8283]:ReturnStatement[8270-8283]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8291-8300]:MarkerAnnotation[8291-8300]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8303-8309]:Modifier[8303-8309]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[8310-8316]:SimpleType[8310-8316]"
  }, {
    "left" : "getLeastSupertype",
    "right" : "getLeastSupertype",
    "info" : "SimpleName[8317-8334]:SimpleName[8317-8334]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[8335-8346]:SingleVariableDeclaration[8335-8346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8348-8614]:Block[8348-8614]"
  }, {
    "left" : "if (!that.isUnknownType() && !that.isUnionType())",
    "right" : "if (!that.isUnknownType() && !that.isUnionType())",
    "info" : "IfStatement[8354-8567]:IfStatement[8354-8567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8404-8567]:Block[8404-8567]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[8412-8561]:EnhancedForStatement[8412-8561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8448-8561]:Block[8448-8561]"
  }, {
    "left" : "if (!alternate.isUnknownType() && that.isSubtype(alternate))",
    "right" : "if (!alternate.isUnknownType() && that.isSubtype(alternate))",
    "info" : "IfStatement[8458-8553]:IfStatement[8458-8553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8519-8553]:Block[8519-8553]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[8531-8543]:ReturnStatement[8531-8543]"
  }, {
    "left" : "return getLeastSupertype(this, that);",
    "right" : "return getLeastSupertype(this, that);",
    "info" : "ReturnStatement[8573-8610]:ReturnStatement[8573-8610]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[8618-8624]:SimpleType[8618-8624]"
  }, {
    "left" : "meet",
    "right" : "meet",
    "info" : "SimpleName[8625-8629]:SimpleName[8625-8629]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[8630-8641]:SingleVariableDeclaration[8630-8641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8643-9409]:Block[8643-9409]"
  }, {
    "left" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[8649-8707]:VariableDeclarationStatement[8649-8707]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[8712-8843]:EnhancedForStatement[8712-8843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8748-8843]:Block[8748-8843]"
  }, {
    "left" : "if (alternate.isSubtype(that))",
    "right" : "if (alternate.isSubtype(that))",
    "info" : "IfStatement[8756-8837]:IfStatement[8756-8837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8787-8837]:Block[8787-8837]"
  }, {
    "left" : "builder.addAlternate(alternate);",
    "right" : "builder.addAlternate(alternate);",
    "info" : "ExpressionStatement[8797-8829]:ExpressionStatement[8797-8829]"
  }, {
    "left" : "if (that.isUnionType())",
    "right" : "if (that.isUnionType())",
    "info" : "IfStatement[8849-9138]:IfStatement[8849-9138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8873-9065]:Block[8873-9065]"
  }, {
    "left" : "for (JSType otherAlternate : that.toMaybeUnionType().alternates)",
    "right" : "for (JSType otherAlternate : that.toMaybeUnionType().alternates)",
    "info" : "EnhancedForStatement[8881-9059]:EnhancedForStatement[8881-9059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8946-9059]:Block[8946-9059]"
  }, {
    "left" : "if (otherAlternate.isSubtype(this))",
    "right" : "if (otherAlternate.isSubtype(this))",
    "info" : "IfStatement[8956-9051]:IfStatement[8956-9051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8992-9051]:Block[8992-9051]"
  }, {
    "left" : "builder.addAlternate(otherAlternate);",
    "right" : "builder.addAlternate(otherAlternate);",
    "info" : "ExpressionStatement[9004-9041]:ExpressionStatement[9004-9041]"
  }, {
    "left" : "if (that.isSubtype(this))",
    "right" : "if (that.isSubtype(this))",
    "info" : "IfStatement[9071-9138]:IfStatement[9071-9138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9097-9138]:Block[9097-9138]"
  }, {
    "left" : "builder.addAlternate(that);",
    "right" : "builder.addAlternate(that);",
    "info" : "ExpressionStatement[9105-9132]:ExpressionStatement[9105-9132]"
  }, {
    "left" : "JSType result = builder.build();",
    "right" : "JSType result = builder.build();",
    "info" : "VariableDeclarationStatement[9143-9175]:VariableDeclarationStatement[9143-9175]"
  }, {
    "left" : "if (!result.isNoType())",
    "right" : "if (!result.isNoType())",
    "info" : "IfStatement[9180-9405]:IfStatement[9180-9405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9204-9232]:Block[9204-9232]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[9212-9226]:ReturnStatement[9212-9226]"
  }, {
    "left" : "if (this.isObject() && that.isObject())",
    "right" : "if (this.isObject() && that.isObject())",
    "info" : "IfStatement[9238-9405]:IfStatement[9238-9405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9278-9342]:Block[9278-9342]"
  }, {
    "left" : "return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "right" : "return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "info" : "ReturnStatement[9286-9336]:ReturnStatement[9286-9336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9348-9405]:Block[9348-9405]"
  }, {
    "left" : "return getNativeType(JSTypeNative.NO_TYPE);",
    "right" : "return getNativeType(JSTypeNative.NO_TYPE);",
    "info" : "ReturnStatement[9356-9399]:ReturnStatement[9356-9399]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9534-9541]:PrimitiveType[9534-9541]"
  }, {
    "left" : "checkUnionEquivalenceHelper",
    "right" : "checkUnionEquivalenceHelper",
    "info" : "SimpleName[9542-9569]:SimpleName[9542-9569]"
  }, {
    "left" : "UnionType that",
    "right" : "UnionType that",
    "info" : "SingleVariableDeclaration[9577-9591]:SingleVariableDeclaration[9577-9591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9619-9890]:Block[9621-9905]"
  }, {
    "left" : "if (!tolerateUnknowns\n        && alternates.size() != that.alternates.size())",
    "right" : "if (eqMethod == EquivalenceMethod.IDENTITY\n        && alternates.size() != that.alternates.size())",
    "info" : "IfStatement[9625-9730]:IfStatement[9627-9753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9703-9730]:Block[9726-9753]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9711-9724]:ReturnStatement[9734-9747]"
  }, {
    "left" : "for (JSType alternate : that.alternates)",
    "right" : "for (JSType alternate : that.alternates)",
    "info" : "EnhancedForStatement[9735-9869]:EnhancedForStatement[9758-9884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9776-9869]:Block[9799-9884]"
  }, {
    "left" : "if (!hasAlternate(alternate, tolerateUnknowns))",
    "right" : "if (!hasAlternate(alternate, eqMethod))",
    "info" : "IfStatement[9784-9863]:IfStatement[9807-9878]"
  }, {
    "left" : "tolerateUnknowns",
    "right" : "eqMethod",
    "info" : "SimpleName[9813-9829]:SimpleName[9836-9844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9832-9863]:Block[9847-9878]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9842-9855]:ReturnStatement[9857-9870]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9874-9886]:ReturnStatement[9889-9901]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9894-9901]:Modifier[9909-9916]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9902-9909]:PrimitiveType[9917-9924]"
  }, {
    "left" : "hasAlternate",
    "right" : "hasAlternate",
    "info" : "SimpleName[9910-9922]:SimpleName[9925-9937]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[9923-9934]:SingleVariableDeclaration[9938-9949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9962-10132]:Block[9979-10141]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[9968-10110]:EnhancedForStatement[9985-10119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10004-10110]:Block[10021-10119]"
  }, {
    "left" : "if (alternate.checkEquivalenceHelper(type, tolerateUnknowns))",
    "right" : "if (alternate.checkEquivalenceHelper(type, eqMethod))",
    "info" : "IfStatement[10012-10104]:IfStatement[10029-10113]"
  }, {
    "left" : "tolerateUnknowns",
    "right" : "eqMethod",
    "info" : "SimpleName[10055-10071]:SimpleName[10072-10080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10074-10104]:Block[10083-10113]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10084-10096]:ReturnStatement[10093-10105]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10115-10128]:ReturnStatement[10124-10137]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10136-10145]:MarkerAnnotation[10145-10154]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10148-10154]:Modifier[10157-10163]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10155-10162]:PrimitiveType[10164-10171]"
  }, {
    "left" : "hasProperty",
    "right" : "hasProperty",
    "info" : "SimpleName[10163-10174]:SimpleName[10172-10183]"
  }, {
    "left" : "String pname",
    "right" : "String pname",
    "info" : "SingleVariableDeclaration[10175-10187]:SingleVariableDeclaration[10184-10196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10189-10331]:Block[10198-10340]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[10195-10309]:EnhancedForStatement[10204-10318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10231-10309]:Block[10240-10318]"
  }, {
    "left" : "if (alternate.hasProperty(pname))",
    "right" : "if (alternate.hasProperty(pname))",
    "info" : "IfStatement[10239-10303]:IfStatement[10248-10312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10273-10303]:Block[10282-10312]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10283-10295]:ReturnStatement[10292-10304]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10314-10327]:ReturnStatement[10323-10336]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10335-10344]:MarkerAnnotation[10344-10353]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10347-10353]:Modifier[10356-10362]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[10354-10357]:PrimitiveType[10363-10366]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[10358-10366]:SimpleName[10367-10375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10369-10400]:Block[10378-10409]"
  }, {
    "left" : "return this.hashcode;",
    "right" : "return this.hashcode;",
    "info" : "ReturnStatement[10375-10396]:ReturnStatement[10384-10405]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10404-10413]:MarkerAnnotation[10413-10422]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10416-10422]:Modifier[10425-10431]"
  }, {
    "left" : "UnionType",
    "right" : "UnionType",
    "info" : "SimpleType[10423-10432]:SimpleType[10432-10441]"
  }, {
    "left" : "toMaybeUnionType",
    "right" : "toMaybeUnionType",
    "info" : "SimpleName[10433-10449]:SimpleName[10442-10458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10452-10474]:Block[10461-10483]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[10458-10470]:ReturnStatement[10467-10479]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10478-10487]:MarkerAnnotation[10487-10496]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10490-10496]:Modifier[10499-10505]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10497-10504]:PrimitiveType[10506-10513]"
  }, {
    "left" : "isObject",
    "right" : "isObject",
    "info" : "SimpleName[10505-10513]:SimpleName[10514-10522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10516-10651]:Block[10525-10660]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[10522-10630]:EnhancedForStatement[10531-10639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10558-10630]:Block[10567-10639]"
  }, {
    "left" : "if (!alternate.isObject())",
    "right" : "if (!alternate.isObject())",
    "info" : "IfStatement[10566-10624]:IfStatement[10575-10633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10593-10624]:Block[10602-10633]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10603-10616]:ReturnStatement[10612-10625]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10635-10647]:ReturnStatement[10644-10656]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10896-10902]:Modifier[10905-10911]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10903-10910]:PrimitiveType[10912-10919]"
  }, {
    "left" : "contains",
    "right" : "contains",
    "info" : "SimpleName[10911-10919]:SimpleName[10920-10928]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[10920-10931]:SingleVariableDeclaration[10929-10940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10933-11065]:Block[10942-11074]"
  }, {
    "left" : "for (JSType alt : alternates)",
    "right" : "for (JSType alt : alternates)",
    "info" : "EnhancedForStatement[10939-11043]:EnhancedForStatement[10948-11052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10969-11043]:Block[10978-11052]"
  }, {
    "left" : "if (alt.isEquivalentTo(type))",
    "right" : "if (alt.isEquivalentTo(type))",
    "info" : "IfStatement[10977-11037]:IfStatement[10986-11046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11007-11037]:Block[11016-11046]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11017-11029]:ReturnStatement[11026-11038]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11048-11061]:ReturnStatement[11057-11070]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11529-11535]:Modifier[11538-11544]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[11536-11542]:SimpleType[11545-11551]"
  }, {
    "left" : "getRestrictedUnion",
    "right" : "getRestrictedUnion",
    "info" : "SimpleName[11543-11561]:SimpleName[11552-11570]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[11562-11573]:SingleVariableDeclaration[11571-11582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11575-11814]:Block[11584-11823]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[11581-11642]:VariableDeclarationStatement[11590-11651]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[11647-11779]:EnhancedForStatement[11656-11788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11675-11779]:Block[11684-11788]"
  }, {
    "left" : "if (t.isUnknownType() || !t.isSubtype(type))",
    "right" : "if (t.isUnknownType() || !t.isSubtype(type))",
    "info" : "IfStatement[11683-11773]:IfStatement[11692-11782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11728-11773]:Block[11737-11782]"
  }, {
    "left" : "restricted.addAlternate(t);",
    "right" : "restricted.addAlternate(t);",
    "info" : "ExpressionStatement[11738-11765]:ExpressionStatement[11747-11774]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[11784-11810]:ReturnStatement[11793-11819]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11818-11827]:MarkerAnnotation[11827-11836]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[11828-11834]:SimpleType[11837-11843]"
  }, {
    "left" : "toStringHelper",
    "right" : "toStringHelper",
    "info" : "SimpleName[11835-11849]:SimpleName[11844-11858]"
  }, {
    "left" : "boolean forAnnotations",
    "right" : "boolean forAnnotations",
    "info" : "SingleVariableDeclaration[11850-11872]:SingleVariableDeclaration[11859-11881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11874-12317]:Block[11883-12326]"
  }, {
    "left" : "StringBuilder result = new StringBuilder();",
    "right" : "StringBuilder result = new StringBuilder();",
    "info" : "VariableDeclarationStatement[11880-11923]:VariableDeclarationStatement[11889-11932]"
  }, {
    "left" : "boolean firstAlternate = true;",
    "right" : "boolean firstAlternate = true;",
    "info" : "VariableDeclarationStatement[11928-11958]:VariableDeclarationStatement[11937-11967]"
  }, {
    "left" : "result.append(\"(\");",
    "right" : "result.append(\"(\");",
    "info" : "ExpressionStatement[11964-11983]:ExpressionStatement[11973-11992]"
  }, {
    "left" : "SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA);",
    "right" : "SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA);",
    "info" : "VariableDeclarationStatement[11988-12042]:VariableDeclarationStatement[11997-12051]"
  }, {
    "left" : "sorted.addAll(alternates);",
    "right" : "sorted.addAll(alternates);",
    "info" : "ExpressionStatement[12047-12073]:ExpressionStatement[12056-12082]"
  }, {
    "left" : "for (JSType t : sorted)",
    "right" : "for (JSType t : sorted)",
    "info" : "EnhancedForStatement[12078-12259]:EnhancedForStatement[12087-12268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12102-12259]:Block[12111-12268]"
  }, {
    "left" : "if (!firstAlternate)",
    "right" : "if (!firstAlternate)",
    "info" : "IfStatement[12110-12168]:IfStatement[12119-12177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12131-12168]:Block[12140-12177]"
  }, {
    "left" : "result.append(\"|\");",
    "right" : "result.append(\"|\");",
    "info" : "ExpressionStatement[12141-12160]:ExpressionStatement[12150-12169]"
  }, {
    "left" : "result.append(t.toStringHelper(forAnnotations));",
    "right" : "result.append(t.toStringHelper(forAnnotations));",
    "info" : "ExpressionStatement[12175-12223]:ExpressionStatement[12184-12232]"
  }, {
    "left" : "firstAlternate = false;",
    "right" : "firstAlternate = false;",
    "info" : "ExpressionStatement[12230-12253]:ExpressionStatement[12239-12262]"
  }, {
    "left" : "result.append(\")\");",
    "right" : "result.append(\")\");",
    "info" : "ExpressionStatement[12264-12283]:ExpressionStatement[12273-12292]"
  }, {
    "left" : "return result.toString();",
    "right" : "return result.toString();",
    "info" : "ReturnStatement[12288-12313]:ReturnStatement[12297-12322]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12321-12330]:MarkerAnnotation[12330-12339]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12333-12339]:Modifier[12342-12348]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12340-12347]:PrimitiveType[12349-12356]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[12348-12357]:SimpleName[12357-12366]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[12358-12369]:SingleVariableDeclaration[12367-12378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12371-12648]:Block[12380-12657]"
  }, {
    "left" : "if (that.isUnknownType())",
    "right" : "if (that.isUnknownType())",
    "info" : "IfStatement[12392-12444]:IfStatement[12401-12453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12418-12444]:Block[12427-12453]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12426-12438]:ReturnStatement[12435-12447]"
  }, {
    "left" : "if (that.isAllType())",
    "right" : "if (that.isAllType())",
    "info" : "IfStatement[12465-12513]:IfStatement[12474-12522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12487-12513]:Block[12496-12522]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12495-12507]:ReturnStatement[12504-12516]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[12518-12627]:EnhancedForStatement[12527-12636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12552-12627]:Block[12561-12636]"
  }, {
    "left" : "if (!element.isSubtype(that))",
    "right" : "if (!element.isSubtype(that))",
    "info" : "IfStatement[12560-12621]:IfStatement[12569-12630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12590-12621]:Block[12599-12630]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12600-12613]:ReturnStatement[12609-12622]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12632-12644]:ReturnStatement[12641-12653]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12652-12661]:MarkerAnnotation[12661-12670]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12664-12670]:Modifier[12673-12679]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[12671-12677]:SimpleType[12680-12686]"
  }, {
    "left" : "getRestrictedTypeGivenToBooleanOutcome",
    "right" : "getRestrictedTypeGivenToBooleanOutcome",
    "info" : "SimpleName[12678-12716]:SimpleName[12687-12725]"
  }, {
    "left" : "boolean outcome",
    "right" : "boolean outcome",
    "info" : "SingleVariableDeclaration[12717-12732]:SingleVariableDeclaration[12726-12741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12734-13022]:Block[12743-13031]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[12781-12842]:VariableDeclarationStatement[12790-12851]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[12847-12987]:EnhancedForStatement[12856-12996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12881-12987]:Block[12890-12996]"
  }, {
    "left" : "restricted.addAlternate(\n          element.getRestrictedTypeGivenToBooleanOutcome(outcome));",
    "right" : "restricted.addAlternate(\n          element.getRestrictedTypeGivenToBooleanOutcome(outcome));",
    "info" : "ExpressionStatement[12889-12981]:ExpressionStatement[12898-12990]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[12992-13018]:ReturnStatement[13001-13027]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13026-13035]:MarkerAnnotation[13035-13044]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13038-13044]:Modifier[13047-13053]"
  }, {
    "left" : "BooleanLiteralSet",
    "right" : "BooleanLiteralSet",
    "info" : "SimpleType[13045-13062]:SimpleType[13054-13071]"
  }, {
    "left" : "getPossibleToBooleanOutcomes",
    "right" : "getPossibleToBooleanOutcomes",
    "info" : "SimpleName[13063-13091]:SimpleName[13072-13100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13094-13368]:Block[13103-13377]"
  }, {
    "left" : "BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;",
    "right" : "BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;",
    "info" : "VariableDeclarationStatement[13100-13153]:VariableDeclarationStatement[13109-13162]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[13158-13343]:EnhancedForStatement[13167-13352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13192-13343]:Block[13201-13352]"
  }, {
    "left" : "literals = literals.union(element.getPossibleToBooleanOutcomes());",
    "right" : "literals = literals.union(element.getPossibleToBooleanOutcomes());",
    "info" : "ExpressionStatement[13200-13266]:ExpressionStatement[13209-13275]"
  }, {
    "left" : "if (literals == BooleanLiteralSet.BOTH)",
    "right" : "if (literals == BooleanLiteralSet.BOTH)",
    "info" : "IfStatement[13273-13337]:IfStatement[13282-13346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13313-13337]:Block[13322-13346]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13323-13329]:BreakStatement[13332-13338]"
  }, {
    "left" : "return literals;",
    "right" : "return literals;",
    "info" : "ReturnStatement[13348-13364]:ReturnStatement[13357-13373]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13372-13381]:MarkerAnnotation[13381-13390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13384-13390]:Modifier[13393-13399]"
  }, {
    "left" : "TypePair",
    "right" : "TypePair",
    "info" : "SimpleType[13391-13399]:SimpleType[13400-13408]"
  }, {
    "left" : "getTypesUnderEquality",
    "right" : "getTypesUnderEquality",
    "info" : "SimpleName[13400-13421]:SimpleName[13409-13430]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[13422-13433]:SingleVariableDeclaration[13431-13442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13435-13938]:Block[13444-13947]"
  }, {
    "left" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[13441-13506]:VariableDeclarationStatement[13450-13515]"
  }, {
    "left" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[13511-13576]:VariableDeclarationStatement[13520-13585]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[13581-13844]:EnhancedForStatement[13590-13853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13615-13844]:Block[13624-13853]"
  }, {
    "left" : "TypePair p = element.getTypesUnderEquality(that);",
    "right" : "TypePair p = element.getTypesUnderEquality(that);",
    "info" : "VariableDeclarationStatement[13623-13672]:VariableDeclarationStatement[13632-13681]"
  }, {
    "left" : "if (p.typeA != null)",
    "right" : "if (p.typeA != null)",
    "info" : "IfStatement[13679-13755]:IfStatement[13688-13764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13700-13755]:Block[13709-13764]"
  }, {
    "left" : "thisRestricted.addAlternate(p.typeA);",
    "right" : "thisRestricted.addAlternate(p.typeA);",
    "info" : "ExpressionStatement[13710-13747]:ExpressionStatement[13719-13756]"
  }, {
    "left" : "if (p.typeB != null)",
    "right" : "if (p.typeB != null)",
    "info" : "IfStatement[13762-13838]:IfStatement[13771-13847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13783-13838]:Block[13792-13847]"
  }, {
    "left" : "thatRestricted.addAlternate(p.typeB);",
    "right" : "thatRestricted.addAlternate(p.typeB);",
    "info" : "ExpressionStatement[13793-13830]:ExpressionStatement[13802-13839]"
  }, {
    "left" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "right" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "info" : "ReturnStatement[13849-13934]:ReturnStatement[13858-13943]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13942-13951]:MarkerAnnotation[13951-13960]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13954-13960]:Modifier[13963-13969]"
  }, {
    "left" : "TypePair",
    "right" : "TypePair",
    "info" : "SimpleType[13961-13969]:SimpleType[13970-13978]"
  }, {
    "left" : "getTypesUnderInequality",
    "right" : "getTypesUnderInequality",
    "info" : "SimpleName[13970-13993]:SimpleName[13979-14002]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[13994-14005]:SingleVariableDeclaration[14003-14014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14007-14512]:Block[14016-14521]"
  }, {
    "left" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[14013-14078]:VariableDeclarationStatement[14022-14087]"
  }, {
    "left" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[14083-14148]:VariableDeclarationStatement[14092-14157]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[14153-14418]:EnhancedForStatement[14162-14427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14187-14418]:Block[14196-14427]"
  }, {
    "left" : "TypePair p = element.getTypesUnderInequality(that);",
    "right" : "TypePair p = element.getTypesUnderInequality(that);",
    "info" : "VariableDeclarationStatement[14195-14246]:VariableDeclarationStatement[14204-14255]"
  }, {
    "left" : "if (p.typeA != null)",
    "right" : "if (p.typeA != null)",
    "info" : "IfStatement[14253-14329]:IfStatement[14262-14338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14274-14329]:Block[14283-14338]"
  }, {
    "left" : "thisRestricted.addAlternate(p.typeA);",
    "right" : "thisRestricted.addAlternate(p.typeA);",
    "info" : "ExpressionStatement[14284-14321]:ExpressionStatement[14293-14330]"
  }, {
    "left" : "if (p.typeB != null)",
    "right" : "if (p.typeB != null)",
    "info" : "IfStatement[14336-14412]:IfStatement[14345-14421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14357-14412]:Block[14366-14421]"
  }, {
    "left" : "thatRestricted.addAlternate(p.typeB);",
    "right" : "thatRestricted.addAlternate(p.typeB);",
    "info" : "ExpressionStatement[14367-14404]:ExpressionStatement[14376-14413]"
  }, {
    "left" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "right" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "info" : "ReturnStatement[14423-14508]:ReturnStatement[14432-14517]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14516-14525]:MarkerAnnotation[14525-14534]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14528-14534]:Modifier[14537-14543]"
  }, {
    "left" : "TypePair",
    "right" : "TypePair",
    "info" : "SimpleType[14535-14543]:SimpleType[14544-14552]"
  }, {
    "left" : "getTypesUnderShallowInequality",
    "right" : "getTypesUnderShallowInequality",
    "info" : "SimpleName[14544-14574]:SimpleName[14553-14583]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[14575-14586]:SingleVariableDeclaration[14584-14595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14588-15100]:Block[14597-15109]"
  }, {
    "left" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[14594-14659]:VariableDeclarationStatement[14603-14668]"
  }, {
    "left" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[14664-14729]:VariableDeclarationStatement[14673-14738]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[14734-15006]:EnhancedForStatement[14743-15015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14768-15006]:Block[14777-15015]"
  }, {
    "left" : "TypePair p = element.getTypesUnderShallowInequality(that);",
    "right" : "TypePair p = element.getTypesUnderShallowInequality(that);",
    "info" : "VariableDeclarationStatement[14776-14834]:VariableDeclarationStatement[14785-14843]"
  }, {
    "left" : "if (p.typeA != null)",
    "right" : "if (p.typeA != null)",
    "info" : "IfStatement[14841-14917]:IfStatement[14850-14926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14862-14917]:Block[14871-14926]"
  }, {
    "left" : "thisRestricted.addAlternate(p.typeA);",
    "right" : "thisRestricted.addAlternate(p.typeA);",
    "info" : "ExpressionStatement[14872-14909]:ExpressionStatement[14881-14918]"
  }, {
    "left" : "if (p.typeB != null)",
    "right" : "if (p.typeB != null)",
    "info" : "IfStatement[14924-15000]:IfStatement[14933-15009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14945-15000]:Block[14954-15009]"
  }, {
    "left" : "thatRestricted.addAlternate(p.typeB);",
    "right" : "thatRestricted.addAlternate(p.typeB);",
    "info" : "ExpressionStatement[14955-14992]:ExpressionStatement[14964-15001]"
  }, {
    "left" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "right" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "info" : "ReturnStatement[15011-15096]:ReturnStatement[15020-15105]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15104-15113]:MarkerAnnotation[15113-15122]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15116-15122]:Modifier[15125-15131]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[15124-15125]:TypeParameter[15133-15134]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[15127-15128]:SimpleType[15136-15137]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[15129-15134]:SimpleName[15138-15143]"
  }, {
    "left" : "Visitor<T> visitor",
    "right" : "Visitor<T> visitor",
    "info" : "SingleVariableDeclaration[15135-15153]:SingleVariableDeclaration[15144-15162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15155-15200]:Block[15164-15209]"
  }, {
    "left" : "return visitor.caseUnionType(this);",
    "right" : "return visitor.caseUnionType(this);",
    "info" : "ReturnStatement[15161-15196]:ReturnStatement[15170-15205]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15204-15213]:MarkerAnnotation[15213-15222]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[15216-15222]:SimpleType[15225-15231]"
  }, {
    "left" : "resolveInternal",
    "right" : "resolveInternal",
    "info" : "SimpleName[15223-15238]:SimpleName[15232-15247]"
  }, {
    "left" : "ErrorReporter t",
    "right" : "ErrorReporter t",
    "info" : "SingleVariableDeclaration[15239-15254]:SingleVariableDeclaration[15248-15263]"
  }, {
    "left" : "StaticScope<JSType> scope",
    "right" : "StaticScope<JSType> scope",
    "info" : "SingleVariableDeclaration[15256-15281]:SingleVariableDeclaration[15265-15290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15283-15874]:Block[15292-15883]"
  }, {
    "left" : "setResolvedTypeInternal(this);",
    "right" : "setResolvedTypeInternal(this);",
    "info" : "ExpressionStatement[15289-15319]:ExpressionStatement[15298-15328]"
  }, {
    "left" : "boolean changed = false;",
    "right" : "boolean changed = false;",
    "info" : "VariableDeclarationStatement[15358-15382]:VariableDeclarationStatement[15367-15391]"
  }, {
    "left" : "ImmutableList.Builder<JSType> resolvedTypes = ImmutableList.builder();",
    "right" : "ImmutableList.Builder<JSType> resolvedTypes = ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[15387-15457]:VariableDeclarationStatement[15396-15466]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[15462-15644]:EnhancedForStatement[15471-15653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15498-15644]:Block[15507-15653]"
  }, {
    "left" : "JSType newAlternate = alternate.resolve(t, scope);",
    "right" : "JSType newAlternate = alternate.resolve(t, scope);",
    "info" : "VariableDeclarationStatement[15506-15556]:VariableDeclarationStatement[15515-15565]"
  }, {
    "left" : "changed |= (alternate != newAlternate);",
    "right" : "changed |= (alternate != newAlternate);",
    "info" : "ExpressionStatement[15563-15602]:ExpressionStatement[15572-15611]"
  }, {
    "left" : "resolvedTypes.add(alternate);",
    "right" : "resolvedTypes.add(alternate);",
    "info" : "ExpressionStatement[15609-15638]:ExpressionStatement[15618-15647]"
  }, {
    "left" : "if (changed)",
    "right" : "if (changed)",
    "info" : "IfStatement[15649-15853]:IfStatement[15658-15862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15662-15853]:Block[15671-15862]"
  }, {
    "left" : "Collection<JSType> newAlternates = resolvedTypes.build();",
    "right" : "Collection<JSType> newAlternates = resolvedTypes.build();",
    "info" : "VariableDeclarationStatement[15670-15727]:VariableDeclarationStatement[15679-15736]"
  }, {
    "left" : "Preconditions.checkState(\n          newAlternates.hashCode() == this.hashcode);",
    "right" : "Preconditions.checkState(\n          newAlternates.hashCode() == this.hashcode);",
    "info" : "ExpressionStatement[15734-15813]:ExpressionStatement[15743-15822]"
  }, {
    "left" : "alternates = newAlternates;",
    "right" : "alternates = newAlternates;",
    "info" : "ExpressionStatement[15820-15847]:ExpressionStatement[15829-15856]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[15858-15870]:ReturnStatement[15867-15879]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15878-15887]:MarkerAnnotation[15887-15896]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15890-15896]:Modifier[15899-15905]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[15897-15903]:SimpleType[15906-15912]"
  }, {
    "left" : "toDebugHashCodeString",
    "right" : "toDebugHashCodeString",
    "info" : "SimpleName[15904-15925]:SimpleName[15913-15934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15928-16129]:Block[15937-16138]"
  }, {
    "left" : "List<String> hashCodes = Lists.newArrayList();",
    "right" : "List<String> hashCodes = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[15934-15980]:VariableDeclarationStatement[15943-15989]"
  }, {
    "left" : "for (JSType a : alternates)",
    "right" : "for (JSType a : alternates)",
    "info" : "EnhancedForStatement[15985-16068]:EnhancedForStatement[15994-16077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16013-16068]:Block[16022-16077]"
  }, {
    "left" : "hashCodes.add(a.toDebugHashCodeString());",
    "right" : "hashCodes.add(a.toDebugHashCodeString());",
    "info" : "ExpressionStatement[16021-16062]:ExpressionStatement[16030-16071]"
  }, {
    "left" : "return \"{(\" + Joiner.on(\",\").join(hashCodes) + \")}\";",
    "right" : "return \"{(\" + Joiner.on(\",\").join(hashCodes) + \")}\";",
    "info" : "ReturnStatement[16073-16125]:ReturnStatement[16082-16134]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16133-16142]:MarkerAnnotation[16142-16151]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16145-16151]:Modifier[16154-16160]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16152-16159]:PrimitiveType[16161-16168]"
  }, {
    "left" : "setValidator",
    "right" : "setValidator",
    "info" : "SimpleName[16160-16172]:SimpleName[16169-16181]"
  }, {
    "left" : "Predicate<JSType> validator",
    "right" : "Predicate<JSType> validator",
    "info" : "SingleVariableDeclaration[16173-16200]:SingleVariableDeclaration[16182-16209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16202-16297]:Block[16211-16306]"
  }, {
    "left" : "for (JSType a : alternates)",
    "right" : "for (JSType a : alternates)",
    "info" : "EnhancedForStatement[16208-16276]:EnhancedForStatement[16217-16285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16236-16276]:Block[16245-16285]"
  }, {
    "left" : "a.setValidator(validator);",
    "right" : "a.setValidator(validator);",
    "info" : "ExpressionStatement[16244-16270]:ExpressionStatement[16253-16279]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16281-16293]:ReturnStatement[16290-16302]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16301-16310]:MarkerAnnotation[16310-16319]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16313-16319]:Modifier[16322-16328]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[16320-16326]:SimpleType[16329-16335]"
  }, {
    "left" : "collapseUnion",
    "right" : "collapseUnion",
    "info" : "SimpleName[16327-16340]:SimpleName[16336-16349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16343-17338]:Block[16352-17347]"
  }, {
    "left" : "JSType currentValue = null;",
    "right" : "JSType currentValue = null;",
    "info" : "VariableDeclarationStatement[16349-16376]:VariableDeclarationStatement[16358-16385]"
  }, {
    "left" : "ObjectType currentCommonSuper = null;",
    "right" : "ObjectType currentCommonSuper = null;",
    "info" : "VariableDeclarationStatement[16381-16418]:VariableDeclarationStatement[16390-16427]"
  }, {
    "left" : "for (JSType a : alternates)",
    "right" : "for (JSType a : alternates)",
    "info" : "EnhancedForStatement[16423-17303]:EnhancedForStatement[16432-17312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16451-17303]:Block[16460-17312]"
  }, {
    "left" : "if (a.isUnknownType())",
    "right" : "if (a.isUnknownType())",
    "info" : "IfStatement[16459-16548]:IfStatement[16468-16557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16482-16548]:Block[16491-16557]"
  }, {
    "left" : "return getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "return getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ReturnStatement[16492-16540]:ReturnStatement[16501-16549]"
  }, {
    "left" : "ObjectType obj = a.toObjectType();",
    "right" : "ObjectType obj = a.toObjectType();",
    "info" : "VariableDeclarationStatement[16556-16590]:VariableDeclarationStatement[16565-16599]"
  }, {
    "left" : "if (obj == null)",
    "right" : "if (obj == null)",
    "info" : "IfStatement[16597-17297]:IfStatement[16606-17306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16614-16941]:Block[16623-16950]"
  }, {
    "left" : "if (currentValue == null && currentCommonSuper == null)",
    "right" : "if (currentValue == null && currentCommonSuper == null)",
    "info" : "IfStatement[16624-16933]:IfStatement[16633-16942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16680-16782]:Block[16689-16791]"
  }, {
    "left" : "currentValue = a;",
    "right" : "currentValue = a;",
    "info" : "ExpressionStatement[16755-16772]:ExpressionStatement[16764-16781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16788-16933]:Block[16797-16942]"
  }, {
    "left" : "return getNativeType(JSTypeNative.ALL_TYPE);",
    "right" : "return getNativeType(JSTypeNative.ALL_TYPE);",
    "info" : "ReturnStatement[16879-16923]:ReturnStatement[16888-16932]"
  }, {
    "left" : "if (currentValue != null)",
    "right" : "if (currentValue != null)",
    "info" : "IfStatement[16947-17297]:IfStatement[16956-17306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16973-17103]:Block[16982-17112]"
  }, {
    "left" : "return getNativeType(JSTypeNative.ALL_TYPE);",
    "right" : "return getNativeType(JSTypeNative.ALL_TYPE);",
    "info" : "ReturnStatement[17051-17095]:ReturnStatement[17060-17104]"
  }, {
    "left" : "if (currentCommonSuper == null)",
    "right" : "if (currentCommonSuper == null)",
    "info" : "IfStatement[17109-17297]:IfStatement[17118-17306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17141-17184]:Block[17150-17193]"
  }, {
    "left" : "currentCommonSuper = obj;",
    "right" : "currentCommonSuper = obj;",
    "info" : "ExpressionStatement[17151-17176]:ExpressionStatement[17160-17185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17190-17297]:Block[17199-17306]"
  }, {
    "left" : "currentCommonSuper =\n            registry.findCommonSuperObject(currentCommonSuper, obj);",
    "right" : "currentCommonSuper =\n            registry.findCommonSuperObject(currentCommonSuper, obj);",
    "info" : "ExpressionStatement[17200-17289]:ExpressionStatement[17209-17298]"
  }, {
    "left" : "return currentCommonSuper;",
    "right" : "return currentCommonSuper;",
    "info" : "ReturnStatement[17308-17334]:ReturnStatement[17317-17343]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17342-17351]:MarkerAnnotation[17351-17360]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17354-17360]:Modifier[17363-17369]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17361-17365]:PrimitiveType[17370-17374]"
  }, {
    "left" : "matchConstraint",
    "right" : "matchConstraint",
    "info" : "SimpleName[17366-17381]:SimpleName[17375-17390]"
  }, {
    "left" : "JSType constraint",
    "right" : "JSType constraint",
    "info" : "SingleVariableDeclaration[17382-17399]:SingleVariableDeclaration[17391-17408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17401-17499]:Block[17410-17508]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[17407-17495]:EnhancedForStatement[17416-17504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17443-17495]:Block[17452-17504]"
  }, {
    "left" : "alternate.matchConstraint(constraint);",
    "right" : "alternate.matchConstraint(constraint);",
    "info" : "ExpressionStatement[17451-17489]:ExpressionStatement[17460-17498]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17503-17512]:MarkerAnnotation[17512-17521]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17515-17521]:Modifier[17524-17530]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17522-17529]:PrimitiveType[17531-17538]"
  }, {
    "left" : "hasAnyTemplateInternal",
    "right" : "hasAnyTemplateInternal",
    "info" : "SimpleName[17530-17552]:SimpleName[17539-17561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17555-17695]:Block[17564-17704]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[17561-17673]:EnhancedForStatement[17570-17682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17597-17673]:Block[17606-17682]"
  }, {
    "left" : "if (alternate.hasAnyTemplate())",
    "right" : "if (alternate.hasAnyTemplate())",
    "info" : "IfStatement[17605-17667]:IfStatement[17614-17676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17637-17667]:Block[17646-17676]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17647-17659]:ReturnStatement[17656-17668]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17678-17691]:ReturnStatement[17687-17700]"
  } ]
}