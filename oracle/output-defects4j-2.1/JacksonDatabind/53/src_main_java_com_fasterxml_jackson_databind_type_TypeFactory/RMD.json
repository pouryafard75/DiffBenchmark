{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "TypeDeclaration[413-55032]:TypeDeclaration[413-55485]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1326-1374]:FieldDeclaration[1326-1374]"
    }, {
      "left" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "right" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "info" : "FieldDeclaration[1380-1439]:FieldDeclaration[1380-1439]"
    }, {
      "left" : "protected final static TypeFactory instance = new TypeFactory();",
      "right" : "protected final static TypeFactory instance = new TypeFactory();",
      "info" : "FieldDeclaration[1445-1742]:FieldDeclaration[1445-1742]"
    }, {
      "left" : "protected final static TypeBindings EMPTY_BINDINGS = TypeBindings.emptyBindings();",
      "right" : "protected final static TypeBindings EMPTY_BINDINGS = TypeBindings.emptyBindings();",
      "info" : "FieldDeclaration[1748-1830]:FieldDeclaration[1748-1830]"
    }, {
      "left" : "private final static Class<?> CLS_STRING = String.class;",
      "right" : "private final static Class<?> CLS_STRING = String.class;",
      "info" : "FieldDeclaration[2203-2259]:FieldDeclaration[2203-2259]"
    }, {
      "left" : "private final static Class<?> CLS_OBJECT = Object.class;",
      "right" : "private final static Class<?> CLS_OBJECT = Object.class;",
      "info" : "FieldDeclaration[2264-2320]:FieldDeclaration[2264-2320]"
    }, {
      "left" : "private final static Class<?> CLS_COMPARABLE = Comparable.class;",
      "right" : "private final static Class<?> CLS_COMPARABLE = Comparable.class;",
      "info" : "FieldDeclaration[2326-2390]:FieldDeclaration[2326-2390]"
    }, {
      "left" : "private final static Class<?> CLS_CLASS = Class.class;",
      "right" : "private final static Class<?> CLS_CLASS = Class.class;",
      "info" : "FieldDeclaration[2395-2449]:FieldDeclaration[2395-2449]"
    }, {
      "left" : "private final static Class<?> CLS_ENUM = Enum.class;",
      "right" : "private final static Class<?> CLS_ENUM = Enum.class;",
      "info" : "FieldDeclaration[2454-2506]:FieldDeclaration[2454-2506]"
    }, {
      "left" : "private final static Class<?> CLS_BOOL = Boolean.TYPE;",
      "right" : "private final static Class<?> CLS_BOOL = Boolean.TYPE;",
      "info" : "FieldDeclaration[2512-2566]:FieldDeclaration[2512-2566]"
    }, {
      "left" : "private final static Class<?> CLS_INT = Integer.TYPE;",
      "right" : "private final static Class<?> CLS_INT = Integer.TYPE;",
      "info" : "FieldDeclaration[2571-2624]:FieldDeclaration[2571-2624]"
    }, {
      "left" : "private final static Class<?> CLS_LONG = Long.TYPE;",
      "right" : "private final static Class<?> CLS_LONG = Long.TYPE;",
      "info" : "FieldDeclaration[2629-2680]:FieldDeclaration[2629-2680]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(CLS_BOOL);",
      "right" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(CLS_BOOL);",
      "info" : "FieldDeclaration[2934-3010]:FieldDeclaration[2934-3010]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(CLS_INT);",
      "right" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(CLS_INT);",
      "info" : "FieldDeclaration[3015-3089]:FieldDeclaration[3015-3089]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(CLS_LONG);",
      "right" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(CLS_LONG);",
      "info" : "FieldDeclaration[3094-3170]:FieldDeclaration[3094-3170]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(CLS_STRING);",
      "right" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(CLS_STRING);",
      "info" : "FieldDeclaration[3241-3321]:FieldDeclaration[3241-3321]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
      "right" : "protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
      "info" : "FieldDeclaration[3345-3425]:FieldDeclaration[3345-3425]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(CLS_COMPARABLE);",
      "right" : "protected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(CLS_COMPARABLE);",
      "info" : "FieldDeclaration[3431-3726]:FieldDeclaration[3431-3726]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_ENUM = new SimpleType(CLS_ENUM);",
      "right" : "protected final static SimpleType CORE_TYPE_ENUM = new SimpleType(CLS_ENUM);",
      "info" : "FieldDeclaration[3732-3993]:FieldDeclaration[3732-3993]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_CLASS = new SimpleType(CLS_CLASS);",
      "right" : "protected final static SimpleType CORE_TYPE_CLASS = new SimpleType(CLS_CLASS);",
      "info" : "FieldDeclaration[3999-4226]:FieldDeclaration[3999-4226]"
    }, {
      "left" : "protected final LRUMap<Class<?>, JavaType> _typeCache = new LRUMap<Class<?>, JavaType>(16, 100);",
      "right" : "protected final LRUMap<Object,JavaType> _typeCache = new LRUMap<Object,JavaType>(16, 100);",
      "info" : "FieldDeclaration[4232-4525]:FieldDeclaration[4232-4519]"
    }, {
      "left" : "protected final TypeModifier[] _modifiers;",
      "right" : "protected final TypeModifier[] _modifiers;",
      "info" : "FieldDeclaration[4696-4884]:FieldDeclaration[4690-4878]"
    }, {
      "left" : "protected final TypeParser _parser;",
      "right" : "protected final TypeParser _parser;",
      "info" : "FieldDeclaration[4890-4925]:FieldDeclaration[4884-4919]"
    }, {
      "left" : "protected final ClassLoader _classLoader;",
      "right" : "protected final ClassLoader _classLoader;",
      "info" : "FieldDeclaration[4935-5048]:FieldDeclaration[4929-5042]"
    }, {
      "left" : "private TypeFactory()",
      "right" : "private TypeFactory()",
      "info" : "MethodDeclaration[5216-5341]:MethodDeclaration[5210-5335]"
    }, {
      "left" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "right" : "protected TypeFactory(TypeParser p, TypeModifier[] mods)",
      "info" : "MethodDeclaration[5347-5440]:MethodDeclaration[5341-5434]"
    }, {
      "left" : "protected TypeFactory(TypeParser p, TypeModifier[] mods, ClassLoader classLoader)",
      "right" : "protected TypeFactory(TypeParser p, TypeModifier[] mods, ClassLoader classLoader)",
      "info" : "MethodDeclaration[5450-5725]:MethodDeclaration[5444-5719]"
    }, {
      "left" : "public TypeFactory withModifier(TypeModifier mod)",
      "right" : "public TypeFactory withModifier(TypeModifier mod)",
      "info" : "MethodDeclaration[5731-6162]:MethodDeclaration[5725-6156]"
    }, {
      "left" : "public TypeFactory withClassLoader(ClassLoader classLoader)",
      "right" : "public TypeFactory withClassLoader(ClassLoader classLoader)",
      "info" : "MethodDeclaration[6172-6305]:MethodDeclaration[6166-6299]"
    }, {
      "left" : "public static TypeFactory defaultInstance()",
      "right" : "public static TypeFactory defaultInstance()",
      "info" : "MethodDeclaration[6311-6578]:MethodDeclaration[6305-6572]"
    }, {
      "left" : "public void clearCache()",
      "right" : "public void clearCache()",
      "info" : "MethodDeclaration[6584-7093]:MethodDeclaration[6578-7087]"
    }, {
      "left" : "public ClassLoader getClassLoader()",
      "right" : "public ClassLoader getClassLoader()",
      "info" : "MethodDeclaration[7099-7171]:MethodDeclaration[7093-7165]"
    }, {
      "left" : "public static JavaType unknownType()",
      "right" : "public static JavaType unknownType()",
      "info" : "MethodDeclaration[7391-7680]:MethodDeclaration[7385-7674]"
    }, {
      "left" : "public static Class<?> rawClass(Type t)",
      "right" : "public static Class<?> rawClass(Type t)",
      "info" : "MethodDeclaration[7686-8233]:MethodDeclaration[7680-8227]"
    }, {
      "left" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "right" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "info" : "MethodDeclaration[8415-9752]:MethodDeclaration[8409-9746]"
    }, {
      "left" : "protected Class<?> classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException",
      "right" : "protected Class<?> classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException",
      "info" : "MethodDeclaration[9762-9966]:MethodDeclaration[9756-9960]"
    }, {
      "left" : "protected Class<?> classForName(String name) throws ClassNotFoundException",
      "right" : "protected Class<?> classForName(String name) throws ClassNotFoundException",
      "info" : "MethodDeclaration[9976-10094]:MethodDeclaration[9970-10088]"
    }, {
      "left" : "protected Class<?> _findPrimitive(String className)",
      "right" : "protected Class<?> _findPrimitive(String className)",
      "info" : "MethodDeclaration[10100-10709]:MethodDeclaration[10094-10703]"
    }, {
      "left" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "right" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "info" : "MethodDeclaration[10923-18308]:MethodDeclaration[10917-17782]"
    }, {
      "left" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
      "right" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
      "info" : "MethodDeclaration[18544-19932]:MethodDeclaration[18851-20239]"
    }, {
      "left" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "right" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "info" : "MethodDeclaration[19938-20494]:MethodDeclaration[20245-20801]"
    }, {
      "left" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "info" : "MethodDeclaration[20500-21131]:MethodDeclaration[20807-21438]"
    }, {
      "left" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "right" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "info" : "MethodDeclaration[21137-21438]:MethodDeclaration[21444-21745]"
    }, {
      "left" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "right" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "info" : "MethodDeclaration[21448-21716]:MethodDeclaration[21755-22023]"
    }, {
      "left" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "right" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "info" : "MethodDeclaration[21722-22592]:MethodDeclaration[22029-22899]"
    }, {
      "left" : "public JavaType constructType(Type type)",
      "right" : "public JavaType constructType(Type type)",
      "info" : "MethodDeclaration[22776-22877]:MethodDeclaration[23083-23184]"
    }, {
      "left" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "right" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[22883-23001]:MethodDeclaration[23190-23308]"
    }, {
      "left" : "public JavaType constructType(TypeReference<?> typeRef)",
      "right" : "public JavaType constructType(TypeReference<?> typeRef)",
      "info" : "MethodDeclaration[23011-24047]:MethodDeclaration[23318-24354]"
    }, {
      "left" : "public JavaType constructType(Type type, Class<?> contextClass)",
      "right" : "public JavaType constructType(Type type, Class<?> contextClass)",
      "info" : "MethodDeclaration[24053-24432]:MethodDeclaration[24360-24739]"
    }, {
      "left" : "public JavaType constructType(Type type, JavaType contextType)",
      "right" : "public JavaType constructType(Type type, JavaType contextType)",
      "info" : "MethodDeclaration[24438-24799]:MethodDeclaration[24745-25106]"
    }, {
      "left" : "public ArrayType constructArrayType(Class<?> elementType)",
      "right" : "public ArrayType constructArrayType(Class<?> elementType)",
      "info" : "MethodDeclaration[24979-25332]:MethodDeclaration[25286-25639]"
    }, {
      "left" : "public ArrayType constructArrayType(JavaType elementType)",
      "right" : "public ArrayType constructArrayType(JavaType elementType)",
      "info" : "MethodDeclaration[25342-25649]:MethodDeclaration[25649-25956]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[25655-26093]:MethodDeclaration[25962-26400]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[26099-26676]:MethodDeclaration[26406-26983]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[26682-27118]:MethodDeclaration[26989-27425]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[27128-27744]:MethodDeclaration[27435-28051]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[27750-28369]:MethodDeclaration[28057-28676]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[28375-28860]:MethodDeclaration[28682-29167]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[28866-29343]:MethodDeclaration[29173-29650]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[29349-30086]:MethodDeclaration[29656-30393]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[30092-30419]:MethodDeclaration[30399-30726]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[30425-30789]:MethodDeclaration[30732-31096]"
    }, {
      "left" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
      "right" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
      "info" : "MethodDeclaration[30796-31080]:MethodDeclaration[31103-31387]"
    }, {
      "left" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "right" : "public JavaType uncheckedSimpleType(Class<?> cls)",
      "info" : "MethodDeclaration[31086-31594]:MethodDeclaration[31393-31901]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[31600-33257]:MethodDeclaration[31907-33564]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> rawType, JavaType... parameterTypes)",
      "right" : "public JavaType constructParametricType(Class<?> rawType, JavaType... parameterTypes)",
      "info" : "MethodDeclaration[33263-34747]:MethodDeclaration[33570-35054]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "info" : "MethodDeclaration[34753-35065]:MethodDeclaration[35060-35372]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[35071-35387]:MethodDeclaration[35378-35694]"
    }, {
      "left" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "right" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "info" : "MethodDeclaration[35632-36264]:MethodDeclaration[35939-36571]"
    }, {
      "left" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "right" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "info" : "MethodDeclaration[36270-36904]:MethodDeclaration[36577-37211]"
    }, {
      "left" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "right" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "info" : "MethodDeclaration[36910-37528]:MethodDeclaration[37217-37835]"
    }, {
      "left" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "right" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "info" : "MethodDeclaration[37534-38161]:MethodDeclaration[37841-38468]"
    }, {
      "left" : "private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[38344-39368]:MethodDeclaration[38651-39675]"
    }, {
      "left" : "private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[39374-40051]:MethodDeclaration[39681-40358]"
    }, {
      "left" : "private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[40057-40731]:MethodDeclaration[40364-41038]"
    }, {
      "left" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[40737-41446]:MethodDeclaration[41044-41753]"
    }, {
      "left" : "protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[41452-41901]:MethodDeclaration[41759-42208]"
    }, {
      "left" : "protected JavaType _unknownType()",
      "right" : "protected JavaType _unknownType()",
      "info" : "MethodDeclaration[41907-42311]:MethodDeclaration[42214-42618]"
    }, {
      "left" : "protected JavaType _findWellKnownSimple(Class<?> clz)",
      "right" : "protected JavaType _findWellKnownSimple(Class<?> clz)",
      "info" : "MethodDeclaration[42317-43003]:MethodDeclaration[42624-43310]"
    }, {
      "left" : "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)",
      "right" : "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[43194-45556]:MethodDeclaration[43501-45863]"
    }, {
      "left" : "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)",
      "right" : "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)",
      "info" : "MethodDeclaration[45562-49149]:MethodDeclaration[45869-49602]"
    }, {
      "left" : "protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "right" : "protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "info" : "MethodDeclaration[49155-49457]:MethodDeclaration[49608-49910]"
    }, {
      "left" : "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "right" : "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "info" : "MethodDeclaration[49463-49996]:MethodDeclaration[49916-50449]"
    }, {
      "left" : "protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[50002-51305]:MethodDeclaration[50455-51758]"
    }, {
      "left" : "protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[51311-51917]:MethodDeclaration[51764-52370]"
    }, {
      "left" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)",
      "right" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)",
      "info" : "MethodDeclaration[51923-53528]:MethodDeclaration[52376-53981]"
    }, {
      "left" : "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)",
      "right" : "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)",
      "info" : "MethodDeclaration[53534-53796]:MethodDeclaration[53987-54249]"
    }, {
      "left" : "protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)",
      "right" : "protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)",
      "info" : "MethodDeclaration[53802-54522]:MethodDeclaration[54255-54975]"
    }, {
      "left" : "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)",
      "right" : "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)",
      "info" : "MethodDeclaration[54528-55030]:MethodDeclaration[54981-55483]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5238-5341]:Block[5232-5335]"
    }, {
      "left" : "_parser = new TypeParser(this);",
      "right" : "_parser = new TypeParser(this);",
      "info" : "ExpressionStatement[5248-5279]:ExpressionStatement[5242-5273]"
    }, {
      "left" : "_modifiers = null;",
      "right" : "_modifiers = null;",
      "info" : "ExpressionStatement[5288-5306]:ExpressionStatement[5282-5300]"
    }, {
      "left" : "_classLoader = null;",
      "right" : "_classLoader = null;",
      "info" : "ExpressionStatement[5315-5335]:ExpressionStatement[5309-5329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5404-5440]:Block[5398-5434]"
    }, {
      "left" : "this(p, mods, null);",
      "right" : "this(p, mods, null);",
      "info" : "ConstructorInvocation[5414-5434]:ConstructorInvocation[5408-5428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5532-5725]:Block[5526-5719]"
    }, {
      "left" : "_parser = p.withFactory(this);",
      "right" : "_parser = p.withFactory(this);",
      "info" : "ExpressionStatement[5626-5656]:ExpressionStatement[5620-5650]"
    }, {
      "left" : "_modifiers = mods;",
      "right" : "_modifiers = mods;",
      "info" : "ExpressionStatement[5665-5683]:ExpressionStatement[5659-5677]"
    }, {
      "left" : "_classLoader = classLoader;",
      "right" : "_classLoader = classLoader;",
      "info" : "ExpressionStatement[5692-5719]:ExpressionStatement[5686-5713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5786-6162]:Block[5780-6156]"
    }, {
      "left" : "if (mod == null)",
      "right" : "if (mod == null)",
      "info" : "IfStatement[5796-5920]:IfStatement[5790-5914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5813-5920]:Block[5807-5914]"
    }, {
      "left" : "return new TypeFactory(_parser, _modifiers, _classLoader);",
      "right" : "return new TypeFactory(_parser, _modifiers, _classLoader);",
      "info" : "ReturnStatement[5852-5910]:ReturnStatement[5846-5904]"
    }, {
      "left" : "if (_modifiers == null)",
      "right" : "if (_modifiers == null)",
      "info" : "IfStatement[5929-6051]:IfStatement[5923-6045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5953-6051]:Block[5947-6045]"
    }, {
      "left" : "return new TypeFactory(_parser, new TypeModifier[] { mod }, _classLoader);",
      "right" : "return new TypeFactory(_parser, new TypeModifier[] { mod }, _classLoader);",
      "info" : "ReturnStatement[5967-6041]:ReturnStatement[5961-6035]"
    }, {
      "left" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod), _classLoader);",
      "right" : "return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod), _classLoader);",
      "info" : "ReturnStatement[6060-6156]:ReturnStatement[6054-6150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6232-6305]:Block[6226-6299]"
    }, {
      "left" : "return new TypeFactory(_parser, _modifiers, classLoader);",
      "right" : "return new TypeFactory(_parser, _modifiers, classLoader);",
      "info" : "ReturnStatement[6242-6299]:ReturnStatement[6236-6293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6578]:Block[6552-6572]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[6560-6576]:ReturnStatement[6554-6570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7058-7093]:Block[7052-7087]"
    }, {
      "left" : "_typeCache.clear();",
      "right" : "_typeCache.clear();",
      "info" : "ExpressionStatement[7068-7087]:ExpressionStatement[7062-7081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7135-7171]:Block[7129-7165]"
    }, {
      "left" : "return _classLoader;",
      "right" : "return _classLoader;",
      "info" : "ReturnStatement[7145-7165]:ReturnStatement[7139-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7624-7680]:Block[7618-7674]"
    }, {
      "left" : "return defaultInstance()._unknownType();",
      "right" : "return defaultInstance()._unknownType();",
      "info" : "ReturnStatement[7634-7674]:ReturnStatement[7628-7668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8021-8233]:Block[8015-8227]"
    }, {
      "left" : "if (t instanceof Class<?>)",
      "right" : "if (t instanceof Class<?>)",
      "info" : "IfStatement[8031-8102]:IfStatement[8025-8096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8058-8102]:Block[8052-8096]"
    }, {
      "left" : "return (Class<?>) t;",
      "right" : "return (Class<?>) t;",
      "info" : "ReturnStatement[8072-8092]:ReturnStatement[8066-8086]"
    }, {
      "left" : "return defaultInstance().constructType(t).getRawClass();",
      "right" : "return defaultInstance().constructType(t).getRawClass();",
      "info" : "ReturnStatement[8171-8227]:ReturnStatement[8165-8221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8713-9752]:Block[8707-9746]"
    }, {
      "left" : "if (className.indexOf('.') < 0)",
      "right" : "if (className.indexOf('.') < 0)",
      "info" : "IfStatement[8723-8896]:IfStatement[8717-8890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8755-8896]:Block[8749-8890]"
    }, {
      "left" : "Class<?> prim = _findPrimitive(className);",
      "right" : "Class<?> prim = _findPrimitive(className);",
      "info" : "VariableDeclarationStatement[8769-8811]:VariableDeclarationStatement[8763-8805]"
    }, {
      "left" : "if (prim != null)",
      "right" : "if (prim != null)",
      "info" : "IfStatement[8824-8886]:IfStatement[8818-8880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8842-8886]:Block[8836-8880]"
    }, {
      "left" : "return prim;",
      "right" : "return prim;",
      "info" : "ReturnStatement[8860-8872]:ReturnStatement[8854-8866]"
    }, {
      "left" : "Throwable prob = null;",
      "right" : "Throwable prob = null;",
      "info" : "VariableDeclarationStatement[8980-9002]:VariableDeclarationStatement[8974-8996]"
    }, {
      "left" : "ClassLoader loader = this.getClassLoader();",
      "right" : "ClassLoader loader = this.getClassLoader();",
      "info" : "VariableDeclarationStatement[9011-9054]:VariableDeclarationStatement[9005-9048]"
    }, {
      "left" : "if (loader == null)",
      "right" : "if (loader == null)",
      "info" : "IfStatement[9063-9162]:IfStatement[9057-9156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9083-9162]:Block[9077-9156]"
    }, {
      "left" : "loader = \tThread.currentThread().getContextClassLoader();",
      "right" : "loader = \tThread.currentThread().getContextClassLoader();",
      "info" : "ExpressionStatement[9095-9152]:ExpressionStatement[9089-9146]"
    }, {
      "left" : "if (loader != null)",
      "right" : "if (loader != null)",
      "info" : "IfStatement[9171-9382]:IfStatement[9165-9376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9191-9382]:Block[9185-9376]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9205-9372]:TryStatement[9199-9366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9209-9286]:Block[9203-9280]"
    }, {
      "left" : "return classForName(className, true, loader);",
      "right" : "return classForName(className, true, loader);",
      "info" : "ReturnStatement[9227-9272]:ReturnStatement[9221-9266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9307-9372]:Block[9301-9366]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[9325-9358]:ExpressionStatement[9319-9352]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9391-9578]:TryStatement[9385-9572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9395-9450]:Block[9389-9444]"
    }, {
      "left" : "return classForName(className);",
      "right" : "return classForName(className);",
      "info" : "ReturnStatement[9409-9440]:ReturnStatement[9403-9434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9471-9578]:Block[9465-9572]"
    }, {
      "left" : "if (prob == null)",
      "right" : "if (prob == null)",
      "info" : "IfStatement[9485-9568]:IfStatement[9479-9562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9503-9568]:Block[9497-9562]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[9521-9554]:ExpressionStatement[9515-9548]"
    }, {
      "left" : "if (prob instanceof RuntimeException)",
      "right" : "if (prob instanceof RuntimeException)",
      "info" : "IfStatement[9587-9679]:IfStatement[9581-9673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9625-9679]:Block[9619-9673]"
    }, {
      "left" : "throw (RuntimeException) prob;",
      "right" : "throw (RuntimeException) prob;",
      "info" : "ThrowStatement[9639-9669]:ThrowStatement[9633-9663]"
    }, {
      "left" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "right" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "info" : "ThrowStatement[9688-9746]:ThrowStatement[9682-9740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9912-9966]:Block[9906-9960]"
    }, {
      "left" : "return Class.forName(name, true, loader);",
      "right" : "return Class.forName(name, true, loader);",
      "info" : "ReturnStatement[9919-9960]:ReturnStatement[9913-9954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10051-10094]:Block[10045-10088]"
    }, {
      "left" : "return Class.forName(name);",
      "right" : "return Class.forName(name);",
      "info" : "ReturnStatement[10061-10088]:ReturnStatement[10055-10082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10156-10709]:Block[10150-10703]"
    }, {
      "left" : "if (\"int\".equals(className))",
      "right" : "if (\"int\".equals(className))",
      "info" : "IfStatement[10166-10215]:IfStatement[10160-10209]"
    }, {
      "left" : "return Integer.TYPE;",
      "right" : "return Integer.TYPE;",
      "info" : "ReturnStatement[10195-10215]:ReturnStatement[10189-10209]"
    }, {
      "left" : "if (\"long\".equals(className))",
      "right" : "if (\"long\".equals(className))",
      "info" : "IfStatement[10224-10271]:IfStatement[10218-10265]"
    }, {
      "left" : "return Long.TYPE;",
      "right" : "return Long.TYPE;",
      "info" : "ReturnStatement[10254-10271]:ReturnStatement[10248-10265]"
    }, {
      "left" : "if (\"float\".equals(className))",
      "right" : "if (\"float\".equals(className))",
      "info" : "IfStatement[10280-10329]:IfStatement[10274-10323]"
    }, {
      "left" : "return Float.TYPE;",
      "right" : "return Float.TYPE;",
      "info" : "ReturnStatement[10311-10329]:ReturnStatement[10305-10323]"
    }, {
      "left" : "if (\"double\".equals(className))",
      "right" : "if (\"double\".equals(className))",
      "info" : "IfStatement[10338-10389]:IfStatement[10332-10383]"
    }, {
      "left" : "return Double.TYPE;",
      "right" : "return Double.TYPE;",
      "info" : "ReturnStatement[10370-10389]:ReturnStatement[10364-10383]"
    }, {
      "left" : "if (\"boolean\".equals(className))",
      "right" : "if (\"boolean\".equals(className))",
      "info" : "IfStatement[10398-10451]:IfStatement[10392-10445]"
    }, {
      "left" : "return Boolean.TYPE;",
      "right" : "return Boolean.TYPE;",
      "info" : "ReturnStatement[10431-10451]:ReturnStatement[10425-10445]"
    }, {
      "left" : "if (\"byte\".equals(className))",
      "right" : "if (\"byte\".equals(className))",
      "info" : "IfStatement[10460-10507]:IfStatement[10454-10501]"
    }, {
      "left" : "return Byte.TYPE;",
      "right" : "return Byte.TYPE;",
      "info" : "ReturnStatement[10490-10507]:ReturnStatement[10484-10501]"
    }, {
      "left" : "if (\"char\".equals(className))",
      "right" : "if (\"char\".equals(className))",
      "info" : "IfStatement[10516-10568]:IfStatement[10510-10562]"
    }, {
      "left" : "return Character.TYPE;",
      "right" : "return Character.TYPE;",
      "info" : "ReturnStatement[10546-10568]:ReturnStatement[10540-10562]"
    }, {
      "left" : "if (\"short\".equals(className))",
      "right" : "if (\"short\".equals(className))",
      "info" : "IfStatement[10577-10626]:IfStatement[10571-10620]"
    }, {
      "left" : "return Short.TYPE;",
      "right" : "return Short.TYPE;",
      "info" : "ReturnStatement[10608-10626]:ReturnStatement[10602-10620]"
    }, {
      "left" : "if (\"void\".equals(className))",
      "right" : "if (\"void\".equals(className))",
      "info" : "IfStatement[10635-10682]:IfStatement[10629-10676]"
    }, {
      "left" : "return Void.TYPE;",
      "right" : "return Void.TYPE;",
      "info" : "ReturnStatement[10665-10682]:ReturnStatement[10659-10676]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10691-10703]:ReturnStatement[10685-10697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11358-18308]:Block[11352-17782]"
    }, {
      "left" : "final Class<?> rawBase = baseType.getRawClass();",
      "right" : "final Class<?> rawBase = baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[11465-11513]:VariableDeclarationStatement[11459-11507]"
    }, {
      "left" : "if (rawBase == subclass)",
      "right" : "if (rawBase == subclass)",
      "info" : "IfStatement[11522-11587]:IfStatement[11516-11581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11547-11587]:Block[11541-11581]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[11561-11577]:ReturnStatement[11555-11571]"
    }, {
      "left" : "JavaType newType;",
      "right" : "JavaType newType;",
      "info" : "VariableDeclarationStatement[11597-11614]:VariableDeclarationStatement[11591-11608]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[11684-16173]:DoStatement[11678-15647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11687-16158]:Block[11681-15632]"
    }, {
      "left" : "if (rawBase == Object.class)",
      "right" : "if (rawBase == Object.class)",
      "info" : "IfStatement[11735-11886]:IfStatement[11729-11880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11764-11886]:Block[11758-11880]"
    }, {
      "left" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "right" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "info" : "ExpressionStatement[11782-11849]:ExpressionStatement[11776-11843]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11866-11872]:BreakStatement[11860-11866]"
    }, {
      "left" : "if (!rawBase.isAssignableFrom(subclass))",
      "right" : "if (!rawBase.isAssignableFrom(subclass))",
      "info" : "IfStatement[11899-12107]:IfStatement[11893-12101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11940-12107]:Block[11934-12101]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not subtype of %s\", subclass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not subtype of %s\", subclass.getName(), baseType));",
      "info" : "ThrowStatement[11958-12093]:ThrowStatement[11952-12087]"
    }, {
      "left" : "if (baseType.getBindings().isEmpty())",
      "right" : "if (baseType.getBindings().isEmpty())",
      "info" : "IfStatement[12268-12433]:IfStatement[12262-12427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12306-12433]:Block[12300-12427]"
    }, {
      "left" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "right" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "info" : "ExpressionStatement[12324-12391]:ExpressionStatement[12318-12385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12413-12419]:BreakStatement[12407-12413]"
    }, {
      "left" : "if (baseType.isContainerType())",
      "right" : "if (baseType.isContainerType())",
      "info" : "IfStatement[12538-13917]:IfStatement[12532-13911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12570-13917]:Block[12564-13911]"
    }, {
      "left" : "if (baseType.isMapLikeType())",
      "right" : "if (baseType.isMapLikeType())",
      "info" : "IfStatement[12588-13903]:IfStatement[12582-13897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12618-13103]:Block[12612-13097]"
    }, {
      "left" : "if ((subclass == HashMap.class)\n                            || (subclass == LinkedHashMap.class)\n                            || (subclass == EnumMap.class)\n                            || (subclass == TreeMap.class))",
      "right" : "if ((subclass == HashMap.class)\n                            || (subclass == LinkedHashMap.class)\n                            || (subclass == EnumMap.class)\n                            || (subclass == TreeMap.class))",
      "info" : "IfStatement[12640-13085]:IfStatement[12634-13079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12856-13085]:Block[12850-13079]"
    }, {
      "left" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));",
      "right" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));",
      "info" : "ExpressionStatement[12882-13032]:ExpressionStatement[12876-13026]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13057-13063]:BreakStatement[13051-13057]"
    }, {
      "left" : "if (baseType.isCollectionLikeType())",
      "right" : "if (baseType.isCollectionLikeType())",
      "info" : "IfStatement[13109-13903]:IfStatement[13103-13897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13146-13903]:Block[13140-13897]"
    }, {
      "left" : "if ((subclass == ArrayList.class)\n                            || (subclass == LinkedList.class)\n                            || (subclass == HashSet.class)\n                            || (subclass == TreeSet.class))",
      "right" : "if ((subclass == ArrayList.class)\n                            || (subclass == LinkedList.class)\n                            || (subclass == HashSet.class)\n                            || (subclass == TreeSet.class))",
      "info" : "IfStatement[13168-13589]:IfStatement[13162-13583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13383-13589]:Block[13377-13583]"
    }, {
      "left" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getContentType()));",
      "right" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getContentType()));",
      "info" : "ExpressionStatement[13409-13536]:ExpressionStatement[13403-13530]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13561-13567]:BreakStatement[13555-13561]"
    }, {
      "left" : "if (rawBase == EnumSet.class)",
      "right" : "if (rawBase == EnumSet.class)",
      "info" : "IfStatement[13791-13885]:IfStatement[13785-13879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13821-13885]:Block[13815-13879]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[13847-13863]:ReturnStatement[13841-13857]"
    }, {
      "left" : "int typeParamCount = subclass.getTypeParameters().length;",
      "right" : "int typeParamCount = subclass.getTypeParameters().length;",
      "info" : "VariableDeclarationStatement[14013-14070]:VariableDeclarationStatement[14007-14064]"
    }, {
      "left" : "if (typeParamCount == 0)",
      "right" : "if (typeParamCount == 0)",
      "info" : "IfStatement[14083-14235]:IfStatement[14077-14229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14108-14235]:Block[14102-14229]"
    }, {
      "left" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "right" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "info" : "ExpressionStatement[14126-14193]:ExpressionStatement[14120-14187]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14215-14221]:BreakStatement[14209-14215]"
    }, {
      "left" : "if (baseType.isInterface())",
      "right" : "if (baseType.isInterface())",
      "info" : "IfStatement[15123-15408]:IfStatement[15204-15437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15151-15284]:Block[15232-15339]"
    }, {
      "left" : "newType = baseType.refine(subclass, TypeBindings.emptyBindings(), null, new JavaType[] { baseType });",
      "right" : "newType = baseType.refine(subclass, tb, null, new JavaType[] { baseType });",
      "info" : "ExpressionStatement[15169-15270]:ExpressionStatement[15250-15325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15290-15408]:Block[15345-15437]"
    }, {
      "left" : "newType = baseType.refine(subclass, TypeBindings.emptyBindings(), baseType, NO_TYPES);",
      "right" : "newType = baseType.refine(subclass, tb, baseType, NO_TYPES);",
      "info" : "ExpressionStatement[15308-15394]:ExpressionStatement[15363-15423]"
    }, {
      "left" : "if (newType == null)",
      "right" : "if (newType == null)",
      "info" : "IfStatement[15499-16148]:IfStatement[15528-15622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15520-16148]:Block[15549-15622]"
    }, {
      "left" : "TypeBindings tb = null;",
      "right" : "TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);",
      "info" : "VariableDeclarationStatement[15538-15561]:VariableDeclarationStatement[15117-15191]"
    }, {
      "left" : "if (baseType.containedTypeCount() == typeParamCount)",
      "right" : "if (baseCount == typeParamCount)",
      "info" : "IfStatement[15578-16006]:IfStatement[18106-18715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15631-16006]:Block[18139-18715]"
    }, {
      "left" : "if (typeParamCount == 1)",
      "right" : "if (typeParamCount == 1)",
      "info" : "IfStatement[15653-15988]:IfStatement[18153-18274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15678-15788]:Block[18178-18274]"
    }, {
      "left" : "if (typeParamCount == 2)",
      "right" : "if (typeParamCount == 2)",
      "info" : "IfStatement[15794-15988]:IfStatement[18287-18459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15819-15988]:Block[18312-18459]"
    }, {
      "left" : "newType = _fromClass(null, subclass,\n                        (tb == null) ? TypeBindings.emptyBindings() : tb);",
      "right" : "newType = _fromClass(null, subclass, tb);",
      "info" : "ExpressionStatement[16023-16134]:ExpressionStatement[15567-15608]"
    }, {
      "left" : "return newType;",
      "right" : "return newType;",
      "info" : "ReturnStatement[16273-16288]:ReturnStatement[15747-15762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18993-19932]:Block[19300-20239]"
    }, {
      "left" : "final Class<?> rawBase = baseType.getRawClass();",
      "right" : "final Class<?> rawBase = baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[19100-19148]:VariableDeclarationStatement[19407-19455]"
    }, {
      "left" : "if (rawBase == superClass)",
      "right" : "if (rawBase == superClass)",
      "info" : "IfStatement[19157-19224]:IfStatement[19464-19531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19184-19224]:Block[19491-19531]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[19198-19214]:ReturnStatement[19505-19521]"
    }, {
      "left" : "JavaType superType = baseType.findSuperType(superClass);",
      "right" : "JavaType superType = baseType.findSuperType(superClass);",
      "info" : "VariableDeclarationStatement[19233-19289]:VariableDeclarationStatement[19540-19596]"
    }, {
      "left" : "if (superType == null)",
      "right" : "if (superType == null)",
      "info" : "IfStatement[19298-19900]:IfStatement[19605-20207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19321-19900]:Block[19628-20207]"
    }, {
      "left" : "if (!superClass.isAssignableFrom(rawBase))",
      "right" : "if (!superClass.isAssignableFrom(rawBase))",
      "info" : "IfStatement[19413-19630]:IfStatement[19720-19937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19456-19630]:Block[19763-19937]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));",
      "info" : "ThrowStatement[19474-19616]:ThrowStatement[19781-19923]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));",
      "info" : "ThrowStatement[19705-19890]:ThrowStatement[20012-20197]"
    }, {
      "left" : "return superType;",
      "right" : "return superType;",
      "info" : "ReturnStatement[19909-19926]:ReturnStatement[20216-20233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20446-20494]:Block[20753-20801]"
    }, {
      "left" : "return _parser.parse(canonical);",
      "right" : "return _parser.parse(canonical);",
      "info" : "ReturnStatement[20456-20488]:ReturnStatement[20763-20795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20945-21131]:Block[21252-21438]"
    }, {
      "left" : "JavaType match = type.findSuperType(expType);",
      "right" : "JavaType match = type.findSuperType(expType);",
      "info" : "VariableDeclarationStatement[20955-21000]:VariableDeclarationStatement[21262-21307]"
    }, {
      "left" : "if (match == null)",
      "right" : "if (match == null)",
      "info" : "IfStatement[21009-21068]:IfStatement[21316-21375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21028-21068]:Block[21335-21375]"
    }, {
      "left" : "return NO_TYPES;",
      "right" : "return NO_TYPES;",
      "info" : "ReturnStatement[21042-21058]:ReturnStatement[21349-21365]"
    }, {
      "left" : "return match.getBindings().typeParameterArray();",
      "right" : "return match.getBindings().typeParameterArray();",
      "info" : "ReturnStatement[21077-21125]:ReturnStatement[21384-21432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21357-21438]:Block[21664-21745]"
    }, {
      "left" : "return findTypeParameters(constructType(clz, bindings), expType);",
      "right" : "return findTypeParameters(constructType(clz, bindings), expType);",
      "info" : "ReturnStatement[21367-21432]:ReturnStatement[21674-21739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21645-21716]:Block[21952-22023]"
    }, {
      "left" : "return findTypeParameters(constructType(clz), expType);",
      "right" : "return findTypeParameters(constructType(clz), expType);",
      "info" : "ReturnStatement[21655-21710]:ReturnStatement[21962-22017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22134-22592]:Block[22441-22899]"
    }, {
      "left" : "if (type1 == null)",
      "right" : "if (type1 == null)",
      "info" : "IfStatement[22144-22200]:IfStatement[22451-22507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22163-22200]:Block[22470-22507]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[22177-22190]:ReturnStatement[22484-22497]"
    }, {
      "left" : "if (type2 == null)",
      "right" : "if (type2 == null)",
      "info" : "IfStatement[22209-22265]:IfStatement[22516-22572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22228-22265]:Block[22535-22572]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[22242-22255]:ReturnStatement[22549-22562]"
    }, {
      "left" : "Class<?> raw1 = type1.getRawClass();",
      "right" : "Class<?> raw1 = type1.getRawClass();",
      "info" : "VariableDeclarationStatement[22274-22310]:VariableDeclarationStatement[22581-22617]"
    }, {
      "left" : "Class<?> raw2 = type2.getRawClass();",
      "right" : "Class<?> raw2 = type2.getRawClass();",
      "info" : "VariableDeclarationStatement[22319-22355]:VariableDeclarationStatement[22626-22662]"
    }, {
      "left" : "if (raw1 == raw2)",
      "right" : "if (raw1 == raw2)",
      "info" : "IfStatement[22364-22419]:IfStatement[22671-22726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22382-22419]:Block[22689-22726]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[22396-22409]:ReturnStatement[22703-22716]"
    }, {
      "left" : "if (raw1.isAssignableFrom(raw2))",
      "right" : "if (raw1.isAssignableFrom(raw2))",
      "info" : "IfStatement[22494-22564]:IfStatement[22801-22871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22527-22564]:Block[22834-22871]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[22541-22554]:ReturnStatement[22848-22861]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[22573-22586]:ReturnStatement[22880-22893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22817-22877]:Block[23124-23184]"
    }, {
      "left" : "return _fromAny(null, type, EMPTY_BINDINGS);",
      "right" : "return _fromAny(null, type, EMPTY_BINDINGS);",
      "info" : "ReturnStatement[22827-22871]:ReturnStatement[23134-23178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22947-23001]:Block[23254-23308]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[22957-22995]:ReturnStatement[23264-23302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23071-24047]:Block[23378-24354]"
    }, {
      "left" : "return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);",
      "right" : "return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);",
      "info" : "ReturnStatement[23147-23204]:ReturnStatement[23454-23511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24231-24432]:Block[24538-24739]"
    }, {
      "left" : "TypeBindings bindings = (contextClass == null)\n                ? TypeBindings.emptyBindings() : constructType(contextClass).getBindings();",
      "right" : "TypeBindings bindings = (contextClass == null)\n                ? TypeBindings.emptyBindings() : constructType(contextClass).getBindings();",
      "info" : "VariableDeclarationStatement[24241-24379]:VariableDeclarationStatement[24548-24686]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[24388-24426]:ReturnStatement[24695-24733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24615-24799]:Block[24922-25106]"
    }, {
      "left" : "TypeBindings bindings = (contextType == null)\n                ? TypeBindings.emptyBindings() : contextType.getBindings();",
      "right" : "TypeBindings bindings = (contextType == null)\n                ? TypeBindings.emptyBindings() : contextType.getBindings();",
      "info" : "VariableDeclarationStatement[24625-24746]:VariableDeclarationStatement[24932-25053]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[24755-24793]:ReturnStatement[25062-25100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25248-25332]:Block[25555-25639]"
    }, {
      "left" : "return ArrayType.construct(_fromAny(null, elementType, null), null);",
      "right" : "return ArrayType.construct(_fromAny(null, elementType, null), null);",
      "info" : "ReturnStatement[25258-25326]:ReturnStatement[25565-25633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25587-25649]:Block[25894-25956]"
    }, {
      "left" : "return ArrayType.construct(elementType, null);",
      "right" : "return ArrayType.construct(elementType, null);",
      "info" : "ReturnStatement[25597-25643]:ReturnStatement[25904-25950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25965-26093]:Block[26272-26400]"
    }, {
      "left" : "return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "right" : "return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[25975-26087]:ReturnStatement[26282-26394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26408-26676]:Block[26715-26983]"
    }, {
      "left" : "return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));",
      "right" : "return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));",
      "info" : "ReturnStatement[26545-26670]:ReturnStatement[26852-26977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26986-27118]:Block[27293-27425]"
    }, {
      "left" : "return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "right" : "return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[26996-27112]:ReturnStatement[27303-27419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27431-27744]:Block[27738-28051]"
    }, {
      "left" : "JavaType type = _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));",
      "right" : "JavaType type = _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));",
      "info" : "VariableDeclarationStatement[27441-27566]:VariableDeclarationStatement[27748-27873]"
    }, {
      "left" : "if (type instanceof CollectionLikeType)",
      "right" : "if (type instanceof CollectionLikeType)",
      "info" : "IfStatement[27575-27672]:IfStatement[27882-27979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27615-27672]:Block[27922-27979]"
    }, {
      "left" : "return (CollectionLikeType) type;",
      "right" : "return (CollectionLikeType) type;",
      "info" : "ReturnStatement[27629-27662]:ReturnStatement[27936-27969]"
    }, {
      "left" : "return CollectionLikeType.upgradeFrom(type, elementType);",
      "right" : "return CollectionLikeType.upgradeFrom(type, elementType);",
      "info" : "ReturnStatement[27681-27738]:ReturnStatement[27988-28045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28051-28369]:Block[28358-28676]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[28061-28077]:VariableDeclarationStatement[28368-28384]"
    }, {
      "left" : "if (mapClass == Properties.class)",
      "right" : "if (mapClass == Properties.class)",
      "info" : "IfStatement[28086-28312]:IfStatement[28393-28619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28120-28171]:Block[28427-28478]"
    }, {
      "left" : "kt = vt = CORE_TYPE_STRING;",
      "right" : "kt = vt = CORE_TYPE_STRING;",
      "info" : "ExpressionStatement[28134-28161]:ExpressionStatement[28441-28468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28177-28312]:Block[28484-28619]"
    }, {
      "left" : "kt = _fromClass(null, keyClass, EMPTY_BINDINGS);",
      "right" : "kt = _fromClass(null, keyClass, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[28191-28239]:ExpressionStatement[28498-28546]"
    }, {
      "left" : "vt = _fromClass(null, valueClass, EMPTY_BINDINGS);",
      "right" : "vt = _fromClass(null, valueClass, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[28252-28302]:ExpressionStatement[28559-28609]"
    }, {
      "left" : "return constructMapType(mapClass, kt, vt);",
      "right" : "return constructMapType(mapClass, kt, vt);",
      "info" : "ReturnStatement[28321-28363]:ReturnStatement[28628-28670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28674-28860]:Block[28981-29167]"
    }, {
      "left" : "return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, new JavaType[] {\n                        keyType, valueType\n                }));",
      "right" : "return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, new JavaType[] {\n                        keyType, valueType\n                }));",
      "info" : "ReturnStatement[28684-28854]:ReturnStatement[28991-29161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29167-29343]:Block[29474-29650]"
    }, {
      "left" : "return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));",
      "right" : "return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[29177-29337]:ReturnStatement[29484-29644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29648-30086]:Block[29955-30393]"
    }, {
      "left" : "JavaType type = _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));",
      "right" : "JavaType type = _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));",
      "info" : "VariableDeclarationStatement[29785-29922]:VariableDeclarationStatement[30092-30229]"
    }, {
      "left" : "if (type instanceof MapLikeType)",
      "right" : "if (type instanceof MapLikeType)",
      "info" : "IfStatement[29931-30014]:IfStatement[30238-30321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29964-30014]:Block[30271-30321]"
    }, {
      "left" : "return (MapLikeType) type;",
      "right" : "return (MapLikeType) type;",
      "info" : "ReturnStatement[29978-30004]:ReturnStatement[30285-30311]"
    }, {
      "left" : "return MapLikeType.upgradeFrom(type, keyType, valueType);",
      "right" : "return MapLikeType.upgradeFrom(type, keyType, valueType);",
      "info" : "ReturnStatement[30023-30080]:ReturnStatement[30330-30387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30324-30419]:Block[30631-30726]"
    }, {
      "left" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "right" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "info" : "ReturnStatement[30334-30413]:ReturnStatement[30641-30720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30721-30789]:Block[31028-31096]"
    }, {
      "left" : "return constructSimpleType(rawType, parameterTypes);",
      "right" : "return constructSimpleType(rawType, parameterTypes);",
      "info" : "ReturnStatement[30731-30783]:ReturnStatement[31038-31090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30914-31080]:Block[31221-31387]"
    }, {
      "left" : "return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);",
      "right" : "return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);",
      "info" : "ReturnStatement[30924-31074]:ReturnStatement[31231-31381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31433-31594]:Block[31740-31901]"
    }, {
      "left" : "return _constructSimple(cls, EMPTY_BINDINGS, null, null);",
      "right" : "return _constructSimple(cls, EMPTY_BINDINGS, null, null);",
      "info" : "ReturnStatement[31531-31588]:ReturnStatement[31838-31895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32991-33257]:Block[33298-33564]"
    }, {
      "left" : "int len = parameterClasses.length;",
      "right" : "int len = parameterClasses.length;",
      "info" : "VariableDeclarationStatement[33001-33035]:VariableDeclarationStatement[33308-33342]"
    }, {
      "left" : "JavaType[] pt = new JavaType[len];",
      "right" : "JavaType[] pt = new JavaType[len];",
      "info" : "VariableDeclarationStatement[33044-33078]:VariableDeclarationStatement[33351-33385]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[33087-33193]:ForStatement[33394-33500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33117-33193]:Block[33424-33500]"
    }, {
      "left" : "pt[i] = _fromClass(null, parameterClasses[i], null);",
      "right" : "pt[i] = _fromClass(null, parameterClasses[i], null);",
      "info" : "ExpressionStatement[33131-33183]:ExpressionStatement[33438-33490]"
    }, {
      "left" : "return constructParametricType(parametrized, pt);",
      "right" : "return constructParametricType(parametrized, pt);",
      "info" : "ReturnStatement[33202-33251]:ReturnStatement[33509-33558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34652-34747]:Block[34959-35054]"
    }, {
      "left" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "right" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "info" : "ReturnStatement[34662-34741]:ReturnStatement[34969-35048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34988-35065]:Block[35295-35372]"
    }, {
      "left" : "return constructParametricType(parametrized, parameterTypes);",
      "right" : "return constructParametricType(parametrized, parameterTypes);",
      "info" : "ReturnStatement[34998-35059]:ReturnStatement[35305-35366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35308-35387]:Block[35615-35694]"
    }, {
      "left" : "return constructParametricType(parametrized, parameterClasses);",
      "right" : "return constructParametricType(parametrized, parameterClasses);",
      "info" : "ReturnStatement[35318-35381]:ReturnStatement[35625-35688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36185-36264]:Block[36492-36571]"
    }, {
      "left" : "return constructCollectionType(collectionClass, unknownType());",
      "right" : "return constructCollectionType(collectionClass, unknownType());",
      "info" : "ReturnStatement[36195-36258]:ReturnStatement[36502-36565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36821-36904]:Block[37128-37211]"
    }, {
      "left" : "return constructCollectionLikeType(collectionClass, unknownType());",
      "right" : "return constructCollectionLikeType(collectionClass, unknownType());",
      "info" : "ReturnStatement[36831-36898]:ReturnStatement[37138-37205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37448-37528]:Block[37755-37835]"
    }, {
      "left" : "return constructMapType(mapClass, unknownType(), unknownType());",
      "right" : "return constructMapType(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[37458-37522]:ReturnStatement[37765-37829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38077-38161]:Block[38384-38468]"
    }, {
      "left" : "return constructMapLikeType(mapClass, unknownType(), unknownType());",
      "right" : "return constructMapLikeType(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[38087-38155]:ReturnStatement[38394-38462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38477-39368]:Block[38784-39675]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[38487-38503]:VariableDeclarationStatement[38794-38810]"
    }, {
      "left" : "if (rawClass == Properties.class)",
      "right" : "if (rawClass == Properties.class)",
      "info" : "IfStatement[38627-39271]:IfStatement[38934-39578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38661-38712]:Block[38968-39019]"
    }, {
      "left" : "kt = vt = CORE_TYPE_STRING;",
      "right" : "kt = vt = CORE_TYPE_STRING;",
      "info" : "ExpressionStatement[38675-38702]:ExpressionStatement[38982-39009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38718-39271]:Block[39025-39578]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[38732-38789]:VariableDeclarationStatement[39039-39096]"
    }, {
      "left" : "switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt = vt = _unknownType();\n                break;\n            case 2:\n                kt = typeParams.get(0);\n                vt = typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }",
      "right" : "switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt = vt = _unknownType();\n                break;\n            case 2:\n                kt = typeParams.get(0);\n                vt = typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }",
      "info" : "SwitchStatement[38845-39261]:SwitchStatement[39152-39568]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[38886-38893]:SwitchCase[39193-39200]"
    }, {
      "left" : "kt = vt = _unknownType();",
      "right" : "kt = vt = _unknownType();",
      "info" : "ExpressionStatement[38925-38950]:ExpressionStatement[39232-39257]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38967-38973]:BreakStatement[39274-39280]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[38986-38993]:SwitchCase[39293-39300]"
    }, {
      "left" : "kt = typeParams.get(0);",
      "right" : "kt = typeParams.get(0);",
      "info" : "ExpressionStatement[39010-39033]:ExpressionStatement[39317-39340]"
    }, {
      "left" : "vt = typeParams.get(1);",
      "right" : "vt = typeParams.get(1);",
      "info" : "ExpressionStatement[39050-39073]:ExpressionStatement[39357-39380]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39090-39096]:BreakStatement[39397-39403]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39109-39117]:SwitchCase[39416-39424]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[39134-39247]:ThrowStatement[39441-39554]"
    }, {
      "left" : "return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);",
      "right" : "return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);",
      "info" : "ReturnStatement[39280-39362]:ReturnStatement[39587-39669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39514-40051]:Block[39821-40358]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[39524-39581]:VariableDeclarationStatement[39831-39888]"
    }, {
      "left" : "JavaType ct;",
      "right" : "JavaType ct;",
      "info" : "VariableDeclarationStatement[39629-39641]:VariableDeclarationStatement[39936-39948]"
    }, {
      "left" : "if (typeParams.isEmpty())",
      "right" : "if (typeParams.isEmpty())",
      "info" : "IfStatement[39650-39951]:IfStatement[39957-40258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39676-39720]:Block[39983-40027]"
    }, {
      "left" : "ct = _unknownType();",
      "right" : "ct = _unknownType();",
      "info" : "ExpressionStatement[39690-39710]:ExpressionStatement[39997-40017]"
    }, {
      "left" : "if (typeParams.size() == 1)",
      "right" : "if (typeParams.size() == 1)",
      "info" : "IfStatement[39726-39951]:IfStatement[40033-40258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39754-39801]:Block[40061-40108]"
    }, {
      "left" : "ct = typeParams.get(0);",
      "right" : "ct = typeParams.get(0);",
      "info" : "ExpressionStatement[39768-39791]:ExpressionStatement[40075-40098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39807-39951]:Block[40114-40258]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[39821-39941]:ThrowStatement[40128-40248]"
    }, {
      "left" : "return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "right" : "return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "info" : "ReturnStatement[39960-40045]:ReturnStatement[40267-40352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40196-40731]:Block[40503-41038]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[40206-40263]:VariableDeclarationStatement[40513-40570]"
    }, {
      "left" : "JavaType ct;",
      "right" : "JavaType ct;",
      "info" : "VariableDeclarationStatement[40311-40323]:VariableDeclarationStatement[40618-40630]"
    }, {
      "left" : "if (typeParams.isEmpty())",
      "right" : "if (typeParams.isEmpty())",
      "info" : "IfStatement[40332-40632]:IfStatement[40639-40939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40358-40402]:Block[40665-40709]"
    }, {
      "left" : "ct = _unknownType();",
      "right" : "ct = _unknownType();",
      "info" : "ExpressionStatement[40372-40392]:ExpressionStatement[40679-40699]"
    }, {
      "left" : "if (typeParams.size() == 1)",
      "right" : "if (typeParams.size() == 1)",
      "info" : "IfStatement[40408-40632]:IfStatement[40715-40939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40436-40483]:Block[40743-40790]"
    }, {
      "left" : "ct = typeParams.get(0);",
      "right" : "ct = typeParams.get(0);",
      "info" : "ExpressionStatement[40450-40473]:ExpressionStatement[40757-40780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40489-40632]:Block[40796-40939]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[40503-40622]:ThrowStatement[40810-40929]"
    }, {
      "left" : "return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "right" : "return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "info" : "ReturnStatement[40641-40725]:ReturnStatement[40948-41032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41184-41446]:Block[41491-41753]"
    }, {
      "left" : "if (bindings.isEmpty())",
      "right" : "if (bindings.isEmpty())",
      "info" : "IfStatement[41194-41365]:IfStatement[41501-41672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41218-41365]:Block[41525-41672]"
    }, {
      "left" : "JavaType result = _findWellKnownSimple(raw);",
      "right" : "JavaType result = _findWellKnownSimple(raw);",
      "info" : "VariableDeclarationStatement[41232-41276]:VariableDeclarationStatement[41539-41583]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[41289-41355]:IfStatement[41596-41662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41309-41355]:Block[41616-41662]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[41327-41341]:ReturnStatement[41634-41648]"
    }, {
      "left" : "return _newSimpleType(raw, bindings, superClass, superInterfaces);",
      "right" : "return _newSimpleType(raw, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[41374-41440]:ReturnStatement[41681-41747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41819-41901]:Block[42126-42208]"
    }, {
      "left" : "return new SimpleType(raw, bindings, superClass, superInterfaces);",
      "right" : "return new SimpleType(raw, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[41829-41895]:ReturnStatement[42136-42202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41941-42311]:Block[42248-42618]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[42281-42305]:ReturnStatement[42588-42612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42616-43003]:Block[42923-43310]"
    }, {
      "left" : "if (clz.isPrimitive())",
      "right" : "if (clz.isPrimitive())",
      "info" : "IfStatement[42626-42976]:IfStatement[42933-43283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42649-42826]:Block[42956-43133]"
    }, {
      "left" : "if (clz == CLS_BOOL)",
      "right" : "if (clz == CLS_BOOL)",
      "info" : "IfStatement[42663-42706]:IfStatement[42970-43013]"
    }, {
      "left" : "return CORE_TYPE_BOOL;",
      "right" : "return CORE_TYPE_BOOL;",
      "info" : "ReturnStatement[42684-42706]:ReturnStatement[42991-43013]"
    }, {
      "left" : "if (clz == CLS_INT)",
      "right" : "if (clz == CLS_INT)",
      "info" : "IfStatement[42719-42760]:IfStatement[43026-43067]"
    }, {
      "left" : "return CORE_TYPE_INT;",
      "right" : "return CORE_TYPE_INT;",
      "info" : "ReturnStatement[42739-42760]:ReturnStatement[43046-43067]"
    }, {
      "left" : "if (clz == CLS_LONG)",
      "right" : "if (clz == CLS_LONG)",
      "info" : "IfStatement[42773-42816]:IfStatement[43080-43123]"
    }, {
      "left" : "return CORE_TYPE_LONG;",
      "right" : "return CORE_TYPE_LONG;",
      "info" : "ReturnStatement[42794-42816]:ReturnStatement[43101-43123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42832-42976]:Block[43139-43283]"
    }, {
      "left" : "if (clz == CLS_STRING)",
      "right" : "if (clz == CLS_STRING)",
      "info" : "IfStatement[42846-42893]:IfStatement[43153-43200]"
    }, {
      "left" : "return CORE_TYPE_STRING;",
      "right" : "return CORE_TYPE_STRING;",
      "info" : "ReturnStatement[42869-42893]:ReturnStatement[43176-43200]"
    }, {
      "left" : "if (clz == CLS_OBJECT)",
      "right" : "if (clz == CLS_OBJECT)",
      "info" : "IfStatement[42906-42953]:IfStatement[43213-43260]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[42929-42953]:ReturnStatement[43236-43260]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42985-42997]:ReturnStatement[43292-43304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43484-45556]:Block[43791-45863]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[43494-43514]:VariableDeclarationStatement[43801-43821]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[43549-44722]:IfStatement[43856-45029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43579-43753]:Block[43886-44060]"
    }, {
      "left" : "resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);",
      "right" : "resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[43677-43743]:ExpressionStatement[43984-44050]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[43815-44722]:IfStatement[44122-45029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43854-43951]:Block[44161-44258]"
    }, {
      "left" : "resultType = _fromParamType(context, (ParameterizedType) type, bindings);",
      "right" : "resultType = _fromParamType(context, (ParameterizedType) type, bindings);",
      "info" : "ExpressionStatement[43868-43941]:ExpressionStatement[44175-44248]"
    }, {
      "left" : "if (type instanceof JavaType)",
      "right" : "if (type instanceof JavaType)",
      "info" : "IfStatement[43965-44722]:IfStatement[44272-45029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43995-44128]:Block[44302-44435]"
    }, {
      "left" : "return (JavaType) type;",
      "right" : "return (JavaType) type;",
      "info" : "ReturnStatement[44095-44118]:ReturnStatement[44402-44425]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[44142-44722]:IfStatement[44449-45029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44180-44276]:Block[44487-44583]"
    }, {
      "left" : "resultType = _fromArrayType(context, (GenericArrayType) type, bindings);",
      "right" : "resultType = _fromArrayType(context, (GenericArrayType) type, bindings);",
      "info" : "ExpressionStatement[44194-44266]:ExpressionStatement[44501-44573]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[44290-44722]:IfStatement[44597-45029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44327-44421]:Block[44634-44728]"
    }, {
      "left" : "resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);",
      "right" : "resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);",
      "info" : "ExpressionStatement[44341-44411]:ExpressionStatement[44648-44718]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[44435-44722]:IfStatement[44742-45029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44469-44560]:Block[44776-44867]"
    }, {
      "left" : "resultType = _fromWildcard(context, (WildcardType) type, bindings);",
      "right" : "resultType = _fromWildcard(context, (WildcardType) type, bindings);",
      "info" : "ExpressionStatement[44483-44550]:ExpressionStatement[44790-44857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44566-44722]:Block[44873-45029]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "right" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "info" : "ThrowStatement[44608-44712]:ThrowStatement[44915-45019]"
    }, {
      "left" : "if (_modifiers != null)",
      "right" : "if (_modifiers != null)",
      "info" : "IfStatement[44911-45523]:IfStatement[45218-45830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44935-45523]:Block[45242-45830]"
    }, {
      "left" : "TypeBindings b = resultType.getBindings();",
      "right" : "TypeBindings b = resultType.getBindings();",
      "info" : "VariableDeclarationStatement[44949-44991]:VariableDeclarationStatement[45256-45298]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[45004-45070]:IfStatement[45311-45377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45019-45070]:Block[45326-45377]"
    }, {
      "left" : "b = EMPTY_BINDINGS;",
      "right" : "b = EMPTY_BINDINGS;",
      "info" : "ExpressionStatement[45037-45056]:ExpressionStatement[45344-45363]"
    }, {
      "left" : "for (TypeModifier mod : _modifiers)",
      "right" : "for (TypeModifier mod : _modifiers)",
      "info" : "EnhancedForStatement[45083-45513]:EnhancedForStatement[45390-45820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45119-45513]:Block[45426-45820]"
    }, {
      "left" : "JavaType t = mod.modifyType(resultType, type, b, this);",
      "right" : "JavaType t = mod.modifyType(resultType, type, b, this);",
      "info" : "VariableDeclarationStatement[45137-45192]:VariableDeclarationStatement[45444-45499]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[45209-45467]:IfStatement[45516-45774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45224-45467]:Block[45531-45774]"
    }, {
      "left" : "throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));",
      "right" : "throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));",
      "info" : "ThrowStatement[45246-45449]:ThrowStatement[45553-45756]"
    }, {
      "left" : "resultType = t;",
      "right" : "resultType = t;",
      "info" : "ExpressionStatement[45484-45499]:ExpressionStatement[45791-45806]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[45532-45550]:ReturnStatement[45839-45857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45784-49149]:Block[46091-49602]"
    }, {
      "left" : "JavaType result = _findWellKnownSimple(rawType);",
      "right" : "JavaType result = _findWellKnownSimple(rawType);",
      "info" : "VariableDeclarationStatement[45861-45909]:VariableDeclarationStatement[46168-46216]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[45918-45976]:IfStatement[46225-46283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45938-45976]:Block[46245-46283]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[45952-45966]:ReturnStatement[46259-46273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46138-46266]:Block[46434-46544]"
    }, {
      "left" : "result = _typeCache.get(rawType);",
      "right" : "result = _typeCache.get(key);",
      "info" : "ExpressionStatement[46152-46185]:ExpressionStatement[46475-46504]"
    }, {
      "left" : "result = _typeCache.get(rawType);",
      "right" : "result = _typeCache.get(key);",
      "info" : "ExpressionStatement[46152-46185]:ExpressionStatement[46613-46642]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[46194-46256]:IfStatement[46681-46739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46214-46256]:Block[46701-46739]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[46228-46242]:ReturnStatement[46715-46729]"
    }, {
      "left" : "if (context == null)",
      "right" : "if (context == null)",
      "info" : "IfStatement[46327-46898]:IfStatement[46800-47371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46348-46406]:Block[46821-46879]"
    }, {
      "left" : "context = new ClassStack(rawType);",
      "right" : "context = new ClassStack(rawType);",
      "info" : "ExpressionStatement[46362-46396]:ExpressionStatement[46835-46869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46412-46898]:Block[46885-47371]"
    }, {
      "left" : "ClassStack prev = context.find(rawType);",
      "right" : "ClassStack prev = context.find(rawType);",
      "info" : "VariableDeclarationStatement[46426-46466]:VariableDeclarationStatement[46899-46939]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[46479-46759]:IfStatement[46952-47232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46497-46759]:Block[46970-47232]"
    }, {
      "left" : "ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);",
      "right" : "ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);",
      "info" : "VariableDeclarationStatement[46582-46665]:VariableDeclarationStatement[47055-47138]"
    }, {
      "left" : "prev.addSelfReference(selfRef);",
      "right" : "prev.addSelfReference(selfRef);",
      "info" : "ExpressionStatement[46682-46713]:ExpressionStatement[47155-47186]"
    }, {
      "left" : "return selfRef;",
      "right" : "return selfRef;",
      "info" : "ReturnStatement[46730-46745]:ReturnStatement[47203-47218]"
    }, {
      "left" : "context = context.child(rawType);",
      "right" : "context = context.child(rawType);",
      "info" : "ExpressionStatement[46855-46888]:ExpressionStatement[47328-47361]"
    }, {
      "left" : "if (rawType.isArray())",
      "right" : "if (rawType.isArray())",
      "info" : "IfStatement[46952-48986]:IfStatement[47425-49459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46975-47115]:Block[47448-47588]"
    }, {
      "left" : "result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);",
      "right" : "result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);",
      "info" : "ExpressionStatement[46989-47105]:ExpressionStatement[47462-47578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47121-48986]:Block[47594-49459]"
    }, {
      "left" : "JavaType superClass;",
      "right" : "JavaType superClass;",
      "info" : "VariableDeclarationStatement[47228-47248]:VariableDeclarationStatement[47701-47721]"
    }, {
      "left" : "JavaType[] superInterfaces;",
      "right" : "JavaType[] superInterfaces;",
      "info" : "VariableDeclarationStatement[47261-47288]:VariableDeclarationStatement[47734-47761]"
    }, {
      "left" : "if (rawType.isInterface())",
      "right" : "if (rawType.isInterface())",
      "info" : "IfStatement[47302-47735]:IfStatement[47775-48208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47329-47466]:Block[47802-47939]"
    }, {
      "left" : "superClass = null;",
      "right" : "superClass = null;",
      "info" : "ExpressionStatement[47347-47365]:ExpressionStatement[47820-47838]"
    }, {
      "left" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "right" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "info" : "ExpressionStatement[47382-47452]:ExpressionStatement[47855-47925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47472-47735]:Block[47945-48208]"
    }, {
      "left" : "superClass = _resolveSuperClass(context, rawType, bindings);",
      "right" : "superClass = _resolveSuperClass(context, rawType, bindings);",
      "info" : "ExpressionStatement[47574-47634]:ExpressionStatement[48047-48107]"
    }, {
      "left" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "right" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "info" : "ExpressionStatement[47651-47721]:ExpressionStatement[48124-48194]"
    }, {
      "left" : "if (rawType == Properties.class)",
      "right" : "if (rawType == Properties.class)",
      "info" : "IfStatement[47844-48339]:IfStatement[48317-48812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47877-48044]:Block[48350-48517]"
    }, {
      "left" : "result = MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "right" : "result = MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "info" : "ExpressionStatement[47895-48030]:ExpressionStatement[48368-48503]"
    }, {
      "left" : "if (superClass != null)",
      "right" : "if (superClass != null)",
      "info" : "IfStatement[48208-48339]:IfStatement[48681-48812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48232-48339]:Block[48705-48812]"
    }, {
      "left" : "result = superClass.refine(rawType, bindings, superClass, superInterfaces);",
      "right" : "result = superClass.refine(rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[48250-48325]:ExpressionStatement[48723-48798]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[48437-48976]:IfStatement[48910-49449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48457-48976]:Block[48930-49449]"
    }, {
      "left" : "result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[48475-48561]:ExpressionStatement[48948-49034]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[48579-48962]:IfStatement[49052-49435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48599-48962]:Block[49072-49435]"
    }, {
      "left" : "result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[48621-48711]:ExpressionStatement[49094-49184]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[48732-48944]:IfStatement[49205-49417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48752-48944]:Block[49225-49417]"
    }, {
      "left" : "result = _newSimpleType(rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _newSimpleType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[48850-48922]:ExpressionStatement[49323-49395]"
    }, {
      "left" : "context.resolveSelfReferences(result);",
      "right" : "context.resolveSelfReferences(result);",
      "info" : "ExpressionStatement[48995-49033]:ExpressionStatement[49468-49506]"
    }, {
      "left" : "_typeCache.putIfAbsent(rawType, result);",
      "right" : "_typeCache.putIfAbsent(key, result);",
      "info" : "ExpressionStatement[49070-49110]:ExpressionStatement[49515-49551]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[49129-49143]:ReturnStatement[49582-49596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49264-49457]:Block[49717-49910]"
    }, {
      "left" : "Type parent = ClassUtil.getGenericSuperclass(rawType);",
      "right" : "Type parent = ClassUtil.getGenericSuperclass(rawType);",
      "info" : "VariableDeclarationStatement[49274-49328]:VariableDeclarationStatement[49727-49781]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[49337-49393]:IfStatement[49790-49846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49357-49393]:Block[49810-49846]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[49371-49383]:ReturnStatement[49824-49836]"
    }, {
      "left" : "return _fromAny(context, parent, parentBindings);",
      "right" : "return _fromAny(context, parent, parentBindings);",
      "info" : "ReturnStatement[49402-49451]:ReturnStatement[49855-49904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49579-49996]:Block[50032-50449]"
    }, {
      "left" : "Type[] types = ClassUtil.getGenericInterfaces(rawType);",
      "right" : "Type[] types = ClassUtil.getGenericInterfaces(rawType);",
      "info" : "VariableDeclarationStatement[49589-49644]:VariableDeclarationStatement[50042-50097]"
    }, {
      "left" : "if (types == null || types.length == 0)",
      "right" : "if (types == null || types.length == 0)",
      "info" : "IfStatement[49653-49733]:IfStatement[50106-50186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49693-49733]:Block[50146-50186]"
    }, {
      "left" : "return NO_TYPES;",
      "right" : "return NO_TYPES;",
      "info" : "ReturnStatement[49707-49723]:ReturnStatement[50160-50176]"
    }, {
      "left" : "int len = types.length;",
      "right" : "int len = types.length;",
      "info" : "VariableDeclarationStatement[49742-49765]:VariableDeclarationStatement[50195-50218]"
    }, {
      "left" : "JavaType[] resolved = new JavaType[len];",
      "right" : "JavaType[] resolved = new JavaType[len];",
      "info" : "VariableDeclarationStatement[49774-49814]:VariableDeclarationStatement[50227-50267]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[49823-49965]:ForStatement[50276-50418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49853-49965]:Block[50306-50418]"
    }, {
      "left" : "Type type = types[i];",
      "right" : "Type type = types[i];",
      "info" : "VariableDeclarationStatement[49867-49888]:VariableDeclarationStatement[50320-50341]"
    }, {
      "left" : "resolved[i] = _fromAny(context, type, parentBindings);",
      "right" : "resolved[i] = _fromAny(context, type, parentBindings);",
      "info" : "ExpressionStatement[49901-49955]:ExpressionStatement[50354-50408]"
    }, {
      "left" : "return resolved;",
      "right" : "return resolved;",
      "info" : "ReturnStatement[49974-49990]:ReturnStatement[50427-50443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50393-51305]:Block[50846-51758]"
    }, {
      "left" : "if (rawType == Map.class)",
      "right" : "if (rawType == Map.class)",
      "info" : "IfStatement[50484-50598]:IfStatement[50937-51051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50510-50598]:Block[50963-51051]"
    }, {
      "left" : "return _mapType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _mapType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[50524-50588]:ReturnStatement[50977-51041]"
    }, {
      "left" : "if (rawType == Collection.class)",
      "right" : "if (rawType == Collection.class)",
      "info" : "IfStatement[50607-50735]:IfStatement[51060-51188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50640-50735]:Block[51093-51188]"
    }, {
      "left" : "return _collectionType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _collectionType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[50654-50725]:ReturnStatement[51107-51178]"
    }, {
      "left" : "if (rawType == AtomicReference.class)",
      "right" : "if (rawType == AtomicReference.class)",
      "info" : "IfStatement[50790-50922]:IfStatement[51243-51375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50828-50922]:Block[51281-51375]"
    }, {
      "left" : "return _referenceType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _referenceType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[50842-50912]:ReturnStatement[51295-51365]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[51287-51299]:ReturnStatement[51740-51752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51480-51917]:Block[51933-52370]"
    }, {
      "left" : "final int intCount = superInterfaces.length;",
      "right" : "final int intCount = superInterfaces.length;",
      "info" : "VariableDeclarationStatement[51606-51650]:VariableDeclarationStatement[52059-52103]"
    }, {
      "left" : "for (int i = 0; i < intCount; ++i)",
      "right" : "for (int i = 0; i < intCount; ++i)",
      "info" : "ForStatement[51660-51890]:ForStatement[52113-52343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51695-51890]:Block[52148-52343]"
    }, {
      "left" : "JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);",
      "right" : "JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);",
      "info" : "VariableDeclarationStatement[51709-51801]:VariableDeclarationStatement[52162-52254]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[51814-51880]:IfStatement[52267-52333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51834-51880]:Block[52287-52333]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[51852-51866]:ReturnStatement[52305-52319]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[51899-51911]:ReturnStatement[52352-52364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52159-53528]:Block[52612-53981]"
    }, {
      "left" : "Class<?> rawType = (Class<?>) ptype.getRawType();",
      "right" : "Class<?> rawType = (Class<?>) ptype.getRawType();",
      "info" : "VariableDeclarationStatement[52246-52295]:VariableDeclarationStatement[52699-52748]"
    }, {
      "left" : "if (rawType == CLS_ENUM)",
      "right" : "if (rawType == CLS_ENUM)",
      "info" : "IfStatement[52443-52514]:IfStatement[52896-52967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52468-52514]:Block[52921-52967]"
    }, {
      "left" : "return CORE_TYPE_ENUM;",
      "right" : "return CORE_TYPE_ENUM;",
      "info" : "ReturnStatement[52482-52504]:ReturnStatement[52935-52957]"
    }, {
      "left" : "if (rawType == CLS_COMPARABLE)",
      "right" : "if (rawType == CLS_COMPARABLE)",
      "info" : "IfStatement[52523-52606]:IfStatement[52976-53059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52554-52606]:Block[53007-53059]"
    }, {
      "left" : "return CORE_TYPE_COMPARABLE;",
      "right" : "return CORE_TYPE_COMPARABLE;",
      "info" : "ReturnStatement[52568-52596]:ReturnStatement[53021-53049]"
    }, {
      "left" : "if (rawType == CLS_CLASS)",
      "right" : "if (rawType == CLS_CLASS)",
      "info" : "IfStatement[52615-52688]:IfStatement[53068-53141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52641-52688]:Block[53094-53141]"
    }, {
      "left" : "return CORE_TYPE_CLASS;",
      "right" : "return CORE_TYPE_CLASS;",
      "info" : "ReturnStatement[52655-52678]:ReturnStatement[53108-53131]"
    }, {
      "left" : "Type[] args = ptype.getActualTypeArguments();",
      "right" : "Type[] args = ptype.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[52958-53003]:VariableDeclarationStatement[53411-53456]"
    }, {
      "left" : "int paramCount = (args == null) ? 0 : args.length;",
      "right" : "int paramCount = (args == null) ? 0 : args.length;",
      "info" : "VariableDeclarationStatement[53012-53062]:VariableDeclarationStatement[53465-53515]"
    }, {
      "left" : "JavaType[] pt;",
      "right" : "JavaType[] pt;",
      "info" : "VariableDeclarationStatement[53071-53085]:VariableDeclarationStatement[53524-53538]"
    }, {
      "left" : "TypeBindings newBindings;",
      "right" : "TypeBindings newBindings;",
      "info" : "VariableDeclarationStatement[53094-53119]:VariableDeclarationStatement[53547-53572]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[53137-53464]:IfStatement[53590-53917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53158-53211]:Block[53611-53664]"
    }, {
      "left" : "newBindings = EMPTY_BINDINGS;",
      "right" : "newBindings = EMPTY_BINDINGS;",
      "info" : "ExpressionStatement[53172-53201]:ExpressionStatement[53625-53654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53217-53464]:Block[53670-53917]"
    }, {
      "left" : "pt = new JavaType[paramCount];",
      "right" : "pt = new JavaType[paramCount];",
      "info" : "ExpressionStatement[53231-53261]:ExpressionStatement[53684-53714]"
    }, {
      "left" : "for (int i = 0; i < paramCount; ++i)",
      "right" : "for (int i = 0; i < paramCount; ++i)",
      "info" : "ForStatement[53274-53394]:ForStatement[53727-53847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53311-53394]:Block[53764-53847]"
    }, {
      "left" : "pt[i] = _fromAny(context, args[i], parentBindings);",
      "right" : "pt[i] = _fromAny(context, args[i], parentBindings);",
      "info" : "ExpressionStatement[53329-53380]:ExpressionStatement[53782-53833]"
    }, {
      "left" : "newBindings = TypeBindings.create(rawType, pt);",
      "right" : "newBindings = TypeBindings.create(rawType, pt);",
      "info" : "ExpressionStatement[53407-53454]:ExpressionStatement[53860-53907]"
    }, {
      "left" : "return _fromClass(context, rawType, newBindings);",
      "right" : "return _fromClass(context, rawType, newBindings);",
      "info" : "ReturnStatement[53473-53522]:ReturnStatement[53926-53975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53638-53796]:Block[54091-54249]"
    }, {
      "left" : "JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);",
      "right" : "JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);",
      "info" : "VariableDeclarationStatement[53648-53731]:VariableDeclarationStatement[54101-54184]"
    }, {
      "left" : "return ArrayType.construct(elementType, bindings);",
      "right" : "return ArrayType.construct(elementType, bindings);",
      "info" : "ReturnStatement[53740-53790]:ReturnStatement[54193-54243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53903-54522]:Block[54356-54975]"
    }, {
      "left" : "final String name = var.getName();",
      "right" : "final String name = var.getName();",
      "info" : "VariableDeclarationStatement[53961-53995]:VariableDeclarationStatement[54414-54448]"
    }, {
      "left" : "JavaType type = bindings.findBoundType(name);",
      "right" : "JavaType type = bindings.findBoundType(name);",
      "info" : "VariableDeclarationStatement[54004-54049]:VariableDeclarationStatement[54457-54502]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[54058-54112]:IfStatement[54511-54565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54076-54112]:Block[54529-54565]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[54090-54102]:ReturnStatement[54543-54555]"
    }, {
      "left" : "if (bindings.hasUnbound(name))",
      "right" : "if (bindings.hasUnbound(name))",
      "info" : "IfStatement[54285-54364]:IfStatement[54738-54817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54316-54364]:Block[54769-54817]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[54330-54354]:ReturnStatement[54783-54807]"
    }, {
      "left" : "bindings = bindings.withUnboundVariable(name);",
      "right" : "bindings = bindings.withUnboundVariable(name);",
      "info" : "ExpressionStatement[54373-54419]:ExpressionStatement[54826-54872]"
    }, {
      "left" : "Type[] bounds = var.getBounds();",
      "right" : "Type[] bounds = var.getBounds();",
      "info" : "VariableDeclarationStatement[54429-54461]:VariableDeclarationStatement[54882-54914]"
    }, {
      "left" : "return _fromAny(context, bounds[0], bindings);",
      "right" : "return _fromAny(context, bounds[0], bindings);",
      "info" : "ReturnStatement[54470-54516]:ReturnStatement[54923-54969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54627-55030]:Block[55080-55483]"
    }, {
      "left" : "return _fromAny(context, type.getUpperBounds()[0], bindings);",
      "right" : "return _fromAny(context, type.getUpperBounds()[0], bindings);",
      "info" : "ReturnStatement[54963-55024]:ReturnStatement[55416-55477]"
    } ]
  },
  "interFileMappings" : { }
}