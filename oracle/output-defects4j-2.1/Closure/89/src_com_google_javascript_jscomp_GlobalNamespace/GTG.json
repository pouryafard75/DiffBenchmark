{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GlobalNamespace",
      "right" : "GlobalNamespace",
      "info" : "TypeDeclaration[1146-33697]:TypeDeclaration[1146-33672]"
    }, {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1336-1370]:FieldDeclaration[1336-1370]"
    }, {
      "left" : "private final Node root;",
      "right" : "private final Node root;",
      "info" : "FieldDeclaration[1373-1397]:FieldDeclaration[1373-1397]"
    }, {
      "left" : "private final Node externsRoot;",
      "right" : "private final Node externsRoot;",
      "info" : "FieldDeclaration[1400-1431]:FieldDeclaration[1400-1431]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[1434-1460]:FieldDeclaration[1434-1460]"
    }, {
      "left" : "private Scope externsScope;",
      "right" : "private Scope externsScope;",
      "info" : "FieldDeclaration[1463-1490]:FieldDeclaration[1463-1490]"
    }, {
      "left" : "private boolean generated = false;",
      "right" : "private boolean generated = false;",
      "info" : "FieldDeclaration[1493-1527]:FieldDeclaration[1493-1527]"
    }, {
      "left" : "private List<Name> globalNames = new ArrayList<Name>();",
      "right" : "private List<Name> globalNames = new ArrayList<Name>();",
      "info" : "FieldDeclaration[1531-1617]:FieldDeclaration[1531-1617]"
    }, {
      "left" : "private Map<String, Name> nameMap = new HashMap<String, Name>();",
      "right" : "private Map<String, Name> nameMap = new HashMap<String, Name>();",
      "info" : "FieldDeclaration[1621-1758]:FieldDeclaration[1621-1758]"
    }, {
      "left" : "GlobalNamespace(AbstractCompiler compiler, Node root)",
      "right" : "GlobalNamespace(AbstractCompiler compiler, Node root)",
      "info" : "MethodDeclaration[1762-2093]:MethodDeclaration[1762-2093]"
    }, {
      "left" : "GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)",
      "right" : "GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root)",
      "info" : "MethodDeclaration[2097-2842]:MethodDeclaration[2097-2842]"
    }, {
      "left" : "List<Name> getNameForest()",
      "right" : "List<Name> getNameForest()",
      "info" : "MethodDeclaration[2846-3070]:MethodDeclaration[2846-3070]"
    }, {
      "left" : "Map<String, Name> getNameIndex()",
      "right" : "Map<String, Name> getNameIndex()",
      "info" : "MethodDeclaration[3074-3297]:MethodDeclaration[3074-3297]"
    }, {
      "left" : "void scanNewNodes(Scope scope, Set<Node> newNodes)",
      "right" : "void scanNewNodes(Scope scope, Set<Node> newNodes)",
      "info" : "MethodDeclaration[3301-3724]:MethodDeclaration[3301-3724]"
    }, {
      "left" : "NodeFilter",
      "right" : "NodeFilter",
      "info" : "TypeDeclaration[3728-4422]:TypeDeclaration[3728-4422]"
    }, {
      "left" : "private final Set<Node> newNodes;",
      "right" : "private final Set<Node> newNodes;",
      "info" : "FieldDeclaration[3903-3936]:FieldDeclaration[3903-3936]"
    }, {
      "left" : "NodeFilter(Set<Node> newNodes)",
      "right" : "NodeFilter(Set<Node> newNodes)",
      "info" : "MethodDeclaration[3942-4012]:MethodDeclaration[3942-4012]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[4018-4418]:MethodDeclaration[4018-4418]"
    }, {
      "left" : "private void process()",
      "right" : "private void process()",
      "info" : "MethodDeclaration[4426-4760]:MethodDeclaration[4426-4760]"
    }, {
      "left" : "private boolean isGlobalNameReference(String name, Scope s)",
      "right" : "private boolean isGlobalNameReference(String name, Scope s)",
      "info" : "MethodDeclaration[4764-5227]:MethodDeclaration[4764-5227]"
    }, {
      "left" : "private String getTopVarName(String name)",
      "right" : "private String getTopVarName(String name)",
      "info" : "MethodDeclaration[5231-5602]:MethodDeclaration[5231-5602]"
    }, {
      "left" : "private boolean isGlobalVarReference(String name, Scope s)",
      "right" : "private boolean isGlobalVarReference(String name, Scope s)",
      "info" : "MethodDeclaration[5606-6127]:MethodDeclaration[5606-6127]"
    }, {
      "left" : "private boolean isGlobalScope(Scope s)",
      "right" : "private boolean isGlobalScope(Scope s)",
      "info" : "MethodDeclaration[6131-6346]:MethodDeclaration[6131-6346]"
    }, {
      "left" : "BuildGlobalNamespace",
      "right" : "BuildGlobalNamespace",
      "info" : "TypeDeclaration[6430-24530]:TypeDeclaration[6430-24530]"
    }, {
      "left" : "private final Predicate<Node> nodeFilter;",
      "right" : "private final Predicate<Node> nodeFilter;",
      "info" : "FieldDeclaration[6595-6636]:FieldDeclaration[6595-6636]"
    }, {
      "left" : "BuildGlobalNamespace()",
      "right" : "BuildGlobalNamespace()",
      "info" : "MethodDeclaration[6642-6690]:MethodDeclaration[6642-6690]"
    }, {
      "left" : "BuildGlobalNamespace(Predicate<Node> nodeFilter)",
      "right" : "BuildGlobalNamespace(Predicate<Node> nodeFilter)",
      "info" : "MethodDeclaration[6696-6896]:MethodDeclaration[6696-6896]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6902-9857]:MethodDeclaration[6902-9857]"
    }, {
      "left" : "String getNameForObjLitKey(Node n)",
      "right" : "String getNameForObjLitKey(Node n)",
      "info" : "MethodDeclaration[9863-12082]:MethodDeclaration[9863-12082]"
    }, {
      "left" : "Name.Type getValueType(Node n)",
      "right" : "Name.Type getValueType(Node n)",
      "info" : "MethodDeclaration[12088-13284]:MethodDeclaration[12088-13284]"
    }, {
      "left" : "void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type)",
      "right" : "void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type)",
      "info" : "MethodDeclaration[13290-14605]:MethodDeclaration[13290-14605]"
    }, {
      "left" : "private boolean isConstructorOrEnumDeclaration(Node n, Node parent)",
      "right" : "private boolean isConstructorOrEnumDeclaration(Node n, Node parent)",
      "info" : "MethodDeclaration[14611-16171]:MethodDeclaration[14611-16171]"
    }, {
      "left" : "void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name)",
      "right" : "void handleSetFromLocal(NodeTraversal t, Node n, Node parent,\n                            String name)",
      "info" : "MethodDeclaration[16177-17036]:MethodDeclaration[16177-17036]"
    }, {
      "left" : "void handleGet(NodeTraversal t, Node n, Node parent, String name)",
      "right" : "void handleGet(NodeTraversal t, Node n, Node parent, String name)",
      "info" : "MethodDeclaration[17042-19099]:MethodDeclaration[17042-19099]"
    }, {
      "left" : "Ref.Type determineGetTypeForHookOrBooleanExpr(\n        NodeTraversal t, Node parent, String name)",
      "right" : "Ref.Type determineGetTypeForHookOrBooleanExpr(\n        NodeTraversal t, Node parent, String name)",
      "info" : "MethodDeclaration[19105-20967]:MethodDeclaration[19105-20967]"
    }, {
      "left" : "void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type)",
      "right" : "void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type)",
      "info" : "MethodDeclaration[20973-21581]:MethodDeclaration[20973-21581]"
    }, {
      "left" : "boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name)",
      "right" : "boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name)",
      "info" : "MethodDeclaration[21587-23269]:MethodDeclaration[21587-23269]"
    }, {
      "left" : "boolean isNestedAssign(Node parent)",
      "right" : "boolean isNestedAssign(Node parent)",
      "info" : "MethodDeclaration[23275-23715]:MethodDeclaration[23275-23715]"
    }, {
      "left" : "Name getOrCreateName(String name)",
      "right" : "Name getOrCreateName(String name)",
      "info" : "MethodDeclaration[23721-24526]:MethodDeclaration[23721-24526]"
    }, {
      "left" : "Name",
      "right" : "Name",
      "info" : "TypeDeclaration[24614-31318]:TypeDeclaration[24614-31293]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[24895-24958]:EnumDeclaration[24895-24958]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[24964-24982]:FieldDeclaration[24964-24982]"
    }, {
      "left" : "final Name parent;",
      "right" : "final Name parent;",
      "info" : "FieldDeclaration[24987-25005]:FieldDeclaration[24987-25005]"
    }, {
      "left" : "List<Name> props;",
      "right" : "List<Name> props;",
      "info" : "FieldDeclaration[25010-25027]:FieldDeclaration[25010-25027]"
    }, {
      "left" : "Ref declaration;",
      "right" : "Ref declaration;",
      "info" : "FieldDeclaration[25032-25048]:FieldDeclaration[25032-25048]"
    }, {
      "left" : "List<Ref> refs;",
      "right" : "List<Ref> refs;",
      "info" : "FieldDeclaration[25053-25068]:FieldDeclaration[25053-25068]"
    }, {
      "left" : "Type type;",
      "right" : "Type type;",
      "info" : "FieldDeclaration[25073-25083]:FieldDeclaration[25073-25083]"
    }, {
      "left" : "private boolean isClassOrEnum = false;",
      "right" : "private boolean isClassOrEnum = false;",
      "info" : "FieldDeclaration[25088-25126]:FieldDeclaration[25088-25126]"
    }, {
      "left" : "private boolean hasClassOrEnumDescendant = false;",
      "right" : "private boolean hasClassOrEnumDescendant = false;",
      "info" : "FieldDeclaration[25131-25180]:FieldDeclaration[25131-25180]"
    }, {
      "left" : "int globalSets = 0;",
      "right" : "int globalSets = 0;",
      "info" : "FieldDeclaration[25185-25204]:FieldDeclaration[25185-25204]"
    }, {
      "left" : "int localSets = 0;",
      "right" : "int localSets = 0;",
      "info" : "FieldDeclaration[25209-25227]:FieldDeclaration[25209-25227]"
    }, {
      "left" : "int aliasingGets = 0;",
      "right" : "int aliasingGets = 0;",
      "info" : "FieldDeclaration[25232-25253]:FieldDeclaration[25232-25253]"
    }, {
      "left" : "int totalGets = 0;",
      "right" : "int totalGets = 0;",
      "info" : "FieldDeclaration[25258-25276]:FieldDeclaration[25258-25276]"
    }, {
      "left" : "int callGets = 0;",
      "right" : "int callGets = 0;",
      "info" : "FieldDeclaration[25281-25298]:FieldDeclaration[25281-25298]"
    }, {
      "left" : "boolean inExterns;",
      "right" : "boolean inExterns;",
      "info" : "FieldDeclaration[25303-25321]:FieldDeclaration[25303-25321]"
    }, {
      "left" : "JSDocInfo docInfo = null;",
      "right" : "JSDocInfo docInfo = null;",
      "info" : "FieldDeclaration[25327-25352]:FieldDeclaration[25327-25352]"
    }, {
      "left" : "Name(String name, Name parent, boolean inExterns)",
      "right" : "Name(String name, Name parent, boolean inExterns)",
      "info" : "MethodDeclaration[25358-25531]:MethodDeclaration[25358-25531]"
    }, {
      "left" : "Name addProperty(String name, boolean inExterns)",
      "right" : "Name addProperty(String name, boolean inExterns)",
      "info" : "MethodDeclaration[25537-25760]:MethodDeclaration[25537-25760]"
    }, {
      "left" : "void addRef(Ref ref)",
      "right" : "void addRef(Ref ref)",
      "info" : "MethodDeclaration[25766-26610]:MethodDeclaration[25766-26610]"
    }, {
      "left" : "void removeRef(Ref ref)",
      "right" : "void removeRef(Ref ref)",
      "info" : "MethodDeclaration[26616-27653]:MethodDeclaration[26616-27653]"
    }, {
      "left" : "void addRefInternal(Ref ref)",
      "right" : "void addRefInternal(Ref ref)",
      "info" : "MethodDeclaration[27659-27788]:MethodDeclaration[27659-27788]"
    }, {
      "left" : "boolean canEliminate()",
      "right" : "boolean canEliminate()",
      "info" : "MethodDeclaration[27794-28088]:MethodDeclaration[27794-28088]"
    }, {
      "left" : "boolean canCollapse()",
      "right" : "boolean canCollapse()",
      "info" : "MethodDeclaration[28094-28289]:MethodDeclaration[28094-28289]"
    }, {
      "left" : "boolean canCollapseUnannotatedChildNames()",
      "right" : "boolean canCollapseUnannotatedChildNames()",
      "info" : "MethodDeclaration[28295-29286]:MethodDeclaration[28295-29261]"
    }, {
      "left" : "boolean shouldKeepKeys()",
      "right" : "boolean shouldKeepKeys()",
      "info" : "MethodDeclaration[29292-29455]:MethodDeclaration[29267-29430]"
    }, {
      "left" : "boolean needsToBeStubbed()",
      "right" : "boolean needsToBeStubbed()",
      "info" : "MethodDeclaration[29461-29542]:MethodDeclaration[29436-29517]"
    }, {
      "left" : "void setIsClassOrEnum()",
      "right" : "void setIsClassOrEnum()",
      "info" : "MethodDeclaration[29548-29759]:MethodDeclaration[29523-29734]"
    }, {
      "left" : "boolean isNamespace()",
      "right" : "boolean isNamespace()",
      "info" : "MethodDeclaration[29765-30223]:MethodDeclaration[29740-30198]"
    }, {
      "left" : "boolean isSimpleName()",
      "right" : "boolean isSimpleName()",
      "info" : "MethodDeclaration[30229-30393]:MethodDeclaration[30204-30368]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[30399-30652]:MethodDeclaration[30374-30627]"
    }, {
      "left" : "String fullName()",
      "right" : "String fullName()",
      "info" : "MethodDeclaration[30658-30752]:MethodDeclaration[30633-30727]"
    }, {
      "left" : "private static JSDocInfo getDocInfoForDeclaration(Ref ref)",
      "right" : "private static JSDocInfo getDocInfoForDeclaration(Ref ref)",
      "info" : "MethodDeclaration[30758-31314]:MethodDeclaration[30733-31289]"
    }, {
      "left" : "Ref",
      "right" : "Ref",
      "info" : "TypeDeclaration[31402-33695]:TypeDeclaration[31377-33670]"
    }, {
      "left" : "enum : Type",
      "right" : "enum : Type",
      "info" : "EnumDeclaration[31564-31877]:EnumDeclaration[31539-31852]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "FieldDeclaration[31883-31893]:FieldDeclaration[31858-31868]"
    }, {
      "left" : "final Type type;",
      "right" : "final Type type;",
      "info" : "FieldDeclaration[31898-31914]:FieldDeclaration[31873-31889]"
    }, {
      "left" : "final String sourceName;",
      "right" : "final String sourceName;",
      "info" : "FieldDeclaration[31919-31943]:FieldDeclaration[31894-31918]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[31948-31966]:FieldDeclaration[31923-31941]"
    }, {
      "left" : "final JSModule module;",
      "right" : "final JSModule module;",
      "info" : "FieldDeclaration[31971-31993]:FieldDeclaration[31946-31968]"
    }, {
      "left" : "private Ref twin = null;",
      "right" : "private Ref twin = null;",
      "info" : "FieldDeclaration[31999-32277]:FieldDeclaration[31974-32252]"
    }, {
      "left" : "Ref(NodeTraversal t, Node name, Type type)",
      "right" : "Ref(NodeTraversal t, Node name, Type type)",
      "info" : "MethodDeclaration[32283-32556]:MethodDeclaration[32258-32531]"
    }, {
      "left" : "private Ref(Ref original, Type type)",
      "right" : "private Ref(Ref original, Type type)",
      "info" : "MethodDeclaration[32562-32780]:MethodDeclaration[32537-32755]"
    }, {
      "left" : "private Ref(Type type)",
      "right" : "private Ref(Type type)",
      "info" : "MethodDeclaration[32786-32925]:MethodDeclaration[32761-32900]"
    }, {
      "left" : "Ref getTwin()",
      "right" : "Ref getTwin()",
      "info" : "MethodDeclaration[32931-32971]:MethodDeclaration[32906-32946]"
    }, {
      "left" : "boolean isSet()",
      "right" : "boolean isSet()",
      "info" : "MethodDeclaration[32977-33074]:MethodDeclaration[32952-33049]"
    }, {
      "left" : "static void markTwins(Ref a, Ref b)",
      "right" : "static void markTwins(Ref a, Ref b)",
      "info" : "MethodDeclaration[33080-33424]:MethodDeclaration[33055-33399]"
    }, {
      "left" : "Ref cloneAndReclassify(Type type)",
      "right" : "Ref cloneAndReclassify(Type type)",
      "info" : "MethodDeclaration[33430-33608]:MethodDeclaration[33405-33583]"
    }, {
      "left" : "static Ref createRefForTesting(Type type)",
      "right" : "static Ref createRefForTesting(Type type)",
      "info" : "MethodDeclaration[33614-33691]:MethodDeclaration[33589-33666]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2056-2093]:Block[2056-2093]"
    }, {
      "left" : "this(compiler, null, root);",
      "right" : "this(compiler, null, root);",
      "info" : "ConstructorInvocation[2062-2089]:ConstructorInvocation[2062-2089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2749-2842]:Block[2749-2842]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2755-2780]:ExpressionStatement[2755-2780]"
    }, {
      "left" : "this.externsRoot = externsRoot;",
      "right" : "this.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[2785-2816]:ExpressionStatement[2785-2816]"
    }, {
      "left" : "this.root = root;",
      "right" : "this.root = root;",
      "info" : "ExpressionStatement[2821-2838]:ExpressionStatement[2821-2838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2996-3070]:Block[2996-3070]"
    }, {
      "left" : "if (!generated)",
      "right" : "if (!generated)",
      "info" : "IfStatement[3002-3042]:IfStatement[3002-3042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3018-3042]:Block[3018-3042]"
    }, {
      "left" : "process();",
      "right" : "process();",
      "info" : "ExpressionStatement[3026-3036]:ExpressionStatement[3026-3036]"
    }, {
      "left" : "return globalNames;",
      "right" : "return globalNames;",
      "info" : "ReturnStatement[3047-3066]:ReturnStatement[3047-3066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3227-3297]:Block[3227-3297]"
    }, {
      "left" : "if (!generated)",
      "right" : "if (!generated)",
      "info" : "IfStatement[3233-3273]:IfStatement[3233-3273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3249-3273]:Block[3249-3273]"
    }, {
      "left" : "process();",
      "right" : "process();",
      "info" : "ExpressionStatement[3257-3267]:ExpressionStatement[3257-3267]"
    }, {
      "left" : "return nameMap;",
      "right" : "return nameMap;",
      "info" : "ReturnStatement[3278-3293]:ReturnStatement[3278-3293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3578-3724]:Block[3578-3724]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler,\n        new BuildGlobalNamespace(new NodeFilter(newNodes)));",
      "right" : "NodeTraversal t = new NodeTraversal(compiler,\n        new BuildGlobalNamespace(new NodeFilter(newNodes)));",
      "info" : "VariableDeclarationStatement[3584-3690]:VariableDeclarationStatement[3584-3690]"
    }, {
      "left" : "t.traverseAtScope(scope);",
      "right" : "t.traverseAtScope(scope);",
      "info" : "ExpressionStatement[3695-3720]:ExpressionStatement[3695-3720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3973-4012]:Block[3973-4012]"
    }, {
      "left" : "this.newNodes = newNodes;",
      "right" : "this.newNodes = newNodes;",
      "info" : "ExpressionStatement[3981-4006]:ExpressionStatement[3981-4006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4047-4418]:Block[4047-4418]"
    }, {
      "left" : "if (!n.isQualifiedName())",
      "right" : "if (!n.isQualifiedName())",
      "info" : "IfStatement[4055-4112]:IfStatement[4055-4112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4081-4112]:Block[4081-4112]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4091-4104]:ReturnStatement[4091-4104]"
    }, {
      "left" : "Node current;",
      "right" : "Node current;",
      "info" : "VariableDeclarationStatement[4120-4133]:VariableDeclarationStatement[4120-4133]"
    }, {
      "left" : "for (current = n;\n           current.getType() == Token.GETPROP;\n           current = current.getFirstChild())",
      "right" : "for (current = n;\n           current.getType() == Token.GETPROP;\n           current = current.getFirstChild())",
      "info" : "ForStatement[4140-4335]:ForStatement[4140-4335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4251-4335]:Block[4251-4335]"
    }, {
      "left" : "if (newNodes.contains(current))",
      "right" : "if (newNodes.contains(current))",
      "info" : "IfStatement[4261-4327]:IfStatement[4261-4327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4293-4327]:Block[4293-4327]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4305-4317]:ReturnStatement[4305-4317]"
    }, {
      "left" : "return current.getType() == Token.NAME && newNodes.contains(current);",
      "right" : "return current.getType() == Token.NAME && newNodes.contains(current);",
      "info" : "ReturnStatement[4343-4412]:ReturnStatement[4343-4412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4495-4760]:Block[4495-4760]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[4501-4638]:IfStatement[4501-4638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4526-4638]:Block[4526-4638]"
    }, {
      "left" : "inExterns = true;",
      "right" : "inExterns = true;",
      "info" : "ExpressionStatement[4534-4551]:ExpressionStatement[4534-4551]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());",
      "right" : "NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());",
      "info" : "ExpressionStatement[4558-4632]:ExpressionStatement[4558-4632]"
    }, {
      "left" : "inExterns = false;",
      "right" : "inExterns = false;",
      "info" : "ExpressionStatement[4643-4661]:ExpressionStatement[4643-4661]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());",
      "right" : "NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());",
      "info" : "ExpressionStatement[4667-4734]:ExpressionStatement[4667-4734]"
    }, {
      "left" : "generated = true;",
      "right" : "generated = true;",
      "info" : "ExpressionStatement[4739-4756]:ExpressionStatement[4739-4756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5129-5227]:Block[5129-5227]"
    }, {
      "left" : "String topVarName = getTopVarName(name);",
      "right" : "String topVarName = getTopVarName(name);",
      "info" : "VariableDeclarationStatement[5135-5175]:VariableDeclarationStatement[5135-5175]"
    }, {
      "left" : "return isGlobalVarReference(topVarName, s);",
      "right" : "return isGlobalVarReference(topVarName, s);",
      "info" : "ReturnStatement[5180-5223]:ReturnStatement[5180-5223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-5602]:Block[5480-5602]"
    }, {
      "left" : "int firstDotIndex = name.indexOf('.');",
      "right" : "int firstDotIndex = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[5486-5524]:VariableDeclarationStatement[5486-5524]"
    }, {
      "left" : "return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);",
      "right" : "return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);",
      "info" : "ReturnStatement[5529-5598]:ReturnStatement[5529-5598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5962-6127]:Block[5962-6127]"
    }, {
      "left" : "Scope.Var v = s.getVar(name);",
      "right" : "Scope.Var v = s.getVar(name);",
      "info" : "VariableDeclarationStatement[5968-5997]:VariableDeclarationStatement[5968-5997]"
    }, {
      "left" : "if (v == null && externsScope != null)",
      "right" : "if (v == null && externsScope != null)",
      "info" : "IfStatement[6002-6085]:IfStatement[6002-6085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6041-6085]:Block[6041-6085]"
    }, {
      "left" : "v = externsScope.getVar(name);",
      "right" : "v = externsScope.getVar(name);",
      "info" : "ExpressionStatement[6049-6079]:ExpressionStatement[6049-6079]"
    }, {
      "left" : "return v != null && !v.isLocal();",
      "right" : "return v != null && !v.isLocal();",
      "info" : "ReturnStatement[6090-6123]:ReturnStatement[6090-6123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6307-6346]:Block[6307-6346]"
    }, {
      "left" : "return s.getParent() == null;",
      "right" : "return s.getParent() == null;",
      "info" : "ReturnStatement[6313-6342]:ReturnStatement[6313-6342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6665-6690]:Block[6665-6690]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[6673-6684]:ConstructorInvocation[6673-6684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6853-6896]:Block[6853-6896]"
    }, {
      "left" : "this.nodeFilter = nodeFilter;",
      "right" : "this.nodeFilter = nodeFilter;",
      "info" : "ExpressionStatement[6861-6890]:ExpressionStatement[6861-6890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6972-9857]:Block[6972-9857]"
    }, {
      "left" : "if (nodeFilter != null && !nodeFilter.apply(n))",
      "right" : "if (nodeFilter != null && !nodeFilter.apply(n))",
      "info" : "IfStatement[6980-7053]:IfStatement[6980-7053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7028-7053]:Block[7028-7053]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7038-7045]:ReturnStatement[7038-7045]"
    }, {
      "left" : "if (externsRoot != null && n == externsRoot)",
      "right" : "if (externsRoot != null && n == externsRoot)",
      "info" : "IfStatement[7207-7298]:IfStatement[7207-7298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7252-7298]:Block[7252-7298]"
    }, {
      "left" : "externsScope = t.getScope();",
      "right" : "externsScope = t.getScope();",
      "info" : "ExpressionStatement[7262-7290]:ExpressionStatement[7262-7290]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[7306-7318]:VariableDeclarationStatement[7306-7318]"
    }, {
      "left" : "boolean isSet = false;",
      "right" : "boolean isSet = false;",
      "info" : "VariableDeclarationStatement[7325-7347]:VariableDeclarationStatement[7325-7347]"
    }, {
      "left" : "Name.Type type = Name.Type.OTHER;",
      "right" : "Name.Type type = Name.Type.OTHER;",
      "info" : "VariableDeclarationStatement[7354-7387]:VariableDeclarationStatement[7354-7387]"
    }, {
      "left" : "boolean isPropAssign = false;",
      "right" : "boolean isPropAssign = false;",
      "info" : "VariableDeclarationStatement[7394-7423]:VariableDeclarationStatement[7394-7423]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.STRING:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.STRING:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }",
      "info" : "SwitchStatement[7431-9428]:SwitchStatement[7431-9428]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[7462-7480]:SwitchCase[7462-7480]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[7556-7568]:ExpressionStatement[7556-7568]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.OBJECTLIT)",
      "right" : "if (parent != null && parent.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[7579-7694]:IfStatement[7579-7694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7638-7694]:Block[7638-7694]"
    }, {
      "left" : "name = getNameForObjLitKey(n);",
      "right" : "name = getNameForObjLitKey(n);",
      "info" : "ExpressionStatement[7652-7682]:ExpressionStatement[7652-7682]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[7705-7730]:IfStatement[7705-7730]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7723-7730]:ReturnStatement[7723-7730]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[7741-7754]:ExpressionStatement[7741-7754]"
    }, {
      "left" : "type = getValueType(n.getFirstChild());",
      "right" : "type = getValueType(n.getFirstChild());",
      "info" : "ExpressionStatement[7765-7804]:ExpressionStatement[7765-7804]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7815-7821]:BreakStatement[7815-7821]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7830-7846]:SwitchCase[7830-7846]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[7905-8757]:IfStatement[7905-8757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7925-8757]:Block[7925-8757]"
    }, {
      "left" : "switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }",
      "right" : "switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }",
      "info" : "SwitchStatement[7939-8745]:SwitchStatement[7939-8745]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[7981-7996]:SwitchCase[7981-7996]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[8013-8026]:ExpressionStatement[8013-8026]"
    }, {
      "left" : "Node rvalue = n.getFirstChild();",
      "right" : "Node rvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[8043-8075]:VariableDeclarationStatement[8043-8075]"
    }, {
      "left" : "type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);",
      "right" : "type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);",
      "info" : "ExpressionStatement[8092-8155]:ExpressionStatement[8092-8155]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8172-8178]:BreakStatement[8172-8178]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[8193-8211]:SwitchCase[8193-8211]"
    }, {
      "left" : "if (parent.getFirstChild() == n)",
      "right" : "if (parent.getFirstChild() == n)",
      "info" : "IfStatement[8228-8364]:IfStatement[8228-8364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8261-8364]:Block[8261-8364]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[8281-8294]:ExpressionStatement[8281-8294]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[8313-8346]:ExpressionStatement[8313-8346]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8381-8387]:BreakStatement[8381-8387]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8402-8421]:SwitchCase[8402-8421]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8438-8445]:ReturnStatement[8438-8445]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8460-8480]:SwitchCase[8460-8480]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[8497-8530]:VariableDeclarationStatement[8497-8530]"
    }, {
      "left" : "if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent))",
      "right" : "if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent))",
      "info" : "IfStatement[8547-8635]:IfStatement[8547-8635]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8628-8635]:ReturnStatement[8628-8635]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[8652-8665]:ExpressionStatement[8652-8665]"
    }, {
      "left" : "type = Name.Type.FUNCTION;",
      "right" : "type = Name.Type.FUNCTION;",
      "info" : "ExpressionStatement[8682-8708]:ExpressionStatement[8682-8708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8725-8731]:BreakStatement[8725-8731]"
    }, {
      "left" : "name = n.getString();",
      "right" : "name = n.getString();",
      "info" : "ExpressionStatement[8768-8789]:ExpressionStatement[8768-8789]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8800-8806]:BreakStatement[8800-8806]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[8815-8834]:SwitchCase[8815-8834]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[8900-9293]:IfStatement[8900-9293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8920-9293]:Block[8920-9293]"
    }, {
      "left" : "switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }",
      "right" : "switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }",
      "info" : "SwitchStatement[8934-9281]:SwitchStatement[8934-9281]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[8976-8994]:SwitchCase[8976-8994]"
    }, {
      "left" : "if (parent.getFirstChild() == n)",
      "right" : "if (parent.getFirstChild() == n)",
      "info" : "IfStatement[9011-9186]:IfStatement[9011-9186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9044-9186]:Block[9044-9186]"
    }, {
      "left" : "isSet = true;",
      "right" : "isSet = true;",
      "info" : "ExpressionStatement[9064-9077]:ExpressionStatement[9064-9077]"
    }, {
      "left" : "type = getValueType(n.getNext());",
      "right" : "type = getValueType(n.getNext());",
      "info" : "ExpressionStatement[9096-9129]:ExpressionStatement[9096-9129]"
    }, {
      "left" : "isPropAssign = true;",
      "right" : "isPropAssign = true;",
      "info" : "ExpressionStatement[9148-9168]:ExpressionStatement[9148-9168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9203-9209]:BreakStatement[9203-9209]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[9224-9243]:SwitchCase[9224-9243]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9260-9267]:ReturnStatement[9260-9267]"
    }, {
      "left" : "name = n.getQualifiedName();",
      "right" : "name = n.getQualifiedName();",
      "info" : "ExpressionStatement[9304-9332]:ExpressionStatement[9304-9332]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[9343-9368]:IfStatement[9343-9368]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9361-9368]:ReturnStatement[9361-9368]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9379-9385]:BreakStatement[9379-9385]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9394-9402]:SwitchCase[9394-9402]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9413-9420]:ReturnStatement[9413-9420]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[9485-9512]:VariableDeclarationStatement[9485-9512]"
    }, {
      "left" : "if (!isGlobalNameReference(name, scope))",
      "right" : "if (!isGlobalNameReference(name, scope))",
      "info" : "IfStatement[9519-9585]:IfStatement[9519-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9560-9585]:Block[9560-9585]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9570-9577]:ReturnStatement[9570-9577]"
    }, {
      "left" : "if (isSet)",
      "right" : "if (isSet)",
      "info" : "IfStatement[9593-9851]:IfStatement[9593-9851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9604-9797]:Block[9604-9797]"
    }, {
      "left" : "if (isGlobalScope(scope))",
      "right" : "if (isGlobalScope(scope))",
      "info" : "IfStatement[9614-9789]:IfStatement[9614-9789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9640-9722]:Block[9640-9722]"
    }, {
      "left" : "handleSetFromGlobal(t, n, parent, name, isPropAssign, type);",
      "right" : "handleSetFromGlobal(t, n, parent, name, isPropAssign, type);",
      "info" : "ExpressionStatement[9652-9712]:ExpressionStatement[9652-9712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9728-9789]:Block[9728-9789]"
    }, {
      "left" : "handleSetFromLocal(t, n, parent, name);",
      "right" : "handleSetFromLocal(t, n, parent, name);",
      "info" : "ExpressionStatement[9740-9779]:ExpressionStatement[9740-9779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-9851]:Block[9803-9851]"
    }, {
      "left" : "handleGet(t, n, parent, name);",
      "right" : "handleGet(t, n, parent, name);",
      "info" : "ExpressionStatement[9813-9843]:ExpressionStatement[9813-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10622-12082]:Block[10622-12082]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[10630-10658]:VariableDeclarationStatement[10630-10658]"
    }, {
      "left" : "Preconditions.checkState(parent.getType() == Token.OBJECTLIT);",
      "right" : "Preconditions.checkState(parent.getType() == Token.OBJECTLIT);",
      "info" : "ExpressionStatement[10665-10727]:ExpressionStatement[10665-10727]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[10735-10768]:VariableDeclarationStatement[10735-10768]"
    }, {
      "left" : "if (gramps == null)",
      "right" : "if (gramps == null)",
      "info" : "IfStatement[10775-10825]:IfStatement[10775-10825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10795-10825]:Block[10795-10825]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10805-10817]:ReturnStatement[10805-10817]"
    }, {
      "left" : "Node greatGramps = gramps.getParent();",
      "right" : "Node greatGramps = gramps.getParent();",
      "info" : "VariableDeclarationStatement[10833-10871]:VariableDeclarationStatement[10833-10871]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[10878-10890]:VariableDeclarationStatement[10878-10890]"
    }, {
      "left" : "switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.STRING:\n          // OBJLIT\n          //   STRING (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps != null &&\n              greatGramps.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(gramps);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }",
      "right" : "switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.STRING:\n          // OBJLIT\n          //   STRING (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps != null &&\n              greatGramps.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(gramps);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }",
      "info" : "SwitchStatement[10897-11895]:SwitchStatement[10897-11895]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[10933-10949]:SwitchCase[10933-10949]"
    }, {
      "left" : "if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR)",
      "right" : "if (greatGramps == null ||\n              greatGramps.getType() != Token.VAR)",
      "info" : "IfStatement[11069-11184]:IfStatement[11069-11184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11146-11184]:Block[11146-11184]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11160-11172]:ReturnStatement[11160-11172]"
    }, {
      "left" : "name = gramps.getString();",
      "right" : "name = gramps.getString();",
      "info" : "ExpressionStatement[11195-11221]:ExpressionStatement[11195-11221]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11232-11238]:BreakStatement[11232-11238]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[11247-11265]:SwitchCase[11247-11265]"
    }, {
      "left" : "Node lvalue = gramps.getFirstChild();",
      "right" : "Node lvalue = gramps.getFirstChild();",
      "info" : "VariableDeclarationStatement[11392-11429]:VariableDeclarationStatement[11392-11429]"
    }, {
      "left" : "name = lvalue.getQualifiedName();",
      "right" : "name = lvalue.getQualifiedName();",
      "info" : "ExpressionStatement[11440-11473]:ExpressionStatement[11440-11473]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11484-11490]:BreakStatement[11484-11490]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[11499-11517]:SwitchCase[11499-11517]"
    }, {
      "left" : "if (greatGramps != null &&\n              greatGramps.getType() == Token.OBJECTLIT)",
      "right" : "if (greatGramps != null &&\n              greatGramps.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[11642-11830]:IfStatement[11642-11830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11725-11786]:Block[11725-11786]"
    }, {
      "left" : "name = getNameForObjLitKey(gramps);",
      "right" : "name = getNameForObjLitKey(gramps);",
      "info" : "ExpressionStatement[11739-11774]:ExpressionStatement[11739-11774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11792-11830]:Block[11792-11830]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11806-11818]:ReturnStatement[11806-11818]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11841-11847]:BreakStatement[11841-11847]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11856-11864]:SwitchCase[11856-11864]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11875-11887]:ReturnStatement[11875-11887]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[11902-12057]:IfStatement[11902-12057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11920-12057]:Block[11920-12057]"
    }, {
      "left" : "String key = n.getString();",
      "right" : "String key = n.getString();",
      "info" : "VariableDeclarationStatement[11930-11957]:VariableDeclarationStatement[11930-11957]"
    }, {
      "left" : "if (TokenStream.isJSIdentifier(key))",
      "right" : "if (TokenStream.isJSIdentifier(key))",
      "info" : "IfStatement[11966-12049]:IfStatement[11966-12049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12003-12049]:Block[12003-12049]"
    }, {
      "left" : "return name + '.' + key;",
      "right" : "return name + '.' + key;",
      "info" : "ReturnStatement[12015-12039]:ReturnStatement[12015-12039]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12064-12076]:ReturnStatement[12064-12076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12309-13284]:Block[12309-13284]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }",
      "right" : "switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }",
      "info" : "SwitchStatement[12317-13248]:SwitchStatement[12317-13248]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[12348-12369]:SwitchCase[12348-12369]"
    }, {
      "left" : "return Name.Type.OBJECTLIT;",
      "right" : "return Name.Type.OBJECTLIT;",
      "info" : "ReturnStatement[12380-12407]:ReturnStatement[12380-12407]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[12416-12436]:SwitchCase[12416-12436]"
    }, {
      "left" : "return Name.Type.FUNCTION;",
      "right" : "return Name.Type.FUNCTION;",
      "info" : "ReturnStatement[12447-12473]:ReturnStatement[12447-12473]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[12482-12496]:SwitchCase[12482-12496]"
    }, {
      "left" : "return getValueType(n.getLastChild());",
      "right" : "return getValueType(n.getLastChild());",
      "info" : "ReturnStatement[12878-12916]:ReturnStatement[12878-12916]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[12925-12941]:SwitchCase[12925-12941]"
    }, {
      "left" : "Node second = n.getFirstChild().getNext();",
      "right" : "Node second = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[13027-13069]:VariableDeclarationStatement[13027-13069]"
    }, {
      "left" : "Name.Type t = getValueType(second);",
      "right" : "Name.Type t = getValueType(second);",
      "info" : "VariableDeclarationStatement[13080-13115]:VariableDeclarationStatement[13080-13115]"
    }, {
      "left" : "if (t != Name.Type.OTHER)",
      "right" : "if (t != Name.Type.OTHER)",
      "info" : "IfStatement[13126-13161]:IfStatement[13126-13161]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[13152-13161]:ReturnStatement[13152-13161]"
    }, {
      "left" : "Node third = second.getNext();",
      "right" : "Node third = second.getNext();",
      "info" : "VariableDeclarationStatement[13172-13202]:VariableDeclarationStatement[13172-13202]"
    }, {
      "left" : "return getValueType(third);",
      "right" : "return getValueType(third);",
      "info" : "ReturnStatement[13213-13240]:ReturnStatement[13213-13240]"
    }, {
      "left" : "return Name.Type.OTHER;",
      "right" : "return Name.Type.OTHER;",
      "info" : "ReturnStatement[13255-13278]:ReturnStatement[13255-13278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13962-14605]:Block[13962-14605]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "info" : "IfStatement[13970-14029]:IfStatement[13970-14029]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14022-14029]:ReturnStatement[14022-14029]"
    }, {
      "left" : "Name nameObj = getOrCreateName(name);",
      "right" : "Name nameObj = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[14037-14074]:VariableDeclarationStatement[14037-14074]"
    }, {
      "left" : "nameObj.type = type;",
      "right" : "nameObj.type = type;",
      "info" : "ExpressionStatement[14081-14101]:ExpressionStatement[14081-14101]"
    }, {
      "left" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL);",
      "right" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL);",
      "info" : "VariableDeclarationStatement[14109-14159]:VariableDeclarationStatement[14109-14159]"
    }, {
      "left" : "nameObj.addRef(set);",
      "right" : "nameObj.addRef(set);",
      "info" : "ExpressionStatement[14166-14186]:ExpressionStatement[14166-14186]"
    }, {
      "left" : "if (isNestedAssign(parent))",
      "right" : "if (isNestedAssign(parent))",
      "info" : "IfStatement[14194-14599]:IfStatement[14194-14599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14222-14423]:Block[14222-14423]"
    }, {
      "left" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "right" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[14306-14353]:VariableDeclarationStatement[14306-14353]"
    }, {
      "left" : "nameObj.addRef(get);",
      "right" : "nameObj.addRef(get);",
      "info" : "ExpressionStatement[14362-14382]:ExpressionStatement[14362-14382]"
    }, {
      "left" : "Ref.markTwins(set, get);",
      "right" : "Ref.markTwins(set, get);",
      "info" : "ExpressionStatement[14391-14415]:ExpressionStatement[14391-14415]"
    }, {
      "left" : "if (isConstructorOrEnumDeclaration(n, parent))",
      "right" : "if (isConstructorOrEnumDeclaration(n, parent))",
      "info" : "IfStatement[14429-14599]:IfStatement[14429-14599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14476-14599]:Block[14476-14599]"
    }, {
      "left" : "nameObj.setIsClassOrEnum();",
      "right" : "nameObj.setIsClassOrEnum();",
      "info" : "ExpressionStatement[14564-14591]:ExpressionStatement[14564-14591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15153-16171]:Block[15153-16171]"
    }, {
      "left" : "JSDocInfo info;",
      "right" : "JSDocInfo info;",
      "info" : "VariableDeclarationStatement[15380-15395]:VariableDeclarationStatement[15380-15395]"
    }, {
      "left" : "int valueNodeType;",
      "right" : "int valueNodeType;",
      "info" : "VariableDeclarationStatement[15402-15420]:VariableDeclarationStatement[15402-15420]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          return false;\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          return false;\n      }",
      "info" : "SwitchStatement[15427-15922]:SwitchStatement[15427-15922]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[15463-15481]:SwitchCase[15463-15481]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[15492-15521]:ExpressionStatement[15492-15521]"
    }, {
      "left" : "valueNodeType = n.getNext().getType();",
      "right" : "valueNodeType = n.getNext().getType();",
      "info" : "ExpressionStatement[15532-15570]:ExpressionStatement[15532-15570]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15581-15587]:BreakStatement[15581-15587]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[15596-15611]:SwitchCase[15596-15611]"
    }, {
      "left" : "info = n.getJSDocInfo();",
      "right" : "info = n.getJSDocInfo();",
      "info" : "ExpressionStatement[15622-15646]:ExpressionStatement[15622-15646]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[15657-15730]:IfStatement[15657-15730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15675-15730]:Block[15675-15730]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[15689-15718]:ExpressionStatement[15689-15718]"
    }, {
      "left" : "Node valueNode = n.getFirstChild();",
      "right" : "Node valueNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15741-15776]:VariableDeclarationStatement[15741-15776]"
    }, {
      "left" : "valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;",
      "right" : "valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;",
      "info" : "ExpressionStatement[15787-15856]:ExpressionStatement[15787-15856]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15867-15873]:BreakStatement[15867-15873]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15882-15890]:SwitchCase[15882-15890]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15901-15914]:ReturnStatement[15901-15914]"
    }, {
      "left" : "return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);",
      "right" : "return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);",
      "info" : "ReturnStatement[15990-16165]:ReturnStatement[15990-16165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16607-17036]:Block[16607-17036]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "info" : "IfStatement[16615-16674]:IfStatement[16615-16674]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16667-16674]:ReturnStatement[16667-16674]"
    }, {
      "left" : "Name node = getOrCreateName(name);",
      "right" : "Name node = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[16682-16716]:VariableDeclarationStatement[16682-16716]"
    }, {
      "left" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_LOCAL);",
      "right" : "Ref set = new Ref(t, n, Ref.Type.SET_FROM_LOCAL);",
      "info" : "VariableDeclarationStatement[16723-16772]:VariableDeclarationStatement[16723-16772]"
    }, {
      "left" : "node.addRef(set);",
      "right" : "node.addRef(set);",
      "info" : "ExpressionStatement[16779-16796]:ExpressionStatement[16779-16796]"
    }, {
      "left" : "if (isNestedAssign(parent))",
      "right" : "if (isNestedAssign(parent))",
      "info" : "IfStatement[16804-17030]:IfStatement[16804-17030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16832-17030]:Block[16832-17030]"
    }, {
      "left" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "right" : "Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[16916-16963]:VariableDeclarationStatement[16916-16963]"
    }, {
      "left" : "node.addRef(get);",
      "right" : "node.addRef(get);",
      "info" : "ExpressionStatement[16972-16989]:ExpressionStatement[16972-16989]"
    }, {
      "left" : "Ref.markTwins(set, get);",
      "right" : "Ref.markTwins(set, get);",
      "info" : "ExpressionStatement[16998-17022]:ExpressionStatement[16998-17022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17411-19099]:Block[17411-19099]"
    }, {
      "left" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "right" : "if (maybeHandlePrototypePrefix(t, n, parent, name))",
      "info" : "IfStatement[17419-17478]:IfStatement[17419-17478]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17471-17478]:ReturnStatement[17471-17478]"
    }, {
      "left" : "Ref.Type type = Ref.Type.DIRECT_GET;",
      "right" : "Ref.Type type = Ref.Type.DIRECT_GET;",
      "info" : "VariableDeclarationStatement[17486-17522]:VariableDeclarationStatement[17486-17522]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[17529-19049]:IfStatement[17529-19049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17549-19049]:Block[17549-19049]"
    }, {
      "left" : "switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }",
      "right" : "switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }",
      "info" : "SwitchStatement[17559-19041]:SwitchStatement[17559-19041]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[17597-17611]:SwitchCase[17597-17611]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[17622-17640]:SwitchCase[17622-17640]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[17651-17667]:SwitchCase[17651-17667]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[17678-17693]:SwitchCase[17678-17693]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[17704-17722]:SwitchCase[17704-17722]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[17733-17748]:SwitchCase[17733-17748]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[17759-17774]:SwitchCase[17759-17774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17787-17793]:BreakStatement[17787-17793]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[17804-17820]:SwitchCase[17804-17820]"
    }, {
      "left" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;",
      "right" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[17833-17950]:ExpressionStatement[17833-17950]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17963-17969]:BreakStatement[17963-17969]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[17980-17995]:SwitchCase[17980-17995]"
    }, {
      "left" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;",
      "right" : "type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[18008-18127]:ExpressionStatement[18008-18127]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18140-18146]:BreakStatement[18140-18146]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[18157-18171]:SwitchCase[18157-18171]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[18182-18197]:SwitchCase[18182-18197]"
    }, {
      "left" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "right" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "info" : "ExpressionStatement[18471-18532]:ExpressionStatement[18471-18532]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18545-18551]:BreakStatement[18545-18551]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[18562-18578]:SwitchCase[18562-18578]"
    }, {
      "left" : "if (n != parent.getFirstChild())",
      "right" : "if (n != parent.getFirstChild())",
      "info" : "IfStatement[18591-18932]:IfStatement[18591-18932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18624-18932]:Block[18624-18932]"
    }, {
      "left" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "right" : "type = determineGetTypeForHookOrBooleanExpr(t, parent, name);",
      "info" : "ExpressionStatement[18857-18918]:ExpressionStatement[18857-18918]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18945-18951]:BreakStatement[18945-18951]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18962-18970]:SwitchCase[18962-18970]"
    }, {
      "left" : "type = Ref.Type.ALIASING_GET;",
      "right" : "type = Ref.Type.ALIASING_GET;",
      "info" : "ExpressionStatement[18983-19012]:ExpressionStatement[18983-19012]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19025-19031]:BreakStatement[19025-19031]"
    }, {
      "left" : "handleGet(t, n, parent, name, type);",
      "right" : "handleGet(t, n, parent, name, type);",
      "info" : "ExpressionStatement[19057-19093]:ExpressionStatement[19057-19093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19780-20967]:Block[19780-20967]"
    }, {
      "left" : "Node prev = parent;",
      "right" : "Node prev = parent;",
      "info" : "VariableDeclarationStatement[19788-19807]:VariableDeclarationStatement[19788-19807]"
    }, {
      "left" : "for (Node anc : parent.getAncestors())",
      "right" : "for (Node anc : parent.getAncestors())",
      "info" : "EnhancedForStatement[19814-20925]:EnhancedForStatement[19814-20925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19853-20925]:Block[19853-20925]"
    }, {
      "left" : "switch (anc.getType()) {\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n          case Token.IF:\n          case Token.WHILE:\n          case Token.FOR:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            return Ref.Type.DIRECT_GET;\n          case Token.HOOK:\n            if (anc.getFirstChild() == prev) {\n              return Ref.Type.DIRECT_GET;\n            }\n            break;\n          case Token.ASSIGN:\n            if (!name.equals(anc.getFirstChild().getQualifiedName())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NAME:  // a variable declaration\n            if (!name.equals(anc.getString())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.CALL:\n            if (anc.getFirstChild() != prev) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n        }",
      "right" : "switch (anc.getType()) {\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n          case Token.IF:\n          case Token.WHILE:\n          case Token.FOR:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            return Ref.Type.DIRECT_GET;\n          case Token.HOOK:\n            if (anc.getFirstChild() == prev) {\n              return Ref.Type.DIRECT_GET;\n            }\n            break;\n          case Token.ASSIGN:\n            if (!name.equals(anc.getFirstChild().getQualifiedName())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.NAME:  // a variable declaration\n            if (!name.equals(anc.getString())) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n          case Token.CALL:\n            if (anc.getFirstChild() != prev) {\n              return Ref.Type.ALIASING_GET;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[19863-20897]:SwitchStatement[19863-20897]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[19898-19921]:SwitchCase[19898-19921]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[19932-19947]:SwitchCase[19932-19947]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[19958-19972]:SwitchCase[19958-19972]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[19983-20000]:SwitchCase[19983-20000]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[20011-20026]:SwitchCase[20011-20026]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[20037-20055]:SwitchCase[20037-20055]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[20066-20082]:SwitchCase[20066-20082]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[20093-20108]:SwitchCase[20093-20108]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[20119-20137]:SwitchCase[20119-20137]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[20148-20163]:SwitchCase[20148-20163]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[20174-20189]:SwitchCase[20174-20189]"
    }, {
      "left" : "return Ref.Type.DIRECT_GET;",
      "right" : "return Ref.Type.DIRECT_GET;",
      "info" : "ReturnStatement[20202-20229]:ReturnStatement[20202-20229]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[20240-20256]:SwitchCase[20240-20256]"
    }, {
      "left" : "if (anc.getFirstChild() == prev)",
      "right" : "if (anc.getFirstChild() == prev)",
      "info" : "IfStatement[20269-20359]:IfStatement[20269-20359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20302-20359]:Block[20302-20359]"
    }, {
      "left" : "return Ref.Type.DIRECT_GET;",
      "right" : "return Ref.Type.DIRECT_GET;",
      "info" : "ReturnStatement[20318-20345]:ReturnStatement[20318-20345]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20372-20378]:BreakStatement[20372-20378]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[20389-20407]:SwitchCase[20389-20407]"
    }, {
      "left" : "if (!name.equals(anc.getFirstChild().getQualifiedName()))",
      "right" : "if (!name.equals(anc.getFirstChild().getQualifiedName()))",
      "info" : "IfStatement[20420-20537]:IfStatement[20420-20537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20478-20537]:Block[20478-20537]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20494-20523]:ReturnStatement[20494-20523]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20550-20556]:BreakStatement[20550-20556]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[20567-20583]:SwitchCase[20567-20583]"
    }, {
      "left" : "if (!name.equals(anc.getString()))",
      "right" : "if (!name.equals(anc.getString()))",
      "info" : "IfStatement[20623-20717]:IfStatement[20623-20717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20658-20717]:Block[20658-20717]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20674-20703]:ReturnStatement[20674-20703]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20730-20736]:BreakStatement[20730-20736]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[20747-20763]:SwitchCase[20747-20763]"
    }, {
      "left" : "if (anc.getFirstChild() != prev)",
      "right" : "if (anc.getFirstChild() != prev)",
      "info" : "IfStatement[20776-20868]:IfStatement[20776-20868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20809-20868]:Block[20809-20868]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20825-20854]:ReturnStatement[20825-20854]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20881-20887]:BreakStatement[20881-20887]"
    }, {
      "left" : "prev = anc;",
      "right" : "prev = anc;",
      "info" : "ExpressionStatement[20906-20917]:ExpressionStatement[20906-20917]"
    }, {
      "left" : "return Ref.Type.ALIASING_GET;",
      "right" : "return Ref.Type.ALIASING_GET;",
      "info" : "ReturnStatement[20932-20961]:ReturnStatement[20932-20961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21416-21581]:Block[21416-21581]"
    }, {
      "left" : "Name node = getOrCreateName(name);",
      "right" : "Name node = getOrCreateName(name);",
      "info" : "VariableDeclarationStatement[21424-21458]:VariableDeclarationStatement[21424-21458]"
    }, {
      "left" : "node.addRef(new Ref(t, n, type));",
      "right" : "node.addRef(new Ref(t, n, type));",
      "info" : "ExpressionStatement[21542-21575]:ExpressionStatement[21542-21575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22167-23269]:Block[22167-23269]"
    }, {
      "left" : "int numLevelsToRemove;",
      "right" : "int numLevelsToRemove;",
      "info" : "VariableDeclarationStatement[22353-22375]:VariableDeclarationStatement[22353-22375]"
    }, {
      "left" : "String prefix;",
      "right" : "String prefix;",
      "info" : "VariableDeclarationStatement[22382-22396]:VariableDeclarationStatement[22382-22396]"
    }, {
      "left" : "if (name.endsWith(\".prototype\"))",
      "right" : "if (name.endsWith(\".prototype\"))",
      "info" : "IfStatement[22403-22864]:IfStatement[22403-22864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22436-22532]:Block[22436-22532]"
    }, {
      "left" : "numLevelsToRemove = 1;",
      "right" : "numLevelsToRemove = 1;",
      "info" : "ExpressionStatement[22446-22468]:ExpressionStatement[22446-22468]"
    }, {
      "left" : "prefix = name.substring(0, name.length() - 10);",
      "right" : "prefix = name.substring(0, name.length() - 10);",
      "info" : "ExpressionStatement[22477-22524]:ExpressionStatement[22477-22524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22538-22864]:Block[22538-22864]"
    }, {
      "left" : "int i = name.indexOf(\".prototype.\");",
      "right" : "int i = name.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[22548-22584]:VariableDeclarationStatement[22548-22584]"
    }, {
      "left" : "if (i == -1)",
      "right" : "if (i == -1)",
      "info" : "IfStatement[22593-22641]:IfStatement[22593-22641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22606-22641]:Block[22606-22641]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22618-22631]:ReturnStatement[22618-22631]"
    }, {
      "left" : "prefix = name.substring(0, i);",
      "right" : "prefix = name.substring(0, i);",
      "info" : "ExpressionStatement[22650-22680]:ExpressionStatement[22650-22680]"
    }, {
      "left" : "numLevelsToRemove = 2;",
      "right" : "numLevelsToRemove = 2;",
      "info" : "ExpressionStatement[22689-22711]:ExpressionStatement[22689-22711]"
    }, {
      "left" : "i = name.indexOf('.', i + 11);",
      "right" : "i = name.indexOf('.', i + 11);",
      "info" : "ExpressionStatement[22720-22750]:ExpressionStatement[22720-22750]"
    }, {
      "left" : "while (i >= 0)",
      "right" : "while (i >= 0)",
      "info" : "WhileStatement[22759-22856]:WhileStatement[22759-22856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22774-22856]:Block[22774-22856]"
    }, {
      "left" : "numLevelsToRemove++;",
      "right" : "numLevelsToRemove++;",
      "info" : "ExpressionStatement[22786-22806]:ExpressionStatement[22786-22806]"
    }, {
      "left" : "i = name.indexOf('.', i + 1);",
      "right" : "i = name.indexOf('.', i + 1);",
      "info" : "ExpressionStatement[22817-22846]:ExpressionStatement[22817-22846]"
    }, {
      "left" : "if (parent != null && NodeUtil.isObjectLitKey(n, parent))",
      "right" : "if (parent != null && NodeUtil.isObjectLitKey(n, parent))",
      "info" : "IfStatement[22872-23068]:IfStatement[22872-23068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22930-23068]:Block[22930-23068]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23048-23060]:ReturnStatement[23048-23060]"
    }, {
      "left" : "for (int i = 0; i < numLevelsToRemove; i++)",
      "right" : "for (int i = 0; i < numLevelsToRemove; i++)",
      "info" : "ForStatement[23076-23180]:ForStatement[23076-23180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23120-23180]:Block[23120-23180]"
    }, {
      "left" : "parent = n;",
      "right" : "parent = n;",
      "info" : "ExpressionStatement[23130-23141]:ExpressionStatement[23130-23141]"
    }, {
      "left" : "n = n.getFirstChild();",
      "right" : "n = n.getFirstChild();",
      "info" : "ExpressionStatement[23150-23172]:ExpressionStatement[23150-23172]"
    }, {
      "left" : "handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);",
      "right" : "handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);",
      "info" : "ExpressionStatement[23188-23244]:ExpressionStatement[23188-23244]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23251-23263]:ReturnStatement[23251-23263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23598-23715]:Block[23598-23715]"
    }, {
      "left" : "return parent.getType() == Token.ASSIGN &&\n             !NodeUtil.isExpressionNode(parent.getParent());",
      "right" : "return parent.getType() == Token.ASSIGN &&\n             !NodeUtil.isExpressionNode(parent.getParent());",
      "info" : "ReturnStatement[23606-23709]:ReturnStatement[23606-23709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24049-24526]:Block[24049-24526]"
    }, {
      "left" : "Name node = nameMap.get(name);",
      "right" : "Name node = nameMap.get(name);",
      "info" : "VariableDeclarationStatement[24057-24087]:VariableDeclarationStatement[24057-24087]"
    }, {
      "left" : "if (node == null)",
      "right" : "if (node == null)",
      "info" : "IfStatement[24094-24501]:IfStatement[24094-24501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24112-24501]:Block[24112-24501]"
    }, {
      "left" : "int i = name.lastIndexOf('.');",
      "right" : "int i = name.lastIndexOf('.');",
      "info" : "VariableDeclarationStatement[24122-24152]:VariableDeclarationStatement[24122-24152]"
    }, {
      "left" : "if (i >= 0)",
      "right" : "if (i >= 0)",
      "info" : "IfStatement[24161-24460]:IfStatement[24161-24460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24173-24360]:Block[24173-24360]"
    }, {
      "left" : "String parentName = name.substring(0, i);",
      "right" : "String parentName = name.substring(0, i);",
      "info" : "VariableDeclarationStatement[24185-24226]:VariableDeclarationStatement[24185-24226]"
    }, {
      "left" : "Name parent = getOrCreateName(parentName);",
      "right" : "Name parent = getOrCreateName(parentName);",
      "info" : "VariableDeclarationStatement[24237-24279]:VariableDeclarationStatement[24237-24279]"
    }, {
      "left" : "node = parent.addProperty(name.substring(i + 1), inExterns);",
      "right" : "node = parent.addProperty(name.substring(i + 1), inExterns);",
      "info" : "ExpressionStatement[24290-24350]:ExpressionStatement[24290-24350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24366-24460]:Block[24366-24460]"
    }, {
      "left" : "node = new Name(name, null, inExterns);",
      "right" : "node = new Name(name, null, inExterns);",
      "info" : "ExpressionStatement[24378-24417]:ExpressionStatement[24378-24417]"
    }, {
      "left" : "globalNames.add(node);",
      "right" : "globalNames.add(node);",
      "info" : "ExpressionStatement[24428-24450]:ExpressionStatement[24428-24450]"
    }, {
      "left" : "nameMap.put(name, node);",
      "right" : "nameMap.put(name, node);",
      "info" : "ExpressionStatement[24469-24493]:ExpressionStatement[24469-24493]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24508-24520]:ReturnStatement[24508-24520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25408-25531]:Block[25408-25531]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[25416-25433]:ExpressionStatement[25416-25433]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[25440-25461]:ExpressionStatement[25440-25461]"
    }, {
      "left" : "this.type = Type.OTHER;",
      "right" : "this.type = Type.OTHER;",
      "info" : "ExpressionStatement[25468-25491]:ExpressionStatement[25468-25491]"
    }, {
      "left" : "this.inExterns = inExterns;",
      "right" : "this.inExterns = inExterns;",
      "info" : "ExpressionStatement[25498-25525]:ExpressionStatement[25498-25525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25586-25760]:Block[25586-25760]"
    }, {
      "left" : "if (props == null)",
      "right" : "if (props == null)",
      "info" : "IfStatement[25594-25661]:IfStatement[25594-25661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25613-25661]:Block[25613-25661]"
    }, {
      "left" : "props = new ArrayList<Name>();",
      "right" : "props = new ArrayList<Name>();",
      "info" : "ExpressionStatement[25623-25653]:ExpressionStatement[25623-25653]"
    }, {
      "left" : "Name node = new Name(name, this, inExterns);",
      "right" : "Name node = new Name(name, this, inExterns);",
      "info" : "VariableDeclarationStatement[25668-25712]:VariableDeclarationStatement[25668-25712]"
    }, {
      "left" : "props.add(node);",
      "right" : "props.add(node);",
      "info" : "ExpressionStatement[25719-25735]:ExpressionStatement[25719-25735]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25742-25754]:ReturnStatement[25742-25754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25787-26610]:Block[25787-26610]"
    }, {
      "left" : "switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          } else {\n            addRefInternal(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          addRefInternal(ref);\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          addRefInternal(ref);\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          addRefInternal(ref);\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          addRefInternal(ref);\n          callGets++;\n          totalGets++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }",
      "right" : "switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          } else {\n            addRefInternal(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          addRefInternal(ref);\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          addRefInternal(ref);\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          addRefInternal(ref);\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          addRefInternal(ref);\n          callGets++;\n          totalGets++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }",
      "info" : "SwitchStatement[25795-26604]:SwitchStatement[25795-26604]"
    }, {
      "left" : "case SET_FROM_GLOBAL:",
      "right" : "case SET_FROM_GLOBAL:",
      "info" : "SwitchCase[25823-25844]:SwitchCase[25823-25844]"
    }, {
      "left" : "if (declaration == null)",
      "right" : "if (declaration == null)",
      "info" : "IfStatement[25855-26029]:IfStatement[25855-26029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25880-25977]:Block[25880-25977]"
    }, {
      "left" : "declaration = ref;",
      "right" : "declaration = ref;",
      "info" : "ExpressionStatement[25894-25912]:ExpressionStatement[25894-25912]"
    }, {
      "left" : "docInfo = getDocInfoForDeclaration(ref);",
      "right" : "docInfo = getDocInfoForDeclaration(ref);",
      "info" : "ExpressionStatement[25925-25965]:ExpressionStatement[25925-25965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25983-26029]:Block[25983-26029]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[25997-26017]:ExpressionStatement[25997-26017]"
    }, {
      "left" : "globalSets++;",
      "right" : "globalSets++;",
      "info" : "ExpressionStatement[26040-26053]:ExpressionStatement[26040-26053]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26064-26070]:BreakStatement[26064-26070]"
    }, {
      "left" : "case SET_FROM_LOCAL:",
      "right" : "case SET_FROM_LOCAL:",
      "info" : "SwitchCase[26079-26099]:SwitchCase[26079-26099]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26110-26130]:ExpressionStatement[26110-26130]"
    }, {
      "left" : "localSets++;",
      "right" : "localSets++;",
      "info" : "ExpressionStatement[26141-26153]:ExpressionStatement[26141-26153]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26164-26170]:BreakStatement[26164-26170]"
    }, {
      "left" : "case PROTOTYPE_GET:",
      "right" : "case PROTOTYPE_GET:",
      "info" : "SwitchCase[26179-26198]:SwitchCase[26179-26198]"
    }, {
      "left" : "case DIRECT_GET:",
      "right" : "case DIRECT_GET:",
      "info" : "SwitchCase[26207-26223]:SwitchCase[26207-26223]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26234-26254]:ExpressionStatement[26234-26254]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[26265-26277]:ExpressionStatement[26265-26277]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26288-26294]:BreakStatement[26288-26294]"
    }, {
      "left" : "case ALIASING_GET:",
      "right" : "case ALIASING_GET:",
      "info" : "SwitchCase[26303-26321]:SwitchCase[26303-26321]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26332-26352]:ExpressionStatement[26332-26352]"
    }, {
      "left" : "aliasingGets++;",
      "right" : "aliasingGets++;",
      "info" : "ExpressionStatement[26363-26378]:ExpressionStatement[26363-26378]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[26389-26401]:ExpressionStatement[26389-26401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26412-26418]:BreakStatement[26412-26418]"
    }, {
      "left" : "case CALL_GET:",
      "right" : "case CALL_GET:",
      "info" : "SwitchCase[26427-26441]:SwitchCase[26427-26441]"
    }, {
      "left" : "addRefInternal(ref);",
      "right" : "addRefInternal(ref);",
      "info" : "ExpressionStatement[26452-26472]:ExpressionStatement[26452-26472]"
    }, {
      "left" : "callGets++;",
      "right" : "callGets++;",
      "info" : "ExpressionStatement[26483-26494]:ExpressionStatement[26483-26494]"
    }, {
      "left" : "totalGets++;",
      "right" : "totalGets++;",
      "info" : "ExpressionStatement[26505-26517]:ExpressionStatement[26505-26517]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26528-26534]:BreakStatement[26528-26534]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26543-26551]:SwitchCase[26543-26551]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[26562-26596]:ThrowStatement[26562-26596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26640-27653]:Block[26640-27653]"
    }, {
      "left" : "if (ref == declaration ||\n          (refs != null && refs.remove(ref)))",
      "right" : "if (ref == declaration ||\n          (refs != null && refs.remove(ref)))",
      "info" : "IfStatement[26648-27647]:IfStatement[26648-27647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26720-27647]:Block[26720-27647]"
    }, {
      "left" : "if (ref == declaration)",
      "right" : "if (ref == declaration)",
      "info" : "IfStatement[26730-27087]:IfStatement[26730-27087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26754-27087]:Block[26754-27087]"
    }, {
      "left" : "declaration = null;",
      "right" : "declaration = null;",
      "info" : "ExpressionStatement[26766-26785]:ExpressionStatement[26766-26785]"
    }, {
      "left" : "if (refs != null)",
      "right" : "if (refs != null)",
      "info" : "IfStatement[26796-27077]:IfStatement[26796-27077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26814-27077]:Block[26814-27077]"
    }, {
      "left" : "for (Ref maybeNewDecl : refs)",
      "right" : "for (Ref maybeNewDecl : refs)",
      "info" : "EnhancedForStatement[26828-27065]:EnhancedForStatement[26828-27065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26858-27065]:Block[26858-27065]"
    }, {
      "left" : "if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL)",
      "right" : "if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL)",
      "info" : "IfStatement[26874-27051]:IfStatement[26874-27051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26925-27051]:Block[26925-27051]"
    }, {
      "left" : "declaration = maybeNewDecl;",
      "right" : "declaration = maybeNewDecl;",
      "info" : "ExpressionStatement[26943-26970]:ExpressionStatement[26943-26970]"
    }, {
      "left" : "refs.remove(declaration);",
      "right" : "refs.remove(declaration);",
      "info" : "ExpressionStatement[26987-27012]:ExpressionStatement[26987-27012]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27029-27035]:BreakStatement[27029-27035]"
    }, {
      "left" : "switch (ref.type) {\n          case SET_FROM_GLOBAL:\n            globalSets--;\n            break;\n          case SET_FROM_LOCAL:\n            localSets--;\n            break;\n          case PROTOTYPE_GET:\n          case DIRECT_GET:\n            totalGets--;\n            break;\n          case ALIASING_GET:\n            aliasingGets--;\n            totalGets--;\n            break;\n          case CALL_GET:\n            callGets--;\n            totalGets--;\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (ref.type) {\n          case SET_FROM_GLOBAL:\n            globalSets--;\n            break;\n          case SET_FROM_LOCAL:\n            localSets--;\n            break;\n          case PROTOTYPE_GET:\n          case DIRECT_GET:\n            totalGets--;\n            break;\n          case ALIASING_GET:\n            aliasingGets--;\n            totalGets--;\n            break;\n          case CALL_GET:\n            callGets--;\n            totalGets--;\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[27097-27639]:SwitchStatement[27097-27639]"
    }, {
      "left" : "case SET_FROM_GLOBAL:",
      "right" : "case SET_FROM_GLOBAL:",
      "info" : "SwitchCase[27127-27148]:SwitchCase[27127-27148]"
    }, {
      "left" : "globalSets--;",
      "right" : "globalSets--;",
      "info" : "ExpressionStatement[27161-27174]:ExpressionStatement[27161-27174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27187-27193]:BreakStatement[27187-27193]"
    }, {
      "left" : "case SET_FROM_LOCAL:",
      "right" : "case SET_FROM_LOCAL:",
      "info" : "SwitchCase[27204-27224]:SwitchCase[27204-27224]"
    }, {
      "left" : "localSets--;",
      "right" : "localSets--;",
      "info" : "ExpressionStatement[27237-27249]:ExpressionStatement[27237-27249]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27262-27268]:BreakStatement[27262-27268]"
    }, {
      "left" : "case PROTOTYPE_GET:",
      "right" : "case PROTOTYPE_GET:",
      "info" : "SwitchCase[27279-27298]:SwitchCase[27279-27298]"
    }, {
      "left" : "case DIRECT_GET:",
      "right" : "case DIRECT_GET:",
      "info" : "SwitchCase[27309-27325]:SwitchCase[27309-27325]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[27338-27350]:ExpressionStatement[27338-27350]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27363-27369]:BreakStatement[27363-27369]"
    }, {
      "left" : "case ALIASING_GET:",
      "right" : "case ALIASING_GET:",
      "info" : "SwitchCase[27380-27398]:SwitchCase[27380-27398]"
    }, {
      "left" : "aliasingGets--;",
      "right" : "aliasingGets--;",
      "info" : "ExpressionStatement[27411-27426]:ExpressionStatement[27411-27426]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[27439-27451]:ExpressionStatement[27439-27451]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27464-27470]:BreakStatement[27464-27470]"
    }, {
      "left" : "case CALL_GET:",
      "right" : "case CALL_GET:",
      "info" : "SwitchCase[27481-27495]:SwitchCase[27481-27495]"
    }, {
      "left" : "callGets--;",
      "right" : "callGets--;",
      "info" : "ExpressionStatement[27508-27519]:ExpressionStatement[27508-27519]"
    }, {
      "left" : "totalGets--;",
      "right" : "totalGets--;",
      "info" : "ExpressionStatement[27532-27544]:ExpressionStatement[27532-27544]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27557-27563]:BreakStatement[27557-27563]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27574-27582]:SwitchCase[27574-27582]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[27595-27629]:ThrowStatement[27595-27629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27688-27788]:Block[27688-27788]"
    }, {
      "left" : "if (refs == null)",
      "right" : "if (refs == null)",
      "info" : "IfStatement[27696-27761]:IfStatement[27696-27761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27714-27761]:Block[27714-27761]"
    }, {
      "left" : "refs = new LinkedList<Ref>();",
      "right" : "refs = new LinkedList<Ref>();",
      "info" : "ExpressionStatement[27724-27753]:ExpressionStatement[27724-27753]"
    }, {
      "left" : "refs.add(ref);",
      "right" : "refs.add(ref);",
      "info" : "ExpressionStatement[27768-27782]:ExpressionStatement[27768-27782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27817-28088]:Block[27817-28088]"
    }, {
      "left" : "if (!canCollapseUnannotatedChildNames() || totalGets > 0)",
      "right" : "if (!canCollapseUnannotatedChildNames() || totalGets > 0)",
      "info" : "IfStatement[27825-27914]:IfStatement[27825-27914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27883-27914]:Block[27883-27914]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27893-27906]:ReturnStatement[27893-27906]"
    }, {
      "left" : "if (props != null)",
      "right" : "if (props != null)",
      "info" : "IfStatement[27922-28063]:IfStatement[27922-28063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27941-28063]:Block[27941-28063]"
    }, {
      "left" : "for (Name n : props)",
      "right" : "for (Name n : props)",
      "info" : "EnhancedForStatement[27951-28055]:EnhancedForStatement[27951-28055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27972-28055]:Block[27972-28055]"
    }, {
      "left" : "if (!n.canCollapse())",
      "right" : "if (!n.canCollapse())",
      "info" : "IfStatement[27984-28045]:IfStatement[27984-28045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28006-28045]:Block[28006-28045]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28020-28033]:ReturnStatement[28020-28033]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28070-28082]:ReturnStatement[28070-28082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28116-28289]:Block[28116-28289]"
    }, {
      "left" : "return !inExterns && (isClassOrEnum ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0));",
      "right" : "return !inExterns && (isClassOrEnum ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0));",
      "info" : "ReturnStatement[28124-28283]:ReturnStatement[28124-28283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28338-29286]:Block[28338-29261]"
    }, {
      "left" : "if (type == Type.OTHER || globalSets != 1 || localSets != 0)",
      "right" : "if (type == Type.OTHER || globalSets != 1 || localSets != 0)",
      "info" : "IfStatement[28346-28438]:IfStatement[28346-28438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28407-28438]:Block[28407-28438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28417-28430]:ReturnStatement[28417-28430]"
    }, {
      "left" : "Preconditions.checkNotNull(declaration);",
      "right" : "Preconditions.checkNotNull(declaration);",
      "info" : "ExpressionStatement[28641-28681]:ExpressionStatement[28641-28681]"
    }, {
      "left" : "if (declaration.getTwin() != null)",
      "right" : "if (declaration.getTwin() != null)",
      "info" : "IfStatement[28688-28754]:IfStatement[28688-28754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28723-28754]:Block[28723-28754]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28733-28746]:ReturnStatement[28733-28746]"
    }, {
      "left" : "if (isClassOrEnum)",
      "right" : "if (isClassOrEnum)",
      "info" : "IfStatement[28762-28811]:IfStatement[28762-28811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28781-28811]:Block[28781-28811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28791-28803]:ReturnStatement[28791-28803]"
    }, {
      "left" : "if (parent != null && parent.shouldKeepKeys())",
      "right" : "if (parent != null && parent.shouldKeepKeys())",
      "info" : "IfStatement[28963-29041]:IfStatement[28963-29041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29010-29041]:Block[29010-29041]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29020-29033]:ReturnStatement[29020-29033]"
    }, {
      "left" : "if (type != Type.FUNCTION && aliasingGets > 0)",
      "right" : "if (aliasingGets > 0)",
      "info" : "IfStatement[29125-29203]:IfStatement[29125-29178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29172-29203]:Block[29147-29178]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29182-29195]:ReturnStatement[29157-29170]"
    }, {
      "left" : "return (parent == null || parent.canCollapseUnannotatedChildNames());",
      "right" : "return (parent == null || parent.canCollapseUnannotatedChildNames());",
      "info" : "ReturnStatement[29211-29280]:ReturnStatement[29186-29255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29391-29455]:Block[29366-29430]"
    }, {
      "left" : "return type == Type.OBJECTLIT && aliasingGets > 0;",
      "right" : "return type == Type.OBJECTLIT && aliasingGets > 0;",
      "info" : "ReturnStatement[29399-29449]:ReturnStatement[29374-29424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29488-29542]:Block[29463-29517]"
    }, {
      "left" : "return globalSets == 0 && localSets > 0;",
      "right" : "return globalSets == 0 && localSets > 0;",
      "info" : "ReturnStatement[29496-29536]:ReturnStatement[29471-29511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29572-29759]:Block[29547-29734]"
    }, {
      "left" : "isClassOrEnum = true;",
      "right" : "isClassOrEnum = true;",
      "info" : "ExpressionStatement[29580-29601]:ExpressionStatement[29555-29576]"
    }, {
      "left" : "for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent)",
      "right" : "for (Name ancestor = parent; ancestor != null;\n           ancestor = ancestor.parent)",
      "info" : "ForStatement[29608-29753]:ForStatement[29583-29728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29694-29753]:Block[29669-29728]"
    }, {
      "left" : "ancestor.hasClassOrEnumDescendant = true;",
      "right" : "ancestor.hasClassOrEnumDescendant = true;",
      "info" : "ExpressionStatement[29704-29745]:ExpressionStatement[29679-29720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30151-30223]:Block[30126-30198]"
    }, {
      "left" : "return hasClassOrEnumDescendant && type == Type.OBJECTLIT;",
      "right" : "return hasClassOrEnumDescendant && type == Type.OBJECTLIT;",
      "info" : "ReturnStatement[30159-30217]:ReturnStatement[30134-30192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30357-30393]:Block[30332-30368]"
    }, {
      "left" : "return parent == null;",
      "right" : "return parent == null;",
      "info" : "ReturnStatement[30365-30387]:ReturnStatement[30340-30362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30434-30652]:Block[30409-30627]"
    }, {
      "left" : "return fullName() + \" (\" + type + \"): globalSets=\" + globalSets +\n          \", localSets=\" + localSets + \", totalGets=\" + totalGets +\n          \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets;",
      "right" : "return fullName() + \" (\" + type + \"): globalSets=\" + globalSets +\n          \", localSets=\" + localSets + \", totalGets=\" + totalGets +\n          \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets;",
      "info" : "ReturnStatement[30442-30646]:ReturnStatement[30417-30621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30676-30752]:Block[30651-30727]"
    }, {
      "left" : "return parent == null ? name : parent.fullName() + '.' + name;",
      "right" : "return parent == null ? name : parent.fullName() + '.' + name;",
      "info" : "ReturnStatement[30684-30746]:ReturnStatement[30659-30721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30895-31314]:Block[30870-31289]"
    }, {
      "left" : "if (ref.node != null)",
      "right" : "if (ref.node != null)",
      "info" : "IfStatement[30903-31288]:IfStatement[30878-31263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30925-31288]:Block[30900-31263]"
    }, {
      "left" : "Node refParent = ref.node.getParent();",
      "right" : "Node refParent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[30935-30973]:VariableDeclarationStatement[30910-30948]"
    }, {
      "left" : "switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }",
      "right" : "switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }",
      "info" : "SwitchStatement[30982-31280]:SwitchStatement[30957-31255]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[31023-31043]:SwitchCase[30998-31018]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[31054-31072]:SwitchCase[31029-31047]"
    }, {
      "left" : "return refParent.getJSDocInfo();",
      "right" : "return refParent.getJSDocInfo();",
      "info" : "ReturnStatement[31085-31117]:ReturnStatement[31060-31092]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[31128-31143]:SwitchCase[31103-31118]"
    }, {
      "left" : "return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();",
      "right" : "return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();",
      "info" : "ReturnStatement[31156-31270]:ReturnStatement[31131-31245]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31296-31308]:ReturnStatement[31271-31283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32390-32556]:Block[32365-32531]"
    }, {
      "left" : "this.node = name;",
      "right" : "this.node = name;",
      "info" : "ExpressionStatement[32398-32415]:ExpressionStatement[32373-32390]"
    }, {
      "left" : "this.sourceName = t.getSourceName();",
      "right" : "this.sourceName = t.getSourceName();",
      "info" : "ExpressionStatement[32422-32458]:ExpressionStatement[32397-32433]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[32465-32482]:ExpressionStatement[32440-32457]"
    }, {
      "left" : "this.scope = t.getScope();",
      "right" : "this.scope = t.getScope();",
      "info" : "ExpressionStatement[32489-32515]:ExpressionStatement[32464-32490]"
    }, {
      "left" : "this.module = t.getModule();",
      "right" : "this.module = t.getModule();",
      "info" : "ExpressionStatement[32522-32550]:ExpressionStatement[32497-32525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32599-32780]:Block[32574-32755]"
    }, {
      "left" : "this.node = original.node;",
      "right" : "this.node = original.node;",
      "info" : "ExpressionStatement[32607-32633]:ExpressionStatement[32582-32608]"
    }, {
      "left" : "this.sourceName = original.sourceName;",
      "right" : "this.sourceName = original.sourceName;",
      "info" : "ExpressionStatement[32640-32678]:ExpressionStatement[32615-32653]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[32685-32702]:ExpressionStatement[32660-32677]"
    }, {
      "left" : "this.scope = original.scope;",
      "right" : "this.scope = original.scope;",
      "info" : "ExpressionStatement[32709-32737]:ExpressionStatement[32684-32712]"
    }, {
      "left" : "this.module = original.module;",
      "right" : "this.module = original.module;",
      "info" : "ExpressionStatement[32744-32774]:ExpressionStatement[32719-32749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32809-32925]:Block[32784-32900]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[32817-32834]:ExpressionStatement[32792-32809]"
    }, {
      "left" : "this.sourceName = \"source\";",
      "right" : "this.sourceName = \"source\";",
      "info" : "ExpressionStatement[32841-32868]:ExpressionStatement[32816-32843]"
    }, {
      "left" : "this.scope = null;",
      "right" : "this.scope = null;",
      "info" : "ExpressionStatement[32875-32893]:ExpressionStatement[32850-32868]"
    }, {
      "left" : "this.module = null;",
      "right" : "this.module = null;",
      "info" : "ExpressionStatement[32900-32919]:ExpressionStatement[32875-32894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32945-32971]:Block[32920-32946]"
    }, {
      "left" : "return twin;",
      "right" : "return twin;",
      "info" : "ReturnStatement[32953-32965]:ReturnStatement[32928-32940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32993-33074]:Block[32968-33049]"
    }, {
      "left" : "return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;",
      "right" : "return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;",
      "info" : "ReturnStatement[33001-33068]:ReturnStatement[32976-33043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33116-33424]:Block[33091-33399]"
    }, {
      "left" : "Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));",
      "right" : "Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));",
      "info" : "ExpressionStatement[33124-33382]:ExpressionStatement[33099-33357]"
    }, {
      "left" : "a.twin = b;",
      "right" : "a.twin = b;",
      "info" : "ExpressionStatement[33389-33400]:ExpressionStatement[33364-33375]"
    }, {
      "left" : "b.twin = a;",
      "right" : "b.twin = a;",
      "info" : "ExpressionStatement[33407-33418]:ExpressionStatement[33382-33393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33567-33608]:Block[33542-33583]"
    }, {
      "left" : "return new Ref(this, type);",
      "right" : "return new Ref(this, type);",
      "info" : "ReturnStatement[33575-33602]:ReturnStatement[33550-33577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33656-33691]:Block[33631-33666]"
    }, {
      "left" : "return new Ref(type);",
      "right" : "return new Ref(type);",
      "info" : "ReturnStatement[33664-33685]:ReturnStatement[33639-33660]"
    } ]
  },
  "interFileMappings" : { }
}