{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RenameVars",
      "right" : "RenameVars",
      "info" : "TypeDeclaration[936-15142]:TypeDeclaration[936-15385]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1121-1161]:FieldDeclaration[1121-1161]"
    }, {
      "left" : "private final ArrayList<Node> globalNameNodes = new ArrayList<Node>();",
      "right" : "private final ArrayList<Node> globalNameNodes = new ArrayList<Node>();",
      "info" : "FieldDeclaration[1165-1270]:FieldDeclaration[1165-1270]"
    }, {
      "left" : "private final ArrayList<Node> localNameNodes = new ArrayList<Node>();",
      "right" : "private final ArrayList<Node> localNameNodes = new ArrayList<Node>();",
      "info" : "FieldDeclaration[1274-1377]:FieldDeclaration[1274-1377]"
    }, {
      "left" : "private final ArrayList<String> localTempNames = new ArrayList<String>();",
      "right" : "private final ArrayList<String> localTempNames = new ArrayList<String>();",
      "info" : "FieldDeclaration[1381-1522]:FieldDeclaration[1381-1522]"
    }, {
      "left" : "private final Set<String> externNames = new HashSet<String>();",
      "right" : "private final Set<String> externNames = new HashSet<String>();",
      "info" : "FieldDeclaration[1526-1626]:FieldDeclaration[1526-1626]"
    }, {
      "left" : "private final Set<String> reservedNames;",
      "right" : "private final Set<String> reservedNames;",
      "info" : "FieldDeclaration[1630-1710]:FieldDeclaration[1630-1710]"
    }, {
      "left" : "private final Map<String, String> renameMap = new HashMap<String, String>();",
      "right" : "private final Map<String, String> renameMap = new HashMap<String, String>();",
      "info" : "FieldDeclaration[1714-1816]:FieldDeclaration[1714-1816]"
    }, {
      "left" : "private final VariableMap prevUsedRenameMap;",
      "right" : "private final VariableMap prevUsedRenameMap;",
      "info" : "FieldDeclaration[1820-1905]:FieldDeclaration[1820-1905]"
    }, {
      "left" : "private final String prefix;",
      "right" : "private final String prefix;",
      "info" : "FieldDeclaration[1909-1969]:FieldDeclaration[1909-1969]"
    }, {
      "left" : "private int assignmentCount = 0;",
      "right" : "private int assignmentCount = 0;",
      "info" : "FieldDeclaration[1973-2042]:FieldDeclaration[1973-2042]"
    }, {
      "left" : "private StringBuilder assignmentLog;",
      "right" : "private StringBuilder assignmentLog;",
      "info" : "FieldDeclaration[2046-2117]:FieldDeclaration[2046-2117]"
    }, {
      "left" : "Assignment",
      "right" : "Assignment",
      "info" : "TypeDeclaration[2121-2787]:TypeDeclaration[2121-2787]"
    }, {
      "left" : "final CompilerInput input;",
      "right" : "final CompilerInput input;",
      "info" : "FieldDeclaration[2144-2170]:FieldDeclaration[2144-2170]"
    }, {
      "left" : "final String oldName;",
      "right" : "final String oldName;",
      "info" : "FieldDeclaration[2175-2196]:FieldDeclaration[2175-2196]"
    }, {
      "left" : "final int orderOfOccurrence;",
      "right" : "final int orderOfOccurrence;",
      "info" : "FieldDeclaration[2201-2229]:FieldDeclaration[2201-2229]"
    }, {
      "left" : "String newName;",
      "right" : "String newName;",
      "info" : "FieldDeclaration[2234-2249]:FieldDeclaration[2234-2249]"
    }, {
      "left" : "int count;",
      "right" : "int count;",
      "info" : "FieldDeclaration[2254-2264]:FieldDeclaration[2254-2264]"
    }, {
      "left" : "Assignment(String name, CompilerInput input)",
      "right" : "Assignment(String name, CompilerInput input)",
      "info" : "MethodDeclaration[2333-2609]:MethodDeclaration[2333-2609]"
    }, {
      "left" : "void setNewName(String newName)",
      "right" : "void setNewName(String newName)",
      "info" : "MethodDeclaration[2615-2783]:MethodDeclaration[2615-2783]"
    }, {
      "left" : "private final SortedMap<String, Assignment> assignments =\n      new TreeMap<String, Assignment>();",
      "right" : "private final SortedMap<String, Assignment> assignments =\n      new TreeMap<String, Assignment>();",
      "info" : "FieldDeclaration[2791-2940]:FieldDeclaration[2791-2940]"
    }, {
      "left" : "private final boolean localRenamingOnly;",
      "right" : "private final boolean localRenamingOnly;",
      "info" : "FieldDeclaration[2944-3048]:FieldDeclaration[2944-3048]"
    }, {
      "left" : "private boolean preserveAnonymousFunctionNames;",
      "right" : "private boolean preserveAnonymousFunctionNames;",
      "info" : "FieldDeclaration[3052-3243]:FieldDeclaration[3052-3243]"
    }, {
      "left" : "private boolean generatePseudoNames;",
      "right" : "private boolean generatePseudoNames;",
      "info" : "FieldDeclaration[3247-3351]:FieldDeclaration[3247-3351]"
    }, {
      "left" : "private final char[] reservedCharacters;",
      "right" : "private final char[] reservedCharacters;",
      "info" : "FieldDeclaration[3355-3457]:FieldDeclaration[3355-3457]"
    }, {
      "left" : "private static final String LOCAL_VAR_PREFIX = \"L \";",
      "right" : "private static final String LOCAL_VAR_PREFIX = \"L \";",
      "info" : "FieldDeclaration[3461-3586]:FieldDeclaration[3461-3586]"
    }, {
      "left" : "RenameVars(AbstractCompiler compiler,\n      String prefix,\n      boolean localRenamingOnly,\n      boolean preserveAnonymousFunctionNames,\n      boolean generatePseudoNames,\n      VariableMap prevUsedRenameMap,\n      @Nullable char[] reservedCharacters,\n      @Nullable Set<String> reservedNames)",
      "right" : "RenameVars(AbstractCompiler compiler,\n      String prefix,\n      boolean localRenamingOnly,\n      boolean preserveAnonymousFunctionNames,\n      boolean generatePseudoNames,\n      VariableMap prevUsedRenameMap,\n      @Nullable char[] reservedCharacters,\n      @Nullable Set<String> reservedNames)",
      "info" : "MethodDeclaration[3590-4398]:MethodDeclaration[3590-4398]"
    }, {
      "left" : "ProcessVars",
      "right" : "ProcessVars",
      "info" : "TypeDeclaration[4402-7265]:TypeDeclaration[4402-7508]"
    }, {
      "left" : "private final boolean isExternsPass_;",
      "right" : "private final boolean isExternsPass_;",
      "info" : "FieldDeclaration[5338-5375]:FieldDeclaration[5338-5375]"
    }, {
      "left" : "ProcessVars(boolean isExterns)",
      "right" : "ProcessVars(boolean isExterns)",
      "info" : "MethodDeclaration[5381-5453]:MethodDeclaration[5381-5453]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[5459-6993]:MethodDeclaration[5459-7236]"
    }, {
      "left" : "void incCount(String name, CompilerInput input)",
      "right" : "void incCount(String name, CompilerInput input)",
      "info" : "MethodDeclaration[7039-7261]:MethodDeclaration[7282-7504]"
    }, {
      "left" : "private static final Comparator<Assignment> FREQUENCY_COMPARATOR =\n    new Comparator<Assignment>() {\n      public int compare(Assignment a1, Assignment a2) {\n        if (a1.count != a2.count) {\n          return a2.count - a1.count;\n        }\n        // Break a tie using the order in which the variable first appears in\n        // the source.\n        return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);\n      }\n    };",
      "right" : "private static final Comparator<Assignment> FREQUENCY_COMPARATOR =\n    new Comparator<Assignment>() {\n      public int compare(Assignment a1, Assignment a2) {\n        if (a1.count != a2.count) {\n          return a2.count - a1.count;\n        }\n        // Break a tie using the order in which the variable first appears in\n        // the source.\n        return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);\n      }\n    };",
      "info" : "FieldDeclaration[7269-7857]:FieldDeclaration[7512-8100]"
    }, {
      "left" : "public int compare(Assignment a1, Assignment a2)",
      "right" : "public int compare(Assignment a1, Assignment a2)",
      "info" : "MethodDeclaration[7544-7850]:MethodDeclaration[7787-8093]"
    }, {
      "left" : "private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR =\n    new Comparator<Assignment>() {\n      public int compare(Assignment a1, Assignment a2) {\n        return a1.orderOfOccurrence - a2.orderOfOccurrence;\n      }\n    };",
      "right" : "private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR =\n    new Comparator<Assignment>() {\n      public int compare(Assignment a1, Assignment a2) {\n        return a1.orderOfOccurrence - a2.orderOfOccurrence;\n      }\n    };",
      "info" : "FieldDeclaration[7861-8211]:FieldDeclaration[8104-8454]"
    }, {
      "left" : "public int compare(Assignment a1, Assignment a2)",
      "right" : "public int compare(Assignment a1, Assignment a2)",
      "info" : "MethodDeclaration[8086-8204]:MethodDeclaration[8329-8447]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[8215-9861]:MethodDeclaration[8458-10104]"
    }, {
      "left" : "private String getNewGlobalName(Node n)",
      "right" : "private String getNewGlobalName(Node n)",
      "info" : "MethodDeclaration[9865-10192]:MethodDeclaration[10108-10435]"
    }, {
      "left" : "private String getNewLocalName(Node n, int index)",
      "right" : "private String getNewLocalName(Node n, int index)",
      "info" : "MethodDeclaration[10196-10527]:MethodDeclaration[10439-10770]"
    }, {
      "left" : "private String getPseudoName(String s)",
      "right" : "private String getPseudoName(String s)",
      "info" : "MethodDeclaration[10531-10746]:MethodDeclaration[10774-10989]"
    }, {
      "left" : "private void reusePreviouslyUsedVariableMap()",
      "right" : "private void reusePreviouslyUsedVariableMap()",
      "info" : "MethodDeclaration[10750-11460]:MethodDeclaration[10993-11703]"
    }, {
      "left" : "private void assignNames(Set<Assignment> varsToRename)",
      "right" : "private void assignNames(Set<Assignment> varsToRename)",
      "info" : "MethodDeclaration[11464-14476]:MethodDeclaration[11707-14719]"
    }, {
      "left" : "private void finalizeNameAssignment(Assignment a, String newName)",
      "right" : "private void finalizeNameAssignment(Assignment a, String newName)",
      "info" : "MethodDeclaration[14480-14813]:MethodDeclaration[14723-15056]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[14817-14930]:MethodDeclaration[15060-15173]"
    }, {
      "left" : "private boolean okToRenameVar(String name, boolean isLocal)",
      "right" : "private boolean okToRenameVar(String name, boolean isLocal)",
      "info" : "MethodDeclaration[14934-15140]:MethodDeclaration[15177-15383]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2378-2609]:Block[2378-2609]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[2386-2405]:ExpressionStatement[2386-2405]"
    }, {
      "left" : "this.oldName = name;",
      "right" : "this.oldName = name;",
      "info" : "ExpressionStatement[2412-2432]:ExpressionStatement[2412-2432]"
    }, {
      "left" : "this.newName = null;",
      "right" : "this.newName = null;",
      "info" : "ExpressionStatement[2439-2459]:ExpressionStatement[2439-2459]"
    }, {
      "left" : "this.count = 0;",
      "right" : "this.count = 0;",
      "info" : "ExpressionStatement[2466-2481]:ExpressionStatement[2466-2481]"
    }, {
      "left" : "this.orderOfOccurrence = assignmentCount++;",
      "right" : "this.orderOfOccurrence = assignmentCount++;",
      "info" : "ExpressionStatement[2560-2603]:ExpressionStatement[2560-2603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2692-2783]:Block[2692-2783]"
    }, {
      "left" : "Preconditions.checkState(this.newName == null);",
      "right" : "Preconditions.checkState(this.newName == null);",
      "info" : "ExpressionStatement[2700-2747]:ExpressionStatement[2700-2747]"
    }, {
      "left" : "this.newName = newName;",
      "right" : "this.newName = newName;",
      "info" : "ExpressionStatement[2754-2777]:ExpressionStatement[2754-2777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3886-4398]:Block[3886-4398]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3892-3917]:ExpressionStatement[3892-3917]"
    }, {
      "left" : "this.prefix = prefix == null ? \"\" : prefix;",
      "right" : "this.prefix = prefix == null ? \"\" : prefix;",
      "info" : "ExpressionStatement[3922-3965]:ExpressionStatement[3922-3965]"
    }, {
      "left" : "this.localRenamingOnly = localRenamingOnly;",
      "right" : "this.localRenamingOnly = localRenamingOnly;",
      "info" : "ExpressionStatement[3970-4013]:ExpressionStatement[3970-4013]"
    }, {
      "left" : "this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;",
      "right" : "this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;",
      "info" : "ExpressionStatement[4018-4087]:ExpressionStatement[4018-4087]"
    }, {
      "left" : "this.generatePseudoNames = generatePseudoNames;",
      "right" : "this.generatePseudoNames = generatePseudoNames;",
      "info" : "ExpressionStatement[4092-4139]:ExpressionStatement[4092-4139]"
    }, {
      "left" : "this.prevUsedRenameMap = prevUsedRenameMap;",
      "right" : "this.prevUsedRenameMap = prevUsedRenameMap;",
      "info" : "ExpressionStatement[4144-4187]:ExpressionStatement[4144-4187]"
    }, {
      "left" : "this.reservedCharacters = reservedCharacters;",
      "right" : "this.reservedCharacters = reservedCharacters;",
      "info" : "ExpressionStatement[4192-4237]:ExpressionStatement[4192-4237]"
    }, {
      "left" : "if (reservedNames == null)",
      "right" : "if (reservedNames == null)",
      "info" : "IfStatement[4242-4394]:IfStatement[4242-4394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4269-4322]:Block[4269-4322]"
    }, {
      "left" : "this.reservedNames = Sets.newHashSet();",
      "right" : "this.reservedNames = Sets.newHashSet();",
      "info" : "ExpressionStatement[4277-4316]:ExpressionStatement[4277-4316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4328-4394]:Block[4328-4394]"
    }, {
      "left" : "this.reservedNames = Sets.newHashSet(reservedNames);",
      "right" : "this.reservedNames = Sets.newHashSet(reservedNames);",
      "info" : "ExpressionStatement[4336-4388]:ExpressionStatement[4336-4388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5412-5453]:Block[5412-5453]"
    }, {
      "left" : "isExternsPass_ = isExterns;",
      "right" : "isExternsPass_ = isExterns;",
      "info" : "ExpressionStatement[5420-5447]:ExpressionStatement[5420-5447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5529-6993]:Block[5529-7236]"
    }, {
      "left" : "if (n.getType() != Token.NAME)",
      "right" : "if (n.getType() != Token.NAME)",
      "info" : "IfStatement[5537-5593]:IfStatement[5537-5593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5568-5593]:Block[5568-5593]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5578-5585]:ReturnStatement[5578-5585]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5601-5629]:VariableDeclarationStatement[5601-5629]"
    }, {
      "left" : "if (name.length() == 0)",
      "right" : "if (name.length() == 0)",
      "info" : "IfStatement[5673-5722]:IfStatement[5673-5722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5697-5722]:Block[5697-5722]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5707-5714]:ReturnStatement[5707-5714]"
    }, {
      "left" : "Scope.Var var = t.getScope().getVar(name);",
      "right" : "Scope.Var var = t.getScope().getVar(name);",
      "info" : "VariableDeclarationStatement[5764-5806]:VariableDeclarationStatement[5764-5806]"
    }, {
      "left" : "boolean local = (var != null) && var.isLocal();",
      "right" : "boolean local = (var != null) && var.isLocal();",
      "info" : "VariableDeclarationStatement[5813-5860]:VariableDeclarationStatement[5813-5860]"
    }, {
      "left" : "if (!local && localRenamingOnly)",
      "right" : "if (!local && localRenamingOnly)",
      "info" : "IfStatement[5911-6002]:IfStatement[5911-6002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5944-6002]:Block[5944-6002]"
    }, {
      "left" : "reservedNames.add(name);",
      "right" : "reservedNames.add(name);",
      "info" : "ExpressionStatement[5954-5978]:ExpressionStatement[5954-5978]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5987-5994]:ReturnStatement[5987-5994]"
    }, {
      "left" : "if (preserveAnonymousFunctionNames\n          && var != null\n          && NodeUtil.isAnonymousFunction(var.getParentNode()))",
      "right" : "if (preserveAnonymousFunctionNames\n          && var != null\n          && NodeUtil.isAnonymousFunction(var.getParentNode()))",
      "info" : "IfStatement[6061-6243]:IfStatement[6061-6243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6185-6243]:Block[6185-6243]"
    }, {
      "left" : "reservedNames.add(name);",
      "right" : "reservedNames.add(name);",
      "info" : "ExpressionStatement[6195-6219]:ExpressionStatement[6195-6219]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6228-6235]:ReturnStatement[6228-6235]"
    }, {
      "left" : "if (!okToRenameVar(name, local))",
      "right" : "if (!okToRenameVar(name, local))",
      "info" : "IfStatement[6289-6421]:IfStatement[6289-6664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6322-6421]:Block[6322-6664]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6406-6413]:ReturnStatement[6649-6656]"
    }, {
      "left" : "if (isExternsPass_)",
      "right" : "if (isExternsPass_)",
      "info" : "IfStatement[6429-6580]:IfStatement[6672-6823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6449-6580]:Block[6692-6823]"
    }, {
      "left" : "if (!local)",
      "right" : "if (!local)",
      "info" : "IfStatement[6500-6556]:IfStatement[6743-6799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6512-6556]:Block[6755-6799]"
    }, {
      "left" : "externNames.add(name);",
      "right" : "externNames.add(name);",
      "info" : "ExpressionStatement[6524-6546]:ExpressionStatement[6767-6789]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6565-6572]:ReturnStatement[6808-6815]"
    }, {
      "left" : "if (local)",
      "right" : "if (local)",
      "info" : "IfStatement[6588-6987]:IfStatement[6831-7230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6599-6820]:Block[6842-7063]"
    }, {
      "left" : "String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex();",
      "right" : "String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex();",
      "info" : "VariableDeclarationStatement[6649-6709]:VariableDeclarationStatement[6892-6952]"
    }, {
      "left" : "incCount(tempName, null);",
      "right" : "incCount(tempName, null);",
      "info" : "ExpressionStatement[6718-6743]:ExpressionStatement[6961-6986]"
    }, {
      "left" : "localNameNodes.add(n);",
      "right" : "localNameNodes.add(n);",
      "info" : "ExpressionStatement[6752-6774]:ExpressionStatement[6995-7017]"
    }, {
      "left" : "localTempNames.add(tempName);",
      "right" : "localTempNames.add(tempName);",
      "info" : "ExpressionStatement[6783-6812]:ExpressionStatement[7026-7055]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[6826-6987]:IfStatement[7069-7230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6843-6987]:Block[7086-7230]"
    }, {
      "left" : "incCount(name, var.input);",
      "right" : "incCount(name, var.input);",
      "info" : "ExpressionStatement[6921-6947]:ExpressionStatement[7164-7190]"
    }, {
      "left" : "globalNameNodes.add(n);",
      "right" : "globalNameNodes.add(n);",
      "info" : "ExpressionStatement[6956-6979]:ExpressionStatement[7199-7222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7087-7261]:Block[7330-7504]"
    }, {
      "left" : "Assignment s = assignments.get(name);",
      "right" : "Assignment s = assignments.get(name);",
      "info" : "VariableDeclarationStatement[7095-7132]:VariableDeclarationStatement[7338-7375]"
    }, {
      "left" : "if (s == null)",
      "right" : "if (s == null)",
      "info" : "IfStatement[7139-7238]:IfStatement[7382-7481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7154-7238]:Block[7397-7481]"
    }, {
      "left" : "s = new Assignment(name, input);",
      "right" : "s = new Assignment(name, input);",
      "info" : "ExpressionStatement[7164-7196]:ExpressionStatement[7407-7439]"
    }, {
      "left" : "assignments.put(name, s);",
      "right" : "assignments.put(name, s);",
      "info" : "ExpressionStatement[7205-7230]:ExpressionStatement[7448-7473]"
    }, {
      "left" : "s.count++;",
      "right" : "s.count++;",
      "info" : "ExpressionStatement[7245-7255]:ExpressionStatement[7488-7498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7593-7850]:Block[7836-8093]"
    }, {
      "left" : "if (a1.count != a2.count)",
      "right" : "if (a1.count != a2.count)",
      "info" : "IfStatement[7603-7678]:IfStatement[7846-7921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7629-7678]:Block[7872-7921]"
    }, {
      "left" : "return a2.count - a1.count;",
      "right" : "return a2.count - a1.count;",
      "info" : "ReturnStatement[7641-7668]:ReturnStatement[7884-7911]"
    }, {
      "left" : "return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);",
      "right" : "return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);",
      "info" : "ReturnStatement[7788-7842]:ReturnStatement[8031-8085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8135-8204]:Block[8378-8447]"
    }, {
      "left" : "return a1.orderOfOccurrence - a2.orderOfOccurrence;",
      "right" : "return a1.orderOfOccurrence - a2.orderOfOccurrence;",
      "info" : "ReturnStatement[8145-8196]:ReturnStatement[8388-8439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8291-9861]:Block[8534-10104]"
    }, {
      "left" : "assignmentLog = new StringBuilder();",
      "right" : "assignmentLog = new StringBuilder();",
      "info" : "ExpressionStatement[8297-8333]:ExpressionStatement[8540-8576]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externs, new ProcessVars(true));",
      "right" : "NodeTraversal.traverse(compiler, externs, new ProcessVars(true));",
      "info" : "ExpressionStatement[8378-8443]:ExpressionStatement[8621-8686]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new ProcessVars(false));",
      "right" : "NodeTraversal.traverse(compiler, root, new ProcessVars(false));",
      "info" : "ExpressionStatement[8448-8511]:ExpressionStatement[8691-8754]"
    }, {
      "left" : "reservedNames.addAll(externNames);",
      "right" : "reservedNames.addAll(externNames);",
      "info" : "ExpressionStatement[8582-8616]:ExpressionStatement[8825-8859]"
    }, {
      "left" : "SortedSet<Assignment> varsByFrequency =\n        new TreeSet<Assignment>(FREQUENCY_COMPARATOR);",
      "right" : "SortedSet<Assignment> varsByFrequency =\n        new TreeSet<Assignment>(FREQUENCY_COMPARATOR);",
      "info" : "VariableDeclarationStatement[8699-8793]:VariableDeclarationStatement[8942-9036]"
    }, {
      "left" : "varsByFrequency.addAll(assignments.values());",
      "right" : "varsByFrequency.addAll(assignments.values());",
      "info" : "ExpressionStatement[8798-8843]:ExpressionStatement[9041-9086]"
    }, {
      "left" : "if (prevUsedRenameMap != null)",
      "right" : "if (prevUsedRenameMap != null)",
      "info" : "IfStatement[8910-8988]:IfStatement[9153-9231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8941-8988]:Block[9184-9231]"
    }, {
      "left" : "reusePreviouslyUsedVariableMap();",
      "right" : "reusePreviouslyUsedVariableMap();",
      "info" : "ExpressionStatement[8949-8982]:ExpressionStatement[9192-9225]"
    }, {
      "left" : "assignNames(varsByFrequency);",
      "right" : "assignNames(varsByFrequency);",
      "info" : "ExpressionStatement[9069-9098]:ExpressionStatement[9312-9341]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[9104-9128]:VariableDeclarationStatement[9347-9371]"
    }, {
      "left" : "for (Node n : globalNameNodes)",
      "right" : "for (Node n : globalNameNodes)",
      "info" : "EnhancedForStatement[9161-9396]:EnhancedForStatement[9404-9639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9192-9396]:Block[9435-9639]"
    }, {
      "left" : "String newName = getNewGlobalName(n);",
      "right" : "String newName = getNewGlobalName(n);",
      "info" : "VariableDeclarationStatement[9200-9237]:VariableDeclarationStatement[9443-9480]"
    }, {
      "left" : "if (newName != null)",
      "right" : "if (newName != null)",
      "info" : "IfStatement[9306-9390]:IfStatement[9549-9633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9327-9390]:Block[9570-9633]"
    }, {
      "left" : "n.setString(newName);",
      "right" : "n.setString(newName);",
      "info" : "ExpressionStatement[9337-9358]:ExpressionStatement[9580-9601]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[9367-9382]:ExpressionStatement[9610-9625]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[9428-9442]:VariableDeclarationStatement[9671-9685]"
    }, {
      "left" : "for (Node n : localNameNodes)",
      "right" : "for (Node n : localNameNodes)",
      "info" : "EnhancedForStatement[9447-9640]:EnhancedForStatement[9690-9883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9477-9640]:Block[9720-9883]"
    }, {
      "left" : "String newName = getNewLocalName(n, count);",
      "right" : "String newName = getNewLocalName(n, count);",
      "info" : "VariableDeclarationStatement[9485-9528]:VariableDeclarationStatement[9728-9771]"
    }, {
      "left" : "if (newName != null)",
      "right" : "if (newName != null)",
      "info" : "IfStatement[9535-9619]:IfStatement[9778-9862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9556-9619]:Block[9799-9862]"
    }, {
      "left" : "n.setString(newName);",
      "right" : "n.setString(newName);",
      "info" : "ExpressionStatement[9566-9587]:ExpressionStatement[9809-9830]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[9596-9611]:ExpressionStatement[9839-9854]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[9626-9634]:ExpressionStatement[9869-9877]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[9646-9701]:IfStatement[9889-9944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9659-9701]:Block[9902-9944]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9667-9695]:ExpressionStatement[9910-9938]"
    }, {
      "left" : "compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);",
      "right" : "compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);",
      "info" : "ExpressionStatement[9767-9831]:ExpressionStatement[10010-10074]"
    }, {
      "left" : "assignmentLog = null;",
      "right" : "assignmentLog = null;",
      "info" : "ExpressionStatement[9836-9857]:ExpressionStatement[10079-10100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9905-10192]:Block[10148-10435]"
    }, {
      "left" : "String oldName = n.getString();",
      "right" : "String oldName = n.getString();",
      "info" : "VariableDeclarationStatement[9911-9942]:VariableDeclarationStatement[10154-10185]"
    }, {
      "left" : "Assignment a = assignments.get(oldName);",
      "right" : "Assignment a = assignments.get(oldName);",
      "info" : "VariableDeclarationStatement[9947-9987]:VariableDeclarationStatement[10190-10230]"
    }, {
      "left" : "if (a.newName != null && !a.newName.equals(oldName))",
      "right" : "if (a.newName != null && !a.newName.equals(oldName))",
      "info" : "IfStatement[9992-10188]:IfStatement[10235-10431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10045-10156]:Block[10288-10399]"
    }, {
      "left" : "if (generatePseudoNames)",
      "right" : "if (generatePseudoNames)",
      "info" : "IfStatement[10053-10126]:IfStatement[10296-10369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10078-10126]:Block[10321-10369]"
    }, {
      "left" : "return getPseudoName(oldName);",
      "right" : "return getPseudoName(oldName);",
      "info" : "ReturnStatement[10088-10118]:ReturnStatement[10331-10361]"
    }, {
      "left" : "return a.newName;",
      "right" : "return a.newName;",
      "info" : "ReturnStatement[10133-10150]:ReturnStatement[10376-10393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10162-10188]:Block[10405-10431]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10170-10182]:ReturnStatement[10413-10425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10246-10527]:Block[10489-10770]"
    }, {
      "left" : "String oldTempName = localTempNames.get(index);",
      "right" : "String oldTempName = localTempNames.get(index);",
      "info" : "VariableDeclarationStatement[10252-10299]:VariableDeclarationStatement[10495-10542]"
    }, {
      "left" : "Assignment a = assignments.get(oldTempName);",
      "right" : "Assignment a = assignments.get(oldTempName);",
      "info" : "VariableDeclarationStatement[10304-10348]:VariableDeclarationStatement[10547-10591]"
    }, {
      "left" : "if (!a.newName.equals(oldTempName))",
      "right" : "if (!a.newName.equals(oldTempName))",
      "info" : "IfStatement[10353-10506]:IfStatement[10596-10749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10389-10506]:Block[10632-10749]"
    }, {
      "left" : "if (generatePseudoNames)",
      "right" : "if (generatePseudoNames)",
      "info" : "IfStatement[10397-10476]:IfStatement[10640-10719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10422-10476]:Block[10665-10719]"
    }, {
      "left" : "return getPseudoName(n.getString());",
      "right" : "return getPseudoName(n.getString());",
      "info" : "ReturnStatement[10432-10468]:ReturnStatement[10675-10711]"
    }, {
      "left" : "return a.newName;",
      "right" : "return a.newName;",
      "info" : "ReturnStatement[10483-10500]:ReturnStatement[10726-10743]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10511-10523]:ReturnStatement[10754-10766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10570-10746]:Block[10813-10989]"
    }, {
      "left" : "Preconditions.checkState(generatePseudoNames);",
      "right" : "Preconditions.checkState(generatePseudoNames);",
      "info" : "ExpressionStatement[10576-10622]:ExpressionStatement[10819-10865]"
    }, {
      "left" : "return '$' + s + \"$$\";",
      "right" : "return '$' + s + \"$$\";",
      "info" : "ReturnStatement[10720-10742]:ReturnStatement[10963-10985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10990-11460]:Block[11233-11703]"
    }, {
      "left" : "for (Assignment a : assignments.values())",
      "right" : "for (Assignment a : assignments.values())",
      "info" : "EnhancedForStatement[10996-11456]:EnhancedForStatement[11239-11699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11038-11456]:Block[11281-11699]"
    }, {
      "left" : "String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName);",
      "right" : "String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName);",
      "info" : "VariableDeclarationStatement[11046-11110]:VariableDeclarationStatement[11289-11353]"
    }, {
      "left" : "if (prevNewName == null || reservedNames.contains(prevNewName))",
      "right" : "if (prevNewName == null || reservedNames.contains(prevNewName))",
      "info" : "IfStatement[11117-11208]:IfStatement[11360-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11181-11208]:Block[11424-11451]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[11191-11200]:ContinueStatement[11434-11443]"
    }, {
      "left" : "if (a.oldName.startsWith(LOCAL_VAR_PREFIX) ||\n          (!externNames.contains(a.oldName) &&\n           prevNewName.startsWith(prefix)))",
      "right" : "if (a.oldName.startsWith(LOCAL_VAR_PREFIX) ||\n          (!externNames.contains(a.oldName) &&\n           prevNewName.startsWith(prefix)))",
      "info" : "IfStatement[11216-11450]:IfStatement[11459-11693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11353-11450]:Block[11596-11693]"
    }, {
      "left" : "reservedNames.add(prevNewName);",
      "right" : "reservedNames.add(prevNewName);",
      "info" : "ExpressionStatement[11363-11394]:ExpressionStatement[11606-11637]"
    }, {
      "left" : "finalizeNameAssignment(a, prevNewName);",
      "right" : "finalizeNameAssignment(a, prevNewName);",
      "info" : "ExpressionStatement[11403-11442]:ExpressionStatement[11646-11685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11601-14476]:Block[11844-14719]"
    }, {
      "left" : "NameGenerator globalNameGenerator =\n        new NameGenerator(reservedNames, prefix, reservedCharacters);",
      "right" : "NameGenerator globalNameGenerator =\n        new NameGenerator(reservedNames, prefix, reservedCharacters);",
      "info" : "VariableDeclarationStatement[11607-11712]:VariableDeclarationStatement[11850-11955]"
    }, {
      "left" : "NameGenerator localNameGenerator = prefix.isEmpty() ?\n        globalNameGenerator : new NameGenerator(reservedNames, \"\",\n        reservedCharacters);",
      "right" : "NameGenerator localNameGenerator = prefix.isEmpty() ?\n        globalNameGenerator : new NameGenerator(reservedNames, \"\",\n        reservedCharacters);",
      "info" : "VariableDeclarationStatement[11762-11911]:VariableDeclarationStatement[12005-12154]"
    }, {
      "left" : "List<Assignment> pendingAssignments = new ArrayList<Assignment>();",
      "right" : "List<Assignment> pendingAssignments = new ArrayList<Assignment>();",
      "info" : "VariableDeclarationStatement[11980-12046]:VariableDeclarationStatement[12223-12289]"
    }, {
      "left" : "List<String> generatedNamesForAssignments = new ArrayList<String>();",
      "right" : "List<String> generatedNamesForAssignments = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[12051-12119]:VariableDeclarationStatement[12294-12362]"
    }, {
      "left" : "for (Assignment a : varsToRename)",
      "right" : "for (Assignment a : varsToRename)",
      "info" : "EnhancedForStatement[12125-12886]:EnhancedForStatement[12368-13129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12159-12886]:Block[12402-13129]"
    }, {
      "left" : "if (a.newName != null)",
      "right" : "if (a.newName != null)",
      "info" : "IfStatement[12167-12217]:IfStatement[12410-12460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12190-12217]:Block[12433-12460]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12200-12209]:ContinueStatement[12443-12452]"
    }, {
      "left" : "if (externNames.contains(a.oldName))",
      "right" : "if (externNames.contains(a.oldName))",
      "info" : "IfStatement[12225-12289]:IfStatement[12468-12532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12262-12289]:Block[12505-12532]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12272-12281]:ContinueStatement[12515-12524]"
    }, {
      "left" : "String newName;",
      "right" : "String newName;",
      "info" : "VariableDeclarationStatement[12297-12312]:VariableDeclarationStatement[12540-12555]"
    }, {
      "left" : "if (a.oldName.startsWith(LOCAL_VAR_PREFIX))",
      "right" : "if (a.oldName.startsWith(LOCAL_VAR_PREFIX))",
      "info" : "IfStatement[12319-12846]:IfStatement[12562-13089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12363-12539]:Block[12606-12782]"
    }, {
      "left" : "newName = localNameGenerator.generateNextName();",
      "right" : "newName = localNameGenerator.generateNextName();",
      "info" : "ExpressionStatement[12439-12487]:ExpressionStatement[12682-12730]"
    }, {
      "left" : "finalizeNameAssignment(a, newName);",
      "right" : "finalizeNameAssignment(a, newName);",
      "info" : "ExpressionStatement[12496-12531]:ExpressionStatement[12739-12774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12545-12846]:Block[12788-13089]"
    }, {
      "left" : "newName = globalNameGenerator.generateNextName();",
      "right" : "newName = globalNameGenerator.generateNextName();",
      "info" : "ExpressionStatement[12703-12752]:ExpressionStatement[12946-12995]"
    }, {
      "left" : "pendingAssignments.add(a);",
      "right" : "pendingAssignments.add(a);",
      "info" : "ExpressionStatement[12761-12787]:ExpressionStatement[13004-13030]"
    }, {
      "left" : "generatedNamesForAssignments.add(newName);",
      "right" : "generatedNamesForAssignments.add(newName);",
      "info" : "ExpressionStatement[12796-12838]:ExpressionStatement[13039-13081]"
    }, {
      "left" : "reservedNames.add(newName);",
      "right" : "reservedNames.add(newName);",
      "info" : "ExpressionStatement[12853-12880]:ExpressionStatement[13096-13123]"
    }, {
      "left" : "int numPendingAssignments = generatedNamesForAssignments.size();",
      "right" : "int numPendingAssignments = generatedNamesForAssignments.size();",
      "info" : "VariableDeclarationStatement[13648-13712]:VariableDeclarationStatement[13891-13955]"
    }, {
      "left" : "for (int i = 0; i < numPendingAssignments)",
      "right" : "for (int i = 0; i < numPendingAssignments)",
      "info" : "ForStatement[13717-14472]:ForStatement[13960-14715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13761-14472]:Block[14004-14715]"
    }, {
      "left" : "SortedSet<Assignment> varsByOrderOfOccurrence =\n          new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR);",
      "right" : "SortedSet<Assignment> varsByOrderOfOccurrence =\n          new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR);",
      "info" : "VariableDeclarationStatement[13769-13883]:VariableDeclarationStatement[14012-14126]"
    }, {
      "left" : "int len = generatedNamesForAssignments.get(i).length();",
      "right" : "int len = generatedNamesForAssignments.get(i).length();",
      "info" : "VariableDeclarationStatement[14009-14064]:VariableDeclarationStatement[14252-14307]"
    }, {
      "left" : "for (int j = i;\n           j < numPendingAssignments &&\n               generatedNamesForAssignments.get(j).length() == len;\n           j++)",
      "right" : "for (int j = i;\n           j < numPendingAssignments &&\n               generatedNamesForAssignments.get(j).length() == len;\n           j++)",
      "info" : "ForStatement[14071-14284]:ForStatement[14314-14527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14211-14284]:Block[14454-14527]"
    }, {
      "left" : "varsByOrderOfOccurrence.add(pendingAssignments.get(j));",
      "right" : "varsByOrderOfOccurrence.add(pendingAssignments.get(j));",
      "info" : "ExpressionStatement[14221-14276]:ExpressionStatement[14464-14519]"
    }, {
      "left" : "for (Assignment a : varsByOrderOfOccurrence)",
      "right" : "for (Assignment a : varsByOrderOfOccurrence)",
      "info" : "EnhancedForStatement[14327-14466]:EnhancedForStatement[14570-14709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14372-14466]:Block[14615-14709]"
    }, {
      "left" : "finalizeNameAssignment(a, generatedNamesForAssignments.get(i));",
      "right" : "finalizeNameAssignment(a, generatedNamesForAssignments.get(i));",
      "info" : "ExpressionStatement[14382-14445]:ExpressionStatement[14625-14688]"
    }, {
      "left" : "++i;",
      "right" : "++i;",
      "info" : "ExpressionStatement[14454-14458]:ExpressionStatement[14697-14701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14594-14813]:Block[14837-15056]"
    }, {
      "left" : "a.setNewName(newName);",
      "right" : "a.setNewName(newName);",
      "info" : "ExpressionStatement[14600-14622]:ExpressionStatement[14843-14865]"
    }, {
      "left" : "renameMap.put(a.oldName, newName);",
      "right" : "renameMap.put(a.oldName, newName);",
      "info" : "ExpressionStatement[14661-14695]:ExpressionStatement[14904-14938]"
    }, {
      "left" : "assignmentLog.append(a.oldName).append(\" => \").append(newName).\n        append('\\n');",
      "right" : "assignmentLog.append(a.oldName).append(\" => \").append(newName).\n        append('\\n');",
      "info" : "ExpressionStatement[14724-14809]:ExpressionStatement[14967-15052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14886-14930]:Block[15129-15173]"
    }, {
      "left" : "return new VariableMap(renameMap);",
      "right" : "return new VariableMap(renameMap);",
      "info" : "ReturnStatement[14892-14926]:ReturnStatement[15135-15169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15065-15140]:Block[15308-15383]"
    }, {
      "left" : "return !compiler.getCodingConvention().isExported(name, isLocal);",
      "right" : "return !compiler.getCodingConvention().isExported(name, isLocal);",
      "info" : "ReturnStatement[15071-15136]:ReturnStatement[15314-15379]"
    } ]
  },
  "interFileMappings" : { }
}