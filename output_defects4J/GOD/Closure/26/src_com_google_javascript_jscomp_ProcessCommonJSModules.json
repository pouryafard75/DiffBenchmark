{
  "matchedElements" : [
 {
    "left" : "class : ProcessCommonJSModules",
    "right" : "class : ProcessCommonJSModules",
    "info" : "TypeDeclaration[1027-9252]:TypeDeclaration[1027-9436]"
  }, {
    "left" : "DEFAULT_FILENAME_PREFIX",
    "right" : "DEFAULT_FILENAME_PREFIX",
    "info" : "FieldDeclaration[1505-1579]:FieldDeclaration[1505-1579]"
  }, {
    "left" : "MODULE_NAME_SEPARATOR",
    "right" : "MODULE_NAME_SEPARATOR",
    "info" : "FieldDeclaration[1583-1641]:FieldDeclaration[1583-1641]"
  }, {
    "left" : "MODULE_NAME_PREFIX",
    "right" : "MODULE_NAME_PREFIX",
    "info" : "FieldDeclaration[1644-1703]:FieldDeclaration[1644-1703]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[1707-1747]:FieldDeclaration[1707-1747]"
  }, {
    "left" : "filenamePrefix",
    "right" : "filenamePrefix",
    "info" : "FieldDeclaration[1750-1786]:FieldDeclaration[1750-1786]"
  }, {
    "left" : "reportDependencies",
    "right" : "reportDependencies",
    "info" : "FieldDeclaration[1789-1830]:FieldDeclaration[1789-1830]"
  }, {
    "left" : "module",
    "right" : "module",
    "info" : "FieldDeclaration[1833-1857]:FieldDeclaration[1833-1857]"
  }, {
    "left" : "package ProcessCommonJSModules(compiler , filenamePrefix )",
    "right" : "package ProcessCommonJSModules(compiler , filenamePrefix )",
    "info" : "MethodDeclaration[1861-1981]:MethodDeclaration[1861-1981]"
  }, {
    "left" : "package ProcessCommonJSModules(compiler , filenamePrefix , reportDependencies boolean)",
    "right" : "package ProcessCommonJSModules(compiler , filenamePrefix , reportDependencies boolean)",
    "info" : "MethodDeclaration[1985-2303]:MethodDeclaration[1985-2303]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[2307-2460]:MethodDeclaration[2307-2460]"
  }, {
    "left" : "package guessCJSModuleName(filename ) : ",
    "right" : "package guessCJSModuleName(filename ) : ",
    "info" : "MethodDeclaration[2464-2568]:MethodDeclaration[2464-2568]"
  }, {
    "left" : "package getModule() : ",
    "right" : "package getModule() : ",
    "info" : "MethodDeclaration[2572-2723]:MethodDeclaration[2572-2723]"
  }, {
    "left" : "public toModuleName(filename ) : ",
    "right" : "public toModuleName(filename ) : ",
    "info" : "MethodDeclaration[2727-3261]:MethodDeclaration[2727-3261]"
  }, {
    "left" : "public toModuleName(requiredFilename , currentFilename ) : ",
    "right" : "public toModuleName(requiredFilename , currentFilename ) : ",
    "info" : "MethodDeclaration[3265-4009]:MethodDeclaration[3265-4009]"
  }, {
    "left" : "private normalizeSourceName(filename ) : ",
    "right" : "private normalizeSourceName(filename ) : ",
    "info" : "MethodDeclaration[4013-4208]:MethodDeclaration[4013-4208]"
  }, {
    "left" : "class : ProcessCommonJsModulesCallback",
    "right" : "class : ProcessCommonJsModulesCallback",
    "info" : "TypeDeclaration[4212-8346]:TypeDeclaration[4212-8530]"
  }, {
    "left" : "scriptNodeCount",
    "right" : "scriptNodeCount",
    "info" : "FieldDeclaration[4392-4424]:FieldDeclaration[4392-4424]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[4430-4933]:MethodDeclaration[4494-4997]"
  }, {
    "left" : "private visitRequireCall(t , require , parent ) : void",
    "right" : "private visitRequireCall(t , require , parent ) : void",
    "info" : "MethodDeclaration[4939-5805]:MethodDeclaration[5003-5869]"
  }, {
    "left" : "private visitScript(t , script ) : void",
    "right" : "private visitScript(t , script ) : void",
    "info" : "MethodDeclaration[5811-7045]:MethodDeclaration[5875-7109]"
  }, {
    "left" : "private emitOptionalModuleExportsOverride(script , moduleName ) : void",
    "right" : "private emitOptionalModuleExportsOverride(script , moduleName ) : void",
    "info" : "MethodDeclaration[7051-7625]:MethodDeclaration[7115-7767]"
  }, {
    "left" : "private visitModuleExports(prop ) : void",
    "right" : "private visitModuleExports(prop ) : void",
    "info" : "MethodDeclaration[7631-8113]:MethodDeclaration[7773-8297]"
  }, {
    "left" : "private getCurrentScriptNode(n ) : ",
    "right" : "private getCurrentScriptNode(n ) : ",
    "info" : "MethodDeclaration[8119-8342]:MethodDeclaration[8303-8526]"
  }, {
    "left" : "class : SuffixVarsCallback",
    "right" : "class : SuffixVarsCallback",
    "info" : "TypeDeclaration[8350-9250]:TypeDeclaration[8534-9434]"
  }, {
    "left" : "EXPORTS",
    "right" : "EXPORTS",
    "info" : "FieldDeclaration[8514-8562]:FieldDeclaration[8698-8746]"
  }, {
    "left" : "suffix",
    "right" : "suffix",
    "info" : "FieldDeclaration[8568-8596]:FieldDeclaration[8752-8780]"
  }, {
    "left" : "package SuffixVarsCallback(suffix )",
    "right" : "package SuffixVarsCallback(suffix )",
    "info" : "MethodDeclaration[8602-8671]:MethodDeclaration[8786-8855]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[8677-9246]:MethodDeclaration[8861-9430]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1440-1446]:Modifier[1440-1446]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1447-1452]:TYPE_DECLARATION_KIND[1447-1452]"
  }, {
    "left" : "ProcessCommonJSModules",
    "right" : "ProcessCommonJSModules",
    "info" : "SimpleName[1861-1883]:SimpleName[1861-1883]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[1884-1909]:SingleVariableDeclaration[1884-1909]"
  }, {
    "left" : "String filenamePrefix",
    "right" : "String filenamePrefix",
    "info" : "SingleVariableDeclaration[1911-1932]:SingleVariableDeclaration[1911-1932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1934-1981]:Block[1934-1981]"
  }, {
    "left" : "this(compiler, filenamePrefix, true);",
    "right" : "this(compiler, filenamePrefix, true);",
    "info" : "ConstructorInvocation[1940-1977]:ConstructorInvocation[1940-1977]"
  }, {
    "left" : "ProcessCommonJSModules",
    "right" : "ProcessCommonJSModules",
    "info" : "SimpleName[1985-2007]:SimpleName[1985-2007]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[2008-2033]:SingleVariableDeclaration[2008-2033]"
  }, {
    "left" : "String filenamePrefix",
    "right" : "String filenamePrefix",
    "info" : "SingleVariableDeclaration[2035-2056]:SingleVariableDeclaration[2035-2056]"
  }, {
    "left" : "boolean reportDependencies",
    "right" : "boolean reportDependencies",
    "info" : "SingleVariableDeclaration[2064-2090]:SingleVariableDeclaration[2064-2090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2092-2303]:Block[2092-2303]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[2098-2123]:ExpressionStatement[2098-2123]"
  }, {
    "left" : "this.filenamePrefix = filenamePrefix.endsWith(File.separator) ?\n        filenamePrefix : filenamePrefix + File.separator;",
    "right" : "this.filenamePrefix = filenamePrefix.endsWith(File.separator) ?\n        filenamePrefix : filenamePrefix + File.separator;",
    "info" : "ExpressionStatement[2128-2249]:ExpressionStatement[2128-2249]"
  }, {
    "left" : "this.reportDependencies = reportDependencies;",
    "right" : "this.reportDependencies = reportDependencies;",
    "info" : "ExpressionStatement[2254-2299]:ExpressionStatement[2254-2299]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2307-2316]:MarkerAnnotation[2307-2316]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2319-2325]:Modifier[2319-2325]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2326-2330]:PrimitiveType[2326-2330]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2331-2338]:SimpleName[2331-2338]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[2339-2351]:SingleVariableDeclaration[2339-2351]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[2353-2362]:SingleVariableDeclaration[2353-2362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2364-2460]:Block[2364-2460]"
  }, {
    "left" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
    "right" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
    "info" : "ExpressionStatement[2370-2456]:ExpressionStatement[2370-2456]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2464-2470]:SimpleType[2464-2470]"
  }, {
    "left" : "guessCJSModuleName",
    "right" : "guessCJSModuleName",
    "info" : "SimpleName[2471-2489]:SimpleName[2471-2489]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[2490-2505]:SingleVariableDeclaration[2490-2505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2507-2568]:Block[2507-2568]"
  }, {
    "left" : "return toModuleName(normalizeSourceName(filename));",
    "right" : "return toModuleName(normalizeSourceName(filename));",
    "info" : "ReturnStatement[2513-2564]:ReturnStatement[2513-2564]"
  }, {
    "left" : "JSModule",
    "right" : "JSModule",
    "info" : "SimpleType[2678-2686]:SimpleType[2678-2686]"
  }, {
    "left" : "getModule",
    "right" : "getModule",
    "info" : "SimpleName[2687-2696]:SimpleName[2687-2696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2699-2723]:Block[2699-2723]"
  }, {
    "left" : "return module;",
    "right" : "return module;",
    "info" : "ReturnStatement[2705-2719]:ReturnStatement[2705-2719]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2963-2969]:Modifier[2963-2969]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2970-2976]:Modifier[2970-2976]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2977-2983]:SimpleType[2977-2983]"
  }, {
    "left" : "toModuleName",
    "right" : "toModuleName",
    "info" : "SimpleName[2984-2996]:SimpleName[2984-2996]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[2997-3012]:SingleVariableDeclaration[2997-3012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3014-3261]:Block[3014-3261]"
  }, {
    "left" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\")\n            .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
    "right" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\")\n            .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
    "info" : "ReturnStatement[3020-3257]:ReturnStatement[3020-3257]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3400-3406]:Modifier[3400-3406]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3407-3413]:Modifier[3407-3413]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3414-3420]:SimpleType[3414-3420]"
  }, {
    "left" : "toModuleName",
    "right" : "toModuleName",
    "info" : "SimpleName[3421-3433]:SimpleName[3421-3433]"
  }, {
    "left" : "String requiredFilename",
    "right" : "String requiredFilename",
    "info" : "SingleVariableDeclaration[3434-3457]:SingleVariableDeclaration[3434-3457]"
  }, {
    "left" : "String currentFilename",
    "right" : "String currentFilename",
    "info" : "SingleVariableDeclaration[3465-3487]:SingleVariableDeclaration[3465-3487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3489-4009]:Block[3489-4009]"
  }, {
    "left" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
    "right" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
    "info" : "ExpressionStatement[3495-3556]:ExpressionStatement[3495-3556]"
  }, {
    "left" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
    "right" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
    "info" : "ExpressionStatement[3561-3620]:ExpressionStatement[3561-3620]"
  }, {
    "left" : "if (requiredFilename.startsWith(\".\" + File.separator) ||\n        requiredFilename.startsWith(\"..\" + File.separator))",
    "right" : "if (requiredFilename.startsWith(\".\" + File.separator) ||\n        requiredFilename.startsWith(\"..\" + File.separator))",
    "info" : "IfStatement[3626-3962]:IfStatement[3626-3962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3743-3962]:Block[3743-3962]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[3751-3956]:TryStatement[3751-3956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3755-3878]:Block[3755-3878]"
  }, {
    "left" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
    "right" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
    "info" : "ExpressionStatement[3765-3870]:ExpressionStatement[3765-3870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3908-3956]:Block[3908-3956]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[3918-3948]:ThrowStatement[3918-3948]"
  }, {
    "left" : "return toModuleName(requiredFilename);",
    "right" : "return toModuleName(requiredFilename);",
    "info" : "ReturnStatement[3967-4005]:ReturnStatement[3967-4005]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4013-4020]:Modifier[4013-4020]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[4021-4027]:SimpleType[4021-4027]"
  }, {
    "left" : "normalizeSourceName",
    "right" : "normalizeSourceName",
    "info" : "SimpleName[4028-4047]:SimpleName[4028-4047]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[4048-4063]:SingleVariableDeclaration[4048-4063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4065-4208]:Block[4065-4208]"
  }, {
    "left" : "if (filename.indexOf(filenamePrefix) == 0)",
    "right" : "if (filename.indexOf(filenamePrefix) == 0)",
    "info" : "IfStatement[4071-4183]:IfStatement[4071-4183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4114-4183]:Block[4114-4183]"
  }, {
    "left" : "filename = filename.substring(filenamePrefix.length());",
    "right" : "filename = filename.substring(filenamePrefix.length());",
    "info" : "ExpressionStatement[4122-4177]:ExpressionStatement[4122-4177]"
  }, {
    "left" : "return filename;",
    "right" : "return filename;",
    "info" : "ReturnStatement[4188-4204]:ReturnStatement[4188-4204]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4300-4307]:Modifier[4300-4307]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4308-4313]:TYPE_DECLARATION_KIND[4308-4313]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4430-4439]:MarkerAnnotation[4494-4503]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4444-4450]:Modifier[4508-4514]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4451-4455]:PrimitiveType[4515-4519]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[4456-4461]:SimpleName[4520-4525]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4462-4477]:SingleVariableDeclaration[4526-4541]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4479-4485]:SingleVariableDeclaration[4543-4549]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[4487-4498]:SingleVariableDeclaration[4551-4562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4500-4933]:Block[4564-4997]"
  }, {
    "left" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
    "right" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
    "info" : "IfStatement[4508-4712]:IfStatement[4572-4776]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4663-4712]:Block[4727-4776]"
  }, {
    "left" : "visitRequireCall(t, n, parent);",
    "right" : "visitRequireCall(t, n, parent);",
    "info" : "ExpressionStatement[4673-4704]:ExpressionStatement[4737-4768]"
  }, {
    "left" : "if (n.isScript())",
    "right" : "if (n.isScript())",
    "info" : "IfStatement[4720-4801]:IfStatement[4784-4865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4738-4801]:Block[4802-4865]"
  }, {
    "left" : "scriptNodeCount++;",
    "right" : "scriptNodeCount++;",
    "info" : "ExpressionStatement[4748-4766]:ExpressionStatement[4812-4830]"
  }, {
    "left" : "visitScript(t, n);",
    "right" : "visitScript(t, n);",
    "info" : "ExpressionStatement[4775-4793]:ExpressionStatement[4839-4857]"
  }, {
    "left" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
    "right" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
    "info" : "IfStatement[4809-4927]:IfStatement[4873-4991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4887-4927]:Block[4951-4991]"
  }, {
    "left" : "visitModuleExports(n);",
    "right" : "visitModuleExports(n);",
    "info" : "ExpressionStatement[4897-4919]:ExpressionStatement[4961-4983]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5094-5101]:Modifier[5158-5165]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5102-5106]:PrimitiveType[5166-5170]"
  }, {
    "left" : "visitRequireCall",
    "right" : "visitRequireCall",
    "info" : "SimpleName[5107-5123]:SimpleName[5171-5187]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[5124-5139]:SingleVariableDeclaration[5188-5203]"
  }, {
    "left" : "Node require",
    "right" : "Node require",
    "info" : "SingleVariableDeclaration[5141-5153]:SingleVariableDeclaration[5205-5217]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[5155-5166]:SingleVariableDeclaration[5219-5230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5168-5805]:Block[5232-5869]"
  }, {
    "left" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
    "right" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
    "info" : "VariableDeclarationStatement[5176-5299]:VariableDeclarationStatement[5240-5363]"
  }, {
    "left" : "Node moduleRef = IR.name(moduleName).srcref(require);",
    "right" : "Node moduleRef = IR.name(moduleName).srcref(require);",
    "info" : "VariableDeclarationStatement[5306-5359]:VariableDeclarationStatement[5370-5423]"
  }, {
    "left" : "parent.replaceChild(require, moduleRef);",
    "right" : "parent.replaceChild(require, moduleRef);",
    "info" : "ExpressionStatement[5366-5406]:ExpressionStatement[5430-5470]"
  }, {
    "left" : "Node script = getCurrentScriptNode(parent);",
    "right" : "Node script = getCurrentScriptNode(parent);",
    "info" : "VariableDeclarationStatement[5413-5456]:VariableDeclarationStatement[5477-5520]"
  }, {
    "left" : "if (reportDependencies)",
    "right" : "if (reportDependencies)",
    "info" : "IfStatement[5463-5541]:IfStatement[5527-5605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5487-5541]:Block[5551-5605]"
  }, {
    "left" : "t.getInput().addRequire(moduleName);",
    "right" : "t.getInput().addRequire(moduleName);",
    "info" : "ExpressionStatement[5497-5533]:ExpressionStatement[5561-5597]"
  }, {
    "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
    "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
    "info" : "ExpressionStatement[5582-5764]:ExpressionStatement[5646-5828]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[5771-5799]:ExpressionStatement[5835-5863]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5932-5939]:Modifier[5996-6003]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5940-5944]:PrimitiveType[6004-6008]"
  }, {
    "left" : "visitScript",
    "right" : "visitScript",
    "info" : "SimpleName[5945-5956]:SimpleName[6009-6020]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[5957-5972]:SingleVariableDeclaration[6021-6036]"
  }, {
    "left" : "Node script",
    "right" : "Node script",
    "info" : "SingleVariableDeclaration[5974-5985]:SingleVariableDeclaration[6038-6049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5987-7045]:Block[6051-7109]"
  }, {
    "left" : "Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");",
    "right" : "Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");",
    "info" : "ExpressionStatement[5995-6157]:ExpressionStatement[6059-6221]"
  }, {
    "left" : "String moduleName = guessCJSModuleName(normalizeSourceName(script\n          .getSourceFileName()));",
    "right" : "String moduleName = guessCJSModuleName(normalizeSourceName(script\n          .getSourceFileName()));",
    "info" : "VariableDeclarationStatement[6164-6263]:VariableDeclarationStatement[6228-6327]"
  }, {
    "left" : "script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));",
    "right" : "script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));",
    "info" : "ExpressionStatement[6270-6384]:ExpressionStatement[6334-6448]"
  }, {
    "left" : "if (reportDependencies)",
    "right" : "if (reportDependencies)",
    "info" : "IfStatement[6391-6603]:IfStatement[6455-6667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6415-6603]:Block[6479-6667]"
  }, {
    "left" : "CompilerInput ci = t.getInput();",
    "right" : "CompilerInput ci = t.getInput();",
    "info" : "VariableDeclarationStatement[6425-6457]:VariableDeclarationStatement[6489-6521]"
  }, {
    "left" : "ci.addProvide(moduleName);",
    "right" : "ci.addProvide(moduleName);",
    "info" : "ExpressionStatement[6466-6492]:ExpressionStatement[6530-6556]"
  }, {
    "left" : "JSModule m = new JSModule(moduleName);",
    "right" : "JSModule m = new JSModule(moduleName);",
    "info" : "VariableDeclarationStatement[6501-6539]:VariableDeclarationStatement[6565-6603]"
  }, {
    "left" : "m.addAndOverrideModule(ci);",
    "right" : "m.addAndOverrideModule(ci);",
    "info" : "ExpressionStatement[6548-6575]:ExpressionStatement[6612-6639]"
  }, {
    "left" : "module = m;",
    "right" : "module = m;",
    "info" : "ExpressionStatement[6584-6595]:ExpressionStatement[6648-6659]"
  }, {
    "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));",
    "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));",
    "info" : "ExpressionStatement[6610-6791]:ExpressionStatement[6674-6855]"
  }, {
    "left" : "emitOptionalModuleExportsOverride(script, moduleName);",
    "right" : "emitOptionalModuleExportsOverride(script, moduleName);",
    "info" : "ExpressionStatement[6799-6853]:ExpressionStatement[6863-6917]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));",
    "right" : "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));",
    "info" : "ExpressionStatement[6915-7003]:ExpressionStatement[6979-7067]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[7011-7039]:ExpressionStatement[7075-7103]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7199-7206]:Modifier[7263-7270]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7207-7211]:PrimitiveType[7271-7275]"
  }, {
    "left" : "emitOptionalModuleExportsOverride",
    "right" : "emitOptionalModuleExportsOverride",
    "info" : "SimpleName[7212-7245]:SimpleName[7276-7309]"
  }, {
    "left" : "Node script",
    "right" : "Node script",
    "info" : "SingleVariableDeclaration[7246-7257]:SingleVariableDeclaration[7310-7321]"
  }, {
    "left" : "String moduleName",
    "right" : "String moduleName",
    "info" : "SingleVariableDeclaration[7267-7284]:SingleVariableDeclaration[7331-7348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7286-7625]:Block[7350-7767]"
  }, {
    "left" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
    "right" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
    "info" : "VariableDeclarationStatement[7295-7391]:VariableDeclarationStatement[7437-7533]"
  }, {
    "left" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
    "right" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
    "info" : "ExpressionStatement[7398-7619]:ExpressionStatement[7540-7761]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7707-7714]:Modifier[7849-7856]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7715-7719]:PrimitiveType[7857-7861]"
  }, {
    "left" : "visitModuleExports",
    "right" : "visitModuleExports",
    "info" : "SimpleName[7720-7738]:SimpleName[7862-7880]"
  }, {
    "left" : "Node prop",
    "right" : "Node prop",
    "info" : "SingleVariableDeclaration[7739-7748]:SingleVariableDeclaration[7881-7890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7750-8113]:Block[7892-8297]"
  }, {
    "left" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
    "right" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
    "info" : "VariableDeclarationStatement[7758-7823]:VariableDeclarationStatement[7900-7965]"
  }, {
    "left" : "Node module = prop.getChildAtIndex(0);",
    "right" : "Node module = prop.getChildAtIndex(0);",
    "info" : "VariableDeclarationStatement[7830-7868]:VariableDeclarationStatement[7972-8010]"
  }, {
    "left" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
    "right" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
    "info" : "ExpressionStatement[7875-7924]:ExpressionStatement[8017-8066]"
  }, {
    "left" : "module.setString(moduleName);",
    "right" : "module.setString(moduleName);",
    "info" : "ExpressionStatement[7931-7960]:ExpressionStatement[8073-8102]"
  }, {
    "left" : "Node exports = prop.getChildAtIndex(1);",
    "right" : "Node exports = prop.getChildAtIndex(1);",
    "info" : "VariableDeclarationStatement[7967-8006]:VariableDeclarationStatement[8109-8148]"
  }, {
    "left" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
    "right" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
    "info" : "ExpressionStatement[8013-8064]:ExpressionStatement[8155-8206]"
  }, {
    "left" : "exports.setString(\"module$exports\");",
    "right" : "exports.setString(\"module$exports\");",
    "info" : "ExpressionStatement[8071-8107]:ExpressionStatement[8213-8249]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8179-8186]:Modifier[8363-8370]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[8187-8191]:SimpleType[8371-8375]"
  }, {
    "left" : "getCurrentScriptNode",
    "right" : "getCurrentScriptNode",
    "info" : "SimpleName[8192-8212]:SimpleName[8376-8396]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8213-8219]:SingleVariableDeclaration[8397-8403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8221-8342]:Block[8405-8526]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[8229-8336]:WhileStatement[8413-8520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8242-8336]:Block[8426-8520]"
  }, {
    "left" : "if (n.isScript())",
    "right" : "if (n.isScript())",
    "info" : "IfStatement[8252-8301]:IfStatement[8436-8485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8270-8301]:Block[8454-8485]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[8282-8291]:ReturnStatement[8466-8475]"
  }, {
    "left" : "n = n.getParent();",
    "right" : "n = n.getParent();",
    "info" : "ExpressionStatement[8310-8328]:ExpressionStatement[8494-8512]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8440-8447]:Modifier[8624-8631]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[8448-8453]:TYPE_DECLARATION_KIND[8632-8637]"
  }, {
    "left" : "SuffixVarsCallback",
    "right" : "SuffixVarsCallback",
    "info" : "SimpleName[8602-8620]:SimpleName[8786-8804]"
  }, {
    "left" : "String suffix",
    "right" : "String suffix",
    "info" : "SingleVariableDeclaration[8621-8634]:SingleVariableDeclaration[8805-8818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8636-8671]:Block[8820-8855]"
  }, {
    "left" : "this.suffix = suffix;",
    "right" : "this.suffix = suffix;",
    "info" : "ExpressionStatement[8644-8665]:ExpressionStatement[8828-8849]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8677-8686]:MarkerAnnotation[8861-8870]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8691-8697]:Modifier[8875-8881]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8698-8702]:PrimitiveType[8882-8886]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[8703-8708]:SimpleName[8887-8892]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[8709-8724]:SingleVariableDeclaration[8893-8908]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8726-8732]:SingleVariableDeclaration[8910-8916]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[8734-8745]:SingleVariableDeclaration[8918-8929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8747-9246]:Block[8931-9430]"
  }, {
    "left" : "if (n.isName())",
    "right" : "if (n.isName())",
    "info" : "IfStatement[8755-9240]:IfStatement[8939-9424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8771-9240]:Block[8955-9424]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[8781-8809]:VariableDeclarationStatement[8965-8993]"
  }, {
    "left" : "if (suffix.equals(name))",
    "right" : "if (suffix.equals(name))",
    "info" : "IfStatement[8818-8872]:IfStatement[9002-9056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8843-8872]:Block[9027-9056]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8855-8862]:ReturnStatement[9039-9046]"
  }, {
    "left" : "if (EXPORTS.equals(name))",
    "right" : "if (EXPORTS.equals(name))",
    "info" : "IfStatement[8881-9232]:IfStatement[9065-9416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8907-9003]:Block[9091-9187]"
  }, {
    "left" : "n.setString(suffix);",
    "right" : "n.setString(suffix);",
    "info" : "ExpressionStatement[8919-8939]:ExpressionStatement[9103-9123]"
  }, {
    "left" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
    "right" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
    "info" : "ExpressionStatement[8950-8993]:ExpressionStatement[9134-9177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9009-9232]:Block[9193-9416]"
  }, {
    "left" : "Scope.Var var = t.getScope().getVar(name);",
    "right" : "Scope.Var var = t.getScope().getVar(name);",
    "info" : "VariableDeclarationStatement[9021-9063]:VariableDeclarationStatement[9205-9247]"
  }, {
    "left" : "if (var != null && var.isGlobal())",
    "right" : "if (var != null && var.isGlobal())",
    "info" : "IfStatement[9074-9222]:IfStatement[9258-9406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9109-9222]:Block[9293-9406]"
  }, {
    "left" : "n.setString(name + \"$$\" + suffix);",
    "right" : "n.setString(name + \"$$\" + suffix);",
    "info" : "ExpressionStatement[9123-9157]:ExpressionStatement[9307-9341]"
  }, {
    "left" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
    "right" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
    "info" : "ExpressionStatement[9170-9210]:ExpressionStatement[9354-9394]"
  } ]
}