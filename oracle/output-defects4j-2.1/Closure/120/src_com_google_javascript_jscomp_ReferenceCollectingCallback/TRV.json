{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
      "right" : "private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[2133-2402]:FieldDeclaration[2133-2402]"
    }, {
      "left" : "private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
      "right" : "private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
      "info" : "FieldDeclaration[2406-2563]:FieldDeclaration[2406-2563]"
    }, {
      "left" : "private final Behavior behavior;",
      "right" : "private final Behavior behavior;",
      "info" : "FieldDeclaration[2567-2671]:FieldDeclaration[2567-2671]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2675-2774]:FieldDeclaration[2675-2774]"
    }, {
      "left" : "private final Predicate<Var> varFilter;",
      "right" : "private final Predicate<Var> varFilter;",
      "info" : "FieldDeclaration[2778-2882]:FieldDeclaration[2778-2882]"
    }, {
      "left" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior)",
      "right" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior)",
      "info" : "MethodDeclaration[2886-3079]:MethodDeclaration[2886-3079]"
    }, {
      "left" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,\n      Predicate<Var> varFilter)",
      "right" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,\n      Predicate<Var> varFilter)",
      "info" : "MethodDeclaration[3083-3492]:MethodDeclaration[3083-3492]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3496-3757]:MethodDeclaration[3496-3757]"
    }, {
      "left" : "public void hotSwapScript(Node scriptRoot, Node originalRoot)",
      "right" : "public void hotSwapScript(Node scriptRoot, Node originalRoot)",
      "info" : "MethodDeclaration[3761-3986]:MethodDeclaration[3761-3986]"
    }, {
      "left" : "public Iterable<Var> getAllSymbols()",
      "right" : "public Iterable<Var> getAllSymbols()",
      "info" : "MethodDeclaration[3990-4153]:MethodDeclaration[3990-4153]"
    }, {
      "left" : "public Scope getScope(Var var)",
      "right" : "public Scope getScope(Var var)",
      "info" : "MethodDeclaration[4157-4227]:MethodDeclaration[4157-4227]"
    }, {
      "left" : "public ReferenceCollection getReferences(Var v)",
      "right" : "public ReferenceCollection getReferences(Var v)",
      "info" : "MethodDeclaration[4231-4399]:MethodDeclaration[4231-4399]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4403-4967]:MethodDeclaration[4403-4967]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[4971-5264]:MethodDeclaration[4971-5264]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[5268-5761]:MethodDeclaration[5268-5761]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n      Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n      Node parent)",
      "info" : "MethodDeclaration[5765-6090]:MethodDeclaration[5765-6090]"
    }, {
      "left" : "private static boolean isBlockBoundary(Node n, Node parent)",
      "right" : "private static boolean isBlockBoundary(Node n, Node parent)",
      "info" : "MethodDeclaration[6094-7068]:MethodDeclaration[6094-7068]"
    }, {
      "left" : "private void addReference(Var v, Reference reference)",
      "right" : "private void addReference(Var v, Reference reference)",
      "info" : "MethodDeclaration[7072-7435]:MethodDeclaration[7072-7435]"
    }, {
      "left" : "ReferenceMap",
      "right" : "ReferenceMap",
      "info" : "TypeDeclaration[7439-7515]:TypeDeclaration[7439-7515]"
    }, {
      "left" : "ReferenceCollection getReferences(Var var);",
      "right" : "ReferenceCollection getReferences(Var var);",
      "info" : "MethodDeclaration[7468-7511]:MethodDeclaration[7468-7511]"
    }, {
      "left" : "ReferenceMapWrapper",
      "right" : "ReferenceMapWrapper",
      "info" : "TypeDeclaration[7519-7888]:TypeDeclaration[7519-7888]"
    }, {
      "left" : "private final Map<Var, ReferenceCollection> referenceMap;",
      "right" : "private final Map<Var, ReferenceCollection> referenceMap;",
      "info" : "FieldDeclaration[7590-7647]:FieldDeclaration[7590-7647]"
    }, {
      "left" : "public ReferenceMapWrapper(Map<Var, ReferenceCollection> referenceMap)",
      "right" : "public ReferenceMapWrapper(Map<Var, ReferenceCollection> referenceMap)",
      "info" : "MethodDeclaration[7653-7771]:MethodDeclaration[7653-7771]"
    }, {
      "left" : "public ReferenceCollection getReferences(Var var)",
      "right" : "public ReferenceCollection getReferences(Var var)",
      "info" : "MethodDeclaration[7777-7884]:MethodDeclaration[7777-7884]"
    }, {
      "left" : "Behavior",
      "right" : "Behavior",
      "info" : "TypeDeclaration[7892-8175]:TypeDeclaration[7892-8175]"
    }, {
      "left" : "void afterExitScope(NodeTraversal t, ReferenceMap referenceMap);",
      "right" : "void afterExitScope(NodeTraversal t, ReferenceMap referenceMap);",
      "info" : "MethodDeclaration[8047-8171]:MethodDeclaration[8047-8171]"
    }, {
      "left" : "static final Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {}\n  };",
      "right" : "static final Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {}\n  };",
      "info" : "FieldDeclaration[8179-8336]:FieldDeclaration[8179-8336]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[8244-8331]:MethodDeclaration[8244-8331]"
    }, {
      "left" : "List<Reference> references = Lists.newArrayList();",
      "right" : "List<Reference> references = Lists.newArrayList();",
      "info" : "FieldDeclaration[8534-8584]:FieldDeclaration[8534-8584]"
    }, {
      "left" : "public Iterator<Reference> iterator()",
      "right" : "public Iterator<Reference> iterator()",
      "info" : "MethodDeclaration[8590-8685]:MethodDeclaration[8590-8685]"
    }, {
      "left" : "void add(Reference reference)",
      "right" : "void add(Reference reference)",
      "info" : "MethodDeclaration[8691-8761]:MethodDeclaration[8691-8761]"
    }, {
      "left" : "protected boolean isWellDefined()",
      "right" : "protected boolean isWellDefined()",
      "info" : "MethodDeclaration[8767-9871]:MethodDeclaration[8767-9871]"
    }, {
      "left" : "boolean isEscaped()",
      "right" : "boolean isEscaped()",
      "info" : "MethodDeclaration[9877-10207]:MethodDeclaration[9877-10207]"
    }, {
      "left" : "private boolean isInitializingDeclarationAt(int index)",
      "right" : "private boolean isInitializingDeclarationAt(int index)",
      "info" : "MethodDeclaration[10213-10847]:MethodDeclaration[10213-10847]"
    }, {
      "left" : "private boolean isInitializingAssignmentAt(int index)",
      "right" : "private boolean isInitializingAssignmentAt(int index)",
      "info" : "MethodDeclaration[10853-11580]:MethodDeclaration[10853-11580]"
    }, {
      "left" : "Reference getInitializingReference()",
      "right" : "Reference getInitializingReference()",
      "info" : "MethodDeclaration[11586-12115]:MethodDeclaration[11586-12115]"
    }, {
      "left" : "Reference getInitializingReferenceForConstants()",
      "right" : "Reference getInitializingReferenceForConstants()",
      "info" : "MethodDeclaration[12121-12486]:MethodDeclaration[12121-12486]"
    }, {
      "left" : "private Reference getOneAndOnlyAssignment()",
      "right" : "private Reference getOneAndOnlyAssignment()",
      "info" : "MethodDeclaration[13061-13607]:MethodDeclaration[13156-13702]"
    }, {
      "left" : "boolean isNeverAssigned()",
      "right" : "boolean isNeverAssigned()",
      "info" : "MethodDeclaration[13613-13969]:MethodDeclaration[13708-14064]"
    }, {
      "left" : "boolean firstReferenceIsAssigningDeclaration()",
      "right" : "boolean firstReferenceIsAssigningDeclaration()",
      "info" : "MethodDeclaration[13975-14185]:MethodDeclaration[14070-14280]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "TypeDeclaration[14193-18588]:TypeDeclaration[14288-18683]"
    }, {
      "left" : "private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
      "right" : "private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
      "info" : "FieldDeclaration[14341-14461]:FieldDeclaration[14436-14556]"
    }, {
      "left" : "private final Node nameNode;",
      "right" : "private final Node nameNode;",
      "info" : "FieldDeclaration[14467-14495]:FieldDeclaration[14562-14590]"
    }, {
      "left" : "private final BasicBlock basicBlock;",
      "right" : "private final BasicBlock basicBlock;",
      "info" : "FieldDeclaration[14500-14536]:FieldDeclaration[14595-14631]"
    }, {
      "left" : "private final Scope scope;",
      "right" : "private final Scope scope;",
      "info" : "FieldDeclaration[14541-14567]:FieldDeclaration[14636-14662]"
    }, {
      "left" : "private final InputId inputId;",
      "right" : "private final InputId inputId;",
      "info" : "FieldDeclaration[14572-14602]:FieldDeclaration[14667-14697]"
    }, {
      "left" : "private final StaticSourceFile sourceFile;",
      "right" : "private final StaticSourceFile sourceFile;",
      "info" : "FieldDeclaration[14607-14649]:FieldDeclaration[14702-14744]"
    }, {
      "left" : "Reference(Node nameNode, NodeTraversal t,\n        BasicBlock basicBlock)",
      "right" : "Reference(Node nameNode, NodeTraversal t,\n        BasicBlock basicBlock)",
      "info" : "MethodDeclaration[14655-14810]:MethodDeclaration[14750-14905]"
    }, {
      "left" : "static Reference newBleedingFunction(NodeTraversal t,\n        BasicBlock basicBlock, Node func)",
      "right" : "static Reference newBleedingFunction(NodeTraversal t,\n        BasicBlock basicBlock, Node func)",
      "info" : "MethodDeclaration[14956-15172]:MethodDeclaration[15051-15267]"
    }, {
      "left" : "static Reference createRefForTest(CompilerInput input)",
      "right" : "static Reference createRefForTest(CompilerInput input)",
      "info" : "MethodDeclaration[15178-15496]:MethodDeclaration[15273-15591]"
    }, {
      "left" : "private Reference(Node nameNode,\n        BasicBlock basicBlock, Scope scope, InputId inputId)",
      "right" : "private Reference(Node nameNode,\n        BasicBlock basicBlock, Scope scope, InputId inputId)",
      "info" : "MethodDeclaration[15502-15783]:MethodDeclaration[15597-15878]"
    }, {
      "left" : "Reference cloneWithNewScope(Scope newScope)",
      "right" : "Reference cloneWithNewScope(Scope newScope)",
      "info" : "MethodDeclaration[15789-15998]:MethodDeclaration[15884-16093]"
    }, {
      "left" : "public Var getSymbol()",
      "right" : "public Var getSymbol()",
      "info" : "MethodDeclaration[16004-16097]:MethodDeclaration[16099-16192]"
    }, {
      "left" : "public Node getNode()",
      "right" : "public Node getNode()",
      "info" : "MethodDeclaration[16103-16169]:MethodDeclaration[16198-16264]"
    }, {
      "left" : "public InputId getInputId()",
      "right" : "public InputId getInputId()",
      "info" : "MethodDeclaration[16175-16232]:MethodDeclaration[16270-16327]"
    }, {
      "left" : "public StaticSourceFile getSourceFile()",
      "right" : "public StaticSourceFile getSourceFile()",
      "info" : "MethodDeclaration[16238-16324]:MethodDeclaration[16333-16419]"
    }, {
      "left" : "boolean isDeclaration()",
      "right" : "boolean isDeclaration()",
      "info" : "MethodDeclaration[16330-16572]:MethodDeclaration[16425-16667]"
    }, {
      "left" : "boolean isVarDeclaration()",
      "right" : "boolean isVarDeclaration()",
      "info" : "MethodDeclaration[16578-16646]:MethodDeclaration[16673-16741]"
    }, {
      "left" : "boolean isHoistedFunction()",
      "right" : "boolean isHoistedFunction()",
      "info" : "MethodDeclaration[16652-16752]:MethodDeclaration[16747-16847]"
    }, {
      "left" : "boolean isInitializingDeclaration()",
      "right" : "boolean isInitializingDeclaration()",
      "info" : "MethodDeclaration[16758-17156]:MethodDeclaration[16853-17251]"
    }, {
      "left" : "Node getAssignedValue()",
      "right" : "Node getAssignedValue()",
      "info" : "MethodDeclaration[17161-17461]:MethodDeclaration[17256-17556]"
    }, {
      "left" : "BasicBlock getBasicBlock()",
      "right" : "BasicBlock getBasicBlock()",
      "info" : "MethodDeclaration[17467-17526]:MethodDeclaration[17562-17621]"
    }, {
      "left" : "Node getParent()",
      "right" : "Node getParent()",
      "info" : "MethodDeclaration[17532-17592]:MethodDeclaration[17627-17687]"
    }, {
      "left" : "Node getGrandparent()",
      "right" : "Node getGrandparent()",
      "info" : "MethodDeclaration[17598-17717]:MethodDeclaration[17693-17812]"
    }, {
      "left" : "private static boolean isLhsOfForInExpression(Node n)",
      "right" : "private static boolean isLhsOfForInExpression(Node n)",
      "info" : "MethodDeclaration[17723-17972]:MethodDeclaration[17818-18067]"
    }, {
      "left" : "boolean isSimpleAssignmentToName()",
      "right" : "boolean isSimpleAssignmentToName()",
      "info" : "MethodDeclaration[17978-18133]:MethodDeclaration[18073-18228]"
    }, {
      "left" : "boolean isLvalue()",
      "right" : "boolean isLvalue()",
      "info" : "MethodDeclaration[18139-18534]:MethodDeclaration[18234-18629]"
    }, {
      "left" : "Scope getScope()",
      "right" : "Scope getScope()",
      "info" : "MethodDeclaration[18540-18584]:MethodDeclaration[18635-18679]"
    }, {
      "left" : "BasicBlock",
      "right" : "BasicBlock",
      "info" : "TypeDeclaration[18592-21077]:TypeDeclaration[18687-21172]"
    }, {
      "left" : "private final BasicBlock parent;",
      "right" : "private final BasicBlock parent;",
      "info" : "FieldDeclaration[18758-18790]:FieldDeclaration[18853-18885]"
    }, {
      "left" : "private final boolean isHoisted;",
      "right" : "private final boolean isHoisted;",
      "info" : "FieldDeclaration[18796-18978]:FieldDeclaration[18891-19073]"
    }, {
      "left" : "private final boolean isFunction;",
      "right" : "private final boolean isFunction;",
      "info" : "FieldDeclaration[18984-19085]:FieldDeclaration[19079-19180]"
    }, {
      "left" : "private final boolean isLoop;",
      "right" : "private final boolean isLoop;",
      "info" : "FieldDeclaration[19091-19178]:FieldDeclaration[19186-19273]"
    }, {
      "left" : "BasicBlock(BasicBlock parent, Node root)",
      "right" : "BasicBlock(BasicBlock parent, Node root)",
      "info" : "MethodDeclaration[19184-19803]:MethodDeclaration[19279-19898]"
    }, {
      "left" : "BasicBlock getParent()",
      "right" : "BasicBlock getParent()",
      "info" : "MethodDeclaration[19809-19860]:MethodDeclaration[19904-19955]"
    }, {
      "left" : "boolean isGlobalScopeBlock()",
      "right" : "boolean isGlobalScopeBlock()",
      "info" : "MethodDeclaration[19866-20292]:MethodDeclaration[19961-20387]"
    }, {
      "left" : "boolean provablyExecutesBefore(BasicBlock thatBlock)",
      "right" : "boolean provablyExecutesBefore(BasicBlock thatBlock)",
      "info" : "MethodDeclaration[20298-21073]:MethodDeclaration[20393-21168]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3014-3079]:Block[3014-3079]"
    }, {
      "left" : "this(compiler, behavior, Predicates.<Var>alwaysTrue());",
      "right" : "this(compiler, behavior, Predicates.<Var>alwaysTrue());",
      "info" : "ConstructorInvocation[3020-3075]:ConstructorInvocation[3020-3075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3395-3492]:Block[3395-3492]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3401-3426]:ExpressionStatement[3401-3426]"
    }, {
      "left" : "this.behavior = behavior;",
      "right" : "this.behavior = behavior;",
      "info" : "ExpressionStatement[3431-3456]:ExpressionStatement[3431-3456]"
    }, {
      "left" : "this.varFilter = varFilter;",
      "right" : "this.varFilter = varFilter;",
      "info" : "ExpressionStatement[3461-3488]:ExpressionStatement[3461-3488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3659-3757]:Block[3659-3757]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);",
      "info" : "ExpressionStatement[3665-3753]:ExpressionStatement[3665-3753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3925-3986]:Block[3925-3986]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, this);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, this);",
      "info" : "ExpressionStatement[3931-3982]:ExpressionStatement[3931-3982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4114-4153]:Block[4114-4153]"
    }, {
      "left" : "return referenceMap.keySet();",
      "right" : "return referenceMap.keySet();",
      "info" : "ReturnStatement[4120-4149]:ReturnStatement[4120-4149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4200-4227]:Block[4200-4227]"
    }, {
      "left" : "return var.scope;",
      "right" : "return var.scope;",
      "info" : "ReturnStatement[4206-4223]:ReturnStatement[4206-4223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4362-4399]:Block[4362-4399]"
    }, {
      "left" : "return referenceMap.get(v);",
      "right" : "return referenceMap.get(v);",
      "info" : "ReturnStatement[4368-4395]:ReturnStatement[4368-4395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4572-4967]:Block[4572-4967]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[4578-4894]:IfStatement[4578-4894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4594-4894]:Block[4594-4894]"
    }, {
      "left" : "Var v;",
      "right" : "Var v;",
      "info" : "VariableDeclarationStatement[4602-4608]:VariableDeclarationStatement[4602-4608]"
    }, {
      "left" : "if (n.getString().equals(\"arguments\"))",
      "right" : "if (n.getString().equals(\"arguments\"))",
      "info" : "IfStatement[4615-4770]:IfStatement[4615-4770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4654-4707]:Block[4654-4707]"
    }, {
      "left" : "v = t.getScope().getArgumentsVar();",
      "right" : "v = t.getScope().getArgumentsVar();",
      "info" : "ExpressionStatement[4664-4699]:ExpressionStatement[4664-4699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4713-4770]:Block[4713-4770]"
    }, {
      "left" : "v = t.getScope().getVar(n.getString());",
      "right" : "v = t.getScope().getVar(n.getString());",
      "info" : "ExpressionStatement[4723-4762]:ExpressionStatement[4723-4762]"
    }, {
      "left" : "if (v != null && varFilter.apply(v))",
      "right" : "if (v != null && varFilter.apply(v))",
      "info" : "IfStatement[4777-4888]:IfStatement[4777-4888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4814-4888]:Block[4814-4888]"
    }, {
      "left" : "addReference(v, new Reference(n, t, blockStack.peek()));",
      "right" : "addReference(v, new Reference(n, t, blockStack.peek()));",
      "info" : "ExpressionStatement[4824-4880]:ExpressionStatement[4824-4880]"
    }, {
      "left" : "if (isBlockBoundary(n, parent))",
      "right" : "if (isBlockBoundary(n, parent))",
      "info" : "IfStatement[4900-4963]:IfStatement[4900-4963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4932-4963]:Block[4932-4963]"
    }, {
      "left" : "blockStack.pop();",
      "right" : "blockStack.pop();",
      "info" : "ExpressionStatement[4940-4957]:ExpressionStatement[4940-4957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5097-5264]:Block[5097-5264]"
    }, {
      "left" : "Node n = t.getScope().getRootNode();",
      "right" : "Node n = t.getScope().getRootNode();",
      "info" : "VariableDeclarationStatement[5103-5139]:VariableDeclarationStatement[5103-5139]"
    }, {
      "left" : "BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();",
      "right" : "BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();",
      "info" : "VariableDeclarationStatement[5144-5212]:VariableDeclarationStatement[5144-5212]"
    }, {
      "left" : "blockStack.push(new BasicBlock(parent, n));",
      "right" : "blockStack.push(new BasicBlock(parent, n));",
      "info" : "ExpressionStatement[5217-5260]:ExpressionStatement[5217-5260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5393-5761]:Block[5393-5761]"
    }, {
      "left" : "blockStack.pop();",
      "right" : "blockStack.pop();",
      "info" : "ExpressionStatement[5399-5416]:ExpressionStatement[5399-5416]"
    }, {
      "left" : "if (t.getScope().isGlobal())",
      "right" : "if (t.getScope().isGlobal())",
      "info" : "IfStatement[5421-5757]:IfStatement[5421-5757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5450-5671]:Block[5450-5671]"
    }, {
      "left" : "compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());",
      "right" : "compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());",
      "info" : "ExpressionStatement[5529-5596]:ExpressionStatement[5529-5596]"
    }, {
      "left" : "behavior.afterExitScope(t, compiler.getGlobalVarReferences());",
      "right" : "behavior.afterExitScope(t, compiler.getGlobalVarReferences());",
      "info" : "ExpressionStatement[5603-5665]:ExpressionStatement[5603-5665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5677-5757]:Block[5677-5757]"
    }, {
      "left" : "behavior.afterExitScope(t, new ReferenceMapWrapper(referenceMap));",
      "right" : "behavior.afterExitScope(t, new ReferenceMapWrapper(referenceMap));",
      "info" : "ExpressionStatement[5685-5751]:ExpressionStatement[5685-5751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5901-6090]:Block[5901-6090]"
    }, {
      "left" : "if (isBlockBoundary(n, parent))",
      "right" : "if (isBlockBoundary(n, parent))",
      "info" : "IfStatement[5969-6069]:IfStatement[5969-6069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6001-6069]:Block[6001-6069]"
    }, {
      "left" : "blockStack.push(new BasicBlock(blockStack.peek(), n));",
      "right" : "blockStack.push(new BasicBlock(blockStack.peek(), n));",
      "info" : "ExpressionStatement[6009-6063]:ExpressionStatement[6009-6063]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6074-6086]:ReturnStatement[6074-6086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6234-7068]:Block[6234-7068]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[6240-7040]:IfStatement[6240-7040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6260-7040]:Block[6260-7040]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.DO:\n        case Token.FOR:\n        case Token.TRY:\n        case Token.WHILE:\n        case Token.WITH:\n          // NOTE: TRY has up to 3 child blocks:\n          // TRY\n          //   BLOCK\n          //   BLOCK\n          //     CATCH\n          //   BLOCK\n          // Note that there is an explicit CATCH token but no explicit\n          // FINALLY token. For simplicity, we consider each BLOCK\n          // a separate basic BLOCK.\n          return true;\n        case Token.AND:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.OR:\n          // The first child of a conditional is not a boundary,\n          // but all the rest of the children are.\n          return n != parent.getFirstChild();\n\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.DO:\n        case Token.FOR:\n        case Token.TRY:\n        case Token.WHILE:\n        case Token.WITH:\n          // NOTE: TRY has up to 3 child blocks:\n          // TRY\n          //   BLOCK\n          //   BLOCK\n          //     CATCH\n          //   BLOCK\n          // Note that there is an explicit CATCH token but no explicit\n          // FINALLY token. For simplicity, we consider each BLOCK\n          // a separate basic BLOCK.\n          return true;\n        case Token.AND:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.OR:\n          // The first child of a conditional is not a boundary,\n          // but all the rest of the children are.\n          return n != parent.getFirstChild();\n\n      }",
      "info" : "SwitchStatement[6268-7034]:SwitchStatement[6268-7034]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[6304-6318]:SwitchCase[6304-6318]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[6327-6342]:SwitchCase[6327-6342]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[6351-6366]:SwitchCase[6351-6366]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[6375-6392]:SwitchCase[6375-6392]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[6401-6417]:SwitchCase[6401-6417]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6756-6768]:ReturnStatement[6756-6768]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[6777-6792]:SwitchCase[6777-6792]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[6801-6817]:SwitchCase[6801-6817]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[6826-6840]:SwitchCase[6826-6840]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[6849-6863]:SwitchCase[6849-6863]"
    }, {
      "left" : "return n != parent.getFirstChild();",
      "right" : "return n != parent.getFirstChild();",
      "info" : "ReturnStatement[6990-7025]:ReturnStatement[6990-7025]"
    }, {
      "left" : "return n.isCase();",
      "right" : "return n.isCase();",
      "info" : "ReturnStatement[7046-7064]:ReturnStatement[7046-7064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7126-7435]:Block[7126-7435]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "info" : "VariableDeclarationStatement[7173-7229]:VariableDeclarationStatement[7173-7229]"
    }, {
      "left" : "if (referenceInfo == null)",
      "right" : "if (referenceInfo == null)",
      "info" : "IfStatement[7234-7359]:IfStatement[7234-7359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7261-7359]:Block[7261-7359]"
    }, {
      "left" : "referenceInfo = new ReferenceCollection();",
      "right" : "referenceInfo = new ReferenceCollection();",
      "info" : "ExpressionStatement[7269-7311]:ExpressionStatement[7269-7311]"
    }, {
      "left" : "referenceMap.put(v, referenceInfo);",
      "right" : "referenceMap.put(v, referenceInfo);",
      "info" : "ExpressionStatement[7318-7353]:ExpressionStatement[7318-7353]"
    }, {
      "left" : "referenceInfo.add(reference);",
      "right" : "referenceInfo.add(reference);",
      "info" : "ExpressionStatement[7402-7431]:ExpressionStatement[7402-7431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7724-7771]:Block[7724-7771]"
    }, {
      "left" : "this.referenceMap = referenceMap;",
      "right" : "this.referenceMap = referenceMap;",
      "info" : "ExpressionStatement[7732-7765]:ExpressionStatement[7732-7765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7841-7884]:Block[7841-7884]"
    }, {
      "left" : "return referenceMap.get(var);",
      "right" : "return referenceMap.get(var);",
      "info" : "ReturnStatement[7849-7878]:ReturnStatement[7849-7878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8329-8331]:Block[8329-8331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8642-8685]:Block[8642-8685]"
    }, {
      "left" : "return references.iterator();",
      "right" : "return references.iterator();",
      "info" : "ReturnStatement[8650-8679]:ReturnStatement[8650-8679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8721-8761]:Block[8721-8761]"
    }, {
      "left" : "references.add(reference);",
      "right" : "references.add(reference);",
      "info" : "ExpressionStatement[8729-8755]:ExpressionStatement[8729-8755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9240-9871]:Block[9240-9871]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[9248-9277]:VariableDeclarationStatement[9248-9277]"
    }, {
      "left" : "if (size == 0)",
      "right" : "if (size == 0)",
      "info" : "IfStatement[9284-9330]:IfStatement[9284-9330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9299-9330]:Block[9299-9330]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9309-9322]:ReturnStatement[9309-9322]"
    }, {
      "left" : "Reference init = getInitializingReference();",
      "right" : "Reference init = getInitializingReference();",
      "info" : "VariableDeclarationStatement[9444-9488]:VariableDeclarationStatement[9444-9488]"
    }, {
      "left" : "if (init == null)",
      "right" : "if (init == null)",
      "info" : "IfStatement[9495-9544]:IfStatement[9495-9544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9513-9544]:Block[9513-9544]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9523-9536]:ReturnStatement[9523-9536]"
    }, {
      "left" : "Preconditions.checkState(references.get(0).isDeclaration());",
      "right" : "Preconditions.checkState(references.get(0).isDeclaration());",
      "info" : "ExpressionStatement[9552-9612]:ExpressionStatement[9552-9612]"
    }, {
      "left" : "BasicBlock initBlock = init.getBasicBlock();",
      "right" : "BasicBlock initBlock = init.getBasicBlock();",
      "info" : "VariableDeclarationStatement[9619-9663]:VariableDeclarationStatement[9619-9663]"
    }, {
      "left" : "for (int i = 1; i < size; i++)",
      "right" : "for (int i = 1; i < size; i++)",
      "info" : "ForStatement[9670-9845]:ForStatement[9670-9845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9701-9845]:Block[9701-9845]"
    }, {
      "left" : "if (!initBlock.provablyExecutesBefore(\n                references.get(i).getBasicBlock()))",
      "right" : "if (!initBlock.provablyExecutesBefore(\n                references.get(i).getBasicBlock()))",
      "info" : "IfStatement[9711-9837]:IfStatement[9711-9837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9802-9837]:Block[9802-9837]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9814-9827]:ReturnStatement[9814-9827]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9853-9865]:ReturnStatement[9853-9865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9973-10207]:Block[9973-10207]"
    }, {
      "left" : "Scope scope = null;",
      "right" : "Scope scope = null;",
      "info" : "VariableDeclarationStatement[9981-10000]:VariableDeclarationStatement[9981-10000]"
    }, {
      "left" : "for (Reference ref : references)",
      "right" : "for (Reference ref : references)",
      "info" : "EnhancedForStatement[10007-10181]:EnhancedForStatement[10007-10181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10040-10181]:Block[10040-10181]"
    }, {
      "left" : "if (scope == null)",
      "right" : "if (scope == null)",
      "info" : "IfStatement[10050-10173]:IfStatement[10050-10173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10069-10109]:Block[10069-10109]"
    }, {
      "left" : "scope = ref.scope;",
      "right" : "scope = ref.scope;",
      "info" : "ExpressionStatement[10081-10099]:ExpressionStatement[10081-10099]"
    }, {
      "left" : "if (scope != ref.scope)",
      "right" : "if (scope != ref.scope)",
      "info" : "IfStatement[10115-10173]:IfStatement[10115-10173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10139-10173]:Block[10139-10173]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10151-10163]:ReturnStatement[10151-10163]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10188-10201]:ReturnStatement[10188-10201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10522-10847]:Block[10522-10847]"
    }, {
      "left" : "Reference maybeInit = references.get(index);",
      "right" : "Reference maybeInit = references.get(index);",
      "info" : "VariableDeclarationStatement[10530-10574]:VariableDeclarationStatement[10530-10574]"
    }, {
      "left" : "if (maybeInit.isInitializingDeclaration())",
      "right" : "if (maybeInit.isInitializingDeclaration())",
      "info" : "IfStatement[10581-10821]:IfStatement[10581-10821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10624-10821]:Block[10624-10821]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10801-10813]:ReturnStatement[10801-10813]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10828-10841]:ReturnStatement[10828-10841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11160-11580]:Block[11160-11580]"
    }, {
      "left" : "if (index < references.size() && index > 0)",
      "right" : "if (index < references.size() && index > 0)",
      "info" : "IfStatement[11168-11554]:IfStatement[11168-11554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11212-11554]:Block[11212-11554]"
    }, {
      "left" : "Reference maybeDecl = references.get(index - 1);",
      "right" : "Reference maybeDecl = references.get(index - 1);",
      "info" : "VariableDeclarationStatement[11222-11270]:VariableDeclarationStatement[11222-11270]"
    }, {
      "left" : "if (maybeDecl.isVarDeclaration())",
      "right" : "if (maybeDecl.isVarDeclaration())",
      "info" : "IfStatement[11279-11546]:IfStatement[11279-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11313-11546]:Block[11313-11546]"
    }, {
      "left" : "Preconditions.checkState(!maybeDecl.isInitializingDeclaration());",
      "right" : "Preconditions.checkState(!maybeDecl.isInitializingDeclaration());",
      "info" : "ExpressionStatement[11325-11390]:ExpressionStatement[11325-11390]"
    }, {
      "left" : "Reference maybeInit = references.get(index);",
      "right" : "Reference maybeInit = references.get(index);",
      "info" : "VariableDeclarationStatement[11401-11445]:VariableDeclarationStatement[11401-11445]"
    }, {
      "left" : "if (maybeInit.isSimpleAssignmentToName())",
      "right" : "if (maybeInit.isSimpleAssignmentToName())",
      "info" : "IfStatement[11456-11536]:IfStatement[11456-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11498-11536]:Block[11498-11536]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11512-11524]:ReturnStatement[11512-11524]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11561-11574]:ReturnStatement[11561-11574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11919-12115]:Block[11919-12115]"
    }, {
      "left" : "if (isInitializingDeclarationAt(0))",
      "right" : "if (isInitializingDeclarationAt(0))",
      "info" : "IfStatement[11927-12090]:IfStatement[11927-12090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11963-12006]:Block[11963-12006]"
    }, {
      "left" : "return references.get(0);",
      "right" : "return references.get(0);",
      "info" : "ReturnStatement[11973-11998]:ReturnStatement[11973-11998]"
    }, {
      "left" : "if (isInitializingAssignmentAt(1))",
      "right" : "if (isInitializingAssignmentAt(1))",
      "info" : "IfStatement[12012-12090]:IfStatement[12012-12090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12047-12090]:Block[12047-12090]"
    }, {
      "left" : "return references.get(1);",
      "right" : "return references.get(1);",
      "info" : "ReturnStatement[12057-12082]:ReturnStatement[12057-12082]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12097-12109]:ReturnStatement[12097-12109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12252-12486]:Block[12252-12486]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[12260-12289]:VariableDeclarationStatement[12260-12289]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[12296-12461]:ForStatement[12296-12461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12327-12461]:Block[12327-12461]"
    }, {
      "left" : "if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i))",
      "right" : "if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i))",
      "info" : "IfStatement[12337-12453]:IfStatement[12337-12453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12406-12453]:Block[12406-12453]"
    }, {
      "left" : "return references.get(i);",
      "right" : "return references.get(i);",
      "info" : "ReturnStatement[12418-12443]:ReturnStatement[12418-12443]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12468-12480]:ReturnStatement[12468-12480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13217-13607]:Block[13312-13702]"
    }, {
      "left" : "Reference assignment = null;",
      "right" : "Reference assignment = null;",
      "info" : "VariableDeclarationStatement[13225-13253]:VariableDeclarationStatement[13320-13348]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[13260-13289]:VariableDeclarationStatement[13355-13384]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[13296-13576]:ForStatement[13391-13671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13327-13576]:Block[13422-13671]"
    }, {
      "left" : "Reference ref = references.get(i);",
      "right" : "Reference ref = references.get(i);",
      "info" : "VariableDeclarationStatement[13337-13371]:VariableDeclarationStatement[13432-13466]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[13380-13568]:IfStatement[13475-13663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13435-13568]:Block[13530-13663]"
    }, {
      "left" : "if (assignment == null)",
      "right" : "if (assignment == null)",
      "info" : "IfStatement[13447-13558]:IfStatement[13542-13653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13471-13514]:Block[13566-13609]"
    }, {
      "left" : "assignment = ref;",
      "right" : "assignment = ref;",
      "info" : "ExpressionStatement[13485-13502]:ExpressionStatement[13580-13597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13520-13558]:Block[13615-13653]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13534-13546]:ReturnStatement[13629-13641]"
    }, {
      "left" : "return assignment;",
      "right" : "return assignment;",
      "info" : "ReturnStatement[13583-13601]:ReturnStatement[13678-13696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13718-13969]:Block[13813-14064]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[13726-13755]:VariableDeclarationStatement[13821-13850]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[13762-13944]:ForStatement[13857-14039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13793-13944]:Block[13888-14039]"
    }, {
      "left" : "Reference ref = references.get(i);",
      "right" : "Reference ref = references.get(i);",
      "info" : "VariableDeclarationStatement[13803-13837]:VariableDeclarationStatement[13898-13932]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[13846-13936]:IfStatement[13941-14031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13901-13936]:Block[13996-14031]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13913-13926]:ReturnStatement[14008-14021]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13951-13963]:ReturnStatement[14046-14058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14022-14185]:Block[14117-14280]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[14030-14059]:VariableDeclarationStatement[14125-14154]"
    }, {
      "left" : "if (size > 0 && references.get(0).isInitializingDeclaration())",
      "right" : "if (size > 0 && references.get(0).isInitializingDeclaration())",
      "info" : "IfStatement[14066-14159]:IfStatement[14161-14254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14129-14159]:Block[14224-14254]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14139-14151]:ReturnStatement[14234-14246]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14166-14179]:ReturnStatement[14261-14274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14728-14810]:Block[14823-14905]"
    }, {
      "left" : "this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());",
      "right" : "this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());",
      "info" : "ConstructorInvocation[14736-14804]:ConstructorInvocation[14831-14899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15052-15172]:Block[15147-15267]"
    }, {
      "left" : "return new Reference(func.getFirstChild(),\n          basicBlock, t.getScope(), t.getInput().getInputId());",
      "right" : "return new Reference(func.getFirstChild(),\n          basicBlock, t.getScope(), t.getInput().getInputId());",
      "info" : "ReturnStatement[15060-15166]:ReturnStatement[15155-15261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15397-15496]:Block[15492-15591]"
    }, {
      "left" : "return new Reference(new Node(Token.NAME), null, null,\n          input.getInputId());",
      "right" : "return new Reference(new Node(Token.NAME), null, null,\n          input.getInputId());",
      "info" : "ReturnStatement[15405-15490]:ReturnStatement[15500-15585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15596-15783]:Block[15691-15878]"
    }, {
      "left" : "this.nameNode = nameNode;",
      "right" : "this.nameNode = nameNode;",
      "info" : "ExpressionStatement[15604-15629]:ExpressionStatement[15699-15724]"
    }, {
      "left" : "this.basicBlock = basicBlock;",
      "right" : "this.basicBlock = basicBlock;",
      "info" : "ExpressionStatement[15636-15665]:ExpressionStatement[15731-15760]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[15672-15691]:ExpressionStatement[15767-15786]"
    }, {
      "left" : "this.inputId = inputId;",
      "right" : "this.inputId = inputId;",
      "info" : "ExpressionStatement[15698-15721]:ExpressionStatement[15793-15816]"
    }, {
      "left" : "this.sourceFile = nameNode.getStaticSourceFile();",
      "right" : "this.sourceFile = nameNode.getStaticSourceFile();",
      "info" : "ExpressionStatement[15728-15777]:ExpressionStatement[15823-15872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15922-15998]:Block[16017-16093]"
    }, {
      "left" : "return new Reference(nameNode, basicBlock, newScope, inputId);",
      "right" : "return new Reference(nameNode, basicBlock, newScope, inputId);",
      "info" : "ReturnStatement[15930-15992]:ReturnStatement[16025-16087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16041-16097]:Block[16136-16192]"
    }, {
      "left" : "return scope.getVar(nameNode.getString());",
      "right" : "return scope.getVar(nameNode.getString());",
      "info" : "ReturnStatement[16049-16091]:ReturnStatement[16144-16186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16139-16169]:Block[16234-16264]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[16147-16163]:ReturnStatement[16242-16258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16203-16232]:Block[16298-16327]"
    }, {
      "left" : "return inputId;",
      "right" : "return inputId;",
      "info" : "ReturnStatement[16211-16226]:ReturnStatement[16306-16321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16292-16324]:Block[16387-16419]"
    }, {
      "left" : "return sourceFile;",
      "right" : "return sourceFile;",
      "info" : "ReturnStatement[16300-16318]:ReturnStatement[16395-16413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16354-16572]:Block[16449-16667]"
    }, {
      "left" : "Node parent = getParent();",
      "right" : "Node parent = getParent();",
      "info" : "VariableDeclarationStatement[16362-16388]:VariableDeclarationStatement[16457-16483]"
    }, {
      "left" : "Node grandparent = parent.getParent();",
      "right" : "Node grandparent = parent.getParent();",
      "info" : "VariableDeclarationStatement[16395-16433]:VariableDeclarationStatement[16490-16528]"
    }, {
      "left" : "return DECLARATION_PARENTS.contains(parent.getType()) ||\n          parent.isParamList() &&\n          grandparent.isFunction();",
      "right" : "return DECLARATION_PARENTS.contains(parent.getType()) ||\n          parent.isParamList() &&\n          grandparent.isFunction();",
      "info" : "ReturnStatement[16440-16566]:ReturnStatement[16535-16661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16605-16646]:Block[16700-16741]"
    }, {
      "left" : "return getParent().isVar();",
      "right" : "return getParent().isVar();",
      "info" : "ReturnStatement[16613-16640]:ReturnStatement[16708-16735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16680-16752]:Block[16775-16847]"
    }, {
      "left" : "return NodeUtil.isHoistedFunctionDeclaration(getParent());",
      "right" : "return NodeUtil.isHoistedFunctionDeclaration(getParent());",
      "info" : "ReturnStatement[16688-16746]:ReturnStatement[16783-16841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16884-17156]:Block[16979-17251]"
    }, {
      "left" : "return isDeclaration() &&\n          !getParent().isVar() ||\n          nameNode.getFirstChild() != null;",
      "right" : "return isDeclaration() &&\n          !getParent().isVar() ||\n          nameNode.getFirstChild() != null;",
      "info" : "ReturnStatement[17047-17150]:ReturnStatement[17142-17245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17328-17461]:Block[17423-17556]"
    }, {
      "left" : "Node parent = getParent();",
      "right" : "Node parent = getParent();",
      "info" : "VariableDeclarationStatement[17336-17362]:VariableDeclarationStatement[17431-17457]"
    }, {
      "left" : "return (parent.isFunction())\n          ? parent : NodeUtil.getAssignedValue(nameNode);",
      "right" : "return (parent.isFunction())\n          ? parent : NodeUtil.getAssignedValue(nameNode);",
      "info" : "ReturnStatement[17369-17455]:ReturnStatement[17464-17550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17494-17526]:Block[17589-17621]"
    }, {
      "left" : "return basicBlock;",
      "right" : "return basicBlock;",
      "info" : "ReturnStatement[17502-17520]:ReturnStatement[17597-17615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17549-17592]:Block[17644-17687]"
    }, {
      "left" : "return getNode().getParent();",
      "right" : "return getNode().getParent();",
      "info" : "ReturnStatement[17557-17586]:ReturnStatement[17652-17681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17620-17717]:Block[17715-17812]"
    }, {
      "left" : "Node parent = getParent();",
      "right" : "Node parent = getParent();",
      "info" : "VariableDeclarationStatement[17628-17654]:VariableDeclarationStatement[17723-17749]"
    }, {
      "left" : "return parent == null ? null : parent.getParent();",
      "right" : "return parent == null ? null : parent.getParent();",
      "info" : "ReturnStatement[17661-17711]:ReturnStatement[17756-17806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17777-17972]:Block[17872-18067]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[17785-17813]:VariableDeclarationStatement[17880-17908]"
    }, {
      "left" : "if (parent.isVar())",
      "right" : "if (parent.isVar())",
      "info" : "IfStatement[17820-17896]:IfStatement[17915-17991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17840-17896]:Block[17935-17991]"
    }, {
      "left" : "return isLhsOfForInExpression(parent);",
      "right" : "return isLhsOfForInExpression(parent);",
      "info" : "ReturnStatement[17850-17888]:ReturnStatement[17945-17983]"
    }, {
      "left" : "return NodeUtil.isForIn(parent) && parent.getFirstChild() == n;",
      "right" : "return NodeUtil.isForIn(parent) && parent.getFirstChild() == n;",
      "info" : "ReturnStatement[17903-17966]:ReturnStatement[17998-18061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18013-18133]:Block[18108-18228]"
    }, {
      "left" : "Node parent = getParent();",
      "right" : "Node parent = getParent();",
      "info" : "VariableDeclarationStatement[18021-18047]:VariableDeclarationStatement[18116-18142]"
    }, {
      "left" : "return parent.isAssign()\n          && parent.getFirstChild() == nameNode;",
      "right" : "return parent.isAssign()\n          && parent.getFirstChild() == nameNode;",
      "info" : "ReturnStatement[18054-18127]:ReturnStatement[18149-18222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18158-18534]:Block[18253-18629]"
    }, {
      "left" : "Node parent = getParent();",
      "right" : "Node parent = getParent();",
      "info" : "VariableDeclarationStatement[18166-18192]:VariableDeclarationStatement[18261-18287]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[18199-18233]:VariableDeclarationStatement[18294-18328]"
    }, {
      "left" : "return (parentType == Token.VAR && nameNode.getFirstChild() != null)\n          || parentType == Token.INC\n          || parentType == Token.DEC\n          || (NodeUtil.isAssignmentOp(parent)\n              && parent.getFirstChild() == nameNode)\n          || isLhsOfForInExpression(nameNode);",
      "right" : "return (parentType == Token.VAR && nameNode.getFirstChild() != null)\n          || parentType == Token.INC\n          || parentType == Token.DEC\n          || (NodeUtil.isAssignmentOp(parent)\n              && parent.getFirstChild() == nameNode)\n          || isLhsOfForInExpression(nameNode);",
      "info" : "ReturnStatement[18240-18528]:ReturnStatement[18335-18623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18557-18584]:Block[18652-18679]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[18565-18578]:ReturnStatement[18660-18673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19359-19803]:Block[19454-19898]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[19367-19388]:ExpressionStatement[19462-19483]"
    }, {
      "left" : "this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);",
      "right" : "this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);",
      "info" : "ExpressionStatement[19442-19503]:ExpressionStatement[19537-19598]"
    }, {
      "left" : "this.isFunction = root.isFunction();",
      "right" : "this.isFunction = root.isFunction();",
      "info" : "ExpressionStatement[19511-19547]:ExpressionStatement[19606-19642]"
    }, {
      "left" : "if (root.getParent() != null)",
      "right" : "if (root.getParent() != null)",
      "info" : "IfStatement[19555-19797]:IfStatement[19650-19892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19585-19753]:Block[19680-19848]"
    }, {
      "left" : "int pType = root.getParent().getType();",
      "right" : "int pType = root.getParent().getType();",
      "info" : "VariableDeclarationStatement[19595-19634]:VariableDeclarationStatement[19690-19729]"
    }, {
      "left" : "this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;",
      "right" : "this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;",
      "info" : "ExpressionStatement[19643-19745]:ExpressionStatement[19738-19840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19759-19797]:Block[19854-19892]"
    }, {
      "left" : "this.isLoop = false;",
      "right" : "this.isLoop = false;",
      "info" : "ExpressionStatement[19769-19789]:ExpressionStatement[19864-19884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19832-19860]:Block[19927-19955]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[19840-19854]:ReturnStatement[19935-19949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20251-20292]:Block[20346-20387]"
    }, {
      "left" : "return getParent() == null;",
      "right" : "return getParent() == null;",
      "info" : "ReturnStatement[20259-20286]:ReturnStatement[20354-20381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20473-21073]:Block[20568-21168]"
    }, {
      "left" : "BasicBlock currentBlock;",
      "right" : "BasicBlock currentBlock;",
      "info" : "VariableDeclarationStatement[20634-20658]:VariableDeclarationStatement[20729-20753]"
    }, {
      "left" : "for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent())",
      "right" : "for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent())",
      "info" : "ForStatement[20665-20886]:ForStatement[20760-20981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20805-20886]:Block[20900-20981]"
    }, {
      "left" : "if (currentBlock.isHoisted)",
      "right" : "if (currentBlock.isHoisted)",
      "info" : "IfStatement[20815-20878]:IfStatement[20910-20973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20843-20878]:Block[20938-20973]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20855-20868]:ReturnStatement[20950-20963]"
    }, {
      "left" : "if (currentBlock == this)",
      "right" : "if (currentBlock == this)",
      "info" : "IfStatement[20894-20950]:IfStatement[20989-21045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20920-20950]:Block[21015-21045]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20930-20942]:ReturnStatement[21025-21037]"
    }, {
      "left" : "if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock())",
      "right" : "if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock())",
      "info" : "IfStatement[20957-21047]:IfStatement[21052-21142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21017-21047]:Block[21112-21142]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21027-21039]:ReturnStatement[21122-21134]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21054-21067]:ReturnStatement[21149-21162]"
    } ]
  },
  "interFileMappings" : { }
}