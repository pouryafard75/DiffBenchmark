{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeInference",
      "right" : "TypeInference",
      "info" : "TypeDeclaration[2479-49447]:TypeDeclaration[2479-49373]"
    }, {
      "left" : "static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE =\n      DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\",\n      \"The template type must be an object type.\\nActual: {0}\");",
      "right" : "static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE =\n      DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\",\n      \"The template type must be an object type.\\nActual: {0}\");",
      "info" : "FieldDeclaration[2694-2891]:FieldDeclaration[2694-2891]"
    }, {
      "left" : "static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED =\n      DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\",\n      \"A function type with the template type as the type of this must be a \" +\n      \"parameter type\");",
      "right" : "static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED =\n      DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\",\n      \"A function type with the template type as the type of this must be a \" +\n      \"parameter type\");",
      "info" : "FieldDeclaration[2895-3134]:FieldDeclaration[2895-3134]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n    DiagnosticType.warning(\n        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n        \"Function literal argument refers to undefined this argument\");",
      "right" : "static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n    DiagnosticType.warning(\n        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n        \"Function literal argument refers to undefined this argument\");",
      "info" : "FieldDeclaration[3138-3346]:FieldDeclaration[3138-3346]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3350-3390]:FieldDeclaration[3350-3390]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[3393-3431]:FieldDeclaration[3393-3431]"
    }, {
      "left" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "right" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "info" : "FieldDeclaration[3434-3494]:FieldDeclaration[3434-3494]"
    }, {
      "left" : "private final Scope syntacticScope;",
      "right" : "private final Scope syntacticScope;",
      "info" : "FieldDeclaration[3497-3532]:FieldDeclaration[3497-3532]"
    }, {
      "left" : "private final FlowScope functionScope;",
      "right" : "private final FlowScope functionScope;",
      "info" : "FieldDeclaration[3535-3573]:FieldDeclaration[3535-3573]"
    }, {
      "left" : "private final FlowScope bottomScope;",
      "right" : "private final FlowScope bottomScope;",
      "info" : "FieldDeclaration[3576-3612]:FieldDeclaration[3576-3612]"
    }, {
      "left" : "private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
      "right" : "private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
      "info" : "FieldDeclaration[3615-3686]:FieldDeclaration[3615-3686]"
    }, {
      "left" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,\n                ReverseAbstractInterpreter reverseInterpreter,\n                Scope functionScope,\n                Map<String, AssertionFunctionSpec> assertionFunctionsMap)",
      "right" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,\n                ReverseAbstractInterpreter reverseInterpreter,\n                Scope functionScope,\n                Map<String, AssertionFunctionSpec> assertionFunctionsMap)",
      "info" : "MethodDeclaration[3690-4835]:MethodDeclaration[3690-4835]"
    }, {
      "left" : "FlowScope createInitialEstimateLattice()",
      "right" : "FlowScope createInitialEstimateLattice()",
      "info" : "MethodDeclaration[4839-4921]:MethodDeclaration[4839-4921]"
    }, {
      "left" : "FlowScope createEntryLattice()",
      "right" : "FlowScope createEntryLattice()",
      "info" : "MethodDeclaration[4925-4999]:MethodDeclaration[4925-4999]"
    }, {
      "left" : "FlowScope flowThrough(Node n, FlowScope input)",
      "right" : "FlowScope flowThrough(Node n, FlowScope input)",
      "info" : "MethodDeclaration[5003-5351]:MethodDeclaration[5003-5351]"
    }, {
      "left" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
      "right" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
      "info" : "MethodDeclaration[5355-10011]:MethodDeclaration[5355-10011]"
    }, {
      "left" : "private FlowScope traverse(Node n, FlowScope scope)",
      "right" : "private FlowScope traverse(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[10015-14147]:MethodDeclaration[10015-14147]"
    }, {
      "left" : "private FlowScope traverseReturn(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseReturn(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[14151-14689]:MethodDeclaration[14151-14689]"
    }, {
      "left" : "private FlowScope traverseCatch(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseCatch(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[14693-15080]:MethodDeclaration[14693-15080]"
    }, {
      "left" : "private FlowScope traverseAssign(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseAssign(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[15084-15450]:MethodDeclaration[15084-15450]"
    }, {
      "left" : "private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType)",
      "right" : "private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType)",
      "info" : "MethodDeclaration[15454-17365]:MethodDeclaration[15454-17365]"
    }, {
      "left" : "private void ensurePropertyDefined(Node getprop, JSType rightType)",
      "right" : "private void ensurePropertyDefined(Node getprop, JSType rightType)",
      "info" : "MethodDeclaration[17369-19380]:MethodDeclaration[17369-19380]"
    }, {
      "left" : "private void ensurePropertyDeclared(Node getprop)",
      "right" : "private void ensurePropertyDeclared(Node getprop)",
      "info" : "MethodDeclaration[19384-19917]:MethodDeclaration[19384-19917]"
    }, {
      "left" : "private boolean ensurePropertyDeclaredHelper(\n      Node getprop, ObjectType objectType)",
      "right" : "private boolean ensurePropertyDeclaredHelper(\n      Node getprop, ObjectType objectType)",
      "info" : "MethodDeclaration[19921-20866]:MethodDeclaration[19921-20866]"
    }, {
      "left" : "private FlowScope traverseName(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseName(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[20870-22290]:MethodDeclaration[20870-22290]"
    }, {
      "left" : "private FlowScope traverseArrayLiteral(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseArrayLiteral(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[22294-22510]:MethodDeclaration[22294-22510]"
    }, {
      "left" : "private FlowScope traverseObjectLiteral(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseObjectLiteral(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[22514-24775]:MethodDeclaration[22514-24775]"
    }, {
      "left" : "private FlowScope traverseAdd(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseAdd(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[24779-25943]:MethodDeclaration[24779-25943]"
    }, {
      "left" : "private boolean isAddedAsNumber(JSType type)",
      "right" : "private boolean isAddedAsNumber(JSType type)",
      "info" : "MethodDeclaration[25947-26144]:MethodDeclaration[25947-26144]"
    }, {
      "left" : "private FlowScope traverseHook(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseHook(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[26148-27294]:MethodDeclaration[26148-27294]"
    }, {
      "left" : "private FlowScope traverseCall(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseCall(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[27298-27965]:MethodDeclaration[27298-27965]"
    }, {
      "left" : "private FlowScope tightenTypesAfterAssertions(FlowScope scope,\n      Node callNode)",
      "right" : "private FlowScope tightenTypesAfterAssertions(FlowScope scope,\n      Node callNode)",
      "info" : "MethodDeclaration[27969-29481]:MethodDeclaration[27969-29481]"
    }, {
      "left" : "private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed)",
      "right" : "private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed)",
      "info" : "MethodDeclaration[29485-29953]:MethodDeclaration[29485-29953]"
    }, {
      "left" : "private void backwardsInferenceFromCallSite(Node n, FunctionType fnType)",
      "right" : "private void backwardsInferenceFromCallSite(Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[29957-31065]:MethodDeclaration[29957-31065]"
    }, {
      "left" : "private void updateBind(Node n, FunctionType fnType)",
      "right" : "private void updateBind(Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[31069-31796]:MethodDeclaration[31069-31796]"
    }, {
      "left" : "private void updateTypeOfParameters(Node n, FunctionType fnType)",
      "right" : "private void updateTypeOfParameters(Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[31800-32827]:MethodDeclaration[31800-32827]"
    }, {
      "left" : "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType)",
      "right" : "private void updateTypeOfThisOnClosure(Node n, FunctionType fnType)",
      "info" : "MethodDeclaration[32831-36684]:MethodDeclaration[32831-36684]"
    }, {
      "left" : "private FlowScope traverseNew(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseNew(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[36688-37814]:MethodDeclaration[36688-37740]"
    }, {
      "left" : "private BooleanOutcomePair traverseAnd(Node n, FlowScope scope)",
      "right" : "private BooleanOutcomePair traverseAnd(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[37818-37944]:MethodDeclaration[37744-37870]"
    }, {
      "left" : "private FlowScope traverseChildren(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseChildren(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[37948-38143]:MethodDeclaration[37874-38069]"
    }, {
      "left" : "private FlowScope traverseGetElem(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseGetElem(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[38147-38562]:MethodDeclaration[38073-38488]"
    }, {
      "left" : "private FlowScope traverseGetProp(Node n, FlowScope scope)",
      "right" : "private FlowScope traverseGetProp(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[38566-38912]:MethodDeclaration[38492-38838]"
    }, {
      "left" : "private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint)",
      "right" : "private void inferPropertyTypesToMatchConstraint(\n      JSType type, JSType constraint)",
      "info" : "MethodDeclaration[38916-39787]:MethodDeclaration[38842-39713]"
    }, {
      "left" : "private FlowScope dereferencePointer(Node n, FlowScope scope)",
      "right" : "private FlowScope dereferencePointer(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[39791-40197]:MethodDeclaration[39717-40123]"
    }, {
      "left" : "private JSType getPropertyType(JSType objType, String propName,\n      Node n, FlowScope scope)",
      "right" : "private JSType getPropertyType(JSType objType, String propName,\n      Node n, FlowScope scope)",
      "info" : "MethodDeclaration[40201-41455]:MethodDeclaration[40127-41381]"
    }, {
      "left" : "private BooleanOutcomePair traverseOr(Node n, FlowScope scope)",
      "right" : "private BooleanOutcomePair traverseOr(Node n, FlowScope scope)",
      "info" : "MethodDeclaration[41459-41585]:MethodDeclaration[41385-41511]"
    }, {
      "left" : "private BooleanOutcomePair traverseShortCircuitingBinOp(\n      Node n, FlowScope scope, boolean condition)",
      "right" : "private BooleanOutcomePair traverseShortCircuitingBinOp(\n      Node n, FlowScope scope, boolean condition)",
      "info" : "MethodDeclaration[41589-43948]:MethodDeclaration[41515-43874]"
    }, {
      "left" : "private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n,\n      FlowScope scope)",
      "right" : "private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n,\n      FlowScope scope)",
      "info" : "MethodDeclaration[43952-44314]:MethodDeclaration[43878-44240]"
    }, {
      "left" : "BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left,\n      BooleanOutcomePair right, boolean condition)",
      "right" : "BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left,\n      BooleanOutcomePair right, boolean condition)",
      "info" : "MethodDeclaration[44318-44950]:MethodDeclaration[44244-44876]"
    }, {
      "left" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left,\n      BooleanLiteralSet right, boolean condition)",
      "right" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left,\n      BooleanLiteralSet right, boolean condition)",
      "info" : "MethodDeclaration[44954-45812]:MethodDeclaration[44880-45738]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "TypeDeclaration[45816-47674]:TypeDeclaration[45742-47600]"
    }, {
      "left" : "final BooleanLiteralSet toBooleanOutcomes;",
      "right" : "final BooleanLiteralSet toBooleanOutcomes;",
      "info" : "FieldDeclaration[46144-46186]:FieldDeclaration[46070-46112]"
    }, {
      "left" : "final BooleanLiteralSet booleanValues;",
      "right" : "final BooleanLiteralSet booleanValues;",
      "info" : "FieldDeclaration[46191-46229]:FieldDeclaration[46117-46155]"
    }, {
      "left" : "final FlowScope leftScope;",
      "right" : "final FlowScope leftScope;",
      "info" : "FieldDeclaration[46310-46336]:FieldDeclaration[46236-46262]"
    }, {
      "left" : "final FlowScope rightScope;",
      "right" : "final FlowScope rightScope;",
      "info" : "FieldDeclaration[46395-46422]:FieldDeclaration[46321-46348]"
    }, {
      "left" : "FlowScope joinedScope = null;",
      "right" : "FlowScope joinedScope = null;",
      "info" : "FieldDeclaration[46504-46533]:FieldDeclaration[46430-46459]"
    }, {
      "left" : "BooleanOutcomePair(\n        BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues,\n        FlowScope leftScope, FlowScope rightScope)",
      "right" : "BooleanOutcomePair(\n        BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues,\n        FlowScope leftScope, FlowScope rightScope)",
      "info" : "MethodDeclaration[46539-46857]:MethodDeclaration[46465-46783]"
    }, {
      "left" : "FlowScope getJoinedFlowScope()",
      "right" : "FlowScope getJoinedFlowScope()",
      "info" : "MethodDeclaration[46863-47247]:MethodDeclaration[46789-47173]"
    }, {
      "left" : "FlowScope getOutcomeFlowScope(int nodeType, boolean outcome)",
      "right" : "FlowScope getOutcomeFlowScope(int nodeType, boolean outcome)",
      "info" : "MethodDeclaration[47253-47670]:MethodDeclaration[47179-47596]"
    }, {
      "left" : "private BooleanOutcomePair newBooleanOutcomePair(\n      JSType jsType, FlowScope flowScope)",
      "right" : "private BooleanOutcomePair newBooleanOutcomePair(\n      JSType jsType, FlowScope flowScope)",
      "info" : "MethodDeclaration[47678-48156]:MethodDeclaration[47604-48082]"
    }, {
      "left" : "private void redeclareSimpleVar(\n      FlowScope scope, Node nameNode, JSType varType)",
      "right" : "private void redeclareSimpleVar(\n      FlowScope scope, Node nameNode, JSType varType)",
      "info" : "MethodDeclaration[48160-48554]:MethodDeclaration[48086-48480]"
    }, {
      "left" : "private boolean isUnflowable(Var v)",
      "right" : "private boolean isUnflowable(Var v)",
      "info" : "MethodDeclaration[48558-48772]:MethodDeclaration[48484-48698]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[48776-49343]:MethodDeclaration[48702-49269]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[49347-49445]:MethodDeclaration[49273-49371]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2592-2597]:TYPE_DECLARATION_KIND[2592-2597]"
    }, {
      "left" : "TypeInference",
      "right" : "TypeInference",
      "info" : "SimpleName[2598-2611]:SimpleName[2598-2611]"
    }, {
      "left" : "TypeInference",
      "right" : "TypeInference",
      "info" : "SimpleName[3690-3703]:SimpleName[3690-3703]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[3704-3729]:SingleVariableDeclaration[3704-3729]"
    }, {
      "left" : "ControlFlowGraph<Node> cfg",
      "right" : "ControlFlowGraph<Node> cfg",
      "info" : "SingleVariableDeclaration[3731-3757]:SingleVariableDeclaration[3731-3757]"
    }, {
      "left" : "ReverseAbstractInterpreter reverseInterpreter",
      "right" : "ReverseAbstractInterpreter reverseInterpreter",
      "info" : "SingleVariableDeclaration[3775-3820]:SingleVariableDeclaration[3775-3820]"
    }, {
      "left" : "Scope functionScope",
      "right" : "Scope functionScope",
      "info" : "SingleVariableDeclaration[3838-3857]:SingleVariableDeclaration[3838-3857]"
    }, {
      "left" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
      "right" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
      "info" : "SingleVariableDeclaration[3875-3931]:SingleVariableDeclaration[3875-3931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3933-4835]:Block[3933-4835]"
    }, {
      "left" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
      "right" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
      "info" : "SuperConstructorInvocation[3939-3989]:SuperConstructorInvocation[3939-3989]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3994-4019]:ExpressionStatement[3994-4019]"
    }, {
      "left" : "this.registry = compiler.getTypeRegistry();",
      "right" : "this.registry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[4024-4067]:ExpressionStatement[4024-4067]"
    }, {
      "left" : "this.reverseInterpreter = reverseInterpreter;",
      "right" : "this.reverseInterpreter = reverseInterpreter;",
      "info" : "ExpressionStatement[4072-4117]:ExpressionStatement[4072-4117]"
    }, {
      "left" : "this.syntacticScope = functionScope;",
      "right" : "this.syntacticScope = functionScope;",
      "info" : "ExpressionStatement[4122-4158]:ExpressionStatement[4122-4158]"
    }, {
      "left" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
      "right" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
      "info" : "ExpressionStatement[4163-4234]:ExpressionStatement[4163-4234]"
    }, {
      "left" : "this.assertionFunctionsMap = assertionFunctionsMap;",
      "right" : "this.assertionFunctionsMap = assertionFunctionsMap;",
      "info" : "ExpressionStatement[4239-4290]:ExpressionStatement[4239-4290]"
    }, {
      "left" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
      "right" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
      "info" : "VariableDeclarationStatement[4389-4475]:VariableDeclarationStatement[4389-4475]"
    }, {
      "left" : "while (varIt.hasNext())",
      "right" : "while (varIt.hasNext())",
      "info" : "WhileStatement[4480-4691]:WhileStatement[4480-4691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4504-4691]:Block[4504-4691]"
    }, {
      "left" : "Var var = varIt.next();",
      "right" : "Var var = varIt.next();",
      "info" : "VariableDeclarationStatement[4512-4535]:VariableDeclarationStatement[4512-4535]"
    }, {
      "left" : "if (isUnflowable(var))",
      "right" : "if (isUnflowable(var))",
      "info" : "IfStatement[4542-4592]:IfStatement[4542-4592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4565-4592]:Block[4565-4592]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[4575-4584]:ContinueStatement[4575-4584]"
    }, {
      "left" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
      "right" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[4600-4685]:ExpressionStatement[4600-4685]"
    }, {
      "left" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));",
      "right" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));",
      "info" : "ExpressionStatement[4697-4831]:ExpressionStatement[4697-4831]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4839-4848]:MarkerAnnotation[4839-4848]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[4851-4860]:SimpleType[4851-4860]"
    }, {
      "left" : "createInitialEstimateLattice",
      "right" : "createInitialEstimateLattice",
      "info" : "SimpleName[4861-4889]:SimpleName[4861-4889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4892-4921]:Block[4892-4921]"
    }, {
      "left" : "return bottomScope;",
      "right" : "return bottomScope;",
      "info" : "ReturnStatement[4898-4917]:ReturnStatement[4898-4917]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4925-4934]:MarkerAnnotation[4925-4934]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[4937-4946]:SimpleType[4937-4946]"
    }, {
      "left" : "createEntryLattice",
      "right" : "createEntryLattice",
      "info" : "SimpleName[4947-4965]:SimpleName[4947-4965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4968-4999]:Block[4968-4999]"
    }, {
      "left" : "return functionScope;",
      "right" : "return functionScope;",
      "info" : "ReturnStatement[4974-4995]:ReturnStatement[4974-4995]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5003-5012]:MarkerAnnotation[5003-5012]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[5015-5024]:SimpleType[5015-5024]"
    }, {
      "left" : "flowThrough",
      "right" : "flowThrough",
      "info" : "SimpleName[5025-5036]:SimpleName[5025-5036]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5037-5043]:SingleVariableDeclaration[5037-5043]"
    }, {
      "left" : "FlowScope input",
      "right" : "FlowScope input",
      "info" : "SingleVariableDeclaration[5045-5060]:SingleVariableDeclaration[5045-5060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5062-5351]:Block[5062-5351]"
    }, {
      "left" : "if (input == bottomScope)",
      "right" : "if (input == bottomScope)",
      "info" : "IfStatement[5187-5240]:IfStatement[5187-5240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5213-5240]:Block[5213-5240]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[5221-5234]:ReturnStatement[5221-5234]"
    }, {
      "left" : "FlowScope output = input.createChildFlowScope();",
      "right" : "FlowScope output = input.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[5246-5294]:VariableDeclarationStatement[5246-5294]"
    }, {
      "left" : "output = traverse(n, output);",
      "right" : "output = traverse(n, output);",
      "info" : "ExpressionStatement[5299-5328]:ExpressionStatement[5299-5328]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[5333-5347]:ReturnStatement[5333-5347]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5355-5364]:MarkerAnnotation[5355-5364]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[5367-5399]:SingleMemberAnnotation[5367-5399]"
    }, {
      "left" : "List<FlowScope>",
      "right" : "List<FlowScope>",
      "info" : "ParameterizedType[5402-5417]:ParameterizedType[5402-5417]"
    }, {
      "left" : "branchedFlowThrough",
      "right" : "branchedFlowThrough",
      "info" : "SimpleName[5418-5437]:SimpleName[5418-5437]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[5438-5449]:SingleVariableDeclaration[5438-5449]"
    }, {
      "left" : "FlowScope input",
      "right" : "FlowScope input",
      "info" : "SingleVariableDeclaration[5451-5466]:SingleVariableDeclaration[5451-5466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5468-10011]:Block[5468-10011]"
    }, {
      "left" : "FlowScope output = flowThrough(source, input);",
      "right" : "FlowScope output = flowThrough(source, input);",
      "info" : "VariableDeclarationStatement[5789-5835]:VariableDeclarationStatement[5789-5835]"
    }, {
      "left" : "Node condition = null;",
      "right" : "Node condition = null;",
      "info" : "VariableDeclarationStatement[5840-5862]:VariableDeclarationStatement[5840-5862]"
    }, {
      "left" : "FlowScope conditionFlowScope = null;",
      "right" : "FlowScope conditionFlowScope = null;",
      "info" : "VariableDeclarationStatement[5867-5903]:VariableDeclarationStatement[5867-5903]"
    }, {
      "left" : "BooleanOutcomePair conditionOutcomes = null;",
      "right" : "BooleanOutcomePair conditionOutcomes = null;",
      "info" : "VariableDeclarationStatement[5908-5952]:VariableDeclarationStatement[5908-5952]"
    }, {
      "left" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
      "right" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
      "info" : "VariableDeclarationStatement[5958-6033]:VariableDeclarationStatement[5958-6033]"
    }, {
      "left" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
      "right" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
      "info" : "VariableDeclarationStatement[6038-6114]:VariableDeclarationStatement[6038-6114]"
    }, {
      "left" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
      "right" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
      "info" : "EnhancedForStatement[6119-9988]:EnhancedForStatement[6119-9988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6176-9988]:Block[6176-9988]"
    }, {
      "left" : "Branch branch = branchEdge.getValue();",
      "right" : "Branch branch = branchEdge.getValue();",
      "info" : "VariableDeclarationStatement[6184-6222]:VariableDeclarationStatement[6184-6222]"
    }, {
      "left" : "FlowScope newScope = output;",
      "right" : "FlowScope newScope = output;",
      "info" : "VariableDeclarationStatement[6229-6257]:VariableDeclarationStatement[6229-6257]"
    }, {
      "left" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
      "right" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
      "info" : "SwitchStatement[6265-9942]:SwitchStatement[6265-9942]"
    }, {
      "left" : "case ON_TRUE:",
      "right" : "case ON_TRUE:",
      "info" : "SwitchCase[6291-6304]:SwitchCase[6291-6304]"
    }, {
      "left" : "if (NodeUtil.isForIn(source))",
      "right" : "if (NodeUtil.isForIn(source))",
      "info" : "IfStatement[6315-7406]:IfStatement[6315-7406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6345-7406]:Block[6345-7406]"
    }, {
      "left" : "Node item = source.getFirstChild();",
      "right" : "Node item = source.getFirstChild();",
      "info" : "VariableDeclarationStatement[6438-6473]:VariableDeclarationStatement[6438-6473]"
    }, {
      "left" : "Node obj = item.getNext();",
      "right" : "Node obj = item.getNext();",
      "info" : "VariableDeclarationStatement[6486-6512]:VariableDeclarationStatement[6486-6512]"
    }, {
      "left" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
      "right" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
      "info" : "VariableDeclarationStatement[6526-6592]:VariableDeclarationStatement[6526-6592]"
    }, {
      "left" : "if (item.isVar())",
      "right" : "if (item.isVar())",
      "info" : "IfStatement[6606-6682]:IfStatement[6606-6682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6624-6682]:Block[6624-6682]"
    }, {
      "left" : "item = item.getFirstChild();",
      "right" : "item = item.getFirstChild();",
      "info" : "ExpressionStatement[6640-6668]:ExpressionStatement[6640-6668]"
    }, {
      "left" : "if (item.isName())",
      "right" : "if (item.isName())",
      "info" : "IfStatement[6695-7342]:IfStatement[6695-7342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6714-7342]:Block[6714-7342]"
    }, {
      "left" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
      "right" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
      "info" : "VariableDeclarationStatement[6730-6778]:VariableDeclarationStatement[6730-6778]"
    }, {
      "left" : "ObjectType objType = getJSType(obj).dereference();",
      "right" : "ObjectType objType = getJSType(obj).dereference();",
      "info" : "VariableDeclarationStatement[6793-6843]:VariableDeclarationStatement[6793-6843]"
    }, {
      "left" : "JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();",
      "right" : "JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();",
      "info" : "VariableDeclarationStatement[6858-6946]:VariableDeclarationStatement[6858-6946]"
    }, {
      "left" : "if (objIndexType != null && !objIndexType.isUnknownType())",
      "right" : "if (objIndexType != null && !objIndexType.isUnknownType())",
      "info" : "IfStatement[6961-7265]:IfStatement[6961-7265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7020-7265]:Block[7020-7265]"
    }, {
      "left" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
      "right" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
      "info" : "VariableDeclarationStatement[7038-7128]:VariableDeclarationStatement[7038-7128]"
    }, {
      "left" : "if (!narrowedKeyType.isEmptyType())",
      "right" : "if (!narrowedKeyType.isEmptyType())",
      "info" : "IfStatement[7145-7249]:IfStatement[7145-7249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7181-7249]:Block[7181-7249]"
    }, {
      "left" : "iterKeyType = narrowedKeyType;",
      "right" : "iterKeyType = narrowedKeyType;",
      "info" : "ExpressionStatement[7201-7231]:ExpressionStatement[7201-7231]"
    }, {
      "left" : "redeclareSimpleVar(informed, item, iterKeyType);",
      "right" : "redeclareSimpleVar(informed, item, iterKeyType);",
      "info" : "ExpressionStatement[7280-7328]:ExpressionStatement[7280-7328]"
    }, {
      "left" : "newScope = informed;",
      "right" : "newScope = informed;",
      "info" : "ExpressionStatement[7355-7375]:ExpressionStatement[7355-7375]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7388-7394]:BreakStatement[7388-7394]"
    }, {
      "left" : "case ON_FALSE:",
      "right" : "case ON_FALSE:",
      "info" : "SwitchCase[7443-7457]:SwitchCase[7443-7457]"
    }, {
      "left" : "if (condition == null)",
      "right" : "if (condition == null)",
      "info" : "IfStatement[7468-7965]:IfStatement[7468-7965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7491-7965]:Block[7491-7965]"
    }, {
      "left" : "condition = NodeUtil.getConditionExpression(source);",
      "right" : "condition = NodeUtil.getConditionExpression(source);",
      "info" : "ExpressionStatement[7505-7557]:ExpressionStatement[7505-7557]"
    }, {
      "left" : "if (condition == null && source.isCase())",
      "right" : "if (condition == null && source.isCase())",
      "info" : "IfStatement[7570-7953]:IfStatement[7570-7953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7612-7953]:Block[7612-7953]"
    }, {
      "left" : "condition = source;",
      "right" : "condition = source;",
      "info" : "ExpressionStatement[7628-7647]:ExpressionStatement[7628-7647]"
    }, {
      "left" : "if (conditionFlowScope == null)",
      "right" : "if (conditionFlowScope == null)",
      "info" : "IfStatement[7764-7939]:IfStatement[7764-7939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7796-7939]:Block[7796-7939]"
    }, {
      "left" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
      "right" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
      "info" : "ExpressionStatement[7814-7923]:ExpressionStatement[7814-7923]"
    }, {
      "left" : "if (condition != null)",
      "right" : "if (condition != null)",
      "info" : "IfStatement[7977-9917]:IfStatement[7977-9917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8000-9917]:Block[8000-9917]"
    }, {
      "left" : "if (condition.isAnd() ||\n                condition.isOr())",
      "right" : "if (condition.isAnd() ||\n                condition.isOr())",
      "info" : "IfStatement[8014-9905]:IfStatement[8014-9905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8073-9427]:Block[8073-9427]"
    }, {
      "left" : "if (conditionOutcomes == null)",
      "right" : "if (conditionOutcomes == null)",
      "info" : "IfStatement[8839-9093]:IfStatement[8839-9093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8870-9093]:Block[8870-9093]"
    }, {
      "left" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
      "right" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
      "info" : "ExpressionStatement[8888-9077]:ExpressionStatement[8888-9077]"
    }, {
      "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
      "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
      "info" : "ExpressionStatement[9108-9413]:ExpressionStatement[9108-9413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9433-9905]:Block[9433-9905]"
    }, {
      "left" : "if (conditionFlowScope == null)",
      "right" : "if (conditionFlowScope == null)",
      "info" : "IfStatement[9550-9708]:IfStatement[9550-9708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9582-9708]:Block[9582-9708]"
    }, {
      "left" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
      "right" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
      "info" : "ExpressionStatement[9600-9692]:ExpressionStatement[9600-9692]"
    }, {
      "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
      "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
      "info" : "ExpressionStatement[9723-9891]:ExpressionStatement[9723-9891]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9928-9934]:BreakStatement[9928-9934]"
    }, {
      "left" : "result.add(newScope.optimize());",
      "right" : "result.add(newScope.optimize());",
      "info" : "ExpressionStatement[9950-9982]:ExpressionStatement[9950-9982]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[9993-10007]:ReturnStatement[9993-10007]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10015-10022]:Modifier[10015-10022]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[10023-10032]:SimpleType[10023-10032]"
    }, {
      "left" : "traverse",
      "right" : "traverse",
      "info" : "SimpleName[10033-10041]:SimpleName[10033-10041]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10042-10048]:SingleVariableDeclaration[10042-10048]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[10050-10065]:SingleVariableDeclaration[10050-10065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10067-14147]:Block[10067-14147]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n    }",
      "info" : "SwitchStatement[10073-13546]:SwitchStatement[10073-13546]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[10102-10120]:SwitchCase[10102-10120]"
    }, {
      "left" : "scope = traverseAssign(n, scope);",
      "right" : "scope = traverseAssign(n, scope);",
      "info" : "ExpressionStatement[10129-10162]:ExpressionStatement[10129-10162]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10171-10177]:BreakStatement[10171-10177]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[10185-10201]:SwitchCase[10185-10201]"
    }, {
      "left" : "scope = traverseName(n, scope);",
      "right" : "scope = traverseName(n, scope);",
      "info" : "ExpressionStatement[10210-10241]:ExpressionStatement[10210-10241]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10250-10256]:BreakStatement[10250-10256]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[10264-10283]:SwitchCase[10264-10283]"
    }, {
      "left" : "scope = traverseGetProp(n, scope);",
      "right" : "scope = traverseGetProp(n, scope);",
      "info" : "ExpressionStatement[10292-10326]:ExpressionStatement[10292-10326]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10335-10341]:BreakStatement[10335-10341]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[10349-10364]:SwitchCase[10349-10364]"
    }, {
      "left" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "right" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "info" : "ExpressionStatement[10373-10460]:ExpressionStatement[10373-10460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10469-10475]:BreakStatement[10469-10475]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[10483-10497]:SwitchCase[10483-10497]"
    }, {
      "left" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "right" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
      "info" : "ExpressionStatement[10506-10592]:ExpressionStatement[10506-10592]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10601-10607]:BreakStatement[10601-10607]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[10615-10631]:SwitchCase[10615-10631]"
    }, {
      "left" : "scope = traverseHook(n, scope);",
      "right" : "scope = traverseHook(n, scope);",
      "info" : "ExpressionStatement[10640-10671]:ExpressionStatement[10640-10671]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10680-10686]:BreakStatement[10680-10686]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[10694-10715]:SwitchCase[10694-10715]"
    }, {
      "left" : "scope = traverseObjectLiteral(n, scope);",
      "right" : "scope = traverseObjectLiteral(n, scope);",
      "info" : "ExpressionStatement[10724-10764]:ExpressionStatement[10724-10764]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10773-10779]:BreakStatement[10773-10779]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[10787-10803]:SwitchCase[10787-10803]"
    }, {
      "left" : "scope = traverseCall(n, scope);",
      "right" : "scope = traverseCall(n, scope);",
      "info" : "ExpressionStatement[10812-10843]:ExpressionStatement[10812-10843]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10852-10858]:BreakStatement[10852-10858]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[10866-10881]:SwitchCase[10866-10881]"
    }, {
      "left" : "scope = traverseNew(n, scope);",
      "right" : "scope = traverseNew(n, scope);",
      "info" : "ExpressionStatement[10890-10920]:ExpressionStatement[10890-10920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10929-10935]:BreakStatement[10929-10935]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[10943-10965]:SwitchCase[10943-10965]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[10972-10987]:SwitchCase[10972-10987]"
    }, {
      "left" : "scope = traverseAdd(n, scope);",
      "right" : "scope = traverseAdd(n, scope);",
      "info" : "ExpressionStatement[10996-11026]:ExpressionStatement[10996-11026]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11035-11041]:BreakStatement[11035-11041]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[11049-11064]:SwitchCase[11049-11064]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[11071-11086]:SwitchCase[11071-11086]"
    }, {
      "left" : "scope = traverse(n.getFirstChild(), scope);",
      "right" : "scope = traverse(n.getFirstChild(), scope);",
      "info" : "ExpressionStatement[11095-11138]:ExpressionStatement[11095-11138]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[11163-11203]:ExpressionStatement[11163-11203]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11212-11218]:BreakStatement[11212-11218]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[11226-11246]:SwitchCase[11226-11246]"
    }, {
      "left" : "scope = traverseArrayLiteral(n, scope);",
      "right" : "scope = traverseArrayLiteral(n, scope);",
      "info" : "ExpressionStatement[11255-11294]:ExpressionStatement[11255-11294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11303-11309]:BreakStatement[11303-11309]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[11317-11333]:SwitchCase[11317-11333]"
    }, {
      "left" : "n.setJSType(scope.getTypeOfThis());",
      "right" : "n.setJSType(scope.getTypeOfThis());",
      "info" : "ExpressionStatement[11342-11377]:ExpressionStatement[11342-11377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11386-11392]:BreakStatement[11386-11392]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[11400-11422]:SwitchCase[11400-11422]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[11429-11451]:SwitchCase[11429-11451]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[11458-11473]:SwitchCase[11458-11473]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[11480-11495]:SwitchCase[11480-11495]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[11502-11525]:SwitchCase[11502-11525]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[11532-11548]:SwitchCase[11532-11548]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[11555-11577]:SwitchCase[11555-11577]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[11584-11606]:SwitchCase[11584-11606]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[11613-11638]:SwitchCase[11613-11638]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[11645-11670]:SwitchCase[11645-11670]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[11677-11701]:SwitchCase[11677-11701]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[11708-11730]:SwitchCase[11708-11730]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[11737-11759]:SwitchCase[11737-11759]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[11766-11781]:SwitchCase[11766-11781]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[11788-11803]:SwitchCase[11788-11803]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[11810-11828]:SwitchCase[11810-11828]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[11835-11853]:SwitchCase[11835-11853]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[11860-11877]:SwitchCase[11860-11877]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[11884-11899]:SwitchCase[11884-11899]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[11906-11921]:SwitchCase[11906-11921]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[11928-11943]:SwitchCase[11928-11943]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[11950-11965]:SwitchCase[11950-11965]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[11972-11990]:SwitchCase[11972-11990]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[11999-12034]:ExpressionStatement[11999-12034]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[12043-12083]:ExpressionStatement[12043-12083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12092-12098]:BreakStatement[12092-12098]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[12106-12128]:SwitchCase[12106-12128]"
    }, {
      "left" : "scope = traverse(n.getFirstChild(), scope);",
      "right" : "scope = traverse(n.getFirstChild(), scope);",
      "info" : "ExpressionStatement[12137-12180]:ExpressionStatement[12137-12180]"
    }, {
      "left" : "n.setJSType(getJSType(n.getFirstChild()));",
      "right" : "n.setJSType(getJSType(n.getFirstChild()));",
      "info" : "ExpressionStatement[12189-12231]:ExpressionStatement[12189-12231]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12240-12246]:BreakStatement[12240-12246]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[12254-12271]:SwitchCase[12254-12271]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[12280-12315]:ExpressionStatement[12280-12315]"
    }, {
      "left" : "n.setJSType(getJSType(n.getLastChild()));",
      "right" : "n.setJSType(getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[12324-12365]:ExpressionStatement[12324-12365]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12374-12380]:BreakStatement[12374-12380]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[12388-12406]:SwitchCase[12388-12406]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[12415-12450]:ExpressionStatement[12415-12450]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[12459-12499]:ExpressionStatement[12459-12499]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12508-12514]:BreakStatement[12508-12514]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[12522-12541]:SwitchCase[12522-12541]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[12548-12562]:SwitchCase[12548-12562]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[12569-12583]:SwitchCase[12569-12583]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[12590-12604]:SwitchCase[12590-12604]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[12611-12625]:SwitchCase[12611-12625]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[12632-12647]:SwitchCase[12632-12647]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[12654-12668]:SwitchCase[12654-12668]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[12675-12689]:SwitchCase[12675-12689]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[12696-12712]:SwitchCase[12696-12712]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[12719-12735]:SwitchCase[12719-12735]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[12742-12764]:SwitchCase[12742-12764]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[12771-12785]:SwitchCase[12771-12785]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[12794-12829]:ExpressionStatement[12794-12829]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[12838-12879]:ExpressionStatement[12838-12879]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12888-12894]:BreakStatement[12888-12894]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[12902-12921]:SwitchCase[12902-12921]"
    }, {
      "left" : "scope = traverseGetElem(n, scope);",
      "right" : "scope = traverseGetElem(n, scope);",
      "info" : "ExpressionStatement[12930-12964]:ExpressionStatement[12930-12964]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12973-12979]:BreakStatement[12973-12979]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[12987-13010]:SwitchCase[12987-13010]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[13019-13054]:ExpressionStatement[13019-13054]"
    }, {
      "left" : "if (n.getFirstChild().isGetProp())",
      "right" : "if (n.getFirstChild().isGetProp())",
      "info" : "IfStatement[13063-13162]:IfStatement[13063-13162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13098-13162]:Block[13098-13162]"
    }, {
      "left" : "ensurePropertyDeclared(n.getFirstChild());",
      "right" : "ensurePropertyDeclared(n.getFirstChild());",
      "info" : "ExpressionStatement[13110-13152]:ExpressionStatement[13110-13152]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13171-13177]:BreakStatement[13171-13177]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[13185-13203]:SwitchCase[13185-13203]"
    }, {
      "left" : "scope = traverse(n.getFirstChild(), scope);",
      "right" : "scope = traverse(n.getFirstChild(), scope);",
      "info" : "ExpressionStatement[13212-13255]:ExpressionStatement[13212-13255]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13264-13270]:BreakStatement[13264-13270]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[13278-13296]:SwitchCase[13278-13296]"
    }, {
      "left" : "scope = traverseReturn(n, scope);",
      "right" : "scope = traverseReturn(n, scope);",
      "info" : "ExpressionStatement[13305-13338]:ExpressionStatement[13305-13338]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13347-13353]:BreakStatement[13347-13353]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[13361-13376]:SwitchCase[13361-13376]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[13383-13400]:SwitchCase[13383-13400]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[13409-13444]:ExpressionStatement[13409-13444]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13453-13459]:BreakStatement[13453-13459]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[13467-13484]:SwitchCase[13467-13484]"
    }, {
      "left" : "scope = traverseCatch(n, scope);",
      "right" : "scope = traverseCatch(n, scope);",
      "info" : "ExpressionStatement[13493-13525]:ExpressionStatement[13493-13525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13534-13540]:BreakStatement[13534-13540]"
    }, {
      "left" : "if (!n.isFunction())",
      "right" : "if (!n.isFunction())",
      "info" : "IfStatement[13551-14124]:IfStatement[13551-14124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13572-14124]:Block[13572-14124]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[13580-13614]:VariableDeclarationStatement[13580-13614]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[13621-14118]:IfStatement[13621-14118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13657-14118]:Block[13657-14118]"
    }, {
      "left" : "JSType castType = info.getType().evaluate(syntacticScope, registry);",
      "right" : "JSType castType = info.getType().evaluate(syntacticScope, registry);",
      "info" : "VariableDeclarationStatement[13667-13735]:VariableDeclarationStatement[13667-13735]"
    }, {
      "left" : "if (n.isQualifiedName() &&\n            n.getParent().isExprResult())",
      "right" : "if (n.isQualifiedName() &&\n            n.getParent().isExprResult())",
      "info" : "IfStatement[13927-14078]:IfStatement[13927-14078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13996-14078]:Block[13996-14078]"
    }, {
      "left" : "updateScopeForTypeChange(scope, n, n.getJSType(), castType);",
      "right" : "updateScopeForTypeChange(scope, n, n.getJSType(), castType);",
      "info" : "ExpressionStatement[14008-14068]:ExpressionStatement[14008-14068]"
    }, {
      "left" : "n.setJSType(castType);",
      "right" : "n.setJSType(castType);",
      "info" : "ExpressionStatement[14088-14110]:ExpressionStatement[14088-14110]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[14130-14143]:ReturnStatement[14130-14143]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14193-14200]:Modifier[14193-14200]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[14201-14210]:SimpleType[14201-14210]"
    }, {
      "left" : "traverseReturn",
      "right" : "traverseReturn",
      "info" : "SimpleName[14211-14225]:SimpleName[14211-14225]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14226-14232]:SingleVariableDeclaration[14226-14232]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[14234-14249]:SingleVariableDeclaration[14234-14249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14251-14689]:Block[14251-14689]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[14257-14292]:ExpressionStatement[14257-14292]"
    }, {
      "left" : "Node retValue = n.getFirstChild();",
      "right" : "Node retValue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14298-14332]:VariableDeclarationStatement[14298-14332]"
    }, {
      "left" : "if (retValue != null)",
      "right" : "if (retValue != null)",
      "info" : "IfStatement[14337-14667]:IfStatement[14337-14667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14359-14667]:Block[14359-14667]"
    }, {
      "left" : "JSType type = functionScope.getRootNode().getJSType();",
      "right" : "JSType type = functionScope.getRootNode().getJSType();",
      "info" : "VariableDeclarationStatement[14367-14421]:VariableDeclarationStatement[14367-14421]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[14428-14661]:IfStatement[14428-14661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14446-14661]:Block[14446-14661]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[14456-14505]:VariableDeclarationStatement[14456-14505]"
    }, {
      "left" : "if (fnType != null)",
      "right" : "if (fnType != null)",
      "info" : "IfStatement[14514-14653]:IfStatement[14514-14653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14534-14653]:Block[14534-14653]"
    }, {
      "left" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
      "right" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
      "info" : "ExpressionStatement[14546-14643]:ExpressionStatement[14546-14643]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[14672-14685]:ReturnStatement[14672-14685]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14836-14843]:Modifier[14836-14843]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[14844-14853]:SimpleType[14844-14853]"
    }, {
      "left" : "traverseCatch",
      "right" : "traverseCatch",
      "info" : "SimpleName[14854-14867]:SimpleName[14854-14867]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14868-14874]:SingleVariableDeclaration[14868-14874]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[14876-14891]:SingleVariableDeclaration[14876-14891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14893-15080]:Block[14893-15080]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14899-14929]:VariableDeclarationStatement[14899-14929]"
    }, {
      "left" : "JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[14934-14989]:VariableDeclarationStatement[14934-14989]"
    }, {
      "left" : "name.setJSType(type);",
      "right" : "name.setJSType(type);",
      "info" : "ExpressionStatement[14994-15015]:ExpressionStatement[14994-15015]"
    }, {
      "left" : "redeclareSimpleVar(scope, name, type);",
      "right" : "redeclareSimpleVar(scope, name, type);",
      "info" : "ExpressionStatement[15020-15058]:ExpressionStatement[15020-15058]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[15063-15076]:ReturnStatement[15063-15076]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15084-15091]:Modifier[15084-15091]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[15092-15101]:SimpleType[15092-15101]"
    }, {
      "left" : "traverseAssign",
      "right" : "traverseAssign",
      "info" : "SimpleName[15102-15116]:SimpleName[15102-15116]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15117-15123]:SingleVariableDeclaration[15117-15123]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[15125-15140]:SingleVariableDeclaration[15125-15140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15142-15450]:Block[15142-15450]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15148-15178]:VariableDeclarationStatement[15148-15178]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[15183-15213]:VariableDeclarationStatement[15183-15213]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[15218-15253]:ExpressionStatement[15218-15253]"
    }, {
      "left" : "JSType leftType = left.getJSType();",
      "right" : "JSType leftType = left.getJSType();",
      "info" : "VariableDeclarationStatement[15259-15294]:VariableDeclarationStatement[15259-15294]"
    }, {
      "left" : "JSType rightType = getJSType(right);",
      "right" : "JSType rightType = getJSType(right);",
      "info" : "VariableDeclarationStatement[15299-15335]:VariableDeclarationStatement[15299-15335]"
    }, {
      "left" : "n.setJSType(rightType);",
      "right" : "n.setJSType(rightType);",
      "info" : "ExpressionStatement[15340-15363]:ExpressionStatement[15340-15363]"
    }, {
      "left" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
      "right" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
      "info" : "ExpressionStatement[15369-15428]:ExpressionStatement[15369-15428]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[15433-15446]:ReturnStatement[15433-15446]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15571-15578]:Modifier[15571-15578]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15579-15583]:PrimitiveType[15579-15583]"
    }, {
      "left" : "updateScopeForTypeChange",
      "right" : "updateScopeForTypeChange",
      "info" : "SimpleName[15584-15608]:SimpleName[15584-15608]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[15616-15631]:SingleVariableDeclaration[15616-15631]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[15633-15642]:SingleVariableDeclaration[15633-15642]"
    }, {
      "left" : "JSType leftType",
      "right" : "JSType leftType",
      "info" : "SingleVariableDeclaration[15644-15659]:SingleVariableDeclaration[15644-15659]"
    }, {
      "left" : "JSType resultType",
      "right" : "JSType resultType",
      "info" : "SingleVariableDeclaration[15661-15678]:SingleVariableDeclaration[15661-15678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15680-17365]:Block[15680-17365]"
    }, {
      "left" : "Preconditions.checkNotNull(resultType);",
      "right" : "Preconditions.checkNotNull(resultType);",
      "info" : "ExpressionStatement[15686-15725]:ExpressionStatement[15686-15725]"
    }, {
      "left" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
      "right" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
      "info" : "SwitchStatement[15730-17361]:SwitchStatement[15730-17361]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[15762-15778]:SwitchCase[15762-15778]"
    }, {
      "left" : "String varName = left.getString();",
      "right" : "String varName = left.getString();",
      "info" : "VariableDeclarationStatement[15787-15821]:VariableDeclarationStatement[15787-15821]"
    }, {
      "left" : "Var var = syntacticScope.getVar(varName);",
      "right" : "Var var = syntacticScope.getVar(varName);",
      "info" : "VariableDeclarationStatement[15830-15871]:VariableDeclarationStatement[15830-15871]"
    }, {
      "left" : "boolean isVarDeclaration = left.hasChildren();",
      "right" : "boolean isVarDeclaration = left.hasChildren();",
      "info" : "VariableDeclarationStatement[16466-16512]:VariableDeclarationStatement[16466-16512]"
    }, {
      "left" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
      "right" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
      "info" : "IfStatement[16521-16649]:IfStatement[16521-16649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16583-16649]:Block[16583-16649]"
    }, {
      "left" : "redeclareSimpleVar(scope, left, resultType);",
      "right" : "redeclareSimpleVar(scope, left, resultType);",
      "info" : "ExpressionStatement[16595-16639]:ExpressionStatement[16595-16639]"
    }, {
      "left" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
      "right" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
      "info" : "ExpressionStatement[16658-16743]:ExpressionStatement[16658-16743]"
    }, {
      "left" : "if (var != null && var.isTypeInferred())",
      "right" : "if (var != null && var.isTypeInferred())",
      "info" : "IfStatement[16753-16954]:IfStatement[16753-16954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16794-16954]:Block[16794-16954]"
    }, {
      "left" : "JSType oldType = var.getType();",
      "right" : "JSType oldType = var.getType();",
      "info" : "VariableDeclarationStatement[16806-16837]:VariableDeclarationStatement[16806-16837]"
    }, {
      "left" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
      "right" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
      "info" : "ExpressionStatement[16848-16944]:ExpressionStatement[16848-16944]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16963-16969]:BreakStatement[16963-16969]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[16976-16995]:SwitchCase[16976-16995]"
    }, {
      "left" : "String qualifiedName = left.getQualifiedName();",
      "right" : "String qualifiedName = left.getQualifiedName();",
      "info" : "VariableDeclarationStatement[17004-17051]:VariableDeclarationStatement[17004-17051]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[17060-17254]:IfStatement[17060-17254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17087-17254]:Block[17087-17254]"
    }, {
      "left" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);",
      "right" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);",
      "info" : "ExpressionStatement[17099-17244]:ExpressionStatement[17099-17244]"
    }, {
      "left" : "left.setJSType(resultType);",
      "right" : "left.setJSType(resultType);",
      "info" : "ExpressionStatement[17264-17291]:ExpressionStatement[17264-17291]"
    }, {
      "left" : "ensurePropertyDefined(left, resultType);",
      "right" : "ensurePropertyDefined(left, resultType);",
      "info" : "ExpressionStatement[17300-17340]:ExpressionStatement[17300-17340]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17349-17355]:BreakStatement[17349-17355]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17447-17454]:Modifier[17447-17454]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17455-17459]:PrimitiveType[17455-17459]"
    }, {
      "left" : "ensurePropertyDefined",
      "right" : "ensurePropertyDefined",
      "info" : "SimpleName[17460-17481]:SimpleName[17460-17481]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[17482-17494]:SingleVariableDeclaration[17482-17494]"
    }, {
      "left" : "JSType rightType",
      "right" : "JSType rightType",
      "info" : "SingleVariableDeclaration[17496-17512]:SingleVariableDeclaration[17496-17512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17514-19380]:Block[17514-19380]"
    }, {
      "left" : "String propName = getprop.getLastChild().getString();",
      "right" : "String propName = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[17520-17573]:VariableDeclarationStatement[17520-17573]"
    }, {
      "left" : "JSType nodeType = getJSType(getprop.getFirstChild());",
      "right" : "JSType nodeType = getJSType(getprop.getFirstChild());",
      "info" : "VariableDeclarationStatement[17578-17631]:VariableDeclarationStatement[17578-17631]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[17636-17726]:VariableDeclarationStatement[17636-17726]"
    }, {
      "left" : "if (objectType == null)",
      "right" : "if (objectType == null)",
      "info" : "IfStatement[17731-19376]:IfStatement[17731-19376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17755-17821]:Block[17755-17821]"
    }, {
      "left" : "registry.registerPropertyOnType(propName, nodeType);",
      "right" : "registry.registerPropertyOnType(propName, nodeType);",
      "info" : "ExpressionStatement[17763-17815]:ExpressionStatement[17763-17815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17827-19376]:Block[17827-19376]"
    }, {
      "left" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
      "right" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
      "info" : "IfStatement[17835-17915]:IfStatement[17835-17915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17890-17915]:Block[17890-17915]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17900-17907]:ReturnStatement[17900-17907]"
    }, {
      "left" : "if (!objectType.isPropertyTypeDeclared(propName))",
      "right" : "if (!objectType.isPropertyTypeDeclared(propName))",
      "info" : "IfStatement[17923-19370]:IfStatement[17923-19370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17973-19370]:Block[17973-19370]"
    }, {
      "left" : "if (objectType.hasProperty(propName) ||\n            !objectType.isInstanceType())",
      "right" : "if (objectType.hasProperty(propName) ||\n            !objectType.isInstanceType())",
      "info" : "IfStatement[18672-19362]:IfStatement[18672-19362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18754-19030]:Block[18754-19030]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[18766-19020]:IfStatement[18766-19020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18800-18907]:Block[18800-18907]"
    }, {
      "left" : "objectType.defineDeclaredProperty(\n                propName, rightType, getprop);",
      "right" : "objectType.defineDeclaredProperty(\n                propName, rightType, getprop);",
      "info" : "ExpressionStatement[18814-18895]:ExpressionStatement[18814-18895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18913-19020]:Block[18913-19020]"
    }, {
      "left" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
      "right" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
      "info" : "ExpressionStatement[18927-19008]:ExpressionStatement[18927-19008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19036-19362]:Block[19036-19362]"
    }, {
      "left" : "if (getprop.getFirstChild().isThis() &&\n              getJSType(syntacticScope.getRootNode()).isConstructor())",
      "right" : "if (getprop.getFirstChild().isThis() &&\n              getJSType(syntacticScope.getRootNode()).isConstructor())",
      "info" : "IfStatement[19048-19352]:IfStatement[19048-19352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19159-19266]:Block[19159-19266]"
    }, {
      "left" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
      "right" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
      "info" : "ExpressionStatement[19173-19254]:ExpressionStatement[19173-19254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19272-19352]:Block[19272-19352]"
    }, {
      "left" : "registry.registerPropertyOnType(propName, objectType);",
      "right" : "registry.registerPropertyOnType(propName, objectType);",
      "info" : "ExpressionStatement[19286-19340]:ExpressionStatement[19286-19340]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19651-19658]:Modifier[19651-19658]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19659-19663]:PrimitiveType[19659-19663]"
    }, {
      "left" : "ensurePropertyDeclared",
      "right" : "ensurePropertyDeclared",
      "info" : "SimpleName[19664-19686]:SimpleName[19664-19686]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[19687-19699]:SingleVariableDeclaration[19687-19699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19701-19917]:Block[19701-19917]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
      "right" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[19707-19822]:VariableDeclarationStatement[19707-19822]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[19827-19913]:IfStatement[19827-19913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19850-19913]:Block[19850-19913]"
    }, {
      "left" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
      "right" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
      "info" : "ExpressionStatement[19858-19907]:ExpressionStatement[19858-19907]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20032-20039]:Modifier[20032-20039]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20040-20047]:PrimitiveType[20040-20047]"
    }, {
      "left" : "ensurePropertyDeclaredHelper",
      "right" : "ensurePropertyDeclaredHelper",
      "info" : "SimpleName[20048-20076]:SimpleName[20048-20076]"
    }, {
      "left" : "Node getprop",
      "right" : "Node getprop",
      "info" : "SingleVariableDeclaration[20084-20096]:SingleVariableDeclaration[20084-20096]"
    }, {
      "left" : "ObjectType objectType",
      "right" : "ObjectType objectType",
      "info" : "SingleVariableDeclaration[20098-20119]:SingleVariableDeclaration[20098-20119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20121-20866]:Block[20121-20866]"
    }, {
      "left" : "String propName = getprop.getLastChild().getString();",
      "right" : "String propName = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[20127-20180]:VariableDeclarationStatement[20127-20180]"
    }, {
      "left" : "String qName = getprop.getQualifiedName();",
      "right" : "String qName = getprop.getQualifiedName();",
      "info" : "VariableDeclarationStatement[20185-20227]:VariableDeclarationStatement[20185-20227]"
    }, {
      "left" : "if (qName != null)",
      "right" : "if (qName != null)",
      "info" : "IfStatement[20232-20844]:IfStatement[20232-20844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20251-20844]:Block[20251-20844]"
    }, {
      "left" : "Var var = syntacticScope.getVar(qName);",
      "right" : "Var var = syntacticScope.getVar(qName);",
      "info" : "VariableDeclarationStatement[20259-20298]:VariableDeclarationStatement[20259-20298]"
    }, {
      "left" : "if (var != null && !var.isTypeInferred())",
      "right" : "if (var != null && !var.isTypeInferred())",
      "info" : "IfStatement[20305-20838]:IfStatement[20305-20838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20347-20838]:Block[20347-20838]"
    }, {
      "left" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
      "right" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
      "info" : "IfStatement[20432-20830]:IfStatement[20432-20830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20718-20830]:Block[20718-20830]"
    }, {
      "left" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
      "right" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
      "info" : "ReturnStatement[20730-20820]:ReturnStatement[20730-20820]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20849-20862]:ReturnStatement[20849-20862]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20870-20877]:Modifier[20870-20877]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[20878-20887]:SimpleType[20878-20887]"
    }, {
      "left" : "traverseName",
      "right" : "traverseName",
      "info" : "SimpleName[20888-20900]:SimpleName[20888-20900]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20901-20907]:SingleVariableDeclaration[20901-20907]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[20909-20924]:SingleVariableDeclaration[20909-20924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20926-22290]:Block[20926-22290]"
    }, {
      "left" : "String varName = n.getString();",
      "right" : "String varName = n.getString();",
      "info" : "VariableDeclarationStatement[20932-20963]:VariableDeclarationStatement[20932-20963]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20968-20999]:VariableDeclarationStatement[20968-20999]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[21004-21032]:VariableDeclarationStatement[21004-21032]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[21037-22245]:IfStatement[21037-22245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21056-21226]:Block[21056-21226]"
    }, {
      "left" : "scope = traverse(value, scope);",
      "right" : "scope = traverse(value, scope);",
      "info" : "ExpressionStatement[21064-21095]:ExpressionStatement[21064-21095]"
    }, {
      "left" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
      "right" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
      "info" : "ExpressionStatement[21102-21200]:ExpressionStatement[21102-21200]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[21207-21220]:ReturnStatement[21207-21220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21232-22245]:Block[21232-22245]"
    }, {
      "left" : "StaticSlot<JSType> var = scope.getSlot(varName);",
      "right" : "StaticSlot<JSType> var = scope.getSlot(varName);",
      "info" : "VariableDeclarationStatement[21240-21288]:VariableDeclarationStatement[21240-21288]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[21295-22239]:IfStatement[21295-22239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21312-22239]:Block[21312-22239]"
    }, {
      "left" : "boolean isInferred = var.isTypeInferred();",
      "right" : "boolean isInferred = var.isTypeInferred();",
      "info" : "VariableDeclarationStatement[21575-21617]:VariableDeclarationStatement[21575-21617]"
    }, {
      "left" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
      "right" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
      "info" : "VariableDeclarationStatement[21626-21718]:VariableDeclarationStatement[21626-21718]"
    }, {
      "left" : "boolean nonLocalInferredSlot =\n            isInferred &&\n            syntacticScope.getParent() != null &&\n            var == syntacticScope.getParent().getSlot(varName);",
      "right" : "boolean nonLocalInferredSlot =\n            isInferred &&\n            syntacticScope.getParent() != null &&\n            var == syntacticScope.getParent().getSlot(varName);",
      "info" : "VariableDeclarationStatement[21876-22046]:VariableDeclarationStatement[21876-22046]"
    }, {
      "left" : "if (!unflowable && !nonLocalInferredSlot)",
      "right" : "if (!unflowable && !nonLocalInferredSlot)",
      "info" : "IfStatement[22056-22231]:IfStatement[22056-22231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22098-22231]:Block[22098-22231]"
    }, {
      "left" : "type = var.getType();",
      "right" : "type = var.getType();",
      "info" : "ExpressionStatement[22110-22131]:ExpressionStatement[22110-22131]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[22142-22221]:IfStatement[22142-22221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22160-22221]:Block[22160-22221]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[22174-22209]:ExpressionStatement[22174-22209]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[22250-22268]:ExpressionStatement[22250-22268]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[22273-22286]:ReturnStatement[22273-22286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22339-22346]:Modifier[22339-22346]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[22347-22356]:SimpleType[22347-22356]"
    }, {
      "left" : "traverseArrayLiteral",
      "right" : "traverseArrayLiteral",
      "info" : "SimpleName[22357-22377]:SimpleName[22357-22377]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22378-22384]:SingleVariableDeclaration[22378-22384]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[22386-22401]:SingleVariableDeclaration[22386-22401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22403-22510]:Block[22403-22510]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[22409-22444]:ExpressionStatement[22409-22444]"
    }, {
      "left" : "n.setJSType(getNativeType(ARRAY_TYPE));",
      "right" : "n.setJSType(getNativeType(ARRAY_TYPE));",
      "info" : "ExpressionStatement[22449-22488]:ExpressionStatement[22449-22488]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[22493-22506]:ReturnStatement[22493-22506]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22514-22521]:Modifier[22514-22521]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[22522-22531]:SimpleType[22522-22531]"
    }, {
      "left" : "traverseObjectLiteral",
      "right" : "traverseObjectLiteral",
      "info" : "SimpleName[22532-22553]:SimpleName[22532-22553]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22554-22560]:SingleVariableDeclaration[22554-22560]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[22562-22577]:SingleVariableDeclaration[22562-22577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22579-24775]:Block[22579-24775]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[22585-22613]:VariableDeclarationStatement[22585-22613]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[22618-22651]:ExpressionStatement[22618-22651]"
    }, {
      "left" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
      "right" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
      "info" : "ForStatement[22657-22790]:ForStatement[22657-22790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22730-22790]:Block[22730-22790]"
    }, {
      "left" : "scope = traverse(name.getFirstChild(), scope);",
      "right" : "scope = traverse(name.getFirstChild(), scope);",
      "info" : "ExpressionStatement[22738-22784]:ExpressionStatement[22738-22784]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(type);",
      "right" : "ObjectType objectType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[23103-23149]:VariableDeclarationStatement[23103-23149]"
    }, {
      "left" : "if (objectType == null)",
      "right" : "if (objectType == null)",
      "info" : "IfStatement[23154-23205]:IfStatement[23154-23205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23178-23205]:Block[23178-23205]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[23186-23199]:ReturnStatement[23186-23199]"
    }, {
      "left" : "boolean hasLendsName = n.getJSDocInfo() != null &&\n        n.getJSDocInfo().getLendsName() != null;",
      "right" : "boolean hasLendsName = n.getJSDocInfo() != null &&\n        n.getJSDocInfo().getLendsName() != null;",
      "info" : "VariableDeclarationStatement[23211-23310]:VariableDeclarationStatement[23211-23310]"
    }, {
      "left" : "if (objectType.hasReferenceName() && !hasLendsName)",
      "right" : "if (objectType.hasReferenceName() && !hasLendsName)",
      "info" : "IfStatement[23315-23394]:IfStatement[23315-23394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23367-23394]:Block[23367-23394]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[23375-23388]:ReturnStatement[23375-23388]"
    }, {
      "left" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
      "right" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
      "info" : "VariableDeclarationStatement[23400-23481]:VariableDeclarationStatement[23400-23481]"
    }, {
      "left" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
      "right" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
      "info" : "ForStatement[23486-24753]:ForStatement[23486-24753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23568-24753]:Block[23568-24753]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[23576-23610]:VariableDeclarationStatement[23576-23610]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
      "info" : "VariableDeclarationStatement[23617-23672]:VariableDeclarationStatement[23617-23672]"
    }, {
      "left" : "if (memberName != null)",
      "right" : "if (memberName != null)",
      "info" : "IfStatement[23679-24747]:IfStatement[23679-24747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23703-24682]:Block[23703-24682]"
    }, {
      "left" : "JSType rawValueType =  name.getFirstChild().getJSType();",
      "right" : "JSType rawValueType =  name.getFirstChild().getJSType();",
      "info" : "VariableDeclarationStatement[23713-23769]:VariableDeclarationStatement[23713-23769]"
    }, {
      "left" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
      "right" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
      "info" : "VariableDeclarationStatement[23778-23872]:VariableDeclarationStatement[23778-23872]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[23881-23966]:IfStatement[23881-23966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23904-23966]:Block[23904-23966]"
    }, {
      "left" : "valueType = getNativeType(UNKNOWN_TYPE);",
      "right" : "valueType = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[23916-23956]:ExpressionStatement[23916-23956]"
    }, {
      "left" : "objectType.defineInferredProperty(memberName, valueType, name);",
      "right" : "objectType.defineInferredProperty(memberName, valueType, name);",
      "info" : "ExpressionStatement[23975-24038]:ExpressionStatement[23975-24038]"
    }, {
      "left" : "if (qObjName != null && name.isStringKey())",
      "right" : "if (qObjName != null && name.isStringKey())",
      "info" : "IfStatement[24125-24674]:IfStatement[24125-24674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24169-24674]:Block[24169-24674]"
    }, {
      "left" : "String qKeyName = qObjName + \".\" + memberName;",
      "right" : "String qKeyName = qObjName + \".\" + memberName;",
      "info" : "VariableDeclarationStatement[24181-24227]:VariableDeclarationStatement[24181-24227]"
    }, {
      "left" : "Var var = syntacticScope.getVar(qKeyName);",
      "right" : "Var var = syntacticScope.getVar(qKeyName);",
      "info" : "VariableDeclarationStatement[24238-24280]:VariableDeclarationStatement[24238-24280]"
    }, {
      "left" : "JSType oldType = var == null ? null : var.getType();",
      "right" : "JSType oldType = var == null ? null : var.getType();",
      "info" : "VariableDeclarationStatement[24291-24343]:VariableDeclarationStatement[24291-24343]"
    }, {
      "left" : "if (var != null && var.isTypeInferred())",
      "right" : "if (var != null && var.isTypeInferred())",
      "info" : "IfStatement[24354-24515]:IfStatement[24354-24515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24395-24515]:Block[24395-24515]"
    }, {
      "left" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
      "right" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
      "info" : "ExpressionStatement[24409-24503]:ExpressionStatement[24409-24503]"
    }, {
      "left" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,\n              valueType);",
      "right" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,\n              valueType);",
      "info" : "ExpressionStatement[24527-24664]:ExpressionStatement[24527-24664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24688-24747]:Block[24688-24747]"
    }, {
      "left" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "right" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[24698-24739]:ExpressionStatement[24698-24739]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[24758-24771]:ReturnStatement[24758-24771]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24779-24786]:Modifier[24779-24786]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[24787-24796]:SimpleType[24787-24796]"
    }, {
      "left" : "traverseAdd",
      "right" : "traverseAdd",
      "info" : "SimpleName[24797-24808]:SimpleName[24797-24808]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24809-24815]:SingleVariableDeclaration[24809-24815]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[24817-24832]:SingleVariableDeclaration[24817-24832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24834-25943]:Block[24834-25943]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24840-24870]:VariableDeclarationStatement[24840-24870]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[24875-24903]:VariableDeclarationStatement[24875-24903]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[24908-24943]:ExpressionStatement[24908-24943]"
    }, {
      "left" : "JSType leftType = left.getJSType();",
      "right" : "JSType leftType = left.getJSType();",
      "info" : "VariableDeclarationStatement[24949-24984]:VariableDeclarationStatement[24949-24984]"
    }, {
      "left" : "JSType rightType = right.getJSType();",
      "right" : "JSType rightType = right.getJSType();",
      "info" : "VariableDeclarationStatement[24989-25026]:VariableDeclarationStatement[24989-25026]"
    }, {
      "left" : "JSType type = getNativeType(UNKNOWN_TYPE);",
      "right" : "JSType type = getNativeType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[25032-25074]:VariableDeclarationStatement[25032-25074]"
    }, {
      "left" : "if (leftType != null && rightType != null)",
      "right" : "if (leftType != null && rightType != null)",
      "info" : "IfStatement[25079-25802]:IfStatement[25079-25802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25122-25802]:Block[25122-25802]"
    }, {
      "left" : "boolean leftIsUnknown = leftType.isUnknownType();",
      "right" : "boolean leftIsUnknown = leftType.isUnknownType();",
      "info" : "VariableDeclarationStatement[25130-25179]:VariableDeclarationStatement[25130-25179]"
    }, {
      "left" : "boolean rightIsUnknown = rightType.isUnknownType();",
      "right" : "boolean rightIsUnknown = rightType.isUnknownType();",
      "info" : "VariableDeclarationStatement[25186-25237]:VariableDeclarationStatement[25186-25237]"
    }, {
      "left" : "if (leftIsUnknown && rightIsUnknown)",
      "right" : "if (leftIsUnknown && rightIsUnknown)",
      "info" : "IfStatement[25244-25796]:IfStatement[25244-25796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25281-25334]:Block[25281-25334]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[25291-25326]:ExpressionStatement[25291-25326]"
    }, {
      "left" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
      "right" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
      "info" : "IfStatement[25340-25796]:IfStatement[25340-25796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25447-25499]:Block[25447-25499]"
    }, {
      "left" : "type = getNativeType(STRING_TYPE);",
      "right" : "type = getNativeType(STRING_TYPE);",
      "info" : "ExpressionStatement[25457-25491]:ExpressionStatement[25457-25491]"
    }, {
      "left" : "if (leftIsUnknown || rightIsUnknown)",
      "right" : "if (leftIsUnknown || rightIsUnknown)",
      "info" : "IfStatement[25505-25796]:IfStatement[25505-25796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25542-25595]:Block[25542-25595]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[25552-25587]:ExpressionStatement[25552-25587]"
    }, {
      "left" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
      "right" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
      "info" : "IfStatement[25601-25796]:IfStatement[25601-25796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25662-25714]:Block[25662-25714]"
    }, {
      "left" : "type = getNativeType(NUMBER_TYPE);",
      "right" : "type = getNativeType(NUMBER_TYPE);",
      "info" : "ExpressionStatement[25672-25706]:ExpressionStatement[25672-25706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25720-25796]:Block[25720-25796]"
    }, {
      "left" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
      "right" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
      "info" : "ExpressionStatement[25730-25788]:ExpressionStatement[25730-25788]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[25807-25825]:ExpressionStatement[25807-25825]"
    }, {
      "left" : "if (n.isAssignAdd())",
      "right" : "if (n.isAssignAdd())",
      "info" : "IfStatement[25831-25920]:IfStatement[25831-25920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25852-25920]:Block[25852-25920]"
    }, {
      "left" : "updateScopeForTypeChange(scope, left, leftType, type);",
      "right" : "updateScopeForTypeChange(scope, left, leftType, type);",
      "info" : "ExpressionStatement[25860-25914]:ExpressionStatement[25860-25914]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[25926-25939]:ReturnStatement[25926-25939]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25947-25954]:Modifier[25947-25954]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25955-25962]:PrimitiveType[25955-25962]"
    }, {
      "left" : "isAddedAsNumber",
      "right" : "isAddedAsNumber",
      "info" : "SimpleName[25963-25978]:SimpleName[25963-25978]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[25979-25990]:SingleVariableDeclaration[25979-25990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25992-26144]:Block[25992-26144]"
    }, {
      "left" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
      "right" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
      "info" : "ReturnStatement[25998-26140]:ReturnStatement[25998-26140]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26148-26155]:Modifier[26148-26155]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[26156-26165]:SimpleType[26156-26165]"
    }, {
      "left" : "traverseHook",
      "right" : "traverseHook",
      "info" : "SimpleName[26166-26178]:SimpleName[26166-26178]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26179-26185]:SingleVariableDeclaration[26179-26185]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[26187-26202]:SingleVariableDeclaration[26187-26202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26204-27294]:Block[26204-27294]"
    }, {
      "left" : "Node condition = n.getFirstChild();",
      "right" : "Node condition = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26210-26245]:VariableDeclarationStatement[26210-26245]"
    }, {
      "left" : "Node trueNode = condition.getNext();",
      "right" : "Node trueNode = condition.getNext();",
      "info" : "VariableDeclarationStatement[26250-26286]:VariableDeclarationStatement[26250-26286]"
    }, {
      "left" : "Node falseNode = n.getLastChild();",
      "right" : "Node falseNode = n.getLastChild();",
      "info" : "VariableDeclarationStatement[26291-26325]:VariableDeclarationStatement[26291-26325]"
    }, {
      "left" : "scope = traverse(condition, scope);",
      "right" : "scope = traverse(condition, scope);",
      "info" : "ExpressionStatement[26359-26394]:ExpressionStatement[26359-26394]"
    }, {
      "left" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
      "right" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
      "info" : "VariableDeclarationStatement[26474-26601]:VariableDeclarationStatement[26474-26601]"
    }, {
      "left" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
      "right" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
      "info" : "VariableDeclarationStatement[26606-26735]:VariableDeclarationStatement[26606-26735]"
    }, {
      "left" : "traverse(trueNode, trueScope.createChildFlowScope());",
      "right" : "traverse(trueNode, trueScope.createChildFlowScope());",
      "info" : "ExpressionStatement[26790-26843]:ExpressionStatement[26790-26843]"
    }, {
      "left" : "traverse(falseNode, falseScope.createChildFlowScope());",
      "right" : "traverse(falseNode, falseScope.createChildFlowScope());",
      "info" : "ExpressionStatement[26900-26955]:ExpressionStatement[26900-26955]"
    }, {
      "left" : "JSType trueType = trueNode.getJSType();",
      "right" : "JSType trueType = trueNode.getJSType();",
      "info" : "VariableDeclarationStatement[27012-27051]:VariableDeclarationStatement[27012-27051]"
    }, {
      "left" : "JSType falseType = falseNode.getJSType();",
      "right" : "JSType falseType = falseNode.getJSType();",
      "info" : "VariableDeclarationStatement[27056-27097]:VariableDeclarationStatement[27056-27097]"
    }, {
      "left" : "if (trueType != null && falseType != null)",
      "right" : "if (trueType != null && falseType != null)",
      "info" : "IfStatement[27102-27248]:IfStatement[27102-27248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27145-27210]:Block[27145-27210]"
    }, {
      "left" : "n.setJSType(trueType.getLeastSupertype(falseType));",
      "right" : "n.setJSType(trueType.getLeastSupertype(falseType));",
      "info" : "ExpressionStatement[27153-27204]:ExpressionStatement[27153-27204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27216-27248]:Block[27216-27248]"
    }, {
      "left" : "n.setJSType(null);",
      "right" : "n.setJSType(null);",
      "info" : "ExpressionStatement[27224-27242]:ExpressionStatement[27224-27242]"
    }, {
      "left" : "return scope.createChildFlowScope();",
      "right" : "return scope.createChildFlowScope();",
      "info" : "ReturnStatement[27254-27290]:ReturnStatement[27254-27290]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27298-27305]:Modifier[27298-27305]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[27306-27315]:SimpleType[27306-27315]"
    }, {
      "left" : "traverseCall",
      "right" : "traverseCall",
      "info" : "SimpleName[27316-27328]:SimpleName[27316-27328]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27329-27335]:SingleVariableDeclaration[27329-27335]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[27337-27352]:SingleVariableDeclaration[27337-27352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27354-27965]:Block[27354-27965]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[27360-27395]:ExpressionStatement[27360-27395]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27401-27431]:VariableDeclarationStatement[27401-27431]"
    }, {
      "left" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
      "right" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[27436-27505]:VariableDeclarationStatement[27436-27505]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[27510-27891]:IfStatement[27510-27891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27536-27891]:Block[27536-27891]"
    }, {
      "left" : "if (functionType.isFunctionType())",
      "right" : "if (functionType.isFunctionType())",
      "info" : "IfStatement[27544-27885]:IfStatement[27544-27885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27579-27750]:Block[27579-27750]"
    }, {
      "left" : "FunctionType fnType = functionType.toMaybeFunctionType();",
      "right" : "FunctionType fnType = functionType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[27589-27646]:VariableDeclarationStatement[27589-27646]"
    }, {
      "left" : "n.setJSType(fnType.getReturnType());",
      "right" : "n.setJSType(fnType.getReturnType());",
      "info" : "ExpressionStatement[27655-27691]:ExpressionStatement[27655-27691]"
    }, {
      "left" : "backwardsInferenceFromCallSite(n, fnType);",
      "right" : "backwardsInferenceFromCallSite(n, fnType);",
      "info" : "ExpressionStatement[27700-27742]:ExpressionStatement[27700-27742]"
    }, {
      "left" : "if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE)))",
      "right" : "if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE)))",
      "info" : "IfStatement[27756-27885]:IfStatement[27756-27885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27818-27885]:Block[27818-27885]"
    }, {
      "left" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
      "right" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[27828-27877]:ExpressionStatement[27828-27877]"
    }, {
      "left" : "scope = tightenTypesAfterAssertions(scope, n);",
      "right" : "scope = tightenTypesAfterAssertions(scope, n);",
      "info" : "ExpressionStatement[27897-27943]:ExpressionStatement[27897-27943]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[27948-27961]:ReturnStatement[27948-27961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27969-27976]:Modifier[27969-27976]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[27977-27986]:SimpleType[27977-27986]"
    }, {
      "left" : "tightenTypesAfterAssertions",
      "right" : "tightenTypesAfterAssertions",
      "info" : "SimpleName[27987-28014]:SimpleName[27987-28014]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[28015-28030]:SingleVariableDeclaration[28015-28030]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[28038-28051]:SingleVariableDeclaration[28038-28051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28053-29481]:Block[28053-29481]"
    }, {
      "left" : "Node left = callNode.getFirstChild();",
      "right" : "Node left = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[28059-28096]:VariableDeclarationStatement[28059-28096]"
    }, {
      "left" : "Node firstParam = left.getNext();",
      "right" : "Node firstParam = left.getNext();",
      "info" : "VariableDeclarationStatement[28101-28134]:VariableDeclarationStatement[28101-28134]"
    }, {
      "left" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
      "right" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
      "info" : "VariableDeclarationStatement[28139-28244]:VariableDeclarationStatement[28139-28244]"
    }, {
      "left" : "if (assertionFunctionSpec == null || firstParam == null)",
      "right" : "if (assertionFunctionSpec == null || firstParam == null)",
      "info" : "IfStatement[28249-28333]:IfStatement[28249-28333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28306-28333]:Block[28306-28333]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[28314-28327]:ReturnStatement[28314-28327]"
    }, {
      "left" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
      "right" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
      "info" : "VariableDeclarationStatement[28338-28409]:VariableDeclarationStatement[28338-28409]"
    }, {
      "left" : "if (assertedNode == null)",
      "right" : "if (assertedNode == null)",
      "info" : "IfStatement[28414-28467]:IfStatement[28414-28467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28440-28467]:Block[28440-28467]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[28448-28461]:ReturnStatement[28448-28461]"
    }, {
      "left" : "JSTypeNative assertedType = assertionFunctionSpec.getAssertedType();",
      "right" : "JSTypeNative assertedType = assertionFunctionSpec.getAssertedType();",
      "info" : "VariableDeclarationStatement[28472-28540]:VariableDeclarationStatement[28472-28540]"
    }, {
      "left" : "String assertedNodeName = assertedNode.getQualifiedName();",
      "right" : "String assertedNodeName = assertedNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[28545-28603]:VariableDeclarationStatement[28545-28603]"
    }, {
      "left" : "JSType narrowed;",
      "right" : "JSType narrowed;",
      "info" : "VariableDeclarationStatement[28609-28625]:VariableDeclarationStatement[28609-28625]"
    }, {
      "left" : "if (assertedType == null)",
      "right" : "if (assertedType == null)",
      "info" : "IfStatement[28698-29363]:IfStatement[28698-29363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28724-29023]:Block[28724-29023]"
    }, {
      "left" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);",
      "right" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);",
      "info" : "ExpressionStatement[28789-28894]:ExpressionStatement[28789-28894]"
    }, {
      "left" : "narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();",
      "right" : "narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[28951-29017]:ExpressionStatement[28951-29017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29029-29363]:Block[29029-29363]"
    }, {
      "left" : "JSType type = getJSType(assertedNode);",
      "right" : "JSType type = getJSType(assertedNode);",
      "info" : "VariableDeclarationStatement[29112-29150]:VariableDeclarationStatement[29112-29150]"
    }, {
      "left" : "narrowed = type.getGreatestSubtype(getNativeType(assertedType));",
      "right" : "narrowed = type.getGreatestSubtype(getNativeType(assertedType));",
      "info" : "ExpressionStatement[29157-29221]:ExpressionStatement[29157-29221]"
    }, {
      "left" : "if (assertedNodeName != null && type.differsFrom(narrowed))",
      "right" : "if (assertedNodeName != null && type.differsFrom(narrowed))",
      "info" : "IfStatement[29228-29357]:IfStatement[29228-29357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29288-29357]:Block[29288-29357]"
    }, {
      "left" : "scope = narrowScope(scope, assertedNode, narrowed);",
      "right" : "scope = narrowScope(scope, assertedNode, narrowed);",
      "info" : "ExpressionStatement[29298-29349]:ExpressionStatement[29298-29349]"
    }, {
      "left" : "if (getJSType(callNode).differsFrom(narrowed))",
      "right" : "if (getJSType(callNode).differsFrom(narrowed))",
      "info" : "IfStatement[29369-29459]:IfStatement[29369-29459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29416-29459]:Block[29416-29459]"
    }, {
      "left" : "callNode.setJSType(narrowed);",
      "right" : "callNode.setJSType(narrowed);",
      "info" : "ExpressionStatement[29424-29453]:ExpressionStatement[29424-29453]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[29464-29477]:ReturnStatement[29464-29477]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29485-29492]:Modifier[29485-29492]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[29493-29502]:SimpleType[29493-29502]"
    }, {
      "left" : "narrowScope",
      "right" : "narrowScope",
      "info" : "SimpleName[29503-29514]:SimpleName[29503-29514]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[29515-29530]:SingleVariableDeclaration[29515-29530]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[29532-29541]:SingleVariableDeclaration[29532-29541]"
    }, {
      "left" : "JSType narrowed",
      "right" : "JSType narrowed",
      "info" : "SingleVariableDeclaration[29543-29558]:SingleVariableDeclaration[29543-29558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29560-29953]:Block[29560-29953]"
    }, {
      "left" : "if (node.isThis())",
      "right" : "if (node.isThis())",
      "info" : "IfStatement[29566-29691]:IfStatement[29566-29691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29585-29691]:Block[29585-29691]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[29672-29685]:ReturnStatement[29672-29685]"
    }, {
      "left" : "scope = scope.createChildFlowScope();",
      "right" : "scope = scope.createChildFlowScope();",
      "info" : "ExpressionStatement[29697-29734]:ExpressionStatement[29697-29734]"
    }, {
      "left" : "if (node.isGetProp())",
      "right" : "if (node.isGetProp())",
      "info" : "IfStatement[29739-29931]:IfStatement[29739-29931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29761-29869]:Block[29761-29869]"
    }, {
      "left" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
      "right" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
      "info" : "ExpressionStatement[29769-29863]:ExpressionStatement[29769-29863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29875-29931]:Block[29875-29931]"
    }, {
      "left" : "redeclareSimpleVar(scope, node, narrowed);",
      "right" : "redeclareSimpleVar(scope, node, narrowed);",
      "info" : "ExpressionStatement[29883-29925]:ExpressionStatement[29883-29925]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[29936-29949]:ReturnStatement[29936-29949]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30879-30886]:Modifier[30879-30886]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30887-30891]:PrimitiveType[30887-30891]"
    }, {
      "left" : "backwardsInferenceFromCallSite",
      "right" : "backwardsInferenceFromCallSite",
      "info" : "SimpleName[30892-30922]:SimpleName[30892-30922]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30923-30929]:SingleVariableDeclaration[30923-30929]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[30931-30950]:SingleVariableDeclaration[30931-30950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30952-31065]:Block[30952-31065]"
    }, {
      "left" : "updateTypeOfParameters(n, fnType);",
      "right" : "updateTypeOfParameters(n, fnType);",
      "info" : "ExpressionStatement[30958-30992]:ExpressionStatement[30958-30992]"
    }, {
      "left" : "updateTypeOfThisOnClosure(n, fnType);",
      "right" : "updateTypeOfThisOnClosure(n, fnType);",
      "info" : "ExpressionStatement[30997-31034]:ExpressionStatement[30997-31034]"
    }, {
      "left" : "updateBind(n, fnType);",
      "right" : "updateBind(n, fnType);",
      "info" : "ExpressionStatement[31039-31061]:ExpressionStatement[31039-31061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31236-31243]:Modifier[31236-31243]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31244-31248]:PrimitiveType[31244-31248]"
    }, {
      "left" : "updateBind",
      "right" : "updateBind",
      "info" : "SimpleName[31249-31259]:SimpleName[31249-31259]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31260-31266]:SingleVariableDeclaration[31260-31266]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[31268-31287]:SingleVariableDeclaration[31268-31287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31289-31796]:Block[31289-31796]"
    }, {
      "left" : "CodingConvention.Bind bind =\n        compiler.getCodingConvention().describeFunctionBind(n, true);",
      "right" : "CodingConvention.Bind bind =\n        compiler.getCodingConvention().describeFunctionBind(n, true);",
      "info" : "VariableDeclarationStatement[31295-31393]:VariableDeclarationStatement[31295-31393]"
    }, {
      "left" : "if (bind == null)",
      "right" : "if (bind == null)",
      "info" : "IfStatement[31398-31437]:IfStatement[31398-31437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31416-31437]:Block[31416-31437]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31424-31431]:ReturnStatement[31424-31431]"
    }, {
      "left" : "FunctionType callTargetFn = getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
      "right" : "FunctionType callTargetFn = getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[31443-31556]:VariableDeclarationStatement[31443-31556]"
    }, {
      "left" : "if (callTargetFn == null)",
      "right" : "if (callTargetFn == null)",
      "info" : "IfStatement[31561-31608]:IfStatement[31561-31608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31587-31608]:Block[31587-31608]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31595-31602]:ReturnStatement[31595-31602]"
    }, {
      "left" : "n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the 'this' argument to be included.\n            bind.getBoundParameterCount() + 1));",
      "right" : "n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the 'this' argument to be included.\n            bind.getBoundParameterCount() + 1));",
      "info" : "ExpressionStatement[31614-31792]:ExpressionStatement[31614-31792]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31960-31967]:Modifier[31960-31967]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31968-31972]:PrimitiveType[31968-31972]"
    }, {
      "left" : "updateTypeOfParameters",
      "right" : "updateTypeOfParameters",
      "info" : "SimpleName[31973-31995]:SimpleName[31973-31995]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31996-32002]:SingleVariableDeclaration[31996-32002]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[32004-32023]:SingleVariableDeclaration[32004-32023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32025-32827]:Block[32025-32827]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[32031-32041]:VariableDeclarationStatement[32031-32041]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[32046-32081]:VariableDeclarationStatement[32046-32081]"
    }, {
      "left" : "for (Node iParameter : fnType.getParameters())",
      "right" : "for (Node iParameter : fnType.getParameters())",
      "info" : "EnhancedForStatement[32086-32823]:EnhancedForStatement[32086-32823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32133-32823]:Block[32133-32823]"
    }, {
      "left" : "if (i + 1 >= childCount)",
      "right" : "if (i + 1 >= childCount)",
      "info" : "IfStatement[32141-32254]:IfStatement[32141-32254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32166-32254]:Block[32166-32254]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32239-32246]:ReturnStatement[32239-32246]"
    }, {
      "left" : "JSType iParameterType = getJSType(iParameter);",
      "right" : "JSType iParameterType = getJSType(iParameter);",
      "info" : "VariableDeclarationStatement[32262-32308]:VariableDeclarationStatement[32262-32308]"
    }, {
      "left" : "Node iArgument = n.getChildAtIndex(i + 1);",
      "right" : "Node iArgument = n.getChildAtIndex(i + 1);",
      "info" : "VariableDeclarationStatement[32315-32357]:VariableDeclarationStatement[32315-32357]"
    }, {
      "left" : "JSType iArgumentType = getJSType(iArgument);",
      "right" : "JSType iArgumentType = getJSType(iArgument);",
      "info" : "VariableDeclarationStatement[32364-32408]:VariableDeclarationStatement[32364-32408]"
    }, {
      "left" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
      "right" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
      "info" : "ExpressionStatement[32415-32482]:ExpressionStatement[32415-32482]"
    }, {
      "left" : "if (iParameterType.isFunctionType())",
      "right" : "if (iParameterType.isFunctionType())",
      "info" : "IfStatement[32490-32806]:IfStatement[32490-32806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32527-32806]:Block[32527-32806]"
    }, {
      "left" : "FunctionType iParameterFnType = iParameterType.toMaybeFunctionType();",
      "right" : "FunctionType iParameterFnType = iParameterType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[32537-32606]:VariableDeclarationStatement[32537-32606]"
    }, {
      "left" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
      "right" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
      "info" : "IfStatement[32616-32798]:IfStatement[32616-32798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32738-32798]:Block[32738-32798]"
    }, {
      "left" : "iArgument.setJSType(iParameterFnType);",
      "right" : "iArgument.setJSType(iParameterFnType);",
      "info" : "ExpressionStatement[32750-32788]:ExpressionStatement[32750-32788]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[32813-32817]:ExpressionStatement[32813-32817]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33022-33029]:Modifier[33022-33029]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33030-33034]:PrimitiveType[33030-33034]"
    }, {
      "left" : "updateTypeOfThisOnClosure",
      "right" : "updateTypeOfThisOnClosure",
      "info" : "SimpleName[33035-33060]:SimpleName[33035-33060]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33061-33067]:SingleVariableDeclaration[33061-33067]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[33069-33088]:SingleVariableDeclaration[33069-33088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33090-36684]:Block[33090-36684]"
    }, {
      "left" : "if (fnType.getTemplateTypeName() == null)",
      "right" : "if (fnType.getTemplateTypeName() == null)",
      "info" : "IfStatement[33154-33217]:IfStatement[33154-33217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33196-33217]:Block[33196-33217]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33204-33211]:ReturnStatement[33204-33211]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[33223-33233]:VariableDeclarationStatement[33223-33233]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[33238-33273]:VariableDeclarationStatement[33238-33273]"
    }, {
      "left" : "for (Node iParameter : fnType.getParameters())",
      "right" : "for (Node iParameter : fnType.getParameters())",
      "info" : "EnhancedForStatement[33337-36680]:EnhancedForStatement[33337-36680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33384-36680]:Block[33384-36680]"
    }, {
      "left" : "JSType iParameterType =\n          getJSType(iParameter).restrictByNotNullOrUndefined();",
      "right" : "JSType iParameterType =\n          getJSType(iParameter).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[33392-33479]:VariableDeclarationStatement[33392-33479]"
    }, {
      "left" : "if (iParameterType.isTemplateType())",
      "right" : "if (iParameterType.isTemplateType())",
      "info" : "IfStatement[33486-36663]:IfStatement[33486-36663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33523-36663]:Block[33523-36663]"
    }, {
      "left" : "ObjectType iArgumentType = null;",
      "right" : "ObjectType iArgumentType = null;",
      "info" : "VariableDeclarationStatement[33583-33615]:VariableDeclarationStatement[33583-33615]"
    }, {
      "left" : "if (i + 1 < childCount)",
      "right" : "if (i + 1 < childCount)",
      "info" : "IfStatement[33624-34148]:IfStatement[33624-34148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33648-34148]:Block[33648-34148]"
    }, {
      "left" : "Node iArgument = n.getChildAtIndex(i + 1);",
      "right" : "Node iArgument = n.getChildAtIndex(i + 1);",
      "info" : "VariableDeclarationStatement[33660-33702]:VariableDeclarationStatement[33660-33702]"
    }, {
      "left" : "iArgumentType = getJSType(iArgument)\n              .restrictByNotNullOrUndefined()\n              .collapseUnion()\n              .toObjectType();",
      "right" : "iArgumentType = getJSType(iArgument)\n              .restrictByNotNullOrUndefined()\n              .collapseUnion()\n              .toObjectType();",
      "info" : "ExpressionStatement[33713-33857]:ExpressionStatement[33713-33857]"
    }, {
      "left" : "if (iArgumentType == null)",
      "right" : "if (iArgumentType == null)",
      "info" : "IfStatement[33868-34138]:IfStatement[33868-34138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33895-34138]:Block[33895-34138]"
    }, {
      "left" : "compiler.report(\n                JSError.make(NodeUtil.getSourceName(iArgument), iArgument,\n                    TEMPLATE_TYPE_NOT_OBJECT_TYPE,\n                    getJSType(iArgument).toString()));",
      "right" : "compiler.report(\n                JSError.make(NodeUtil.getSourceName(iArgument), iArgument,\n                    TEMPLATE_TYPE_NOT_OBJECT_TYPE,\n                    getJSType(iArgument).toString()));",
      "info" : "ExpressionStatement[33909-34106]:ExpressionStatement[33909-34106]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34119-34126]:ReturnStatement[34119-34126]"
    }, {
      "left" : "boolean foundTemplateTypeOfThisParameter = false;",
      "right" : "boolean foundTemplateTypeOfThisParameter = false;",
      "info" : "VariableDeclarationStatement[34225-34274]:VariableDeclarationStatement[34225-34274]"
    }, {
      "left" : "int j = 0;",
      "right" : "int j = 0;",
      "info" : "VariableDeclarationStatement[34283-34293]:VariableDeclarationStatement[34283-34293]"
    }, {
      "left" : "for (Node jParameter : fnType.getParameters())",
      "right" : "for (Node jParameter : fnType.getParameters())",
      "info" : "EnhancedForStatement[34302-36460]:EnhancedForStatement[34302-36460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34349-36460]:Block[34349-36460]"
    }, {
      "left" : "JSType jParameterType =\n              getJSType(jParameter).restrictByNotNullOrUndefined();",
      "right" : "JSType jParameterType =\n              getJSType(jParameter).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[34361-34452]:VariableDeclarationStatement[34361-34452]"
    }, {
      "left" : "if (jParameterType.isFunctionType())",
      "right" : "if (jParameterType.isFunctionType())",
      "info" : "IfStatement[34463-36435]:IfStatement[34463-36435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34500-36435]:Block[34500-36435]"
    }, {
      "left" : "FunctionType jParameterFnType = jParameterType.toMaybeFunctionType();",
      "right" : "FunctionType jParameterFnType = jParameterType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[34514-34583]:VariableDeclarationStatement[34514-34583]"
    }, {
      "left" : "if (jParameterFnType.getTypeOfThis().equals(iParameterType))",
      "right" : "if (jParameterFnType.getTypeOfThis().equals(iParameterType))",
      "info" : "IfStatement[34596-36423]:IfStatement[34596-36423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34657-36423]:Block[34657-36423]"
    }, {
      "left" : "foundTemplateTypeOfThisParameter = true;",
      "right" : "foundTemplateTypeOfThisParameter = true;",
      "info" : "ExpressionStatement[34673-34713]:ExpressionStatement[34673-34713]"
    }, {
      "left" : "if (j + 1 >= childCount)",
      "right" : "if (j + 1 >= childCount)",
      "info" : "IfStatement[34788-34924]:IfStatement[34788-34924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34813-34924]:Block[34813-34924]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34901-34908]:ReturnStatement[34901-34908]"
    }, {
      "left" : "Node jArgument = n.getChildAtIndex(j + 1);",
      "right" : "Node jArgument = n.getChildAtIndex(j + 1);",
      "info" : "VariableDeclarationStatement[34939-34981]:VariableDeclarationStatement[34939-34981]"
    }, {
      "left" : "JSType jArgumentType = getJSType(jArgument);",
      "right" : "JSType jArgumentType = getJSType(jArgument);",
      "info" : "VariableDeclarationStatement[34996-35040]:VariableDeclarationStatement[34996-35040]"
    }, {
      "left" : "if (jArgument.isFunction() &&\n                  jArgumentType.isFunctionType())",
      "right" : "if (jArgument.isFunction() &&\n                  jArgumentType.isFunctionType())",
      "info" : "IfStatement[35055-36293]:IfStatement[35055-36293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35135-36293]:Block[35135-36293]"
    }, {
      "left" : "if (iArgumentType != null &&\n                    // null and undefined get filtered out above.\n                    !iArgumentType.isNoType())",
      "right" : "if (iArgumentType != null &&\n                    // null and undefined get filtered out above.\n                    !iArgumentType.isNoType())",
      "info" : "IfStatement[35153-36277]:IfStatement[35153-36277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35295-35904]:Block[35295-35904]"
    }, {
      "left" : "FunctionType jArgumentFnType = jArgumentType.toMaybeFunctionType();",
      "right" : "FunctionType jArgumentFnType = jArgumentType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[35441-35508]:VariableDeclarationStatement[35441-35508]"
    }, {
      "left" : "if (jArgumentFnType.getTypeOfThis().isUnknownType())",
      "right" : "if (jArgumentFnType.getTypeOfThis().isUnknownType())",
      "info" : "IfStatement[35527-35886]:IfStatement[35527-35886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35580-35886]:Block[35580-35886]"
    }, {
      "left" : "jArgument.setJSType(\n                        registry.createFunctionTypeWithNewThisType(\n                            jArgumentFnType, iArgumentType));",
      "right" : "jArgument.setJSType(\n                        registry.createFunctionTypeWithNewThisType(\n                            jArgumentFnType, iArgumentType));",
      "info" : "ExpressionStatement[35716-35866]:ExpressionStatement[35716-35866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35910-36277]:Block[35910-36277]"
    }, {
      "left" : "if (NodeUtil.referencesThis(\n                          NodeUtil.getFunctionBody(jArgument)))",
      "right" : "if (NodeUtil.referencesThis(\n                          NodeUtil.getFunctionBody(jArgument)))",
      "info" : "IfStatement[36007-36259]:IfStatement[36007-36259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36100-36259]:Block[36100-36259]"
    }, {
      "left" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n                        FUNCTION_LITERAL_UNDEFINED_THIS));",
      "right" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n                        FUNCTION_LITERAL_UNDEFINED_THIS));",
      "info" : "ExpressionStatement[36122-36239]:ExpressionStatement[36122-36239]"
    }, {
      "left" : "j++;",
      "right" : "j++;",
      "info" : "ExpressionStatement[36446-36450]:ExpressionStatement[36446-36450]"
    }, {
      "left" : "if (!foundTemplateTypeOfThisParameter)",
      "right" : "if (!foundTemplateTypeOfThisParameter)",
      "info" : "IfStatement[36470-36655]:IfStatement[36470-36655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36509-36655]:Block[36509-36655]"
    }, {
      "left" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n              TEMPLATE_TYPE_OF_THIS_EXPECTED));",
      "right" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n              TEMPLATE_TYPE_OF_THIS_EXPECTED));",
      "info" : "ExpressionStatement[36521-36627]:ExpressionStatement[36521-36627]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36638-36645]:ReturnStatement[36638-36645]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[36670-36674]:ExpressionStatement[36670-36674]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36688-36695]:Modifier[36688-36695]"
    }, {
      "left" : "traverseNew",
      "right" : "traverseNew",
      "info" : "SimpleName[36706-36717]:SimpleName[36706-36717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36743-37814]:Block[36743-37740]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[36750-36787]:VariableDeclarationStatement[36790-36827]"
    }, {
      "left" : "scope = traverse(constructor, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[36792-36829]:ExpressionStatement[36749-36784]"
    }, {
      "left" : "traverse",
      "right" : "traverseChildren",
      "info" : "SimpleName[36800-36808]:SimpleName[36757-36773]"
    }, {
      "left" : "constructor",
      "right" : "n",
      "info" : "SimpleName[36809-36820]:SimpleName[36774-36775]"
    }, {
      "left" : "JSType constructorType = constructor.getJSType();",
      "right" : "JSType constructorType = constructor.getJSType();",
      "info" : "VariableDeclarationStatement[36834-36883]:VariableDeclarationStatement[36832-36881]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[36888-36907]:VariableDeclarationStatement[36886-36905]"
    }, {
      "left" : "if (constructorType != null)",
      "right" : "if (constructorType != null)",
      "info" : "IfStatement[36912-37648]:IfStatement[36910-37695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36941-37648]:Block[36939-37695]"
    }, {
      "left" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
      "right" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[36949-37014]:ExpressionStatement[36947-37012]"
    }, {
      "left" : "if (constructorType.isUnknownType())",
      "right" : "if (constructorType.isUnknownType())",
      "info" : "IfStatement[37021-37642]:IfStatement[37019-37689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37058-37111]:Block[37056-37109]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[37068-37103]:ExpressionStatement[37066-37101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37117-37642]:Block[37115-37689]"
    }, {
      "left" : "FunctionType ct = constructorType.toMaybeFunctionType();",
      "right" : "FunctionType ct = constructorType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[37127-37183]:VariableDeclarationStatement[37125-37181]"
    }, {
      "left" : "if (ct == null && constructorType instanceof FunctionType)",
      "right" : "if (ct == null && constructorType instanceof FunctionType)",
      "info" : "IfStatement[37192-37537]:IfStatement[37190-37535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37251-37537]:Block[37249-37535]"
    }, {
      "left" : "ct = (FunctionType) constructorType;",
      "right" : "ct = (FunctionType) constructorType;",
      "info" : "ExpressionStatement[37491-37527]:ExpressionStatement[37489-37525]"
    }, {
      "left" : "if (ct != null && ct.isConstructor())",
      "right" : "if (ct != null && ct.isConstructor())",
      "info" : "IfStatement[37546-37634]:IfStatement[37544-37681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37584-37634]:Block[37582-37681]"
    }, {
      "left" : "type = ct.getInstanceType();",
      "right" : "type = ct.getInstanceType();",
      "info" : "ExpressionStatement[37596-37624]:ExpressionStatement[37594-37622]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[37653-37671]:ExpressionStatement[37700-37718]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[37797-37810]:ReturnStatement[37723-37736]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37818-37825]:Modifier[37744-37751]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[37826-37844]:SimpleType[37752-37770]"
    }, {
      "left" : "traverseAnd",
      "right" : "traverseAnd",
      "info" : "SimpleName[37845-37856]:SimpleName[37771-37782]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37857-37863]:SingleVariableDeclaration[37783-37789]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[37865-37880]:SingleVariableDeclaration[37791-37806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37882-37944]:Block[37808-37870]"
    }, {
      "left" : "return traverseShortCircuitingBinOp(n, scope, true);",
      "right" : "return traverseShortCircuitingBinOp(n, scope, true);",
      "info" : "ReturnStatement[37888-37940]:ReturnStatement[37814-37866]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37948-37955]:Modifier[37874-37881]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[37956-37965]:SimpleType[37882-37891]"
    }, {
      "left" : "traverseChildren",
      "right" : "traverseChildren",
      "info" : "SimpleName[37966-37982]:SimpleName[37892-37908]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37983-37989]:SingleVariableDeclaration[37909-37915]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[37991-38006]:SingleVariableDeclaration[37917-37932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38008-38143]:Block[37934-38069]"
    }, {
      "left" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
      "right" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
      "info" : "ForStatement[38014-38121]:ForStatement[37940-38047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38079-38121]:Block[38005-38047]"
    }, {
      "left" : "scope = traverse(el, scope);",
      "right" : "scope = traverse(el, scope);",
      "info" : "ExpressionStatement[38087-38115]:ExpressionStatement[38013-38041]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[38126-38139]:ReturnStatement[38052-38065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38147-38154]:Modifier[38073-38080]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[38155-38164]:SimpleType[38081-38090]"
    }, {
      "left" : "traverseGetElem",
      "right" : "traverseGetElem",
      "info" : "SimpleName[38165-38180]:SimpleName[38091-38106]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38181-38187]:SingleVariableDeclaration[38107-38113]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[38189-38204]:SingleVariableDeclaration[38115-38130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38206-38562]:Block[38132-38488]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[38212-38247]:ExpressionStatement[38138-38173]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(\n        getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());",
      "right" : "ObjectType objType = ObjectType.cast(\n        getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[38252-38359]:VariableDeclarationStatement[38178-38285]"
    }, {
      "left" : "if (objType != null)",
      "right" : "if (objType != null)",
      "info" : "IfStatement[38364-38501]:IfStatement[38290-38427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38385-38501]:Block[38311-38427]"
    }, {
      "left" : "JSType type = objType.getParameterType();",
      "right" : "JSType type = objType.getParameterType();",
      "info" : "VariableDeclarationStatement[38393-38434]:VariableDeclarationStatement[38319-38360]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[38441-38495]:IfStatement[38367-38421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38459-38495]:Block[38385-38421]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[38469-38487]:ExpressionStatement[38395-38413]"
    }, {
      "left" : "return dereferencePointer(n.getFirstChild(), scope);",
      "right" : "return dereferencePointer(n.getFirstChild(), scope);",
      "info" : "ReturnStatement[38506-38558]:ReturnStatement[38432-38484]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38566-38573]:Modifier[38492-38499]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[38574-38583]:SimpleType[38500-38509]"
    }, {
      "left" : "traverseGetProp",
      "right" : "traverseGetProp",
      "info" : "SimpleName[38584-38599]:SimpleName[38510-38525]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38600-38606]:SingleVariableDeclaration[38526-38532]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[38608-38623]:SingleVariableDeclaration[38534-38549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38625-38912]:Block[38551-38838]"
    }, {
      "left" : "Node objNode = n.getFirstChild();",
      "right" : "Node objNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[38631-38664]:VariableDeclarationStatement[38557-38590]"
    }, {
      "left" : "Node property = n.getLastChild();",
      "right" : "Node property = n.getLastChild();",
      "info" : "VariableDeclarationStatement[38669-38702]:VariableDeclarationStatement[38595-38628]"
    }, {
      "left" : "scope = traverseChildren(n, scope);",
      "right" : "scope = traverseChildren(n, scope);",
      "info" : "ExpressionStatement[38707-38742]:ExpressionStatement[38633-38668]"
    }, {
      "left" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
      "right" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
      "info" : "ExpressionStatement[38747-38851]:ExpressionStatement[38673-38777]"
    }, {
      "left" : "return dereferencePointer(n.getFirstChild(), scope);",
      "right" : "return dereferencePointer(n.getFirstChild(), scope);",
      "info" : "ReturnStatement[38856-38908]:ReturnStatement[38782-38834]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39446-39453]:Modifier[39372-39379]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39454-39458]:PrimitiveType[39380-39384]"
    }, {
      "left" : "inferPropertyTypesToMatchConstraint",
      "right" : "inferPropertyTypesToMatchConstraint",
      "info" : "SimpleName[39459-39494]:SimpleName[39385-39420]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[39502-39513]:SingleVariableDeclaration[39428-39439]"
    }, {
      "left" : "JSType constraint",
      "right" : "JSType constraint",
      "info" : "SingleVariableDeclaration[39515-39532]:SingleVariableDeclaration[39441-39458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39534-39787]:Block[39460-39713]"
    }, {
      "left" : "if (type == null || constraint == null)",
      "right" : "if (type == null || constraint == null)",
      "info" : "IfStatement[39540-39601]:IfStatement[39466-39527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39580-39601]:Block[39506-39527]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39588-39595]:ReturnStatement[39514-39521]"
    }, {
      "left" : "ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());",
      "right" : "ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[39607-39701]:VariableDeclarationStatement[39533-39627]"
    }, {
      "left" : "if (constraintObj != null)",
      "right" : "if (constraintObj != null)",
      "info" : "IfStatement[39706-39783]:IfStatement[39632-39709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39733-39783]:Block[39659-39709]"
    }, {
      "left" : "type.matchConstraint(constraintObj);",
      "right" : "type.matchConstraint(constraintObj);",
      "info" : "ExpressionStatement[39741-39777]:ExpressionStatement[39667-39703]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39893-39900]:Modifier[39819-39826]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[39901-39910]:SimpleType[39827-39836]"
    }, {
      "left" : "dereferencePointer",
      "right" : "dereferencePointer",
      "info" : "SimpleName[39911-39929]:SimpleName[39837-39855]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39930-39936]:SingleVariableDeclaration[39856-39862]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[39938-39953]:SingleVariableDeclaration[39864-39879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39955-40197]:Block[39881-40123]"
    }, {
      "left" : "if (n.isQualifiedName())",
      "right" : "if (n.isQualifiedName())",
      "info" : "IfStatement[39961-40175]:IfStatement[39887-40101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39986-40175]:Block[39912-40101]"
    }, {
      "left" : "JSType type = getJSType(n);",
      "right" : "JSType type = getJSType(n);",
      "info" : "VariableDeclarationStatement[39994-40021]:VariableDeclarationStatement[39920-39947]"
    }, {
      "left" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
      "right" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[40028-40082]:VariableDeclarationStatement[39954-40008]"
    }, {
      "left" : "if (type != narrowed)",
      "right" : "if (type != narrowed)",
      "info" : "IfStatement[40089-40169]:IfStatement[40015-40095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40111-40169]:Block[40037-40095]"
    }, {
      "left" : "scope = narrowScope(scope, n, narrowed);",
      "right" : "scope = narrowScope(scope, n, narrowed);",
      "info" : "ExpressionStatement[40121-40161]:ExpressionStatement[40047-40087]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[40180-40193]:ReturnStatement[40106-40119]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40201-40208]:Modifier[40127-40134]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[40209-40215]:SimpleType[40135-40141]"
    }, {
      "left" : "getPropertyType",
      "right" : "getPropertyType",
      "info" : "SimpleName[40216-40231]:SimpleName[40142-40157]"
    }, {
      "left" : "JSType objType",
      "right" : "JSType objType",
      "info" : "SingleVariableDeclaration[40232-40246]:SingleVariableDeclaration[40158-40172]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[40248-40263]:SingleVariableDeclaration[40174-40189]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40271-40277]:SingleVariableDeclaration[40197-40203]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[40279-40294]:SingleVariableDeclaration[40205-40220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40296-41455]:Block[40222-41381]"
    }, {
      "left" : "String qualifiedName = n.getQualifiedName();",
      "right" : "String qualifiedName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[40376-40420]:VariableDeclarationStatement[40302-40346]"
    }, {
      "left" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
      "right" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
      "info" : "VariableDeclarationStatement[40425-40479]:VariableDeclarationStatement[40351-40405]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[40484-40958]:IfStatement[40410-40884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40501-40958]:Block[40427-40884]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[40509-40540]:VariableDeclarationStatement[40435-40466]"
    }, {
      "left" : "if (varType != null)",
      "right" : "if (varType != null)",
      "info" : "IfStatement[40547-40952]:IfStatement[40473-40878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40568-40952]:Block[40494-40878]"
    }, {
      "left" : "if (varType.equals(getNativeType(UNKNOWN_TYPE)) &&\n            var != syntacticScope.getSlot(qualifiedName))",
      "right" : "if (varType.equals(getNativeType(UNKNOWN_TYPE)) &&\n            var != syntacticScope.getSlot(qualifiedName))",
      "info" : "IfStatement[40578-40944]:IfStatement[40504-40870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40687-40901]:Block[40613-40827]"
    }, {
      "left" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
      "right" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
      "info" : "ReturnStatement[40848-40891]:ReturnStatement[40774-40817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40907-40944]:Block[40833-40870]"
    }, {
      "left" : "return varType;",
      "right" : "return varType;",
      "info" : "ReturnStatement[40919-40934]:ReturnStatement[40845-40860]"
    }, {
      "left" : "JSType propertyType = null;",
      "right" : "JSType propertyType = null;",
      "info" : "VariableDeclarationStatement[40964-40991]:VariableDeclarationStatement[40890-40917]"
    }, {
      "left" : "if (objType != null)",
      "right" : "if (objType != null)",
      "info" : "IfStatement[40996-41081]:IfStatement[40922-41007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41017-41081]:Block[40943-41007]"
    }, {
      "left" : "propertyType = objType.findPropertyType(propName);",
      "right" : "propertyType = objType.findPropertyType(propName);",
      "info" : "ExpressionStatement[41025-41075]:ExpressionStatement[40951-41001]"
    }, {
      "left" : "if ((propertyType == null || propertyType.isUnknownType()) &&\n        qualifiedName != null)",
      "right" : "if ((propertyType == null || propertyType.isUnknownType()) &&\n        qualifiedName != null)",
      "info" : "IfStatement[41087-41425]:IfStatement[41013-41351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41180-41425]:Block[41106-41351]"
    }, {
      "left" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
      "right" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
      "info" : "VariableDeclarationStatement[41263-41333]:VariableDeclarationStatement[41189-41259]"
    }, {
      "left" : "if (regType != null)",
      "right" : "if (regType != null)",
      "info" : "IfStatement[41340-41419]:IfStatement[41266-41345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41361-41419]:Block[41287-41345]"
    }, {
      "left" : "propertyType = regType.getConstructor();",
      "right" : "propertyType = regType.getConstructor();",
      "info" : "ExpressionStatement[41371-41411]:ExpressionStatement[41297-41337]"
    }, {
      "left" : "return propertyType;",
      "right" : "return propertyType;",
      "info" : "ReturnStatement[41431-41451]:ReturnStatement[41357-41377]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41459-41466]:Modifier[41385-41392]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[41467-41485]:SimpleType[41393-41411]"
    }, {
      "left" : "traverseOr",
      "right" : "traverseOr",
      "info" : "SimpleName[41486-41496]:SimpleName[41412-41422]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41497-41503]:SingleVariableDeclaration[41423-41429]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[41505-41520]:SingleVariableDeclaration[41431-41446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41522-41585]:Block[41448-41511]"
    }, {
      "left" : "return traverseShortCircuitingBinOp(n, scope, false);",
      "right" : "return traverseShortCircuitingBinOp(n, scope, false);",
      "info" : "ReturnStatement[41528-41581]:ReturnStatement[41454-41507]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41589-41596]:Modifier[41515-41522]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[41597-41615]:SimpleType[41523-41541]"
    }, {
      "left" : "traverseShortCircuitingBinOp",
      "right" : "traverseShortCircuitingBinOp",
      "info" : "SimpleName[41616-41644]:SimpleName[41542-41570]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41652-41658]:SingleVariableDeclaration[41578-41584]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[41660-41675]:SingleVariableDeclaration[41586-41601]"
    }, {
      "left" : "boolean condition",
      "right" : "boolean condition",
      "info" : "SingleVariableDeclaration[41677-41694]:SingleVariableDeclaration[41603-41620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41696-43948]:Block[41622-43874]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[41702-41732]:VariableDeclarationStatement[41628-41658]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[41737-41767]:VariableDeclarationStatement[41663-41693]"
    }, {
      "left" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
      "right" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
      "info" : "VariableDeclarationStatement[41799-41924]:VariableDeclarationStatement[41725-41850]"
    }, {
      "left" : "JSType leftType = left.getJSType();",
      "right" : "JSType leftType = left.getJSType();",
      "info" : "VariableDeclarationStatement[41929-41964]:VariableDeclarationStatement[41855-41890]"
    }, {
      "left" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
      "right" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
      "info" : "VariableDeclarationStatement[42088-42282]:VariableDeclarationStatement[42014-42208]"
    }, {
      "left" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
      "right" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
      "info" : "VariableDeclarationStatement[42315-42448]:VariableDeclarationStatement[42241-42374]"
    }, {
      "left" : "JSType rightType = right.getJSType();",
      "right" : "JSType rightType = right.getJSType();",
      "info" : "VariableDeclarationStatement[42453-42490]:VariableDeclarationStatement[42379-42416]"
    }, {
      "left" : "JSType type;",
      "right" : "JSType type;",
      "info" : "VariableDeclarationStatement[42496-42508]:VariableDeclarationStatement[42422-42434]"
    }, {
      "left" : "BooleanOutcomePair literals;",
      "right" : "BooleanOutcomePair literals;",
      "info" : "VariableDeclarationStatement[42513-42541]:VariableDeclarationStatement[42439-42467]"
    }, {
      "left" : "if (leftType != null && rightType != null)",
      "right" : "if (leftType != null && rightType != null)",
      "info" : "IfStatement[42546-43899]:IfStatement[42472-43825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42589-43676]:Block[42515-43602]"
    }, {
      "left" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
      "right" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
      "info" : "ExpressionStatement[42597-42668]:ExpressionStatement[42523-42594]"
    }, {
      "left" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
      "right" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
      "info" : "IfStatement[42675-43216]:IfStatement[42601-43142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42758-42920]:Block[42684-42846]"
    }, {
      "left" : "type = leftType;",
      "right" : "type = leftType;",
      "info" : "ExpressionStatement[42863-42879]:ExpressionStatement[42789-42805]"
    }, {
      "left" : "literals = leftLiterals;",
      "right" : "literals = leftLiterals;",
      "info" : "ExpressionStatement[42888-42912]:ExpressionStatement[42814-42838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42926-43216]:Block[42852-43142]"
    }, {
      "left" : "type = leftType.getLeastSupertype(rightType);",
      "right" : "type = leftType.getLeastSupertype(rightType);",
      "info" : "ExpressionStatement[43069-43114]:ExpressionStatement[42995-43040]"
    }, {
      "left" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
      "right" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
      "info" : "ExpressionStatement[43123-43208]:ExpressionStatement[43049-43134]"
    }, {
      "left" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
      "right" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
      "info" : "IfStatement[43345-43670]:IfStatement[43271-43596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43457-43670]:Block[43383-43596]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[43522-43662]:IfStatement[43448-43588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43546-43662]:Block[43472-43588]"
    }, {
      "left" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
      "right" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[43558-43652]:ExpressionStatement[43484-43578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43682-43899]:Block[43608-43825]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[43690-43702]:ExpressionStatement[43616-43628]"
    }, {
      "left" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
      "right" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
      "info" : "ExpressionStatement[43709-43893]:ExpressionStatement[43635-43819]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[43904-43922]:ExpressionStatement[43830-43848]"
    }, {
      "left" : "return literals;",
      "right" : "return literals;",
      "info" : "ReturnStatement[43928-43944]:ReturnStatement[43854-43870]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43952-43959]:Modifier[43878-43885]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[43960-43978]:SimpleType[43886-43904]"
    }, {
      "left" : "traverseWithinShortCircuitingBinOp",
      "right" : "traverseWithinShortCircuitingBinOp",
      "info" : "SimpleName[43979-44013]:SimpleName[43905-43939]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44014-44020]:SingleVariableDeclaration[43940-43946]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[44028-44043]:SingleVariableDeclaration[43954-43969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44045-44314]:Block[43971-44240]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
      "info" : "SwitchStatement[44051-44310]:SwitchStatement[43977-44236]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[44080-44095]:SwitchCase[44006-44021]"
    }, {
      "left" : "return traverseAnd(n, scope);",
      "right" : "return traverseAnd(n, scope);",
      "info" : "ReturnStatement[44104-44133]:ReturnStatement[44030-44059]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[44141-44155]:SwitchCase[44067-44081]"
    }, {
      "left" : "return traverseOr(n, scope);",
      "right" : "return traverseOr(n, scope);",
      "info" : "ReturnStatement[44164-44192]:ReturnStatement[44090-44118]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44200-44208]:SwitchCase[44126-44134]"
    }, {
      "left" : "scope = traverse(n, scope);",
      "right" : "scope = traverse(n, scope);",
      "info" : "ExpressionStatement[44217-44244]:ExpressionStatement[44143-44170]"
    }, {
      "left" : "return newBooleanOutcomePair(n.getJSType(), scope);",
      "right" : "return newBooleanOutcomePair(n.getJSType(), scope);",
      "info" : "ReturnStatement[44253-44304]:ReturnStatement[44179-44230]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[44534-44552]:SimpleType[44460-44478]"
    }, {
      "left" : "getBooleanOutcomePair",
      "right" : "getBooleanOutcomePair",
      "info" : "SimpleName[44553-44574]:SimpleName[44479-44500]"
    }, {
      "left" : "BooleanOutcomePair left",
      "right" : "BooleanOutcomePair left",
      "info" : "SingleVariableDeclaration[44575-44598]:SingleVariableDeclaration[44501-44524]"
    }, {
      "left" : "BooleanOutcomePair right",
      "right" : "BooleanOutcomePair right",
      "info" : "SingleVariableDeclaration[44606-44630]:SingleVariableDeclaration[44532-44556]"
    }, {
      "left" : "boolean condition",
      "right" : "boolean condition",
      "info" : "SingleVariableDeclaration[44632-44649]:SingleVariableDeclaration[44558-44575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44651-44950]:Block[44577-44876]"
    }, {
      "left" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
      "right" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
      "info" : "ReturnStatement[44657-44946]:ReturnStatement[44583-44872]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45611-45617]:Modifier[45537-45543]"
    }, {
      "left" : "BooleanLiteralSet",
      "right" : "BooleanLiteralSet",
      "info" : "SimpleType[45618-45635]:SimpleType[45544-45561]"
    }, {
      "left" : "getBooleanOutcomes",
      "right" : "getBooleanOutcomes",
      "info" : "SimpleName[45636-45654]:SimpleName[45562-45580]"
    }, {
      "left" : "BooleanLiteralSet left",
      "right" : "BooleanLiteralSet left",
      "info" : "SingleVariableDeclaration[45655-45677]:SingleVariableDeclaration[45581-45603]"
    }, {
      "left" : "BooleanLiteralSet right",
      "right" : "BooleanLiteralSet right",
      "info" : "SingleVariableDeclaration[45685-45708]:SingleVariableDeclaration[45611-45634]"
    }, {
      "left" : "boolean condition",
      "right" : "boolean condition",
      "info" : "SingleVariableDeclaration[45710-45727]:SingleVariableDeclaration[45636-45653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45729-45812]:Block[45655-45738]"
    }, {
      "left" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
      "right" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
      "info" : "ReturnStatement[45735-45808]:ReturnStatement[45661-45734]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46099-46106]:Modifier[46025-46032]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[46107-46112]:Modifier[46033-46038]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[46113-46118]:TYPE_DECLARATION_KIND[46039-46044]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleName[46119-46137]:SimpleName[46045-46063]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleName[46539-46557]:SimpleName[46465-46483]"
    }, {
      "left" : "BooleanLiteralSet toBooleanOutcomes",
      "right" : "BooleanLiteralSet toBooleanOutcomes",
      "info" : "SingleVariableDeclaration[46567-46602]:SingleVariableDeclaration[46493-46528]"
    }, {
      "left" : "BooleanLiteralSet booleanValues",
      "right" : "BooleanLiteralSet booleanValues",
      "info" : "SingleVariableDeclaration[46604-46635]:SingleVariableDeclaration[46530-46561]"
    }, {
      "left" : "FlowScope leftScope",
      "right" : "FlowScope leftScope",
      "info" : "SingleVariableDeclaration[46645-46664]:SingleVariableDeclaration[46571-46590]"
    }, {
      "left" : "FlowScope rightScope",
      "right" : "FlowScope rightScope",
      "info" : "SingleVariableDeclaration[46666-46686]:SingleVariableDeclaration[46592-46612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46688-46857]:Block[46614-46783]"
    }, {
      "left" : "this.toBooleanOutcomes = toBooleanOutcomes;",
      "right" : "this.toBooleanOutcomes = toBooleanOutcomes;",
      "info" : "ExpressionStatement[46696-46739]:ExpressionStatement[46622-46665]"
    }, {
      "left" : "this.booleanValues = booleanValues;",
      "right" : "this.booleanValues = booleanValues;",
      "info" : "ExpressionStatement[46746-46781]:ExpressionStatement[46672-46707]"
    }, {
      "left" : "this.leftScope = leftScope;",
      "right" : "this.leftScope = leftScope;",
      "info" : "ExpressionStatement[46788-46815]:ExpressionStatement[46714-46741]"
    }, {
      "left" : "this.rightScope = rightScope;",
      "right" : "this.rightScope = rightScope;",
      "info" : "ExpressionStatement[46822-46851]:ExpressionStatement[46748-46777]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[46987-46996]:SimpleType[46913-46922]"
    }, {
      "left" : "getJoinedFlowScope",
      "right" : "getJoinedFlowScope",
      "info" : "SimpleName[46997-47015]:SimpleName[46923-46941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47018-47247]:Block[46944-47173]"
    }, {
      "left" : "if (joinedScope == null)",
      "right" : "if (joinedScope == null)",
      "info" : "IfStatement[47026-47215]:IfStatement[46952-47141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47051-47215]:Block[46977-47141]"
    }, {
      "left" : "if (leftScope == rightScope)",
      "right" : "if (leftScope == rightScope)",
      "info" : "IfStatement[47061-47207]:IfStatement[46987-47133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47090-47137]:Block[47016-47063]"
    }, {
      "left" : "joinedScope = rightScope;",
      "right" : "joinedScope = rightScope;",
      "info" : "ExpressionStatement[47102-47127]:ExpressionStatement[47028-47053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47143-47207]:Block[47069-47133]"
    }, {
      "left" : "joinedScope = join(leftScope, rightScope);",
      "right" : "joinedScope = join(leftScope, rightScope);",
      "info" : "ExpressionStatement[47155-47197]:ExpressionStatement[47081-47123]"
    }, {
      "left" : "return joinedScope;",
      "right" : "return joinedScope;",
      "info" : "ReturnStatement[47222-47241]:ReturnStatement[47148-47167]"
    }, {
      "left" : "FlowScope",
      "right" : "FlowScope",
      "info" : "SimpleType[47358-47367]:SimpleType[47284-47293]"
    }, {
      "left" : "getOutcomeFlowScope",
      "right" : "getOutcomeFlowScope",
      "info" : "SimpleName[47368-47387]:SimpleName[47294-47313]"
    }, {
      "left" : "int nodeType",
      "right" : "int nodeType",
      "info" : "SingleVariableDeclaration[47388-47400]:SingleVariableDeclaration[47314-47326]"
    }, {
      "left" : "boolean outcome",
      "right" : "boolean outcome",
      "info" : "SingleVariableDeclaration[47402-47417]:SingleVariableDeclaration[47328-47343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47419-47670]:Block[47345-47596]"
    }, {
      "left" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
      "right" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
      "info" : "IfStatement[47427-47664]:IfStatement[47353-47590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47511-47612]:Block[47437-47538]"
    }, {
      "left" : "return rightScope;",
      "right" : "return rightScope;",
      "info" : "ReturnStatement[47586-47604]:ReturnStatement[47512-47530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47618-47664]:Block[47544-47590]"
    }, {
      "left" : "return getJoinedFlowScope();",
      "right" : "return getJoinedFlowScope();",
      "info" : "ReturnStatement[47628-47656]:ReturnStatement[47554-47582]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47678-47685]:Modifier[47604-47611]"
    }, {
      "left" : "BooleanOutcomePair",
      "right" : "BooleanOutcomePair",
      "info" : "SimpleType[47686-47704]:SimpleType[47612-47630]"
    }, {
      "left" : "newBooleanOutcomePair",
      "right" : "newBooleanOutcomePair",
      "info" : "SimpleName[47705-47726]:SimpleName[47631-47652]"
    }, {
      "left" : "JSType jsType",
      "right" : "JSType jsType",
      "info" : "SingleVariableDeclaration[47734-47747]:SingleVariableDeclaration[47660-47673]"
    }, {
      "left" : "FlowScope flowScope",
      "right" : "FlowScope flowScope",
      "info" : "SingleVariableDeclaration[47749-47768]:SingleVariableDeclaration[47675-47694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47770-48156]:Block[47696-48082]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[47776-47921]:IfStatement[47702-47847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47796-47921]:Block[47722-47847]"
    }, {
      "left" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
      "right" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
      "info" : "ReturnStatement[47804-47915]:ReturnStatement[47730-47841]"
    }, {
      "left" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
      "right" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
      "info" : "ReturnStatement[47926-48152]:ReturnStatement[47852-48078]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48160-48167]:Modifier[48086-48093]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48168-48172]:PrimitiveType[48094-48098]"
    }, {
      "left" : "redeclareSimpleVar",
      "right" : "redeclareSimpleVar",
      "info" : "SimpleName[48173-48191]:SimpleName[48099-48117]"
    }, {
      "left" : "FlowScope scope",
      "right" : "FlowScope scope",
      "info" : "SingleVariableDeclaration[48199-48214]:SingleVariableDeclaration[48125-48140]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[48216-48229]:SingleVariableDeclaration[48142-48155]"
    }, {
      "left" : "JSType varType",
      "right" : "JSType varType",
      "info" : "SingleVariableDeclaration[48231-48245]:SingleVariableDeclaration[48157-48171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48247-48554]:Block[48173-48480]"
    }, {
      "left" : "Preconditions.checkState(nameNode.isName());",
      "right" : "Preconditions.checkState(nameNode.isName());",
      "info" : "ExpressionStatement[48253-48297]:ExpressionStatement[48179-48223]"
    }, {
      "left" : "String varName = nameNode.getString();",
      "right" : "String varName = nameNode.getString();",
      "info" : "VariableDeclarationStatement[48302-48340]:VariableDeclarationStatement[48228-48266]"
    }, {
      "left" : "if (varType == null)",
      "right" : "if (varType == null)",
      "info" : "IfStatement[48345-48431]:IfStatement[48271-48357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48366-48431]:Block[48292-48357]"
    }, {
      "left" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[48374-48425]:ExpressionStatement[48300-48351]"
    }, {
      "left" : "if (isUnflowable(syntacticScope.getVar(varName)))",
      "right" : "if (isUnflowable(syntacticScope.getVar(varName)))",
      "info" : "IfStatement[48436-48507]:IfStatement[48362-48433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48486-48507]:Block[48412-48433]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48494-48501]:ReturnStatement[48420-48427]"
    }, {
      "left" : "scope.inferSlotType(varName, varType);",
      "right" : "scope.inferSlotType(varName, varType);",
      "info" : "ExpressionStatement[48512-48550]:ExpressionStatement[48438-48476]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48558-48565]:Modifier[48484-48491]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48566-48573]:PrimitiveType[48492-48499]"
    }, {
      "left" : "isUnflowable",
      "right" : "isUnflowable",
      "info" : "SimpleName[48574-48586]:SimpleName[48500-48512]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[48587-48592]:SingleVariableDeclaration[48513-48518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48594-48772]:Block[48520-48698]"
    }, {
      "left" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
      "right" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
      "info" : "ReturnStatement[48600-48768]:ReturnStatement[48526-48694]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48882-48889]:Modifier[48808-48815]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[48890-48896]:SimpleType[48816-48822]"
    }, {
      "left" : "getJSType",
      "right" : "getJSType",
      "info" : "SimpleName[48897-48906]:SimpleName[48823-48832]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48907-48913]:SingleVariableDeclaration[48833-48839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48915-49343]:Block[48841-49269]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[48921-48951]:VariableDeclarationStatement[48847-48877]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[48956-49339]:IfStatement[48882-49265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48976-49305]:Block[48902-49231]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[49264-49299]:ReturnStatement[49190-49225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49311-49339]:Block[49237-49265]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[49319-49333]:ReturnStatement[49245-49259]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49347-49354]:Modifier[49273-49280]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[49355-49361]:SimpleType[49281-49287]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[49362-49375]:SimpleName[49288-49301]"
    }, {
      "left" : "JSTypeNative typeId",
      "right" : "JSTypeNative typeId",
      "info" : "SingleVariableDeclaration[49376-49395]:SingleVariableDeclaration[49302-49321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49397-49445]:Block[49323-49371]"
    }, {
      "left" : "return registry.getNativeType(typeId);",
      "right" : "return registry.getNativeType(typeId);",
      "info" : "ReturnStatement[49403-49441]:ReturnStatement[49329-49367]"
    } ]
  },
  "interFileMappings" : { }
}