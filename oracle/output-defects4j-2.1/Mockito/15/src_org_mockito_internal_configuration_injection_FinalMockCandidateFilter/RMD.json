{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FinalMockCandidateFilter",
      "right" : "FinalMockCandidateFilter",
      "info" : "TypeDeclaration[236-1489]:TypeDeclaration[301-1677]"
    }, {
      "left" : "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance)",
      "right" : "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance)",
      "info" : "MethodDeclaration[651-1486]:MethodDeclaration[716-1674]"
    }, {
      "left" : "public boolean thenInject()",
      "right" : "public boolean thenInject()",
      "info" : "MethodDeclaration[933-1307]:MethodDeclaration[998-1495]"
    }, {
      "left" : "public boolean thenInject()",
      "right" : "public boolean thenInject()",
      "info" : "MethodDeclaration[1390-1465]:MethodDeclaration[1578-1653]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[769-1486]:Block[834-1674]"
    }, {
      "left" : "if(mocks.size() == 1)",
      "right" : "if(mocks.size() == 1)",
      "info" : "IfStatement[780-1334]:IfStatement[845-1522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[802-1334]:Block[867-1522]"
    }, {
      "left" : "final Object matchingMock = mocks.iterator().next();",
      "right" : "final Object matchingMock = mocks.iterator().next();",
      "info" : "VariableDeclarationStatement[817-869]:VariableDeclarationStatement[882-934]"
    }, {
      "left" : "return new OngoingInjecter() {\r\n                public boolean thenInject() {\r\n                    try {\r\n                            new FieldSetter(fieldInstance, field).set(matchingMock);\r\n                    } catch (Exception e) {\r\n                        throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\r\n                    }\r\n                    return true;\r\n                }\r\n            };",
      "right" : "return new OngoingInjecter() {\r\n                public boolean thenInject() {\r\n                    try {\r\n                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\r\n                            new FieldSetter(fieldInstance, field).set(matchingMock);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\r\n                    }\r\n                    return true;\r\n                }\r\n            };",
      "info" : "ReturnStatement[885-1323]:ReturnStatement[950-1511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[961-1307]:Block[1026-1495]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[984-1254]:TryStatement[1049-1442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[988-1098]:Block[1053-1286]"
    }, {
      "left" : "new FieldSetter(fieldInstance, field).set(matchingMock);",
      "right" : "new FieldSetter(fieldInstance, field).set(matchingMock);",
      "info" : "ExpressionStatement[1019-1075]:ExpressionStatement[1180-1236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1119-1254]:Block[1307-1442]"
    }, {
      "left" : "throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);",
      "right" : "throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);",
      "info" : "ThrowStatement[1146-1231]:ThrowStatement[1334-1419]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1276-1288]:ReturnStatement[1464-1476]"
    }, {
      "left" : "return new OngoingInjecter() {\r\n            public boolean thenInject() {\r\n                return false;\r\n            }\r\n        };",
      "right" : "return new OngoingInjecter() {\r\n            public boolean thenInject() {\r\n                return false;\r\n            }\r\n        };",
      "info" : "ReturnStatement[1346-1477]:ReturnStatement[1534-1665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1418-1465]:Block[1606-1653]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1437-1450]:ReturnStatement[1625-1638]"
    } ]
  },
  "interFileMappings" : { }
}