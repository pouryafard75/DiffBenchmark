{
  "matchedElements" : [
 {
    "left" : "class : NumberInput",
    "right" : "class : NumberInput",
    "info" : "TypeDeclaration[70-10604]:TypeDeclaration[70-11025]"
  }, {
    "left" : "NASTY_SMALL_DOUBLE",
    "right" : "NASTY_SMALL_DOUBLE",
    "info" : "FieldDeclaration[107-383]:FieldDeclaration[107-383]"
  }, {
    "left" : "L_BILLION",
    "right" : "L_BILLION",
    "info" : "FieldDeclaration[389-519]:FieldDeclaration[389-519]"
  }, {
    "left" : "MIN_LONG_STR_NO_SIGN",
    "right" : "MIN_LONG_STR_NO_SIGN",
    "info" : "FieldDeclaration[525-612]:FieldDeclaration[525-612]"
  }, {
    "left" : "MAX_LONG_STR",
    "right" : "MAX_LONG_STR",
    "info" : "FieldDeclaration[617-683]:FieldDeclaration[617-683]"
  }, {
    "left" : "public parseInt(digitChars , offset int, len int) : int",
    "right" : "public parseInt(digitChars , offset int, len int) : int",
    "info" : "MethodDeclaration[693-2310]:MethodDeclaration[693-2310]"
  }, {
    "left" : "public parseInt(str ) : int",
    "right" : "public parseInt(str ) : int",
    "info" : "MethodDeclaration[2316-4227]:MethodDeclaration[2316-4227]"
  }, {
    "left" : "public parseLong(digitChars , offset int, len int) : long",
    "right" : "public parseLong(digitChars , offset int, len int) : long",
    "info" : "MethodDeclaration[4237-4531]:MethodDeclaration[4237-4531]"
  }, {
    "left" : "public parseLong(str ) : long",
    "right" : "public parseLong(str ) : long",
    "info" : "MethodDeclaration[4537-4962]:MethodDeclaration[4537-4962]"
  }, {
    "left" : "public inLongRange(digitChars , offset int, len int, negative boolean) : boolean",
    "right" : "public inLongRange(digitChars , offset int, len int, negative boolean) : boolean",
    "info" : "MethodDeclaration[4972-5879]:MethodDeclaration[4972-5879]"
  }, {
    "left" : "public inLongRange(numberStr , negative boolean) : boolean",
    "right" : "public inLongRange(numberStr , negative boolean) : boolean",
    "info" : "MethodDeclaration[5885-6718]:MethodDeclaration[5885-6718]"
  }, {
    "left" : "public parseAsInt(input , defaultValue int) : int",
    "right" : "public parseAsInt(input , defaultValue int) : int",
    "info" : "MethodDeclaration[6724-7942]:MethodDeclaration[6724-7942]"
  }, {
    "left" : "public parseAsLong(input , defaultValue long) : long",
    "right" : "public parseAsLong(input , defaultValue long) : long",
    "info" : "MethodDeclaration[7948-9165]:MethodDeclaration[7948-9165]"
  }, {
    "left" : "public parseAsDouble(input , defaultValue double) : double",
    "right" : "public parseAsDouble(input , defaultValue double) : double",
    "info" : "MethodDeclaration[9175-9587]:MethodDeclaration[9175-9587]"
  }, {
    "left" : "public parseDouble(numStr ) : double",
    "right" : "public parseDouble(numStr ) : double",
    "info" : "MethodDeclaration[9593-10105]:MethodDeclaration[9593-10105]"
  }, {
    "left" : "public parseBigDecimal(numStr ) : ",
    "right" : "public parseBigDecimal(numStr ) : ",
    "info" : "MethodDeclaration[10111-10250]:MethodDeclaration[10111-10360]"
  }, {
    "left" : "public parseBigDecimal(buffer ) : ",
    "right" : "public parseBigDecimal(buffer ) : ",
    "info" : "MethodDeclaration[10256-10406]:MethodDeclaration[10366-10516]"
  }, {
    "left" : "public parseBigDecimal(buffer , offset int, len int) : ",
    "right" : "public parseBigDecimal(buffer , offset int, len int) : ",
    "info" : "MethodDeclaration[10416-10601]:MethodDeclaration[10526-10846]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[939-945]:Modifier[939-945]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[946-952]:Modifier[946-952]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[953-956]:PrimitiveType[953-956]"
  }, {
    "left" : "parseInt",
    "right" : "parseInt",
    "info" : "SimpleName[957-965]:SimpleName[957-965]"
  }, {
    "left" : "char[] digitChars",
    "right" : "char[] digitChars",
    "info" : "SingleVariableDeclaration[966-983]:SingleVariableDeclaration[966-983]"
  }, {
    "left" : "int offset",
    "right" : "int offset",
    "info" : "SingleVariableDeclaration[985-995]:SingleVariableDeclaration[985-995]"
  }, {
    "left" : "int len",
    "right" : "int len",
    "info" : "SingleVariableDeclaration[997-1004]:SingleVariableDeclaration[997-1004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1010-2310]:Block[1010-2310]"
  }, {
    "left" : "int num = digitChars[offset] - '0';",
    "right" : "int num = digitChars[offset] - '0';",
    "info" : "VariableDeclarationStatement[1020-1055]:VariableDeclarationStatement[1020-1055]"
  }, {
    "left" : "len += offset;",
    "right" : "len += offset;",
    "info" : "ExpressionStatement[1064-1078]:ExpressionStatement[1064-1078]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1165-2284]:IfStatement[1165-2284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1185-2284]:Block[1185-2284]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1199-1245]:ExpressionStatement[1199-1245]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1258-2274]:IfStatement[1258-2274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1278-2274]:Block[1278-2274]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1296-1342]:ExpressionStatement[1296-1342]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1359-2260]:IfStatement[1359-2260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1379-2260]:Block[1379-2260]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1401-1447]:ExpressionStatement[1401-1447]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1468-2242]:IfStatement[1468-2242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1488-2242]:Block[1488-2242]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1514-1560]:ExpressionStatement[1514-1560]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1585-2220]:IfStatement[1585-2220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1605-2220]:Block[1605-2220]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1635-1681]:ExpressionStatement[1635-1681]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1710-2194]:IfStatement[1710-2194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1730-2194]:Block[1730-2194]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1764-1810]:ExpressionStatement[1764-1810]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1843-2164]:IfStatement[1843-2164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1863-2164]:Block[1863-2164]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[1901-1947]:ExpressionStatement[1901-1947]"
  }, {
    "left" : "if (++offset < len)",
    "right" : "if (++offset < len)",
    "info" : "IfStatement[1984-2130]:IfStatement[1984-2130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2004-2130]:Block[2004-2130]"
  }, {
    "left" : "num = (num * 10) + (digitChars[offset] - '0');",
    "right" : "num = (num * 10) + (digitChars[offset] - '0');",
    "info" : "ExpressionStatement[2046-2092]:ExpressionStatement[2046-2092]"
  }, {
    "left" : "return num;",
    "right" : "return num;",
    "info" : "ReturnStatement[2293-2304]:ReturnStatement[2293-2304]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2424-2430]:Modifier[2424-2430]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2431-2437]:Modifier[2431-2437]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[2438-2441]:PrimitiveType[2438-2441]"
  }, {
    "left" : "parseInt",
    "right" : "parseInt",
    "info" : "SimpleName[2442-2450]:SimpleName[2442-2450]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[2451-2461]:SingleVariableDeclaration[2451-2461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2467-4227]:Block[2467-4227]"
  }, {
    "left" : "char c = str.charAt(0);",
    "right" : "char c = str.charAt(0);",
    "info" : "VariableDeclarationStatement[2689-2712]:VariableDeclarationStatement[2689-2712]"
  }, {
    "left" : "int length = str.length();",
    "right" : "int length = str.length();",
    "info" : "VariableDeclarationStatement[2721-2747]:VariableDeclarationStatement[2721-2747]"
  }, {
    "left" : "boolean negative = (c == '-');",
    "right" : "boolean negative = (c == '-');",
    "info" : "VariableDeclarationStatement[2756-2786]:VariableDeclarationStatement[2756-2786]"
  }, {
    "left" : "int offset = 1;",
    "right" : "int offset = 1;",
    "info" : "VariableDeclarationStatement[2795-2810]:VariableDeclarationStatement[2795-2810]"
  }, {
    "left" : "if (negative)",
    "right" : "if (negative)",
    "info" : "IfStatement[2895-3171]:IfStatement[2895-3171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2909-3064]:Block[2909-3064]"
  }, {
    "left" : "if (length == 1 || length > 10)",
    "right" : "if (length == 1 || length > 10)",
    "info" : "IfStatement[2923-3016]:IfStatement[2923-3016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2955-3016]:Block[2955-3016]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[2973-3002]:ReturnStatement[2973-3002]"
  }, {
    "left" : "c = str.charAt(offset++);",
    "right" : "c = str.charAt(offset++);",
    "info" : "ExpressionStatement[3029-3054]:ExpressionStatement[3029-3054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3070-3171]:Block[3070-3171]"
  }, {
    "left" : "if (length > 9)",
    "right" : "if (length > 9)",
    "info" : "IfStatement[3084-3161]:IfStatement[3084-3161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3100-3161]:Block[3100-3161]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[3118-3147]:ReturnStatement[3118-3147]"
  }, {
    "left" : "if (c > '9' || c < '0')",
    "right" : "if (c > '9' || c < '0')",
    "info" : "IfStatement[3180-3257]:IfStatement[3180-3257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3204-3257]:Block[3204-3257]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[3218-3247]:ReturnStatement[3218-3247]"
  }, {
    "left" : "int num = c - '0';",
    "right" : "int num = c - '0';",
    "info" : "VariableDeclarationStatement[3266-3284]:VariableDeclarationStatement[3266-3284]"
  }, {
    "left" : "if (offset < length)",
    "right" : "if (offset < length)",
    "info" : "IfStatement[3293-4183]:IfStatement[3293-4183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3314-4183]:Block[3314-4183]"
  }, {
    "left" : "c = str.charAt(offset++);",
    "right" : "c = str.charAt(offset++);",
    "info" : "ExpressionStatement[3328-3353]:ExpressionStatement[3328-3353]"
  }, {
    "left" : "if (c > '9' || c < '0')",
    "right" : "if (c > '9' || c < '0')",
    "info" : "IfStatement[3366-3451]:IfStatement[3366-3451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3390-3451]:Block[3390-3451]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[3408-3437]:ReturnStatement[3408-3437]"
  }, {
    "left" : "num = (num * 10) + (c - '0');",
    "right" : "num = (num * 10) + (c - '0');",
    "info" : "ExpressionStatement[3464-3493]:ExpressionStatement[3464-3493]"
  }, {
    "left" : "if (offset < length)",
    "right" : "if (offset < length)",
    "info" : "IfStatement[3506-4173]:IfStatement[3506-4173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3527-4173]:Block[3527-4173]"
  }, {
    "left" : "c = str.charAt(offset++);",
    "right" : "c = str.charAt(offset++);",
    "info" : "ExpressionStatement[3545-3570]:ExpressionStatement[3545-3570]"
  }, {
    "left" : "if (c > '9' || c < '0')",
    "right" : "if (c > '9' || c < '0')",
    "info" : "IfStatement[3587-3680]:IfStatement[3587-3680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3611-3680]:Block[3611-3680]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[3633-3662]:ReturnStatement[3633-3662]"
  }, {
    "left" : "num = (num * 10) + (c - '0');",
    "right" : "num = (num * 10) + (c - '0');",
    "info" : "ExpressionStatement[3697-3726]:ExpressionStatement[3697-3726]"
  }, {
    "left" : "if (offset < length)",
    "right" : "if (offset < length)",
    "info" : "IfStatement[3809-4159]:IfStatement[3809-4159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3830-4159]:Block[3830-4159]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[3852-4141]:DoStatement[3852-4141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3855-4116]:Block[3855-4116]"
  }, {
    "left" : "c = str.charAt(offset++);",
    "right" : "c = str.charAt(offset++);",
    "info" : "ExpressionStatement[3881-3906]:ExpressionStatement[3881-3906]"
  }, {
    "left" : "if (c > '9' || c < '0')",
    "right" : "if (c > '9' || c < '0')",
    "info" : "IfStatement[3931-4040]:IfStatement[3931-4040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3955-4040]:Block[3955-4040]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[3985-4014]:ReturnStatement[3985-4014]"
  }, {
    "left" : "num = (num * 10) + (c - '0');",
    "right" : "num = (num * 10) + (c - '0');",
    "info" : "ExpressionStatement[4065-4094]:ExpressionStatement[4065-4094]"
  }, {
    "left" : "return negative ? -num : num;",
    "right" : "return negative ? -num : num;",
    "info" : "ReturnStatement[4192-4221]:ReturnStatement[4192-4221]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4237-4243]:Modifier[4237-4243]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4244-4250]:Modifier[4244-4250]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[4251-4255]:PrimitiveType[4251-4255]"
  }, {
    "left" : "parseLong",
    "right" : "parseLong",
    "info" : "SimpleName[4256-4265]:SimpleName[4256-4265]"
  }, {
    "left" : "char[] digitChars",
    "right" : "char[] digitChars",
    "info" : "SingleVariableDeclaration[4266-4283]:SingleVariableDeclaration[4266-4283]"
  }, {
    "left" : "int offset",
    "right" : "int offset",
    "info" : "SingleVariableDeclaration[4285-4295]:SingleVariableDeclaration[4285-4295]"
  }, {
    "left" : "int len",
    "right" : "int len",
    "info" : "SingleVariableDeclaration[4297-4304]:SingleVariableDeclaration[4297-4304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4310-4531]:Block[4310-4531]"
  }, {
    "left" : "int len1 = len-9;",
    "right" : "int len1 = len-9;",
    "info" : "VariableDeclarationStatement[4375-4392]:VariableDeclarationStatement[4375-4392]"
  }, {
    "left" : "long val = parseInt(digitChars, offset, len1) * L_BILLION;",
    "right" : "long val = parseInt(digitChars, offset, len1) * L_BILLION;",
    "info" : "VariableDeclarationStatement[4401-4459]:VariableDeclarationStatement[4401-4459]"
  }, {
    "left" : "return val + (long) parseInt(digitChars, offset+len1, 9);",
    "right" : "return val + (long) parseInt(digitChars, offset+len1, 9);",
    "info" : "ReturnStatement[4468-4525]:ReturnStatement[4468-4525]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4537-4543]:Modifier[4537-4543]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4544-4550]:Modifier[4544-4550]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[4551-4555]:PrimitiveType[4551-4555]"
  }, {
    "left" : "parseLong",
    "right" : "parseLong",
    "info" : "SimpleName[4556-4565]:SimpleName[4556-4565]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[4566-4576]:SingleVariableDeclaration[4566-4576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4582-4962]:Block[4582-4962]"
  }, {
    "left" : "int length = str.length();",
    "right" : "int length = str.length();",
    "info" : "VariableDeclarationStatement[4758-4784]:VariableDeclarationStatement[4758-4784]"
  }, {
    "left" : "if (length <= 9)",
    "right" : "if (length <= 9)",
    "info" : "IfStatement[4793-4862]:IfStatement[4793-4862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4810-4862]:Block[4810-4862]"
  }, {
    "left" : "return (long) parseInt(str);",
    "right" : "return (long) parseInt(str);",
    "info" : "ReturnStatement[4824-4852]:ReturnStatement[4824-4852]"
  }, {
    "left" : "return Long.parseLong(str);",
    "right" : "return Long.parseLong(str);",
    "info" : "ReturnStatement[4929-4956]:ReturnStatement[4929-4956]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5358-5364]:Modifier[5358-5364]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5365-5371]:Modifier[5365-5371]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5372-5379]:PrimitiveType[5372-5379]"
  }, {
    "left" : "inLongRange",
    "right" : "inLongRange",
    "info" : "SimpleName[5380-5391]:SimpleName[5380-5391]"
  }, {
    "left" : "char[] digitChars",
    "right" : "char[] digitChars",
    "info" : "SingleVariableDeclaration[5392-5409]:SingleVariableDeclaration[5392-5409]"
  }, {
    "left" : "int offset",
    "right" : "int offset",
    "info" : "SingleVariableDeclaration[5411-5421]:SingleVariableDeclaration[5411-5421]"
  }, {
    "left" : "int len",
    "right" : "int len",
    "info" : "SingleVariableDeclaration[5423-5430]:SingleVariableDeclaration[5423-5430]"
  }, {
    "left" : "boolean negative",
    "right" : "boolean negative",
    "info" : "SingleVariableDeclaration[5444-5460]:SingleVariableDeclaration[5444-5460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5466-5879]:Block[5466-5879]"
  }, {
    "left" : "String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;",
    "right" : "String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;",
    "info" : "VariableDeclarationStatement[5476-5539]:VariableDeclarationStatement[5476-5539]"
  }, {
    "left" : "int cmpLen = cmpStr.length();",
    "right" : "int cmpLen = cmpStr.length();",
    "info" : "VariableDeclarationStatement[5548-5577]:VariableDeclarationStatement[5548-5577]"
  }, {
    "left" : "if (len < cmpLen)",
    "right" : "if (len < cmpLen)",
    "info" : "IfStatement[5586-5616]:IfStatement[5586-5616]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[5604-5616]:ReturnStatement[5604-5616]"
  }, {
    "left" : "if (len > cmpLen)",
    "right" : "if (len > cmpLen)",
    "info" : "IfStatement[5625-5656]:IfStatement[5625-5656]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5643-5656]:ReturnStatement[5643-5656]"
  }, {
    "left" : "for (int i = 0; i < cmpLen; ++i)",
    "right" : "for (int i = 0; i < cmpLen; ++i)",
    "info" : "ForStatement[5666-5852]:ForStatement[5666-5852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5699-5852]:Block[5699-5852]"
  }, {
    "left" : "int diff = digitChars[offset+i] - cmpStr.charAt(i);",
    "right" : "int diff = digitChars[offset+i] - cmpStr.charAt(i);",
    "info" : "VariableDeclarationStatement[5713-5764]:VariableDeclarationStatement[5713-5764]"
  }, {
    "left" : "if (diff != 0)",
    "right" : "if (diff != 0)",
    "info" : "IfStatement[5777-5842]:IfStatement[5777-5842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5792-5842]:Block[5792-5842]"
  }, {
    "left" : "return (diff < 0);",
    "right" : "return (diff < 0);",
    "info" : "ReturnStatement[5810-5828]:ReturnStatement[5810-5828]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[5861-5873]:ReturnStatement[5861-5873]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6122-6128]:Modifier[6122-6128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6129-6135]:Modifier[6129-6135]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6136-6143]:PrimitiveType[6136-6143]"
  }, {
    "left" : "inLongRange",
    "right" : "inLongRange",
    "info" : "SimpleName[6144-6155]:SimpleName[6144-6155]"
  }, {
    "left" : "String numberStr",
    "right" : "String numberStr",
    "info" : "SingleVariableDeclaration[6156-6172]:SingleVariableDeclaration[6156-6172]"
  }, {
    "left" : "boolean negative",
    "right" : "boolean negative",
    "info" : "SingleVariableDeclaration[6174-6190]:SingleVariableDeclaration[6174-6190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6196-6718]:Block[6196-6718]"
  }, {
    "left" : "String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;",
    "right" : "String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;",
    "info" : "VariableDeclarationStatement[6206-6269]:VariableDeclarationStatement[6206-6269]"
  }, {
    "left" : "int cmpLen = cmpStr.length();",
    "right" : "int cmpLen = cmpStr.length();",
    "info" : "VariableDeclarationStatement[6278-6307]:VariableDeclarationStatement[6278-6307]"
  }, {
    "left" : "int actualLen = numberStr.length();",
    "right" : "int actualLen = numberStr.length();",
    "info" : "VariableDeclarationStatement[6316-6351]:VariableDeclarationStatement[6316-6351]"
  }, {
    "left" : "if (actualLen < cmpLen)",
    "right" : "if (actualLen < cmpLen)",
    "info" : "IfStatement[6360-6396]:IfStatement[6360-6396]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6384-6396]:ReturnStatement[6384-6396]"
  }, {
    "left" : "if (actualLen > cmpLen)",
    "right" : "if (actualLen > cmpLen)",
    "info" : "IfStatement[6405-6442]:IfStatement[6405-6442]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6429-6442]:ReturnStatement[6429-6442]"
  }, {
    "left" : "for (int i = 0; i < cmpLen; ++i)",
    "right" : "for (int i = 0; i < cmpLen; ++i)",
    "info" : "ForStatement[6506-6691]:ForStatement[6506-6691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6539-6691]:Block[6539-6691]"
  }, {
    "left" : "int diff = numberStr.charAt(i) - cmpStr.charAt(i);",
    "right" : "int diff = numberStr.charAt(i) - cmpStr.charAt(i);",
    "info" : "VariableDeclarationStatement[6553-6603]:VariableDeclarationStatement[6553-6603]"
  }, {
    "left" : "if (diff != 0)",
    "right" : "if (diff != 0)",
    "info" : "IfStatement[6616-6681]:IfStatement[6616-6681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6631-6681]:Block[6631-6681]"
  }, {
    "left" : "return (diff < 0);",
    "right" : "return (diff < 0);",
    "info" : "ReturnStatement[6649-6667]:ReturnStatement[6649-6667]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6700-6712]:ReturnStatement[6700-6712]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6724-6730]:Modifier[6724-6730]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6731-6737]:Modifier[6731-6737]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[6738-6741]:PrimitiveType[6738-6741]"
  }, {
    "left" : "parseAsInt",
    "right" : "parseAsInt",
    "info" : "SimpleName[6742-6752]:SimpleName[6742-6752]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[6753-6765]:SingleVariableDeclaration[6753-6765]"
  }, {
    "left" : "int defaultValue",
    "right" : "int defaultValue",
    "info" : "SingleVariableDeclaration[6767-6783]:SingleVariableDeclaration[6767-6783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6789-7942]:Block[6789-7942]"
  }, {
    "left" : "if (input == null)",
    "right" : "if (input == null)",
    "info" : "IfStatement[6799-6862]:IfStatement[6799-6862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6818-6862]:Block[6818-6862]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[6832-6852]:ReturnStatement[6832-6852]"
  }, {
    "left" : "input = input.trim();",
    "right" : "input = input.trim();",
    "info" : "ExpressionStatement[6871-6892]:ExpressionStatement[6871-6892]"
  }, {
    "left" : "int len = input.length();",
    "right" : "int len = input.length();",
    "info" : "VariableDeclarationStatement[6901-6926]:VariableDeclarationStatement[6901-6926]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[6935-6993]:IfStatement[6935-6993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6949-6993]:Block[6949-6993]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[6963-6983]:ReturnStatement[6963-6983]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[7062-7072]:VariableDeclarationStatement[7062-7072]"
  }, {
    "left" : "if (i < len)",
    "right" : "if (i < len)",
    "info" : "IfStatement[7081-7429]:IfStatement[7081-7429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7094-7429]:Block[7094-7429]"
  }, {
    "left" : "char c = input.charAt(0);",
    "right" : "char c = input.charAt(0);",
    "info" : "VariableDeclarationStatement[7130-7155]:VariableDeclarationStatement[7130-7155]"
  }, {
    "left" : "if (c == '+')",
    "right" : "if (c == '+')",
    "info" : "IfStatement[7168-7419]:IfStatement[7168-7419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7182-7319]:Block[7182-7319]"
  }, {
    "left" : "input = input.substring(1);",
    "right" : "input = input.substring(1);",
    "info" : "ExpressionStatement[7240-7267]:ExpressionStatement[7240-7267]"
  }, {
    "left" : "len = input.length();",
    "right" : "len = input.length();",
    "info" : "ExpressionStatement[7284-7305]:ExpressionStatement[7284-7305]"
  }, {
    "left" : "if (c == '-')",
    "right" : "if (c == '-')",
    "info" : "IfStatement[7325-7419]:IfStatement[7325-7419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7339-7419]:Block[7339-7419]"
  }, {
    "left" : "++i;",
    "right" : "++i;",
    "info" : "ExpressionStatement[7401-7405]:ExpressionStatement[7401-7405]"
  }, {
    "left" : "for (; i < len; ++i)",
    "right" : "for (; i < len; ++i)",
    "info" : "ForStatement[7438-7803]:ForStatement[7438-7803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7459-7803]:Block[7459-7803]"
  }, {
    "left" : "char c = input.charAt(i);",
    "right" : "char c = input.charAt(i);",
    "info" : "VariableDeclarationStatement[7473-7498]:VariableDeclarationStatement[7473-7498]"
  }, {
    "left" : "if (c > '9' || c < '0')",
    "right" : "if (c > '9' || c < '0')",
    "info" : "IfStatement[7568-7793]:IfStatement[7568-7793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7592-7793]:Block[7592-7793]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7610-7779]:TryStatement[7610-7779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7614-7686]:Block[7614-7686]"
  }, {
    "left" : "return (int) parseDouble(input);",
    "right" : "return (int) parseDouble(input);",
    "info" : "ReturnStatement[7636-7668]:ReturnStatement[7636-7668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7719-7779]:Block[7719-7779]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[7741-7761]:ReturnStatement[7741-7761]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7812-7907]:TryStatement[7812-7907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7816-7871]:Block[7816-7871]"
  }, {
    "left" : "return Integer.parseInt(input);",
    "right" : "return Integer.parseInt(input);",
    "info" : "ReturnStatement[7830-7861]:ReturnStatement[7830-7861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7904-7907]:Block[7904-7907]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[7916-7936]:ReturnStatement[7916-7936]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7948-7954]:Modifier[7948-7954]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7955-7961]:Modifier[7955-7961]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[7962-7966]:PrimitiveType[7962-7966]"
  }, {
    "left" : "parseAsLong",
    "right" : "parseAsLong",
    "info" : "SimpleName[7967-7978]:SimpleName[7967-7978]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[7979-7991]:SingleVariableDeclaration[7979-7991]"
  }, {
    "left" : "long defaultValue",
    "right" : "long defaultValue",
    "info" : "SingleVariableDeclaration[7993-8010]:SingleVariableDeclaration[7993-8010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8016-9165]:Block[8016-9165]"
  }, {
    "left" : "if (input == null)",
    "right" : "if (input == null)",
    "info" : "IfStatement[8026-8089]:IfStatement[8026-8089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8045-8089]:Block[8045-8089]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[8059-8079]:ReturnStatement[8059-8079]"
  }, {
    "left" : "input = input.trim();",
    "right" : "input = input.trim();",
    "info" : "ExpressionStatement[8098-8119]:ExpressionStatement[8098-8119]"
  }, {
    "left" : "int len = input.length();",
    "right" : "int len = input.length();",
    "info" : "VariableDeclarationStatement[8128-8153]:VariableDeclarationStatement[8128-8153]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[8162-8220]:IfStatement[8162-8220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8176-8220]:Block[8176-8220]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[8190-8210]:ReturnStatement[8190-8210]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[8286-8296]:VariableDeclarationStatement[8286-8296]"
  }, {
    "left" : "if (i < len)",
    "right" : "if (i < len)",
    "info" : "IfStatement[8305-8653]:IfStatement[8305-8653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8318-8653]:Block[8318-8653]"
  }, {
    "left" : "char c = input.charAt(0);",
    "right" : "char c = input.charAt(0);",
    "info" : "VariableDeclarationStatement[8354-8379]:VariableDeclarationStatement[8354-8379]"
  }, {
    "left" : "if (c == '+')",
    "right" : "if (c == '+')",
    "info" : "IfStatement[8392-8643]:IfStatement[8392-8643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8406-8543]:Block[8406-8543]"
  }, {
    "left" : "input = input.substring(1);",
    "right" : "input = input.substring(1);",
    "info" : "ExpressionStatement[8464-8491]:ExpressionStatement[8464-8491]"
  }, {
    "left" : "len = input.length();",
    "right" : "len = input.length();",
    "info" : "ExpressionStatement[8508-8529]:ExpressionStatement[8508-8529]"
  }, {
    "left" : "if (c == '-')",
    "right" : "if (c == '-')",
    "info" : "IfStatement[8549-8643]:IfStatement[8549-8643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8563-8643]:Block[8563-8643]"
  }, {
    "left" : "++i;",
    "right" : "++i;",
    "info" : "ExpressionStatement[8625-8629]:ExpressionStatement[8625-8629]"
  }, {
    "left" : "for (; i < len; ++i)",
    "right" : "for (; i < len; ++i)",
    "info" : "ForStatement[8662-9028]:ForStatement[8662-9028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8683-9028]:Block[8683-9028]"
  }, {
    "left" : "char c = input.charAt(i);",
    "right" : "char c = input.charAt(i);",
    "info" : "VariableDeclarationStatement[8697-8722]:VariableDeclarationStatement[8697-8722]"
  }, {
    "left" : "if (c > '9' || c < '0')",
    "right" : "if (c > '9' || c < '0')",
    "info" : "IfStatement[8792-9018]:IfStatement[8792-9018]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8816-9018]:Block[8816-9018]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8834-9004]:TryStatement[8834-9004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8838-8911]:Block[8838-8911]"
  }, {
    "left" : "return (long) parseDouble(input);",
    "right" : "return (long) parseDouble(input);",
    "info" : "ReturnStatement[8860-8893]:ReturnStatement[8860-8893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8944-9004]:Block[8944-9004]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[8966-8986]:ReturnStatement[8966-8986]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9037-9130]:TryStatement[9037-9130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9041-9094]:Block[9041-9094]"
  }, {
    "left" : "return Long.parseLong(input);",
    "right" : "return Long.parseLong(input);",
    "info" : "ReturnStatement[9055-9084]:ReturnStatement[9055-9084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9127-9130]:Block[9127-9130]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[9139-9159]:ReturnStatement[9139-9159]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9175-9181]:Modifier[9175-9181]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9182-9188]:Modifier[9182-9188]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[9189-9195]:PrimitiveType[9189-9195]"
  }, {
    "left" : "parseAsDouble",
    "right" : "parseAsDouble",
    "info" : "SimpleName[9196-9209]:SimpleName[9196-9209]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[9210-9222]:SingleVariableDeclaration[9210-9222]"
  }, {
    "left" : "double defaultValue",
    "right" : "double defaultValue",
    "info" : "SingleVariableDeclaration[9224-9243]:SingleVariableDeclaration[9224-9243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9249-9587]:Block[9249-9587]"
  }, {
    "left" : "if (input == null)",
    "right" : "if (input == null)",
    "info" : "IfStatement[9259-9322]:IfStatement[9259-9322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9278-9322]:Block[9278-9322]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[9292-9312]:ReturnStatement[9292-9312]"
  }, {
    "left" : "input = input.trim();",
    "right" : "input = input.trim();",
    "info" : "ExpressionStatement[9331-9352]:ExpressionStatement[9331-9352]"
  }, {
    "left" : "int len = input.length();",
    "right" : "int len = input.length();",
    "info" : "VariableDeclarationStatement[9361-9386]:VariableDeclarationStatement[9361-9386]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[9395-9453]:IfStatement[9395-9453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9409-9453]:Block[9409-9453]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[9423-9443]:ReturnStatement[9423-9443]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9462-9552]:TryStatement[9462-9552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9466-9516]:Block[9466-9516]"
  }, {
    "left" : "return parseDouble(input);",
    "right" : "return parseDouble(input);",
    "info" : "ReturnStatement[9480-9506]:ReturnStatement[9480-9506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9549-9552]:Block[9549-9552]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[9561-9581]:ReturnStatement[9561-9581]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9593-9599]:Modifier[9593-9599]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9600-9606]:Modifier[9600-9606]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[9607-9613]:PrimitiveType[9607-9613]"
  }, {
    "left" : "parseDouble",
    "right" : "parseDouble",
    "info" : "SimpleName[9614-9625]:SimpleName[9614-9625]"
  }, {
    "left" : "String numStr",
    "right" : "String numStr",
    "info" : "SingleVariableDeclaration[9626-9639]:SingleVariableDeclaration[9626-9639]"
  }, {
    "left" : "NumberFormatException",
    "right" : "NumberFormatException",
    "info" : "SimpleType[9648-9669]:SimpleType[9648-9669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9674-10105]:Block[9674-10105]"
  }, {
    "left" : "if (NASTY_SMALL_DOUBLE.equals(numStr))",
    "right" : "if (NASTY_SMALL_DOUBLE.equals(numStr))",
    "info" : "IfStatement[9969-10056]:IfStatement[9969-10056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10008-10056]:Block[10008-10056]"
  }, {
    "left" : "return Double.MIN_VALUE;",
    "right" : "return Double.MIN_VALUE;",
    "info" : "ReturnStatement[10022-10046]:ReturnStatement[10022-10046]"
  }, {
    "left" : "return Double.parseDouble(numStr);",
    "right" : "return Double.parseDouble(numStr);",
    "info" : "ReturnStatement[10065-10099]:ReturnStatement[10065-10099]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10111-10117]:Modifier[10111-10117]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10118-10124]:Modifier[10118-10124]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[10125-10135]:SimpleType[10125-10135]"
  }, {
    "left" : "parseBigDecimal",
    "right" : "parseBigDecimal",
    "info" : "SimpleName[10136-10151]:SimpleName[10136-10151]"
  }, {
    "left" : "String numStr",
    "right" : "String numStr",
    "info" : "SingleVariableDeclaration[10152-10165]:SingleVariableDeclaration[10152-10165]"
  }, {
    "left" : "NumberFormatException",
    "right" : "NumberFormatException",
    "info" : "SimpleType[10174-10195]:SimpleType[10174-10195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10200-10250]:Block[10214-10268]"
  }, {
    "left" : "return new BigDecimal(numStr);",
    "right" : "return new BigDecimal(numStr);",
    "info" : "ReturnStatement[10214-10244]:ReturnStatement[10228-10258]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10256-10262]:Modifier[10366-10372]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10263-10269]:Modifier[10373-10379]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[10270-10280]:SimpleType[10380-10390]"
  }, {
    "left" : "parseBigDecimal",
    "right" : "parseBigDecimal",
    "info" : "SimpleName[10281-10296]:SimpleName[10391-10406]"
  }, {
    "left" : "char[] buffer",
    "right" : "char[] buffer",
    "info" : "SingleVariableDeclaration[10297-10310]:SingleVariableDeclaration[10407-10420]"
  }, {
    "left" : "NumberFormatException",
    "right" : "NumberFormatException",
    "info" : "SimpleType[10319-10340]:SimpleType[10429-10450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10341-10406]:Block[10451-10516]"
  }, {
    "left" : "return parseBigDecimal(buffer, 0, buffer.length);",
    "right" : "return parseBigDecimal(buffer, 0, buffer.length);",
    "info" : "ReturnStatement[10351-10400]:ReturnStatement[10461-10510]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10416-10422]:Modifier[10526-10532]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10423-10429]:Modifier[10533-10539]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[10430-10440]:SimpleType[10540-10550]"
  }, {
    "left" : "parseBigDecimal",
    "right" : "parseBigDecimal",
    "info" : "SimpleName[10441-10456]:SimpleName[10551-10566]"
  }, {
    "left" : "char[] buffer",
    "right" : "char[] buffer",
    "info" : "SingleVariableDeclaration[10457-10470]:SingleVariableDeclaration[10567-10580]"
  }, {
    "left" : "int offset",
    "right" : "int offset",
    "info" : "SingleVariableDeclaration[10472-10482]:SingleVariableDeclaration[10582-10592]"
  }, {
    "left" : "int len",
    "right" : "int len",
    "info" : "SingleVariableDeclaration[10484-10491]:SingleVariableDeclaration[10594-10601]"
  }, {
    "left" : "NumberFormatException",
    "right" : "NumberFormatException",
    "info" : "SimpleType[10512-10533]:SimpleType[10622-10643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10538-10601]:Block[10662-10729]"
  }, {
    "left" : "return new BigDecimal(buffer, offset, len);",
    "right" : "return new BigDecimal(buffer, offset, len);",
    "info" : "ReturnStatement[10552-10595]:ReturnStatement[10676-10719]"
  } ]
}