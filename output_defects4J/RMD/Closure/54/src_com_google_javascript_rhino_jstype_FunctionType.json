{
  "matchedElements" : [
 {
    "left" : "class : FunctionType",
    "right" : "class : FunctionType",
    "info" : "TypeDeclaration[2214-35467]:TypeDeclaration[2214-35570]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2611-2659]:FieldDeclaration[2611-2659]"
  }, {
    "left" : "call",
    "right" : "call",
    "info" : "FieldDeclaration[2735-2802]:FieldDeclaration[2735-2802]"
  }, {
    "left" : "prototype",
    "right" : "prototype",
    "info" : "FieldDeclaration[2806-3177]:FieldDeclaration[2806-3177]"
  }, {
    "left" : "prototypeSlot",
    "right" : "prototypeSlot",
    "info" : "FieldDeclaration[3181-3214]:FieldDeclaration[3181-3214]"
  }, {
    "left" : "kind",
    "right" : "kind",
    "info" : "FieldDeclaration[3218-3345]:FieldDeclaration[3218-3345]"
  }, {
    "left" : "typeOfThis",
    "right" : "typeOfThis",
    "info" : "FieldDeclaration[3349-3452]:FieldDeclaration[3349-3452]"
  }, {
    "left" : "source",
    "right" : "source",
    "info" : "FieldDeclaration[3456-3563]:FieldDeclaration[3456-3563]"
  }, {
    "left" : "implementedInterfaces",
    "right" : "implementedInterfaces",
    "info" : "FieldDeclaration[3567-3792]:FieldDeclaration[3567-3792]"
  }, {
    "left" : "extendedInterfaces",
    "right" : "extendedInterfaces",
    "info" : "FieldDeclaration[3796-4015]:FieldDeclaration[3796-4015]"
  }, {
    "left" : "subTypes",
    "right" : "subTypes",
    "info" : "FieldDeclaration[4019-4186]:FieldDeclaration[4019-4186]"
  }, {
    "left" : "templateTypeName",
    "right" : "templateTypeName",
    "info" : "FieldDeclaration[4190-4284]:FieldDeclaration[4190-4284]"
  }, {
    "left" : "package FunctionType(registry , name , source , arrowType , typeOfThis , templateTypeName , isConstructor boolean, nativeType boolean)",
    "right" : "package FunctionType(registry , name , source , arrowType , typeOfThis , templateTypeName , isConstructor boolean, nativeType boolean)",
    "info" : "MethodDeclaration[4288-5279]:MethodDeclaration[4288-5279]"
  }, {
    "left" : "private FunctionType(registry , name , source )",
    "right" : "private FunctionType(registry , name , source )",
    "info" : "MethodDeclaration[5283-5857]:MethodDeclaration[5283-5857]"
  }, {
    "left" : "package forInterface(registry , name , source ) : ",
    "right" : "package forInterface(registry , name , source ) : ",
    "info" : "MethodDeclaration[5861-6076]:MethodDeclaration[5861-6076]"
  }, {
    "left" : "public isInstanceType() : boolean",
    "right" : "public isInstanceType() : boolean",
    "info" : "MethodDeclaration[6080-6267]:MethodDeclaration[6080-6267]"
  }, {
    "left" : "public isConstructor() : boolean",
    "right" : "public isConstructor() : boolean",
    "info" : "MethodDeclaration[6271-6356]:MethodDeclaration[6271-6356]"
  }, {
    "left" : "public isInterface() : boolean",
    "right" : "public isInterface() : boolean",
    "info" : "MethodDeclaration[6360-6441]:MethodDeclaration[6360-6441]"
  }, {
    "left" : "public isOrdinaryFunction() : boolean",
    "right" : "public isOrdinaryFunction() : boolean",
    "info" : "MethodDeclaration[6445-6532]:MethodDeclaration[6445-6532]"
  }, {
    "left" : "public toMaybeFunctionType() : ",
    "right" : "public toMaybeFunctionType() : ",
    "info" : "MethodDeclaration[6536-6612]:MethodDeclaration[6536-6612]"
  }, {
    "left" : "public canBeCalled() : boolean",
    "right" : "public canBeCalled() : boolean",
    "info" : "MethodDeclaration[6616-6679]:MethodDeclaration[6616-6679]"
  }, {
    "left" : "public hasImplementedInterfaces() : boolean",
    "right" : "public hasImplementedInterfaces() : boolean",
    "info" : "MethodDeclaration[6683-6992]:MethodDeclaration[6683-6992]"
  }, {
    "left" : "public getParameters() : ",
    "right" : "public getParameters() : ",
    "info" : "MethodDeclaration[6996-7177]:MethodDeclaration[6996-7177]"
  }, {
    "left" : "public getParametersNode() : ",
    "right" : "public getParametersNode() : ",
    "info" : "MethodDeclaration[7181-7310]:MethodDeclaration[7181-7310]"
  }, {
    "left" : "public getMinArguments() : int",
    "right" : "public getMinArguments() : int",
    "info" : "MethodDeclaration[7314-7795]:MethodDeclaration[7314-7795]"
  }, {
    "left" : "public getMaxArguments() : int",
    "right" : "public getMaxArguments() : int",
    "info" : "MethodDeclaration[7799-8235]:MethodDeclaration[7799-8235]"
  }, {
    "left" : "public getReturnType() : ",
    "right" : "public getReturnType() : ",
    "info" : "MethodDeclaration[8239-8302]:MethodDeclaration[8239-8302]"
  }, {
    "left" : "public isReturnTypeInferred() : boolean",
    "right" : "public isReturnTypeInferred() : boolean",
    "info" : "MethodDeclaration[8306-8385]:MethodDeclaration[8306-8385]"
  }, {
    "left" : "package getInternalArrowType() : ",
    "right" : "package getInternalArrowType() : ",
    "info" : "MethodDeclaration[8389-8511]:MethodDeclaration[8389-8511]"
  }, {
    "left" : "public getSlot(name ) : ",
    "right" : "public getSlot(name ) : ",
    "info" : "MethodDeclaration[8515-8771]:MethodDeclaration[8515-8771]"
  }, {
    "left" : "public getOwnPropertyNames() : ",
    "right" : "public getOwnPropertyNames() : ",
    "info" : "MethodDeclaration[8775-9172]:MethodDeclaration[8775-9172]"
  }, {
    "left" : "public getPrototype() : ",
    "right" : "public getPrototype() : ",
    "info" : "MethodDeclaration[9176-9703]:MethodDeclaration[9176-9703]"
  }, {
    "left" : "public setPrototypeBasedOn(baseType ) : void",
    "right" : "public setPrototypeBasedOn(baseType ) : void",
    "info" : "MethodDeclaration[9707-11052]:MethodDeclaration[9707-11016]"
  }, {
    "left" : "public setPrototype(prototype ) : boolean",
    "right" : "public setPrototype(prototype ) : boolean",
    "info" : "MethodDeclaration[11056-12326]:MethodDeclaration[11020-12429]"
  }, {
    "left" : "public getAllImplementedInterfaces() : ",
    "right" : "public getAllImplementedInterfaces() : ",
    "info" : "MethodDeclaration[12330-12896]:MethodDeclaration[12433-12999]"
  }, {
    "left" : "private addRelatedInterfaces(instance , set ) : void",
    "right" : "private addRelatedInterfaces(instance , set ) : void",
    "info" : "MethodDeclaration[12900-13303]:MethodDeclaration[13003-13406]"
  }, {
    "left" : "public getImplementedInterfaces() : ",
    "right" : "public getImplementedInterfaces() : ",
    "info" : "MethodDeclaration[13307-13723]:MethodDeclaration[13410-13826]"
  }, {
    "left" : "public setImplementedInterfaces(implementedInterfaces ...) : void",
    "right" : "public setImplementedInterfaces(implementedInterfaces ...) : void",
    "info" : "MethodDeclaration[13727-14064]:MethodDeclaration[13830-14167]"
  }, {
    "left" : "public getAllExtendedInterfaces() : ",
    "right" : "public getAllExtendedInterfaces() : ",
    "info" : "MethodDeclaration[14068-14648]:MethodDeclaration[14171-14751]"
  }, {
    "left" : "private addRelatedExtendedInterfaces(instance , set ) : void",
    "right" : "private addRelatedExtendedInterfaces(instance , set ) : void",
    "info" : "MethodDeclaration[14652-15011]:MethodDeclaration[14755-15114]"
  }, {
    "left" : "public getExtendedInterfaces() : ",
    "right" : "public getExtendedInterfaces() : ",
    "info" : "MethodDeclaration[15015-15165]:MethodDeclaration[15118-15268]"
  }, {
    "left" : "public getExtendedInterfacesCount() : int",
    "right" : "public getExtendedInterfacesCount() : int",
    "info" : "MethodDeclaration[15169-15328]:MethodDeclaration[15272-15431]"
  }, {
    "left" : "public setExtendedInterfaces(extendedInterfaces ) : void",
    "right" : "public setExtendedInterfaces(extendedInterfaces ) : void",
    "info" : "MethodDeclaration[15332-15616]:MethodDeclaration[15435-15719]"
  }, {
    "left" : "public getPropertyType(name ) : ",
    "right" : "public getPropertyType(name ) : ",
    "info" : "MethodDeclaration[15620-17563]:MethodDeclaration[15723-17666]"
  }, {
    "left" : "package defineProperty(name , type , inferred boolean, propertyNode ) : boolean",
    "right" : "package defineProperty(name , type , inferred boolean, propertyNode ) : boolean",
    "info" : "MethodDeclaration[17567-18055]:MethodDeclaration[17670-18158]"
  }, {
    "left" : "public getLeastSupertype(that ) : ",
    "right" : "public getLeastSupertype(that ) : ",
    "info" : "MethodDeclaration[18059-18161]:MethodDeclaration[18162-18264]"
  }, {
    "left" : "public getGreatestSubtype(that ) : ",
    "right" : "public getGreatestSubtype(that ) : ",
    "info" : "MethodDeclaration[18165-18269]:MethodDeclaration[18268-18372]"
  }, {
    "left" : "private supAndInfHelper(that , leastSuper boolean) : ",
    "right" : "private supAndInfHelper(that , leastSuper boolean) : ",
    "info" : "MethodDeclaration[18273-21809]:MethodDeclaration[18376-21912]"
  }, {
    "left" : "private tryMergeFunctionPiecewise(other , leastSuper boolean) : ",
    "right" : "private tryMergeFunctionPiecewise(other , leastSuper boolean) : ",
    "info" : "MethodDeclaration[21813-23402]:MethodDeclaration[21916-23505]"
  }, {
    "left" : "public getSuperClassConstructor() : ",
    "right" : "public getSuperClassConstructor() : ",
    "info" : "MethodDeclaration[23406-23850]:MethodDeclaration[23509-23953]"
  }, {
    "left" : "public getTopDefiningInterface(type , propertyName ) : ",
    "right" : "public getTopDefiningInterface(type , propertyName ) : ",
    "info" : "MethodDeclaration[23854-24442]:MethodDeclaration[23957-24545]"
  }, {
    "left" : "public getTopMostDefiningType(propertyName ) : ",
    "right" : "public getTopMostDefiningType(propertyName ) : ",
    "info" : "MethodDeclaration[24446-25268]:MethodDeclaration[24549-25371]"
  }, {
    "left" : "public isEquivalentTo(otherType ) : boolean",
    "right" : "public isEquivalentTo(otherType ) : boolean",
    "info" : "MethodDeclaration[25272-26077]:MethodDeclaration[25375-26180]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[26081-26196]:MethodDeclaration[26184-26299]"
  }, {
    "left" : "public hasEqualCallType(otherType ) : boolean",
    "right" : "public hasEqualCallType(otherType ) : boolean",
    "info" : "MethodDeclaration[26200-26314]:MethodDeclaration[26303-26417]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[26318-27727]:MethodDeclaration[26421-27830]"
  }, {
    "left" : "private appendVarArgsString(builder , paramType ) : void",
    "right" : "private appendVarArgsString(builder , paramType ) : void",
    "info" : "MethodDeclaration[27731-28158]:MethodDeclaration[27834-28261]"
  }, {
    "left" : "public isSubtype(that ) : boolean",
    "right" : "public isSubtype(that ) : boolean",
    "info" : "MethodDeclaration[28162-30196]:MethodDeclaration[28265-30299]"
  }, {
    "left" : "public visit(visitor ) : ",
    "right" : "public visit(visitor ) : ",
    "info" : "MethodDeclaration[30200-30299]:MethodDeclaration[30303-30402]"
  }, {
    "left" : "public getInstanceType() : ",
    "right" : "public getInstanceType() : ",
    "info" : "MethodDeclaration[30303-30595]:MethodDeclaration[30406-30698]"
  }, {
    "left" : "package setInstanceType(instanceType ) : void",
    "right" : "package setInstanceType(instanceType ) : void",
    "info" : "MethodDeclaration[30599-30778]:MethodDeclaration[30702-30881]"
  }, {
    "left" : "public hasInstanceType() : boolean",
    "right" : "public hasInstanceType() : boolean",
    "info" : "MethodDeclaration[30782-30939]:MethodDeclaration[30885-31042]"
  }, {
    "left" : "public getTypeOfThis() : ",
    "right" : "public getTypeOfThis() : ",
    "info" : "MethodDeclaration[30943-31177]:MethodDeclaration[31046-31280]"
  }, {
    "left" : "public getSource() : ",
    "right" : "public getSource() : ",
    "info" : "MethodDeclaration[31181-31307]:MethodDeclaration[31284-31410]"
  }, {
    "left" : "public setSource(source ) : void",
    "right" : "public setSource(source ) : void",
    "info" : "MethodDeclaration[31311-31416]:MethodDeclaration[31414-31519]"
  }, {
    "left" : "private addSubType(subType ) : void",
    "right" : "private addSubType(subType ) : void",
    "info" : "MethodDeclaration[31420-31631]:MethodDeclaration[31523-31734]"
  }, {
    "left" : "public clearCachedValues() : void",
    "right" : "public clearCachedValues() : void",
    "info" : "MethodDeclaration[31635-32046]:MethodDeclaration[31738-32149]"
  }, {
    "left" : "public getSubTypes() : ",
    "right" : "public getSubTypes() : ",
    "info" : "MethodDeclaration[32050-32317]:MethodDeclaration[32153-32420]"
  }, {
    "left" : "public hasCachedValues() : boolean",
    "right" : "public hasCachedValues() : boolean",
    "info" : "MethodDeclaration[32321-32428]:MethodDeclaration[32424-32531]"
  }, {
    "left" : "public getTemplateTypeName() : ",
    "right" : "public getTemplateTypeName() : ",
    "info" : "MethodDeclaration[32432-32548]:MethodDeclaration[32535-32651]"
  }, {
    "left" : "package resolveInternal(t , scope ) : ",
    "right" : "package resolveInternal(t , scope ) : ",
    "info" : "MethodDeclaration[32552-34322]:MethodDeclaration[32655-34425]"
  }, {
    "left" : "public toDebugHashCodeString() : ",
    "right" : "public toDebugHashCodeString() : ",
    "info" : "MethodDeclaration[34326-35298]:MethodDeclaration[34429-35401]"
  }, {
    "left" : "private getDebugHashCodeStringOf(type ) : ",
    "right" : "private getDebugHashCodeStringOf(type ) : ",
    "info" : "MethodDeclaration[35302-35465]:MethodDeclaration[35405-35568]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2553-2559]:Modifier[2553-2559]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2560-2565]:TYPE_DECLARATION_KIND[2560-2565]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleName[4361-4373]:SimpleName[4361-4373]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[4374-4397]:SingleVariableDeclaration[4374-4397]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[4399-4410]:SingleVariableDeclaration[4399-4410]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[4412-4423]:SingleVariableDeclaration[4412-4423]"
  }, {
    "left" : "ArrowType arrowType",
    "right" : "ArrowType arrowType",
    "info" : "SingleVariableDeclaration[4431-4450]:SingleVariableDeclaration[4431-4450]"
  }, {
    "left" : "ObjectType typeOfThis",
    "right" : "ObjectType typeOfThis",
    "info" : "SingleVariableDeclaration[4452-4473]:SingleVariableDeclaration[4452-4473]"
  }, {
    "left" : "String templateTypeName",
    "right" : "String templateTypeName",
    "info" : "SingleVariableDeclaration[4481-4504]:SingleVariableDeclaration[4481-4504]"
  }, {
    "left" : "boolean isConstructor",
    "right" : "boolean isConstructor",
    "info" : "SingleVariableDeclaration[4507-4528]:SingleVariableDeclaration[4507-4528]"
  }, {
    "left" : "boolean nativeType",
    "right" : "boolean nativeType",
    "info" : "SingleVariableDeclaration[4530-4548]:SingleVariableDeclaration[4530-4548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4550-5279]:Block[4550-5279]"
  }, {
    "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
    "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
    "info" : "SuperConstructorInvocation[4556-4673]:SuperConstructorInvocation[4556-4673]"
  }, {
    "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "info" : "ExpressionStatement[4678-4768]:ExpressionStatement[4678-4768]"
  }, {
    "left" : "Preconditions.checkNotNull(arrowType);",
    "right" : "Preconditions.checkNotNull(arrowType);",
    "info" : "ExpressionStatement[4773-4811]:ExpressionStatement[4773-4811]"
  }, {
    "left" : "this.source = source;",
    "right" : "this.source = source;",
    "info" : "ExpressionStatement[4816-4837]:ExpressionStatement[4816-4837]"
  }, {
    "left" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
    "right" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
    "info" : "ExpressionStatement[4842-4903]:ExpressionStatement[4842-4903]"
  }, {
    "left" : "if (isConstructor)",
    "right" : "if (isConstructor)",
    "info" : "IfStatement[4908-5202]:IfStatement[4908-5202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4927-5054]:Block[4927-5054]"
  }, {
    "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
    "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
    "info" : "ExpressionStatement[4935-5048]:ExpressionStatement[4935-5048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5060-5202]:Block[5060-5202]"
  }, {
    "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[5068-5196]:ExpressionStatement[5068-5196]"
  }, {
    "left" : "this.call = arrowType;",
    "right" : "this.call = arrowType;",
    "info" : "ExpressionStatement[5207-5229]:ExpressionStatement[5207-5229]"
  }, {
    "left" : "this.templateTypeName = templateTypeName;",
    "right" : "this.templateTypeName = templateTypeName;",
    "info" : "ExpressionStatement[5234-5275]:ExpressionStatement[5234-5275]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5349-5356]:Modifier[5349-5356]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleName[5357-5369]:SimpleName[5357-5369]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[5370-5393]:SingleVariableDeclaration[5370-5393]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[5395-5406]:SingleVariableDeclaration[5395-5406]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[5408-5419]:SingleVariableDeclaration[5408-5419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5421-5857]:Block[5421-5857]"
  }, {
    "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
    "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
    "info" : "SuperConstructorInvocation[5427-5524]:SuperConstructorInvocation[5427-5524]"
  }, {
    "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
    "info" : "ExpressionStatement[5529-5619]:ExpressionStatement[5529-5619]"
  }, {
    "left" : "Preconditions.checkArgument(name != null);",
    "right" : "Preconditions.checkArgument(name != null);",
    "info" : "ExpressionStatement[5624-5666]:ExpressionStatement[5624-5666]"
  }, {
    "left" : "this.source = source;",
    "right" : "this.source = source;",
    "info" : "ExpressionStatement[5671-5692]:ExpressionStatement[5671-5692]"
  }, {
    "left" : "this.call = new ArrowType(registry, new Node(Token.LP), null);",
    "right" : "this.call = new ArrowType(registry, new Node(Token.LP), null);",
    "info" : "ExpressionStatement[5697-5759]:ExpressionStatement[5697-5759]"
  }, {
    "left" : "this.kind = Kind.INTERFACE;",
    "right" : "this.kind = Kind.INTERFACE;",
    "info" : "ExpressionStatement[5764-5791]:ExpressionStatement[5764-5791]"
  }, {
    "left" : "this.typeOfThis = new InstanceObjectType(registry, this);",
    "right" : "this.typeOfThis = new InstanceObjectType(registry, this);",
    "info" : "ExpressionStatement[5796-5853]:ExpressionStatement[5796-5853]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5927-5933]:Modifier[5927-5933]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[5934-5946]:SimpleType[5934-5946]"
  }, {
    "left" : "forInterface",
    "right" : "forInterface",
    "info" : "SimpleName[5947-5959]:SimpleName[5947-5959]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[5967-5990]:SingleVariableDeclaration[5967-5990]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[5992-6003]:SingleVariableDeclaration[5992-6003]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[6005-6016]:SingleVariableDeclaration[6005-6016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6018-6076]:Block[6018-6076]"
  }, {
    "left" : "return new FunctionType(registry, name, source);",
    "right" : "return new FunctionType(registry, name, source);",
    "info" : "ReturnStatement[6024-6072]:ReturnStatement[6024-6072]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6080-6089]:MarkerAnnotation[6080-6089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6092-6098]:Modifier[6092-6098]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6099-6106]:PrimitiveType[6099-6106]"
  }, {
    "left" : "isInstanceType",
    "right" : "isInstanceType",
    "info" : "SimpleName[6107-6121]:SimpleName[6107-6121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6124-6267]:Block[6124-6267]"
  }, {
    "left" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "right" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "info" : "ReturnStatement[6195-6263]:ReturnStatement[6195-6263]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6271-6280]:MarkerAnnotation[6271-6280]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6283-6289]:Modifier[6283-6289]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6290-6297]:PrimitiveType[6290-6297]"
  }, {
    "left" : "isConstructor",
    "right" : "isConstructor",
    "info" : "SimpleName[6298-6311]:SimpleName[6298-6311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6314-6356]:Block[6314-6356]"
  }, {
    "left" : "return kind == Kind.CONSTRUCTOR;",
    "right" : "return kind == Kind.CONSTRUCTOR;",
    "info" : "ReturnStatement[6320-6352]:ReturnStatement[6320-6352]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6360-6369]:MarkerAnnotation[6360-6369]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6372-6378]:Modifier[6372-6378]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6379-6386]:PrimitiveType[6379-6386]"
  }, {
    "left" : "isInterface",
    "right" : "isInterface",
    "info" : "SimpleName[6387-6398]:SimpleName[6387-6398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6401-6441]:Block[6401-6441]"
  }, {
    "left" : "return kind == Kind.INTERFACE;",
    "right" : "return kind == Kind.INTERFACE;",
    "info" : "ReturnStatement[6407-6437]:ReturnStatement[6407-6437]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6445-6454]:MarkerAnnotation[6445-6454]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6457-6463]:Modifier[6457-6463]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6464-6471]:PrimitiveType[6464-6471]"
  }, {
    "left" : "isOrdinaryFunction",
    "right" : "isOrdinaryFunction",
    "info" : "SimpleName[6472-6490]:SimpleName[6472-6490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6493-6532]:Block[6493-6532]"
  }, {
    "left" : "return kind == Kind.ORDINARY;",
    "right" : "return kind == Kind.ORDINARY;",
    "info" : "ReturnStatement[6499-6528]:ReturnStatement[6499-6528]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6536-6545]:MarkerAnnotation[6536-6545]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6548-6554]:Modifier[6548-6554]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[6555-6567]:SimpleType[6555-6567]"
  }, {
    "left" : "toMaybeFunctionType",
    "right" : "toMaybeFunctionType",
    "info" : "SimpleName[6568-6587]:SimpleName[6568-6587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6590-6612]:Block[6590-6612]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[6596-6608]:ReturnStatement[6596-6608]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6616-6625]:MarkerAnnotation[6616-6625]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6628-6634]:Modifier[6628-6634]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6635-6642]:PrimitiveType[6635-6642]"
  }, {
    "left" : "canBeCalled",
    "right" : "canBeCalled",
    "info" : "SimpleName[6643-6654]:SimpleName[6643-6654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6657-6679]:Block[6657-6679]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6663-6675]:ReturnStatement[6663-6675]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6683-6689]:Modifier[6683-6689]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6690-6697]:PrimitiveType[6690-6697]"
  }, {
    "left" : "hasImplementedInterfaces",
    "right" : "hasImplementedInterfaces",
    "info" : "SimpleName[6698-6722]:SimpleName[6698-6722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6725-6992]:Block[6725-6992]"
  }, {
    "left" : "if (!implementedInterfaces.isEmpty())",
    "right" : "if (!implementedInterfaces.isEmpty())",
    "info" : "IfStatement[6731-6794]:IfStatement[6731-6794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6768-6794]:Block[6768-6794]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6776-6788]:ReturnStatement[6776-6788]"
  }, {
    "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "info" : "VariableDeclarationStatement[6799-6884]:VariableDeclarationStatement[6799-6884]"
  }, {
    "left" : "if (superCtor != null)",
    "right" : "if (superCtor != null)",
    "info" : "IfStatement[6889-6970]:IfStatement[6889-6970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6912-6970]:Block[6912-6970]"
  }, {
    "left" : "return superCtor.hasImplementedInterfaces();",
    "right" : "return superCtor.hasImplementedInterfaces();",
    "info" : "ReturnStatement[6920-6964]:ReturnStatement[6920-6964]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6975-6988]:ReturnStatement[6975-6988]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6996-7002]:Modifier[6996-7002]"
  }, {
    "left" : "Iterable<Node>",
    "right" : "Iterable<Node>",
    "info" : "ParameterizedType[7003-7017]:ParameterizedType[7003-7017]"
  }, {
    "left" : "getParameters",
    "right" : "getParameters",
    "info" : "SimpleName[7018-7031]:SimpleName[7018-7031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7034-7177]:Block[7034-7177]"
  }, {
    "left" : "Node n = getParametersNode();",
    "right" : "Node n = getParametersNode();",
    "info" : "VariableDeclarationStatement[7040-7069]:VariableDeclarationStatement[7040-7069]"
  }, {
    "left" : "if (n != null)",
    "right" : "if (n != null)",
    "info" : "IfStatement[7074-7173]:IfStatement[7074-7173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7089-7123]:Block[7089-7123]"
  }, {
    "left" : "return n.children();",
    "right" : "return n.children();",
    "info" : "ReturnStatement[7097-7117]:ReturnStatement[7097-7117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7129-7173]:Block[7129-7173]"
  }, {
    "left" : "return Collections.emptySet();",
    "right" : "return Collections.emptySet();",
    "info" : "ReturnStatement[7137-7167]:ReturnStatement[7137-7167]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7245-7251]:Modifier[7245-7251]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[7252-7256]:SimpleType[7252-7256]"
  }, {
    "left" : "getParametersNode",
    "right" : "getParametersNode",
    "info" : "SimpleName[7257-7274]:SimpleName[7257-7274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7277-7310]:Block[7277-7310]"
  }, {
    "left" : "return call.parameters;",
    "right" : "return call.parameters;",
    "info" : "ReturnStatement[7283-7306]:ReturnStatement[7283-7306]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7389-7395]:Modifier[7389-7395]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[7396-7399]:PrimitiveType[7396-7399]"
  }, {
    "left" : "getMinArguments",
    "right" : "getMinArguments",
    "info" : "SimpleName[7400-7415]:SimpleName[7400-7415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7418-7795]:Block[7418-7795]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[7619-7629]:VariableDeclarationStatement[7619-7629]"
  }, {
    "left" : "int min = 0;",
    "right" : "int min = 0;",
    "info" : "VariableDeclarationStatement[7634-7646]:VariableDeclarationStatement[7634-7646]"
  }, {
    "left" : "for (Node n : getParameters())",
    "right" : "for (Node n : getParameters())",
    "info" : "EnhancedForStatement[7651-7775]:EnhancedForStatement[7651-7775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7682-7775]:Block[7682-7775]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[7690-7694]:ExpressionStatement[7690-7694]"
  }, {
    "left" : "if (!n.isOptionalArg() && !n.isVarArgs())",
    "right" : "if (!n.isOptionalArg() && !n.isVarArgs())",
    "info" : "IfStatement[7701-7769]:IfStatement[7701-7769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7743-7769]:Block[7743-7769]"
  }, {
    "left" : "min = i;",
    "right" : "min = i;",
    "info" : "ExpressionStatement[7753-7761]:ExpressionStatement[7753-7761]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[7780-7791]:ReturnStatement[7780-7791]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7949-7955]:Modifier[7949-7955]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[7956-7959]:PrimitiveType[7956-7959]"
  }, {
    "left" : "getMaxArguments",
    "right" : "getMaxArguments",
    "info" : "SimpleName[7960-7975]:SimpleName[7960-7975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7978-8235]:Block[7978-8235]"
  }, {
    "left" : "Node params = getParametersNode();",
    "right" : "Node params = getParametersNode();",
    "info" : "VariableDeclarationStatement[7984-8018]:VariableDeclarationStatement[7984-8018]"
  }, {
    "left" : "if (params != null)",
    "right" : "if (params != null)",
    "info" : "IfStatement[8023-8200]:IfStatement[8023-8200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8043-8200]:Block[8043-8200]"
  }, {
    "left" : "Node lastParam = params.getLastChild();",
    "right" : "Node lastParam = params.getLastChild();",
    "info" : "VariableDeclarationStatement[8051-8090]:VariableDeclarationStatement[8051-8090]"
  }, {
    "left" : "if (lastParam == null || !lastParam.isVarArgs())",
    "right" : "if (lastParam == null || !lastParam.isVarArgs())",
    "info" : "IfStatement[8097-8194]:IfStatement[8097-8194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8146-8194]:Block[8146-8194]"
  }, {
    "left" : "return params.getChildCount();",
    "right" : "return params.getChildCount();",
    "info" : "ReturnStatement[8156-8186]:ReturnStatement[8156-8186]"
  }, {
    "left" : "return Integer.MAX_VALUE;",
    "right" : "return Integer.MAX_VALUE;",
    "info" : "ReturnStatement[8206-8231]:ReturnStatement[8206-8231]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8239-8245]:Modifier[8239-8245]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[8246-8252]:SimpleType[8246-8252]"
  }, {
    "left" : "getReturnType",
    "right" : "getReturnType",
    "info" : "SimpleName[8253-8266]:SimpleName[8253-8266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8269-8302]:Block[8269-8302]"
  }, {
    "left" : "return call.returnType;",
    "right" : "return call.returnType;",
    "info" : "ReturnStatement[8275-8298]:ReturnStatement[8275-8298]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8306-8312]:Modifier[8306-8312]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8313-8320]:PrimitiveType[8313-8320]"
  }, {
    "left" : "isReturnTypeInferred",
    "right" : "isReturnTypeInferred",
    "info" : "SimpleName[8321-8341]:SimpleName[8321-8341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8344-8385]:Block[8344-8385]"
  }, {
    "left" : "return call.returnTypeInferred;",
    "right" : "return call.returnTypeInferred;",
    "info" : "ReturnStatement[8350-8381]:ReturnStatement[8350-8381]"
  }, {
    "left" : "ArrowType",
    "right" : "ArrowType",
    "info" : "SimpleType[8456-8465]:SimpleType[8456-8465]"
  }, {
    "left" : "getInternalArrowType",
    "right" : "getInternalArrowType",
    "info" : "SimpleName[8466-8486]:SimpleName[8466-8486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8489-8511]:Block[8489-8511]"
  }, {
    "left" : "return call;",
    "right" : "return call;",
    "info" : "ReturnStatement[8495-8507]:ReturnStatement[8495-8507]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8515-8524]:MarkerAnnotation[8515-8524]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8527-8533]:Modifier[8527-8533]"
  }, {
    "left" : "StaticSlot<JSType>",
    "right" : "StaticSlot<JSType>",
    "info" : "ParameterizedType[8534-8552]:ParameterizedType[8534-8552]"
  }, {
    "left" : "getSlot",
    "right" : "getSlot",
    "info" : "SimpleName[8553-8560]:SimpleName[8553-8560]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[8561-8572]:SingleVariableDeclaration[8561-8572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8574-8771]:Block[8574-8771]"
  }, {
    "left" : "if (\"prototype\".equals(name))",
    "right" : "if (\"prototype\".equals(name))",
    "info" : "IfStatement[8580-8767]:IfStatement[8580-8767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8610-8720]:Block[8610-8720]"
  }, {
    "left" : "getPrototype();",
    "right" : "getPrototype();",
    "info" : "ExpressionStatement[8671-8686]:ExpressionStatement[8671-8686]"
  }, {
    "left" : "return prototypeSlot;",
    "right" : "return prototypeSlot;",
    "info" : "ReturnStatement[8693-8714]:ReturnStatement[8693-8714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8726-8767]:Block[8726-8767]"
  }, {
    "left" : "return super.getSlot(name);",
    "right" : "return super.getSlot(name);",
    "info" : "ReturnStatement[8734-8761]:ReturnStatement[8734-8761]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8911-8917]:Modifier[8911-8917]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[8918-8929]:ParameterizedType[8918-8929]"
  }, {
    "left" : "getOwnPropertyNames",
    "right" : "getOwnPropertyNames",
    "info" : "SimpleName[8930-8949]:SimpleName[8930-8949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8952-9172]:Block[8952-9172]"
  }, {
    "left" : "if (prototype == null)",
    "right" : "if (prototype == null)",
    "info" : "IfStatement[8958-9168]:IfStatement[8958-9168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8981-9030]:Block[8981-9030]"
  }, {
    "left" : "return super.getOwnPropertyNames();",
    "right" : "return super.getOwnPropertyNames();",
    "info" : "ReturnStatement[8989-9024]:ReturnStatement[8989-9024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9036-9168]:Block[9036-9168]"
  }, {
    "left" : "Set<String> names = Sets.newHashSet(\"prototype\");",
    "right" : "Set<String> names = Sets.newHashSet(\"prototype\");",
    "info" : "VariableDeclarationStatement[9044-9093]:VariableDeclarationStatement[9044-9093]"
  }, {
    "left" : "names.addAll(super.getOwnPropertyNames());",
    "right" : "names.addAll(super.getOwnPropertyNames());",
    "info" : "ExpressionStatement[9100-9142]:ExpressionStatement[9100-9142]"
  }, {
    "left" : "return names;",
    "right" : "return names;",
    "info" : "ReturnStatement[9149-9162]:ReturnStatement[9149-9162]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9330-9336]:Modifier[9330-9336]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[9337-9347]:SimpleType[9337-9347]"
  }, {
    "left" : "getPrototype",
    "right" : "getPrototype",
    "info" : "SimpleName[9348-9360]:SimpleName[9348-9360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9363-9703]:Block[9363-9703]"
  }, {
    "left" : "if (prototype == null)",
    "right" : "if (prototype == null)",
    "info" : "IfStatement[9419-9677]:IfStatement[9419-9677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9442-9677]:Block[9442-9677]"
  }, {
    "left" : "setPrototype(\n          new PrototypeObjectType(\n              registry,\n              this.getReferenceName() + \".prototype\",\n              registry.getNativeObjectType(OBJECT_TYPE),\n              isNativeObjectType()));",
    "right" : "setPrototype(\n          new PrototypeObjectType(\n              registry,\n              this.getReferenceName() + \".prototype\",\n              registry.getNativeObjectType(OBJECT_TYPE),\n              isNativeObjectType()));",
    "info" : "ExpressionStatement[9450-9671]:ExpressionStatement[9450-9671]"
  }, {
    "left" : "return prototype;",
    "right" : "return prototype;",
    "info" : "ReturnStatement[9682-9699]:ReturnStatement[9682-9699]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9841-9847]:Modifier[9841-9847]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9848-9852]:PrimitiveType[9848-9852]"
  }, {
    "left" : "setPrototypeBasedOn",
    "right" : "setPrototypeBasedOn",
    "info" : "SimpleName[9853-9872]:SimpleName[9853-9872]"
  }, {
    "left" : "ObjectType baseType",
    "right" : "ObjectType baseType",
    "info" : "SingleVariableDeclaration[9873-9892]:SingleVariableDeclaration[9873-9892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9894-11052]:Block[9894-11016]"
  }, {
    "left" : "if (baseType.hasReferenceName() ||\n        baseType.isUnknownType() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType))",
    "right" : "if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType))",
    "info" : "IfStatement[10676-10998]:IfStatement[10676-10962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10877-10998]:Block[10841-10962]"
  }, {
    "left" : "baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);",
    "right" : "baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);",
    "info" : "ExpressionStatement[10886-10992]:ExpressionStatement[10850-10956]"
  }, {
    "left" : "setPrototype((PrototypeObjectType) baseType);",
    "right" : "setPrototype((PrototypeObjectType) baseType);",
    "info" : "ExpressionStatement[11003-11048]:ExpressionStatement[10967-11012]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11203-11209]:Modifier[11167-11173]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11210-11217]:PrimitiveType[11174-11181]"
  }, {
    "left" : "setPrototype",
    "right" : "setPrototype",
    "info" : "SimpleName[11218-11230]:SimpleName[11182-11194]"
  }, {
    "left" : "PrototypeObjectType prototype",
    "right" : "PrototypeObjectType prototype",
    "info" : "SingleVariableDeclaration[11231-11260]:SingleVariableDeclaration[11195-11224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11262-12326]:Block[11226-12429]"
  }, {
    "left" : "if (prototype == null)",
    "right" : "if (prototype == null)",
    "info" : "IfStatement[11268-11318]:IfStatement[11232-11282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11291-11318]:Block[11255-11282]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11299-11312]:ReturnStatement[11263-11276]"
  }, {
    "left" : "if (isConstructor() && prototype == getInstanceType())",
    "right" : "if (isConstructor() && prototype == getInstanceType())",
    "info" : "IfStatement[11389-11471]:IfStatement[11353-11435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11444-11471]:Block[11408-11435]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11452-11465]:ReturnStatement[11416-11429]"
  }, {
    "left" : "boolean replacedPrototype = prototype != null;",
    "right" : "boolean replacedPrototype = oldPrototype != null;",
    "info" : "VariableDeclarationStatement[11477-11523]:VariableDeclarationStatement[11496-11545]"
  }, {
    "left" : "prototype",
    "right" : "prototype",
    "info" : "SimpleName[11505-11514]:SimpleName[11481-11490]"
  }, {
    "left" : "this.prototype = prototype;",
    "right" : "this.prototype = prototype;",
    "info" : "ExpressionStatement[11529-11556]:ExpressionStatement[11551-11578]"
  }, {
    "left" : "this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);",
    "right" : "this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);",
    "info" : "ExpressionStatement[11561-11627]:ExpressionStatement[11583-11649]"
  }, {
    "left" : "this.prototype.setOwnerFunction(this);",
    "right" : "this.prototype.setOwnerFunction(this);",
    "info" : "ExpressionStatement[11632-11670]:ExpressionStatement[11654-11692]"
  }, {
    "left" : "if (isConstructor() || isInterface())",
    "right" : "if (isConstructor() || isInterface())",
    "info" : "IfStatement[11817-12241]:IfStatement[11920-12344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11855-12241]:Block[11958-12344]"
  }, {
    "left" : "FunctionType superClass = getSuperClassConstructor();",
    "right" : "FunctionType superClass = getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[11863-11916]:VariableDeclarationStatement[11966-12019]"
  }, {
    "left" : "if (superClass != null)",
    "right" : "if (superClass != null)",
    "info" : "IfStatement[11923-11993]:IfStatement[12026-12096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11947-11993]:Block[12050-12096]"
  }, {
    "left" : "superClass.addSubType(this);",
    "right" : "superClass.addSubType(this);",
    "info" : "ExpressionStatement[11957-11985]:ExpressionStatement[12060-12088]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[12001-12235]:IfStatement[12104-12338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12020-12235]:Block[12123-12338]"
  }, {
    "left" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "info" : "EnhancedForStatement[12030-12227]:EnhancedForStatement[12133-12330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12087-12227]:Block[12190-12330]"
  }, {
    "left" : "if (interfaceType.getConstructor() != null)",
    "right" : "if (interfaceType.getConstructor() != null)",
    "info" : "IfStatement[12099-12217]:IfStatement[12202-12320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12143-12217]:Block[12246-12320]"
  }, {
    "left" : "interfaceType.getConstructor().addSubType(this);",
    "right" : "interfaceType.getConstructor().addSubType(this);",
    "info" : "ExpressionStatement[12157-12205]:ExpressionStatement[12260-12308]"
  }, {
    "left" : "if (replacedPrototype)",
    "right" : "if (replacedPrototype)",
    "info" : "IfStatement[12247-12304]:IfStatement[12350-12407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12270-12304]:Block[12373-12407]"
  }, {
    "left" : "clearCachedValues();",
    "right" : "clearCachedValues();",
    "info" : "ExpressionStatement[12278-12298]:ExpressionStatement[12381-12401]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12310-12322]:ReturnStatement[12413-12425]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12553-12559]:Modifier[12656-12662]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[12560-12580]:ParameterizedType[12663-12683]"
  }, {
    "left" : "getAllImplementedInterfaces",
    "right" : "getAllImplementedInterfaces",
    "info" : "SimpleName[12581-12608]:SimpleName[12684-12711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12611-12896]:Block[12714-12999]"
  }, {
    "left" : "Set<ObjectType> interfaces = Sets.newLinkedHashSet();",
    "right" : "Set<ObjectType> interfaces = Sets.newLinkedHashSet();",
    "info" : "VariableDeclarationStatement[12706-12759]:VariableDeclarationStatement[12809-12862]"
  }, {
    "left" : "for (ObjectType type : getImplementedInterfaces())",
    "right" : "for (ObjectType type : getImplementedInterfaces())",
    "info" : "EnhancedForStatement[12765-12869]:EnhancedForStatement[12868-12972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12816-12869]:Block[12919-12972]"
  }, {
    "left" : "addRelatedInterfaces(type, interfaces);",
    "right" : "addRelatedInterfaces(type, interfaces);",
    "info" : "ExpressionStatement[12824-12863]:ExpressionStatement[12927-12966]"
  }, {
    "left" : "return interfaces;",
    "right" : "return interfaces;",
    "info" : "ReturnStatement[12874-12892]:ReturnStatement[12977-12995]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12900-12907]:Modifier[13003-13010]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12908-12912]:PrimitiveType[13011-13015]"
  }, {
    "left" : "addRelatedInterfaces",
    "right" : "addRelatedInterfaces",
    "info" : "SimpleName[12913-12933]:SimpleName[13016-13036]"
  }, {
    "left" : "ObjectType instance",
    "right" : "ObjectType instance",
    "info" : "SingleVariableDeclaration[12934-12953]:SingleVariableDeclaration[13037-13056]"
  }, {
    "left" : "Set<ObjectType> set",
    "right" : "Set<ObjectType> set",
    "info" : "SingleVariableDeclaration[12955-12974]:SingleVariableDeclaration[13058-13077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12976-13303]:Block[13079-13406]"
  }, {
    "left" : "FunctionType constructor = instance.getConstructor();",
    "right" : "FunctionType constructor = instance.getConstructor();",
    "info" : "VariableDeclarationStatement[12982-13035]:VariableDeclarationStatement[13085-13138]"
  }, {
    "left" : "if (constructor != null)",
    "right" : "if (constructor != null)",
    "info" : "IfStatement[13040-13299]:IfStatement[13143-13402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13065-13299]:Block[13168-13402]"
  }, {
    "left" : "if (!constructor.isInterface())",
    "right" : "if (!constructor.isInterface())",
    "info" : "IfStatement[13073-13130]:IfStatement[13176-13233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13105-13130]:Block[13208-13233]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[13115-13122]:ReturnStatement[13218-13225]"
  }, {
    "left" : "set.add(instance);",
    "right" : "set.add(instance);",
    "info" : "ExpressionStatement[13138-13156]:ExpressionStatement[13241-13259]"
  }, {
    "left" : "for (ObjectType interfaceType : instance.getCtorExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : instance.getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[13164-13293]:EnhancedForStatement[13267-13396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13234-13293]:Block[13337-13396]"
  }, {
    "left" : "addRelatedInterfaces(interfaceType, set);",
    "right" : "addRelatedInterfaces(interfaceType, set);",
    "info" : "ExpressionStatement[13244-13285]:ExpressionStatement[13347-13388]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13386-13392]:Modifier[13489-13495]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[13393-13413]:ParameterizedType[13496-13516]"
  }, {
    "left" : "getImplementedInterfaces",
    "right" : "getImplementedInterfaces",
    "info" : "SimpleName[13414-13438]:SimpleName[13517-13541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13441-13723]:Block[13544-13826]"
  }, {
    "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
    "info" : "VariableDeclarationStatement[13447-13532]:VariableDeclarationStatement[13550-13635]"
  }, {
    "left" : "if (superCtor == null)",
    "right" : "if (superCtor == null)",
    "info" : "IfStatement[13537-13719]:IfStatement[13640-13822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13560-13603]:Block[13663-13706]"
  }, {
    "left" : "return implementedInterfaces;",
    "right" : "return implementedInterfaces;",
    "info" : "ReturnStatement[13568-13597]:ReturnStatement[13671-13700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13609-13719]:Block[13712-13822]"
  }, {
    "left" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
    "right" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
    "info" : "ReturnStatement[13617-13713]:ReturnStatement[13720-13816]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13727-13733]:Modifier[13830-13836]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13734-13738]:PrimitiveType[13837-13841]"
  }, {
    "left" : "setImplementedInterfaces",
    "right" : "setImplementedInterfaces",
    "info" : "SimpleName[13739-13763]:SimpleName[13842-13866]"
  }, {
    "left" : "List<ObjectType> implementedInterfaces",
    "right" : "List<ObjectType> implementedInterfaces",
    "info" : "SingleVariableDeclaration[13764-13802]:SingleVariableDeclaration[13867-13905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13804-14064]:Block[13907-14167]"
  }, {
    "left" : "for (ObjectType type : implementedInterfaces)",
    "right" : "for (ObjectType type : implementedInterfaces)",
    "info" : "EnhancedForStatement[13867-13982]:EnhancedForStatement[13970-14085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13913-13982]:Block[14016-14085]"
  }, {
    "left" : "registry.registerTypeImplementingInterface(this, type);",
    "right" : "registry.registerTypeImplementingInterface(this, type);",
    "info" : "ExpressionStatement[13921-13976]:ExpressionStatement[14024-14079]"
  }, {
    "left" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
    "right" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
    "info" : "ExpressionStatement[13987-14060]:ExpressionStatement[14090-14163]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14261-14267]:Modifier[14364-14370]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[14268-14288]:ParameterizedType[14371-14391]"
  }, {
    "left" : "getAllExtendedInterfaces",
    "right" : "getAllExtendedInterfaces",
    "info" : "SimpleName[14289-14313]:SimpleName[14392-14416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14316-14648]:Block[14419-14751]"
  }, {
    "left" : "Set<ObjectType> extendedInterfaces = Sets.newLinkedHashSet();",
    "right" : "Set<ObjectType> extendedInterfaces = Sets.newLinkedHashSet();",
    "info" : "VariableDeclarationStatement[14411-14472]:VariableDeclarationStatement[14514-14575]"
  }, {
    "left" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : getExtendedInterfaces())",
    "info" : "EnhancedForStatement[14478-14613]:EnhancedForStatement[14581-14716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14535-14613]:Block[14638-14716]"
  }, {
    "left" : "addRelatedExtendedInterfaces(interfaceType, extendedInterfaces);",
    "right" : "addRelatedExtendedInterfaces(interfaceType, extendedInterfaces);",
    "info" : "ExpressionStatement[14543-14607]:ExpressionStatement[14646-14710]"
  }, {
    "left" : "return extendedInterfaces;",
    "right" : "return extendedInterfaces;",
    "info" : "ReturnStatement[14618-14644]:ReturnStatement[14721-14747]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14652-14659]:Modifier[14755-14762]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14660-14664]:PrimitiveType[14763-14767]"
  }, {
    "left" : "addRelatedExtendedInterfaces",
    "right" : "addRelatedExtendedInterfaces",
    "info" : "SimpleName[14665-14693]:SimpleName[14768-14796]"
  }, {
    "left" : "ObjectType instance",
    "right" : "ObjectType instance",
    "info" : "SingleVariableDeclaration[14694-14713]:SingleVariableDeclaration[14797-14816]"
  }, {
    "left" : "Set<ObjectType> set",
    "right" : "Set<ObjectType> set",
    "info" : "SingleVariableDeclaration[14721-14740]:SingleVariableDeclaration[14824-14843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14742-15011]:Block[14845-15114]"
  }, {
    "left" : "FunctionType constructor = instance.getConstructor();",
    "right" : "FunctionType constructor = instance.getConstructor();",
    "info" : "VariableDeclarationStatement[14748-14801]:VariableDeclarationStatement[14851-14904]"
  }, {
    "left" : "if (constructor != null)",
    "right" : "if (constructor != null)",
    "info" : "IfStatement[14806-15007]:IfStatement[14909-15110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14831-15007]:Block[14934-15110]"
  }, {
    "left" : "set.add(instance);",
    "right" : "set.add(instance);",
    "info" : "ExpressionStatement[14839-14857]:ExpressionStatement[14942-14960]"
  }, {
    "left" : "for (ObjectType interfaceType : constructor.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : constructor.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[14865-15001]:EnhancedForStatement[14968-15104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14934-15001]:Block[15037-15104]"
  }, {
    "left" : "addRelatedExtendedInterfaces(interfaceType, set);",
    "right" : "addRelatedExtendedInterfaces(interfaceType, set);",
    "info" : "ExpressionStatement[14944-14993]:ExpressionStatement[15047-15096]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15077-15083]:Modifier[15180-15186]"
  }, {
    "left" : "Iterable<ObjectType>",
    "right" : "Iterable<ObjectType>",
    "info" : "ParameterizedType[15084-15104]:ParameterizedType[15187-15207]"
  }, {
    "left" : "getExtendedInterfaces",
    "right" : "getExtendedInterfaces",
    "info" : "SimpleName[15105-15126]:SimpleName[15208-15229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15129-15165]:Block[15232-15268]"
  }, {
    "left" : "return extendedInterfaces;",
    "right" : "return extendedInterfaces;",
    "info" : "ReturnStatement[15135-15161]:ReturnStatement[15238-15264]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15245-15251]:Modifier[15348-15354]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15252-15255]:PrimitiveType[15355-15358]"
  }, {
    "left" : "getExtendedInterfacesCount",
    "right" : "getExtendedInterfacesCount",
    "info" : "SimpleName[15256-15282]:SimpleName[15359-15385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15285-15328]:Block[15388-15431]"
  }, {
    "left" : "return extendedInterfaces.size();",
    "right" : "return extendedInterfaces.size();",
    "info" : "ReturnStatement[15291-15324]:ReturnStatement[15394-15427]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15332-15338]:Modifier[15435-15441]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15339-15343]:PrimitiveType[15442-15446]"
  }, {
    "left" : "setExtendedInterfaces",
    "right" : "setExtendedInterfaces",
    "info" : "SimpleName[15344-15365]:SimpleName[15447-15468]"
  }, {
    "left" : "List<ObjectType> extendedInterfaces",
    "right" : "List<ObjectType> extendedInterfaces",
    "info" : "SingleVariableDeclaration[15366-15401]:SingleVariableDeclaration[15469-15504]"
  }, {
    "left" : "UnsupportedOperationException",
    "right" : "UnsupportedOperationException",
    "info" : "SimpleType[15414-15443]:SimpleType[15517-15546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15444-15616]:Block[15547-15719]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[15450-15612]:IfStatement[15553-15715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15469-15550]:Block[15572-15653]"
  }, {
    "left" : "this.extendedInterfaces = ImmutableList.copyOf(extendedInterfaces);",
    "right" : "this.extendedInterfaces = ImmutableList.copyOf(extendedInterfaces);",
    "info" : "ExpressionStatement[15477-15544]:ExpressionStatement[15580-15647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15556-15612]:Block[15659-15715]"
  }, {
    "left" : "throw new UnsupportedOperationException();",
    "right" : "throw new UnsupportedOperationException();",
    "info" : "ThrowStatement[15564-15606]:ThrowStatement[15667-15709]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15620-15629]:MarkerAnnotation[15723-15732]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15632-15638]:Modifier[15735-15741]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[15639-15645]:SimpleType[15742-15748]"
  }, {
    "left" : "getPropertyType",
    "right" : "getPropertyType",
    "info" : "SimpleName[15646-15661]:SimpleName[15749-15764]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[15662-15673]:SingleVariableDeclaration[15765-15776]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15675-17563]:Block[15778-17666]"
  }, {
    "left" : "if (!hasOwnProperty(name))",
    "right" : "if (!hasOwnProperty(name))",
    "info" : "IfStatement[15681-17518]:IfStatement[15784-17621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15708-17518]:Block[15811-17621]"
  }, {
    "left" : "if (\"call\".equals(name))",
    "right" : "if (\"call\".equals(name))",
    "info" : "IfStatement[15716-17512]:IfStatement[15819-17615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15741-16698]:Block[15844-16801]"
  }, {
    "left" : "Node params = getParametersNode();",
    "right" : "Node params = getParametersNode();",
    "info" : "VariableDeclarationStatement[15797-15831]:VariableDeclarationStatement[15900-15934]"
  }, {
    "left" : "if (params == null)",
    "right" : "if (params == null)",
    "info" : "IfStatement[15840-16690]:IfStatement[15943-16793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15860-16152]:Block[15963-16255]"
  }, {
    "left" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n              .withReturnType(getReturnType())\n              .build(),\n              source);",
    "right" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n              .withReturnType(getReturnType())\n              .build(),\n              source);",
    "info" : "ExpressionStatement[15976-16142]:ExpressionStatement[16079-16245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16158-16690]:Block[16261-16793]"
  }, {
    "left" : "params = params.cloneTree();",
    "right" : "params = params.cloneTree();",
    "info" : "ExpressionStatement[16170-16198]:ExpressionStatement[16273-16301]"
  }, {
    "left" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
    "right" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
    "info" : "VariableDeclarationStatement[16209-16268]:VariableDeclarationStatement[16312-16371]"
  }, {
    "left" : "thisTypeNode.setJSType(\n              registry.createOptionalNullableType(getTypeOfThis()));",
    "right" : "thisTypeNode.setJSType(\n              registry.createOptionalNullableType(getTypeOfThis()));",
    "info" : "ExpressionStatement[16279-16371]:ExpressionStatement[16382-16474]"
  }, {
    "left" : "params.addChildToFront(thisTypeNode);",
    "right" : "params.addChildToFront(thisTypeNode);",
    "info" : "ExpressionStatement[16382-16419]:ExpressionStatement[16485-16522]"
  }, {
    "left" : "thisTypeNode.setOptionalArg(true);",
    "right" : "thisTypeNode.setOptionalArg(true);",
    "info" : "ExpressionStatement[16430-16464]:ExpressionStatement[16533-16567]"
  }, {
    "left" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n              .withParamsNode(params)\n              .withReturnType(getReturnType())\n              .build(),\n              source);",
    "right" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n              .withParamsNode(params)\n              .withReturnType(getReturnType())\n              .build(),\n              source);",
    "info" : "ExpressionStatement[16476-16680]:ExpressionStatement[16579-16783]"
  }, {
    "left" : "if (\"apply\".equals(name))",
    "right" : "if (\"apply\".equals(name))",
    "info" : "IfStatement[16704-17512]:IfStatement[16807-17615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16730-17512]:Block[16833-17615]"
  }, {
    "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
    "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
    "info" : "VariableDeclarationStatement[16787-16853]:VariableDeclarationStatement[16890-16956]"
  }, {
    "left" : "builder.addOptionalParams(\n            registry.createNullableType(getTypeOfThis()),\n            registry.createNullableType(\n                registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
    "right" : "builder.addOptionalParams(\n            registry.createNullableType(getTypeOfThis()),\n            registry.createNullableType(\n                registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
    "info" : "ExpressionStatement[17110-17303]:ExpressionStatement[17213-17406]"
  }, {
    "left" : "defineDeclaredProperty(name,\n            new FunctionBuilder(registry)\n            .withParams(builder)\n            .withReturnType(getReturnType())\n            .build(),\n            source);",
    "right" : "defineDeclaredProperty(name,\n            new FunctionBuilder(registry)\n            .withParams(builder)\n            .withReturnType(getReturnType())\n            .build(),\n            source);",
    "info" : "ExpressionStatement[17313-17504]:ExpressionStatement[17416-17607]"
  }, {
    "left" : "return super.getPropertyType(name);",
    "right" : "return super.getPropertyType(name);",
    "info" : "ReturnStatement[17524-17559]:ReturnStatement[17627-17662]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17567-17576]:MarkerAnnotation[17670-17679]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17579-17586]:PrimitiveType[17682-17689]"
  }, {
    "left" : "defineProperty",
    "right" : "defineProperty",
    "info" : "SimpleName[17587-17601]:SimpleName[17690-17704]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[17602-17613]:SingleVariableDeclaration[17705-17716]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[17615-17626]:SingleVariableDeclaration[17718-17729]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[17634-17650]:SingleVariableDeclaration[17737-17753]"
  }, {
    "left" : "Node propertyNode",
    "right" : "Node propertyNode",
    "info" : "SingleVariableDeclaration[17652-17669]:SingleVariableDeclaration[17755-17772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17671-18055]:Block[17774-18158]"
  }, {
    "left" : "if (\"prototype\".equals(name))",
    "right" : "if (\"prototype\".equals(name))",
    "info" : "IfStatement[17677-17982]:IfStatement[17780-18085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17707-17982]:Block[17810-18085]"
  }, {
    "left" : "ObjectType objType = type.toObjectType();",
    "right" : "ObjectType objType = type.toObjectType();",
    "info" : "VariableDeclarationStatement[17715-17756]:VariableDeclarationStatement[17818-17859]"
  }, {
    "left" : "if (objType != null)",
    "right" : "if (objType != null)",
    "info" : "IfStatement[17763-17976]:IfStatement[17866-18079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17784-17939]:Block[17887-18042]"
  }, {
    "left" : "if (objType.isEquivalentTo(prototype))",
    "right" : "if (objType.isEquivalentTo(prototype))",
    "info" : "IfStatement[17794-17867]:IfStatement[17897-17970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17833-17867]:Block[17936-17970]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17845-17857]:ReturnStatement[17948-17960]"
  }, {
    "left" : "this.setPrototypeBasedOn(objType);",
    "right" : "this.setPrototypeBasedOn(objType);",
    "info" : "ExpressionStatement[17876-17910]:ExpressionStatement[17979-18013]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17919-17931]:ReturnStatement[18022-18034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17945-17976]:Block[18048-18079]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17955-17968]:ReturnStatement[18058-18071]"
  }, {
    "left" : "return super.defineProperty(name, type, inferred, propertyNode);",
    "right" : "return super.defineProperty(name, type, inferred, propertyNode);",
    "info" : "ReturnStatement[17987-18051]:ReturnStatement[18090-18154]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18059-18068]:MarkerAnnotation[18162-18171]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18071-18077]:Modifier[18174-18180]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[18078-18084]:SimpleType[18181-18187]"
  }, {
    "left" : "getLeastSupertype",
    "right" : "getLeastSupertype",
    "info" : "SimpleName[18085-18102]:SimpleName[18188-18205]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[18103-18114]:SingleVariableDeclaration[18206-18217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18116-18161]:Block[18219-18264]"
  }, {
    "left" : "return supAndInfHelper(that, true);",
    "right" : "return supAndInfHelper(that, true);",
    "info" : "ReturnStatement[18122-18157]:ReturnStatement[18225-18260]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18165-18174]:MarkerAnnotation[18268-18277]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18177-18183]:Modifier[18280-18286]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[18184-18190]:SimpleType[18287-18293]"
  }, {
    "left" : "getGreatestSubtype",
    "right" : "getGreatestSubtype",
    "info" : "SimpleName[18191-18209]:SimpleName[18294-18312]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[18210-18221]:SingleVariableDeclaration[18313-18324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18223-18269]:Block[18326-18372]"
  }, {
    "left" : "return supAndInfHelper(that, false);",
    "right" : "return supAndInfHelper(that, false);",
    "info" : "ReturnStatement[18229-18265]:ReturnStatement[18332-18368]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18630-18637]:Modifier[18733-18740]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[18638-18644]:SimpleType[18741-18747]"
  }, {
    "left" : "supAndInfHelper",
    "right" : "supAndInfHelper",
    "info" : "SimpleName[18645-18660]:SimpleName[18748-18763]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[18661-18672]:SingleVariableDeclaration[18764-18775]"
  }, {
    "left" : "boolean leastSuper",
    "right" : "boolean leastSuper",
    "info" : "SingleVariableDeclaration[18674-18692]:SingleVariableDeclaration[18777-18795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18694-21809]:Block[18797-21912]"
  }, {
    "left" : "if (isFunctionType() && that.isFunctionType())",
    "right" : "if (isFunctionType() && that.isFunctionType())",
    "info" : "IfStatement[19444-21700]:IfStatement[19547-21803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19491-21700]:Block[19594-21803]"
  }, {
    "left" : "if (isEquivalentTo(that))",
    "right" : "if (isEquivalentTo(that))",
    "info" : "IfStatement[19499-19555]:IfStatement[19602-19658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19525-19555]:Block[19628-19658]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[19535-19547]:ReturnStatement[19638-19650]"
  }, {
    "left" : "FunctionType other = that.toMaybeFunctionType();",
    "right" : "FunctionType other = that.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[19563-19611]:VariableDeclarationStatement[19666-19714]"
  }, {
    "left" : "if (other != null &&\n          isOrdinaryFunction() && that.isOrdinaryFunction() &&\n          !this.call.hasUnknownParamsOrReturn() &&\n          !other.call.hasUnknownParamsOrReturn())",
    "right" : "if (other != null &&\n          isOrdinaryFunction() && that.isOrdinaryFunction() &&\n          !this.call.hasUnknownParamsOrReturn() &&\n          !other.call.hasUnknownParamsOrReturn())",
    "info" : "IfStatement[19859-20660]:IfStatement[19962-20763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20044-20660]:Block[20147-20763]"
  }, {
    "left" : "boolean isSubtypeOfThat = this.isSubtype(that);",
    "right" : "boolean isSubtypeOfThat = this.isSubtype(that);",
    "info" : "VariableDeclarationStatement[20151-20198]:VariableDeclarationStatement[20254-20301]"
  }, {
    "left" : "boolean isSubtypeOfThis = that.isSubtype(this);",
    "right" : "boolean isSubtypeOfThis = that.isSubtype(this);",
    "info" : "VariableDeclarationStatement[20207-20254]:VariableDeclarationStatement[20310-20357]"
  }, {
    "left" : "if (isSubtypeOfThat && !isSubtypeOfThis)",
    "right" : "if (isSubtypeOfThat && !isSubtypeOfThis)",
    "info" : "IfStatement[20263-20459]:IfStatement[20366-20562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20304-20358]:Block[20407-20461]"
  }, {
    "left" : "return leastSuper ? that : this;",
    "right" : "return leastSuper ? that : this;",
    "info" : "ReturnStatement[20316-20348]:ReturnStatement[20419-20451]"
  }, {
    "left" : "if (isSubtypeOfThis && !isSubtypeOfThat)",
    "right" : "if (isSubtypeOfThis && !isSubtypeOfThat)",
    "info" : "IfStatement[20364-20459]:IfStatement[20467-20562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20405-20459]:Block[20508-20562]"
  }, {
    "left" : "return leastSuper ? this : that;",
    "right" : "return leastSuper ? this : that;",
    "info" : "ReturnStatement[20417-20449]:ReturnStatement[20520-20552]"
  }, {
    "left" : "FunctionType merged = tryMergeFunctionPiecewise(other, leastSuper);",
    "right" : "FunctionType merged = tryMergeFunctionPiecewise(other, leastSuper);",
    "info" : "VariableDeclarationStatement[20520-20587]:VariableDeclarationStatement[20623-20690]"
  }, {
    "left" : "if (merged != null)",
    "right" : "if (merged != null)",
    "info" : "IfStatement[20596-20652]:IfStatement[20699-20755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20616-20652]:Block[20719-20755]"
  }, {
    "left" : "return merged;",
    "right" : "return merged;",
    "info" : "ReturnStatement[20628-20642]:ReturnStatement[20731-20745]"
  }, {
    "left" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
    "right" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
    "info" : "VariableDeclarationStatement[20773-20870]:VariableDeclarationStatement[20876-20973]"
  }, {
    "left" : "if (functionInstance.isEquivalentTo(that))",
    "right" : "if (functionInstance.isEquivalentTo(that))",
    "info" : "IfStatement[20877-21069]:IfStatement[20980-21172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20920-20970]:Block[21023-21073]"
  }, {
    "left" : "return leastSuper ? that : this;",
    "right" : "return leastSuper ? that : this;",
    "info" : "ReturnStatement[20930-20962]:ReturnStatement[21033-21065]"
  }, {
    "left" : "if (functionInstance.isEquivalentTo(this))",
    "right" : "if (functionInstance.isEquivalentTo(this))",
    "info" : "IfStatement[20976-21069]:IfStatement[21079-21172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21019-21069]:Block[21122-21172]"
  }, {
    "left" : "return leastSuper ? this : that;",
    "right" : "return leastSuper ? this : that;",
    "info" : "ReturnStatement[21029-21061]:ReturnStatement[21132-21164]"
  }, {
    "left" : "FunctionType greatestFn =\n          registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
    "right" : "FunctionType greatestFn =\n          registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
    "info" : "VariableDeclarationStatement[21439-21541]:VariableDeclarationStatement[21542-21644]"
  }, {
    "left" : "FunctionType leastFn =\n          registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);",
    "right" : "FunctionType leastFn =\n          registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);",
    "info" : "VariableDeclarationStatement[21548-21646]:VariableDeclarationStatement[21651-21749]"
  }, {
    "left" : "return leastSuper ? greatestFn : leastFn;",
    "right" : "return leastSuper ? greatestFn : leastFn;",
    "info" : "ReturnStatement[21653-21694]:ReturnStatement[21756-21797]"
  }, {
    "left" : "return leastSuper ?\n        super.getLeastSupertype(that) :\n        super.getGreatestSubtype(that);",
    "right" : "return leastSuper ?\n        super.getLeastSupertype(that) :\n        super.getGreatestSubtype(that);",
    "info" : "ReturnStatement[21706-21805]:ReturnStatement[21809-21908]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21915-21922]:Modifier[22018-22025]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[21923-21935]:SimpleType[22026-22038]"
  }, {
    "left" : "tryMergeFunctionPiecewise",
    "right" : "tryMergeFunctionPiecewise",
    "info" : "SimpleName[21936-21961]:SimpleName[22039-22064]"
  }, {
    "left" : "FunctionType other",
    "right" : "FunctionType other",
    "info" : "SingleVariableDeclaration[21969-21987]:SingleVariableDeclaration[22072-22090]"
  }, {
    "left" : "boolean leastSuper",
    "right" : "boolean leastSuper",
    "info" : "SingleVariableDeclaration[21989-22007]:SingleVariableDeclaration[22092-22110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22009-23402]:Block[22112-23505]"
  }, {
    "left" : "Node newParamsNode = null;",
    "right" : "Node newParamsNode = null;",
    "info" : "VariableDeclarationStatement[22015-22041]:VariableDeclarationStatement[22118-22144]"
  }, {
    "left" : "if (call.hasEqualParameters(other.call))",
    "right" : "if (call.hasEqualParameters(other.call))",
    "info" : "IfStatement[22046-22296]:IfStatement[22149-22399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22087-22133]:Block[22190-22236]"
  }, {
    "left" : "newParamsNode = call.parameters;",
    "right" : "newParamsNode = call.parameters;",
    "info" : "ExpressionStatement[22095-22127]:ExpressionStatement[22198-22230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22139-22296]:Block[22242-22399]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[22278-22290]:ReturnStatement[22381-22393]"
  }, {
    "left" : "JSType newReturnType = leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);",
    "right" : "JSType newReturnType = leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);",
    "info" : "VariableDeclarationStatement[22302-22471]:VariableDeclarationStatement[22405-22574]"
  }, {
    "left" : "ObjectType newTypeOfThis = null;",
    "right" : "ObjectType newTypeOfThis = null;",
    "info" : "VariableDeclarationStatement[22477-22509]:VariableDeclarationStatement[22580-22612]"
  }, {
    "left" : "if (isEquivalent(typeOfThis, other.typeOfThis))",
    "right" : "if (isEquivalent(typeOfThis, other.typeOfThis))",
    "info" : "IfStatement[22514-23092]:IfStatement[22617-23195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22562-22603]:Block[22665-22706]"
  }, {
    "left" : "newTypeOfThis = typeOfThis;",
    "right" : "newTypeOfThis = typeOfThis;",
    "info" : "ExpressionStatement[22570-22597]:ExpressionStatement[22673-22700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22609-23092]:Block[22712-23195]"
  }, {
    "left" : "JSType maybeNewTypeOfThis = leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);",
    "right" : "JSType maybeNewTypeOfThis = leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);",
    "info" : "VariableDeclarationStatement[22617-22775]:VariableDeclarationStatement[22720-22878]"
  }, {
    "left" : "if (maybeNewTypeOfThis instanceof ObjectType)",
    "right" : "if (maybeNewTypeOfThis instanceof ObjectType)",
    "info" : "IfStatement[22782-23086]:IfStatement[22885-23189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22828-22894]:Block[22931-22997]"
  }, {
    "left" : "newTypeOfThis = (ObjectType) maybeNewTypeOfThis;",
    "right" : "newTypeOfThis = (ObjectType) maybeNewTypeOfThis;",
    "info" : "ExpressionStatement[22838-22886]:ExpressionStatement[22941-22989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22900-23086]:Block[23003-23189]"
  }, {
    "left" : "newTypeOfThis = leastSuper ?\n            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :\n            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);",
    "right" : "newTypeOfThis = leastSuper ?\n            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :\n            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);",
    "info" : "ExpressionStatement[22910-23078]:ExpressionStatement[23013-23181]"
  }, {
    "left" : "boolean newReturnTypeInferred =\n        call.returnTypeInferred || other.call.returnTypeInferred;",
    "right" : "boolean newReturnTypeInferred =\n        call.returnTypeInferred || other.call.returnTypeInferred;",
    "info" : "VariableDeclarationStatement[23098-23195]:VariableDeclarationStatement[23201-23298]"
  }, {
    "left" : "return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);",
    "right" : "return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);",
    "info" : "ReturnStatement[23201-23398]:ReturnStatement[23304-23501]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23533-23539]:Modifier[23636-23642]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[23540-23552]:SimpleType[23643-23655]"
  }, {
    "left" : "getSuperClassConstructor",
    "right" : "getSuperClassConstructor",
    "info" : "SimpleName[23553-23577]:SimpleName[23656-23680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23580-23850]:Block[23683-23953]"
  }, {
    "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
    "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
    "info" : "ExpressionStatement[23586-23648]:ExpressionStatement[23689-23751]"
  }, {
    "left" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
    "right" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[23653-23727]:VariableDeclarationStatement[23756-23830]"
  }, {
    "left" : "if (maybeSuperInstanceType == null)",
    "right" : "if (maybeSuperInstanceType == null)",
    "info" : "IfStatement[23732-23794]:IfStatement[23835-23897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23768-23794]:Block[23871-23897]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[23776-23788]:ReturnStatement[23879-23891]"
  }, {
    "left" : "return maybeSuperInstanceType.getConstructor();",
    "right" : "return maybeSuperInstanceType.getConstructor();",
    "info" : "ReturnStatement[23799-23846]:ReturnStatement[23902-23949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24004-24010]:Modifier[24107-24113]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24011-24017]:Modifier[24114-24120]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[24018-24028]:SimpleType[24121-24131]"
  }, {
    "left" : "getTopDefiningInterface",
    "right" : "getTopDefiningInterface",
    "info" : "SimpleName[24029-24052]:SimpleName[24132-24155]"
  }, {
    "left" : "ObjectType type",
    "right" : "ObjectType type",
    "info" : "SingleVariableDeclaration[24053-24068]:SingleVariableDeclaration[24156-24171]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[24076-24095]:SingleVariableDeclaration[24179-24198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24097-24442]:Block[24200-24545]"
  }, {
    "left" : "ObjectType foundType = null;",
    "right" : "ObjectType foundType = null;",
    "info" : "VariableDeclarationStatement[24103-24131]:VariableDeclarationStatement[24206-24234]"
  }, {
    "left" : "if (type.hasProperty(propertyName))",
    "right" : "if (type.hasProperty(propertyName))",
    "info" : "IfStatement[24136-24203]:IfStatement[24239-24306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24172-24203]:Block[24275-24306]"
  }, {
    "left" : "foundType = type;",
    "right" : "foundType = type;",
    "info" : "ExpressionStatement[24180-24197]:ExpressionStatement[24283-24300]"
  }, {
    "left" : "for (ObjectType interfaceType : type.getCtorExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : type.getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[24208-24416]:EnhancedForStatement[24311-24519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24274-24416]:Block[24377-24519]"
  }, {
    "left" : "if (interfaceType.hasProperty(propertyName))",
    "right" : "if (interfaceType.hasProperty(propertyName))",
    "info" : "IfStatement[24282-24410]:IfStatement[24385-24513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24327-24410]:Block[24430-24513]"
  }, {
    "left" : "foundType = getTopDefiningInterface(interfaceType, propertyName);",
    "right" : "foundType = getTopDefiningInterface(interfaceType, propertyName);",
    "info" : "ExpressionStatement[24337-24402]:ExpressionStatement[24440-24505]"
  }, {
    "left" : "return foundType;",
    "right" : "return foundType;",
    "info" : "ReturnStatement[24421-24438]:ReturnStatement[24524-24541]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24620-24626]:Modifier[24723-24729]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[24627-24637]:SimpleType[24730-24740]"
  }, {
    "left" : "getTopMostDefiningType",
    "right" : "getTopMostDefiningType",
    "info" : "SimpleName[24638-24660]:SimpleName[24741-24763]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[24661-24680]:SingleVariableDeclaration[24764-24783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24682-25268]:Block[24785-25371]"
  }, {
    "left" : "Preconditions.checkState(isConstructor() || isInterface());",
    "right" : "Preconditions.checkState(isConstructor() || isInterface());",
    "info" : "ExpressionStatement[24688-24747]:ExpressionStatement[24791-24850]"
  }, {
    "left" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
    "right" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
    "info" : "ExpressionStatement[24752-24822]:ExpressionStatement[24855-24925]"
  }, {
    "left" : "FunctionType ctor = this;",
    "right" : "FunctionType ctor = this;",
    "info" : "VariableDeclarationStatement[24827-24852]:VariableDeclarationStatement[24930-24955]"
  }, {
    "left" : "if (isInterface())",
    "right" : "if (isInterface())",
    "info" : "IfStatement[24858-24960]:IfStatement[24961-25063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24877-24960]:Block[24980-25063]"
  }, {
    "left" : "return getTopDefiningInterface(this.getInstanceType(), propertyName);",
    "right" : "return getTopDefiningInterface(this.getInstanceType(), propertyName);",
    "info" : "ReturnStatement[24885-24954]:ReturnStatement[24988-25057]"
  }, {
    "left" : "ObjectType topInstanceType = ctor.getInstanceType();",
    "right" : "ObjectType topInstanceType = ctor.getInstanceType();",
    "info" : "VariableDeclarationStatement[24966-25018]:VariableDeclarationStatement[25069-25121]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[25023-25236]:WhileStatement[25126-25339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25036-25236]:Block[25139-25339]"
  }, {
    "left" : "topInstanceType = ctor.getInstanceType();",
    "right" : "topInstanceType = ctor.getInstanceType();",
    "info" : "ExpressionStatement[25044-25085]:ExpressionStatement[25147-25188]"
  }, {
    "left" : "ctor = ctor.getSuperClassConstructor();",
    "right" : "ctor = ctor.getSuperClassConstructor();",
    "info" : "ExpressionStatement[25092-25131]:ExpressionStatement[25195-25234]"
  }, {
    "left" : "if (ctor == null || !ctor.getPrototype().hasProperty(propertyName))",
    "right" : "if (ctor == null || !ctor.getPrototype().hasProperty(propertyName))",
    "info" : "IfStatement[25138-25230]:IfStatement[25241-25333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25206-25230]:Block[25309-25333]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25216-25222]:BreakStatement[25319-25325]"
  }, {
    "left" : "return topInstanceType;",
    "right" : "return topInstanceType;",
    "info" : "ReturnStatement[25241-25264]:ReturnStatement[25344-25367]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25431-25440]:MarkerAnnotation[25534-25543]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25443-25449]:Modifier[25546-25552]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25450-25457]:PrimitiveType[25553-25560]"
  }, {
    "left" : "isEquivalentTo",
    "right" : "isEquivalentTo",
    "info" : "SimpleName[25458-25472]:SimpleName[25561-25575]"
  }, {
    "left" : "JSType otherType",
    "right" : "JSType otherType",
    "info" : "SingleVariableDeclaration[25473-25489]:SingleVariableDeclaration[25576-25592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25491-26077]:Block[25594-26180]"
  }, {
    "left" : "FunctionType that =\n        JSType.toMaybeFunctionType(otherType);",
    "right" : "FunctionType that =\n        JSType.toMaybeFunctionType(otherType);",
    "info" : "VariableDeclarationStatement[25497-25563]:VariableDeclarationStatement[25600-25666]"
  }, {
    "left" : "if (that == null)",
    "right" : "if (that == null)",
    "info" : "IfStatement[25568-25613]:IfStatement[25671-25716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25586-25613]:Block[25689-25716]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25594-25607]:ReturnStatement[25697-25710]"
  }, {
    "left" : "if (this.isConstructor())",
    "right" : "if (this.isConstructor())",
    "info" : "IfStatement[25618-25742]:IfStatement[25721-25845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25644-25742]:Block[25747-25845]"
  }, {
    "left" : "if (that.isConstructor())",
    "right" : "if (that.isConstructor())",
    "info" : "IfStatement[25652-25716]:IfStatement[25755-25819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25678-25716]:Block[25781-25819]"
  }, {
    "left" : "return this == that;",
    "right" : "return this == that;",
    "info" : "ReturnStatement[25688-25708]:ReturnStatement[25791-25811]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25723-25736]:ReturnStatement[25826-25839]"
  }, {
    "left" : "if (this.isInterface())",
    "right" : "if (this.isInterface())",
    "info" : "IfStatement[25747-25910]:IfStatement[25850-26013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25771-25910]:Block[25874-26013]"
  }, {
    "left" : "if (that.isInterface())",
    "right" : "if (that.isInterface())",
    "info" : "IfStatement[25779-25884]:IfStatement[25882-25987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25803-25884]:Block[25906-25987]"
  }, {
    "left" : "return this.getReferenceName().equals(that.getReferenceName());",
    "right" : "return this.getReferenceName().equals(that.getReferenceName());",
    "info" : "ReturnStatement[25813-25876]:ReturnStatement[25916-25979]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25891-25904]:ReturnStatement[25994-26007]"
  }, {
    "left" : "if (that.isInterface())",
    "right" : "if (that.isInterface())",
    "info" : "IfStatement[25915-25966]:IfStatement[26018-26069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25939-25966]:Block[26042-26069]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25947-25960]:ReturnStatement[26050-26063]"
  }, {
    "left" : "return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);",
    "right" : "return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);",
    "info" : "ReturnStatement[25971-26073]:ReturnStatement[26074-26176]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[26081-26090]:MarkerAnnotation[26184-26193]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26093-26099]:Modifier[26196-26202]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[26100-26103]:PrimitiveType[26203-26206]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[26104-26112]:SimpleName[26207-26215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26115-26196]:Block[26218-26299]"
  }, {
    "left" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
    "right" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
    "info" : "ReturnStatement[26121-26192]:ReturnStatement[26224-26295]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26200-26206]:Modifier[26303-26309]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26207-26214]:PrimitiveType[26310-26317]"
  }, {
    "left" : "hasEqualCallType",
    "right" : "hasEqualCallType",
    "info" : "SimpleName[26215-26231]:SimpleName[26318-26334]"
  }, {
    "left" : "FunctionType otherType",
    "right" : "FunctionType otherType",
    "info" : "SingleVariableDeclaration[26232-26254]:SingleVariableDeclaration[26335-26357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26256-26314]:Block[26359-26417]"
  }, {
    "left" : "return this.call.isEquivalentTo(otherType.call);",
    "right" : "return this.call.isEquivalentTo(otherType.call);",
    "info" : "ReturnStatement[26262-26310]:ReturnStatement[26365-26413]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[26590-26599]:MarkerAnnotation[26693-26702]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26602-26608]:Modifier[26705-26711]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26609-26615]:SimpleType[26712-26718]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[26616-26624]:SimpleName[26719-26727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26627-27727]:Block[26730-27830]"
  }, {
    "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "info" : "IfStatement[26633-26738]:IfStatement[26736-26841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26706-26738]:Block[26809-26841]"
  }, {
    "left" : "return \"Function\";",
    "right" : "return \"Function\";",
    "info" : "ReturnStatement[26714-26732]:ReturnStatement[26817-26835]"
  }, {
    "left" : "StringBuilder b = new StringBuilder(32);",
    "right" : "StringBuilder b = new StringBuilder(32);",
    "info" : "VariableDeclarationStatement[26744-26784]:VariableDeclarationStatement[26847-26887]"
  }, {
    "left" : "b.append(\"function (\");",
    "right" : "b.append(\"function (\");",
    "info" : "ExpressionStatement[26789-26812]:ExpressionStatement[26892-26915]"
  }, {
    "left" : "int paramNum = call.parameters.getChildCount();",
    "right" : "int paramNum = call.parameters.getChildCount();",
    "info" : "VariableDeclarationStatement[26817-26864]:VariableDeclarationStatement[26920-26967]"
  }, {
    "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
    "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
    "info" : "VariableDeclarationStatement[26869-26926]:VariableDeclarationStatement[26972-27029]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[26931-27106]:IfStatement[27034-27209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26955-27106]:Block[27058-27209]"
  }, {
    "left" : "if (isConstructor())",
    "right" : "if (isConstructor())",
    "info" : "IfStatement[26963-27061]:IfStatement[27066-27164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26984-27019]:Block[27087-27122]"
  }, {
    "left" : "b.append(\"new:\");",
    "right" : "b.append(\"new:\");",
    "info" : "ExpressionStatement[26994-27011]:ExpressionStatement[27097-27114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27025-27061]:Block[27128-27164]"
  }, {
    "left" : "b.append(\"this:\");",
    "right" : "b.append(\"this:\");",
    "info" : "ExpressionStatement[27035-27053]:ExpressionStatement[27138-27156]"
  }, {
    "left" : "b.append(typeOfThis.toString());",
    "right" : "b.append(typeOfThis.toString());",
    "info" : "ExpressionStatement[27068-27100]:ExpressionStatement[27171-27203]"
  }, {
    "left" : "if (paramNum > 0)",
    "right" : "if (paramNum > 0)",
    "info" : "IfStatement[27111-27646]:IfStatement[27214-27749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27129-27646]:Block[27232-27749]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[27137-27194]:IfStatement[27240-27297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27161-27194]:Block[27264-27297]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[27171-27186]:ExpressionStatement[27274-27289]"
  }, {
    "left" : "Node p = call.parameters.getFirstChild();",
    "right" : "Node p = call.parameters.getFirstChild();",
    "info" : "VariableDeclarationStatement[27201-27242]:VariableDeclarationStatement[27304-27345]"
  }, {
    "left" : "if (p.isVarArgs())",
    "right" : "if (p.isVarArgs())",
    "info" : "IfStatement[27249-27383]:IfStatement[27352-27486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27268-27324]:Block[27371-27427]"
  }, {
    "left" : "appendVarArgsString(b, p.getJSType());",
    "right" : "appendVarArgsString(b, p.getJSType());",
    "info" : "ExpressionStatement[27278-27316]:ExpressionStatement[27381-27419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27330-27383]:Block[27433-27486]"
  }, {
    "left" : "b.append(p.getJSType().toString());",
    "right" : "b.append(p.getJSType().toString());",
    "info" : "ExpressionStatement[27340-27375]:ExpressionStatement[27443-27478]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[27390-27406]:ExpressionStatement[27493-27509]"
  }, {
    "left" : "while (p != null)",
    "right" : "while (p != null)",
    "info" : "WhileStatement[27413-27640]:WhileStatement[27516-27743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27431-27640]:Block[27534-27743]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[27441-27456]:ExpressionStatement[27544-27559]"
  }, {
    "left" : "if (p.isVarArgs())",
    "right" : "if (p.isVarArgs())",
    "info" : "IfStatement[27465-27607]:IfStatement[27568-27710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27484-27544]:Block[27587-27647]"
  }, {
    "left" : "appendVarArgsString(b, p.getJSType());",
    "right" : "appendVarArgsString(b, p.getJSType());",
    "info" : "ExpressionStatement[27496-27534]:ExpressionStatement[27599-27637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27550-27607]:Block[27653-27710]"
  }, {
    "left" : "b.append(p.getJSType().toString());",
    "right" : "b.append(p.getJSType().toString());",
    "info" : "ExpressionStatement[27562-27597]:ExpressionStatement[27665-27700]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[27616-27632]:ExpressionStatement[27719-27735]"
  }, {
    "left" : "b.append(\"): \");",
    "right" : "b.append(\"): \");",
    "info" : "ExpressionStatement[27651-27667]:ExpressionStatement[27754-27770]"
  }, {
    "left" : "b.append(call.returnType);",
    "right" : "b.append(call.returnType);",
    "info" : "ExpressionStatement[27672-27698]:ExpressionStatement[27775-27801]"
  }, {
    "left" : "return b.toString();",
    "right" : "return b.toString();",
    "info" : "ReturnStatement[27703-27723]:ReturnStatement[27806-27826]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27792-27799]:Modifier[27895-27902]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27800-27804]:PrimitiveType[27903-27907]"
  }, {
    "left" : "appendVarArgsString",
    "right" : "appendVarArgsString",
    "info" : "SimpleName[27805-27824]:SimpleName[27908-27927]"
  }, {
    "left" : "StringBuilder builder",
    "right" : "StringBuilder builder",
    "info" : "SingleVariableDeclaration[27825-27846]:SingleVariableDeclaration[27928-27949]"
  }, {
    "left" : "JSType paramType",
    "right" : "JSType paramType",
    "info" : "SingleVariableDeclaration[27848-27864]:SingleVariableDeclaration[27951-27967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27866-28158]:Block[27969-28261]"
  }, {
    "left" : "if (paramType.isUnionType())",
    "right" : "if (paramType.isUnionType())",
    "info" : "IfStatement[27872-28085]:IfStatement[27975-28188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27901-28085]:Block[28004-28188]"
  }, {
    "left" : "paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
    "right" : "paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
    "info" : "ExpressionStatement[27960-28079]:ExpressionStatement[28063-28182]"
  }, {
    "left" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
    "right" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
    "info" : "ExpressionStatement[28090-28154]:ExpressionStatement[28193-28257]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[28354-28363]:MarkerAnnotation[28457-28466]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28366-28372]:Modifier[28469-28475]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[28373-28380]:PrimitiveType[28476-28483]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[28381-28390]:SimpleName[28484-28493]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[28391-28402]:SingleVariableDeclaration[28494-28505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28404-30196]:Block[28507-30299]"
  }, {
    "left" : "if (JSType.isSubtype(this, that))",
    "right" : "if (JSType.isSubtype(this, that))",
    "info" : "IfStatement[28410-28470]:IfStatement[28513-28573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28444-28470]:Block[28547-28573]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[28452-28464]:ReturnStatement[28555-28567]"
  }, {
    "left" : "if (that.isFunctionType())",
    "right" : "if (that.isFunctionType())",
    "info" : "IfStatement[28476-30116]:IfStatement[28579-30219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28503-30116]:Block[28606-30219]"
  }, {
    "left" : "FunctionType other = that.toMaybeFunctionType();",
    "right" : "FunctionType other = that.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[28511-28559]:VariableDeclarationStatement[28614-28662]"
  }, {
    "left" : "if (other.isInterface())",
    "right" : "if (other.isInterface())",
    "info" : "IfStatement[28566-28687]:IfStatement[28669-28790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28591-28687]:Block[28694-28790]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[28667-28679]:ReturnStatement[28770-28782]"
  }, {
    "left" : "if (this.isInterface())",
    "right" : "if (this.isInterface())",
    "info" : "IfStatement[28694-28814]:IfStatement[28797-28917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28718-28814]:Block[28821-28917]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28793-28806]:ReturnStatement[28896-28909]"
  }, {
    "left" : "boolean treatThisTypesAsCovariant =\n        // If either one of these is a ctor, skip 'this' checking.\n        this.isConstructor() || other.isConstructor() ||\n\n        // An interface 'this'-type is non-restrictive.\n        // In practical terms, if C implements I, and I has a method m,\n        // then any m doesn't necessarily have to C#m's 'this'\n        // type doesn't need to match I.\n        (other.typeOfThis.getConstructor() != null &&\n             other.typeOfThis.getConstructor().isInterface()) ||\n\n        // If one of the 'this' types is covariant of the other,\n        // then we'll treat them as covariant (see comment above).\n        other.typeOfThis.isSubtype(this.typeOfThis) ||\n        this.typeOfThis.isSubtype(other.typeOfThis);",
    "right" : "boolean treatThisTypesAsCovariant =\n        // If either one of these is a ctor, skip 'this' checking.\n        this.isConstructor() || other.isConstructor() ||\n\n        // An interface 'this'-type is non-restrictive.\n        // In practical terms, if C implements I, and I has a method m,\n        // then any m doesn't necessarily have to C#m's 'this'\n        // type doesn't need to match I.\n        (other.typeOfThis.getConstructor() != null &&\n             other.typeOfThis.getConstructor().isInterface()) ||\n\n        // If one of the 'this' types is covariant of the other,\n        // then we'll treat them as covariant (see comment above).\n        other.typeOfThis.isSubtype(this.typeOfThis) ||\n        this.typeOfThis.isSubtype(other.typeOfThis);",
    "info" : "VariableDeclarationStatement[29283-30035]:VariableDeclarationStatement[29386-30138]"
  }, {
    "left" : "return treatThisTypesAsCovariant && this.call.isSubtype(other.call);",
    "right" : "return treatThisTypesAsCovariant && this.call.isSubtype(other.call);",
    "info" : "ReturnStatement[30042-30110]:ReturnStatement[30145-30213]"
  }, {
    "left" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
    "right" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
    "info" : "ReturnStatement[30122-30192]:ReturnStatement[30225-30295]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[30200-30209]:MarkerAnnotation[30303-30312]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30212-30218]:Modifier[30315-30321]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[30220-30221]:TypeParameter[30323-30324]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[30223-30224]:SimpleType[30326-30327]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[30225-30230]:SimpleName[30328-30333]"
  }, {
    "left" : "Visitor<T> visitor",
    "right" : "Visitor<T> visitor",
    "info" : "SingleVariableDeclaration[30231-30249]:SingleVariableDeclaration[30334-30352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30251-30299]:Block[30354-30402]"
  }, {
    "left" : "return visitor.caseFunctionType(this);",
    "right" : "return visitor.caseFunctionType(this);",
    "info" : "ReturnStatement[30257-30295]:ReturnStatement[30360-30398]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30482-30488]:Modifier[30585-30591]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[30489-30499]:SimpleType[30592-30602]"
  }, {
    "left" : "getInstanceType",
    "right" : "getInstanceType",
    "info" : "SimpleName[30500-30515]:SimpleName[30603-30618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30518-30595]:Block[30621-30698]"
  }, {
    "left" : "Preconditions.checkState(hasInstanceType());",
    "right" : "Preconditions.checkState(hasInstanceType());",
    "info" : "ExpressionStatement[30524-30568]:ExpressionStatement[30627-30671]"
  }, {
    "left" : "return typeOfThis;",
    "right" : "return typeOfThis;",
    "info" : "ReturnStatement[30573-30591]:ReturnStatement[30676-30694]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30696-30700]:PrimitiveType[30799-30803]"
  }, {
    "left" : "setInstanceType",
    "right" : "setInstanceType",
    "info" : "SimpleName[30701-30716]:SimpleName[30804-30819]"
  }, {
    "left" : "ObjectType instanceType",
    "right" : "ObjectType instanceType",
    "info" : "SingleVariableDeclaration[30717-30740]:SingleVariableDeclaration[30820-30843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30742-30778]:Block[30845-30881]"
  }, {
    "left" : "typeOfThis = instanceType;",
    "right" : "typeOfThis = instanceType;",
    "info" : "ExpressionStatement[30748-30774]:ExpressionStatement[30851-30877]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30856-30862]:Modifier[30959-30965]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30863-30870]:PrimitiveType[30966-30973]"
  }, {
    "left" : "hasInstanceType",
    "right" : "hasInstanceType",
    "info" : "SimpleName[30871-30886]:SimpleName[30974-30989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30889-30939]:Block[30992-31042]"
  }, {
    "left" : "return isConstructor() || isInterface();",
    "right" : "return isConstructor() || isInterface();",
    "info" : "ReturnStatement[30895-30935]:ReturnStatement[30998-31038]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[31008-31017]:MarkerAnnotation[31111-31120]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31020-31026]:Modifier[31123-31129]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[31027-31037]:SimpleType[31130-31140]"
  }, {
    "left" : "getTypeOfThis",
    "right" : "getTypeOfThis",
    "info" : "SimpleName[31038-31051]:SimpleName[31141-31154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31054-31177]:Block[31157-31280]"
  }, {
    "left" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
    "right" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
    "info" : "ReturnStatement[31060-31173]:ReturnStatement[31163-31276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31259-31265]:Modifier[31362-31368]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[31266-31270]:SimpleType[31369-31373]"
  }, {
    "left" : "getSource",
    "right" : "getSource",
    "info" : "SimpleName[31271-31280]:SimpleName[31374-31383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31283-31307]:Block[31386-31410]"
  }, {
    "left" : "return source;",
    "right" : "return source;",
    "info" : "ReturnStatement[31289-31303]:ReturnStatement[31392-31406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31350-31356]:Modifier[31453-31459]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31357-31361]:PrimitiveType[31460-31464]"
  }, {
    "left" : "setSource",
    "right" : "setSource",
    "info" : "SimpleName[31362-31371]:SimpleName[31465-31474]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[31372-31383]:SingleVariableDeclaration[31475-31486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31385-31416]:Block[31488-31519]"
  }, {
    "left" : "this.source = source;",
    "right" : "this.source = source;",
    "info" : "ExpressionStatement[31391-31412]:ExpressionStatement[31494-31515]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31480-31487]:Modifier[31583-31590]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31488-31492]:PrimitiveType[31591-31595]"
  }, {
    "left" : "addSubType",
    "right" : "addSubType",
    "info" : "SimpleName[31493-31503]:SimpleName[31596-31606]"
  }, {
    "left" : "FunctionType subType",
    "right" : "FunctionType subType",
    "info" : "SingleVariableDeclaration[31504-31524]:SingleVariableDeclaration[31607-31627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31526-31631]:Block[31629-31734]"
  }, {
    "left" : "if (subTypes == null)",
    "right" : "if (subTypes == null)",
    "info" : "IfStatement[31532-31600]:IfStatement[31635-31703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31554-31600]:Block[31657-31703]"
  }, {
    "left" : "subTypes = Lists.newArrayList();",
    "right" : "subTypes = Lists.newArrayList();",
    "info" : "ExpressionStatement[31562-31594]:ExpressionStatement[31665-31697]"
  }, {
    "left" : "subTypes.add(subType);",
    "right" : "subTypes.add(subType);",
    "info" : "ExpressionStatement[31605-31627]:ExpressionStatement[31708-31730]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[31635-31644]:MarkerAnnotation[31738-31747]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31647-31653]:Modifier[31750-31756]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31654-31658]:PrimitiveType[31757-31761]"
  }, {
    "left" : "clearCachedValues",
    "right" : "clearCachedValues",
    "info" : "SimpleName[31659-31676]:SimpleName[31762-31779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31679-32046]:Block[31782-32149]"
  }, {
    "left" : "super.clearCachedValues();",
    "right" : "super.clearCachedValues();",
    "info" : "ExpressionStatement[31685-31711]:ExpressionStatement[31788-31814]"
  }, {
    "left" : "if (subTypes != null)",
    "right" : "if (subTypes != null)",
    "info" : "IfStatement[31717-31837]:IfStatement[31820-31940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31739-31837]:Block[31842-31940]"
  }, {
    "left" : "for (FunctionType subType : subTypes)",
    "right" : "for (FunctionType subType : subTypes)",
    "info" : "EnhancedForStatement[31747-31831]:EnhancedForStatement[31850-31934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31785-31831]:Block[31888-31934]"
  }, {
    "left" : "subType.clearCachedValues();",
    "right" : "subType.clearCachedValues();",
    "info" : "ExpressionStatement[31795-31823]:ExpressionStatement[31898-31926]"
  }, {
    "left" : "if (!isNativeObjectType())",
    "right" : "if (!isNativeObjectType())",
    "info" : "IfStatement[31843-32042]:IfStatement[31946-32145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31870-32042]:Block[31973-32145]"
  }, {
    "left" : "if (hasInstanceType())",
    "right" : "if (hasInstanceType())",
    "info" : "IfStatement[31878-31957]:IfStatement[31981-32060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31901-31957]:Block[32004-32060]"
  }, {
    "left" : "getInstanceType().clearCachedValues();",
    "right" : "getInstanceType().clearCachedValues();",
    "info" : "ExpressionStatement[31911-31949]:ExpressionStatement[32014-32052]"
  }, {
    "left" : "if (prototype != null)",
    "right" : "if (prototype != null)",
    "info" : "IfStatement[31965-32036]:IfStatement[32068-32139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31988-32036]:Block[32091-32139]"
  }, {
    "left" : "prototype.clearCachedValues();",
    "right" : "prototype.clearCachedValues();",
    "info" : "ExpressionStatement[31998-32028]:ExpressionStatement[32101-32131]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32251-32257]:Modifier[32354-32360]"
  }, {
    "left" : "List<FunctionType>",
    "right" : "List<FunctionType>",
    "info" : "ParameterizedType[32258-32276]:ParameterizedType[32361-32379]"
  }, {
    "left" : "getSubTypes",
    "right" : "getSubTypes",
    "info" : "SimpleName[32277-32288]:SimpleName[32380-32391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32291-32317]:Block[32394-32420]"
  }, {
    "left" : "return subTypes;",
    "right" : "return subTypes;",
    "info" : "ReturnStatement[32297-32313]:ReturnStatement[32400-32416]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32321-32330]:MarkerAnnotation[32424-32433]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32333-32339]:Modifier[32436-32442]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32340-32347]:PrimitiveType[32443-32450]"
  }, {
    "left" : "hasCachedValues",
    "right" : "hasCachedValues",
    "info" : "SimpleName[32348-32363]:SimpleName[32451-32466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32366-32428]:Block[32469-32531]"
  }, {
    "left" : "return prototype != null || super.hasCachedValues();",
    "right" : "return prototype != null || super.hasCachedValues();",
    "info" : "ReturnStatement[32372-32424]:ReturnStatement[32475-32527]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32478-32484]:Modifier[32581-32587]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[32485-32491]:SimpleType[32588-32594]"
  }, {
    "left" : "getTemplateTypeName",
    "right" : "getTemplateTypeName",
    "info" : "SimpleName[32492-32511]:SimpleName[32595-32614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32514-32548]:Block[32617-32651]"
  }, {
    "left" : "return templateTypeName;",
    "right" : "return templateTypeName;",
    "info" : "ReturnStatement[32520-32544]:ReturnStatement[32623-32647]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[32552-32561]:MarkerAnnotation[32655-32664]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[32564-32570]:SimpleType[32667-32673]"
  }, {
    "left" : "resolveInternal",
    "right" : "resolveInternal",
    "info" : "SimpleName[32571-32586]:SimpleName[32674-32689]"
  }, {
    "left" : "ErrorReporter t",
    "right" : "ErrorReporter t",
    "info" : "SingleVariableDeclaration[32587-32602]:SingleVariableDeclaration[32690-32705]"
  }, {
    "left" : "StaticScope<JSType> scope",
    "right" : "StaticScope<JSType> scope",
    "info" : "SingleVariableDeclaration[32604-32629]:SingleVariableDeclaration[32707-32732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32631-34322]:Block[32734-34425]"
  }, {
    "left" : "setResolvedTypeInternal(this);",
    "right" : "setResolvedTypeInternal(this);",
    "info" : "ExpressionStatement[32637-32667]:ExpressionStatement[32740-32770]"
  }, {
    "left" : "call = (ArrowType) safeResolve(call, t, scope);",
    "right" : "call = (ArrowType) safeResolve(call, t, scope);",
    "info" : "ExpressionStatement[32673-32720]:ExpressionStatement[32776-32823]"
  }, {
    "left" : "prototype = (PrototypeObjectType) safeResolve(prototype, t, scope);",
    "right" : "prototype = (PrototypeObjectType) safeResolve(prototype, t, scope);",
    "info" : "ExpressionStatement[32725-32792]:ExpressionStatement[32828-32895]"
  }, {
    "left" : "JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);",
    "right" : "JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);",
    "info" : "VariableDeclarationStatement[33380-33439]:VariableDeclarationStatement[33483-33542]"
  }, {
    "left" : "if (maybeTypeOfThis != null)",
    "right" : "if (maybeTypeOfThis != null)",
    "info" : "IfStatement[33444-33552]:IfStatement[33547-33655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33473-33552]:Block[33576-33655]"
  }, {
    "left" : "maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();",
    "right" : "maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[33481-33546]:ExpressionStatement[33584-33649]"
  }, {
    "left" : "if (maybeTypeOfThis instanceof ObjectType)",
    "right" : "if (maybeTypeOfThis instanceof ObjectType)",
    "info" : "IfStatement[33557-33656]:IfStatement[33660-33759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33600-33656]:Block[33703-33759]"
  }, {
    "left" : "typeOfThis = (ObjectType) maybeTypeOfThis;",
    "right" : "typeOfThis = (ObjectType) maybeTypeOfThis;",
    "info" : "ExpressionStatement[33608-33650]:ExpressionStatement[33711-33753]"
  }, {
    "left" : "boolean changed = false;",
    "right" : "boolean changed = false;",
    "info" : "VariableDeclarationStatement[33662-33686]:VariableDeclarationStatement[33765-33789]"
  }, {
    "left" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
    "right" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[33691-33778]:VariableDeclarationStatement[33794-33881]"
  }, {
    "left" : "for (ObjectType iface : implementedInterfaces)",
    "right" : "for (ObjectType iface : implementedInterfaces)",
    "info" : "EnhancedForStatement[33783-33996]:EnhancedForStatement[33886-34099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33830-33996]:Block[33933-34099]"
  }, {
    "left" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
    "right" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
    "info" : "VariableDeclarationStatement[33838-33902]:VariableDeclarationStatement[33941-34005]"
  }, {
    "left" : "resolvedInterfaces.add(resolvedIface);",
    "right" : "resolvedInterfaces.add(resolvedIface);",
    "info" : "ExpressionStatement[33909-33947]:ExpressionStatement[34012-34050]"
  }, {
    "left" : "changed |= (resolvedIface != iface);",
    "right" : "changed |= (resolvedIface != iface);",
    "info" : "ExpressionStatement[33954-33990]:ExpressionStatement[34057-34093]"
  }, {
    "left" : "if (changed)",
    "right" : "if (changed)",
    "info" : "IfStatement[34001-34079]:IfStatement[34104-34182]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34014-34079]:Block[34117-34182]"
  }, {
    "left" : "implementedInterfaces = resolvedInterfaces.build();",
    "right" : "implementedInterfaces = resolvedInterfaces.build();",
    "info" : "ExpressionStatement[34022-34073]:ExpressionStatement[34125-34176]"
  }, {
    "left" : "if (subTypes != null)",
    "right" : "if (subTypes != null)",
    "info" : "IfStatement[34085-34273]:IfStatement[34188-34376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34107-34273]:Block[34210-34376]"
  }, {
    "left" : "for (int i = 0; i < subTypes.size(); i++)",
    "right" : "for (int i = 0; i < subTypes.size(); i++)",
    "info" : "ForStatement[34115-34267]:ForStatement[34218-34370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34157-34267]:Block[34260-34370]"
  }, {
    "left" : "subTypes.set(\n            i, JSType.toMaybeFunctionType(subTypes.get(i).resolve(t, scope)));",
    "right" : "subTypes.set(\n            i, JSType.toMaybeFunctionType(subTypes.get(i).resolve(t, scope)));",
    "info" : "ExpressionStatement[34167-34259]:ExpressionStatement[34270-34362]"
  }, {
    "left" : "return super.resolveInternal(t, scope);",
    "right" : "return super.resolveInternal(t, scope);",
    "info" : "ReturnStatement[34279-34318]:ReturnStatement[34382-34421]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[34326-34335]:MarkerAnnotation[34429-34438]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34338-34344]:Modifier[34441-34447]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[34345-34351]:SimpleType[34448-34454]"
  }, {
    "left" : "toDebugHashCodeString",
    "right" : "toDebugHashCodeString",
    "info" : "SimpleName[34352-34373]:SimpleName[34455-34476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34376-35298]:Block[34479-35401]"
  }, {
    "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
    "info" : "IfStatement[34382-34506]:IfStatement[34485-34609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34455-34506]:Block[34558-34609]"
  }, {
    "left" : "return super.toDebugHashCodeString();",
    "right" : "return super.toDebugHashCodeString();",
    "info" : "ReturnStatement[34463-34500]:ReturnStatement[34566-34603]"
  }, {
    "left" : "StringBuilder b = new StringBuilder(32);",
    "right" : "StringBuilder b = new StringBuilder(32);",
    "info" : "VariableDeclarationStatement[34512-34552]:VariableDeclarationStatement[34615-34655]"
  }, {
    "left" : "b.append(\"function (\");",
    "right" : "b.append(\"function (\");",
    "info" : "ExpressionStatement[34557-34580]:ExpressionStatement[34660-34683]"
  }, {
    "left" : "int paramNum = call.parameters.getChildCount();",
    "right" : "int paramNum = call.parameters.getChildCount();",
    "info" : "VariableDeclarationStatement[34585-34632]:VariableDeclarationStatement[34688-34735]"
  }, {
    "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
    "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
    "info" : "VariableDeclarationStatement[34637-34694]:VariableDeclarationStatement[34740-34797]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[34699-34809]:IfStatement[34802-34912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34723-34809]:Block[34826-34912]"
  }, {
    "left" : "b.append(\"this:\");",
    "right" : "b.append(\"this:\");",
    "info" : "ExpressionStatement[34731-34749]:ExpressionStatement[34834-34852]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
    "right" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
    "info" : "ExpressionStatement[34756-34803]:ExpressionStatement[34859-34906]"
  }, {
    "left" : "if (paramNum > 0)",
    "right" : "if (paramNum > 0)",
    "info" : "IfStatement[34814-35173]:IfStatement[34917-35276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34832-35173]:Block[34935-35276]"
  }, {
    "left" : "if (hasKnownTypeOfThis)",
    "right" : "if (hasKnownTypeOfThis)",
    "info" : "IfStatement[34840-34897]:IfStatement[34943-35000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34864-34897]:Block[34967-35000]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[34874-34889]:ExpressionStatement[34977-34992]"
  }, {
    "left" : "Node p = call.parameters.getFirstChild();",
    "right" : "Node p = call.parameters.getFirstChild();",
    "info" : "VariableDeclarationStatement[34904-34945]:VariableDeclarationStatement[35007-35048]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "info" : "ExpressionStatement[34952-35002]:ExpressionStatement[35055-35105]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[35009-35025]:ExpressionStatement[35112-35128]"
  }, {
    "left" : "while (p != null)",
    "right" : "while (p != null)",
    "info" : "WhileStatement[35032-35167]:WhileStatement[35135-35270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35050-35167]:Block[35153-35270]"
  }, {
    "left" : "b.append(\", \");",
    "right" : "b.append(\", \");",
    "info" : "ExpressionStatement[35060-35075]:ExpressionStatement[35163-35178]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
    "info" : "ExpressionStatement[35084-35134]:ExpressionStatement[35187-35237]"
  }, {
    "left" : "p = p.getNext();",
    "right" : "p = p.getNext();",
    "info" : "ExpressionStatement[35143-35159]:ExpressionStatement[35246-35262]"
  }, {
    "left" : "b.append(\")\");",
    "right" : "b.append(\")\");",
    "info" : "ExpressionStatement[35178-35192]:ExpressionStatement[35281-35295]"
  }, {
    "left" : "b.append(\": \");",
    "right" : "b.append(\": \");",
    "info" : "ExpressionStatement[35197-35212]:ExpressionStatement[35300-35315]"
  }, {
    "left" : "b.append(getDebugHashCodeStringOf(call.returnType));",
    "right" : "b.append(getDebugHashCodeStringOf(call.returnType));",
    "info" : "ExpressionStatement[35217-35269]:ExpressionStatement[35320-35372]"
  }, {
    "left" : "return b.toString();",
    "right" : "return b.toString();",
    "info" : "ReturnStatement[35274-35294]:ReturnStatement[35377-35397]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35302-35309]:Modifier[35405-35412]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[35310-35316]:SimpleType[35413-35419]"
  }, {
    "left" : "getDebugHashCodeStringOf",
    "right" : "getDebugHashCodeStringOf",
    "info" : "SimpleName[35317-35341]:SimpleName[35420-35444]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[35342-35353]:SingleVariableDeclaration[35445-35456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35355-35465]:Block[35458-35568]"
  }, {
    "left" : "if (type == this)",
    "right" : "if (type == this)",
    "info" : "IfStatement[35361-35461]:IfStatement[35464-35564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35379-35405]:Block[35482-35508]"
  }, {
    "left" : "return \"me\";",
    "right" : "return \"me\";",
    "info" : "ReturnStatement[35387-35399]:ReturnStatement[35490-35502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35411-35461]:Block[35514-35564]"
  }, {
    "left" : "return type.toDebugHashCodeString();",
    "right" : "return type.toDebugHashCodeString();",
    "info" : "ReturnStatement[35419-35455]:ReturnStatement[35522-35558]"
  } ]
}