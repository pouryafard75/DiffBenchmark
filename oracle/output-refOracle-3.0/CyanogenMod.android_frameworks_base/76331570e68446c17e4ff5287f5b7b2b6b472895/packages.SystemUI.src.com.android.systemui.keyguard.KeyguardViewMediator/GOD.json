{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "KeyguardViewMediator",
      "right" : "KeyguardViewMediator",
      "info" : "TypeDeclaration[3189-66517]:TypeDeclaration[3244-66878]"
    }, {
      "left" : "private static final int KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT = 30000;",
      "right" : "private static final int KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT = 30000;",
      "info" : "FieldDeclaration[5394-5466]:FieldDeclaration[5449-5521]"
    }, {
      "left" : "private static final long KEYGUARD_DONE_PENDING_TIMEOUT_MS = 3000;",
      "right" : "private static final long KEYGUARD_DONE_PENDING_TIMEOUT_MS = 3000;",
      "info" : "FieldDeclaration[5471-5537]:FieldDeclaration[5526-5592]"
    }, {
      "left" : "final static boolean DEBUG = false;",
      "right" : "final static boolean DEBUG = false;",
      "info" : "FieldDeclaration[5543-5578]:FieldDeclaration[5598-5633]"
    }, {
      "left" : "private static final boolean DEBUG_SIM_STATES = KeyguardConstants.DEBUG_SIM_STATES;",
      "right" : "private static final boolean DEBUG_SIM_STATES = KeyguardConstants.DEBUG_SIM_STATES;",
      "info" : "FieldDeclaration[5583-5666]:FieldDeclaration[5638-5721]"
    }, {
      "left" : "private final static boolean DBG_WAKE = false;",
      "right" : "private final static boolean DBG_WAKE = false;",
      "info" : "FieldDeclaration[5671-5717]:FieldDeclaration[5726-5772]"
    }, {
      "left" : "private final static String TAG = \"KeyguardViewMediator\";",
      "right" : "private final static String TAG = \"KeyguardViewMediator\";",
      "info" : "FieldDeclaration[5723-5780]:FieldDeclaration[5778-5835]"
    }, {
      "left" : "private static final String DELAYED_KEYGUARD_ACTION =\n        \"com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD\";",
      "right" : "private static final String DELAYED_KEYGUARD_ACTION =\n        \"com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD\";",
      "info" : "FieldDeclaration[5786-5919]:FieldDeclaration[5841-5974]"
    }, {
      "left" : "private static final String DISMISS_KEYGUARD_SECURELY_ACTION =\n        \"com.android.keyguard.action.DISMISS_KEYGUARD_SECURELY\";",
      "right" : "private static final String DISMISS_KEYGUARD_SECURELY_ACTION =\n        \"com.android.keyguard.action.DISMISS_KEYGUARD_SECURELY\";",
      "info" : "FieldDeclaration[5925-6052]:FieldDeclaration[5980-6107]"
    }, {
      "left" : "private static final String KEYGUARD_SERVICE_ACTION_STATE_CHANGE =\n            \"com.android.internal.action.KEYGUARD_SERVICE_STATE_CHANGED\";",
      "right" : "private static final String KEYGUARD_SERVICE_ACTION_STATE_CHANGE =\n            \"com.android.internal.action.KEYGUARD_SERVICE_STATE_CHANGED\";",
      "info" : "FieldDeclaration[6058-6198]:FieldDeclaration[6113-6253]"
    }, {
      "left" : "private static final String KEYGUARD_SERVICE_EXTRA_ACTIVE = \"active\";",
      "right" : "private static final String KEYGUARD_SERVICE_EXTRA_ACTIVE = \"active\";",
      "info" : "FieldDeclaration[6203-6272]:FieldDeclaration[6258-6327]"
    }, {
      "left" : "private static final int SHOW = 2;",
      "right" : "private static final int SHOW = 2;",
      "info" : "FieldDeclaration[6311-6345]:FieldDeclaration[6366-6400]"
    }, {
      "left" : "private static final int HIDE = 3;",
      "right" : "private static final int HIDE = 3;",
      "info" : "FieldDeclaration[6350-6384]:FieldDeclaration[6405-6439]"
    }, {
      "left" : "private static final int RESET = 4;",
      "right" : "private static final int RESET = 4;",
      "info" : "FieldDeclaration[6389-6424]:FieldDeclaration[6444-6479]"
    }, {
      "left" : "private static final int VERIFY_UNLOCK = 5;",
      "right" : "private static final int VERIFY_UNLOCK = 5;",
      "info" : "FieldDeclaration[6429-6472]:FieldDeclaration[6484-6527]"
    }, {
      "left" : "private static final int NOTIFY_SCREEN_OFF = 6;",
      "right" : "private static final int NOTIFY_SCREEN_OFF = 6;",
      "info" : "FieldDeclaration[6477-6524]:FieldDeclaration[6532-6579]"
    }, {
      "left" : "private static final int NOTIFY_SCREEN_ON = 7;",
      "right" : "private static final int NOTIFY_SCREEN_ON = 7;",
      "info" : "FieldDeclaration[6529-6575]:FieldDeclaration[6584-6630]"
    }, {
      "left" : "private static final int KEYGUARD_DONE = 9;",
      "right" : "private static final int KEYGUARD_DONE = 9;",
      "info" : "FieldDeclaration[6580-6623]:FieldDeclaration[6635-6678]"
    }, {
      "left" : "private static final int KEYGUARD_DONE_DRAWING = 10;",
      "right" : "private static final int KEYGUARD_DONE_DRAWING = 10;",
      "info" : "FieldDeclaration[6628-6680]:FieldDeclaration[6683-6735]"
    }, {
      "left" : "private static final int KEYGUARD_DONE_AUTHENTICATING = 11;",
      "right" : "private static final int KEYGUARD_DONE_AUTHENTICATING = 11;",
      "info" : "FieldDeclaration[6685-6744]:FieldDeclaration[6740-6799]"
    }, {
      "left" : "private static final int SET_OCCLUDED = 12;",
      "right" : "private static final int SET_OCCLUDED = 12;",
      "info" : "FieldDeclaration[6749-6792]:FieldDeclaration[6804-6847]"
    }, {
      "left" : "private static final int KEYGUARD_TIMEOUT = 13;",
      "right" : "private static final int KEYGUARD_TIMEOUT = 13;",
      "info" : "FieldDeclaration[6797-6844]:FieldDeclaration[6852-6899]"
    }, {
      "left" : "private static final int DISMISS = 17;",
      "right" : "private static final int DISMISS = 17;",
      "info" : "FieldDeclaration[6849-6887]:FieldDeclaration[6904-6942]"
    }, {
      "left" : "private static final int START_KEYGUARD_EXIT_ANIM = 18;",
      "right" : "private static final int START_KEYGUARD_EXIT_ANIM = 18;",
      "info" : "FieldDeclaration[6892-6947]:FieldDeclaration[6947-7002]"
    }, {
      "left" : "private static final int ON_ACTIVITY_DRAWN = 19;",
      "right" : "private static final int ON_ACTIVITY_DRAWN = 19;",
      "info" : "FieldDeclaration[6952-7000]:FieldDeclaration[7007-7055]"
    }, {
      "left" : "private static final int KEYGUARD_DONE_PENDING_TIMEOUT = 20;",
      "right" : "private static final int KEYGUARD_DONE_PENDING_TIMEOUT = 20;",
      "info" : "FieldDeclaration[7005-7065]:FieldDeclaration[7060-7120]"
    }, {
      "left" : "public static final int AWAKE_INTERVAL_DEFAULT_MS = 10000;",
      "right" : "public static final int AWAKE_INTERVAL_DEFAULT_MS = 10000;",
      "info" : "FieldDeclaration[7071-7218]:FieldDeclaration[7126-7273]"
    }, {
      "left" : "private static final int KEYGUARD_LOCK_AFTER_DELAY_DEFAULT = 5000;",
      "right" : "private static final int KEYGUARD_LOCK_AFTER_DELAY_DEFAULT = 5000;",
      "info" : "FieldDeclaration[7224-7516]:FieldDeclaration[7279-7571]"
    }, {
      "left" : "private static final int KEYGUARD_DONE_DRAWING_TIMEOUT_MS = 2000;",
      "right" : "private static final int KEYGUARD_DONE_DRAWING_TIMEOUT_MS = 2000;",
      "info" : "FieldDeclaration[7522-7810]:FieldDeclaration[7577-7865]"
    }, {
      "left" : "private static final String KEYGUARD_ANALYTICS_SETTING = \"keyguard_analytics\";",
      "right" : "private static final String KEYGUARD_ANALYTICS_SETTING = \"keyguard_analytics\";",
      "info" : "FieldDeclaration[7816-7981]:FieldDeclaration[7871-8036]"
    }, {
      "left" : "private int mMasterStreamType;",
      "right" : "private int mMasterStreamType;",
      "info" : "FieldDeclaration[7987-8078]:FieldDeclaration[8042-8133]"
    }, {
      "left" : "private AlarmManager mAlarmManager;",
      "right" : "private AlarmManager mAlarmManager;",
      "info" : "FieldDeclaration[8084-8119]:FieldDeclaration[8139-8174]"
    }, {
      "left" : "private AudioManager mAudioManager;",
      "right" : "private AudioManager mAudioManager;",
      "info" : "FieldDeclaration[8124-8159]:FieldDeclaration[8179-8214]"
    }, {
      "left" : "private StatusBarManager mStatusBarManager;",
      "right" : "private StatusBarManager mStatusBarManager;",
      "info" : "FieldDeclaration[8164-8207]:FieldDeclaration[8219-8262]"
    }, {
      "left" : "private boolean mSwitchingUser;",
      "right" : "private boolean mSwitchingUser;",
      "info" : "FieldDeclaration[8212-8243]:FieldDeclaration[8267-8298]"
    }, {
      "left" : "private ProfileManager mProfileManager;",
      "right" : "private ProfileManager mProfileManager;",
      "info" : "FieldDeclaration[8248-8287]:FieldDeclaration[8303-8342]"
    }, {
      "left" : "private boolean mSystemReady;",
      "right" : "private boolean mSystemReady;",
      "info" : "FieldDeclaration[8292-8321]:FieldDeclaration[8347-8376]"
    }, {
      "left" : "private boolean mBootCompleted;",
      "right" : "private boolean mBootCompleted;",
      "info" : "FieldDeclaration[8326-8357]:FieldDeclaration[8381-8412]"
    }, {
      "left" : "private boolean mBootSendUserPresent;",
      "right" : "private boolean mBootSendUserPresent;",
      "info" : "FieldDeclaration[8362-8399]:FieldDeclaration[8417-8454]"
    }, {
      "left" : "private boolean mSuppressNextLockSound = true;",
      "right" : "private boolean mSuppressNextLockSound = true;",
      "info" : "FieldDeclaration[8545-8591]:FieldDeclaration[8600-8646]"
    }, {
      "left" : "private PowerManager mPM;",
      "right" : "private PowerManager mPM;",
      "info" : "FieldDeclaration[8598-8687]:FieldDeclaration[8653-8742]"
    }, {
      "left" : "private IWindowManager mWM;",
      "right" : "private IWindowManager mWM;",
      "info" : "FieldDeclaration[8693-8805]:FieldDeclaration[8748-8860]"
    }, {
      "left" : "private TrustManager mTrustManager;",
      "right" : "private TrustManager mTrustManager;",
      "info" : "FieldDeclaration[8812-8917]:FieldDeclaration[8867-8972]"
    }, {
      "left" : "private SearchManager mSearchManager;",
      "right" : "private SearchManager mSearchManager;",
      "info" : "FieldDeclaration[8923-9046]:FieldDeclaration[8978-9101]"
    }, {
      "left" : "private PowerManager.WakeLock mShowKeyguardWakeLock;",
      "right" : "private PowerManager.WakeLock mShowKeyguardWakeLock;",
      "info" : "FieldDeclaration[9052-9227]:FieldDeclaration[9107-9282]"
    }, {
      "left" : "private StatusBarKeyguardViewManager mStatusBarKeyguardViewManager;",
      "right" : "private StatusBarKeyguardViewManager mStatusBarKeyguardViewManager;",
      "info" : "FieldDeclaration[9233-9300]:FieldDeclaration[9288-9355]"
    }, {
      "left" : "private boolean mExternallyEnabled = true;",
      "right" : "private boolean mExternallyEnabled = true;",
      "info" : "FieldDeclaration[9357-9494]:FieldDeclaration[9412-9549]"
    }, {
      "left" : "private boolean mNeedToReshowWhenReenabled = false;",
      "right" : "private boolean mNeedToReshowWhenReenabled = false;",
      "info" : "FieldDeclaration[9500-9792]:FieldDeclaration[9555-9847]"
    }, {
      "left" : "private boolean mShowing;",
      "right" : "private boolean mShowing;",
      "info" : "FieldDeclaration[9928-9953]:FieldDeclaration[9983-10008]"
    }, {
      "left" : "private boolean mInputRestricted;",
      "right" : "private boolean mInputRestricted;",
      "info" : "FieldDeclaration[9959-10038]:FieldDeclaration[10014-10093]"
    }, {
      "left" : "private boolean mOccluded = false;",
      "right" : "private boolean mOccluded = false;",
      "info" : "FieldDeclaration[10100-10134]:FieldDeclaration[10155-10189]"
    }, {
      "left" : "private int mDelayedShowingSequence;",
      "right" : "private int mDelayedShowingSequence;",
      "info" : "FieldDeclaration[10140-10340]:FieldDeclaration[10195-10395]"
    }, {
      "left" : "private IKeyguardExitCallback mExitSecureCallback;",
      "right" : "private IKeyguardExitCallback mExitSecureCallback;",
      "info" : "FieldDeclaration[10346-10651]:FieldDeclaration[10401-10706]"
    }, {
      "left" : "private KeyguardUpdateMonitor mUpdateMonitor;",
      "right" : "private KeyguardUpdateMonitor mUpdateMonitor;",
      "info" : "FieldDeclaration[10696-10741]:FieldDeclaration[10751-10796]"
    }, {
      "left" : "private boolean mScreenOn;",
      "right" : "private boolean mScreenOn;",
      "info" : "FieldDeclaration[10747-10773]:FieldDeclaration[10802-10828]"
    }, {
      "left" : "private boolean mDismissSecurelyOnScreenOn = false;",
      "right" : "private boolean mDismissSecurelyOnScreenOn = false;",
      "info" : "FieldDeclaration[10779-10830]:FieldDeclaration[10834-10885]"
    }, {
      "left" : "private String mPhoneState = TelephonyManager.EXTRA_STATE_IDLE;",
      "right" : "private String mPhoneState = TelephonyManager.EXTRA_STATE_IDLE;",
      "info" : "FieldDeclaration[10887-10950]:FieldDeclaration[10942-11005]"
    }, {
      "left" : "private boolean mHiding;",
      "right" : "private boolean mHiding;",
      "info" : "FieldDeclaration[10956-11107]:FieldDeclaration[11011-11162]"
    }, {
      "left" : "private boolean mInternallyDisabled = false;",
      "right" : "private boolean mInternallyDisabled = false;",
      "info" : "FieldDeclaration[11113-11232]:FieldDeclaration[11168-11287]"
    }, {
      "left" : "private boolean mKeyguardBound;",
      "right" : "private boolean mKeyguardBound;",
      "info" : "FieldDeclaration[11238-11337]:FieldDeclaration[11293-11392]"
    }, {
      "left" : "private static final Intent USER_PRESENT_INTENT = new Intent(Intent.ACTION_USER_PRESENT)\n            .addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING\n                    | Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);",
      "right" : "private static final Intent USER_PRESENT_INTENT = new Intent(Intent.ACTION_USER_PRESENT)\n            .addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING\n                    | Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);",
      "info" : "FieldDeclaration[11343-11638]:FieldDeclaration[11398-11693]"
    }, {
      "left" : "private boolean mWaitingUntilKeyguardVisible = false;",
      "right" : "private boolean mWaitingUntilKeyguardVisible = false;",
      "info" : "FieldDeclaration[11644-11811]:FieldDeclaration[11699-11866]"
    }, {
      "left" : "private LockPatternUtils mLockPatternUtils;",
      "right" : "private LockPatternUtils mLockPatternUtils;",
      "info" : "FieldDeclaration[11816-11859]:FieldDeclaration[11871-11914]"
    }, {
      "left" : "private boolean mKeyguardDonePending = false;",
      "right" : "private boolean mKeyguardDonePending = false;",
      "info" : "FieldDeclaration[11864-11909]:FieldDeclaration[11919-11964]"
    }, {
      "left" : "private boolean mHideAnimationRun = false;",
      "right" : "private boolean mHideAnimationRun = false;",
      "info" : "FieldDeclaration[11914-11956]:FieldDeclaration[11969-12011]"
    }, {
      "left" : "private SoundPool mLockSounds;",
      "right" : "private SoundPool mLockSounds;",
      "info" : "FieldDeclaration[11962-11992]:FieldDeclaration[12017-12047]"
    }, {
      "left" : "private int mLockSoundId;",
      "right" : "private int mLockSoundId;",
      "info" : "FieldDeclaration[11997-12022]:FieldDeclaration[12052-12077]"
    }, {
      "left" : "private int mUnlockSoundId;",
      "right" : "private int mUnlockSoundId;",
      "info" : "FieldDeclaration[12027-12054]:FieldDeclaration[12082-12109]"
    }, {
      "left" : "private int mTrustedSoundId;",
      "right" : "private int mTrustedSoundId;",
      "info" : "FieldDeclaration[12059-12087]:FieldDeclaration[12114-12142]"
    }, {
      "left" : "private int mLockSoundStreamId;",
      "right" : "private int mLockSoundStreamId;",
      "info" : "FieldDeclaration[12092-12123]:FieldDeclaration[12147-12178]"
    }, {
      "left" : "private Animation mHideAnimation;",
      "right" : "private Animation mHideAnimation;",
      "info" : "FieldDeclaration[12129-12324]:FieldDeclaration[12184-12379]"
    }, {
      "left" : "private float mLockSoundVolume;",
      "right" : "private float mLockSoundVolume;",
      "info" : "FieldDeclaration[12330-12430]:FieldDeclaration[12385-12485]"
    }, {
      "left" : "private KeyguardDisplayManager mKeyguardDisplayManager;",
      "right" : "private KeyguardDisplayManager mKeyguardDisplayManager;",
      "info" : "FieldDeclaration[12436-12545]:FieldDeclaration[12491-12600]"
    }, {
      "left" : "private final ArrayList<IKeyguardStateCallback> mKeyguardStateCallbacks = new ArrayList<>();",
      "right" : "private final ArrayList<IKeyguardStateCallback> mKeyguardStateCallbacks = new ArrayList<>();",
      "info" : "FieldDeclaration[12551-12643]:FieldDeclaration[12606-12698]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback mUpdateCallback = new KeyguardUpdateMonitorCallback() {\n\n        @Override\n        public void onUserSwitching(int userId) {\n            // Note that the mLockPatternUtils user has already been updated from setCurrentUser.\n            // We need to force a reset of the views, since lockNow (called by\n            // ActivityManagerService) will not reconstruct the keyguard if it is already showing.\n            synchronized (KeyguardViewMediator.this) {\n                mSwitchingUser = true;\n                resetKeyguardDonePendingLocked();\n                resetStateLocked();\n                adjustStatusBarLocked();\n                // When we switch users we want to bring the new user to the biometric unlock even\n                // if the current user has gone to the backup.\n                KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);\n            }\n        }\n\n        @Override\n        public void onUserSwitchComplete(int userId) {\n            mSwitchingUser = false;\n            if (userId != UserHandle.USER_OWNER) {\n                UserInfo info = UserManager.get(mContext).getUserInfo(userId);\n                if (info != null && info.isGuest()) {\n                    // If we just switched to a guest, try to dismiss keyguard.\n                    dismiss();\n                }\n            }\n        }\n\n        @Override\n        public void onUserRemoved(int userId) {\n            mLockPatternUtils.removeUser(userId);\n            MultiUserAvatarCache.getInstance().clear(userId);\n        }\n\n        @Override\n        public void onUserInfoChanged(int userId) {\n            MultiUserAvatarCache.getInstance().clear(userId);\n        }\n\n        @Override\n        public void onPhoneStateChanged(int phoneState) {\n            synchronized (KeyguardViewMediator.this) {\n                if (TelephonyManager.CALL_STATE_IDLE == phoneState  // call ending\n                        && !mScreenOn                           // screen off\n                        && mExternallyEnabled) {                // not disabled by any app\n\n                    // note: this is a way to gracefully reenable the keyguard when the call\n                    // ends and the screen is off without always reenabling the keyguard\n                    // each time the screen turns off while in call (and having an occasional ugly\n                    // flicker while turning back on the screen and disabling the keyguard again).\n                    if (DEBUG) Log.d(TAG, \"screen is off and call ended, let's make sure the \"\n                            + \"keyguard is showing\");\n                    doKeyguardLocked(null);\n                }\n            }\n        }\n\n        @Override\n        public void onClockVisibilityChanged() {\n            adjustStatusBarLocked();\n        }\n\n        @Override\n        public void onDeviceProvisioned() {\n            sendUserPresentBroadcast();\n            updateInputRestricted();\n        }\n\n        @Override\n        public void onSimStateChanged(int subId, int slotId, IccCardConstants.State simState) {\n            if (DEBUG) Log.d(TAG, \"onSimStateChangedUsingSubId: \" + simState + \", subId=\" + subId);\n\n            try {\n                int size = mKeyguardStateCallbacks.size();\n                boolean simPinSecure = mUpdateMonitor.isSimPinSecure();\n                for (int i = 0; i < size; i++) {\n                    mKeyguardStateCallbacks.get(i).onSimSecureStateChanged(simPinSecure);\n                }\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Failed to call onSimSecureStateChanged\", e);\n            }\n\n            switch (simState) {\n                case NOT_READY:\n                case ABSENT:\n                    // only force lock screen in case of missing sim if user hasn't\n                    // gone through setup wizard\n                    synchronized (this) {\n                        if (shouldWaitForProvisioning()) {\n                            if (!isShowing()) {\n                                if (DEBUG) Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");\n                                doKeyguardLocked(null);\n                            } else {\n                                resetStateLocked();\n                            }\n                        }\n                    }\n                    break;\n                case PIN_REQUIRED:\n                case PUK_REQUIRED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");\n                            doKeyguardLocked(null);\n                        } else {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case PERM_DISABLED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");\n                            doKeyguardLocked(null);\n                        } else {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case READY:\n                    synchronized (this) {\n                        if (mInternallyDisabled) {\n                            hideLocked();\n                        } else if (isShowing()) {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                default:\n                    if (DEBUG_SIM_STATES) Log.v(TAG, \"Ignoring state: \" + simState);\n                    break;\n            }\n        }\n\n        public void onFingerprintRecognized(int userId) {\n            mViewMediatorCallback.keyguardDone(true);\n        };\n\n        @Override\n        public void onFingerprintAttemptFailed() {\n            if (mUpdateMonitor.isMaxFingerprintAttemptsReached()\n                    && !mStatusBarKeyguardViewManager.isBouncerShowing()) {\n                mStatusBarKeyguardViewManager.showBouncerHideNotifications();\n            }\n            userActivity();\n        }\n    };",
      "right" : "KeyguardUpdateMonitorCallback mUpdateCallback = new KeyguardUpdateMonitorCallback() {\n\n        @Override\n        public void onUserSwitching(int userId) {\n            // Note that the mLockPatternUtils user has already been updated from setCurrentUser.\n            // We need to force a reset of the views, since lockNow (called by\n            // ActivityManagerService) will not reconstruct the keyguard if it is already showing.\n            synchronized (KeyguardViewMediator.this) {\n                mSwitchingUser = true;\n                resetKeyguardDonePendingLocked();\n                resetStateLocked();\n                adjustStatusBarLocked();\n                // When we switch users we want to bring the new user to the biometric unlock even\n                // if the current user has gone to the backup.\n                KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);\n            }\n        }\n\n        @Override\n        public void onUserSwitchComplete(int userId) {\n            mSwitchingUser = false;\n            if (userId != UserHandle.USER_OWNER) {\n                UserInfo info = UserManager.get(mContext).getUserInfo(userId);\n                if (info != null && info.isGuest()) {\n                    // If we just switched to a guest, try to dismiss keyguard.\n                    dismiss();\n                }\n            }\n        }\n\n        @Override\n        public void onUserRemoved(int userId) {\n            mLockPatternUtils.removeUser(userId);\n            MultiUserAvatarCache.getInstance().clear(userId);\n        }\n\n        @Override\n        public void onUserInfoChanged(int userId) {\n            MultiUserAvatarCache.getInstance().clear(userId);\n        }\n\n        @Override\n        public void onPhoneStateChanged(int phoneState) {\n            synchronized (KeyguardViewMediator.this) {\n                if (TelephonyManager.CALL_STATE_IDLE == phoneState  // call ending\n                        && !mScreenOn                           // screen off\n                        && mExternallyEnabled) {                // not disabled by any app\n\n                    // note: this is a way to gracefully reenable the keyguard when the call\n                    // ends and the screen is off without always reenabling the keyguard\n                    // each time the screen turns off while in call (and having an occasional ugly\n                    // flicker while turning back on the screen and disabling the keyguard again).\n                    if (DEBUG) Log.d(TAG, \"screen is off and call ended, let's make sure the \"\n                            + \"keyguard is showing\");\n                    doKeyguardLocked(null);\n                }\n            }\n        }\n\n        @Override\n        public void onClockVisibilityChanged() {\n            adjustStatusBarLocked();\n        }\n\n        @Override\n        public void onDeviceProvisioned() {\n            sendUserPresentBroadcast();\n            updateInputRestricted();\n        }\n\n        @Override\n        public void onSimStateChanged(int subId, int slotId, IccCardConstants.State simState) {\n            if (DEBUG) Log.d(TAG, \"onSimStateChangedUsingSubId: \" + simState + \", subId=\" + subId);\n\n            try {\n                int size = mKeyguardStateCallbacks.size();\n                boolean simPinSecure = mUpdateMonitor.isSimPinSecure();\n                for (int i = 0; i < size; i++) {\n                    mKeyguardStateCallbacks.get(i).onSimSecureStateChanged(simPinSecure);\n                }\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Failed to call onSimSecureStateChanged\", e);\n            }\n\n            switch (simState) {\n                case NOT_READY:\n                case ABSENT:\n                    // only force lock screen in case of missing sim if user hasn't\n                    // gone through setup wizard\n                    synchronized (this) {\n                        if (shouldWaitForProvisioning()) {\n                            if (!isShowing()) {\n                                if (DEBUG) Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");\n                                doKeyguardLocked(null);\n                            } else {\n                                resetStateLocked();\n                            }\n                        }\n                    }\n                    break;\n                case PIN_REQUIRED:\n                case PUK_REQUIRED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");\n                            doKeyguardLocked(null);\n                        } else {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case PERM_DISABLED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");\n                            doKeyguardLocked(null);\n                        } else {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case READY:\n                    synchronized (this) {\n                        if (mInternallyDisabled) {\n                            hideLocked();\n                        } else if (isShowing()) {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                default:\n                    if (DEBUG_SIM_STATES) Log.v(TAG, \"Ignoring state: \" + simState);\n                    break;\n            }\n        }\n\n        public void onFingerprintRecognized(int userId) {\n            mViewMediatorCallback.keyguardDone(true);\n        };\n\n        @Override\n        public void onFingerprintAttemptFailed() {\n            if (mUpdateMonitor.isMaxFingerprintAttemptsReached()\n                    && !mStatusBarKeyguardViewManager.isBouncerShowing()) {\n                mStatusBarKeyguardViewManager.showBouncerHideNotifications();\n            }\n            userActivity();\n        }\n    };",
      "info" : "FieldDeclaration[12649-19313]:FieldDeclaration[12704-19368]"
    }, {
      "left" : "public void onUserSwitching(int userId)",
      "right" : "public void onUserSwitching(int userId)",
      "info" : "MethodDeclaration[12744-13579]:MethodDeclaration[12799-13634]"
    }, {
      "left" : "public void onUserSwitchComplete(int userId)",
      "right" : "public void onUserSwitchComplete(int userId)",
      "info" : "MethodDeclaration[13589-14026]:MethodDeclaration[13644-14081]"
    }, {
      "left" : "public void onUserRemoved(int userId)",
      "right" : "public void onUserRemoved(int userId)",
      "info" : "MethodDeclaration[14036-14215]:MethodDeclaration[14091-14270]"
    }, {
      "left" : "public void onUserInfoChanged(int userId)",
      "right" : "public void onUserInfoChanged(int userId)",
      "info" : "MethodDeclaration[14225-14358]:MethodDeclaration[14280-14413]"
    }, {
      "left" : "public void onPhoneStateChanged(int phoneState)",
      "right" : "public void onPhoneStateChanged(int phoneState)",
      "info" : "MethodDeclaration[14368-15358]:MethodDeclaration[14423-15413]"
    }, {
      "left" : "public void onClockVisibilityChanged()",
      "right" : "public void onClockVisibilityChanged()",
      "info" : "MethodDeclaration[15368-15473]:MethodDeclaration[15423-15528]"
    }, {
      "left" : "public void onDeviceProvisioned()",
      "right" : "public void onDeviceProvisioned()",
      "info" : "MethodDeclaration[15483-15623]:MethodDeclaration[15538-15678]"
    }, {
      "left" : "public void onSimStateChanged(int subId, int slotId, IccCardConstants.State simState)",
      "right" : "public void onSimStateChanged(int subId, int slotId, IccCardConstants.State simState)",
      "info" : "MethodDeclaration[15633-18841]:MethodDeclaration[15688-18896]"
    }, {
      "left" : "public void onFingerprintRecognized(int userId)",
      "right" : "public void onFingerprintRecognized(int userId)",
      "info" : "MethodDeclaration[18851-18964]:MethodDeclaration[18906-19019]"
    }, {
      "left" : "public void onFingerprintAttemptFailed()",
      "right" : "public void onFingerprintAttemptFailed()",
      "info" : "MethodDeclaration[18975-19306]:MethodDeclaration[19030-19361]"
    }, {
      "left" : "ViewMediatorCallback mViewMediatorCallback = new ViewMediatorCallback() {\n\n        public void userActivity() {\n            KeyguardViewMediator.this.userActivity();\n        }\n\n        public void keyguardDone(boolean authenticated) {\n            if (!mKeyguardDonePending) {\n                KeyguardViewMediator.this.keyguardDone(authenticated, true);\n            }\n        }\n\n        public void keyguardDoneDrawing() {\n            mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);\n        }\n\n        @Override\n        public void setNeedsInput(boolean needsInput) {\n            mStatusBarKeyguardViewManager.setNeedsInput(needsInput);\n        }\n\n        @Override\n        public void onUserActivityTimeoutChanged() {\n            mStatusBarKeyguardViewManager.updateUserActivityTimeout();\n        }\n\n        @Override\n        public void keyguardDonePending() {\n            mKeyguardDonePending = true;\n            mHideAnimationRun = true;\n            mStatusBarKeyguardViewManager.startPreHideAnimation(null );\n            mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_PENDING_TIMEOUT,\n                    KEYGUARD_DONE_PENDING_TIMEOUT_MS);\n        }\n\n        @Override\n        public void keyguardGone() {\n            mKeyguardDisplayManager.hide();\n        }\n\n        @Override\n        public void readyForKeyguardDone() {\n            if (mKeyguardDonePending) {\n                // Somebody has called keyguardDonePending before, which means that we are\n                // authenticated\n                KeyguardViewMediator.this.keyguardDone(true , true );\n            }\n        }\n\n        @Override\n        public void playTrustedSound() {\n            KeyguardViewMediator.this.playTrustedSound();\n        }\n\n        @Override\n        public boolean isInputRestricted() {\n            return KeyguardViewMediator.this.isInputRestricted();\n        }\n    };",
      "right" : "ViewMediatorCallback mViewMediatorCallback = new ViewMediatorCallback() {\n\n        public void userActivity() {\n            KeyguardViewMediator.this.userActivity();\n        }\n\n        public void keyguardDone(boolean authenticated) {\n            if (!mKeyguardDonePending) {\n                KeyguardViewMediator.this.keyguardDone(authenticated, true);\n            }\n        }\n\n        public void keyguardDoneDrawing() {\n            mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);\n        }\n\n        @Override\n        public void setNeedsInput(boolean needsInput) {\n            mStatusBarKeyguardViewManager.setNeedsInput(needsInput);\n        }\n\n        @Override\n        public void onUserActivityTimeoutChanged() {\n            mStatusBarKeyguardViewManager.updateUserActivityTimeout();\n        }\n\n        @Override\n        public void keyguardDonePending() {\n            mKeyguardDonePending = true;\n            mHideAnimationRun = true;\n            mStatusBarKeyguardViewManager.startPreHideAnimation(null );\n            mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_PENDING_TIMEOUT,\n                    KEYGUARD_DONE_PENDING_TIMEOUT_MS);\n        }\n\n        @Override\n        public void keyguardGone() {\n            mKeyguardDisplayManager.hide();\n        }\n\n        @Override\n        public void readyForKeyguardDone() {\n            if (mKeyguardDonePending) {\n                // Somebody has called keyguardDonePending before, which means that we are\n                // authenticated\n                KeyguardViewMediator.this.keyguardDone(true , true );\n            }\n        }\n\n        @Override\n        public void playTrustedSound() {\n            KeyguardViewMediator.this.playTrustedSound();\n        }\n\n        @Override\n        public boolean isInputRestricted() {\n            return KeyguardViewMediator.this.isInputRestricted();\n        }\n    };",
      "info" : "FieldDeclaration[19319-21232]:FieldDeclaration[19374-21287]"
    }, {
      "left" : "public void userActivity()",
      "right" : "public void userActivity()",
      "info" : "MethodDeclaration[19402-19494]:MethodDeclaration[19457-19549]"
    }, {
      "left" : "public void keyguardDone(boolean authenticated)",
      "right" : "public void keyguardDone(boolean authenticated)",
      "info" : "MethodDeclaration[19504-19695]:MethodDeclaration[19559-19750]"
    }, {
      "left" : "public void keyguardDoneDrawing()",
      "right" : "public void keyguardDoneDrawing()",
      "info" : "MethodDeclaration[19705-19812]:MethodDeclaration[19760-19867]"
    }, {
      "left" : "public void setNeedsInput(boolean needsInput)",
      "right" : "public void setNeedsInput(boolean needsInput)",
      "info" : "MethodDeclaration[19822-19966]:MethodDeclaration[19877-20021]"
    }, {
      "left" : "public void onUserActivityTimeoutChanged()",
      "right" : "public void onUserActivityTimeoutChanged()",
      "info" : "MethodDeclaration[19976-20119]:MethodDeclaration[20031-20174]"
    }, {
      "left" : "public void keyguardDonePending()",
      "right" : "public void keyguardDonePending()",
      "info" : "MethodDeclaration[20129-20494]:MethodDeclaration[20184-20549]"
    }, {
      "left" : "public void keyguardGone()",
      "right" : "public void keyguardGone()",
      "info" : "MethodDeclaration[20504-20604]:MethodDeclaration[20559-20659]"
    }, {
      "left" : "public void readyForKeyguardDone()",
      "right" : "public void readyForKeyguardDone()",
      "info" : "MethodDeclaration[20614-20957]:MethodDeclaration[20669-21012]"
    }, {
      "left" : "public void playTrustedSound()",
      "right" : "public void playTrustedSound()",
      "info" : "MethodDeclaration[20967-21085]:MethodDeclaration[21022-21140]"
    }, {
      "left" : "public boolean isInputRestricted()",
      "right" : "public boolean isInputRestricted()",
      "info" : "MethodDeclaration[21095-21225]:MethodDeclaration[21150-21280]"
    }, {
      "left" : "public void userActivity()",
      "right" : "public void userActivity()",
      "info" : "MethodDeclaration[21238-21333]:MethodDeclaration[21293-21388]"
    }, {
      "left" : "private void setupLocked()",
      "right" : "private void setupLocked()",
      "info" : "MethodDeclaration[21339-24560]:MethodDeclaration[21394-24615]"
    }, {
      "left" : "public void start()",
      "right" : "public void start()",
      "info" : "MethodDeclaration[24566-24730]:MethodDeclaration[24621-24785]"
    }, {
      "left" : "public void onSystemReady()",
      "right" : "public void onSystemReady()",
      "info" : "MethodDeclaration[24736-26394]:MethodDeclaration[24791-26449]"
    }, {
      "left" : "public void onScreenTurnedOff(int why)",
      "right" : "public void onScreenTurnedOff(int why)",
      "info" : "MethodDeclaration[26400-28352]:MethodDeclaration[26455-28407]"
    }, {
      "left" : "private void doKeyguardLaterLocked()",
      "right" : "private void doKeyguardLaterLocked()",
      "info" : "MethodDeclaration[28358-30484]:MethodDeclaration[28413-30539]"
    }, {
      "left" : "private void cancelDoKeyguardLaterLocked()",
      "right" : "private void cancelDoKeyguardLaterLocked()",
      "info" : "MethodDeclaration[30490-30575]:MethodDeclaration[30545-30630]"
    }, {
      "left" : "public void onScreenTurnedOn(IKeyguardShowCallback callback)",
      "right" : "public void onScreenTurnedOn(IKeyguardShowCallback callback)",
      "info" : "MethodDeclaration[30581-31270]:MethodDeclaration[30636-31325]"
    }, {
      "left" : "private void maybeSendUserPresentBroadcast()",
      "right" : "private void maybeSendUserPresentBroadcast()",
      "info" : "MethodDeclaration[31276-31633]:MethodDeclaration[31331-31688]"
    }, {
      "left" : "private boolean isKeyguardDisabled()",
      "right" : "private boolean isKeyguardDisabled()",
      "info" : "MethodDeclaration[31639-32521]:MethodDeclaration[31694-32576]"
    }, {
      "left" : "public boolean isKeyguardBound()",
      "right" : "public boolean isKeyguardBound()",
      "info" : "MethodDeclaration[32527-32598]:MethodDeclaration[32582-32653]"
    }, {
      "left" : "public void onDreamingStarted()",
      "right" : "public void onDreamingStarted()",
      "info" : "MethodDeclaration[32604-32946]:MethodDeclaration[32659-33001]"
    }, {
      "left" : "public void onDreamingStopped()",
      "right" : "public void onDreamingStopped()",
      "info" : "MethodDeclaration[32952-33161]:MethodDeclaration[33007-33216]"
    }, {
      "left" : "public void setKeyguardEnabledInternal(boolean enabled)",
      "right" : "public void setKeyguardEnabledInternal(boolean enabled)",
      "info" : "MethodDeclaration[33167-33562]:MethodDeclaration[33222-33617]"
    }, {
      "left" : "public boolean getKeyguardEnabledInternal()",
      "right" : "public boolean getKeyguardEnabledInternal()",
      "info" : "MethodDeclaration[33568-33656]:MethodDeclaration[33623-33711]"
    }, {
      "left" : "public void setKeyguardEnabled(boolean enabled)",
      "right" : "public void setKeyguardEnabled(boolean enabled)",
      "info" : "MethodDeclaration[33662-37070]:MethodDeclaration[33717-37125]"
    }, {
      "left" : "public void verifyUnlock(IKeyguardExitCallback callback)",
      "right" : "public void verifyUnlock(IKeyguardExitCallback callback)",
      "info" : "MethodDeclaration[37076-38745]:MethodDeclaration[37131-38800]"
    }, {
      "left" : "public boolean isShowing()",
      "right" : "public boolean isShowing()",
      "info" : "MethodDeclaration[38751-38868]:MethodDeclaration[38806-38923]"
    }, {
      "left" : "public boolean isOccluded()",
      "right" : "public boolean isOccluded()",
      "info" : "MethodDeclaration[38874-38935]:MethodDeclaration[38929-38990]"
    }, {
      "left" : "public boolean isShowingAndNotOccluded()",
      "right" : "public boolean isShowingAndNotOccluded()",
      "info" : "MethodDeclaration[38941-39113]:MethodDeclaration[38996-39168]"
    }, {
      "left" : "public void setOccluded(boolean isOccluded)",
      "right" : "public void setOccluded(boolean isOccluded)",
      "info" : "MethodDeclaration[39119-39478]:MethodDeclaration[39174-39533]"
    }, {
      "left" : "private void handleSetOccluded(boolean isOccluded)",
      "right" : "private void handleSetOccluded(boolean isOccluded)",
      "info" : "MethodDeclaration[39484-39935]:MethodDeclaration[39539-39990]"
    }, {
      "left" : "public void doKeyguardTimeout(Bundle options)",
      "right" : "public void doKeyguardTimeout(Bundle options)",
      "info" : "MethodDeclaration[39941-40347]:MethodDeclaration[39996-40402]"
    }, {
      "left" : "public boolean isInputRestricted()",
      "right" : "public boolean isInputRestricted()",
      "info" : "MethodDeclaration[40353-40735]:MethodDeclaration[40408-40790]"
    }, {
      "left" : "private void updateInputRestricted()",
      "right" : "private void updateInputRestricted()",
      "info" : "MethodDeclaration[40741-40868]:MethodDeclaration[40796-40923]"
    }, {
      "left" : "private void updateInputRestrictedLocked()",
      "right" : "private void updateInputRestrictedLocked()",
      "info" : "MethodDeclaration[40873-41456]:MethodDeclaration[40928-41511]"
    }, {
      "left" : "private void doKeyguardLocked(Bundle options)",
      "right" : "private void doKeyguardLocked(Bundle options)",
      "info" : "MethodDeclaration[41462-44371]:MethodDeclaration[41517-44426]"
    }, {
      "left" : "private boolean shouldWaitForProvisioning()",
      "right" : "private boolean shouldWaitForProvisioning()",
      "info" : "MethodDeclaration[44377-44497]:MethodDeclaration[44432-44552]"
    }, {
      "left" : "private boolean isSimLockedOrMissing (int subId, boolean requireSim)",
      "right" : "private boolean isSimLockedOrMissing (int subId, boolean requireSim)",
      "info" : "MethodDeclaration[44503-44922]:MethodDeclaration[44558-44977]"
    }, {
      "left" : "public boolean lockscreenEnforcedByDevicePolicy()",
      "right" : "public boolean lockscreenEnforcedByDevicePolicy()",
      "info" : "MethodDeclaration[44928-45744]:MethodDeclaration[44983-45799]"
    }, {
      "left" : "public void handleDismiss()",
      "right" : "public void handleDismiss()",
      "info" : "MethodDeclaration[45750-45959]:MethodDeclaration[45805-46014]"
    }, {
      "left" : "public void dismiss()",
      "right" : "public void dismiss()",
      "info" : "MethodDeclaration[45965-46038]:MethodDeclaration[46020-46093]"
    }, {
      "left" : "private void resetStateLocked()",
      "right" : "private void resetStateLocked()",
      "info" : "MethodDeclaration[46044-46326]:MethodDeclaration[46099-46381]"
    }, {
      "left" : "private void verifyUnlockLocked()",
      "right" : "private void verifyUnlockLocked()",
      "info" : "MethodDeclaration[46332-46586]:MethodDeclaration[46387-46641]"
    }, {
      "left" : "private void notifyScreenOffLocked()",
      "right" : "private void notifyScreenOffLocked()",
      "info" : "MethodDeclaration[46593-46906]:MethodDeclaration[46648-46961]"
    }, {
      "left" : "private void notifyScreenOnLocked(IKeyguardShowCallback result)",
      "right" : "private void notifyScreenOnLocked(IKeyguardShowCallback result)",
      "info" : "MethodDeclaration[46912-47297]:MethodDeclaration[46967-47352]"
    }, {
      "left" : "private void showLocked(Bundle options)",
      "right" : "private void showLocked(Bundle options)",
      "info" : "MethodDeclaration[47303-47708]:MethodDeclaration[47358-47763]"
    }, {
      "left" : "private void hideLocked()",
      "right" : "private void hideLocked()",
      "info" : "MethodDeclaration[47714-47979]:MethodDeclaration[47769-48034]"
    }, {
      "left" : "public boolean isSecure()",
      "right" : "public boolean isSecure()",
      "info" : "MethodDeclaration[47985-48139]:MethodDeclaration[48040-48194]"
    }, {
      "left" : "public void setCurrentUser(int newUserId)",
      "right" : "public void setCurrentUser(int newUserId)",
      "info" : "MethodDeclaration[48145-48494]:MethodDeclaration[48200-48549]"
    }, {
      "left" : "private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction())) {\n                final int sequence = intent.getIntExtra(\"seq\", 0);\n                if (DEBUG) Log.d(TAG, \"received DELAYED_KEYGUARD_ACTION with seq = \"\n                        + sequence + \", mDelayedShowingSequence = \" + mDelayedShowingSequence);\n                synchronized (KeyguardViewMediator.this) {\n                    if (mDelayedShowingSequence == sequence) {\n                        // Don't play lockscreen SFX if the screen went off due to timeout.\n                        mSuppressNextLockSound = true;\n                        doKeyguardLocked(null);\n                    }\n                }\n            } else if (DISMISS_KEYGUARD_SECURELY_ACTION.equals(intent.getAction())) {\n                synchronized (KeyguardViewMediator.this) {\n                    if (mScreenOn) {\n                        dismiss();\n                    } else {\n                        mDismissSecurelyOnScreenOn = true;\n                    }\n                }\n            } else if (KEYGUARD_SERVICE_ACTION_STATE_CHANGE.equals(intent.getAction())) {\n                mKeyguardBound = intent.getBooleanExtra(KEYGUARD_SERVICE_EXTRA_ACTIVE, false);\n                context.sendBroadcast(new Intent(LockscreenToggleTile.ACTION_APPLY_LOCKSCREEN_STATE)\n                        .setPackage(context.getPackageName()));\n            }\n        }\n    };",
      "right" : "private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction())) {\n                final int sequence = intent.getIntExtra(\"seq\", 0);\n                if (DEBUG) Log.d(TAG, \"received DELAYED_KEYGUARD_ACTION with seq = \"\n                        + sequence + \", mDelayedShowingSequence = \" + mDelayedShowingSequence);\n                synchronized (KeyguardViewMediator.this) {\n                    if (mDelayedShowingSequence == sequence) {\n                        // Don't play lockscreen SFX if the screen went off due to timeout.\n                        mSuppressNextLockSound = true;\n                        doKeyguardLocked(null);\n                    }\n                }\n            } else if (DISMISS_KEYGUARD_SECURELY_ACTION.equals(intent.getAction())) {\n                synchronized (KeyguardViewMediator.this) {\n                    if (mScreenOn) {\n                        dismiss();\n                    } else {\n                        mDismissSecurelyOnScreenOn = true;\n                    }\n                }\n            } else if (KEYGUARD_SERVICE_ACTION_STATE_CHANGE.equals(intent.getAction())) {\n                mKeyguardBound = intent.getBooleanExtra(KEYGUARD_SERVICE_EXTRA_ACTIVE, false);\n                context.sendBroadcast(new Intent(LockscreenToggleTile.ACTION_APPLY_LOCKSCREEN_STATE)\n                        .setPackage(context.getPackageName()));\n            }\n        }\n    };",
      "info" : "FieldDeclaration[48500-50061]:FieldDeclaration[48555-50116]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[48587-50054]:MethodDeclaration[48642-50109]"
    }, {
      "left" : "public void keyguardDone(boolean authenticated, boolean wakeup)",
      "right" : "public void keyguardDone(boolean authenticated, boolean wakeup)",
      "info" : "MethodDeclaration[50067-50382]:MethodDeclaration[50122-50437]"
    }, {
      "left" : "private Handler mHandler = new Handler(Looper.myLooper(), null, true ) {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case SHOW:\n                    handleShow((Bundle) msg.obj);\n                    break;\n                case HIDE:\n                    handleHide();\n                    break;\n                case RESET:\n                    handleReset();\n                    break;\n                case VERIFY_UNLOCK:\n                    handleVerifyUnlock();\n                    break;\n                case NOTIFY_SCREEN_OFF:\n                    handleNotifyScreenOff();\n                    break;\n                case NOTIFY_SCREEN_ON:\n                    handleNotifyScreenOn((IKeyguardShowCallback) msg.obj);\n                    break;\n                case KEYGUARD_DONE:\n                    handleKeyguardDone(msg.arg1 != 0, msg.arg2 != 0);\n                    break;\n                case KEYGUARD_DONE_DRAWING:\n                    handleKeyguardDoneDrawing();\n                    break;\n                case KEYGUARD_DONE_AUTHENTICATING:\n                    keyguardDone(true, true);\n                    break;\n                case SET_OCCLUDED:\n                    handleSetOccluded(msg.arg1 != 0);\n                    break;\n                case KEYGUARD_TIMEOUT:\n                    synchronized (KeyguardViewMediator.this) {\n                        doKeyguardLocked((Bundle) msg.obj);\n                    }\n                    break;\n                case DISMISS:\n                    handleDismiss();\n                    break;\n                case START_KEYGUARD_EXIT_ANIM:\n                    StartKeyguardExitAnimParams params = (StartKeyguardExitAnimParams) msg.obj;\n                    handleStartKeyguardExitAnimation(params.startTime, params.fadeoutDuration);\n                    break;\n                case KEYGUARD_DONE_PENDING_TIMEOUT:\n                    Log.w(TAG, \"Timeout while waiting for activity drawn!\");\n                    // Fall through.\n                case ON_ACTIVITY_DRAWN:\n                    handleOnActivityDrawn();\n                    break;\n            }\n        }\n    };",
      "right" : "private Handler mHandler = new Handler(Looper.myLooper(), null, true ) {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case SHOW:\n                    handleShow((Bundle) msg.obj);\n                    break;\n                case HIDE:\n                    handleHide();\n                    break;\n                case RESET:\n                    handleReset();\n                    break;\n                case VERIFY_UNLOCK:\n                    handleVerifyUnlock();\n                    break;\n                case NOTIFY_SCREEN_OFF:\n                    handleNotifyScreenOff();\n                    break;\n                case NOTIFY_SCREEN_ON:\n                    handleNotifyScreenOn((IKeyguardShowCallback) msg.obj);\n                    break;\n                case KEYGUARD_DONE:\n                    handleKeyguardDone(msg.arg1 != 0, msg.arg2 != 0);\n                    break;\n                case KEYGUARD_DONE_DRAWING:\n                    handleKeyguardDoneDrawing();\n                    break;\n                case KEYGUARD_DONE_AUTHENTICATING:\n                    keyguardDone(true, true);\n                    break;\n                case SET_OCCLUDED:\n                    handleSetOccluded(msg.arg1 != 0);\n                    break;\n                case KEYGUARD_TIMEOUT:\n                    synchronized (KeyguardViewMediator.this) {\n                        doKeyguardLocked((Bundle) msg.obj);\n                    }\n                    break;\n                case DISMISS:\n                    handleDismiss();\n                    break;\n                case START_KEYGUARD_EXIT_ANIM:\n                    StartKeyguardExitAnimParams params = (StartKeyguardExitAnimParams) msg.obj;\n                    handleStartKeyguardExitAnimation(params.startTime, params.fadeoutDuration);\n                    break;\n                case KEYGUARD_DONE_PENDING_TIMEOUT:\n                    Log.w(TAG, \"Timeout while waiting for activity drawn!\");\n                    // Fall through.\n                case ON_ACTIVITY_DRAWN:\n                    handleOnActivityDrawn();\n                    break;\n            }\n        }\n    };",
      "info" : "FieldDeclaration[50388-52946]:FieldDeclaration[50443-53001]"
    }, {
      "left" : "public void handleMessage(Message msg)",
      "right" : "public void handleMessage(Message msg)",
      "info" : "MethodDeclaration[50843-52939]:MethodDeclaration[50898-52994]"
    }, {
      "left" : "private void handleKeyguardDone(boolean authenticated, boolean wakeup)",
      "right" : "private void handleKeyguardDone(boolean authenticated, boolean wakeup)",
      "info" : "MethodDeclaration[52952-54122]:MethodDeclaration[53007-54483]"
    }, {
      "left" : "private void sendUserPresentBroadcast()",
      "right" : "private void sendUserPresentBroadcast()",
      "info" : "MethodDeclaration[54128-54805]:MethodDeclaration[54489-55166]"
    }, {
      "left" : "private void handleKeyguardDoneDrawing()",
      "right" : "private void handleKeyguardDoneDrawing()",
      "info" : "MethodDeclaration[54811-55558]:MethodDeclaration[55172-55919]"
    }, {
      "left" : "private void playSounds(boolean locked)",
      "right" : "private void playSounds(boolean locked)",
      "info" : "MethodDeclaration[55564-55823]:MethodDeclaration[55925-56184]"
    }, {
      "left" : "private void playSound(int soundId)",
      "right" : "private void playSound(int soundId)",
      "info" : "MethodDeclaration[55829-56724]:MethodDeclaration[56190-57085]"
    }, {
      "left" : "private void playTrustedSound()",
      "right" : "private void playTrustedSound()",
      "info" : "MethodDeclaration[56730-56873]:MethodDeclaration[57091-57234]"
    }, {
      "left" : "private void updateActivityLockScreenState()",
      "right" : "private void updateActivityLockScreenState()",
      "info" : "MethodDeclaration[56879-57084]:MethodDeclaration[57240-57445]"
    }, {
      "left" : "private void handleShow(Bundle options)",
      "right" : "private void handleShow(Bundle options)",
      "info" : "MethodDeclaration[57090-58030]:MethodDeclaration[57451-58391]"
    }, {
      "left" : "private final Runnable mKeyguardGoingAwayRunnable = new Runnable() {\n        @Override\n        public void run() {\n            try {\n                // Don't actually hide the Keyguard at the moment, wait for window\n                // manager until it tells us it's safe to do so with\n                // startKeyguardExitAnimation.\n                mWM.keyguardGoingAway(\n                        mStatusBarKeyguardViewManager.shouldDisableWindowAnimationsForUnlock(),\n                        mStatusBarKeyguardViewManager.isGoingToNotificationShade(),\n                        mStatusBarKeyguardViewManager.isKeyguardShowingMedia());\n            } catch (RemoteException e) {\n                Log.e(TAG, \"Error while calling WindowManager\", e);\n            }\n        }\n    };",
      "right" : "private final Runnable mKeyguardGoingAwayRunnable = new Runnable() {\n        @Override\n        public void run() {\n            try {\n                // Don't actually hide the Keyguard at the moment, wait for window\n                // manager until it tells us it's safe to do so with\n                // startKeyguardExitAnimation.\n                mWM.keyguardGoingAway(\n                        mStatusBarKeyguardViewManager.shouldDisableWindowAnimationsForUnlock(),\n                        mStatusBarKeyguardViewManager.isGoingToNotificationShade(),\n                        mStatusBarKeyguardViewManager.isKeyguardShowingMedia());\n            } catch (RemoteException e) {\n                Log.e(TAG, \"Error while calling WindowManager\", e);\n            }\n        }\n    };",
      "info" : "FieldDeclaration[58036-58808]:FieldDeclaration[58397-59169]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[58113-58801]:MethodDeclaration[58474-59162]"
    }, {
      "left" : "private void handleHide()",
      "right" : "private void handleHide()",
      "info" : "MethodDeclaration[58814-59731]:MethodDeclaration[59175-60092]"
    }, {
      "left" : "private void handleOnActivityDrawn()",
      "right" : "private void handleOnActivityDrawn()",
      "info" : "MethodDeclaration[59737-59888]:MethodDeclaration[60098-60249]"
    }, {
      "left" : "private void handleStartKeyguardExitAnimation(long startTime, long fadeoutDuration)",
      "right" : "private void handleStartKeyguardExitAnimation(long startTime, long fadeoutDuration)",
      "info" : "MethodDeclaration[59894-60703]:MethodDeclaration[60255-61064]"
    }, {
      "left" : "private void adjustStatusBarLocked()",
      "right" : "private void adjustStatusBarLocked()",
      "info" : "MethodDeclaration[60709-62114]:MethodDeclaration[61070-62475]"
    }, {
      "left" : "private void handleReset()",
      "right" : "private void handleReset()",
      "info" : "MethodDeclaration[62120-62407]:MethodDeclaration[62481-62768]"
    }, {
      "left" : "private void handleVerifyUnlock()",
      "right" : "private void handleVerifyUnlock()",
      "info" : "MethodDeclaration[62413-62806]:MethodDeclaration[62774-63167]"
    }, {
      "left" : "private void handleNotifyScreenOff()",
      "right" : "private void handleNotifyScreenOff()",
      "info" : "MethodDeclaration[62812-63150]:MethodDeclaration[63173-63511]"
    }, {
      "left" : "private void resetKeyguardDonePendingLocked()",
      "right" : "private void resetKeyguardDonePendingLocked()",
      "info" : "MethodDeclaration[63156-63311]:MethodDeclaration[63517-63672]"
    }, {
      "left" : "private void handleNotifyScreenOn(IKeyguardShowCallback callback)",
      "right" : "private void handleNotifyScreenOn(IKeyguardShowCallback callback)",
      "info" : "MethodDeclaration[63316-63685]:MethodDeclaration[63677-64046]"
    }, {
      "left" : "public boolean isDismissable()",
      "right" : "public boolean isDismissable()",
      "info" : "MethodDeclaration[63691-63781]:MethodDeclaration[64052-64142]"
    }, {
      "left" : "private boolean isAssistantAvailable()",
      "right" : "private boolean isAssistantAvailable()",
      "info" : "MethodDeclaration[63787-63972]:MethodDeclaration[64148-64333]"
    }, {
      "left" : "public void onBootCompleted()",
      "right" : "public void onBootCompleted()",
      "info" : "MethodDeclaration[63978-64236]:MethodDeclaration[64339-64597]"
    }, {
      "left" : "public StatusBarKeyguardViewManager registerStatusBar(PhoneStatusBar phoneStatusBar,\n            ViewGroup container, StatusBarWindowManager statusBarWindowManager,\n            ScrimController scrimController)",
      "right" : "public StatusBarKeyguardViewManager registerStatusBar(PhoneStatusBar phoneStatusBar,\n            ViewGroup container, StatusBarWindowManager statusBarWindowManager,\n            ScrimController scrimController)",
      "info" : "MethodDeclaration[64242-64646]:MethodDeclaration[64603-65007]"
    }, {
      "left" : "public void startKeyguardExitAnimation(long startTime, long fadeoutDuration)",
      "right" : "public void startKeyguardExitAnimation(long startTime, long fadeoutDuration)",
      "info" : "MethodDeclaration[64652-64920]:MethodDeclaration[65013-65281]"
    }, {
      "left" : "public void onActivityDrawn()",
      "right" : "public void onActivityDrawn()",
      "info" : "MethodDeclaration[64926-65017]:MethodDeclaration[65287-65378]"
    }, {
      "left" : "public ViewMediatorCallback getViewMediatorCallback()",
      "right" : "public ViewMediatorCallback getViewMediatorCallback()",
      "info" : "MethodDeclaration[65022-65121]:MethodDeclaration[65383-65482]"
    }, {
      "left" : "StartKeyguardExitAnimParams",
      "right" : "StartKeyguardExitAnimParams",
      "info" : "TypeDeclaration[65127-65425]:TypeDeclaration[65488-65786]"
    }, {
      "left" : "long startTime;",
      "right" : "long startTime;",
      "info" : "FieldDeclaration[65187-65202]:FieldDeclaration[65548-65563]"
    }, {
      "left" : "long fadeoutDuration;",
      "right" : "long fadeoutDuration;",
      "info" : "FieldDeclaration[65211-65232]:FieldDeclaration[65572-65593]"
    }, {
      "left" : "private StartKeyguardExitAnimParams(long startTime, long fadeoutDuration)",
      "right" : "private StartKeyguardExitAnimParams(long startTime, long fadeoutDuration)",
      "info" : "MethodDeclaration[65242-65419]:MethodDeclaration[65603-65780]"
    }, {
      "left" : "private void setShowingLocked(boolean showing)",
      "right" : "private void setShowingLocked(boolean showing)",
      "info" : "MethodDeclaration[65431-66018]:MethodDeclaration[65792-66379]"
    }, {
      "left" : "public void addStateMonitorCallback(IKeyguardStateCallback callback)",
      "right" : "public void addStateMonitorCallback(IKeyguardStateCallback callback)",
      "info" : "MethodDeclaration[66024-66515]:MethodDeclaration[66385-66876]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5337-5343]:Modifier[5392-5398]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5344-5349]:TYPE_DECLARATION_KIND[5399-5404]"
    }, {
      "left" : "KeyguardViewMediator",
      "right" : "KeyguardViewMediator",
      "info" : "SimpleName[5350-5370]:SimpleName[5405-5425]"
    }, {
      "left" : "SystemUI",
      "right" : "SystemUI",
      "info" : "SimpleType[5379-5387]:SimpleType[5434-5442]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12744-12753]:MarkerAnnotation[12799-12808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12762-12768]:Modifier[12817-12823]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12769-12773]:PrimitiveType[12824-12828]"
    }, {
      "left" : "onUserSwitching",
      "right" : "onUserSwitching",
      "info" : "SimpleName[12774-12789]:SimpleName[12829-12844]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[12790-12800]:SingleVariableDeclaration[12845-12855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12802-13579]:Block[12857-13634]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n                mSwitchingUser = true;\n                resetKeyguardDonePendingLocked();\n                resetStateLocked();\n                adjustStatusBarLocked();\n                // When we switch users we want to bring the new user to the biometric unlock even\n                // if the current user has gone to the backup.\n                KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);\n            }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n                mSwitchingUser = true;\n                resetKeyguardDonePendingLocked();\n                resetStateLocked();\n                adjustStatusBarLocked();\n                // When we switch users we want to bring the new user to the biometric unlock even\n                // if the current user has gone to the backup.\n                KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);\n            }",
      "info" : "SynchronizedStatement[13092-13569]:SynchronizedStatement[13147-13624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13133-13569]:Block[13188-13624]"
    }, {
      "left" : "mSwitchingUser = true;",
      "right" : "mSwitchingUser = true;",
      "info" : "ExpressionStatement[13151-13173]:ExpressionStatement[13206-13228]"
    }, {
      "left" : "resetKeyguardDonePendingLocked();",
      "right" : "resetKeyguardDonePendingLocked();",
      "info" : "ExpressionStatement[13190-13223]:ExpressionStatement[13245-13278]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[13240-13259]:ExpressionStatement[13295-13314]"
    }, {
      "left" : "adjustStatusBarLocked();",
      "right" : "adjustStatusBarLocked();",
      "info" : "ExpressionStatement[13276-13300]:ExpressionStatement[13331-13355]"
    }, {
      "left" : "KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);",
      "right" : "KeyguardUpdateMonitor.getInstance(mContext).setAlternateUnlockEnabled(true);",
      "info" : "ExpressionStatement[13479-13555]:ExpressionStatement[13534-13610]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13589-13598]:MarkerAnnotation[13644-13653]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13607-13613]:Modifier[13662-13668]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13614-13618]:PrimitiveType[13669-13673]"
    }, {
      "left" : "onUserSwitchComplete",
      "right" : "onUserSwitchComplete",
      "info" : "SimpleName[13619-13639]:SimpleName[13674-13694]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[13640-13650]:SingleVariableDeclaration[13695-13705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13652-14026]:Block[13707-14081]"
    }, {
      "left" : "mSwitchingUser = false;",
      "right" : "mSwitchingUser = false;",
      "info" : "ExpressionStatement[13666-13689]:ExpressionStatement[13721-13744]"
    }, {
      "left" : "if (userId != UserHandle.USER_OWNER)",
      "right" : "if (userId != UserHandle.USER_OWNER)",
      "info" : "IfStatement[13702-14016]:IfStatement[13757-14071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13739-14016]:Block[13794-14071]"
    }, {
      "left" : "UserInfo info = UserManager.get(mContext).getUserInfo(userId);",
      "right" : "UserInfo info = UserManager.get(mContext).getUserInfo(userId);",
      "info" : "VariableDeclarationStatement[13757-13819]:VariableDeclarationStatement[13812-13874]"
    }, {
      "left" : "if (info != null && info.isGuest())",
      "right" : "if (info != null && info.isGuest())",
      "info" : "IfStatement[13836-14002]:IfStatement[13891-14057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13872-14002]:Block[13927-14057]"
    }, {
      "left" : "dismiss();",
      "right" : "dismiss();",
      "info" : "ExpressionStatement[13974-13984]:ExpressionStatement[14029-14039]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14036-14045]:MarkerAnnotation[14091-14100]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14054-14060]:Modifier[14109-14115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14061-14065]:PrimitiveType[14116-14120]"
    }, {
      "left" : "onUserRemoved",
      "right" : "onUserRemoved",
      "info" : "SimpleName[14066-14079]:SimpleName[14121-14134]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[14080-14090]:SingleVariableDeclaration[14135-14145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14092-14215]:Block[14147-14270]"
    }, {
      "left" : "mLockPatternUtils.removeUser(userId);",
      "right" : "mLockPatternUtils.removeUser(userId);",
      "info" : "ExpressionStatement[14106-14143]:ExpressionStatement[14161-14198]"
    }, {
      "left" : "MultiUserAvatarCache.getInstance().clear(userId);",
      "right" : "MultiUserAvatarCache.getInstance().clear(userId);",
      "info" : "ExpressionStatement[14156-14205]:ExpressionStatement[14211-14260]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14225-14234]:MarkerAnnotation[14280-14289]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14243-14249]:Modifier[14298-14304]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14250-14254]:PrimitiveType[14305-14309]"
    }, {
      "left" : "onUserInfoChanged",
      "right" : "onUserInfoChanged",
      "info" : "SimpleName[14255-14272]:SimpleName[14310-14327]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[14273-14283]:SingleVariableDeclaration[14328-14338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14285-14358]:Block[14340-14413]"
    }, {
      "left" : "MultiUserAvatarCache.getInstance().clear(userId);",
      "right" : "MultiUserAvatarCache.getInstance().clear(userId);",
      "info" : "ExpressionStatement[14299-14348]:ExpressionStatement[14354-14403]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14368-14377]:MarkerAnnotation[14423-14432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14386-14392]:Modifier[14441-14447]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14393-14397]:PrimitiveType[14448-14452]"
    }, {
      "left" : "onPhoneStateChanged",
      "right" : "onPhoneStateChanged",
      "info" : "SimpleName[14398-14417]:SimpleName[14453-14472]"
    }, {
      "left" : "int phoneState",
      "right" : "int phoneState",
      "info" : "SingleVariableDeclaration[14418-14432]:SingleVariableDeclaration[14473-14487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14434-15358]:Block[14489-15413]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n                if (TelephonyManager.CALL_STATE_IDLE == phoneState  // call ending\n                        && !mScreenOn                           // screen off\n                        && mExternallyEnabled) {                // not disabled by any app\n\n                    // note: this is a way to gracefully reenable the keyguard when the call\n                    // ends and the screen is off without always reenabling the keyguard\n                    // each time the screen turns off while in call (and having an occasional ugly\n                    // flicker while turning back on the screen and disabling the keyguard again).\n                    if (DEBUG) Log.d(TAG, \"screen is off and call ended, let's make sure the \"\n                            + \"keyguard is showing\");\n                    doKeyguardLocked(null);\n                }\n            }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n                if (TelephonyManager.CALL_STATE_IDLE == phoneState  // call ending\n                        && !mScreenOn                           // screen off\n                        && mExternallyEnabled) {                // not disabled by any app\n\n                    // note: this is a way to gracefully reenable the keyguard when the call\n                    // ends and the screen is off without always reenabling the keyguard\n                    // each time the screen turns off while in call (and having an occasional ugly\n                    // flicker while turning back on the screen and disabling the keyguard again).\n                    if (DEBUG) Log.d(TAG, \"screen is off and call ended, let's make sure the \"\n                            + \"keyguard is showing\");\n                    doKeyguardLocked(null);\n                }\n            }",
      "info" : "SynchronizedStatement[14448-15348]:SynchronizedStatement[14503-15403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14489-15348]:Block[14544-15403]"
    }, {
      "left" : "if (TelephonyManager.CALL_STATE_IDLE == phoneState  // call ending\n                        && !mScreenOn                           // screen off\n                        && mExternallyEnabled)",
      "right" : "if (TelephonyManager.CALL_STATE_IDLE == phoneState  // call ending\n                        && !mScreenOn                           // screen off\n                        && mExternallyEnabled)",
      "info" : "IfStatement[14507-15334]:IfStatement[14562-15389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14699-15334]:Block[14754-15389]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[15144-15272]:IfStatement[15199-15327]"
    }, {
      "left" : "Log.d(TAG, \"screen is off and call ended, let's make sure the \"\n                            + \"keyguard is showing\");",
      "right" : "Log.d(TAG, \"screen is off and call ended, let's make sure the \"\n                            + \"keyguard is showing\");",
      "info" : "ExpressionStatement[15155-15272]:ExpressionStatement[15210-15327]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[15293-15316]:ExpressionStatement[15348-15371]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15368-15377]:MarkerAnnotation[15423-15432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15386-15392]:Modifier[15441-15447]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15393-15397]:PrimitiveType[15448-15452]"
    }, {
      "left" : "onClockVisibilityChanged",
      "right" : "onClockVisibilityChanged",
      "info" : "SimpleName[15398-15422]:SimpleName[15453-15477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15425-15473]:Block[15480-15528]"
    }, {
      "left" : "adjustStatusBarLocked();",
      "right" : "adjustStatusBarLocked();",
      "info" : "ExpressionStatement[15439-15463]:ExpressionStatement[15494-15518]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15483-15492]:MarkerAnnotation[15538-15547]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15501-15507]:Modifier[15556-15562]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15508-15512]:PrimitiveType[15563-15567]"
    }, {
      "left" : "onDeviceProvisioned",
      "right" : "onDeviceProvisioned",
      "info" : "SimpleName[15513-15532]:SimpleName[15568-15587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15535-15623]:Block[15590-15678]"
    }, {
      "left" : "sendUserPresentBroadcast();",
      "right" : "sendUserPresentBroadcast();",
      "info" : "ExpressionStatement[15549-15576]:ExpressionStatement[15604-15631]"
    }, {
      "left" : "updateInputRestricted();",
      "right" : "updateInputRestricted();",
      "info" : "ExpressionStatement[15589-15613]:ExpressionStatement[15644-15668]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15633-15642]:MarkerAnnotation[15688-15697]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15651-15657]:Modifier[15706-15712]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15658-15662]:PrimitiveType[15713-15717]"
    }, {
      "left" : "onSimStateChanged",
      "right" : "onSimStateChanged",
      "info" : "SimpleName[15663-15680]:SimpleName[15718-15735]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[15681-15690]:SingleVariableDeclaration[15736-15745]"
    }, {
      "left" : "int slotId",
      "right" : "int slotId",
      "info" : "SingleVariableDeclaration[15692-15702]:SingleVariableDeclaration[15747-15757]"
    }, {
      "left" : "IccCardConstants.State simState",
      "right" : "IccCardConstants.State simState",
      "info" : "SingleVariableDeclaration[15704-15735]:SingleVariableDeclaration[15759-15790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15737-18841]:Block[15792-18896]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[15751-15838]:IfStatement[15806-15893]"
    }, {
      "left" : "Log.d(TAG, \"onSimStateChangedUsingSubId: \" + simState + \", subId=\" + subId);",
      "right" : "Log.d(TAG, \"onSimStateChangedUsingSubId: \" + simState + \", subId=\" + subId);",
      "info" : "ExpressionStatement[15762-15838]:ExpressionStatement[15817-15893]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15852-16275]:TryStatement[15907-16330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15856-16159]:Block[15911-16214]"
    }, {
      "left" : "int size = mKeyguardStateCallbacks.size();",
      "right" : "int size = mKeyguardStateCallbacks.size();",
      "info" : "VariableDeclarationStatement[15874-15916]:VariableDeclarationStatement[15929-15971]"
    }, {
      "left" : "boolean simPinSecure = mUpdateMonitor.isSimPinSecure();",
      "right" : "boolean simPinSecure = mUpdateMonitor.isSimPinSecure();",
      "info" : "VariableDeclarationStatement[15933-15988]:VariableDeclarationStatement[15988-16043]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[16005-16145]:ForStatement[16060-16200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16036-16145]:Block[16091-16200]"
    }, {
      "left" : "mKeyguardStateCallbacks.get(i).onSimSecureStateChanged(simPinSecure);",
      "right" : "mKeyguardStateCallbacks.get(i).onSimSecureStateChanged(simPinSecure);",
      "info" : "ExpressionStatement[16058-16127]:ExpressionStatement[16113-16182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16186-16275]:Block[16241-16330]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onSimSecureStateChanged\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onSimSecureStateChanged\", e);",
      "info" : "ExpressionStatement[16204-16261]:ExpressionStatement[16259-16316]"
    }, {
      "left" : "switch (simState) {\n                case NOT_READY:\n                case ABSENT:\n                    // only force lock screen in case of missing sim if user hasn't\n                    // gone through setup wizard\n                    synchronized (this) {\n                        if (shouldWaitForProvisioning()) {\n                            if (!isShowing()) {\n                                if (DEBUG) Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");\n                                doKeyguardLocked(null);\n                            } else {\n                                resetStateLocked();\n                            }\n                        }\n                    }\n                    break;\n                case PIN_REQUIRED:\n                case PUK_REQUIRED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");\n                            doKeyguardLocked(null);\n                        } else {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case PERM_DISABLED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");\n                            doKeyguardLocked(null);\n                        } else {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case READY:\n                    synchronized (this) {\n                        if (mInternallyDisabled) {\n                            hideLocked();\n                        } else if (isShowing()) {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                default:\n                    if (DEBUG_SIM_STATES) Log.v(TAG, \"Ignoring state: \" + simState);\n                    break;\n            }",
      "right" : "switch (simState) {\n                case NOT_READY:\n                case ABSENT:\n                    // only force lock screen in case of missing sim if user hasn't\n                    // gone through setup wizard\n                    synchronized (this) {\n                        if (shouldWaitForProvisioning()) {\n                            if (!isShowing()) {\n                                if (DEBUG) Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");\n                                doKeyguardLocked(null);\n                            } else {\n                                resetStateLocked();\n                            }\n                        }\n                    }\n                    break;\n                case PIN_REQUIRED:\n                case PUK_REQUIRED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");\n                            doKeyguardLocked(null);\n                        } else {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case PERM_DISABLED:\n                    synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");\n                            doKeyguardLocked(null);\n                        } else {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                case READY:\n                    synchronized (this) {\n                        if (mInternallyDisabled) {\n                            hideLocked();\n                        } else if (isShowing()) {\n                            resetStateLocked();\n                        }\n                    }\n                    break;\n                default:\n                    if (DEBUG_SIM_STATES) Log.v(TAG, \"Ignoring state: \" + simState);\n                    break;\n            }",
      "info" : "SwitchStatement[16289-18831]:SwitchStatement[16344-18886]"
    }, {
      "left" : "case NOT_READY:",
      "right" : "case NOT_READY:",
      "info" : "SwitchCase[16325-16340]:SwitchCase[16380-16395]"
    }, {
      "left" : "case ABSENT:",
      "right" : "case ABSENT:",
      "info" : "SwitchCase[16357-16369]:SwitchCase[16412-16424]"
    }, {
      "left" : "synchronized (this) {\n                        if (shouldWaitForProvisioning()) {\n                            if (!isShowing()) {\n                                if (DEBUG) Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");\n                                doKeyguardLocked(null);\n                            } else {\n                                resetStateLocked();\n                            }\n                        }\n                    }",
      "right" : "synchronized (this) {\n                        if (shouldWaitForProvisioning()) {\n                            if (!isShowing()) {\n                                if (DEBUG) Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");\n                                doKeyguardLocked(null);\n                            } else {\n                                resetStateLocked();\n                            }\n                        }\n                    }",
      "info" : "SynchronizedStatement[16523-17117]:SynchronizedStatement[16578-17172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16543-17117]:Block[16598-17172]"
    }, {
      "left" : "if (shouldWaitForProvisioning())",
      "right" : "if (shouldWaitForProvisioning())",
      "info" : "IfStatement[16569-17095]:IfStatement[16624-17150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16602-17095]:Block[16657-17150]"
    }, {
      "left" : "if (!isShowing())",
      "right" : "if (!isShowing())",
      "info" : "IfStatement[16632-17069]:IfStatement[16687-17124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16650-16980]:Block[16705-17035]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[16684-16894]:IfStatement[16739-16949]"
    }, {
      "left" : "Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");",
      "right" : "Log.d(TAG, \"ICC_ABSENT isn't showing,\"\n                                        + \" we need to show the keyguard since the \"\n                                        + \"device isn't provisioned yet.\");",
      "info" : "ExpressionStatement[16695-16894]:ExpressionStatement[16750-16949]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[16927-16950]:ExpressionStatement[16982-17005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16986-17069]:Block[17041-17124]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[17020-17039]:ExpressionStatement[17075-17094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17138-17144]:BreakStatement[17193-17199]"
    }, {
      "left" : "case PIN_REQUIRED:",
      "right" : "case PIN_REQUIRED:",
      "info" : "SwitchCase[17161-17179]:SwitchCase[17216-17234]"
    }, {
      "left" : "case PUK_REQUIRED:",
      "right" : "case PUK_REQUIRED:",
      "info" : "SwitchCase[17196-17214]:SwitchCase[17251-17269]"
    }, {
      "left" : "synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");\n                            doKeyguardLocked(null);\n                        } else {\n                            resetStateLocked();\n                        }\n                    }",
      "right" : "synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");\n                            doKeyguardLocked(null);\n                        } else {\n                            resetStateLocked();\n                        }\n                    }",
      "info" : "SynchronizedStatement[17235-17676]:SynchronizedStatement[17290-17731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17255-17676]:Block[17310-17731]"
    }, {
      "left" : "if (!isShowing())",
      "right" : "if (!isShowing())",
      "info" : "IfStatement[17281-17654]:IfStatement[17336-17709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17299-17573]:Block[17354-17628]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[17329-17495]:IfStatement[17384-17550]"
    }, {
      "left" : "Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");",
      "right" : "Log.d(TAG, \"INTENT_VALUE_ICC_LOCKED and keygaurd isn't \"\n                                    + \"showing; need to show keyguard so user can enter sim pin\");",
      "info" : "ExpressionStatement[17340-17495]:ExpressionStatement[17395-17550]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[17524-17547]:ExpressionStatement[17579-17602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17579-17654]:Block[17634-17709]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[17609-17628]:ExpressionStatement[17664-17683]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17697-17703]:BreakStatement[17752-17758]"
    }, {
      "left" : "case PERM_DISABLED:",
      "right" : "case PERM_DISABLED:",
      "info" : "SwitchCase[17720-17739]:SwitchCase[17775-17794]"
    }, {
      "left" : "synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");\n                            doKeyguardLocked(null);\n                        } else {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");\n                            resetStateLocked();\n                        }\n                    }",
      "right" : "synchronized (this) {\n                        if (!isShowing()) {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");\n                            doKeyguardLocked(null);\n                        } else {\n                            if (DEBUG) Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");\n                            resetStateLocked();\n                        }\n                    }",
      "info" : "SynchronizedStatement[17760-18317]:SynchronizedStatement[17815-18372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17780-18317]:Block[17835-18372]"
    }, {
      "left" : "if (!isShowing())",
      "right" : "if (!isShowing())",
      "info" : "IfStatement[17806-18295]:IfStatement[17861-18350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17824-18038]:Block[17879-18093]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[17854-17960]:IfStatement[17909-18015]"
    }, {
      "left" : "Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");",
      "right" : "Log.d(TAG, \"PERM_DISABLED and \"\n                                  + \"keygaurd isn't showing.\");",
      "info" : "ExpressionStatement[17865-17960]:ExpressionStatement[17920-18015]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[17989-18012]:ExpressionStatement[18044-18067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18044-18295]:Block[18099-18350]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[18074-18221]:IfStatement[18129-18276]"
    }, {
      "left" : "Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");",
      "right" : "Log.d(TAG, \"PERM_DISABLED, resetStateLocked to\"\n                                  + \"show permanently disabled message in lockscreen.\");",
      "info" : "ExpressionStatement[18085-18221]:ExpressionStatement[18140-18276]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[18250-18269]:ExpressionStatement[18305-18324]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18338-18344]:BreakStatement[18393-18399]"
    }, {
      "left" : "case READY:",
      "right" : "case READY:",
      "info" : "SwitchCase[18361-18372]:SwitchCase[18416-18427]"
    }, {
      "left" : "synchronized (this) {\n                        if (mInternallyDisabled) {\n                            hideLocked();\n                        } else if (isShowing()) {\n                            resetStateLocked();\n                        }\n                    }",
      "right" : "synchronized (this) {\n                        if (mInternallyDisabled) {\n                            hideLocked();\n                        } else if (isShowing()) {\n                            resetStateLocked();\n                        }\n                    }",
      "info" : "SynchronizedStatement[18393-18653]:SynchronizedStatement[18448-18708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18413-18653]:Block[18468-18708]"
    }, {
      "left" : "if (mInternallyDisabled)",
      "right" : "if (mInternallyDisabled)",
      "info" : "IfStatement[18439-18631]:IfStatement[18494-18686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18464-18533]:Block[18519-18588]"
    }, {
      "left" : "hideLocked();",
      "right" : "hideLocked();",
      "info" : "ExpressionStatement[18494-18507]:ExpressionStatement[18549-18562]"
    }, {
      "left" : "if (isShowing())",
      "right" : "if (isShowing())",
      "info" : "IfStatement[18539-18631]:IfStatement[18594-18686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18556-18631]:Block[18611-18686]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[18586-18605]:ExpressionStatement[18641-18660]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18674-18680]:BreakStatement[18729-18735]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18697-18705]:SwitchCase[18752-18760]"
    }, {
      "left" : "if (DEBUG_SIM_STATES)",
      "right" : "if (DEBUG_SIM_STATES)",
      "info" : "IfStatement[18726-18790]:IfStatement[18781-18845]"
    }, {
      "left" : "Log.v(TAG, \"Ignoring state: \" + simState);",
      "right" : "Log.v(TAG, \"Ignoring state: \" + simState);",
      "info" : "ExpressionStatement[18748-18790]:ExpressionStatement[18803-18845]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18811-18817]:BreakStatement[18866-18872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18851-18857]:Modifier[18906-18912]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18858-18862]:PrimitiveType[18913-18917]"
    }, {
      "left" : "onFingerprintRecognized",
      "right" : "onFingerprintRecognized",
      "info" : "SimpleName[18863-18886]:SimpleName[18918-18941]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[18887-18897]:SingleVariableDeclaration[18942-18952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18899-18964]:Block[18954-19019]"
    }, {
      "left" : "mViewMediatorCallback.keyguardDone(true);",
      "right" : "mViewMediatorCallback.keyguardDone(true);",
      "info" : "ExpressionStatement[18913-18954]:ExpressionStatement[18968-19009]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18975-18984]:MarkerAnnotation[19030-19039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18993-18999]:Modifier[19048-19054]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19000-19004]:PrimitiveType[19055-19059]"
    }, {
      "left" : "onFingerprintAttemptFailed",
      "right" : "onFingerprintAttemptFailed",
      "info" : "SimpleName[19005-19031]:SimpleName[19060-19086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19034-19306]:Block[19089-19361]"
    }, {
      "left" : "if (mUpdateMonitor.isMaxFingerprintAttemptsReached()\n                    && !mStatusBarKeyguardViewManager.isBouncerShowing())",
      "right" : "if (mUpdateMonitor.isMaxFingerprintAttemptsReached()\n                    && !mStatusBarKeyguardViewManager.isBouncerShowing())",
      "info" : "IfStatement[19048-19268]:IfStatement[19103-19323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19175-19268]:Block[19230-19323]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.showBouncerHideNotifications();",
      "right" : "mStatusBarKeyguardViewManager.showBouncerHideNotifications();",
      "info" : "ExpressionStatement[19193-19254]:ExpressionStatement[19248-19309]"
    }, {
      "left" : "userActivity();",
      "right" : "userActivity();",
      "info" : "ExpressionStatement[19281-19296]:ExpressionStatement[19336-19351]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19402-19408]:Modifier[19457-19463]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19409-19413]:PrimitiveType[19464-19468]"
    }, {
      "left" : "userActivity",
      "right" : "userActivity",
      "info" : "SimpleName[19414-19426]:SimpleName[19469-19481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19429-19494]:Block[19484-19549]"
    }, {
      "left" : "KeyguardViewMediator.this.userActivity();",
      "right" : "KeyguardViewMediator.this.userActivity();",
      "info" : "ExpressionStatement[19443-19484]:ExpressionStatement[19498-19539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19504-19510]:Modifier[19559-19565]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19511-19515]:PrimitiveType[19566-19570]"
    }, {
      "left" : "keyguardDone",
      "right" : "keyguardDone",
      "info" : "SimpleName[19516-19528]:SimpleName[19571-19583]"
    }, {
      "left" : "boolean authenticated",
      "right" : "boolean authenticated",
      "info" : "SingleVariableDeclaration[19529-19550]:SingleVariableDeclaration[19584-19605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19552-19695]:Block[19607-19750]"
    }, {
      "left" : "if (!mKeyguardDonePending)",
      "right" : "if (!mKeyguardDonePending)",
      "info" : "IfStatement[19566-19685]:IfStatement[19621-19740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19593-19685]:Block[19648-19740]"
    }, {
      "left" : "KeyguardViewMediator.this.keyguardDone(authenticated, true);",
      "right" : "KeyguardViewMediator.this.keyguardDone(authenticated, true);",
      "info" : "ExpressionStatement[19611-19671]:ExpressionStatement[19666-19726]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19705-19711]:Modifier[19760-19766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19712-19716]:PrimitiveType[19767-19771]"
    }, {
      "left" : "keyguardDoneDrawing",
      "right" : "keyguardDoneDrawing",
      "info" : "SimpleName[19717-19736]:SimpleName[19772-19791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19739-19812]:Block[19794-19867]"
    }, {
      "left" : "mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);",
      "right" : "mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);",
      "info" : "ExpressionStatement[19753-19802]:ExpressionStatement[19808-19857]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19822-19831]:MarkerAnnotation[19877-19886]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19840-19846]:Modifier[19895-19901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19847-19851]:PrimitiveType[19902-19906]"
    }, {
      "left" : "setNeedsInput",
      "right" : "setNeedsInput",
      "info" : "SimpleName[19852-19865]:SimpleName[19907-19920]"
    }, {
      "left" : "boolean needsInput",
      "right" : "boolean needsInput",
      "info" : "SingleVariableDeclaration[19866-19884]:SingleVariableDeclaration[19921-19939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19886-19966]:Block[19941-20021]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.setNeedsInput(needsInput);",
      "right" : "mStatusBarKeyguardViewManager.setNeedsInput(needsInput);",
      "info" : "ExpressionStatement[19900-19956]:ExpressionStatement[19955-20011]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19976-19985]:MarkerAnnotation[20031-20040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19994-20000]:Modifier[20049-20055]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20001-20005]:PrimitiveType[20056-20060]"
    }, {
      "left" : "onUserActivityTimeoutChanged",
      "right" : "onUserActivityTimeoutChanged",
      "info" : "SimpleName[20006-20034]:SimpleName[20061-20089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20037-20119]:Block[20092-20174]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.updateUserActivityTimeout();",
      "right" : "mStatusBarKeyguardViewManager.updateUserActivityTimeout();",
      "info" : "ExpressionStatement[20051-20109]:ExpressionStatement[20106-20164]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20129-20138]:MarkerAnnotation[20184-20193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20147-20153]:Modifier[20202-20208]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20154-20158]:PrimitiveType[20209-20213]"
    }, {
      "left" : "keyguardDonePending",
      "right" : "keyguardDonePending",
      "info" : "SimpleName[20159-20178]:SimpleName[20214-20233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20181-20494]:Block[20236-20549]"
    }, {
      "left" : "mKeyguardDonePending = true;",
      "right" : "mKeyguardDonePending = true;",
      "info" : "ExpressionStatement[20195-20223]:ExpressionStatement[20250-20278]"
    }, {
      "left" : "mHideAnimationRun = true;",
      "right" : "mHideAnimationRun = true;",
      "info" : "ExpressionStatement[20236-20261]:ExpressionStatement[20291-20316]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.startPreHideAnimation(null /* finishRunnable */);",
      "right" : "mStatusBarKeyguardViewManager.startPreHideAnimation(null /* finishRunnable */);",
      "info" : "ExpressionStatement[20274-20353]:ExpressionStatement[20329-20408]"
    }, {
      "left" : "mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_PENDING_TIMEOUT,\n                    KEYGUARD_DONE_PENDING_TIMEOUT_MS);",
      "right" : "mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_PENDING_TIMEOUT,\n                    KEYGUARD_DONE_PENDING_TIMEOUT_MS);",
      "info" : "ExpressionStatement[20366-20484]:ExpressionStatement[20421-20539]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20504-20513]:MarkerAnnotation[20559-20568]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20522-20528]:Modifier[20577-20583]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20529-20533]:PrimitiveType[20584-20588]"
    }, {
      "left" : "keyguardGone",
      "right" : "keyguardGone",
      "info" : "SimpleName[20534-20546]:SimpleName[20589-20601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20549-20604]:Block[20604-20659]"
    }, {
      "left" : "mKeyguardDisplayManager.hide();",
      "right" : "mKeyguardDisplayManager.hide();",
      "info" : "ExpressionStatement[20563-20594]:ExpressionStatement[20618-20649]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20614-20623]:MarkerAnnotation[20669-20678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20632-20638]:Modifier[20687-20693]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20639-20643]:PrimitiveType[20694-20698]"
    }, {
      "left" : "readyForKeyguardDone",
      "right" : "readyForKeyguardDone",
      "info" : "SimpleName[20644-20664]:SimpleName[20699-20719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20667-20957]:Block[20722-21012]"
    }, {
      "left" : "if (mKeyguardDonePending)",
      "right" : "if (mKeyguardDonePending)",
      "info" : "IfStatement[20681-20947]:IfStatement[20736-21002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20707-20947]:Block[20762-21002]"
    }, {
      "left" : "KeyguardViewMediator.this.keyguardDone(true /* authenticated */, true /* wakeUp */);",
      "right" : "KeyguardViewMediator.this.keyguardDone(true /* authenticated */, true /* wakeUp */);",
      "info" : "ExpressionStatement[20849-20933]:ExpressionStatement[20904-20988]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20967-20976]:MarkerAnnotation[21022-21031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20985-20991]:Modifier[21040-21046]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20992-20996]:PrimitiveType[21047-21051]"
    }, {
      "left" : "playTrustedSound",
      "right" : "playTrustedSound",
      "info" : "SimpleName[20997-21013]:SimpleName[21052-21068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21016-21085]:Block[21071-21140]"
    }, {
      "left" : "KeyguardViewMediator.this.playTrustedSound();",
      "right" : "KeyguardViewMediator.this.playTrustedSound();",
      "info" : "ExpressionStatement[21030-21075]:ExpressionStatement[21085-21130]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21095-21104]:MarkerAnnotation[21150-21159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21113-21119]:Modifier[21168-21174]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21120-21127]:PrimitiveType[21175-21182]"
    }, {
      "left" : "isInputRestricted",
      "right" : "isInputRestricted",
      "info" : "SimpleName[21128-21145]:SimpleName[21183-21200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21148-21225]:Block[21203-21280]"
    }, {
      "left" : "return KeyguardViewMediator.this.isInputRestricted();",
      "right" : "return KeyguardViewMediator.this.isInputRestricted();",
      "info" : "ReturnStatement[21162-21215]:ReturnStatement[21217-21270]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21238-21244]:Modifier[21293-21299]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21245-21249]:PrimitiveType[21300-21304]"
    }, {
      "left" : "userActivity",
      "right" : "userActivity",
      "info" : "SimpleName[21250-21262]:SimpleName[21305-21317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21265-21333]:Block[21320-21388]"
    }, {
      "left" : "mPM.userActivity(SystemClock.uptimeMillis(), false);",
      "right" : "mPM.userActivity(SystemClock.uptimeMillis(), false);",
      "info" : "ExpressionStatement[21275-21327]:ExpressionStatement[21330-21382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21339-21346]:Modifier[21394-21401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21347-21351]:PrimitiveType[21402-21406]"
    }, {
      "left" : "setupLocked",
      "right" : "setupLocked",
      "info" : "SimpleName[21352-21363]:SimpleName[21407-21418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21366-24560]:Block[21421-24615]"
    }, {
      "left" : "mPM = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);",
      "right" : "mPM = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);",
      "info" : "ExpressionStatement[21376-21446]:ExpressionStatement[21431-21501]"
    }, {
      "left" : "mWM = WindowManagerGlobal.getWindowManagerService();",
      "right" : "mWM = WindowManagerGlobal.getWindowManagerService();",
      "info" : "ExpressionStatement[21455-21507]:ExpressionStatement[21510-21562]"
    }, {
      "left" : "mTrustManager = (TrustManager) mContext.getSystemService(Context.TRUST_SERVICE);",
      "right" : "mTrustManager = (TrustManager) mContext.getSystemService(Context.TRUST_SERVICE);",
      "info" : "ExpressionStatement[21516-21596]:ExpressionStatement[21571-21651]"
    }, {
      "left" : "mShowKeyguardWakeLock = mPM.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"show keyguard\");",
      "right" : "mShowKeyguardWakeLock = mPM.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"show keyguard\");",
      "info" : "ExpressionStatement[21606-21695]:ExpressionStatement[21661-21750]"
    }, {
      "left" : "mShowKeyguardWakeLock.setReferenceCounted(false);",
      "right" : "mShowKeyguardWakeLock.setReferenceCounted(false);",
      "info" : "ExpressionStatement[21704-21753]:ExpressionStatement[21759-21808]"
    }, {
      "left" : "mProfileManager = ProfileManager.getInstance(mContext);",
      "right" : "mProfileManager = ProfileManager.getInstance(mContext);",
      "info" : "ExpressionStatement[21762-21817]:ExpressionStatement[21817-21872]"
    }, {
      "left" : "mContext.registerReceiver(mBroadcastReceiver, new IntentFilter(DELAYED_KEYGUARD_ACTION));",
      "right" : "mContext.registerReceiver(mBroadcastReceiver, new IntentFilter(DELAYED_KEYGUARD_ACTION));",
      "info" : "ExpressionStatement[21826-21915]:ExpressionStatement[21881-21970]"
    }, {
      "left" : "mContext.registerReceiver(mBroadcastReceiver, new IntentFilter(DISMISS_KEYGUARD_SECURELY_ACTION),\n                android.Manifest.permission.CONTROL_KEYGUARD, null);",
      "right" : "mContext.registerReceiver(mBroadcastReceiver, new IntentFilter(DISMISS_KEYGUARD_SECURELY_ACTION),\n                android.Manifest.permission.CONTROL_KEYGUARD, null);",
      "info" : "ExpressionStatement[21924-22090]:ExpressionStatement[21979-22145]"
    }, {
      "left" : "mContext.registerReceiver(mBroadcastReceiver, new IntentFilter(KEYGUARD_SERVICE_ACTION_STATE_CHANGE),\n                android.Manifest.permission.CONTROL_KEYGUARD, null);",
      "right" : "mContext.registerReceiver(mBroadcastReceiver, new IntentFilter(KEYGUARD_SERVICE_ACTION_STATE_CHANGE),\n                android.Manifest.permission.CONTROL_KEYGUARD, null);",
      "info" : "ExpressionStatement[22099-22269]:ExpressionStatement[22154-22324]"
    }, {
      "left" : "mKeyguardDisplayManager = new KeyguardDisplayManager(mContext);",
      "right" : "mKeyguardDisplayManager = new KeyguardDisplayManager(mContext);",
      "info" : "ExpressionStatement[22279-22342]:ExpressionStatement[22334-22397]"
    }, {
      "left" : "mAlarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);",
      "right" : "mAlarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);",
      "info" : "ExpressionStatement[22352-22432]:ExpressionStatement[22407-22487]"
    }, {
      "left" : "mUpdateMonitor = KeyguardUpdateMonitor.getInstance(mContext);",
      "right" : "mUpdateMonitor = KeyguardUpdateMonitor.getInstance(mContext);",
      "info" : "ExpressionStatement[22442-22503]:ExpressionStatement[22497-22558]"
    }, {
      "left" : "mLockPatternUtils = new LockPatternUtils(mContext);",
      "right" : "mLockPatternUtils = new LockPatternUtils(mContext);",
      "info" : "ExpressionStatement[22513-22564]:ExpressionStatement[22568-22619]"
    }, {
      "left" : "mLockPatternUtils.setCurrentUser(ActivityManager.getCurrentUser());",
      "right" : "mLockPatternUtils.setCurrentUser(ActivityManager.getCurrentUser());",
      "info" : "ExpressionStatement[22573-22640]:ExpressionStatement[22628-22695]"
    }, {
      "left" : "setShowingLocked(!shouldWaitForProvisioning() && !mLockPatternUtils.isLockScreenDisabled());",
      "right" : "setShowingLocked(!shouldWaitForProvisioning() && !mLockPatternUtils.isLockScreenDisabled());",
      "info" : "ExpressionStatement[22737-22829]:ExpressionStatement[22792-22884]"
    }, {
      "left" : "mTrustManager.reportKeyguardShowingChanged();",
      "right" : "mTrustManager.reportKeyguardShowingChanged();",
      "info" : "ExpressionStatement[22838-22883]:ExpressionStatement[22893-22938]"
    }, {
      "left" : "mStatusBarKeyguardViewManager = new StatusBarKeyguardViewManager(mContext,\n                mViewMediatorCallback, mLockPatternUtils);",
      "right" : "mStatusBarKeyguardViewManager = new StatusBarKeyguardViewManager(mContext,\n                mViewMediatorCallback, mLockPatternUtils);",
      "info" : "ExpressionStatement[22893-23026]:ExpressionStatement[22948-23081]"
    }, {
      "left" : "final ContentResolver cr = mContext.getContentResolver();",
      "right" : "final ContentResolver cr = mContext.getContentResolver();",
      "info" : "VariableDeclarationStatement[23035-23092]:VariableDeclarationStatement[23090-23147]"
    }, {
      "left" : "mScreenOn = mPM.isScreenOn();",
      "right" : "mScreenOn = mPM.isScreenOn();",
      "info" : "ExpressionStatement[23102-23131]:ExpressionStatement[23157-23186]"
    }, {
      "left" : "mLockSounds = new SoundPool(1, AudioManager.STREAM_SYSTEM, 0);",
      "right" : "mLockSounds = new SoundPool(1, AudioManager.STREAM_SYSTEM, 0);",
      "info" : "ExpressionStatement[23141-23203]:ExpressionStatement[23196-23258]"
    }, {
      "left" : "String soundPath = Settings.Global.getString(cr, Settings.Global.LOCK_SOUND);",
      "right" : "String soundPath = Settings.Global.getString(cr, Settings.Global.LOCK_SOUND);",
      "info" : "VariableDeclarationStatement[23212-23289]:VariableDeclarationStatement[23267-23344]"
    }, {
      "left" : "if (soundPath != null)",
      "right" : "if (soundPath != null)",
      "info" : "IfStatement[23298-23391]:IfStatement[23353-23446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23321-23391]:Block[23376-23446]"
    }, {
      "left" : "mLockSoundId = mLockSounds.load(soundPath, 1);",
      "right" : "mLockSoundId = mLockSounds.load(soundPath, 1);",
      "info" : "ExpressionStatement[23335-23381]:ExpressionStatement[23390-23436]"
    }, {
      "left" : "if (soundPath == null || mLockSoundId == 0)",
      "right" : "if (soundPath == null || mLockSoundId == 0)",
      "info" : "IfStatement[23400-23526]:IfStatement[23455-23581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23444-23526]:Block[23499-23581]"
    }, {
      "left" : "Log.w(TAG, \"failed to load lock sound from \" + soundPath);",
      "right" : "Log.w(TAG, \"failed to load lock sound from \" + soundPath);",
      "info" : "ExpressionStatement[23458-23516]:ExpressionStatement[23513-23571]"
    }, {
      "left" : "soundPath = Settings.Global.getString(cr, Settings.Global.UNLOCK_SOUND);",
      "right" : "soundPath = Settings.Global.getString(cr, Settings.Global.UNLOCK_SOUND);",
      "info" : "ExpressionStatement[23535-23607]:ExpressionStatement[23590-23662]"
    }, {
      "left" : "if (soundPath != null)",
      "right" : "if (soundPath != null)",
      "info" : "IfStatement[23616-23711]:IfStatement[23671-23766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23639-23711]:Block[23694-23766]"
    }, {
      "left" : "mUnlockSoundId = mLockSounds.load(soundPath, 1);",
      "right" : "mUnlockSoundId = mLockSounds.load(soundPath, 1);",
      "info" : "ExpressionStatement[23653-23701]:ExpressionStatement[23708-23756]"
    }, {
      "left" : "if (soundPath == null || mUnlockSoundId == 0)",
      "right" : "if (soundPath == null || mUnlockSoundId == 0)",
      "info" : "IfStatement[23720-23850]:IfStatement[23775-23905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23766-23850]:Block[23821-23905]"
    }, {
      "left" : "Log.w(TAG, \"failed to load unlock sound from \" + soundPath);",
      "right" : "Log.w(TAG, \"failed to load unlock sound from \" + soundPath);",
      "info" : "ExpressionStatement[23780-23840]:ExpressionStatement[23835-23895]"
    }, {
      "left" : "soundPath = Settings.Global.getString(cr, Settings.Global.TRUSTED_SOUND);",
      "right" : "soundPath = Settings.Global.getString(cr, Settings.Global.TRUSTED_SOUND);",
      "info" : "ExpressionStatement[23859-23932]:ExpressionStatement[23914-23987]"
    }, {
      "left" : "if (soundPath != null)",
      "right" : "if (soundPath != null)",
      "info" : "IfStatement[23941-24037]:IfStatement[23996-24092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23964-24037]:Block[24019-24092]"
    }, {
      "left" : "mTrustedSoundId = mLockSounds.load(soundPath, 1);",
      "right" : "mTrustedSoundId = mLockSounds.load(soundPath, 1);",
      "info" : "ExpressionStatement[23978-24027]:ExpressionStatement[24033-24082]"
    }, {
      "left" : "if (soundPath == null || mTrustedSoundId == 0)",
      "right" : "if (soundPath == null || mTrustedSoundId == 0)",
      "info" : "IfStatement[24046-24178]:IfStatement[24101-24233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24093-24178]:Block[24148-24233]"
    }, {
      "left" : "Log.w(TAG, \"failed to load trusted sound from \" + soundPath);",
      "right" : "Log.w(TAG, \"failed to load trusted sound from \" + soundPath);",
      "info" : "ExpressionStatement[24107-24168]:ExpressionStatement[24162-24223]"
    }, {
      "left" : "int lockSoundDefaultAttenuation = mContext.getResources().getInteger(\n                com.android.internal.R.integer.config_lockSoundVolumeDb);",
      "right" : "int lockSoundDefaultAttenuation = mContext.getResources().getInteger(\n                com.android.internal.R.integer.config_lockSoundVolumeDb);",
      "info" : "VariableDeclarationStatement[24188-24331]:VariableDeclarationStatement[24243-24386]"
    }, {
      "left" : "mLockSoundVolume = (float)Math.pow(10, (float)lockSoundDefaultAttenuation/20);",
      "right" : "mLockSoundVolume = (float)Math.pow(10, (float)lockSoundDefaultAttenuation/20);",
      "info" : "ExpressionStatement[24340-24418]:ExpressionStatement[24395-24473]"
    }, {
      "left" : "mHideAnimation = AnimationUtils.loadAnimation(mContext,\n                com.android.internal.R.anim.lock_screen_behind_enter);",
      "right" : "mHideAnimation = AnimationUtils.loadAnimation(mContext,\n                com.android.internal.R.anim.lock_screen_behind_enter);",
      "info" : "ExpressionStatement[24428-24554]:ExpressionStatement[24483-24609]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24566-24575]:MarkerAnnotation[24621-24630]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24580-24586]:Modifier[24635-24641]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24587-24591]:PrimitiveType[24642-24646]"
    }, {
      "left" : "start",
      "right" : "start",
      "info" : "SimpleName[24592-24597]:SimpleName[24647-24652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24600-24730]:Block[24655-24785]"
    }, {
      "left" : "synchronized (this) {\n            setupLocked();\n        }",
      "right" : "synchronized (this) {\n            setupLocked();\n        }",
      "info" : "SynchronizedStatement[24610-24668]:SynchronizedStatement[24665-24723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24630-24668]:Block[24685-24723]"
    }, {
      "left" : "setupLocked();",
      "right" : "setupLocked();",
      "info" : "ExpressionStatement[24644-24658]:ExpressionStatement[24699-24713]"
    }, {
      "left" : "putComponent(KeyguardViewMediator.class, this);",
      "right" : "putComponent(KeyguardViewMediator.class, this);",
      "info" : "ExpressionStatement[24677-24724]:ExpressionStatement[24732-24779]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24811-24817]:Modifier[24866-24872]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24818-24822]:PrimitiveType[24873-24877]"
    }, {
      "left" : "onSystemReady",
      "right" : "onSystemReady",
      "info" : "SimpleName[24823-24836]:SimpleName[24878-24891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24839-26394]:Block[24894-26449]"
    }, {
      "left" : "mSearchManager = (SearchManager) mContext.getSystemService(Context.SEARCH_SERVICE);",
      "right" : "mSearchManager = (SearchManager) mContext.getSystemService(Context.SEARCH_SERVICE);",
      "info" : "ExpressionStatement[24849-24932]:ExpressionStatement[24904-24987]"
    }, {
      "left" : "synchronized (this) {\n            if (DEBUG) Log.d(TAG, \"onSystemReady\");\n            mSystemReady = true;\n            mUpdateMonitor.registerCallback(mUpdateCallback);\n\n            // Suppress biometric unlock right after boot until things have settled if it is the\n            // selected security method, otherwise unsuppress it.  It must be unsuppressed if it is\n            // not the selected security method for the following reason:  if the user starts\n            // without a screen lock selected, the biometric unlock would be suppressed the first\n            // time they try to use it.\n            //\n            // Note that the biometric unlock will still not show if it is not the selected method.\n            // Calling setAlternateUnlockEnabled(true) simply says don't suppress it if it is the\n            // selected method.\n            if (mLockPatternUtils.usingBiometricWeak()\n                    && mLockPatternUtils.isBiometricWeakInstalled()) {\n                if (DEBUG) Log.d(TAG, \"suppressing biometric unlock during boot\");\n                mUpdateMonitor.setAlternateUnlockEnabled(false);\n            } else {\n                mUpdateMonitor.setAlternateUnlockEnabled(true);\n            }\n\n            doKeyguardLocked(null);\n        }",
      "right" : "synchronized (this) {\n            if (DEBUG) Log.d(TAG, \"onSystemReady\");\n            mSystemReady = true;\n            mUpdateMonitor.registerCallback(mUpdateCallback);\n\n            // Suppress biometric unlock right after boot until things have settled if it is the\n            // selected security method, otherwise unsuppress it.  It must be unsuppressed if it is\n            // not the selected security method for the following reason:  if the user starts\n            // without a screen lock selected, the biometric unlock would be suppressed the first\n            // time they try to use it.\n            //\n            // Note that the biometric unlock will still not show if it is not the selected method.\n            // Calling setAlternateUnlockEnabled(true) simply says don't suppress it if it is the\n            // selected method.\n            if (mLockPatternUtils.usingBiometricWeak()\n                    && mLockPatternUtils.isBiometricWeakInstalled()) {\n                if (DEBUG) Log.d(TAG, \"suppressing biometric unlock during boot\");\n                mUpdateMonitor.setAlternateUnlockEnabled(false);\n            } else {\n                mUpdateMonitor.setAlternateUnlockEnabled(true);\n            }\n\n            doKeyguardLocked(null);\n        }",
      "info" : "SynchronizedStatement[24941-26204]:SynchronizedStatement[24996-26259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24961-26204]:Block[25016-26259]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[24975-25014]:IfStatement[25030-25069]"
    }, {
      "left" : "Log.d(TAG, \"onSystemReady\");",
      "right" : "Log.d(TAG, \"onSystemReady\");",
      "info" : "ExpressionStatement[24986-25014]:ExpressionStatement[25041-25069]"
    }, {
      "left" : "mSystemReady = true;",
      "right" : "mSystemReady = true;",
      "info" : "ExpressionStatement[25027-25047]:ExpressionStatement[25082-25102]"
    }, {
      "left" : "mUpdateMonitor.registerCallback(mUpdateCallback);",
      "right" : "mUpdateMonitor.registerCallback(mUpdateCallback);",
      "info" : "ExpressionStatement[25060-25109]:ExpressionStatement[25115-25164]"
    }, {
      "left" : "if (mLockPatternUtils.usingBiometricWeak()\n                    && mLockPatternUtils.isBiometricWeakInstalled())",
      "right" : "if (mLockPatternUtils.usingBiometricWeak()\n                    && mLockPatternUtils.isBiometricWeakInstalled())",
      "info" : "IfStatement[25797-26157]:IfStatement[25852-26212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25909-26072]:Block[25964-26127]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[25927-25993]:IfStatement[25982-26048]"
    }, {
      "left" : "Log.d(TAG, \"suppressing biometric unlock during boot\");",
      "right" : "Log.d(TAG, \"suppressing biometric unlock during boot\");",
      "info" : "ExpressionStatement[25938-25993]:ExpressionStatement[25993-26048]"
    }, {
      "left" : "mUpdateMonitor.setAlternateUnlockEnabled(false);",
      "right" : "mUpdateMonitor.setAlternateUnlockEnabled(false);",
      "info" : "ExpressionStatement[26010-26058]:ExpressionStatement[26065-26113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26078-26157]:Block[26133-26212]"
    }, {
      "left" : "mUpdateMonitor.setAlternateUnlockEnabled(true);",
      "right" : "mUpdateMonitor.setAlternateUnlockEnabled(true);",
      "info" : "ExpressionStatement[26096-26143]:ExpressionStatement[26151-26198]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[26171-26194]:ExpressionStatement[26226-26249]"
    }, {
      "left" : "maybeSendUserPresentBroadcast();",
      "right" : "maybeSendUserPresentBroadcast();",
      "info" : "ExpressionStatement[26356-26388]:ExpressionStatement[26411-26443]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26635-26641]:Modifier[26690-26696]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26642-26646]:PrimitiveType[26697-26701]"
    }, {
      "left" : "onScreenTurnedOff",
      "right" : "onScreenTurnedOff",
      "info" : "SimpleName[26647-26664]:SimpleName[26702-26719]"
    }, {
      "left" : "int why",
      "right" : "int why",
      "info" : "SingleVariableDeclaration[26665-26672]:SingleVariableDeclaration[26720-26727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26674-28352]:Block[26729-28407]"
    }, {
      "left" : "synchronized (this) {\n            mScreenOn = false;\n            if (DEBUG) Log.d(TAG, \"onScreenTurnedOff(\" + why + \")\");\n\n            resetKeyguardDonePendingLocked();\n            mHideAnimationRun = false;\n\n            // Lock immediately based on setting if secure (user has a pin/pattern/password).\n            // This also \"locks\" the device when not secure to provide easy access to the\n            // camera while preventing unwanted input.\n            final boolean lockImmediately =\n                mLockPatternUtils.getPowerButtonInstantlyLocks() || !mLockPatternUtils.isSecure()\n                    || mLockPatternUtils.usingFingerprint();\n\n            notifyScreenOffLocked();\n\n            if (mExitSecureCallback != null) {\n                if (DEBUG) Log.d(TAG, \"pending exit secure callback cancelled\");\n                try {\n                    mExitSecureCallback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n                mExitSecureCallback = null;\n                if (!mInternallyDisabled && !mExternallyEnabled) {\n                    hideLocked();\n                }\n            } else if (mShowing) {\n                resetStateLocked();\n            } else if (why == WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT\n                   || (why == WindowManagerPolicy.OFF_BECAUSE_OF_USER && !lockImmediately)) {\n                doKeyguardLaterLocked();\n            } else {\n                doKeyguardLocked(null);\n            }\n        }",
      "right" : "synchronized (this) {\n            mScreenOn = false;\n            if (DEBUG) Log.d(TAG, \"onScreenTurnedOff(\" + why + \")\");\n\n            resetKeyguardDonePendingLocked();\n            mHideAnimationRun = false;\n\n            // Lock immediately based on setting if secure (user has a pin/pattern/password).\n            // This also \"locks\" the device when not secure to provide easy access to the\n            // camera while preventing unwanted input.\n            final boolean lockImmediately =\n                mLockPatternUtils.getPowerButtonInstantlyLocks() || !mLockPatternUtils.isSecure()\n                    || mLockPatternUtils.usingFingerprint();\n\n            notifyScreenOffLocked();\n\n            if (mExitSecureCallback != null) {\n                if (DEBUG) Log.d(TAG, \"pending exit secure callback cancelled\");\n                try {\n                    mExitSecureCallback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n                mExitSecureCallback = null;\n                if (!mInternallyDisabled && !mExternallyEnabled) {\n                    hideLocked();\n                }\n            } else if (mShowing) {\n                resetStateLocked();\n            } else if (why == WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT\n                   || (why == WindowManagerPolicy.OFF_BECAUSE_OF_USER && !lockImmediately)) {\n                doKeyguardLaterLocked();\n            } else {\n                doKeyguardLocked(null);\n            }\n        }",
      "info" : "SynchronizedStatement[26684-28265]:SynchronizedStatement[26739-28320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26704-28265]:Block[26759-28320]"
    }, {
      "left" : "mScreenOn = false;",
      "right" : "mScreenOn = false;",
      "info" : "ExpressionStatement[26718-26736]:ExpressionStatement[26773-26791]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[26749-26805]:IfStatement[26804-26860]"
    }, {
      "left" : "Log.d(TAG, \"onScreenTurnedOff(\" + why + \")\");",
      "right" : "Log.d(TAG, \"onScreenTurnedOff(\" + why + \")\");",
      "info" : "ExpressionStatement[26760-26805]:ExpressionStatement[26815-26860]"
    }, {
      "left" : "resetKeyguardDonePendingLocked();",
      "right" : "resetKeyguardDonePendingLocked();",
      "info" : "ExpressionStatement[26819-26852]:ExpressionStatement[26874-26907]"
    }, {
      "left" : "mHideAnimationRun = false;",
      "right" : "mHideAnimationRun = false;",
      "info" : "ExpressionStatement[26865-26891]:ExpressionStatement[26920-26946]"
    }, {
      "left" : "final boolean lockImmediately =\n                mLockPatternUtils.getPowerButtonInstantlyLocks() || !mLockPatternUtils.isSecure()\n                    || mLockPatternUtils.usingFingerprint();",
      "right" : "final boolean lockImmediately =\n                mLockPatternUtils.getPowerButtonInstantlyLocks() || !mLockPatternUtils.isSecure()\n                    || mLockPatternUtils.usingFingerprint();",
      "info" : "VariableDeclarationStatement[27144-27334]:VariableDeclarationStatement[27199-27389]"
    }, {
      "left" : "notifyScreenOffLocked();",
      "right" : "notifyScreenOffLocked();",
      "info" : "ExpressionStatement[27348-27372]:ExpressionStatement[27403-27427]"
    }, {
      "left" : "if (mExitSecureCallback != null)",
      "right" : "if (mExitSecureCallback != null)",
      "info" : "IfStatement[27386-28255]:IfStatement[27441-28310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27419-27915]:Block[27474-27970]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[27437-27501]:IfStatement[27492-27556]"
    }, {
      "left" : "Log.d(TAG, \"pending exit secure callback cancelled\");",
      "right" : "Log.d(TAG, \"pending exit secure callback cancelled\");",
      "info" : "ExpressionStatement[27448-27501]:ExpressionStatement[27503-27556]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27518-27738]:TryStatement[27573-27793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27522-27610]:Block[27577-27665]"
    }, {
      "left" : "mExitSecureCallback.onKeyguardExitResult(false);",
      "right" : "mExitSecureCallback.onKeyguardExitResult(false);",
      "info" : "ExpressionStatement[27544-27592]:ExpressionStatement[27599-27647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27637-27738]:Block[27692-27793]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "info" : "ExpressionStatement[27659-27720]:ExpressionStatement[27714-27775]"
    }, {
      "left" : "mExitSecureCallback = null;",
      "right" : "mExitSecureCallback = null;",
      "info" : "ExpressionStatement[27755-27782]:ExpressionStatement[27810-27837]"
    }, {
      "left" : "if (!mInternallyDisabled && !mExternallyEnabled)",
      "right" : "if (!mInternallyDisabled && !mExternallyEnabled)",
      "info" : "IfStatement[27799-27901]:IfStatement[27854-27956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27848-27901]:Block[27903-27956]"
    }, {
      "left" : "hideLocked();",
      "right" : "hideLocked();",
      "info" : "ExpressionStatement[27870-27883]:ExpressionStatement[27925-27938]"
    }, {
      "left" : "if (mShowing)",
      "right" : "if (mShowing)",
      "info" : "IfStatement[27921-28255]:IfStatement[27976-28310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27935-27986]:Block[27990-28041]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[27953-27972]:ExpressionStatement[28008-28027]"
    }, {
      "left" : "if (why == WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT\n                   || (why == WindowManagerPolicy.OFF_BECAUSE_OF_USER && !lockImmediately))",
      "right" : "if (why == WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT\n                   || (why == WindowManagerPolicy.OFF_BECAUSE_OF_USER && !lockImmediately))",
      "info" : "IfStatement[27992-28255]:IfStatement[28047-28310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28138-28194]:Block[28193-28249]"
    }, {
      "left" : "doKeyguardLaterLocked();",
      "right" : "doKeyguardLaterLocked();",
      "info" : "ExpressionStatement[28156-28180]:ExpressionStatement[28211-28235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28200-28255]:Block[28255-28310]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[28218-28241]:ExpressionStatement[28273-28296]"
    }, {
      "left" : "KeyguardUpdateMonitor.getInstance(mContext).dispatchScreenTurndOff(why);",
      "right" : "KeyguardUpdateMonitor.getInstance(mContext).dispatchScreenTurndOff(why);",
      "info" : "ExpressionStatement[28274-28346]:ExpressionStatement[28329-28401]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28358-28365]:Modifier[28413-28420]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28366-28370]:PrimitiveType[28421-28425]"
    }, {
      "left" : "doKeyguardLaterLocked",
      "right" : "doKeyguardLaterLocked",
      "info" : "SimpleName[28371-28392]:SimpleName[28426-28447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28395-30484]:Block[28450-30539]"
    }, {
      "left" : "final ContentResolver cr = mContext.getContentResolver();",
      "right" : "final ContentResolver cr = mContext.getContentResolver();",
      "info" : "VariableDeclarationStatement[28738-28795]:VariableDeclarationStatement[28793-28850]"
    }, {
      "left" : "long displayTimeout = Settings.System.getInt(cr, SCREEN_OFF_TIMEOUT,\n                KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT);",
      "right" : "long displayTimeout = Settings.System.getInt(cr, SCREEN_OFF_TIMEOUT,\n                KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT);",
      "info" : "VariableDeclarationStatement[28837-28962]:VariableDeclarationStatement[28892-29017]"
    }, {
      "left" : "final long lockAfterTimeout = Settings.Secure.getInt(cr,\n                Settings.Secure.LOCK_SCREEN_LOCK_AFTER_TIMEOUT,\n                KEYGUARD_LOCK_AFTER_DELAY_DEFAULT);",
      "right" : "final long lockAfterTimeout = Settings.Secure.getInt(cr,\n                Settings.Secure.LOCK_SCREEN_LOCK_AFTER_TIMEOUT,\n                KEYGUARD_LOCK_AFTER_DELAY_DEFAULT);",
      "info" : "VariableDeclarationStatement[29005-29177]:VariableDeclarationStatement[29060-29232]"
    }, {
      "left" : "final long policyTimeout = mLockPatternUtils.getDevicePolicyManager()\n                .getMaximumTimeToLock(null, mLockPatternUtils.getCurrentUser());",
      "right" : "final long policyTimeout = mLockPatternUtils.getDevicePolicyManager()\n                .getMaximumTimeToLock(null, mLockPatternUtils.getCurrentUser());",
      "info" : "VariableDeclarationStatement[29221-29371]:VariableDeclarationStatement[29276-29426]"
    }, {
      "left" : "long timeout;",
      "right" : "long timeout;",
      "info" : "VariableDeclarationStatement[29381-29394]:VariableDeclarationStatement[29436-29449]"
    }, {
      "left" : "if (policyTimeout > 0)",
      "right" : "if (policyTimeout > 0)",
      "info" : "IfStatement[29403-29736]:IfStatement[29458-29791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29426-29679]:Block[29481-29734]"
    }, {
      "left" : "displayTimeout = Math.max(displayTimeout, 0);",
      "right" : "displayTimeout = Math.max(displayTimeout, 0);",
      "info" : "ExpressionStatement[29516-29561]:ExpressionStatement[29571-29616]"
    }, {
      "left" : "timeout = Math.min(policyTimeout - displayTimeout, lockAfterTimeout);",
      "right" : "timeout = Math.min(policyTimeout - displayTimeout, lockAfterTimeout);",
      "info" : "ExpressionStatement[29600-29669]:ExpressionStatement[29655-29724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29685-29736]:Block[29740-29791]"
    }, {
      "left" : "timeout = lockAfterTimeout;",
      "right" : "timeout = lockAfterTimeout;",
      "info" : "ExpressionStatement[29699-29726]:ExpressionStatement[29754-29781]"
    }, {
      "left" : "if (timeout <= 0)",
      "right" : "if (timeout <= 0)",
      "info" : "IfStatement[29746-30478]:IfStatement[29801-30533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29764-29878]:Block[29819-29933]"
    }, {
      "left" : "mSuppressNextLockSound = true;",
      "right" : "mSuppressNextLockSound = true;",
      "info" : "ExpressionStatement[29802-29832]:ExpressionStatement[29857-29887]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[29845-29868]:ExpressionStatement[29900-29923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29884-30478]:Block[29939-30533]"
    }, {
      "left" : "long when = SystemClock.elapsedRealtime() + timeout;",
      "right" : "long when = SystemClock.elapsedRealtime() + timeout;",
      "info" : "VariableDeclarationStatement[29932-29984]:VariableDeclarationStatement[29987-30039]"
    }, {
      "left" : "Intent intent = new Intent(DELAYED_KEYGUARD_ACTION);",
      "right" : "Intent intent = new Intent(DELAYED_KEYGUARD_ACTION);",
      "info" : "VariableDeclarationStatement[29997-30049]:VariableDeclarationStatement[30052-30104]"
    }, {
      "left" : "intent.putExtra(\"seq\", mDelayedShowingSequence);",
      "right" : "intent.putExtra(\"seq\", mDelayedShowingSequence);",
      "info" : "ExpressionStatement[30062-30110]:ExpressionStatement[30117-30165]"
    }, {
      "left" : "PendingIntent sender = PendingIntent.getBroadcast(mContext,\n                    0, intent, PendingIntent.FLAG_CANCEL_CURRENT);",
      "right" : "PendingIntent sender = PendingIntent.getBroadcast(mContext,\n                    0, intent, PendingIntent.FLAG_CANCEL_CURRENT);",
      "info" : "VariableDeclarationStatement[30123-30249]:VariableDeclarationStatement[30178-30304]"
    }, {
      "left" : "mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, when, sender);",
      "right" : "mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, when, sender);",
      "info" : "ExpressionStatement[30262-30332]:ExpressionStatement[30317-30387]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[30345-30468]:IfStatement[30400-30523]"
    }, {
      "left" : "Log.d(TAG, \"setting alarm to turn off keyguard, seq = \"\n                             + mDelayedShowingSequence);",
      "right" : "Log.d(TAG, \"setting alarm to turn off keyguard, seq = \"\n                             + mDelayedShowingSequence);",
      "info" : "ExpressionStatement[30356-30468]:ExpressionStatement[30411-30523]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30490-30497]:Modifier[30545-30552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30498-30502]:PrimitiveType[30553-30557]"
    }, {
      "left" : "cancelDoKeyguardLaterLocked",
      "right" : "cancelDoKeyguardLaterLocked",
      "info" : "SimpleName[30503-30530]:SimpleName[30558-30585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30533-30575]:Block[30588-30630]"
    }, {
      "left" : "mDelayedShowingSequence++;",
      "right" : "mDelayedShowingSequence++;",
      "info" : "ExpressionStatement[30543-30569]:ExpressionStatement[30598-30624]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30644-30650]:Modifier[30699-30705]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30651-30655]:PrimitiveType[30706-30710]"
    }, {
      "left" : "onScreenTurnedOn",
      "right" : "onScreenTurnedOn",
      "info" : "SimpleName[30656-30672]:SimpleName[30711-30727]"
    }, {
      "left" : "IKeyguardShowCallback callback",
      "right" : "IKeyguardShowCallback callback",
      "info" : "SingleVariableDeclaration[30673-30703]:SingleVariableDeclaration[30728-30758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30705-31270]:Block[30760-31325]"
    }, {
      "left" : "synchronized (this) {\n            mScreenOn = true;\n            cancelDoKeyguardLaterLocked();\n            if (DEBUG) Log.d(TAG, \"onScreenTurnedOn, seq = \" + mDelayedShowingSequence);\n            if (callback != null) {\n                notifyScreenOnLocked(callback);\n            }\n            if (mDismissSecurelyOnScreenOn) {\n                mDismissSecurelyOnScreenOn = false;\n                dismiss();\n            }\n        }",
      "right" : "synchronized (this) {\n            mScreenOn = true;\n            cancelDoKeyguardLaterLocked();\n            if (DEBUG) Log.d(TAG, \"onScreenTurnedOn, seq = \" + mDelayedShowingSequence);\n            if (callback != null) {\n                notifyScreenOnLocked(callback);\n            }\n            if (mDismissSecurelyOnScreenOn) {\n                mDismissSecurelyOnScreenOn = false;\n                dismiss();\n            }\n        }",
      "info" : "SynchronizedStatement[30715-31145]:SynchronizedStatement[30770-31200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30735-31145]:Block[30790-31200]"
    }, {
      "left" : "mScreenOn = true;",
      "right" : "mScreenOn = true;",
      "info" : "ExpressionStatement[30749-30766]:ExpressionStatement[30804-30821]"
    }, {
      "left" : "cancelDoKeyguardLaterLocked();",
      "right" : "cancelDoKeyguardLaterLocked();",
      "info" : "ExpressionStatement[30779-30809]:ExpressionStatement[30834-30864]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[30822-30898]:IfStatement[30877-30953]"
    }, {
      "left" : "Log.d(TAG, \"onScreenTurnedOn, seq = \" + mDelayedShowingSequence);",
      "right" : "Log.d(TAG, \"onScreenTurnedOn, seq = \" + mDelayedShowingSequence);",
      "info" : "ExpressionStatement[30833-30898]:ExpressionStatement[30888-30953]"
    }, {
      "left" : "if (callback != null)",
      "right" : "if (callback != null)",
      "info" : "IfStatement[30911-30996]:IfStatement[30966-31051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30933-30996]:Block[30988-31051]"
    }, {
      "left" : "notifyScreenOnLocked(callback);",
      "right" : "notifyScreenOnLocked(callback);",
      "info" : "ExpressionStatement[30951-30982]:ExpressionStatement[31006-31037]"
    }, {
      "left" : "if (mDismissSecurelyOnScreenOn)",
      "right" : "if (mDismissSecurelyOnScreenOn)",
      "info" : "IfStatement[31009-31135]:IfStatement[31064-31190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31041-31135]:Block[31096-31190]"
    }, {
      "left" : "mDismissSecurelyOnScreenOn = false;",
      "right" : "mDismissSecurelyOnScreenOn = false;",
      "info" : "ExpressionStatement[31059-31094]:ExpressionStatement[31114-31149]"
    }, {
      "left" : "dismiss();",
      "right" : "dismiss();",
      "info" : "ExpressionStatement[31111-31121]:ExpressionStatement[31166-31176]"
    }, {
      "left" : "KeyguardUpdateMonitor.getInstance(mContext).dispatchScreenTurnedOn();",
      "right" : "KeyguardUpdateMonitor.getInstance(mContext).dispatchScreenTurnedOn();",
      "info" : "ExpressionStatement[31154-31223]:ExpressionStatement[31209-31278]"
    }, {
      "left" : "maybeSendUserPresentBroadcast();",
      "right" : "maybeSendUserPresentBroadcast();",
      "info" : "ExpressionStatement[31232-31264]:ExpressionStatement[31287-31319]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31276-31283]:Modifier[31331-31338]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31284-31288]:PrimitiveType[31339-31343]"
    }, {
      "left" : "maybeSendUserPresentBroadcast",
      "right" : "maybeSendUserPresentBroadcast",
      "info" : "SimpleName[31289-31318]:SimpleName[31344-31373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31321-31633]:Block[31376-31688]"
    }, {
      "left" : "if (mSystemReady && isKeyguardDisabled())",
      "right" : "if (mSystemReady && isKeyguardDisabled())",
      "info" : "IfStatement[31331-31627]:IfStatement[31386-31682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31373-31627]:Block[31428-31682]"
    }, {
      "left" : "sendUserPresentBroadcast();",
      "right" : "sendUserPresentBroadcast();",
      "info" : "ExpressionStatement[31590-31617]:ExpressionStatement[31645-31672]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31639-31646]:Modifier[31694-31701]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31647-31654]:PrimitiveType[31702-31709]"
    }, {
      "left" : "isKeyguardDisabled",
      "right" : "isKeyguardDisabled",
      "info" : "SimpleName[31655-31673]:SimpleName[31710-31728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31676-32521]:Block[31731-32576]"
    }, {
      "left" : "if (!mExternallyEnabled)",
      "right" : "if (!mExternallyEnabled)",
      "info" : "IfStatement[31686-31837]:IfStatement[31741-31892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31711-31837]:Block[31766-31892]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[31725-31802]:IfStatement[31780-31857]"
    }, {
      "left" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled externally\");",
      "right" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled externally\");",
      "info" : "ExpressionStatement[31736-31802]:ExpressionStatement[31791-31857]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31815-31827]:ReturnStatement[31870-31882]"
    }, {
      "left" : "if (mInternallyDisabled)",
      "right" : "if (mInternallyDisabled)",
      "info" : "IfStatement[31846-31997]:IfStatement[31901-32052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31871-31997]:Block[31926-32052]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[31885-31962]:IfStatement[31940-32017]"
    }, {
      "left" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled internally\");",
      "right" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled internally\");",
      "info" : "ExpressionStatement[31896-31962]:ExpressionStatement[31951-32017]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31975-31987]:ReturnStatement[32030-32042]"
    }, {
      "left" : "if (mLockPatternUtils.isLockScreenDisabled())",
      "right" : "if (mLockPatternUtils.isLockScreenDisabled())",
      "info" : "IfStatement[32006-32178]:IfStatement[32061-32233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32052-32178]:Block[32107-32233]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[32066-32143]:IfStatement[32121-32198]"
    }, {
      "left" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled by setting\");",
      "right" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled by setting\");",
      "info" : "ExpressionStatement[32077-32143]:ExpressionStatement[32132-32198]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32156-32168]:ReturnStatement[32211-32223]"
    }, {
      "left" : "Profile profile = mProfileManager.getActiveProfile();",
      "right" : "Profile profile = mProfileManager.getActiveProfile();",
      "info" : "VariableDeclarationStatement[32187-32240]:VariableDeclarationStatement[32242-32295]"
    }, {
      "left" : "if (profile != null)",
      "right" : "if (profile != null)",
      "info" : "IfStatement[32249-32493]:IfStatement[32304-32548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32270-32493]:Block[32325-32548]"
    }, {
      "left" : "if (profile.getScreenLockMode() == Profile.LockMode.DISABLE)",
      "right" : "if (profile.getScreenLockMode() == Profile.LockMode.DISABLE)",
      "info" : "IfStatement[32284-32483]:IfStatement[32339-32538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32345-32483]:Block[32400-32538]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[32363-32440]:IfStatement[32418-32495]"
    }, {
      "left" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled by profile\");",
      "right" : "Log.d(TAG, \"isKeyguardDisabled: keyguard is disabled by profile\");",
      "info" : "ExpressionStatement[32374-32440]:ExpressionStatement[32429-32495]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32457-32469]:ReturnStatement[32512-32524]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32502-32515]:ReturnStatement[32557-32570]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32527-32533]:Modifier[32582-32588]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32534-32541]:PrimitiveType[32589-32596]"
    }, {
      "left" : "isKeyguardBound",
      "right" : "isKeyguardBound",
      "info" : "SimpleName[32542-32557]:SimpleName[32597-32612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32560-32598]:Block[32615-32653]"
    }, {
      "left" : "return mKeyguardBound;",
      "right" : "return mKeyguardBound;",
      "info" : "ReturnStatement[32570-32592]:ReturnStatement[32625-32647]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32751-32757]:Modifier[32806-32812]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32758-32762]:PrimitiveType[32813-32817]"
    }, {
      "left" : "onDreamingStarted",
      "right" : "onDreamingStarted",
      "info" : "SimpleName[32763-32780]:SimpleName[32818-32835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32783-32946]:Block[32838-33001]"
    }, {
      "left" : "synchronized (this) {\n            if (mScreenOn && mLockPatternUtils.isSecure()) {\n                doKeyguardLaterLocked();\n            }\n        }",
      "right" : "synchronized (this) {\n            if (mScreenOn && mLockPatternUtils.isSecure()) {\n                doKeyguardLaterLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[32793-32940]:SynchronizedStatement[32848-32995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32813-32940]:Block[32868-32995]"
    }, {
      "left" : "if (mScreenOn && mLockPatternUtils.isSecure())",
      "right" : "if (mScreenOn && mLockPatternUtils.isSecure())",
      "info" : "IfStatement[32827-32930]:IfStatement[32882-32985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32874-32930]:Block[32929-32985]"
    }, {
      "left" : "doKeyguardLaterLocked();",
      "right" : "doKeyguardLaterLocked();",
      "info" : "ExpressionStatement[32892-32916]:ExpressionStatement[32947-32971]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32992-32998]:Modifier[33047-33053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32999-33003]:PrimitiveType[33054-33058]"
    }, {
      "left" : "onDreamingStopped",
      "right" : "onDreamingStopped",
      "info" : "SimpleName[33004-33021]:SimpleName[33059-33076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33024-33161]:Block[33079-33216]"
    }, {
      "left" : "synchronized (this) {\n            if (mScreenOn) {\n                cancelDoKeyguardLaterLocked();\n            }\n        }",
      "right" : "synchronized (this) {\n            if (mScreenOn) {\n                cancelDoKeyguardLaterLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[33034-33155]:SynchronizedStatement[33089-33210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33054-33155]:Block[33109-33210]"
    }, {
      "left" : "if (mScreenOn)",
      "right" : "if (mScreenOn)",
      "info" : "IfStatement[33068-33145]:IfStatement[33123-33200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33083-33145]:Block[33138-33200]"
    }, {
      "left" : "cancelDoKeyguardLaterLocked();",
      "right" : "cancelDoKeyguardLaterLocked();",
      "info" : "ExpressionStatement[33101-33131]:ExpressionStatement[33156-33186]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33329-33335]:Modifier[33384-33390]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33336-33340]:PrimitiveType[33391-33395]"
    }, {
      "left" : "setKeyguardEnabledInternal",
      "right" : "setKeyguardEnabledInternal",
      "info" : "SimpleName[33341-33367]:SimpleName[33396-33422]"
    }, {
      "left" : "boolean enabled",
      "right" : "boolean enabled",
      "info" : "SingleVariableDeclaration[33368-33383]:SingleVariableDeclaration[33423-33438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33385-33562]:Block[33440-33617]"
    }, {
      "left" : "mInternallyDisabled = !enabled;",
      "right" : "mInternallyDisabled = !enabled;",
      "info" : "ExpressionStatement[33395-33426]:ExpressionStatement[33450-33481]"
    }, {
      "left" : "setKeyguardEnabled(enabled);",
      "right" : "setKeyguardEnabled(enabled);",
      "info" : "ExpressionStatement[33435-33463]:ExpressionStatement[33490-33518]"
    }, {
      "left" : "if (mInternallyDisabled)",
      "right" : "if (mInternallyDisabled)",
      "info" : "IfStatement[33472-33556]:IfStatement[33527-33611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33497-33556]:Block[33552-33611]"
    }, {
      "left" : "mNeedToReshowWhenReenabled = false;",
      "right" : "mNeedToReshowWhenReenabled = false;",
      "info" : "ExpressionStatement[33511-33546]:ExpressionStatement[33566-33601]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33568-33574]:Modifier[33623-33629]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33575-33582]:PrimitiveType[33630-33637]"
    }, {
      "left" : "getKeyguardEnabledInternal",
      "right" : "getKeyguardEnabledInternal",
      "info" : "SimpleName[33583-33609]:SimpleName[33638-33664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33612-33656]:Block[33667-33711]"
    }, {
      "left" : "return !mInternallyDisabled;",
      "right" : "return !mInternallyDisabled;",
      "info" : "ReturnStatement[33622-33650]:ReturnStatement[33677-33705]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33928-33934]:Modifier[33983-33989]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33935-33939]:PrimitiveType[33990-33994]"
    }, {
      "left" : "setKeyguardEnabled",
      "right" : "setKeyguardEnabled",
      "info" : "SimpleName[33940-33958]:SimpleName[33995-34013]"
    }, {
      "left" : "boolean enabled",
      "right" : "boolean enabled",
      "info" : "SingleVariableDeclaration[33959-33974]:SingleVariableDeclaration[34014-34029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33976-37070]:Block[34031-37125]"
    }, {
      "left" : "synchronized (this) {\n            if (DEBUG) Log.d(TAG, \"setKeyguardEnabled(\" + enabled + \")\");\n            mExternallyEnabled = enabled;\n            if (mInternallyDisabled\n                    && enabled\n                    && !lockscreenEnforcedByDevicePolicy()) {\n                // if keyguard is forcefully disabled internally (by lock screen tile), don't allow\n                // it to be enabled externally, unless the device policy manager says so.\n                return;\n            }\n\n            if (!enabled && mShowing) {\n                if (mExitSecureCallback != null) {\n                    if (DEBUG) Log.d(TAG, \"in process of verifyUnlock request, ignoring\");\n                    // we're in the process of handling a request to verify the user\n                    // can get past the keyguard. ignore extraneous requests to disable / reenable\n                    return;\n                }\n\n                // hiding keyguard that is showing, remember to reshow later\n                if (DEBUG) Log.d(TAG, \"remembering to reshow, hiding keyguard, \"\n                        + \"disabling status bar expansion\");\n                mNeedToReshowWhenReenabled = true;\n                updateInputRestrictedLocked();\n                hideLocked();\n            } else if (enabled && mNeedToReshowWhenReenabled) {\n                // reenabled after previously hidden, reshow\n                if (DEBUG) Log.d(TAG, \"previously hidden, reshowing, reenabling \"\n                        + \"status bar expansion\");\n                mNeedToReshowWhenReenabled = false;\n                updateInputRestrictedLocked();\n\n                if (mExitSecureCallback != null) {\n                    if (DEBUG) Log.d(TAG, \"onKeyguardExitResult(false), resetting\");\n                    try {\n                        mExitSecureCallback.onKeyguardExitResult(false);\n                    } catch (RemoteException e) {\n                        Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                    }\n                    mExitSecureCallback = null;\n                    resetStateLocked();\n                } else {\n                    showLocked(null);\n\n                    // block until we know the keygaurd is done drawing (and post a message\n                    // to unblock us after a timeout so we don't risk blocking too long\n                    // and causing an ANR).\n                    mWaitingUntilKeyguardVisible = true;\n                    mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_DRAWING, KEYGUARD_DONE_DRAWING_TIMEOUT_MS);\n                    if (DEBUG) Log.d(TAG, \"waiting until mWaitingUntilKeyguardVisible is false\");\n                    while (mWaitingUntilKeyguardVisible) {\n                        try {\n                            wait();\n                        } catch (InterruptedException e) {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                    if (DEBUG) Log.d(TAG, \"done waiting for mWaitingUntilKeyguardVisible\");\n                }\n            }\n        }",
      "right" : "synchronized (this) {\n            if (DEBUG) Log.d(TAG, \"setKeyguardEnabled(\" + enabled + \")\");\n            mExternallyEnabled = enabled;\n            if (mInternallyDisabled\n                    && enabled\n                    && !lockscreenEnforcedByDevicePolicy()) {\n                // if keyguard is forcefully disabled internally (by lock screen tile), don't allow\n                // it to be enabled externally, unless the device policy manager says so.\n                return;\n            }\n\n            if (!enabled && mShowing) {\n                if (mExitSecureCallback != null) {\n                    if (DEBUG) Log.d(TAG, \"in process of verifyUnlock request, ignoring\");\n                    // we're in the process of handling a request to verify the user\n                    // can get past the keyguard. ignore extraneous requests to disable / reenable\n                    return;\n                }\n\n                // hiding keyguard that is showing, remember to reshow later\n                if (DEBUG) Log.d(TAG, \"remembering to reshow, hiding keyguard, \"\n                        + \"disabling status bar expansion\");\n                mNeedToReshowWhenReenabled = true;\n                updateInputRestrictedLocked();\n                hideLocked();\n            } else if (enabled && mNeedToReshowWhenReenabled) {\n                // reenabled after previously hidden, reshow\n                if (DEBUG) Log.d(TAG, \"previously hidden, reshowing, reenabling \"\n                        + \"status bar expansion\");\n                mNeedToReshowWhenReenabled = false;\n                updateInputRestrictedLocked();\n\n                if (mExitSecureCallback != null) {\n                    if (DEBUG) Log.d(TAG, \"onKeyguardExitResult(false), resetting\");\n                    try {\n                        mExitSecureCallback.onKeyguardExitResult(false);\n                    } catch (RemoteException e) {\n                        Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                    }\n                    mExitSecureCallback = null;\n                    resetStateLocked();\n                } else {\n                    showLocked(null);\n\n                    // block until we know the keygaurd is done drawing (and post a message\n                    // to unblock us after a timeout so we don't risk blocking too long\n                    // and causing an ANR).\n                    mWaitingUntilKeyguardVisible = true;\n                    mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_DRAWING, KEYGUARD_DONE_DRAWING_TIMEOUT_MS);\n                    if (DEBUG) Log.d(TAG, \"waiting until mWaitingUntilKeyguardVisible is false\");\n                    while (mWaitingUntilKeyguardVisible) {\n                        try {\n                            wait();\n                        } catch (InterruptedException e) {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                    if (DEBUG) Log.d(TAG, \"done waiting for mWaitingUntilKeyguardVisible\");\n                }\n            }\n        }",
      "info" : "SynchronizedStatement[33986-37064]:SynchronizedStatement[34041-37119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34006-37064]:Block[34061-37119]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[34020-34081]:IfStatement[34075-34136]"
    }, {
      "left" : "Log.d(TAG, \"setKeyguardEnabled(\" + enabled + \")\");",
      "right" : "Log.d(TAG, \"setKeyguardEnabled(\" + enabled + \")\");",
      "info" : "ExpressionStatement[34031-34081]:ExpressionStatement[34086-34136]"
    }, {
      "left" : "mExternallyEnabled = enabled;",
      "right" : "mExternallyEnabled = enabled;",
      "info" : "ExpressionStatement[34094-34123]:ExpressionStatement[34149-34178]"
    }, {
      "left" : "if (mInternallyDisabled\n                    && enabled\n                    && !lockscreenEnforcedByDevicePolicy())",
      "right" : "if (mInternallyDisabled\n                    && enabled\n                    && !lockscreenEnforcedByDevicePolicy())",
      "info" : "IfStatement[34136-34480]:IfStatement[34191-34535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34251-34480]:Block[34306-34535]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34459-34466]:ReturnStatement[34514-34521]"
    }, {
      "left" : "if (!enabled && mShowing)",
      "right" : "if (!enabled && mShowing)",
      "info" : "IfStatement[34494-37054]:IfStatement[34549-37109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34520-35255]:Block[34575-35310]"
    }, {
      "left" : "if (mExitSecureCallback != null)",
      "right" : "if (mExitSecureCallback != null)",
      "info" : "IfStatement[34538-34893]:IfStatement[34593-34948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34571-34893]:Block[34626-34948]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[34593-34663]:IfStatement[34648-34718]"
    }, {
      "left" : "Log.d(TAG, \"in process of verifyUnlock request, ignoring\");",
      "right" : "Log.d(TAG, \"in process of verifyUnlock request, ignoring\");",
      "info" : "ExpressionStatement[34604-34663]:ExpressionStatement[34659-34718]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34868-34875]:ReturnStatement[34923-34930]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[34988-35113]:IfStatement[35043-35168]"
    }, {
      "left" : "Log.d(TAG, \"remembering to reshow, hiding keyguard, \"\n                        + \"disabling status bar expansion\");",
      "right" : "Log.d(TAG, \"remembering to reshow, hiding keyguard, \"\n                        + \"disabling status bar expansion\");",
      "info" : "ExpressionStatement[34999-35113]:ExpressionStatement[35054-35168]"
    }, {
      "left" : "mNeedToReshowWhenReenabled = true;",
      "right" : "mNeedToReshowWhenReenabled = true;",
      "info" : "ExpressionStatement[35130-35164]:ExpressionStatement[35185-35219]"
    }, {
      "left" : "updateInputRestrictedLocked();",
      "right" : "updateInputRestrictedLocked();",
      "info" : "ExpressionStatement[35181-35211]:ExpressionStatement[35236-35266]"
    }, {
      "left" : "hideLocked();",
      "right" : "hideLocked();",
      "info" : "ExpressionStatement[35228-35241]:ExpressionStatement[35283-35296]"
    }, {
      "left" : "if (enabled && mNeedToReshowWhenReenabled)",
      "right" : "if (enabled && mNeedToReshowWhenReenabled)",
      "info" : "IfStatement[35261-37054]:IfStatement[35316-37109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35304-37054]:Block[35359-37109]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[35383-35499]:IfStatement[35438-35554]"
    }, {
      "left" : "Log.d(TAG, \"previously hidden, reshowing, reenabling \"\n                        + \"status bar expansion\");",
      "right" : "Log.d(TAG, \"previously hidden, reshowing, reenabling \"\n                        + \"status bar expansion\");",
      "info" : "ExpressionStatement[35394-35499]:ExpressionStatement[35449-35554]"
    }, {
      "left" : "mNeedToReshowWhenReenabled = false;",
      "right" : "mNeedToReshowWhenReenabled = false;",
      "info" : "ExpressionStatement[35516-35551]:ExpressionStatement[35571-35606]"
    }, {
      "left" : "updateInputRestrictedLocked();",
      "right" : "updateInputRestrictedLocked();",
      "info" : "ExpressionStatement[35568-35598]:ExpressionStatement[35623-35653]"
    }, {
      "left" : "if (mExitSecureCallback != null)",
      "right" : "if (mExitSecureCallback != null)",
      "info" : "IfStatement[35616-37040]:IfStatement[35671-37095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35649-36098]:Block[35704-36153]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[35671-35735]:IfStatement[35726-35790]"
    }, {
      "left" : "Log.d(TAG, \"onKeyguardExitResult(false), resetting\");",
      "right" : "Log.d(TAG, \"onKeyguardExitResult(false), resetting\");",
      "info" : "ExpressionStatement[35682-35735]:ExpressionStatement[35737-35790]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35756-35992]:TryStatement[35811-36047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35760-35856]:Block[35815-35911]"
    }, {
      "left" : "mExitSecureCallback.onKeyguardExitResult(false);",
      "right" : "mExitSecureCallback.onKeyguardExitResult(false);",
      "info" : "ExpressionStatement[35786-35834]:ExpressionStatement[35841-35889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35883-35992]:Block[35938-36047]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "info" : "ExpressionStatement[35909-35970]:ExpressionStatement[35964-36025]"
    }, {
      "left" : "mExitSecureCallback = null;",
      "right" : "mExitSecureCallback = null;",
      "info" : "ExpressionStatement[36013-36040]:ExpressionStatement[36068-36095]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[36061-36080]:ExpressionStatement[36116-36135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36104-37040]:Block[36159-37095]"
    }, {
      "left" : "showLocked(null);",
      "right" : "showLocked(null);",
      "info" : "ExpressionStatement[36126-36143]:ExpressionStatement[36181-36198]"
    }, {
      "left" : "mWaitingUntilKeyguardVisible = true;",
      "right" : "mWaitingUntilKeyguardVisible = true;",
      "info" : "ExpressionStatement[36389-36425]:ExpressionStatement[36444-36480]"
    }, {
      "left" : "mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_DRAWING, KEYGUARD_DONE_DRAWING_TIMEOUT_MS);",
      "right" : "mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_DRAWING, KEYGUARD_DONE_DRAWING_TIMEOUT_MS);",
      "info" : "ExpressionStatement[36446-36536]:ExpressionStatement[36501-36591]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[36557-36634]:IfStatement[36612-36689]"
    }, {
      "left" : "Log.d(TAG, \"waiting until mWaitingUntilKeyguardVisible is false\");",
      "right" : "Log.d(TAG, \"waiting until mWaitingUntilKeyguardVisible is false\");",
      "info" : "ExpressionStatement[36568-36634]:ExpressionStatement[36623-36689]"
    }, {
      "left" : "while (mWaitingUntilKeyguardVisible)",
      "right" : "while (mWaitingUntilKeyguardVisible)",
      "info" : "WhileStatement[36655-36930]:WhileStatement[36710-36985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36692-36930]:Block[36747-36985]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36718-36908]:TryStatement[36773-36963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36722-36785]:Block[36777-36840]"
    }, {
      "left" : "wait();",
      "right" : "wait();",
      "info" : "ExpressionStatement[36752-36759]:ExpressionStatement[36807-36814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36817-36908]:Block[36872-36963]"
    }, {
      "left" : "Thread.currentThread().interrupt();",
      "right" : "Thread.currentThread().interrupt();",
      "info" : "ExpressionStatement[36847-36882]:ExpressionStatement[36902-36937]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[36951-37022]:IfStatement[37006-37077]"
    }, {
      "left" : "Log.d(TAG, \"done waiting for mWaitingUntilKeyguardVisible\");",
      "right" : "Log.d(TAG, \"done waiting for mWaitingUntilKeyguardVisible\");",
      "info" : "ExpressionStatement[36962-37022]:ExpressionStatement[37017-37077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37153-37159]:Modifier[37208-37214]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37160-37164]:PrimitiveType[37215-37219]"
    }, {
      "left" : "verifyUnlock",
      "right" : "verifyUnlock",
      "info" : "SimpleName[37165-37177]:SimpleName[37220-37232]"
    }, {
      "left" : "IKeyguardExitCallback callback",
      "right" : "IKeyguardExitCallback callback",
      "info" : "SingleVariableDeclaration[37178-37208]:SingleVariableDeclaration[37233-37263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37210-38745]:Block[37265-38800]"
    }, {
      "left" : "synchronized (this) {\n            if (DEBUG) Log.d(TAG, \"verifyUnlock\");\n            if (shouldWaitForProvisioning()) {\n                // don't allow this api when the device isn't provisioned\n                if (DEBUG) Log.d(TAG, \"ignoring because device isn't provisioned\");\n                try {\n                    callback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n            } else if (mExternallyEnabled) {\n                // this only applies when the user has externally disabled the\n                // keyguard.  this is unexpected and means the user is not\n                // using the api properly.\n                Log.w(TAG, \"verifyUnlock called when not externally disabled\");\n                try {\n                    callback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n            } else if (mExitSecureCallback != null) {\n                // already in progress with someone else\n                try {\n                    callback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n            } else {\n                mExitSecureCallback = callback;\n                verifyUnlockLocked();\n            }\n        }",
      "right" : "synchronized (this) {\n            if (DEBUG) Log.d(TAG, \"verifyUnlock\");\n            if (shouldWaitForProvisioning()) {\n                // don't allow this api when the device isn't provisioned\n                if (DEBUG) Log.d(TAG, \"ignoring because device isn't provisioned\");\n                try {\n                    callback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n            } else if (mExternallyEnabled) {\n                // this only applies when the user has externally disabled the\n                // keyguard.  this is unexpected and means the user is not\n                // using the api properly.\n                Log.w(TAG, \"verifyUnlock called when not externally disabled\");\n                try {\n                    callback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n            } else if (mExitSecureCallback != null) {\n                // already in progress with someone else\n                try {\n                    callback.onKeyguardExitResult(false);\n                } catch (RemoteException e) {\n                    Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);\n                }\n            } else {\n                mExitSecureCallback = callback;\n                verifyUnlockLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[37220-38739]:SynchronizedStatement[37275-38794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37240-38739]:Block[37295-38794]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[37254-37292]:IfStatement[37309-37347]"
    }, {
      "left" : "Log.d(TAG, \"verifyUnlock\");",
      "right" : "Log.d(TAG, \"verifyUnlock\");",
      "info" : "ExpressionStatement[37265-37292]:ExpressionStatement[37320-37347]"
    }, {
      "left" : "if (shouldWaitForProvisioning())",
      "right" : "if (shouldWaitForProvisioning())",
      "info" : "IfStatement[37305-38729]:IfStatement[37360-38784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37338-37737]:Block[37393-37792]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[37430-37497]:IfStatement[37485-37552]"
    }, {
      "left" : "Log.d(TAG, \"ignoring because device isn't provisioned\");",
      "right" : "Log.d(TAG, \"ignoring because device isn't provisioned\");",
      "info" : "ExpressionStatement[37441-37497]:ExpressionStatement[37496-37552]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37514-37723]:TryStatement[37569-37778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37518-37595]:Block[37573-37650]"
    }, {
      "left" : "callback.onKeyguardExitResult(false);",
      "right" : "callback.onKeyguardExitResult(false);",
      "info" : "ExpressionStatement[37540-37577]:ExpressionStatement[37595-37632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37622-37723]:Block[37677-37778]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "info" : "ExpressionStatement[37644-37705]:ExpressionStatement[37699-37760]"
    }, {
      "left" : "if (mExternallyEnabled)",
      "right" : "if (mExternallyEnabled)",
      "info" : "IfStatement[37743-38729]:IfStatement[37798-38784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37767-38285]:Block[37822-38340]"
    }, {
      "left" : "Log.w(TAG, \"verifyUnlock called when not externally disabled\");",
      "right" : "Log.w(TAG, \"verifyUnlock called when not externally disabled\");",
      "info" : "ExpressionStatement[37982-38045]:ExpressionStatement[38037-38100]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38062-38271]:TryStatement[38117-38326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38066-38143]:Block[38121-38198]"
    }, {
      "left" : "callback.onKeyguardExitResult(false);",
      "right" : "callback.onKeyguardExitResult(false);",
      "info" : "ExpressionStatement[38088-38125]:ExpressionStatement[38143-38180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38170-38271]:Block[38225-38326]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "info" : "ExpressionStatement[38192-38253]:ExpressionStatement[38247-38308]"
    }, {
      "left" : "if (mExitSecureCallback != null)",
      "right" : "if (mExitSecureCallback != null)",
      "info" : "IfStatement[38291-38729]:IfStatement[38346-38784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38324-38622]:Block[38379-38677]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38399-38608]:TryStatement[38454-38663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38403-38480]:Block[38458-38535]"
    }, {
      "left" : "callback.onKeyguardExitResult(false);",
      "right" : "callback.onKeyguardExitResult(false);",
      "info" : "ExpressionStatement[38425-38462]:ExpressionStatement[38480-38517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38507-38608]:Block[38562-38663]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(false)\", e);",
      "info" : "ExpressionStatement[38529-38590]:ExpressionStatement[38584-38645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38628-38729]:Block[38683-38784]"
    }, {
      "left" : "mExitSecureCallback = callback;",
      "right" : "mExitSecureCallback = callback;",
      "info" : "ExpressionStatement[38646-38677]:ExpressionStatement[38701-38732]"
    }, {
      "left" : "verifyUnlockLocked();",
      "right" : "verifyUnlockLocked();",
      "info" : "ExpressionStatement[38694-38715]:ExpressionStatement[38749-38770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38809-38815]:Modifier[38864-38870]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38816-38823]:PrimitiveType[38871-38878]"
    }, {
      "left" : "isShowing",
      "right" : "isShowing",
      "info" : "SimpleName[38824-38833]:SimpleName[38879-38888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38836-38868]:Block[38891-38923]"
    }, {
      "left" : "return mShowing;",
      "right" : "return mShowing;",
      "info" : "ReturnStatement[38846-38862]:ReturnStatement[38901-38917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38874-38880]:Modifier[38929-38935]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38881-38888]:PrimitiveType[38936-38943]"
    }, {
      "left" : "isOccluded",
      "right" : "isOccluded",
      "info" : "SimpleName[38889-38899]:SimpleName[38944-38954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38902-38935]:Block[38957-38990]"
    }, {
      "left" : "return mOccluded;",
      "right" : "return mOccluded;",
      "info" : "ReturnStatement[38912-38929]:ReturnStatement[38967-38984]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39026-39032]:Modifier[39081-39087]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39033-39040]:PrimitiveType[39088-39095]"
    }, {
      "left" : "isShowingAndNotOccluded",
      "right" : "isShowingAndNotOccluded",
      "info" : "SimpleName[39041-39064]:SimpleName[39096-39119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39067-39113]:Block[39122-39168]"
    }, {
      "left" : "return mShowing && !mOccluded;",
      "right" : "return mShowing && !mOccluded;",
      "info" : "ReturnStatement[39077-39107]:ReturnStatement[39132-39162]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39200-39206]:Modifier[39255-39261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39207-39211]:PrimitiveType[39262-39266]"
    }, {
      "left" : "setOccluded",
      "right" : "setOccluded",
      "info" : "SimpleName[39212-39223]:SimpleName[39267-39278]"
    }, {
      "left" : "boolean isOccluded",
      "right" : "boolean isOccluded",
      "info" : "SingleVariableDeclaration[39224-39242]:SingleVariableDeclaration[39279-39297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39244-39478]:Block[39299-39533]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[39254-39305]:IfStatement[39309-39360]"
    }, {
      "left" : "Log.d(TAG, \"setOccluded \" + isOccluded);",
      "right" : "Log.d(TAG, \"setOccluded \" + isOccluded);",
      "info" : "ExpressionStatement[39265-39305]:ExpressionStatement[39320-39360]"
    }, {
      "left" : "mHandler.removeMessages(SET_OCCLUDED);",
      "right" : "mHandler.removeMessages(SET_OCCLUDED);",
      "info" : "ExpressionStatement[39314-39352]:ExpressionStatement[39369-39407]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(SET_OCCLUDED, (isOccluded ? 1 : 0), 0);",
      "right" : "Message msg = mHandler.obtainMessage(SET_OCCLUDED, (isOccluded ? 1 : 0), 0);",
      "info" : "VariableDeclarationStatement[39361-39437]:VariableDeclarationStatement[39416-39492]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[39446-39472]:ExpressionStatement[39501-39527]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39558-39565]:Modifier[39613-39620]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39566-39570]:PrimitiveType[39621-39625]"
    }, {
      "left" : "handleSetOccluded",
      "right" : "handleSetOccluded",
      "info" : "SimpleName[39571-39588]:SimpleName[39626-39643]"
    }, {
      "left" : "boolean isOccluded",
      "right" : "boolean isOccluded",
      "info" : "SingleVariableDeclaration[39589-39607]:SingleVariableDeclaration[39644-39662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39609-39935]:Block[39664-39990]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (mOccluded != isOccluded) {\n                mOccluded = isOccluded;\n                mStatusBarKeyguardViewManager.setOccluded(isOccluded);\n                updateActivityLockScreenState();\n                adjustStatusBarLocked();\n            }\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (mOccluded != isOccluded) {\n                mOccluded = isOccluded;\n                mStatusBarKeyguardViewManager.setOccluded(isOccluded);\n                updateActivityLockScreenState();\n                adjustStatusBarLocked();\n            }\n        }",
      "info" : "SynchronizedStatement[39619-39929]:SynchronizedStatement[39674-39984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39660-39929]:Block[39715-39984]"
    }, {
      "left" : "if (mOccluded != isOccluded)",
      "right" : "if (mOccluded != isOccluded)",
      "info" : "IfStatement[39674-39919]:IfStatement[39729-39974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39703-39919]:Block[39758-39974]"
    }, {
      "left" : "mOccluded = isOccluded;",
      "right" : "mOccluded = isOccluded;",
      "info" : "ExpressionStatement[39721-39744]:ExpressionStatement[39776-39799]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.setOccluded(isOccluded);",
      "right" : "mStatusBarKeyguardViewManager.setOccluded(isOccluded);",
      "info" : "ExpressionStatement[39761-39815]:ExpressionStatement[39816-39870]"
    }, {
      "left" : "updateActivityLockScreenState();",
      "right" : "updateActivityLockScreenState();",
      "info" : "ExpressionStatement[39832-39864]:ExpressionStatement[39887-39919]"
    }, {
      "left" : "adjustStatusBarLocked();",
      "right" : "adjustStatusBarLocked();",
      "info" : "ExpressionStatement[39881-39905]:ExpressionStatement[39936-39960]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40135-40141]:Modifier[40190-40196]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40142-40146]:PrimitiveType[40197-40201]"
    }, {
      "left" : "doKeyguardTimeout",
      "right" : "doKeyguardTimeout",
      "info" : "SimpleName[40147-40164]:SimpleName[40202-40219]"
    }, {
      "left" : "Bundle options",
      "right" : "Bundle options",
      "info" : "SingleVariableDeclaration[40165-40179]:SingleVariableDeclaration[40220-40234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40181-40347]:Block[40236-40402]"
    }, {
      "left" : "mHandler.removeMessages(KEYGUARD_TIMEOUT);",
      "right" : "mHandler.removeMessages(KEYGUARD_TIMEOUT);",
      "info" : "ExpressionStatement[40191-40233]:ExpressionStatement[40246-40288]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(KEYGUARD_TIMEOUT, options);",
      "right" : "Message msg = mHandler.obtainMessage(KEYGUARD_TIMEOUT, options);",
      "info" : "VariableDeclarationStatement[40242-40306]:VariableDeclarationStatement[40297-40361]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[40315-40341]:ExpressionStatement[40370-40396]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40607-40613]:Modifier[40662-40668]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40614-40621]:PrimitiveType[40669-40676]"
    }, {
      "left" : "isInputRestricted",
      "right" : "isInputRestricted",
      "info" : "SimpleName[40622-40639]:SimpleName[40677-40694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40642-40735]:Block[40697-40790]"
    }, {
      "left" : "return mShowing || mNeedToReshowWhenReenabled || shouldWaitForProvisioning();",
      "right" : "return mShowing || mNeedToReshowWhenReenabled || shouldWaitForProvisioning();",
      "info" : "ReturnStatement[40652-40729]:ReturnStatement[40707-40784]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40741-40748]:Modifier[40796-40803]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40749-40753]:PrimitiveType[40804-40808]"
    }, {
      "left" : "updateInputRestricted",
      "right" : "updateInputRestricted",
      "info" : "SimpleName[40754-40775]:SimpleName[40809-40830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40778-40868]:Block[40833-40923]"
    }, {
      "left" : "synchronized (this) {\n            updateInputRestrictedLocked();\n        }",
      "right" : "synchronized (this) {\n            updateInputRestrictedLocked();\n        }",
      "info" : "SynchronizedStatement[40788-40862]:SynchronizedStatement[40843-40917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40808-40862]:Block[40863-40917]"
    }, {
      "left" : "updateInputRestrictedLocked();",
      "right" : "updateInputRestrictedLocked();",
      "info" : "ExpressionStatement[40822-40852]:ExpressionStatement[40877-40907]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40873-40880]:Modifier[40928-40935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40881-40885]:PrimitiveType[40936-40940]"
    }, {
      "left" : "updateInputRestrictedLocked",
      "right" : "updateInputRestrictedLocked",
      "info" : "SimpleName[40886-40913]:SimpleName[40941-40968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40916-41456]:Block[40971-41511]"
    }, {
      "left" : "boolean inputRestricted = isInputRestricted();",
      "right" : "boolean inputRestricted = isInputRestricted();",
      "info" : "VariableDeclarationStatement[40926-40972]:VariableDeclarationStatement[40981-41027]"
    }, {
      "left" : "if (mInputRestricted != inputRestricted)",
      "right" : "if (mInputRestricted != inputRestricted)",
      "info" : "IfStatement[40981-41450]:IfStatement[41036-41505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41022-41450]:Block[41077-41505]"
    }, {
      "left" : "mInputRestricted = inputRestricted;",
      "right" : "mInputRestricted = inputRestricted;",
      "info" : "ExpressionStatement[41036-41071]:ExpressionStatement[41091-41126]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[41084-41440]:TryStatement[41139-41495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41088-41328]:Block[41143-41383]"
    }, {
      "left" : "int size = mKeyguardStateCallbacks.size();",
      "right" : "int size = mKeyguardStateCallbacks.size();",
      "info" : "VariableDeclarationStatement[41106-41148]:VariableDeclarationStatement[41161-41203]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[41165-41314]:ForStatement[41220-41369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41196-41314]:Block[41251-41369]"
    }, {
      "left" : "mKeyguardStateCallbacks.get(i).onInputRestrictedStateChanged(inputRestricted);",
      "right" : "mKeyguardStateCallbacks.get(i).onInputRestrictedStateChanged(inputRestricted);",
      "info" : "ExpressionStatement[41218-41296]:ExpressionStatement[41273-41351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41355-41440]:Block[41410-41495]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onDeviceProvisioned\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onDeviceProvisioned\", e);",
      "info" : "ExpressionStatement[41373-41426]:ExpressionStatement[41428-41481]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41538-41545]:Modifier[41593-41600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41546-41550]:PrimitiveType[41601-41605]"
    }, {
      "left" : "doKeyguardLocked",
      "right" : "doKeyguardLocked",
      "info" : "SimpleName[41551-41567]:SimpleName[41606-41622]"
    }, {
      "left" : "Bundle options",
      "right" : "Bundle options",
      "info" : "SingleVariableDeclaration[41568-41582]:SingleVariableDeclaration[41623-41637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41584-44371]:Block[41639-44426]"
    }, {
      "left" : "if (mStatusBarKeyguardViewManager.isShowing())",
      "right" : "if (mStatusBarKeyguardViewManager.isShowing())",
      "info" : "IfStatement[41654-41856]:IfStatement[41709-41911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41701-41856]:Block[41756-41911]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[41715-41794]:IfStatement[41770-41849]"
    }, {
      "left" : "Log.d(TAG, \"doKeyguard: not showing because it is already showing\");",
      "right" : "Log.d(TAG, \"doKeyguard: not showing because it is already showing\");",
      "info" : "ExpressionStatement[41726-41794]:ExpressionStatement[41781-41849]"
    }, {
      "left" : "resetStateLocked();",
      "right" : "resetStateLocked();",
      "info" : "ExpressionStatement[41807-41826]:ExpressionStatement[41862-41881]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41839-41846]:ReturnStatement[41894-41901]"
    }, {
      "left" : "final boolean requireSim = !SystemProperties.getBoolean(\"keyguard.no_require_sim\",\n                false);",
      "right" : "final boolean requireSim = !SystemProperties.getBoolean(\"keyguard.no_require_sim\",\n                false);",
      "info" : "VariableDeclarationStatement[41924-42030]:VariableDeclarationStatement[41979-42085]"
    }, {
      "left" : "final boolean absent = SubscriptionManager.isValidSubscriptionId(\n                mUpdateMonitor.getNextSubIdForState(IccCardConstants.State.ABSENT));",
      "right" : "final boolean absent = SubscriptionManager.isValidSubscriptionId(\n                mUpdateMonitor.getNextSubIdForState(IccCardConstants.State.ABSENT));",
      "info" : "VariableDeclarationStatement[42039-42189]:VariableDeclarationStatement[42094-42244]"
    }, {
      "left" : "final boolean disabled = SubscriptionManager.isValidSubscriptionId(\n                mUpdateMonitor.getNextSubIdForState(IccCardConstants.State.PERM_DISABLED));",
      "right" : "final boolean disabled = SubscriptionManager.isValidSubscriptionId(\n                mUpdateMonitor.getNextSubIdForState(IccCardConstants.State.PERM_DISABLED));",
      "info" : "VariableDeclarationStatement[42198-42357]:VariableDeclarationStatement[42253-42412]"
    }, {
      "left" : "final boolean lockedOrMissing = mUpdateMonitor.isSimPinSecure()\n                || ((absent || disabled) && requireSim);",
      "right" : "final boolean lockedOrMissing = mUpdateMonitor.isSimPinSecure()\n                || ((absent || disabled) && requireSim);",
      "info" : "VariableDeclarationStatement[42366-42486]:VariableDeclarationStatement[42421-42541]"
    }, {
      "left" : "if (!lockedOrMissing && shouldWaitForProvisioning())",
      "right" : "if (!lockedOrMissing && shouldWaitForProvisioning())",
      "info" : "IfStatement[42496-42737]:IfStatement[42551-42792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42549-42737]:Block[42604-42792]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[42563-42707]:IfStatement[42618-42762]"
    }, {
      "left" : "Log.d(TAG, \"doKeyguard: not showing because device isn't provisioned\"\n                    + \" and the sim is not locked or missing\");",
      "right" : "Log.d(TAG, \"doKeyguard: not showing because device isn't provisioned\"\n                    + \" and the sim is not locked or missing\");",
      "info" : "ExpressionStatement[42574-42707]:ExpressionStatement[42629-42762]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42720-42727]:ReturnStatement[42775-42782]"
    }, {
      "left" : "if (!mExternallyEnabled && !lockedOrMissing)",
      "right" : "if (!mExternallyEnabled && !lockedOrMissing)",
      "info" : "IfStatement[42801-43596]:IfStatement[42856-43651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42846-43596]:Block[42901-43651]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[42860-42937]:IfStatement[42915-42992]"
    }, {
      "left" : "Log.d(TAG, \"doKeyguard: not showing because externally disabled\");",
      "right" : "Log.d(TAG, \"doKeyguard: not showing because externally disabled\");",
      "info" : "ExpressionStatement[42871-42937]:ExpressionStatement[42926-42992]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43579-43586]:ReturnStatement[43634-43641]"
    }, {
      "left" : "if (isKeyguardDisabled() && !lockedOrMissing)",
      "right" : "if (isKeyguardDisabled() && !lockedOrMissing)",
      "info" : "IfStatement[43606-43946]:IfStatement[43661-44001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43652-43946]:Block[43707-44001]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[43666-43741]:IfStatement[43721-43796]"
    }, {
      "left" : "Log.d(TAG, \"doKeyguard: not showing because lockscreen is off\");",
      "right" : "Log.d(TAG, \"doKeyguard: not showing because lockscreen is off\");",
      "info" : "ExpressionStatement[43677-43741]:ExpressionStatement[43732-43796]"
    }, {
      "left" : "setShowingLocked(false);",
      "right" : "setShowingLocked(false);",
      "info" : "ExpressionStatement[43782-43806]:ExpressionStatement[43837-43861]"
    }, {
      "left" : "updateActivityLockScreenState();",
      "right" : "updateActivityLockScreenState();",
      "info" : "ExpressionStatement[43819-43851]:ExpressionStatement[43874-43906]"
    }, {
      "left" : "adjustStatusBarLocked();",
      "right" : "adjustStatusBarLocked();",
      "info" : "ExpressionStatement[43864-43888]:ExpressionStatement[43919-43943]"
    }, {
      "left" : "userActivity();",
      "right" : "userActivity();",
      "info" : "ExpressionStatement[43901-43916]:ExpressionStatement[43956-43971]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43929-43936]:ReturnStatement[43984-43991]"
    }, {
      "left" : "if (mLockPatternUtils.checkVoldPassword())",
      "right" : "if (mLockPatternUtils.checkVoldPassword())",
      "info" : "IfStatement[43956-44265]:IfStatement[44011-44320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43999-44265]:Block[44054-44320]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[44013-44083]:IfStatement[44068-44138]"
    }, {
      "left" : "Log.d(TAG, \"Not showing lock screen since just decrypted\");",
      "right" : "Log.d(TAG, \"Not showing lock screen since just decrypted\");",
      "info" : "ExpressionStatement[44024-44083]:ExpressionStatement[44079-44138]"
    }, {
      "left" : "setShowingLocked(false);",
      "right" : "setShowingLocked(false);",
      "info" : "ExpressionStatement[44185-44209]:ExpressionStatement[44240-44264]"
    }, {
      "left" : "hideLocked();",
      "right" : "hideLocked();",
      "info" : "ExpressionStatement[44222-44235]:ExpressionStatement[44277-44290]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44248-44255]:ReturnStatement[44303-44310]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[44275-44336]:IfStatement[44330-44391]"
    }, {
      "left" : "Log.d(TAG, \"doKeyguard: showing the lock screen\");",
      "right" : "Log.d(TAG, \"doKeyguard: showing the lock screen\");",
      "info" : "ExpressionStatement[44286-44336]:ExpressionStatement[44341-44391]"
    }, {
      "left" : "showLocked(options);",
      "right" : "showLocked(options);",
      "info" : "ExpressionStatement[44345-44365]:ExpressionStatement[44400-44420]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44377-44384]:Modifier[44432-44439]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44385-44392]:PrimitiveType[44440-44447]"
    }, {
      "left" : "shouldWaitForProvisioning",
      "right" : "shouldWaitForProvisioning",
      "info" : "SimpleName[44393-44418]:SimpleName[44448-44473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44421-44497]:Block[44476-44552]"
    }, {
      "left" : "return !mUpdateMonitor.isDeviceProvisioned() && !isSecure();",
      "right" : "return !mUpdateMonitor.isDeviceProvisioned() && !isSecure();",
      "info" : "ReturnStatement[44431-44491]:ReturnStatement[44486-44546]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44503-44510]:Modifier[44558-44565]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44511-44518]:PrimitiveType[44566-44573]"
    }, {
      "left" : "isSimLockedOrMissing",
      "right" : "isSimLockedOrMissing",
      "info" : "SimpleName[44519-44539]:SimpleName[44574-44594]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[44541-44550]:SingleVariableDeclaration[44596-44605]"
    }, {
      "left" : "boolean requireSim",
      "right" : "boolean requireSim",
      "info" : "SingleVariableDeclaration[44552-44570]:SingleVariableDeclaration[44607-44625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44572-44922]:Block[44627-44977]"
    }, {
      "left" : "IccCardConstants.State state = mUpdateMonitor.getSimState(subId);",
      "right" : "IccCardConstants.State state = mUpdateMonitor.getSimState(subId);",
      "info" : "VariableDeclarationStatement[44582-44647]:VariableDeclarationStatement[44637-44702]"
    }, {
      "left" : "boolean simLockedOrMissing = (state != null && state.isPinLocked())\n                || ((state == IccCardConstants.State.ABSENT\n                || state == IccCardConstants.State.PERM_DISABLED)\n                && requireSim);",
      "right" : "boolean simLockedOrMissing = (state != null && state.isPinLocked())\n                || ((state == IccCardConstants.State.ABSENT\n                || state == IccCardConstants.State.PERM_DISABLED)\n                && requireSim);",
      "info" : "VariableDeclarationStatement[44656-44881]:VariableDeclarationStatement[44711-44936]"
    }, {
      "left" : "return simLockedOrMissing;",
      "right" : "return simLockedOrMissing;",
      "info" : "ReturnStatement[44890-44916]:ReturnStatement[44945-44971]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44928-44934]:Modifier[44983-44989]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44935-44942]:PrimitiveType[44990-44997]"
    }, {
      "left" : "lockscreenEnforcedByDevicePolicy",
      "right" : "lockscreenEnforcedByDevicePolicy",
      "info" : "SimpleName[44943-44975]:SimpleName[44998-45030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44978-45744]:Block[45033-45799]"
    }, {
      "left" : "DevicePolicyManager dpm = (DevicePolicyManager)\n                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);",
      "right" : "DevicePolicyManager dpm = (DevicePolicyManager)\n                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);",
      "info" : "VariableDeclarationStatement[44988-45109]:VariableDeclarationStatement[45043-45164]"
    }, {
      "left" : "if (dpm != null)",
      "right" : "if (dpm != null)",
      "info" : "IfStatement[45118-45716]:IfStatement[45173-45771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45135-45716]:Block[45190-45771]"
    }, {
      "left" : "int passwordQuality = dpm.getPasswordQuality(null);",
      "right" : "int passwordQuality = dpm.getPasswordQuality(null);",
      "info" : "VariableDeclarationStatement[45149-45200]:VariableDeclarationStatement[45204-45255]"
    }, {
      "left" : "switch (passwordQuality) {\n                case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:\n                case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:\n                case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:\n                case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:\n                case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:\n                case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:\n                    return true;\n            }",
      "right" : "switch (passwordQuality) {\n                case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:\n                case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:\n                case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:\n                case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:\n                case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:\n                case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:\n                    return true;\n            }",
      "info" : "SwitchStatement[45213-45706]:SwitchStatement[45268-45761]"
    }, {
      "left" : "case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:",
      "right" : "case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:",
      "info" : "SwitchCase[45256-45309]:SwitchCase[45311-45364]"
    }, {
      "left" : "case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:",
      "right" : "case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:",
      "info" : "SwitchCase[45326-45381]:SwitchCase[45381-45436]"
    }, {
      "left" : "case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:",
      "right" : "case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:",
      "info" : "SwitchCase[45398-45448]:SwitchCase[45453-45503]"
    }, {
      "left" : "case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:",
      "right" : "case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:",
      "info" : "SwitchCase[45465-45515]:SwitchCase[45520-45570]"
    }, {
      "left" : "case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:",
      "right" : "case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:",
      "info" : "SwitchCase[45532-45590]:SwitchCase[45587-45645]"
    }, {
      "left" : "case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:",
      "right" : "case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:",
      "info" : "SwitchCase[45607-45659]:SwitchCase[45662-45714]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45680-45692]:ReturnStatement[45735-45747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45725-45738]:ReturnStatement[45780-45793]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45823-45829]:Modifier[45878-45884]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45830-45834]:PrimitiveType[45885-45889]"
    }, {
      "left" : "handleDismiss",
      "right" : "handleDismiss",
      "info" : "SimpleName[45835-45848]:SimpleName[45890-45903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45851-45959]:Block[45906-46014]"
    }, {
      "left" : "if (mShowing && !mOccluded)",
      "right" : "if (mShowing && !mOccluded)",
      "info" : "IfStatement[45861-45953]:IfStatement[45916-46008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45889-45953]:Block[45944-46008]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.dismiss();",
      "right" : "mStatusBarKeyguardViewManager.dismiss();",
      "info" : "ExpressionStatement[45903-45943]:ExpressionStatement[45958-45998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45965-45971]:Modifier[46020-46026]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45972-45976]:PrimitiveType[46027-46031]"
    }, {
      "left" : "dismiss",
      "right" : "dismiss",
      "info" : "SimpleName[45977-45984]:SimpleName[46032-46039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45987-46038]:Block[46042-46093]"
    }, {
      "left" : "mHandler.sendEmptyMessage(DISMISS);",
      "right" : "mHandler.sendEmptyMessage(DISMISS);",
      "info" : "ExpressionStatement[45997-46032]:ExpressionStatement[46052-46087]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46148-46155]:Modifier[46203-46210]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46156-46160]:PrimitiveType[46211-46215]"
    }, {
      "left" : "resetStateLocked",
      "right" : "resetStateLocked",
      "info" : "SimpleName[46161-46177]:SimpleName[46216-46232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46180-46326]:Block[46235-46381]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[46190-46232]:IfStatement[46245-46287]"
    }, {
      "left" : "Log.e(TAG, \"resetStateLocked\");",
      "right" : "Log.e(TAG, \"resetStateLocked\");",
      "info" : "ExpressionStatement[46201-46232]:ExpressionStatement[46256-46287]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(RESET);",
      "right" : "Message msg = mHandler.obtainMessage(RESET);",
      "info" : "VariableDeclarationStatement[46241-46285]:VariableDeclarationStatement[46296-46340]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[46294-46320]:ExpressionStatement[46349-46375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46442-46449]:Modifier[46497-46504]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46450-46454]:PrimitiveType[46505-46509]"
    }, {
      "left" : "verifyUnlockLocked",
      "right" : "verifyUnlockLocked",
      "info" : "SimpleName[46455-46473]:SimpleName[46510-46528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46476-46586]:Block[46531-46641]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[46486-46530]:IfStatement[46541-46585]"
    }, {
      "left" : "Log.d(TAG, \"verifyUnlockLocked\");",
      "right" : "Log.d(TAG, \"verifyUnlockLocked\");",
      "info" : "ExpressionStatement[46497-46530]:ExpressionStatement[46552-46585]"
    }, {
      "left" : "mHandler.sendEmptyMessage(VERIFY_UNLOCK);",
      "right" : "mHandler.sendEmptyMessage(VERIFY_UNLOCK);",
      "info" : "ExpressionStatement[46539-46580]:ExpressionStatement[46594-46635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46752-46759]:Modifier[46807-46814]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46760-46764]:PrimitiveType[46815-46819]"
    }, {
      "left" : "notifyScreenOffLocked",
      "right" : "notifyScreenOffLocked",
      "info" : "SimpleName[46765-46786]:SimpleName[46820-46841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46789-46906]:Block[46844-46961]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[46799-46846]:IfStatement[46854-46901]"
    }, {
      "left" : "Log.d(TAG, \"notifyScreenOffLocked\");",
      "right" : "Log.d(TAG, \"notifyScreenOffLocked\");",
      "info" : "ExpressionStatement[46810-46846]:ExpressionStatement[46865-46901]"
    }, {
      "left" : "mHandler.sendEmptyMessage(NOTIFY_SCREEN_OFF);",
      "right" : "mHandler.sendEmptyMessage(NOTIFY_SCREEN_OFF);",
      "info" : "ExpressionStatement[46855-46900]:ExpressionStatement[46910-46955]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47064-47071]:Modifier[47119-47126]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47072-47076]:PrimitiveType[47127-47131]"
    }, {
      "left" : "notifyScreenOnLocked",
      "right" : "notifyScreenOnLocked",
      "info" : "SimpleName[47077-47097]:SimpleName[47132-47152]"
    }, {
      "left" : "IKeyguardShowCallback result",
      "right" : "IKeyguardShowCallback result",
      "info" : "SingleVariableDeclaration[47098-47126]:SingleVariableDeclaration[47153-47181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47128-47297]:Block[47183-47352]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[47138-47184]:IfStatement[47193-47239]"
    }, {
      "left" : "Log.d(TAG, \"notifyScreenOnLocked\");",
      "right" : "Log.d(TAG, \"notifyScreenOnLocked\");",
      "info" : "ExpressionStatement[47149-47184]:ExpressionStatement[47204-47239]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(NOTIFY_SCREEN_ON, result);",
      "right" : "Message msg = mHandler.obtainMessage(NOTIFY_SCREEN_ON, result);",
      "info" : "VariableDeclarationStatement[47193-47256]:VariableDeclarationStatement[47248-47311]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[47265-47291]:ExpressionStatement[47320-47346]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47401-47408]:Modifier[47456-47463]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47409-47413]:PrimitiveType[47464-47468]"
    }, {
      "left" : "showLocked",
      "right" : "showLocked",
      "info" : "SimpleName[47414-47424]:SimpleName[47469-47479]"
    }, {
      "left" : "Bundle options",
      "right" : "Bundle options",
      "info" : "SingleVariableDeclaration[47425-47439]:SingleVariableDeclaration[47480-47494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47441-47708]:Block[47496-47763]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[47451-47487]:IfStatement[47506-47542]"
    }, {
      "left" : "Log.d(TAG, \"showLocked\");",
      "right" : "Log.d(TAG, \"showLocked\");",
      "info" : "ExpressionStatement[47462-47487]:ExpressionStatement[47517-47542]"
    }, {
      "left" : "mShowKeyguardWakeLock.acquire();",
      "right" : "mShowKeyguardWakeLock.acquire();",
      "info" : "ExpressionStatement[47574-47606]:ExpressionStatement[47629-47661]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(SHOW, options);",
      "right" : "Message msg = mHandler.obtainMessage(SHOW, options);",
      "info" : "VariableDeclarationStatement[47615-47667]:VariableDeclarationStatement[47670-47722]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[47676-47702]:ExpressionStatement[47731-47757]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47814-47821]:Modifier[47869-47876]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47822-47826]:PrimitiveType[47877-47881]"
    }, {
      "left" : "hideLocked",
      "right" : "hideLocked",
      "info" : "SimpleName[47827-47837]:SimpleName[47882-47892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47840-47979]:Block[47895-48034]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[47850-47886]:IfStatement[47905-47941]"
    }, {
      "left" : "Log.d(TAG, \"hideLocked\");",
      "right" : "Log.d(TAG, \"hideLocked\");",
      "info" : "ExpressionStatement[47861-47886]:ExpressionStatement[47916-47941]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(HIDE);",
      "right" : "Message msg = mHandler.obtainMessage(HIDE);",
      "info" : "VariableDeclarationStatement[47895-47938]:VariableDeclarationStatement[47950-47993]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[47947-47973]:ExpressionStatement[48002-48028]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47985-47991]:Modifier[48040-48046]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47992-47999]:PrimitiveType[48047-48054]"
    }, {
      "left" : "isSecure",
      "right" : "isSecure",
      "info" : "SimpleName[48000-48008]:SimpleName[48055-48063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48011-48139]:Block[48066-48194]"
    }, {
      "left" : "return mLockPatternUtils.isSecure()\n            || KeyguardUpdateMonitor.getInstance(mContext).isSimPinSecure();",
      "right" : "return mLockPatternUtils.isSecure()\n            || KeyguardUpdateMonitor.getInstance(mContext).isSimPinSecure();",
      "info" : "ReturnStatement[48021-48133]:ReturnStatement[48076-48188]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48392-48398]:Modifier[48447-48453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48399-48403]:PrimitiveType[48454-48458]"
    }, {
      "left" : "setCurrentUser",
      "right" : "setCurrentUser",
      "info" : "SimpleName[48404-48418]:SimpleName[48459-48473]"
    }, {
      "left" : "int newUserId",
      "right" : "int newUserId",
      "info" : "SingleVariableDeclaration[48419-48432]:SingleVariableDeclaration[48474-48487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48434-48494]:Block[48489-48549]"
    }, {
      "left" : "mLockPatternUtils.setCurrentUser(newUserId);",
      "right" : "mLockPatternUtils.setCurrentUser(newUserId);",
      "info" : "ExpressionStatement[48444-48488]:ExpressionStatement[48499-48543]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48587-48596]:MarkerAnnotation[48642-48651]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48605-48611]:Modifier[48660-48666]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48612-48616]:PrimitiveType[48667-48671]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[48617-48626]:SimpleName[48672-48681]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[48627-48642]:SingleVariableDeclaration[48682-48697]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[48644-48657]:SingleVariableDeclaration[48699-48712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48659-50054]:Block[48714-50109]"
    }, {
      "left" : "if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction()))",
      "right" : "if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction()))",
      "info" : "IfStatement[48673-50044]:IfStatement[48728-50099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48729-49349]:Block[48784-49404]"
    }, {
      "left" : "final int sequence = intent.getIntExtra(\"seq\", 0);",
      "right" : "final int sequence = intent.getIntExtra(\"seq\", 0);",
      "info" : "VariableDeclarationStatement[48747-48797]:VariableDeclarationStatement[48802-48852]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[48814-48978]:IfStatement[48869-49033]"
    }, {
      "left" : "Log.d(TAG, \"received DELAYED_KEYGUARD_ACTION with seq = \"\n                        + sequence + \", mDelayedShowingSequence = \" + mDelayedShowingSequence);",
      "right" : "Log.d(TAG, \"received DELAYED_KEYGUARD_ACTION with seq = \"\n                        + sequence + \", mDelayedShowingSequence = \" + mDelayedShowingSequence);",
      "info" : "ExpressionStatement[48825-48978]:ExpressionStatement[48880-49033]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n                    if (mDelayedShowingSequence == sequence) {\n                        // Don't play lockscreen SFX if the screen went off due to timeout.\n                        mSuppressNextLockSound = true;\n                        doKeyguardLocked(null);\n                    }\n                }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n                    if (mDelayedShowingSequence == sequence) {\n                        // Don't play lockscreen SFX if the screen went off due to timeout.\n                        mSuppressNextLockSound = true;\n                        doKeyguardLocked(null);\n                    }\n                }",
      "info" : "SynchronizedStatement[48995-49335]:SynchronizedStatement[49050-49390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49036-49335]:Block[49091-49390]"
    }, {
      "left" : "if (mDelayedShowingSequence == sequence)",
      "right" : "if (mDelayedShowingSequence == sequence)",
      "info" : "IfStatement[49058-49317]:IfStatement[49113-49372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49099-49317]:Block[49154-49372]"
    }, {
      "left" : "mSuppressNextLockSound = true;",
      "right" : "mSuppressNextLockSound = true;",
      "info" : "ExpressionStatement[49217-49247]:ExpressionStatement[49272-49302]"
    }, {
      "left" : "doKeyguardLocked(null);",
      "right" : "doKeyguardLocked(null);",
      "info" : "ExpressionStatement[49272-49295]:ExpressionStatement[49327-49350]"
    }, {
      "left" : "if (DISMISS_KEYGUARD_SECURELY_ACTION.equals(intent.getAction()))",
      "right" : "if (DISMISS_KEYGUARD_SECURELY_ACTION.equals(intent.getAction()))",
      "info" : "IfStatement[49355-50044]:IfStatement[49410-50099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49420-49694]:Block[49475-49749]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n                    if (mScreenOn) {\n                        dismiss();\n                    } else {\n                        mDismissSecurelyOnScreenOn = true;\n                    }\n                }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n                    if (mScreenOn) {\n                        dismiss();\n                    } else {\n                        mDismissSecurelyOnScreenOn = true;\n                    }\n                }",
      "info" : "SynchronizedStatement[49438-49680]:SynchronizedStatement[49493-49735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49479-49680]:Block[49534-49735]"
    }, {
      "left" : "if (mScreenOn)",
      "right" : "if (mScreenOn)",
      "info" : "IfStatement[49501-49662]:IfStatement[49556-49717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49516-49574]:Block[49571-49629]"
    }, {
      "left" : "dismiss();",
      "right" : "dismiss();",
      "info" : "ExpressionStatement[49542-49552]:ExpressionStatement[49597-49607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49580-49662]:Block[49635-49717]"
    }, {
      "left" : "mDismissSecurelyOnScreenOn = true;",
      "right" : "mDismissSecurelyOnScreenOn = true;",
      "info" : "ExpressionStatement[49606-49640]:ExpressionStatement[49661-49695]"
    }, {
      "left" : "if (KEYGUARD_SERVICE_ACTION_STATE_CHANGE.equals(intent.getAction()))",
      "right" : "if (KEYGUARD_SERVICE_ACTION_STATE_CHANGE.equals(intent.getAction()))",
      "info" : "IfStatement[49700-50044]:IfStatement[49755-50099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49769-50044]:Block[49824-50099]"
    }, {
      "left" : "mKeyguardBound = intent.getBooleanExtra(KEYGUARD_SERVICE_EXTRA_ACTIVE, false);",
      "right" : "mKeyguardBound = intent.getBooleanExtra(KEYGUARD_SERVICE_EXTRA_ACTIVE, false);",
      "info" : "ExpressionStatement[49787-49865]:ExpressionStatement[49842-49920]"
    }, {
      "left" : "context.sendBroadcast(new Intent(LockscreenToggleTile.ACTION_APPLY_LOCKSCREEN_STATE)\n                        .setPackage(context.getPackageName()));",
      "right" : "context.sendBroadcast(new Intent(LockscreenToggleTile.ACTION_APPLY_LOCKSCREEN_STATE)\n                        .setPackage(context.getPackageName()));",
      "info" : "ExpressionStatement[49882-50030]:ExpressionStatement[49937-50085]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50067-50073]:Modifier[50122-50128]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50074-50078]:PrimitiveType[50129-50133]"
    }, {
      "left" : "keyguardDone",
      "right" : "keyguardDone",
      "info" : "SimpleName[50079-50091]:SimpleName[50134-50146]"
    }, {
      "left" : "boolean authenticated",
      "right" : "boolean authenticated",
      "info" : "SingleVariableDeclaration[50092-50113]:SingleVariableDeclaration[50147-50168]"
    }, {
      "left" : "boolean wakeup",
      "right" : "boolean wakeup",
      "info" : "SingleVariableDeclaration[50115-50129]:SingleVariableDeclaration[50170-50184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50131-50382]:Block[50186-50437]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[50141-50202]:IfStatement[50196-50257]"
    }, {
      "left" : "Log.d(TAG, \"keyguardDone(\" + authenticated + \")\");",
      "right" : "Log.d(TAG, \"keyguardDone(\" + authenticated + \")\");",
      "info" : "ExpressionStatement[50152-50202]:ExpressionStatement[50207-50257]"
    }, {
      "left" : "EventLog.writeEvent(70000, 2);",
      "right" : "EventLog.writeEvent(70000, 2);",
      "info" : "ExpressionStatement[50211-50241]:ExpressionStatement[50266-50296]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(KEYGUARD_DONE, authenticated ? 1 : 0, wakeup ? 1 : 0);",
      "right" : "Message msg = mHandler.obtainMessage(KEYGUARD_DONE, authenticated ? 1 : 0, wakeup ? 1 : 0);",
      "info" : "VariableDeclarationStatement[50250-50341]:VariableDeclarationStatement[50305-50396]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[50350-50376]:ExpressionStatement[50405-50431]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50843-50852]:MarkerAnnotation[50898-50907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50861-50867]:Modifier[50916-50922]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50868-50872]:PrimitiveType[50923-50927]"
    }, {
      "left" : "handleMessage",
      "right" : "handleMessage",
      "info" : "SimpleName[50873-50886]:SimpleName[50928-50941]"
    }, {
      "left" : "Message msg",
      "right" : "Message msg",
      "info" : "SingleVariableDeclaration[50887-50898]:SingleVariableDeclaration[50942-50953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50900-52939]:Block[50955-52994]"
    }, {
      "left" : "switch (msg.what) {\n                case SHOW:\n                    handleShow((Bundle) msg.obj);\n                    break;\n                case HIDE:\n                    handleHide();\n                    break;\n                case RESET:\n                    handleReset();\n                    break;\n                case VERIFY_UNLOCK:\n                    handleVerifyUnlock();\n                    break;\n                case NOTIFY_SCREEN_OFF:\n                    handleNotifyScreenOff();\n                    break;\n                case NOTIFY_SCREEN_ON:\n                    handleNotifyScreenOn((IKeyguardShowCallback) msg.obj);\n                    break;\n                case KEYGUARD_DONE:\n                    handleKeyguardDone(msg.arg1 != 0, msg.arg2 != 0);\n                    break;\n                case KEYGUARD_DONE_DRAWING:\n                    handleKeyguardDoneDrawing();\n                    break;\n                case KEYGUARD_DONE_AUTHENTICATING:\n                    keyguardDone(true, true);\n                    break;\n                case SET_OCCLUDED:\n                    handleSetOccluded(msg.arg1 != 0);\n                    break;\n                case KEYGUARD_TIMEOUT:\n                    synchronized (KeyguardViewMediator.this) {\n                        doKeyguardLocked((Bundle) msg.obj);\n                    }\n                    break;\n                case DISMISS:\n                    handleDismiss();\n                    break;\n                case START_KEYGUARD_EXIT_ANIM:\n                    StartKeyguardExitAnimParams params = (StartKeyguardExitAnimParams) msg.obj;\n                    handleStartKeyguardExitAnimation(params.startTime, params.fadeoutDuration);\n                    break;\n                case KEYGUARD_DONE_PENDING_TIMEOUT:\n                    Log.w(TAG, \"Timeout while waiting for activity drawn!\");\n                    // Fall through.\n                case ON_ACTIVITY_DRAWN:\n                    handleOnActivityDrawn();\n                    break;\n            }",
      "right" : "switch (msg.what) {\n                case SHOW:\n                    handleShow((Bundle) msg.obj);\n                    break;\n                case HIDE:\n                    handleHide();\n                    break;\n                case RESET:\n                    handleReset();\n                    break;\n                case VERIFY_UNLOCK:\n                    handleVerifyUnlock();\n                    break;\n                case NOTIFY_SCREEN_OFF:\n                    handleNotifyScreenOff();\n                    break;\n                case NOTIFY_SCREEN_ON:\n                    handleNotifyScreenOn((IKeyguardShowCallback) msg.obj);\n                    break;\n                case KEYGUARD_DONE:\n                    handleKeyguardDone(msg.arg1 != 0, msg.arg2 != 0);\n                    break;\n                case KEYGUARD_DONE_DRAWING:\n                    handleKeyguardDoneDrawing();\n                    break;\n                case KEYGUARD_DONE_AUTHENTICATING:\n                    keyguardDone(true, true);\n                    break;\n                case SET_OCCLUDED:\n                    handleSetOccluded(msg.arg1 != 0);\n                    break;\n                case KEYGUARD_TIMEOUT:\n                    synchronized (KeyguardViewMediator.this) {\n                        doKeyguardLocked((Bundle) msg.obj);\n                    }\n                    break;\n                case DISMISS:\n                    handleDismiss();\n                    break;\n                case START_KEYGUARD_EXIT_ANIM:\n                    StartKeyguardExitAnimParams params = (StartKeyguardExitAnimParams) msg.obj;\n                    handleStartKeyguardExitAnimation(params.startTime, params.fadeoutDuration);\n                    break;\n                case KEYGUARD_DONE_PENDING_TIMEOUT:\n                    Log.w(TAG, \"Timeout while waiting for activity drawn!\");\n                    // Fall through.\n                case ON_ACTIVITY_DRAWN:\n                    handleOnActivityDrawn();\n                    break;\n            }",
      "info" : "SwitchStatement[50914-52929]:SwitchStatement[50969-52984]"
    }, {
      "left" : "case SHOW:",
      "right" : "case SHOW:",
      "info" : "SwitchCase[50950-50960]:SwitchCase[51005-51015]"
    }, {
      "left" : "handleShow((Bundle) msg.obj);",
      "right" : "handleShow((Bundle) msg.obj);",
      "info" : "ExpressionStatement[50981-51010]:ExpressionStatement[51036-51065]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51031-51037]:BreakStatement[51086-51092]"
    }, {
      "left" : "case HIDE:",
      "right" : "case HIDE:",
      "info" : "SwitchCase[51054-51064]:SwitchCase[51109-51119]"
    }, {
      "left" : "handleHide();",
      "right" : "handleHide();",
      "info" : "ExpressionStatement[51085-51098]:ExpressionStatement[51140-51153]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51119-51125]:BreakStatement[51174-51180]"
    }, {
      "left" : "case RESET:",
      "right" : "case RESET:",
      "info" : "SwitchCase[51142-51153]:SwitchCase[51197-51208]"
    }, {
      "left" : "handleReset();",
      "right" : "handleReset();",
      "info" : "ExpressionStatement[51174-51188]:ExpressionStatement[51229-51243]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51209-51215]:BreakStatement[51264-51270]"
    }, {
      "left" : "case VERIFY_UNLOCK:",
      "right" : "case VERIFY_UNLOCK:",
      "info" : "SwitchCase[51232-51251]:SwitchCase[51287-51306]"
    }, {
      "left" : "handleVerifyUnlock();",
      "right" : "handleVerifyUnlock();",
      "info" : "ExpressionStatement[51272-51293]:ExpressionStatement[51327-51348]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51314-51320]:BreakStatement[51369-51375]"
    }, {
      "left" : "case NOTIFY_SCREEN_OFF:",
      "right" : "case NOTIFY_SCREEN_OFF:",
      "info" : "SwitchCase[51337-51360]:SwitchCase[51392-51415]"
    }, {
      "left" : "handleNotifyScreenOff();",
      "right" : "handleNotifyScreenOff();",
      "info" : "ExpressionStatement[51381-51405]:ExpressionStatement[51436-51460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51426-51432]:BreakStatement[51481-51487]"
    }, {
      "left" : "case NOTIFY_SCREEN_ON:",
      "right" : "case NOTIFY_SCREEN_ON:",
      "info" : "SwitchCase[51449-51471]:SwitchCase[51504-51526]"
    }, {
      "left" : "handleNotifyScreenOn((IKeyguardShowCallback) msg.obj);",
      "right" : "handleNotifyScreenOn((IKeyguardShowCallback) msg.obj);",
      "info" : "ExpressionStatement[51492-51546]:ExpressionStatement[51547-51601]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51567-51573]:BreakStatement[51622-51628]"
    }, {
      "left" : "case KEYGUARD_DONE:",
      "right" : "case KEYGUARD_DONE:",
      "info" : "SwitchCase[51590-51609]:SwitchCase[51645-51664]"
    }, {
      "left" : "handleKeyguardDone(msg.arg1 != 0, msg.arg2 != 0);",
      "right" : "handleKeyguardDone(msg.arg1 != 0, msg.arg2 != 0);",
      "info" : "ExpressionStatement[51630-51679]:ExpressionStatement[51685-51734]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51700-51706]:BreakStatement[51755-51761]"
    }, {
      "left" : "case KEYGUARD_DONE_DRAWING:",
      "right" : "case KEYGUARD_DONE_DRAWING:",
      "info" : "SwitchCase[51723-51750]:SwitchCase[51778-51805]"
    }, {
      "left" : "handleKeyguardDoneDrawing();",
      "right" : "handleKeyguardDoneDrawing();",
      "info" : "ExpressionStatement[51771-51799]:ExpressionStatement[51826-51854]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51820-51826]:BreakStatement[51875-51881]"
    }, {
      "left" : "case KEYGUARD_DONE_AUTHENTICATING:",
      "right" : "case KEYGUARD_DONE_AUTHENTICATING:",
      "info" : "SwitchCase[51843-51877]:SwitchCase[51898-51932]"
    }, {
      "left" : "keyguardDone(true, true);",
      "right" : "keyguardDone(true, true);",
      "info" : "ExpressionStatement[51898-51923]:ExpressionStatement[51953-51978]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51944-51950]:BreakStatement[51999-52005]"
    }, {
      "left" : "case SET_OCCLUDED:",
      "right" : "case SET_OCCLUDED:",
      "info" : "SwitchCase[51967-51985]:SwitchCase[52022-52040]"
    }, {
      "left" : "handleSetOccluded(msg.arg1 != 0);",
      "right" : "handleSetOccluded(msg.arg1 != 0);",
      "info" : "ExpressionStatement[52006-52039]:ExpressionStatement[52061-52094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52060-52066]:BreakStatement[52115-52121]"
    }, {
      "left" : "case KEYGUARD_TIMEOUT:",
      "right" : "case KEYGUARD_TIMEOUT:",
      "info" : "SwitchCase[52083-52105]:SwitchCase[52138-52160]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n                        doKeyguardLocked((Bundle) msg.obj);\n                    }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n                        doKeyguardLocked((Bundle) msg.obj);\n                    }",
      "info" : "SynchronizedStatement[52126-52250]:SynchronizedStatement[52181-52305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52167-52250]:Block[52222-52305]"
    }, {
      "left" : "doKeyguardLocked((Bundle) msg.obj);",
      "right" : "doKeyguardLocked((Bundle) msg.obj);",
      "info" : "ExpressionStatement[52193-52228]:ExpressionStatement[52248-52283]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52271-52277]:BreakStatement[52326-52332]"
    }, {
      "left" : "case DISMISS:",
      "right" : "case DISMISS:",
      "info" : "SwitchCase[52294-52307]:SwitchCase[52349-52362]"
    }, {
      "left" : "handleDismiss();",
      "right" : "handleDismiss();",
      "info" : "ExpressionStatement[52328-52344]:ExpressionStatement[52383-52399]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52365-52371]:BreakStatement[52420-52426]"
    }, {
      "left" : "case START_KEYGUARD_EXIT_ANIM:",
      "right" : "case START_KEYGUARD_EXIT_ANIM:",
      "info" : "SwitchCase[52388-52418]:SwitchCase[52443-52473]"
    }, {
      "left" : "StartKeyguardExitAnimParams params = (StartKeyguardExitAnimParams) msg.obj;",
      "right" : "StartKeyguardExitAnimParams params = (StartKeyguardExitAnimParams) msg.obj;",
      "info" : "VariableDeclarationStatement[52439-52514]:VariableDeclarationStatement[52494-52569]"
    }, {
      "left" : "handleStartKeyguardExitAnimation(params.startTime, params.fadeoutDuration);",
      "right" : "handleStartKeyguardExitAnimation(params.startTime, params.fadeoutDuration);",
      "info" : "ExpressionStatement[52535-52610]:ExpressionStatement[52590-52665]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52631-52637]:BreakStatement[52686-52692]"
    }, {
      "left" : "case KEYGUARD_DONE_PENDING_TIMEOUT:",
      "right" : "case KEYGUARD_DONE_PENDING_TIMEOUT:",
      "info" : "SwitchCase[52654-52689]:SwitchCase[52709-52744]"
    }, {
      "left" : "Log.w(TAG, \"Timeout while waiting for activity drawn!\");",
      "right" : "Log.w(TAG, \"Timeout while waiting for activity drawn!\");",
      "info" : "ExpressionStatement[52710-52766]:ExpressionStatement[52765-52821]"
    }, {
      "left" : "case ON_ACTIVITY_DRAWN:",
      "right" : "case ON_ACTIVITY_DRAWN:",
      "info" : "SwitchCase[52820-52843]:SwitchCase[52875-52898]"
    }, {
      "left" : "handleOnActivityDrawn();",
      "right" : "handleOnActivityDrawn();",
      "info" : "ExpressionStatement[52864-52888]:ExpressionStatement[52919-52943]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52909-52915]:BreakStatement[52964-52970]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53021-53028]:Modifier[53076-53083]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53029-53033]:PrimitiveType[53084-53088]"
    }, {
      "left" : "handleKeyguardDone",
      "right" : "handleKeyguardDone",
      "info" : "SimpleName[53034-53052]:SimpleName[53089-53107]"
    }, {
      "left" : "boolean authenticated",
      "right" : "boolean authenticated",
      "info" : "SingleVariableDeclaration[53053-53074]:SingleVariableDeclaration[53108-53129]"
    }, {
      "left" : "boolean wakeup",
      "right" : "boolean wakeup",
      "info" : "SingleVariableDeclaration[53076-53090]:SingleVariableDeclaration[53131-53145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53092-54122]:Block[53147-54483]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[53102-53146]:IfStatement[53157-53201]"
    }, {
      "left" : "Log.d(TAG, \"handleKeyguardDone\");",
      "right" : "Log.d(TAG, \"handleKeyguardDone\");",
      "info" : "ExpressionStatement[53113-53146]:ExpressionStatement[53168-53201]"
    }, {
      "left" : "synchronized (this) {\n            resetKeyguardDonePendingLocked();\n        }",
      "right" : "synchronized (this) {\n            resetKeyguardDonePendingLocked();\n        }",
      "info" : "SynchronizedStatement[53155-53232]:SynchronizedStatement[53210-53287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53175-53232]:Block[53230-53287]"
    }, {
      "left" : "resetKeyguardDonePendingLocked();",
      "right" : "resetKeyguardDonePendingLocked();",
      "info" : "ExpressionStatement[53189-53222]:ExpressionStatement[53244-53277]"
    }, {
      "left" : "if (authenticated)",
      "right" : "if (authenticated)",
      "info" : "IfStatement[53242-53328]:IfStatement[53297-53689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53261-53328]:Block[53316-53689]"
    }, {
      "left" : "mUpdateMonitor.clearFailedUnlockAttempts();",
      "right" : "mUpdateMonitor.clearFailedUnlockAttempts(true /* Clear FingerprintAttempts */);",
      "info" : "ExpressionStatement[53275-53318]:ExpressionStatement[53600-53679]"
    }, {
      "left" : "mUpdateMonitor.clearFingerprintRecognized();",
      "right" : "mUpdateMonitor.clearFingerprintRecognized();",
      "info" : "ExpressionStatement[53337-53381]:ExpressionStatement[53698-53742]"
    }, {
      "left" : "mUpdateMonitor.stopAuthenticatingFingerprint();",
      "right" : "mUpdateMonitor.stopAuthenticatingFingerprint();",
      "info" : "ExpressionStatement[53390-53437]:ExpressionStatement[53751-53798]"
    }, {
      "left" : "if (mExitSecureCallback != null)",
      "right" : "if (mExitSecureCallback != null)",
      "info" : "IfStatement[53447-54093]:IfStatement[53808-54454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53480-54093]:Block[53841-54454]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[53494-53722]:TryStatement[53855-54083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53498-53586]:Block[53859-53947]"
    }, {
      "left" : "mExitSecureCallback.onKeyguardExitResult(authenticated);",
      "right" : "mExitSecureCallback.onKeyguardExitResult(authenticated);",
      "info" : "ExpressionStatement[53516-53572]:ExpressionStatement[53877-53933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53613-53722]:Block[53974-54083]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(\" + authenticated + \")\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onKeyguardExitResult(\" + authenticated + \")\", e);",
      "info" : "ExpressionStatement[53631-53708]:ExpressionStatement[53992-54069]"
    }, {
      "left" : "mExitSecureCallback = null;",
      "right" : "mExitSecureCallback = null;",
      "info" : "ExpressionStatement[53736-53763]:ExpressionStatement[54097-54124]"
    }, {
      "left" : "if (authenticated)",
      "right" : "if (authenticated)",
      "info" : "IfStatement[53777-54083]:IfStatement[54138-54444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53796-54083]:Block[54157-54444]"
    }, {
      "left" : "mExternallyEnabled = true;",
      "right" : "mExternallyEnabled = true;",
      "info" : "ExpressionStatement[53950-53976]:ExpressionStatement[54311-54337]"
    }, {
      "left" : "mNeedToReshowWhenReenabled = false;",
      "right" : "mNeedToReshowWhenReenabled = false;",
      "info" : "ExpressionStatement[53993-54028]:ExpressionStatement[54354-54389]"
    }, {
      "left" : "updateInputRestricted();",
      "right" : "updateInputRestricted();",
      "info" : "ExpressionStatement[54045-54069]:ExpressionStatement[54406-54430]"
    }, {
      "left" : "handleHide();",
      "right" : "handleHide();",
      "info" : "ExpressionStatement[54103-54116]:ExpressionStatement[54464-54477]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54128-54135]:Modifier[54489-54496]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54136-54140]:PrimitiveType[54497-54501]"
    }, {
      "left" : "sendUserPresentBroadcast",
      "right" : "sendUserPresentBroadcast",
      "info" : "SimpleName[54141-54165]:SimpleName[54502-54526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54168-54805]:Block[54529-55166]"
    }, {
      "left" : "synchronized (this) {\n            if (mBootCompleted) {\n                final UserHandle currentUser = new UserHandle(mLockPatternUtils.getCurrentUser());\n                final UserManager um = (UserManager) mContext.getSystemService(\n                        Context.USER_SERVICE);\n                List <UserInfo> userHandles = um.getProfiles(currentUser.getIdentifier());\n                for (UserInfo ui : userHandles) {\n                    mContext.sendBroadcastAsUser(USER_PRESENT_INTENT, ui.getUserHandle());\n                }\n            } else {\n                mBootSendUserPresent = true;\n            }\n        }",
      "right" : "synchronized (this) {\n            if (mBootCompleted) {\n                final UserHandle currentUser = new UserHandle(mLockPatternUtils.getCurrentUser());\n                final UserManager um = (UserManager) mContext.getSystemService(\n                        Context.USER_SERVICE);\n                List <UserInfo> userHandles = um.getProfiles(currentUser.getIdentifier());\n                for (UserInfo ui : userHandles) {\n                    mContext.sendBroadcastAsUser(USER_PRESENT_INTENT, ui.getUserHandle());\n                }\n            } else {\n                mBootSendUserPresent = true;\n            }\n        }",
      "info" : "SynchronizedStatement[54178-54799]:SynchronizedStatement[54539-55160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54198-54799]:Block[54559-55160]"
    }, {
      "left" : "if (mBootCompleted)",
      "right" : "if (mBootCompleted)",
      "info" : "IfStatement[54212-54789]:IfStatement[54573-55150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54232-54723]:Block[54593-55084]"
    }, {
      "left" : "final UserHandle currentUser = new UserHandle(mLockPatternUtils.getCurrentUser());",
      "right" : "final UserHandle currentUser = new UserHandle(mLockPatternUtils.getCurrentUser());",
      "info" : "VariableDeclarationStatement[54250-54332]:VariableDeclarationStatement[54611-54693]"
    }, {
      "left" : "final UserManager um = (UserManager) mContext.getSystemService(\n                        Context.USER_SERVICE);",
      "right" : "final UserManager um = (UserManager) mContext.getSystemService(\n                        Context.USER_SERVICE);",
      "info" : "VariableDeclarationStatement[54349-54459]:VariableDeclarationStatement[54710-54820]"
    }, {
      "left" : "List <UserInfo> userHandles = um.getProfiles(currentUser.getIdentifier());",
      "right" : "List <UserInfo> userHandles = um.getProfiles(currentUser.getIdentifier());",
      "info" : "VariableDeclarationStatement[54476-54550]:VariableDeclarationStatement[54837-54911]"
    }, {
      "left" : "for (UserInfo ui : userHandles)",
      "right" : "for (UserInfo ui : userHandles)",
      "info" : "EnhancedForStatement[54567-54709]:EnhancedForStatement[54928-55070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54599-54709]:Block[54960-55070]"
    }, {
      "left" : "mContext.sendBroadcastAsUser(USER_PRESENT_INTENT, ui.getUserHandle());",
      "right" : "mContext.sendBroadcastAsUser(USER_PRESENT_INTENT, ui.getUserHandle());",
      "info" : "ExpressionStatement[54621-54691]:ExpressionStatement[54982-55052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54729-54789]:Block[55090-55150]"
    }, {
      "left" : "mBootSendUserPresent = true;",
      "right" : "mBootSendUserPresent = true;",
      "info" : "ExpressionStatement[54747-54775]:ExpressionStatement[55108-55136]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54888-54895]:Modifier[55249-55256]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54896-54900]:PrimitiveType[55257-55261]"
    }, {
      "left" : "handleKeyguardDoneDrawing",
      "right" : "handleKeyguardDoneDrawing",
      "info" : "SimpleName[54901-54926]:SimpleName[55262-55287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54929-55558]:Block[55290-55919]"
    }, {
      "left" : "synchronized(this) {\n            if (DEBUG) Log.d(TAG, \"handleKeyguardDoneDrawing\");\n            if (mWaitingUntilKeyguardVisible) {\n                if (DEBUG) Log.d(TAG, \"handleKeyguardDoneDrawing: notifying mWaitingUntilKeyguardVisible\");\n                mWaitingUntilKeyguardVisible = false;\n                notifyAll();\n\n                // there will usually be two of these sent, one as a timeout, and one\n                // as a result of the callback, so remove any remaining messages from\n                // the queue\n                mHandler.removeMessages(KEYGUARD_DONE_DRAWING);\n            }\n        }",
      "right" : "synchronized(this) {\n            if (DEBUG) Log.d(TAG, \"handleKeyguardDoneDrawing\");\n            if (mWaitingUntilKeyguardVisible) {\n                if (DEBUG) Log.d(TAG, \"handleKeyguardDoneDrawing: notifying mWaitingUntilKeyguardVisible\");\n                mWaitingUntilKeyguardVisible = false;\n                notifyAll();\n\n                // there will usually be two of these sent, one as a timeout, and one\n                // as a result of the callback, so remove any remaining messages from\n                // the queue\n                mHandler.removeMessages(KEYGUARD_DONE_DRAWING);\n            }\n        }",
      "info" : "SynchronizedStatement[54939-55552]:SynchronizedStatement[55300-55913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54958-55552]:Block[55319-55913]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[54972-55023]:IfStatement[55333-55384]"
    }, {
      "left" : "Log.d(TAG, \"handleKeyguardDoneDrawing\");",
      "right" : "Log.d(TAG, \"handleKeyguardDoneDrawing\");",
      "info" : "ExpressionStatement[54983-55023]:ExpressionStatement[55344-55384]"
    }, {
      "left" : "if (mWaitingUntilKeyguardVisible)",
      "right" : "if (mWaitingUntilKeyguardVisible)",
      "info" : "IfStatement[55036-55542]:IfStatement[55397-55903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55070-55542]:Block[55431-55903]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[55088-55179]:IfStatement[55449-55540]"
    }, {
      "left" : "Log.d(TAG, \"handleKeyguardDoneDrawing: notifying mWaitingUntilKeyguardVisible\");",
      "right" : "Log.d(TAG, \"handleKeyguardDoneDrawing: notifying mWaitingUntilKeyguardVisible\");",
      "info" : "ExpressionStatement[55099-55179]:ExpressionStatement[55460-55540]"
    }, {
      "left" : "mWaitingUntilKeyguardVisible = false;",
      "right" : "mWaitingUntilKeyguardVisible = false;",
      "info" : "ExpressionStatement[55196-55233]:ExpressionStatement[55557-55594]"
    }, {
      "left" : "notifyAll();",
      "right" : "notifyAll();",
      "info" : "ExpressionStatement[55250-55262]:ExpressionStatement[55611-55623]"
    }, {
      "left" : "mHandler.removeMessages(KEYGUARD_DONE_DRAWING);",
      "right" : "mHandler.removeMessages(KEYGUARD_DONE_DRAWING);",
      "info" : "ExpressionStatement[55481-55528]:ExpressionStatement[55842-55889]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55564-55571]:Modifier[55925-55932]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55572-55576]:PrimitiveType[55933-55937]"
    }, {
      "left" : "playSounds",
      "right" : "playSounds",
      "info" : "SimpleName[55577-55587]:SimpleName[55938-55948]"
    }, {
      "left" : "boolean locked",
      "right" : "boolean locked",
      "info" : "SingleVariableDeclaration[55588-55602]:SingleVariableDeclaration[55949-55963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55604-55823]:Block[55965-56184]"
    }, {
      "left" : "if (mSuppressNextLockSound)",
      "right" : "if (mSuppressNextLockSound)",
      "info" : "IfStatement[55654-55757]:IfStatement[56015-56118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55682-55757]:Block[56043-56118]"
    }, {
      "left" : "mSuppressNextLockSound = false;",
      "right" : "mSuppressNextLockSound = false;",
      "info" : "ExpressionStatement[55696-55727]:ExpressionStatement[56057-56088]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55740-55747]:ReturnStatement[56101-56108]"
    }, {
      "left" : "playSound(locked ? mLockSoundId : mUnlockSoundId);",
      "right" : "playSound(locked ? mLockSoundId : mUnlockSoundId);",
      "info" : "ExpressionStatement[55767-55817]:ExpressionStatement[56128-56178]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55829-55836]:Modifier[56190-56197]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55837-55841]:PrimitiveType[56198-56202]"
    }, {
      "left" : "playSound",
      "right" : "playSound",
      "info" : "SimpleName[55842-55851]:SimpleName[56203-56212]"
    }, {
      "left" : "int soundId",
      "right" : "int soundId",
      "info" : "SingleVariableDeclaration[55852-55863]:SingleVariableDeclaration[56213-56224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55865-56724]:Block[56226-57085]"
    }, {
      "left" : "if (soundId == 0)",
      "right" : "if (soundId == 0)",
      "info" : "IfStatement[55875-55900]:IfStatement[56236-56261]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55893-55900]:ReturnStatement[56254-56261]"
    }, {
      "left" : "final ContentResolver cr = mContext.getContentResolver();",
      "right" : "final ContentResolver cr = mContext.getContentResolver();",
      "info" : "VariableDeclarationStatement[55909-55966]:VariableDeclarationStatement[56270-56327]"
    }, {
      "left" : "if (Settings.System.getInt(cr, Settings.System.LOCKSCREEN_SOUNDS_ENABLED, 1) == 1)",
      "right" : "if (Settings.System.getInt(cr, Settings.System.LOCKSCREEN_SOUNDS_ENABLED, 1) == 1)",
      "info" : "IfStatement[55975-56718]:IfStatement[56336-57079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56058-56718]:Block[56419-57079]"
    }, {
      "left" : "mLockSounds.stop(mLockSoundStreamId);",
      "right" : "mLockSounds.stop(mLockSoundStreamId);",
      "info" : "ExpressionStatement[56073-56110]:ExpressionStatement[56434-56471]"
    }, {
      "left" : "if (mAudioManager == null)",
      "right" : "if (mAudioManager == null)",
      "info" : "IfStatement[56157-56420]:IfStatement[56518-56781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56184-56420]:Block[56545-56781]"
    }, {
      "left" : "mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);",
      "right" : "mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);",
      "info" : "ExpressionStatement[56202-56282]:ExpressionStatement[56563-56643]"
    }, {
      "left" : "if (mAudioManager == null)",
      "right" : "if (mAudioManager == null)",
      "info" : "IfStatement[56299-56333]:IfStatement[56660-56694]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56326-56333]:ReturnStatement[56687-56694]"
    }, {
      "left" : "mMasterStreamType = mAudioManager.getMasterStreamType();",
      "right" : "mMasterStreamType = mAudioManager.getMasterStreamType();",
      "info" : "ExpressionStatement[56350-56406]:ExpressionStatement[56711-56767]"
    }, {
      "left" : "if (mAudioManager.isStreamMute(mMasterStreamType))",
      "right" : "if (mAudioManager.isStreamMute(mMasterStreamType))",
      "info" : "IfStatement[56493-56551]:IfStatement[56854-56912]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56544-56551]:ReturnStatement[56905-56912]"
    }, {
      "left" : "mLockSoundStreamId = mLockSounds.play(soundId,\n                    mLockSoundVolume, mLockSoundVolume, 1/*priortiy*/, 0/*loop*/, 1.0f/*rate*/);",
      "right" : "mLockSoundStreamId = mLockSounds.play(soundId,\n                    mLockSoundVolume, mLockSoundVolume, 1/*priortiy*/, 0/*loop*/, 1.0f/*rate*/);",
      "info" : "ExpressionStatement[56565-56708]:ExpressionStatement[56926-57069]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56730-56737]:Modifier[57091-57098]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56738-56742]:PrimitiveType[57099-57103]"
    }, {
      "left" : "playTrustedSound",
      "right" : "playTrustedSound",
      "info" : "SimpleName[56743-56759]:SimpleName[57104-57120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56762-56873]:Block[57123-57234]"
    }, {
      "left" : "if (mSuppressNextLockSound)",
      "right" : "if (mSuppressNextLockSound)",
      "info" : "IfStatement[56772-56831]:IfStatement[57133-57192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56800-56831]:Block[57161-57192]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56814-56821]:ReturnStatement[57175-57182]"
    }, {
      "left" : "playSound(mTrustedSoundId);",
      "right" : "playSound(mTrustedSoundId);",
      "info" : "ExpressionStatement[56840-56867]:ExpressionStatement[57201-57228]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56879-56886]:Modifier[57240-57247]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56887-56891]:PrimitiveType[57248-57252]"
    }, {
      "left" : "updateActivityLockScreenState",
      "right" : "updateActivityLockScreenState",
      "info" : "SimpleName[56892-56921]:SimpleName[57253-57282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56924-57084]:Block[57285-57445]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[56934-57078]:TryStatement[57295-57439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56938-57040]:Block[57299-57401]"
    }, {
      "left" : "ActivityManagerNative.getDefault().setLockScreenShown(mShowing && !mOccluded);",
      "right" : "ActivityManagerNative.getDefault().setLockScreenShown(mShowing && !mOccluded);",
      "info" : "ExpressionStatement[56952-57030]:ExpressionStatement[57313-57391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57067-57078]:Block[57428-57439]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57175-57182]:Modifier[57536-57543]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57183-57187]:PrimitiveType[57544-57548]"
    }, {
      "left" : "handleShow",
      "right" : "handleShow",
      "info" : "SimpleName[57188-57198]:SimpleName[57549-57559]"
    }, {
      "left" : "Bundle options",
      "right" : "Bundle options",
      "info" : "SingleVariableDeclaration[57199-57213]:SingleVariableDeclaration[57560-57574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57215-58030]:Block[57576-58391]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (!mSystemReady) {\n                if (DEBUG) Log.d(TAG, \"ignoring handleShow because system is not ready.\");\n                return;\n            } else {\n                if (DEBUG) Log.d(TAG, \"handleShow\");\n            }\n\n            setShowingLocked(true);\n            mStatusBarKeyguardViewManager.show(options);\n            mHiding = false;\n            resetKeyguardDonePendingLocked();\n            mHideAnimationRun = false;\n            updateActivityLockScreenState();\n            adjustStatusBarLocked();\n            userActivity();\n\n            // Do this at the end to not slow down display of the keyguard.\n            playSounds(true);\n\n            mShowKeyguardWakeLock.release();\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (!mSystemReady) {\n                if (DEBUG) Log.d(TAG, \"ignoring handleShow because system is not ready.\");\n                return;\n            } else {\n                if (DEBUG) Log.d(TAG, \"handleShow\");\n            }\n\n            setShowingLocked(true);\n            mStatusBarKeyguardViewManager.show(options);\n            mHiding = false;\n            resetKeyguardDonePendingLocked();\n            mHideAnimationRun = false;\n            updateActivityLockScreenState();\n            adjustStatusBarLocked();\n            userActivity();\n\n            // Do this at the end to not slow down display of the keyguard.\n            playSounds(true);\n\n            mShowKeyguardWakeLock.release();\n        }",
      "info" : "SynchronizedStatement[57225-57984]:SynchronizedStatement[57586-58345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57266-57984]:Block[57627-58345]"
    }, {
      "left" : "if (!mSystemReady)",
      "right" : "if (!mSystemReady)",
      "info" : "IfStatement[57280-57503]:IfStatement[57641-57864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57299-57429]:Block[57660-57790]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[57317-57391]:IfStatement[57678-57752]"
    }, {
      "left" : "Log.d(TAG, \"ignoring handleShow because system is not ready.\");",
      "right" : "Log.d(TAG, \"ignoring handleShow because system is not ready.\");",
      "info" : "ExpressionStatement[57328-57391]:ExpressionStatement[57689-57752]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57408-57415]:ReturnStatement[57769-57776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57435-57503]:Block[57796-57864]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[57453-57489]:IfStatement[57814-57850]"
    }, {
      "left" : "Log.d(TAG, \"handleShow\");",
      "right" : "Log.d(TAG, \"handleShow\");",
      "info" : "ExpressionStatement[57464-57489]:ExpressionStatement[57825-57850]"
    }, {
      "left" : "setShowingLocked(true);",
      "right" : "setShowingLocked(true);",
      "info" : "ExpressionStatement[57517-57540]:ExpressionStatement[57878-57901]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.show(options);",
      "right" : "mStatusBarKeyguardViewManager.show(options);",
      "info" : "ExpressionStatement[57553-57597]:ExpressionStatement[57914-57958]"
    }, {
      "left" : "mHiding = false;",
      "right" : "mHiding = false;",
      "info" : "ExpressionStatement[57610-57626]:ExpressionStatement[57971-57987]"
    }, {
      "left" : "resetKeyguardDonePendingLocked();",
      "right" : "resetKeyguardDonePendingLocked();",
      "info" : "ExpressionStatement[57639-57672]:ExpressionStatement[58000-58033]"
    }, {
      "left" : "mHideAnimationRun = false;",
      "right" : "mHideAnimationRun = false;",
      "info" : "ExpressionStatement[57685-57711]:ExpressionStatement[58046-58072]"
    }, {
      "left" : "updateActivityLockScreenState();",
      "right" : "updateActivityLockScreenState();",
      "info" : "ExpressionStatement[57724-57756]:ExpressionStatement[58085-58117]"
    }, {
      "left" : "adjustStatusBarLocked();",
      "right" : "adjustStatusBarLocked();",
      "info" : "ExpressionStatement[57769-57793]:ExpressionStatement[58130-58154]"
    }, {
      "left" : "userActivity();",
      "right" : "userActivity();",
      "info" : "ExpressionStatement[57806-57821]:ExpressionStatement[58167-58182]"
    }, {
      "left" : "playSounds(true);",
      "right" : "playSounds(true);",
      "info" : "ExpressionStatement[57911-57928]:ExpressionStatement[58272-58289]"
    }, {
      "left" : "mShowKeyguardWakeLock.release();",
      "right" : "mShowKeyguardWakeLock.release();",
      "info" : "ExpressionStatement[57942-57974]:ExpressionStatement[58303-58335]"
    }, {
      "left" : "mKeyguardDisplayManager.show();",
      "right" : "mKeyguardDisplayManager.show();",
      "info" : "ExpressionStatement[57993-58024]:ExpressionStatement[58354-58385]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[58113-58122]:MarkerAnnotation[58474-58483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58131-58137]:Modifier[58492-58498]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58138-58142]:PrimitiveType[58499-58503]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[58143-58146]:SimpleName[58504-58507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58149-58801]:Block[58510-59162]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[58163-58791]:TryStatement[58524-59152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58167-58681]:Block[58528-59042]"
    }, {
      "left" : "mWM.keyguardGoingAway(\n                        mStatusBarKeyguardViewManager.shouldDisableWindowAnimationsForUnlock(),\n                        mStatusBarKeyguardViewManager.isGoingToNotificationShade(),\n                        mStatusBarKeyguardViewManager.isKeyguardShowingMedia());",
      "right" : "mWM.keyguardGoingAway(\n                        mStatusBarKeyguardViewManager.shouldDisableWindowAnimationsForUnlock(),\n                        mStatusBarKeyguardViewManager.isGoingToNotificationShade(),\n                        mStatusBarKeyguardViewManager.isKeyguardShowingMedia());",
      "info" : "ExpressionStatement[58384-58667]:ExpressionStatement[58745-59028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58708-58791]:Block[59069-59152]"
    }, {
      "left" : "Log.e(TAG, \"Error while calling WindowManager\", e);",
      "right" : "Log.e(TAG, \"Error while calling WindowManager\", e);",
      "info" : "ExpressionStatement[58726-58777]:ExpressionStatement[59087-59138]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58900-58907]:Modifier[59261-59268]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58908-58912]:PrimitiveType[59269-59273]"
    }, {
      "left" : "handleHide",
      "right" : "handleHide",
      "info" : "SimpleName[58913-58923]:SimpleName[59274-59284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58926-59731]:Block[59287-60092]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleHide\");\n\n            mHiding = true;\n            if (mShowing && !mOccluded) {\n                if (!mHideAnimationRun) {\n                    mStatusBarKeyguardViewManager.startPreHideAnimation(mKeyguardGoingAwayRunnable);\n                } else {\n                    mKeyguardGoingAwayRunnable.run();\n                }\n            } else {\n\n                // Don't try to rely on WindowManager - if Keyguard wasn't showing, window\n                // manager won't start the exit animation.\n                handleStartKeyguardExitAnimation(\n                        SystemClock.uptimeMillis() + mHideAnimation.getStartOffset(),\n                        mHideAnimation.getDuration());\n            }\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleHide\");\n\n            mHiding = true;\n            if (mShowing && !mOccluded) {\n                if (!mHideAnimationRun) {\n                    mStatusBarKeyguardViewManager.startPreHideAnimation(mKeyguardGoingAwayRunnable);\n                } else {\n                    mKeyguardGoingAwayRunnable.run();\n                }\n            } else {\n\n                // Don't try to rely on WindowManager - if Keyguard wasn't showing, window\n                // manager won't start the exit animation.\n                handleStartKeyguardExitAnimation(\n                        SystemClock.uptimeMillis() + mHideAnimation.getStartOffset(),\n                        mHideAnimation.getDuration());\n            }\n        }",
      "info" : "SynchronizedStatement[58936-59725]:SynchronizedStatement[59297-60086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58977-59725]:Block[59338-60086]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[58991-59027]:IfStatement[59352-59388]"
    }, {
      "left" : "Log.d(TAG, \"handleHide\");",
      "right" : "Log.d(TAG, \"handleHide\");",
      "info" : "ExpressionStatement[59002-59027]:ExpressionStatement[59363-59388]"
    }, {
      "left" : "mHiding = true;",
      "right" : "mHiding = true;",
      "info" : "ExpressionStatement[59041-59056]:ExpressionStatement[59402-59417]"
    }, {
      "left" : "if (mShowing && !mOccluded)",
      "right" : "if (mShowing && !mOccluded)",
      "info" : "IfStatement[59069-59715]:IfStatement[59430-60076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59097-59352]:Block[59458-59713]"
    }, {
      "left" : "if (!mHideAnimationRun)",
      "right" : "if (!mHideAnimationRun)",
      "info" : "IfStatement[59115-59338]:IfStatement[59476-59699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59139-59259]:Block[59500-59620]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.startPreHideAnimation(mKeyguardGoingAwayRunnable);",
      "right" : "mStatusBarKeyguardViewManager.startPreHideAnimation(mKeyguardGoingAwayRunnable);",
      "info" : "ExpressionStatement[59161-59241]:ExpressionStatement[59522-59602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59265-59338]:Block[59626-59699]"
    }, {
      "left" : "mKeyguardGoingAwayRunnable.run();",
      "right" : "mKeyguardGoingAwayRunnable.run();",
      "info" : "ExpressionStatement[59287-59320]:ExpressionStatement[59648-59681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59358-59715]:Block[59719-60076]"
    }, {
      "left" : "handleStartKeyguardExitAnimation(\n                        SystemClock.uptimeMillis() + mHideAnimation.getStartOffset(),\n                        mHideAnimation.getDuration());",
      "right" : "handleStartKeyguardExitAnimation(\n                        SystemClock.uptimeMillis() + mHideAnimation.getStartOffset(),\n                        mHideAnimation.getDuration());",
      "info" : "ExpressionStatement[59527-59701]:ExpressionStatement[59888-60062]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59737-59744]:Modifier[60098-60105]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59745-59749]:PrimitiveType[60106-60110]"
    }, {
      "left" : "handleOnActivityDrawn",
      "right" : "handleOnActivityDrawn",
      "info" : "SimpleName[59750-59771]:SimpleName[60111-60132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59774-59888]:Block[60135-60249]"
    }, {
      "left" : "if (mKeyguardDonePending)",
      "right" : "if (mKeyguardDonePending)",
      "info" : "IfStatement[59784-59882]:IfStatement[60145-60243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59810-59882]:Block[60171-60243]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.onActivityDrawn();",
      "right" : "mStatusBarKeyguardViewManager.onActivityDrawn();",
      "info" : "ExpressionStatement[59824-59872]:ExpressionStatement[60185-60233]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59894-59901]:Modifier[60255-60262]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59902-59906]:PrimitiveType[60263-60267]"
    }, {
      "left" : "handleStartKeyguardExitAnimation",
      "right" : "handleStartKeyguardExitAnimation",
      "info" : "SimpleName[59907-59939]:SimpleName[60268-60300]"
    }, {
      "left" : "long startTime",
      "right" : "long startTime",
      "info" : "SingleVariableDeclaration[59940-59954]:SingleVariableDeclaration[60301-60315]"
    }, {
      "left" : "long fadeoutDuration",
      "right" : "long fadeoutDuration",
      "info" : "SingleVariableDeclaration[59956-59976]:SingleVariableDeclaration[60317-60337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59978-60703]:Block[60339-61064]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n\n            if (!mHiding) {\n                return;\n            }\n            mHiding = false;\n\n            // only play \"unlock\" noises if not on a call (since the incall UI\n            // disables the keyguard)\n            if (TelephonyManager.EXTRA_STATE_IDLE.equals(mPhoneState)) {\n                playSounds(false);\n            }\n\n            setShowingLocked(false);\n            mStatusBarKeyguardViewManager.hide(startTime, fadeoutDuration);\n            resetKeyguardDonePendingLocked();\n            mHideAnimationRun = false;\n            updateActivityLockScreenState();\n            adjustStatusBarLocked();\n            sendUserPresentBroadcast();\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n\n            if (!mHiding) {\n                return;\n            }\n            mHiding = false;\n\n            // only play \"unlock\" noises if not on a call (since the incall UI\n            // disables the keyguard)\n            if (TelephonyManager.EXTRA_STATE_IDLE.equals(mPhoneState)) {\n                playSounds(false);\n            }\n\n            setShowingLocked(false);\n            mStatusBarKeyguardViewManager.hide(startTime, fadeoutDuration);\n            resetKeyguardDonePendingLocked();\n            mHideAnimationRun = false;\n            updateActivityLockScreenState();\n            adjustStatusBarLocked();\n            sendUserPresentBroadcast();\n        }",
      "info" : "SynchronizedStatement[59988-60697]:SynchronizedStatement[60349-61058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60029-60697]:Block[60390-61058]"
    }, {
      "left" : "if (!mHiding)",
      "right" : "if (!mHiding)",
      "info" : "IfStatement[60044-60097]:IfStatement[60405-60458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60058-60097]:Block[60419-60458]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60076-60083]:ReturnStatement[60437-60444]"
    }, {
      "left" : "mHiding = false;",
      "right" : "mHiding = false;",
      "info" : "ExpressionStatement[60110-60126]:ExpressionStatement[60471-60487]"
    }, {
      "left" : "if (TelephonyManager.EXTRA_STATE_IDLE.equals(mPhoneState))",
      "right" : "if (TelephonyManager.EXTRA_STATE_IDLE.equals(mPhoneState))",
      "info" : "IfStatement[60257-60366]:IfStatement[60618-60727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60316-60366]:Block[60677-60727]"
    }, {
      "left" : "playSounds(false);",
      "right" : "playSounds(false);",
      "info" : "ExpressionStatement[60334-60352]:ExpressionStatement[60695-60713]"
    }, {
      "left" : "setShowingLocked(false);",
      "right" : "setShowingLocked(false);",
      "info" : "ExpressionStatement[60380-60404]:ExpressionStatement[60741-60765]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.hide(startTime, fadeoutDuration);",
      "right" : "mStatusBarKeyguardViewManager.hide(startTime, fadeoutDuration);",
      "info" : "ExpressionStatement[60417-60480]:ExpressionStatement[60778-60841]"
    }, {
      "left" : "resetKeyguardDonePendingLocked();",
      "right" : "resetKeyguardDonePendingLocked();",
      "info" : "ExpressionStatement[60493-60526]:ExpressionStatement[60854-60887]"
    }, {
      "left" : "mHideAnimationRun = false;",
      "right" : "mHideAnimationRun = false;",
      "info" : "ExpressionStatement[60539-60565]:ExpressionStatement[60900-60926]"
    }, {
      "left" : "updateActivityLockScreenState();",
      "right" : "updateActivityLockScreenState();",
      "info" : "ExpressionStatement[60578-60610]:ExpressionStatement[60939-60971]"
    }, {
      "left" : "adjustStatusBarLocked();",
      "right" : "adjustStatusBarLocked();",
      "info" : "ExpressionStatement[60623-60647]:ExpressionStatement[60984-61008]"
    }, {
      "left" : "sendUserPresentBroadcast();",
      "right" : "sendUserPresentBroadcast();",
      "info" : "ExpressionStatement[60660-60687]:ExpressionStatement[61021-61048]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60709-60716]:Modifier[61070-61077]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60717-60721]:PrimitiveType[61078-61082]"
    }, {
      "left" : "adjustStatusBarLocked",
      "right" : "adjustStatusBarLocked",
      "info" : "SimpleName[60722-60743]:SimpleName[61083-61104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60746-62114]:Block[61107-62475]"
    }, {
      "left" : "if (mStatusBarManager == null)",
      "right" : "if (mStatusBarManager == null)",
      "info" : "IfStatement[60756-60924]:IfStatement[61117-61285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60787-60924]:Block[61148-61285]"
    }, {
      "left" : "mStatusBarManager = (StatusBarManager)\n                    mContext.getSystemService(Context.STATUS_BAR_SERVICE);",
      "right" : "mStatusBarManager = (StatusBarManager)\n                    mContext.getSystemService(Context.STATUS_BAR_SERVICE);",
      "info" : "ExpressionStatement[60801-60914]:ExpressionStatement[61162-61275]"
    }, {
      "left" : "if (mStatusBarManager == null)",
      "right" : "if (mStatusBarManager == null)",
      "info" : "IfStatement[60933-62108]:IfStatement[61294-62469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60964-61035]:Block[61325-61396]"
    }, {
      "left" : "Log.w(TAG, \"Could not get status bar manager\");",
      "right" : "Log.w(TAG, \"Could not get status bar manager\");",
      "info" : "ExpressionStatement[60978-61025]:ExpressionStatement[61339-61386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61041-62108]:Block[61402-62469]"
    }, {
      "left" : "int flags = StatusBarManager.DISABLE_NONE;",
      "right" : "int flags = StatusBarManager.DISABLE_NONE;",
      "info" : "VariableDeclarationStatement[61202-61244]:VariableDeclarationStatement[61563-61605]"
    }, {
      "left" : "if (mShowing)",
      "right" : "if (mShowing)",
      "info" : "IfStatement[61257-61625]:IfStatement[61618-61986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61271-61625]:Block[61632-61986]"
    }, {
      "left" : "flags |= StatusBarManager.DISABLE_RECENT;",
      "right" : "flags |= StatusBarManager.DISABLE_RECENT;",
      "info" : "ExpressionStatement[61512-61553]:ExpressionStatement[61873-61914]"
    }, {
      "left" : "flags |= StatusBarManager.DISABLE_SEARCH;",
      "right" : "flags |= StatusBarManager.DISABLE_SEARCH;",
      "info" : "ExpressionStatement[61570-61611]:ExpressionStatement[61931-61972]"
    }, {
      "left" : "if (isShowingAndNotOccluded())",
      "right" : "if (isShowingAndNotOccluded())",
      "info" : "IfStatement[61638-61740]:IfStatement[61999-62101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61669-61740]:Block[62030-62101]"
    }, {
      "left" : "flags |= StatusBarManager.DISABLE_HOME;",
      "right" : "flags |= StatusBarManager.DISABLE_HOME;",
      "info" : "ExpressionStatement[61687-61726]:ExpressionStatement[62048-62087]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[61754-61982]:IfStatement[62115-62343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61765-61982]:Block[62126-62343]"
    }, {
      "left" : "Log.d(TAG, \"adjustStatusBarLocked: mShowing=\" + mShowing + \" mOccluded=\" + mOccluded\n                        + \" isSecure=\" + isSecure() + \" --> flags=0x\" + Integer.toHexString(flags));",
      "right" : "Log.d(TAG, \"adjustStatusBarLocked: mShowing=\" + mShowing + \" mOccluded=\" + mOccluded\n                        + \" isSecure=\" + isSecure() + \" --> flags=0x\" + Integer.toHexString(flags));",
      "info" : "ExpressionStatement[61783-61968]:ExpressionStatement[62144-62329]"
    }, {
      "left" : "if (!(mContext instanceof Activity))",
      "right" : "if (!(mContext instanceof Activity))",
      "info" : "IfStatement[61996-62098]:IfStatement[62357-62459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62033-62098]:Block[62394-62459]"
    }, {
      "left" : "mStatusBarManager.disable(flags);",
      "right" : "mStatusBarManager.disable(flags);",
      "info" : "ExpressionStatement[62051-62084]:ExpressionStatement[62412-62445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62211-62218]:Modifier[62572-62579]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62219-62223]:PrimitiveType[62580-62584]"
    }, {
      "left" : "handleReset",
      "right" : "handleReset",
      "info" : "SimpleName[62224-62235]:SimpleName[62585-62596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62238-62407]:Block[62599-62768]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleReset\");\n            mStatusBarKeyguardViewManager.reset();\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleReset\");\n            mStatusBarKeyguardViewManager.reset();\n        }",
      "info" : "SynchronizedStatement[62248-62401]:SynchronizedStatement[62609-62762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62289-62401]:Block[62650-62762]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[62303-62340]:IfStatement[62664-62701]"
    }, {
      "left" : "Log.d(TAG, \"handleReset\");",
      "right" : "Log.d(TAG, \"handleReset\");",
      "info" : "ExpressionStatement[62314-62340]:ExpressionStatement[62675-62701]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.reset();",
      "right" : "mStatusBarKeyguardViewManager.reset();",
      "info" : "ExpressionStatement[62353-62391]:ExpressionStatement[62714-62752]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62508-62515]:Modifier[62869-62876]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62516-62520]:PrimitiveType[62877-62881]"
    }, {
      "left" : "handleVerifyUnlock",
      "right" : "handleVerifyUnlock",
      "info" : "SimpleName[62521-62539]:SimpleName[62882-62900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62542-62806]:Block[62903-63167]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleVerifyUnlock\");\n            setShowingLocked(true);\n            mStatusBarKeyguardViewManager.verifyUnlock();\n            updateActivityLockScreenState();\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleVerifyUnlock\");\n            setShowingLocked(true);\n            mStatusBarKeyguardViewManager.verifyUnlock();\n            updateActivityLockScreenState();\n        }",
      "info" : "SynchronizedStatement[62552-62800]:SynchronizedStatement[62913-63161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62593-62800]:Block[62954-63161]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[62607-62651]:IfStatement[62968-63012]"
    }, {
      "left" : "Log.d(TAG, \"handleVerifyUnlock\");",
      "right" : "Log.d(TAG, \"handleVerifyUnlock\");",
      "info" : "ExpressionStatement[62618-62651]:ExpressionStatement[62979-63012]"
    }, {
      "left" : "setShowingLocked(true);",
      "right" : "setShowingLocked(true);",
      "info" : "ExpressionStatement[62664-62687]:ExpressionStatement[63025-63048]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.verifyUnlock();",
      "right" : "mStatusBarKeyguardViewManager.verifyUnlock();",
      "info" : "ExpressionStatement[62700-62745]:ExpressionStatement[63061-63106]"
    }, {
      "left" : "updateActivityLockScreenState();",
      "right" : "updateActivityLockScreenState();",
      "info" : "ExpressionStatement[62758-62790]:ExpressionStatement[63119-63151]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62922-62929]:Modifier[63283-63290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62930-62934]:PrimitiveType[63291-63295]"
    }, {
      "left" : "handleNotifyScreenOff",
      "right" : "handleNotifyScreenOff",
      "info" : "SimpleName[62935-62956]:SimpleName[63296-63317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62959-63150]:Block[63320-63511]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleNotifyScreenOff\");\n            mStatusBarKeyguardViewManager.onScreenTurnedOff();\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleNotifyScreenOff\");\n            mStatusBarKeyguardViewManager.onScreenTurnedOff();\n        }",
      "info" : "SynchronizedStatement[62969-63144]:SynchronizedStatement[63330-63505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63010-63144]:Block[63371-63505]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[63024-63071]:IfStatement[63385-63432]"
    }, {
      "left" : "Log.d(TAG, \"handleNotifyScreenOff\");",
      "right" : "Log.d(TAG, \"handleNotifyScreenOff\");",
      "info" : "ExpressionStatement[63035-63071]:ExpressionStatement[63396-63432]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.onScreenTurnedOff();",
      "right" : "mStatusBarKeyguardViewManager.onScreenTurnedOff();",
      "info" : "ExpressionStatement[63084-63134]:ExpressionStatement[63445-63495]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63156-63163]:Modifier[63517-63524]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63164-63168]:PrimitiveType[63525-63529]"
    }, {
      "left" : "resetKeyguardDonePendingLocked",
      "right" : "resetKeyguardDonePendingLocked",
      "info" : "SimpleName[63169-63199]:SimpleName[63530-63560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63202-63311]:Block[63563-63672]"
    }, {
      "left" : "mKeyguardDonePending = false;",
      "right" : "mKeyguardDonePending = false;",
      "info" : "ExpressionStatement[63212-63241]:ExpressionStatement[63573-63602]"
    }, {
      "left" : "mHandler.removeMessages(KEYGUARD_DONE_PENDING_TIMEOUT);",
      "right" : "mHandler.removeMessages(KEYGUARD_DONE_PENDING_TIMEOUT);",
      "info" : "ExpressionStatement[63250-63305]:ExpressionStatement[63611-63666]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63422-63429]:Modifier[63783-63790]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63430-63434]:PrimitiveType[63791-63795]"
    }, {
      "left" : "handleNotifyScreenOn",
      "right" : "handleNotifyScreenOn",
      "info" : "SimpleName[63435-63455]:SimpleName[63796-63816]"
    }, {
      "left" : "IKeyguardShowCallback callback",
      "right" : "IKeyguardShowCallback callback",
      "info" : "SingleVariableDeclaration[63456-63486]:SingleVariableDeclaration[63817-63847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63488-63685]:Block[63849-64046]"
    }, {
      "left" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleNotifyScreenOn\");\n            mStatusBarKeyguardViewManager.onScreenTurnedOn(callback);\n        }",
      "right" : "synchronized (KeyguardViewMediator.this) {\n            if (DEBUG) Log.d(TAG, \"handleNotifyScreenOn\");\n            mStatusBarKeyguardViewManager.onScreenTurnedOn(callback);\n        }",
      "info" : "SynchronizedStatement[63498-63679]:SynchronizedStatement[63859-64040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63539-63679]:Block[63900-64040]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[63553-63599]:IfStatement[63914-63960]"
    }, {
      "left" : "Log.d(TAG, \"handleNotifyScreenOn\");",
      "right" : "Log.d(TAG, \"handleNotifyScreenOn\");",
      "info" : "ExpressionStatement[63564-63599]:ExpressionStatement[63925-63960]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.onScreenTurnedOn(callback);",
      "right" : "mStatusBarKeyguardViewManager.onScreenTurnedOn(callback);",
      "info" : "ExpressionStatement[63612-63669]:ExpressionStatement[63973-64030]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63691-63697]:Modifier[64052-64058]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63698-63705]:PrimitiveType[64059-64066]"
    }, {
      "left" : "isDismissable",
      "right" : "isDismissable",
      "info" : "SimpleName[63706-63719]:SimpleName[64067-64080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63722-63781]:Block[64083-64142]"
    }, {
      "left" : "return mKeyguardDonePending || !isSecure();",
      "right" : "return mKeyguardDonePending || !isSecure();",
      "info" : "ReturnStatement[63732-63775]:ReturnStatement[64093-64136]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63787-63794]:Modifier[64148-64155]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63795-63802]:PrimitiveType[64156-64163]"
    }, {
      "left" : "isAssistantAvailable",
      "right" : "isAssistantAvailable",
      "info" : "SimpleName[63803-63823]:SimpleName[64164-64184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63826-63972]:Block[64187-64333]"
    }, {
      "left" : "return mSearchManager != null\n                && mSearchManager.getAssistIntent(mContext, false, UserHandle.USER_CURRENT) != null;",
      "right" : "return mSearchManager != null\n                && mSearchManager.getAssistIntent(mContext, false, UserHandle.USER_CURRENT) != null;",
      "info" : "ReturnStatement[63836-63966]:ReturnStatement[64197-64327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63978-63984]:Modifier[64339-64345]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63985-63989]:PrimitiveType[64346-64350]"
    }, {
      "left" : "onBootCompleted",
      "right" : "onBootCompleted",
      "info" : "SimpleName[63990-64005]:SimpleName[64351-64366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64008-64236]:Block[64369-64597]"
    }, {
      "left" : "mUpdateMonitor.dispatchBootCompleted();",
      "right" : "mUpdateMonitor.dispatchBootCompleted();",
      "info" : "ExpressionStatement[64018-64057]:ExpressionStatement[64379-64418]"
    }, {
      "left" : "synchronized (this) {\n            mBootCompleted = true;\n            if (mBootSendUserPresent) {\n                sendUserPresentBroadcast();\n            }\n        }",
      "right" : "synchronized (this) {\n            mBootCompleted = true;\n            if (mBootSendUserPresent) {\n                sendUserPresentBroadcast();\n            }\n        }",
      "info" : "SynchronizedStatement[64066-64230]:SynchronizedStatement[64427-64591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64086-64230]:Block[64447-64591]"
    }, {
      "left" : "mBootCompleted = true;",
      "right" : "mBootCompleted = true;",
      "info" : "ExpressionStatement[64100-64122]:ExpressionStatement[64461-64483]"
    }, {
      "left" : "if (mBootSendUserPresent)",
      "right" : "if (mBootSendUserPresent)",
      "info" : "IfStatement[64135-64220]:IfStatement[64496-64581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64161-64220]:Block[64522-64581]"
    }, {
      "left" : "sendUserPresentBroadcast();",
      "right" : "sendUserPresentBroadcast();",
      "info" : "ExpressionStatement[64179-64206]:ExpressionStatement[64540-64567]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64242-64248]:Modifier[64603-64609]"
    }, {
      "left" : "StatusBarKeyguardViewManager",
      "right" : "StatusBarKeyguardViewManager",
      "info" : "SimpleType[64249-64277]:SimpleType[64610-64638]"
    }, {
      "left" : "registerStatusBar",
      "right" : "registerStatusBar",
      "info" : "SimpleName[64278-64295]:SimpleName[64639-64656]"
    }, {
      "left" : "PhoneStatusBar phoneStatusBar",
      "right" : "PhoneStatusBar phoneStatusBar",
      "info" : "SingleVariableDeclaration[64296-64325]:SingleVariableDeclaration[64657-64686]"
    }, {
      "left" : "ViewGroup container",
      "right" : "ViewGroup container",
      "info" : "SingleVariableDeclaration[64339-64358]:SingleVariableDeclaration[64700-64719]"
    }, {
      "left" : "StatusBarWindowManager statusBarWindowManager",
      "right" : "StatusBarWindowManager statusBarWindowManager",
      "info" : "SingleVariableDeclaration[64360-64405]:SingleVariableDeclaration[64721-64766]"
    }, {
      "left" : "ScrimController scrimController",
      "right" : "ScrimController scrimController",
      "info" : "SingleVariableDeclaration[64419-64450]:SingleVariableDeclaration[64780-64811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64452-64646]:Block[64813-65007]"
    }, {
      "left" : "mStatusBarKeyguardViewManager.registerStatusBar(phoneStatusBar, container,\n                statusBarWindowManager, scrimController);",
      "right" : "mStatusBarKeyguardViewManager.registerStatusBar(phoneStatusBar, container,\n                statusBarWindowManager, scrimController);",
      "info" : "ExpressionStatement[64462-64594]:ExpressionStatement[64823-64955]"
    }, {
      "left" : "return mStatusBarKeyguardViewManager;",
      "right" : "return mStatusBarKeyguardViewManager;",
      "info" : "ReturnStatement[64603-64640]:ReturnStatement[64964-65001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64652-64658]:Modifier[65013-65019]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[64659-64663]:PrimitiveType[65020-65024]"
    }, {
      "left" : "startKeyguardExitAnimation",
      "right" : "startKeyguardExitAnimation",
      "info" : "SimpleName[64664-64690]:SimpleName[65025-65051]"
    }, {
      "left" : "long startTime",
      "right" : "long startTime",
      "info" : "SingleVariableDeclaration[64691-64705]:SingleVariableDeclaration[65052-65066]"
    }, {
      "left" : "long fadeoutDuration",
      "right" : "long fadeoutDuration",
      "info" : "SingleVariableDeclaration[64707-64727]:SingleVariableDeclaration[65068-65088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64729-64920]:Block[65090-65281]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(START_KEYGUARD_EXIT_ANIM,\n                new StartKeyguardExitAnimParams(startTime, fadeoutDuration));",
      "right" : "Message msg = mHandler.obtainMessage(START_KEYGUARD_EXIT_ANIM,\n                new StartKeyguardExitAnimParams(startTime, fadeoutDuration));",
      "info" : "VariableDeclarationStatement[64739-64879]:VariableDeclarationStatement[65100-65240]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[64888-64914]:ExpressionStatement[65249-65275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64926-64932]:Modifier[65287-65293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[64933-64937]:PrimitiveType[65294-65298]"
    }, {
      "left" : "onActivityDrawn",
      "right" : "onActivityDrawn",
      "info" : "SimpleName[64938-64953]:SimpleName[65299-65314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64956-65017]:Block[65317-65378]"
    }, {
      "left" : "mHandler.sendEmptyMessage(ON_ACTIVITY_DRAWN);",
      "right" : "mHandler.sendEmptyMessage(ON_ACTIVITY_DRAWN);",
      "info" : "ExpressionStatement[64966-65011]:ExpressionStatement[65327-65372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65022-65028]:Modifier[65383-65389]"
    }, {
      "left" : "ViewMediatorCallback",
      "right" : "ViewMediatorCallback",
      "info" : "SimpleType[65029-65049]:SimpleType[65390-65410]"
    }, {
      "left" : "getViewMediatorCallback",
      "right" : "getViewMediatorCallback",
      "info" : "SimpleName[65050-65073]:SimpleName[65411-65434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65076-65121]:Block[65437-65482]"
    }, {
      "left" : "return mViewMediatorCallback;",
      "right" : "return mViewMediatorCallback;",
      "info" : "ReturnStatement[65086-65115]:ReturnStatement[65447-65476]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65127-65134]:Modifier[65488-65495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65135-65141]:Modifier[65496-65502]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[65142-65147]:TYPE_DECLARATION_KIND[65503-65508]"
    }, {
      "left" : "StartKeyguardExitAnimParams",
      "right" : "StartKeyguardExitAnimParams",
      "info" : "SimpleName[65148-65175]:SimpleName[65509-65536]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65242-65249]:Modifier[65603-65610]"
    }, {
      "left" : "StartKeyguardExitAnimParams",
      "right" : "StartKeyguardExitAnimParams",
      "info" : "SimpleName[65250-65277]:SimpleName[65611-65638]"
    }, {
      "left" : "long startTime",
      "right" : "long startTime",
      "info" : "SingleVariableDeclaration[65278-65292]:SingleVariableDeclaration[65639-65653]"
    }, {
      "left" : "long fadeoutDuration",
      "right" : "long fadeoutDuration",
      "info" : "SingleVariableDeclaration[65294-65314]:SingleVariableDeclaration[65655-65675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65316-65419]:Block[65677-65780]"
    }, {
      "left" : "this.startTime = startTime;",
      "right" : "this.startTime = startTime;",
      "info" : "ExpressionStatement[65330-65357]:ExpressionStatement[65691-65718]"
    }, {
      "left" : "this.fadeoutDuration = fadeoutDuration;",
      "right" : "this.fadeoutDuration = fadeoutDuration;",
      "info" : "ExpressionStatement[65370-65409]:ExpressionStatement[65731-65770]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65431-65438]:Modifier[65792-65799]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65439-65443]:PrimitiveType[65800-65804]"
    }, {
      "left" : "setShowingLocked",
      "right" : "setShowingLocked",
      "info" : "SimpleName[65444-65460]:SimpleName[65805-65821]"
    }, {
      "left" : "boolean showing",
      "right" : "boolean showing",
      "info" : "SingleVariableDeclaration[65461-65476]:SingleVariableDeclaration[65822-65837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65478-66018]:Block[65839-66379]"
    }, {
      "left" : "if (showing != mShowing)",
      "right" : "if (showing != mShowing)",
      "info" : "IfStatement[65488-66012]:IfStatement[65849-66373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65513-66012]:Block[65874-66373]"
    }, {
      "left" : "mShowing = showing;",
      "right" : "mShowing = showing;",
      "info" : "ExpressionStatement[65527-65546]:ExpressionStatement[65888-65907]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65559-65901]:TryStatement[65920-66262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65563-65787]:Block[65924-66148]"
    }, {
      "left" : "int size = mKeyguardStateCallbacks.size();",
      "right" : "int size = mKeyguardStateCallbacks.size();",
      "info" : "VariableDeclarationStatement[65581-65623]:VariableDeclarationStatement[65942-65984]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[65640-65773]:ForStatement[66001-66134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65671-65773]:Block[66032-66134]"
    }, {
      "left" : "mKeyguardStateCallbacks.get(i).onShowingStateChanged(showing);",
      "right" : "mKeyguardStateCallbacks.get(i).onShowingStateChanged(showing);",
      "info" : "ExpressionStatement[65693-65755]:ExpressionStatement[66054-66116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65814-65901]:Block[66175-66262]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onShowingStateChanged\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onShowingStateChanged\", e);",
      "info" : "ExpressionStatement[65832-65887]:ExpressionStatement[66193-66248]"
    }, {
      "left" : "updateInputRestrictedLocked();",
      "right" : "updateInputRestrictedLocked();",
      "info" : "ExpressionStatement[65914-65944]:ExpressionStatement[66275-66305]"
    }, {
      "left" : "mTrustManager.reportKeyguardShowingChanged();",
      "right" : "mTrustManager.reportKeyguardShowingChanged();",
      "info" : "ExpressionStatement[65957-66002]:ExpressionStatement[66318-66363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66024-66030]:Modifier[66385-66391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66031-66035]:PrimitiveType[66392-66396]"
    }, {
      "left" : "addStateMonitorCallback",
      "right" : "addStateMonitorCallback",
      "info" : "SimpleName[66036-66059]:SimpleName[66397-66420]"
    }, {
      "left" : "IKeyguardStateCallback callback",
      "right" : "IKeyguardStateCallback callback",
      "info" : "SingleVariableDeclaration[66060-66091]:SingleVariableDeclaration[66421-66452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66093-66515]:Block[66454-66876]"
    }, {
      "left" : "synchronized (this) {\n             mKeyguardStateCallbacks.add(callback);\n             try {\n                 callback.onSimSecureStateChanged(mUpdateMonitor.isSimPinSecure());\n                 callback.onShowingStateChanged(mShowing);\n             } catch (RemoteException e) {\n                 Slog.w(TAG, \"Failed to call onShowingStateChanged or onSimSecureStateChanged\", e);\n             }\n         }",
      "right" : "synchronized (this) {\n             mKeyguardStateCallbacks.add(callback);\n             try {\n                 callback.onSimSecureStateChanged(mUpdateMonitor.isSimPinSecure());\n                 callback.onShowingStateChanged(mShowing);\n             } catch (RemoteException e) {\n                 Slog.w(TAG, \"Failed to call onShowingStateChanged or onSimSecureStateChanged\", e);\n             }\n         }",
      "info" : "SynchronizedStatement[66104-66508]:SynchronizedStatement[66465-66869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66124-66508]:Block[66485-66869]"
    }, {
      "left" : "mKeyguardStateCallbacks.add(callback);",
      "right" : "mKeyguardStateCallbacks.add(callback);",
      "info" : "ExpressionStatement[66139-66177]:ExpressionStatement[66500-66538]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[66191-66497]:TryStatement[66552-66858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66195-66354]:Block[66556-66715]"
    }, {
      "left" : "callback.onSimSecureStateChanged(mUpdateMonitor.isSimPinSecure());",
      "right" : "callback.onSimSecureStateChanged(mUpdateMonitor.isSimPinSecure());",
      "info" : "ExpressionStatement[66214-66280]:ExpressionStatement[66575-66641]"
    }, {
      "left" : "callback.onShowingStateChanged(mShowing);",
      "right" : "callback.onShowingStateChanged(mShowing);",
      "info" : "ExpressionStatement[66298-66339]:ExpressionStatement[66659-66700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66381-66497]:Block[66742-66858]"
    }, {
      "left" : "Slog.w(TAG, \"Failed to call onShowingStateChanged or onSimSecureStateChanged\", e);",
      "right" : "Slog.w(TAG, \"Failed to call onShowingStateChanged or onSimSecureStateChanged\", e);",
      "info" : "ExpressionStatement[66400-66482]:ExpressionStatement[66761-66843]"
    } ]
  },
  "interFileMappings" : { }
}