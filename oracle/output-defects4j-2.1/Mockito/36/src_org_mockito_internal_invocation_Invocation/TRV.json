{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 8240069639250980199L;",
      "right" : "private static final long serialVersionUID = 8240069639250980199L;",
      "info" : "FieldDeclaration[951-1017]:FieldDeclaration[991-1057]"
    }, {
      "left" : "private static final int MAX_LINE_LENGTH = 45;",
      "right" : "private static final int MAX_LINE_LENGTH = 45;",
      "info" : "FieldDeclaration[1022-1068]:FieldDeclaration[1062-1108]"
    }, {
      "left" : "private final int sequenceNumber;",
      "right" : "private final int sequenceNumber;",
      "info" : "FieldDeclaration[1073-1106]:FieldDeclaration[1113-1146]"
    }, {
      "left" : "private final Object mock;",
      "right" : "private final Object mock;",
      "info" : "FieldDeclaration[1111-1137]:FieldDeclaration[1151-1177]"
    }, {
      "left" : "private final MockitoMethod method;",
      "right" : "private final MockitoMethod method;",
      "info" : "FieldDeclaration[1142-1177]:FieldDeclaration[1182-1217]"
    }, {
      "left" : "private final Object[] arguments;",
      "right" : "private final Object[] arguments;",
      "info" : "FieldDeclaration[1182-1215]:FieldDeclaration[1222-1255]"
    }, {
      "left" : "private final Object[] rawArguments;",
      "right" : "private final Object[] rawArguments;",
      "info" : "FieldDeclaration[1220-1256]:FieldDeclaration[1260-1296]"
    }, {
      "left" : "private final Location location;",
      "right" : "private final Location location;",
      "info" : "FieldDeclaration[1262-1294]:FieldDeclaration[1302-1334]"
    }, {
      "left" : "private boolean verified;",
      "right" : "private boolean verified;",
      "info" : "FieldDeclaration[1299-1324]:FieldDeclaration[1339-1364]"
    }, {
      "left" : "private boolean verifiedInOrder;",
      "right" : "private boolean verifiedInOrder;",
      "info" : "FieldDeclaration[1329-1361]:FieldDeclaration[1369-1401]"
    }, {
      "left" : "final RealMethod realMethod;",
      "right" : "final RealMethod realMethod;",
      "info" : "FieldDeclaration[1367-1395]:FieldDeclaration[1407-1435]"
    }, {
      "left" : "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod)",
      "right" : "public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod)",
      "info" : "MethodDeclaration[1401-1820]:MethodDeclaration[1441-1860]"
    }, {
      "left" : "private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args)",
      "right" : "private static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args)",
      "info" : "MethodDeclaration[1929-2820]:MethodDeclaration[1969-2860]"
    }, {
      "left" : "public Object getMock()",
      "right" : "public Object getMock()",
      "info" : "MethodDeclaration[2826-2878]:MethodDeclaration[2866-2918]"
    }, {
      "left" : "public MockitoMethod getMethod()",
      "right" : "public MockitoMethod getMethod()",
      "info" : "MethodDeclaration[2884-2947]:MethodDeclaration[2924-2987]"
    }, {
      "left" : "public Object[] getArguments()",
      "right" : "public Object[] getArguments()",
      "info" : "MethodDeclaration[2953-3017]:MethodDeclaration[2993-3057]"
    }, {
      "left" : "public boolean isVerified()",
      "right" : "public boolean isVerified()",
      "info" : "MethodDeclaration[3023-3083]:MethodDeclaration[3063-3123]"
    }, {
      "left" : "public Integer getSequenceNumber()",
      "right" : "public Integer getSequenceNumber()",
      "info" : "MethodDeclaration[3089-3162]:MethodDeclaration[3129-3202]"
    }, {
      "left" : "public boolean isVerifiedInOrder()",
      "right" : "public boolean isVerifiedInOrder()",
      "info" : "MethodDeclaration[3168-3242]:MethodDeclaration[3208-3282]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[3248-3555]:MethodDeclaration[3288-3595]"
    }, {
      "left" : "private boolean equalArguments(Object[] arguments)",
      "right" : "private boolean equalArguments(Object[] arguments)",
      "info" : "MethodDeclaration[3561-3676]:MethodDeclaration[3601-3716]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[3682-3780]:MethodDeclaration[3722-3820]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[3786-3887]:MethodDeclaration[3826-3927]"
    }, {
      "left" : "protected String toString(List<Matcher> matchers, PrintSettings printSettings)",
      "right" : "protected String toString(List<Matcher> matchers, PrintSettings printSettings)",
      "info" : "MethodDeclaration[3893-4442]:MethodDeclaration[3933-4482]"
    }, {
      "left" : "private String qualifiedMethodName()",
      "right" : "private String qualifiedMethodName()",
      "info" : "MethodDeclaration[4448-4566]:MethodDeclaration[4488-4606]"
    }, {
      "left" : "protected List<Matcher> argumentsToMatchers()",
      "right" : "protected List<Matcher> argumentsToMatchers()",
      "info" : "MethodDeclaration[4572-4967]:MethodDeclaration[4612-5007]"
    }, {
      "left" : "public static boolean isToString(InvocationOnMock invocation)",
      "right" : "public static boolean isToString(InvocationOnMock invocation)",
      "info" : "MethodDeclaration[4973-5117]:MethodDeclaration[5013-5157]"
    }, {
      "left" : "public boolean isValidException(Throwable throwable)",
      "right" : "public boolean isValidException(Throwable throwable)",
      "info" : "MethodDeclaration[5123-5495]:MethodDeclaration[5163-5535]"
    }, {
      "left" : "public boolean isValidReturnType(Class clazz)",
      "right" : "public boolean isValidReturnType(Class clazz)",
      "info" : "MethodDeclaration[5501-5780]:MethodDeclaration[5541-5820]"
    }, {
      "left" : "public boolean isVoid()",
      "right" : "public boolean isVoid()",
      "info" : "MethodDeclaration[5786-5874]:MethodDeclaration[5826-5914]"
    }, {
      "left" : "public String printMethodReturnType()",
      "right" : "public String printMethodReturnType()",
      "info" : "MethodDeclaration[5880-5980]:MethodDeclaration[5920-6020]"
    }, {
      "left" : "public String getMethodName()",
      "right" : "public String getMethodName()",
      "info" : "MethodDeclaration[5986-6056]:MethodDeclaration[6026-6096]"
    }, {
      "left" : "public boolean returnsPrimitive()",
      "right" : "public boolean returnsPrimitive()",
      "info" : "MethodDeclaration[6062-6156]:MethodDeclaration[6102-6196]"
    }, {
      "left" : "public Location getLocation()",
      "right" : "public Location getLocation()",
      "info" : "MethodDeclaration[6162-6224]:MethodDeclaration[6202-6264]"
    }, {
      "left" : "public int getArgumentsCount()",
      "right" : "public int getArgumentsCount()",
      "info" : "MethodDeclaration[6230-6301]:MethodDeclaration[6270-6341]"
    }, {
      "left" : "public Object[] getRawArguments()",
      "right" : "public Object[] getRawArguments()",
      "info" : "MethodDeclaration[6307-6382]:MethodDeclaration[6347-6422]"
    }, {
      "left" : "public String toString(PrintSettings printSettings)",
      "right" : "public String toString(PrintSettings printSettings)",
      "info" : "MethodDeclaration[6503-6625]:MethodDeclaration[6681-6803]"
    }, {
      "left" : "void markVerified()",
      "right" : "void markVerified()",
      "info" : "MethodDeclaration[6631-6688]:MethodDeclaration[6809-6866]"
    }, {
      "left" : "void markVerifiedInOrder()",
      "right" : "void markVerifiedInOrder()",
      "info" : "MethodDeclaration[6694-6789]:MethodDeclaration[6872-6967]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1519-1820]:Block[1559-1860]"
    }, {
      "left" : "this.method = mockitoMethod;",
      "right" : "this.method = mockitoMethod;",
      "info" : "ExpressionStatement[1529-1557]:ExpressionStatement[1569-1597]"
    }, {
      "left" : "this.mock = mock;",
      "right" : "this.mock = mock;",
      "info" : "ExpressionStatement[1566-1583]:ExpressionStatement[1606-1623]"
    }, {
      "left" : "this.realMethod = realMethod;",
      "right" : "this.realMethod = realMethod;",
      "info" : "ExpressionStatement[1592-1621]:ExpressionStatement[1632-1661]"
    }, {
      "left" : "this.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);",
      "right" : "this.arguments = expandVarArgs(mockitoMethod.isVarArgs(), args);",
      "info" : "ExpressionStatement[1630-1694]:ExpressionStatement[1670-1734]"
    }, {
      "left" : "this.rawArguments = args;",
      "right" : "this.rawArguments = args;",
      "info" : "ExpressionStatement[1703-1728]:ExpressionStatement[1743-1768]"
    }, {
      "left" : "this.sequenceNumber = sequenceNumber;",
      "right" : "this.sequenceNumber = sequenceNumber;",
      "info" : "ExpressionStatement[1737-1774]:ExpressionStatement[1777-1814]"
    }, {
      "left" : "this.location = new Location();",
      "right" : "this.location = new Location();",
      "info" : "ExpressionStatement[1783-1814]:ExpressionStatement[1823-1854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2013-2820]:Block[2053-2860]"
    }, {
      "left" : "if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray())",
      "right" : "if (!isVarArgs || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray())",
      "info" : "IfStatement[2023-2186]:IfStatement[2063-2226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2119-2186]:Block[2159-2226]"
    }, {
      "left" : "return args == null ? new Object[0] : args;",
      "right" : "return args == null ? new Object[0] : args;",
      "info" : "ReturnStatement[2133-2176]:ReturnStatement[2173-2216]"
    }, {
      "left" : "final int nonVarArgsCount = args.length - 1;",
      "right" : "final int nonVarArgsCount = args.length - 1;",
      "info" : "VariableDeclarationStatement[2196-2240]:VariableDeclarationStatement[2236-2280]"
    }, {
      "left" : "Object[] varArgs;",
      "right" : "Object[] varArgs;",
      "info" : "VariableDeclarationStatement[2249-2266]:VariableDeclarationStatement[2289-2306]"
    }, {
      "left" : "if (args[nonVarArgsCount] == null)",
      "right" : "if (args[nonVarArgsCount] == null)",
      "info" : "IfStatement[2275-2528]:IfStatement[2315-2568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2310-2435]:Block[2350-2475]"
    }, {
      "left" : "varArgs = new Object[] { null };",
      "right" : "varArgs = new Object[] { null };",
      "info" : "ExpressionStatement[2393-2425]:ExpressionStatement[2433-2465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2441-2528]:Block[2481-2568]"
    }, {
      "left" : "varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);",
      "right" : "varArgs = ArrayEquals.createObjectArray(args[nonVarArgsCount]);",
      "info" : "ExpressionStatement[2455-2518]:ExpressionStatement[2495-2558]"
    }, {
      "left" : "final int varArgsCount = varArgs.length;",
      "right" : "final int varArgsCount = varArgs.length;",
      "info" : "VariableDeclarationStatement[2537-2577]:VariableDeclarationStatement[2577-2617]"
    }, {
      "left" : "Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];",
      "right" : "Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];",
      "info" : "VariableDeclarationStatement[2586-2648]:VariableDeclarationStatement[2626-2688]"
    }, {
      "left" : "System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);",
      "right" : "System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);",
      "info" : "ExpressionStatement[2657-2712]:ExpressionStatement[2697-2752]"
    }, {
      "left" : "System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);",
      "right" : "System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);",
      "info" : "ExpressionStatement[2721-2790]:ExpressionStatement[2761-2830]"
    }, {
      "left" : "return newArgs;",
      "right" : "return newArgs;",
      "info" : "ReturnStatement[2799-2814]:ReturnStatement[2839-2854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2850-2878]:Block[2890-2918]"
    }, {
      "left" : "return mock;",
      "right" : "return mock;",
      "info" : "ReturnStatement[2860-2872]:ReturnStatement[2900-2912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2917-2947]:Block[2957-2987]"
    }, {
      "left" : "return method;",
      "right" : "return method;",
      "info" : "ReturnStatement[2927-2941]:ReturnStatement[2967-2981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2984-3017]:Block[3024-3057]"
    }, {
      "left" : "return arguments;",
      "right" : "return arguments;",
      "info" : "ReturnStatement[2994-3011]:ReturnStatement[3034-3051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3051-3083]:Block[3091-3123]"
    }, {
      "left" : "return verified;",
      "right" : "return verified;",
      "info" : "ReturnStatement[3061-3077]:ReturnStatement[3101-3117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3124-3162]:Block[3164-3202]"
    }, {
      "left" : "return sequenceNumber;",
      "right" : "return sequenceNumber;",
      "info" : "ReturnStatement[3134-3156]:ReturnStatement[3174-3196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3203-3242]:Block[3243-3282]"
    }, {
      "left" : "return verifiedInOrder;",
      "right" : "return verifiedInOrder;",
      "info" : "ReturnStatement[3213-3236]:ReturnStatement[3253-3276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3280-3555]:Block[3320-3595]"
    }, {
      "left" : "if (o == null || !o.getClass().equals(this.getClass()))",
      "right" : "if (o == null || !o.getClass().equals(this.getClass()))",
      "info" : "IfStatement[3290-3383]:IfStatement[3330-3423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3346-3383]:Block[3386-3423]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3360-3373]:ReturnStatement[3400-3413]"
    }, {
      "left" : "Invocation other = (Invocation) o;",
      "right" : "Invocation other = (Invocation) o;",
      "info" : "VariableDeclarationStatement[3393-3427]:VariableDeclarationStatement[3433-3467]"
    }, {
      "left" : "return this.mock.equals(other.mock) && this.method.equals(other.method) && this.equalArguments(other.arguments);",
      "right" : "return this.mock.equals(other.mock) && this.method.equals(other.method) && this.equalArguments(other.arguments);",
      "info" : "ReturnStatement[3437-3549]:ReturnStatement[3477-3589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3612-3676]:Block[3652-3716]"
    }, {
      "left" : "return Arrays.equals(arguments, this.arguments);",
      "right" : "return Arrays.equals(arguments, this.arguments);",
      "info" : "ReturnStatement[3622-3670]:ReturnStatement[3662-3710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3704-3780]:Block[3744-3820]"
    }, {
      "left" : "throw new RuntimeException(\"hashCode() is not implemented\");",
      "right" : "throw new RuntimeException(\"hashCode() is not implemented\");",
      "info" : "ThrowStatement[3714-3774]:ThrowStatement[3754-3814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3811-3887]:Block[3851-3927]"
    }, {
      "left" : "return toString(argumentsToMatchers(), new PrintSettings());",
      "right" : "return toString(argumentsToMatchers(), new PrintSettings());",
      "info" : "ReturnStatement[3821-3881]:ReturnStatement[3861-3921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3972-4442]:Block[4012-4482]"
    }, {
      "left" : "MatchersPrinter matchersPrinter = new MatchersPrinter();",
      "right" : "MatchersPrinter matchersPrinter = new MatchersPrinter();",
      "info" : "VariableDeclarationStatement[3982-4038]:VariableDeclarationStatement[4022-4078]"
    }, {
      "left" : "String method = qualifiedMethodName();",
      "right" : "String method = qualifiedMethodName();",
      "info" : "VariableDeclarationStatement[4047-4085]:VariableDeclarationStatement[4087-4125]"
    }, {
      "left" : "String invocation = method + matchersPrinter.getArgumentsLine(matchers, printSettings);",
      "right" : "String invocation = method + matchersPrinter.getArgumentsLine(matchers, printSettings);",
      "info" : "VariableDeclarationStatement[4094-4181]:VariableDeclarationStatement[4134-4221]"
    }, {
      "left" : "if (printSettings.isMultiline() || (!matchers.isEmpty() && invocation.length() > MAX_LINE_LENGTH))",
      "right" : "if (printSettings.isMultiline() || (!matchers.isEmpty() && invocation.length() > MAX_LINE_LENGTH))",
      "info" : "IfStatement[4190-4436]:IfStatement[4230-4476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4289-4388]:Block[4329-4428]"
    }, {
      "left" : "return method + matchersPrinter.getArgumentsBlock(matchers, printSettings);",
      "right" : "return method + matchersPrinter.getArgumentsBlock(matchers, printSettings);",
      "info" : "ReturnStatement[4303-4378]:ReturnStatement[4343-4418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4394-4436]:Block[4434-4476]"
    }, {
      "left" : "return invocation;",
      "right" : "return invocation;",
      "info" : "ReturnStatement[4408-4426]:ReturnStatement[4448-4466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4485-4566]:Block[4525-4606]"
    }, {
      "left" : "return new MockUtil().getMockName(mock) + \".\" + method.getName();",
      "right" : "return new MockUtil().getMockName(mock) + \".\" + method.getName();",
      "info" : "ReturnStatement[4495-4560]:ReturnStatement[4535-4600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4618-4967]:Block[4658-5007]"
    }, {
      "left" : "List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);",
      "right" : "List<Matcher> matchers = new ArrayList<Matcher>(arguments.length);",
      "info" : "VariableDeclarationStatement[4628-4694]:VariableDeclarationStatement[4668-4734]"
    }, {
      "left" : "for (Object arg : arguments)",
      "right" : "for (Object arg : arguments)",
      "info" : "EnhancedForStatement[4703-4936]:EnhancedForStatement[4743-4976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4732-4936]:Block[4772-4976]"
    }, {
      "left" : "if (arg != null && arg.getClass().isArray())",
      "right" : "if (arg != null && arg.getClass().isArray())",
      "info" : "IfStatement[4746-4926]:IfStatement[4786-4966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4791-4858]:Block[4831-4898]"
    }, {
      "left" : "matchers.add(new ArrayEquals(arg));",
      "right" : "matchers.add(new ArrayEquals(arg));",
      "info" : "ExpressionStatement[4809-4844]:ExpressionStatement[4849-4884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4864-4926]:Block[4904-4966]"
    }, {
      "left" : "matchers.add(new Equals(arg));",
      "right" : "matchers.add(new Equals(arg));",
      "info" : "ExpressionStatement[4882-4912]:ExpressionStatement[4922-4952]"
    }, {
      "left" : "return matchers;",
      "right" : "return matchers;",
      "info" : "ReturnStatement[4945-4961]:ReturnStatement[4985-5001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5035-5117]:Block[5075-5157]"
    }, {
      "left" : "return new ObjectMethodsGuru().isToString(invocation.getMethod());",
      "right" : "return new ObjectMethodsGuru().isToString(invocation.getMethod());",
      "info" : "ReturnStatement[5045-5111]:ReturnStatement[5085-5151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5176-5495]:Block[5216-5535]"
    }, {
      "left" : "Class<?>[] exceptions = this.getMethod().getExceptionTypes();",
      "right" : "Class<?>[] exceptions = this.getMethod().getExceptionTypes();",
      "info" : "VariableDeclarationStatement[5186-5247]:VariableDeclarationStatement[5226-5287]"
    }, {
      "left" : "Class<?> throwableClass = throwable.getClass();",
      "right" : "Class<?> throwableClass = throwable.getClass();",
      "info" : "VariableDeclarationStatement[5256-5303]:VariableDeclarationStatement[5296-5343]"
    }, {
      "left" : "for (Class<?> exception : exceptions)",
      "right" : "for (Class<?> exception : exceptions)",
      "info" : "EnhancedForStatement[5312-5466]:EnhancedForStatement[5352-5506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5466]:Block[5390-5506]"
    }, {
      "left" : "if (exception.isAssignableFrom(throwableClass))",
      "right" : "if (exception.isAssignableFrom(throwableClass))",
      "info" : "IfStatement[5364-5456]:IfStatement[5404-5496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5412-5456]:Block[5452-5496]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5430-5442]:ReturnStatement[5470-5482]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5476-5489]:ReturnStatement[5516-5529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5547-5780]:Block[5587-5820]"
    }, {
      "left" : "if (method.getReturnType().isPrimitive())",
      "right" : "if (method.getReturnType().isPrimitive())",
      "info" : "IfStatement[5557-5774]:IfStatement[5597-5814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5599-5690]:Block[5639-5730]"
    }, {
      "left" : "return Primitives.primitiveTypeOf(clazz) == method.getReturnType();",
      "right" : "return Primitives.primitiveTypeOf(clazz) == method.getReturnType();",
      "info" : "ReturnStatement[5613-5680]:ReturnStatement[5653-5720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5696-5774]:Block[5736-5814]"
    }, {
      "left" : "return method.getReturnType().isAssignableFrom(clazz);",
      "right" : "return method.getReturnType().isAssignableFrom(clazz);",
      "info" : "ReturnStatement[5710-5764]:ReturnStatement[5750-5804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5810-5874]:Block[5850-5914]"
    }, {
      "left" : "return this.method.getReturnType() == Void.TYPE;",
      "right" : "return this.method.getReturnType() == Void.TYPE;",
      "info" : "ReturnStatement[5820-5868]:ReturnStatement[5860-5908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5918-5980]:Block[5958-6020]"
    }, {
      "left" : "return method.getReturnType().getSimpleName();",
      "right" : "return method.getReturnType().getSimpleName();",
      "info" : "ReturnStatement[5928-5974]:ReturnStatement[5968-6014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6016-6056]:Block[6056-6096]"
    }, {
      "left" : "return method.getName();",
      "right" : "return method.getName();",
      "info" : "ReturnStatement[6026-6050]:ReturnStatement[6066-6090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6096-6156]:Block[6136-6196]"
    }, {
      "left" : "return method.getReturnType().isPrimitive();",
      "right" : "return method.getReturnType().isPrimitive();",
      "info" : "ReturnStatement[6106-6150]:ReturnStatement[6146-6190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6192-6224]:Block[6232-6264]"
    }, {
      "left" : "return location;",
      "right" : "return location;",
      "info" : "ReturnStatement[6202-6218]:ReturnStatement[6242-6258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6261-6301]:Block[6301-6341]"
    }, {
      "left" : "return arguments.length;",
      "right" : "return arguments.length;",
      "info" : "ReturnStatement[6271-6295]:ReturnStatement[6311-6335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6341-6382]:Block[6381-6422]"
    }, {
      "left" : "return this.rawArguments;",
      "right" : "return this.rawArguments;",
      "info" : "ReturnStatement[6351-6376]:ReturnStatement[6391-6416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6555-6625]:Block[6733-6803]"
    }, {
      "left" : "return toString(argumentsToMatchers(), printSettings);",
      "right" : "return toString(argumentsToMatchers(), printSettings);",
      "info" : "ReturnStatement[6565-6619]:ReturnStatement[6743-6797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6651-6688]:Block[6829-6866]"
    }, {
      "left" : "this.verified = true;",
      "right" : "this.verified = true;",
      "info" : "ExpressionStatement[6661-6682]:ExpressionStatement[6839-6860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6721-6789]:Block[6899-6967]"
    }, {
      "left" : "markVerified();",
      "right" : "markVerified();",
      "info" : "ExpressionStatement[6731-6746]:ExpressionStatement[6909-6924]"
    }, {
      "left" : "this.verifiedInOrder = true;",
      "right" : "this.verifiedInOrder = true;",
      "info" : "ExpressionStatement[6755-6783]:ExpressionStatement[6933-6961]"
    } ]
  },
  "interFileMappings" : { }
}