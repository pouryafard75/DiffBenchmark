{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "EduStepicConnector",
      "right" : "EduStepicConnector",
      "info" : "TypeDeclaration[1739-14012]:TypeDeclaration[1739-14609]"
    }, {
      "left" : "private static final String stepicUrl = \"https://stepic.org/\";",
      "right" : "private static final String stepicUrl = \"https://stepic.org/\";",
      "info" : "FieldDeclaration[1775-1837]:FieldDeclaration[1775-1837]"
    }, {
      "left" : "private static final String stepicApiUrl = stepicUrl + \"api/\";",
      "right" : "private static final String stepicApiUrl = stepicUrl + \"api/\";",
      "info" : "FieldDeclaration[1840-1902]:FieldDeclaration[1840-1902]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(EduStepicConnector.class.getName());",
      "right" : "private static final Logger LOG = Logger.getInstance(EduStepicConnector.class.getName());",
      "info" : "FieldDeclaration[1905-1994]:FieldDeclaration[1905-1994]"
    }, {
      "left" : "private static final String ourDomain = \"stepic.org\";",
      "right" : "private static final String ourDomain = \"stepic.org\";",
      "info" : "FieldDeclaration[1997-2050]:FieldDeclaration[1997-2050]"
    }, {
      "left" : "private static String ourCSRFToken = \"\";",
      "right" : "private static String ourCSRFToken = \"\";",
      "info" : "FieldDeclaration[2053-2093]:FieldDeclaration[2053-2093]"
    }, {
      "left" : "private static CloseableHttpClient ourClient;",
      "right" : "private static CloseableHttpClient ourClient;",
      "info" : "FieldDeclaration[2096-2141]:FieldDeclaration[2096-2141]"
    }, {
      "left" : "public static final String PYCHARM_PREFIX = \"pycharm\";",
      "right" : "public static final String PYCHARM_PREFIX = \"pycharm\";",
      "info" : "FieldDeclaration[2219-2273]:FieldDeclaration[2219-2273]"
    }, {
      "left" : "private static BasicCookieStore ourCookieStore;",
      "right" : "private static BasicCookieStore ourCookieStore;",
      "info" : "FieldDeclaration[2276-2323]:FieldDeclaration[2276-2323]"
    }, {
      "left" : "private EduStepicConnector()",
      "right" : "private EduStepicConnector()",
      "info" : "MethodDeclaration[2327-2361]:MethodDeclaration[2327-2361]"
    }, {
      "left" : "public static boolean login(@NotNull final String user, @NotNull final String password)",
      "right" : "public static boolean login(@NotNull final String user, @NotNull final String password)",
      "info" : "MethodDeclaration[2365-2581]:MethodDeclaration[2365-2581]"
    }, {
      "left" : "private static void initializeClient()",
      "right" : "private static void initializeClient()",
      "info" : "MethodDeclaration[2585-3230]:MethodDeclaration[2585-3230]"
    }, {
      "left" : "private static void saveCSRFToken()",
      "right" : "private static void saveCSRFToken()",
      "info" : "MethodDeclaration[3234-3519]:MethodDeclaration[3234-3519]"
    }, {
      "left" : "private static boolean postCredentials(String user, String password)",
      "right" : "private static boolean postCredentials(String user, String password)",
      "info" : "MethodDeclaration[3523-4734]:MethodDeclaration[3523-4734]"
    }, {
      "left" : "private static <T> T getFromStepic(String link, final Class<T> container) throws IOException",
      "right" : "private static <T> T getFromStepic(String link, final Class<T> container) throws IOException",
      "info" : "MethodDeclaration[4738-5319]:MethodDeclaration[4738-5319]"
    }, {
      "left" : "public static List<CourseInfo> getCourses()",
      "right" : "private static boolean addCoursesFromStepic(List<CourseInfo> result, int pageNumber) throws IOException",
      "info" : "MethodDeclaration[5323-6079]:MethodDeclaration[5826-6655]"
    }, {
      "left" : "public static Course getCourse(@NotNull final CourseInfo info)",
      "right" : "public static Course getCourse(@NotNull final CourseInfo info)",
      "info" : "MethodDeclaration[6083-6734]:MethodDeclaration[6659-7310]"
    }, {
      "left" : "public static List<Lesson> getLessons(int sectionId) throws IOException",
      "right" : "public static List<Lesson> getLessons(int sectionId) throws IOException",
      "info" : "MethodDeclaration[6738-7619]:MethodDeclaration[7314-8195]"
    }, {
      "left" : "private static void createTask(Lesson lesson, Integer s) throws IOException",
      "right" : "private static void createTask(Lesson lesson, Integer s) throws IOException",
      "info" : "MethodDeclaration[7623-8306]:MethodDeclaration[8199-8882]"
    }, {
      "left" : "public static Step getStep(Integer step) throws IOException",
      "right" : "public static Step getStep(Integer step) throws IOException",
      "info" : "MethodDeclaration[8310-8474]:MethodDeclaration[8886-9050]"
    }, {
      "left" : "public static void showLoginDialog()",
      "right" : "public static void showLoginDialog()",
      "info" : "MethodDeclaration[8479-8590]:MethodDeclaration[9055-9166]"
    }, {
      "left" : "public static void postLesson(Project project, @NotNull final Lesson lesson)",
      "right" : "public static void postLesson(Project project, @NotNull final Lesson lesson)",
      "info" : "MethodDeclaration[8595-9630]:MethodDeclaration[9171-10206]"
    }, {
      "left" : "public static void postTask(Project project, @NotNull final Task task, int id)",
      "right" : "public static void postTask(Project project, @NotNull final Task task, int id)",
      "info" : "MethodDeclaration[9634-10455]:MethodDeclaration[10210-11031]"
    }, {
      "left" : "private static void setHeaders(@NotNull final HttpRequestBase request, String contentType)",
      "right" : "private static void setHeaders(@NotNull final HttpRequestBase request, String contentType)",
      "info" : "MethodDeclaration[10459-10755]:MethodDeclaration[11035-11331]"
    }, {
      "left" : "StepContainer",
      "right" : "StepContainer",
      "info" : "TypeDeclaration[10759-10827]:TypeDeclaration[11335-11403]"
    }, {
      "left" : "List<StepSource> steps;",
      "right" : "List<StepSource> steps;",
      "info" : "FieldDeclaration[10800-10823]:FieldDeclaration[11376-11399]"
    }, {
      "left" : "Step",
      "right" : "Step",
      "info" : "TypeDeclaration[10831-11230]:TypeDeclaration[11407-11806]"
    }, {
      "left" : "@Expose StepOptions options;",
      "right" : "@Expose StepOptions options;",
      "info" : "FieldDeclaration[10863-10891]:FieldDeclaration[11439-11467]"
    }, {
      "left" : "@Expose String text;",
      "right" : "@Expose String text;",
      "info" : "FieldDeclaration[10896-10916]:FieldDeclaration[11472-11492]"
    }, {
      "left" : "@Expose String name = \"pycharm\";",
      "right" : "@Expose String name = \"pycharm\";",
      "info" : "FieldDeclaration[10921-10953]:FieldDeclaration[11497-11529]"
    }, {
      "left" : "@Expose StepOptions source;",
      "right" : "@Expose StepOptions source;",
      "info" : "FieldDeclaration[10958-10985]:FieldDeclaration[11534-11561]"
    }, {
      "left" : "public static Step fromTask(Project project, @NotNull final Task task)",
      "right" : "public static Step fromTask(Project project, @NotNull final Task task)",
      "info" : "MethodDeclaration[10991-11226]:MethodDeclaration[11567-11802]"
    }, {
      "left" : "StepOptions",
      "right" : "StepOptions",
      "info" : "TypeDeclaration[11234-12624]:TypeDeclaration[11810-13200]"
    }, {
      "left" : "@Expose List<TestFileWrapper> test;",
      "right" : "@Expose List<TestFileWrapper> test;",
      "info" : "FieldDeclaration[11273-11308]:FieldDeclaration[11849-11884]"
    }, {
      "left" : "@Expose String title;",
      "right" : "@Expose String title;",
      "info" : "FieldDeclaration[11313-11334]:FieldDeclaration[11889-11910]"
    }, {
      "left" : "@Expose List<TaskFile> files;",
      "right" : "@Expose List<TaskFile> files;",
      "info" : "FieldDeclaration[11347-11376]:FieldDeclaration[11923-11952]"
    }, {
      "left" : "@Expose String text;",
      "right" : "@Expose String text;",
      "info" : "FieldDeclaration[11381-11401]:FieldDeclaration[11957-11977]"
    }, {
      "left" : "public static StepOptions fromTask(final Project project, @NotNull final Task task)",
      "right" : "public static StepOptions fromTask(final Project project, @NotNull final Task task)",
      "info" : "MethodDeclaration[11407-12620]:MethodDeclaration[11983-13196]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[11944-12181]:MethodDeclaration[12520-12757]"
    }, {
      "left" : "CoursesContainer",
      "right" : "CoursesContainer",
      "info" : "TypeDeclaration[12628-12708]:TypeDeclaration[13204-13305]"
    }, {
      "left" : "public List<CourseInfo> courses;",
      "right" : "public List<CourseInfo> courses;",
      "info" : "FieldDeclaration[12672-12704]:FieldDeclaration[13248-13280]"
    }, {
      "left" : "StepSourceWrapper",
      "right" : "StepSourceWrapper",
      "info" : "TypeDeclaration[12712-12915]:TypeDeclaration[13309-13512]"
    }, {
      "left" : "@Expose\n    StepSource stepSource;",
      "right" : "@Expose\n    StepSource stepSource;",
      "info" : "FieldDeclaration[12749-12783]:FieldDeclaration[13346-13380]"
    }, {
      "left" : "public StepSourceWrapper(Project project, Task task, int id)",
      "right" : "public StepSourceWrapper(Project project, Task task, int id)",
      "info" : "MethodDeclaration[12789-12911]:MethodDeclaration[13386-13508]"
    }, {
      "left" : "LessonWrapper",
      "right" : "LessonWrapper",
      "info" : "TypeDeclaration[12919-13098]:TypeDeclaration[13516-13695]"
    }, {
      "left" : "Lesson lesson;",
      "right" : "Lesson lesson;",
      "info" : "FieldDeclaration[12952-12966]:FieldDeclaration[13549-13563]"
    }, {
      "left" : "public LessonWrapper(Lesson lesson)",
      "right" : "public LessonWrapper(Lesson lesson)",
      "info" : "MethodDeclaration[12972-13094]:MethodDeclaration[13569-13691]"
    }, {
      "left" : "LessonContainer",
      "right" : "LessonContainer",
      "info" : "TypeDeclaration[13102-13162]:TypeDeclaration[13699-13759]"
    }, {
      "left" : "List<Lesson> lessons;",
      "right" : "List<Lesson> lessons;",
      "info" : "FieldDeclaration[13137-13158]:FieldDeclaration[13734-13755]"
    }, {
      "left" : "StepSource",
      "right" : "StepSource",
      "info" : "TypeDeclaration[13166-13441]:TypeDeclaration[13763-14038]"
    }, {
      "left" : "@Expose Step block;",
      "right" : "@Expose Step block;",
      "info" : "FieldDeclaration[13196-13215]:FieldDeclaration[13793-13812]"
    }, {
      "left" : "@Expose int position = 0;",
      "right" : "@Expose int position = 0;",
      "info" : "FieldDeclaration[13220-13245]:FieldDeclaration[13817-13842]"
    }, {
      "left" : "@Expose int lesson = 0;",
      "right" : "@Expose int lesson = 0;",
      "info" : "FieldDeclaration[13250-13273]:FieldDeclaration[13847-13870]"
    }, {
      "left" : "public StepSource(Project project, Task task, int id)",
      "right" : "public StepSource(Project project, Task task, int id)",
      "info" : "MethodDeclaration[13279-13437]:MethodDeclaration[13876-14034]"
    }, {
      "left" : "TestFileWrapper",
      "right" : "TestFileWrapper",
      "info" : "TypeDeclaration[13445-13667]:TypeDeclaration[14042-14264]"
    }, {
      "left" : "@Expose private final String name;",
      "right" : "@Expose private final String name;",
      "info" : "FieldDeclaration[13480-13514]:FieldDeclaration[14077-14111]"
    }, {
      "left" : "@Expose private final String text;",
      "right" : "@Expose private final String text;",
      "info" : "FieldDeclaration[13519-13553]:FieldDeclaration[14116-14150]"
    }, {
      "left" : "public TestFileWrapper(String name, String text)",
      "right" : "public TestFileWrapper(String name, String text)",
      "info" : "MethodDeclaration[13559-13663]:MethodDeclaration[14156-14260]"
    }, {
      "left" : "SectionWrapper",
      "right" : "SectionWrapper",
      "info" : "TypeDeclaration[13671-13905]:TypeDeclaration[14268-14502]"
    }, {
      "left" : "Section",
      "right" : "Section",
      "info" : "TypeDeclaration[13705-13760]:TypeDeclaration[14302-14357]"
    }, {
      "left" : "List<Integer> units;",
      "right" : "List<Integer> units;",
      "info" : "FieldDeclaration[13734-13754]:FieldDeclaration[14331-14351]"
    }, {
      "left" : "List<Section> sections;",
      "right" : "List<Section> sections;",
      "info" : "FieldDeclaration[13766-13789]:FieldDeclaration[14363-14386]"
    }, {
      "left" : "List<Lesson> lessons;",
      "right" : "List<Lesson> lessons;",
      "info" : "FieldDeclaration[13794-13815]:FieldDeclaration[14391-14412]"
    }, {
      "left" : "Unit",
      "right" : "Unit",
      "info" : "TypeDeclaration[13821-13878]:TypeDeclaration[14418-14475]"
    }, {
      "left" : "int id;",
      "right" : "int id;",
      "info" : "FieldDeclaration[13847-13854]:FieldDeclaration[14444-14451]"
    }, {
      "left" : "int lesson;",
      "right" : "int lesson;",
      "info" : "FieldDeclaration[13861-13872]:FieldDeclaration[14458-14469]"
    }, {
      "left" : "List<Unit> units;",
      "right" : "List<Unit> units;",
      "info" : "FieldDeclaration[13884-13901]:FieldDeclaration[14481-14498]"
    }, {
      "left" : "UnitWrapper",
      "right" : "UnitWrapper",
      "info" : "TypeDeclaration[13909-14010]:TypeDeclaration[14506-14607]"
    }, {
      "left" : "Unit",
      "right" : "Unit",
      "info" : "TypeDeclaration[13940-13983]:TypeDeclaration[14537-14580]"
    }, {
      "left" : "int lesson;",
      "right" : "int lesson;",
      "info" : "FieldDeclaration[13966-13977]:FieldDeclaration[14563-14574]"
    }, {
      "left" : "List<Unit> units;",
      "right" : "List<Unit> units;",
      "info" : "FieldDeclaration[13989-14006]:FieldDeclaration[14586-14603]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2356-2361]:Block[2356-2361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2453-2581]:Block[2453-2581]"
    }, {
      "left" : "if (ourClient == null || ourCookieStore == null)",
      "right" : "if (ourClient == null || ourCookieStore == null)",
      "info" : "IfStatement[2459-2533]:IfStatement[2459-2533]"
    }, {
      "left" : "initializeClient();",
      "right" : "initializeClient();",
      "info" : "ExpressionStatement[2514-2533]:ExpressionStatement[2514-2533]"
    }, {
      "left" : "return postCredentials(user, password);",
      "right" : "return postCredentials(user, password);",
      "info" : "ReturnStatement[2538-2577]:ReturnStatement[2538-2577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2624-3230]:Block[2624-3230]"
    }, {
      "left" : "final HttpGet request = new HttpGet(stepicUrl);",
      "right" : "final HttpGet request = new HttpGet(stepicUrl);",
      "info" : "VariableDeclarationStatement[2630-2677]:VariableDeclarationStatement[2630-2677]"
    }, {
      "left" : "request.addHeader(new BasicHeader(\"referer\", \"https://stepic.org\"));",
      "right" : "request.addHeader(new BasicHeader(\"referer\", \"https://stepic.org\"));",
      "info" : "ExpressionStatement[2682-2750]:ExpressionStatement[2682-2750]"
    }, {
      "left" : "request.addHeader(new BasicHeader(\"content-type\", \"application/json\"));",
      "right" : "request.addHeader(new BasicHeader(\"content-type\", \"application/json\"));",
      "info" : "ExpressionStatement[2755-2826]:ExpressionStatement[2755-2826]"
    }, {
      "left" : "HttpClientBuilder builder = HttpClients.custom().setSslcontext(CertificateManager.getInstance().getSslContext()).setMaxConnPerRoute(100);",
      "right" : "HttpClientBuilder builder = HttpClients.custom().setSslcontext(CertificateManager.getInstance().getSslContext()).setMaxConnPerRoute(100);",
      "info" : "VariableDeclarationStatement[2832-2969]:VariableDeclarationStatement[2832-2969]"
    }, {
      "left" : "ourCookieStore = new BasicCookieStore();",
      "right" : "ourCookieStore = new BasicCookieStore();",
      "info" : "ExpressionStatement[2974-3014]:ExpressionStatement[2974-3014]"
    }, {
      "left" : "ourClient = builder.setDefaultCookieStore(ourCookieStore).build();",
      "right" : "ourClient = builder.setDefaultCookieStore(ourCookieStore).build();",
      "info" : "ExpressionStatement[3019-3085]:ExpressionStatement[3019-3085]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3091-3226]:TryStatement[3091-3226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3095-3159]:Block[3095-3159]"
    }, {
      "left" : "ourClient.execute(request);",
      "right" : "ourClient.execute(request);",
      "info" : "ExpressionStatement[3103-3130]:ExpressionStatement[3103-3130]"
    }, {
      "left" : "saveCSRFToken();",
      "right" : "saveCSRFToken();",
      "info" : "ExpressionStatement[3137-3153]:ExpressionStatement[3137-3153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3186-3226]:Block[3186-3226]"
    }, {
      "left" : "LOG.error(e.getMessage());",
      "right" : "LOG.error(e.getMessage());",
      "info" : "ExpressionStatement[3194-3220]:ExpressionStatement[3194-3220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3270-3519]:Block[3270-3519]"
    }, {
      "left" : "if (ourCookieStore == null)",
      "right" : "if (ourCookieStore == null)",
      "info" : "IfStatement[3276-3311]:IfStatement[3276-3311]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3304-3311]:ReturnStatement[3304-3311]"
    }, {
      "left" : "final List<Cookie> cookies = ourCookieStore.getCookies();",
      "right" : "final List<Cookie> cookies = ourCookieStore.getCookies();",
      "info" : "VariableDeclarationStatement[3316-3373]:VariableDeclarationStatement[3316-3373]"
    }, {
      "left" : "for (Cookie cookie : cookies)",
      "right" : "for (Cookie cookie : cookies)",
      "info" : "EnhancedForStatement[3378-3515]:EnhancedForStatement[3378-3515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3408-3515]:Block[3408-3515]"
    }, {
      "left" : "if (cookie.getName().equals(\"csrftoken\"))",
      "right" : "if (cookie.getName().equals(\"csrftoken\"))",
      "info" : "IfStatement[3416-3509]:IfStatement[3416-3509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3458-3509]:Block[3458-3509]"
    }, {
      "left" : "ourCSRFToken = cookie.getValue();",
      "right" : "ourCSRFToken = cookie.getValue();",
      "info" : "ExpressionStatement[3468-3501]:ExpressionStatement[3468-3501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3592-4734]:Block[3592-4734]"
    }, {
      "left" : "String url = stepicUrl + \"accounts/login/\";",
      "right" : "String url = stepicUrl + \"accounts/login/\";",
      "info" : "VariableDeclarationStatement[3598-3641]:VariableDeclarationStatement[3598-3641]"
    }, {
      "left" : "final HttpPost request = new HttpPost(url);",
      "right" : "final HttpPost request = new HttpPost(url);",
      "info" : "VariableDeclarationStatement[3646-3689]:VariableDeclarationStatement[3646-3689]"
    }, {
      "left" : "List <NameValuePair> nvps = new ArrayList <NameValuePair>();",
      "right" : "List <NameValuePair> nvps = new ArrayList <NameValuePair>();",
      "info" : "VariableDeclarationStatement[3694-3754]:VariableDeclarationStatement[3694-3754]"
    }, {
      "left" : "nvps.add(new BasicNameValuePair(\"csrfmiddlewaretoken\", ourCSRFToken));",
      "right" : "nvps.add(new BasicNameValuePair(\"csrfmiddlewaretoken\", ourCSRFToken));",
      "info" : "ExpressionStatement[3759-3829]:ExpressionStatement[3759-3829]"
    }, {
      "left" : "nvps.add(new BasicNameValuePair(\"login\", user));",
      "right" : "nvps.add(new BasicNameValuePair(\"login\", user));",
      "info" : "ExpressionStatement[3834-3882]:ExpressionStatement[3834-3882]"
    }, {
      "left" : "nvps.add(new BasicNameValuePair(\"next\", \"/\"));",
      "right" : "nvps.add(new BasicNameValuePair(\"next\", \"/\"));",
      "info" : "ExpressionStatement[3887-3933]:ExpressionStatement[3887-3933]"
    }, {
      "left" : "nvps.add(new BasicNameValuePair(\"password\", password));",
      "right" : "nvps.add(new BasicNameValuePair(\"password\", password));",
      "info" : "ExpressionStatement[3938-3993]:ExpressionStatement[3938-3993]"
    }, {
      "left" : "nvps.add(new BasicNameValuePair(\"remember\", \"on\"));",
      "right" : "nvps.add(new BasicNameValuePair(\"remember\", \"on\"));",
      "info" : "ExpressionStatement[3998-4049]:ExpressionStatement[3998-4049]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4055-4239]:TryStatement[4055-4239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4059-4135]:Block[4059-4135]"
    }, {
      "left" : "request.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));",
      "right" : "request.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));",
      "info" : "ExpressionStatement[4067-4129]:ExpressionStatement[4067-4129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4179-4239]:Block[4179-4239]"
    }, {
      "left" : "LOG.error(e.getMessage());",
      "right" : "LOG.error(e.getMessage());",
      "info" : "ExpressionStatement[4187-4213]:ExpressionStatement[4187-4213]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4220-4233]:ReturnStatement[4220-4233]"
    }, {
      "left" : "setHeaders(request, \"application/x-www-form-urlencoded\");",
      "right" : "setHeaders(request, \"application/x-www-form-urlencoded\");",
      "info" : "ExpressionStatement[4245-4302]:ExpressionStatement[4245-4302]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4308-4713]:TryStatement[4308-4713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4312-4626]:Block[4312-4626]"
    }, {
      "left" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "right" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "info" : "VariableDeclarationStatement[4320-4386]:VariableDeclarationStatement[4320-4386]"
    }, {
      "left" : "saveCSRFToken();",
      "right" : "saveCSRFToken();",
      "info" : "ExpressionStatement[4393-4409]:ExpressionStatement[4393-4409]"
    }, {
      "left" : "final StatusLine line = response.getStatusLine();",
      "right" : "final StatusLine line = response.getStatusLine();",
      "info" : "VariableDeclarationStatement[4416-4465]:VariableDeclarationStatement[4416-4465]"
    }, {
      "left" : "if (line.getStatusCode() != 302)",
      "right" : "if (line.getStatusCode() != 302)",
      "info" : "IfStatement[4472-4620]:IfStatement[4472-4620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4505-4620]:Block[4505-4620]"
    }, {
      "left" : "LOG.error(\"Failed to login \" + EntityUtils.toString(response.getEntity()));",
      "right" : "LOG.error(\"Failed to login \" + EntityUtils.toString(response.getEntity()));",
      "info" : "ExpressionStatement[4515-4590]:ExpressionStatement[4515-4590]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4599-4612]:ReturnStatement[4599-4612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4653-4713]:Block[4653-4713]"
    }, {
      "left" : "LOG.error(e.getMessage());",
      "right" : "LOG.error(e.getMessage());",
      "info" : "ExpressionStatement[4661-4687]:ExpressionStatement[4661-4687]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4694-4707]:ReturnStatement[4694-4707]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4718-4730]:ReturnStatement[4718-4730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4831-5319]:Block[4831-5319]"
    }, {
      "left" : "final HttpGet request = new HttpGet(stepicApiUrl + link);",
      "right" : "final HttpGet request = new HttpGet(stepicApiUrl + link);",
      "info" : "VariableDeclarationStatement[4837-4894]:VariableDeclarationStatement[4837-4894]"
    }, {
      "left" : "if (ourClient == null)",
      "right" : "if (ourClient == null)",
      "info" : "IfStatement[4899-4955]:IfStatement[4899-4955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4922-4955]:Block[4922-4955]"
    }, {
      "left" : "initializeClient();",
      "right" : "initializeClient();",
      "info" : "ExpressionStatement[4930-4949]:ExpressionStatement[4930-4949]"
    }, {
      "left" : "setHeaders(request, \"application/json\");",
      "right" : "setHeaders(request, \"application/json\");",
      "info" : "ExpressionStatement[4960-5000]:ExpressionStatement[4960-5000]"
    }, {
      "left" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "right" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "info" : "VariableDeclarationStatement[5006-5072]:VariableDeclarationStatement[5006-5072]"
    }, {
      "left" : "final String responseString = EntityUtils.toString(response.getEntity());",
      "right" : "final String responseString = EntityUtils.toString(response.getEntity());",
      "info" : "VariableDeclarationStatement[5077-5150]:VariableDeclarationStatement[5077-5150]"
    }, {
      "left" : "Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();",
      "right" : "Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();",
      "info" : "VariableDeclarationStatement[5155-5262]:VariableDeclarationStatement[5155-5262]"
    }, {
      "left" : "return gson.fromJson(responseString, container);",
      "right" : "return gson.fromJson(responseString, container);",
      "info" : "ReturnStatement[5267-5315]:ReturnStatement[5267-5315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5388-5943]:Block[5930-6655]"
    }, {
      "left" : "List<CourseInfo> result = new ArrayList<CourseInfo>();",
      "right" : "List<CourseInfo> result = new ArrayList<CourseInfo>();",
      "info" : "VariableDeclarationStatement[5396-5450]:VariableDeclarationStatement[5396-5450]"
    }, {
      "left" : "final List<CourseInfo> courseInfos = getFromStepic(\"courses\", CoursesContainer.class).courses;",
      "right" : "final String url = pageNumber == 0 ? \"courses\" : \"courses?page=\" + String.valueOf(pageNumber);",
      "info" : "VariableDeclarationStatement[5457-5551]:VariableDeclarationStatement[5936-6030]"
    }, {
      "left" : "for (CourseInfo info : courseInfos)",
      "right" : "for (CourseInfo info : courseInfos)",
      "info" : "EnhancedForStatement[5558-5916]:EnhancedForStatement[6192-6536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5594-5916]:Block[6228-6536]"
    }, {
      "left" : "final String courseType = info.getType();",
      "right" : "final String courseType = info.getType();",
      "info" : "VariableDeclarationStatement[5604-5645]:VariableDeclarationStatement[6236-6277]"
    }, {
      "left" : "if (StringUtil.isEmptyOrSpaces(courseType))",
      "right" : "if (StringUtil.isEmptyOrSpaces(courseType))",
      "info" : "IfStatement[5654-5707]:IfStatement[6284-6337]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[5698-5707]:ContinueStatement[6328-6337]"
    }, {
      "left" : "final List<String> typeLanguage = StringUtil.split(courseType, \" \");",
      "right" : "final List<String> typeLanguage = StringUtil.split(courseType, \" \");",
      "info" : "VariableDeclarationStatement[5716-5784]:VariableDeclarationStatement[6344-6412]"
    }, {
      "left" : "if (typeLanguage.size() == 2 && PYCHARM_PREFIX.equals(typeLanguage.get(0)))",
      "right" : "if (typeLanguage.size() == 2 && PYCHARM_PREFIX.equals(typeLanguage.get(0)))",
      "info" : "IfStatement[5793-5908]:IfStatement[6419-6530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5869-5908]:Block[6495-6530]"
    }, {
      "left" : "result.add(info);",
      "right" : "result.add(info);",
      "info" : "ExpressionStatement[5881-5898]:ExpressionStatement[6505-6522]"
    }, {
      "left" : "return result;",
      "right" : "return coursesContainer.meta.containsKey(\"has_next\") && coursesContainer.meta.get(\"has_next\") == Boolean.TRUE;",
      "info" : "ReturnStatement[5923-5937]:ReturnStatement[6541-6651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5970-6039]:Block[5713-5782]"
    }, {
      "left" : "LOG.error(\"Cannot load course list \" + e.getMessage());",
      "right" : "LOG.error(\"Cannot load course list \" + e.getMessage());",
      "info" : "ExpressionStatement[5978-6033]:ExpressionStatement[5721-5776]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[6044-6075]:ReturnStatement[5787-5818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6146-6734]:Block[6722-7310]"
    }, {
      "left" : "final Course course = new Course();",
      "right" : "final Course course = new Course();",
      "info" : "VariableDeclarationStatement[6152-6187]:VariableDeclarationStatement[6728-6763]"
    }, {
      "left" : "course.setAuthors(info.getInstructors());",
      "right" : "course.setAuthors(info.getInstructors());",
      "info" : "ExpressionStatement[6192-6233]:ExpressionStatement[6768-6809]"
    }, {
      "left" : "course.setDescription(info.getDescription());",
      "right" : "course.setDescription(info.getDescription());",
      "info" : "ExpressionStatement[6238-6283]:ExpressionStatement[6814-6859]"
    }, {
      "left" : "course.setName(info.getName());",
      "right" : "course.setName(info.getName());",
      "info" : "ExpressionStatement[6288-6319]:ExpressionStatement[6864-6895]"
    }, {
      "left" : "String courseType = info.getType();",
      "right" : "String courseType = info.getType();",
      "info" : "VariableDeclarationStatement[6324-6359]:VariableDeclarationStatement[6900-6935]"
    }, {
      "left" : "course.setLanguage(courseType.substring(PYCHARM_PREFIX.length() + 1));",
      "right" : "course.setLanguage(courseType.substring(PYCHARM_PREFIX.length() + 1));",
      "info" : "ExpressionStatement[6364-6434]:ExpressionStatement[6940-7010]"
    }, {
      "left" : "course.setUpToDate(true);",
      "right" : "course.setUpToDate(true);",
      "info" : "ExpressionStatement[6439-6464]:ExpressionStatement[7015-7040]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6495-6713]:TryStatement[7071-7289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6499-6629]:Block[7075-7205]"
    }, {
      "left" : "for (Integer section : info.sections)",
      "right" : "for (Integer section : info.sections)",
      "info" : "EnhancedForStatement[6507-6602]:EnhancedForStatement[7083-7178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6545-6602]:Block[7121-7178]"
    }, {
      "left" : "course.addLessons(getLessons(section));",
      "right" : "course.addLessons(getLessons(section));",
      "info" : "ExpressionStatement[6555-6594]:ExpressionStatement[7131-7170]"
    }, {
      "left" : "return course;",
      "right" : "return course;",
      "info" : "ReturnStatement[6609-6623]:ReturnStatement[7185-7199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6656-6713]:Block[7232-7289]"
    }, {
      "left" : "LOG.error(\"IOException \" + e.getMessage());",
      "right" : "LOG.error(\"IOException \" + e.getMessage());",
      "info" : "ExpressionStatement[6664-6707]:ExpressionStatement[7240-7283]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6718-6730]:ReturnStatement[7294-7306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6810-7619]:Block[7386-8195]"
    }, {
      "left" : "final SectionWrapper sectionWrapper = getFromStepic(\"sections/\" + String.valueOf(sectionId), SectionWrapper.class);",
      "right" : "final SectionWrapper sectionWrapper = getFromStepic(\"sections/\" + String.valueOf(sectionId), SectionWrapper.class);",
      "info" : "VariableDeclarationStatement[6816-6931]:VariableDeclarationStatement[7392-7507]"
    }, {
      "left" : "List<Integer> unitIds = sectionWrapper.sections.get(0).units;",
      "right" : "List<Integer> unitIds = sectionWrapper.sections.get(0).units;",
      "info" : "VariableDeclarationStatement[6936-6997]:VariableDeclarationStatement[7512-7573]"
    }, {
      "left" : "final List<Lesson> lessons = new ArrayList<Lesson>();",
      "right" : "final List<Lesson> lessons = new ArrayList<Lesson>();",
      "info" : "VariableDeclarationStatement[7002-7055]:VariableDeclarationStatement[7578-7631]"
    }, {
      "left" : "for (Integer unitId : unitIds)",
      "right" : "for (Integer unitId : unitIds)",
      "info" : "EnhancedForStatement[7060-7427]:EnhancedForStatement[7636-8003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7091-7427]:Block[7667-8003]"
    }, {
      "left" : "UnitWrapper unit = getFromStepic(\"units/\" + String.valueOf(unitId), UnitWrapper.class);",
      "right" : "UnitWrapper unit = getFromStepic(\"units/\" + String.valueOf(unitId), UnitWrapper.class);",
      "info" : "VariableDeclarationStatement[7099-7186]:VariableDeclarationStatement[7675-7762]"
    }, {
      "left" : "int lessonID = unit.units.get(0).lesson;",
      "right" : "int lessonID = unit.units.get(0).lesson;",
      "info" : "VariableDeclarationStatement[7193-7233]:VariableDeclarationStatement[7769-7809]"
    }, {
      "left" : "LessonContainer lesson = getFromStepic(\"lessons/\" + String.valueOf(lessonID), LessonContainer.class);",
      "right" : "LessonContainer lesson = getFromStepic(\"lessons/\" + String.valueOf(lessonID), LessonContainer.class);",
      "info" : "VariableDeclarationStatement[7240-7341]:VariableDeclarationStatement[7816-7917]"
    }, {
      "left" : "Lesson realLesson = lesson.lessons.get(0);",
      "right" : "Lesson realLesson = lesson.lessons.get(0);",
      "info" : "VariableDeclarationStatement[7348-7390]:VariableDeclarationStatement[7924-7966]"
    }, {
      "left" : "lessons.add(realLesson);",
      "right" : "lessons.add(realLesson);",
      "info" : "ExpressionStatement[7397-7421]:ExpressionStatement[7973-7997]"
    }, {
      "left" : "for (Lesson lesson : lessons)",
      "right" : "for (Lesson lesson : lessons)",
      "info" : "EnhancedForStatement[7433-7595]:EnhancedForStatement[8009-8171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7463-7595]:Block[8039-8171]"
    }, {
      "left" : "lesson.taskList = new ArrayList<Task>();",
      "right" : "lesson.taskList = new ArrayList<Task>();",
      "info" : "ExpressionStatement[7471-7511]:ExpressionStatement[8047-8087]"
    }, {
      "left" : "for (Integer s : lesson.steps)",
      "right" : "for (Integer s : lesson.steps)",
      "info" : "EnhancedForStatement[7518-7589]:EnhancedForStatement[8094-8165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7549-7589]:Block[8125-8165]"
    }, {
      "left" : "createTask(lesson, s);",
      "right" : "createTask(lesson, s);",
      "info" : "ExpressionStatement[7559-7581]:ExpressionStatement[8135-8157]"
    }, {
      "left" : "return lessons;",
      "right" : "return lessons;",
      "info" : "ReturnStatement[7600-7615]:ReturnStatement[8176-8191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7699-8306]:Block[8275-8882]"
    }, {
      "left" : "final Step step = getStep(s);",
      "right" : "final Step step = getStep(s);",
      "info" : "VariableDeclarationStatement[7705-7734]:VariableDeclarationStatement[8281-8310]"
    }, {
      "left" : "final Task task = new Task();",
      "right" : "final Task task = new Task();",
      "info" : "VariableDeclarationStatement[7739-7768]:VariableDeclarationStatement[8315-8344]"
    }, {
      "left" : "task.setName(step.options != null ? step.options.title : PYCHARM_PREFIX);",
      "right" : "task.setName(step.options != null ? step.options.title : PYCHARM_PREFIX);",
      "info" : "ExpressionStatement[7773-7846]:ExpressionStatement[8349-8422]"
    }, {
      "left" : "task.setText(step.text);",
      "right" : "task.setText(step.text);",
      "info" : "ExpressionStatement[7851-7875]:ExpressionStatement[8427-8451]"
    }, {
      "left" : "for (TestFileWrapper wrapper : step.options.test)",
      "right" : "for (TestFileWrapper wrapper : step.options.test)",
      "info" : "EnhancedForStatement[7880-7991]:EnhancedForStatement[8456-8567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7930-7991]:Block[8506-8567]"
    }, {
      "left" : "task.setTestsTexts(wrapper.name, wrapper.text);",
      "right" : "task.setTestsTexts(wrapper.name, wrapper.text);",
      "info" : "ExpressionStatement[7938-7985]:ExpressionStatement[8514-8561]"
    }, {
      "left" : "task.taskFiles = new HashMap<String, TaskFile>();",
      "right" : "task.taskFiles = new HashMap<String, TaskFile>();",
      "info" : "ExpressionStatement[7997-8046]:ExpressionStatement[8573-8622]"
    }, {
      "left" : "if (step.options.files != null)",
      "right" : "if (step.options.files != null)",
      "info" : "IfStatement[8118-8271]:IfStatement[8694-8847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8150-8271]:Block[8726-8847]"
    }, {
      "left" : "for (TaskFile taskFile : step.options.files)",
      "right" : "for (TaskFile taskFile : step.options.files)",
      "info" : "EnhancedForStatement[8158-8265]:EnhancedForStatement[8734-8841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8203-8265]:Block[8779-8841]"
    }, {
      "left" : "task.taskFiles.put(taskFile.name, taskFile);",
      "right" : "task.taskFiles.put(taskFile.name, taskFile);",
      "info" : "ExpressionStatement[8213-8257]:ExpressionStatement[8789-8833]"
    }, {
      "left" : "lesson.taskList.add(task);",
      "right" : "lesson.taskList.add(task);",
      "info" : "ExpressionStatement[8276-8302]:ExpressionStatement[8852-8878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8370-8474]:Block[8946-9050]"
    }, {
      "left" : "return getFromStepic(\"steps/\" + String.valueOf(step), StepContainer.class).steps.get(0).block;",
      "right" : "return getFromStepic(\"steps/\" + String.valueOf(step), StepContainer.class).steps.get(0).block;",
      "info" : "ReturnStatement[8376-8470]:ReturnStatement[8952-9046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8516-8590]:Block[9092-9166]"
    }, {
      "left" : "final LoginDialog dialog = new LoginDialog();",
      "right" : "final LoginDialog dialog = new LoginDialog();",
      "info" : "VariableDeclarationStatement[8522-8567]:VariableDeclarationStatement[9098-9143]"
    }, {
      "left" : "dialog.show();",
      "right" : "dialog.show();",
      "info" : "ExpressionStatement[8572-8586]:ExpressionStatement[9148-9162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8672-9630]:Block[9248-10206]"
    }, {
      "left" : "final HttpPost request = new HttpPost(stepicApiUrl + \"lessons\");",
      "right" : "final HttpPost request = new HttpPost(stepicApiUrl + \"lessons\");",
      "info" : "VariableDeclarationStatement[8678-8742]:VariableDeclarationStatement[9254-9318]"
    }, {
      "left" : "if (ourClient == null)",
      "right" : "if (ourClient == null)",
      "info" : "IfStatement[8747-8802]:IfStatement[9323-9378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8770-8802]:Block[9346-9378]"
    }, {
      "left" : "showLoginDialog();",
      "right" : "showLoginDialog();",
      "info" : "ExpressionStatement[8778-8796]:ExpressionStatement[9354-9372]"
    }, {
      "left" : "setHeaders(request, \"application/json\");",
      "right" : "setHeaders(request, \"application/json\");",
      "info" : "ExpressionStatement[8808-8848]:ExpressionStatement[9384-9424]"
    }, {
      "left" : "String requestBody = new Gson().toJson(new LessonWrapper(lesson));",
      "right" : "String requestBody = new Gson().toJson(new LessonWrapper(lesson));",
      "info" : "VariableDeclarationStatement[8853-8919]:VariableDeclarationStatement[9429-9495]"
    }, {
      "left" : "request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON));",
      "right" : "request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON));",
      "info" : "ExpressionStatement[8924-9003]:ExpressionStatement[9500-9579]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9009-9626]:TryStatement[9585-10202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9013-9559]:Block[9589-10135]"
    }, {
      "left" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "right" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "info" : "VariableDeclarationStatement[9021-9087]:VariableDeclarationStatement[9597-9663]"
    }, {
      "left" : "final String responseString = EntityUtils.toString(response.getEntity());",
      "right" : "final String responseString = EntityUtils.toString(response.getEntity());",
      "info" : "VariableDeclarationStatement[9094-9167]:VariableDeclarationStatement[9670-9743]"
    }, {
      "left" : "final StatusLine line = response.getStatusLine();",
      "right" : "final StatusLine line = response.getStatusLine();",
      "info" : "VariableDeclarationStatement[9174-9223]:VariableDeclarationStatement[9750-9799]"
    }, {
      "left" : "if (line.getStatusCode() != 201)",
      "right" : "if (line.getStatusCode() != 201)",
      "info" : "IfStatement[9230-9343]:IfStatement[9806-9919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9263-9343]:Block[9839-9919]"
    }, {
      "left" : "LOG.error(\"Failed to push \" + responseString);",
      "right" : "LOG.error(\"Failed to push \" + responseString);",
      "info" : "ExpressionStatement[9273-9319]:ExpressionStatement[9849-9895]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9328-9335]:ReturnStatement[9904-9911]"
    }, {
      "left" : "final Lesson postedLesson = new Gson().fromJson(responseString, Course.class).getLessons().get(0);",
      "right" : "final Lesson postedLesson = new Gson().fromJson(responseString, Course.class).getLessons().get(0);",
      "info" : "VariableDeclarationStatement[9350-9448]:VariableDeclarationStatement[9926-10024]"
    }, {
      "left" : "for (Task task : lesson.getTaskList())",
      "right" : "for (Task task : lesson.getTaskList())",
      "info" : "EnhancedForStatement[9455-9553]:EnhancedForStatement[10031-10129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9494-9553]:Block[10070-10129]"
    }, {
      "left" : "postTask(project, task, postedLesson.id);",
      "right" : "postTask(project, task, postedLesson.id);",
      "info" : "ExpressionStatement[9504-9545]:ExpressionStatement[10080-10121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9586-9626]:Block[10162-10202]"
    }, {
      "left" : "LOG.error(e.getMessage());",
      "right" : "LOG.error(e.getMessage());",
      "info" : "ExpressionStatement[9594-9620]:ExpressionStatement[10170-10196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9713-10455]:Block[10289-11031]"
    }, {
      "left" : "final HttpPost request = new HttpPost(stepicApiUrl + \"step-sources\");",
      "right" : "final HttpPost request = new HttpPost(stepicApiUrl + \"step-sources\");",
      "info" : "VariableDeclarationStatement[9719-9788]:VariableDeclarationStatement[10295-10364]"
    }, {
      "left" : "setHeaders(request, \"application/json\");",
      "right" : "setHeaders(request, \"application/json\");",
      "info" : "ExpressionStatement[9793-9833]:ExpressionStatement[10369-10409]"
    }, {
      "left" : "final Gson gson = new GsonBuilder().setPrettyPrinting().excludeFieldsWithoutExposeAnnotation().create();",
      "right" : "final Gson gson = new GsonBuilder().setPrettyPrinting().excludeFieldsWithoutExposeAnnotation().create();",
      "info" : "VariableDeclarationStatement[9838-9942]:VariableDeclarationStatement[10414-10518]"
    }, {
      "left" : "String requestBody = gson.toJson(new StepSourceWrapper(project, task, id));",
      "right" : "String requestBody = gson.toJson(new StepSourceWrapper(project, task, id));",
      "info" : "VariableDeclarationStatement[9947-10022]:VariableDeclarationStatement[10523-10598]"
    }, {
      "left" : "request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON));",
      "right" : "request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON));",
      "info" : "ExpressionStatement[10027-10106]:ExpressionStatement[10603-10682]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10112-10451]:TryStatement[10688-11027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10116-10384]:Block[10692-10960]"
    }, {
      "left" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "right" : "final CloseableHttpResponse response = ourClient.execute(request);",
      "info" : "VariableDeclarationStatement[10124-10190]:VariableDeclarationStatement[10700-10766]"
    }, {
      "left" : "final StatusLine line = response.getStatusLine();",
      "right" : "final StatusLine line = response.getStatusLine();",
      "info" : "VariableDeclarationStatement[10197-10246]:VariableDeclarationStatement[10773-10822]"
    }, {
      "left" : "if (line.getStatusCode() != 201)",
      "right" : "if (line.getStatusCode() != 201)",
      "info" : "IfStatement[10253-10378]:IfStatement[10829-10954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10286-10378]:Block[10862-10954]"
    }, {
      "left" : "LOG.error(\"Failed to push \" + EntityUtils.toString(response.getEntity()));",
      "right" : "LOG.error(\"Failed to push \" + EntityUtils.toString(response.getEntity()));",
      "info" : "ExpressionStatement[10296-10370]:ExpressionStatement[10872-10946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10411-10451]:Block[10987-11027]"
    }, {
      "left" : "LOG.error(e.getMessage());",
      "right" : "LOG.error(e.getMessage());",
      "info" : "ExpressionStatement[10419-10445]:ExpressionStatement[10995-11021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10550-10755]:Block[11126-11331]"
    }, {
      "left" : "request.addHeader(new BasicHeader(\"referer\", stepicUrl));",
      "right" : "request.addHeader(new BasicHeader(\"referer\", stepicUrl));",
      "info" : "ExpressionStatement[10556-10613]:ExpressionStatement[11132-11189]"
    }, {
      "left" : "request.addHeader(new BasicHeader(\"X-CSRFToken\", ourCSRFToken));",
      "right" : "request.addHeader(new BasicHeader(\"X-CSRFToken\", ourCSRFToken));",
      "info" : "ExpressionStatement[10618-10682]:ExpressionStatement[11194-11258]"
    }, {
      "left" : "request.addHeader(new BasicHeader(\"content-type\", contentType));",
      "right" : "request.addHeader(new BasicHeader(\"content-type\", contentType));",
      "info" : "ExpressionStatement[10687-10751]:ExpressionStatement[11263-11327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11062-11226]:Block[11638-11802]"
    }, {
      "left" : "final Step step = new Step();",
      "right" : "final Step step = new Step();",
      "info" : "VariableDeclarationStatement[11070-11099]:VariableDeclarationStatement[11646-11675]"
    }, {
      "left" : "step.text = task.getTaskText(project);",
      "right" : "step.text = task.getTaskText(project);",
      "info" : "ExpressionStatement[11106-11144]:ExpressionStatement[11682-11720]"
    }, {
      "left" : "step.source = StepOptions.fromTask(project, task);",
      "right" : "step.source = StepOptions.fromTask(project, task);",
      "info" : "ExpressionStatement[11151-11201]:ExpressionStatement[11727-11777]"
    }, {
      "left" : "return step;",
      "right" : "return step;",
      "info" : "ReturnStatement[11208-11220]:ReturnStatement[11784-11796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11491-12620]:Block[12067-13196]"
    }, {
      "left" : "final StepOptions source = new StepOptions();",
      "right" : "final StepOptions source = new StepOptions();",
      "info" : "VariableDeclarationStatement[11499-11544]:VariableDeclarationStatement[12075-12120]"
    }, {
      "left" : "final String text = task.getTestsText(project);",
      "right" : "final String text = task.getTestsText(project);",
      "info" : "VariableDeclarationStatement[11552-11599]:VariableDeclarationStatement[12128-12175]"
    }, {
      "left" : "source.test = Collections.singletonList(new TestFileWrapper(\"tests.py\", text));",
      "right" : "source.test = Collections.singletonList(new TestFileWrapper(\"tests.py\", text));",
      "info" : "ExpressionStatement[11606-11685]:ExpressionStatement[12182-12261]"
    }, {
      "left" : "source.files = new ArrayList<TaskFile>();",
      "right" : "source.files = new ArrayList<TaskFile>();",
      "info" : "ExpressionStatement[11692-11733]:ExpressionStatement[12268-12309]"
    }, {
      "left" : "source.title = task.getName();",
      "right" : "source.title = task.getName();",
      "info" : "ExpressionStatement[11740-11770]:ExpressionStatement[12316-12346]"
    }, {
      "left" : "for (final Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet())",
      "right" : "for (final Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet())",
      "info" : "EnhancedForStatement[11777-12593]:EnhancedForStatement[12353-13169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11856-12593]:Block[12432-13169]"
    }, {
      "left" : "ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          @Override\n          public void run() {\n            final VirtualFile taskDir = task.getTaskDir(project);\n            assert taskDir != null;\n            EduUtils.createStudentFileFromAnswer(project, taskDir, taskDir, entry);\n          }\n        });",
      "right" : "ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          @Override\n          public void run() {\n            final VirtualFile taskDir = task.getTaskDir(project);\n            assert taskDir != null;\n            EduUtils.createStudentFileFromAnswer(project, taskDir, taskDir, entry);\n          }\n        });",
      "info" : "ExpressionStatement[11866-12193]:ExpressionStatement[12442-12769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11982-12181]:Block[12558-12757]"
    }, {
      "left" : "final VirtualFile taskDir = task.getTaskDir(project);",
      "right" : "final VirtualFile taskDir = task.getTaskDir(project);",
      "info" : "VariableDeclarationStatement[11996-12049]:VariableDeclarationStatement[12572-12625]"
    }, {
      "left" : "assert taskDir != null;",
      "right" : "assert taskDir != null;",
      "info" : "AssertStatement[12062-12085]:AssertStatement[12638-12661]"
    }, {
      "left" : "EduUtils.createStudentFileFromAnswer(project, taskDir, taskDir, entry);",
      "right" : "EduUtils.createStudentFileFromAnswer(project, taskDir, taskDir, entry);",
      "info" : "ExpressionStatement[12098-12169]:ExpressionStatement[12674-12745]"
    }, {
      "left" : "final TaskFile taskFile = entry.getValue();",
      "right" : "final TaskFile taskFile = entry.getValue();",
      "info" : "VariableDeclarationStatement[12202-12245]:VariableDeclarationStatement[12778-12821]"
    }, {
      "left" : "taskFile.name = entry.getKey();",
      "right" : "taskFile.name = entry.getKey();",
      "info" : "ExpressionStatement[12254-12285]:ExpressionStatement[12830-12861]"
    }, {
      "left" : "final Document document = task.getDocument(project, taskFile.name);",
      "right" : "final Document document = task.getDocument(project, taskFile.name);",
      "info" : "VariableDeclarationStatement[12294-12361]:VariableDeclarationStatement[12870-12937]"
    }, {
      "left" : "if (document != null)",
      "right" : "if (document != null)",
      "info" : "IfStatement[12370-12549]:IfStatement[12946-13125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12392-12549]:Block[12968-13125]"
    }, {
      "left" : "source.text = document.getImmutableCharSequence().toString();",
      "right" : "source.text = document.getImmutableCharSequence().toString();",
      "info" : "ExpressionStatement[12404-12465]:ExpressionStatement[12980-13041]"
    }, {
      "left" : "taskFile.text = document.getImmutableCharSequence().toString();",
      "right" : "taskFile.text = document.getImmutableCharSequence().toString();",
      "info" : "ExpressionStatement[12476-12539]:ExpressionStatement[13052-13115]"
    }, {
      "left" : "source.files.add(taskFile);",
      "right" : "source.files.add(taskFile);",
      "info" : "ExpressionStatement[12558-12585]:ExpressionStatement[13134-13161]"
    }, {
      "left" : "return source;",
      "right" : "return source;",
      "info" : "ReturnStatement[12600-12614]:ReturnStatement[13176-13190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12850-12911]:Block[13447-13508]"
    }, {
      "left" : "stepSource = new StepSource(project, task, id);",
      "right" : "stepSource = new StepSource(project, task, id);",
      "info" : "ExpressionStatement[12858-12905]:ExpressionStatement[13455-13502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13008-13094]:Block[13605-13691]"
    }, {
      "left" : "this.lesson = new Lesson();",
      "right" : "this.lesson = new Lesson();",
      "info" : "ExpressionStatement[13016-13043]:ExpressionStatement[13613-13640]"
    }, {
      "left" : "this.lesson.setName(lesson.getName());",
      "right" : "this.lesson.setName(lesson.getName());",
      "info" : "ExpressionStatement[13050-13088]:ExpressionStatement[13647-13685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13333-13437]:Block[13930-14034]"
    }, {
      "left" : "lesson = id;",
      "right" : "lesson = id;",
      "info" : "ExpressionStatement[13341-13353]:ExpressionStatement[13938-13950]"
    }, {
      "left" : "position = task.getIndex();",
      "right" : "position = task.getIndex();",
      "info" : "ExpressionStatement[13360-13387]:ExpressionStatement[13957-13984]"
    }, {
      "left" : "block = Step.fromTask(project, task);",
      "right" : "block = Step.fromTask(project, task);",
      "info" : "ExpressionStatement[13394-13431]:ExpressionStatement[13991-14028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13608-13663]:Block[14205-14260]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[13616-13633]:ExpressionStatement[14213-14230]"
    }, {
      "left" : "this.text = text;",
      "right" : "this.text = text;",
      "info" : "ExpressionStatement[13640-13657]:ExpressionStatement[14237-14254]"
    } ]
  },
  "interFileMappings" : { }
}