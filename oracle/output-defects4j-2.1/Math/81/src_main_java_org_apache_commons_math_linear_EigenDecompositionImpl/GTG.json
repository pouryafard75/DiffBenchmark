{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "EigenDecompositionImpl",
      "right" : "EigenDecompositionImpl",
      "info" : "TypeDeclaration[1086-67112]:TypeDeclaration[1086-67166]"
    }, {
      "left" : "private static final double TOLERANCE = 100 * MathUtils.EPSILON;",
      "right" : "private static final double TOLERANCE = 100 * MathUtils.EPSILON;",
      "info" : "FieldDeclaration[3150-3236]:FieldDeclaration[3150-3236]"
    }, {
      "left" : "private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;",
      "right" : "private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;",
      "info" : "FieldDeclaration[3242-3336]:FieldDeclaration[3242-3336]"
    }, {
      "left" : "private double splitTolerance;",
      "right" : "private double splitTolerance;",
      "info" : "FieldDeclaration[3342-3400]:FieldDeclaration[3342-3400]"
    }, {
      "left" : "private double[] main;",
      "right" : "private double[] main;",
      "info" : "FieldDeclaration[3406-3480]:FieldDeclaration[3406-3480]"
    }, {
      "left" : "private double[] secondary;",
      "right" : "private double[] secondary;",
      "info" : "FieldDeclaration[3486-3570]:FieldDeclaration[3486-3570]"
    }, {
      "left" : "private double[] squaredSecondary;",
      "right" : "private double[] squaredSecondary;",
      "info" : "FieldDeclaration[3576-3675]:FieldDeclaration[3576-3675]"
    }, {
      "left" : "private TriDiagonalTransformer transformer;",
      "right" : "private TriDiagonalTransformer transformer;",
      "info" : "FieldDeclaration[3681-3810]:FieldDeclaration[3681-3810]"
    }, {
      "left" : "private double lowerSpectra;",
      "right" : "private double lowerSpectra;",
      "info" : "FieldDeclaration[3816-3879]:FieldDeclaration[3816-3879]"
    }, {
      "left" : "private double upperSpectra;",
      "right" : "private double upperSpectra;",
      "info" : "FieldDeclaration[3885-3948]:FieldDeclaration[3885-3948]"
    }, {
      "left" : "private double minPivot;",
      "right" : "private double minPivot;",
      "info" : "FieldDeclaration[3954-4026]:FieldDeclaration[3954-4026]"
    }, {
      "left" : "private double sigma;",
      "right" : "private double sigma;",
      "info" : "FieldDeclaration[4032-4079]:FieldDeclaration[4032-4079]"
    }, {
      "left" : "private double sigmaLow;",
      "right" : "private double sigmaLow;",
      "info" : "FieldDeclaration[4085-4151]:FieldDeclaration[4085-4151]"
    }, {
      "left" : "private double tau;",
      "right" : "private double tau;",
      "info" : "FieldDeclaration[4157-4213]:FieldDeclaration[4157-4213]"
    }, {
      "left" : "private double[] work;",
      "right" : "private double[] work;",
      "info" : "FieldDeclaration[4219-4297]:FieldDeclaration[4219-4297]"
    }, {
      "left" : "private int pingPong;",
      "right" : "private int pingPong;",
      "info" : "FieldDeclaration[4303-4387]:FieldDeclaration[4303-4387]"
    }, {
      "left" : "private double qMax;",
      "right" : "private double qMax;",
      "info" : "FieldDeclaration[4393-4475]:FieldDeclaration[4393-4475]"
    }, {
      "left" : "private double eMin;",
      "right" : "private double eMin;",
      "info" : "FieldDeclaration[4481-4567]:FieldDeclaration[4481-4567]"
    }, {
      "left" : "private int    tType;",
      "right" : "private int    tType;",
      "info" : "FieldDeclaration[4573-4634]:FieldDeclaration[4573-4634]"
    }, {
      "left" : "private double dMin;",
      "right" : "private double dMin;",
      "info" : "FieldDeclaration[4640-4719]:FieldDeclaration[4640-4719]"
    }, {
      "left" : "private double dMin1;",
      "right" : "private double dMin1;",
      "info" : "FieldDeclaration[4725-4829]:FieldDeclaration[4725-4829]"
    }, {
      "left" : "private double dMin2;",
      "right" : "private double dMin2;",
      "info" : "FieldDeclaration[4835-4944]:FieldDeclaration[4835-4944]"
    }, {
      "left" : "private double dN;",
      "right" : "private double dN;",
      "info" : "FieldDeclaration[4950-5024]:FieldDeclaration[4950-5024]"
    }, {
      "left" : "private double dN1;",
      "right" : "private double dN1;",
      "info" : "FieldDeclaration[5030-5113]:FieldDeclaration[5030-5113]"
    }, {
      "left" : "private double dN2;",
      "right" : "private double dN2;",
      "info" : "FieldDeclaration[5119-5196]:FieldDeclaration[5119-5196]"
    }, {
      "left" : "private double g;",
      "right" : "private double g;",
      "info" : "FieldDeclaration[5202-5285]:FieldDeclaration[5202-5285]"
    }, {
      "left" : "private double[] realEigenvalues;",
      "right" : "private double[] realEigenvalues;",
      "info" : "FieldDeclaration[5291-5369]:FieldDeclaration[5291-5369]"
    }, {
      "left" : "private double[] imagEigenvalues;",
      "right" : "private double[] imagEigenvalues;",
      "info" : "FieldDeclaration[5375-5458]:FieldDeclaration[5375-5458]"
    }, {
      "left" : "private ArrayRealVector[] eigenvectors;",
      "right" : "private ArrayRealVector[] eigenvectors;",
      "info" : "FieldDeclaration[5464-5528]:FieldDeclaration[5464-5528]"
    }, {
      "left" : "private RealMatrix cachedV;",
      "right" : "private RealMatrix cachedV;",
      "info" : "FieldDeclaration[5534-5591]:FieldDeclaration[5534-5591]"
    }, {
      "left" : "private RealMatrix cachedD;",
      "right" : "private RealMatrix cachedD;",
      "info" : "FieldDeclaration[5597-5654]:FieldDeclaration[5597-5654]"
    }, {
      "left" : "private RealMatrix cachedVt;",
      "right" : "private RealMatrix cachedVt;",
      "info" : "FieldDeclaration[5660-5719]:FieldDeclaration[5660-5719]"
    }, {
      "left" : "public EigenDecompositionImpl(final RealMatrix matrix,\n                                  final double splitTolerance)\n        throws InvalidMatrixException",
      "right" : "public EigenDecompositionImpl(final RealMatrix matrix,\n                                  final double splitTolerance)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[5725-6846]:MethodDeclaration[5725-6846]"
    }, {
      "left" : "public EigenDecompositionImpl(final double[] main, double[] secondary,\n            final double splitTolerance)\n        throws InvalidMatrixException",
      "right" : "public EigenDecompositionImpl(final double[] main, double[] secondary,\n            final double splitTolerance)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[6852-8028]:MethodDeclaration[6852-8028]"
    }, {
      "left" : "private boolean isSymmetric(final RealMatrix matrix)",
      "right" : "private boolean isSymmetric(final RealMatrix matrix)",
      "info" : "MethodDeclaration[8034-8807]:MethodDeclaration[8034-8807]"
    }, {
      "left" : "private void decompose()",
      "right" : "private void decompose()",
      "info" : "MethodDeclaration[8813-9416]:MethodDeclaration[8813-9416]"
    }, {
      "left" : "public RealMatrix getV()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getV()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[9422-9936]:MethodDeclaration[9422-9936]"
    }, {
      "left" : "public RealMatrix getD()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getD()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[9942-10232]:MethodDeclaration[9942-10232]"
    }, {
      "left" : "public RealMatrix getVT()\n        throws InvalidMatrixException",
      "right" : "public RealMatrix getVT()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[10238-10754]:MethodDeclaration[10238-10754]"
    }, {
      "left" : "public double[] getRealEigenvalues()\n        throws InvalidMatrixException",
      "right" : "public double[] getRealEigenvalues()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[10760-10907]:MethodDeclaration[10760-10907]"
    }, {
      "left" : "public double getRealEigenvalue(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException",
      "right" : "public double getRealEigenvalue(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException",
      "info" : "MethodDeclaration[10913-11095]:MethodDeclaration[10913-11095]"
    }, {
      "left" : "public double[] getImagEigenvalues()\n        throws InvalidMatrixException",
      "right" : "public double[] getImagEigenvalues()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[11101-11248]:MethodDeclaration[11101-11248]"
    }, {
      "left" : "public double getImagEigenvalue(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException",
      "right" : "public double getImagEigenvalue(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException",
      "info" : "MethodDeclaration[11254-11436]:MethodDeclaration[11254-11436]"
    }, {
      "left" : "public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException",
      "right" : "public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException",
      "info" : "MethodDeclaration[11442-11707]:MethodDeclaration[11442-11707]"
    }, {
      "left" : "public double getDeterminant()",
      "right" : "public double getDeterminant()",
      "info" : "MethodDeclaration[11713-12005]:MethodDeclaration[11713-12005]"
    }, {
      "left" : "public DecompositionSolver getSolver()",
      "right" : "public DecompositionSolver getSolver()",
      "info" : "MethodDeclaration[12011-12235]:MethodDeclaration[12011-12235]"
    }, {
      "left" : "Solver",
      "right" : "Solver",
      "info" : "TypeDeclaration[12241-19461]:TypeDeclaration[12241-19461]"
    }, {
      "left" : "private double[] realEigenvalues;",
      "right" : "private double[] realEigenvalues;",
      "info" : "FieldDeclaration[12342-12424]:FieldDeclaration[12342-12424]"
    }, {
      "left" : "private double[] imagEigenvalues;",
      "right" : "private double[] imagEigenvalues;",
      "info" : "FieldDeclaration[12434-12521]:FieldDeclaration[12434-12521]"
    }, {
      "left" : "private final ArrayRealVector[] eigenvectors;",
      "right" : "private final ArrayRealVector[] eigenvectors;",
      "info" : "FieldDeclaration[12531-12605]:FieldDeclaration[12531-12605]"
    }, {
      "left" : "private Solver(final double[] realEigenvalues, final double[] imagEigenvalues,\n                       final ArrayRealVector[] eigenvectors)",
      "right" : "private Solver(final double[] realEigenvalues, final double[] imagEigenvalues,\n                       final ArrayRealVector[] eigenvectors)",
      "info" : "MethodDeclaration[12615-13170]:MethodDeclaration[12615-13170]"
    }, {
      "left" : "public double[] solve(final double[] b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public double[] solve(final double[] b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[13180-14642]:MethodDeclaration[13180-14642]"
    }, {
      "left" : "public RealVector solve(final RealVector b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public RealVector solve(final RealVector b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[14652-16162]:MethodDeclaration[14652-16162]"
    }, {
      "left" : "public RealMatrix solve(final RealMatrix b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public RealMatrix solve(final RealMatrix b)\n            throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[16172-18021]:MethodDeclaration[16172-18021]"
    }, {
      "left" : "public boolean isNonSingular()",
      "right" : "public boolean isNonSingular()",
      "info" : "MethodDeclaration[18031-18453]:MethodDeclaration[18031-18453]"
    }, {
      "left" : "public RealMatrix getInverse()\n            throws InvalidMatrixException",
      "right" : "public RealMatrix getInverse()\n            throws InvalidMatrixException",
      "info" : "MethodDeclaration[18463-19454]:MethodDeclaration[18463-19454]"
    }, {
      "left" : "private void transformToTridiagonal(final RealMatrix matrix)",
      "right" : "private void transformToTridiagonal(final RealMatrix matrix)",
      "info" : "MethodDeclaration[19467-20101]:MethodDeclaration[19467-20101]"
    }, {
      "left" : "private void computeGershgorinCircles()",
      "right" : "private void computeGershgorinCircles()",
      "info" : "MethodDeclaration[20107-21444]:MethodDeclaration[20107-21498]"
    }, {
      "left" : "private void findEigenvalues()\n        throws InvalidMatrixException",
      "right" : "private void findEigenvalues()\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[21450-24227]:MethodDeclaration[21504-24281]"
    }, {
      "left" : "private List<Integer> computeSplits()",
      "right" : "private List<Integer> computeSplits()",
      "info" : "MethodDeclaration[24233-25031]:MethodDeclaration[24287-25085]"
    }, {
      "left" : "private void process1RowBlock(final int index)",
      "right" : "private void process1RowBlock(final int index)",
      "info" : "MethodDeclaration[25037-25335]:MethodDeclaration[25091-25389]"
    }, {
      "left" : "private void process2RowsBlock(final int index)\n        throws InvalidMatrixException",
      "right" : "private void process2RowsBlock(final int index)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[25341-26371]:MethodDeclaration[25395-26425]"
    }, {
      "left" : "private void process3RowsBlock(final int index)\n        throws InvalidMatrixException",
      "right" : "private void process3RowsBlock(final int index)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[26377-28873]:MethodDeclaration[26431-28927]"
    }, {
      "left" : "private void processGeneralBlock(final int n)\n        throws InvalidMatrixException",
      "right" : "private void processGeneralBlock(final int n)\n        throws InvalidMatrixException",
      "info" : "MethodDeclaration[28879-33359]:MethodDeclaration[28933-33413]"
    }, {
      "left" : "private void initialSplits(final int n)",
      "right" : "private void initialSplits(final int n)",
      "info" : "MethodDeclaration[33365-35040]:MethodDeclaration[33419-35094]"
    }, {
      "left" : "private int goodStep(final int start, final int end)",
      "right" : "private int goodStep(final int start, final int end)",
      "info" : "MethodDeclaration[35046-40707]:MethodDeclaration[35100-40761]"
    }, {
      "left" : "private boolean flipIfWarranted(final int n, final int step)",
      "right" : "private boolean flipIfWarranted(final int n, final int step)",
      "info" : "MethodDeclaration[40713-41506]:MethodDeclaration[40767-41560]"
    }, {
      "left" : "private double[] eigenvaluesRange(final int index, final int n)",
      "right" : "private double[] eigenvaluesRange(final int index, final int n)",
      "info" : "MethodDeclaration[41512-44182]:MethodDeclaration[41566-44236]"
    }, {
      "left" : "private int countEigenValues(final double t, final int index, final int n)",
      "right" : "private int countEigenValues(final double t, final int index, final int n)",
      "info" : "MethodDeclaration[44188-44881]:MethodDeclaration[44242-44935]"
    }, {
      "left" : "private void ldlTDecomposition(final double lambda, final int index, final int n)",
      "right" : "private void ldlTDecomposition(final double lambda, final int index, final int n)",
      "info" : "MethodDeclaration[44887-45980]:MethodDeclaration[44941-46034]"
    }, {
      "left" : "private void dqds(final int start, final int end)",
      "right" : "private void dqds(final int start, final int end)",
      "info" : "MethodDeclaration[45986-47945]:MethodDeclaration[46040-47999]"
    }, {
      "left" : "private void dqd(final int start, final int end)",
      "right" : "private void dqd(final int start, final int end)",
      "info" : "MethodDeclaration[47952-51778]:MethodDeclaration[48006-51832]"
    }, {
      "left" : "private void computeShiftIncrement(final int start, final int end, final int deflated)",
      "right" : "private void computeShiftIncrement(final int start, final int end, final int deflated)",
      "info" : "MethodDeclaration[51784-61132]:MethodDeclaration[51838-61186]"
    }, {
      "left" : "private void updateSigma(final double shift)",
      "right" : "private void updateSigma(final double shift)",
      "info" : "MethodDeclaration[61138-61789]:MethodDeclaration[61192-61843]"
    }, {
      "left" : "private void findEigenVectors()",
      "right" : "private void findEigenVectors()",
      "info" : "MethodDeclaration[61795-62730]:MethodDeclaration[61849-62784]"
    }, {
      "left" : "private ArrayRealVector findEigenvector(final double eigenvalue,\n                                           final double[] d, final double[] l)",
      "right" : "private ArrayRealVector findEigenvector(final double eigenvalue,\n                                           final double[] d, final double[] l)",
      "info" : "MethodDeclaration[62736-64975]:MethodDeclaration[62790-65029]"
    }, {
      "left" : "private void stationaryQuotientDifferenceWithShift(final double[] d, final double[] l,\n                                                       final double lambda)",
      "right" : "private void stationaryQuotientDifferenceWithShift(final double[] d, final double[] l,\n                                                       final double lambda)",
      "info" : "MethodDeclaration[64981-66045]:MethodDeclaration[65035-66099]"
    }, {
      "left" : "private void progressiveQuotientDifferenceWithShift(final double[] d, final double[] l,\n                                                        final double lambda)",
      "right" : "private void progressiveQuotientDifferenceWithShift(final double[] d, final double[] l,\n                                                        final double lambda)",
      "info" : "MethodDeclaration[66051-67109]:MethodDeclaration[66105-67163]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6382-6846]:Block[6382-6846]"
    }, {
      "left" : "if (isSymmetric(matrix))",
      "right" : "if (isSymmetric(matrix))",
      "info" : "IfStatement[6392-6840]:IfStatement[6392-6840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6417-6547]:Block[6417-6547]"
    }, {
      "left" : "this.splitTolerance = splitTolerance;",
      "right" : "this.splitTolerance = splitTolerance;",
      "info" : "ExpressionStatement[6431-6468]:ExpressionStatement[6431-6468]"
    }, {
      "left" : "transformToTridiagonal(matrix);",
      "right" : "transformToTridiagonal(matrix);",
      "info" : "ExpressionStatement[6481-6512]:ExpressionStatement[6481-6512]"
    }, {
      "left" : "decompose();",
      "right" : "decompose();",
      "info" : "ExpressionStatement[6525-6537]:ExpressionStatement[6525-6537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6553-6840]:Block[6553-6840]"
    }, {
      "left" : "throw new InvalidMatrixException(\"eigen decomposition of assymetric matrices not supported yet\");",
      "right" : "throw new InvalidMatrixException(\"eigen decomposition of assymetric matrices not supported yet\");",
      "info" : "ThrowStatement[6733-6830]:ThrowStatement[6733-6830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7588-8028]:Block[7588-8028]"
    }, {
      "left" : "this.main      = main.clone();",
      "right" : "this.main      = main.clone();",
      "info" : "ExpressionStatement[7599-7629]:ExpressionStatement[7599-7629]"
    }, {
      "left" : "this.secondary = secondary.clone();",
      "right" : "this.secondary = secondary.clone();",
      "info" : "ExpressionStatement[7638-7673]:ExpressionStatement[7638-7673]"
    }, {
      "left" : "transformer    = null;",
      "right" : "transformer    = null;",
      "info" : "ExpressionStatement[7682-7704]:ExpressionStatement[7682-7704]"
    }, {
      "left" : "squaredSecondary = new double[secondary.length];",
      "right" : "squaredSecondary = new double[secondary.length];",
      "info" : "ExpressionStatement[7751-7799]:ExpressionStatement[7751-7799]"
    }, {
      "left" : "for (int i = 0; i < squaredSecondary.length; ++i)",
      "right" : "for (int i = 0; i < squaredSecondary.length; ++i)",
      "info" : "ForStatement[7808-7953]:ForStatement[7808-7953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7858-7953]:Block[7858-7953]"
    }, {
      "left" : "final double s = secondary[i];",
      "right" : "final double s = secondary[i];",
      "info" : "VariableDeclarationStatement[7872-7902]:VariableDeclarationStatement[7872-7902]"
    }, {
      "left" : "squaredSecondary[i] = s * s;",
      "right" : "squaredSecondary[i] = s * s;",
      "info" : "ExpressionStatement[7915-7943]:ExpressionStatement[7915-7943]"
    }, {
      "left" : "this.splitTolerance = splitTolerance;",
      "right" : "this.splitTolerance = splitTolerance;",
      "info" : "ExpressionStatement[7963-8000]:ExpressionStatement[7963-8000]"
    }, {
      "left" : "decompose();",
      "right" : "decompose();",
      "info" : "ExpressionStatement[8009-8021]:ExpressionStatement[8009-8021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8222-8807]:Block[8222-8807]"
    }, {
      "left" : "final int rows    = matrix.getRowDimension();",
      "right" : "final int rows    = matrix.getRowDimension();",
      "info" : "VariableDeclarationStatement[8232-8277]:VariableDeclarationStatement[8232-8277]"
    }, {
      "left" : "final int columns = matrix.getColumnDimension();",
      "right" : "final int columns = matrix.getColumnDimension();",
      "info" : "VariableDeclarationStatement[8286-8334]:VariableDeclarationStatement[8286-8334]"
    }, {
      "left" : "final double eps  = 10 * rows * columns * MathUtils.EPSILON;",
      "right" : "final double eps  = 10 * rows * columns * MathUtils.EPSILON;",
      "info" : "VariableDeclarationStatement[8343-8403]:VariableDeclarationStatement[8343-8403]"
    }, {
      "left" : "for (int i = 0; i < rows; ++i)",
      "right" : "for (int i = 0; i < rows; ++i)",
      "info" : "ForStatement[8412-8780]:ForStatement[8412-8780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8443-8780]:Block[8443-8780]"
    }, {
      "left" : "for (int j = i + 1; j < columns; ++j)",
      "right" : "for (int j = i + 1; j < columns; ++j)",
      "info" : "ForStatement[8457-8770]:ForStatement[8457-8770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8495-8770]:Block[8495-8770]"
    }, {
      "left" : "final double mij = matrix.getEntry(i, j);",
      "right" : "final double mij = matrix.getEntry(i, j);",
      "info" : "VariableDeclarationStatement[8513-8554]:VariableDeclarationStatement[8513-8554]"
    }, {
      "left" : "final double mji = matrix.getEntry(j, i);",
      "right" : "final double mji = matrix.getEntry(j, i);",
      "info" : "VariableDeclarationStatement[8571-8612]:VariableDeclarationStatement[8571-8612]"
    }, {
      "left" : "if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps))",
      "right" : "if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps))",
      "info" : "IfStatement[8629-8756]:IfStatement[8629-8756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8703-8756]:Block[8703-8756]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8725-8738]:ReturnStatement[8725-8738]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8789-8801]:ReturnStatement[8789-8801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9047-9416]:Block[9047-9416]"
    }, {
      "left" : "cachedV  = null;",
      "right" : "cachedV  = null;",
      "info" : "ExpressionStatement[9058-9074]:ExpressionStatement[9058-9074]"
    }, {
      "left" : "cachedD  = null;",
      "right" : "cachedD  = null;",
      "info" : "ExpressionStatement[9083-9099]:ExpressionStatement[9083-9099]"
    }, {
      "left" : "cachedVt = null;",
      "right" : "cachedVt = null;",
      "info" : "ExpressionStatement[9108-9124]:ExpressionStatement[9108-9124]"
    }, {
      "left" : "work     = new double[6 * main.length];",
      "right" : "work     = new double[6 * main.length];",
      "info" : "ExpressionStatement[9133-9172]:ExpressionStatement[9133-9172]"
    }, {
      "left" : "computeGershgorinCircles();",
      "right" : "computeGershgorinCircles();",
      "info" : "ExpressionStatement[9224-9251]:ExpressionStatement[9224-9251]"
    }, {
      "left" : "findEigenvalues();",
      "right" : "findEigenvalues();",
      "info" : "ExpressionStatement[9301-9319]:ExpressionStatement[9301-9319]"
    }, {
      "left" : "eigenvectors = null;",
      "right" : "eigenvectors = null;",
      "info" : "ExpressionStatement[9389-9409]:ExpressionStatement[9389-9409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9510-9936]:Block[9510-9936]"
    }, {
      "left" : "if (cachedV == null)",
      "right" : "if (cachedV == null)",
      "info" : "IfStatement[9521-9868]:IfStatement[9521-9868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9542-9868]:Block[9542-9868]"
    }, {
      "left" : "if (eigenvectors == null)",
      "right" : "if (eigenvectors == null)",
      "info" : "IfStatement[9557-9634]:IfStatement[9557-9634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9583-9634]:Block[9583-9634]"
    }, {
      "left" : "findEigenVectors();",
      "right" : "findEigenVectors();",
      "info" : "ExpressionStatement[9601-9620]:ExpressionStatement[9601-9620]"
    }, {
      "left" : "final int m = eigenvectors.length;",
      "right" : "final int m = eigenvectors.length;",
      "info" : "VariableDeclarationStatement[9648-9682]:VariableDeclarationStatement[9648-9682]"
    }, {
      "left" : "cachedV = MatrixUtils.createRealMatrix(m, m);",
      "right" : "cachedV = MatrixUtils.createRealMatrix(m, m);",
      "info" : "ExpressionStatement[9695-9740]:ExpressionStatement[9695-9740]"
    }, {
      "left" : "for (int k = 0; k < m; ++k)",
      "right" : "for (int k = 0; k < m; ++k)",
      "info" : "ForStatement[9753-9857]:ForStatement[9753-9857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9781-9857]:Block[9781-9857]"
    }, {
      "left" : "cachedV.setColumnVector(k, eigenvectors[k]);",
      "right" : "cachedV.setColumnVector(k, eigenvectors[k]);",
      "info" : "ExpressionStatement[9799-9843]:ExpressionStatement[9799-9843]"
    }, {
      "left" : "return cachedV;",
      "right" : "return cachedV;",
      "info" : "ReturnStatement[9914-9929]:ReturnStatement[9914-9929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10030-10232]:Block[10030-10232]"
    }, {
      "left" : "if (cachedD == null)",
      "right" : "if (cachedD == null)",
      "info" : "IfStatement[10040-10202]:IfStatement[10040-10202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10061-10202]:Block[10061-10202]"
    }, {
      "left" : "cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);",
      "right" : "cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);",
      "info" : "ExpressionStatement[10128-10192]:ExpressionStatement[10128-10192]"
    }, {
      "left" : "return cachedD;",
      "right" : "return cachedD;",
      "info" : "ReturnStatement[10211-10226]:ReturnStatement[10211-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10327-10754]:Block[10327-10754]"
    }, {
      "left" : "if (cachedVt == null)",
      "right" : "if (cachedVt == null)",
      "info" : "IfStatement[10338-10685]:IfStatement[10338-10685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10360-10685]:Block[10360-10685]"
    }, {
      "left" : "if (eigenvectors == null)",
      "right" : "if (eigenvectors == null)",
      "info" : "IfStatement[10375-10452]:IfStatement[10375-10452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10401-10452]:Block[10401-10452]"
    }, {
      "left" : "findEigenVectors();",
      "right" : "findEigenVectors();",
      "info" : "ExpressionStatement[10419-10438]:ExpressionStatement[10419-10438]"
    }, {
      "left" : "final int m = eigenvectors.length;",
      "right" : "final int m = eigenvectors.length;",
      "info" : "VariableDeclarationStatement[10466-10500]:VariableDeclarationStatement[10466-10500]"
    }, {
      "left" : "cachedVt = MatrixUtils.createRealMatrix(m, m);",
      "right" : "cachedVt = MatrixUtils.createRealMatrix(m, m);",
      "info" : "ExpressionStatement[10513-10559]:ExpressionStatement[10513-10559]"
    }, {
      "left" : "for (int k = 0; k < m; ++k)",
      "right" : "for (int k = 0; k < m; ++k)",
      "info" : "ForStatement[10572-10674]:ForStatement[10572-10674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10600-10674]:Block[10600-10674]"
    }, {
      "left" : "cachedVt.setRowVector(k, eigenvectors[k]);",
      "right" : "cachedVt.setRowVector(k, eigenvectors[k]);",
      "info" : "ExpressionStatement[10618-10660]:ExpressionStatement[10618-10660]"
    }, {
      "left" : "return cachedVt;",
      "right" : "return cachedVt;",
      "info" : "ReturnStatement[10731-10747]:ReturnStatement[10731-10747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10860-10907]:Block[10860-10907]"
    }, {
      "left" : "return realEigenvalues.clone();",
      "right" : "return realEigenvalues.clone();",
      "info" : "ReturnStatement[10870-10901]:ReturnStatement[10870-10901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11053-11095]:Block[11053-11095]"
    }, {
      "left" : "return realEigenvalues[i];",
      "right" : "return realEigenvalues[i];",
      "info" : "ReturnStatement[11063-11089]:ReturnStatement[11063-11089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11201-11248]:Block[11201-11248]"
    }, {
      "left" : "return imagEigenvalues.clone();",
      "right" : "return imagEigenvalues.clone();",
      "info" : "ReturnStatement[11211-11242]:ReturnStatement[11211-11242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11394-11436]:Block[11394-11436]"
    }, {
      "left" : "return imagEigenvalues[i];",
      "right" : "return imagEigenvalues[i];",
      "info" : "ReturnStatement[11404-11430]:ReturnStatement[11404-11430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11583-11707]:Block[11583-11707]"
    }, {
      "left" : "if (eigenvectors == null)",
      "right" : "if (eigenvectors == null)",
      "info" : "IfStatement[11593-11662]:IfStatement[11593-11662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-11662]:Block[11619-11662]"
    }, {
      "left" : "findEigenVectors();",
      "right" : "findEigenVectors();",
      "info" : "ExpressionStatement[11633-11652]:ExpressionStatement[11633-11652]"
    }, {
      "left" : "return eigenvectors[i].copy();",
      "right" : "return eigenvectors[i].copy();",
      "info" : "ReturnStatement[11671-11701]:ReturnStatement[11671-11701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11845-12005]:Block[11845-12005]"
    }, {
      "left" : "double determinant = 1;",
      "right" : "double determinant = 1;",
      "info" : "VariableDeclarationStatement[11855-11878]:VariableDeclarationStatement[11855-11878]"
    }, {
      "left" : "for (double lambda : realEigenvalues)",
      "right" : "for (double lambda : realEigenvalues)",
      "info" : "EnhancedForStatement[11887-11971]:EnhancedForStatement[11887-11971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11925-11971]:Block[11925-11971]"
    }, {
      "left" : "determinant *= lambda;",
      "right" : "determinant *= lambda;",
      "info" : "ExpressionStatement[11939-11961]:ExpressionStatement[11939-11961]"
    }, {
      "left" : "return determinant;",
      "right" : "return determinant;",
      "info" : "ReturnStatement[11980-11999]:ReturnStatement[11980-11999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12075-12235]:Block[12075-12235]"
    }, {
      "left" : "if (eigenvectors == null)",
      "right" : "if (eigenvectors == null)",
      "info" : "IfStatement[12085-12154]:IfStatement[12085-12154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12111-12154]:Block[12111-12154]"
    }, {
      "left" : "findEigenVectors();",
      "right" : "findEigenVectors();",
      "info" : "ExpressionStatement[12125-12144]:ExpressionStatement[12125-12144]"
    }, {
      "left" : "return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",
      "right" : "return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",
      "info" : "ReturnStatement[12163-12229]:ReturnStatement[12163-12229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13006-13170]:Block[13006-13170]"
    }, {
      "left" : "this.realEigenvalues = realEigenvalues;",
      "right" : "this.realEigenvalues = realEigenvalues;",
      "info" : "ExpressionStatement[13020-13059]:ExpressionStatement[13020-13059]"
    }, {
      "left" : "this.imagEigenvalues = imagEigenvalues;",
      "right" : "this.imagEigenvalues = imagEigenvalues;",
      "info" : "ExpressionStatement[13072-13111]:ExpressionStatement[13072-13111]"
    }, {
      "left" : "this.eigenvectors    = eigenvectors;",
      "right" : "this.eigenvectors    = eigenvectors;",
      "info" : "ExpressionStatement[13124-13160]:ExpressionStatement[13124-13160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13819-14642]:Block[13819-14642]"
    }, {
      "left" : "if (!isNonSingular())",
      "right" : "if (!isNonSingular())",
      "info" : "IfStatement[13834-13924]:IfStatement[13834-13924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13856-13924]:Block[13856-13924]"
    }, {
      "left" : "throw new SingularMatrixException();",
      "right" : "throw new SingularMatrixException();",
      "info" : "ThrowStatement[13874-13910]:ThrowStatement[13874-13910]"
    }, {
      "left" : "final int m = realEigenvalues.length;",
      "right" : "final int m = realEigenvalues.length;",
      "info" : "VariableDeclarationStatement[13938-13975]:VariableDeclarationStatement[13938-13975]"
    }, {
      "left" : "if (b.length != m)",
      "right" : "if (b.length != m)",
      "info" : "IfStatement[13988-14211]:IfStatement[13988-14211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14007-14211]:Block[14007-14211]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.length, m);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.length, m);",
      "info" : "ThrowStatement[14025-14197]:ThrowStatement[14025-14197]"
    }, {
      "left" : "final double[] bp = new double[m];",
      "right" : "final double[] bp = new double[m];",
      "info" : "VariableDeclarationStatement[14225-14259]:VariableDeclarationStatement[14225-14259]"
    }, {
      "left" : "for (int i = 0; i < m; ++i)",
      "right" : "for (int i = 0; i < m; ++i)",
      "info" : "ForStatement[14272-14607]:ForStatement[14272-14607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14300-14607]:Block[14300-14607]"
    }, {
      "left" : "final ArrayRealVector v = eigenvectors[i];",
      "right" : "final ArrayRealVector v = eigenvectors[i];",
      "info" : "VariableDeclarationStatement[14318-14360]:VariableDeclarationStatement[14318-14360]"
    }, {
      "left" : "final double[] vData = v.getDataRef();",
      "right" : "final double[] vData = v.getDataRef();",
      "info" : "VariableDeclarationStatement[14377-14415]:VariableDeclarationStatement[14377-14415]"
    }, {
      "left" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
      "right" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
      "info" : "VariableDeclarationStatement[14432-14486]:VariableDeclarationStatement[14432-14486]"
    }, {
      "left" : "for (int j = 0; j < m; ++j)",
      "right" : "for (int j = 0; j < m; ++j)",
      "info" : "ForStatement[14503-14593]:ForStatement[14503-14593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14531-14593]:Block[14531-14593]"
    }, {
      "left" : "bp[j] += s * vData[j];",
      "right" : "bp[j] += s * vData[j];",
      "info" : "ExpressionStatement[14553-14575]:ExpressionStatement[14553-14575]"
    }, {
      "left" : "return bp;",
      "right" : "return bp;",
      "info" : "ReturnStatement[14621-14631]:ReturnStatement[14621-14631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15295-16162]:Block[15295-16162]"
    }, {
      "left" : "if (!isNonSingular())",
      "right" : "if (!isNonSingular())",
      "info" : "IfStatement[15310-15400]:IfStatement[15310-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15332-15400]:Block[15332-15400]"
    }, {
      "left" : "throw new SingularMatrixException();",
      "right" : "throw new SingularMatrixException();",
      "info" : "ThrowStatement[15350-15386]:ThrowStatement[15350-15386]"
    }, {
      "left" : "final int m = realEigenvalues.length;",
      "right" : "final int m = realEigenvalues.length;",
      "info" : "VariableDeclarationStatement[15414-15451]:VariableDeclarationStatement[15414-15451]"
    }, {
      "left" : "if (b.getDimension() != m)",
      "right" : "if (b.getDimension() != m)",
      "info" : "IfStatement[15464-15703]:IfStatement[15464-15703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15491-15703]:Block[15491-15703]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.getDimension(), m);",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"vector length mismatch: got {0} but expected {1}\",\n                        b.getDimension(), m);",
      "info" : "ThrowStatement[15509-15689]:ThrowStatement[15509-15689]"
    }, {
      "left" : "final double[] bp = new double[m];",
      "right" : "final double[] bp = new double[m];",
      "info" : "VariableDeclarationStatement[15717-15751]:VariableDeclarationStatement[15717-15751]"
    }, {
      "left" : "for (int i = 0; i < m; ++i)",
      "right" : "for (int i = 0; i < m; ++i)",
      "info" : "ForStatement[15764-16099]:ForStatement[15764-16099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15792-16099]:Block[15792-16099]"
    }, {
      "left" : "final ArrayRealVector v = eigenvectors[i];",
      "right" : "final ArrayRealVector v = eigenvectors[i];",
      "info" : "VariableDeclarationStatement[15810-15852]:VariableDeclarationStatement[15810-15852]"
    }, {
      "left" : "final double[] vData = v.getDataRef();",
      "right" : "final double[] vData = v.getDataRef();",
      "info" : "VariableDeclarationStatement[15869-15907]:VariableDeclarationStatement[15869-15907]"
    }, {
      "left" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
      "right" : "final double s = v.dotProduct(b) / realEigenvalues[i];",
      "info" : "VariableDeclarationStatement[15924-15978]:VariableDeclarationStatement[15924-15978]"
    }, {
      "left" : "for (int j = 0; j < m; ++j)",
      "right" : "for (int j = 0; j < m; ++j)",
      "info" : "ForStatement[15995-16085]:ForStatement[15995-16085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16023-16085]:Block[16023-16085]"
    }, {
      "left" : "bp[j] += s * vData[j];",
      "right" : "bp[j] += s * vData[j];",
      "info" : "ExpressionStatement[16045-16067]:ExpressionStatement[16045-16067]"
    }, {
      "left" : "return new ArrayRealVector(bp, false);",
      "right" : "return new ArrayRealVector(bp, false);",
      "info" : "ReturnStatement[16113-16151]:ReturnStatement[16113-16151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16815-18021]:Block[16815-18021]"
    }, {
      "left" : "if (!isNonSingular())",
      "right" : "if (!isNonSingular())",
      "info" : "IfStatement[16830-16920]:IfStatement[16830-16920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16852-16920]:Block[16852-16920]"
    }, {
      "left" : "throw new SingularMatrixException();",
      "right" : "throw new SingularMatrixException();",
      "info" : "ThrowStatement[16870-16906]:ThrowStatement[16870-16906]"
    }, {
      "left" : "final int m = realEigenvalues.length;",
      "right" : "final int m = realEigenvalues.length;",
      "info" : "VariableDeclarationStatement[16934-16971]:VariableDeclarationStatement[16934-16971]"
    }, {
      "left" : "if (b.getRowDimension() != m)",
      "right" : "if (b.getRowDimension() != m)",
      "info" : "IfStatement[16984-17263]:IfStatement[16984-17263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17014-17263]:Block[17014-17263]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");",
      "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                        \"dimensions mismatch: got {0}x{1} but expected {2}x{3}\",\n                        b.getRowDimension(), b.getColumnDimension(), m, \"n\");",
      "info" : "ThrowStatement[17032-17249]:ThrowStatement[17032-17249]"
    }, {
      "left" : "final int nColB = b.getColumnDimension();",
      "right" : "final int nColB = b.getColumnDimension();",
      "info" : "VariableDeclarationStatement[17277-17318]:VariableDeclarationStatement[17277-17318]"
    }, {
      "left" : "final double[][] bp = new double[m][nColB];",
      "right" : "final double[][] bp = new double[m][nColB];",
      "info" : "VariableDeclarationStatement[17331-17374]:VariableDeclarationStatement[17331-17374]"
    }, {
      "left" : "for (int k = 0; k < nColB; ++k)",
      "right" : "for (int k = 0; k < nColB; ++k)",
      "info" : "ForStatement[17387-17956]:ForStatement[17387-17956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17419-17956]:Block[17419-17956]"
    }, {
      "left" : "for (int i = 0; i < m; ++i)",
      "right" : "for (int i = 0; i < m; ++i)",
      "info" : "ForStatement[17437-17942]:ForStatement[17437-17942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17465-17942]:Block[17465-17942]"
    }, {
      "left" : "final ArrayRealVector v = eigenvectors[i];",
      "right" : "final ArrayRealVector v = eigenvectors[i];",
      "info" : "VariableDeclarationStatement[17487-17529]:VariableDeclarationStatement[17487-17529]"
    }, {
      "left" : "final double[] vData = v.getDataRef();",
      "right" : "final double[] vData = v.getDataRef();",
      "info" : "VariableDeclarationStatement[17550-17588]:VariableDeclarationStatement[17550-17588]"
    }, {
      "left" : "double s = 0;",
      "right" : "double s = 0;",
      "info" : "VariableDeclarationStatement[17609-17622]:VariableDeclarationStatement[17609-17622]"
    }, {
      "left" : "for (int j = 0; j < m; ++j)",
      "right" : "for (int j = 0; j < m; ++j)",
      "info" : "ForStatement[17643-17757]:ForStatement[17643-17757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17671-17757]:Block[17671-17757]"
    }, {
      "left" : "s += v.getEntry(j) * b.getEntry(j, k);",
      "right" : "s += v.getEntry(j) * b.getEntry(j, k);",
      "info" : "ExpressionStatement[17697-17735]:ExpressionStatement[17697-17735]"
    }, {
      "left" : "s /= realEigenvalues[i];",
      "right" : "s /= realEigenvalues[i];",
      "info" : "ExpressionStatement[17778-17802]:ExpressionStatement[17778-17802]"
    }, {
      "left" : "for (int j = 0; j < m; ++j)",
      "right" : "for (int j = 0; j < m; ++j)",
      "info" : "ForStatement[17823-17924]:ForStatement[17823-17924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17851-17924]:Block[17851-17924]"
    }, {
      "left" : "bp[j][k] += s * vData[j];",
      "right" : "bp[j][k] += s * vData[j];",
      "info" : "ExpressionStatement[17877-17902]:ExpressionStatement[17877-17902]"
    }, {
      "left" : "return MatrixUtils.createRealMatrix(bp);",
      "right" : "return MatrixUtils.createRealMatrix(bp);",
      "info" : "ReturnStatement[17970-18010]:ReturnStatement[17970-18010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18210-18453]:Block[18210-18453]"
    }, {
      "left" : "for (int i = 0; i < realEigenvalues.length; ++i)",
      "right" : "for (int i = 0; i < realEigenvalues.length; ++i)",
      "info" : "ForStatement[18224-18418]:ForStatement[18224-18418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18273-18418]:Block[18273-18418]"
    }, {
      "left" : "if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0))",
      "right" : "if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0))",
      "info" : "IfStatement[18291-18404]:IfStatement[18291-18404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18351-18404]:Block[18351-18404]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18373-18386]:ReturnStatement[18373-18386]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18431-18443]:ReturnStatement[18431-18443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18711-19454]:Block[18711-19454]"
    }, {
      "left" : "if (!isNonSingular())",
      "right" : "if (!isNonSingular())",
      "info" : "IfStatement[18726-18816]:IfStatement[18726-18816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18748-18816]:Block[18748-18816]"
    }, {
      "left" : "throw new SingularMatrixException();",
      "right" : "throw new SingularMatrixException();",
      "info" : "ThrowStatement[18766-18802]:ThrowStatement[18766-18802]"
    }, {
      "left" : "final int m = realEigenvalues.length;",
      "right" : "final int m = realEigenvalues.length;",
      "info" : "VariableDeclarationStatement[18830-18867]:VariableDeclarationStatement[18830-18867]"
    }, {
      "left" : "final double[][] invData = new double[m][m];",
      "right" : "final double[][] invData = new double[m][m];",
      "info" : "VariableDeclarationStatement[18880-18924]:VariableDeclarationStatement[18880-18924]"
    }, {
      "left" : "for (int i = 0; i < m; ++i)",
      "right" : "for (int i = 0; i < m; ++i)",
      "info" : "ForStatement[18938-19385]:ForStatement[18938-19385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18966-19385]:Block[18966-19385]"
    }, {
      "left" : "final double[] invI = invData[i];",
      "right" : "final double[] invI = invData[i];",
      "info" : "VariableDeclarationStatement[18984-19017]:VariableDeclarationStatement[18984-19017]"
    }, {
      "left" : "for (int j = 0; j < m; ++j)",
      "right" : "for (int j = 0; j < m; ++j)",
      "info" : "ForStatement[19034-19371]:ForStatement[19034-19371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19062-19371]:Block[19062-19371]"
    }, {
      "left" : "double invIJ = 0;",
      "right" : "double invIJ = 0;",
      "info" : "VariableDeclarationStatement[19084-19101]:VariableDeclarationStatement[19084-19101]"
    }, {
      "left" : "for (int k = 0; k < m; ++k)",
      "right" : "for (int k = 0; k < m; ++k)",
      "info" : "ForStatement[19122-19316]:ForStatement[19122-19316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19150-19316]:Block[19150-19316]"
    }, {
      "left" : "final double[] vK = eigenvectors[k].getDataRef();",
      "right" : "final double[] vK = eigenvectors[k].getDataRef();",
      "info" : "VariableDeclarationStatement[19176-19225]:VariableDeclarationStatement[19176-19225]"
    }, {
      "left" : "invIJ += vK[i] * vK[j] / realEigenvalues[k];",
      "right" : "invIJ += vK[i] * vK[j] / realEigenvalues[k];",
      "info" : "ExpressionStatement[19250-19294]:ExpressionStatement[19250-19294]"
    }, {
      "left" : "invI[j] = invIJ;",
      "right" : "invI[j] = invIJ;",
      "info" : "ExpressionStatement[19337-19353]:ExpressionStatement[19337-19353]"
    }, {
      "left" : "return MatrixUtils.createRealMatrix(invData);",
      "right" : "return MatrixUtils.createRealMatrix(invData);",
      "info" : "ReturnStatement[19398-19443]:ReturnStatement[19398-19443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19625-20101]:Block[19625-20101]"
    }, {
      "left" : "transformer = new TriDiagonalTransformer(matrix);",
      "right" : "transformer = new TriDiagonalTransformer(matrix);",
      "info" : "ExpressionStatement[19683-19732]:ExpressionStatement[19683-19732]"
    }, {
      "left" : "main      = transformer.getMainDiagonalRef();",
      "right" : "main      = transformer.getMainDiagonalRef();",
      "info" : "ExpressionStatement[19741-19786]:ExpressionStatement[19741-19786]"
    }, {
      "left" : "secondary = transformer.getSecondaryDiagonalRef();",
      "right" : "secondary = transformer.getSecondaryDiagonalRef();",
      "info" : "ExpressionStatement[19795-19845]:ExpressionStatement[19795-19845]"
    }, {
      "left" : "squaredSecondary = new double[secondary.length];",
      "right" : "squaredSecondary = new double[secondary.length];",
      "info" : "ExpressionStatement[19892-19940]:ExpressionStatement[19892-19940]"
    }, {
      "left" : "for (int i = 0; i < squaredSecondary.length; ++i)",
      "right" : "for (int i = 0; i < squaredSecondary.length; ++i)",
      "info" : "ForStatement[19949-20094]:ForStatement[19949-20094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19999-20094]:Block[19999-20094]"
    }, {
      "left" : "final double s = secondary[i];",
      "right" : "final double s = secondary[i];",
      "info" : "VariableDeclarationStatement[20013-20043]:VariableDeclarationStatement[20013-20043]"
    }, {
      "left" : "squaredSecondary[i] = s * s;",
      "right" : "squaredSecondary[i] = s * s;",
      "info" : "ExpressionStatement[20056-20084]:ExpressionStatement[20056-20084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20215-21444]:Block[20215-21498]"
    }, {
      "left" : "final int m     = main.length;",
      "right" : "final int m     = main.length;",
      "info" : "VariableDeclarationStatement[20226-20256]:VariableDeclarationStatement[20226-20256]"
    }, {
      "left" : "final int lowerStart = 4 * m;",
      "right" : "final int lowerStart = 4 * m;",
      "info" : "VariableDeclarationStatement[20265-20294]:VariableDeclarationStatement[20265-20294]"
    }, {
      "left" : "final int upperStart = 5 * m;",
      "right" : "final int upperStart = 5 * m;",
      "info" : "VariableDeclarationStatement[20303-20332]:VariableDeclarationStatement[20303-20332]"
    }, {
      "left" : "lowerSpectra = Double.POSITIVE_INFINITY;",
      "right" : "lowerSpectra = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[20341-20381]:ExpressionStatement[20341-20381]"
    }, {
      "left" : "upperSpectra = Double.NEGATIVE_INFINITY;",
      "right" : "upperSpectra = Double.NEGATIVE_INFINITY;",
      "info" : "ExpressionStatement[20390-20430]:ExpressionStatement[20390-20430]"
    }, {
      "left" : "double eMax = 0;",
      "right" : "double eMax = 0;",
      "info" : "VariableDeclarationStatement[20439-20455]:VariableDeclarationStatement[20439-20455]"
    }, {
      "left" : "double eCurrent = 0;",
      "right" : "double eCurrent = 0;",
      "info" : "VariableDeclarationStatement[20465-20485]:VariableDeclarationStatement[20465-20485]"
    }, {
      "left" : "for (int i = 0; i < m - 1; ++i)",
      "right" : "for (int i = 0; i < m - 1; ++i)",
      "info" : "ForStatement[20494-21085]:ForStatement[20494-21085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20526-21085]:Block[20526-21085]"
    }, {
      "left" : "final double dCurrent = main[i];",
      "right" : "final double dCurrent = main[i];",
      "info" : "VariableDeclarationStatement[20541-20573]:VariableDeclarationStatement[20541-20573]"
    }, {
      "left" : "final double ePrevious = eCurrent;",
      "right" : "final double ePrevious = eCurrent;",
      "info" : "VariableDeclarationStatement[20586-20620]:VariableDeclarationStatement[20586-20620]"
    }, {
      "left" : "eCurrent = Math.abs(secondary[i]);",
      "right" : "eCurrent = Math.abs(secondary[i]);",
      "info" : "ExpressionStatement[20633-20667]:ExpressionStatement[20633-20667]"
    }, {
      "left" : "eMax = Math.max(eMax, eCurrent);",
      "right" : "eMax = Math.max(eMax, eCurrent);",
      "info" : "ExpressionStatement[20680-20712]:ExpressionStatement[20680-20712]"
    }, {
      "left" : "final double radius = ePrevious + eCurrent;",
      "right" : "final double radius = ePrevious + eCurrent;",
      "info" : "VariableDeclarationStatement[20725-20768]:VariableDeclarationStatement[20725-20768]"
    }, {
      "left" : "final double lower = dCurrent - radius;",
      "right" : "final double lower = dCurrent - radius;",
      "info" : "VariableDeclarationStatement[20782-20821]:VariableDeclarationStatement[20782-20821]"
    }, {
      "left" : "work[lowerStart + i] = lower;",
      "right" : "work[lowerStart + i] = lower;",
      "info" : "ExpressionStatement[20834-20863]:ExpressionStatement[20834-20863]"
    }, {
      "left" : "lowerSpectra = Math.min(lowerSpectra, lower);",
      "right" : "lowerSpectra = Math.min(lowerSpectra, lower);",
      "info" : "ExpressionStatement[20876-20921]:ExpressionStatement[20876-20921]"
    }, {
      "left" : "final double upper = dCurrent + radius;",
      "right" : "final double upper = dCurrent + radius;",
      "info" : "VariableDeclarationStatement[20935-20974]:VariableDeclarationStatement[20935-20974]"
    }, {
      "left" : "work[upperStart + i] = upper;",
      "right" : "work[upperStart + i] = upper;",
      "info" : "ExpressionStatement[20987-21016]:ExpressionStatement[20987-21016]"
    }, {
      "left" : "upperSpectra = Math.max(upperSpectra, upper);",
      "right" : "upperSpectra = Math.max(upperSpectra, upper);",
      "info" : "ExpressionStatement[21029-21074]:ExpressionStatement[21029-21074]"
    }, {
      "left" : "final double dCurrent = main[m - 1];",
      "right" : "final double dCurrent = main[m - 1];",
      "info" : "VariableDeclarationStatement[21095-21131]:VariableDeclarationStatement[21095-21131]"
    }, {
      "left" : "final double lower = dCurrent - eCurrent;",
      "right" : "final double lower = dCurrent - eCurrent;",
      "info" : "VariableDeclarationStatement[21140-21181]:VariableDeclarationStatement[21140-21181]"
    }, {
      "left" : "work[lowerStart + m - 1] = lower;",
      "right" : "work[lowerStart + m - 1] = lower;",
      "info" : "ExpressionStatement[21190-21223]:ExpressionStatement[21190-21223]"
    }, {
      "left" : "lowerSpectra = Math.min(lowerSpectra, lower);",
      "right" : "lowerSpectra = Math.min(lowerSpectra, lower);",
      "info" : "ExpressionStatement[21232-21277]:ExpressionStatement[21232-21277]"
    }, {
      "left" : "final double upper = dCurrent + eCurrent;",
      "right" : "final double upper = dCurrent + eCurrent;",
      "info" : "VariableDeclarationStatement[21286-21327]:VariableDeclarationStatement[21286-21327]"
    }, {
      "left" : "work[upperStart + m - 1] = upper;",
      "right" : "work[upperStart + m - 1] = upper;",
      "info" : "ExpressionStatement[21336-21369]:ExpressionStatement[21336-21369]"
    }, {
      "left" : "minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",
      "right" : "minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",
      "info" : "ExpressionStatement[21378-21437]:ExpressionStatement[21432-21491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21643-24227]:Block[21697-24281]"
    }, {
      "left" : "List<Integer> splitIndices = computeSplits();",
      "right" : "List<Integer> splitIndices = computeSplits();",
      "info" : "VariableDeclarationStatement[21690-21735]:VariableDeclarationStatement[21744-21789]"
    }, {
      "left" : "realEigenvalues = new double[main.length];",
      "right" : "realEigenvalues = new double[main.length];",
      "info" : "ExpressionStatement[21791-21833]:ExpressionStatement[21845-21887]"
    }, {
      "left" : "imagEigenvalues = new double[main.length];",
      "right" : "imagEigenvalues = new double[main.length];",
      "info" : "ExpressionStatement[21842-21884]:ExpressionStatement[21896-21938]"
    }, {
      "left" : "int begin = 0;",
      "right" : "int begin = 0;",
      "info" : "VariableDeclarationStatement[21893-21907]:VariableDeclarationStatement[21947-21961]"
    }, {
      "left" : "for (final int end : splitIndices)",
      "right" : "for (final int end : splitIndices)",
      "info" : "EnhancedForStatement[21916-23874]:EnhancedForStatement[21970-23928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21951-23874]:Block[22005-23928]"
    }, {
      "left" : "final int n = end - begin;",
      "right" : "final int n = end - begin;",
      "info" : "VariableDeclarationStatement[21965-21991]:VariableDeclarationStatement[22019-22045]"
    }, {
      "left" : "switch (n) {\n\n            case 1:\n                // apply dedicated method for dimension 1\n                process1RowBlock(begin);\n                break;\n\n            case 2:\n                // apply dedicated method for dimension 2\n                process2RowsBlock(begin);\n                break;\n\n            case 3:\n                // apply dedicated method for dimension 3\n                process3RowsBlock(begin);\n                break;\n\n            default:\n\n                // choose an initial shift for LDL<sup>T</sup> decomposition\n                final double[] range       = eigenvaluesRange(begin, n);\n                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);\n                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);\n                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);\n                final int threeFourthCount = countEigenValues(threeFourth, begin, n);\n                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);\n                final double lambda        = chooseLeft ? range[0] : range[1];\n\n                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;\n\n                // decompose T-&lambda;I as LDL<sup>T</sup>\n                ldlTDecomposition(lambda, begin, n);\n\n                // apply general dqd/dqds method\n                processGeneralBlock(n);\n\n                // extract realEigenvalues\n                if (chooseLeft) {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda + work[4 * i];\n                    }\n                } else {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda - work[4 * i];\n                    }\n                }\n\n            }",
      "right" : "switch (n) {\n\n            case 1:\n                // apply dedicated method for dimension 1\n                process1RowBlock(begin);\n                break;\n\n            case 2:\n                // apply dedicated method for dimension 2\n                process2RowsBlock(begin);\n                break;\n\n            case 3:\n                // apply dedicated method for dimension 3\n                process3RowsBlock(begin);\n                break;\n\n            default:\n\n                // choose an initial shift for LDL<sup>T</sup> decomposition\n                final double[] range       = eigenvaluesRange(begin, n);\n                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);\n                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);\n                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);\n                final int threeFourthCount = countEigenValues(threeFourth, begin, n);\n                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);\n                final double lambda        = chooseLeft ? range[0] : range[1];\n\n                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;\n\n                // decompose T-&lambda;I as LDL<sup>T</sup>\n                ldlTDecomposition(lambda, begin, n);\n\n                // apply general dqd/dqds method\n                processGeneralBlock(n);\n\n                // extract realEigenvalues\n                if (chooseLeft) {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda + work[4 * i];\n                    }\n                } else {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda - work[4 * i];\n                    }\n                }\n\n            }",
      "info" : "SwitchStatement[22004-23839]:SwitchStatement[22058-23893]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[22030-22037]:SwitchCase[22084-22091]"
    }, {
      "left" : "process1RowBlock(begin);",
      "right" : "process1RowBlock(begin);",
      "info" : "ExpressionStatement[22112-22136]:ExpressionStatement[22166-22190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22153-22159]:BreakStatement[22207-22213]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[22173-22180]:SwitchCase[22227-22234]"
    }, {
      "left" : "process2RowsBlock(begin);",
      "right" : "process2RowsBlock(begin);",
      "info" : "ExpressionStatement[22255-22280]:ExpressionStatement[22309-22334]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22297-22303]:BreakStatement[22351-22357]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[22317-22324]:SwitchCase[22371-22378]"
    }, {
      "left" : "process3RowsBlock(begin);",
      "right" : "process3RowsBlock(begin);",
      "info" : "ExpressionStatement[22399-22424]:ExpressionStatement[22453-22478]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22441-22447]:BreakStatement[22495-22501]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22461-22469]:SwitchCase[22515-22523]"
    }, {
      "left" : "final double[] range       = eigenvaluesRange(begin, n);",
      "right" : "final double[] range       = eigenvaluesRange(begin, n);",
      "info" : "VariableDeclarationStatement[22564-22620]:VariableDeclarationStatement[22618-22674]"
    }, {
      "left" : "final double oneFourth     = 0.25 * (3 * range[0] + range[1]);",
      "right" : "final double oneFourth     = 0.25 * (3 * range[0] + range[1]);",
      "info" : "VariableDeclarationStatement[22637-22699]:VariableDeclarationStatement[22691-22753]"
    }, {
      "left" : "final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",
      "right" : "final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",
      "info" : "VariableDeclarationStatement[22716-22783]:VariableDeclarationStatement[22770-22837]"
    }, {
      "left" : "final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);",
      "right" : "final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);",
      "info" : "VariableDeclarationStatement[22800-22862]:VariableDeclarationStatement[22854-22916]"
    }, {
      "left" : "final int threeFourthCount = countEigenValues(threeFourth, begin, n);",
      "right" : "final int threeFourthCount = countEigenValues(threeFourth, begin, n);",
      "info" : "VariableDeclarationStatement[22879-22948]:VariableDeclarationStatement[22933-23002]"
    }, {
      "left" : "final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);",
      "right" : "final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);",
      "info" : "VariableDeclarationStatement[22965-23041]:VariableDeclarationStatement[23019-23095]"
    }, {
      "left" : "final double lambda        = chooseLeft ? range[0] : range[1];",
      "right" : "final double lambda        = chooseLeft ? range[0] : range[1];",
      "info" : "VariableDeclarationStatement[23058-23120]:VariableDeclarationStatement[23112-23174]"
    }, {
      "left" : "tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;",
      "right" : "tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;",
      "info" : "ExpressionStatement[23138-23205]:ExpressionStatement[23192-23259]"
    }, {
      "left" : "ldlTDecomposition(lambda, begin, n);",
      "right" : "ldlTDecomposition(lambda, begin, n);",
      "info" : "ExpressionStatement[23283-23319]:ExpressionStatement[23337-23373]"
    }, {
      "left" : "processGeneralBlock(n);",
      "right" : "processGeneralBlock(n);",
      "info" : "ExpressionStatement[23386-23409]:ExpressionStatement[23440-23463]"
    }, {
      "left" : "if (chooseLeft)",
      "right" : "if (chooseLeft)",
      "info" : "IfStatement[23470-23824]:IfStatement[23524-23878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23486-23652]:Block[23540-23706]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[23508-23634]:ForStatement[23562-23688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23536-23634]:Block[23590-23688]"
    }, {
      "left" : "realEigenvalues[begin + i] = lambda + work[4 * i];",
      "right" : "realEigenvalues[begin + i] = lambda + work[4 * i];",
      "info" : "ExpressionStatement[23562-23612]:ExpressionStatement[23616-23666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23658-23824]:Block[23712-23878]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[23680-23806]:ForStatement[23734-23860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23708-23806]:Block[23762-23860]"
    }, {
      "left" : "realEigenvalues[begin + i] = lambda - work[4 * i];",
      "right" : "realEigenvalues[begin + i] = lambda - work[4 * i];",
      "info" : "ExpressionStatement[23734-23784]:ExpressionStatement[23788-23838]"
    }, {
      "left" : "begin = end;",
      "right" : "begin = end;",
      "info" : "ExpressionStatement[23852-23864]:ExpressionStatement[23906-23918]"
    }, {
      "left" : "Arrays.sort(realEigenvalues);",
      "right" : "Arrays.sort(realEigenvalues);",
      "info" : "ExpressionStatement[23940-23969]:ExpressionStatement[23994-24023]"
    }, {
      "left" : "int j = realEigenvalues.length - 1;",
      "right" : "int j = realEigenvalues.length - 1;",
      "info" : "VariableDeclarationStatement[23978-24013]:VariableDeclarationStatement[24032-24067]"
    }, {
      "left" : "for (int i = 0; i < j; ++i)",
      "right" : "for (int i = 0; i < j; ++i)",
      "info" : "ForStatement[24022-24220]:ForStatement[24076-24274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24050-24220]:Block[24104-24274]"
    }, {
      "left" : "final double tmp = realEigenvalues[i];",
      "right" : "final double tmp = realEigenvalues[i];",
      "info" : "VariableDeclarationStatement[24064-24102]:VariableDeclarationStatement[24118-24156]"
    }, {
      "left" : "realEigenvalues[i] = realEigenvalues[j];",
      "right" : "realEigenvalues[i] = realEigenvalues[j];",
      "info" : "ExpressionStatement[24115-24155]:ExpressionStatement[24169-24209]"
    }, {
      "left" : "realEigenvalues[j] = tmp;",
      "right" : "realEigenvalues[j] = tmp;",
      "info" : "ExpressionStatement[24168-24193]:ExpressionStatement[24222-24247]"
    }, {
      "left" : "--j;",
      "right" : "--j;",
      "info" : "ExpressionStatement[24206-24210]:ExpressionStatement[24260-24264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24377-25031]:Block[24431-25085]"
    }, {
      "left" : "final List<Integer> list = new ArrayList<Integer>();",
      "right" : "final List<Integer> list = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[24388-24440]:VariableDeclarationStatement[24442-24494]"
    }, {
      "left" : "double absDCurrent = Math.abs(main[0]);",
      "right" : "double absDCurrent = Math.abs(main[0]);",
      "info" : "VariableDeclarationStatement[24500-24539]:VariableDeclarationStatement[24554-24593]"
    }, {
      "left" : "for (int i = 0; i < secondary.length; ++i)",
      "right" : "for (int i = 0; i < secondary.length; ++i)",
      "info" : "ForStatement[24548-24962]:ForStatement[24602-25016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24591-24962]:Block[24645-25016]"
    }, {
      "left" : "final double absDPrevious = absDCurrent;",
      "right" : "final double absDPrevious = absDCurrent;",
      "info" : "VariableDeclarationStatement[24605-24645]:VariableDeclarationStatement[24659-24699]"
    }, {
      "left" : "absDCurrent = Math.abs(main[i + 1]);",
      "right" : "absDCurrent = Math.abs(main[i + 1]);",
      "info" : "ExpressionStatement[24658-24694]:ExpressionStatement[24712-24748]"
    }, {
      "left" : "final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);",
      "right" : "final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);",
      "info" : "VariableDeclarationStatement[24707-24781]:VariableDeclarationStatement[24761-24835]"
    }, {
      "left" : "if (Math.abs(secondary[i]) <= max)",
      "right" : "if (Math.abs(secondary[i]) <= max)",
      "info" : "IfStatement[24794-24952]:IfStatement[24848-25006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24829-24952]:Block[24883-25006]"
    }, {
      "left" : "list.add(i + 1);",
      "right" : "list.add(i + 1);",
      "info" : "ExpressionStatement[24847-24863]:ExpressionStatement[24901-24917]"
    }, {
      "left" : "secondary[i] = 0;",
      "right" : "secondary[i] = 0;",
      "info" : "ExpressionStatement[24880-24897]:ExpressionStatement[24934-24951]"
    }, {
      "left" : "squaredSecondary[i] = 0;",
      "right" : "squaredSecondary[i] = 0;",
      "info" : "ExpressionStatement[24914-24938]:ExpressionStatement[24968-24992]"
    }, {
      "left" : "list.add(secondary.length + 1);",
      "right" : "list.add(secondary.length + 1);",
      "info" : "ExpressionStatement[24972-25003]:ExpressionStatement[25026-25057]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[25012-25024]:ReturnStatement[25066-25078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25282-25335]:Block[25336-25389]"
    }, {
      "left" : "realEigenvalues[index] = main[index];",
      "right" : "realEigenvalues[index] = main[index];",
      "info" : "ExpressionStatement[25292-25329]:ExpressionStatement[25346-25383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25718-26371]:Block[25772-26425]"
    }, {
      "left" : "final double q0   = main[index];",
      "right" : "final double q0   = main[index];",
      "info" : "VariableDeclarationStatement[25817-25849]:VariableDeclarationStatement[25871-25903]"
    }, {
      "left" : "final double q1   = main[index + 1];",
      "right" : "final double q1   = main[index + 1];",
      "info" : "VariableDeclarationStatement[25858-25894]:VariableDeclarationStatement[25912-25948]"
    }, {
      "left" : "final double e12  = squaredSecondary[index];",
      "right" : "final double e12  = squaredSecondary[index];",
      "info" : "VariableDeclarationStatement[25903-25947]:VariableDeclarationStatement[25957-26001]"
    }, {
      "left" : "final double s     = q0 + q1;",
      "right" : "final double s     = q0 + q1;",
      "info" : "VariableDeclarationStatement[25957-25986]:VariableDeclarationStatement[26011-26040]"
    }, {
      "left" : "final double p     = q0 * q1 - e12;",
      "right" : "final double p     = q0 * q1 - e12;",
      "info" : "VariableDeclarationStatement[25995-26030]:VariableDeclarationStatement[26049-26084]"
    }, {
      "left" : "final double delta = s * s - 4 * p;",
      "right" : "final double delta = s * s - 4 * p;",
      "info" : "VariableDeclarationStatement[26039-26074]:VariableDeclarationStatement[26093-26128]"
    }, {
      "left" : "if (delta < 0)",
      "right" : "if (delta < 0)",
      "info" : "IfStatement[26083-26194]:IfStatement[26137-26248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26098-26194]:Block[26152-26248]"
    }, {
      "left" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 2);",
      "right" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 2);",
      "info" : "ThrowStatement[26112-26184]:ThrowStatement[26166-26238]"
    }, {
      "left" : "final double largestRoot = 0.5 * (s + Math.sqrt(delta));",
      "right" : "final double largestRoot = 0.5 * (s + Math.sqrt(delta));",
      "info" : "VariableDeclarationStatement[26204-26260]:VariableDeclarationStatement[26258-26314]"
    }, {
      "left" : "realEigenvalues[index]     = largestRoot;",
      "right" : "realEigenvalues[index]     = largestRoot;",
      "info" : "ExpressionStatement[26269-26310]:ExpressionStatement[26323-26364]"
    }, {
      "left" : "realEigenvalues[index + 1] = p / largestRoot;",
      "right" : "realEigenvalues[index + 1] = p / largestRoot;",
      "info" : "ExpressionStatement[26319-26364]:ExpressionStatement[26373-26418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26746-28873]:Block[26800-28927]"
    }, {
      "left" : "final double q0       = main[index];",
      "right" : "final double q0       = main[index];",
      "info" : "VariableDeclarationStatement[26910-26946]:VariableDeclarationStatement[26964-27000]"
    }, {
      "left" : "final double q1       = main[index + 1];",
      "right" : "final double q1       = main[index + 1];",
      "info" : "VariableDeclarationStatement[26955-26995]:VariableDeclarationStatement[27009-27049]"
    }, {
      "left" : "final double q2       = main[index + 2];",
      "right" : "final double q2       = main[index + 2];",
      "info" : "VariableDeclarationStatement[27004-27044]:VariableDeclarationStatement[27058-27098]"
    }, {
      "left" : "final double e12      = squaredSecondary[index];",
      "right" : "final double e12      = squaredSecondary[index];",
      "info" : "VariableDeclarationStatement[27053-27101]:VariableDeclarationStatement[27107-27155]"
    }, {
      "left" : "final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];",
      "right" : "final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];",
      "info" : "VariableDeclarationStatement[27110-27172]:VariableDeclarationStatement[27164-27226]"
    }, {
      "left" : "final double b        = -(q0 + q1 + q2);",
      "right" : "final double b        = -(q0 + q1 + q2);",
      "info" : "VariableDeclarationStatement[27266-27306]:VariableDeclarationStatement[27320-27360]"
    }, {
      "left" : "final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;",
      "right" : "final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;",
      "info" : "VariableDeclarationStatement[27315-27374]:VariableDeclarationStatement[27369-27428]"
    }, {
      "left" : "final double d        = q2 * e12 - q0 * q1q2Me22;",
      "right" : "final double d        = q2 * e12 - q0 * q1q2Me22;",
      "info" : "VariableDeclarationStatement[27383-27432]:VariableDeclarationStatement[27437-27486]"
    }, {
      "left" : "final double b2       = b * b;",
      "right" : "final double b2       = b * b;",
      "info" : "VariableDeclarationStatement[27474-27504]:VariableDeclarationStatement[27528-27558]"
    }, {
      "left" : "final double q        = (3 * c - b2) / 9;",
      "right" : "final double q        = (3 * c - b2) / 9;",
      "info" : "VariableDeclarationStatement[27513-27554]:VariableDeclarationStatement[27567-27608]"
    }, {
      "left" : "final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;",
      "right" : "final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;",
      "info" : "VariableDeclarationStatement[27563-27624]:VariableDeclarationStatement[27617-27678]"
    }, {
      "left" : "final double delta    = q * q * q + r * r;",
      "right" : "final double delta    = q * q * q + r * r;",
      "info" : "VariableDeclarationStatement[27633-27675]:VariableDeclarationStatement[27687-27729]"
    }, {
      "left" : "if (delta >= 0)",
      "right" : "if (delta >= 0)",
      "info" : "IfStatement[27684-28037]:IfStatement[27738-28091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27700-28037]:Block[27754-28091]"
    }, {
      "left" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 3);",
      "right" : "throw new InvalidMatrixException(\"cannot solve degree {0} equation\", 3);",
      "info" : "ThrowStatement[27955-28027]:ThrowStatement[28009-28081]"
    }, {
      "left" : "final double sqrtMq = Math.sqrt(-q);",
      "right" : "final double sqrtMq = Math.sqrt(-q);",
      "info" : "VariableDeclarationStatement[28046-28082]:VariableDeclarationStatement[28100-28136]"
    }, {
      "left" : "final double theta  = Math.acos(r / (-q * sqrtMq));",
      "right" : "final double theta  = Math.acos(r / (-q * sqrtMq));",
      "info" : "VariableDeclarationStatement[28091-28142]:VariableDeclarationStatement[28145-28196]"
    }, {
      "left" : "final double alpha  = 2 * sqrtMq;",
      "right" : "final double alpha  = 2 * sqrtMq;",
      "info" : "VariableDeclarationStatement[28151-28184]:VariableDeclarationStatement[28205-28238]"
    }, {
      "left" : "final double beta   = b / 3;",
      "right" : "final double beta   = b / 3;",
      "info" : "VariableDeclarationStatement[28193-28221]:VariableDeclarationStatement[28247-28275]"
    }, {
      "left" : "double z0 = alpha * Math.cos(theta / 3) - beta;",
      "right" : "double z0 = alpha * Math.cos(theta / 3) - beta;",
      "info" : "VariableDeclarationStatement[28231-28278]:VariableDeclarationStatement[28285-28332]"
    }, {
      "left" : "double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;",
      "right" : "double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;",
      "info" : "VariableDeclarationStatement[28287-28350]:VariableDeclarationStatement[28341-28404]"
    }, {
      "left" : "double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;",
      "right" : "double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;",
      "info" : "VariableDeclarationStatement[28359-28422]:VariableDeclarationStatement[28413-28476]"
    }, {
      "left" : "if (z0 < z1)",
      "right" : "if (z0 < z1)",
      "info" : "IfStatement[28431-28529]:IfStatement[28485-28583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28444-28529]:Block[28498-28583]"
    }, {
      "left" : "final double t = z0;",
      "right" : "final double t = z0;",
      "info" : "VariableDeclarationStatement[28458-28478]:VariableDeclarationStatement[28512-28532]"
    }, {
      "left" : "z0 = z1;",
      "right" : "z0 = z1;",
      "info" : "ExpressionStatement[28491-28499]:ExpressionStatement[28545-28553]"
    }, {
      "left" : "z1 = t;",
      "right" : "z1 = t;",
      "info" : "ExpressionStatement[28512-28519]:ExpressionStatement[28566-28573]"
    }, {
      "left" : "if (z1 < z2)",
      "right" : "if (z1 < z2)",
      "info" : "IfStatement[28538-28636]:IfStatement[28592-28690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28551-28636]:Block[28605-28690]"
    }, {
      "left" : "final double t = z1;",
      "right" : "final double t = z1;",
      "info" : "VariableDeclarationStatement[28565-28585]:VariableDeclarationStatement[28619-28639]"
    }, {
      "left" : "z1 = z2;",
      "right" : "z1 = z2;",
      "info" : "ExpressionStatement[28598-28606]:ExpressionStatement[28652-28660]"
    }, {
      "left" : "z2 = t;",
      "right" : "z2 = t;",
      "info" : "ExpressionStatement[28619-28626]:ExpressionStatement[28673-28680]"
    }, {
      "left" : "if (z0 < z1)",
      "right" : "if (z0 < z1)",
      "info" : "IfStatement[28645-28743]:IfStatement[28699-28797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28658-28743]:Block[28712-28797]"
    }, {
      "left" : "final double t = z0;",
      "right" : "final double t = z0;",
      "info" : "VariableDeclarationStatement[28672-28692]:VariableDeclarationStatement[28726-28746]"
    }, {
      "left" : "z0 = z1;",
      "right" : "z0 = z1;",
      "info" : "ExpressionStatement[28705-28713]:ExpressionStatement[28759-28767]"
    }, {
      "left" : "z1 = t;",
      "right" : "z1 = t;",
      "info" : "ExpressionStatement[28726-28733]:ExpressionStatement[28780-28787]"
    }, {
      "left" : "realEigenvalues[index]     = z0;",
      "right" : "realEigenvalues[index]     = z0;",
      "info" : "ExpressionStatement[28752-28784]:ExpressionStatement[28806-28838]"
    }, {
      "left" : "realEigenvalues[index + 1] = z1;",
      "right" : "realEigenvalues[index + 1] = z1;",
      "info" : "ExpressionStatement[28793-28825]:ExpressionStatement[28847-28879]"
    }, {
      "left" : "realEigenvalues[index + 2] = z2;",
      "right" : "realEigenvalues[index + 2] = z2;",
      "info" : "ExpressionStatement[28834-28866]:ExpressionStatement[28888-28920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29471-33359]:Block[29525-33413]"
    }, {
      "left" : "double sumOffDiag = 0;",
      "right" : "double sumOffDiag = 0;",
      "info" : "VariableDeclarationStatement[29528-29550]:VariableDeclarationStatement[29582-29604]"
    }, {
      "left" : "for (int i = 0; i < n - 1; ++i)",
      "right" : "for (int i = 0; i < n - 1; ++i)",
      "info" : "ForStatement[29559-29716]:ForStatement[29613-29770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29591-29716]:Block[29645-29770]"
    }, {
      "left" : "final int fourI = 4 * i;",
      "right" : "final int fourI = 4 * i;",
      "info" : "VariableDeclarationStatement[29605-29629]:VariableDeclarationStatement[29659-29683]"
    }, {
      "left" : "final double ei = work[fourI + 2];",
      "right" : "final double ei = work[fourI + 2];",
      "info" : "VariableDeclarationStatement[29642-29676]:VariableDeclarationStatement[29696-29730]"
    }, {
      "left" : "sumOffDiag += ei;",
      "right" : "sumOffDiag += ei;",
      "info" : "ExpressionStatement[29689-29706]:ExpressionStatement[29743-29760]"
    }, {
      "left" : "if (sumOffDiag == 0)",
      "right" : "if (sumOffDiag == 0)",
      "info" : "IfStatement[29726-29820]:IfStatement[29780-29874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29747-29820]:Block[29801-29874]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29803-29810]:ReturnStatement[29857-29864]"
    }, {
      "left" : "flipIfWarranted(n, 2);",
      "right" : "flipIfWarranted(n, 2);",
      "info" : "ExpressionStatement[29903-29925]:ExpressionStatement[29957-29979]"
    }, {
      "left" : "initialSplits(n);",
      "right" : "initialSplits(n);",
      "info" : "ExpressionStatement[29995-30012]:ExpressionStatement[30049-30066]"
    }, {
      "left" : "tType = 0;",
      "right" : "tType = 0;",
      "info" : "ExpressionStatement[30072-30082]:ExpressionStatement[30126-30136]"
    }, {
      "left" : "dMin1 = 0;",
      "right" : "dMin1 = 0;",
      "info" : "ExpressionStatement[30091-30101]:ExpressionStatement[30145-30155]"
    }, {
      "left" : "dMin2 = 0;",
      "right" : "dMin2 = 0;",
      "info" : "ExpressionStatement[30110-30120]:ExpressionStatement[30164-30174]"
    }, {
      "left" : "dN    = 0;",
      "right" : "dN    = 0;",
      "info" : "ExpressionStatement[30129-30139]:ExpressionStatement[30183-30193]"
    }, {
      "left" : "dN1   = 0;",
      "right" : "dN1   = 0;",
      "info" : "ExpressionStatement[30148-30158]:ExpressionStatement[30202-30212]"
    }, {
      "left" : "dN2   = 0;",
      "right" : "dN2   = 0;",
      "info" : "ExpressionStatement[30167-30177]:ExpressionStatement[30221-30231]"
    }, {
      "left" : "tau   = 0;",
      "right" : "tau   = 0;",
      "info" : "ExpressionStatement[30186-30196]:ExpressionStatement[30240-30250]"
    }, {
      "left" : "int i0 = 0;",
      "right" : "int i0 = 0;",
      "info" : "VariableDeclarationStatement[30240-30251]:VariableDeclarationStatement[30294-30305]"
    }, {
      "left" : "int n0 = n;",
      "right" : "int n0 = n;",
      "info" : "VariableDeclarationStatement[30260-30271]:VariableDeclarationStatement[30314-30325]"
    }, {
      "left" : "while (n0 > 0)",
      "right" : "while (n0 > 0)",
      "info" : "WhileStatement[30280-33352]:WhileStatement[30334-33406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30295-33352]:Block[30349-33406]"
    }, {
      "left" : "sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];",
      "right" : "sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];",
      "info" : "ExpressionStatement[30403-30448]:ExpressionStatement[30457-30502]"
    }, {
      "left" : "sigmaLow = 0;",
      "right" : "sigmaLow = 0;",
      "info" : "ExpressionStatement[30461-30474]:ExpressionStatement[30515-30528]"
    }, {
      "left" : "double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];",
      "right" : "double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];",
      "info" : "VariableDeclarationStatement[30548-30602]:VariableDeclarationStatement[30602-30656]"
    }, {
      "left" : "double offDiagMax = 0;",
      "right" : "double offDiagMax = 0;",
      "info" : "VariableDeclarationStatement[30615-30637]:VariableDeclarationStatement[30669-30691]"
    }, {
      "left" : "double diagMax    = work[4 * n0 - 4];",
      "right" : "double diagMax    = work[4 * n0 - 4];",
      "info" : "VariableDeclarationStatement[30650-30687]:VariableDeclarationStatement[30704-30741]"
    }, {
      "left" : "double diagMin    = diagMax;",
      "right" : "double diagMin    = diagMax;",
      "info" : "VariableDeclarationStatement[30700-30728]:VariableDeclarationStatement[30754-30782]"
    }, {
      "left" : "i0 = 0;",
      "right" : "i0 = 0;",
      "info" : "ExpressionStatement[30741-30748]:ExpressionStatement[30795-30802]"
    }, {
      "left" : "for (int i = 4 * (n0 - 2); i >= 0; i -= 4)",
      "right" : "for (int i = 4 * (n0 - 2); i >= 0; i -= 4)",
      "info" : "ForStatement[30761-31275]:ForStatement[30815-31329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30804-31275]:Block[30858-31329]"
    }, {
      "left" : "if (work[i + 2] <= 0)",
      "right" : "if (work[i + 2] <= 0)",
      "info" : "IfStatement[30822-30926]:IfStatement[30876-30980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30844-30926]:Block[30898-30980]"
    }, {
      "left" : "i0 = 1 + i / 4;",
      "right" : "i0 = 1 + i / 4;",
      "info" : "ExpressionStatement[30866-30881]:ExpressionStatement[30920-30935]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30902-30908]:BreakStatement[30956-30962]"
    }, {
      "left" : "if (diagMin >= 4 * offDiagMax)",
      "right" : "if (diagMin >= 4 * offDiagMax)",
      "info" : "IfStatement[30943-31126]:IfStatement[30997-31180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30974-31126]:Block[31028-31180]"
    }, {
      "left" : "diagMin    = Math.min(diagMin, work[i + 4]);",
      "right" : "diagMin    = Math.min(diagMin, work[i + 4]);",
      "info" : "ExpressionStatement[30996-31040]:ExpressionStatement[31050-31094]"
    }, {
      "left" : "offDiagMax = Math.max(offDiagMax, work[i + 2]);",
      "right" : "offDiagMax = Math.max(offDiagMax, work[i + 2]);",
      "info" : "ExpressionStatement[31061-31108]:ExpressionStatement[31115-31162]"
    }, {
      "left" : "diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",
      "right" : "diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",
      "info" : "ExpressionStatement[31143-31197]:ExpressionStatement[31197-31251]"
    }, {
      "left" : "offDiagMin = Math.min(offDiagMin, work[i + 2]);",
      "right" : "offDiagMin = Math.min(offDiagMin, work[i + 2]);",
      "info" : "ExpressionStatement[31214-31261]:ExpressionStatement[31268-31315]"
    }, {
      "left" : "work[4 * n0 - 2] = offDiagMin;",
      "right" : "work[4 * n0 - 2] = offDiagMin;",
      "info" : "ExpressionStatement[31288-31318]:ExpressionStatement[31342-31372]"
    }, {
      "left" : "dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",
      "right" : "dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",
      "info" : "ExpressionStatement[31378-31445]:ExpressionStatement[31432-31499]"
    }, {
      "left" : "pingPong = 0;",
      "right" : "pingPong = 0;",
      "info" : "ExpressionStatement[31459-31472]:ExpressionStatement[31513-31526]"
    }, {
      "left" : "int maxIter = 30 * (n0 - i0);",
      "right" : "int maxIter = 30 * (n0 - i0);",
      "info" : "VariableDeclarationStatement[31485-31514]:VariableDeclarationStatement[31539-31568]"
    }, {
      "left" : "for (int k = 0; i0 < n0; ++k)",
      "right" : "for (int k = 0; i0 < n0; ++k)",
      "info" : "ForStatement[31527-33341]:ForStatement[31581-33395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31557-33341]:Block[31611-33395]"
    }, {
      "left" : "if (k >= maxIter)",
      "right" : "if (k >= maxIter)",
      "info" : "IfStatement[31575-31711]:IfStatement[31629-31765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31593-31711]:Block[31647-31765]"
    }, {
      "left" : "throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));",
      "right" : "throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));",
      "info" : "ThrowStatement[31615-31693]:ThrowStatement[31669-31747]"
    }, {
      "left" : "n0 = goodStep(i0, n0);",
      "right" : "n0 = goodStep(i0, n0);",
      "info" : "ExpressionStatement[31765-31787]:ExpressionStatement[31819-31841]"
    }, {
      "left" : "pingPong = 1 - pingPong;",
      "right" : "pingPong = 1 - pingPong;",
      "info" : "ExpressionStatement[31804-31828]:ExpressionStatement[31858-31882]"
    }, {
      "left" : "if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma))",
      "right" : "if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma))",
      "info" : "IfStatement[31974-33327]:IfStatement[32028-33381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32144-33327]:Block[32198-33381]"
    }, {
      "left" : "int split  = i0 - 1;",
      "right" : "int split  = i0 - 1;",
      "info" : "VariableDeclarationStatement[32166-32186]:VariableDeclarationStatement[32220-32240]"
    }, {
      "left" : "diagMax    = work[4 * i0];",
      "right" : "diagMax    = work[4 * i0];",
      "info" : "ExpressionStatement[32207-32233]:ExpressionStatement[32261-32287]"
    }, {
      "left" : "offDiagMin = work[4 * i0 + 2];",
      "right" : "offDiagMin = work[4 * i0 + 2];",
      "info" : "ExpressionStatement[32254-32284]:ExpressionStatement[32308-32338]"
    }, {
      "left" : "double previousEMin = work[4 * i0 + 3];",
      "right" : "double previousEMin = work[4 * i0 + 3];",
      "info" : "VariableDeclarationStatement[32305-32344]:VariableDeclarationStatement[32359-32398]"
    }, {
      "left" : "for (int i = 4 * i0; i < 4 * n0 - 11; i += 4)",
      "right" : "for (int i = 4 * i0; i < 4 * n0 - 16; i += 4)",
      "info" : "ForStatement[32365-33169]:ForStatement[32419-33223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32411-33169]:Block[32465-33223]"
    }, {
      "left" : "if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n                            (work[i + 2] <= TOLERANCE_2 * sigma))",
      "right" : "if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                            (work[i + 2] <= TOLERANCE_2 * sigma))",
      "info" : "IfStatement[32437-33147]:IfStatement[32491-33201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32549-32881]:Block[32603-32935]"
    }, {
      "left" : "work[i + 2]  = -sigma;",
      "right" : "work[i + 2]  = -sigma;",
      "info" : "ExpressionStatement[32625-32647]:ExpressionStatement[32679-32701]"
    }, {
      "left" : "split        = i / 4;",
      "right" : "split        = i / 4;",
      "info" : "ExpressionStatement[32676-32697]:ExpressionStatement[32730-32751]"
    }, {
      "left" : "diagMax      = 0;",
      "right" : "diagMax      = 0;",
      "info" : "ExpressionStatement[32726-32743]:ExpressionStatement[32780-32797]"
    }, {
      "left" : "offDiagMin   = work[i + 6];",
      "right" : "offDiagMin   = work[i + 6];",
      "info" : "ExpressionStatement[32772-32799]:ExpressionStatement[32826-32853]"
    }, {
      "left" : "previousEMin = work[i + 7];",
      "right" : "previousEMin = work[i + 7];",
      "info" : "ExpressionStatement[32828-32855]:ExpressionStatement[32882-32909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32887-33147]:Block[32941-33201]"
    }, {
      "left" : "diagMax      = Math.max(diagMax, work[i + 4]);",
      "right" : "diagMax      = Math.max(diagMax, work[i + 4]);",
      "info" : "ExpressionStatement[32917-32963]:ExpressionStatement[32971-33017]"
    }, {
      "left" : "offDiagMin   = Math.min(offDiagMin, work[i + 2]);",
      "right" : "offDiagMin   = Math.min(offDiagMin, work[i + 2]);",
      "info" : "ExpressionStatement[32992-33041]:ExpressionStatement[33046-33095]"
    }, {
      "left" : "previousEMin = Math.min(previousEMin, work[i + 3]);",
      "right" : "previousEMin = Math.min(previousEMin, work[i + 3]);",
      "info" : "ExpressionStatement[33070-33121]:ExpressionStatement[33124-33175]"
    }, {
      "left" : "work[4 * n0 - 2] = offDiagMin;",
      "right" : "work[4 * n0 - 2] = offDiagMin;",
      "info" : "ExpressionStatement[33190-33220]:ExpressionStatement[33244-33274]"
    }, {
      "left" : "work[4 * n0 - 1] = previousEMin;",
      "right" : "work[4 * n0 - 1] = previousEMin;",
      "info" : "ExpressionStatement[33241-33273]:ExpressionStatement[33295-33327]"
    }, {
      "left" : "i0 = split + 1;",
      "right" : "i0 = split + 1;",
      "info" : "ExpressionStatement[33294-33309]:ExpressionStatement[33348-33363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33543-35040]:Block[33597-35094]"
    }, {
      "left" : "pingPong = 0;",
      "right" : "pingPong = 0;",
      "info" : "ExpressionStatement[33554-33567]:ExpressionStatement[33608-33621]"
    }, {
      "left" : "for (int k = 0; k < 2; ++k)",
      "right" : "for (int k = 0; k < 2; ++k)",
      "info" : "ForStatement[33576-35033]:ForStatement[33630-35087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33604-35033]:Block[33658-35087]"
    }, {
      "left" : "double d = work[4 * (n - 1) + pingPong];",
      "right" : "double d = work[4 * (n - 1) + pingPong];",
      "info" : "VariableDeclarationStatement[33658-33698]:VariableDeclarationStatement[33712-33752]"
    }, {
      "left" : "for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4)",
      "right" : "for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4)",
      "info" : "ForStatement[33711-34003]:ForStatement[33765-34057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33764-34003]:Block[33818-34057]"
    }, {
      "left" : "if (work[i + 2] <= TOLERANCE_2 * d)",
      "right" : "if (work[i + 2] <= TOLERANCE_2 * d)",
      "info" : "IfStatement[33782-33989]:IfStatement[33836-34043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33818-33910]:Block[33872-33964]"
    }, {
      "left" : "work[i + 2] = -0.0;",
      "right" : "work[i + 2] = -0.0;",
      "info" : "ExpressionStatement[33840-33859]:ExpressionStatement[33894-33913]"
    }, {
      "left" : "d = work[i];",
      "right" : "d = work[i];",
      "info" : "ExpressionStatement[33880-33892]:ExpressionStatement[33934-33946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33916-33989]:Block[33970-34043]"
    }, {
      "left" : "d *= work[i] / (d + work[i + 2]);",
      "right" : "d *= work[i] / (d + work[i + 2]);",
      "info" : "ExpressionStatement[33938-33971]:ExpressionStatement[33992-34025]"
    }, {
      "left" : "d = work[pingPong];",
      "right" : "d = work[pingPong];",
      "info" : "ExpressionStatement[34066-34085]:ExpressionStatement[34120-34139]"
    }, {
      "left" : "for (int i = 2 + pingPong; i < 4 * n - 2; i += 4)",
      "right" : "for (int i = 2 + pingPong; i < 4 * n - 2; i += 4)",
      "info" : "ForStatement[34098-34907]:ForStatement[34152-34961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34148-34907]:Block[34202-34961]"
    }, {
      "left" : "final int j = i - 2 * pingPong - 1;",
      "right" : "final int j = i - 2 * pingPong - 1;",
      "info" : "VariableDeclarationStatement[34166-34201]:VariableDeclarationStatement[34220-34255]"
    }, {
      "left" : "work[j] = d + work[i];",
      "right" : "work[j] = d + work[i];",
      "info" : "ExpressionStatement[34218-34240]:ExpressionStatement[34272-34294]"
    }, {
      "left" : "if (work[i] <= TOLERANCE_2 * d)",
      "right" : "if (work[i] <= TOLERANCE_2 * d)",
      "info" : "IfStatement[34257-34893]:IfStatement[34311-34947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34289-34461]:Block[34343-34515]"
    }, {
      "left" : "work[i]     = -0.0;",
      "right" : "work[i]     = -0.0;",
      "info" : "ExpressionStatement[34311-34330]:ExpressionStatement[34365-34384]"
    }, {
      "left" : "work[j]     = d;",
      "right" : "work[j]     = d;",
      "info" : "ExpressionStatement[34351-34367]:ExpressionStatement[34405-34421]"
    }, {
      "left" : "work[j + 2] = 0.0;",
      "right" : "work[j + 2] = 0.0;",
      "info" : "ExpressionStatement[34388-34406]:ExpressionStatement[34442-34460]"
    }, {
      "left" : "d = work[i + 2];",
      "right" : "d = work[i + 2];",
      "info" : "ExpressionStatement[34427-34443]:ExpressionStatement[34481-34497]"
    }, {
      "left" : "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                           (MathUtils.SAFE_MIN * work[j] < work[i + 2]))",
      "right" : "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                           (MathUtils.SAFE_MIN * work[j] < work[i + 2]))",
      "info" : "IfStatement[34467-34893]:IfStatement[34521-34947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34592-34752]:Block[34646-34806]"
    }, {
      "left" : "final double tmp = work[i + 2] / work[j];",
      "right" : "final double tmp = work[i + 2] / work[j];",
      "info" : "VariableDeclarationStatement[34614-34655]:VariableDeclarationStatement[34668-34709]"
    }, {
      "left" : "work[j + 2] = work[i] * tmp;",
      "right" : "work[j + 2] = work[i] * tmp;",
      "info" : "ExpressionStatement[34676-34704]:ExpressionStatement[34730-34758]"
    }, {
      "left" : "d *= tmp;",
      "right" : "d *= tmp;",
      "info" : "ExpressionStatement[34725-34734]:ExpressionStatement[34779-34788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34758-34893]:Block[34812-34947]"
    }, {
      "left" : "work[j + 2] = work[i + 2] * (work[i] / work[j]);",
      "right" : "work[j + 2] = work[i + 2] * (work[i] / work[j]);",
      "info" : "ExpressionStatement[34780-34828]:ExpressionStatement[34834-34882]"
    }, {
      "left" : "d *= work[i + 2] / work[j];",
      "right" : "d *= work[i + 2] / work[j];",
      "info" : "ExpressionStatement[34849-34876]:ExpressionStatement[34903-34930]"
    }, {
      "left" : "work[4 * n - 3 - pingPong] = d;",
      "right" : "work[4 * n - 3 - pingPong] = d;",
      "info" : "ExpressionStatement[34920-34951]:ExpressionStatement[34974-35005]"
    }, {
      "left" : "pingPong = 1 - pingPong;",
      "right" : "pingPong = 1 - pingPong;",
      "info" : "ExpressionStatement[34998-35022]:ExpressionStatement[35052-35076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35545-40707]:Block[35599-40761]"
    }, {
      "left" : "g = 0.0;",
      "right" : "g = 0.0;",
      "info" : "ExpressionStatement[35556-35564]:ExpressionStatement[35610-35618]"
    }, {
      "left" : "int deflatedEnd = end;",
      "right" : "int deflatedEnd = end;",
      "info" : "VariableDeclarationStatement[35619-35641]:VariableDeclarationStatement[35673-35695]"
    }, {
      "left" : "for (boolean deflating = true; deflating)",
      "right" : "for (boolean deflating = true; deflating)",
      "info" : "ForStatement[35650-37737]:ForStatement[35704-37791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35693-37737]:Block[35747-37791]"
    }, {
      "left" : "if (start >= deflatedEnd)",
      "right" : "if (start >= deflatedEnd)",
      "info" : "IfStatement[35708-35843]:IfStatement[35762-35897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35734-35843]:Block[35788-35897]"
    }, {
      "left" : "return deflatedEnd;",
      "right" : "return deflatedEnd;",
      "info" : "ReturnStatement[35810-35829]:ReturnStatement[35864-35883]"
    }, {
      "left" : "final int k = 4 * deflatedEnd + pingPong - 1;",
      "right" : "final int k = 4 * deflatedEnd + pingPong - 1;",
      "info" : "VariableDeclarationStatement[35857-35902]:VariableDeclarationStatement[35911-35956]"
    }, {
      "left" : "if ((start == deflatedEnd - 1) ||\n                ((start != deflatedEnd - 2) &&\n                 ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3])) ||\n                  (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7]))))",
      "right" : "if ((start == deflatedEnd - 1) ||\n                ((start != deflatedEnd - 2) &&\n                 ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3])) ||\n                  (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7]))))",
      "info" : "IfStatement[35916-37726]:IfStatement[35970-37780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36150-36346]:Block[36204-36400]"
    }, {
      "left" : "work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];",
      "right" : "work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];",
      "info" : "ExpressionStatement[36224-36297]:ExpressionStatement[36278-36351]"
    }, {
      "left" : "deflatedEnd -= 1;",
      "right" : "deflatedEnd -= 1;",
      "info" : "ExpressionStatement[36314-36331]:ExpressionStatement[36368-36385]"
    }, {
      "left" : "if ((start == deflatedEnd - 2) ||\n                (work[k - 9] <= TOLERANCE_2 * sigma) ||\n                (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11]))",
      "right" : "if ((start == deflatedEnd - 2) ||\n                (work[k - 9] <= TOLERANCE_2 * sigma) ||\n                (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11]))",
      "info" : "IfStatement[36352-37726]:IfStatement[36406-37780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36518-37599]:Block[36572-37653]"
    }, {
      "left" : "if (work[k - 3] > work[k - 7])",
      "right" : "if (work[k - 3] > work[k - 7])",
      "info" : "IfStatement[36597-36785]:IfStatement[36651-36839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36628-36785]:Block[36682-36839]"
    }, {
      "left" : "final double tmp = work[k - 3];",
      "right" : "final double tmp = work[k - 3];",
      "info" : "VariableDeclarationStatement[36650-36681]:VariableDeclarationStatement[36704-36735]"
    }, {
      "left" : "work[k - 3] = work[k - 7];",
      "right" : "work[k - 3] = work[k - 7];",
      "info" : "ExpressionStatement[36702-36728]:ExpressionStatement[36756-36782]"
    }, {
      "left" : "work[k - 7] = tmp;",
      "right" : "work[k - 7] = tmp;",
      "info" : "ExpressionStatement[36749-36767]:ExpressionStatement[36803-36821]"
    }, {
      "left" : "if (work[k - 5] > TOLERANCE_2 * work[k - 3])",
      "right" : "if (work[k - 5] > TOLERANCE_2 * work[k - 3])",
      "info" : "IfStatement[36803-37421]:IfStatement[36857-37475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36848-37421]:Block[36902-37475]"
    }, {
      "left" : "double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);",
      "right" : "double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);",
      "info" : "VariableDeclarationStatement[36870-36931]:VariableDeclarationStatement[36924-36985]"
    }, {
      "left" : "double s = work[k - 3] * (work[k - 5] / t);",
      "right" : "double s = work[k - 3] * (work[k - 5] / t);",
      "info" : "VariableDeclarationStatement[36952-36995]:VariableDeclarationStatement[37006-37049]"
    }, {
      "left" : "if (s <= t)",
      "right" : "if (s <= t)",
      "info" : "IfStatement[37016-37256]:IfStatement[37070-37310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37028-37141]:Block[37082-37195]"
    }, {
      "left" : "s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));",
      "right" : "s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));",
      "info" : "ExpressionStatement[37054-37119]:ExpressionStatement[37108-37173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37147-37256]:Block[37201-37310]"
    }, {
      "left" : "s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));",
      "right" : "s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));",
      "info" : "ExpressionStatement[37173-37234]:ExpressionStatement[37227-37288]"
    }, {
      "left" : "t = work[k - 7] + (s + work[k - 5]);",
      "right" : "t = work[k - 7] + (s + work[k - 5]);",
      "info" : "ExpressionStatement[37277-37313]:ExpressionStatement[37331-37367]"
    }, {
      "left" : "work[k - 3] *= work[k - 7] / t;",
      "right" : "work[k - 3] *= work[k - 7] / t;",
      "info" : "ExpressionStatement[37334-37365]:ExpressionStatement[37388-37419]"
    }, {
      "left" : "work[k - 7]  = t;",
      "right" : "work[k - 7]  = t;",
      "info" : "ExpressionStatement[37386-37403]:ExpressionStatement[37440-37457]"
    }, {
      "left" : "work[4 * deflatedEnd - 8] = sigma + work[k - 7];",
      "right" : "work[4 * deflatedEnd - 8] = sigma + work[k - 7];",
      "info" : "ExpressionStatement[37438-37486]:ExpressionStatement[37492-37540]"
    }, {
      "left" : "work[4 * deflatedEnd - 4] = sigma + work[k - 3];",
      "right" : "work[4 * deflatedEnd - 4] = sigma + work[k - 3];",
      "info" : "ExpressionStatement[37503-37551]:ExpressionStatement[37557-37605]"
    }, {
      "left" : "deflatedEnd -= 2;",
      "right" : "deflatedEnd -= 2;",
      "info" : "ExpressionStatement[37568-37585]:ExpressionStatement[37622-37639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37605-37726]:Block[37659-37780]"
    }, {
      "left" : "deflating = false;",
      "right" : "deflating = false;",
      "info" : "ExpressionStatement[37693-37711]:ExpressionStatement[37747-37765]"
    }, {
      "left" : "final int l = 4 * deflatedEnd + pingPong - 1;",
      "right" : "final int l = 4 * deflatedEnd + pingPong - 1;",
      "info" : "VariableDeclarationStatement[37747-37792]:VariableDeclarationStatement[37801-37846]"
    }, {
      "left" : "if ((dMin <= 0) || (deflatedEnd < end))",
      "right" : "if ((dMin <= 0) || (deflatedEnd < end))",
      "info" : "IfStatement[37842-38458]:IfStatement[37896-38512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37882-38458]:Block[37936-38512]"
    }, {
      "left" : "if (flipIfWarranted(deflatedEnd, 1))",
      "right" : "if (flipIfWarranted(deflatedEnd, 1))",
      "info" : "IfStatement[37896-38448]:IfStatement[37950-38502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37933-38448]:Block[37987-38502]"
    }, {
      "left" : "dMin2 = Math.min(dMin2, work[l - 1]);",
      "right" : "dMin2 = Math.min(dMin2, work[l - 1]);",
      "info" : "ExpressionStatement[37951-37988]:ExpressionStatement[38005-38042]"
    }, {
      "left" : "work[l - 1] =\n                    Math.min(work[l - 1],\n                             Math.min(work[3 + pingPong], work[7 + pingPong]));",
      "right" : "work[l - 1] =\n                    Math.min(work[l - 1],\n                             Math.min(work[3 + pingPong], work[7 + pingPong]));",
      "info" : "ExpressionStatement[38005-38140]:ExpressionStatement[38059-38194]"
    }, {
      "left" : "work[l - 2 * pingPong] =\n                    Math.min(work[l - 2 * pingPong],\n                             Math.min(work[6 + pingPong], work[6 + pingPong]));",
      "right" : "work[l - 2 * pingPong] =\n                    Math.min(work[l - 2 * pingPong],\n                             Math.min(work[6 + pingPong], work[6 + pingPong]));",
      "info" : "ExpressionStatement[38157-38314]:ExpressionStatement[38211-38368]"
    }, {
      "left" : "qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));",
      "right" : "qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));",
      "info" : "ExpressionStatement[38331-38404]:ExpressionStatement[38385-38458]"
    }, {
      "left" : "dMin  = -0.0;",
      "right" : "dMin  = -0.0;",
      "info" : "ExpressionStatement[38421-38434]:ExpressionStatement[38475-38488]"
    }, {
      "left" : "if ((dMin < 0) ||\n            (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1],\n                                                  Math.min(work[l - 9],\n                                                           dMin2 + work[l - 2 * pingPong]))))",
      "right" : "if ((dMin < 0) ||\n            (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1],\n                                                  Math.min(work[l - 9],\n                                                           dMin2 + work[l - 2 * pingPong]))))",
      "info" : "IfStatement[38468-40591]:IfStatement[38522-40645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38715-40591]:Block[38769-40645]"
    }, {
      "left" : "computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",
      "right" : "computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",
      "info" : "ExpressionStatement[38767-38828]:ExpressionStatement[38821-38882]"
    }, {
      "left" : "for (boolean loop = true; loop)",
      "right" : "for (boolean loop = true; loop)",
      "info" : "ForStatement[38871-40580]:ForStatement[38925-40634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38904-40580]:Block[38958-40634]"
    }, {
      "left" : "dqds(start, deflatedEnd);",
      "right" : "dqds(start, deflatedEnd);",
      "info" : "ExpressionStatement[38986-39011]:ExpressionStatement[39040-39065]"
    }, {
      "left" : "if ((dMin >= 0) && (dMin1 > 0))",
      "right" : "if ((dMin >= 0) && (dMin1 > 0))",
      "info" : "IfStatement[39078-40566]:IfStatement[39132-40620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39110-39249]:Block[39164-39303]"
    }, {
      "left" : "updateSigma(tau);",
      "right" : "updateSigma(tau);",
      "info" : "ExpressionStatement[39174-39191]:ExpressionStatement[39228-39245]"
    }, {
      "left" : "return deflatedEnd;",
      "right" : "return deflatedEnd;",
      "info" : "ReturnStatement[39212-39231]:ReturnStatement[39266-39285]"
    }, {
      "left" : "if ((dMin < 0.0) &&\n                           (dMin1 > 0.0) &&\n                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                           (Math.abs(dN) < TOLERANCE * sigma))",
      "right" : "if ((dMin < 0.0) &&\n                           (dMin1 > 0.0) &&\n                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                           (Math.abs(dN) < TOLERANCE * sigma))",
      "info" : "IfStatement[39255-40566]:IfStatement[39309-40620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39479-39729]:Block[39533-39783]"
    }, {
      "left" : "work[4 * deflatedEnd - 3 - pingPong] = 0.0;",
      "right" : "work[4 * deflatedEnd - 3 - pingPong] = 0.0;",
      "info" : "ExpressionStatement[39558-39601]:ExpressionStatement[39612-39655]"
    }, {
      "left" : "dMin = 0.0;",
      "right" : "dMin = 0.0;",
      "info" : "ExpressionStatement[39622-39633]:ExpressionStatement[39676-39687]"
    }, {
      "left" : "updateSigma(tau);",
      "right" : "updateSigma(tau);",
      "info" : "ExpressionStatement[39654-39671]:ExpressionStatement[39708-39725]"
    }, {
      "left" : "return deflatedEnd;",
      "right" : "return deflatedEnd;",
      "info" : "ReturnStatement[39692-39711]:ReturnStatement[39746-39765]"
    }, {
      "left" : "if (dMin < 0.0)",
      "right" : "if (dMin < 0.0)",
      "info" : "IfStatement[39735-40566]:IfStatement[39789-40620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39751-40370]:Block[39805-40424]"
    }, {
      "left" : "if (tType < -22)",
      "right" : "if (tType < -22)",
      "info" : "IfStatement[39839-40352]:IfStatement[39893-40406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39856-39969]:Block[39910-40023]"
    }, {
      "left" : "tau = 0.0;",
      "right" : "tau = 0.0;",
      "info" : "ExpressionStatement[39937-39947]:ExpressionStatement[39991-40001]"
    }, {
      "left" : "if (dMin1 > 0.0)",
      "right" : "if (dMin1 > 0.0)",
      "info" : "IfStatement[39975-40352]:IfStatement[40029-40406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39992-40194]:Block[40046-40248]"
    }, {
      "left" : "tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);",
      "right" : "tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);",
      "info" : "ExpressionStatement[40082-40135]:ExpressionStatement[40136-40189]"
    }, {
      "left" : "tType -= 11;",
      "right" : "tType -= 11;",
      "info" : "ExpressionStatement[40160-40172]:ExpressionStatement[40214-40226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40200-40352]:Block[40254-40406]"
    }, {
      "left" : "tau *= 0.25;",
      "right" : "tau *= 0.25;",
      "info" : "ExpressionStatement[40281-40293]:ExpressionStatement[40335-40347]"
    }, {
      "left" : "tType -= 12;",
      "right" : "tType -= 12;",
      "info" : "ExpressionStatement[40318-40330]:ExpressionStatement[40372-40384]"
    }, {
      "left" : "if (Double.isNaN(dMin))",
      "right" : "if (Double.isNaN(dMin))",
      "info" : "IfStatement[40376-40566]:IfStatement[40430-40620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40400-40450]:Block[40454-40504]"
    }, {
      "left" : "tau = 0.0;",
      "right" : "tau = 0.0;",
      "info" : "ExpressionStatement[40422-40432]:ExpressionStatement[40476-40486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40456-40566]:Block[40510-40620]"
    }, {
      "left" : "loop = false;",
      "right" : "loop = false;",
      "info" : "ExpressionStatement[40535-40548]:ExpressionStatement[40589-40602]"
    }, {
      "left" : "dqd(start, deflatedEnd);",
      "right" : "dqd(start, deflatedEnd);",
      "info" : "ExpressionStatement[40647-40671]:ExpressionStatement[40701-40725]"
    }, {
      "left" : "return deflatedEnd;",
      "right" : "return deflatedEnd;",
      "info" : "ReturnStatement[40681-40700]:ReturnStatement[40735-40754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41027-41506]:Block[41081-41560]"
    }, {
      "left" : "if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong])",
      "right" : "if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong])",
      "info" : "IfStatement[41037-41478]:IfStatement[41091-41532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41094-41478]:Block[41148-41532]"
    }, {
      "left" : "int j = 4 * n - 1;",
      "right" : "int j = 4 * n - 1;",
      "info" : "VariableDeclarationStatement[41134-41152]:VariableDeclarationStatement[41188-41206]"
    }, {
      "left" : "for (int i = 0; i < j; i += 4)",
      "right" : "for (int i = 0; i < j; i += 4)",
      "info" : "ForStatement[41165-41443]:ForStatement[41219-41497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41196-41443]:Block[41250-41497]"
    }, {
      "left" : "for (int k = 0; k < 4; k += step)",
      "right" : "for (int k = 0; k < 4; k += step)",
      "info" : "ForStatement[41214-41405]:ForStatement[41268-41459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41248-41405]:Block[41302-41459]"
    }, {
      "left" : "final double tmp = work[i + k];",
      "right" : "final double tmp = work[i + k];",
      "info" : "VariableDeclarationStatement[41270-41301]:VariableDeclarationStatement[41324-41355]"
    }, {
      "left" : "work[i + k] = work[j - k];",
      "right" : "work[i + k] = work[j - k];",
      "info" : "ExpressionStatement[41322-41348]:ExpressionStatement[41376-41402]"
    }, {
      "left" : "work[j - k] = tmp;",
      "right" : "work[j - k] = tmp;",
      "info" : "ExpressionStatement[41369-41387]:ExpressionStatement[41423-41441]"
    }, {
      "left" : "j -= 4;",
      "right" : "j -= 4;",
      "info" : "ExpressionStatement[41422-41429]:ExpressionStatement[41476-41483]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41456-41468]:ReturnStatement[41510-41522]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41487-41500]:ReturnStatement[41541-41554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41820-44182]:Block[41874-44236]"
    }, {
      "left" : "final int lowerStart = 4 * main.length;",
      "right" : "final int lowerStart = 4 * main.length;",
      "info" : "VariableDeclarationStatement[41892-41931]:VariableDeclarationStatement[41946-41985]"
    }, {
      "left" : "final int upperStart = 5 * main.length;",
      "right" : "final int upperStart = 5 * main.length;",
      "info" : "VariableDeclarationStatement[41940-41979]:VariableDeclarationStatement[41994-42033]"
    }, {
      "left" : "double lower = Double.POSITIVE_INFINITY;",
      "right" : "double lower = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[41988-42028]:VariableDeclarationStatement[42042-42082]"
    }, {
      "left" : "double upper = Double.NEGATIVE_INFINITY;",
      "right" : "double upper = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[42037-42077]:VariableDeclarationStatement[42091-42131]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[42086-42257]:ForStatement[42140-42311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42114-42257]:Block[42168-42311]"
    }, {
      "left" : "lower = Math.min(lower, work[lowerStart + index +i]);",
      "right" : "lower = Math.min(lower, work[lowerStart + index +i]);",
      "info" : "ExpressionStatement[42128-42181]:ExpressionStatement[42182-42235]"
    }, {
      "left" : "upper = Math.max(upper, work[upperStart + index +i]);",
      "right" : "upper = Math.max(upper, work[upperStart + index +i]);",
      "info" : "ExpressionStatement[42194-42247]:ExpressionStatement[42248-42301]"
    }, {
      "left" : "final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",
      "right" : "final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",
      "info" : "VariableDeclarationStatement[42293-42357]:VariableDeclarationStatement[42347-42411]"
    }, {
      "left" : "final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);",
      "right" : "final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);",
      "info" : "VariableDeclarationStatement[42366-42428]:VariableDeclarationStatement[42420-42482]"
    }, {
      "left" : "final double absoluteTolerance = 4 * minPivot;",
      "right" : "final double absoluteTolerance = 4 * minPivot;",
      "info" : "VariableDeclarationStatement[42437-42483]:VariableDeclarationStatement[42491-42537]"
    }, {
      "left" : "final int maxIter =\n            2 + (int) ((Math.log(tNorm + minPivot) - Math.log(minPivot)) / Math.log(2.0));",
      "right" : "final int maxIter =\n            2 + (int) ((Math.log(tNorm + minPivot) - Math.log(minPivot)) / Math.log(2.0));",
      "info" : "VariableDeclarationStatement[42492-42602]:VariableDeclarationStatement[42546-42656]"
    }, {
      "left" : "final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);",
      "right" : "final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);",
      "info" : "VariableDeclarationStatement[42611-42684]:VariableDeclarationStatement[42665-42738]"
    }, {
      "left" : "double left  = lower - margin;",
      "right" : "double left  = lower - margin;",
      "info" : "VariableDeclarationStatement[42729-42759]:VariableDeclarationStatement[42783-42813]"
    }, {
      "left" : "double right = upper + margin;",
      "right" : "double right = upper + margin;",
      "info" : "VariableDeclarationStatement[42768-42798]:VariableDeclarationStatement[42822-42852]"
    }, {
      "left" : "for (int i = 0; i < maxIter; ++i)",
      "right" : "for (int i = 0; i < maxIter; ++i)",
      "info" : "ForStatement[42807-43330]:ForStatement[42861-43384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42841-43330]:Block[42895-43384]"
    }, {
      "left" : "final double range = right - left;",
      "right" : "final double range = right - left;",
      "info" : "VariableDeclarationStatement[42856-42890]:VariableDeclarationStatement[42910-42944]"
    }, {
      "left" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
      "right" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
      "info" : "IfStatement[42903-43105]:IfStatement[42957-43159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43027-43105]:Block[43081-43159]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43085-43091]:BreakStatement[43139-43145]"
    }, {
      "left" : "final double middle = 0.5 * (left + right);",
      "right" : "final double middle = 0.5 * (left + right);",
      "info" : "VariableDeclarationStatement[43119-43162]:VariableDeclarationStatement[43173-43216]"
    }, {
      "left" : "if (countEigenValues(middle, index, n) >= 1)",
      "right" : "if (countEigenValues(middle, index, n) >= 1)",
      "info" : "IfStatement[43175-43319]:IfStatement[43229-43373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43220-43267]:Block[43274-43321]"
    }, {
      "left" : "right = middle;",
      "right" : "right = middle;",
      "info" : "ExpressionStatement[43238-43253]:ExpressionStatement[43292-43307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43273-43319]:Block[43327-43373]"
    }, {
      "left" : "left = middle;",
      "right" : "left = middle;",
      "info" : "ExpressionStatement[43291-43305]:ExpressionStatement[43345-43359]"
    }, {
      "left" : "lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",
      "right" : "lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",
      "info" : "ExpressionStatement[43339-43412]:ExpressionStatement[43393-43466]"
    }, {
      "left" : "left  = lower - margin;",
      "right" : "left  = lower - margin;",
      "info" : "ExpressionStatement[43457-43480]:ExpressionStatement[43511-43534]"
    }, {
      "left" : "right = upper + margin;",
      "right" : "right = upper + margin;",
      "info" : "ExpressionStatement[43489-43512]:ExpressionStatement[43543-43566]"
    }, {
      "left" : "for (int i = 0; i < maxIter; ++i)",
      "right" : "for (int i = 0; i < maxIter; ++i)",
      "info" : "ForStatement[43521-44044]:ForStatement[43575-44098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43555-44044]:Block[43609-44098]"
    }, {
      "left" : "final double range = right - left;",
      "right" : "final double range = right - left;",
      "info" : "VariableDeclarationStatement[43570-43604]:VariableDeclarationStatement[43624-43658]"
    }, {
      "left" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
      "right" : "if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))))",
      "info" : "IfStatement[43617-43819]:IfStatement[43671-43873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43741-43819]:Block[43795-43873]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43799-43805]:BreakStatement[43853-43859]"
    }, {
      "left" : "final double middle = 0.5 * (left + right);",
      "right" : "final double middle = 0.5 * (left + right);",
      "info" : "VariableDeclarationStatement[43833-43876]:VariableDeclarationStatement[43887-43930]"
    }, {
      "left" : "if (countEigenValues(middle, index, n) >= n)",
      "right" : "if (countEigenValues(middle, index, n) >= n)",
      "info" : "IfStatement[43889-44033]:IfStatement[43943-44087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43934-43981]:Block[43988-44035]"
    }, {
      "left" : "right = middle;",
      "right" : "right = middle;",
      "info" : "ExpressionStatement[43952-43967]:ExpressionStatement[44006-44021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43987-44033]:Block[44041-44087]"
    }, {
      "left" : "left = middle;",
      "right" : "left = middle;",
      "info" : "ExpressionStatement[44005-44019]:ExpressionStatement[44059-44073]"
    }, {
      "left" : "upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",
      "right" : "upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",
      "info" : "ExpressionStatement[44053-44128]:ExpressionStatement[44107-44182]"
    }, {
      "left" : "return new double[] { lower, upper };",
      "right" : "return new double[] { lower, upper };",
      "info" : "ReturnStatement[44138-44175]:ReturnStatement[44192-44229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44571-44881]:Block[44625-44935]"
    }, {
      "left" : "double ratio = main[index] - t;",
      "right" : "double ratio = main[index] - t;",
      "info" : "VariableDeclarationStatement[44581-44612]:VariableDeclarationStatement[44635-44666]"
    }, {
      "left" : "int count = (ratio > 0) ? 0 : 1;",
      "right" : "int count = (ratio > 0) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[44621-44653]:VariableDeclarationStatement[44675-44707]"
    }, {
      "left" : "for (int i = 1; i < n; ++i)",
      "right" : "for (int i = 1; i < n; ++i)",
      "info" : "ForStatement[44662-44853]:ForStatement[44716-44907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44690-44853]:Block[44744-44907]"
    }, {
      "left" : "ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;",
      "right" : "ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;",
      "info" : "ExpressionStatement[44704-44774]:ExpressionStatement[44758-44828]"
    }, {
      "left" : "if (ratio <= 0)",
      "right" : "if (ratio <= 0)",
      "info" : "IfStatement[44787-44843]:IfStatement[44841-44897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44803-44843]:Block[44857-44897]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[44821-44829]:ExpressionStatement[44875-44883]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[44862-44875]:ReturnStatement[44916-44929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45548-45980]:Block[45602-46034]"
    }, {
      "left" : "double di = main[index] - lambda;",
      "right" : "double di = main[index] - lambda;",
      "info" : "VariableDeclarationStatement[45558-45591]:VariableDeclarationStatement[45612-45645]"
    }, {
      "left" : "work[0] = Math.abs(di);",
      "right" : "work[0] = Math.abs(di);",
      "info" : "ExpressionStatement[45600-45623]:ExpressionStatement[45654-45677]"
    }, {
      "left" : "for (int i = 1; i < n; ++i)",
      "right" : "for (int i = 1; i < n; ++i)",
      "info" : "ForStatement[45632-45974]:ForStatement[45686-46028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45660-45974]:Block[45714-46028]"
    }, {
      "left" : "final int    fourI = 4 * i;",
      "right" : "final int    fourI = 4 * i;",
      "info" : "VariableDeclarationStatement[45674-45701]:VariableDeclarationStatement[45728-45755]"
    }, {
      "left" : "final double eiM1  = secondary[index + i - 1];",
      "right" : "final double eiM1  = secondary[index + i - 1];",
      "info" : "VariableDeclarationStatement[45714-45760]:VariableDeclarationStatement[45768-45814]"
    }, {
      "left" : "final double ratio = eiM1 / di;",
      "right" : "final double ratio = eiM1 / di;",
      "info" : "VariableDeclarationStatement[45773-45804]:VariableDeclarationStatement[45827-45858]"
    }, {
      "left" : "work[fourI - 2] = ratio * ratio * Math.abs(di);",
      "right" : "work[fourI - 2] = ratio * ratio * Math.abs(di);",
      "info" : "ExpressionStatement[45817-45864]:ExpressionStatement[45871-45918]"
    }, {
      "left" : "di = (main[index + i] - lambda) - eiM1 * ratio;",
      "right" : "di = (main[index + i] - lambda) - eiM1 * ratio;",
      "info" : "ExpressionStatement[45877-45924]:ExpressionStatement[45931-45978]"
    }, {
      "left" : "work[fourI] = Math.abs(di);",
      "right" : "work[fourI] = Math.abs(di);",
      "info" : "ExpressionStatement[45937-45964]:ExpressionStatement[45991-46018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46252-47945]:Block[46306-47999]"
    }, {
      "left" : "eMin = work[4 * start + pingPong + 4];",
      "right" : "eMin = work[4 * start + pingPong + 4];",
      "info" : "ExpressionStatement[46263-46301]:ExpressionStatement[46317-46355]"
    }, {
      "left" : "double d = work[4 * start + pingPong] - tau;",
      "right" : "double d = work[4 * start + pingPong] - tau;",
      "info" : "VariableDeclarationStatement[46310-46354]:VariableDeclarationStatement[46364-46408]"
    }, {
      "left" : "dMin = d;",
      "right" : "dMin = d;",
      "info" : "ExpressionStatement[46363-46372]:ExpressionStatement[46417-46426]"
    }, {
      "left" : "dMin1 = -work[4 * start + pingPong];",
      "right" : "dMin1 = -work[4 * start + pingPong];",
      "info" : "ExpressionStatement[46381-46417]:ExpressionStatement[46435-46471]"
    }, {
      "left" : "if (pingPong == 0)",
      "right" : "if (pingPong == 0)",
      "info" : "IfStatement[46427-47220]:IfStatement[46481-47274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46446-46830]:Block[46500-46884]"
    }, {
      "left" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
      "right" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
      "info" : "ForStatement[46460-46820]:ForStatement[46514-46874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46519-46820]:Block[46573-46874]"
    }, {
      "left" : "work[j4 - 2] = d + work[j4 - 1];",
      "right" : "work[j4 - 2] = d + work[j4 - 1];",
      "info" : "ExpressionStatement[46537-46569]:ExpressionStatement[46591-46623]"
    }, {
      "left" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
      "right" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
      "info" : "VariableDeclarationStatement[46586-46633]:VariableDeclarationStatement[46640-46687]"
    }, {
      "left" : "d = d * tmp - tau;",
      "right" : "d = d * tmp - tau;",
      "info" : "ExpressionStatement[46650-46668]:ExpressionStatement[46704-46722]"
    }, {
      "left" : "dMin = Math.min(dMin, d);",
      "right" : "dMin = Math.min(dMin, d);",
      "info" : "ExpressionStatement[46685-46710]:ExpressionStatement[46739-46764]"
    }, {
      "left" : "work[j4] = work[j4 - 1] * tmp;",
      "right" : "work[j4] = work[j4 - 1] * tmp;",
      "info" : "ExpressionStatement[46727-46757]:ExpressionStatement[46781-46811]"
    }, {
      "left" : "eMin = Math.min(work[j4], eMin);",
      "right" : "eMin = Math.min(work[j4], eMin);",
      "info" : "ExpressionStatement[46774-46806]:ExpressionStatement[46828-46860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46836-47220]:Block[46890-47274]"
    }, {
      "left" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
      "right" : "for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4)",
      "info" : "ForStatement[46850-47210]:ForStatement[46904-47264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46909-47210]:Block[46963-47264]"
    }, {
      "left" : "work[j4 - 3] = d + work[j4];",
      "right" : "work[j4 - 3] = d + work[j4];",
      "info" : "ExpressionStatement[46927-46955]:ExpressionStatement[46981-47009]"
    }, {
      "left" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
      "right" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
      "info" : "VariableDeclarationStatement[46972-47019]:VariableDeclarationStatement[47026-47073]"
    }, {
      "left" : "d = d * tmp - tau;",
      "right" : "d = d * tmp - tau;",
      "info" : "ExpressionStatement[47036-47054]:ExpressionStatement[47090-47108]"
    }, {
      "left" : "dMin = Math.min(dMin, d);",
      "right" : "dMin = Math.min(dMin, d);",
      "info" : "ExpressionStatement[47071-47096]:ExpressionStatement[47125-47150]"
    }, {
      "left" : "work[j4 - 1] = work[j4] * tmp;",
      "right" : "work[j4 - 1] = work[j4] * tmp;",
      "info" : "ExpressionStatement[47113-47143]:ExpressionStatement[47167-47197]"
    }, {
      "left" : "eMin = Math.min(work[j4 - 1], eMin);",
      "right" : "eMin = Math.min(work[j4 - 1], eMin);",
      "info" : "ExpressionStatement[47160-47196]:ExpressionStatement[47214-47250]"
    }, {
      "left" : "dN2 = d;",
      "right" : "dN2 = d;",
      "info" : "ExpressionStatement[47264-47272]:ExpressionStatement[47318-47326]"
    }, {
      "left" : "dMin2 = dMin;",
      "right" : "dMin2 = dMin;",
      "info" : "ExpressionStatement[47281-47294]:ExpressionStatement[47335-47348]"
    }, {
      "left" : "int j4 = 4 * (end - 2) - pingPong - 1;",
      "right" : "int j4 = 4 * (end - 2) - pingPong - 1;",
      "info" : "VariableDeclarationStatement[47303-47341]:VariableDeclarationStatement[47357-47395]"
    }, {
      "left" : "int j4p2 = j4 + 2 * pingPong - 1;",
      "right" : "int j4p2 = j4 + 2 * pingPong - 1;",
      "info" : "VariableDeclarationStatement[47350-47383]:VariableDeclarationStatement[47404-47437]"
    }, {
      "left" : "work[j4 - 2] = dN2 + work[j4p2];",
      "right" : "work[j4 - 2] = dN2 + work[j4p2];",
      "info" : "ExpressionStatement[47392-47424]:ExpressionStatement[47446-47478]"
    }, {
      "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "info" : "ExpressionStatement[47433-47489]:ExpressionStatement[47487-47543]"
    }, {
      "left" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;",
      "right" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;",
      "info" : "ExpressionStatement[47498-47548]:ExpressionStatement[47552-47602]"
    }, {
      "left" : "dMin = Math.min(dMin, dN1);",
      "right" : "dMin = Math.min(dMin, dN1);",
      "info" : "ExpressionStatement[47557-47584]:ExpressionStatement[47611-47638]"
    }, {
      "left" : "dMin1 = dMin;",
      "right" : "dMin1 = dMin;",
      "info" : "ExpressionStatement[47594-47607]:ExpressionStatement[47648-47661]"
    }, {
      "left" : "j4 = j4 + 4;",
      "right" : "j4 = j4 + 4;",
      "info" : "ExpressionStatement[47616-47628]:ExpressionStatement[47670-47682]"
    }, {
      "left" : "j4p2 = j4 + 2 * pingPong - 1;",
      "right" : "j4p2 = j4 + 2 * pingPong - 1;",
      "info" : "ExpressionStatement[47637-47666]:ExpressionStatement[47691-47720]"
    }, {
      "left" : "work[j4 - 2] = dN1 + work[j4p2];",
      "right" : "work[j4 - 2] = dN1 + work[j4p2];",
      "info" : "ExpressionStatement[47675-47707]:ExpressionStatement[47729-47761]"
    }, {
      "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "info" : "ExpressionStatement[47716-47772]:ExpressionStatement[47770-47826]"
    }, {
      "left" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;",
      "right" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;",
      "info" : "ExpressionStatement[47781-47830]:ExpressionStatement[47835-47884]"
    }, {
      "left" : "dMin = Math.min(dMin, dN);",
      "right" : "dMin = Math.min(dMin, dN);",
      "info" : "ExpressionStatement[47839-47865]:ExpressionStatement[47893-47919]"
    }, {
      "left" : "work[j4 + 2] = dN;",
      "right" : "work[j4 + 2] = dN;",
      "info" : "ExpressionStatement[47875-47893]:ExpressionStatement[47929-47947]"
    }, {
      "left" : "work[4 * end - pingPong - 1] = eMin;",
      "right" : "work[4 * end - pingPong - 1] = eMin;",
      "info" : "ExpressionStatement[47902-47938]:ExpressionStatement[47956-47992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48185-51778]:Block[48239-51832]"
    }, {
      "left" : "eMin = work[4 * start + pingPong + 4];",
      "right" : "eMin = work[4 * start + pingPong + 4];",
      "info" : "ExpressionStatement[48196-48234]:ExpressionStatement[48250-48288]"
    }, {
      "left" : "double d = work[4 * start + pingPong];",
      "right" : "double d = work[4 * start + pingPong];",
      "info" : "VariableDeclarationStatement[48243-48281]:VariableDeclarationStatement[48297-48335]"
    }, {
      "left" : "dMin = d;",
      "right" : "dMin = d;",
      "info" : "ExpressionStatement[48290-48299]:ExpressionStatement[48344-48353]"
    }, {
      "left" : "if (pingPong == 0)",
      "right" : "if (pingPong == 0)",
      "info" : "IfStatement[48309-50140]:IfStatement[48363-50194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48328-49229]:Block[48382-49283]"
    }, {
      "left" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
      "right" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
      "info" : "ForStatement[48342-49219]:ForStatement[48396-49273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48400-49219]:Block[48454-49273]"
    }, {
      "left" : "work[j4 - 2] = d + work[j4 - 1];",
      "right" : "work[j4 - 2] = d + work[j4 - 1];",
      "info" : "ExpressionStatement[48418-48450]:ExpressionStatement[48472-48504]"
    }, {
      "left" : "if (work[j4 - 2] == 0.0)",
      "right" : "if (work[j4 - 2] == 0.0)",
      "info" : "IfStatement[48467-49114]:IfStatement[48521-49168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48492-48647]:Block[48546-48701]"
    }, {
      "left" : "work[j4] = 0.0;",
      "right" : "work[j4] = 0.0;",
      "info" : "ExpressionStatement[48514-48529]:ExpressionStatement[48568-48583]"
    }, {
      "left" : "d = work[j4 + 1];",
      "right" : "d = work[j4 + 1];",
      "info" : "ExpressionStatement[48550-48567]:ExpressionStatement[48604-48621]"
    }, {
      "left" : "dMin = d;",
      "right" : "dMin = d;",
      "info" : "ExpressionStatement[48588-48597]:ExpressionStatement[48642-48651]"
    }, {
      "left" : "eMin = 0.0;",
      "right" : "eMin = 0.0;",
      "info" : "ExpressionStatement[48618-48629]:ExpressionStatement[48672-48683]"
    }, {
      "left" : "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1]))",
      "right" : "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1]))",
      "info" : "IfStatement[48653-49114]:IfStatement[48707-49168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48790-48958]:Block[48844-49012]"
    }, {
      "left" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
      "right" : "final double tmp = work[j4 + 1] / work[j4 - 2];",
      "info" : "VariableDeclarationStatement[48812-48859]:VariableDeclarationStatement[48866-48913]"
    }, {
      "left" : "work[j4] = work[j4 - 1] * tmp;",
      "right" : "work[j4] = work[j4 - 1] * tmp;",
      "info" : "ExpressionStatement[48880-48910]:ExpressionStatement[48934-48964]"
    }, {
      "left" : "d *= tmp;",
      "right" : "d *= tmp;",
      "info" : "ExpressionStatement[48931-48940]:ExpressionStatement[48985-48994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48964-49114]:Block[49018-49168]"
    }, {
      "left" : "work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);",
      "right" : "work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);",
      "info" : "ExpressionStatement[48986-49042]:ExpressionStatement[49040-49096]"
    }, {
      "left" : "d *= work[j4 + 1] / work[j4 - 2];",
      "right" : "d *= work[j4 + 1] / work[j4 - 2];",
      "info" : "ExpressionStatement[49063-49096]:ExpressionStatement[49117-49150]"
    }, {
      "left" : "dMin = Math.min(dMin, d);",
      "right" : "dMin = Math.min(dMin, d);",
      "info" : "ExpressionStatement[49131-49156]:ExpressionStatement[49185-49210]"
    }, {
      "left" : "eMin = Math.min(eMin, work[j4]);",
      "right" : "eMin = Math.min(eMin, work[j4]);",
      "info" : "ExpressionStatement[49173-49205]:ExpressionStatement[49227-49259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49235-50140]:Block[49289-50194]"
    }, {
      "left" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
      "right" : "for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4)",
      "info" : "ForStatement[49249-50130]:ForStatement[49303-50184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49307-50130]:Block[49361-50184]"
    }, {
      "left" : "work[j4 - 3] = d + work[j4];",
      "right" : "work[j4 - 3] = d + work[j4];",
      "info" : "ExpressionStatement[49325-49353]:ExpressionStatement[49379-49407]"
    }, {
      "left" : "if (work[j4 - 3] == 0.0)",
      "right" : "if (work[j4 - 3] == 0.0)",
      "info" : "IfStatement[49370-50021]:IfStatement[49424-50075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49395-49554]:Block[49449-49608]"
    }, {
      "left" : "work[j4 - 1] = 0.0;",
      "right" : "work[j4 - 1] = 0.0;",
      "info" : "ExpressionStatement[49417-49436]:ExpressionStatement[49471-49490]"
    }, {
      "left" : "d = work[j4 + 2];",
      "right" : "d = work[j4 + 2];",
      "info" : "ExpressionStatement[49457-49474]:ExpressionStatement[49511-49528]"
    }, {
      "left" : "dMin = d;",
      "right" : "dMin = d;",
      "info" : "ExpressionStatement[49495-49504]:ExpressionStatement[49549-49558]"
    }, {
      "left" : "eMin = 0.0;",
      "right" : "eMin = 0.0;",
      "info" : "ExpressionStatement[49525-49536]:ExpressionStatement[49579-49590]"
    }, {
      "left" : "if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2]))",
      "right" : "if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2]))",
      "info" : "IfStatement[49560-50021]:IfStatement[49614-50075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49697-49865]:Block[49751-49919]"
    }, {
      "left" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
      "right" : "final double tmp = work[j4 + 2] / work[j4 - 3];",
      "info" : "VariableDeclarationStatement[49719-49766]:VariableDeclarationStatement[49773-49820]"
    }, {
      "left" : "work[j4 - 1] = work[j4] * tmp;",
      "right" : "work[j4 - 1] = work[j4] * tmp;",
      "info" : "ExpressionStatement[49787-49817]:ExpressionStatement[49841-49871]"
    }, {
      "left" : "d *= tmp;",
      "right" : "d *= tmp;",
      "info" : "ExpressionStatement[49838-49847]:ExpressionStatement[49892-49901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49871-50021]:Block[49925-50075]"
    }, {
      "left" : "work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);",
      "right" : "work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);",
      "info" : "ExpressionStatement[49893-49949]:ExpressionStatement[49947-50003]"
    }, {
      "left" : "d *= work[j4 + 2] / work[j4 - 3];",
      "right" : "d *= work[j4 + 2] / work[j4 - 3];",
      "info" : "ExpressionStatement[49970-50003]:ExpressionStatement[50024-50057]"
    }, {
      "left" : "dMin = Math.min(dMin, d);",
      "right" : "dMin = Math.min(dMin, d);",
      "info" : "ExpressionStatement[50038-50063]:ExpressionStatement[50092-50117]"
    }, {
      "left" : "eMin = Math.min(eMin, work[j4 - 1]);",
      "right" : "eMin = Math.min(eMin, work[j4 - 1]);",
      "info" : "ExpressionStatement[50080-50116]:ExpressionStatement[50134-50170]"
    }, {
      "left" : "dN2   = d;",
      "right" : "dN2   = d;",
      "info" : "ExpressionStatement[50183-50193]:ExpressionStatement[50237-50247]"
    }, {
      "left" : "dMin2 = dMin;",
      "right" : "dMin2 = dMin;",
      "info" : "ExpressionStatement[50202-50215]:ExpressionStatement[50256-50269]"
    }, {
      "left" : "int j4 = 4 * (end - 2) - pingPong - 1;",
      "right" : "int j4 = 4 * (end - 2) - pingPong - 1;",
      "info" : "VariableDeclarationStatement[50224-50262]:VariableDeclarationStatement[50278-50316]"
    }, {
      "left" : "int j4p2 = j4 + 2 * pingPong - 1;",
      "right" : "int j4p2 = j4 + 2 * pingPong - 1;",
      "info" : "VariableDeclarationStatement[50271-50304]:VariableDeclarationStatement[50325-50358]"
    }, {
      "left" : "work[j4 - 2] = dN2 + work[j4p2];",
      "right" : "work[j4 - 2] = dN2 + work[j4p2];",
      "info" : "ExpressionStatement[50313-50345]:ExpressionStatement[50367-50399]"
    }, {
      "left" : "if (work[j4 - 2] == 0.0)",
      "right" : "if (work[j4 - 2] == 0.0)",
      "info" : "IfStatement[50354-50926]:IfStatement[50408-50980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50379-50501]:Block[50433-50555]"
    }, {
      "left" : "work[j4] = 0.0;",
      "right" : "work[j4] = 0.0;",
      "info" : "ExpressionStatement[50393-50408]:ExpressionStatement[50447-50462]"
    }, {
      "left" : "dN1  = work[j4p2 + 2];",
      "right" : "dN1  = work[j4p2 + 2];",
      "info" : "ExpressionStatement[50421-50443]:ExpressionStatement[50475-50497]"
    }, {
      "left" : "dMin = dN1;",
      "right" : "dMin = dN1;",
      "info" : "ExpressionStatement[50456-50467]:ExpressionStatement[50510-50521]"
    }, {
      "left" : "eMin = 0.0;",
      "right" : "eMin = 0.0;",
      "info" : "ExpressionStatement[50480-50491]:ExpressionStatement[50534-50545]"
    }, {
      "left" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
      "right" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
      "info" : "IfStatement[50507-50926]:IfStatement[50561-50980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50640-50783]:Block[50694-50837]"
    }, {
      "left" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
      "right" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
      "info" : "VariableDeclarationStatement[50654-50703]:VariableDeclarationStatement[50708-50757]"
    }, {
      "left" : "work[j4] = work[j4p2] * tmp;",
      "right" : "work[j4] = work[j4p2] * tmp;",
      "info" : "ExpressionStatement[50716-50744]:ExpressionStatement[50770-50798]"
    }, {
      "left" : "dN1 = dN2 * tmp;",
      "right" : "dN1 = dN2 * tmp;",
      "info" : "ExpressionStatement[50757-50773]:ExpressionStatement[50811-50827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50789-50926]:Block[50843-50980]"
    }, {
      "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "info" : "ExpressionStatement[50803-50859]:ExpressionStatement[50857-50913]"
    }, {
      "left" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);",
      "right" : "dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);",
      "info" : "ExpressionStatement[50872-50916]:ExpressionStatement[50926-50970]"
    }, {
      "left" : "dMin = Math.min(dMin, dN1);",
      "right" : "dMin = Math.min(dMin, dN1);",
      "info" : "ExpressionStatement[50935-50962]:ExpressionStatement[50989-51016]"
    }, {
      "left" : "dMin1 = dMin;",
      "right" : "dMin1 = dMin;",
      "info" : "ExpressionStatement[50972-50985]:ExpressionStatement[51026-51039]"
    }, {
      "left" : "j4 = j4 + 4;",
      "right" : "j4 = j4 + 4;",
      "info" : "ExpressionStatement[50994-51006]:ExpressionStatement[51048-51060]"
    }, {
      "left" : "j4p2 = j4 + 2 * pingPong - 1;",
      "right" : "j4p2 = j4 + 2 * pingPong - 1;",
      "info" : "ExpressionStatement[51015-51044]:ExpressionStatement[51069-51098]"
    }, {
      "left" : "work[j4 - 2] = dN1 + work[j4p2];",
      "right" : "work[j4 - 2] = dN1 + work[j4p2];",
      "info" : "ExpressionStatement[51053-51085]:ExpressionStatement[51107-51139]"
    }, {
      "left" : "if (work[j4 - 2] == 0.0)",
      "right" : "if (work[j4 - 2] == 0.0)",
      "info" : "IfStatement[51094-51663]:IfStatement[51148-51717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51119-51240]:Block[51173-51294]"
    }, {
      "left" : "work[j4] = 0.0;",
      "right" : "work[j4] = 0.0;",
      "info" : "ExpressionStatement[51133-51148]:ExpressionStatement[51187-51202]"
    }, {
      "left" : "dN   = work[j4p2 + 2];",
      "right" : "dN   = work[j4p2 + 2];",
      "info" : "ExpressionStatement[51161-51183]:ExpressionStatement[51215-51237]"
    }, {
      "left" : "dMin = dN;",
      "right" : "dMin = dN;",
      "info" : "ExpressionStatement[51196-51206]:ExpressionStatement[51250-51260]"
    }, {
      "left" : "eMin = 0.0;",
      "right" : "eMin = 0.0;",
      "info" : "ExpressionStatement[51219-51230]:ExpressionStatement[51273-51284]"
    }, {
      "left" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
      "right" : "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2]))",
      "info" : "IfStatement[51246-51663]:IfStatement[51300-51717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51379-51521]:Block[51433-51575]"
    }, {
      "left" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
      "right" : "final double tmp = work[j4p2 + 2] / work[j4 - 2];",
      "info" : "VariableDeclarationStatement[51393-51442]:VariableDeclarationStatement[51447-51496]"
    }, {
      "left" : "work[j4] = work[j4p2] * tmp;",
      "right" : "work[j4] = work[j4p2] * tmp;",
      "info" : "ExpressionStatement[51455-51483]:ExpressionStatement[51509-51537]"
    }, {
      "left" : "dN = dN1 * tmp;",
      "right" : "dN = dN1 * tmp;",
      "info" : "ExpressionStatement[51496-51511]:ExpressionStatement[51550-51565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51527-51663]:Block[51581-51717]"
    }, {
      "left" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "right" : "work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);",
      "info" : "ExpressionStatement[51541-51597]:ExpressionStatement[51595-51651]"
    }, {
      "left" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);",
      "right" : "dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);",
      "info" : "ExpressionStatement[51610-51653]:ExpressionStatement[51664-51707]"
    }, {
      "left" : "dMin = Math.min(dMin, dN);",
      "right" : "dMin = Math.min(dMin, dN);",
      "info" : "ExpressionStatement[51672-51698]:ExpressionStatement[51726-51752]"
    }, {
      "left" : "work[j4 + 2] = dN;",
      "right" : "work[j4 + 2] = dN;",
      "info" : "ExpressionStatement[51708-51726]:ExpressionStatement[51762-51780]"
    }, {
      "left" : "work[4 * end - pingPong - 1] = eMin;",
      "right" : "work[4 * end - pingPong - 1] = eMin;",
      "info" : "ExpressionStatement[51735-51771]:ExpressionStatement[51789-51825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52169-61132]:Block[52223-61186]"
    }, {
      "left" : "final double cnst1 = 0.563;",
      "right" : "final double cnst1 = 0.563;",
      "info" : "VariableDeclarationStatement[52180-52207]:VariableDeclarationStatement[52234-52261]"
    }, {
      "left" : "final double cnst2 = 1.010;",
      "right" : "final double cnst2 = 1.010;",
      "info" : "VariableDeclarationStatement[52216-52243]:VariableDeclarationStatement[52270-52297]"
    }, {
      "left" : "final double cnst3 = 1.05;",
      "right" : "final double cnst3 = 1.05;",
      "info" : "VariableDeclarationStatement[52252-52278]:VariableDeclarationStatement[52306-52332]"
    }, {
      "left" : "if (dMin <= 0.0)",
      "right" : "if (dMin <= 0.0)",
      "info" : "IfStatement[52404-52501]:IfStatement[52458-52555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52421-52501]:Block[52475-52555]"
    }, {
      "left" : "tau = -dMin;",
      "right" : "tau = -dMin;",
      "info" : "ExpressionStatement[52435-52447]:ExpressionStatement[52489-52501]"
    }, {
      "left" : "tType = -1;",
      "right" : "tType = -1;",
      "info" : "ExpressionStatement[52460-52471]:ExpressionStatement[52514-52525]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[52484-52491]:ReturnStatement[52538-52545]"
    }, {
      "left" : "int nn = 4 * end + pingPong - 1;",
      "right" : "int nn = 4 * end + pingPong - 1;",
      "info" : "VariableDeclarationStatement[52511-52543]:VariableDeclarationStatement[52565-52597]"
    }, {
      "left" : "switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 2) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }",
      "right" : "switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 3) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }",
      "info" : "SwitchStatement[52552-61125]:SwitchStatement[52606-61179]"
    }, {
      "left" : "case 0 :",
      "right" : "case 0 :",
      "info" : "SwitchCase[52581-52589]:SwitchCase[52635-52643]"
    }, {
      "left" : "if (dMin == dN || dMin == dN1)",
      "right" : "if (dMin == dN || dMin == dN1)",
      "info" : "IfStatement[52634-57780]:IfStatement[52688-57834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52665-55818]:Block[52719-55872]"
    }, {
      "left" : "double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);",
      "right" : "double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);",
      "info" : "VariableDeclarationStatement[52684-52746]:VariableDeclarationStatement[52738-52800]"
    }, {
      "left" : "double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);",
      "right" : "double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);",
      "info" : "VariableDeclarationStatement[52763-52825]:VariableDeclarationStatement[52817-52879]"
    }, {
      "left" : "double a2 = work[nn - 7] + work[nn - 5];",
      "right" : "double a2 = work[nn - 7] + work[nn - 5];",
      "info" : "VariableDeclarationStatement[52842-52882]:VariableDeclarationStatement[52896-52936]"
    }, {
      "left" : "if (dMin == dN && dMin1 == dN1)",
      "right" : "if (dMin == dN && dMin1 == dN1)",
      "info" : "IfStatement[52900-55804]:IfStatement[52954-55858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52932-53755]:Block[52986-53809]"
    }, {
      "left" : "final double gap2 = dMin2 - a2 - dMin2 * 0.25;",
      "right" : "final double gap2 = dMin2 - a2 - dMin2 * 0.25;",
      "info" : "VariableDeclarationStatement[52992-53038]:VariableDeclarationStatement[53046-53092]"
    }, {
      "left" : "final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));",
      "right" : "final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));",
      "info" : "VariableDeclarationStatement[53059-53148]:VariableDeclarationStatement[53113-53202]"
    }, {
      "left" : "if (gap1 > 0.0 && gap1 > b1)",
      "right" : "if (gap1 > 0.0 && gap1 > b1)",
      "info" : "IfStatement[53169-53737]:IfStatement[53223-53791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53198-53334]:Block[53252-53388]"
    }, {
      "left" : "tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",
      "right" : "tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",
      "info" : "ExpressionStatement[53224-53276]:ExpressionStatement[53278-53330]"
    }, {
      "left" : "tType = -2;",
      "right" : "tType = -2;",
      "info" : "ExpressionStatement[53301-53312]:ExpressionStatement[53355-53366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53340-53737]:Block[53394-53791]"
    }, {
      "left" : "double s = 0.0;",
      "right" : "double s = 0.0;",
      "info" : "VariableDeclarationStatement[53366-53381]:VariableDeclarationStatement[53420-53435]"
    }, {
      "left" : "if (dN > b1)",
      "right" : "if (dN > b1)",
      "info" : "IfStatement[53406-53487]:IfStatement[53460-53541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53419-53487]:Block[53473-53541]"
    }, {
      "left" : "s = dN - b1;",
      "right" : "s = dN - b1;",
      "info" : "ExpressionStatement[53449-53461]:ExpressionStatement[53503-53515]"
    }, {
      "left" : "if (a2 > (b1 + b2))",
      "right" : "if (a2 > (b1 + b2))",
      "info" : "IfStatement[53512-53620]:IfStatement[53566-53674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53532-53620]:Block[53586-53674]"
    }, {
      "left" : "s = Math.min(s, a2 - (b1 + b2));",
      "right" : "s = Math.min(s, a2 - (b1 + b2));",
      "info" : "ExpressionStatement[53562-53594]:ExpressionStatement[53616-53648]"
    }, {
      "left" : "tau   = Math.max(s, 0.333 * dMin);",
      "right" : "tau   = Math.max(s, 0.333 * dMin);",
      "info" : "ExpressionStatement[53645-53679]:ExpressionStatement[53699-53733]"
    }, {
      "left" : "tType = -3;",
      "right" : "tType = -3;",
      "info" : "ExpressionStatement[53704-53715]:ExpressionStatement[53758-53769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53761-55804]:Block[53815-55858]"
    }, {
      "left" : "tType = -4;",
      "right" : "tType = -4;",
      "info" : "ExpressionStatement[53814-53825]:ExpressionStatement[53868-53879]"
    }, {
      "left" : "double s = 0.25 * dMin;",
      "right" : "double s = 0.25 * dMin;",
      "info" : "VariableDeclarationStatement[53846-53869]:VariableDeclarationStatement[53900-53923]"
    }, {
      "left" : "double gam;",
      "right" : "double gam;",
      "info" : "VariableDeclarationStatement[53890-53901]:VariableDeclarationStatement[53944-53955]"
    }, {
      "left" : "int np;",
      "right" : "int np;",
      "info" : "VariableDeclarationStatement[53922-53929]:VariableDeclarationStatement[53976-53983]"
    }, {
      "left" : "if (dMin == dN)",
      "right" : "if (dMin == dN)",
      "info" : "IfStatement[53950-54832]:IfStatement[54004-54886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53966-54275]:Block[54020-54329]"
    }, {
      "left" : "gam = dN;",
      "right" : "gam = dN;",
      "info" : "ExpressionStatement[53992-54001]:ExpressionStatement[54046-54055]"
    }, {
      "left" : "a2 = 0.0;",
      "right" : "a2 = 0.0;",
      "info" : "ExpressionStatement[54026-54035]:ExpressionStatement[54080-54089]"
    }, {
      "left" : "if (work[nn - 5]  >  work[nn - 7])",
      "right" : "if (work[nn - 5]  >  work[nn - 7])",
      "info" : "IfStatement[54060-54158]:IfStatement[54114-54212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54095-54158]:Block[54149-54212]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54125-54132]:ReturnStatement[54179-54186]"
    }, {
      "left" : "b2 = work[nn - 5] / work[nn - 7];",
      "right" : "b2 = work[nn - 5] / work[nn - 7];",
      "info" : "ExpressionStatement[54183-54216]:ExpressionStatement[54237-54270]"
    }, {
      "left" : "np = nn - 9;",
      "right" : "np = nn - 9;",
      "info" : "ExpressionStatement[54241-54253]:ExpressionStatement[54295-54307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54281-54832]:Block[54335-54886]"
    }, {
      "left" : "np = nn - 2 * pingPong;",
      "right" : "np = nn - 2 * pingPong;",
      "info" : "ExpressionStatement[54307-54330]:ExpressionStatement[54361-54384]"
    }, {
      "left" : "b2 = work[np - 2];",
      "right" : "b2 = work[np - 2];",
      "info" : "ExpressionStatement[54355-54373]:ExpressionStatement[54409-54427]"
    }, {
      "left" : "gam = dN1;",
      "right" : "gam = dN1;",
      "info" : "ExpressionStatement[54398-54408]:ExpressionStatement[54452-54462]"
    }, {
      "left" : "if (work[np - 4]  >  work[np - 2])",
      "right" : "if (work[np - 4]  >  work[np - 2])",
      "info" : "IfStatement[54433-54531]:IfStatement[54487-54585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54468-54531]:Block[54522-54585]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54498-54505]:ReturnStatement[54552-54559]"
    }, {
      "left" : "a2 = work[np - 4] / work[np - 2];",
      "right" : "a2 = work[np - 4] / work[np - 2];",
      "info" : "ExpressionStatement[54556-54589]:ExpressionStatement[54610-54643]"
    }, {
      "left" : "if (work[nn - 9]  >  work[nn - 11])",
      "right" : "if (work[nn - 9]  >  work[nn - 11])",
      "info" : "IfStatement[54614-54713]:IfStatement[54668-54767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54650-54713]:Block[54704-54767]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54680-54687]:ReturnStatement[54734-54741]"
    }, {
      "left" : "b2 = work[nn - 9] / work[nn - 11];",
      "right" : "b2 = work[nn - 9] / work[nn - 11];",
      "info" : "ExpressionStatement[54738-54772]:ExpressionStatement[54792-54826]"
    }, {
      "left" : "np = nn - 13;",
      "right" : "np = nn - 13;",
      "info" : "ExpressionStatement[54797-54810]:ExpressionStatement[54851-54864]"
    }, {
      "left" : "a2 = a2 + b2;",
      "right" : "a2 = a2 + b2;",
      "info" : "ExpressionStatement[54933-54946]:ExpressionStatement[54987-55000]"
    }, {
      "left" : "for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "right" : "for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "info" : "ForStatement[54967-55535]:ForStatement[55021-55589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55026-55535]:Block[55080-55589]"
    }, {
      "left" : "if(b2 == 0.0)",
      "right" : "if(b2 == 0.0)",
      "info" : "IfStatement[55052-55128]:IfStatement[55106-55182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55066-55128]:Block[55120-55182]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55096-55102]:BreakStatement[55150-55156]"
    }, {
      "left" : "b1 = b2;",
      "right" : "b1 = b2;",
      "info" : "ExpressionStatement[55153-55161]:ExpressionStatement[55207-55215]"
    }, {
      "left" : "if (work[i4]  >  work[i4 - 2])",
      "right" : "if (work[i4]  >  work[i4 - 2])",
      "info" : "IfStatement[55186-55280]:IfStatement[55240-55334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55217-55280]:Block[55271-55334]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55247-55254]:ReturnStatement[55301-55308]"
    }, {
      "left" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
      "right" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
      "info" : "ExpressionStatement[55305-55341]:ExpressionStatement[55359-55395]"
    }, {
      "left" : "a2 = a2 + b2;",
      "right" : "a2 = a2 + b2;",
      "info" : "ExpressionStatement[55366-55379]:ExpressionStatement[55420-55433]"
    }, {
      "left" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
      "right" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
      "info" : "IfStatement[55404-55513]:IfStatement[55458-55567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55451-55513]:Block[55505-55567]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55481-55487]:BreakStatement[55535-55541]"
    }, {
      "left" : "a2 = cnst3 * a2;",
      "right" : "a2 = cnst3 * a2;",
      "info" : "ExpressionStatement[55556-55572]:ExpressionStatement[55610-55626]"
    }, {
      "left" : "if (a2 < cnst1)",
      "right" : "if (a2 < cnst1)",
      "info" : "IfStatement[55651-55756]:IfStatement[55705-55810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55667-55756]:Block[55721-55810]"
    }, {
      "left" : "s = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
      "right" : "s = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
      "info" : "ExpressionStatement[55693-55734]:ExpressionStatement[55747-55788]"
    }, {
      "left" : "tau = s;",
      "right" : "tau = s;",
      "info" : "ExpressionStatement[55777-55785]:ExpressionStatement[55831-55839]"
    }, {
      "left" : "if (dMin == dN2)",
      "right" : "if (dMin == dN2)",
      "info" : "IfStatement[55824-57780]:IfStatement[55878-57834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55841-57409]:Block[55895-57463]"
    }, {
      "left" : "tType = -5;",
      "right" : "tType = -5;",
      "info" : "ExpressionStatement[55887-55898]:ExpressionStatement[55941-55952]"
    }, {
      "left" : "double s = 0.25 * dMin;",
      "right" : "double s = 0.25 * dMin;",
      "info" : "VariableDeclarationStatement[55915-55938]:VariableDeclarationStatement[55969-55992]"
    }, {
      "left" : "final int np = nn - 2 * pingPong;",
      "right" : "final int np = nn - 2 * pingPong;",
      "info" : "VariableDeclarationStatement[56027-56060]:VariableDeclarationStatement[56081-56114]"
    }, {
      "left" : "double b1 = work[np - 2];",
      "right" : "double b1 = work[np - 2];",
      "info" : "VariableDeclarationStatement[56077-56102]:VariableDeclarationStatement[56131-56156]"
    }, {
      "left" : "double b2 = work[np - 6];",
      "right" : "double b2 = work[np - 6];",
      "info" : "VariableDeclarationStatement[56119-56144]:VariableDeclarationStatement[56173-56198]"
    }, {
      "left" : "final double gam = dN2;",
      "right" : "final double gam = dN2;",
      "info" : "VariableDeclarationStatement[56161-56184]:VariableDeclarationStatement[56215-56238]"
    }, {
      "left" : "if (work[np - 8] > b2 || work[np - 4] > b1)",
      "right" : "if (work[np - 8] > b2 || work[np - 4] > b1)",
      "info" : "IfStatement[56201-56292]:IfStatement[56255-56346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56245-56292]:Block[56299-56346]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56267-56274]:ReturnStatement[56321-56328]"
    }, {
      "left" : "double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);",
      "right" : "double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);",
      "info" : "VariableDeclarationStatement[56309-56367]:VariableDeclarationStatement[56363-56421]"
    }, {
      "left" : "if (end - start > 2)",
      "right" : "if (end - start > 3)",
      "info" : "IfStatement[56460-57223]:IfStatement[56514-57277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56481-57223]:Block[56535-57277]"
    }, {
      "left" : "b2 = work[nn - 13] / work[nn - 15];",
      "right" : "b2 = work[nn - 13] / work[nn - 15];",
      "info" : "ExpressionStatement[56503-56538]:ExpressionStatement[56557-56592]"
    }, {
      "left" : "a2 = a2 + b2;",
      "right" : "a2 = a2 + b2;",
      "info" : "ExpressionStatement[56559-56572]:ExpressionStatement[56613-56626]"
    }, {
      "left" : "for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "right" : "for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "info" : "ForStatement[56593-57168]:ForStatement[56647-57222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56657-57168]:Block[56711-57222]"
    }, {
      "left" : "if (b2 == 0.0)",
      "right" : "if (b2 == 0.0)",
      "info" : "IfStatement[56683-56760]:IfStatement[56737-56814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56698-56760]:Block[56752-56814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56728-56734]:BreakStatement[56782-56788]"
    }, {
      "left" : "b1 = b2;",
      "right" : "b1 = b2;",
      "info" : "ExpressionStatement[56785-56793]:ExpressionStatement[56839-56847]"
    }, {
      "left" : "if (work[i4]  >  work[i4 - 2])",
      "right" : "if (work[i4]  >  work[i4 - 2])",
      "info" : "IfStatement[56818-56912]:IfStatement[56872-56966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56849-56912]:Block[56903-56966]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56879-56886]:ReturnStatement[56933-56940]"
    }, {
      "left" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
      "right" : "b2 = b2 * (work[i4] / work[i4 - 2]);",
      "info" : "ExpressionStatement[56937-56973]:ExpressionStatement[56991-57027]"
    }, {
      "left" : "a2 = a2 + b2;",
      "right" : "a2 = a2 + b2;",
      "info" : "ExpressionStatement[56998-57011]:ExpressionStatement[57052-57065]"
    }, {
      "left" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
      "right" : "if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)",
      "info" : "IfStatement[57036-57146]:IfStatement[57090-57200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57084-57146]:Block[57138-57200]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57114-57120]:BreakStatement[57168-57174]"
    }, {
      "left" : "a2 = cnst3 * a2;",
      "right" : "a2 = cnst3 * a2;",
      "info" : "ExpressionStatement[57189-57205]:ExpressionStatement[57243-57259]"
    }, {
      "left" : "if (a2 < cnst1)",
      "right" : "if (a2 < cnst1)",
      "info" : "IfStatement[57241-57394]:IfStatement[57295-57448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57257-57340]:Block[57311-57394]"
    }, {
      "left" : "tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
      "right" : "tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
      "info" : "ExpressionStatement[57279-57322]:ExpressionStatement[57333-57376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57346-57394]:Block[57400-57448]"
    }, {
      "left" : "tau = s;",
      "right" : "tau = s;",
      "info" : "ExpressionStatement[57368-57376]:ExpressionStatement[57422-57430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57415-57780]:Block[57469-57834]"
    }, {
      "left" : "if (tType == -6)",
      "right" : "if (tType == -6)",
      "info" : "IfStatement[57489-57703]:IfStatement[57543-57757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57506-57567]:Block[57560-57621]"
    }, {
      "left" : "g += 0.333 * (1 - g);",
      "right" : "g += 0.333 * (1 - g);",
      "info" : "ExpressionStatement[57528-57549]:ExpressionStatement[57582-57603]"
    }, {
      "left" : "if (tType == -18)",
      "right" : "if (tType == -18)",
      "info" : "IfStatement[57573-57703]:IfStatement[57627-57757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57591-57648]:Block[57645-57702]"
    }, {
      "left" : "g = 0.25 * 0.333;",
      "right" : "g = 0.25 * 0.333;",
      "info" : "ExpressionStatement[57613-57630]:ExpressionStatement[57667-57684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57654-57703]:Block[57708-57757]"
    }, {
      "left" : "g = 0.25;",
      "right" : "g = 0.25;",
      "info" : "ExpressionStatement[57676-57685]:ExpressionStatement[57730-57739]"
    }, {
      "left" : "tau   = g * dMin;",
      "right" : "tau   = g * dMin;",
      "info" : "ExpressionStatement[57720-57737]:ExpressionStatement[57774-57791]"
    }, {
      "left" : "tType = -6;",
      "right" : "tType = -6;",
      "info" : "ExpressionStatement[57754-57765]:ExpressionStatement[57808-57819]"
    }, {
      "left" : "case 1 :",
      "right" : "case 1 :",
      "info" : "SwitchCase[57809-57817]:SwitchCase[57863-57871]"
    }, {
      "left" : "if (dMin1 == dN1 && dMin2 == dN2)",
      "right" : "if (dMin1 == dN1 && dMin2 == dN2)",
      "info" : "IfStatement[57895-59429]:IfStatement[57949-59483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57929-59223]:Block[57983-59277]"
    }, {
      "left" : "tType = -7;",
      "right" : "tType = -7;",
      "info" : "ExpressionStatement[57982-57993]:ExpressionStatement[58036-58047]"
    }, {
      "left" : "double s = 0.333 * dMin1;",
      "right" : "double s = 0.333 * dMin1;",
      "info" : "VariableDeclarationStatement[58010-58035]:VariableDeclarationStatement[58064-58089]"
    }, {
      "left" : "if (work[nn - 5] > work[nn - 7])",
      "right" : "if (work[nn - 5] > work[nn - 7])",
      "info" : "IfStatement[58052-58132]:IfStatement[58106-58186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58085-58132]:Block[58139-58186]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58107-58114]:ReturnStatement[58161-58168]"
    }, {
      "left" : "double b1 = work[nn - 5] / work[nn - 7];",
      "right" : "double b1 = work[nn - 5] / work[nn - 7];",
      "info" : "VariableDeclarationStatement[58149-58189]:VariableDeclarationStatement[58203-58243]"
    }, {
      "left" : "double b2 = b1;",
      "right" : "double b2 = b1;",
      "info" : "VariableDeclarationStatement[58206-58221]:VariableDeclarationStatement[58260-58275]"
    }, {
      "left" : "if (b2 != 0.0)",
      "right" : "if (b2 != 0.0)",
      "info" : "IfStatement[58238-58784]:IfStatement[58292-58838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58253-58784]:Block[58307-58838]"
    }, {
      "left" : "for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "right" : "for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "info" : "ForStatement[58275-58766]:ForStatement[58329-58820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58355-58766]:Block[58409-58820]"
    }, {
      "left" : "final double oldB1 = b1;",
      "right" : "final double oldB1 = b1;",
      "info" : "VariableDeclarationStatement[58381-58405]:VariableDeclarationStatement[58435-58459]"
    }, {
      "left" : "if (work[i4] > work[i4 - 2])",
      "right" : "if (work[i4] > work[i4 - 2])",
      "info" : "IfStatement[58430-58522]:IfStatement[58484-58576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58459-58522]:Block[58513-58576]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[58489-58496]:ReturnStatement[58543-58550]"
    }, {
      "left" : "b1 = b1 * (work[i4] / work[i4 - 2]);",
      "right" : "b1 = b1 * (work[i4] / work[i4 - 2]);",
      "info" : "ExpressionStatement[58547-58583]:ExpressionStatement[58601-58637]"
    }, {
      "left" : "b2 = b2 + b1;",
      "right" : "b2 = b2 + b1;",
      "info" : "ExpressionStatement[58608-58621]:ExpressionStatement[58662-58675]"
    }, {
      "left" : "if (100 * Math.max(b1, oldB1) < b2)",
      "right" : "if (100 * Math.max(b1, oldB1) < b2)",
      "info" : "IfStatement[58646-58744]:IfStatement[58700-58798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58682-58744]:Block[58736-58798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58712-58718]:BreakStatement[58766-58772]"
    }, {
      "left" : "b2 = Math.sqrt(cnst3 * b2);",
      "right" : "b2 = Math.sqrt(cnst3 * b2);",
      "info" : "ExpressionStatement[58801-58828]:ExpressionStatement[58855-58882]"
    }, {
      "left" : "final double a2 = dMin1 / (1 + b2 * b2);",
      "right" : "final double a2 = dMin1 / (1 + b2 * b2);",
      "info" : "VariableDeclarationStatement[58845-58885]:VariableDeclarationStatement[58899-58939]"
    }, {
      "left" : "final double gap2 = 0.5 * dMin2 - a2;",
      "right" : "final double gap2 = 0.5 * dMin2 - a2;",
      "info" : "VariableDeclarationStatement[58902-58939]:VariableDeclarationStatement[58956-58993]"
    }, {
      "left" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
      "right" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
      "info" : "IfStatement[58956-59209]:IfStatement[59010-59263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58990-59090]:Block[59044-59144]"
    }, {
      "left" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
      "right" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
      "info" : "ExpressionStatement[59012-59072]:ExpressionStatement[59066-59126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59096-59209]:Block[59150-59263]"
    }, {
      "left" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
      "right" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
      "info" : "ExpressionStatement[59118-59159]:ExpressionStatement[59172-59213]"
    }, {
      "left" : "tType = -8;",
      "right" : "tType = -8;",
      "info" : "ExpressionStatement[59180-59191]:ExpressionStatement[59234-59245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59229-59429]:Block[59283-59483]"
    }, {
      "left" : "tau = 0.25 * dMin1;",
      "right" : "tau = 0.25 * dMin1;",
      "info" : "ExpressionStatement[59275-59294]:ExpressionStatement[59329-59348]"
    }, {
      "left" : "if (dMin1 == dN1)",
      "right" : "if (dMin1 == dN1)",
      "info" : "IfStatement[59311-59387]:IfStatement[59365-59441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59329-59387]:Block[59383-59441]"
    }, {
      "left" : "tau = 0.5 * dMin1;",
      "right" : "tau = 0.5 * dMin1;",
      "info" : "ExpressionStatement[59351-59369]:ExpressionStatement[59405-59423]"
    }, {
      "left" : "tType = -9;",
      "right" : "tType = -9;",
      "info" : "ExpressionStatement[59404-59415]:ExpressionStatement[59458-59469]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[59458-59466]:SwitchCase[59512-59520]"
    }, {
      "left" : "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7])",
      "right" : "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7])",
      "info" : "IfStatement[59577-60959]:IfStatement[59631-61013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59630-60871]:Block[59684-60925]"
    }, {
      "left" : "tType = -10;",
      "right" : "tType = -10;",
      "info" : "ExpressionStatement[59648-59660]:ExpressionStatement[59702-59714]"
    }, {
      "left" : "final double s = 0.333 * dMin2;",
      "right" : "final double s = 0.333 * dMin2;",
      "info" : "VariableDeclarationStatement[59677-59708]:VariableDeclarationStatement[59731-59762]"
    }, {
      "left" : "if (work[nn - 5] > work[nn - 7])",
      "right" : "if (work[nn - 5] > work[nn - 7])",
      "info" : "IfStatement[59725-59805]:IfStatement[59779-59859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59758-59805]:Block[59812-59859]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[59780-59787]:ReturnStatement[59834-59841]"
    }, {
      "left" : "double b1 = work[nn - 5] / work[nn - 7];",
      "right" : "double b1 = work[nn - 5] / work[nn - 7];",
      "info" : "VariableDeclarationStatement[59822-59862]:VariableDeclarationStatement[59876-59916]"
    }, {
      "left" : "double b2 = b1;",
      "right" : "double b2 = b1;",
      "info" : "VariableDeclarationStatement[59879-59894]:VariableDeclarationStatement[59933-59948]"
    }, {
      "left" : "if (b2 != 0.0)",
      "right" : "if (b2 != 0.0)",
      "info" : "IfStatement[59911-60379]:IfStatement[59965-60433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59925-60379]:Block[59979-60433]"
    }, {
      "left" : "for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "right" : "for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4)",
      "info" : "ForStatement[59947-60361]:ForStatement[60001-60415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60026-60361]:Block[60080-60415]"
    }, {
      "left" : "if (work[i4] > work[i4 - 2])",
      "right" : "if (work[i4] > work[i4 - 2])",
      "info" : "IfStatement[60052-60144]:IfStatement[60106-60198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60081-60144]:Block[60135-60198]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60111-60118]:ReturnStatement[60165-60172]"
    }, {
      "left" : "b1 *= work[i4] / work[i4 - 2];",
      "right" : "b1 *= work[i4] / work[i4 - 2];",
      "info" : "ExpressionStatement[60169-60199]:ExpressionStatement[60223-60253]"
    }, {
      "left" : "b2 += b1;",
      "right" : "b2 += b1;",
      "info" : "ExpressionStatement[60224-60233]:ExpressionStatement[60278-60287]"
    }, {
      "left" : "if (100 * b1 < b2)",
      "right" : "if (100 * b1 < b2)",
      "info" : "IfStatement[60258-60339]:IfStatement[60312-60393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60277-60339]:Block[60331-60393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60307-60313]:BreakStatement[60361-60367]"
    }, {
      "left" : "b2 = Math.sqrt(cnst3 * b2);",
      "right" : "b2 = Math.sqrt(cnst3 * b2);",
      "info" : "ExpressionStatement[60396-60423]:ExpressionStatement[60450-60477]"
    }, {
      "left" : "final double a2 = dMin2 / (1 + b2 * b2);",
      "right" : "final double a2 = dMin2 / (1 + b2 * b2);",
      "info" : "VariableDeclarationStatement[60440-60480]:VariableDeclarationStatement[60494-60534]"
    }, {
      "left" : "final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;",
      "right" : "final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;",
      "info" : "VariableDeclarationStatement[60497-60619]:VariableDeclarationStatement[60551-60673]"
    }, {
      "left" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
      "right" : "if (gap2 > 0.0 && gap2 > b2 * a2)",
      "info" : "IfStatement[60636-60857]:IfStatement[60690-60911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60670-60770]:Block[60724-60824]"
    }, {
      "left" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
      "right" : "tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",
      "info" : "ExpressionStatement[60692-60752]:ExpressionStatement[60746-60806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60776-60857]:Block[60830-60911]"
    }, {
      "left" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
      "right" : "tau = Math.max(s, a2 * (1 - cnst2 * b2));",
      "info" : "ExpressionStatement[60798-60839]:ExpressionStatement[60852-60893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60877-60959]:Block[60931-61013]"
    }, {
      "left" : "tau   = 0.25 * dMin2;",
      "right" : "tau   = 0.25 * dMin2;",
      "info" : "ExpressionStatement[60895-60916]:ExpressionStatement[60949-60970]"
    }, {
      "left" : "tType = -11;",
      "right" : "tType = -11;",
      "info" : "ExpressionStatement[60933-60945]:ExpressionStatement[60987-60999]"
    }, {
      "left" : "tau   = 0.0;",
      "right" : "tau   = 0.0;",
      "info" : "ExpressionStatement[61078-61090]:ExpressionStatement[61132-61144]"
    }, {
      "left" : "tType = -12;",
      "right" : "tType = -12;",
      "info" : "ExpressionStatement[61103-61115]:ExpressionStatement[61157-61169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61264-61789]:Block[61318-61843]"
    }, {
      "left" : "if (shift < sigma)",
      "right" : "if (shift < sigma)",
      "info" : "IfStatement[61488-61783]:IfStatement[61542-61837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61507-61654]:Block[61561-61708]"
    }, {
      "left" : "sigmaLow += shift;",
      "right" : "sigmaLow += shift;",
      "info" : "ExpressionStatement[61521-61539]:ExpressionStatement[61575-61593]"
    }, {
      "left" : "final double t = sigma + sigmaLow;",
      "right" : "final double t = sigma + sigmaLow;",
      "info" : "VariableDeclarationStatement[61552-61586]:VariableDeclarationStatement[61606-61640]"
    }, {
      "left" : "sigmaLow -= t - sigma;",
      "right" : "sigmaLow -= t - sigma;",
      "info" : "ExpressionStatement[61599-61621]:ExpressionStatement[61653-61675]"
    }, {
      "left" : "sigma = t;",
      "right" : "sigma = t;",
      "info" : "ExpressionStatement[61634-61644]:ExpressionStatement[61688-61698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61660-61783]:Block[61714-61837]"
    }, {
      "left" : "final double t = sigma + shift;",
      "right" : "final double t = sigma + shift;",
      "info" : "VariableDeclarationStatement[61674-61705]:VariableDeclarationStatement[61728-61759]"
    }, {
      "left" : "sigmaLow += sigma - (t - shift);",
      "right" : "sigmaLow += sigma - (t - shift);",
      "info" : "ExpressionStatement[61718-61750]:ExpressionStatement[61772-61804]"
    }, {
      "left" : "sigma = t;",
      "right" : "sigma = t;",
      "info" : "ExpressionStatement[61763-61773]:ExpressionStatement[61817-61827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61869-62730]:Block[61923-62784]"
    }, {
      "left" : "final int m = main.length;",
      "right" : "final int m = main.length;",
      "info" : "VariableDeclarationStatement[61880-61906]:VariableDeclarationStatement[61934-61960]"
    }, {
      "left" : "eigenvectors = new ArrayRealVector[m];",
      "right" : "eigenvectors = new ArrayRealVector[m];",
      "info" : "ExpressionStatement[61915-61953]:ExpressionStatement[61969-62007]"
    }, {
      "left" : "final double[] d = new double[m];",
      "right" : "final double[] d = new double[m];",
      "info" : "VariableDeclarationStatement[62024-62057]:VariableDeclarationStatement[62078-62111]"
    }, {
      "left" : "final double[] l = new double[m - 1];",
      "right" : "final double[] l = new double[m - 1];",
      "info" : "VariableDeclarationStatement[62066-62103]:VariableDeclarationStatement[62120-62157]"
    }, {
      "left" : "final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;",
      "right" : "final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;",
      "info" : "VariableDeclarationStatement[62162-62263]:VariableDeclarationStatement[62216-62317]"
    }, {
      "left" : "double di = main[0]+mu;",
      "right" : "double di = main[0]+mu;",
      "info" : "VariableDeclarationStatement[62272-62295]:VariableDeclarationStatement[62326-62349]"
    }, {
      "left" : "d[0] = di;",
      "right" : "d[0] = di;",
      "info" : "ExpressionStatement[62304-62314]:ExpressionStatement[62358-62368]"
    }, {
      "left" : "for (int i = 1; i < m; ++i)",
      "right" : "for (int i = 1; i < m; ++i)",
      "info" : "ForStatement[62323-62566]:ForStatement[62377-62620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62351-62566]:Block[62405-62620]"
    }, {
      "left" : "final double eiM1  = secondary[i - 1];",
      "right" : "final double eiM1  = secondary[i - 1];",
      "info" : "VariableDeclarationStatement[62365-62403]:VariableDeclarationStatement[62419-62457]"
    }, {
      "left" : "final double ratio = eiM1 / di;",
      "right" : "final double ratio = eiM1 / di;",
      "info" : "VariableDeclarationStatement[62416-62447]:VariableDeclarationStatement[62470-62501]"
    }, {
      "left" : "di       = main[i] - eiM1 * ratio + mu;",
      "right" : "di       = main[i] - eiM1 * ratio + mu;",
      "info" : "ExpressionStatement[62460-62499]:ExpressionStatement[62514-62553]"
    }, {
      "left" : "l[i - 1] = ratio;",
      "right" : "l[i - 1] = ratio;",
      "info" : "ExpressionStatement[62512-62529]:ExpressionStatement[62566-62583]"
    }, {
      "left" : "d[i]     = di;",
      "right" : "d[i]     = di;",
      "info" : "ExpressionStatement[62542-62556]:ExpressionStatement[62596-62610]"
    }, {
      "left" : "for (int i = 0; i < m; ++i)",
      "right" : "for (int i = 0; i < m; ++i)",
      "info" : "ForStatement[62608-62723]:ForStatement[62662-62777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62636-62723]:Block[62690-62777]"
    }, {
      "left" : "eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",
      "right" : "eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",
      "info" : "ExpressionStatement[62650-62713]:ExpressionStatement[62704-62767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63300-64975]:Block[63354-65029]"
    }, {
      "left" : "final int m = main.length;",
      "right" : "final int m = main.length;",
      "info" : "VariableDeclarationStatement[63418-63444]:VariableDeclarationStatement[63472-63498]"
    }, {
      "left" : "stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",
      "right" : "stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",
      "info" : "ExpressionStatement[63453-63509]:ExpressionStatement[63507-63563]"
    }, {
      "left" : "progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",
      "right" : "progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",
      "info" : "ExpressionStatement[63518-63575]:ExpressionStatement[63572-63629]"
    }, {
      "left" : "int r = m - 1;",
      "right" : "int r = m - 1;",
      "info" : "VariableDeclarationStatement[63697-63711]:VariableDeclarationStatement[63751-63765]"
    }, {
      "left" : "double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);",
      "right" : "double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);",
      "info" : "VariableDeclarationStatement[63720-63787]:VariableDeclarationStatement[63774-63841]"
    }, {
      "left" : "int sixI = 0;",
      "right" : "int sixI = 0;",
      "info" : "VariableDeclarationStatement[63796-63809]:VariableDeclarationStatement[63850-63863]"
    }, {
      "left" : "for (int i = 0; i < m - 1; ++i)",
      "right" : "for (int i = 0; i < m - 1; ++i)",
      "info" : "ForStatement[63818-64077]:ForStatement[63872-64131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63850-64077]:Block[63904-64131]"
    }, {
      "left" : "final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);",
      "right" : "final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);",
      "info" : "VariableDeclarationStatement[63864-63947]:VariableDeclarationStatement[63918-64001]"
    }, {
      "left" : "if (absG < minG)",
      "right" : "if (absG < minG)",
      "info" : "IfStatement[63960-64044]:IfStatement[64014-64098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63977-64044]:Block[64031-64098]"
    }, {
      "left" : "r = i;",
      "right" : "r = i;",
      "info" : "ExpressionStatement[63995-64001]:ExpressionStatement[64049-64055]"
    }, {
      "left" : "minG = absG;",
      "right" : "minG = absG;",
      "info" : "ExpressionStatement[64018-64030]:ExpressionStatement[64072-64084]"
    }, {
      "left" : "sixI += 6;",
      "right" : "sixI += 6;",
      "info" : "ExpressionStatement[64057-64067]:ExpressionStatement[64111-64121]"
    }, {
      "left" : "double[] eigenvector = new double[m];",
      "right" : "double[] eigenvector = new double[m];",
      "info" : "VariableDeclarationStatement[64213-64250]:VariableDeclarationStatement[64267-64304]"
    }, {
      "left" : "double n2 = 1;",
      "right" : "double n2 = 1;",
      "info" : "VariableDeclarationStatement[64259-64273]:VariableDeclarationStatement[64313-64327]"
    }, {
      "left" : "eigenvector[r] = 1;",
      "right" : "eigenvector[r] = 1;",
      "info" : "ExpressionStatement[64282-64301]:ExpressionStatement[64336-64355]"
    }, {
      "left" : "double z = 1;",
      "right" : "double z = 1;",
      "info" : "VariableDeclarationStatement[64310-64323]:VariableDeclarationStatement[64364-64377]"
    }, {
      "left" : "for (int i = r - 1; i >= 0; --i)",
      "right" : "for (int i = r - 1; i >= 0; --i)",
      "info" : "ForStatement[64332-64468]:ForStatement[64386-64522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64365-64468]:Block[64419-64522]"
    }, {
      "left" : "z *= -work[6 * i + 2];",
      "right" : "z *= -work[6 * i + 2];",
      "info" : "ExpressionStatement[64379-64401]:ExpressionStatement[64433-64455]"
    }, {
      "left" : "eigenvector[i] = z;",
      "right" : "eigenvector[i] = z;",
      "info" : "ExpressionStatement[64414-64433]:ExpressionStatement[64468-64487]"
    }, {
      "left" : "n2 += z * z;",
      "right" : "n2 += z * z;",
      "info" : "ExpressionStatement[64446-64458]:ExpressionStatement[64500-64512]"
    }, {
      "left" : "z = 1;",
      "right" : "z = 1;",
      "info" : "ExpressionStatement[64477-64483]:ExpressionStatement[64531-64537]"
    }, {
      "left" : "for (int i = r + 1; i < m; ++i)",
      "right" : "for (int i = r + 1; i < m; ++i)",
      "info" : "ForStatement[64492-64627]:ForStatement[64546-64681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64524-64627]:Block[64578-64681]"
    }, {
      "left" : "z *= -work[6 * i - 1];",
      "right" : "z *= -work[6 * i - 1];",
      "info" : "ExpressionStatement[64538-64560]:ExpressionStatement[64592-64614]"
    }, {
      "left" : "eigenvector[i] = z;",
      "right" : "eigenvector[i] = z;",
      "info" : "ExpressionStatement[64573-64592]:ExpressionStatement[64627-64646]"
    }, {
      "left" : "n2 += z * z;",
      "right" : "n2 += z * z;",
      "info" : "ExpressionStatement[64605-64617]:ExpressionStatement[64659-64671]"
    }, {
      "left" : "final double inv = 1.0 / Math.sqrt(n2);",
      "right" : "final double inv = 1.0 / Math.sqrt(n2);",
      "info" : "VariableDeclarationStatement[64665-64704]:VariableDeclarationStatement[64719-64758]"
    }, {
      "left" : "for (int i = 0; i < m; ++i)",
      "right" : "for (int i = 0; i < m; ++i)",
      "info" : "ForStatement[64713-64787]:ForStatement[64767-64841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64741-64787]:Block[64795-64841]"
    }, {
      "left" : "eigenvector[i] *= inv;",
      "right" : "eigenvector[i] *= inv;",
      "info" : "ExpressionStatement[64755-64777]:ExpressionStatement[64809-64831]"
    }, {
      "left" : "return (transformer == null) ?\n               new ArrayRealVector(eigenvector, false) :\n               new ArrayRealVector(transformer.getQ().operate(eigenvector), false);",
      "right" : "return (transformer == null) ?\n               new ArrayRealVector(eigenvector, false) :\n               new ArrayRealVector(transformer.getQ().operate(eigenvector), false);",
      "info" : "ReturnStatement[64797-64968]:ReturnStatement[64851-65022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65484-66045]:Block[65538-66099]"
    }, {
      "left" : "final int nM1 = d.length - 1;",
      "right" : "final int nM1 = d.length - 1;",
      "info" : "VariableDeclarationStatement[65494-65523]:VariableDeclarationStatement[65548-65577]"
    }, {
      "left" : "double si = -lambda;",
      "right" : "double si = -lambda;",
      "info" : "VariableDeclarationStatement[65532-65552]:VariableDeclarationStatement[65586-65606]"
    }, {
      "left" : "int sixI = 0;",
      "right" : "int sixI = 0;",
      "info" : "VariableDeclarationStatement[65561-65574]:VariableDeclarationStatement[65615-65628]"
    }, {
      "left" : "for (int i = 0; i < nM1; ++i)",
      "right" : "for (int i = 0; i < nM1; ++i)",
      "info" : "ForStatement[65583-65966]:ForStatement[65637-66020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65613-65966]:Block[65667-66020]"
    }, {
      "left" : "final double di   = d[i];",
      "right" : "final double di   = d[i];",
      "info" : "VariableDeclarationStatement[65627-65652]:VariableDeclarationStatement[65681-65706]"
    }, {
      "left" : "final double li   = l[i];",
      "right" : "final double li   = l[i];",
      "info" : "VariableDeclarationStatement[65665-65690]:VariableDeclarationStatement[65719-65744]"
    }, {
      "left" : "final double diP1 = di + si;",
      "right" : "final double diP1 = di + si;",
      "info" : "VariableDeclarationStatement[65703-65731]:VariableDeclarationStatement[65757-65785]"
    }, {
      "left" : "final double liP1 = li * di / diP1;",
      "right" : "final double liP1 = li * di / diP1;",
      "info" : "VariableDeclarationStatement[65744-65779]:VariableDeclarationStatement[65798-65833]"
    }, {
      "left" : "work[sixI]        = si;",
      "right" : "work[sixI]        = si;",
      "info" : "ExpressionStatement[65792-65815]:ExpressionStatement[65846-65869]"
    }, {
      "left" : "work[sixI + 1]    = diP1;",
      "right" : "work[sixI + 1]    = diP1;",
      "info" : "ExpressionStatement[65828-65853]:ExpressionStatement[65882-65907]"
    }, {
      "left" : "work[sixI + 2]    = liP1;",
      "right" : "work[sixI + 2]    = liP1;",
      "info" : "ExpressionStatement[65866-65891]:ExpressionStatement[65920-65945]"
    }, {
      "left" : "si = li * liP1 * si - lambda;",
      "right" : "si = li * liP1 * si - lambda;",
      "info" : "ExpressionStatement[65904-65933]:ExpressionStatement[65958-65987]"
    }, {
      "left" : "sixI += 6;",
      "right" : "sixI += 6;",
      "info" : "ExpressionStatement[65946-65956]:ExpressionStatement[66000-66010]"
    }, {
      "left" : "work[6 * nM1 + 1] = d[nM1] + si;",
      "right" : "work[6 * nM1 + 1] = d[nM1] + si;",
      "info" : "ExpressionStatement[65975-66007]:ExpressionStatement[66029-66061]"
    }, {
      "left" : "work[6 * nM1]     = si;",
      "right" : "work[6 * nM1]     = si;",
      "info" : "ExpressionStatement[66016-66039]:ExpressionStatement[66070-66093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66553-67109]:Block[66607-67163]"
    }, {
      "left" : "final int nM1 = d.length - 1;",
      "right" : "final int nM1 = d.length - 1;",
      "info" : "VariableDeclarationStatement[66563-66592]:VariableDeclarationStatement[66617-66646]"
    }, {
      "left" : "double pi = d[nM1] - lambda;",
      "right" : "double pi = d[nM1] - lambda;",
      "info" : "VariableDeclarationStatement[66601-66629]:VariableDeclarationStatement[66655-66683]"
    }, {
      "left" : "int sixI = 6 * (nM1 - 1);",
      "right" : "int sixI = 6 * (nM1 - 1);",
      "info" : "VariableDeclarationStatement[66638-66663]:VariableDeclarationStatement[66692-66717]"
    }, {
      "left" : "for (int i = nM1 - 1; i >= 0; --i)",
      "right" : "for (int i = nM1 - 1; i >= 0; --i)",
      "info" : "ForStatement[66672-67059]:ForStatement[66726-67113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66707-67059]:Block[66761-67113]"
    }, {
      "left" : "final double di   = d[i];",
      "right" : "final double di   = d[i];",
      "info" : "VariableDeclarationStatement[66721-66746]:VariableDeclarationStatement[66775-66800]"
    }, {
      "left" : "final double li   = l[i];",
      "right" : "final double li   = l[i];",
      "info" : "VariableDeclarationStatement[66759-66784]:VariableDeclarationStatement[66813-66838]"
    }, {
      "left" : "final double diP1 = di * li * li + pi;",
      "right" : "final double diP1 = di * li * li + pi;",
      "info" : "VariableDeclarationStatement[66797-66835]:VariableDeclarationStatement[66851-66889]"
    }, {
      "left" : "final double t    = di / diP1;",
      "right" : "final double t    = di / diP1;",
      "info" : "VariableDeclarationStatement[66848-66878]:VariableDeclarationStatement[66902-66932]"
    }, {
      "left" : "work[sixI +  9]   = pi;",
      "right" : "work[sixI +  9]   = pi;",
      "info" : "ExpressionStatement[66891-66914]:ExpressionStatement[66945-66968]"
    }, {
      "left" : "work[sixI + 10]   = diP1;",
      "right" : "work[sixI + 10]   = diP1;",
      "info" : "ExpressionStatement[66927-66952]:ExpressionStatement[66981-67006]"
    }, {
      "left" : "work[sixI +  5]   = li * t;",
      "right" : "work[sixI +  5]   = li * t;",
      "info" : "ExpressionStatement[66965-66992]:ExpressionStatement[67019-67046]"
    }, {
      "left" : "pi = pi * t - lambda;",
      "right" : "pi = pi * t - lambda;",
      "info" : "ExpressionStatement[67005-67026]:ExpressionStatement[67059-67080]"
    }, {
      "left" : "sixI -= 6;",
      "right" : "sixI -= 6;",
      "info" : "ExpressionStatement[67039-67049]:ExpressionStatement[67093-67103]"
    }, {
      "left" : "work[3] = pi;",
      "right" : "work[3] = pi;",
      "info" : "ExpressionStatement[67068-67081]:ExpressionStatement[67122-67135]"
    }, {
      "left" : "work[4] = pi;",
      "right" : "work[4] = pi;",
      "info" : "ExpressionStatement[67090-67103]:ExpressionStatement[67144-67157]"
    } ]
  },
  "interFileMappings" : { }
}