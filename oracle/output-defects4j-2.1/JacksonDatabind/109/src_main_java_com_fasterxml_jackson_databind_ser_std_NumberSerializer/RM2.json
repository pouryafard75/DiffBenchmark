{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumberSerializer",
      "right" : "NumberSerializer",
      "info" : "TypeDeclaration[570-4342]:TypeDeclaration[570-6468]"
    }, {
      "left" : "public final static NumberSerializer instance = new NumberSerializer(Number.class);",
      "right" : "public final static NumberSerializer instance = new NumberSerializer(Number.class);",
      "info" : "FieldDeclaration[913-1089]:FieldDeclaration[913-1089]"
    }, {
      "left" : "protected final boolean _isInt;",
      "right" : "protected final boolean _isInt;",
      "info" : "FieldDeclaration[1095-1203]:FieldDeclaration[1233-1264]"
    }, {
      "left" : "public NumberSerializer(Class<? extends Number> rawType)",
      "right" : "public NumberSerializer(Class<? extends Number> rawType)",
      "info" : "MethodDeclaration[1209-1467]:MethodDeclaration[1270-1528]"
    }, {
      "left" : "public JsonSerializer<?> createContextual(SerializerProvider prov,\n            BeanProperty property) throws JsonMappingException",
      "right" : "public JsonSerializer<?> createContextual(SerializerProvider prov,\n            BeanProperty property) throws JsonMappingException",
      "info" : "MethodDeclaration[1473-2003]:MethodDeclaration[1534-2211]"
    }, {
      "left" : "public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException",
      "right" : "public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException",
      "info" : "MethodDeclaration[2009-3134]:MethodDeclaration[2217-3342]"
    }, {
      "left" : "public JsonNode getSchema(SerializerProvider provider, Type typeHint)",
      "right" : "public JsonNode getSchema(SerializerProvider provider, Type typeHint)",
      "info" : "MethodDeclaration[3140-3301]:MethodDeclaration[3348-3509]"
    }, {
      "left" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
      "right" : "public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException",
      "info" : "MethodDeclaration[3307-3928]:MethodDeclaration[3515-4136]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1300-1467]:Block[1361-1528]"
    }, {
      "left" : "super(rawType, false);",
      "right" : "super(rawType, false);",
      "info" : "SuperConstructorInvocation[1310-1332]:SuperConstructorInvocation[1371-1393]"
    }, {
      "left" : "_isInt = (rawType == BigInteger.class);",
      "right" : "_isInt = (rawType == BigInteger.class);",
      "info" : "ExpressionStatement[1422-1461]:ExpressionStatement[1483-1522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1621-2003]:Block[1682-2211]"
    }, {
      "left" : "JsonFormat.Value format = findFormatOverrides(prov, property, handledType());",
      "right" : "JsonFormat.Value format = findFormatOverrides(prov, property, handledType());",
      "info" : "VariableDeclarationStatement[1631-1708]:VariableDeclarationStatement[1692-1769]"
    }, {
      "left" : "if (format != null)",
      "right" : "if (format != null)",
      "info" : "IfStatement[1717-1976]:IfStatement[1778-2184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1737-1976]:Block[1798-2184]"
    }, {
      "left" : "switch (format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                return ToStringSerializer.instance;\n            default:\n            }",
      "right" : "switch (format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (((Class<?>) handledType()) == BigDecimal.class) {\n                    return bigDecimalAsStringSerializer();\n                }\n                return ToStringSerializer.instance;\n            default:\n            }",
      "info" : "SwitchStatement[1751-1966]:SwitchStatement[1812-2174]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[1792-1804]:SwitchCase[1853-1865]"
    }, {
      "left" : "return ToStringSerializer.instance;",
      "right" : "return ToStringSerializer.instance;",
      "info" : "ReturnStatement[1896-1931]:ReturnStatement[2104-2139]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1944-1952]:SwitchCase[2152-2160]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[1985-1997]:ReturnStatement[2193-2205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2128-3134]:Block[2336-3342]"
    }, {
      "left" : "if (value instanceof BigDecimal)",
      "right" : "if (value instanceof BigDecimal)",
      "info" : "IfStatement[2192-3128]:IfStatement[2400-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2225-2283]:Block[2433-2491]"
    }, {
      "left" : "g.writeNumber((BigDecimal) value);",
      "right" : "g.writeNumber((BigDecimal) value);",
      "info" : "ExpressionStatement[2239-2273]:ExpressionStatement[2447-2481]"
    }, {
      "left" : "if (value instanceof BigInteger)",
      "right" : "if (value instanceof BigInteger)",
      "info" : "IfStatement[2289-3128]:IfStatement[2497-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2322-2529]:Block[2530-2737]"
    }, {
      "left" : "g.writeNumber((BigInteger) value);",
      "right" : "g.writeNumber((BigInteger) value);",
      "info" : "ExpressionStatement[2336-2370]:ExpressionStatement[2544-2578]"
    }, {
      "left" : "if (value instanceof Long)",
      "right" : "if (value instanceof Long)",
      "info" : "IfStatement[2535-3128]:IfStatement[2743-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2562-2619]:Block[2770-2827]"
    }, {
      "left" : "g.writeNumber(value.longValue());",
      "right" : "g.writeNumber(value.longValue());",
      "info" : "ExpressionStatement[2576-2609]:ExpressionStatement[2784-2817]"
    }, {
      "left" : "if (value instanceof Double)",
      "right" : "if (value instanceof Double)",
      "info" : "IfStatement[2625-3128]:IfStatement[2833-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2654-2713]:Block[2862-2921]"
    }, {
      "left" : "g.writeNumber(value.doubleValue());",
      "right" : "g.writeNumber(value.doubleValue());",
      "info" : "ExpressionStatement[2668-2703]:ExpressionStatement[2876-2911]"
    }, {
      "left" : "if (value instanceof Float)",
      "right" : "if (value instanceof Float)",
      "info" : "IfStatement[2719-3128]:IfStatement[2927-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2747-2805]:Block[2955-3013]"
    }, {
      "left" : "g.writeNumber(value.floatValue());",
      "right" : "g.writeNumber(value.floatValue());",
      "info" : "ExpressionStatement[2761-2795]:ExpressionStatement[2969-3003]"
    }, {
      "left" : "if (value instanceof Integer || value instanceof Byte || value instanceof Short)",
      "right" : "if (value instanceof Integer || value instanceof Byte || value instanceof Short)",
      "info" : "IfStatement[2811-3128]:IfStatement[3019-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2892-2994]:Block[3100-3202]"
    }, {
      "left" : "g.writeNumber(value.intValue());",
      "right" : "g.writeNumber(value.intValue());",
      "info" : "ExpressionStatement[2906-2938]:ExpressionStatement[3114-3146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3000-3128]:Block[3208-3336]"
    }, {
      "left" : "g.writeNumber(value.toString());",
      "right" : "g.writeNumber(value.toString());",
      "info" : "ExpressionStatement[3086-3118]:ExpressionStatement[3294-3326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3224-3301]:Block[3432-3509]"
    }, {
      "left" : "return createSchemaNode(_isInt ? \"integer\" : \"number\", true);",
      "right" : "return createSchemaNode(_isInt ? \"integer\" : \"number\", true);",
      "info" : "ReturnStatement[3234-3295]:ReturnStatement[3442-3503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3442-3928]:Block[3650-4136]"
    }, {
      "left" : "if (_isInt)",
      "right" : "if (_isInt)",
      "info" : "IfStatement[3452-3922]:IfStatement[3660-4130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3464-3557]:Block[3672-3765]"
    }, {
      "left" : "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
      "right" : "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
      "info" : "ExpressionStatement[3478-3547]:ExpressionStatement[3686-3755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3563-3922]:Block[3771-4130]"
    }, {
      "left" : "if (((Class<?>) handledType()) == BigDecimal.class)",
      "right" : "if (((Class<?>) handledType()) == BigDecimal.class)",
      "info" : "IfStatement[3577-3912]:IfStatement[3785-4120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3629-3732]:Block[3837-3940]"
    }, {
      "left" : "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
      "right" : "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
      "info" : "ExpressionStatement[3647-3718]:ExpressionStatement[3855-3926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3738-3912]:Block[3946-4120]"
    }, {
      "left" : "visitor.expectNumberFormat(typeHint);",
      "right" : "visitor.expectNumberFormat(typeHint);",
      "info" : "ExpressionStatement[3861-3898]:ExpressionStatement[4069-4106]"
    } ]
  },
  "interFileMappings" : { }
}