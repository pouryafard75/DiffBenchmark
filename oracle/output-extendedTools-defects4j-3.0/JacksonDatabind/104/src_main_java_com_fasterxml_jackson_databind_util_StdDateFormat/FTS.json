{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "TypeDeclaration[343-27155]:TypeDeclaration[343-27797]"
    }, {
      "left" : "protected final static String PATTERN_PLAIN_STR = \"\\\\d\\\\d\\\\d\\\\d[-]\\\\d\\\\d[-]\\\\d\\\\d\";",
      "right" : "protected final static String PATTERN_PLAIN_STR = \"\\\\d\\\\d\\\\d\\\\d[-]\\\\d\\\\d[-]\\\\d\\\\d\";",
      "info" : "FieldDeclaration[964-1047]:FieldDeclaration[964-1047]"
    }, {
      "left" : "protected final static Pattern PATTERN_PLAIN = Pattern.compile(PATTERN_PLAIN_STR);",
      "right" : "protected final static Pattern PATTERN_PLAIN = Pattern.compile(PATTERN_PLAIN_STR);",
      "info" : "FieldDeclaration[1053-1135]:FieldDeclaration[1053-1135]"
    }, {
      "left" : "protected final static Pattern PATTERN_ISO8601;",
      "right" : "protected final static Pattern PATTERN_ISO8601;",
      "info" : "FieldDeclaration[1141-1188]:FieldDeclaration[1141-1188]"
    }, {
      "left" : "public final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";",
      "right" : "public final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";",
      "info" : "FieldDeclaration[1666-1929]:FieldDeclaration[1666-1929]"
    }, {
      "left" : "protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";",
      "right" : "protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";",
      "info" : "FieldDeclaration[1935-2094]:FieldDeclaration[1935-2094]"
    }, {
      "left" : "protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";",
      "right" : "protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";",
      "info" : "FieldDeclaration[2100-2363]:FieldDeclaration[2100-2363]"
    }, {
      "left" : "protected final static String[] ALL_FORMATS = new String[] {\n        DATE_FORMAT_STR_ISO8601,\n        \"yyyy-MM-dd'T'HH:mm:ss.SSS\", // ISO-8601 but no timezone\n        DATE_FORMAT_STR_RFC1123,\n        DATE_FORMAT_STR_PLAIN\n    };",
      "right" : "protected final static String[] ALL_FORMATS = new String[] {\n        DATE_FORMAT_STR_ISO8601,\n        \"yyyy-MM-dd'T'HH:mm:ss.SSS\", // ISO-8601 but no timezone\n        DATE_FORMAT_STR_RFC1123,\n        DATE_FORMAT_STR_PLAIN\n    };",
      "info" : "FieldDeclaration[2369-2678]:FieldDeclaration[2369-2678]"
    }, {
      "left" : "protected final static TimeZone DEFAULT_TIMEZONE;",
      "right" : "protected final static TimeZone DEFAULT_TIMEZONE;",
      "info" : "FieldDeclaration[2684-2860]:FieldDeclaration[2684-2860]"
    }, {
      "left" : "protected final static Locale DEFAULT_LOCALE = Locale.US;",
      "right" : "protected final static Locale DEFAULT_LOCALE = Locale.US;",
      "info" : "FieldDeclaration[2954-3011]:FieldDeclaration[2954-3011]"
    }, {
      "left" : "protected final static DateFormat DATE_FORMAT_RFC1123;",
      "right" : "protected final static DateFormat DATE_FORMAT_RFC1123;",
      "info" : "FieldDeclaration[3017-3071]:FieldDeclaration[3017-3071]"
    }, {
      "left" : "protected final static DateFormat DATE_FORMAT_ISO8601;",
      "right" : "protected final static DateFormat DATE_FORMAT_ISO8601;",
      "info" : "FieldDeclaration[3077-3131]:FieldDeclaration[3077-3131]"
    }, {
      "left" : "public final static StdDateFormat instance = new StdDateFormat();",
      "right" : "public final static StdDateFormat instance = new StdDateFormat();",
      "info" : "FieldDeclaration[3791-3959]:FieldDeclaration[3791-3959]"
    }, {
      "left" : "protected static final Calendar CALENDAR = new GregorianCalendar(DEFAULT_TIMEZONE, DEFAULT_LOCALE);",
      "right" : "protected static final Calendar CALENDAR = new GregorianCalendar(DEFAULT_TIMEZONE, DEFAULT_LOCALE);",
      "info" : "FieldDeclaration[3965-4312]:FieldDeclaration[3965-4312]"
    }, {
      "left" : "protected transient TimeZone _timezone;",
      "right" : "protected transient TimeZone _timezone;",
      "info" : "FieldDeclaration[4318-4484]:FieldDeclaration[4318-4484]"
    }, {
      "left" : "protected final Locale _locale;",
      "right" : "protected final Locale _locale;",
      "info" : "FieldDeclaration[4490-4521]:FieldDeclaration[4490-4521]"
    }, {
      "left" : "protected Boolean _lenient;",
      "right" : "protected Boolean _lenient;",
      "info" : "FieldDeclaration[4527-4743]:FieldDeclaration[4527-4743]"
    }, {
      "left" : "private transient Calendar _calendar;",
      "right" : "private transient Calendar _calendar;",
      "info" : "FieldDeclaration[4749-4930]:FieldDeclaration[4749-4930]"
    }, {
      "left" : "private transient DateFormat _formatRFC1123;",
      "right" : "private transient DateFormat _formatRFC1123;",
      "info" : "FieldDeclaration[4940-4984]:FieldDeclaration[4940-4984]"
    }, {
      "left" : "private boolean _tzSerializedWithColon = false;",
      "right" : "private boolean _tzSerializedWithColon = false;",
      "info" : "FieldDeclaration[4990-5190]:FieldDeclaration[4990-5190]"
    }, {
      "left" : "public StdDateFormat()",
      "right" : "public StdDateFormat()",
      "info" : "MethodDeclaration[5402-5466]:MethodDeclaration[5402-5466]"
    }, {
      "left" : "// since 2.7\n    public StdDateFormat(TimeZone tz, Locale loc)",
      "right" : "// since 2.7\n    public StdDateFormat(TimeZone tz, Locale loc)",
      "info" : "MethodDeclaration[5472-5601]:MethodDeclaration[5472-5601]"
    }, {
      "left" : "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient)",
      "right" : "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient)",
      "info" : "MethodDeclaration[5607-5719]:MethodDeclaration[5607-5719]"
    }, {
      "left" : "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient,\n            boolean formatTzOffsetWithColon)",
      "right" : "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient,\n            boolean formatTzOffsetWithColon)",
      "info" : "MethodDeclaration[5725-6012]:MethodDeclaration[5725-6012]"
    }, {
      "left" : "public static TimeZone getDefaultTimeZone()",
      "right" : "public static TimeZone getDefaultTimeZone()",
      "info" : "MethodDeclaration[6022-6106]:MethodDeclaration[6022-6106]"
    }, {
      "left" : "public StdDateFormat withTimeZone(TimeZone tz)",
      "right" : "public StdDateFormat withTimeZone(TimeZone tz)",
      "info" : "MethodDeclaration[6116-6575]:MethodDeclaration[6116-6575]"
    }, {
      "left" : "public StdDateFormat withLocale(Locale loc)",
      "right" : "public StdDateFormat withLocale(Locale loc)",
      "info" : "MethodDeclaration[6581-7047]:MethodDeclaration[6581-7047]"
    }, {
      "left" : "public StdDateFormat withLenient(Boolean b)",
      "right" : "public StdDateFormat withLenient(Boolean b)",
      "info" : "MethodDeclaration[7053-7499]:MethodDeclaration[7053-7499]"
    }, {
      "left" : "public StdDateFormat withColonInTimeZone(boolean b)",
      "right" : "public StdDateFormat withColonInTimeZone(boolean b)",
      "info" : "MethodDeclaration[7505-8284]:MethodDeclaration[7505-8284]"
    }, {
      "left" : "public StdDateFormat clone()",
      "right" : "public StdDateFormat clone()",
      "info" : "MethodDeclaration[8294-8569]:MethodDeclaration[8294-8569]"
    }, {
      "left" : "// since 2.9\n    public static DateFormat getISO8601Format(TimeZone tz, Locale loc)",
      "right" : "// since 2.9\n    public static DateFormat getISO8601Format(TimeZone tz, Locale loc)",
      "info" : "MethodDeclaration[8575-9002]:MethodDeclaration[8575-9002]"
    }, {
      "left" : "// since 2.9\n    public static DateFormat getRFC1123Format(TimeZone tz, Locale loc)",
      "right" : "// since 2.9\n    public static DateFormat getRFC1123Format(TimeZone tz, Locale loc)",
      "info" : "MethodDeclaration[9008-9443]:MethodDeclaration[9008-9443]"
    }, {
      "left" : "// since 2.6\n    public TimeZone getTimeZone()",
      "right" : "// since 2.6\n    public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[9626-9716]:MethodDeclaration[9626-9716]"
    }, {
      "left" : "public void setTimeZone(TimeZone tz)",
      "right" : "public void setTimeZone(TimeZone tz)",
      "info" : "MethodDeclaration[9722-10030]:MethodDeclaration[9722-10030]"
    }, {
      "left" : "// since 2.7\n    public void setLenient(boolean enabled)",
      "right" : "// since 2.7\n    public void setLenient(boolean enabled)",
      "info" : "MethodDeclaration[10036-10516]:MethodDeclaration[10036-10516]"
    }, {
      "left" : "// since 2.7\n    public boolean isLenient()",
      "right" : "// since 2.7\n    public boolean isLenient()",
      "info" : "MethodDeclaration[10522-10684]:MethodDeclaration[10522-10684]"
    }, {
      "left" : "public boolean isColonIncludedInTimeZone()",
      "right" : "public boolean isColonIncludedInTimeZone()",
      "info" : "MethodDeclaration[10690-11412]:MethodDeclaration[10690-11412]"
    }, {
      "left" : "public Date parse(String dateStr) throws ParseException",
      "right" : "public Date parse(String dateStr) throws ParseException",
      "info" : "MethodDeclaration[11589-12353]:MethodDeclaration[11589-12353]"
    }, {
      "left" : "public Date parse(String dateStr, ParsePosition pos)",
      "right" : "public Date parse(String dateStr, ParsePosition pos)",
      "info" : "MethodDeclaration[12454-12736]:MethodDeclaration[12454-12736]"
    }, {
      "left" : "protected Date _parseDate(String dateStr, ParsePosition pos) throws ParseException",
      "right" : "protected Date _parseDate(String dateStr, ParsePosition pos) throws ParseException",
      "info" : "MethodDeclaration[12742-13809]:MethodDeclaration[12742-13809]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer toAppendTo,\n            FieldPosition fieldPosition)",
      "right" : "public StringBuffer format(Date date, StringBuffer toAppendTo,\n            FieldPosition fieldPosition)",
      "info" : "MethodDeclaration[13990-14298]:MethodDeclaration[13990-14298]"
    }, {
      "left" : "protected void _format(TimeZone tz, Locale loc, Date date,\n            StringBuffer buffer)",
      "right" : "protected void _format(TimeZone tz, Locale loc, Date date,\n            StringBuffer buffer)",
      "info" : "MethodDeclaration[14308-16456]:MethodDeclaration[14308-16667]"
    }, {
      "left" : "private static void pad2(StringBuffer buffer, int value)",
      "right" : "private static void pad2(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[16834-17138]:MethodDeclaration[17333-17637]"
    }, {
      "left" : "private static void pad3(StringBuffer buffer, int value)",
      "right" : "private static void pad3(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[17144-17424]:MethodDeclaration[17643-17923]"
    }, {
      "left" : "private static void pad4(StringBuffer buffer, int value)",
      "right" : "private static void pad4(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[17430-17710]:MethodDeclaration[17929-18352]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[17885-18087]:MethodDeclaration[18527-18729]"
    }, {
      "left" : "public String toPattern()",
      "right" : "public String toPattern()",
      "info" : "MethodDeclaration[18093-18542]:MethodDeclaration[18735-19184]"
    }, {
      "left" : "// since 2.7[.2], as per [databind#1130]\n    public boolean equals(Object o)",
      "right" : "// since 2.7[.2], as per [databind#1130]\n    public boolean equals(Object o)",
      "info" : "MethodDeclaration[18548-18670]:MethodDeclaration[19190-19312]"
    }, {
      "left" : "// since 2.7[.2], as per [databind#1130]\n    public int hashCode()",
      "right" : "// since 2.7[.2], as per [databind#1130]\n    public int hashCode()",
      "info" : "MethodDeclaration[18676-18806]:MethodDeclaration[19318-19448]"
    }, {
      "left" : "protected boolean looksLikeISO8601(String dateStr)",
      "right" : "protected boolean looksLikeISO8601(String dateStr)",
      "info" : "MethodDeclaration[18987-19484]:MethodDeclaration[19629-20126]"
    }, {
      "left" : "private Date _parseDateFromLong(String longStr, ParsePosition pos) throws ParseException",
      "right" : "private Date _parseDateFromLong(String longStr, ParsePosition pos) throws ParseException",
      "info" : "MethodDeclaration[19490-19925]:MethodDeclaration[20132-20567]"
    }, {
      "left" : "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n        throws ParseException",
      "right" : "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n        throws ParseException",
      "info" : "MethodDeclaration[19931-20338]:MethodDeclaration[20573-20980]"
    }, {
      "left" : "protected Date _parseAsISO8601(String dateStr, ParsePosition bogus)\n        throws IllegalArgumentException, ParseException",
      "right" : "protected Date _parseAsISO8601(String dateStr, ParsePosition bogus)\n        throws IllegalArgumentException, ParseException",
      "info" : "MethodDeclaration[20344-25058]:MethodDeclaration[20986-25700]"
    }, {
      "left" : "private static int _parse4D(String str, int index)",
      "right" : "private static int _parse4D(String str, int index)",
      "info" : "MethodDeclaration[25064-25326]:MethodDeclaration[25706-25968]"
    }, {
      "left" : "private static int _parse2D(String str, int index)",
      "right" : "private static int _parse2D(String str, int index)",
      "info" : "MethodDeclaration[25332-25485]:MethodDeclaration[25974-26127]"
    }, {
      "left" : "protected Date parseAsRFC1123(String dateStr, ParsePosition pos)",
      "right" : "protected Date parseAsRFC1123(String dateStr, ParsePosition pos)",
      "info" : "MethodDeclaration[25491-25805]:MethodDeclaration[26133-26447]"
    }, {
      "left" : "private final static DateFormat _cloneFormat(DateFormat df, String format,\n            TimeZone tz, Locale loc, Boolean lenient)",
      "right" : "private final static DateFormat _cloneFormat(DateFormat df, String format,\n            TimeZone tz, Locale loc, Boolean lenient)",
      "info" : "MethodDeclaration[25984-26545]:MethodDeclaration[26626-27187]"
    }, {
      "left" : "protected void _clearFormats()",
      "right" : "protected void _clearFormats()",
      "info" : "MethodDeclaration[26551-26620]:MethodDeclaration[27193-27262]"
    }, {
      "left" : "protected Calendar _getCalendar(TimeZone tz)",
      "right" : "protected Calendar _getCalendar(TimeZone tz)",
      "info" : "MethodDeclaration[26626-26954]:MethodDeclaration[27268-27596]"
    }, {
      "left" : "protected static <T> boolean _equals(T value1, T value2)",
      "right" : "protected static <T> boolean _equals(T value1, T value2)",
      "info" : "MethodDeclaration[26964-27153]:MethodDeclaration[27606-27795]"
    } ],
    "mappings" : [
 {
      "left" : "@SuppressWarnings(\"serial\")",
      "right" : "@SuppressWarnings(\"serial\")",
      "info" : "SingleMemberAnnotation[621-648]:SingleMemberAnnotation[621-648]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[649-655]:Modifier[649-655]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[656-661]:TYPE_DECLARATION_KIND[656-661]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleName[662-675]:SimpleName[662-675]"
    }, {
      "left" : "DateFormat",
      "right" : "DateFormat",
      "info" : "SimpleType[688-698]:SimpleType[688-698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1200-1660]:Block[1200-1660]"
    }, {
      "left" : "Pattern p = null;",
      "right" : "Pattern p = null;",
      "info" : "VariableDeclarationStatement[1210-1227]:VariableDeclarationStatement[1210-1227]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1236-1625]:TryStatement[1236-1625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1240-1550]:Block[1240-1550]"
    }, {
      "left" : "p = Pattern.compile(PATTERN_PLAIN_STR\n                    +\"[T]\\\\d\\\\d[:]\\\\d\\\\d(?:[:]\\\\d\\\\d)?\" // hours, minutes, optional seconds\n                    +\"(\\\\.\\\\d+)?\" // optional second fractions\n                    +\"(Z|[+-]\\\\d\\\\d(?:[:]?\\\\d\\\\d)?)?\" // optional timeoffset/Z\n            );",
      "right" : "p = Pattern.compile(PATTERN_PLAIN_STR\n                    +\"[T]\\\\d\\\\d[:]\\\\d\\\\d(?:[:]\\\\d\\\\d)?\" // hours, minutes, optional seconds\n                    +\"(\\\\.\\\\d+)?\" // optional second fractions\n                    +\"(Z|[+-]\\\\d\\\\d(?:[:]?\\\\d\\\\d)?)?\" // optional timeoffset/Z\n            );",
      "info" : "ExpressionStatement[1254-1540]:ExpressionStatement[1254-1540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1571-1625]:Block[1571-1625]"
    }, {
      "left" : "throw new RuntimeException(t);",
      "right" : "throw new RuntimeException(t);",
      "info" : "ThrowStatement[1585-1615]:ThrowStatement[1585-1615]"
    }, {
      "left" : "PATTERN_ISO8601 = p;",
      "right" : "PATTERN_ISO8601 = p;",
      "info" : "ExpressionStatement[1634-1654]:ExpressionStatement[1634-1654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2872-2948]:Block[2872-2948]"
    }, {
      "left" : "DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\");",
      "right" : "DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\");",
      "info" : "ExpressionStatement[2882-2929]:ExpressionStatement[2882-2929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3359-3785]:Block[3359-3785]"
    }, {
      "left" : "DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);",
      "right" : "DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);",
      "info" : "ExpressionStatement[3484-3568]:ExpressionStatement[3484-3568]"
    }, {
      "left" : "DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);",
      "right" : "DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);",
      "info" : "ExpressionStatement[3577-3627]:ExpressionStatement[3577-3627]"
    }, {
      "left" : "DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);",
      "right" : "DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE);",
      "info" : "ExpressionStatement[3636-3720]:ExpressionStatement[3636-3720]"
    }, {
      "left" : "DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);",
      "right" : "DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);",
      "info" : "ExpressionStatement[3729-3779]:ExpressionStatement[3729-3779]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5402-5408]:Modifier[5402-5408]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleName[5409-5422]:SimpleName[5409-5422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5425-5466]:Block[5425-5466]"
    }, {
      "left" : "_locale = DEFAULT_LOCALE;",
      "right" : "_locale = DEFAULT_LOCALE;",
      "info" : "ExpressionStatement[5435-5460]:ExpressionStatement[5435-5460]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[5472-5483]:MarkerAnnotation[5472-5483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5501-5507]:Modifier[5501-5507]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleName[5508-5521]:SimpleName[5508-5521]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[5522-5533]:SingleVariableDeclaration[5522-5533]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[5535-5545]:SingleVariableDeclaration[5535-5545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5547-5601]:Block[5547-5601]"
    }, {
      "left" : "_timezone = tz;",
      "right" : "_timezone = tz;",
      "info" : "ExpressionStatement[5557-5572]:ExpressionStatement[5557-5572]"
    }, {
      "left" : "_locale = loc;",
      "right" : "_locale = loc;",
      "info" : "ExpressionStatement[5581-5595]:ExpressionStatement[5581-5595]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5607-5616]:Modifier[5607-5616]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleName[5617-5630]:SimpleName[5617-5630]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[5631-5642]:SingleVariableDeclaration[5631-5642]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[5644-5654]:SingleVariableDeclaration[5644-5654]"
    }, {
      "left" : "Boolean lenient",
      "right" : "Boolean lenient",
      "info" : "SingleVariableDeclaration[5656-5671]:SingleVariableDeclaration[5656-5671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5673-5719]:Block[5673-5719]"
    }, {
      "left" : "this(tz, loc, lenient, false);",
      "right" : "this(tz, loc, lenient, false);",
      "info" : "ConstructorInvocation[5683-5713]:ConstructorInvocation[5683-5713]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5761-5770]:Modifier[5761-5770]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleName[5771-5784]:SimpleName[5771-5784]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[5785-5796]:SingleVariableDeclaration[5785-5796]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[5798-5808]:SingleVariableDeclaration[5798-5808]"
    }, {
      "left" : "Boolean lenient",
      "right" : "Boolean lenient",
      "info" : "SingleVariableDeclaration[5810-5825]:SingleVariableDeclaration[5810-5825]"
    }, {
      "left" : "boolean formatTzOffsetWithColon",
      "right" : "boolean formatTzOffsetWithColon",
      "info" : "SingleVariableDeclaration[5839-5870]:SingleVariableDeclaration[5839-5870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5872-6012]:Block[5872-6012]"
    }, {
      "left" : "_timezone = tz;",
      "right" : "_timezone = tz;",
      "info" : "ExpressionStatement[5882-5897]:ExpressionStatement[5882-5897]"
    }, {
      "left" : "_locale = loc;",
      "right" : "_locale = loc;",
      "info" : "ExpressionStatement[5906-5920]:ExpressionStatement[5906-5920]"
    }, {
      "left" : "_lenient = lenient;",
      "right" : "_lenient = lenient;",
      "info" : "ExpressionStatement[5929-5948]:ExpressionStatement[5929-5948]"
    }, {
      "left" : "_tzSerializedWithColon = formatTzOffsetWithColon;",
      "right" : "_tzSerializedWithColon = formatTzOffsetWithColon;",
      "info" : "ExpressionStatement[5957-6006]:ExpressionStatement[5957-6006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6022-6028]:Modifier[6022-6028]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6029-6035]:Modifier[6029-6035]"
    }, {
      "left" : "TimeZone",
      "right" : "TimeZone",
      "info" : "SimpleType[6036-6044]:SimpleType[6036-6044]"
    }, {
      "left" : "getDefaultTimeZone",
      "right" : "getDefaultTimeZone",
      "info" : "SimpleName[6045-6063]:SimpleName[6045-6063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6066-6106]:Block[6066-6106]"
    }, {
      "left" : "return DEFAULT_TIMEZONE;",
      "right" : "return DEFAULT_TIMEZONE;",
      "info" : "ReturnStatement[6076-6100]:ReturnStatement[6076-6100]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6277-6283]:Modifier[6277-6283]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleType[6284-6297]:SimpleType[6284-6297]"
    }, {
      "left" : "withTimeZone",
      "right" : "withTimeZone",
      "info" : "SimpleName[6298-6310]:SimpleName[6298-6310]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[6311-6322]:SingleVariableDeclaration[6311-6322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6324-6575]:Block[6324-6575]"
    }, {
      "left" : "if (tz == null)",
      "right" : "if (tz == null)",
      "info" : "IfStatement[6334-6396]:IfStatement[6334-6396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6350-6396]:Block[6350-6396]"
    }, {
      "left" : "tz = DEFAULT_TIMEZONE;",
      "right" : "tz = DEFAULT_TIMEZONE;",
      "info" : "ExpressionStatement[6364-6386]:ExpressionStatement[6364-6386]"
    }, {
      "left" : "if ((tz == _timezone) || tz.equals(_timezone))",
      "right" : "if ((tz == _timezone) || tz.equals(_timezone))",
      "info" : "IfStatement[6405-6488]:IfStatement[6405-6488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6452-6488]:Block[6452-6488]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6466-6478]:ReturnStatement[6466-6478]"
    }, {
      "left" : "return new StdDateFormat(tz, _locale, _lenient, _tzSerializedWithColon);",
      "right" : "return new StdDateFormat(tz, _locale, _lenient, _tzSerializedWithColon);",
      "info" : "ReturnStatement[6497-6569]:ReturnStatement[6497-6569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6842-6848]:Modifier[6842-6848]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleType[6849-6862]:SimpleType[6849-6862]"
    }, {
      "left" : "withLocale",
      "right" : "withLocale",
      "info" : "SimpleName[6863-6873]:SimpleName[6863-6873]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[6874-6884]:SingleVariableDeclaration[6874-6884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6886-7047]:Block[6886-7047]"
    }, {
      "left" : "if (loc.equals(_locale))",
      "right" : "if (loc.equals(_locale))",
      "info" : "IfStatement[6896-6957]:IfStatement[6896-6957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6921-6957]:Block[6921-6957]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6935-6947]:ReturnStatement[6935-6947]"
    }, {
      "left" : "return new StdDateFormat(_timezone, loc, _lenient, _tzSerializedWithColon);",
      "right" : "return new StdDateFormat(_timezone, loc, _lenient, _tzSerializedWithColon);",
      "info" : "ReturnStatement[6966-7041]:ReturnStatement[6966-7041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7296-7302]:Modifier[7296-7302]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleType[7303-7316]:SimpleType[7303-7316]"
    }, {
      "left" : "withLenient",
      "right" : "withLenient",
      "info" : "SimpleName[7317-7328]:SimpleName[7317-7328]"
    }, {
      "left" : "Boolean b",
      "right" : "Boolean b",
      "info" : "SingleVariableDeclaration[7329-7338]:SingleVariableDeclaration[7329-7338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7340-7499]:Block[7340-7499]"
    }, {
      "left" : "if (_equals(b, _lenient))",
      "right" : "if (_equals(b, _lenient))",
      "info" : "IfStatement[7350-7412]:IfStatement[7350-7412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7376-7412]:Block[7376-7412]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7390-7402]:ReturnStatement[7390-7402]"
    }, {
      "left" : "return new StdDateFormat(_timezone, _locale, b, _tzSerializedWithColon);",
      "right" : "return new StdDateFormat(_timezone, _locale, b, _tzSerializedWithColon);",
      "info" : "ReturnStatement[7421-7493]:ReturnStatement[7421-7493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8079-8085]:Modifier[8079-8085]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleType[8086-8099]:SimpleType[8086-8099]"
    }, {
      "left" : "withColonInTimeZone",
      "right" : "withColonInTimeZone",
      "info" : "SimpleName[8100-8119]:SimpleName[8100-8119]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[8120-8129]:SingleVariableDeclaration[8120-8129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8131-8284]:Block[8131-8284]"
    }, {
      "left" : "if (_tzSerializedWithColon == b)",
      "right" : "if (_tzSerializedWithColon == b)",
      "info" : "IfStatement[8141-8210]:IfStatement[8141-8210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8174-8210]:Block[8174-8210]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8188-8200]:ReturnStatement[8188-8200]"
    }, {
      "left" : "return new StdDateFormat(_timezone, _locale, _lenient, b);",
      "right" : "return new StdDateFormat(_timezone, _locale, _lenient, b);",
      "info" : "ReturnStatement[8219-8277]:ReturnStatement[8219-8277]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8294-8303]:MarkerAnnotation[8294-8303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8308-8314]:Modifier[8308-8314]"
    }, {
      "left" : "StdDateFormat",
      "right" : "StdDateFormat",
      "info" : "SimpleType[8315-8328]:SimpleType[8315-8328]"
    }, {
      "left" : "clone",
      "right" : "clone",
      "info" : "SimpleName[8329-8334]:SimpleName[8329-8334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8337-8569]:Block[8337-8569]"
    }, {
      "left" : "return new StdDateFormat(_timezone, _locale, _lenient, _tzSerializedWithColon);",
      "right" : "return new StdDateFormat(_timezone, _locale, _lenient, _tzSerializedWithColon);",
      "info" : "ReturnStatement[8484-8563]:ReturnStatement[8484-8563]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[8809-8820]:MarkerAnnotation[8809-8820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8838-8844]:Modifier[8838-8844]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8845-8851]:Modifier[8845-8851]"
    }, {
      "left" : "DateFormat",
      "right" : "DateFormat",
      "info" : "SimpleType[8852-8862]:SimpleType[8852-8862]"
    }, {
      "left" : "getISO8601Format",
      "right" : "getISO8601Format",
      "info" : "SimpleName[8863-8879]:SimpleName[8863-8879]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[8880-8891]:SingleVariableDeclaration[8880-8891]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[8893-8903]:SingleVariableDeclaration[8893-8903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8905-9002]:Block[8905-9002]"
    }, {
      "left" : "return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);",
      "right" : "return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);",
      "info" : "ReturnStatement[8915-8996]:ReturnStatement[8915-8996]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[9234-9245]:MarkerAnnotation[9234-9245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9263-9269]:Modifier[9263-9269]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9270-9276]:Modifier[9270-9276]"
    }, {
      "left" : "DateFormat",
      "right" : "DateFormat",
      "info" : "SimpleType[9277-9287]:SimpleType[9277-9287]"
    }, {
      "left" : "getRFC1123Format",
      "right" : "getRFC1123Format",
      "info" : "SimpleName[9288-9304]:SimpleName[9288-9304]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[9305-9316]:SingleVariableDeclaration[9305-9316]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[9318-9328]:SingleVariableDeclaration[9318-9328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9330-9443]:Block[9330-9443]"
    }, {
      "left" : "return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);",
      "right" : "return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);",
      "info" : "ReturnStatement[9340-9437]:ReturnStatement[9340-9437]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9626-9635]:MarkerAnnotation[9626-9635]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9653-9659]:Modifier[9653-9659]"
    }, {
      "left" : "TimeZone",
      "right" : "TimeZone",
      "info" : "SimpleType[9660-9668]:SimpleType[9660-9668]"
    }, {
      "left" : "getTimeZone",
      "right" : "getTimeZone",
      "info" : "SimpleName[9669-9680]:SimpleName[9669-9680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9683-9716]:Block[9683-9716]"
    }, {
      "left" : "return _timezone;",
      "right" : "return _timezone;",
      "info" : "ReturnStatement[9693-9710]:ReturnStatement[9693-9710]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9722-9731]:MarkerAnnotation[9722-9731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9736-9742]:Modifier[9736-9742]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9743-9747]:PrimitiveType[9743-9747]"
    }, {
      "left" : "setTimeZone",
      "right" : "setTimeZone",
      "info" : "SimpleName[9748-9759]:SimpleName[9748-9759]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[9760-9771]:SingleVariableDeclaration[9760-9771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9777-10030]:Block[9777-10030]"
    }, {
      "left" : "if (!tz.equals(_timezone))",
      "right" : "if (!tz.equals(_timezone))",
      "info" : "IfStatement[9929-10024]:IfStatement[9929-10024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9956-10024]:Block[9956-10024]"
    }, {
      "left" : "_clearFormats();",
      "right" : "_clearFormats();",
      "info" : "ExpressionStatement[9970-9986]:ExpressionStatement[9970-9986]"
    }, {
      "left" : "_timezone = tz;",
      "right" : "_timezone = tz;",
      "info" : "ExpressionStatement[9999-10014]:ExpressionStatement[9999-10014]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10210-10219]:MarkerAnnotation[10210-10219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10237-10243]:Modifier[10237-10243]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10244-10248]:PrimitiveType[10244-10248]"
    }, {
      "left" : "setLenient",
      "right" : "setLenient",
      "info" : "SimpleName[10249-10259]:SimpleName[10249-10259]"
    }, {
      "left" : "boolean enabled",
      "right" : "boolean enabled",
      "info" : "SingleVariableDeclaration[10260-10275]:SingleVariableDeclaration[10260-10275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10277-10516]:Block[10277-10516]"
    }, {
      "left" : "Boolean newValue = Boolean.valueOf(enabled);",
      "right" : "Boolean newValue = Boolean.valueOf(enabled);",
      "info" : "VariableDeclarationStatement[10287-10331]:VariableDeclarationStatement[10287-10331]"
    }, {
      "left" : "if (!_equals(newValue, _lenient))",
      "right" : "if (!_equals(newValue, _lenient))",
      "info" : "IfStatement[10340-10510]:IfStatement[10340-10510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10374-10510]:Block[10374-10510]"
    }, {
      "left" : "_lenient = newValue;",
      "right" : "_lenient = newValue;",
      "info" : "ExpressionStatement[10388-10408]:ExpressionStatement[10388-10408]"
    }, {
      "left" : "_clearFormats();",
      "right" : "_clearFormats();",
      "info" : "ExpressionStatement[10484-10500]:ExpressionStatement[10484-10500]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10522-10531]:MarkerAnnotation[10522-10531]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10549-10555]:Modifier[10549-10555]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10556-10563]:PrimitiveType[10556-10563]"
    }, {
      "left" : "isLenient",
      "right" : "isLenient",
      "info" : "SimpleName[10564-10573]:SimpleName[10564-10573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10576-10684]:Block[10576-10684]"
    }, {
      "left" : "return (_lenient == null) || _lenient.booleanValue();",
      "right" : "return (_lenient == null) || _lenient.booleanValue();",
      "info" : "ReturnStatement[10625-10678]:ReturnStatement[10625-10678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11323-11329]:Modifier[11323-11329]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11330-11337]:PrimitiveType[11330-11337]"
    }, {
      "left" : "isColonIncludedInTimeZone",
      "right" : "isColonIncludedInTimeZone",
      "info" : "SimpleName[11338-11363]:SimpleName[11338-11363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11366-11412]:Block[11366-11412]"
    }, {
      "left" : "return _tzSerializedWithColon;",
      "right" : "return _tzSerializedWithColon;",
      "info" : "ReturnStatement[11376-11406]:ReturnStatement[11376-11406]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11589-11598]:MarkerAnnotation[11589-11598]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11603-11609]:Modifier[11603-11609]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[11610-11614]:SimpleType[11610-11614]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[11615-11620]:SimpleName[11615-11620]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[11621-11635]:SingleVariableDeclaration[11621-11635]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[11644-11658]:SimpleType[11644-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11663-12353]:Block[11663-12353]"
    }, {
      "left" : "dateStr = dateStr.trim();",
      "right" : "dateStr = dateStr.trim();",
      "info" : "ExpressionStatement[11673-11698]:ExpressionStatement[11673-11698]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[11707-11748]:VariableDeclarationStatement[11707-11748]"
    }, {
      "left" : "Date dt = _parseDate(dateStr, pos);",
      "right" : "Date dt = _parseDate(dateStr, pos);",
      "info" : "VariableDeclarationStatement[11757-11792]:VariableDeclarationStatement[11757-11792]"
    }, {
      "left" : "if (dt != null)",
      "right" : "if (dt != null)",
      "info" : "IfStatement[11801-11851]:IfStatement[11801-11851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11817-11851]:Block[11817-11851]"
    }, {
      "left" : "return dt;",
      "right" : "return dt;",
      "info" : "ReturnStatement[11831-11841]:ReturnStatement[11831-11841]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[11860-11899]:VariableDeclarationStatement[11860-11899]"
    }, {
      "left" : "for (String f : ALL_FORMATS)",
      "right" : "for (String f : ALL_FORMATS)",
      "info" : "EnhancedForStatement[11908-12113]:EnhancedForStatement[11908-12113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11937-12113]:Block[11937-12113]"
    }, {
      "left" : "if (sb.length() > 0)",
      "right" : "if (sb.length() > 0)",
      "info" : "IfStatement[11951-12077]:IfStatement[11951-12077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11972-12024]:Block[11972-12024]"
    }, {
      "left" : "sb.append(\"\\\", \\\"\");",
      "right" : "sb.append(\"\\\", \\\"\");",
      "info" : "ExpressionStatement[11990-12010]:ExpressionStatement[11990-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12030-12077]:Block[12030-12077]"
    }, {
      "left" : "sb.append('\"');",
      "right" : "sb.append('\"');",
      "info" : "ExpressionStatement[12048-12063]:ExpressionStatement[12048-12063]"
    }, {
      "left" : "sb.append(f);",
      "right" : "sb.append(f);",
      "info" : "ExpressionStatement[12090-12103]:ExpressionStatement[12090-12103]"
    }, {
      "left" : "sb.append('\"');",
      "right" : "sb.append('\"');",
      "info" : "ExpressionStatement[12122-12137]:ExpressionStatement[12122-12137]"
    }, {
      "left" : "throw new ParseException\n            (String.format(\"Cannot parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());",
      "right" : "throw new ParseException\n            (String.format(\"Cannot parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());",
      "info" : "ThrowStatement[12146-12347]:ThrowStatement[12146-12347]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12454-12463]:MarkerAnnotation[12454-12463]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12468-12474]:Modifier[12468-12474]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[12475-12479]:SimpleType[12475-12479]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[12480-12485]:SimpleName[12480-12485]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[12486-12500]:SingleVariableDeclaration[12486-12500]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[12502-12519]:SingleVariableDeclaration[12502-12519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12525-12736]:Block[12525-12736]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12535-12709]:TryStatement[12535-12709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12539-12595]:Block[12539-12595]"
    }, {
      "left" : "return _parseDate(dateStr, pos);",
      "right" : "return _parseDate(dateStr, pos);",
      "info" : "ReturnStatement[12553-12585]:ReturnStatement[12553-12585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12621-12709]:Block[12621-12709]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12718-12730]:ReturnStatement[12718-12730]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12742-12751]:Modifier[12742-12751]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[12752-12756]:SimpleType[12752-12756]"
    }, {
      "left" : "_parseDate",
      "right" : "_parseDate",
      "info" : "SimpleName[12757-12767]:SimpleName[12757-12767]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[12768-12782]:SingleVariableDeclaration[12768-12782]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[12784-12801]:SingleVariableDeclaration[12784-12801]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[12810-12824]:SimpleType[12810-12824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12829-13809]:Block[12829-13809]"
    }, {
      "left" : "if (looksLikeISO8601(dateStr))",
      "right" : "if (looksLikeISO8601(dateStr))",
      "info" : "IfStatement[12839-12955]:IfStatement[12839-12955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12870-12955]:Block[12870-12955]"
    }, {
      "left" : "return parseAsISO8601(dateStr, pos);",
      "right" : "return parseAsISO8601(dateStr, pos);",
      "info" : "ReturnStatement[12909-12945]:ReturnStatement[12909-12945]"
    }, {
      "left" : "int i = dateStr.length();",
      "right" : "int i = dateStr.length();",
      "info" : "VariableDeclarationStatement[13021-13046]:VariableDeclarationStatement[13021-13046]"
    }, {
      "left" : "while (--i >= 0)",
      "right" : "while (--i >= 0)",
      "info" : "WhileStatement[13055-13372]:WhileStatement[13055-13372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13072-13372]:Block[13072-13372]"
    }, {
      "left" : "char ch = dateStr.charAt(i);",
      "right" : "char ch = dateStr.charAt(i);",
      "info" : "VariableDeclarationStatement[13086-13114]:VariableDeclarationStatement[13086-13114]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[13127-13362]:IfStatement[13127-13362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13153-13362]:Block[13153-13362]"
    }, {
      "left" : "if (i > 0 || ch != '-')",
      "right" : "if (i > 0 || ch != '-')",
      "info" : "IfStatement[13278-13348]:IfStatement[13278-13348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13302-13348]:Block[13302-13348]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13324-13330]:BreakStatement[13324-13330]"
    }, {
      "left" : "if ((i < 0)\n            // let's just assume negative numbers are fine (can't be RFC-1123 anyway); check length for positive\n                && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)))",
      "right" : "if ((i < 0)\n            // let's just assume negative numbers are fine (can't be RFC-1123 anyway); check length for positive\n                && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)))",
      "info" : "IfStatement[13381-13660]:IfStatement[13381-13660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13596-13660]:Block[13596-13660]"
    }, {
      "left" : "return _parseDateFromLong(dateStr, pos);",
      "right" : "return _parseDateFromLong(dateStr, pos);",
      "info" : "ReturnStatement[13610-13650]:ReturnStatement[13610-13650]"
    }, {
      "left" : "return parseAsRFC1123(dateStr, pos);",
      "right" : "return parseAsRFC1123(dateStr, pos);",
      "info" : "ReturnStatement[13767-13803]:ReturnStatement[13767-13803]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13990-13999]:MarkerAnnotation[13990-13999]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14004-14010]:Modifier[14004-14010]"
    }, {
      "left" : "StringBuffer",
      "right" : "StringBuffer",
      "info" : "SimpleType[14011-14023]:SimpleType[14011-14023]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[14024-14030]:SimpleName[14024-14030]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[14031-14040]:SingleVariableDeclaration[14031-14040]"
    }, {
      "left" : "StringBuffer toAppendTo",
      "right" : "StringBuffer toAppendTo",
      "info" : "SingleVariableDeclaration[14042-14065]:SingleVariableDeclaration[14042-14065]"
    }, {
      "left" : "FieldPosition fieldPosition",
      "right" : "FieldPosition fieldPosition",
      "info" : "SingleVariableDeclaration[14079-14106]:SingleVariableDeclaration[14079-14106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14112-14298]:Block[14112-14298]"
    }, {
      "left" : "TimeZone tz = _timezone;",
      "right" : "TimeZone tz = _timezone;",
      "info" : "VariableDeclarationStatement[14122-14146]:VariableDeclarationStatement[14122-14146]"
    }, {
      "left" : "if (tz == null)",
      "right" : "if (tz == null)",
      "info" : "IfStatement[14155-14217]:IfStatement[14155-14217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14171-14217]:Block[14171-14217]"
    }, {
      "left" : "tz = DEFAULT_TIMEZONE;",
      "right" : "tz = DEFAULT_TIMEZONE;",
      "info" : "ExpressionStatement[14185-14207]:ExpressionStatement[14185-14207]"
    }, {
      "left" : "_format(tz, _locale, date, toAppendTo);",
      "right" : "_format(tz, _locale, date, toAppendTo);",
      "info" : "ExpressionStatement[14226-14265]:ExpressionStatement[14226-14265]"
    }, {
      "left" : "return toAppendTo;",
      "right" : "return toAppendTo;",
      "info" : "ReturnStatement[14274-14292]:ReturnStatement[14274-14292]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14308-14317]:Modifier[14308-14317]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14318-14322]:PrimitiveType[14318-14322]"
    }, {
      "left" : "_format",
      "right" : "_format",
      "info" : "SimpleName[14323-14330]:SimpleName[14323-14330]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[14331-14342]:SingleVariableDeclaration[14331-14342]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[14344-14354]:SingleVariableDeclaration[14344-14354]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[14356-14365]:SingleVariableDeclaration[14356-14365]"
    }, {
      "left" : "StringBuffer buffer",
      "right" : "StringBuffer buffer",
      "info" : "SingleVariableDeclaration[14379-14398]:SingleVariableDeclaration[14379-14398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14404-16456]:Block[14404-16667]"
    }, {
      "left" : "Calendar cal = _getCalendar(tz);",
      "right" : "Calendar cal = _getCalendar(tz);",
      "info" : "VariableDeclarationStatement[14414-14446]:VariableDeclarationStatement[14414-14446]"
    }, {
      "left" : "cal.setTime(date);",
      "right" : "cal.setTime(date);",
      "info" : "ExpressionStatement[14455-14473]:ExpressionStatement[14455-14473]"
    }, {
      "left" : "final int year = cal.get(Calendar.YEAR);",
      "right" : "final int year = cal.get(Calendar.YEAR);",
      "info" : "VariableDeclarationStatement[14540-14580]:VariableDeclarationStatement[14540-14580]"
    }, {
      "left" : "pad4(buffer, year);",
      "right" : "pad4(buffer, year);",
      "info" : "ExpressionStatement[15183-15202]:ExpressionStatement[15384-15403]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[15211-15230]:ExpressionStatement[15422-15441]"
    }, {
      "left" : "pad2(buffer, cal.get(Calendar.MONTH) + 1);",
      "right" : "pad2(buffer, cal.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[15239-15281]:ExpressionStatement[15450-15492]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[15290-15309]:ExpressionStatement[15501-15520]"
    }, {
      "left" : "pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));",
      "right" : "pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));",
      "info" : "ExpressionStatement[15318-15363]:ExpressionStatement[15529-15574]"
    }, {
      "left" : "buffer.append('T');",
      "right" : "buffer.append('T');",
      "info" : "ExpressionStatement[15372-15391]:ExpressionStatement[15583-15602]"
    }, {
      "left" : "pad2(buffer, cal.get(Calendar.HOUR_OF_DAY));",
      "right" : "pad2(buffer, cal.get(Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[15400-15444]:ExpressionStatement[15611-15655]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[15453-15472]:ExpressionStatement[15664-15683]"
    }, {
      "left" : "pad2(buffer, cal.get(Calendar.MINUTE));",
      "right" : "pad2(buffer, cal.get(Calendar.MINUTE));",
      "info" : "ExpressionStatement[15481-15520]:ExpressionStatement[15692-15731]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[15529-15548]:ExpressionStatement[15740-15759]"
    }, {
      "left" : "pad2(buffer, cal.get(Calendar.SECOND));",
      "right" : "pad2(buffer, cal.get(Calendar.SECOND));",
      "info" : "ExpressionStatement[15557-15596]:ExpressionStatement[15768-15807]"
    }, {
      "left" : "buffer.append('.');",
      "right" : "buffer.append('.');",
      "info" : "ExpressionStatement[15605-15624]:ExpressionStatement[15816-15835]"
    }, {
      "left" : "pad3(buffer, cal.get(Calendar.MILLISECOND));",
      "right" : "pad3(buffer, cal.get(Calendar.MILLISECOND));",
      "info" : "ExpressionStatement[15633-15677]:ExpressionStatement[15844-15888]"
    }, {
      "left" : "int offset = tz.getOffset(cal.getTimeInMillis());",
      "right" : "int offset = tz.getOffset(cal.getTimeInMillis());",
      "info" : "VariableDeclarationStatement[15687-15736]:VariableDeclarationStatement[15898-15947]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[15745-16450]:IfStatement[15956-16661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15762-16111]:Block[15973-16322]"
    }, {
      "left" : "int hours = Math.abs((offset / (60 * 1000)) / 60);",
      "right" : "int hours = Math.abs((offset / (60 * 1000)) / 60);",
      "info" : "VariableDeclarationStatement[15776-15826]:VariableDeclarationStatement[15987-16037]"
    }, {
      "left" : "int minutes = Math.abs((offset / (60 * 1000)) % 60);",
      "right" : "int minutes = Math.abs((offset / (60 * 1000)) % 60);",
      "info" : "VariableDeclarationStatement[15839-15891]:VariableDeclarationStatement[16050-16102]"
    }, {
      "left" : "buffer.append(offset < 0 ? '-' : '+');",
      "right" : "buffer.append(offset < 0 ? '-' : '+');",
      "info" : "ExpressionStatement[15904-15942]:ExpressionStatement[16115-16153]"
    }, {
      "left" : "pad2(buffer, hours);",
      "right" : "pad2(buffer, hours);",
      "info" : "ExpressionStatement[15955-15975]:ExpressionStatement[16166-16186]"
    }, {
      "left" : "if( _tzSerializedWithColon)",
      "right" : "if( _tzSerializedWithColon)",
      "info" : "IfStatement[15988-16066]:IfStatement[16199-16277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16017-16066]:Block[16228-16277]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[16033-16052]:ExpressionStatement[16244-16263]"
    }, {
      "left" : "pad2(buffer, minutes);",
      "right" : "pad2(buffer, minutes);",
      "info" : "ExpressionStatement[16079-16101]:ExpressionStatement[16290-16312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16117-16450]:Block[16328-16661]"
    }, {
      "left" : "if( _tzSerializedWithColon)",
      "right" : "if( _tzSerializedWithColon)",
      "info" : "IfStatement[16296-16440]:IfStatement[16507-16651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16325-16376]:Block[16536-16587]"
    }, {
      "left" : "buffer.append(\"+00:00\");",
      "right" : "buffer.append(\"+00:00\");",
      "info" : "ExpressionStatement[16340-16364]:ExpressionStatement[16551-16575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16392-16440]:Block[16603-16651]"
    }, {
      "left" : "buffer.append(\"+0000\");",
      "right" : "buffer.append(\"+0000\");",
      "info" : "ExpressionStatement[16405-16428]:ExpressionStatement[16616-16639]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16834-16841]:Modifier[17333-17340]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16842-16848]:Modifier[17341-17347]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16849-16853]:PrimitiveType[17348-17352]"
    }, {
      "left" : "pad2",
      "right" : "pad2",
      "info" : "SimpleName[16854-16858]:SimpleName[17353-17357]"
    }, {
      "left" : "StringBuffer buffer",
      "right" : "StringBuffer buffer",
      "info" : "SingleVariableDeclaration[16859-16878]:SingleVariableDeclaration[17358-17377]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[16880-16889]:SingleVariableDeclaration[17379-17388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16891-17138]:Block[17390-17637]"
    }, {
      "left" : "int tens = value / 10;",
      "right" : "int tens = value / 10;",
      "info" : "VariableDeclarationStatement[16901-16923]:VariableDeclarationStatement[17400-17422]"
    }, {
      "left" : "if (tens == 0)",
      "right" : "if (tens == 0)",
      "info" : "IfStatement[16932-17087]:IfStatement[17431-17586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16947-16990]:Block[17446-17489]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[16961-16980]:ExpressionStatement[17460-17479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16996-17087]:Block[17495-17586]"
    }, {
      "left" : "buffer.append((char) ('0' + tens));",
      "right" : "buffer.append((char) ('0' + tens));",
      "info" : "ExpressionStatement[17010-17045]:ExpressionStatement[17509-17544]"
    }, {
      "left" : "value -= 10 * tens;",
      "right" : "value -= 10 * tens;",
      "info" : "ExpressionStatement[17058-17077]:ExpressionStatement[17557-17576]"
    }, {
      "left" : "buffer.append((char) ('0' + value));",
      "right" : "buffer.append((char) ('0' + value));",
      "info" : "ExpressionStatement[17096-17132]:ExpressionStatement[17595-17631]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17144-17151]:Modifier[17643-17650]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17152-17158]:Modifier[17651-17657]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17159-17163]:PrimitiveType[17658-17662]"
    }, {
      "left" : "pad3",
      "right" : "pad3",
      "info" : "SimpleName[17164-17168]:SimpleName[17663-17667]"
    }, {
      "left" : "StringBuffer buffer",
      "right" : "StringBuffer buffer",
      "info" : "SingleVariableDeclaration[17169-17188]:SingleVariableDeclaration[17668-17687]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[17190-17199]:SingleVariableDeclaration[17689-17698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17201-17424]:Block[17700-17923]"
    }, {
      "left" : "int h = value / 100;",
      "right" : "int h = value / 100;",
      "info" : "VariableDeclarationStatement[17211-17231]:VariableDeclarationStatement[17710-17730]"
    }, {
      "left" : "if (h == 0)",
      "right" : "if (h == 0)",
      "info" : "IfStatement[17240-17389]:IfStatement[17739-17888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17252-17295]:Block[17751-17794]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[17266-17285]:ExpressionStatement[17765-17784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17301-17389]:Block[17800-17888]"
    }, {
      "left" : "buffer.append((char) ('0' + h));",
      "right" : "buffer.append((char) ('0' + h));",
      "info" : "ExpressionStatement[17315-17347]:ExpressionStatement[17814-17846]"
    }, {
      "left" : "value -= (h * 100);",
      "right" : "value -= (h * 100);",
      "info" : "ExpressionStatement[17360-17379]:ExpressionStatement[17859-17878]"
    }, {
      "left" : "pad2(buffer, value);",
      "right" : "pad2(buffer, value);",
      "info" : "ExpressionStatement[17398-17418]:ExpressionStatement[17897-17917]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17430-17437]:Modifier[17929-17936]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17438-17444]:Modifier[17937-17943]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17445-17449]:PrimitiveType[17944-17948]"
    }, {
      "left" : "pad4",
      "right" : "pad4",
      "info" : "SimpleName[17450-17454]:SimpleName[17949-17953]"
    }, {
      "left" : "StringBuffer buffer",
      "right" : "StringBuffer buffer",
      "info" : "SingleVariableDeclaration[17455-17474]:SingleVariableDeclaration[17954-17973]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[17476-17485]:SingleVariableDeclaration[17975-17984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17487-17710]:Block[17986-18352]"
    }, {
      "left" : "int h = value / 100;",
      "right" : "int h = value / 100;",
      "info" : "VariableDeclarationStatement[17497-17517]:VariableDeclarationStatement[17996-18016]"
    }, {
      "left" : "if (h == 0)",
      "right" : "if (h == 0)",
      "info" : "IfStatement[17526-17675]:IfStatement[18025-18317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17538-17593]:Block[18037-18092]"
    }, {
      "left" : "buffer.append('0').append('0');",
      "right" : "buffer.append('0').append('0');",
      "info" : "ExpressionStatement[17552-17583]:ExpressionStatement[18051-18082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17599-17675]:Block[18098-18317]"
    }, {
      "left" : "pad2(buffer, h);",
      "right" : "pad2(buffer, h);",
      "info" : "ExpressionStatement[17617-17633]:ExpressionStatement[18245-18261]"
    }, {
      "left" : "value -= (100 * h);",
      "right" : "value -= (100 * h);",
      "info" : "ExpressionStatement[17646-17665]:ExpressionStatement[18288-18307]"
    }, {
      "left" : "pad2(buffer, value);",
      "right" : "pad2(buffer, value);",
      "info" : "ExpressionStatement[17684-17704]:ExpressionStatement[18326-18346]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17885-17894]:MarkerAnnotation[18527-18536]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17899-17905]:Modifier[18541-18547]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[17906-17912]:SimpleType[18548-18554]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[17913-17921]:SimpleName[18555-18563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17924-18087]:Block[18566-18729]"
    }, {
      "left" : "return String.format(\"DateFormat %s: (timezone: %s, locale: %s, lenient: %s)\",\n                getClass().getName(), _timezone, _locale, _lenient);",
      "right" : "return String.format(\"DateFormat %s: (timezone: %s, locale: %s, lenient: %s)\",\n                getClass().getName(), _timezone, _locale, _lenient);",
      "info" : "ReturnStatement[17934-18081]:ReturnStatement[18576-18723]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18093-18099]:Modifier[18735-18741]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18100-18106]:SimpleType[18742-18748]"
    }, {
      "left" : "toPattern",
      "right" : "toPattern",
      "info" : "SimpleName[18107-18116]:SimpleName[18749-18758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18119-18542]:Block[18761-19184]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(100);",
      "right" : "StringBuilder sb = new StringBuilder(100);",
      "info" : "VariableDeclarationStatement[18157-18199]:VariableDeclarationStatement[18799-18841]"
    }, {
      "left" : "sb.append(\"[one of: '\")\n            .append(DATE_FORMAT_STR_ISO8601)\n            .append(\"', '\")\n            .append(DATE_FORMAT_STR_RFC1123)\n            .append(\"' (\")\n            ;",
      "right" : "sb.append(\"[one of: '\")\n            .append(DATE_FORMAT_STR_ISO8601)\n            .append(\"', '\")\n            .append(DATE_FORMAT_STR_RFC1123)\n            .append(\"' (\")\n            ;",
      "info" : "ExpressionStatement[18208-18390]:ExpressionStatement[18850-19032]"
    }, {
      "left" : "sb.append(Boolean.FALSE.equals(_lenient) ?\n                \"strict\" : \"lenient\")\n            .append(\")]\");",
      "right" : "sb.append(Boolean.FALSE.equals(_lenient) ?\n                \"strict\" : \"lenient\")\n            .append(\")]\");",
      "info" : "ExpressionStatement[18399-18506]:ExpressionStatement[19041-19148]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[18515-18536]:ReturnStatement[19157-19178]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18548-18557]:MarkerAnnotation[19190-19199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18603-18609]:Modifier[19245-19251]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18610-18617]:PrimitiveType[19252-19259]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[18618-18624]:SimpleName[19260-19266]"
    }, {
      "left" : "Object o",
      "right" : "Object o",
      "info" : "SingleVariableDeclaration[18625-18633]:SingleVariableDeclaration[19267-19275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18635-18670]:Block[19277-19312]"
    }, {
      "left" : "return (o == this);",
      "right" : "return (o == this);",
      "info" : "ReturnStatement[18645-18664]:ReturnStatement[19287-19306]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18676-18685]:MarkerAnnotation[19318-19327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18731-18737]:Modifier[19373-19379]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18738-18741]:PrimitiveType[19380-19383]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[18742-18750]:SimpleName[19384-19392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18753-18806]:Block[19395-19448]"
    }, {
      "left" : "return System.identityHashCode(this);",
      "right" : "return System.identityHashCode(this);",
      "info" : "ReturnStatement[18763-18800]:ReturnStatement[19405-19442]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[19093-19102]:Modifier[19735-19744]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19103-19110]:PrimitiveType[19745-19752]"
    }, {
      "left" : "looksLikeISO8601",
      "right" : "looksLikeISO8601",
      "info" : "SimpleName[19111-19127]:SimpleName[19753-19769]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[19128-19142]:SingleVariableDeclaration[19770-19784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19148-19484]:Block[19790-20126]"
    }, {
      "left" : "if (dateStr.length() >= 7 // really need 10, but...\n            && Character.isDigit(dateStr.charAt(0))\n            && Character.isDigit(dateStr.charAt(3))\n            && dateStr.charAt(4) == '-'\n            && Character.isDigit(dateStr.charAt(5)))",
      "right" : "if (dateStr.length() >= 7 // really need 10, but...\n            && Character.isDigit(dateStr.charAt(0))\n            && Character.isDigit(dateStr.charAt(3))\n            && dateStr.charAt(4) == '-'\n            && Character.isDigit(dateStr.charAt(5)))",
      "info" : "IfStatement[19158-19456]:IfStatement[19800-20098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19420-19456]:Block[20062-20098]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19434-19446]:ReturnStatement[20076-20088]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19465-19478]:ReturnStatement[20107-20120]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19490-19497]:Modifier[20132-20139]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[19498-19502]:SimpleType[20140-20144]"
    }, {
      "left" : "_parseDateFromLong",
      "right" : "_parseDateFromLong",
      "info" : "SimpleName[19503-19521]:SimpleName[20145-20163]"
    }, {
      "left" : "String longStr",
      "right" : "String longStr",
      "info" : "SingleVariableDeclaration[19522-19536]:SingleVariableDeclaration[20164-20178]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[19538-19555]:SingleVariableDeclaration[20180-20197]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[19564-19578]:SimpleType[20206-20220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19583-19925]:Block[20225-20567]"
    }, {
      "left" : "long ts;",
      "right" : "long ts;",
      "info" : "VariableDeclarationStatement[19593-19601]:VariableDeclarationStatement[20235-20243]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19610-19890]:TryStatement[20252-20532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19614-19674]:Block[20256-20316]"
    }, {
      "left" : "ts = NumberInput.parseLong(longStr);",
      "right" : "ts = NumberInput.parseLong(longStr);",
      "info" : "ExpressionStatement[19628-19664]:ExpressionStatement[20270-20306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19707-19890]:Block[20349-20532]"
    }, {
      "left" : "throw new ParseException(String.format(\n                    \"Timestamp value %s out of 64-bit value range\", longStr),\n                    pos.getErrorIndex());",
      "right" : "throw new ParseException(String.format(\n                    \"Timestamp value %s out of 64-bit value range\", longStr),\n                    pos.getErrorIndex());",
      "info" : "ThrowStatement[19721-19880]:ThrowStatement[20363-20522]"
    }, {
      "left" : "return new Date(ts);",
      "right" : "return new Date(ts);",
      "info" : "ReturnStatement[19899-19919]:ReturnStatement[20541-20561]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[19931-19940]:Modifier[20573-20582]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[19941-19945]:SimpleType[20583-20587]"
    }, {
      "left" : "parseAsISO8601",
      "right" : "parseAsISO8601",
      "info" : "SimpleName[19946-19960]:SimpleName[20588-20602]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[19961-19975]:SingleVariableDeclaration[20603-20617]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[19977-19994]:SingleVariableDeclaration[20619-20636]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[20011-20025]:SimpleType[20653-20667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20030-20338]:Block[20672-20980]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20040-20332]:TryStatement[20682-20974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20044-20105]:Block[20686-20747]"
    }, {
      "left" : "return _parseAsISO8601(dateStr, pos);",
      "right" : "return _parseAsISO8601(dateStr, pos);",
      "info" : "ReturnStatement[20058-20095]:ReturnStatement[20700-20737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20141-20332]:Block[20783-20974]"
    }, {
      "left" : "throw new ParseException(String.format(\"Cannot parse date \\\"%s\\\", problem: %s\",\n                    dateStr, e.getMessage()),\n                    pos.getErrorIndex());",
      "right" : "throw new ParseException(String.format(\"Cannot parse date \\\"%s\\\", problem: %s\",\n                    dateStr, e.getMessage()),\n                    pos.getErrorIndex());",
      "info" : "ThrowStatement[20155-20322]:ThrowStatement[20797-20964]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[20344-20353]:Modifier[20986-20995]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[20354-20358]:SimpleType[20996-21000]"
    }, {
      "left" : "_parseAsISO8601",
      "right" : "_parseAsISO8601",
      "info" : "SimpleName[20359-20374]:SimpleName[21001-21016]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[20375-20389]:SingleVariableDeclaration[21017-21031]"
    }, {
      "left" : "ParsePosition bogus",
      "right" : "ParsePosition bogus",
      "info" : "SingleVariableDeclaration[20391-20410]:SingleVariableDeclaration[21033-21052]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[20427-20451]:SimpleType[21069-21093]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[20453-20467]:SimpleType[21095-21109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20472-25058]:Block[21114-25700]"
    }, {
      "left" : "final int totalLen = dateStr.length();",
      "right" : "final int totalLen = dateStr.length();",
      "info" : "VariableDeclarationStatement[20482-20520]:VariableDeclarationStatement[21124-21162]"
    }, {
      "left" : "TimeZone tz = DEFAULT_TIMEZONE;",
      "right" : "TimeZone tz = DEFAULT_TIMEZONE;",
      "info" : "VariableDeclarationStatement[20597-20628]:VariableDeclarationStatement[21239-21270]"
    }, {
      "left" : "if ((_timezone != null) && ('Z' != dateStr.charAt(totalLen-1)))",
      "right" : "if ((_timezone != null) && ('Z' != dateStr.charAt(totalLen-1)))",
      "info" : "IfStatement[20637-20740]:IfStatement[21279-21382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20701-20740]:Block[21343-21382]"
    }, {
      "left" : "tz = _timezone;",
      "right" : "tz = _timezone;",
      "info" : "ExpressionStatement[20715-20730]:ExpressionStatement[21357-21372]"
    }, {
      "left" : "Calendar cal = _getCalendar(tz);",
      "right" : "Calendar cal = _getCalendar(tz);",
      "info" : "VariableDeclarationStatement[20749-20781]:VariableDeclarationStatement[21391-21423]"
    }, {
      "left" : "cal.clear();",
      "right" : "cal.clear();",
      "info" : "ExpressionStatement[20790-20802]:ExpressionStatement[21432-21444]"
    }, {
      "left" : "String formatStr;",
      "right" : "String formatStr;",
      "info" : "VariableDeclarationStatement[20811-20828]:VariableDeclarationStatement[21453-21470]"
    }, {
      "left" : "if (totalLen <= 10)",
      "right" : "if (totalLen <= 10)",
      "info" : "IfStatement[20837-24672]:IfStatement[21479-25314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20857-21306]:Block[21499-21948]"
    }, {
      "left" : "Matcher m = PATTERN_PLAIN.matcher(dateStr);",
      "right" : "Matcher m = PATTERN_PLAIN.matcher(dateStr);",
      "info" : "VariableDeclarationStatement[20871-20914]:VariableDeclarationStatement[21513-21556]"
    }, {
      "left" : "if (m.matches())",
      "right" : "if (m.matches())",
      "info" : "IfStatement[20927-21249]:IfStatement[21569-21891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20944-21249]:Block[21586-21891]"
    }, {
      "left" : "int year = _parse4D(dateStr, 0);",
      "right" : "int year = _parse4D(dateStr, 0);",
      "info" : "VariableDeclarationStatement[20962-20994]:VariableDeclarationStatement[21604-21636]"
    }, {
      "left" : "int month = _parse2D(dateStr, 5)-1;",
      "right" : "int month = _parse2D(dateStr, 5)-1;",
      "info" : "VariableDeclarationStatement[21011-21046]:VariableDeclarationStatement[21653-21688]"
    }, {
      "left" : "int day = _parse2D(dateStr, 8);",
      "right" : "int day = _parse2D(dateStr, 8);",
      "info" : "VariableDeclarationStatement[21063-21094]:VariableDeclarationStatement[21705-21736]"
    }, {
      "left" : "cal.set(year, month, day, 0, 0, 0);",
      "right" : "cal.set(year, month, day, 0, 0, 0);",
      "info" : "ExpressionStatement[21112-21147]:ExpressionStatement[21754-21789]"
    }, {
      "left" : "cal.set(Calendar.MILLISECOND, 0);",
      "right" : "cal.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[21164-21197]:ExpressionStatement[21806-21839]"
    }, {
      "left" : "return cal.getTime();",
      "right" : "return cal.getTime();",
      "info" : "ReturnStatement[21214-21235]:ReturnStatement[21856-21877]"
    }, {
      "left" : "formatStr = DATE_FORMAT_STR_PLAIN;",
      "right" : "formatStr = DATE_FORMAT_STR_PLAIN;",
      "info" : "ExpressionStatement[21262-21296]:ExpressionStatement[21904-21938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21312-24672]:Block[21954-25314]"
    }, {
      "left" : "Matcher m = PATTERN_ISO8601.matcher(dateStr);",
      "right" : "Matcher m = PATTERN_ISO8601.matcher(dateStr);",
      "info" : "VariableDeclarationStatement[21326-21371]:VariableDeclarationStatement[21968-22013]"
    }, {
      "left" : "if (m.matches())",
      "right" : "if (m.matches())",
      "info" : "IfStatement[21384-24613]:IfStatement[22026-25255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21401-24613]:Block[22043-25255]"
    }, {
      "left" : "int start = m.start(2);",
      "right" : "int start = m.start(2);",
      "info" : "VariableDeclarationStatement[21529-21552]:VariableDeclarationStatement[22171-22194]"
    }, {
      "left" : "int end = m.end(2);",
      "right" : "int end = m.end(2);",
      "info" : "VariableDeclarationStatement[21569-21588]:VariableDeclarationStatement[22211-22230]"
    }, {
      "left" : "int len = end-start;",
      "right" : "int len = end-start;",
      "info" : "VariableDeclarationStatement[21605-21625]:VariableDeclarationStatement[22247-22267]"
    }, {
      "left" : "if (len > 1)",
      "right" : "if (len > 1)",
      "info" : "IfStatement[21642-22422]:IfStatement[22284-23064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21655-22422]:Block[22297-23064]"
    }, {
      "left" : "int offsetSecs = _parse2D(dateStr, start+1) * 3600;",
      "right" : "int offsetSecs = _parse2D(dateStr, start+1) * 3600;",
      "info" : "VariableDeclarationStatement[21803-21854]:VariableDeclarationStatement[22445-22496]"
    }, {
      "left" : "if (len >= 5)",
      "right" : "if (len >= 5)",
      "info" : "IfStatement[21884-22001]:IfStatement[22526-22643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21898-22001]:Block[22540-22643]"
    }, {
      "left" : "offsetSecs += _parse2D(dateStr, end-2) * 60;",
      "right" : "offsetSecs += _parse2D(dateStr, end-2) * 60;",
      "info" : "ExpressionStatement[21924-21968]:ExpressionStatement[22566-22610]"
    }, {
      "left" : "if (dateStr.charAt(start) == '-')",
      "right" : "if (dateStr.charAt(start) == '-')",
      "info" : "IfStatement[22022-22197]:IfStatement[22664-22839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22056-22124]:Block[22698-22766]"
    }, {
      "left" : "offsetSecs *= -1000;",
      "right" : "offsetSecs *= -1000;",
      "info" : "ExpressionStatement[22082-22102]:ExpressionStatement[22724-22744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22130-22197]:Block[22772-22839]"
    }, {
      "left" : "offsetSecs *= 1000;",
      "right" : "offsetSecs *= 1000;",
      "info" : "ExpressionStatement[22156-22175]:ExpressionStatement[22798-22817]"
    }, {
      "left" : "cal.set(Calendar.ZONE_OFFSET, offsetSecs);",
      "right" : "cal.set(Calendar.ZONE_OFFSET, offsetSecs);",
      "info" : "ExpressionStatement[22218-22260]:ExpressionStatement[22860-22902]"
    }, {
      "left" : "cal.set(Calendar.DST_OFFSET, 0);",
      "right" : "cal.set(Calendar.DST_OFFSET, 0);",
      "info" : "ExpressionStatement[22372-22404]:ExpressionStatement[23014-23046]"
    }, {
      "left" : "int year = _parse4D(dateStr, 0);",
      "right" : "int year = _parse4D(dateStr, 0);",
      "info" : "VariableDeclarationStatement[22456-22488]:VariableDeclarationStatement[23098-23130]"
    }, {
      "left" : "int month = _parse2D(dateStr, 5)-1;",
      "right" : "int month = _parse2D(dateStr, 5)-1;",
      "info" : "VariableDeclarationStatement[22505-22540]:VariableDeclarationStatement[23147-23182]"
    }, {
      "left" : "int day = _parse2D(dateStr, 8);",
      "right" : "int day = _parse2D(dateStr, 8);",
      "info" : "VariableDeclarationStatement[22557-22588]:VariableDeclarationStatement[23199-23230]"
    }, {
      "left" : "int hour = _parse2D(dateStr, 11);",
      "right" : "int hour = _parse2D(dateStr, 11);",
      "info" : "VariableDeclarationStatement[22674-22707]:VariableDeclarationStatement[23316-23349]"
    }, {
      "left" : "int minute = _parse2D(dateStr, 14);",
      "right" : "int minute = _parse2D(dateStr, 14);",
      "info" : "VariableDeclarationStatement[22724-22759]:VariableDeclarationStatement[23366-23401]"
    }, {
      "left" : "int seconds;",
      "right" : "int seconds;",
      "info" : "VariableDeclarationStatement[22832-22844]:VariableDeclarationStatement[23474-23486]"
    }, {
      "left" : "if ((totalLen > 16) && dateStr.charAt(16) == ':')",
      "right" : "if ((totalLen > 16) && dateStr.charAt(16) == ':')",
      "info" : "IfStatement[22861-23041]:IfStatement[23503-23683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22911-22983]:Block[23553-23625]"
    }, {
      "left" : "seconds = _parse2D(dateStr, 17);",
      "right" : "seconds = _parse2D(dateStr, 17);",
      "info" : "ExpressionStatement[22933-22965]:ExpressionStatement[23575-23607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22989-23041]:Block[23631-23683]"
    }, {
      "left" : "seconds = 0;",
      "right" : "seconds = 0;",
      "info" : "ExpressionStatement[23011-23023]:ExpressionStatement[23653-23665]"
    }, {
      "left" : "cal.set(year, month, day, hour, minute, seconds);",
      "right" : "cal.set(year, month, day, hour, minute, seconds);",
      "info" : "ExpressionStatement[23058-23107]:ExpressionStatement[23700-23749]"
    }, {
      "left" : "start = m.start(1) + 1;",
      "right" : "start = m.start(1) + 1;",
      "info" : "ExpressionStatement[23166-23189]:ExpressionStatement[23808-23831]"
    }, {
      "left" : "end = m.end(1);",
      "right" : "end = m.end(1);",
      "info" : "ExpressionStatement[23206-23221]:ExpressionStatement[23848-23863]"
    }, {
      "left" : "int msecs = 0;",
      "right" : "int msecs = 0;",
      "info" : "VariableDeclarationStatement[23238-23252]:VariableDeclarationStatement[23880-23894]"
    }, {
      "left" : "if (start >= end)",
      "right" : "if (start >= end)",
      "info" : "IfStatement[23269-24561]:IfStatement[23911-25203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23287-23377]:Block[23929-24019]"
    }, {
      "left" : "cal.set(Calendar.MILLISECOND, 0);",
      "right" : "cal.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[23326-23359]:ExpressionStatement[23968-24001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23383-24561]:Block[24025-25203]"
    }, {
      "left" : "msecs = 0;",
      "right" : "msecs = 0;",
      "info" : "ExpressionStatement[23460-23470]:ExpressionStatement[24102-24112]"
    }, {
      "left" : "final int fractLen = end-start;",
      "right" : "final int fractLen = end-start;",
      "info" : "VariableDeclarationStatement[23491-23522]:VariableDeclarationStatement[24133-24164]"
    }, {
      "left" : "switch (fractLen) {\n                    default: // [databind#1745] Allow longer fractions... for now, cap at nanoseconds tho\n\n                        if (fractLen > 9) { // only allow up to nanos\n                            throw new ParseException(String.format(\n\"Cannot parse date \\\"%s\\\": invalid fractional seconds '%s'; can use at most 9 digits\",\n                                       dateStr, m.group(1).substring(1)\n                                       ), start);\n                        }\n                        // fall through\n                    case 3:\n                        msecs += (dateStr.charAt(start+2) - '0');\n                    case 2:\n                        msecs += 10 * (dateStr.charAt(start+1) - '0');\n                    case 1:\n                        msecs += 100 * (dateStr.charAt(start) - '0');\n                        break;\n                    case 0:\n                        break;\n                    }",
      "right" : "switch (fractLen) {\n                    default: // [databind#1745] Allow longer fractions... for now, cap at nanoseconds tho\n\n                        if (fractLen > 9) { // only allow up to nanos\n                            throw new ParseException(String.format(\n\"Cannot parse date \\\"%s\\\": invalid fractional seconds '%s'; can use at most 9 digits\",\n                                       dateStr, m.group(1).substring(1)\n                                       ), start);\n                        }\n                        // fall through\n                    case 3:\n                        msecs += (dateStr.charAt(start+2) - '0');\n                    case 2:\n                        msecs += 10 * (dateStr.charAt(start+1) - '0');\n                    case 1:\n                        msecs += 100 * (dateStr.charAt(start) - '0');\n                        break;\n                    case 0:\n                        break;\n                    }",
      "info" : "SwitchStatement[23543-24485]:SwitchStatement[24185-25127]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23583-23591]:SwitchCase[24225-24233]"
    }, {
      "left" : "if (fractLen > 9)",
      "right" : "if (fractLen > 9)",
      "info" : "IfStatement[23694-24042]:IfStatement[24336-24684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23712-24042]:Block[24354-24684]"
    }, {
      "left" : "throw new ParseException(String.format(\n\"Cannot parse date \\\"%s\\\": invalid fractional seconds '%s'; can use at most 9 digits\",\n                                       dateStr, m.group(1).substring(1)\n                                       ), start);",
      "right" : "throw new ParseException(String.format(\n\"Cannot parse date \\\"%s\\\": invalid fractional seconds '%s'; can use at most 9 digits\",\n                                       dateStr, m.group(1).substring(1)\n                                       ), start);",
      "info" : "ThrowStatement[23768-24016]:ThrowStatement[24410-24658]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[24103-24110]:SwitchCase[24745-24752]"
    }, {
      "left" : "msecs += (dateStr.charAt(start+2) - '0');",
      "right" : "msecs += (dateStr.charAt(start+2) - '0');",
      "info" : "ExpressionStatement[24135-24176]:ExpressionStatement[24777-24818]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[24197-24204]:SwitchCase[24839-24846]"
    }, {
      "left" : "msecs += 10 * (dateStr.charAt(start+1) - '0');",
      "right" : "msecs += 10 * (dateStr.charAt(start+1) - '0');",
      "info" : "ExpressionStatement[24229-24275]:ExpressionStatement[24871-24917]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[24296-24303]:SwitchCase[24938-24945]"
    }, {
      "left" : "msecs += 100 * (dateStr.charAt(start) - '0');",
      "right" : "msecs += 100 * (dateStr.charAt(start) - '0');",
      "info" : "ExpressionStatement[24328-24373]:ExpressionStatement[24970-25015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24398-24404]:BreakStatement[25040-25046]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[24425-24432]:SwitchCase[25067-25074]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24457-24463]:BreakStatement[25099-25105]"
    }, {
      "left" : "cal.set(Calendar.MILLISECOND, msecs);",
      "right" : "cal.set(Calendar.MILLISECOND, msecs);",
      "info" : "ExpressionStatement[24506-24543]:ExpressionStatement[25148-25185]"
    }, {
      "left" : "return cal.getTime();",
      "right" : "return cal.getTime();",
      "info" : "ReturnStatement[24578-24599]:ReturnStatement[25220-25241]"
    }, {
      "left" : "formatStr = DATE_FORMAT_STR_ISO8601;",
      "right" : "formatStr = DATE_FORMAT_STR_ISO8601;",
      "info" : "ExpressionStatement[24626-24662]:ExpressionStatement[25268-25304]"
    }, {
      "left" : "throw new ParseException\n        (String.format(\"Cannot parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\",\n                       dateStr, formatStr, _lenient),\n                // [databind#1742]: Might be able to give actual location, some day, but for now\n                //  we can't give anything more indicative\n                0);",
      "right" : "throw new ParseException\n        (String.format(\"Cannot parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\",\n                       dateStr, formatStr, _lenient),\n                // [databind#1742]: Might be able to give actual location, some day, but for now\n                //  we can't give anything more indicative\n                0);",
      "info" : "ThrowStatement[24682-25052]:ThrowStatement[25324-25694]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25064-25071]:Modifier[25706-25713]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25072-25078]:Modifier[25714-25720]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25079-25082]:PrimitiveType[25721-25724]"
    }, {
      "left" : "_parse4D",
      "right" : "_parse4D",
      "info" : "SimpleName[25083-25091]:SimpleName[25725-25733]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[25092-25102]:SingleVariableDeclaration[25734-25744]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[25104-25113]:SingleVariableDeclaration[25746-25755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25115-25326]:Block[25757-25968]"
    }, {
      "left" : "return (1000 * (str.charAt(index) - '0'))\n                + (100 * (str.charAt(index+1) - '0'))\n                + (10 * (str.charAt(index+2) - '0'))\n                + (str.charAt(index+3) - '0');",
      "right" : "return (1000 * (str.charAt(index) - '0'))\n                + (100 * (str.charAt(index+1) - '0'))\n                + (10 * (str.charAt(index+2) - '0'))\n                + (str.charAt(index+3) - '0');",
      "info" : "ReturnStatement[25125-25320]:ReturnStatement[25767-25962]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25332-25339]:Modifier[25974-25981]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25340-25346]:Modifier[25982-25988]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25347-25350]:PrimitiveType[25989-25992]"
    }, {
      "left" : "_parse2D",
      "right" : "_parse2D",
      "info" : "SimpleName[25351-25359]:SimpleName[25993-26001]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[25360-25370]:SingleVariableDeclaration[26002-26012]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[25372-25381]:SingleVariableDeclaration[26014-26023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25383-25485]:Block[26025-26127]"
    }, {
      "left" : "return (10 * (str.charAt(index) - '0'))\n                + (str.charAt(index+1) - '0');",
      "right" : "return (10 * (str.charAt(index) - '0'))\n                + (str.charAt(index+1) - '0');",
      "info" : "ReturnStatement[25393-25479]:ReturnStatement[26035-26121]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[25491-25500]:Modifier[26133-26142]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[25501-25505]:SimpleType[26143-26147]"
    }, {
      "left" : "parseAsRFC1123",
      "right" : "parseAsRFC1123",
      "info" : "SimpleName[25506-25520]:SimpleName[26148-26162]"
    }, {
      "left" : "String dateStr",
      "right" : "String dateStr",
      "info" : "SingleVariableDeclaration[25521-25535]:SingleVariableDeclaration[26163-26177]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[25537-25554]:SingleVariableDeclaration[26179-26196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25560-25805]:Block[26202-26447]"
    }, {
      "left" : "if (_formatRFC1123 == null)",
      "right" : "if (_formatRFC1123 == null)",
      "info" : "IfStatement[25570-25748]:IfStatement[26212-26390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25598-25748]:Block[26240-26390]"
    }, {
      "left" : "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);",
      "right" : "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[25612-25738]:ExpressionStatement[26254-26380]"
    }, {
      "left" : "return _formatRFC1123.parse(dateStr, pos);",
      "right" : "return _formatRFC1123.parse(dateStr, pos);",
      "info" : "ReturnStatement[25757-25799]:ReturnStatement[26399-26441]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25984-25991]:Modifier[26626-26633]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[25992-25997]:Modifier[26634-26639]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25998-26004]:Modifier[26640-26646]"
    }, {
      "left" : "DateFormat",
      "right" : "DateFormat",
      "info" : "SimpleType[26005-26015]:SimpleType[26647-26657]"
    }, {
      "left" : "_cloneFormat",
      "right" : "_cloneFormat",
      "info" : "SimpleName[26016-26028]:SimpleName[26658-26670]"
    }, {
      "left" : "DateFormat df",
      "right" : "DateFormat df",
      "info" : "SingleVariableDeclaration[26029-26042]:SingleVariableDeclaration[26671-26684]"
    }, {
      "left" : "String format",
      "right" : "String format",
      "info" : "SingleVariableDeclaration[26044-26057]:SingleVariableDeclaration[26686-26699]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[26071-26082]:SingleVariableDeclaration[26713-26724]"
    }, {
      "left" : "Locale loc",
      "right" : "Locale loc",
      "info" : "SingleVariableDeclaration[26084-26094]:SingleVariableDeclaration[26726-26736]"
    }, {
      "left" : "Boolean lenient",
      "right" : "Boolean lenient",
      "info" : "SingleVariableDeclaration[26096-26111]:SingleVariableDeclaration[26738-26753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26117-26545]:Block[26759-27187]"
    }, {
      "left" : "if (!loc.equals(DEFAULT_LOCALE))",
      "right" : "if (!loc.equals(DEFAULT_LOCALE))",
      "info" : "IfStatement[26127-26428]:IfStatement[26769-27070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26160-26289]:Block[26802-26931]"
    }, {
      "left" : "df = new SimpleDateFormat(format, loc);",
      "right" : "df = new SimpleDateFormat(format, loc);",
      "info" : "ExpressionStatement[26174-26213]:ExpressionStatement[26816-26855]"
    }, {
      "left" : "df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz);",
      "right" : "df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz);",
      "info" : "ExpressionStatement[26226-26279]:ExpressionStatement[26868-26921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26295-26428]:Block[26937-27070]"
    }, {
      "left" : "df = (DateFormat) df.clone();",
      "right" : "df = (DateFormat) df.clone();",
      "info" : "ExpressionStatement[26309-26338]:ExpressionStatement[26951-26980]"
    }, {
      "left" : "if (tz != null)",
      "right" : "if (tz != null)",
      "info" : "IfStatement[26351-26418]:IfStatement[26993-27060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26367-26418]:Block[27009-27060]"
    }, {
      "left" : "df.setTimeZone(tz);",
      "right" : "df.setTimeZone(tz);",
      "info" : "ExpressionStatement[26385-26404]:ExpressionStatement[27027-27046]"
    }, {
      "left" : "if (lenient != null)",
      "right" : "if (lenient != null)",
      "info" : "IfStatement[26437-26520]:IfStatement[27079-27162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26458-26520]:Block[27100-27162]"
    }, {
      "left" : "df.setLenient(lenient.booleanValue());",
      "right" : "df.setLenient(lenient.booleanValue());",
      "info" : "ExpressionStatement[26472-26510]:ExpressionStatement[27114-27152]"
    }, {
      "left" : "return df;",
      "right" : "return df;",
      "info" : "ReturnStatement[26529-26539]:ReturnStatement[27171-27181]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[26551-26560]:Modifier[27193-27202]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26561-26565]:PrimitiveType[27203-27207]"
    }, {
      "left" : "_clearFormats",
      "right" : "_clearFormats",
      "info" : "SimpleName[26566-26579]:SimpleName[27208-27221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26582-26620]:Block[27224-27262]"
    }, {
      "left" : "_formatRFC1123 = null;",
      "right" : "_formatRFC1123 = null;",
      "info" : "ExpressionStatement[26592-26614]:ExpressionStatement[27234-27256]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[26626-26635]:Modifier[27268-27277]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[26636-26644]:SimpleType[27278-27286]"
    }, {
      "left" : "_getCalendar",
      "right" : "_getCalendar",
      "info" : "SimpleName[26645-26657]:SimpleName[27287-27299]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[26658-26669]:SingleVariableDeclaration[27300-27311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26671-26954]:Block[27313-27596]"
    }, {
      "left" : "Calendar cal = _calendar;",
      "right" : "Calendar cal = _calendar;",
      "info" : "VariableDeclarationStatement[26681-26706]:VariableDeclarationStatement[27323-27348]"
    }, {
      "left" : "if (cal == null)",
      "right" : "if (cal == null)",
      "info" : "IfStatement[26715-26802]:IfStatement[27357-27444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26733-26802]:Block[27375-27444]"
    }, {
      "left" : "_calendar = cal = (Calendar)CALENDAR.clone();",
      "right" : "_calendar = cal = (Calendar)CALENDAR.clone();",
      "info" : "ExpressionStatement[26747-26792]:ExpressionStatement[27389-27434]"
    }, {
      "left" : "if (!cal.getTimeZone().equals(tz))",
      "right" : "if (!cal.getTimeZone().equals(tz))",
      "info" : "IfStatement[26811-26891]:IfStatement[27453-27533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26847-26891]:Block[27489-27533]"
    }, {
      "left" : "cal.setTimeZone(tz);",
      "right" : "cal.setTimeZone(tz);",
      "info" : "ExpressionStatement[26861-26881]:ExpressionStatement[27503-27523]"
    }, {
      "left" : "cal.setLenient(isLenient());",
      "right" : "cal.setLenient(isLenient());",
      "info" : "ExpressionStatement[26900-26928]:ExpressionStatement[27542-27570]"
    }, {
      "left" : "return cal;",
      "right" : "return cal;",
      "info" : "ReturnStatement[26937-26948]:ReturnStatement[27579-27590]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[26964-26973]:Modifier[27606-27615]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26974-26980]:Modifier[27616-27622]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[26982-26983]:TypeParameter[27624-27625]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26985-26992]:PrimitiveType[27627-27634]"
    }, {
      "left" : "_equals",
      "right" : "_equals",
      "info" : "SimpleName[26993-27000]:SimpleName[27635-27642]"
    }, {
      "left" : "T value1",
      "right" : "T value1",
      "info" : "SingleVariableDeclaration[27001-27009]:SingleVariableDeclaration[27643-27651]"
    }, {
      "left" : "T value2",
      "right" : "T value2",
      "info" : "SingleVariableDeclaration[27011-27019]:SingleVariableDeclaration[27653-27661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27021-27153]:Block[27663-27795]"
    }, {
      "left" : "if (value1 == value2)",
      "right" : "if (value1 == value2)",
      "info" : "IfStatement[27031-27089]:IfStatement[27673-27731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27053-27089]:Block[27695-27731]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27067-27079]:ReturnStatement[27709-27721]"
    }, {
      "left" : "return (value1 != null) && value1.equals(value2);",
      "right" : "return (value1 != null) && value1.equals(value2);",
      "info" : "ReturnStatement[27098-27147]:ReturnStatement[27740-27789]"
    } ]
  },
  "interFileMappings" : { }
}