{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[4182-4230]:FieldDeclaration[4182-4230]"
    }, {
      "left" : "private final char delimiter;",
      "right" : "private final char delimiter;",
      "info" : "FieldDeclaration[4236-4265]:FieldDeclaration[4236-4265]"
    }, {
      "left" : "private final Character quoteCharacter;",
      "right" : "private final Character quoteCharacter;",
      "info" : "FieldDeclaration[4270-4309]:FieldDeclaration[4270-4309]"
    }, {
      "left" : "private final QuoteMode quoteMode;",
      "right" : "private final QuoteMode quoteMode;",
      "info" : "FieldDeclaration[4345-4379]:FieldDeclaration[4345-4379]"
    }, {
      "left" : "private final Character commentMarker;",
      "right" : "private final Character commentMarker;",
      "info" : "FieldDeclaration[4384-4422]:FieldDeclaration[4384-4422]"
    }, {
      "left" : "private final Character escapeCharacter;",
      "right" : "private final Character escapeCharacter;",
      "info" : "FieldDeclaration[4461-4501]:FieldDeclaration[4461-4501]"
    }, {
      "left" : "private final boolean ignoreSurroundingSpaces;",
      "right" : "private final boolean ignoreSurroundingSpaces;",
      "info" : "FieldDeclaration[4538-4584]:FieldDeclaration[4538-4584]"
    }, {
      "left" : "private final boolean allowMissingColumnNames;",
      "right" : "private final boolean allowMissingColumnNames;",
      "info" : "FieldDeclaration[4649-4695]:FieldDeclaration[4649-4695]"
    }, {
      "left" : "private final boolean ignoreEmptyLines;",
      "right" : "private final boolean ignoreEmptyLines;",
      "info" : "FieldDeclaration[4700-4739]:FieldDeclaration[4700-4739]"
    }, {
      "left" : "private final String recordSeparator;",
      "right" : "private final String recordSeparator;",
      "info" : "FieldDeclaration[4744-4781]:FieldDeclaration[4744-4781]"
    }, {
      "left" : "private final String nullString;",
      "right" : "private final String nullString;",
      "info" : "FieldDeclaration[4801-4833]:FieldDeclaration[4801-4833]"
    }, {
      "left" : "private final String[] header;",
      "right" : "private final String[] header;",
      "info" : "FieldDeclaration[4879-4909]:FieldDeclaration[4879-4909]"
    }, {
      "left" : "private final boolean skipHeaderRecord;",
      "right" : "private final boolean skipHeaderRecord;",
      "info" : "FieldDeclaration[4946-4985]:FieldDeclaration[4946-4985]"
    }, {
      "left" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false, false);",
      "right" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                            false, true, CRLF, null, null, false, false);",
      "info" : "FieldDeclaration[4991-5541]:FieldDeclaration[4991-5541]"
    }, {
      "left" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "right" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "info" : "FieldDeclaration[5547-5984]:FieldDeclaration[5547-5984]"
    }, {
      "left" : "public static final CSVFormat TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true);",
      "right" : "public static final CSVFormat TDF =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withIgnoreSurroundingSpaces(true);",
      "info" : "FieldDeclaration[7190-7619]:FieldDeclaration[7224-7653]"
    }, {
      "left" : "public static final CSVFormat MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuote(null)\n            .withRecordSeparator(LF);",
      "right" : "public static final CSVFormat MYSQL =\n            DEFAULT\n            .withDelimiter(TAB)\n            .withEscape(BACKSLASH)\n            .withIgnoreEmptyLines(false)\n            .withQuote(null)\n            .withRecordSeparator(LF);",
      "info" : "FieldDeclaration[7625-8591]:FieldDeclaration[7659-8625]"
    }, {
      "left" : "private static boolean isLineBreak(final char c)",
      "right" : "private static boolean isLineBreak(final char c)",
      "info" : "MethodDeclaration[8597-8909]:MethodDeclaration[8631-8943]"
    }, {
      "left" : "private static boolean isLineBreak(final Character c)",
      "right" : "private static boolean isLineBreak(final Character c)",
      "info" : "MethodDeclaration[8915-9281]:MethodDeclaration[8949-9315]"
    }, {
      "left" : "public static CSVFormat newFormat(final char delimiter)",
      "right" : "public static CSVFormat newFormat(final char delimiter)",
      "info" : "MethodDeclaration[9287-10037]:MethodDeclaration[9321-10071]"
    }, {
      "left" : "private CSVFormat(final char delimiter, final Character quoteChar,\n            final QuoteMode quoteMode, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, final boolean skipHeaderRecord,\n            final boolean allowMissingColumnNames)",
      "right" : "private CSVFormat(final char delimiter, final Character quoteChar,\n            final QuoteMode quoteMode, final Character commentStart,\n            final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator,\n            final String nullString, final String[] header, final boolean skipHeaderRecord,\n            final boolean allowMissingColumnNames)",
      "info" : "MethodDeclaration[10043-12836]:MethodDeclaration[10077-12870]"
    }, {
      "left" : "public boolean equals(final Object obj)",
      "right" : "public boolean equals(final Object obj)",
      "info" : "MethodDeclaration[12842-14876]:MethodDeclaration[12876-14910]"
    }, {
      "left" : "public String format(final Object... values)",
      "right" : "public String format(final Object... values)",
      "info" : "MethodDeclaration[14882-15428]:MethodDeclaration[14916-15462]"
    }, {
      "left" : "public Character getCommentMarker()",
      "right" : "public Character getCommentMarker()",
      "info" : "MethodDeclaration[15434-15657]:MethodDeclaration[15468-15691]"
    }, {
      "left" : "public char getDelimiter()",
      "right" : "public char getDelimiter()",
      "info" : "MethodDeclaration[15663-15866]:MethodDeclaration[15697-15900]"
    }, {
      "left" : "public Character getEscapeCharacter()",
      "right" : "public Character getEscapeCharacter()",
      "info" : "MethodDeclaration[15872-16066]:MethodDeclaration[15906-16100]"
    }, {
      "left" : "public String[] getHeader()",
      "right" : "public String[] getHeader()",
      "info" : "MethodDeclaration[16072-16341]:MethodDeclaration[16106-16375]"
    }, {
      "left" : "public boolean getAllowMissingColumnNames()",
      "right" : "public boolean getAllowMissingColumnNames()",
      "info" : "MethodDeclaration[16347-16718]:MethodDeclaration[16381-16752]"
    }, {
      "left" : "public boolean getIgnoreEmptyLines()",
      "right" : "public boolean getIgnoreEmptyLines()",
      "info" : "MethodDeclaration[16724-17049]:MethodDeclaration[16758-17083]"
    }, {
      "left" : "public boolean getIgnoreSurroundingSpaces()",
      "right" : "public boolean getIgnoreSurroundingSpaces()",
      "info" : "MethodDeclaration[17055-17383]:MethodDeclaration[17089-17417]"
    }, {
      "left" : "public String getNullString()",
      "right" : "public String getNullString()",
      "info" : "MethodDeclaration[17389-17945]:MethodDeclaration[17423-17979]"
    }, {
      "left" : "public Character getQuoteCharacter()",
      "right" : "public Character getQuoteCharacter()",
      "info" : "MethodDeclaration[17951-18196]:MethodDeclaration[17985-18230]"
    }, {
      "left" : "public QuoteMode getQuoteMode()",
      "right" : "public QuoteMode getQuoteMode()",
      "info" : "MethodDeclaration[18202-18369]:MethodDeclaration[18236-18403]"
    }, {
      "left" : "public String getRecordSeparator()",
      "right" : "public String getRecordSeparator()",
      "info" : "MethodDeclaration[18375-18571]:MethodDeclaration[18409-18605]"
    }, {
      "left" : "public boolean getSkipHeaderRecord()",
      "right" : "public boolean getSkipHeaderRecord()",
      "info" : "MethodDeclaration[18577-18777]:MethodDeclaration[18611-18811]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[18783-19771]:MethodDeclaration[18817-19805]"
    }, {
      "left" : "public boolean isCommentMarkerSet()",
      "right" : "public boolean isCommentMarkerSet()",
      "info" : "MethodDeclaration[19777-20124]:MethodDeclaration[19811-20158]"
    }, {
      "left" : "public boolean isEscapeCharacterSet()",
      "right" : "public boolean isEscapeCharacterSet()",
      "info" : "MethodDeclaration[20130-20342]:MethodDeclaration[20164-20376]"
    }, {
      "left" : "public boolean isNullStringSet()",
      "right" : "public boolean isNullStringSet()",
      "info" : "MethodDeclaration[20348-20555]:MethodDeclaration[20382-20589]"
    }, {
      "left" : "public boolean isQuoteCharacterSet()",
      "right" : "public boolean isQuoteCharacterSet()",
      "info" : "MethodDeclaration[20561-20774]:MethodDeclaration[20595-20808]"
    }, {
      "left" : "public CSVParser parse(final Reader in) throws IOException",
      "right" : "public CSVParser parse(final Reader in) throws IOException",
      "info" : "MethodDeclaration[20780-21229]:MethodDeclaration[20814-21263]"
    }, {
      "left" : "public CSVPrinter print(final Appendable out) throws IOException",
      "right" : "public CSVPrinter print(final Appendable out) throws IOException",
      "info" : "MethodDeclaration[21235-21649]:MethodDeclaration[21269-21683]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[21655-22990]:MethodDeclaration[21689-23024]"
    }, {
      "left" : "private void validate() throws IllegalArgumentException",
      "right" : "private void validate() throws IllegalArgumentException",
      "info" : "MethodDeclaration[22996-24666]:MethodDeclaration[23030-24700]"
    }, {
      "left" : "public CSVFormat withCommentMarker(final char commentMarker)",
      "right" : "public CSVFormat withCommentMarker(final char commentMarker)",
      "info" : "MethodDeclaration[24672-25303]:MethodDeclaration[24706-25337]"
    }, {
      "left" : "public CSVFormat withCommentMarker(final Character commentMarker)",
      "right" : "public CSVFormat withCommentMarker(final Character commentMarker)",
      "info" : "MethodDeclaration[25309-26322]:MethodDeclaration[25343-26356]"
    }, {
      "left" : "public CSVFormat withDelimiter(final char delimiter)",
      "right" : "public CSVFormat withDelimiter(final char delimiter)",
      "info" : "MethodDeclaration[26328-27140]:MethodDeclaration[26362-27174]"
    }, {
      "left" : "public CSVFormat withEscape(final char escape)",
      "right" : "public CSVFormat withEscape(final char escape)",
      "info" : "MethodDeclaration[27146-27630]:MethodDeclaration[27180-27664]"
    }, {
      "left" : "public CSVFormat withEscape(final Character escape)",
      "right" : "public CSVFormat withEscape(final Character escape)",
      "info" : "MethodDeclaration[27636-28487]:MethodDeclaration[27670-28521]"
    }, {
      "left" : "public CSVFormat withHeader(final String... header)",
      "right" : "public CSVFormat withHeader(final String... header)",
      "info" : "MethodDeclaration[28493-29451]:MethodDeclaration[28527-29485]"
    }, {
      "left" : "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames)",
      "right" : "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames)",
      "info" : "MethodDeclaration[29457-30239]:MethodDeclaration[29491-30273]"
    }, {
      "left" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "right" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "info" : "MethodDeclaration[30245-30984]:MethodDeclaration[30279-31018]"
    }, {
      "left" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "right" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "info" : "MethodDeclaration[30990-31688]:MethodDeclaration[31024-31722]"
    }, {
      "left" : "public CSVFormat withNullString(final String nullString)",
      "right" : "public CSVFormat withNullString(final String nullString)",
      "info" : "MethodDeclaration[31694-32650]:MethodDeclaration[31728-32684]"
    }, {
      "left" : "public CSVFormat withQuote(final char quoteChar)",
      "right" : "public CSVFormat withQuote(final char quoteChar)",
      "info" : "MethodDeclaration[32656-33133]:MethodDeclaration[32690-33167]"
    }, {
      "left" : "public CSVFormat withQuote(final Character quoteChar)",
      "right" : "public CSVFormat withQuote(final Character quoteChar)",
      "info" : "MethodDeclaration[33139-33980]:MethodDeclaration[33173-34014]"
    }, {
      "left" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
      "right" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
      "info" : "MethodDeclaration[33986-34595]:MethodDeclaration[34020-34629]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "info" : "MethodDeclaration[34601-35228]:MethodDeclaration[34635-35262]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "info" : "MethodDeclaration[35234-36151]:MethodDeclaration[35268-36185]"
    }, {
      "left" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "right" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "info" : "MethodDeclaration[36157-36791]:MethodDeclaration[36191-36825]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8818-8825]:Modifier[8852-8859]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8826-8832]:Modifier[8860-8866]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8833-8840]:PrimitiveType[8867-8874]"
    }, {
      "left" : "isLineBreak",
      "right" : "isLineBreak",
      "info" : "SimpleName[8841-8852]:SimpleName[8875-8886]"
    }, {
      "left" : "final char c",
      "right" : "final char c",
      "info" : "SingleVariableDeclaration[8853-8865]:SingleVariableDeclaration[8887-8899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8867-8909]:Block[8901-8943]"
    }, {
      "left" : "return c == LF || c == CR;",
      "right" : "return c == LF || c == CR;",
      "info" : "ReturnStatement[8877-8903]:ReturnStatement[8911-8937]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9164-9171]:Modifier[9198-9205]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9172-9178]:Modifier[9206-9212]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9179-9186]:PrimitiveType[9213-9220]"
    }, {
      "left" : "isLineBreak",
      "right" : "isLineBreak",
      "info" : "SimpleName[9187-9198]:SimpleName[9221-9232]"
    }, {
      "left" : "final Character c",
      "right" : "final Character c",
      "info" : "SingleVariableDeclaration[9199-9216]:SingleVariableDeclaration[9233-9250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9218-9281]:Block[9252-9315]"
    }, {
      "left" : "return c != null && isLineBreak(c.charValue());",
      "right" : "return c != null && isLineBreak(c.charValue());",
      "info" : "ReturnStatement[9228-9275]:ReturnStatement[9262-9309]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9863-9869]:Modifier[9897-9903]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9870-9876]:Modifier[9904-9910]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[9877-9886]:SimpleType[9911-9920]"
    }, {
      "left" : "newFormat",
      "right" : "newFormat",
      "info" : "SimpleName[9887-9896]:SimpleName[9921-9930]"
    }, {
      "left" : "final char delimiter",
      "right" : "final char delimiter",
      "info" : "SingleVariableDeclaration[9897-9917]:SingleVariableDeclaration[9931-9951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9919-10037]:Block[9953-10071]"
    }, {
      "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false, false);",
      "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false, false);",
      "info" : "ReturnStatement[9929-10031]:ReturnStatement[9963-10065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11251-11258]:Modifier[11285-11292]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleName[11259-11268]:SimpleName[11293-11302]"
    }, {
      "left" : "final char delimiter",
      "right" : "final char delimiter",
      "info" : "SingleVariableDeclaration[11269-11289]:SingleVariableDeclaration[11303-11323]"
    }, {
      "left" : "final Character quoteChar",
      "right" : "final Character quoteChar",
      "info" : "SingleVariableDeclaration[11291-11316]:SingleVariableDeclaration[11325-11350]"
    }, {
      "left" : "final QuoteMode quoteMode",
      "right" : "final QuoteMode quoteMode",
      "info" : "SingleVariableDeclaration[11330-11355]:SingleVariableDeclaration[11364-11389]"
    }, {
      "left" : "final Character commentStart",
      "right" : "final Character commentStart",
      "info" : "SingleVariableDeclaration[11357-11385]:SingleVariableDeclaration[11391-11419]"
    }, {
      "left" : "final Character escape",
      "right" : "final Character escape",
      "info" : "SingleVariableDeclaration[11399-11421]:SingleVariableDeclaration[11433-11455]"
    }, {
      "left" : "final boolean ignoreSurroundingSpaces",
      "right" : "final boolean ignoreSurroundingSpaces",
      "info" : "SingleVariableDeclaration[11423-11460]:SingleVariableDeclaration[11457-11494]"
    }, {
      "left" : "final boolean ignoreEmptyLines",
      "right" : "final boolean ignoreEmptyLines",
      "info" : "SingleVariableDeclaration[11474-11504]:SingleVariableDeclaration[11508-11538]"
    }, {
      "left" : "final String recordSeparator",
      "right" : "final String recordSeparator",
      "info" : "SingleVariableDeclaration[11506-11534]:SingleVariableDeclaration[11540-11568]"
    }, {
      "left" : "final String nullString",
      "right" : "final String nullString",
      "info" : "SingleVariableDeclaration[11548-11571]:SingleVariableDeclaration[11582-11605]"
    }, {
      "left" : "final String[] header",
      "right" : "final String[] header",
      "info" : "SingleVariableDeclaration[11573-11594]:SingleVariableDeclaration[11607-11628]"
    }, {
      "left" : "final boolean skipHeaderRecord",
      "right" : "final boolean skipHeaderRecord",
      "info" : "SingleVariableDeclaration[11596-11626]:SingleVariableDeclaration[11630-11660]"
    }, {
      "left" : "final boolean allowMissingColumnNames",
      "right" : "final boolean allowMissingColumnNames",
      "info" : "SingleVariableDeclaration[11640-11677]:SingleVariableDeclaration[11674-11711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11679-12836]:Block[11713-12870]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[11689-11816]:IfStatement[11723-11850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-11816]:Block[11751-11850]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[11731-11806]:ThrowStatement[11765-11840]"
    }, {
      "left" : "this.delimiter = delimiter;",
      "right" : "this.delimiter = delimiter;",
      "info" : "ExpressionStatement[11825-11852]:ExpressionStatement[11859-11886]"
    }, {
      "left" : "this.quoteCharacter = quoteChar;",
      "right" : "this.quoteCharacter = quoteChar;",
      "info" : "ExpressionStatement[11861-11893]:ExpressionStatement[11895-11927]"
    }, {
      "left" : "this.quoteMode = quoteMode;",
      "right" : "this.quoteMode = quoteMode;",
      "info" : "ExpressionStatement[11902-11929]:ExpressionStatement[11936-11963]"
    }, {
      "left" : "this.commentMarker = commentStart;",
      "right" : "this.commentMarker = commentStart;",
      "info" : "ExpressionStatement[11938-11972]:ExpressionStatement[11972-12006]"
    }, {
      "left" : "this.escapeCharacter = escape;",
      "right" : "this.escapeCharacter = escape;",
      "info" : "ExpressionStatement[11981-12011]:ExpressionStatement[12015-12045]"
    }, {
      "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "info" : "ExpressionStatement[12020-12075]:ExpressionStatement[12054-12109]"
    }, {
      "left" : "this.allowMissingColumnNames = allowMissingColumnNames;",
      "right" : "this.allowMissingColumnNames = allowMissingColumnNames;",
      "info" : "ExpressionStatement[12084-12139]:ExpressionStatement[12118-12173]"
    }, {
      "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "info" : "ExpressionStatement[12148-12189]:ExpressionStatement[12182-12223]"
    }, {
      "left" : "this.recordSeparator = recordSeparator;",
      "right" : "this.recordSeparator = recordSeparator;",
      "info" : "ExpressionStatement[12198-12237]:ExpressionStatement[12232-12271]"
    }, {
      "left" : "this.nullString = nullString;",
      "right" : "this.nullString = nullString;",
      "info" : "ExpressionStatement[12246-12275]:ExpressionStatement[12280-12309]"
    }, {
      "left" : "if (header == null)",
      "right" : "if (header == null)",
      "info" : "IfStatement[12284-12760]:IfStatement[12318-12794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12304-12347]:Block[12338-12381]"
    }, {
      "left" : "this.header = null;",
      "right" : "this.header = null;",
      "info" : "ExpressionStatement[12318-12337]:ExpressionStatement[12352-12371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12353-12760]:Block[12387-12794]"
    }, {
      "left" : "final Set<String> dupCheck = new HashSet<String>();",
      "right" : "final Set<String> dupCheck = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[12367-12418]:VariableDeclarationStatement[12401-12452]"
    }, {
      "left" : "for (final String hdr : header)",
      "right" : "for (final String hdr : header)",
      "info" : "EnhancedForStatement[12431-12708]:EnhancedForStatement[12465-12742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12463-12708]:Block[12497-12742]"
    }, {
      "left" : "if (!dupCheck.add(hdr))",
      "right" : "if (!dupCheck.add(hdr))",
      "info" : "IfStatement[12481-12694]:IfStatement[12515-12728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12505-12694]:Block[12539-12728]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\n                            Arrays.toString(header));",
      "right" : "throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\n                            Arrays.toString(header));",
      "info" : "ThrowStatement[12527-12676]:ThrowStatement[12561-12710]"
    }, {
      "left" : "this.header = header.clone();",
      "right" : "this.header = header.clone();",
      "info" : "ExpressionStatement[12721-12750]:ExpressionStatement[12755-12784]"
    }, {
      "left" : "this.skipHeaderRecord = skipHeaderRecord;",
      "right" : "this.skipHeaderRecord = skipHeaderRecord;",
      "info" : "ExpressionStatement[12769-12810]:ExpressionStatement[12803-12844]"
    }, {
      "left" : "validate();",
      "right" : "validate();",
      "info" : "ExpressionStatement[12819-12830]:ExpressionStatement[12853-12864]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12842-12851]:MarkerAnnotation[12876-12885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12856-12862]:Modifier[12890-12896]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12863-12870]:PrimitiveType[12897-12904]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[12871-12877]:SimpleName[12905-12911]"
    }, {
      "left" : "final Object obj",
      "right" : "final Object obj",
      "info" : "SingleVariableDeclaration[12878-12894]:SingleVariableDeclaration[12912-12928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12896-14876]:Block[12930-14910]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[12906-12959]:IfStatement[12940-12993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12923-12959]:Block[12957-12993]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12937-12949]:ReturnStatement[12971-12983]"
    }, {
      "left" : "if (obj == null)",
      "right" : "if (obj == null)",
      "info" : "IfStatement[12968-13022]:IfStatement[13002-13056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12985-13022]:Block[13019-13056]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12999-13012]:ReturnStatement[13033-13046]"
    }, {
      "left" : "if (getClass() != obj.getClass())",
      "right" : "if (getClass() != obj.getClass())",
      "info" : "IfStatement[13031-13102]:IfStatement[13065-13136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13065-13102]:Block[13099-13136]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13079-13092]:ReturnStatement[13113-13126]"
    }, {
      "left" : "final CSVFormat other = (CSVFormat) obj;",
      "right" : "final CSVFormat other = (CSVFormat) obj;",
      "info" : "VariableDeclarationStatement[13112-13152]:VariableDeclarationStatement[13146-13186]"
    }, {
      "left" : "if (delimiter != other.delimiter)",
      "right" : "if (delimiter != other.delimiter)",
      "info" : "IfStatement[13161-13232]:IfStatement[13195-13266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13195-13232]:Block[13229-13266]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13209-13222]:ReturnStatement[13243-13256]"
    }, {
      "left" : "if (quoteMode != other.quoteMode)",
      "right" : "if (quoteMode != other.quoteMode)",
      "info" : "IfStatement[13241-13312]:IfStatement[13275-13346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13275-13312]:Block[13309-13346]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13289-13302]:ReturnStatement[13323-13336]"
    }, {
      "left" : "if (quoteCharacter == null)",
      "right" : "if (quoteCharacter == null)",
      "info" : "IfStatement[13321-13545]:IfStatement[13355-13579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13349-13452]:Block[13383-13486]"
    }, {
      "left" : "if (other.quoteCharacter != null)",
      "right" : "if (other.quoteCharacter != null)",
      "info" : "IfStatement[13363-13442]:IfStatement[13397-13476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13397-13442]:Block[13431-13476]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13415-13428]:ReturnStatement[13449-13462]"
    }, {
      "left" : "if (!quoteCharacter.equals(other.quoteCharacter))",
      "right" : "if (!quoteCharacter.equals(other.quoteCharacter))",
      "info" : "IfStatement[13458-13545]:IfStatement[13492-13579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13508-13545]:Block[13542-13579]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13522-13535]:ReturnStatement[13556-13569]"
    }, {
      "left" : "if (commentMarker == null)",
      "right" : "if (commentMarker == null)",
      "info" : "IfStatement[13554-13774]:IfStatement[13588-13808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13581-13683]:Block[13615-13717]"
    }, {
      "left" : "if (other.commentMarker != null)",
      "right" : "if (other.commentMarker != null)",
      "info" : "IfStatement[13595-13673]:IfStatement[13629-13707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13628-13673]:Block[13662-13707]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13646-13659]:ReturnStatement[13680-13693]"
    }, {
      "left" : "if (!commentMarker.equals(other.commentMarker))",
      "right" : "if (!commentMarker.equals(other.commentMarker))",
      "info" : "IfStatement[13689-13774]:IfStatement[13723-13808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13737-13774]:Block[13771-13808]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13751-13764]:ReturnStatement[13785-13798]"
    }, {
      "left" : "if (escapeCharacter == null)",
      "right" : "if (escapeCharacter == null)",
      "info" : "IfStatement[13783-14011]:IfStatement[13817-14045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13812-13916]:Block[13846-13950]"
    }, {
      "left" : "if (other.escapeCharacter != null)",
      "right" : "if (other.escapeCharacter != null)",
      "info" : "IfStatement[13826-13906]:IfStatement[13860-13940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13861-13906]:Block[13895-13940]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13879-13892]:ReturnStatement[13913-13926]"
    }, {
      "left" : "if (!escapeCharacter.equals(other.escapeCharacter))",
      "right" : "if (!escapeCharacter.equals(other.escapeCharacter))",
      "info" : "IfStatement[13922-14011]:IfStatement[13956-14045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13974-14011]:Block[14008-14045]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13988-14001]:ReturnStatement[14022-14035]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[14020-14228]:IfStatement[14054-14262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14044-14143]:Block[14078-14177]"
    }, {
      "left" : "if (other.nullString != null)",
      "right" : "if (other.nullString != null)",
      "info" : "IfStatement[14058-14133]:IfStatement[14092-14167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14088-14133]:Block[14122-14167]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14106-14119]:ReturnStatement[14140-14153]"
    }, {
      "left" : "if (!nullString.equals(other.nullString))",
      "right" : "if (!nullString.equals(other.nullString))",
      "info" : "IfStatement[14149-14228]:IfStatement[14183-14262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14191-14228]:Block[14225-14262]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14205-14218]:ReturnStatement[14239-14252]"
    }, {
      "left" : "if (!Arrays.equals(header, other.header))",
      "right" : "if (!Arrays.equals(header, other.header))",
      "info" : "IfStatement[14237-14316]:IfStatement[14271-14350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14279-14316]:Block[14313-14350]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14293-14306]:ReturnStatement[14327-14340]"
    }, {
      "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "info" : "IfStatement[14325-14424]:IfStatement[14359-14458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14387-14424]:Block[14421-14458]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14401-14414]:ReturnStatement[14435-14448]"
    }, {
      "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "info" : "IfStatement[14433-14518]:IfStatement[14467-14552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14481-14518]:Block[14515-14552]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14495-14508]:ReturnStatement[14529-14542]"
    }, {
      "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "info" : "IfStatement[14527-14612]:IfStatement[14561-14646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14575-14612]:Block[14609-14646]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14589-14602]:ReturnStatement[14623-14636]"
    }, {
      "left" : "if (recordSeparator == null)",
      "right" : "if (recordSeparator == null)",
      "info" : "IfStatement[14621-14849]:IfStatement[14655-14883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14650-14754]:Block[14684-14788]"
    }, {
      "left" : "if (other.recordSeparator != null)",
      "right" : "if (other.recordSeparator != null)",
      "info" : "IfStatement[14664-14744]:IfStatement[14698-14778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14699-14744]:Block[14733-14778]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14717-14730]:ReturnStatement[14751-14764]"
    }, {
      "left" : "if (!recordSeparator.equals(other.recordSeparator))",
      "right" : "if (!recordSeparator.equals(other.recordSeparator))",
      "info" : "IfStatement[14760-14849]:IfStatement[14794-14883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14812-14849]:Block[14846-14883]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14826-14839]:ReturnStatement[14860-14873]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14858-14870]:ReturnStatement[14892-14904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15038-15044]:Modifier[15072-15078]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15045-15051]:SimpleType[15079-15085]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[15052-15058]:SimpleName[15086-15092]"
    }, {
      "left" : "final Object... values",
      "right" : "final Object... values",
      "info" : "SingleVariableDeclaration[15059-15081]:SingleVariableDeclaration[15093-15115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15083-15428]:Block[15117-15462]"
    }, {
      "left" : "final StringWriter out = new StringWriter();",
      "right" : "final StringWriter out = new StringWriter();",
      "info" : "VariableDeclarationStatement[15093-15137]:VariableDeclarationStatement[15127-15171]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15146-15422]:TryStatement[15180-15456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15150-15262]:Block[15184-15296]"
    }, {
      "left" : "new CSVPrinter(out, this).printRecord(values);",
      "right" : "new CSVPrinter(out, this).printRecord(values);",
      "info" : "ExpressionStatement[15164-15210]:ExpressionStatement[15198-15244]"
    }, {
      "left" : "return out.toString().trim();",
      "right" : "return out.toString().trim();",
      "info" : "ReturnStatement[15223-15252]:ReturnStatement[15257-15286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15291-15422]:Block[15325-15456]"
    }, {
      "left" : "throw new IllegalStateException(e);",
      "right" : "throw new IllegalStateException(e);",
      "info" : "ThrowStatement[15377-15412]:ThrowStatement[15411-15446]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15584-15590]:Modifier[15618-15624]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[15591-15600]:SimpleType[15625-15634]"
    }, {
      "left" : "getCommentMarker",
      "right" : "getCommentMarker",
      "info" : "SimpleName[15601-15617]:SimpleName[15635-15651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15620-15657]:Block[15654-15691]"
    }, {
      "left" : "return commentMarker;",
      "right" : "return commentMarker;",
      "info" : "ReturnStatement[15630-15651]:ReturnStatement[15664-15685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15806-15812]:Modifier[15840-15846]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[15813-15817]:PrimitiveType[15847-15851]"
    }, {
      "left" : "getDelimiter",
      "right" : "getDelimiter",
      "info" : "SimpleName[15818-15830]:SimpleName[15852-15864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15833-15866]:Block[15867-15900]"
    }, {
      "left" : "return delimiter;",
      "right" : "return delimiter;",
      "info" : "ReturnStatement[15843-15860]:ReturnStatement[15877-15894]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15989-15995]:Modifier[16023-16029]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[15996-16005]:SimpleType[16030-16039]"
    }, {
      "left" : "getEscapeCharacter",
      "right" : "getEscapeCharacter",
      "info" : "SimpleName[16006-16024]:SimpleName[16040-16058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16027-16066]:Block[16061-16100]"
    }, {
      "left" : "return escapeCharacter;",
      "right" : "return escapeCharacter;",
      "info" : "ReturnStatement[16037-16060]:ReturnStatement[16071-16094]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16251-16257]:Modifier[16285-16291]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[16258-16266]:ArrayType[16292-16300]"
    }, {
      "left" : "getHeader",
      "right" : "getHeader",
      "info" : "SimpleName[16267-16276]:SimpleName[16301-16310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16279-16341]:Block[16313-16375]"
    }, {
      "left" : "return header != null ? header.clone() : null;",
      "right" : "return header != null ? header.clone() : null;",
      "info" : "ReturnStatement[16289-16335]:ReturnStatement[16323-16369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16627-16633]:Modifier[16661-16667]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16634-16641]:PrimitiveType[16668-16675]"
    }, {
      "left" : "getAllowMissingColumnNames",
      "right" : "getAllowMissingColumnNames",
      "info" : "SimpleName[16642-16668]:SimpleName[16676-16702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16671-16718]:Block[16705-16752]"
    }, {
      "left" : "return allowMissingColumnNames;",
      "right" : "return allowMissingColumnNames;",
      "info" : "ReturnStatement[16681-16712]:ReturnStatement[16715-16746]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16972-16978]:Modifier[17006-17012]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16979-16986]:PrimitiveType[17013-17020]"
    }, {
      "left" : "getIgnoreEmptyLines",
      "right" : "getIgnoreEmptyLines",
      "info" : "SimpleName[16987-17006]:SimpleName[17021-17040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17009-17049]:Block[17043-17083]"
    }, {
      "left" : "return ignoreEmptyLines;",
      "right" : "return ignoreEmptyLines;",
      "info" : "ReturnStatement[17019-17043]:ReturnStatement[17053-17077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17292-17298]:Modifier[17326-17332]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17299-17306]:PrimitiveType[17333-17340]"
    }, {
      "left" : "getIgnoreSurroundingSpaces",
      "right" : "getIgnoreSurroundingSpaces",
      "info" : "SimpleName[17307-17333]:SimpleName[17341-17367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17336-17383]:Block[17370-17417]"
    }, {
      "left" : "return ignoreSurroundingSpaces;",
      "right" : "return ignoreSurroundingSpaces;",
      "info" : "ReturnStatement[17346-17377]:ReturnStatement[17380-17411]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17881-17887]:Modifier[17915-17921]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[17888-17894]:SimpleType[17922-17928]"
    }, {
      "left" : "getNullString",
      "right" : "getNullString",
      "info" : "SimpleName[17895-17908]:SimpleName[17929-17942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17911-17945]:Block[17945-17979]"
    }, {
      "left" : "return nullString;",
      "right" : "return nullString;",
      "info" : "ReturnStatement[17921-17939]:ReturnStatement[17955-17973]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18121-18127]:Modifier[18155-18161]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[18128-18137]:SimpleType[18162-18171]"
    }, {
      "left" : "getQuoteCharacter",
      "right" : "getQuoteCharacter",
      "info" : "SimpleName[18138-18155]:SimpleName[18172-18189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18158-18196]:Block[18192-18230]"
    }, {
      "left" : "return quoteCharacter;",
      "right" : "return quoteCharacter;",
      "info" : "ReturnStatement[18168-18190]:ReturnStatement[18202-18224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18304-18310]:Modifier[18338-18344]"
    }, {
      "left" : "QuoteMode",
      "right" : "QuoteMode",
      "info" : "SimpleType[18311-18320]:SimpleType[18345-18354]"
    }, {
      "left" : "getQuoteMode",
      "right" : "getQuoteMode",
      "info" : "SimpleName[18321-18333]:SimpleName[18355-18367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18336-18369]:Block[18370-18403]"
    }, {
      "left" : "return quoteMode;",
      "right" : "return quoteMode;",
      "info" : "ReturnStatement[18346-18363]:ReturnStatement[18380-18397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18497-18503]:Modifier[18531-18537]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18504-18510]:SimpleType[18538-18544]"
    }, {
      "left" : "getRecordSeparator",
      "right" : "getRecordSeparator",
      "info" : "SimpleName[18511-18529]:SimpleName[18545-18563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18532-18571]:Block[18566-18605]"
    }, {
      "left" : "return recordSeparator;",
      "right" : "return recordSeparator;",
      "info" : "ReturnStatement[18542-18565]:ReturnStatement[18576-18599]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18700-18706]:Modifier[18734-18740]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18707-18714]:PrimitiveType[18741-18748]"
    }, {
      "left" : "getSkipHeaderRecord",
      "right" : "getSkipHeaderRecord",
      "info" : "SimpleName[18715-18734]:SimpleName[18749-18768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18737-18777]:Block[18771-18811]"
    }, {
      "left" : "return skipHeaderRecord;",
      "right" : "return skipHeaderRecord;",
      "info" : "ReturnStatement[18747-18771]:ReturnStatement[18781-18805]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18783-18792]:MarkerAnnotation[18817-18826]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18797-18803]:Modifier[18831-18837]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18804-18807]:PrimitiveType[18838-18841]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[18808-18816]:SimpleName[18842-18850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18823-19771]:Block[18857-19805]"
    }, {
      "left" : "final int prime = 31;",
      "right" : "final int prime = 31;",
      "info" : "VariableDeclarationStatement[18833-18854]:VariableDeclarationStatement[18867-18888]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[18863-18878]:VariableDeclarationStatement[18897-18912]"
    }, {
      "left" : "result = prime * result + delimiter;",
      "right" : "result = prime * result + delimiter;",
      "info" : "ExpressionStatement[18888-18924]:ExpressionStatement[18922-18958]"
    }, {
      "left" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
      "right" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
      "info" : "ExpressionStatement[18933-19008]:ExpressionStatement[18967-19042]"
    }, {
      "left" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
      "right" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
      "info" : "ExpressionStatement[19017-19102]:ExpressionStatement[19051-19136]"
    }, {
      "left" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
      "right" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
      "info" : "ExpressionStatement[19111-19194]:ExpressionStatement[19145-19228]"
    }, {
      "left" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
      "right" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
      "info" : "ExpressionStatement[19203-19290]:ExpressionStatement[19237-19324]"
    }, {
      "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "info" : "ExpressionStatement[19299-19376]:ExpressionStatement[19333-19410]"
    }, {
      "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "info" : "ExpressionStatement[19385-19451]:ExpressionStatement[19419-19485]"
    }, {
      "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "info" : "ExpressionStatement[19460-19519]:ExpressionStatement[19494-19553]"
    }, {
      "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "info" : "ExpressionStatement[19528-19587]:ExpressionStatement[19562-19621]"
    }, {
      "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "info" : "ExpressionStatement[19596-19683]:ExpressionStatement[19630-19717]"
    }, {
      "left" : "result = prime * result + Arrays.hashCode(header);",
      "right" : "result = prime * result + Arrays.hashCode(header);",
      "info" : "ExpressionStatement[19692-19742]:ExpressionStatement[19726-19776]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[19751-19765]:ReturnStatement[19785-19799]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20043-20049]:Modifier[20077-20083]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20050-20057]:PrimitiveType[20084-20091]"
    }, {
      "left" : "isCommentMarkerSet",
      "right" : "isCommentMarkerSet",
      "info" : "SimpleName[20058-20076]:SimpleName[20092-20110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20079-20124]:Block[20113-20158]"
    }, {
      "left" : "return commentMarker != null;",
      "right" : "return commentMarker != null;",
      "info" : "ReturnStatement[20089-20118]:ReturnStatement[20123-20152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20257-20263]:Modifier[20291-20297]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20264-20271]:PrimitiveType[20298-20305]"
    }, {
      "left" : "isEscapeCharacterSet",
      "right" : "isEscapeCharacterSet",
      "info" : "SimpleName[20272-20292]:SimpleName[20306-20326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20295-20342]:Block[20329-20376]"
    }, {
      "left" : "return escapeCharacter != null;",
      "right" : "return escapeCharacter != null;",
      "info" : "ReturnStatement[20305-20336]:ReturnStatement[20339-20370]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20480-20486]:Modifier[20514-20520]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20487-20494]:PrimitiveType[20521-20528]"
    }, {
      "left" : "isNullStringSet",
      "right" : "isNullStringSet",
      "info" : "SimpleName[20495-20510]:SimpleName[20529-20544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20513-20555]:Block[20547-20589]"
    }, {
      "left" : "return nullString != null;",
      "right" : "return nullString != null;",
      "info" : "ReturnStatement[20523-20549]:ReturnStatement[20557-20583]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20691-20697]:Modifier[20725-20731]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20698-20705]:PrimitiveType[20732-20739]"
    }, {
      "left" : "isQuoteCharacterSet",
      "right" : "isQuoteCharacterSet",
      "info" : "SimpleName[20706-20725]:SimpleName[20740-20759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20728-20774]:Block[20762-20808]"
    }, {
      "left" : "return quoteCharacter != null;",
      "right" : "return quoteCharacter != null;",
      "info" : "ReturnStatement[20738-20768]:ReturnStatement[20772-20802]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21123-21129]:Modifier[21157-21163]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[21130-21139]:SimpleType[21164-21173]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[21140-21145]:SimpleName[21174-21179]"
    }, {
      "left" : "final Reader in",
      "right" : "final Reader in",
      "info" : "SingleVariableDeclaration[21146-21161]:SingleVariableDeclaration[21180-21195]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21170-21181]:SimpleType[21204-21215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21182-21229]:Block[21216-21263]"
    }, {
      "left" : "return new CSVParser(in, this);",
      "right" : "return new CSVParser(in, this);",
      "info" : "ReturnStatement[21192-21223]:ReturnStatement[21226-21257]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21535-21541]:Modifier[21569-21575]"
    }, {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "SimpleType[21542-21552]:SimpleType[21576-21586]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[21553-21558]:SimpleName[21587-21592]"
    }, {
      "left" : "final Appendable out",
      "right" : "final Appendable out",
      "info" : "SingleVariableDeclaration[21559-21579]:SingleVariableDeclaration[21593-21613]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21588-21599]:SimpleType[21622-21633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21600-21649]:Block[21634-21683]"
    }, {
      "left" : "return new CSVPrinter(out, this);",
      "right" : "return new CSVPrinter(out, this);",
      "info" : "ReturnStatement[21610-21643]:ReturnStatement[21644-21677]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21655-21664]:MarkerAnnotation[21689-21698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21669-21675]:Modifier[21703-21709]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[21676-21682]:SimpleType[21710-21716]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[21683-21691]:SimpleName[21717-21725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21694-22990]:Block[21728-23024]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[21704-21749]:VariableDeclarationStatement[21738-21783]"
    }, {
      "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "info" : "ExpressionStatement[21758-21813]:ExpressionStatement[21792-21847]"
    }, {
      "left" : "if (isEscapeCharacterSet())",
      "right" : "if (isEscapeCharacterSet())",
      "info" : "IfStatement[21822-21960]:IfStatement[21856-21994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21850-21960]:Block[21884-21994]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[21864-21879]:ExpressionStatement[21898-21913]"
    }, {
      "left" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
      "right" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
      "info" : "ExpressionStatement[21892-21950]:ExpressionStatement[21926-21984]"
    }, {
      "left" : "if (isQuoteCharacterSet())",
      "right" : "if (isQuoteCharacterSet())",
      "info" : "IfStatement[21969-22108]:IfStatement[22003-22142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21996-22108]:Block[22030-22142]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[22010-22025]:ExpressionStatement[22044-22059]"
    }, {
      "left" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
      "right" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
      "info" : "ExpressionStatement[22038-22098]:ExpressionStatement[22072-22132]"
    }, {
      "left" : "if (isCommentMarkerSet())",
      "right" : "if (isCommentMarkerSet())",
      "info" : "IfStatement[22117-22257]:IfStatement[22151-22291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22143-22257]:Block[22177-22291]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[22157-22172]:ExpressionStatement[22191-22206]"
    }, {
      "left" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
      "right" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
      "info" : "ExpressionStatement[22185-22247]:ExpressionStatement[22219-22281]"
    }, {
      "left" : "if (isNullStringSet())",
      "right" : "if (isNullStringSet())",
      "info" : "IfStatement[22266-22398]:IfStatement[22300-22432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22289-22398]:Block[22323-22432]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[22303-22318]:ExpressionStatement[22337-22352]"
    }, {
      "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "info" : "ExpressionStatement[22331-22388]:ExpressionStatement[22365-22422]"
    }, {
      "left" : "if(recordSeparator != null)",
      "right" : "if(recordSeparator != null)",
      "info" : "IfStatement[22407-22554]:IfStatement[22441-22588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22435-22554]:Block[22469-22588]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[22449-22464]:ExpressionStatement[22483-22498]"
    }, {
      "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "info" : "ExpressionStatement[22477-22544]:ExpressionStatement[22511-22578]"
    }, {
      "left" : "if (getIgnoreEmptyLines())",
      "right" : "if (getIgnoreEmptyLines())",
      "info" : "IfStatement[22563-22647]:IfStatement[22597-22681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22590-22647]:Block[22624-22681]"
    }, {
      "left" : "sb.append(\" EmptyLines:ignored\");",
      "right" : "sb.append(\" EmptyLines:ignored\");",
      "info" : "ExpressionStatement[22604-22637]:ExpressionStatement[22638-22671]"
    }, {
      "left" : "if (getIgnoreSurroundingSpaces())",
      "right" : "if (getIgnoreSurroundingSpaces())",
      "info" : "IfStatement[22656-22754]:IfStatement[22690-22788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22690-22754]:Block[22724-22788]"
    }, {
      "left" : "sb.append(\" SurroundingSpaces:ignored\");",
      "right" : "sb.append(\" SurroundingSpaces:ignored\");",
      "info" : "ExpressionStatement[22704-22744]:ExpressionStatement[22738-22778]"
    }, {
      "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "info" : "ExpressionStatement[22763-22820]:ExpressionStatement[22797-22854]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[22829-22954]:IfStatement[22863-22988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22849-22954]:Block[22883-22988]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[22863-22878]:ExpressionStatement[22897-22912]"
    }, {
      "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "info" : "ExpressionStatement[22891-22944]:ExpressionStatement[22925-22978]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[22963-22984]:ReturnStatement[22997-23018]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23162-23169]:Modifier[23196-23203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23170-23174]:PrimitiveType[23204-23208]"
    }, {
      "left" : "validate",
      "right" : "validate",
      "info" : "SimpleName[23175-23183]:SimpleName[23209-23217]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[23193-23217]:SimpleType[23227-23251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23218-24666]:Block[23252-24700]"
    }, {
      "left" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
      "right" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
      "info" : "IfStatement[23228-23470]:IfStatement[23262-23504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23299-23470]:Block[23333-23504]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
      "info" : "ThrowStatement[23313-23460]:ThrowStatement[23347-23494]"
    }, {
      "left" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
      "right" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
      "info" : "IfStatement[23480-23722]:IfStatement[23514-23756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23553-23722]:Block[23587-23756]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
      "info" : "ThrowStatement[23567-23712]:ThrowStatement[23601-23746]"
    }, {
      "left" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
      "right" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
      "info" : "IfStatement[23732-23975]:IfStatement[23766-24009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23801-23975]:Block[23835-24009]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
      "info" : "ThrowStatement[23815-23965]:ThrowStatement[23849-23999]"
    }, {
      "left" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
      "right" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
      "info" : "IfStatement[23985-24227]:IfStatement[24019-24261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24053-24227]:Block[24087-24261]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
      "info" : "ThrowStatement[24067-24217]:ThrowStatement[24101-24251]"
    }, {
      "left" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
      "right" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
      "info" : "IfStatement[24237-24478]:IfStatement[24271-24512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24307-24478]:Block[24341-24512]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
      "info" : "ThrowStatement[24321-24468]:ThrowStatement[24355-24502]"
    }, {
      "left" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
      "right" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
      "info" : "IfStatement[24488-24660]:IfStatement[24522-24694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24548-24660]:Block[24582-24694]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
      "right" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
      "info" : "ThrowStatement[24562-24650]:ThrowStatement[24596-24684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25167-25173]:Modifier[25201-25207]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[25174-25183]:SimpleType[25208-25217]"
    }, {
      "left" : "withCommentMarker",
      "right" : "withCommentMarker",
      "info" : "SimpleName[25184-25201]:SimpleName[25218-25235]"
    }, {
      "left" : "final char commentMarker",
      "right" : "final char commentMarker",
      "info" : "SingleVariableDeclaration[25202-25226]:SingleVariableDeclaration[25236-25260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25228-25303]:Block[25262-25337]"
    }, {
      "left" : "return withCommentMarker(Character.valueOf(commentMarker));",
      "right" : "return withCommentMarker(Character.valueOf(commentMarker));",
      "info" : "ReturnStatement[25238-25297]:ReturnStatement[25272-25331]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25833-25839]:Modifier[25867-25873]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[25840-25849]:SimpleType[25874-25883]"
    }, {
      "left" : "withCommentMarker",
      "right" : "withCommentMarker",
      "info" : "SimpleName[25850-25867]:SimpleName[25884-25901]"
    }, {
      "left" : "final Character commentMarker",
      "right" : "final Character commentMarker",
      "info" : "SingleVariableDeclaration[25868-25897]:SingleVariableDeclaration[25902-25931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25899-26322]:Block[25933-26356]"
    }, {
      "left" : "if (isLineBreak(commentMarker))",
      "right" : "if (isLineBreak(commentMarker))",
      "info" : "IfStatement[25909-26061]:IfStatement[25943-26095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25941-26061]:Block[25975-26095]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
      "info" : "ThrowStatement[25955-26051]:ThrowStatement[25989-26085]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[26070-26316]:ReturnStatement[26104-26350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26689-26695]:Modifier[26723-26729]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[26696-26705]:SimpleType[26730-26739]"
    }, {
      "left" : "withDelimiter",
      "right" : "withDelimiter",
      "info" : "SimpleName[26706-26719]:SimpleName[26740-26753]"
    }, {
      "left" : "final char delimiter",
      "right" : "final char delimiter",
      "info" : "SingleVariableDeclaration[26720-26740]:SingleVariableDeclaration[26754-26774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26742-27140]:Block[26776-27174]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[26752-26879]:IfStatement[26786-26913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26780-26879]:Block[26814-26913]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[26794-26869]:ThrowStatement[26828-26903]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[26888-27134]:ReturnStatement[26922-27168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27522-27528]:Modifier[27556-27562]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[27529-27538]:SimpleType[27563-27572]"
    }, {
      "left" : "withEscape",
      "right" : "withEscape",
      "info" : "SimpleName[27539-27549]:SimpleName[27573-27583]"
    }, {
      "left" : "final char escape",
      "right" : "final char escape",
      "info" : "SingleVariableDeclaration[27550-27567]:SingleVariableDeclaration[27584-27601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27569-27630]:Block[27603-27664]"
    }, {
      "left" : "return withEscape(Character.valueOf(escape));",
      "right" : "return withEscape(Character.valueOf(escape));",
      "info" : "ReturnStatement[27579-27624]:ReturnStatement[27613-27658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28042-28048]:Modifier[28076-28082]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[28049-28058]:SimpleType[28083-28092]"
    }, {
      "left" : "withEscape",
      "right" : "withEscape",
      "info" : "SimpleName[28059-28069]:SimpleName[28093-28103]"
    }, {
      "left" : "final Character escape",
      "right" : "final Character escape",
      "info" : "SingleVariableDeclaration[28070-28092]:SingleVariableDeclaration[28104-28126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28094-28487]:Block[28128-28521]"
    }, {
      "left" : "if (isLineBreak(escape))",
      "right" : "if (isLineBreak(escape))",
      "info" : "IfStatement[28104-28235]:IfStatement[28138-28269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28129-28235]:Block[28163-28269]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "info" : "ThrowStatement[28143-28225]:ThrowStatement[28177-28259]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[28244-28481]:ReturnStatement[28278-28515]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29137-29143]:Modifier[29171-29177]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[29144-29153]:SimpleType[29178-29187]"
    }, {
      "left" : "withHeader",
      "right" : "withHeader",
      "info" : "SimpleName[29154-29164]:SimpleName[29188-29198]"
    }, {
      "left" : "final String... header",
      "right" : "final String... header",
      "info" : "SingleVariableDeclaration[29165-29187]:SingleVariableDeclaration[29199-29221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29189-29451]:Block[29223-29485]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[29199-29445]:ReturnStatement[29233-29479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29893-29899]:Modifier[29927-29933]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[29900-29909]:SimpleType[29934-29943]"
    }, {
      "left" : "withAllowMissingColumnNames",
      "right" : "withAllowMissingColumnNames",
      "info" : "SimpleName[29910-29937]:SimpleName[29944-29971]"
    }, {
      "left" : "final boolean allowMissingColumnNames",
      "right" : "final boolean allowMissingColumnNames",
      "info" : "SingleVariableDeclaration[29938-29975]:SingleVariableDeclaration[29972-30009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29977-30239]:Block[30011-30273]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[29987-30233]:ReturnStatement[30021-30267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30652-30658]:Modifier[30686-30692]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[30659-30668]:SimpleType[30693-30702]"
    }, {
      "left" : "withIgnoreEmptyLines",
      "right" : "withIgnoreEmptyLines",
      "info" : "SimpleName[30669-30689]:SimpleName[30703-30723]"
    }, {
      "left" : "final boolean ignoreEmptyLines",
      "right" : "final boolean ignoreEmptyLines",
      "info" : "SingleVariableDeclaration[30690-30720]:SingleVariableDeclaration[30724-30754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30722-30984]:Block[30756-31018]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[30732-30978]:ReturnStatement[30766-31012]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31342-31348]:Modifier[31376-31382]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[31349-31358]:SimpleType[31383-31392]"
    }, {
      "left" : "withIgnoreSurroundingSpaces",
      "right" : "withIgnoreSurroundingSpaces",
      "info" : "SimpleName[31359-31386]:SimpleName[31393-31420]"
    }, {
      "left" : "final boolean ignoreSurroundingSpaces",
      "right" : "final boolean ignoreSurroundingSpaces",
      "info" : "SingleVariableDeclaration[31387-31424]:SingleVariableDeclaration[31421-31458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31426-31688]:Block[31460-31722]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[31436-31682]:ReturnStatement[31470-31716]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32331-32337]:Modifier[32365-32371]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[32338-32347]:SimpleType[32372-32381]"
    }, {
      "left" : "withNullString",
      "right" : "withNullString",
      "info" : "SimpleName[32348-32362]:SimpleName[32382-32396]"
    }, {
      "left" : "final String nullString",
      "right" : "final String nullString",
      "info" : "SingleVariableDeclaration[32363-32386]:SingleVariableDeclaration[32397-32420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32388-32650]:Block[32422-32684]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[32398-32644]:ReturnStatement[32432-32678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33021-33027]:Modifier[33055-33061]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[33028-33037]:SimpleType[33062-33071]"
    }, {
      "left" : "withQuote",
      "right" : "withQuote",
      "info" : "SimpleName[33038-33047]:SimpleName[33072-33081]"
    }, {
      "left" : "final char quoteChar",
      "right" : "final char quoteChar",
      "info" : "SingleVariableDeclaration[33048-33068]:SingleVariableDeclaration[33082-33102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33070-33133]:Block[33104-33167]"
    }, {
      "left" : "return withQuote(Character.valueOf(quoteChar));",
      "right" : "return withQuote(Character.valueOf(quoteChar));",
      "info" : "ReturnStatement[33080-33127]:ReturnStatement[33114-33161]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33533-33539]:Modifier[33567-33573]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[33540-33549]:SimpleType[33574-33583]"
    }, {
      "left" : "withQuote",
      "right" : "withQuote",
      "info" : "SimpleName[33550-33559]:SimpleName[33584-33593]"
    }, {
      "left" : "final Character quoteChar",
      "right" : "final Character quoteChar",
      "info" : "SingleVariableDeclaration[33560-33585]:SingleVariableDeclaration[33594-33619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33587-33980]:Block[33621-34014]"
    }, {
      "left" : "if (isLineBreak(quoteChar))",
      "right" : "if (isLineBreak(quoteChar))",
      "info" : "IfStatement[33597-33724]:IfStatement[33631-33758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33625-33724]:Block[33659-33758]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "info" : "ThrowStatement[33639-33714]:ThrowStatement[33673-33748]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[33733-33974]:ReturnStatement[33767-34008]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34263-34269]:Modifier[34297-34303]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[34270-34279]:SimpleType[34304-34313]"
    }, {
      "left" : "withQuoteMode",
      "right" : "withQuoteMode",
      "info" : "SimpleName[34280-34293]:SimpleName[34314-34327]"
    }, {
      "left" : "final QuoteMode quoteModePolicy",
      "right" : "final QuoteMode quoteModePolicy",
      "info" : "SingleVariableDeclaration[34294-34325]:SingleVariableDeclaration[34328-34359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34327-34595]:Block[34361-34629]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[34337-34589]:ReturnStatement[34371-34623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35087-35093]:Modifier[35121-35127]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[35094-35103]:SimpleType[35128-35137]"
    }, {
      "left" : "withRecordSeparator",
      "right" : "withRecordSeparator",
      "info" : "SimpleName[35104-35123]:SimpleName[35138-35157]"
    }, {
      "left" : "final char recordSeparator",
      "right" : "final char recordSeparator",
      "info" : "SingleVariableDeclaration[35124-35150]:SingleVariableDeclaration[35158-35184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35152-35228]:Block[35186-35262]"
    }, {
      "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "info" : "ReturnStatement[35162-35222]:ReturnStatement[35196-35256]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35822-35828]:Modifier[35856-35862]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[35829-35838]:SimpleType[35863-35872]"
    }, {
      "left" : "withRecordSeparator",
      "right" : "withRecordSeparator",
      "info" : "SimpleName[35839-35858]:SimpleName[35873-35892]"
    }, {
      "left" : "final String recordSeparator",
      "right" : "final String recordSeparator",
      "info" : "SingleVariableDeclaration[35859-35887]:SingleVariableDeclaration[35893-35921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35889-36151]:Block[35923-36185]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[35899-36145]:ReturnStatement[35933-36179]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36459-36465]:Modifier[36493-36499]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[36466-36475]:SimpleType[36500-36509]"
    }, {
      "left" : "withSkipHeaderRecord",
      "right" : "withSkipHeaderRecord",
      "info" : "SimpleName[36476-36496]:SimpleName[36510-36530]"
    }, {
      "left" : "final boolean skipHeaderRecord",
      "right" : "final boolean skipHeaderRecord",
      "info" : "SingleVariableDeclaration[36497-36527]:SingleVariableDeclaration[36531-36561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36529-36791]:Block[36563-36825]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                allowMissingColumnNames);",
      "info" : "ReturnStatement[36539-36785]:ReturnStatement[36573-36819]"
    } ]
  },
  "interFileMappings" : { }
}