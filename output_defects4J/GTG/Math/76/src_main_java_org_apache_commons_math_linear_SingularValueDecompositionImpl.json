{
  "matchedElements" : [
 {
    "left" : "class : SingularValueDecompositionImpl",
    "right" : "class : SingularValueDecompositionImpl",
    "info" : "TypeDeclaration[946-15840]:TypeDeclaration[946-15950]"
  }, {
    "left" : "m",
    "right" : "m",
    "info" : "FieldDeclaration[2096-2159]:FieldDeclaration[2096-2159]"
  }, {
    "left" : "n",
    "right" : "n",
    "info" : "FieldDeclaration[2165-2231]:FieldDeclaration[2165-2231]"
  }, {
    "left" : "transformer",
    "right" : "transformer",
    "info" : "FieldDeclaration[2237-2317]:FieldDeclaration[2237-2317]"
  }, {
    "left" : "mainBidiagonal",
    "right" : "mainBidiagonal",
    "info" : "FieldDeclaration[2323-2406]:FieldDeclaration[2323-2406]"
  }, {
    "left" : "secondaryBidiagonal",
    "right" : "secondaryBidiagonal",
    "info" : "FieldDeclaration[2412-2505]:FieldDeclaration[2412-2505]"
  }, {
    "left" : "mainTridiagonal",
    "right" : "mainTridiagonal",
    "info" : "FieldDeclaration[2511-2596]:FieldDeclaration[2511-2596]"
  }, {
    "left" : "secondaryTridiagonal",
    "right" : "secondaryTridiagonal",
    "info" : "FieldDeclaration[2602-2697]:FieldDeclaration[2602-2697]"
  }, {
    "left" : "eigenDecomposition",
    "right" : "eigenDecomposition",
    "info" : "FieldDeclaration[2703-2807]:FieldDeclaration[2703-2807]"
  }, {
    "left" : "singularValues",
    "right" : "singularValues",
    "info" : "FieldDeclaration[2813-2873]:FieldDeclaration[2813-2873]"
  }, {
    "left" : "cachedU",
    "right" : "cachedU",
    "info" : "FieldDeclaration[2879-2936]:FieldDeclaration[2879-2936]"
  }, {
    "left" : "cachedUt",
    "right" : "cachedUt",
    "info" : "FieldDeclaration[2942-3012]:FieldDeclaration[2942-3012]"
  }, {
    "left" : "cachedS",
    "right" : "cachedS",
    "info" : "FieldDeclaration[3018-3075]:FieldDeclaration[3018-3075]"
  }, {
    "left" : "cachedV",
    "right" : "cachedV",
    "info" : "FieldDeclaration[3081-3138]:FieldDeclaration[3081-3138]"
  }, {
    "left" : "cachedVt",
    "right" : "cachedVt",
    "info" : "FieldDeclaration[3144-3214]:FieldDeclaration[3144-3214]"
  }, {
    "left" : "public SingularValueDecompositionImpl(matrix ) : ",
    "right" : "public SingularValueDecompositionImpl(matrix ) : ",
    "info" : "MethodDeclaration[3220-3701]:MethodDeclaration[3220-3701]"
  }, {
    "left" : "public SingularValueDecompositionImpl(matrix , max int) : ",
    "right" : "public SingularValueDecompositionImpl(matrix , max int) : ",
    "info" : "MethodDeclaration[3707-5700]:MethodDeclaration[3707-5700]"
  }, {
    "left" : "public getU() : ",
    "right" : "public getU() : ",
    "info" : "MethodDeclaration[5706-7600]:MethodDeclaration[5706-7655]"
  }, {
    "left" : "public getUT() : ",
    "right" : "public getUT() : ",
    "info" : "MethodDeclaration[7606-7851]:MethodDeclaration[7661-7906]"
  }, {
    "left" : "public getS() : ",
    "right" : "public getS() : ",
    "info" : "MethodDeclaration[7857-8149]:MethodDeclaration[7912-8204]"
  }, {
    "left" : "public getSingularValues() : ",
    "right" : "public getSingularValues() : ",
    "info" : "MethodDeclaration[8155-8300]:MethodDeclaration[8210-8355]"
  }, {
    "left" : "public getV() : ",
    "right" : "public getV() : ",
    "info" : "MethodDeclaration[8306-10196]:MethodDeclaration[8361-10306]"
  }, {
    "left" : "public getVT() : ",
    "right" : "public getVT() : ",
    "info" : "MethodDeclaration[10202-10447]:MethodDeclaration[10312-10557]"
  }, {
    "left" : "public getCovariance(minSingularValue double) : ",
    "right" : "public getCovariance(minSingularValue double) : ",
    "info" : "MethodDeclaration[10453-11546]:MethodDeclaration[10563-11656]"
  }, {
    "left" : "public visit(row int, column int, value double) : void",
    "right" : "public visit(row int, column int, value double) : void",
    "info" : "MethodDeclaration[11185-11391]:MethodDeclaration[11295-11501]"
  }, {
    "left" : "public getNorm() : double",
    "right" : "public getNorm() : double",
    "info" : "MethodDeclaration[11552-11680]:MethodDeclaration[11662-11790]"
  }, {
    "left" : "public getConditionNumber() : double",
    "right" : "public getConditionNumber() : double",
    "info" : "MethodDeclaration[11686-11869]:MethodDeclaration[11796-11979]"
  }, {
    "left" : "public getRank() : int",
    "right" : "public getRank() : int",
    "info" : "MethodDeclaration[11875-12227]:MethodDeclaration[11985-12337]"
  }, {
    "left" : "public getSolver() : ",
    "right" : "public getSolver() : ",
    "info" : "MethodDeclaration[12233-12419]:MethodDeclaration[12343-12529]"
  }, {
    "left" : "class : Solver",
    "right" : "class : Solver",
    "info" : "TypeDeclaration[12425-15837]:TypeDeclaration[12535-15947]"
  }, {
    "left" : "pseudoInverse",
    "right" : "pseudoInverse",
    "info" : "FieldDeclaration[12526-12618]:FieldDeclaration[12636-12728]"
  }, {
    "left" : "nonSingular",
    "right" : "nonSingular",
    "info" : "FieldDeclaration[12628-12694]:FieldDeclaration[12738-12804]"
  }, {
    "left" : "private Solver(singularValues , uT , v , nonSingular boolean)",
    "right" : "private Solver(singularValues , uT , v , nonSingular boolean)",
    "info" : "MethodDeclaration[12704-13605]:MethodDeclaration[12814-13715]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[13615-14202]:MethodDeclaration[13725-14312]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[14212-14803]:MethodDeclaration[14322-14913]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[14813-15405]:MethodDeclaration[14923-15515]"
  }, {
    "left" : "public isNonSingular() : boolean",
    "right" : "public isNonSingular() : boolean",
    "info" : "MethodDeclaration[15415-15637]:MethodDeclaration[15525-15747]"
  }, {
    "left" : "public getInverse() : ",
    "right" : "public getInverse() : ",
    "info" : "MethodDeclaration[15647-15830]:MethodDeclaration[15757-15940]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3506-3512]:Modifier[3506-3512]"
  }, {
    "left" : "SingularValueDecompositionImpl",
    "right" : "SingularValueDecompositionImpl",
    "info" : "SimpleName[3513-3543]:SimpleName[3513-3543]"
  }, {
    "left" : "final RealMatrix matrix",
    "right" : "final RealMatrix matrix",
    "info" : "SingleVariableDeclaration[3544-3567]:SingleVariableDeclaration[3544-3567]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[3584-3606]:SimpleType[3584-3606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3607-3701]:Block[3607-3701]"
  }, {
    "left" : "this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));",
    "right" : "this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));",
    "info" : "ConstructorInvocation[3617-3695]:ConstructorInvocation[3617-3695]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4048-4054]:Modifier[4048-4054]"
  }, {
    "left" : "SingularValueDecompositionImpl",
    "right" : "SingularValueDecompositionImpl",
    "info" : "SimpleName[4055-4085]:SimpleName[4055-4085]"
  }, {
    "left" : "final RealMatrix matrix",
    "right" : "final RealMatrix matrix",
    "info" : "SingleVariableDeclaration[4086-4109]:SingleVariableDeclaration[4086-4109]"
  }, {
    "left" : "final int max",
    "right" : "final int max",
    "info" : "SingleVariableDeclaration[4111-4124]:SingleVariableDeclaration[4111-4124]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[4141-4163]:SimpleType[4141-4163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4164-5700]:Block[4164-5700]"
  }, {
    "left" : "m = matrix.getRowDimension();",
    "right" : "m = matrix.getRowDimension();",
    "info" : "ExpressionStatement[4175-4204]:ExpressionStatement[4175-4204]"
  }, {
    "left" : "n = matrix.getColumnDimension();",
    "right" : "n = matrix.getColumnDimension();",
    "info" : "ExpressionStatement[4213-4245]:ExpressionStatement[4213-4245]"
  }, {
    "left" : "cachedU  = null;",
    "right" : "cachedU  = null;",
    "info" : "ExpressionStatement[4255-4271]:ExpressionStatement[4255-4271]"
  }, {
    "left" : "cachedS  = null;",
    "right" : "cachedS  = null;",
    "info" : "ExpressionStatement[4280-4296]:ExpressionStatement[4280-4296]"
  }, {
    "left" : "cachedV  = null;",
    "right" : "cachedV  = null;",
    "info" : "ExpressionStatement[4305-4321]:ExpressionStatement[4305-4321]"
  }, {
    "left" : "cachedVt = null;",
    "right" : "cachedVt = null;",
    "info" : "ExpressionStatement[4330-4346]:ExpressionStatement[4330-4346]"
  }, {
    "left" : "transformer         = new BiDiagonalTransformer(matrix);",
    "right" : "transformer         = new BiDiagonalTransformer(matrix);",
    "info" : "ExpressionStatement[4402-4458]:ExpressionStatement[4402-4458]"
  }, {
    "left" : "mainBidiagonal      = transformer.getMainDiagonalRef();",
    "right" : "mainBidiagonal      = transformer.getMainDiagonalRef();",
    "info" : "ExpressionStatement[4467-4522]:ExpressionStatement[4467-4522]"
  }, {
    "left" : "secondaryBidiagonal = transformer.getSecondaryDiagonalRef();",
    "right" : "secondaryBidiagonal = transformer.getSecondaryDiagonalRef();",
    "info" : "ExpressionStatement[4531-4591]:ExpressionStatement[4531-4591]"
  }, {
    "left" : "mainTridiagonal      = new double[mainBidiagonal.length];",
    "right" : "mainTridiagonal      = new double[mainBidiagonal.length];",
    "info" : "ExpressionStatement[4673-4730]:ExpressionStatement[4673-4730]"
  }, {
    "left" : "secondaryTridiagonal = new double[mainBidiagonal.length - 1];",
    "right" : "secondaryTridiagonal = new double[mainBidiagonal.length - 1];",
    "info" : "ExpressionStatement[4739-4800]:ExpressionStatement[4739-4800]"
  }, {
    "left" : "double a = mainBidiagonal[0];",
    "right" : "double a = mainBidiagonal[0];",
    "info" : "VariableDeclarationStatement[4809-4838]:VariableDeclarationStatement[4809-4838]"
  }, {
    "left" : "mainTridiagonal[0] = a * a;",
    "right" : "mainTridiagonal[0] = a * a;",
    "info" : "ExpressionStatement[4847-4874]:ExpressionStatement[4847-4874]"
  }, {
    "left" : "for (int i = 1; i < mainBidiagonal.length; ++i)",
    "right" : "for (int i = 1; i < mainBidiagonal.length; ++i)",
    "info" : "ForStatement[4883-5132]:ForStatement[4883-5132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4931-5132]:Block[4931-5132]"
  }, {
    "left" : "final double b  = secondaryBidiagonal[i - 1];",
    "right" : "final double b  = secondaryBidiagonal[i - 1];",
    "info" : "VariableDeclarationStatement[4945-4990]:VariableDeclarationStatement[4945-4990]"
  }, {
    "left" : "secondaryTridiagonal[i - 1] = a * b;",
    "right" : "secondaryTridiagonal[i - 1] = a * b;",
    "info" : "ExpressionStatement[5003-5039]:ExpressionStatement[5003-5039]"
  }, {
    "left" : "a = mainBidiagonal[i];",
    "right" : "a = mainBidiagonal[i];",
    "info" : "ExpressionStatement[5052-5074]:ExpressionStatement[5052-5074]"
  }, {
    "left" : "mainTridiagonal[i] = a * a + b * b;",
    "right" : "mainTridiagonal[i] = a * a + b * b;",
    "info" : "ExpressionStatement[5087-5122]:ExpressionStatement[5087-5122]"
  }, {
    "left" : "eigenDecomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal,\n                                       MathUtils.SAFE_MIN);",
    "right" : "eigenDecomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal,\n                                       MathUtils.SAFE_MIN);",
    "info" : "ExpressionStatement[5177-5335]:ExpressionStatement[5177-5335]"
  }, {
    "left" : "final double[] eigenValues = eigenDecomposition.getRealEigenvalues();",
    "right" : "final double[] eigenValues = eigenDecomposition.getRealEigenvalues();",
    "info" : "VariableDeclarationStatement[5344-5413]:VariableDeclarationStatement[5344-5413]"
  }, {
    "left" : "int p = Math.min(max, eigenValues.length);",
    "right" : "int p = Math.min(max, eigenValues.length);",
    "info" : "VariableDeclarationStatement[5422-5464]:VariableDeclarationStatement[5422-5464]"
  }, {
    "left" : "while ((p > 0) && (eigenValues[p - 1] <= 0))",
    "right" : "while ((p > 0) && (eigenValues[p - 1] <= 0))",
    "info" : "WhileStatement[5473-5546]:WhileStatement[5473-5546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5518-5546]:Block[5518-5546]"
  }, {
    "left" : "--p;",
    "right" : "--p;",
    "info" : "ExpressionStatement[5532-5536]:ExpressionStatement[5532-5536]"
  }, {
    "left" : "singularValues = new double[p];",
    "right" : "singularValues = new double[p];",
    "info" : "ExpressionStatement[5555-5586]:ExpressionStatement[5555-5586]"
  }, {
    "left" : "for (int i = 0; i < p; ++i)",
    "right" : "for (int i = 0; i < p; ++i)",
    "info" : "ForStatement[5595-5693]:ForStatement[5595-5693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5623-5693]:Block[5623-5693]"
  }, {
    "left" : "singularValues[i] = Math.sqrt(eigenValues[i]);",
    "right" : "singularValues[i] = Math.sqrt(eigenValues[i]);",
    "info" : "ExpressionStatement[5637-5683]:ExpressionStatement[5637-5683]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5731-5737]:Modifier[5731-5737]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[5738-5748]:SimpleType[5738-5748]"
  }, {
    "left" : "getU",
    "right" : "getU",
    "info" : "SimpleName[5749-5753]:SimpleName[5749-5753]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[5771-5793]:SimpleType[5771-5793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5794-7600]:Block[5794-7655]"
  }, {
    "left" : "if (cachedU == null)",
    "right" : "if (cachedU == null)",
    "info" : "IfStatement[5805-7532]:IfStatement[5805-7587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5826-7532]:Block[5826-7587]"
  }, {
    "left" : "final int p = singularValues.length;",
    "right" : "final int p = singularValues.length;",
    "info" : "VariableDeclarationStatement[5841-5877]:VariableDeclarationStatement[5841-5877]"
  }, {
    "left" : "if (m >= n)",
    "right" : "if (m >= n)",
    "info" : "IfStatement[5890-7521]:IfStatement[5890-7576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5902-7246]:Block[5902-7301]"
  }, {
    "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);",
    "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);",
    "info" : "VariableDeclarationStatement[5999-6099]:VariableDeclarationStatement[5999-6099]"
  }, {
    "left" : "p",
    "right" : "n",
    "info" : "SimpleName[6082-6083]:SimpleName[6082-6083]"
  }, {
    "left" : "final double[][] eData = e.getData();",
    "right" : "final double[][] eData = e.getData();",
    "info" : "VariableDeclarationStatement[6116-6153]:VariableDeclarationStatement[6116-6153]"
  }, {
    "left" : "final double[][] wData = new double[m][p];",
    "right" : "final double[][] wData = new double[m][p];",
    "info" : "VariableDeclarationStatement[6170-6212]:VariableDeclarationStatement[6170-6212]"
  }, {
    "left" : "double[] ei1 = eData[0];",
    "right" : "double[] ei1 = eData[0];",
    "info" : "VariableDeclarationStatement[6229-6253]:VariableDeclarationStatement[6229-6253]"
  }, {
    "left" : "for (int i = 0; i < p - 1; ++i)",
    "right" : "for (int i = 0; i < p; ++i)",
    "info" : "ForStatement[6270-6831]:ForStatement[6270-7064]"
  }, {
    "left" : "p",
    "right" : "p",
    "info" : "SimpleName[6290-6291]:SimpleName[6290-6291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6302-6831]:Block[6570-6868]"
  }, {
    "left" : "final double mi = mainBidiagonal[i];",
    "right" : "final double mi = mainBidiagonal[i];",
    "info" : "VariableDeclarationStatement[6405-6441]:VariableDeclarationStatement[6401-6437]"
  }, {
    "left" : "final double[] ei0 = ei1;",
    "right" : "final double[] ei0 = ei1;",
    "info" : "VariableDeclarationStatement[6462-6487]:VariableDeclarationStatement[6458-6483]"
  }, {
    "left" : "final double[] wi  = wData[i];",
    "right" : "final double[] wi  = wData[i];",
    "info" : "VariableDeclarationStatement[6508-6538]:VariableDeclarationStatement[6504-6534]"
  }, {
    "left" : "ei1 = eData[i + 1];",
    "right" : "ei1 = eData[i + 1];",
    "info" : "ExpressionStatement[6563-6582]:ExpressionStatement[6596-6615]"
  }, {
    "left" : "final double si = secondaryBidiagonal[i];",
    "right" : "final double si = secondaryBidiagonal[i];",
    "info" : "VariableDeclarationStatement[6607-6648]:VariableDeclarationStatement[6640-6681]"
  }, {
    "left" : "for (int j = 0; j < p; ++j)",
    "right" : "for (int j = 0; j < p; ++j)",
    "info" : "ForStatement[6673-6813]:ForStatement[6706-6846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6701-6813]:Block[6734-6846]"
  }, {
    "left" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
    "right" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
    "info" : "ExpressionStatement[6731-6787]:ExpressionStatement[6764-6820]"
  }, {
    "left" : "for (int j = 0; j < p; ++j)",
    "right" : "for (int j = 0; j < p; ++j)",
    "info" : "ForStatement[6856-7009]:ForStatement[6900-7024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6884-7009]:Block[6928-7024]"
  }, {
    "left" : "wData",
    "right" : "wi",
    "info" : "SimpleName[6914-6919]:SimpleName[6958-6960]"
  }, {
    "left" : "wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];",
    "right" : "wi[j] = mi * ei0[j] / singularValues[j];",
    "info" : "ExpressionStatement[6914-6983]:ExpressionStatement[6958-6998]"
  }, {
    "left" : "ei1",
    "right" : "mi",
    "info" : "SimpleName[6932-6935]:SimpleName[6966-6968]"
  }, {
    "left" : "mainBidiagonal",
    "right" : "ei0",
    "info" : "SimpleName[6941-6955]:SimpleName[6971-6974]"
  }, {
    "left" : "p",
    "right" : "j",
    "info" : "SimpleName[6956-6957]:SimpleName[6975-6976]"
  }, {
    "left" : "for (int i = p; i < m; ++i)",
    "right" : "for (int i = p; i < m; ++i)",
    "info" : "ForStatement[7027-7120]:ForStatement[7082-7175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7055-7120]:Block[7110-7175]"
  }, {
    "left" : "wData[i] = new double[p];",
    "right" : "wData[i] = new double[p];",
    "info" : "ExpressionStatement[7077-7102]:ExpressionStatement[7132-7157]"
  }, {
    "left" : "cachedU =\n                    transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));",
    "right" : "cachedU =\n                    transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));",
    "info" : "ExpressionStatement[7137-7232]:ExpressionStatement[7192-7287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7252-7521]:Block[7307-7576]"
  }, {
    "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);",
    "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);",
    "info" : "VariableDeclarationStatement[7349-7449]:VariableDeclarationStatement[7404-7504]"
  }, {
    "left" : "cachedU = transformer.getU().multiply(e);",
    "right" : "cachedU = transformer.getU().multiply(e);",
    "info" : "ExpressionStatement[7466-7507]:ExpressionStatement[7521-7562]"
  }, {
    "left" : "return cachedU;",
    "right" : "return cachedU;",
    "info" : "ReturnStatement[7578-7593]:ReturnStatement[7633-7648]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7631-7637]:Modifier[7686-7692]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[7638-7648]:SimpleType[7693-7703]"
  }, {
    "left" : "getUT",
    "right" : "getUT",
    "info" : "SimpleName[7649-7654]:SimpleName[7704-7709]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[7672-7694]:SimpleType[7727-7749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7695-7851]:Block[7750-7906]"
  }, {
    "left" : "if (cachedUt == null)",
    "right" : "if (cachedUt == null)",
    "info" : "IfStatement[7706-7782]:IfStatement[7761-7837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7728-7782]:Block[7783-7837]"
  }, {
    "left" : "cachedUt = getU().transpose();",
    "right" : "cachedUt = getU().transpose();",
    "info" : "ExpressionStatement[7742-7772]:ExpressionStatement[7797-7827]"
  }, {
    "left" : "return cachedUt;",
    "right" : "return cachedUt;",
    "info" : "ReturnStatement[7828-7844]:ReturnStatement[7883-7899]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7882-7888]:Modifier[7937-7943]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[7889-7899]:SimpleType[7944-7954]"
  }, {
    "left" : "getS",
    "right" : "getS",
    "info" : "SimpleName[7900-7904]:SimpleName[7955-7959]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[7922-7944]:SimpleType[7977-7999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7945-8149]:Block[8000-8204]"
  }, {
    "left" : "if (cachedS == null)",
    "right" : "if (cachedS == null)",
    "info" : "IfStatement[7956-8119]:IfStatement[8011-8174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7977-8119]:Block[8032-8174]"
  }, {
    "left" : "cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);",
    "right" : "cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);",
    "info" : "ExpressionStatement[8045-8108]:ExpressionStatement[8100-8163]"
  }, {
    "left" : "return cachedS;",
    "right" : "return cachedS;",
    "info" : "ReturnStatement[8128-8143]:ReturnStatement[8183-8198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8180-8186]:Modifier[8235-8241]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[8187-8195]:ArrayType[8242-8250]"
  }, {
    "left" : "getSingularValues",
    "right" : "getSingularValues",
    "info" : "SimpleName[8196-8213]:SimpleName[8251-8268]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[8231-8253]:SimpleType[8286-8308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8254-8300]:Block[8309-8355]"
  }, {
    "left" : "return singularValues.clone();",
    "right" : "return singularValues.clone();",
    "info" : "ReturnStatement[8264-8294]:ReturnStatement[8319-8349]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8331-8337]:Modifier[8386-8392]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[8338-8348]:SimpleType[8393-8403]"
  }, {
    "left" : "getV",
    "right" : "getV",
    "info" : "SimpleName[8349-8353]:SimpleName[8404-8408]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[8371-8393]:SimpleType[8426-8448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8394-10196]:Block[8449-10306]"
  }, {
    "left" : "if (cachedV == null)",
    "right" : "if (cachedV == null)",
    "info" : "IfStatement[8405-10128]:IfStatement[8460-10238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8426-10128]:Block[8481-10238]"
  }, {
    "left" : "final int p = singularValues.length;",
    "right" : "final int p = singularValues.length;",
    "info" : "VariableDeclarationStatement[8441-8477]:VariableDeclarationStatement[8496-8532]"
  }, {
    "left" : "if (m >= n)",
    "right" : "if (m >= n)",
    "info" : "IfStatement[8490-10117]:IfStatement[8545-10227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8502-8771]:Block[8557-8826]"
  }, {
    "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);",
    "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);",
    "info" : "VariableDeclarationStatement[8599-8699]:VariableDeclarationStatement[8654-8754]"
  }, {
    "left" : "cachedV = transformer.getV().multiply(e);",
    "right" : "cachedV = transformer.getV().multiply(e);",
    "info" : "ExpressionStatement[8716-8757]:ExpressionStatement[8771-8812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8777-10117]:Block[8832-10227]"
  }, {
    "left" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);",
    "right" : "final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);",
    "info" : "VariableDeclarationStatement[8952-9052]:VariableDeclarationStatement[9007-9107]"
  }, {
    "left" : "p",
    "right" : "m",
    "info" : "SimpleName[9035-9036]:SimpleName[9090-9091]"
  }, {
    "left" : "final double[][] eData = e.getData();",
    "right" : "final double[][] eData = e.getData();",
    "info" : "VariableDeclarationStatement[9069-9106]:VariableDeclarationStatement[9124-9161]"
  }, {
    "left" : "final double[][] wData = new double[n][p];",
    "right" : "final double[][] wData = new double[n][p];",
    "info" : "VariableDeclarationStatement[9123-9165]:VariableDeclarationStatement[9178-9220]"
  }, {
    "left" : "double[] ei1 = eData[0];",
    "right" : "double[] ei1 = eData[0];",
    "info" : "VariableDeclarationStatement[9182-9206]:VariableDeclarationStatement[9237-9261]"
  }, {
    "left" : "for (int i = 0; i < p - 1; ++i)",
    "right" : "for (int i = 0; i < p; ++i)",
    "info" : "ForStatement[9223-9703]:ForStatement[9278-9991]"
  }, {
    "left" : "p",
    "right" : "p",
    "info" : "SimpleName[9243-9244]:SimpleName[9298-9299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9255-9703]:Block[9497-9795]"
  }, {
    "left" : "final double mi = mainBidiagonal[i];",
    "right" : "final double mi = mainBidiagonal[i];",
    "info" : "VariableDeclarationStatement[9277-9313]:VariableDeclarationStatement[9328-9364]"
  }, {
    "left" : "final double[] ei0 = ei1;",
    "right" : "final double[] ei0 = ei1;",
    "info" : "VariableDeclarationStatement[9334-9359]:VariableDeclarationStatement[9385-9410]"
  }, {
    "left" : "final double[] wi  = wData[i];",
    "right" : "final double[] wi  = wData[i];",
    "info" : "VariableDeclarationStatement[9380-9410]:VariableDeclarationStatement[9431-9461]"
  }, {
    "left" : "ei1 = eData[i + 1];",
    "right" : "ei1 = eData[i + 1];",
    "info" : "ExpressionStatement[9435-9454]:ExpressionStatement[9523-9542]"
  }, {
    "left" : "final double si = secondaryBidiagonal[i];",
    "right" : "final double si = secondaryBidiagonal[i];",
    "info" : "VariableDeclarationStatement[9479-9520]:VariableDeclarationStatement[9567-9608]"
  }, {
    "left" : "for (int j = 0; j < p; ++j)",
    "right" : "for (int j = 0; j < p; ++j)",
    "info" : "ForStatement[9545-9685]:ForStatement[9633-9773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9573-9685]:Block[9661-9773]"
  }, {
    "left" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
    "right" : "wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];",
    "info" : "ExpressionStatement[9603-9659]:ExpressionStatement[9691-9747]"
  }, {
    "left" : "for (int j = 0; j < p; ++j)",
    "right" : "for (int j = 0; j < p; ++j)",
    "info" : "ForStatement[9728-9881]:ForStatement[9827-9951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9756-9881]:Block[9855-9951]"
  }, {
    "left" : "wData",
    "right" : "wi",
    "info" : "SimpleName[9786-9791]:SimpleName[9885-9887]"
  }, {
    "left" : "wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];",
    "right" : "wi[j] = mi * ei0[j] / singularValues[j];",
    "info" : "ExpressionStatement[9786-9855]:ExpressionStatement[9885-9925]"
  }, {
    "left" : "ei1",
    "right" : "mi",
    "info" : "SimpleName[9804-9807]:SimpleName[9893-9895]"
  }, {
    "left" : "mainBidiagonal",
    "right" : "ei0",
    "info" : "SimpleName[9813-9827]:SimpleName[9898-9901]"
  }, {
    "left" : "p",
    "right" : "j",
    "info" : "SimpleName[9828-9829]:SimpleName[9902-9903]"
  }, {
    "left" : "for (int i = p; i < n; ++i)",
    "right" : "for (int i = p; i < n; ++i)",
    "info" : "ForStatement[9898-9991]:ForStatement[10008-10101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9926-9991]:Block[10036-10101]"
  }, {
    "left" : "wData[i] = new double[p];",
    "right" : "wData[i] = new double[p];",
    "info" : "ExpressionStatement[9948-9973]:ExpressionStatement[10058-10083]"
  }, {
    "left" : "cachedV =\n                    transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));",
    "right" : "cachedV =\n                    transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));",
    "info" : "ExpressionStatement[10008-10103]:ExpressionStatement[10118-10213]"
  }, {
    "left" : "return cachedV;",
    "right" : "return cachedV;",
    "info" : "ReturnStatement[10174-10189]:ReturnStatement[10284-10299]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10227-10233]:Modifier[10337-10343]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[10234-10244]:SimpleType[10344-10354]"
  }, {
    "left" : "getVT",
    "right" : "getVT",
    "info" : "SimpleName[10245-10250]:SimpleName[10355-10360]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[10268-10290]:SimpleType[10378-10400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10291-10447]:Block[10401-10557]"
  }, {
    "left" : "if (cachedVt == null)",
    "right" : "if (cachedVt == null)",
    "info" : "IfStatement[10302-10378]:IfStatement[10412-10488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10324-10378]:Block[10434-10488]"
  }, {
    "left" : "cachedVt = getV().transpose();",
    "right" : "cachedVt = getV().transpose();",
    "info" : "ExpressionStatement[10338-10368]:ExpressionStatement[10448-10478]"
  }, {
    "left" : "return cachedVt;",
    "right" : "return cachedVt;",
    "info" : "ReturnStatement[10424-10440]:ReturnStatement[10534-10550]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10478-10484]:Modifier[10588-10594]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[10485-10495]:SimpleType[10595-10605]"
  }, {
    "left" : "getCovariance",
    "right" : "getCovariance",
    "info" : "SimpleName[10496-10509]:SimpleName[10606-10619]"
  }, {
    "left" : "final double minSingularValue",
    "right" : "final double minSingularValue",
    "info" : "SingleVariableDeclaration[10510-10539]:SingleVariableDeclaration[10620-10649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10541-11546]:Block[10651-11656]"
  }, {
    "left" : "final int p = singularValues.length;",
    "right" : "final int p = singularValues.length;",
    "info" : "VariableDeclarationStatement[10609-10645]:VariableDeclarationStatement[10719-10755]"
  }, {
    "left" : "int dimension = 0;",
    "right" : "int dimension = 0;",
    "info" : "VariableDeclarationStatement[10654-10672]:VariableDeclarationStatement[10764-10782]"
  }, {
    "left" : "while ((dimension < p) && (singularValues[dimension] >= minSingularValue))",
    "right" : "while ((dimension < p) && (singularValues[dimension] >= minSingularValue))",
    "info" : "WhileStatement[10681-10792]:WhileStatement[10791-10902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10756-10792]:Block[10866-10902]"
  }, {
    "left" : "++dimension;",
    "right" : "++dimension;",
    "info" : "ExpressionStatement[10770-10782]:ExpressionStatement[10880-10892]"
  }, {
    "left" : "if (dimension == 0)",
    "right" : "if (dimension == 0)",
    "info" : "IfStatement[10802-11033]:IfStatement[10912-11143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10822-11033]:Block[10932-11143]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"cutoff singular value is {0}, should be at most {1}\",\n                  minSingularValue, singularValues[0]);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"cutoff singular value is {0}, should be at most {1}\",\n                  minSingularValue, singularValues[0]);",
    "info" : "ThrowStatement[10836-11023]:ThrowStatement[10946-11133]"
  }, {
    "left" : "final double[][] data = new double[dimension][p];",
    "right" : "final double[][] data = new double[dimension][p];",
    "info" : "VariableDeclarationStatement[11043-11092]:VariableDeclarationStatement[11153-11202]"
  }, {
    "left" : "getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n            /** {@inheritDoc} */\n            @Override\n            public void visit(final int row, final int column, final double value) {\n                data[row][column] = value / singularValues[row];\n            }\n        }, 0, dimension - 1, 0, p - 1);",
    "right" : "getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {\n            /** {@inheritDoc} */\n            @Override\n            public void visit(final int row, final int column, final double value) {\n                data[row][column] = value / singularValues[row];\n            }\n        }, 0, dimension - 1, 0, p - 1);",
    "info" : "ExpressionStatement[11101-11431]:ExpressionStatement[11211-11541]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11218-11227]:MarkerAnnotation[11328-11337]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11240-11246]:Modifier[11350-11356]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11247-11251]:PrimitiveType[11357-11361]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[11252-11257]:SimpleName[11362-11367]"
  }, {
    "left" : "final int row",
    "right" : "final int row",
    "info" : "SingleVariableDeclaration[11258-11271]:SingleVariableDeclaration[11368-11381]"
  }, {
    "left" : "final int column",
    "right" : "final int column",
    "info" : "SingleVariableDeclaration[11273-11289]:SingleVariableDeclaration[11383-11399]"
  }, {
    "left" : "final double value",
    "right" : "final double value",
    "info" : "SingleVariableDeclaration[11291-11309]:SingleVariableDeclaration[11401-11419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11311-11391]:Block[11421-11501]"
  }, {
    "left" : "data[row][column] = value / singularValues[row];",
    "right" : "data[row][column] = value / singularValues[row];",
    "info" : "ExpressionStatement[11329-11377]:ExpressionStatement[11439-11487]"
  }, {
    "left" : "RealMatrix jv = new Array2DRowRealMatrix(data, false);",
    "right" : "RealMatrix jv = new Array2DRowRealMatrix(data, false);",
    "info" : "VariableDeclarationStatement[11441-11495]:VariableDeclarationStatement[11551-11605]"
  }, {
    "left" : "return jv.transpose().multiply(jv);",
    "right" : "return jv.transpose().multiply(jv);",
    "info" : "ReturnStatement[11504-11539]:ReturnStatement[11614-11649]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11577-11583]:Modifier[11687-11693]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[11584-11590]:PrimitiveType[11694-11700]"
  }, {
    "left" : "getNorm",
    "right" : "getNorm",
    "info" : "SimpleName[11591-11598]:SimpleName[11701-11708]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[11616-11638]:SimpleType[11726-11748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11639-11680]:Block[11749-11790]"
  }, {
    "left" : "return singularValues[0];",
    "right" : "return singularValues[0];",
    "info" : "ReturnStatement[11649-11674]:ReturnStatement[11759-11784]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11711-11717]:Modifier[11821-11827]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[11718-11724]:PrimitiveType[11828-11834]"
  }, {
    "left" : "getConditionNumber",
    "right" : "getConditionNumber",
    "info" : "SimpleName[11725-11743]:SimpleName[11835-11853]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[11761-11783]:SimpleType[11871-11893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11784-11869]:Block[11894-11979]"
  }, {
    "left" : "return singularValues[0] / singularValues[singularValues.length - 1];",
    "right" : "return singularValues[0] / singularValues[singularValues.length - 1];",
    "info" : "ReturnStatement[11794-11863]:ReturnStatement[11904-11973]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11900-11906]:Modifier[12010-12016]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[11907-11910]:PrimitiveType[12017-12020]"
  }, {
    "left" : "getRank",
    "right" : "getRank",
    "info" : "SimpleName[11911-11918]:SimpleName[12021-12028]"
  }, {
    "left" : "IllegalStateException",
    "right" : "IllegalStateException",
    "info" : "SimpleType[11936-11957]:SimpleType[12046-12067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11958-12227]:Block[12068-12337]"
  }, {
    "left" : "final double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);",
    "right" : "final double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);",
    "info" : "VariableDeclarationStatement[11969-12039]:VariableDeclarationStatement[12079-12149]"
  }, {
    "left" : "for (int i = singularValues.length - 1; i >= 0; --i)",
    "right" : "for (int i = singularValues.length - 1; i >= 0; --i)",
    "info" : "ForStatement[12049-12202]:ForStatement[12159-12312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12102-12202]:Block[12212-12312]"
  }, {
    "left" : "if (singularValues[i] > threshold)",
    "right" : "if (singularValues[i] > threshold)",
    "info" : "IfStatement[12115-12192]:IfStatement[12225-12302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12150-12192]:Block[12260-12302]"
  }, {
    "left" : "return i + 1;",
    "right" : "return i + 1;",
    "info" : "ReturnStatement[12166-12179]:ReturnStatement[12276-12289]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[12211-12220]:ReturnStatement[12321-12330]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12258-12264]:Modifier[12368-12374]"
  }, {
    "left" : "DecompositionSolver",
    "right" : "DecompositionSolver",
    "info" : "SimpleType[12265-12284]:SimpleType[12375-12394]"
  }, {
    "left" : "getSolver",
    "right" : "getSolver",
    "info" : "SimpleName[12285-12294]:SimpleName[12395-12404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12297-12419]:Block[12407-12529]"
  }, {
    "left" : "return new Solver(singularValues, getUT(), getV(),\n                          getRank() == Math.max(m, n));",
    "right" : "return new Solver(singularValues, getUT(), getV(),\n                          getRank() == Math.max(m, n));",
    "info" : "ReturnStatement[12307-12413]:ReturnStatement[12417-12523]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12456-12463]:Modifier[12566-12573]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12464-12470]:Modifier[12574-12580]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[12471-12476]:TYPE_DECLARATION_KIND[12581-12586]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12991-12998]:Modifier[13101-13108]"
  }, {
    "left" : "Solver",
    "right" : "Solver",
    "info" : "SimpleName[12999-13005]:SimpleName[13109-13115]"
  }, {
    "left" : "final double[] singularValues",
    "right" : "final double[] singularValues",
    "info" : "SingleVariableDeclaration[13006-13035]:SingleVariableDeclaration[13116-13145]"
  }, {
    "left" : "final RealMatrix uT",
    "right" : "final RealMatrix uT",
    "info" : "SingleVariableDeclaration[13037-13056]:SingleVariableDeclaration[13147-13166]"
  }, {
    "left" : "final RealMatrix v",
    "right" : "final RealMatrix v",
    "info" : "SingleVariableDeclaration[13058-13076]:SingleVariableDeclaration[13168-13186]"
  }, {
    "left" : "final boolean nonSingular",
    "right" : "final boolean nonSingular",
    "info" : "SingleVariableDeclaration[13101-13126]:SingleVariableDeclaration[13211-13236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13128-13605]:Block[13238-13715]"
  }, {
    "left" : "double[][] suT      = uT.getData();",
    "right" : "double[][] suT      = uT.getData();",
    "info" : "VariableDeclarationStatement[13142-13177]:VariableDeclarationStatement[13252-13287]"
  }, {
    "left" : "for (int i = 0; i < singularValues.length; ++i)",
    "right" : "for (int i = 0; i < singularValues.length; ++i)",
    "info" : "ForStatement[13190-13470]:ForStatement[13300-13580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13238-13470]:Block[13348-13580]"
  }, {
    "left" : "final double a      = 1.0 / singularValues[i];",
    "right" : "final double a      = 1.0 / singularValues[i];",
    "info" : "VariableDeclarationStatement[13256-13302]:VariableDeclarationStatement[13366-13412]"
  }, {
    "left" : "final double[] suTi = suT[i];",
    "right" : "final double[] suTi = suT[i];",
    "info" : "VariableDeclarationStatement[13319-13348]:VariableDeclarationStatement[13429-13458]"
  }, {
    "left" : "for (int j = 0; j < suTi.length; ++j)",
    "right" : "for (int j = 0; j < suTi.length; ++j)",
    "info" : "ForStatement[13365-13456]:ForStatement[13475-13566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13403-13456]:Block[13513-13566]"
  }, {
    "left" : "suTi[j] *= a;",
    "right" : "suTi[j] *= a;",
    "info" : "ExpressionStatement[13425-13438]:ExpressionStatement[13535-13548]"
  }, {
    "left" : "pseudoInverse    = v.multiply(new Array2DRowRealMatrix(suT, false));",
    "right" : "pseudoInverse    = v.multiply(new Array2DRowRealMatrix(suT, false));",
    "info" : "ExpressionStatement[13483-13551]:ExpressionStatement[13593-13661]"
  }, {
    "left" : "this.nonSingular = nonSingular;",
    "right" : "this.nonSingular = nonSingular;",
    "info" : "ExpressionStatement[13564-13595]:ExpressionStatement[13674-13705]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14062-14068]:Modifier[14172-14178]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[14069-14077]:ArrayType[14179-14187]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[14078-14083]:SimpleName[14188-14193]"
  }, {
    "left" : "final double[] b",
    "right" : "final double[] b",
    "info" : "SingleVariableDeclaration[14084-14100]:SingleVariableDeclaration[14194-14210]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[14121-14145]:SimpleType[14231-14255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14146-14202]:Block[14256-14312]"
  }, {
    "left" : "return pseudoInverse.operate(b);",
    "right" : "return pseudoInverse.operate(b);",
    "info" : "ReturnStatement[14160-14192]:ReturnStatement[14270-14302]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14659-14665]:Modifier[14769-14775]"
  }, {
    "left" : "RealVector",
    "right" : "RealVector",
    "info" : "SimpleType[14666-14676]:SimpleType[14776-14786]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[14677-14682]:SimpleName[14787-14792]"
  }, {
    "left" : "final RealVector b",
    "right" : "final RealVector b",
    "info" : "SingleVariableDeclaration[14683-14701]:SingleVariableDeclaration[14793-14811]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[14722-14746]:SimpleType[14832-14856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14747-14803]:Block[14857-14913]"
  }, {
    "left" : "return pseudoInverse.operate(b);",
    "right" : "return pseudoInverse.operate(b);",
    "info" : "ReturnStatement[14761-14793]:ReturnStatement[14871-14903]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15260-15266]:Modifier[15370-15376]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[15267-15277]:SimpleType[15377-15387]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[15278-15283]:SimpleName[15388-15393]"
  }, {
    "left" : "final RealMatrix b",
    "right" : "final RealMatrix b",
    "info" : "SingleVariableDeclaration[15284-15302]:SingleVariableDeclaration[15394-15412]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[15323-15347]:SimpleType[15433-15457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15348-15405]:Block[15458-15515]"
  }, {
    "left" : "return pseudoInverse.multiply(b);",
    "right" : "return pseudoInverse.multiply(b);",
    "info" : "ReturnStatement[15362-15395]:ReturnStatement[15472-15505]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15563-15569]:Modifier[15673-15679]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15570-15577]:PrimitiveType[15680-15687]"
  }, {
    "left" : "isNonSingular",
    "right" : "isNonSingular",
    "info" : "SimpleName[15578-15591]:SimpleName[15688-15701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15594-15637]:Block[15704-15747]"
  }, {
    "left" : "return nonSingular;",
    "right" : "return nonSingular;",
    "info" : "ReturnStatement[15608-15627]:ReturnStatement[15718-15737]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15754-15760]:Modifier[15864-15870]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[15761-15771]:SimpleType[15871-15881]"
  }, {
    "left" : "getInverse",
    "right" : "getInverse",
    "info" : "SimpleName[15772-15782]:SimpleName[15882-15892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15785-15830]:Block[15895-15940]"
  }, {
    "left" : "return pseudoInverse;",
    "right" : "return pseudoInverse;",
    "info" : "ReturnStatement[15799-15820]:ReturnStatement[15909-15930]"
  } ]
}