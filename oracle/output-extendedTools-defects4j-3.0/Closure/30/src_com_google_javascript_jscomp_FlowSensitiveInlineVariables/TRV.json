{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2364-2900]:FieldDeclaration[2364-2900]"
    }, {
      "left" : "private ControlFlowGraph<Node> cfg;",
      "right" : "private ControlFlowGraph<Node> cfg;",
      "info" : "FieldDeclaration[2992-3027]:FieldDeclaration[2992-3027]"
    }, {
      "left" : "private List<Candidate> candidates;",
      "right" : "private List<Candidate> candidates;",
      "info" : "FieldDeclaration[3030-3065]:FieldDeclaration[3030-3065]"
    }, {
      "left" : "private MustBeReachingVariableDef reachingDef;",
      "right" : "private MustBeReachingVariableDef reachingDef;",
      "info" : "FieldDeclaration[3068-3114]:FieldDeclaration[3068-3114]"
    }, {
      "left" : "private MaybeReachingVariableUse reachingUses;",
      "right" : "private MaybeReachingVariableUse reachingUses;",
      "info" : "FieldDeclaration[3117-3163]:FieldDeclaration[3117-3163]"
    }, {
      "left" : "private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n    new Predicate<Node>() {\n      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-sideeffect free\n        // function.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n  };",
      "right" : "private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n    new Predicate<Node>() {\n      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-sideeffect free\n        // function.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n  };",
      "info" : "FieldDeclaration[3167-4109]:FieldDeclaration[3167-4109]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[3262-4104]:MethodDeclaration[3262-4104]"
    }, {
      "left" : "public FlowSensitiveInlineVariables(AbstractCompiler compiler)",
      "right" : "public FlowSensitiveInlineVariables(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[4113-4211]:MethodDeclaration[4113-4211]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[4215-5434]:MethodDeclaration[4215-5434]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[5438-5491]:MethodDeclaration[5438-5491]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[5617-5997]:MethodDeclaration[5631-6011]"
    }, {
      "left" : "GatherCandiates",
      "right" : "GatherCandiates",
      "info" : "TypeDeclaration[6001-7968]:TypeDeclaration[6015-7982]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6432-7964]:MethodDeclaration[6446-7978]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6901-7889]:MethodDeclaration[6915-7903]"
    }, {
      "left" : "Candidate",
      "right" : "Candidate",
      "info" : "TypeDeclaration[7972-15265]:TypeDeclaration[7986-15279]"
    }, {
      "left" : "private final String varName;",
      "right" : "private final String varName;",
      "info" : "FieldDeclaration[8122-8151]:FieldDeclaration[8136-8165]"
    }, {
      "left" : "private Node def;",
      "right" : "private Node def;",
      "info" : "FieldDeclaration[8197-8214]:FieldDeclaration[8211-8228]"
    }, {
      "left" : "private final Node defCfgNode;",
      "right" : "private final Node defCfgNode;",
      "info" : "FieldDeclaration[8219-8249]:FieldDeclaration[8233-8263]"
    }, {
      "left" : "private final Node use;",
      "right" : "private final Node use;",
      "info" : "FieldDeclaration[8288-8311]:FieldDeclaration[8302-8325]"
    }, {
      "left" : "private final Node useCfgNode;",
      "right" : "private final Node useCfgNode;",
      "info" : "FieldDeclaration[8316-8346]:FieldDeclaration[8330-8360]"
    }, {
      "left" : "private int numUseWithinUseCfgNode;",
      "right" : "private int numUseWithinUseCfgNode;",
      "info" : "FieldDeclaration[8454-8489]:FieldDeclaration[8468-8503]"
    }, {
      "left" : "Candidate(String varName, Node defCfgNode, Node use, Node useCfgNode)",
      "right" : "Candidate(String varName, Node defCfgNode, Node use, Node useCfgNode)",
      "info" : "MethodDeclaration[8495-8745]:MethodDeclaration[8509-8759]"
    }, {
      "left" : "private boolean canInline()",
      "right" : "private boolean canInline()",
      "info" : "MethodDeclaration[8751-12831]:MethodDeclaration[8765-12845]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[11144-11568]:MethodDeclaration[11158-11582]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[11630-11806]:MethodDeclaration[11644-11820]"
    }, {
      "left" : "private void inlineVariable()",
      "right" : "private void inlineVariable()",
      "info" : "MethodDeclaration[12837-13686]:MethodDeclaration[12851-13700]"
    }, {
      "left" : "private void getDefinition(Node n, Node parent)",
      "right" : "private void getDefinition(Node n, Node parent)",
      "info" : "MethodDeclaration[13692-14534]:MethodDeclaration[13706-14548]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[13966-14466]:MethodDeclaration[13980-14480]"
    }, {
      "left" : "private void getNumUseInUseCfgNode(Node n, Node parant)",
      "right" : "private void getNumUseInUseCfgNode(Node n, Node parant)",
      "info" : "MethodDeclaration[14540-15261]:MethodDeclaration[14554-15275]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14831-15192]:MethodDeclaration[14845-15206]"
    }, {
      "left" : "private static boolean checkRightOf(\n      Node n, Node expressionRoot, Predicate<Node> predicate)",
      "right" : "private static boolean checkRightOf(\n      Node n, Node expressionRoot, Predicate<Node> predicate)",
      "info" : "MethodDeclaration[15269-15848]:MethodDeclaration[15283-15862]"
    }, {
      "left" : "private static boolean checkLeftOf(\n      Node n, Node expressionRoot, Predicate<Node> predicate)",
      "right" : "private static boolean checkLeftOf(\n      Node n, Node expressionRoot, Predicate<Node> predicate)",
      "info" : "MethodDeclaration[15852-16466]:MethodDeclaration[15866-16480]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3262-3271]:MarkerAnnotation[3262-3271]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3278-3284]:Modifier[3278-3284]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3285-3292]:PrimitiveType[3285-3292]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[3293-3298]:SimpleName[3293-3298]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3299-3305]:SingleVariableDeclaration[3299-3305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3307-4104]:Block[3307-4104]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[3468-3518]:IfStatement[3468-3518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3483-3518]:Block[3483-3518]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3495-3508]:ReturnStatement[3495-3508]"
    }, {
      "left" : "if (n.isCall() && NodeUtil.functionCallHasSideEffects(n))",
      "right" : "if (n.isCall() && NodeUtil.functionCallHasSideEffects(n))",
      "info" : "IfStatement[3688-3780]:IfStatement[3688-3780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3746-3780]:Block[3746-3780]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3758-3770]:ReturnStatement[3758-3770]"
    }, {
      "left" : "if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n))",
      "right" : "if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n))",
      "info" : "IfStatement[3790-3884]:IfStatement[3790-3884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3850-3884]:Block[3850-3884]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3862-3874]:ReturnStatement[3862-3874]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[3894-4074]:ForStatement[3894-4074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3955-4074]:Block[3955-4074]"
    }, {
      "left" : "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c))",
      "right" : "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c))",
      "info" : "IfStatement[3967-4064]:IfStatement[3967-4064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4026-4064]:Block[4026-4064]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4040-4052]:ReturnStatement[4040-4052]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4083-4096]:ReturnStatement[4083-4096]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4113-4119]:Modifier[4113-4119]"
    }, {
      "left" : "FlowSensitiveInlineVariables",
      "right" : "FlowSensitiveInlineVariables",
      "info" : "SimpleName[4120-4148]:SimpleName[4120-4148]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4149-4174]:SingleVariableDeclaration[4149-4174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4176-4211]:Block[4176-4211]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4182-4207]:ExpressionStatement[4182-4207]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4215-4224]:MarkerAnnotation[4215-4224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4227-4233]:Modifier[4227-4233]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4234-4238]:PrimitiveType[4234-4238]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[4239-4249]:SimpleName[4239-4249]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4250-4265]:SingleVariableDeclaration[4250-4265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4267-5434]:Block[4267-5434]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[4274-4382]:IfStatement[4274-4382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4297-4382]:Block[4297-4382]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4305-4312]:ReturnStatement[4305-4312]"
    }, {
      "left" : "if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n        t.getScope().getVarCount())",
      "right" : "if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n        t.getScope().getVarCount())",
      "info" : "IfStatement[4388-4498]:IfStatement[4388-4498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4477-4498]:Block[4477-4498]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4485-4492]:ReturnStatement[4485-4492]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);",
      "info" : "VariableDeclarationStatement[4552-4625]:VariableDeclarationStatement[4552-4625]"
    }, {
      "left" : "Preconditions.checkState(t.getScopeRoot().isFunction());",
      "right" : "Preconditions.checkState(t.getScopeRoot().isFunction());",
      "info" : "ExpressionStatement[4671-4727]:ExpressionStatement[4671-4727]"
    }, {
      "left" : "cfa.process(null, t.getScopeRoot().getLastChild());",
      "right" : "cfa.process(null, t.getScopeRoot().getLastChild());",
      "info" : "ExpressionStatement[4732-4783]:ExpressionStatement[4732-4783]"
    }, {
      "left" : "cfg = cfa.getCfg();",
      "right" : "cfg = cfa.getCfg();",
      "info" : "ExpressionStatement[4788-4807]:ExpressionStatement[4788-4807]"
    }, {
      "left" : "reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);",
      "right" : "reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);",
      "info" : "ExpressionStatement[4812-4885]:ExpressionStatement[4812-4885]"
    }, {
      "left" : "reachingDef.analyze();",
      "right" : "reachingDef.analyze();",
      "info" : "ExpressionStatement[4890-4912]:ExpressionStatement[4890-4912]"
    }, {
      "left" : "candidates = Lists.newLinkedList();",
      "right" : "candidates = Lists.newLinkedList();",
      "info" : "ExpressionStatement[4917-4952]:ExpressionStatement[4917-4952]"
    }, {
      "left" : "new NodeTraversal(compiler, new GatherCandiates()).traverse(\n        t.getScopeRoot().getLastChild());",
      "right" : "new NodeTraversal(compiler, new GatherCandiates()).traverse(\n        t.getScopeRoot().getLastChild());",
      "info" : "ExpressionStatement[5050-5152]:ExpressionStatement[5050-5152]"
    }, {
      "left" : "reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);",
      "right" : "reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);",
      "info" : "ExpressionStatement[5223-5296]:ExpressionStatement[5223-5296]"
    }, {
      "left" : "reachingUses.analyze();",
      "right" : "reachingUses.analyze();",
      "info" : "ExpressionStatement[5301-5324]:ExpressionStatement[5301-5324]"
    }, {
      "left" : "for (Candidate c : candidates)",
      "right" : "for (Candidate c : candidates)",
      "info" : "EnhancedForStatement[5329-5430]:EnhancedForStatement[5329-5430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5360-5430]:Block[5360-5430]"
    }, {
      "left" : "if (c.canInline())",
      "right" : "if (c.canInline())",
      "info" : "IfStatement[5368-5424]:IfStatement[5368-5424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5387-5424]:Block[5387-5424]"
    }, {
      "left" : "c.inlineVariable();",
      "right" : "c.inlineVariable();",
      "info" : "ExpressionStatement[5397-5416]:ExpressionStatement[5397-5416]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5438-5447]:MarkerAnnotation[5438-5447]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5450-5456]:Modifier[5450-5456]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5457-5461]:PrimitiveType[5457-5461]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[5462-5471]:SimpleName[5462-5471]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5472-5487]:SingleVariableDeclaration[5472-5487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5489-5491]:Block[5489-5491]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5617-5626]:MarkerAnnotation[5631-5640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5629-5635]:Modifier[5643-5649]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5636-5640]:PrimitiveType[5650-5654]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[5641-5646]:SimpleName[5655-5660]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5647-5662]:SingleVariableDeclaration[5661-5676]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5664-5670]:SingleVariableDeclaration[5678-5684]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[5672-5683]:SingleVariableDeclaration[5686-5697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5685-5997]:Block[5699-6011]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6364-6371]:Modifier[6378-6385]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6372-6377]:TYPE_DECLARATION_KIND[6386-6391]"
    }, {
      "left" : "GatherCandiates",
      "right" : "GatherCandiates",
      "info" : "SimpleName[6378-6393]:SimpleName[6392-6407]"
    }, {
      "left" : "AbstractShallowCallback",
      "right" : "AbstractShallowCallback",
      "info" : "SimpleType[6402-6425]:SimpleType[6416-6439]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6432-6441]:MarkerAnnotation[6446-6455]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6446-6452]:Modifier[6460-6466]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6453-6457]:PrimitiveType[6467-6471]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[6458-6463]:SimpleName[6472-6477]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6464-6479]:SingleVariableDeclaration[6478-6493]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6481-6487]:SingleVariableDeclaration[6495-6501]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[6489-6500]:SingleVariableDeclaration[6503-6514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6502-7964]:Block[6516-7978]"
    }, {
      "left" : "DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);",
      "right" : "DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);",
      "info" : "VariableDeclarationStatement[6510-6576]:VariableDeclarationStatement[6524-6590]"
    }, {
      "left" : "if (graphNode == null)",
      "right" : "if (graphNode == null)",
      "info" : "IfStatement[6583-6658]:IfStatement[6597-6672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6606-6658]:Block[6620-6672]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6643-6650]:ReturnStatement[6657-6664]"
    }, {
      "left" : "FlowState<MustDef> state = graphNode.getAnnotation();",
      "right" : "FlowState<MustDef> state = graphNode.getAnnotation();",
      "info" : "VariableDeclarationStatement[6665-6718]:VariableDeclarationStatement[6679-6732]"
    }, {
      "left" : "final MustDef defs = state.getIn();",
      "right" : "final MustDef defs = state.getIn();",
      "info" : "VariableDeclarationStatement[6725-6760]:VariableDeclarationStatement[6739-6774]"
    }, {
      "left" : "final Node cfgNode = n;",
      "right" : "final Node cfgNode = n;",
      "info" : "VariableDeclarationStatement[6767-6790]:VariableDeclarationStatement[6781-6804]"
    }, {
      "left" : "AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName()) {\n\n            // Make sure that the name node is purely a read.\n            if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n                || parent.isVar() || parent.isInc() ||\n                parent.isDec() || parent.isParamList() ||\n                parent.isCatch()) {\n              return;\n            }\n\n            String name = n.getString();\n            if (compiler.getCodingConvention().isExported(name)) {\n              return;\n            }\n\n            Node defNode = reachingDef.getDef(name, cfgNode);\n            // TODO(nicksantos): We need to add some notion of @const outer\n            // scope vars. We can inline those just fine.\n            if (defNode != null &&\n                !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {\n              candidates.add(new Candidate(name, defNode, n, cfgNode));\n            }\n          }\n        }\n      };",
      "right" : "AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName()) {\n\n            // Make sure that the name node is purely a read.\n            if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n                || parent.isVar() || parent.isInc() ||\n                parent.isDec() || parent.isParamList() ||\n                parent.isCatch()) {\n              return;\n            }\n\n            String name = n.getString();\n            if (compiler.getCodingConvention().isExported(name)) {\n              return;\n            }\n\n            Node defNode = reachingDef.getDef(name, cfgNode);\n            // TODO(nicksantos): We need to add some notion of @const outer\n            // scope vars. We can inline those just fine.\n            if (defNode != null &&\n                !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {\n              candidates.add(new Candidate(name, defNode, n, cfgNode));\n            }\n          }\n        }\n      };",
      "info" : "VariableDeclarationStatement[6797-7898]:VariableDeclarationStatement[6811-7912]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6901-6910]:MarkerAnnotation[6915-6924]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6919-6925]:Modifier[6933-6939]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6926-6930]:PrimitiveType[6940-6944]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[6931-6936]:SimpleName[6945-6950]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6937-6952]:SingleVariableDeclaration[6951-6966]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6954-6960]:SingleVariableDeclaration[6968-6974]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[6962-6973]:SingleVariableDeclaration[6976-6987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6975-7889]:Block[6989-7903]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[6987-7879]:IfStatement[7001-7893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7003-7879]:Block[7017-7893]"
    }, {
      "left" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n                || parent.isVar() || parent.isInc() ||\n                parent.isDec() || parent.isParamList() ||\n                parent.isCatch())",
      "right" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n                || parent.isVar() || parent.isInc() ||\n                parent.isDec() || parent.isParamList() ||\n                parent.isCatch())",
      "info" : "IfStatement[7080-7333]:IfStatement[7094-7347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7296-7333]:Block[7310-7347]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7312-7319]:ReturnStatement[7326-7333]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[7347-7375]:VariableDeclarationStatement[7361-7389]"
    }, {
      "left" : "if (compiler.getCodingConvention().isExported(name))",
      "right" : "if (compiler.getCodingConvention().isExported(name))",
      "info" : "IfStatement[7388-7478]:IfStatement[7402-7492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7441-7478]:Block[7455-7492]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7457-7464]:ReturnStatement[7471-7478]"
    }, {
      "left" : "Node defNode = reachingDef.getDef(name, cfgNode);",
      "right" : "Node defNode = reachingDef.getDef(name, cfgNode);",
      "info" : "VariableDeclarationStatement[7492-7541]:VariableDeclarationStatement[7506-7555]"
    }, {
      "left" : "if (defNode != null &&\n                !reachingDef.dependsOnOuterScopeVars(name, cfgNode))",
      "right" : "if (defNode != null &&\n                !reachingDef.dependsOnOuterScopeVars(name, cfgNode))",
      "info" : "IfStatement[7688-7867]:IfStatement[7702-7881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7780-7867]:Block[7794-7881]"
    }, {
      "left" : "candidates.add(new Candidate(name, defNode, n, cfgNode));",
      "right" : "candidates.add(new Candidate(name, defNode, n, cfgNode));",
      "info" : "ExpressionStatement[7796-7853]:ExpressionStatement[7810-7867]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, cfgNode, gatherCb);",
      "right" : "NodeTraversal.traverse(compiler, cfgNode, gatherCb);",
      "info" : "ExpressionStatement[7906-7958]:ExpressionStatement[7920-7972]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8062-8069]:Modifier[8076-8083]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8070-8075]:TYPE_DECLARATION_KIND[8084-8089]"
    }, {
      "left" : "Candidate",
      "right" : "Candidate",
      "info" : "SimpleName[8076-8085]:SimpleName[8090-8099]"
    }, {
      "left" : "Candidate",
      "right" : "Candidate",
      "info" : "SimpleName[8495-8504]:SimpleName[8509-8518]"
    }, {
      "left" : "String varName",
      "right" : "String varName",
      "info" : "SingleVariableDeclaration[8505-8519]:SingleVariableDeclaration[8519-8533]"
    }, {
      "left" : "Node defCfgNode",
      "right" : "Node defCfgNode",
      "info" : "SingleVariableDeclaration[8521-8536]:SingleVariableDeclaration[8535-8550]"
    }, {
      "left" : "Node use",
      "right" : "Node use",
      "info" : "SingleVariableDeclaration[8538-8546]:SingleVariableDeclaration[8552-8560]"
    }, {
      "left" : "Node useCfgNode",
      "right" : "Node useCfgNode",
      "info" : "SingleVariableDeclaration[8548-8563]:SingleVariableDeclaration[8562-8577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8565-8745]:Block[8579-8759]"
    }, {
      "left" : "Preconditions.checkArgument(use.isName());",
      "right" : "Preconditions.checkArgument(use.isName());",
      "info" : "ExpressionStatement[8573-8615]:ExpressionStatement[8587-8629]"
    }, {
      "left" : "this.varName = varName;",
      "right" : "this.varName = varName;",
      "info" : "ExpressionStatement[8622-8645]:ExpressionStatement[8636-8659]"
    }, {
      "left" : "this.defCfgNode = defCfgNode;",
      "right" : "this.defCfgNode = defCfgNode;",
      "info" : "ExpressionStatement[8652-8681]:ExpressionStatement[8666-8695]"
    }, {
      "left" : "this.use = use;",
      "right" : "this.use = use;",
      "info" : "ExpressionStatement[8688-8703]:ExpressionStatement[8702-8717]"
    }, {
      "left" : "this.useCfgNode = useCfgNode;",
      "right" : "this.useCfgNode = useCfgNode;",
      "info" : "ExpressionStatement[8710-8739]:ExpressionStatement[8724-8753]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8751-8758]:Modifier[8765-8772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8759-8766]:PrimitiveType[8773-8780]"
    }, {
      "left" : "canInline",
      "right" : "canInline",
      "info" : "SimpleName[8767-8776]:SimpleName[8781-8790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8779-12831]:Block[8793-12845]"
    }, {
      "left" : "if (defCfgNode.isFunction())",
      "right" : "if (defCfgNode.isFunction())",
      "info" : "IfStatement[8824-8884]:IfStatement[8838-8898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8853-8884]:Block[8867-8898]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8863-8876]:ReturnStatement[8877-8890]"
    }, {
      "left" : "getDefinition(defCfgNode, null);",
      "right" : "getDefinition(defCfgNode, null);",
      "info" : "ExpressionStatement[8892-8924]:ExpressionStatement[8906-8938]"
    }, {
      "left" : "getNumUseInUseCfgNode(useCfgNode, null);",
      "right" : "getNumUseInUseCfgNode(useCfgNode, null);",
      "info" : "ExpressionStatement[8931-8971]:ExpressionStatement[8945-8985]"
    }, {
      "left" : "if (def == null)",
      "right" : "if (def == null)",
      "info" : "IfStatement[9014-9062]:IfStatement[9028-9076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9031-9062]:Block[9045-9076]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9041-9054]:ReturnStatement[9055-9068]"
    }, {
      "left" : "if (def.isAssign() && !NodeUtil.isExprAssign(def.getParent()))",
      "right" : "if (def.isAssign() && !NodeUtil.isExprAssign(def.getParent()))",
      "info" : "IfStatement[9186-9280]:IfStatement[9200-9294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9249-9280]:Block[9263-9294]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9259-9272]:ReturnStatement[9273-9286]"
    }, {
      "left" : "if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE))",
      "right" : "if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE))",
      "info" : "IfStatement[9419-9508]:IfStatement[9433-9522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9477-9508]:Block[9491-9522]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9487-9500]:ReturnStatement[9501-9514]"
    }, {
      "left" : "if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE))",
      "right" : "if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE))",
      "info" : "IfStatement[9684-9772]:IfStatement[9698-9786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9741-9772]:Block[9755-9786]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9751-9764]:ReturnStatement[9765-9778]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(def.getLastChild()))",
      "right" : "if (NodeUtil.mayHaveSideEffects(def.getLastChild()))",
      "info" : "IfStatement[9969-10053]:IfStatement[9983-10067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10022-10053]:Block[10036-10067]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10032-10045]:ReturnStatement[10046-10059]"
    }, {
      "left" : "if (numUseWithinUseCfgNode != 1)",
      "right" : "if (numUseWithinUseCfgNode != 1)",
      "info" : "IfStatement[10343-10407]:IfStatement[10357-10421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10376-10407]:Block[10390-10421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10386-10399]:ReturnStatement[10400-10413]"
    }, {
      "left" : "if (NodeUtil.isWithinLoop(use))",
      "right" : "if (NodeUtil.isWithinLoop(use))",
      "info" : "IfStatement[10469-10532]:IfStatement[10483-10546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10501-10532]:Block[10515-10546]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10511-10524]:ReturnStatement[10525-10538]"
    }, {
      "left" : "Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);",
      "right" : "Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);",
      "info" : "VariableDeclarationStatement[10541-10607]:VariableDeclarationStatement[10555-10621]"
    }, {
      "left" : "if (uses.size() != 1)",
      "right" : "if (uses.size() != 1)",
      "info" : "IfStatement[10615-10668]:IfStatement[10629-10682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10637-10668]:Block[10651-10682]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10647-10660]:ReturnStatement[10661-10674]"
    }, {
      "left" : "if (NodeUtil.has(def.getLastChild(),\n          new Predicate<Node>() {\n              @Override\n              public boolean apply(Node input) {\n                switch (input.getType()) {\n                  case Token.GETELEM:\n                  case Token.GETPROP:\n                  case Token.ARRAYLIT:\n                  case Token.OBJECTLIT:\n                  case Token.REGEXP:\n                  case Token.NEW:\n                    return true;\n                }\n                return false;\n              }\n          },\n          new Predicate<Node>() {\n              @Override\n              public boolean apply(Node input) {\n                // Recurse if the node is not a function.\n                return !input.isFunction();\n              }\n          }))",
      "right" : "if (NodeUtil.has(def.getLastChild(),\n          new Predicate<Node>() {\n              @Override\n              public boolean apply(Node input) {\n                switch (input.getType()) {\n                  case Token.GETELEM:\n                  case Token.GETPROP:\n                  case Token.ARRAYLIT:\n                  case Token.OBJECTLIT:\n                  case Token.REGEXP:\n                  case Token.NEW:\n                    return true;\n                }\n                return false;\n              }\n          },\n          new Predicate<Node>() {\n              @Override\n              public boolean apply(Node input) {\n                // Recurse if the node is not a function.\n                return !input.isFunction();\n              }\n          }))",
      "info" : "IfStatement[11059-11852]:IfStatement[11073-11866]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11144-11153]:MarkerAnnotation[11158-11167]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11168-11174]:Modifier[11182-11188]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11175-11182]:PrimitiveType[11189-11196]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[11183-11188]:SimpleName[11197-11202]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[11189-11199]:SingleVariableDeclaration[11203-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11201-11568]:Block[11215-11582]"
    }, {
      "left" : "switch (input.getType()) {\n                  case Token.GETELEM:\n                  case Token.GETPROP:\n                  case Token.ARRAYLIT:\n                  case Token.OBJECTLIT:\n                  case Token.REGEXP:\n                  case Token.NEW:\n                    return true;\n                }",
      "right" : "switch (input.getType()) {\n                  case Token.GETELEM:\n                  case Token.GETPROP:\n                  case Token.ARRAYLIT:\n                  case Token.OBJECTLIT:\n                  case Token.REGEXP:\n                  case Token.NEW:\n                    return true;\n                }",
      "info" : "SwitchStatement[11219-11522]:SwitchStatement[11233-11536]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[11264-11283]:SwitchCase[11278-11297]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[11302-11321]:SwitchCase[11316-11335]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[11340-11360]:SwitchCase[11354-11374]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[11379-11400]:SwitchCase[11393-11414]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[11419-11437]:SwitchCase[11433-11451]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[11456-11471]:SwitchCase[11470-11485]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11492-11504]:ReturnStatement[11506-11518]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11539-11552]:ReturnStatement[11553-11566]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11630-11639]:MarkerAnnotation[11644-11653]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11654-11660]:Modifier[11668-11674]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11661-11668]:PrimitiveType[11675-11682]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[11669-11674]:SimpleName[11683-11688]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[11675-11685]:SingleVariableDeclaration[11689-11699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11687-11806]:Block[11701-11820]"
    }, {
      "left" : "return !input.isFunction();",
      "right" : "return !input.isFunction();",
      "info" : "ReturnStatement[11763-11790]:ReturnStatement[11777-11804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11821-11852]:Block[11835-11866]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11831-11844]:ReturnStatement[11845-11858]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&\n          defCfgNode.getNext() != useCfgNode)",
      "right" : "if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&\n          defCfgNode.getNext() != useCfgNode)",
      "info" : "IfStatement[11978-12805]:IfStatement[11992-12819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12081-12805]:Block[12095-12819]"
    }, {
      "left" : "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>\n          pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(\n                 cfg,\n                 cfg.getDirectedGraphNode(defCfgNode),\n                 cfg.getDirectedGraphNode(useCfgNode),\n                 SIDE_EFFECT_PREDICATE,\n                 Predicates.\n                     <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                 false);",
      "right" : "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>\n          pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(\n                 cfg,\n                 cfg.getDirectedGraphNode(defCfgNode),\n                 cfg.getDirectedGraphNode(useCfgNode),\n                 SIDE_EFFECT_PREDICATE,\n                 Predicates.\n                     <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n                 false);",
      "info" : "VariableDeclarationStatement[12271-12710]:VariableDeclarationStatement[12285-12724]"
    }, {
      "left" : "if (pathCheck.somePathsSatisfyPredicate())",
      "right" : "if (pathCheck.somePathsSatisfyPredicate())",
      "info" : "IfStatement[12719-12797]:IfStatement[12733-12811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12762-12797]:Block[12776-12811]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12774-12787]:ReturnStatement[12788-12801]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12813-12825]:ReturnStatement[12827-12839]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12883-12890]:Modifier[12897-12904]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12891-12895]:PrimitiveType[12905-12909]"
    }, {
      "left" : "inlineVariable",
      "right" : "inlineVariable",
      "info" : "SimpleName[12896-12910]:SimpleName[12910-12924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12913-13686]:Block[12927-13700]"
    }, {
      "left" : "Node defParent = def.getParent();",
      "right" : "Node defParent = def.getParent();",
      "info" : "VariableDeclarationStatement[12921-12954]:VariableDeclarationStatement[12935-12968]"
    }, {
      "left" : "Node useParent = use.getParent();",
      "right" : "Node useParent = use.getParent();",
      "info" : "VariableDeclarationStatement[12961-12994]:VariableDeclarationStatement[12975-13008]"
    }, {
      "left" : "if (def.isAssign())",
      "right" : "if (def.isAssign())",
      "info" : "IfStatement[13001-13645]:IfStatement[13015-13659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13021-13400]:Block[13035-13414]"
    }, {
      "left" : "Node rhs = def.getLastChild();",
      "right" : "Node rhs = def.getLastChild();",
      "info" : "VariableDeclarationStatement[13031-13061]:VariableDeclarationStatement[13045-13075]"
    }, {
      "left" : "rhs.detachFromParent();",
      "right" : "rhs.detachFromParent();",
      "info" : "ExpressionStatement[13070-13093]:ExpressionStatement[13084-13107]"
    }, {
      "left" : "Preconditions.checkState(defParent.isExprResult());",
      "right" : "Preconditions.checkState(defParent.isExprResult());",
      "info" : "ExpressionStatement[13156-13207]:ExpressionStatement[13170-13221]"
    }, {
      "left" : "while (defParent.getParent().isLabel())",
      "right" : "while (defParent.getParent().isLabel())",
      "info" : "WhileStatement[13216-13312]:WhileStatement[13230-13326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13256-13312]:Block[13270-13326]"
    }, {
      "left" : "defParent = defParent.getParent();",
      "right" : "defParent = defParent.getParent();",
      "info" : "ExpressionStatement[13268-13302]:ExpressionStatement[13282-13316]"
    }, {
      "left" : "defParent.detachFromParent();",
      "right" : "defParent.detachFromParent();",
      "info" : "ExpressionStatement[13321-13350]:ExpressionStatement[13335-13364]"
    }, {
      "left" : "useParent.replaceChild(use, rhs);",
      "right" : "useParent.replaceChild(use, rhs);",
      "info" : "ExpressionStatement[13359-13392]:ExpressionStatement[13373-13406]"
    }, {
      "left" : "if (defParent.isVar())",
      "right" : "if (defParent.isVar())",
      "info" : "IfStatement[13406-13645]:IfStatement[13420-13659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13429-13549]:Block[13443-13563]"
    }, {
      "left" : "Node rhs = def.getLastChild();",
      "right" : "Node rhs = def.getLastChild();",
      "info" : "VariableDeclarationStatement[13439-13469]:VariableDeclarationStatement[13453-13483]"
    }, {
      "left" : "def.removeChild(rhs);",
      "right" : "def.removeChild(rhs);",
      "info" : "ExpressionStatement[13478-13499]:ExpressionStatement[13492-13513]"
    }, {
      "left" : "useParent.replaceChild(use, rhs);",
      "right" : "useParent.replaceChild(use, rhs);",
      "info" : "ExpressionStatement[13508-13541]:ExpressionStatement[13522-13555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13555-13645]:Block[13569-13659]"
    }, {
      "left" : "Preconditions.checkState(false, \"No other definitions can be inlined.\");",
      "right" : "Preconditions.checkState(false, \"No other definitions can be inlined.\");",
      "info" : "ExpressionStatement[13565-13637]:ExpressionStatement[13579-13651]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[13652-13680]:ExpressionStatement[13666-13694]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13808-13815]:Modifier[13822-13829]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13816-13820]:PrimitiveType[13830-13834]"
    }, {
      "left" : "getDefinition",
      "right" : "getDefinition",
      "info" : "SimpleName[13821-13834]:SimpleName[13835-13848]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13835-13841]:SingleVariableDeclaration[13849-13855]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13843-13854]:SingleVariableDeclaration[13857-13868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13856-14534]:Block[13870-14548]"
    }, {
      "left" : "AbstractCfgNodeTraversalCallback gatherCb =\n        new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          switch (n.getType()) {\n            case Token.NAME:\n              if (n.getString().equals(varName) && n.hasChildren()) {\n                def = n;\n              }\n              return;\n\n            case Token.ASSIGN:\n              Node lhs = n.getFirstChild();\n              if (lhs.isName() && lhs.getString().equals(varName)) {\n                def = n;\n              }\n              return;\n          }\n        }\n      };",
      "right" : "AbstractCfgNodeTraversalCallback gatherCb =\n        new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          switch (n.getType()) {\n            case Token.NAME:\n              if (n.getString().equals(varName) && n.hasChildren()) {\n                def = n;\n              }\n              return;\n\n            case Token.ASSIGN:\n              Node lhs = n.getFirstChild();\n              if (lhs.isName() && lhs.getString().equals(varName)) {\n                def = n;\n              }\n              return;\n          }\n        }\n      };",
      "info" : "VariableDeclarationStatement[13864-14475]:VariableDeclarationStatement[13878-14489]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13966-13975]:MarkerAnnotation[13980-13989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13984-13990]:Modifier[13998-14004]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13991-13995]:PrimitiveType[14005-14009]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[13996-14001]:SimpleName[14010-14015]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14002-14017]:SingleVariableDeclaration[14016-14031]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14019-14025]:SingleVariableDeclaration[14033-14039]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14027-14038]:SingleVariableDeclaration[14041-14052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14040-14466]:Block[14054-14480]"
    }, {
      "left" : "switch (n.getType()) {\n            case Token.NAME:\n              if (n.getString().equals(varName) && n.hasChildren()) {\n                def = n;\n              }\n              return;\n\n            case Token.ASSIGN:\n              Node lhs = n.getFirstChild();\n              if (lhs.isName() && lhs.getString().equals(varName)) {\n                def = n;\n              }\n              return;\n          }",
      "right" : "switch (n.getType()) {\n            case Token.NAME:\n              if (n.getString().equals(varName) && n.hasChildren()) {\n                def = n;\n              }\n              return;\n\n            case Token.ASSIGN:\n              Node lhs = n.getFirstChild();\n              if (lhs.isName() && lhs.getString().equals(varName)) {\n                def = n;\n              }\n              return;\n          }",
      "info" : "SwitchStatement[14052-14456]:SwitchStatement[14066-14470]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14087-14103]:SwitchCase[14101-14117]"
    }, {
      "left" : "if (n.getString().equals(varName) && n.hasChildren())",
      "right" : "if (n.getString().equals(varName) && n.hasChildren())",
      "info" : "IfStatement[14118-14214]:IfStatement[14132-14228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14172-14214]:Block[14186-14228]"
    }, {
      "left" : "def = n;",
      "right" : "def = n;",
      "info" : "ExpressionStatement[14190-14198]:ExpressionStatement[14204-14212]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14229-14236]:ReturnStatement[14243-14250]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[14250-14268]:SwitchCase[14264-14282]"
    }, {
      "left" : "Node lhs = n.getFirstChild();",
      "right" : "Node lhs = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14283-14312]:VariableDeclarationStatement[14297-14326]"
    }, {
      "left" : "if (lhs.isName() && lhs.getString().equals(varName))",
      "right" : "if (lhs.isName() && lhs.getString().equals(varName))",
      "info" : "IfStatement[14327-14422]:IfStatement[14341-14436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14380-14422]:Block[14394-14436]"
    }, {
      "left" : "def = n;",
      "right" : "def = n;",
      "info" : "ExpressionStatement[14398-14406]:ExpressionStatement[14412-14420]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14437-14444]:ReturnStatement[14451-14458]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, n, gatherCb);",
      "right" : "NodeTraversal.traverse(compiler, n, gatherCb);",
      "info" : "ExpressionStatement[14482-14528]:ExpressionStatement[14496-14542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14662-14669]:Modifier[14676-14683]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14670-14674]:PrimitiveType[14684-14688]"
    }, {
      "left" : "getNumUseInUseCfgNode",
      "right" : "getNumUseInUseCfgNode",
      "info" : "SimpleName[14675-14696]:SimpleName[14689-14710]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14697-14703]:SingleVariableDeclaration[14711-14717]"
    }, {
      "left" : "Node parant",
      "right" : "Node parant",
      "info" : "SingleVariableDeclaration[14705-14716]:SingleVariableDeclaration[14719-14730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14718-15261]:Block[14732-15275]"
    }, {
      "left" : "AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName) &&\n              // do not count in if it is left child of an assignment operator\n              !(parent.isAssign() &&\n               (parent.getFirstChild() == n))) {\n            numUseWithinUseCfgNode++;\n          }\n        }\n      };",
      "right" : "AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName) &&\n              // do not count in if it is left child of an assignment operator\n              !(parent.isAssign() &&\n               (parent.getFirstChild() == n))) {\n            numUseWithinUseCfgNode++;\n          }\n        }\n      };",
      "info" : "VariableDeclarationStatement[14727-15201]:VariableDeclarationStatement[14741-15215]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14831-14840]:MarkerAnnotation[14845-14854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14849-14855]:Modifier[14863-14869]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14856-14860]:PrimitiveType[14870-14874]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14861-14866]:SimpleName[14875-14880]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14867-14882]:SingleVariableDeclaration[14881-14896]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14884-14890]:SingleVariableDeclaration[14898-14904]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14892-14903]:SingleVariableDeclaration[14906-14917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14905-15192]:Block[14919-15206]"
    }, {
      "left" : "if (n.isName() && n.getString().equals(varName) &&\n              // do not count in if it is left child of an assignment operator\n              !(parent.isAssign() &&\n               (parent.getFirstChild() == n)))",
      "right" : "if (n.isName() && n.getString().equals(varName) &&\n              // do not count in if it is left child of an assignment operator\n              !(parent.isAssign() &&\n               (parent.getFirstChild() == n)))",
      "info" : "IfStatement[14917-15182]:IfStatement[14931-15196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15131-15182]:Block[15145-15196]"
    }, {
      "left" : "numUseWithinUseCfgNode++;",
      "right" : "numUseWithinUseCfgNode++;",
      "info" : "ExpressionStatement[15145-15170]:ExpressionStatement[15159-15184]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, n, gatherCb);",
      "right" : "NodeTraversal.traverse(compiler, n, gatherCb);",
      "info" : "ExpressionStatement[15209-15255]:ExpressionStatement[15223-15269]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15509-15516]:Modifier[15523-15530]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15517-15523]:Modifier[15531-15537]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15524-15531]:PrimitiveType[15538-15545]"
    }, {
      "left" : "checkRightOf",
      "right" : "checkRightOf",
      "info" : "SimpleName[15532-15544]:SimpleName[15546-15558]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15552-15558]:SingleVariableDeclaration[15566-15572]"
    }, {
      "left" : "Node expressionRoot",
      "right" : "Node expressionRoot",
      "info" : "SingleVariableDeclaration[15560-15579]:SingleVariableDeclaration[15574-15593]"
    }, {
      "left" : "Predicate<Node> predicate",
      "right" : "Predicate<Node> predicate",
      "info" : "SingleVariableDeclaration[15581-15606]:SingleVariableDeclaration[15595-15620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15608-15848]:Block[15622-15862]"
    }, {
      "left" : "for (Node p = n; p != expressionRoot; p = p.getParent())",
      "right" : "for (Node p = n; p != expressionRoot; p = p.getParent())",
      "info" : "ForStatement[15614-15826]:ForStatement[15628-15840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15671-15826]:Block[15685-15840]"
    }, {
      "left" : "for (Node cur = p.getNext(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = p.getNext(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[15679-15820]:ForStatement[15693-15834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15742-15820]:Block[15756-15834]"
    }, {
      "left" : "if (predicate.apply(cur))",
      "right" : "if (predicate.apply(cur))",
      "info" : "IfStatement[15752-15812]:IfStatement[15766-15826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15778-15812]:Block[15792-15826]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15790-15802]:ReturnStatement[15804-15816]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15831-15844]:ReturnStatement[15845-15858]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16091-16098]:Modifier[16105-16112]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16099-16105]:Modifier[16113-16119]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16106-16113]:PrimitiveType[16120-16127]"
    }, {
      "left" : "checkLeftOf",
      "right" : "checkLeftOf",
      "info" : "SimpleName[16114-16125]:SimpleName[16128-16139]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16133-16139]:SingleVariableDeclaration[16147-16153]"
    }, {
      "left" : "Node expressionRoot",
      "right" : "Node expressionRoot",
      "info" : "SingleVariableDeclaration[16141-16160]:SingleVariableDeclaration[16155-16174]"
    }, {
      "left" : "Predicate<Node> predicate",
      "right" : "Predicate<Node> predicate",
      "info" : "SingleVariableDeclaration[16162-16187]:SingleVariableDeclaration[16176-16201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16189-16466]:Block[16203-16480]"
    }, {
      "left" : "for (Node p = n.getParent(); p != expressionRoot; p = p.getParent())",
      "right" : "for (Node p = n.getParent(); p != expressionRoot; p = p.getParent())",
      "info" : "ForStatement[16195-16444]:ForStatement[16209-16458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16264-16444]:Block[16278-16458]"
    }, {
      "left" : "for (Node cur = p.getParent().getFirstChild(); cur != p;\n          cur = cur.getNext())",
      "right" : "for (Node cur = p.getParent().getFirstChild(); cur != p;\n          cur = cur.getNext())",
      "info" : "ForStatement[16272-16438]:ForStatement[16286-16452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16360-16438]:Block[16374-16452]"
    }, {
      "left" : "if (predicate.apply(cur))",
      "right" : "if (predicate.apply(cur))",
      "info" : "IfStatement[16370-16430]:IfStatement[16384-16444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16396-16430]:Block[16410-16444]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16408-16420]:ReturnStatement[16422-16434]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16449-16462]:ReturnStatement[16463-16476]"
    } ]
  },
  "interFileMappings" : { }
}