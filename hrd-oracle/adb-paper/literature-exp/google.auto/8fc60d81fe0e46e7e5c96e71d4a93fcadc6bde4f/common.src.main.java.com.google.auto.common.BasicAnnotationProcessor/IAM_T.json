{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BasicAnnotationProcessor",
      "right" : "BasicAnnotationProcessor",
      "info" : "TypeDeclaration[2010-13900]:TypeDeclaration[2010-14346]"
    }, {
      "left" : "private final Set<String> deferredPackageNames = Sets.newLinkedHashSet();",
      "right" : "private final Set<String> deferredPackageNames = Sets.newLinkedHashSet();",
      "info" : "FieldDeclaration[3670-3743]:FieldDeclaration[3670-3743]"
    }, {
      "left" : "private final Set<String> deferredTypeNames = Sets.newLinkedHashSet();",
      "right" : "private final Set<String> deferredTypeNames = Sets.newLinkedHashSet();",
      "info" : "FieldDeclaration[3746-3816]:FieldDeclaration[3746-3816]"
    }, {
      "left" : "private final String processorName = getClass().getCanonicalName();",
      "right" : "private final String processorName = getClass().getCanonicalName();",
      "info" : "FieldDeclaration[3819-3886]:FieldDeclaration[3819-3886]"
    }, {
      "left" : "private Elements elements;",
      "right" : "private Elements elements;",
      "info" : "FieldDeclaration[3890-3916]:FieldDeclaration[3890-3916]"
    }, {
      "left" : "private Messager messager;",
      "right" : "private Messager messager;",
      "info" : "FieldDeclaration[3919-3945]:FieldDeclaration[3919-3945]"
    }, {
      "left" : "private ImmutableList<? extends ProcessingStep> steps;",
      "right" : "private ImmutableList<? extends ProcessingStep> steps;",
      "info" : "FieldDeclaration[3948-4002]:FieldDeclaration[3948-4002]"
    }, {
      "left" : "public final synchronized void init(ProcessingEnvironment processingEnv)",
      "right" : "public final synchronized void init(ProcessingEnvironment processingEnv)",
      "info" : "MethodDeclaration[4006-4281]:MethodDeclaration[4006-4281]"
    }, {
      "left" : "protected abstract Iterable<? extends ProcessingStep> initSteps();",
      "right" : "protected abstract Iterable<? extends ProcessingStep> initSteps();",
      "info" : "MethodDeclaration[4285-4543]:MethodDeclaration[4285-4543]"
    }, {
      "left" : "protected void postProcess()",
      "right" : "protected void postProcess()",
      "info" : "MethodDeclaration[4547-4655]:MethodDeclaration[4547-4655]"
    }, {
      "left" : "private ImmutableSet<? extends Class<? extends Annotation>> getSupportedAnnotationClasses()",
      "right" : "private ImmutableSet<? extends Class<? extends Annotation>> getSupportedAnnotationClasses()",
      "info" : "MethodDeclaration[4659-4991]:MethodDeclaration[4659-4991]"
    }, {
      "left" : "public final ImmutableSet<String> getSupportedAnnotationTypes()",
      "right" : "public final ImmutableSet<String> getSupportedAnnotationTypes()",
      "info" : "MethodDeclaration[4995-5468]:MethodDeclaration[4995-5468]"
    }, {
      "left" : "private static final String INVALID_ELEMENT_MESSAGE_FORMAT = \"%s was unable to process %s\"\n      + \" because not all of its dependencies could be resolved. Check for compilation errors or a\"\n      + \" circular dependency with generated code.\";",
      "right" : "private static final String INVALID_ELEMENT_MESSAGE_FORMAT = \"%s was unable to process %s\"\n      + \" because not all of its dependencies could be resolved. Check for compilation errors or a\"\n      + \" circular dependency with generated code.\";",
      "info" : "FieldDeclaration[5472-5715]:FieldDeclaration[5472-5715]"
    }, {
      "left" : "public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)",
      "right" : "public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)",
      "info" : "MethodDeclaration[5719-10770]:MethodDeclaration[5719-6367]"
    }, {
      "left" : "private void reportMissingElements(\n      Map<String, ? extends Optional<? extends Element>> missingElements)",
      "right" : "private void reportMissingElements(\n      Map<String, ? extends Optional<? extends Element>> missingElements)",
      "info" : "MethodDeclaration[10774-11593]:MethodDeclaration[7063-8026]"
    }, {
      "left" : "private static void findAnnotatedElements(Element element,\n      ImmutableSet<? extends Class<? extends Annotation>> annotationClasses,\n      ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element> builder)",
      "right" : "private static void findAnnotatedElements(Element element,\n      ImmutableSet<? extends Class<? extends Annotation>> annotationClasses,\n      ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element> builder)",
      "info" : "MethodDeclaration[11597-12475]:MethodDeclaration[12043-12921]"
    }, {
      "left" : "// TODO(cgruber) move to MoreElements and make public.\n  private static TypeElement getEnclosingType(Element element)",
      "right" : "// TODO(cgruber) move to MoreElements and make public.\n  private static TypeElement getEnclosingType(Element element)",
      "info" : "MethodDeclaration[12479-13302]:MethodDeclaration[12925-13748]"
    }, {
      "left" : "protected TypeElement defaultAction(Element e, Void p)",
      "right" : "protected TypeElement defaultAction(Element e, Void p)",
      "info" : "MethodDeclaration[12926-13056]:MethodDeclaration[13372-13502]"
    }, {
      "left" : "public TypeElement visitType(TypeElement e, Void p)",
      "right" : "public TypeElement visitType(TypeElement e, Void p)",
      "info" : "MethodDeclaration[13064-13153]:MethodDeclaration[13510-13599]"
    }, {
      "left" : "public TypeElement visitPackage(PackageElement e, Void p)",
      "right" : "public TypeElement visitPackage(PackageElement e, Void p)",
      "info" : "MethodDeclaration[13161-13284]:MethodDeclaration[13607-13730]"
    }, {
      "left" : "ProcessingStep",
      "right" : "ProcessingStep",
      "info" : "TypeDeclaration[13306-13898]:TypeDeclaration[13752-14344]"
    }, {
      "left" : "Set<? extends Class<? extends Annotation>> annotations();",
      "right" : "Set<? extends Class<? extends Annotation>> annotations();",
      "info" : "MethodDeclaration[13473-13593]:MethodDeclaration[13919-14039]"
    }, {
      "left" : "void process(SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation);",
      "right" : "void process(SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation);",
      "info" : "MethodDeclaration[13599-13894]:MethodDeclaration[14045-14340]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3229-3235]:Modifier[3229-3235]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[3236-3244]:Modifier[3236-3244]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3245-3250]:TYPE_DECLARATION_KIND[3245-3250]"
    }, {
      "left" : "BasicAnnotationProcessor",
      "right" : "BasicAnnotationProcessor",
      "info" : "SimpleName[3251-3275]:SimpleName[3251-3275]"
    }, {
      "left" : "AbstractProcessor",
      "right" : "AbstractProcessor",
      "info" : "SimpleType[3284-3301]:SimpleType[3284-3301]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4006-4015]:MarkerAnnotation[4006-4015]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4018-4024]:Modifier[4018-4024]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4025-4030]:Modifier[4025-4030]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[4031-4043]:Modifier[4031-4043]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4044-4048]:PrimitiveType[4044-4048]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[4049-4053]:SimpleName[4049-4053]"
    }, {
      "left" : "ProcessingEnvironment processingEnv",
      "right" : "ProcessingEnvironment processingEnv",
      "info" : "SingleVariableDeclaration[4054-4089]:SingleVariableDeclaration[4054-4089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4091-4281]:Block[4091-4281]"
    }, {
      "left" : "super.init(processingEnv);",
      "right" : "super.init(processingEnv);",
      "info" : "ExpressionStatement[4097-4123]:ExpressionStatement[4097-4123]"
    }, {
      "left" : "this.elements = processingEnv.getElementUtils();",
      "right" : "this.elements = processingEnv.getElementUtils();",
      "info" : "ExpressionStatement[4128-4176]:ExpressionStatement[4128-4176]"
    }, {
      "left" : "this.messager = processingEnv.getMessager();",
      "right" : "this.messager = processingEnv.getMessager();",
      "info" : "ExpressionStatement[4181-4225]:ExpressionStatement[4181-4225]"
    }, {
      "left" : "this.steps = ImmutableList.copyOf(initSteps());",
      "right" : "this.steps = ImmutableList.copyOf(initSteps());",
      "info" : "ExpressionStatement[4230-4277]:ExpressionStatement[4230-4277]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4477-4486]:Modifier[4477-4486]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[4487-4495]:Modifier[4487-4495]"
    }, {
      "left" : "Iterable<? extends ProcessingStep>",
      "right" : "Iterable<? extends ProcessingStep>",
      "info" : "ParameterizedType[4496-4530]:ParameterizedType[4496-4530]"
    }, {
      "left" : "initSteps",
      "right" : "initSteps",
      "info" : "SimpleName[4531-4540]:SimpleName[4531-4540]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4624-4633]:Modifier[4624-4633]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4634-4638]:PrimitiveType[4634-4638]"
    }, {
      "left" : "postProcess",
      "right" : "postProcess",
      "info" : "SimpleName[4639-4650]:SimpleName[4639-4650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4653-4655]:Block[4653-4655]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4659-4666]:Modifier[4659-4666]"
    }, {
      "left" : "ImmutableSet<? extends Class<? extends Annotation>>",
      "right" : "ImmutableSet<? extends Class<? extends Annotation>>",
      "info" : "ParameterizedType[4667-4718]:ParameterizedType[4667-4718]"
    }, {
      "left" : "getSupportedAnnotationClasses",
      "right" : "getSupportedAnnotationClasses",
      "info" : "SimpleName[4719-4748]:SimpleName[4719-4748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4751-4991]:Block[4751-4991]"
    }, {
      "left" : "checkState(steps != null);",
      "right" : "checkState(steps != null);",
      "info" : "ExpressionStatement[4757-4783]:ExpressionStatement[4757-4783]"
    }, {
      "left" : "ImmutableSet.Builder<Class<? extends Annotation>> builder = ImmutableSet.builder();",
      "right" : "ImmutableSet.Builder<Class<? extends Annotation>> builder = ImmutableSet.builder();",
      "info" : "VariableDeclarationStatement[4788-4871]:VariableDeclarationStatement[4788-4871]"
    }, {
      "left" : "for (ProcessingStep step : steps)",
      "right" : "for (ProcessingStep step : steps)",
      "info" : "EnhancedForStatement[4876-4959]:EnhancedForStatement[4876-4959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4910-4959]:Block[4910-4959]"
    }, {
      "left" : "builder.addAll(step.annotations());",
      "right" : "builder.addAll(step.annotations());",
      "info" : "ExpressionStatement[4918-4953]:ExpressionStatement[4918-4953]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[4964-4987]:ReturnStatement[4964-4987]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5141-5150]:MarkerAnnotation[5141-5150]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5153-5159]:Modifier[5153-5159]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5160-5165]:Modifier[5160-5165]"
    }, {
      "left" : "ImmutableSet<String>",
      "right" : "ImmutableSet<String>",
      "info" : "ParameterizedType[5166-5186]:ParameterizedType[5166-5186]"
    }, {
      "left" : "getSupportedAnnotationTypes",
      "right" : "getSupportedAnnotationTypes",
      "info" : "SimpleName[5187-5214]:SimpleName[5187-5214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5217-5468]:Block[5217-5468]"
    }, {
      "left" : "ImmutableSet.Builder<String> builder = ImmutableSet.builder();",
      "right" : "ImmutableSet.Builder<String> builder = ImmutableSet.builder();",
      "info" : "VariableDeclarationStatement[5223-5285]:VariableDeclarationStatement[5223-5285]"
    }, {
      "left" : "for (Class<? extends Annotation> annotationClass : getSupportedAnnotationClasses())",
      "right" : "for (Class<? extends Annotation> annotationClass : getSupportedAnnotationClasses())",
      "info" : "EnhancedForStatement[5290-5436]:EnhancedForStatement[5290-5436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5374-5436]:Block[5374-5436]"
    }, {
      "left" : "builder.add(annotationClass.getCanonicalName());",
      "right" : "builder.add(annotationClass.getCanonicalName());",
      "info" : "ExpressionStatement[5382-5430]:ExpressionStatement[5382-5430]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[5441-5464]:ReturnStatement[5441-5464]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5719-5728]:MarkerAnnotation[5719-5728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5731-5737]:Modifier[5731-5737]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5738-5743]:Modifier[5738-5743]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5744-5751]:PrimitiveType[5744-5751]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5752-5759]:SimpleName[5752-5759]"
    }, {
      "left" : "Set<? extends TypeElement> annotations",
      "right" : "Set<? extends TypeElement> annotations",
      "info" : "SingleVariableDeclaration[5760-5798]:SingleVariableDeclaration[5760-5798]"
    }, {
      "left" : "RoundEnvironment roundEnv",
      "right" : "RoundEnvironment roundEnv",
      "info" : "SingleVariableDeclaration[5800-5825]:SingleVariableDeclaration[5800-5825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5827-10770]:Block[5827-6367]"
    }, {
      "left" : "checkState(elements != null);",
      "right" : "checkState(elements != null);",
      "info" : "ExpressionStatement[5833-5862]:ExpressionStatement[5833-5862]"
    }, {
      "left" : "checkState(messager != null);",
      "right" : "checkState(messager != null);",
      "info" : "ExpressionStatement[5867-5896]:ExpressionStatement[5867-5896]"
    }, {
      "left" : "checkState(steps != null);",
      "right" : "checkState(steps != null);",
      "info" : "ExpressionStatement[5901-5927]:ExpressionStatement[5901-5927]"
    }, {
      "left" : "ImmutableMap.Builder<String, Optional<? extends Element>> deferredElementsBuilder =\n        ImmutableMap.builder();",
      "right" : "ImmutableMap.Builder<String, Optional<? extends Element>> deferredElements =\n        ImmutableMap.builder();",
      "info" : "VariableDeclarationStatement[6033-6148]:VariableDeclarationStatement[6513-6621]"
    }, {
      "left" : "deferredElementsBuilder",
      "right" : "deferredElements",
      "info" : "SimpleName[6091-6114]:SimpleName[6571-6587]"
    }, {
      "left" : "for (String deferredTypeName : deferredTypeNames)",
      "right" : "for (String deferredTypeName : deferredTypeNames)",
      "info" : "EnhancedForStatement[6153-6339]:EnhancedForStatement[6626-6806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6203-6339]:Block[6676-6806]"
    }, {
      "left" : "deferredElementsBuilder",
      "right" : "deferredElements",
      "info" : "SimpleName[6211-6234]:SimpleName[6684-6700]"
    }, {
      "left" : "deferredElementsBuilder.put(deferredTypeName,\n          Optional.fromNullable(elements.getTypeElement(deferredTypeName)));",
      "right" : "deferredElements.put(\n          deferredTypeName, Optional.fromNullable(elements.getTypeElement(deferredTypeName)));",
      "info" : "ExpressionStatement[6211-6333]:ExpressionStatement[6684-6800]"
    }, {
      "left" : "for (String deferredPackageName : deferredPackageNames)",
      "right" : "for (String deferredPackageName : deferredPackageNames)",
      "info" : "EnhancedForStatement[6344-6545]:EnhancedForStatement[6812-7017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6400-6545]:Block[6868-7017]"
    }, {
      "left" : "deferredElementsBuilder",
      "right" : "deferredElements",
      "info" : "SimpleName[6408-6431]:SimpleName[6876-6892]"
    }, {
      "left" : "deferredElementsBuilder.put(deferredPackageName,\n          Optional.fromNullable(elements.getPackageElement(deferredPackageName)));",
      "right" : "deferredElements.put(\n          deferredPackageName,\n          Optional.fromNullable(elements.getPackageElement(deferredPackageName)));",
      "info" : "ExpressionStatement[6408-6539]:ExpressionStatement[6876-7011]"
    }, {
      "left" : "ImmutableMap<String, Optional<? extends Element>> deferredElements =\n        deferredElementsBuilder.build();",
      "right" : "ImmutableMap<String, Optional<? extends Element>> deferredElements = deferredElements();",
      "info" : "VariableDeclarationStatement[6550-6659]:VariableDeclarationStatement[5933-6021]"
    }, {
      "left" : "deferredElementsBuilder",
      "right" : "deferredElements",
      "info" : "SimpleName[6627-6650]:SimpleName[6295-6311]"
    }, {
      "left" : "deferredTypeNames.clear();",
      "right" : "deferredTypeNames.clear();",
      "info" : "ExpressionStatement[6665-6691]:ExpressionStatement[6027-6053]"
    }, {
      "left" : "deferredPackageNames.clear();",
      "right" : "deferredPackageNames.clear();",
      "info" : "ExpressionStatement[6696-6725]:ExpressionStatement[6058-6087]"
    }, {
      "left" : "if (roundEnv.processingOver())",
      "right" : "if (roundEnv.processingOver())",
      "info" : "IfStatement[6800-6905]:IfStatement[6162-6267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6831-6905]:Block[6193-6267]"
    }, {
      "left" : "reportMissingElements(deferredElements);",
      "right" : "reportMissingElements(deferredElements);",
      "info" : "ExpressionStatement[6839-6879]:ExpressionStatement[6201-6241]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6886-6899]:ReturnStatement[6248-6261]"
    }, {
      "left" : "ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element>\n        deferredElementsByAnnotationBuilder = ImmutableSetMultimap.builder();",
      "right" : "ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element>\n        deferredElementsByAnnotationBuilder = ImmutableSetMultimap.builder();",
      "info" : "VariableDeclarationStatement[7082-7226]:VariableDeclarationStatement[8386-8530]"
    }, {
      "left" : "for (Entry<String, Optional<? extends Element>> deferredTypeElementEntry :\n        deferredElements.entrySet())",
      "right" : "for (Entry<String, Optional<? extends Element>> deferredTypeElementEntry :\n        deferredElements.entrySet())",
      "info" : "EnhancedForStatement[7231-7705]:EnhancedForStatement[8535-9009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7343-7705]:Block[8647-9009]"
    }, {
      "left" : "Optional<? extends Element> deferredElement = deferredTypeElementEntry.getValue();",
      "right" : "Optional<? extends Element> deferredElement = deferredTypeElementEntry.getValue();",
      "info" : "VariableDeclarationStatement[7351-7433]:VariableDeclarationStatement[8655-8737]"
    }, {
      "left" : "if (deferredElement.isPresent())",
      "right" : "if (deferredElement.isPresent())",
      "info" : "IfStatement[7440-7699]:IfStatement[8744-9003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7473-7618]:Block[8777-8922]"
    }, {
      "left" : "findAnnotatedElements(deferredElement.get(), getSupportedAnnotationClasses(),\n            deferredElementsByAnnotationBuilder);",
      "right" : "findAnnotatedElements(deferredElement.get(), getSupportedAnnotationClasses(),\n            deferredElementsByAnnotationBuilder);",
      "info" : "ExpressionStatement[7483-7610]:ExpressionStatement[8787-8914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7624-7699]:Block[8928-9003]"
    }, {
      "left" : "deferredTypeNames.add(deferredTypeElementEntry.getKey());",
      "right" : "deferredTypeNames.add(deferredTypeElementEntry.getKey());",
      "info" : "ExpressionStatement[7634-7691]:ExpressionStatement[8938-8995]"
    }, {
      "left" : "ImmutableSetMultimap<Class<? extends Annotation>, Element> deferredElementsByAnnotation =\n        deferredElementsByAnnotationBuilder.build();",
      "right" : "ImmutableSetMultimap<Class<? extends Annotation>, Element> deferredElementsByAnnotation =\n        deferredElementsByAnnotationBuilder.build();",
      "info" : "VariableDeclarationStatement[7711-7853]:VariableDeclarationStatement[9015-9157]"
    }, {
      "left" : "ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element> elementsByAnnotationBuilder =\n        ImmutableSetMultimap.builder();",
      "right" : "ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element> validElements =\n        ImmutableSetMultimap.builder();",
      "info" : "VariableDeclarationStatement[7859-7995]:VariableDeclarationStatement[9163-9285]"
    }, {
      "left" : "elementsByAnnotationBuilder",
      "right" : "validElements",
      "info" : "SimpleName[7926-7953]:SimpleName[9230-9243]"
    }, {
      "left" : "Set<String> validPackageNames = Sets.newLinkedHashSet();",
      "right" : "Set<String> validPackageNames = Sets.newLinkedHashSet();",
      "info" : "VariableDeclarationStatement[8001-8057]:VariableDeclarationStatement[9291-9347]"
    }, {
      "left" : "Set<String> validTypeNames = Sets.newLinkedHashSet();",
      "right" : "Set<String> validTypeNames = Sets.newLinkedHashSet();",
      "info" : "VariableDeclarationStatement[8062-8115]:VariableDeclarationStatement[9352-9405]"
    }, {
      "left" : "for (Class<? extends Annotation> annotationClass : getSupportedAnnotationClasses())",
      "right" : "for (Class<? extends Annotation> annotationClass : getSupportedAnnotationClasses())",
      "info" : "EnhancedForStatement[8217-10267]:EnhancedForStatement[9507-11580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8301-10267]:Block[9591-11580]"
    }, {
      "left" : "TypeElement annotationType = elements.getTypeElement(annotationClass.getCanonicalName());",
      "right" : "TypeElement annotationType = elements.getTypeElement(annotationClass.getCanonicalName());",
      "info" : "VariableDeclarationStatement[8480-8569]:VariableDeclarationStatement[9770-9859]"
    }, {
      "left" : "Set<? extends Element> elementsAnnotatedWith = (annotationType == null)\n          ? ImmutableSet.<Element>of()\n          : roundEnv.getElementsAnnotatedWith(annotationType);",
      "right" : "Set<? extends Element> elementsAnnotatedWith =\n          (annotationType == null)\n              ? ImmutableSet.<Element>of()\n              : roundEnv.getElementsAnnotatedWith(annotationType);",
      "info" : "VariableDeclarationStatement[8576-8749]:VariableDeclarationStatement[9866-10057]"
    }, {
      "left" : "for (Element annotatedElement : Sets.union(\n          elementsAnnotatedWith,\n          deferredElementsByAnnotation.get(annotationClass)))",
      "right" : "for (Element annotatedElement :\n          Sets.union(elementsAnnotatedWith, deferredElementsByAnnotation.get(annotationClass)))",
      "info" : "EnhancedForStatement[8756-10261]:EnhancedForStatement[10064-11574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8895-10261]:Block[10192-11574]"
    }, {
      "left" : "if (annotatedElement.getKind().equals(PACKAGE))",
      "right" : "if (annotatedElement.getKind().equals(PACKAGE))",
      "info" : "IfStatement[8905-10253]:IfStatement[10202-11566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8953-9627]:Block[10250-10932]"
    }, {
      "left" : "PackageElement annotatedPackageElement = (PackageElement) annotatedElement;",
      "right" : "PackageElement annotatedPackageElement = (PackageElement) annotatedElement;",
      "info" : "VariableDeclarationStatement[8965-9040]:VariableDeclarationStatement[10262-10337]"
    }, {
      "left" : "String annotatedPackageName = annotatedPackageElement.getQualifiedName().toString();",
      "right" : "String annotatedPackageName = annotatedPackageElement.getQualifiedName().toString();",
      "info" : "VariableDeclarationStatement[9051-9135]:VariableDeclarationStatement[10348-10432]"
    }, {
      "left" : "boolean validPackage = validPackageNames.contains(annotatedPackageName)\n              || (!deferredPackageNames.contains(annotatedPackageName)\n                  && validateElement(annotatedPackageElement));",
      "right" : "boolean validPackage =\n              validPackageNames.contains(annotatedPackageName)\n                  || (!deferredPackageNames.contains(annotatedPackageName)\n                      && validateElement(annotatedPackageElement));",
      "info" : "VariableDeclarationStatement[9146-9352]:VariableDeclarationStatement[10443-10671]"
    }, {
      "left" : "if (validPackage)",
      "right" : "if (validPackage)",
      "info" : "IfStatement[9363-9617]:IfStatement[10682-10922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9381-9538]:Block[10700-10843]"
    }, {
      "left" : "elementsByAnnotationBuilder",
      "right" : "validElements",
      "info" : "SimpleName[9395-9422]:SimpleName[10714-10727]"
    }, {
      "left" : "elementsByAnnotationBuilder.put(annotationClass, annotatedPackageElement);",
      "right" : "validElements.put(annotationClass, annotatedPackageElement);",
      "info" : "ExpressionStatement[9395-9469]:ExpressionStatement[10714-10774]"
    }, {
      "left" : "validPackageNames.add(annotatedPackageName);",
      "right" : "validPackageNames.add(annotatedPackageName);",
      "info" : "ExpressionStatement[9482-9526]:ExpressionStatement[10787-10831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9544-9617]:Block[10849-10922]"
    }, {
      "left" : "deferredPackageNames.add(annotatedPackageName);",
      "right" : "deferredPackageNames.add(annotatedPackageName);",
      "info" : "ExpressionStatement[9558-9605]:ExpressionStatement[10863-10910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9633-10253]:Block[10938-11566]"
    }, {
      "left" : "TypeElement enclosingType = getEnclosingType(annotatedElement);",
      "right" : "TypeElement enclosingType = getEnclosingType(annotatedElement);",
      "info" : "VariableDeclarationStatement[9645-9708]:VariableDeclarationStatement[10950-11013]"
    }, {
      "left" : "String enclosingTypeName = enclosingType.getQualifiedName().toString();",
      "right" : "String enclosingTypeName = enclosingType.getQualifiedName().toString();",
      "info" : "VariableDeclarationStatement[9719-9790]:VariableDeclarationStatement[11024-11095]"
    }, {
      "left" : "boolean validEnclosingType = validTypeNames.contains(enclosingTypeName)\n              || (!deferredTypeNames.contains(enclosingTypeName)\n                  && validateElement(enclosingType));",
      "right" : "boolean validEnclosingType =\n              validTypeNames.contains(enclosingTypeName)\n                  || (!deferredTypeNames.contains(enclosingTypeName)\n                      && validateElement(enclosingType));",
      "info" : "VariableDeclarationStatement[9801-9991]:VariableDeclarationStatement[11106-11318]"
    }, {
      "left" : "if (validEnclosingType)",
      "right" : "if (validEnclosingType)",
      "info" : "IfStatement[10002-10243]:IfStatement[11329-11556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10026-10170]:Block[11353-11483]"
    }, {
      "left" : "elementsByAnnotationBuilder",
      "right" : "validElements",
      "info" : "SimpleName[10040-10067]:SimpleName[11367-11380]"
    }, {
      "left" : "elementsByAnnotationBuilder.put(annotationClass, annotatedElement);",
      "right" : "validElements.put(annotationClass, annotatedElement);",
      "info" : "ExpressionStatement[10040-10107]:ExpressionStatement[11367-11420]"
    }, {
      "left" : "validTypeNames.add(enclosingTypeName);",
      "right" : "validTypeNames.add(enclosingTypeName);",
      "info" : "ExpressionStatement[10120-10158]:ExpressionStatement[11433-11471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10176-10243]:Block[11489-11556]"
    }, {
      "left" : "deferredTypeNames.add(enclosingTypeName);",
      "right" : "deferredTypeNames.add(enclosingTypeName);",
      "info" : "ExpressionStatement[10190-10231]:ExpressionStatement[11503-11544]"
    }, {
      "left" : "for (ProcessingStep step : steps)",
      "right" : "for (ProcessingStep step : steps)",
      "info" : "EnhancedForStatement[10448-10727]:EnhancedForStatement[11763-12035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10482-10727]:Block[11797-12035]"
    }, {
      "left" : "SetMultimap<Class<? extends Annotation>, Element> filteredMap =\n          Multimaps.filterKeys(elementsByAnnotation, Predicates.in(step.annotations()));",
      "right" : "SetMultimap<Class<? extends Annotation>, Element> filteredMap =\n          Multimaps.filterKeys(validElements, Predicates.in(step.annotations()));",
      "info" : "VariableDeclarationStatement[10490-10642]:VariableDeclarationStatement[11805-11950]"
    }, {
      "left" : "elementsByAnnotation",
      "right" : "validElements",
      "info" : "SimpleName[10585-10605]:SimpleName[11900-11913]"
    }, {
      "left" : "if (!filteredMap.isEmpty())",
      "right" : "if (!filteredMap.isEmpty())",
      "info" : "IfStatement[10649-10721]:IfStatement[11957-12029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10677-10721]:Block[11985-12029]"
    }, {
      "left" : "step.process(filteredMap);",
      "right" : "step.process(filteredMap);",
      "info" : "ExpressionStatement[10687-10713]:ExpressionStatement[11995-12021]"
    }, {
      "left" : "postProcess();",
      "right" : "postProcess();",
      "info" : "ExpressionStatement[10733-10747]:ExpressionStatement[6330-6344]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10753-10766]:ReturnStatement[6350-6363]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10774-10781]:Modifier[7063-7070]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10782-10786]:PrimitiveType[7071-7075]"
    }, {
      "left" : "reportMissingElements",
      "right" : "reportMissingElements",
      "info" : "SimpleName[10787-10808]:SimpleName[7076-7097]"
    }, {
      "left" : "Map<String, ? extends Optional<? extends Element>> missingElements",
      "right" : "Map<String, ? extends Optional<? extends Element>> missingElements",
      "info" : "SingleVariableDeclaration[10816-10882]:SingleVariableDeclaration[7105-7171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10884-11593]:Block[7173-8026]"
    }, {
      "left" : "for (Entry<String, ? extends Optional<? extends Element>> missingElementEntry :\n        missingElements.entrySet())",
      "right" : "for (Entry<String, ? extends Optional<? extends Element>> missingElementEntry :\n        missingElements.entrySet())",
      "info" : "EnhancedForStatement[10890-11589]:EnhancedForStatement[7179-8022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11006-11589]:Block[7295-8022]"
    }, {
      "left" : "Optional<? extends Element> missingElement = missingElementEntry.getValue();",
      "right" : "Optional<? extends Element> missingElement = missingElementEntry.getValue();",
      "info" : "VariableDeclarationStatement[11014-11090]:VariableDeclarationStatement[7303-7379]"
    }, {
      "left" : "if (missingElement.isPresent())",
      "right" : "if (missingElement.isPresent())",
      "info" : "IfStatement[11097-11583]:IfStatement[7386-8016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11129-11391]:Block[7418-7772]"
    }, {
      "left" : "processingEnv.getMessager().printMessage(ERROR,\n            String.format(INVALID_ELEMENT_MESSAGE_FORMAT, processorName,\n                \"this \" + Ascii.toLowerCase(missingElement.get().getKind().name())),\n                missingElement.get());",
      "right" : "processingEnv\n            .getMessager()\n            .printMessage(\n                ERROR,\n                String.format(\n                    INVALID_ELEMENT_MESSAGE_FORMAT,\n                    processorName,\n                    \"this \" + Ascii.toLowerCase(missingElement.get().getKind().name())),\n                missingElement.get());",
      "info" : "ExpressionStatement[11139-11383]:ExpressionStatement[7428-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11397-11583]:Block[7778-8016]"
    }, {
      "left" : "processingEnv.getMessager().printMessage(ERROR,\n            String.format(INVALID_ELEMENT_MESSAGE_FORMAT, processorName,\n                missingElementEntry.getKey()));",
      "right" : "processingEnv\n            .getMessager()\n            .printMessage(\n                ERROR,\n                String.format(\n                    INVALID_ELEMENT_MESSAGE_FORMAT, processorName, missingElementEntry.getKey()));",
      "info" : "ExpressionStatement[11407-11575]:ExpressionStatement[7788-8008]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11597-11604]:Modifier[12043-12050]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11605-11611]:Modifier[12051-12057]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11612-11616]:PrimitiveType[12058-12062]"
    }, {
      "left" : "findAnnotatedElements",
      "right" : "findAnnotatedElements",
      "info" : "SimpleName[11617-11638]:SimpleName[12063-12084]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[11639-11654]:SingleVariableDeclaration[12085-12100]"
    }, {
      "left" : "ImmutableSet<? extends Class<? extends Annotation>> annotationClasses",
      "right" : "ImmutableSet<? extends Class<? extends Annotation>> annotationClasses",
      "info" : "SingleVariableDeclaration[11662-11731]:SingleVariableDeclaration[12108-12177]"
    }, {
      "left" : "ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element> builder",
      "right" : "ImmutableSetMultimap.Builder<Class<? extends Annotation>, Element> builder",
      "info" : "SingleVariableDeclaration[11739-11813]:SingleVariableDeclaration[12185-12259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11815-12475]:Block[12261-12921]"
    }, {
      "left" : "for (Element enclosedElement : element.getEnclosedElements())",
      "right" : "for (Element enclosedElement : element.getEnclosedElements())",
      "info" : "EnhancedForStatement[11821-11964]:EnhancedForStatement[12267-12410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11883-11964]:Block[12329-12410]"
    }, {
      "left" : "findAnnotatedElements(enclosedElement, annotationClasses, builder);",
      "right" : "findAnnotatedElements(enclosedElement, annotationClasses, builder);",
      "info" : "ExpressionStatement[11891-11958]:ExpressionStatement[12337-12404]"
    }, {
      "left" : "if (element instanceof ExecutableElement)",
      "right" : "if (element instanceof ExecutableElement)",
      "info" : "IfStatement[12041-12262]:IfStatement[12487-12708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12083-12262]:Block[12529-12708]"
    }, {
      "left" : "for (Element parameterElement : ((ExecutableElement) element).getParameters())",
      "right" : "for (Element parameterElement : ((ExecutableElement) element).getParameters())",
      "info" : "EnhancedForStatement[12091-12256]:EnhancedForStatement[12537-12702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12170-12256]:Block[12616-12702]"
    }, {
      "left" : "findAnnotatedElements(parameterElement, annotationClasses, builder);",
      "right" : "findAnnotatedElements(parameterElement, annotationClasses, builder);",
      "info" : "ExpressionStatement[12180-12248]:ExpressionStatement[12626-12694]"
    }, {
      "left" : "for (Class<? extends Annotation> annotationClass : annotationClasses)",
      "right" : "for (Class<? extends Annotation> annotationClass : annotationClasses)",
      "info" : "EnhancedForStatement[12267-12471]:EnhancedForStatement[12713-12917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12337-12471]:Block[12783-12917]"
    }, {
      "left" : "if (MoreElements.isAnnotationPresent(element, annotationClass))",
      "right" : "if (MoreElements.isAnnotationPresent(element, annotationClass))",
      "info" : "IfStatement[12345-12465]:IfStatement[12791-12911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12409-12465]:Block[12855-12911]"
    }, {
      "left" : "builder.put(annotationClass, element);",
      "right" : "builder.put(annotationClass, element);",
      "info" : "ExpressionStatement[12419-12457]:ExpressionStatement[12865-12903]"
    }, {
      "left" : "// TODO(cgruber) move to MoreElements and make public.",
      "right" : "// TODO(cgruber) move to MoreElements and make public.",
      "info" : "LineComment[12725-12779]:LineComment[13171-13225]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12782-12789]:Modifier[13228-13235]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12790-12796]:Modifier[13236-13242]"
    }, {
      "left" : "TypeElement",
      "right" : "TypeElement",
      "info" : "SimpleType[12797-12808]:SimpleType[13243-13254]"
    }, {
      "left" : "getEnclosingType",
      "right" : "getEnclosingType",
      "info" : "SimpleName[12809-12825]:SimpleName[13255-13271]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[12826-12841]:SingleVariableDeclaration[13272-13287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12843-13302]:Block[13289-13748]"
    }, {
      "left" : "return element.accept(new SimpleElementVisitor6<TypeElement, Void>() {\n      @Override protected TypeElement defaultAction(Element e, Void p) {\n        return e.getEnclosingElement().accept(this, p);\n      }\n\n      @Override public TypeElement visitType(TypeElement e, Void p) {\n        return e;\n      }\n\n      @Override public TypeElement visitPackage(PackageElement e, Void p) {\n        throw new IllegalArgumentException();\n      }\n    }, null);",
      "right" : "return element.accept(new SimpleElementVisitor6<TypeElement, Void>() {\n      @Override protected TypeElement defaultAction(Element e, Void p) {\n        return e.getEnclosingElement().accept(this, p);\n      }\n\n      @Override public TypeElement visitType(TypeElement e, Void p) {\n        return e;\n      }\n\n      @Override public TypeElement visitPackage(PackageElement e, Void p) {\n        throw new IllegalArgumentException();\n      }\n    }, null);",
      "info" : "ReturnStatement[12849-13298]:ReturnStatement[13295-13744]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12926-12935]:MarkerAnnotation[13372-13381]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12936-12945]:Modifier[13382-13391]"
    }, {
      "left" : "TypeElement",
      "right" : "TypeElement",
      "info" : "SimpleType[12946-12957]:SimpleType[13392-13403]"
    }, {
      "left" : "defaultAction",
      "right" : "defaultAction",
      "info" : "SimpleName[12958-12971]:SimpleName[13404-13417]"
    }, {
      "left" : "Element e",
      "right" : "Element e",
      "info" : "SingleVariableDeclaration[12972-12981]:SingleVariableDeclaration[13418-13427]"
    }, {
      "left" : "Void p",
      "right" : "Void p",
      "info" : "SingleVariableDeclaration[12983-12989]:SingleVariableDeclaration[13429-13435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12991-13056]:Block[13437-13502]"
    }, {
      "left" : "return e.getEnclosingElement().accept(this, p);",
      "right" : "return e.getEnclosingElement().accept(this, p);",
      "info" : "ReturnStatement[13001-13048]:ReturnStatement[13447-13494]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13064-13073]:MarkerAnnotation[13510-13519]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13074-13080]:Modifier[13520-13526]"
    }, {
      "left" : "TypeElement",
      "right" : "TypeElement",
      "info" : "SimpleType[13081-13092]:SimpleType[13527-13538]"
    }, {
      "left" : "visitType",
      "right" : "visitType",
      "info" : "SimpleName[13093-13102]:SimpleName[13539-13548]"
    }, {
      "left" : "TypeElement e",
      "right" : "TypeElement e",
      "info" : "SingleVariableDeclaration[13103-13116]:SingleVariableDeclaration[13549-13562]"
    }, {
      "left" : "Void p",
      "right" : "Void p",
      "info" : "SingleVariableDeclaration[13118-13124]:SingleVariableDeclaration[13564-13570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13126-13153]:Block[13572-13599]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[13136-13145]:ReturnStatement[13582-13591]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13161-13170]:MarkerAnnotation[13607-13616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13171-13177]:Modifier[13617-13623]"
    }, {
      "left" : "TypeElement",
      "right" : "TypeElement",
      "info" : "SimpleType[13178-13189]:SimpleType[13624-13635]"
    }, {
      "left" : "visitPackage",
      "right" : "visitPackage",
      "info" : "SimpleName[13190-13202]:SimpleName[13636-13648]"
    }, {
      "left" : "PackageElement e",
      "right" : "PackageElement e",
      "info" : "SingleVariableDeclaration[13203-13219]:SingleVariableDeclaration[13649-13665]"
    }, {
      "left" : "Void p",
      "right" : "Void p",
      "info" : "SingleVariableDeclaration[13221-13227]:SingleVariableDeclaration[13667-13673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13229-13284]:Block[13675-13730]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[13239-13276]:ThrowStatement[13685-13722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13435-13441]:Modifier[13881-13887]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[13442-13451]:TYPE_DECLARATION_KIND[13888-13897]"
    }, {
      "left" : "ProcessingStep",
      "right" : "ProcessingStep",
      "info" : "SimpleName[13452-13466]:SimpleName[13898-13912]"
    }, {
      "left" : "Set<? extends Class<? extends Annotation>>",
      "right" : "Set<? extends Class<? extends Annotation>>",
      "info" : "ParameterizedType[13536-13578]:ParameterizedType[13982-14024]"
    }, {
      "left" : "annotations",
      "right" : "annotations",
      "info" : "SimpleName[13579-13590]:SimpleName[14025-14036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13809-13813]:PrimitiveType[14255-14259]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[13814-13821]:SimpleName[14260-14267]"
    }, {
      "left" : "SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation",
      "right" : "SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation",
      "info" : "SingleVariableDeclaration[13822-13892]:SingleVariableDeclaration[14268-14338]"
    } ]
  },
  "interFileMappings" : { }
}