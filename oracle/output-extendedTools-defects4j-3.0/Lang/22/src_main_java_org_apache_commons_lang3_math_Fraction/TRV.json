{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 65382027393090L;",
      "right" : "private static final long serialVersionUID = 65382027393090L;",
      "info" : "FieldDeclaration[1585-1764]:FieldDeclaration[1585-1764]"
    }, {
      "left" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "right" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "info" : "FieldDeclaration[1770-1891]:FieldDeclaration[1770-1891]"
    }, {
      "left" : "public static final Fraction ONE = new Fraction(1, 1);",
      "right" : "public static final Fraction ONE = new Fraction(1, 1);",
      "info" : "FieldDeclaration[1896-2016]:FieldDeclaration[1896-2016]"
    }, {
      "left" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "right" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "info" : "FieldDeclaration[2021-2148]:FieldDeclaration[2021-2148]"
    }, {
      "left" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "right" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "info" : "FieldDeclaration[2153-2281]:FieldDeclaration[2153-2281]"
    }, {
      "left" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "right" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "info" : "FieldDeclaration[2286-2415]:FieldDeclaration[2286-2415]"
    }, {
      "left" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "right" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "info" : "FieldDeclaration[2420-2550]:FieldDeclaration[2420-2550]"
    }, {
      "left" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "right" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "info" : "FieldDeclaration[2555-2686]:FieldDeclaration[2555-2686]"
    }, {
      "left" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "right" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "info" : "FieldDeclaration[2691-2824]:FieldDeclaration[2691-2824]"
    }, {
      "left" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "right" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "info" : "FieldDeclaration[2829-2957]:FieldDeclaration[2829-2957]"
    }, {
      "left" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "right" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "info" : "FieldDeclaration[2962-3091]:FieldDeclaration[2962-3091]"
    }, {
      "left" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "right" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "info" : "FieldDeclaration[3096-3227]:FieldDeclaration[3096-3227]"
    }, {
      "left" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "right" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "info" : "FieldDeclaration[3232-3362]:FieldDeclaration[3232-3362]"
    }, {
      "left" : "private final int numerator;",
      "right" : "private final int numerator;",
      "info" : "FieldDeclaration[3369-3493]:FieldDeclaration[3369-3493]"
    }, {
      "left" : "private final int denominator;",
      "right" : "private final int denominator;",
      "info" : "FieldDeclaration[3498-3626]:FieldDeclaration[3498-3626]"
    }, {
      "left" : "private transient int hashCode = 0;",
      "right" : "private transient int hashCode = 0;",
      "info" : "FieldDeclaration[3632-3735]:FieldDeclaration[3632-3735]"
    }, {
      "left" : "private transient String toString = null;",
      "right" : "private transient String toString = null;",
      "info" : "FieldDeclaration[3740-3849]:FieldDeclaration[3740-3849]"
    }, {
      "left" : "private transient String toProperString = null;",
      "right" : "private transient String toProperString = null;",
      "info" : "FieldDeclaration[3854-3975]:FieldDeclaration[3854-3975]"
    }, {
      "left" : "private Fraction(int numerator, int denominator)",
      "right" : "private Fraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[3981-4422]:MethodDeclaration[3981-4422]"
    }, {
      "left" : "public static Fraction getFraction(int numerator, int denominator)",
      "right" : "public static Fraction getFraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[4428-5555]:MethodDeclaration[4428-5555]"
    }, {
      "left" : "public static Fraction getFraction(int whole, int numerator, int denominator)",
      "right" : "public static Fraction getFraction(int whole, int numerator, int denominator)",
      "info" : "MethodDeclaration[5561-7332]:MethodDeclaration[5561-7332]"
    }, {
      "left" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "right" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[7338-8958]:MethodDeclaration[7338-8958]"
    }, {
      "left" : "public static Fraction getFraction(double value)",
      "right" : "public static Fraction getFraction(double value)",
      "info" : "MethodDeclaration[8964-11688]:MethodDeclaration[8964-11688]"
    }, {
      "left" : "public static Fraction getFraction(String str)",
      "right" : "public static Fraction getFraction(String str)",
      "info" : "MethodDeclaration[11694-13609]:MethodDeclaration[11694-13609]"
    }, {
      "left" : "public int getNumerator()",
      "right" : "public int getNumerator()",
      "info" : "MethodDeclaration[13707-14024]:MethodDeclaration[13707-14024]"
    }, {
      "left" : "public int getDenominator()",
      "right" : "public int getDenominator()",
      "info" : "MethodDeclaration[14030-14218]:MethodDeclaration[14030-14218]"
    }, {
      "left" : "public int getProperNumerator()",
      "right" : "public int getProperNumerator()",
      "info" : "MethodDeclaration[14224-14781]:MethodDeclaration[14224-14781]"
    }, {
      "left" : "public int getProperWhole()",
      "right" : "public int getProperWhole()",
      "info" : "MethodDeclaration[14787-15327]:MethodDeclaration[14787-15327]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[15430-15697]:MethodDeclaration[15430-15697]"
    }, {
      "left" : "public long longValue()",
      "right" : "public long longValue()",
      "info" : "MethodDeclaration[15703-15979]:MethodDeclaration[15703-15979]"
    }, {
      "left" : "public float floatValue()",
      "right" : "public float floatValue()",
      "info" : "MethodDeclaration[15985-16301]:MethodDeclaration[15985-16301]"
    }, {
      "left" : "public double doubleValue()",
      "right" : "public double doubleValue()",
      "info" : "MethodDeclaration[16307-16629]:MethodDeclaration[16307-16629]"
    }, {
      "left" : "public Fraction reduce()",
      "right" : "public Fraction reduce()",
      "info" : "MethodDeclaration[16730-17390]:MethodDeclaration[16730-17390]"
    }, {
      "left" : "public Fraction invert()",
      "right" : "public Fraction invert()",
      "info" : "MethodDeclaration[17396-18166]:MethodDeclaration[17396-18166]"
    }, {
      "left" : "public Fraction negate()",
      "right" : "public Fraction negate()",
      "info" : "MethodDeclaration[18172-18700]:MethodDeclaration[18172-18700]"
    }, {
      "left" : "public Fraction abs()",
      "right" : "public Fraction abs()",
      "info" : "MethodDeclaration[18706-19191]:MethodDeclaration[18706-19191]"
    }, {
      "left" : "public Fraction pow(int power)",
      "right" : "public Fraction pow(int power)",
      "info" : "MethodDeclaration[19197-20375]:MethodDeclaration[19197-20375]"
    }, {
      "left" : "private static int mulAndCheck(int x, int y)",
      "right" : "private static int mulAndCheck(int x, int y)",
      "info" : "MethodDeclaration[22585-23131]:MethodDeclaration[22835-23381]"
    }, {
      "left" : "private static int mulPosAndCheck(int x, int y)",
      "right" : "private static int mulPosAndCheck(int x, int y)",
      "info" : "MethodDeclaration[23141-23702]:MethodDeclaration[23391-23952]"
    }, {
      "left" : "private static int addAndCheck(int x, int y)",
      "right" : "private static int addAndCheck(int x, int y)",
      "info" : "MethodDeclaration[23712-24219]:MethodDeclaration[23962-24469]"
    }, {
      "left" : "private static int subAndCheck(int x, int y)",
      "right" : "private static int subAndCheck(int x, int y)",
      "info" : "MethodDeclaration[24229-24755]:MethodDeclaration[24479-25005]"
    }, {
      "left" : "public Fraction add(Fraction fraction)",
      "right" : "public Fraction add(Fraction fraction)",
      "info" : "MethodDeclaration[24765-25372]:MethodDeclaration[25015-25622]"
    }, {
      "left" : "public Fraction subtract(Fraction fraction)",
      "right" : "public Fraction subtract(Fraction fraction)",
      "info" : "MethodDeclaration[25378-25998]:MethodDeclaration[25628-26248]"
    }, {
      "left" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "right" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "info" : "MethodDeclaration[26004-28581]:MethodDeclaration[26254-28831]"
    }, {
      "left" : "public Fraction multiplyBy(Fraction fraction)",
      "right" : "public Fraction multiplyBy(Fraction fraction)",
      "info" : "MethodDeclaration[28587-29757]:MethodDeclaration[28837-30007]"
    }, {
      "left" : "public Fraction divideBy(Fraction fraction)",
      "right" : "public Fraction divideBy(Fraction fraction)",
      "info" : "MethodDeclaration[29763-30632]:MethodDeclaration[30013-30882]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[30727-31403]:MethodDeclaration[30977-31653]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[31409-31760]:MethodDeclaration[31659-32010]"
    }, {
      "left" : "public int compareTo(Fraction other)",
      "right" : "public int compareTo(Fraction other)",
      "info" : "MethodDeclaration[31766-32864]:MethodDeclaration[32016-33114]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[32870-33372]:MethodDeclaration[33120-33622]"
    }, {
      "left" : "public String toProperString()",
      "right" : "public String toProperString()",
      "info" : "MethodDeclaration[33378-35157]:MethodDeclaration[33628-35407]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4273-4280]:Modifier[4273-4280]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[4281-4289]:SimpleName[4281-4289]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[4290-4303]:SingleVariableDeclaration[4290-4303]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[4305-4320]:SingleVariableDeclaration[4305-4320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4322-4422]:Block[4322-4422]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[4332-4340]:SuperConstructorInvocation[4332-4340]"
    }, {
      "left" : "this.numerator = numerator;",
      "right" : "this.numerator = numerator;",
      "info" : "ExpressionStatement[4349-4376]:ExpressionStatement[4349-4376]"
    }, {
      "left" : "this.denominator = denominator;",
      "right" : "this.denominator = denominator;",
      "info" : "ExpressionStatement[4385-4416]:ExpressionStatement[4385-4416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5001-5007]:Modifier[5001-5007]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5008-5014]:Modifier[5008-5014]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[5015-5023]:SimpleType[5015-5023]"
    }, {
      "left" : "getFraction",
      "right" : "getFraction",
      "info" : "SimpleName[5024-5035]:SimpleName[5024-5035]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[5036-5049]:SingleVariableDeclaration[5036-5049]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[5051-5066]:SingleVariableDeclaration[5051-5066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5068-5555]:Block[5068-5555]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[5078-5190]:IfStatement[5078-5190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5100-5190]:Block[5100-5190]"
    }, {
      "left" : "throw new ArithmeticException(\"The denominator must not be zero\");",
      "right" : "throw new ArithmeticException(\"The denominator must not be zero\");",
      "info" : "ThrowStatement[5114-5180]:ThrowStatement[5114-5180]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[5199-5496]:IfStatement[5199-5496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5220-5496]:Block[5220-5496]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "info" : "IfStatement[5234-5410]:IfStatement[5234-5410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5322-5410]:Block[5322-5410]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: can't negate\");",
      "right" : "throw new ArithmeticException(\"overflow: can't negate\");",
      "info" : "ThrowStatement[5340-5396]:ThrowStatement[5340-5396]"
    }, {
      "left" : "numerator = -numerator;",
      "right" : "numerator = -numerator;",
      "info" : "ExpressionStatement[5423-5446]:ExpressionStatement[5423-5446]"
    }, {
      "left" : "denominator = -denominator;",
      "right" : "denominator = -denominator;",
      "info" : "ExpressionStatement[5459-5486]:ExpressionStatement[5459-5486]"
    }, {
      "left" : "return new Fraction(numerator, denominator);",
      "right" : "return new Fraction(numerator, denominator);",
      "info" : "ReturnStatement[5505-5549]:ReturnStatement[5505-5549]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6392-6398]:Modifier[6392-6398]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6399-6405]:Modifier[6399-6405]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[6406-6414]:SimpleType[6406-6414]"
    }, {
      "left" : "getFraction",
      "right" : "getFraction",
      "info" : "SimpleName[6415-6426]:SimpleName[6415-6426]"
    }, {
      "left" : "int whole",
      "right" : "int whole",
      "info" : "SingleVariableDeclaration[6427-6436]:SingleVariableDeclaration[6427-6436]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[6438-6451]:SingleVariableDeclaration[6438-6451]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[6453-6468]:SingleVariableDeclaration[6453-6468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6470-7332]:Block[6470-7332]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[6480-6592]:IfStatement[6480-6592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6502-6592]:Block[6502-6592]"
    }, {
      "left" : "throw new ArithmeticException(\"The denominator must not be zero\");",
      "right" : "throw new ArithmeticException(\"The denominator must not be zero\");",
      "info" : "ThrowStatement[6516-6582]:ThrowStatement[6516-6582]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[6601-6716]:IfStatement[6601-6716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6622-6716]:Block[6622-6716]"
    }, {
      "left" : "throw new ArithmeticException(\"The denominator must not be negative\");",
      "right" : "throw new ArithmeticException(\"The denominator must not be negative\");",
      "info" : "ThrowStatement[6636-6706]:ThrowStatement[6636-6706]"
    }, {
      "left" : "if (numerator < 0)",
      "right" : "if (numerator < 0)",
      "info" : "IfStatement[6725-6836]:IfStatement[6725-6836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6744-6836]:Block[6744-6836]"
    }, {
      "left" : "throw new ArithmeticException(\"The numerator must not be negative\");",
      "right" : "throw new ArithmeticException(\"The numerator must not be negative\");",
      "info" : "ThrowStatement[6758-6826]:ThrowStatement[6758-6826]"
    }, {
      "left" : "long numeratorValue;",
      "right" : "long numeratorValue;",
      "info" : "VariableDeclarationStatement[6845-6865]:VariableDeclarationStatement[6845-6865]"
    }, {
      "left" : "if (whole < 0)",
      "right" : "if (whole < 0)",
      "info" : "IfStatement[6874-7053]:IfStatement[6874-7053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6889-6968]:Block[6889-6968]"
    }, {
      "left" : "numeratorValue = whole * (long)denominator - numerator;",
      "right" : "numeratorValue = whole * (long)denominator - numerator;",
      "info" : "ExpressionStatement[6903-6958]:ExpressionStatement[6903-6958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6974-7053]:Block[6974-7053]"
    }, {
      "left" : "numeratorValue = whole * (long)denominator + numerator;",
      "right" : "numeratorValue = whole * (long)denominator + numerator;",
      "info" : "ExpressionStatement[6988-7043]:ExpressionStatement[6988-7043]"
    }, {
      "left" : "if (numeratorValue < Integer.MIN_VALUE ||\n                numeratorValue > Integer.MAX_VALUE)",
      "right" : "if (numeratorValue < Integer.MIN_VALUE ||\n                numeratorValue > Integer.MAX_VALUE)",
      "info" : "IfStatement[7062-7262]:IfStatement[7062-7262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7157-7262]:Block[7157-7262]"
    }, {
      "left" : "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");",
      "right" : "throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");",
      "info" : "ThrowStatement[7171-7252]:ThrowStatement[7171-7252]"
    }, {
      "left" : "return new Fraction((int) numeratorValue, denominator);",
      "right" : "return new Fraction((int) numeratorValue, denominator);",
      "info" : "ReturnStatement[7271-7326]:ReturnStatement[7271-7326]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7989-7995]:Modifier[7989-7995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7996-8002]:Modifier[7996-8002]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[8003-8011]:SimpleType[8003-8011]"
    }, {
      "left" : "getReducedFraction",
      "right" : "getReducedFraction",
      "info" : "SimpleName[8012-8030]:SimpleName[8012-8030]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[8031-8044]:SingleVariableDeclaration[8031-8044]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[8046-8061]:SingleVariableDeclaration[8046-8061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8063-8958]:Block[8063-8958]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[8073-8185]:IfStatement[8073-8185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8095-8185]:Block[8095-8185]"
    }, {
      "left" : "throw new ArithmeticException(\"The denominator must not be zero\");",
      "right" : "throw new ArithmeticException(\"The denominator must not be zero\");",
      "info" : "ThrowStatement[8109-8175]:ThrowStatement[8109-8175]"
    }, {
      "left" : "if (numerator==0)",
      "right" : "if (numerator==0)",
      "info" : "IfStatement[8194-8267]:IfStatement[8194-8267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8212-8267]:Block[8212-8267]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[8226-8238]:ReturnStatement[8226-8238]"
    }, {
      "left" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "right" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "info" : "IfStatement[8335-8444]:IfStatement[8335-8444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8391-8444]:Block[8391-8444]"
    }, {
      "left" : "numerator/=2;",
      "right" : "numerator/=2;",
      "info" : "ExpressionStatement[8405-8418]:ExpressionStatement[8405-8418]"
    }, {
      "left" : "denominator/=2;",
      "right" : "denominator/=2;",
      "info" : "ExpressionStatement[8419-8434]:ExpressionStatement[8419-8434]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[8453-8750]:IfStatement[8453-8750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8474-8750]:Block[8474-8750]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "info" : "IfStatement[8488-8664]:IfStatement[8488-8664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8576-8664]:Block[8576-8664]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: can't negate\");",
      "right" : "throw new ArithmeticException(\"overflow: can't negate\");",
      "info" : "ThrowStatement[8594-8650]:ThrowStatement[8594-8650]"
    }, {
      "left" : "numerator = -numerator;",
      "right" : "numerator = -numerator;",
      "info" : "ExpressionStatement[8677-8700]:ExpressionStatement[8677-8700]"
    }, {
      "left" : "denominator = -denominator;",
      "right" : "denominator = -denominator;",
      "info" : "ExpressionStatement[8713-8740]:ExpressionStatement[8713-8740]"
    }, {
      "left" : "int gcd = greatestCommonDivisor(numerator, denominator);",
      "right" : "int gcd = greatestCommonDivisor(numerator, denominator);",
      "info" : "VariableDeclarationStatement[8789-8845]:VariableDeclarationStatement[8789-8845]"
    }, {
      "left" : "numerator /= gcd;",
      "right" : "numerator /= gcd;",
      "info" : "ExpressionStatement[8854-8871]:ExpressionStatement[8854-8871]"
    }, {
      "left" : "denominator /= gcd;",
      "right" : "denominator /= gcd;",
      "info" : "ExpressionStatement[8880-8899]:ExpressionStatement[8880-8899]"
    }, {
      "left" : "return new Fraction(numerator, denominator);",
      "right" : "return new Fraction(numerator, denominator);",
      "info" : "ReturnStatement[8908-8952]:ReturnStatement[8908-8952]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9701-9707]:Modifier[9701-9707]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9708-9714]:Modifier[9708-9714]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[9715-9723]:SimpleType[9715-9723]"
    }, {
      "left" : "getFraction",
      "right" : "getFraction",
      "info" : "SimpleName[9724-9735]:SimpleName[9724-9735]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[9736-9748]:SingleVariableDeclaration[9736-9748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9750-11688]:Block[9750-11688]"
    }, {
      "left" : "int sign = (value < 0 ? -1 : 1);",
      "right" : "int sign = (value < 0 ? -1 : 1);",
      "info" : "VariableDeclarationStatement[9760-9792]:VariableDeclarationStatement[9760-9792]"
    }, {
      "left" : "value = Math.abs(value);",
      "right" : "value = Math.abs(value);",
      "info" : "ExpressionStatement[9801-9825]:ExpressionStatement[9801-9825]"
    }, {
      "left" : "if (value  > Integer.MAX_VALUE || Double.isNaN(value))",
      "right" : "if (value  > Integer.MAX_VALUE || Double.isNaN(value))",
      "info" : "IfStatement[9834-10023]:IfStatement[9834-10023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9889-10023]:Block[9889-10023]"
    }, {
      "left" : "throw new ArithmeticException\n                (\"The value must not be greater than Integer.MAX_VALUE or NaN\");",
      "right" : "throw new ArithmeticException\n                (\"The value must not be greater than Integer.MAX_VALUE or NaN\");",
      "info" : "ThrowStatement[9903-10013]:ThrowStatement[9903-10013]"
    }, {
      "left" : "int wholeNumber = (int) value;",
      "right" : "int wholeNumber = (int) value;",
      "info" : "VariableDeclarationStatement[10032-10062]:VariableDeclarationStatement[10032-10062]"
    }, {
      "left" : "value -= wholeNumber;",
      "right" : "value -= wholeNumber;",
      "info" : "ExpressionStatement[10071-10092]:ExpressionStatement[10071-10092]"
    }, {
      "left" : "int numer0 = 0;",
      "right" : "int numer0 = 0;",
      "info" : "VariableDeclarationStatement[10110-10125]:VariableDeclarationStatement[10110-10125]"
    }, {
      "left" : "int denom0 = 1;",
      "right" : "int denom0 = 1;",
      "info" : "VariableDeclarationStatement[10155-10170]:VariableDeclarationStatement[10155-10170]"
    }, {
      "left" : "int numer1 = 1;",
      "right" : "int numer1 = 1;",
      "info" : "VariableDeclarationStatement[10200-10215]:VariableDeclarationStatement[10200-10215]"
    }, {
      "left" : "int denom1 = 0;",
      "right" : "int denom1 = 0;",
      "info" : "VariableDeclarationStatement[10241-10256]:VariableDeclarationStatement[10241-10256]"
    }, {
      "left" : "int numer2 = 0;",
      "right" : "int numer2 = 0;",
      "info" : "VariableDeclarationStatement[10282-10297]:VariableDeclarationStatement[10282-10297]"
    }, {
      "left" : "int denom2 = 0;",
      "right" : "int denom2 = 0;",
      "info" : "VariableDeclarationStatement[10344-10359]:VariableDeclarationStatement[10344-10359]"
    }, {
      "left" : "int a1 = (int) value;",
      "right" : "int a1 = (int) value;",
      "info" : "VariableDeclarationStatement[10406-10427]:VariableDeclarationStatement[10406-10427]"
    }, {
      "left" : "int a2 = 0;",
      "right" : "int a2 = 0;",
      "info" : "VariableDeclarationStatement[10436-10447]:VariableDeclarationStatement[10436-10447]"
    }, {
      "left" : "double x1 = 1;",
      "right" : "double x1 = 1;",
      "info" : "VariableDeclarationStatement[10456-10470]:VariableDeclarationStatement[10456-10470]"
    }, {
      "left" : "double x2 = 0;",
      "right" : "double x2 = 0;",
      "info" : "VariableDeclarationStatement[10479-10493]:VariableDeclarationStatement[10479-10493]"
    }, {
      "left" : "double y1 = value - a1;",
      "right" : "double y1 = value - a1;",
      "info" : "VariableDeclarationStatement[10502-10525]:VariableDeclarationStatement[10502-10525]"
    }, {
      "left" : "double y2 = 0;",
      "right" : "double y2 = 0;",
      "info" : "VariableDeclarationStatement[10534-10548]:VariableDeclarationStatement[10534-10548]"
    }, {
      "left" : "double delta1, delta2 = Double.MAX_VALUE;",
      "right" : "double delta1, delta2 = Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[10557-10598]:VariableDeclarationStatement[10557-10598]"
    }, {
      "left" : "double fraction;",
      "right" : "double fraction;",
      "info" : "VariableDeclarationStatement[10607-10623]:VariableDeclarationStatement[10607-10623]"
    }, {
      "left" : "int i = 1;",
      "right" : "int i = 1;",
      "info" : "VariableDeclarationStatement[10632-10642]:VariableDeclarationStatement[10632-10642]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[10688-11483]:DoStatement[10688-11483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10691-11407]:Block[10691-11407]"
    }, {
      "left" : "delta1 = delta2;",
      "right" : "delta1 = delta2;",
      "info" : "ExpressionStatement[10705-10721]:ExpressionStatement[10705-10721]"
    }, {
      "left" : "a2 = (int) (x1 / y1);",
      "right" : "a2 = (int) (x1 / y1);",
      "info" : "ExpressionStatement[10734-10755]:ExpressionStatement[10734-10755]"
    }, {
      "left" : "x2 = y1;",
      "right" : "x2 = y1;",
      "info" : "ExpressionStatement[10768-10776]:ExpressionStatement[10768-10776]"
    }, {
      "left" : "y2 = x1 - a2 * y1;",
      "right" : "y2 = x1 - a2 * y1;",
      "info" : "ExpressionStatement[10789-10807]:ExpressionStatement[10789-10807]"
    }, {
      "left" : "numer2 = a1 * numer1 + numer0;",
      "right" : "numer2 = a1 * numer1 + numer0;",
      "info" : "ExpressionStatement[10820-10850]:ExpressionStatement[10820-10850]"
    }, {
      "left" : "denom2 = a1 * denom1 + denom0;",
      "right" : "denom2 = a1 * denom1 + denom0;",
      "info" : "ExpressionStatement[10863-10893]:ExpressionStatement[10863-10893]"
    }, {
      "left" : "fraction = (double) numer2 / (double) denom2;",
      "right" : "fraction = (double) numer2 / (double) denom2;",
      "info" : "ExpressionStatement[10906-10951]:ExpressionStatement[10906-10951]"
    }, {
      "left" : "delta2 = Math.abs(value - fraction);",
      "right" : "delta2 = Math.abs(value - fraction);",
      "info" : "ExpressionStatement[10964-11000]:ExpressionStatement[10964-11000]"
    }, {
      "left" : "a1 = a2;",
      "right" : "a1 = a2;",
      "info" : "ExpressionStatement[11113-11121]:ExpressionStatement[11113-11121]"
    }, {
      "left" : "x1 = x2;",
      "right" : "x1 = x2;",
      "info" : "ExpressionStatement[11134-11142]:ExpressionStatement[11134-11142]"
    }, {
      "left" : "y1 = y2;",
      "right" : "y1 = y2;",
      "info" : "ExpressionStatement[11155-11163]:ExpressionStatement[11155-11163]"
    }, {
      "left" : "numer0 = numer1;",
      "right" : "numer0 = numer1;",
      "info" : "ExpressionStatement[11176-11192]:ExpressionStatement[11176-11192]"
    }, {
      "left" : "denom0 = denom1;",
      "right" : "denom0 = denom1;",
      "info" : "ExpressionStatement[11205-11221]:ExpressionStatement[11205-11221]"
    }, {
      "left" : "numer1 = numer2;",
      "right" : "numer1 = numer2;",
      "info" : "ExpressionStatement[11234-11250]:ExpressionStatement[11234-11250]"
    }, {
      "left" : "denom1 = denom2;",
      "right" : "denom1 = denom2;",
      "info" : "ExpressionStatement[11263-11279]:ExpressionStatement[11263-11279]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[11292-11296]:ExpressionStatement[11292-11296]"
    }, {
      "left" : "if (i == 25)",
      "right" : "if (i == 25)",
      "info" : "IfStatement[11492-11599]:IfStatement[11492-11599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11505-11599]:Block[11505-11599]"
    }, {
      "left" : "throw new ArithmeticException(\"Unable to convert double to fraction\");",
      "right" : "throw new ArithmeticException(\"Unable to convert double to fraction\");",
      "info" : "ThrowStatement[11519-11589]:ThrowStatement[11519-11589]"
    }, {
      "left" : "return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);",
      "right" : "return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);",
      "info" : "ReturnStatement[11608-11682]:ReturnStatement[11608-11682]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12298-12304]:Modifier[12298-12304]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12305-12311]:Modifier[12305-12311]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[12312-12320]:SimpleType[12312-12320]"
    }, {
      "left" : "getFraction",
      "right" : "getFraction",
      "info" : "SimpleName[12321-12332]:SimpleName[12321-12332]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[12333-12343]:SingleVariableDeclaration[12333-12343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12345-13609]:Block[12345-13609]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[12355-12462]:IfStatement[12355-12462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12372-12462]:Block[12372-12462]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The string must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The string must not be null\");",
      "info" : "ThrowStatement[12386-12452]:ThrowStatement[12386-12452]"
    }, {
      "left" : "int pos = str.indexOf('.');",
      "right" : "int pos = str.indexOf('.');",
      "info" : "VariableDeclarationStatement[12502-12529]:VariableDeclarationStatement[12502-12529]"
    }, {
      "left" : "if (pos >= 0)",
      "right" : "if (pos >= 0)",
      "info" : "IfStatement[12538-12620]:IfStatement[12538-12620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12552-12620]:Block[12552-12620]"
    }, {
      "left" : "return getFraction(Double.parseDouble(str));",
      "right" : "return getFraction(Double.parseDouble(str));",
      "info" : "ReturnStatement[12566-12610]:ReturnStatement[12566-12610]"
    }, {
      "left" : "pos = str.indexOf(' ');",
      "right" : "pos = str.indexOf(' ');",
      "info" : "ExpressionStatement[12660-12683]:ExpressionStatement[12660-12683]"
    }, {
      "left" : "if (pos > 0)",
      "right" : "if (pos > 0)",
      "info" : "IfStatement[12692-13222]:IfStatement[12692-13222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12705-13222]:Block[12705-13222]"
    }, {
      "left" : "int whole = Integer.parseInt(str.substring(0, pos));",
      "right" : "int whole = Integer.parseInt(str.substring(0, pos));",
      "info" : "VariableDeclarationStatement[12719-12771]:VariableDeclarationStatement[12719-12771]"
    }, {
      "left" : "str = str.substring(pos + 1);",
      "right" : "str = str.substring(pos + 1);",
      "info" : "ExpressionStatement[12784-12813]:ExpressionStatement[12784-12813]"
    }, {
      "left" : "pos = str.indexOf('/');",
      "right" : "pos = str.indexOf('/');",
      "info" : "ExpressionStatement[12826-12849]:ExpressionStatement[12826-12849]"
    }, {
      "left" : "if (pos < 0)",
      "right" : "if (pos < 0)",
      "info" : "IfStatement[12862-13212]:IfStatement[12862-13212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12875-12995]:Block[12875-12995]"
    }, {
      "left" : "throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");",
      "right" : "throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");",
      "info" : "ThrowStatement[12893-12981]:ThrowStatement[12893-12981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13001-13212]:Block[13001-13212]"
    }, {
      "left" : "int numer = Integer.parseInt(str.substring(0, pos));",
      "right" : "int numer = Integer.parseInt(str.substring(0, pos));",
      "info" : "VariableDeclarationStatement[13019-13071]:VariableDeclarationStatement[13019-13071]"
    }, {
      "left" : "int denom = Integer.parseInt(str.substring(pos + 1));",
      "right" : "int denom = Integer.parseInt(str.substring(pos + 1));",
      "info" : "VariableDeclarationStatement[13088-13141]:VariableDeclarationStatement[13088-13141]"
    }, {
      "left" : "return getFraction(whole, numer, denom);",
      "right" : "return getFraction(whole, numer, denom);",
      "info" : "ReturnStatement[13158-13198]:ReturnStatement[13158-13198]"
    }, {
      "left" : "pos = str.indexOf('/');",
      "right" : "pos = str.indexOf('/');",
      "info" : "ExpressionStatement[13260-13283]:ExpressionStatement[13260-13283]"
    }, {
      "left" : "if (pos < 0)",
      "right" : "if (pos < 0)",
      "info" : "IfStatement[13292-13603]:IfStatement[13292-13603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13305-13409]:Block[13305-13409]"
    }, {
      "left" : "return getFraction(Integer.parseInt(str), 1);",
      "right" : "return getFraction(Integer.parseInt(str), 1);",
      "info" : "ReturnStatement[13354-13399]:ReturnStatement[13354-13399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13415-13603]:Block[13415-13603]"
    }, {
      "left" : "int numer = Integer.parseInt(str.substring(0, pos));",
      "right" : "int numer = Integer.parseInt(str.substring(0, pos));",
      "info" : "VariableDeclarationStatement[13429-13481]:VariableDeclarationStatement[13429-13481]"
    }, {
      "left" : "int denom = Integer.parseInt(str.substring(pos + 1));",
      "right" : "int denom = Integer.parseInt(str.substring(pos + 1));",
      "info" : "VariableDeclarationStatement[13494-13547]:VariableDeclarationStatement[13494-13547]"
    }, {
      "left" : "return getFraction(numer, denom);",
      "right" : "return getFraction(numer, denom);",
      "info" : "ReturnStatement[13560-13593]:ReturnStatement[13560-13593]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13965-13971]:Modifier[13965-13971]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13972-13975]:PrimitiveType[13972-13975]"
    }, {
      "left" : "getNumerator",
      "right" : "getNumerator",
      "info" : "SimpleName[13976-13988]:SimpleName[13976-13988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13991-14024]:Block[13991-14024]"
    }, {
      "left" : "return numerator;",
      "right" : "return numerator;",
      "info" : "ReturnStatement[14001-14018]:ReturnStatement[14001-14018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14155-14161]:Modifier[14155-14161]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14162-14165]:PrimitiveType[14162-14165]"
    }, {
      "left" : "getDenominator",
      "right" : "getDenominator",
      "info" : "SimpleName[14166-14180]:SimpleName[14166-14180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14183-14218]:Block[14183-14218]"
    }, {
      "left" : "return denominator;",
      "right" : "return denominator;",
      "info" : "ReturnStatement[14193-14212]:ReturnStatement[14193-14212]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14692-14698]:Modifier[14692-14698]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14699-14702]:PrimitiveType[14699-14702]"
    }, {
      "left" : "getProperNumerator",
      "right" : "getProperNumerator",
      "info" : "SimpleName[14703-14721]:SimpleName[14703-14721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14724-14781]:Block[14724-14781]"
    }, {
      "left" : "return Math.abs(numerator % denominator);",
      "right" : "return Math.abs(numerator % denominator);",
      "info" : "ReturnStatement[14734-14775]:ReturnStatement[14734-14775]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15252-15258]:Modifier[15252-15258]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15259-15262]:PrimitiveType[15259-15262]"
    }, {
      "left" : "getProperWhole",
      "right" : "getProperWhole",
      "info" : "SimpleName[15263-15277]:SimpleName[15263-15277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15280-15327]:Block[15280-15327]"
    }, {
      "left" : "return numerator / denominator;",
      "right" : "return numerator / denominator;",
      "info" : "ReturnStatement[15290-15321]:ReturnStatement[15290-15321]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15614-15623]:MarkerAnnotation[15614-15623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15628-15634]:Modifier[15628-15634]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15635-15638]:PrimitiveType[15635-15638]"
    }, {
      "left" : "intValue",
      "right" : "intValue",
      "info" : "SimpleName[15639-15647]:SimpleName[15639-15647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15650-15697]:Block[15650-15697]"
    }, {
      "left" : "return numerator / denominator;",
      "right" : "return numerator / denominator;",
      "info" : "ReturnStatement[15660-15691]:ReturnStatement[15660-15691]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15887-15896]:MarkerAnnotation[15887-15896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15901-15907]:Modifier[15901-15907]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[15908-15912]:PrimitiveType[15908-15912]"
    }, {
      "left" : "longValue",
      "right" : "longValue",
      "info" : "SimpleName[15913-15922]:SimpleName[15913-15922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15925-15979]:Block[15925-15979]"
    }, {
      "left" : "return (long) numerator / denominator;",
      "right" : "return (long) numerator / denominator;",
      "info" : "ReturnStatement[15935-15973]:ReturnStatement[15935-15973]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16194-16203]:MarkerAnnotation[16194-16203]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16208-16214]:Modifier[16208-16214]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[16215-16220]:PrimitiveType[16215-16220]"
    }, {
      "left" : "floatValue",
      "right" : "floatValue",
      "info" : "SimpleName[16221-16231]:SimpleName[16221-16231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16234-16301]:Block[16234-16301]"
    }, {
      "left" : "return ((float) numerator) / ((float) denominator);",
      "right" : "return ((float) numerator) / ((float) denominator);",
      "info" : "ReturnStatement[16244-16295]:ReturnStatement[16244-16295]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16518-16527]:MarkerAnnotation[16518-16527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16532-16538]:Modifier[16532-16538]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[16539-16545]:PrimitiveType[16539-16545]"
    }, {
      "left" : "doubleValue",
      "right" : "doubleValue",
      "info" : "SimpleName[16546-16557]:SimpleName[16546-16557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16560-16629]:Block[16560-16629]"
    }, {
      "left" : "return ((double) numerator) / ((double) denominator);",
      "right" : "return ((double) numerator) / ((double) denominator);",
      "info" : "ReturnStatement[16570-16623]:ReturnStatement[16570-16623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17064-17070]:Modifier[17064-17070]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[17071-17079]:SimpleType[17071-17079]"
    }, {
      "left" : "reduce",
      "right" : "reduce",
      "info" : "SimpleName[17080-17086]:SimpleName[17080-17086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17089-17390]:Block[17089-17390]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[17099-17177]:IfStatement[17099-17177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17119-17177]:Block[17119-17177]"
    }, {
      "left" : "return equals(ZERO) ? this : ZERO;",
      "right" : "return equals(ZERO) ? this : ZERO;",
      "info" : "ReturnStatement[17133-17167]:ReturnStatement[17133-17167]"
    }, {
      "left" : "int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);",
      "right" : "int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);",
      "info" : "VariableDeclarationStatement[17186-17252]:VariableDeclarationStatement[17186-17252]"
    }, {
      "left" : "if (gcd == 1)",
      "right" : "if (gcd == 1)",
      "info" : "IfStatement[17261-17311]:IfStatement[17261-17311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17275-17311]:Block[17275-17311]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17289-17301]:ReturnStatement[17289-17301]"
    }, {
      "left" : "return Fraction.getFraction(numerator / gcd, denominator / gcd);",
      "right" : "return Fraction.getFraction(numerator / gcd, denominator / gcd);",
      "info" : "ReturnStatement[17320-17384]:ReturnStatement[17320-17384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17722-17728]:Modifier[17722-17728]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[17729-17737]:SimpleType[17729-17737]"
    }, {
      "left" : "invert",
      "right" : "invert",
      "info" : "SimpleName[17738-17744]:SimpleName[17738-17744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17747-18166]:Block[17747-18166]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[17757-17857]:IfStatement[17757-17857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17777-17857]:Block[17777-17857]"
    }, {
      "left" : "throw new ArithmeticException(\"Unable to invert zero.\");",
      "right" : "throw new ArithmeticException(\"Unable to invert zero.\");",
      "info" : "ThrowStatement[17791-17847]:ThrowStatement[17791-17847]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE)",
      "info" : "IfStatement[17866-17990]:IfStatement[17866-17990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17900-17990]:Block[17900-17990]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: can't negate numerator\");",
      "right" : "throw new ArithmeticException(\"overflow: can't negate numerator\");",
      "info" : "ThrowStatement[17914-17980]:ThrowStatement[17914-17980]"
    }, {
      "left" : "if (numerator<0)",
      "right" : "if (numerator<0)",
      "info" : "IfStatement[17999-18160]:IfStatement[17999-18160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18016-18086]:Block[18016-18086]"
    }, {
      "left" : "return new Fraction(-denominator, -numerator);",
      "right" : "return new Fraction(-denominator, -numerator);",
      "info" : "ReturnStatement[18030-18076]:ReturnStatement[18030-18076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18092-18160]:Block[18092-18160]"
    }, {
      "left" : "return new Fraction(denominator, numerator);",
      "right" : "return new Fraction(denominator, numerator);",
      "info" : "ReturnStatement[18106-18150]:ReturnStatement[18106-18150]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18404-18410]:Modifier[18404-18410]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[18411-18419]:SimpleType[18411-18419]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[18420-18426]:SimpleName[18420-18426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18429-18700]:Block[18429-18700]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE)",
      "info" : "IfStatement[18519-18640]:IfStatement[18519-18640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18553-18640]:Block[18553-18640]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: too large to negate\");",
      "right" : "throw new ArithmeticException(\"overflow: too large to negate\");",
      "info" : "ThrowStatement[18567-18630]:ThrowStatement[18567-18630]"
    }, {
      "left" : "return new Fraction(-numerator, denominator);",
      "right" : "return new Fraction(-numerator, denominator);",
      "info" : "ReturnStatement[18649-18694]:ReturnStatement[18649-18694]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19072-19078]:Modifier[19072-19078]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[19079-19087]:SimpleType[19079-19087]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[19088-19091]:SimpleName[19088-19091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19094-19191]:Block[19094-19191]"
    }, {
      "left" : "if (numerator >= 0)",
      "right" : "if (numerator >= 0)",
      "info" : "IfStatement[19104-19160]:IfStatement[19104-19160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19124-19160]:Block[19124-19160]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19138-19150]:ReturnStatement[19138-19150]"
    }, {
      "left" : "return negate();",
      "right" : "return negate();",
      "info" : "ReturnStatement[19169-19185]:ReturnStatement[19169-19185]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19733-19739]:Modifier[19733-19739]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[19740-19748]:SimpleType[19740-19748]"
    }, {
      "left" : "pow",
      "right" : "pow",
      "info" : "SimpleName[19749-19752]:SimpleName[19749-19752]"
    }, {
      "left" : "int power",
      "right" : "int power",
      "info" : "SingleVariableDeclaration[19753-19762]:SingleVariableDeclaration[19753-19762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19764-20375]:Block[19764-20375]"
    }, {
      "left" : "if (power == 1)",
      "right" : "if (power == 1)",
      "info" : "IfStatement[19774-20369]:IfStatement[19774-20369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19790-19826]:Block[19790-19826]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19804-19816]:ReturnStatement[19804-19816]"
    }, {
      "left" : "if (power == 0)",
      "right" : "if (power == 0)",
      "info" : "IfStatement[19832-20369]:IfStatement[19832-20369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19848-19883]:Block[19848-19883]"
    }, {
      "left" : "return ONE;",
      "right" : "return ONE;",
      "info" : "ReturnStatement[19862-19873]:ReturnStatement[19862-19873]"
    }, {
      "left" : "if (power < 0)",
      "right" : "if (power < 0)",
      "info" : "IfStatement[19889-20369]:IfStatement[19889-20369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19904-20111]:Block[19904-20111]"
    }, {
      "left" : "if (power==Integer.MIN_VALUE)",
      "right" : "if (power==Integer.MIN_VALUE)",
      "info" : "IfStatement[19918-20055]:IfStatement[19918-20055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19948-20055]:Block[19948-20055]"
    }, {
      "left" : "return this.invert().pow(2).pow(-(power/2));",
      "right" : "return this.invert().pow(2).pow(-(power/2));",
      "info" : "ReturnStatement[19997-20041]:ReturnStatement[19997-20041]"
    }, {
      "left" : "return this.invert().pow(-power);",
      "right" : "return this.invert().pow(-power);",
      "info" : "ReturnStatement[20068-20101]:ReturnStatement[20068-20101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20117-20369]:Block[20117-20369]"
    }, {
      "left" : "Fraction f = this.multiplyBy(this);",
      "right" : "Fraction f = this.multiplyBy(this);",
      "info" : "VariableDeclarationStatement[20131-20166]:VariableDeclarationStatement[20131-20166]"
    }, {
      "left" : "if ((power % 2) == 0)",
      "right" : "if ((power % 2) == 0)",
      "info" : "IfStatement[20179-20359]:IfStatement[20179-20359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20201-20269]:Block[20201-20269]"
    }, {
      "left" : "return f.pow(power/2);",
      "right" : "return f.pow(power/2);",
      "info" : "ReturnStatement[20233-20255]:ReturnStatement[20233-20255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20275-20359]:Block[20275-20359]"
    }, {
      "left" : "return f.pow(power/2).multiplyBy(this);",
      "right" : "return f.pow(power/2).multiplyBy(this);",
      "info" : "ReturnStatement[20306-20345]:ReturnStatement[20306-20345]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22874-22881]:Modifier[23124-23131]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22882-22888]:Modifier[23132-23138]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22889-22892]:PrimitiveType[23139-23142]"
    }, {
      "left" : "mulAndCheck",
      "right" : "mulAndCheck",
      "info" : "SimpleName[22893-22904]:SimpleName[23143-23154]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[22905-22910]:SingleVariableDeclaration[23155-23160]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[22912-22917]:SingleVariableDeclaration[23162-23167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22919-23131]:Block[23169-23381]"
    }, {
      "left" : "long m = ((long)x)*((long)y);",
      "right" : "long m = ((long)x)*((long)y);",
      "info" : "VariableDeclarationStatement[22929-22958]:VariableDeclarationStatement[23179-23208]"
    }, {
      "left" : "if (m < Integer.MIN_VALUE ||\n            m > Integer.MAX_VALUE)",
      "right" : "if (m < Integer.MIN_VALUE ||\n            m > Integer.MAX_VALUE)",
      "info" : "IfStatement[22967-23102]:IfStatement[23217-23352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23031-23102]:Block[23281-23352]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mul\");",
      "right" : "throw new ArithmeticException(\"overflow: mul\");",
      "info" : "ThrowStatement[23045-23092]:ThrowStatement[23295-23342]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[23111-23125]:ReturnStatement[23361-23375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23441-23448]:Modifier[23691-23698]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23449-23455]:Modifier[23699-23705]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23456-23459]:PrimitiveType[23706-23709]"
    }, {
      "left" : "mulPosAndCheck",
      "right" : "mulPosAndCheck",
      "info" : "SimpleName[23460-23474]:SimpleName[23710-23724]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[23475-23480]:SingleVariableDeclaration[23725-23730]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[23482-23487]:SingleVariableDeclaration[23732-23737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23489-23702]:Block[23739-23952]"
    }, {
      "left" : "long m = ((long)x)*((long)y);",
      "right" : "long m = ((long)x)*((long)y);",
      "info" : "VariableDeclarationStatement[23534-23563]:VariableDeclarationStatement[23784-23813]"
    }, {
      "left" : "if (m > Integer.MAX_VALUE)",
      "right" : "if (m > Integer.MAX_VALUE)",
      "info" : "IfStatement[23572-23673]:IfStatement[23822-23923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23599-23673]:Block[23849-23923]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mulPos\");",
      "right" : "throw new ArithmeticException(\"overflow: mulPos\");",
      "info" : "ThrowStatement[23613-23663]:ThrowStatement[23863-23913]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[23682-23696]:ReturnStatement[23932-23946]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23966-23973]:Modifier[24216-24223]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23974-23980]:Modifier[24224-24230]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23981-23984]:PrimitiveType[24231-24234]"
    }, {
      "left" : "addAndCheck",
      "right" : "addAndCheck",
      "info" : "SimpleName[23985-23996]:SimpleName[24235-24246]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[23997-24002]:SingleVariableDeclaration[24247-24252]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[24004-24009]:SingleVariableDeclaration[24254-24259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24011-24219]:Block[24261-24469]"
    }, {
      "left" : "long s = (long)x+(long)y;",
      "right" : "long s = (long)x+(long)y;",
      "info" : "VariableDeclarationStatement[24021-24046]:VariableDeclarationStatement[24271-24296]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
      "info" : "IfStatement[24055-24190]:IfStatement[24305-24440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24119-24190]:Block[24369-24440]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: add\");",
      "right" : "throw new ArithmeticException(\"overflow: add\");",
      "info" : "ThrowStatement[24133-24180]:ThrowStatement[24383-24430]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[24199-24213]:ReturnStatement[24449-24463]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24502-24509]:Modifier[24752-24759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24510-24516]:Modifier[24760-24766]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24517-24520]:PrimitiveType[24767-24770]"
    }, {
      "left" : "subAndCheck",
      "right" : "subAndCheck",
      "info" : "SimpleName[24521-24532]:SimpleName[24771-24782]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[24533-24538]:SingleVariableDeclaration[24783-24788]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[24540-24545]:SingleVariableDeclaration[24790-24795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24547-24755]:Block[24797-25005]"
    }, {
      "left" : "long s = (long)x-(long)y;",
      "right" : "long s = (long)x-(long)y;",
      "info" : "VariableDeclarationStatement[24557-24582]:VariableDeclarationStatement[24807-24832]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE ||\n            s > Integer.MAX_VALUE)",
      "info" : "IfStatement[24591-24726]:IfStatement[24841-24976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24655-24726]:Block[24905-24976]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: add\");",
      "right" : "throw new ArithmeticException(\"overflow: add\");",
      "info" : "ThrowStatement[24669-24716]:ThrowStatement[24919-24966]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[24735-24749]:ReturnStatement[24985-24999]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25277-25283]:Modifier[25527-25533]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[25284-25292]:SimpleType[25534-25542]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[25293-25296]:SimpleName[25543-25546]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[25297-25314]:SingleVariableDeclaration[25547-25564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25316-25372]:Block[25566-25622]"
    }, {
      "left" : "return addSub(fraction, true /* add */);",
      "right" : "return addSub(fraction, true /* add */);",
      "info" : "ReturnStatement[25326-25366]:ReturnStatement[25576-25616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25892-25898]:Modifier[26142-26148]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[25899-25907]:SimpleType[26149-26157]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[25908-25916]:SimpleName[26158-26166]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[25917-25934]:SingleVariableDeclaration[26167-26184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25936-25998]:Block[26186-26248]"
    }, {
      "left" : "return addSub(fraction, false /* subtract */);",
      "right" : "return addSub(fraction, false /* subtract */);",
      "info" : "ReturnStatement[25946-25992]:ReturnStatement[26196-26242]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26518-26525]:Modifier[26768-26775]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[26526-26534]:SimpleType[26776-26784]"
    }, {
      "left" : "addSub",
      "right" : "addSub",
      "info" : "SimpleName[26535-26541]:SimpleName[26785-26791]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[26542-26559]:SingleVariableDeclaration[26792-26809]"
    }, {
      "left" : "boolean isAdd",
      "right" : "boolean isAdd",
      "info" : "SingleVariableDeclaration[26561-26574]:SingleVariableDeclaration[26811-26824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26576-28581]:Block[26826-28831]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[26586-26700]:IfStatement[26836-26950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26608-26700]:Block[26858-26950]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "info" : "ThrowStatement[26622-26690]:ThrowStatement[26872-26940]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[26751-26839]:IfStatement[27001-27089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26771-26839]:Block[27021-27089]"
    }, {
      "left" : "return isAdd ? fraction : fraction.negate();",
      "right" : "return isAdd ? fraction : fraction.negate();",
      "info" : "ReturnStatement[26785-26829]:ReturnStatement[27035-27079]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[26848-26913]:IfStatement[27098-27163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26877-26913]:Block[27127-27163]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[26891-26903]:ReturnStatement[27141-27153]"
    }, {
      "left" : "int d1 = greatestCommonDivisor(denominator, fraction.denominator);",
      "right" : "int d1 = greatestCommonDivisor(denominator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[27027-27093]:VariableDeclarationStatement[27277-27343]"
    }, {
      "left" : "if (d1==1)",
      "right" : "if (d1==1)",
      "info" : "IfStatement[27102-27483]:IfStatement[27352-27733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27113-27483]:Block[27363-27733]"
    }, {
      "left" : "int uvp = mulAndCheck(numerator, fraction.denominator);",
      "right" : "int uvp = mulAndCheck(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[27177-27232]:VariableDeclarationStatement[27427-27482]"
    }, {
      "left" : "int upv = mulAndCheck(fraction.numerator, denominator);",
      "right" : "int upv = mulAndCheck(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[27245-27300]:VariableDeclarationStatement[27495-27550]"
    }, {
      "left" : "return new Fraction\n                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),\n                 mulPosAndCheck(denominator, fraction.denominator));",
      "right" : "return new Fraction\n                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),\n                 mulPosAndCheck(denominator, fraction.denominator));",
      "info" : "ReturnStatement[27313-27473]:ReturnStatement[27563-27723]"
    }, {
      "left" : "BigInteger uvp = BigInteger.valueOf(numerator)\n            .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "right" : "BigInteger uvp = BigInteger.valueOf(numerator)\n            .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "info" : "VariableDeclarationStatement[27661-27775]:VariableDeclarationStatement[27911-28025]"
    }, {
      "left" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n            .multiply(BigInteger.valueOf(denominator/d1));",
      "right" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n            .multiply(BigInteger.valueOf(denominator/d1));",
      "info" : "VariableDeclarationStatement[27784-27898]:VariableDeclarationStatement[28034-28148]"
    }, {
      "left" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "right" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "info" : "VariableDeclarationStatement[27907-27963]:VariableDeclarationStatement[28157-28213]"
    }, {
      "left" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "right" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "info" : "VariableDeclarationStatement[28073-28127]:VariableDeclarationStatement[28323-28377]"
    }, {
      "left" : "int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);",
      "right" : "int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);",
      "info" : "VariableDeclarationStatement[28136-28194]:VariableDeclarationStatement[28386-28444]"
    }, {
      "left" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "right" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "info" : "VariableDeclarationStatement[28249-28297]:VariableDeclarationStatement[28499-28547]"
    }, {
      "left" : "if (w.bitLength() > 31)",
      "right" : "if (w.bitLength() > 31)",
      "info" : "IfStatement[28306-28449]:IfStatement[28556-28699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28330-28449]:Block[28580-28699]"
    }, {
      "left" : "throw new ArithmeticException\n                (\"overflow: numerator too large after multiply\");",
      "right" : "throw new ArithmeticException\n                (\"overflow: numerator too large after multiply\");",
      "info" : "ThrowStatement[28344-28439]:ThrowStatement[28594-28689]"
    }, {
      "left" : "return new Fraction\n            (w.intValue(),\n             mulPosAndCheck(denominator/d1, fraction.denominator/d2));",
      "right" : "return new Fraction\n            (w.intValue(),\n             mulPosAndCheck(denominator/d1, fraction.denominator/d2));",
      "info" : "ReturnStatement[28458-28575]:ReturnStatement[28708-28825]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29078-29084]:Modifier[29328-29334]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[29085-29093]:SimpleType[29335-29343]"
    }, {
      "left" : "multiplyBy",
      "right" : "multiplyBy",
      "info" : "SimpleName[29094-29104]:SimpleName[29344-29354]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[29105-29122]:SingleVariableDeclaration[29355-29372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29124-29757]:Block[29374-30007]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[29134-29248]:IfStatement[29384-29498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29156-29248]:Block[29406-29498]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "info" : "ThrowStatement[29170-29238]:ThrowStatement[29420-29488]"
    }, {
      "left" : "if (numerator == 0 || fraction.numerator == 0)",
      "right" : "if (numerator == 0 || fraction.numerator == 0)",
      "info" : "IfStatement[29257-29340]:IfStatement[29507-29590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29304-29340]:Block[29554-29590]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[29318-29330]:ReturnStatement[29568-29580]"
    }, {
      "left" : "int d1 = greatestCommonDivisor(numerator, fraction.denominator);",
      "right" : "int d1 = greatestCommonDivisor(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[29446-29510]:VariableDeclarationStatement[29696-29760]"
    }, {
      "left" : "int d2 = greatestCommonDivisor(fraction.numerator, denominator);",
      "right" : "int d2 = greatestCommonDivisor(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[29519-29583]:VariableDeclarationStatement[29769-29833]"
    }, {
      "left" : "return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator/d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));",
      "right" : "return getReducedFraction\n            (mulAndCheck(numerator/d1, fraction.numerator/d2),\n             mulPosAndCheck(denominator/d2, fraction.denominator/d1));",
      "info" : "ReturnStatement[29592-29751]:ReturnStatement[29842-30001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30274-30280]:Modifier[30524-30530]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[30281-30289]:SimpleType[30531-30539]"
    }, {
      "left" : "divideBy",
      "right" : "divideBy",
      "info" : "SimpleName[30290-30298]:SimpleName[30540-30548]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[30299-30316]:SingleVariableDeclaration[30549-30566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30318-30632]:Block[30568-30882]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[30328-30442]:IfStatement[30578-30692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30350-30442]:Block[30600-30692]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "info" : "ThrowStatement[30364-30432]:ThrowStatement[30614-30682]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[30451-30580]:IfStatement[30701-30830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30480-30580]:Block[30730-30830]"
    }, {
      "left" : "throw new ArithmeticException(\"The fraction to divide by must not be zero\");",
      "right" : "throw new ArithmeticException(\"The fraction to divide by must not be zero\");",
      "info" : "ThrowStatement[30494-30570]:ThrowStatement[30744-30820]"
    }, {
      "left" : "return multiplyBy(fraction.invert());",
      "right" : "return multiplyBy(fraction.invert());",
      "info" : "ReturnStatement[30589-30626]:ReturnStatement[30839-30876]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31042-31051]:MarkerAnnotation[31292-31301]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31056-31062]:Modifier[31306-31312]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31063-31070]:PrimitiveType[31313-31320]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[31071-31077]:SimpleName[31321-31327]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[31078-31088]:SingleVariableDeclaration[31328-31338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31090-31403]:Block[31340-31653]"
    }, {
      "left" : "if (obj == this)",
      "right" : "if (obj == this)",
      "info" : "IfStatement[31100-31153]:IfStatement[31350-31403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31117-31153]:Block[31367-31403]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31131-31143]:ReturnStatement[31381-31393]"
    }, {
      "left" : "if (obj instanceof Fraction == false)",
      "right" : "if (obj instanceof Fraction == false)",
      "info" : "IfStatement[31162-31237]:IfStatement[31412-31487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31200-31237]:Block[31450-31487]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31214-31227]:ReturnStatement[31464-31477]"
    }, {
      "left" : "Fraction other = (Fraction) obj;",
      "right" : "Fraction other = (Fraction) obj;",
      "info" : "VariableDeclarationStatement[31246-31278]:VariableDeclarationStatement[31496-31528]"
    }, {
      "left" : "return (getNumerator() == other.getNumerator() &&\n                getDenominator() == other.getDenominator());",
      "right" : "return (getNumerator() == other.getNumerator() &&\n                getDenominator() == other.getDenominator());",
      "info" : "ReturnStatement[31287-31397]:ReturnStatement[31537-31647]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31529-31538]:MarkerAnnotation[31779-31788]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31543-31549]:Modifier[31793-31799]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[31550-31553]:PrimitiveType[31800-31803]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[31554-31562]:SimpleName[31804-31812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31565-31760]:Block[31815-32010]"
    }, {
      "left" : "if (hashCode == 0)",
      "right" : "if (hashCode == 0)",
      "info" : "IfStatement[31575-31729]:IfStatement[31825-31979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31594-31729]:Block[31844-31979]"
    }, {
      "left" : "hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();",
      "right" : "hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();",
      "info" : "ExpressionStatement[31657-31719]:ExpressionStatement[31907-31969]"
    }, {
      "left" : "return hashCode;",
      "right" : "return hashCode;",
      "info" : "ReturnStatement[31738-31754]:ReturnStatement[31988-32004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32314-32320]:Modifier[32564-32570]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32321-32324]:PrimitiveType[32571-32574]"
    }, {
      "left" : "compareTo",
      "right" : "compareTo",
      "info" : "SimpleName[32325-32334]:SimpleName[32575-32584]"
    }, {
      "left" : "Fraction other",
      "right" : "Fraction other",
      "info" : "SingleVariableDeclaration[32335-32349]:SingleVariableDeclaration[32585-32599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32351-32864]:Block[32601-33114]"
    }, {
      "left" : "if (this==other)",
      "right" : "if (this==other)",
      "info" : "IfStatement[32361-32411]:IfStatement[32611-32661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32378-32411]:Block[32628-32661]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[32392-32401]:ReturnStatement[32642-32651]"
    }, {
      "left" : "if (numerator == other.numerator && denominator == other.denominator)",
      "right" : "if (numerator == other.numerator && denominator == other.denominator)",
      "info" : "IfStatement[32420-32523]:IfStatement[32670-32773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32490-32523]:Block[32740-32773]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[32504-32513]:ReturnStatement[32754-32763]"
    }, {
      "left" : "long first = (long) numerator * (long) other.denominator;",
      "right" : "long first = (long) numerator * (long) other.denominator;",
      "info" : "VariableDeclarationStatement[32572-32629]:VariableDeclarationStatement[32822-32879]"
    }, {
      "left" : "long second = (long) other.numerator * (long) denominator;",
      "right" : "long second = (long) other.numerator * (long) denominator;",
      "info" : "VariableDeclarationStatement[32638-32696]:VariableDeclarationStatement[32888-32946]"
    }, {
      "left" : "if (first == second)",
      "right" : "if (first == second)",
      "info" : "IfStatement[32705-32858]:IfStatement[32955-33108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32726-32759]:Block[32976-33009]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[32740-32749]:ReturnStatement[32990-32999]"
    }, {
      "left" : "if (first < second)",
      "right" : "if (first < second)",
      "info" : "IfStatement[32765-32858]:IfStatement[33015-33108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32785-32819]:Block[33035-33069]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[32799-32809]:ReturnStatement[33049-33059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32825-32858]:Block[33075-33108]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[32839-32848]:ReturnStatement[33089-33098]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33091-33100]:MarkerAnnotation[33341-33350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33105-33111]:Modifier[33355-33361]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33112-33118]:SimpleType[33362-33368]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[33119-33127]:SimpleName[33369-33377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33130-33372]:Block[33380-33622]"
    }, {
      "left" : "if (toString == null)",
      "right" : "if (toString == null)",
      "info" : "IfStatement[33140-33341]:IfStatement[33390-33591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33162-33341]:Block[33412-33591]"
    }, {
      "left" : "toString = new StringBuilder(32)\n                .append(getNumerator())\n                .append('/')\n                .append(getDenominator()).toString();",
      "right" : "toString = new StringBuilder(32)\n                .append(getNumerator())\n                .append('/')\n                .append(getDenominator()).toString();",
      "info" : "ExpressionStatement[33176-33331]:ExpressionStatement[33426-33581]"
    }, {
      "left" : "return toString;",
      "right" : "return toString;",
      "info" : "ReturnStatement[33350-33366]:ReturnStatement[33600-33616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33766-33772]:Modifier[34016-34022]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33773-33779]:SimpleType[34023-34029]"
    }, {
      "left" : "toProperString",
      "right" : "toProperString",
      "info" : "SimpleName[33780-33794]:SimpleName[34030-34044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33797-35157]:Block[34047-35407]"
    }, {
      "left" : "if (toProperString == null)",
      "right" : "if (toProperString == null)",
      "info" : "IfStatement[33807-35120]:IfStatement[34057-35370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33835-35120]:Block[34085-35370]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[33849-35110]:IfStatement[34099-35360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33869-33922]:Block[34119-34172]"
    }, {
      "left" : "toProperString = \"0\";",
      "right" : "toProperString = \"0\";",
      "info" : "ExpressionStatement[33887-33908]:ExpressionStatement[34137-34158]"
    }, {
      "left" : "if (numerator == denominator)",
      "right" : "if (numerator == denominator)",
      "info" : "IfStatement[33928-35110]:IfStatement[34178-35360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33958-34011]:Block[34208-34261]"
    }, {
      "left" : "toProperString = \"1\";",
      "right" : "toProperString = \"1\";",
      "info" : "ExpressionStatement[33976-33997]:ExpressionStatement[34226-34247]"
    }, {
      "left" : "if (numerator == -1 * denominator)",
      "right" : "if (numerator == -1 * denominator)",
      "info" : "IfStatement[34017-35110]:IfStatement[34267-35360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34052-34106]:Block[34302-34356]"
    }, {
      "left" : "toProperString = \"-1\";",
      "right" : "toProperString = \"-1\";",
      "info" : "ExpressionStatement[34070-34092]:ExpressionStatement[34320-34342]"
    }, {
      "left" : "if ((numerator>0?-numerator:numerator) < -denominator)",
      "right" : "if ((numerator>0?-numerator:numerator) < -denominator)",
      "info" : "IfStatement[34112-35110]:IfStatement[34362-35360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34167-34920]:Block[34417-35170]"
    }, {
      "left" : "int properNumerator = getProperNumerator();",
      "right" : "int properNumerator = getProperNumerator();",
      "info" : "VariableDeclarationStatement[34459-34502]:VariableDeclarationStatement[34709-34752]"
    }, {
      "left" : "if (properNumerator == 0)",
      "right" : "if (properNumerator == 0)",
      "info" : "IfStatement[34519-34906]:IfStatement[34769-35156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34545-34637]:Block[34795-34887]"
    }, {
      "left" : "toProperString = Integer.toString(getProperWhole());",
      "right" : "toProperString = Integer.toString(getProperWhole());",
      "info" : "ExpressionStatement[34567-34619]:ExpressionStatement[34817-34869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34643-34906]:Block[34893-35156]"
    }, {
      "left" : "toProperString = new StringBuilder(32)\n                        .append(getProperWhole()).append(' ')\n                        .append(properNumerator).append('/')\n                        .append(getDenominator()).toString();",
      "right" : "toProperString = new StringBuilder(32)\n                        .append(getProperWhole()).append(' ')\n                        .append(properNumerator).append('/')\n                        .append(getDenominator()).toString();",
      "info" : "ExpressionStatement[34665-34888]:ExpressionStatement[34915-35138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34926-35110]:Block[35176-35360]"
    }, {
      "left" : "toProperString = new StringBuilder(32)\n                    .append(getNumerator()).append('/')\n                    .append(getDenominator()).toString();",
      "right" : "toProperString = new StringBuilder(32)\n                    .append(getNumerator()).append('/')\n                    .append(getDenominator()).toString();",
      "info" : "ExpressionStatement[34944-35096]:ExpressionStatement[35194-35346]"
    }, {
      "left" : "return toProperString;",
      "right" : "return toProperString;",
      "info" : "ReturnStatement[35129-35151]:ReturnStatement[35379-35401]"
    } ]
  },
  "interFileMappings" : { }
}