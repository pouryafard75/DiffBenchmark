{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RecordType",
      "right" : "RecordType",
      "info" : "TypeDeclaration[1908-10083]:TypeDeclaration[1908-10524]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2552-2600]:FieldDeclaration[2552-2600]"
    }, {
      "left" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "right" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "info" : "FieldDeclaration[2604-2675]:FieldDeclaration[2604-2675]"
    }, {
      "left" : "private boolean isFrozen = false;",
      "right" : "private boolean isFrozen = false;",
      "info" : "FieldDeclaration[2678-2711]:FieldDeclaration[2712-2745]"
    }, {
      "left" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties)",
      "right" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties)",
      "info" : "MethodDeclaration[2716-3802]:MethodDeclaration[2749-2868]"
    }, {
      "left" : "public boolean isEquivalentTo(JSType other)",
      "right" : "public boolean isEquivalentTo(JSType other)",
      "info" : "MethodDeclaration[3806-4466]:MethodDeclaration[4275-4871]"
    }, {
      "left" : "public ObjectType getImplicitPrototype()",
      "right" : "public ObjectType getImplicitPrototype()",
      "info" : "MethodDeclaration[4470-4595]:MethodDeclaration[4875-5000]"
    }, {
      "left" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "right" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "info" : "MethodDeclaration[4599-4918]:MethodDeclaration[5004-5323]"
    }, {
      "left" : "JSType getGreatestSubtypeHelper(JSType that)",
      "right" : "JSType getGreatestSubtypeHelper(JSType that)",
      "info" : "MethodDeclaration[4922-7447]:MethodDeclaration[5327-7888]"
    }, {
      "left" : "RecordType toMaybeRecordType()",
      "right" : "RecordType toMaybeRecordType()",
      "info" : "MethodDeclaration[7451-7516]:MethodDeclaration[7892-7957]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[7520-8132]:MethodDeclaration[7961-8573]"
    }, {
      "left" : "static boolean isSubtype(ObjectType typeA, RecordType typeB)",
      "right" : "static boolean isSubtype(ObjectType typeA, RecordType typeB)",
      "info" : "MethodDeclaration[8136-9689]:MethodDeclaration[8577-10130]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[9693-10081]:MethodDeclaration[10134-10522]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3326-3802]:Block[2825-2868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3926-4466]:Block[4331-4871]"
    }, {
      "left" : "if (!other.isRecordType())",
      "right" : "if (!other.isRecordType())",
      "info" : "IfStatement[3932-3986]:IfStatement[4337-4391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3959-3986]:Block[4364-4391]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3967-3980]:ReturnStatement[4372-4385]"
    }, {
      "left" : "RecordType otherRecord = other.toMaybeRecordType();",
      "right" : "RecordType otherRecord = other.toMaybeRecordType();",
      "info" : "VariableDeclarationStatement[4019-4070]:VariableDeclarationStatement[4424-4475]"
    }, {
      "left" : "if (otherRecord == this)",
      "right" : "if (otherRecord == this)",
      "info" : "IfStatement[4075-4126]:IfStatement[4480-4531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4100-4126]:Block[4505-4531]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4108-4120]:ReturnStatement[4513-4525]"
    }, {
      "left" : "Set<String> keySet = properties.keySet();",
      "right" : "Set<String> keySet = properties.keySet();",
      "info" : "VariableDeclarationStatement[4132-4173]:VariableDeclarationStatement[4537-4578]"
    }, {
      "left" : "Map<String, JSType> otherProps = otherRecord.properties;",
      "right" : "Map<String, JSType> otherProps = otherRecord.properties;",
      "info" : "VariableDeclarationStatement[4178-4234]:VariableDeclarationStatement[4583-4639]"
    }, {
      "left" : "if (!otherProps.keySet().equals(keySet))",
      "right" : "if (!otherProps.keySet().equals(keySet))",
      "info" : "IfStatement[4239-4307]:IfStatement[4644-4712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4280-4307]:Block[4685-4712]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4288-4301]:ReturnStatement[4693-4706]"
    }, {
      "left" : "for (String key : keySet)",
      "right" : "for (String key : keySet)",
      "info" : "EnhancedForStatement[4312-4445]:EnhancedForStatement[4717-4850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4338-4445]:Block[4743-4850]"
    }, {
      "left" : "if (!otherProps.get(key).isEquivalentTo(properties.get(key)))",
      "right" : "if (!otherProps.get(key).isEquivalentTo(properties.get(key)))",
      "info" : "IfStatement[4346-4439]:IfStatement[4751-4844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4408-4439]:Block[4813-4844]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4418-4431]:ReturnStatement[4823-4836]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4450-4462]:ReturnStatement[4855-4867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4523-4595]:Block[4928-5000]"
    }, {
      "left" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "right" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "info" : "ReturnStatement[4529-4591]:ReturnStatement[4934-4996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4711-4918]:Block[5116-5323]"
    }, {
      "left" : "if (isFrozen)",
      "right" : "if (isFrozen)",
      "info" : "IfStatement[4717-4758]:IfStatement[5122-5163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4731-4758]:Block[5136-5163]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4739-4752]:ReturnStatement[5144-5157]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[4764-4828]:IfStatement[5169-5233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4779-4828]:Block[5184-5233]"
    }, {
      "left" : "properties.put(propertyName, type);",
      "right" : "properties.put(propertyName, type);",
      "info" : "ExpressionStatement[4787-4822]:ExpressionStatement[5192-5227]"
    }, {
      "left" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "right" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "info" : "ReturnStatement[4834-4914]:ReturnStatement[5239-5319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4967-7447]:Block[5372-7888]"
    }, {
      "left" : "if (that.isRecordType())",
      "right" : "if (that.isRecordType())",
      "info" : "IfStatement[4973-5986]:IfStatement[5378-6427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4998-5986]:Block[5403-6427]"
    }, {
      "left" : "RecordType thatRecord = that.toMaybeRecordType();",
      "right" : "RecordType thatRecord = that.toMaybeRecordType();",
      "info" : "VariableDeclarationStatement[5006-5055]:VariableDeclarationStatement[5411-5460]"
    }, {
      "left" : "RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
      "right" : "RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
      "info" : "VariableDeclarationStatement[5062-5122]:VariableDeclarationStatement[5467-5527]"
    }, {
      "left" : "for (String property : properties.keySet())",
      "right" : "for (String property : properties.keySet())",
      "info" : "EnhancedForStatement[5300-5698]:EnhancedForStatement[5741-6139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5344-5698]:Block[5785-6139]"
    }, {
      "left" : "if (thatRecord.hasProperty(property) &&\n            !thatRecord.getPropertyType(property).isEquivalentTo(\n                getPropertyType(property)))",
      "right" : "if (thatRecord.hasProperty(property) &&\n            !thatRecord.getPropertyType(property).isEquivalentTo(\n                getPropertyType(property)))",
      "info" : "IfStatement[5354-5584]:IfStatement[5795-6025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5504-5584]:Block[5945-6025]"
    }, {
      "left" : "return registry.getNativeObjectType(JSTypeNative.NO_TYPE);",
      "right" : "return registry.getNativeObjectType(JSTypeNative.NO_TYPE);",
      "info" : "ReturnStatement[5516-5574]:ReturnStatement[5957-6015]"
    }, {
      "left" : "builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));",
      "right" : "builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));",
      "info" : "ExpressionStatement[5594-5690]:ExpressionStatement[6035-6131]"
    }, {
      "left" : "for (String property : thatRecord.properties.keySet())",
      "right" : "for (String property : thatRecord.properties.keySet())",
      "info" : "EnhancedForStatement[5706-5949]:EnhancedForStatement[6147-6390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5761-5949]:Block[6202-6390]"
    }, {
      "left" : "if (!hasProperty(property))",
      "right" : "if (!hasProperty(property))",
      "info" : "IfStatement[5771-5941]:IfStatement[6212-6382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5799-5941]:Block[6240-6382]"
    }, {
      "left" : "builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));",
      "right" : "builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));",
      "info" : "ExpressionStatement[5811-5931]:ExpressionStatement[6252-6372]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[5957-5980]:ReturnStatement[6398-6421]"
    }, {
      "left" : "JSType greatestSubtype = registry.getNativeType(\n        JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "JSType greatestSubtype = registry.getNativeType(\n        JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "VariableDeclarationStatement[5992-6078]:VariableDeclarationStatement[6433-6519]"
    }, {
      "left" : "JSType thatRestrictedToObj =\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE)\n        .getGreatestSubtype(that);",
      "right" : "JSType thatRestrictedToObj =\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE)\n        .getGreatestSubtype(that);",
      "info" : "VariableDeclarationStatement[6083-6203]:VariableDeclarationStatement[6524-6644]"
    }, {
      "left" : "if (!thatRestrictedToObj.isEmptyType())",
      "right" : "if (!thatRestrictedToObj.isEmptyType())",
      "info" : "IfStatement[6208-7415]:IfStatement[6649-7856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6248-7415]:Block[6689-7856]"
    }, {
      "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[6646-7409]:EnhancedForStatement[7087-7850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6708-7409]:Block[7149-7850]"
    }, {
      "left" : "String propName = entry.getKey();",
      "right" : "String propName = entry.getKey();",
      "info" : "VariableDeclarationStatement[6718-6751]:VariableDeclarationStatement[7159-7192]"
    }, {
      "left" : "JSType propType = entry.getValue();",
      "right" : "JSType propType = entry.getValue();",
      "info" : "VariableDeclarationStatement[6760-6795]:VariableDeclarationStatement[7201-7236]"
    }, {
      "left" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
      "right" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
      "info" : "VariableDeclarationStatement[6804-6862]:VariableDeclarationStatement[7245-7303]"
    }, {
      "left" : "for (ObjectType alt :\n                 registry.getEachReferenceTypeWithProperty(propName))",
      "right" : "for (ObjectType alt :\n                 registry.getEachReferenceTypeWithProperty(propName))",
      "info" : "EnhancedForStatement[6871-7323]:EnhancedForStatement[7312-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6963-7323]:Block[7404-7764]"
    }, {
      "left" : "JSType altPropType = alt.getPropertyType(propName);",
      "right" : "JSType altPropType = alt.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[6975-7026]:VariableDeclarationStatement[7416-7467]"
    }, {
      "left" : "if (altPropType != null && !alt.isEquivalentTo(this) &&\n              alt.isSubtype(that) &&\n              (propType.isUnknownType() || altPropType.isUnknownType() ||\n                  altPropType.isEquivalentTo(propType)))",
      "right" : "if (altPropType != null && !alt.isEquivalentTo(this) &&\n              alt.isSubtype(that) &&\n              (propType.isUnknownType() || altPropType.isUnknownType() ||\n                  altPropType.isEquivalentTo(propType)))",
      "info" : "IfStatement[7037-7313]:IfStatement[7478-7754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7261-7313]:Block[7702-7754]"
    }, {
      "left" : "builder.addAlternate(alt);",
      "right" : "builder.addAlternate(alt);",
      "info" : "ExpressionStatement[7275-7301]:ExpressionStatement[7716-7742]"
    }, {
      "left" : "greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());",
      "right" : "greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());",
      "info" : "ExpressionStatement[7332-7401]:ExpressionStatement[7773-7842]"
    }, {
      "left" : "return greatestSubtype;",
      "right" : "return greatestSubtype;",
      "info" : "ReturnStatement[7420-7443]:ReturnStatement[7861-7884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7494-7516]:Block[7935-7957]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7500-7512]:ReturnStatement[7941-7953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7570-8132]:Block[8011-8573]"
    }, {
      "left" : "if (JSType.isSubtypeHelper(this, that))",
      "right" : "if (JSType.isSubtypeHelper(this, that))",
      "info" : "IfStatement[7576-7642]:IfStatement[8017-8083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7616-7642]:Block[8057-8083]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7624-7636]:ReturnStatement[8065-8077]"
    }, {
      "left" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "right" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "info" : "IfStatement[7716-7831]:IfStatement[8157-8272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7805-7831]:Block[8246-8272]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7813-7825]:ReturnStatement[8254-8266]"
    }, {
      "left" : "if (!that.isRecordType())",
      "right" : "if (!that.isRecordType())",
      "info" : "IfStatement[8009-8062]:IfStatement[8450-8503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8035-8062]:Block[8476-8503]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8043-8056]:ReturnStatement[8484-8497]"
    }, {
      "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "info" : "ReturnStatement[8068-8128]:ReturnStatement[8509-8569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8248-9689]:Block[8689-10130]"
    }, {
      "left" : "for (String property : typeB.properties.keySet())",
      "right" : "for (String property : typeB.properties.keySet())",
      "info" : "EnhancedForStatement[9115-9667]:EnhancedForStatement[9556-10108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9165-9667]:Block[9606-10108]"
    }, {
      "left" : "if (!typeA.hasProperty(property))",
      "right" : "if (!typeA.hasProperty(property))",
      "info" : "IfStatement[9173-9238]:IfStatement[9614-9679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9207-9238]:Block[9648-9679]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9217-9230]:ReturnStatement[9658-9671]"
    }, {
      "left" : "JSType propA = typeA.getPropertyType(property);",
      "right" : "JSType propA = typeA.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[9246-9293]:VariableDeclarationStatement[9687-9734]"
    }, {
      "left" : "JSType propB = typeB.getPropertyType(property);",
      "right" : "JSType propB = typeB.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[9300-9347]:VariableDeclarationStatement[9741-9788]"
    }, {
      "left" : "if (!propA.isUnknownType() && !propB.isUnknownType())",
      "right" : "if (!propA.isUnknownType() && !propB.isUnknownType())",
      "info" : "IfStatement[9354-9661]:IfStatement[9795-10102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9408-9661]:Block[9849-10102]"
    }, {
      "left" : "if (typeA.isPropertyTypeDeclared(property))",
      "right" : "if (typeA.isPropertyTypeDeclared(property))",
      "info" : "IfStatement[9418-9653]:IfStatement[9859-10094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9462-9557]:Block[9903-9998]"
    }, {
      "left" : "if (!propA.isEquivalentTo(propB))",
      "right" : "if (!propA.isEquivalentTo(propB))",
      "info" : "IfStatement[9474-9547]:IfStatement[9915-9988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9508-9547]:Block[9949-9988]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9522-9535]:ReturnStatement[9963-9976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9563-9653]:Block[10004-10094]"
    }, {
      "left" : "if (!propA.isSubtype(propB))",
      "right" : "if (!propA.isSubtype(propB))",
      "info" : "IfStatement[9575-9643]:IfStatement[10016-10084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9604-9643]:Block[10045-10084]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9618-9631]:ReturnStatement[10059-10072]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9673-9685]:ReturnStatement[10114-10126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9772-10081]:Block[10213-10522]"
    }, {
      "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[9778-10033]:EnhancedForStatement[10219-10474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9840-10033]:Block[10281-10474]"
    }, {
      "left" : "JSType type = entry.getValue();",
      "right" : "JSType type = entry.getValue();",
      "info" : "VariableDeclarationStatement[9848-9879]:VariableDeclarationStatement[10289-10320]"
    }, {
      "left" : "JSType resolvedType = type.resolve(t, scope);",
      "right" : "JSType resolvedType = type.resolve(t, scope);",
      "info" : "VariableDeclarationStatement[9886-9931]:VariableDeclarationStatement[10327-10372]"
    }, {
      "left" : "if (type != resolvedType)",
      "right" : "if (type != resolvedType)",
      "info" : "IfStatement[9938-10027]:IfStatement[10379-10468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9964-10027]:Block[10405-10468]"
    }, {
      "left" : "properties.put(entry.getKey(), resolvedType);",
      "right" : "properties.put(entry.getKey(), resolvedType);",
      "info" : "ExpressionStatement[9974-10019]:ExpressionStatement[10415-10460]"
    }, {
      "left" : "return super.resolveInternal(t, scope);",
      "right" : "return super.resolveInternal(t, scope);",
      "info" : "ReturnStatement[10038-10077]:ReturnStatement[10479-10518]"
    } ]
  },
  "interFileMappings" : { }
}