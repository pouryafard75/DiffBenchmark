{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SpecificationBuilderITest",
      "right" : "SpecificationBuilderITest",
      "info" : "TypeDeclaration[1754-18521]:TypeDeclaration[1682-17795]"
    }, {
      "left" : "public void expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOne() throws Exception",
      "right" : "public void expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOne() throws Exception",
      "info" : "MethodDeclaration[1818-2355]:MethodDeclaration[1746-2283]"
    }, {
      "left" : "public void supportsSpecifyingDefaultResponseSpec() throws Exception",
      "right" : "public void supportsSpecifyingDefaultResponseSpec() throws Exception",
      "info" : "MethodDeclaration[2361-2819]:MethodDeclaration[2289-2747]"
    }, {
      "left" : "public void expectingSpecMergesTheCurrentSpecificationWithTheSuppliedOne() throws Exception",
      "right" : "public void expectingSpecMergesTheCurrentSpecificationWithTheSuppliedOne() throws Exception",
      "info" : "MethodDeclaration[2825-3344]:MethodDeclaration[2753-3272]"
    }, {
      "left" : "public void bodyExpectationsAreNotOverwritten() throws Exception",
      "right" : "public void bodyExpectationsAreNotOverwritten() throws Exception",
      "info" : "MethodDeclaration[3350-3964]:MethodDeclaration[3278-3892]"
    }, {
      "left" : "public void responseSpecificationSupportsMergingWithAnotherResponseSpecification() throws Exception",
      "right" : "public void responseSpecificationSupportsMergingWithAnotherResponseSpecification() throws Exception",
      "info" : "MethodDeclaration[3970-4618]:MethodDeclaration[3898-4546]"
    }, {
      "left" : "public void responseSpecificationCanExpectBodyWithArgs () throws Exception",
      "right" : "public void responseSpecificationCanExpectBodyWithArgs () throws Exception",
      "info" : "MethodDeclaration[4624-5048]:MethodDeclaration[4552-4976]"
    }, {
      "left" : "public void responseSpecificationCanExpectContentWithArgs () throws Exception",
      "right" : "public void responseSpecificationCanExpectContentWithArgs () throws Exception",
      "info" : "MethodDeclaration[5054-5487]:MethodDeclaration[4982-5415]"
    }, {
      "left" : "public void supportsSpecifyingParametersInRequestSpecBuilder() throws Exception",
      "right" : "public void supportsSpecifyingParametersInRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[5493-5962]:MethodDeclaration[5421-5890]"
    }, {
      "left" : "public void supportsSpecifyingDefaultRequestSpec() throws Exception",
      "right" : "public void supportsSpecifyingDefaultRequestSpec() throws Exception",
      "info" : "MethodDeclaration[5968-6477]:MethodDeclaration[5896-6405]"
    }, {
      "left" : "public void supportsSpecifyingQueryParametersInRequestSpecBuilderWhenGet() throws Exception",
      "right" : "public void supportsSpecifyingQueryParametersInRequestSpecBuilderWhenGet() throws Exception",
      "info" : "MethodDeclaration[6483-6974]:MethodDeclaration[6411-6902]"
    }, {
      "left" : "public void supportsSpecifyingQueryParametersInRequestSpecBuilderWhenPost() throws Exception",
      "right" : "public void supportsSpecifyingQueryParametersInRequestSpecBuilderWhenPost() throws Exception",
      "info" : "MethodDeclaration[6980-7473]:MethodDeclaration[6908-7401]"
    }, {
      "left" : "public void supportsMergesParametersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergesParametersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[7479-7965]:MethodDeclaration[7407-7893]"
    }, {
      "left" : "public void supportsMergingCookiesWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingCookiesWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[7971-8534]:MethodDeclaration[7899-8462]"
    }, {
      "left" : "public void supportsMergingHeadersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingHeadersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[8540-9000]:MethodDeclaration[8468-8928]"
    }, {
      "left" : "public void supportsMergingRequestSpecHeadersUsingTheBuilder() throws Exception",
      "right" : "public void supportsMergingRequestSpecHeadersUsingTheBuilder() throws Exception",
      "info" : "MethodDeclaration[9006-9625]:MethodDeclaration[8934-9553]"
    }, {
      "left" : "public void requestSpecBuilderSupportsSettingAuthentication() throws Exception",
      "right" : "public void requestSpecBuilderSupportsSettingAuthentication() throws Exception",
      "info" : "MethodDeclaration[9631-9988]:MethodDeclaration[9559-9916]"
    }, {
      "left" : "public void supportsMergingMultiValueParametersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingMultiValueParametersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[9994-10382]:MethodDeclaration[9922-10310]"
    }, {
      "left" : "public void supportsMergingMultiValueQueryParametersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingMultiValueQueryParametersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[10388-10786]:MethodDeclaration[10316-10714]"
    }, {
      "left" : "public void supportsMergingMultiValueFormParametersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingMultiValueFormParametersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[10792-11188]:MethodDeclaration[10720-11116]"
    }, {
      "left" : "public void supportsMergingMultiValueParametersUsingListWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingMultiValueParametersUsingListWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[11194-11599]:MethodDeclaration[11122-11527]"
    }, {
      "left" : "public void supportsMergingMultiValueQueryParametersUsingListWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingMultiValueQueryParametersUsingListWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[11605-12020]:MethodDeclaration[11533-11948]"
    }, {
      "left" : "public void supportsMergingMultiValueFormParametersUsingListWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingMultiValueFormParametersUsingListWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[12026-12439]:MethodDeclaration[11954-12367]"
    }, {
      "left" : "public void supportsMergingFormParametersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingFormParametersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[12445-12898]:MethodDeclaration[12373-12826]"
    }, {
      "left" : "public void supportsMergingPathParametersWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsMergingPathParametersWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[12904-13351]:MethodDeclaration[12832-13279]"
    }, {
      "left" : "public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[13357-14393]:MethodDeclaration[13285-14321]"
    }, {
      "left" : "public void supportsSettingConfigWhenUsingRequestSpecBuilder() throws Exception",
      "right" : "public void supportsSettingConfigWhenUsingRequestSpecBuilder() throws Exception",
      "info" : "MethodDeclaration[14399-14903]:MethodDeclaration[14327-14831]"
    }, {
      "left" : "public void mergesStaticallyDefinedResponseSpecificationsCorrectly() throws Exception",
      "right" : "public void mergesStaticallyDefinedResponseSpecificationsCorrectly() throws Exception",
      "info" : "MethodDeclaration[14909-16516]:MethodDeclaration[14837-16444]"
    }, {
      "left" : "public void mergesStaticallyDefinedRequestSpecificationsCorrectly() throws Exception",
      "right" : "public void mergesStaticallyDefinedRequestSpecificationsCorrectly() throws Exception",
      "info" : "MethodDeclaration[16522-17865]:MethodDeclaration[16450-17793]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1929-2355]:Block[1857-2283]"
    }, {
      "left" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
      "right" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
      "info" : "VariableDeclarationStatement[1939-2001]:VariableDeclarationStatement[1867-1929]"
    }, {
      "left" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
      "right" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
      "info" : "ExpressionStatement[2010-2079]:ExpressionStatement[1938-2007]"
    }, {
      "left" : "final ResponseSpecification responseSpecification = builder.build();",
      "right" : "final ResponseSpecification responseSpecification = builder.build();",
      "info" : "VariableDeclarationStatement[2088-2156]:VariableDeclarationStatement[2016-2084]"
    }, {
      "left" : "expect().\n                specification(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "right" : "expect().\n                specification(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "info" : "ExpressionStatement[2166-2349]:ExpressionStatement[2094-2277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2440-2819]:Block[2368-2747]"
    }, {
      "left" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectBody(\"store.book.size()\", is(4)).expectStatusCode(200).build();",
      "right" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectBody(\"store.book.size()\", is(4)).expectStatusCode(200).build();",
      "info" : "ExpressionStatement[2450-2581]:ExpressionStatement[2378-2509]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2591-2813]:TryStatement[2519-2741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2595-2760]:Block[2523-2688]"
    }, {
      "left" : "expect().\n                    body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n            when().\n                    get(\"/jsonStore\");",
      "right" : "expect().\n                    body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n            when().\n                    get(\"/jsonStore\");",
      "info" : "ExpressionStatement[2609-2750]:ExpressionStatement[2537-2678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2769-2813]:Block[2697-2741]"
    }, {
      "left" : "RestAssured.reset();",
      "right" : "RestAssured.reset();",
      "info" : "ExpressionStatement[2783-2803]:ExpressionStatement[2711-2731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2927-3344]:Block[2855-3272]"
    }, {
      "left" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
      "right" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
      "info" : "VariableDeclarationStatement[2937-2999]:VariableDeclarationStatement[2865-2927]"
    }, {
      "left" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
      "right" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
      "info" : "ExpressionStatement[3008-3077]:ExpressionStatement[2936-3005]"
    }, {
      "left" : "final ResponseSpecification responseSpecification = builder.build();",
      "right" : "final ResponseSpecification responseSpecification = builder.build();",
      "info" : "VariableDeclarationStatement[3086-3154]:VariableDeclarationStatement[3014-3082]"
    }, {
      "left" : "expect().\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "right" : "expect().\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "info" : "ExpressionStatement[3164-3338]:ExpressionStatement[3092-3266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3425-3964]:Block[3353-3892]"
    }, {
      "left" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
      "right" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
      "info" : "VariableDeclarationStatement[3435-3497]:VariableDeclarationStatement[3363-3425]"
    }, {
      "left" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
      "right" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
      "info" : "ExpressionStatement[3506-3575]:ExpressionStatement[3434-3503]"
    }, {
      "left" : "final ResponseSpecification responseSpecification = builder.build();",
      "right" : "final ResponseSpecification responseSpecification = builder.build();",
      "info" : "VariableDeclarationStatement[3584-3652]:VariableDeclarationStatement[3512-3580]"
    }, {
      "left" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "right" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "info" : "ExpressionStatement[3662-3958]:ExpressionStatement[3590-3886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4080-4618]:Block[4008-4546]"
    }, {
      "left" : "final ResponseSpecification specification = expect().body(\"store.book.size()\", equalTo(4));",
      "right" : "final ResponseSpecification specification = expect().body(\"store.book.size()\", equalTo(4));",
      "info" : "VariableDeclarationStatement[4090-4181]:VariableDeclarationStatement[4018-4109]"
    }, {
      "left" : "final ResponseSpecification built = new ResponseSpecBuilder().expectStatusCode(200).addResponseSpecification(specification).build();",
      "right" : "final ResponseSpecification built = new ResponseSpecBuilder().expectStatusCode(200).addResponseSpecification(specification).build();",
      "info" : "VariableDeclarationStatement[4190-4322]:VariableDeclarationStatement[4118-4250]"
    }, {
      "left" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(built).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "right" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(built).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
      "info" : "ExpressionStatement[4332-4612]:ExpressionStatement[4260-4540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4709-5048]:Block[4637-4976]"
    }, {
      "left" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectBody(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
      "right" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectBody(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
      "info" : "VariableDeclarationStatement[4719-4872]:VariableDeclarationStatement[4647-4800]"
    }, {
      "left" : "expect().\n                spec(spec).\n                body(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
      "right" : "expect().\n                spec(spec).\n                body(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
      "info" : "ExpressionStatement[4882-5042]:ExpressionStatement[4810-4970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5142-5487]:Block[5070-5415]"
    }, {
      "left" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectContent(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
      "right" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectContent(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
      "info" : "VariableDeclarationStatement[5152-5308]:VariableDeclarationStatement[5080-5236]"
    }, {
      "left" : "expect().\n                spec(spec).\n                content(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
      "right" : "expect().\n                spec(spec).\n                content(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
      "info" : "ExpressionStatement[5318-5481]:ExpressionStatement[5246-5409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5583-5962]:Block[5511-5890]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
      "info" : "VariableDeclarationStatement[5593-5722]:VariableDeclarationStatement[5521-5650]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
      "info" : "ExpressionStatement[5732-5956]:ExpressionStatement[5660-5884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6046-6477]:Block[5974-6405]"
    }, {
      "left" : "RestAssured.requestSpecification = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
      "right" : "RestAssured.requestSpecification = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
      "info" : "ExpressionStatement[6056-6186]:ExpressionStatement[5984-6114]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6195-6471]:TryStatement[6123-6399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6199-6418]:Block[6127-6346]"
    }, {
      "left" : "expect().\n                    body(\"greeting.firstName\", equalTo(\"John\")).\n                    body(\"greeting.lastName\", equalTo(\"Doe\")).\n            when().\n                    get(\"/greetXML\");",
      "right" : "expect().\n                    body(\"greeting.firstName\", equalTo(\"John\")).\n                    body(\"greeting.lastName\", equalTo(\"Doe\")).\n            when().\n                    get(\"/greetXML\");",
      "info" : "ExpressionStatement[6213-6408]:ExpressionStatement[6141-6336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6427-6471]:Block[6355-6399]"
    }, {
      "left" : "RestAssured.reset();",
      "right" : "RestAssured.reset();",
      "info" : "ExpressionStatement[6441-6461]:ExpressionStatement[6369-6389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6585-6974]:Block[6513-6902]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
      "info" : "VariableDeclarationStatement[6595-6734]:VariableDeclarationStatement[6523-6662]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
      "info" : "ExpressionStatement[6744-6968]:ExpressionStatement[6672-6896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7083-7473]:Block[7011-7401]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
      "info" : "VariableDeclarationStatement[7093-7232]:VariableDeclarationStatement[7021-7160]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                post(\"/greetXML\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                post(\"/greetXML\");",
      "info" : "ExpressionStatement[7242-7467]:ExpressionStatement[7170-7395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7572-7965]:Block[7500-7893]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").build();",
      "info" : "VariableDeclarationStatement[7582-7683]:VariableDeclarationStatement[7510-7611]"
    }, {
      "left" : "given().\n                spec(spec).\n                param(\"lastName\", \"Doe\").\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
      "right" : "given().\n                spec(spec).\n                param(\"lastName\", \"Doe\").\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
      "info" : "ExpressionStatement[7693-7959]:ExpressionStatement[7621-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8062-8534]:Block[7990-8462]"
    }, {
      "left" : "final RequestSpecification spec1 = new RequestSpecBuilder().addCookie(\"cookie3\", \"value3\").build();",
      "right" : "final RequestSpecification spec1 = new RequestSpecBuilder().addCookie(\"cookie3\", \"value3\").build();",
      "info" : "VariableDeclarationStatement[8072-8171]:VariableDeclarationStatement[8000-8099]"
    }, {
      "left" : "final RequestSpecification spec2 = new RequestSpecBuilder().addCookie(\"cookie1\", \"value1\").addRequestSpecification(spec1).build();",
      "right" : "final RequestSpecification spec2 = new RequestSpecBuilder().addCookie(\"cookie1\", \"value1\").addRequestSpecification(spec1).build();",
      "info" : "VariableDeclarationStatement[8180-8310]:VariableDeclarationStatement[8108-8238]"
    }, {
      "left" : "given().\n                spec(spec2).\n                cookie(\"cookie2\", \"value2\").\n        expect().\n                body(equalTo(\"cookie1, cookie3, cookie2\")).\n        when().\n                get(\"/cookie\");",
      "right" : "given().\n                spec(spec2).\n                cookie(\"cookie2\", \"value2\").\n        expect().\n                body(equalTo(\"cookie1, cookie3, cookie2\")).\n        when().\n                get(\"/cookie\");",
      "info" : "ExpressionStatement[8320-8528]:ExpressionStatement[8248-8456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8631-9000]:Block[8559-8928]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").build();",
      "info" : "VariableDeclarationStatement[8641-8739]:VariableDeclarationStatement[8569-8667]"
    }, {
      "left" : "given().\n                spec(spec).\n                header(\"header2\", \"value2\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n        when().\n                get(\"/header\");",
      "right" : "given().\n                spec(spec).\n                header(\"header2\", \"value2\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n        when().\n                get(\"/header\");",
      "info" : "ExpressionStatement[8749-8994]:ExpressionStatement[8677-8922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9096-9625]:Block[9024-9553]"
    }, {
      "left" : "final RequestSpecification spec = given().header(\"header2\", \"value2\");",
      "right" : "final RequestSpecification spec = given().header(\"header2\", \"value2\");",
      "info" : "VariableDeclarationStatement[9106-9176]:VariableDeclarationStatement[9034-9104]"
    }, {
      "left" : "final RequestSpecification spec2 = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").addRequestSpecification(spec).build();",
      "right" : "final RequestSpecification spec2 = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").addRequestSpecification(spec).build();",
      "info" : "VariableDeclarationStatement[9185-9314]:VariableDeclarationStatement[9113-9242]"
    }, {
      "left" : "given().\n                spec(spec2).\n                header(\"header3\", \"value3\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n                body(containsString(\"header3\")).\n        when().\n                get(\"/header\");",
      "right" : "given().\n                spec(spec2).\n                header(\"header3\", \"value3\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n                body(containsString(\"header3\")).\n        when().\n                get(\"/header\");",
      "info" : "ExpressionStatement[9324-9619]:ExpressionStatement[9252-9547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9720-9988]:Block[9648-9916]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().setAuth(basic(\"jetty\", \"jetty\")).build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().setAuth(basic(\"jetty\", \"jetty\")).build();",
      "info" : "VariableDeclarationStatement[9730-9830]:VariableDeclarationStatement[9658-9758]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                statusCode(200).\n        when().\n                get(\"/secured/hello\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                statusCode(200).\n        when().\n                get(\"/secured/hello\");",
      "info" : "ExpressionStatement[9840-9982]:ExpressionStatement[9768-9910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10098-10382]:Block[10026-10310]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", \"1\", \"2\", \"3\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", \"1\", \"2\", \"3\").build();",
      "info" : "VariableDeclarationStatement[10108-10207]:VariableDeclarationStatement[10036-10135]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "info" : "ExpressionStatement[10217-10376]:ExpressionStatement[10145-10304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10497-10786]:Block[10425-10714]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", \"1\", \"2\", \"3\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", \"1\", \"2\", \"3\").build();",
      "info" : "VariableDeclarationStatement[10507-10611]:VariableDeclarationStatement[10435-10539]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "info" : "ExpressionStatement[10621-10780]:ExpressionStatement[10549-10708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10900-11188]:Block[10828-11116]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", \"1\", \"2\", \"3\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", \"1\", \"2\", \"3\").build();",
      "info" : "VariableDeclarationStatement[10910-11013]:VariableDeclarationStatement[10838-10941]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
      "info" : "ExpressionStatement[11023-11182]:ExpressionStatement[10951-11110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11307-11599]:Block[11235-11527]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
      "info" : "VariableDeclarationStatement[11317-11424]:VariableDeclarationStatement[11245-11352]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "info" : "ExpressionStatement[11434-11593]:ExpressionStatement[11362-11521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11723-12020]:Block[11651-11948]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
      "info" : "VariableDeclarationStatement[11733-11845]:VariableDeclarationStatement[11661-11773]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
      "info" : "ExpressionStatement[11855-12014]:ExpressionStatement[11783-11942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12143-12439]:Block[12071-12367]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
      "info" : "VariableDeclarationStatement[12153-12264]:VariableDeclarationStatement[12081-12192]"
    }, {
      "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
      "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
      "info" : "ExpressionStatement[12274-12433]:ExpressionStatement[12202-12361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12543-12898]:Block[12471-12826]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"lastName\", \"Doe\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"lastName\", \"Doe\").build();",
      "info" : "VariableDeclarationStatement[12553-12652]:VariableDeclarationStatement[12481-12580]"
    }, {
      "left" : "given().\n                spec(spec).\n                formParameter(\"firstName\", \"John\").\n        expect().\n                body(\"greeting\", Matchers.equalTo(\"Greetings John Doe\")).\n        when().\n                put(\"/greetPut\");",
      "right" : "given().\n                spec(spec).\n                formParameter(\"firstName\", \"John\").\n        expect().\n                body(\"greeting\", Matchers.equalTo(\"Greetings John Doe\")).\n        when().\n                put(\"/greetPut\");",
      "info" : "ExpressionStatement[12662-12892]:ExpressionStatement[12590-12820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13002-13351]:Block[12930-13279]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().addPathParam(\"lastName\", \"Doe\").build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().addPathParam(\"lastName\", \"Doe\").build();",
      "info" : "VariableDeclarationStatement[13012-13111]:VariableDeclarationStatement[12940-13039]"
    }, {
      "left" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n        expect().\n                body(\"fullName\", equalTo(\"John Doe\")).\n        when().\n               get(\"/{firstName}/{lastName}\");",
      "right" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n        expect().\n                body(\"fullName\", equalTo(\"John Doe\")).\n        when().\n               get(\"/{firstName}/{lastName}\");",
      "info" : "ExpressionStatement[13121-13345]:ExpressionStatement[13049-13273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13448-14393]:Block[13376-14321]"
    }, {
      "left" : "final StringWriter writer = new StringWriter();",
      "right" : "final StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[13458-13505]:VariableDeclarationStatement[13386-13433]"
    }, {
      "left" : "final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);",
      "right" : "final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);",
      "info" : "VariableDeclarationStatement[13514-13595]:VariableDeclarationStatement[13442-13523]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().logConfig(logConfig().defaultStream(captor))).and().log(ALL).build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().logConfig(logConfig().defaultStream(captor))).and().log(ALL).build();",
      "info" : "VariableDeclarationStatement[13604-13754]:VariableDeclarationStatement[13532-13682]"
    }, {
      "left" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n                pathParameter(\"lastName\", \"Doe\").\n        when().\n                get(\"/{firstName}/{lastName}\").\n        then().\n                body(\"fullName\", equalTo(\"John Doe\"));",
      "right" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n                pathParameter(\"lastName\", \"Doe\").\n        when().\n                get(\"/{firstName}/{lastName}\").\n        then().\n                body(\"fullName\", equalTo(\"John Doe\"));",
      "info" : "ExpressionStatement[13764-14037]:ExpressionStatement[13692-13965]"
    }, {
      "left" : "assertThat(writer.toString(), equalTo(\"Request method:\\tGET\\nRequest path:\\thttp://localhost:8080/John/Doe\\nProxy:\\t\\t\\t<none>\\nRequest params:\\t<none>\\nQuery params:\\t<none>\\nForm params:\\t<none>\\nPath params:\\tfirstName=John\\n\\t\\t\\t\\tlastName=Doe\\nMultiparts:\\t\\t<none>\\nHeaders:\\t\\tAccept=*/*\\nCookies:\\t\\t<none>\\nBody:\\t\\t\\t<none>\\n\"));",
      "right" : "assertThat(writer.toString(), equalTo(\"Request method:\\tGET\\nRequest path:\\thttp://localhost:8080/John/Doe\\nProxy:\\t\\t\\t<none>\\nRequest params:\\t<none>\\nQuery params:\\t<none>\\nForm params:\\t<none>\\nPath params:\\tfirstName=John\\n\\t\\t\\t\\tlastName=Doe\\nMultiparts:\\t\\t<none>\\nHeaders:\\t\\tAccept=*/*\\nCookies:\\t\\t<none>\\nBody:\\t\\t\\t<none>\\n\"));",
      "info" : "ExpressionStatement[14047-14387]:ExpressionStatement[13975-14315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14489-14903]:Block[14417-14831]"
    }, {
      "left" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().redirect(redirectConfig().followRedirects(false))).build();",
      "right" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().redirect(redirectConfig().followRedirects(false))).build();",
      "info" : "VariableDeclarationStatement[14499-14639]:VariableDeclarationStatement[14427-14567]"
    }, {
      "left" : "given().\n                param(\"url\", \"/hello\").\n                spec(spec).\n        expect().\n                statusCode(302).\n                header(\"Location\", is(\"http://localhost:8080/hello\")).\n        when().\n                get(\"/redirect\");",
      "right" : "given().\n                param(\"url\", \"/hello\").\n                spec(spec).\n        expect().\n                statusCode(302).\n                header(\"Location\", is(\"http://localhost:8080/hello\")).\n        when().\n                get(\"/redirect\");",
      "info" : "ExpressionStatement[14649-14897]:ExpressionStatement[14577-14825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15005-16516]:Block[14933-16444]"
    }, {
      "left" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectCookie(\"Cookie1\", \"Value1\").build();",
      "right" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectCookie(\"Cookie1\", \"Value1\").build();",
      "info" : "ExpressionStatement[15015-15119]:ExpressionStatement[14943-15047]"
    }, {
      "left" : "ResponseSpecification reqSpec1 = new ResponseSpecBuilder().expectCookie(\"Cookie2\", \"Value2\").build();",
      "right" : "ResponseSpecification reqSpec1 = new ResponseSpecBuilder().expectCookie(\"Cookie2\", \"Value2\").build();",
      "info" : "VariableDeclarationStatement[15128-15229]:VariableDeclarationStatement[15056-15157]"
    }, {
      "left" : "ResponseSpecification reqSpec2 = new ResponseSpecBuilder().expectCookie(\"Cookie3\", \"Value3\").build();",
      "right" : "ResponseSpecification reqSpec2 = new ResponseSpecBuilder().expectCookie(\"Cookie3\", \"Value3\").build();",
      "info" : "VariableDeclarationStatement[15238-15339]:VariableDeclarationStatement[15166-15267]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15349-16510]:TryStatement[15277-16438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15353-16457]:Block[15281-16385]"
    }, {
      "left" : "Cookies cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie2\", \"Value2\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec1).\n            extract().\n                    detailedCookies();",
      "right" : "Cookies cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie2\", \"Value2\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec1).\n            extract().\n                    detailedCookies();",
      "info" : "VariableDeclarationStatement[15367-15712]:VariableDeclarationStatement[15295-15640]"
    }, {
      "left" : "assertThat(cookies.size(), is(2));",
      "right" : "assertThat(cookies.size(), is(2));",
      "info" : "ExpressionStatement[15726-15760]:ExpressionStatement[15654-15688]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "info" : "ExpressionStatement[15773-15832]:ExpressionStatement[15701-15760]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
      "info" : "ExpressionStatement[15845-15904]:ExpressionStatement[15773-15832]"
    }, {
      "left" : "cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie3\", \"Value3\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec2).\n            extract().\n                    detailedCookies();",
      "right" : "cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie3\", \"Value3\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec2).\n            extract().\n                    detailedCookies();",
      "info" : "ExpressionStatement[15918-16255]:ExpressionStatement[15846-16183]"
    }, {
      "left" : "assertThat(cookies.size(), is(2));",
      "right" : "assertThat(cookies.size(), is(2));",
      "info" : "ExpressionStatement[16269-16303]:ExpressionStatement[16197-16231]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "info" : "ExpressionStatement[16316-16375]:ExpressionStatement[16244-16303]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
      "info" : "ExpressionStatement[16388-16447]:ExpressionStatement[16316-16375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16466-16510]:Block[16394-16438]"
    }, {
      "left" : "RestAssured.reset();",
      "right" : "RestAssured.reset();",
      "info" : "ExpressionStatement[16480-16500]:ExpressionStatement[16408-16428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16617-17865]:Block[16545-17793]"
    }, {
      "left" : "RestAssured.requestSpecification = new RequestSpecBuilder().addCookie(\"Cookie1\", \"Value1\").build();",
      "right" : "RestAssured.requestSpecification = new RequestSpecBuilder().addCookie(\"Cookie1\", \"Value1\").build();",
      "info" : "ExpressionStatement[16627-16726]:ExpressionStatement[16555-16654]"
    }, {
      "left" : "RequestSpecification reqSpec1 = new RequestSpecBuilder().addCookie(\"Cookie2\", \"Value2\").build();",
      "right" : "RequestSpecification reqSpec1 = new RequestSpecBuilder().addCookie(\"Cookie2\", \"Value2\").build();",
      "info" : "VariableDeclarationStatement[16735-16831]:VariableDeclarationStatement[16663-16759]"
    }, {
      "left" : "RequestSpecification reqSpec2 = new RequestSpecBuilder().addCookie(\"Cookie3\", \"Value3\").build();",
      "right" : "RequestSpecification reqSpec2 = new RequestSpecBuilder().addCookie(\"Cookie3\", \"Value3\").build();",
      "info" : "VariableDeclarationStatement[16840-16936]:VariableDeclarationStatement[16768-16864]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16946-17859]:TryStatement[16874-17787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16950-17806]:Block[16878-17734]"
    }, {
      "left" : "Cookies cookies =\n            given().\n                    spec(reqSpec1).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
      "right" : "Cookies cookies =\n            given().\n                    spec(reqSpec1).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
      "info" : "VariableDeclarationStatement[16964-17185]:VariableDeclarationStatement[16892-17113]"
    }, {
      "left" : "assertThat(cookies.size(), is(2));",
      "right" : "assertThat(cookies.size(), is(2));",
      "info" : "ExpressionStatement[17199-17233]:ExpressionStatement[17127-17161]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "info" : "ExpressionStatement[17246-17305]:ExpressionStatement[17174-17233]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
      "info" : "ExpressionStatement[17318-17377]:ExpressionStatement[17246-17305]"
    }, {
      "left" : "cookies =\n            given().\n                    spec(reqSpec2).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
      "right" : "cookies =\n            given().\n                    spec(reqSpec2).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
      "info" : "ExpressionStatement[17391-17604]:ExpressionStatement[17319-17532]"
    }, {
      "left" : "assertThat(cookies.size(), is(2));",
      "right" : "assertThat(cookies.size(), is(2));",
      "info" : "ExpressionStatement[17618-17652]:ExpressionStatement[17546-17580]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
      "info" : "ExpressionStatement[17665-17724]:ExpressionStatement[17593-17652]"
    }, {
      "left" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
      "right" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
      "info" : "ExpressionStatement[17737-17796]:ExpressionStatement[17665-17724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17815-17859]:Block[17743-17787]"
    }, {
      "left" : "RestAssured.reset();",
      "right" : "RestAssured.reset();",
      "info" : "ExpressionStatement[17829-17849]:ExpressionStatement[17757-17777]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SSLITest.java" : {
      "matchedElements" : [
 {
        "left" : "public void supportsSpecifyingKeystore() throws Exception",
        "right" : "public void supportsSpecifyingKeystore() throws Exception",
        "info" : "MethodDeclaration[17871-18167]:MethodDeclaration[10091-10385]"
      }, {
        "left" : "public void supportsOverridingKeystore() throws Exception",
        "right" : "public void supportsOverridingKeystore() throws Exception",
        "info" : "MethodDeclaration[18173-18519]:MethodDeclaration[10391-10737]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[17939-18167]:Block[10159-10385]"
      }, {
        "left" : "final RequestSpecification spec = new RequestSpecBuilder().setKeystore(\"/truststore_eurosport.jks\", \"test4321\").build();",
        "right" : "final RequestSpecification spec = new RequestSpecBuilder().setKeystore(\"/truststore_eurosport.jks\", \"test4321\").build();",
        "info" : "VariableDeclarationStatement[17949-18069]:VariableDeclarationStatement[10169-10289]"
      }, {
        "left" : "given().spec(spec).expect().spec(eurosportSpec()).get(\"https://tv.eurosport.com/\");",
        "right" : "given().spec(spec).expect().spec(eurosportSpec()).get(\"https://localhost:8443/\");",
        "info" : "ExpressionStatement[18078-18161]:ExpressionStatement[10298-10379]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[18241-18519]:Block[10459-10737]"
      }, {
        "left" : "final RequestSpecification spec = new RequestSpecBuilder().setKeystore(\"/truststore_eurosport.jks\", \"wrong pw\").build();",
        "right" : "final RequestSpecification spec = new RequestSpecBuilder().setKeystore(\"/truststore_eurosport.jks\", \"wrong pw\").build();",
        "info" : "VariableDeclarationStatement[18251-18371]:VariableDeclarationStatement[10469-10589]"
      }, {
        "left" : "given().spec(spec).keystore(\"/truststore_eurosport.jks\", \"test4321\").expect().spec(eurosportSpec()).get(\"https://tv.eurosport.com/\");",
        "right" : "given().spec(spec).keystore(\"/truststore_eurosport.jks\", \"test4321\").expect().spec(eurosportSpec()).get(\"https://tv.eurosport.com/\");",
        "info" : "ExpressionStatement[18380-18513]:ExpressionStatement[10598-10731]"
      } ]
    }
  }
}