{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AdbHelper",
      "right" : "AdbHelper",
      "info" : "TypeDeclaration[2655-31596]:TypeDeclaration[2655-31678]"
    }, {
      "left" : "private static final long ADB_CONNECT_TIMEOUT_MS = 5000;",
      "right" : "private static final long ADB_CONNECT_TIMEOUT_MS = 5000;",
      "info" : "FieldDeclaration[2767-2823]:FieldDeclaration[2767-2823]"
    }, {
      "left" : "private static final long ADB_CONNECT_TIME_STEP_MS = ADB_CONNECT_TIMEOUT_MS / 10;",
      "right" : "private static final long ADB_CONNECT_TIME_STEP_MS = ADB_CONNECT_TIMEOUT_MS / 10;",
      "info" : "FieldDeclaration[2826-2907]:FieldDeclaration[2826-2907]"
    }, {
      "left" : "public static final Pattern PACKAGE_NAME_PATTERN = Pattern.compile(\"[\\\\w.-]+\");",
      "right" : "public static final Pattern PACKAGE_NAME_PATTERN = Pattern.compile(\"[\\\\w.-]+\");",
      "info" : "FieldDeclaration[2911-3080]:FieldDeclaration[2911-3080]"
    }, {
      "left" : "static final String SERIAL_NUMBER_ENV = \"ANDROID_SERIAL\";",
      "right" : "static final String SERIAL_NUMBER_ENV = \"ANDROID_SERIAL\";",
      "info" : "FieldDeclaration[3084-3287]:FieldDeclaration[3084-3287]"
    }, {
      "left" : "public static final long INSTALL_TIMEOUT = 2 * 60 * 1000;",
      "right" : "public static final long INSTALL_TIMEOUT = 2 * 60 * 1000;",
      "info" : "FieldDeclaration[3325-3382]:FieldDeclaration[3325-3382]"
    }, {
      "left" : "public static final long GETPROP_TIMEOUT = 2 * 1000;",
      "right" : "public static final long GETPROP_TIMEOUT = 2 * 1000;",
      "info" : "FieldDeclaration[3394-3446]:FieldDeclaration[3394-3446]"
    }, {
      "left" : "public static final String ECHO_COMMAND_SUFFIX = \" ; echo -n :$?\";",
      "right" : "public static final String ECHO_COMMAND_SUFFIX = \" ; echo -n :$?\";",
      "info" : "FieldDeclaration[3463-3529]:FieldDeclaration[3463-3529]"
    }, {
      "left" : "private final AdbOptions options;",
      "right" : "private final AdbOptions options;",
      "info" : "FieldDeclaration[3533-3566]:FieldDeclaration[3533-3566]"
    }, {
      "left" : "private final TargetDeviceOptions deviceOptions;",
      "right" : "private final TargetDeviceOptions deviceOptions;",
      "info" : "FieldDeclaration[3569-3617]:FieldDeclaration[3569-3617]"
    }, {
      "left" : "private final ExecutionContext context;",
      "right" : "private final ExecutionContext context;",
      "info" : "FieldDeclaration[3620-3659]:FieldDeclaration[3620-3659]"
    }, {
      "left" : "private final Console console;",
      "right" : "private final Console console;",
      "info" : "FieldDeclaration[3662-3692]:FieldDeclaration[3662-3692]"
    }, {
      "left" : "private final BuckEventBus buckEventBus;",
      "right" : "private final BuckEventBus buckEventBus;",
      "info" : "FieldDeclaration[3695-3735]:FieldDeclaration[3695-3735]"
    }, {
      "left" : "private final boolean restartAdbOnFailure;",
      "right" : "private final boolean restartAdbOnFailure;",
      "info" : "FieldDeclaration[3738-3780]:FieldDeclaration[3738-3780]"
    }, {
      "left" : "public AdbHelper(\n      AdbOptions adbOptions,\n      TargetDeviceOptions deviceOptions,\n      ExecutionContext context,\n      Console console,\n      BuckEventBus buckEventBus,\n      boolean restartAdbOnFailure)",
      "right" : "public AdbHelper(\n      AdbOptions adbOptions,\n      TargetDeviceOptions deviceOptions,\n      ExecutionContext context,\n      Console console,\n      BuckEventBus buckEventBus,\n      boolean restartAdbOnFailure)",
      "info" : "MethodDeclaration[3784-4217]:MethodDeclaration[3784-4217]"
    }, {
      "left" : "private BuckEventBus getBuckEventBus()",
      "right" : "private BuckEventBus getBuckEventBus()",
      "info" : "MethodDeclaration[4221-4290]:MethodDeclaration[4221-4290]"
    }, {
      "left" : "List<IDevice> filterDevices(IDevice[] allDevices)",
      "right" : "List<IDevice> filterDevices(IDevice[] allDevices)",
      "info" : "MethodDeclaration[4294-7201]:MethodDeclaration[4294-7201]"
    }, {
      "left" : "private boolean isAdbInitialized(AndroidDebugBridge adb)",
      "right" : "private boolean isAdbInitialized(AndroidDebugBridge adb)",
      "info" : "MethodDeclaration[7205-7327]:MethodDeclaration[7205-7327]"
    }, {
      "left" : "private AndroidDebugBridge createAdb(ExecutionContext context) throws InterruptedException",
      "right" : "private AndroidDebugBridge createAdb(ExecutionContext context) throws InterruptedException",
      "info" : "MethodDeclaration[7331-8366]:MethodDeclaration[7331-8366]"
    }, {
      "left" : "public boolean adbCall(AdbCallable adbCallable) throws InterruptedException",
      "right" : "public boolean adbCall(AdbCallable adbCallable) throws InterruptedException",
      "info" : "MethodDeclaration[8370-11795]:MethodDeclaration[8983-11877]"
    }, {
      "left" : "AdbCallable",
      "right" : "AdbCallable",
      "info" : "TypeDeclaration[11799-12995]:TypeDeclaration[11881-13077]"
    }, {
      "left" : "public abstract boolean call(IDevice device) throws Exception;",
      "right" : "public abstract boolean call(IDevice device) throws Exception;",
      "info" : "MethodDeclaration[11953-12261]:MethodDeclaration[12035-12343]"
    }, {
      "left" : "public Callable<Boolean> forDevice(final IDevice device)",
      "right" : "public Callable<Boolean> forDevice(final IDevice device)",
      "info" : "MethodDeclaration[12267-12991]:MethodDeclaration[12349-13073]"
    }, {
      "left" : "public Boolean call() throws Exception",
      "right" : "public Boolean call() throws Exception",
      "info" : "MethodDeclaration[12751-12867]:MethodDeclaration[12833-12949]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[12876-12976]:MethodDeclaration[12958-13058]"
    }, {
      "left" : "ErrorParsingReceiver",
      "right" : "ErrorParsingReceiver",
      "info" : "TypeDeclaration[12999-14583]:TypeDeclaration[13081-14665]"
    }, {
      "left" : "@Nullable\n    private String errorMessage = null;",
      "right" : "@Nullable\n    private String errorMessage = null;",
      "info" : "FieldDeclaration[13368-13417]:FieldDeclaration[13450-13499]"
    }, {
      "left" : "protected abstract String matchForError(String line);",
      "right" : "protected abstract String matchForError(String line);",
      "info" : "MethodDeclaration[13423-13674]:MethodDeclaration[13505-13756]"
    }, {
      "left" : "protected boolean matchForSuccess(String line)",
      "right" : "protected boolean matchForSuccess(String line)",
      "info" : "MethodDeclaration[13680-13960]:MethodDeclaration[13762-14042]"
    }, {
      "left" : "public void processNewLines(String[] lines)",
      "right" : "public void processNewLines(String[] lines)",
      "info" : "MethodDeclaration[13966-14414]:MethodDeclaration[14048-14496]"
    }, {
      "left" : "public boolean isCancelled()",
      "right" : "public boolean isCancelled()",
      "info" : "MethodDeclaration[14420-14492]:MethodDeclaration[14502-14574]"
    }, {
      "left" : "public String getErrorMessage()",
      "right" : "public String getErrorMessage()",
      "info" : "MethodDeclaration[14498-14579]:MethodDeclaration[14580-14661]"
    }, {
      "left" : "CommandFailedException",
      "right" : "CommandFailedException",
      "info" : "TypeDeclaration[14587-15161]:TypeDeclaration[14669-15243]"
    }, {
      "left" : "public final String command;",
      "right" : "public final String command;",
      "info" : "FieldDeclaration[14792-14820]:FieldDeclaration[14874-14902]"
    }, {
      "left" : "public final int exitCode;",
      "right" : "public final int exitCode;",
      "info" : "FieldDeclaration[14825-14851]:FieldDeclaration[14907-14933]"
    }, {
      "left" : "public final String output;",
      "right" : "public final String output;",
      "info" : "FieldDeclaration[14856-14883]:FieldDeclaration[14938-14965]"
    }, {
      "left" : "public CommandFailedException(String command, int exitCode, String output)",
      "right" : "public CommandFailedException(String command, int exitCode, String output)",
      "info" : "MethodDeclaration[14888-15157]:MethodDeclaration[14970-15239]"
    }, {
      "left" : "public static String executeCommandWithErrorChecking(IDevice device, String command)\n      throws\n      TimeoutException,\n      AdbCommandRejectedException,\n      ShellCommandUnresponsiveException,\n      IOException",
      "right" : "public static String executeCommandWithErrorChecking(IDevice device, String command)\n      throws\n      TimeoutException,\n      AdbCommandRejectedException,\n      ShellCommandUnresponsiveException,\n      IOException",
      "info" : "MethodDeclaration[15165-16025]:MethodDeclaration[15247-16107]"
    }, {
      "left" : "public static String checkReceiverOutput(\n      String command,\n      CollectingOutputReceiver receiver) throws CommandFailedException",
      "right" : "public static String checkReceiverOutput(\n      String command,\n      CollectingOutputReceiver receiver) throws CommandFailedException",
      "info" : "MethodDeclaration[16029-16732]:MethodDeclaration[16111-16814]"
    }, {
      "left" : "public boolean installApk(\n      InstallableApk installableApk,\n      final boolean installViaSd) throws InterruptedException",
      "right" : "public boolean installApk(\n      InstallableApk installableApk,\n      final boolean installViaSd) throws InterruptedException",
      "info" : "MethodDeclaration[16736-18085]:MethodDeclaration[16818-18167]"
    }, {
      "left" : "public boolean call(IDevice device) throws Exception",
      "right" : "public boolean call(IDevice device) throws Exception",
      "info" : "MethodDeclaration[17699-17851]:MethodDeclaration[17781-17933]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[17863-17955]:MethodDeclaration[17945-18037]"
    }, {
      "left" : "public boolean installApkOnDevice(IDevice device, File apk, boolean installViaSd)",
      "right" : "public boolean installApkOnDevice(IDevice device, File apk, boolean installViaSd)",
      "info" : "MethodDeclaration[18089-19381]:MethodDeclaration[18171-19463]"
    }, {
      "left" : "protected boolean isDeviceTempWritable(IDevice device, String name)",
      "right" : "protected boolean isDeviceTempWritable(IDevice device, String name)",
      "info" : "MethodDeclaration[19385-22494]:MethodDeclaration[19467-22576]"
    }, {
      "left" : "private String deviceInstallPackageViaSd(IDevice device, String apk)",
      "right" : "private String deviceInstallPackageViaSd(IDevice device, String apk)",
      "info" : "MethodDeclaration[22498-23311]:MethodDeclaration[22580-23393]"
    }, {
      "left" : "private String deviceGetExternalStorage(IDevice device) throws TimeoutException,\n      AdbCommandRejectedException, ShellCommandUnresponsiveException, IOException",
      "right" : "private String deviceGetExternalStorage(IDevice device) throws TimeoutException,\n      AdbCommandRejectedException, ShellCommandUnresponsiveException, IOException",
      "info" : "MethodDeclaration[23315-23912]:MethodDeclaration[23397-23994]"
    }, {
      "left" : "public int startActivity(\n      InstallableApk installableApk,\n      @Nullable String activity) throws IOException, InterruptedException",
      "right" : "public int startActivity(\n      InstallableApk installableApk,\n      @Nullable String activity) throws IOException, InterruptedException",
      "info" : "MethodDeclaration[23916-26077]:MethodDeclaration[23998-26159]"
    }, {
      "left" : "public boolean call(IDevice device) throws Exception",
      "right" : "public boolean call(IDevice device) throws Exception",
      "info" : "MethodDeclaration[25472-25794]:MethodDeclaration[25554-25876]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[25806-25901]:MethodDeclaration[25888-25983]"
    }, {
      "left" : "String deviceStartActivity(IDevice device, String activityToRun)",
      "right" : "String deviceStartActivity(IDevice device, String activityToRun)",
      "info" : "MethodDeclaration[26081-26910]:MethodDeclaration[26163-26992]"
    }, {
      "left" : "protected String matchForError(String line)",
      "right" : "protected String matchForError(String line)",
      "info" : "MethodDeclaration[26286-26612]:MethodDeclaration[26368-26694]"
    }, {
      "left" : "public boolean uninstallApp(\n      final String packageName,\n      final boolean shouldKeepUserData) throws InterruptedException",
      "right" : "public boolean uninstallApp(\n      final String packageName,\n      final boolean shouldKeepUserData) throws InterruptedException",
      "info" : "MethodDeclaration[26914-27979]:MethodDeclaration[26996-28061]"
    }, {
      "left" : "public boolean call(IDevice device) throws Exception",
      "right" : "public boolean call(IDevice device) throws Exception",
      "info" : "MethodDeclaration[27392-27782]:MethodDeclaration[27474-27864]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[27790-27872]:MethodDeclaration[27872-27954]"
    }, {
      "left" : "private boolean uninstallApkFromDevice(IDevice device, String packageName, boolean keepData)",
      "right" : "private boolean uninstallApkFromDevice(IDevice device, String packageName, boolean keepData)",
      "info" : "MethodDeclaration[27983-29490]:MethodDeclaration[28065-29572]"
    }, {
      "left" : "private String deviceUninstallPackage(IDevice device,\n      String packageName,\n      boolean keepData) throws InstallException",
      "right" : "private String deviceUninstallPackage(IDevice device,\n      String packageName,\n      boolean keepData) throws InstallException",
      "info" : "MethodDeclaration[29494-30794]:MethodDeclaration[29576-30876]"
    }, {
      "left" : "protected String matchForError(String line)",
      "right" : "protected String matchForError(String line)",
      "info" : "MethodDeclaration[30069-30231]:MethodDeclaration[30151-30313]"
    }, {
      "left" : "public static String tryToExtractPackageNameFromManifest(\n      InstallableApk androidBinaryRule,\n      ExecutionContext context)",
      "right" : "public static String tryToExtractPackageNameFromManifest(\n      InstallableApk androidBinaryRule,\n      ExecutionContext context)",
      "info" : "MethodDeclaration[30798-31594]:MethodDeclaration[30880-31676]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3995-4217]:Block[3995-4217]"
    }, {
      "left" : "this.options = adbOptions;",
      "right" : "this.options = adbOptions;",
      "info" : "ExpressionStatement[4001-4027]:ExpressionStatement[4001-4027]"
    }, {
      "left" : "this.deviceOptions = deviceOptions;",
      "right" : "this.deviceOptions = deviceOptions;",
      "info" : "ExpressionStatement[4032-4067]:ExpressionStatement[4032-4067]"
    }, {
      "left" : "this.context = context;",
      "right" : "this.context = context;",
      "info" : "ExpressionStatement[4072-4095]:ExpressionStatement[4072-4095]"
    }, {
      "left" : "this.console = console;",
      "right" : "this.console = console;",
      "info" : "ExpressionStatement[4100-4123]:ExpressionStatement[4100-4123]"
    }, {
      "left" : "this.buckEventBus = buckEventBus;",
      "right" : "this.buckEventBus = buckEventBus;",
      "info" : "ExpressionStatement[4128-4161]:ExpressionStatement[4128-4161]"
    }, {
      "left" : "this.restartAdbOnFailure = restartAdbOnFailure;",
      "right" : "this.restartAdbOnFailure = restartAdbOnFailure;",
      "info" : "ExpressionStatement[4166-4213]:ExpressionStatement[4166-4213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4260-4290]:Block[4260-4290]"
    }, {
      "left" : "return buckEventBus;",
      "right" : "return buckEventBus;",
      "info" : "ReturnStatement[4266-4286]:ReturnStatement[4266-4286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4567-7201]:Block[4567-7201]"
    }, {
      "left" : "if (allDevices.length == 0)",
      "right" : "if (allDevices.length == 0)",
      "info" : "IfStatement[4573-4685]:IfStatement[4573-4685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4601-4685]:Block[4601-4685]"
    }, {
      "left" : "console.printBuildFailure(\"No devices are found.\");",
      "right" : "console.printBuildFailure(\"No devices are found.\");",
      "info" : "ExpressionStatement[4609-4660]:ExpressionStatement[4609-4660]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4667-4679]:ReturnStatement[4667-4679]"
    }, {
      "left" : "List<IDevice> devices = Lists.newArrayList();",
      "right" : "List<IDevice> devices = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[4691-4736]:VariableDeclarationStatement[4691-4736]"
    }, {
      "left" : "TriState emulatorsOnly = TriState.UNSPECIFIED;",
      "right" : "TriState emulatorsOnly = TriState.UNSPECIFIED;",
      "info" : "VariableDeclarationStatement[4741-4787]:VariableDeclarationStatement[4741-4787]"
    }, {
      "left" : "if (deviceOptions.isEmulatorsOnlyModeEnabled() && options.isMultiInstallModeEnabled())",
      "right" : "if (deviceOptions.isEmulatorsOnlyModeEnabled() && options.isMultiInstallModeEnabled())",
      "info" : "IfStatement[4792-5129]:IfStatement[4792-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4879-4930]:Block[4879-4930]"
    }, {
      "left" : "emulatorsOnly = TriState.UNSPECIFIED;",
      "right" : "emulatorsOnly = TriState.UNSPECIFIED;",
      "info" : "ExpressionStatement[4887-4924]:ExpressionStatement[4887-4924]"
    }, {
      "left" : "if (deviceOptions.isEmulatorsOnlyModeEnabled())",
      "right" : "if (deviceOptions.isEmulatorsOnlyModeEnabled())",
      "info" : "IfStatement[4936-5129]:IfStatement[4936-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4984-5028]:Block[4984-5028]"
    }, {
      "left" : "emulatorsOnly = TriState.TRUE;",
      "right" : "emulatorsOnly = TriState.TRUE;",
      "info" : "ExpressionStatement[4992-5022]:ExpressionStatement[4992-5022]"
    }, {
      "left" : "if (deviceOptions.isRealDevicesOnlyModeEnabled())",
      "right" : "if (deviceOptions.isRealDevicesOnlyModeEnabled())",
      "info" : "IfStatement[5034-5129]:IfStatement[5034-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5084-5129]:Block[5084-5129]"
    }, {
      "left" : "emulatorsOnly = TriState.FALSE;",
      "right" : "emulatorsOnly = TriState.FALSE;",
      "info" : "ExpressionStatement[5092-5123]:ExpressionStatement[5092-5123]"
    }, {
      "left" : "int onlineDevices = 0;",
      "right" : "int onlineDevices = 0;",
      "info" : "VariableDeclarationStatement[5135-5157]:VariableDeclarationStatement[5135-5157]"
    }, {
      "left" : "for (IDevice device : allDevices)",
      "right" : "for (IDevice device : allDevices)",
      "info" : "EnhancedForStatement[5162-6168]:EnhancedForStatement[5162-6168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5196-6168]:Block[5196-6168]"
    }, {
      "left" : "boolean passed = false;",
      "right" : "boolean passed = false;",
      "info" : "VariableDeclarationStatement[5204-5227]:VariableDeclarationStatement[5204-5227]"
    }, {
      "left" : "if (device.isOnline())",
      "right" : "if (device.isOnline())",
      "info" : "IfStatement[5234-6104]:IfStatement[5234-6104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5257-6104]:Block[5257-6104]"
    }, {
      "left" : "onlineDevices++;",
      "right" : "onlineDevices++;",
      "info" : "ExpressionStatement[5267-5283]:ExpressionStatement[5267-5283]"
    }, {
      "left" : "boolean serialMatches = true;",
      "right" : "boolean serialMatches = true;",
      "info" : "VariableDeclarationStatement[5293-5322]:VariableDeclarationStatement[5293-5322]"
    }, {
      "left" : "if (deviceOptions.hasSerialNumber())",
      "right" : "if (deviceOptions.hasSerialNumber())",
      "info" : "IfStatement[5331-5672]:IfStatement[5331-5672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5368-5471]:Block[5368-5471]"
    }, {
      "left" : "serialMatches = device.getSerialNumber().equals(deviceOptions.getSerialNumber());",
      "right" : "serialMatches = device.getSerialNumber().equals(deviceOptions.getSerialNumber());",
      "info" : "ExpressionStatement[5380-5461]:ExpressionStatement[5380-5461]"
    }, {
      "left" : "if (context.getEnvironment().containsKey(SERIAL_NUMBER_ENV))",
      "right" : "if (context.getEnvironment().containsKey(SERIAL_NUMBER_ENV))",
      "info" : "IfStatement[5477-5672]:IfStatement[5477-5672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5538-5672]:Block[5538-5672]"
    }, {
      "left" : "serialMatches = device.getSerialNumber().equals(\n              context.getEnvironment().get(SERIAL_NUMBER_ENV));",
      "right" : "serialMatches = device.getSerialNumber().equals(\n              context.getEnvironment().get(SERIAL_NUMBER_ENV));",
      "info" : "ExpressionStatement[5550-5662]:ExpressionStatement[5550-5662]"
    }, {
      "left" : "boolean deviceTypeMatches;",
      "right" : "boolean deviceTypeMatches;",
      "info" : "VariableDeclarationStatement[5682-5708]:VariableDeclarationStatement[5682-5708]"
    }, {
      "left" : "if (emulatorsOnly.isSet())",
      "right" : "if (emulatorsOnly.isSet())",
      "info" : "IfStatement[5717-6043]:IfStatement[5717-6043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5744-5951]:Block[5744-5951]"
    }, {
      "left" : "deviceTypeMatches = (emulatorsOnly.asBoolean() == device.isEmulator());",
      "right" : "deviceTypeMatches = (emulatorsOnly.asBoolean() == device.isEmulator());",
      "info" : "ExpressionStatement[5870-5941]:ExpressionStatement[5870-5941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5957-6043]:Block[5957-6043]"
    }, {
      "left" : "deviceTypeMatches = true;",
      "right" : "deviceTypeMatches = true;",
      "info" : "ExpressionStatement[6008-6033]:ExpressionStatement[6008-6033]"
    }, {
      "left" : "passed = serialMatches && deviceTypeMatches;",
      "right" : "passed = serialMatches && deviceTypeMatches;",
      "info" : "ExpressionStatement[6052-6096]:ExpressionStatement[6052-6096]"
    }, {
      "left" : "if (passed)",
      "right" : "if (passed)",
      "info" : "IfStatement[6112-6162]:IfStatement[6112-6162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6124-6162]:Block[6124-6162]"
    }, {
      "left" : "devices.add(device);",
      "right" : "devices.add(device);",
      "info" : "ExpressionStatement[6134-6154]:ExpressionStatement[6134-6154]"
    }, {
      "left" : "if (onlineDevices == 0)",
      "right" : "if (onlineDevices == 0)",
      "info" : "IfStatement[6207-6315]:IfStatement[6207-6315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6231-6315]:Block[6231-6315]"
    }, {
      "left" : "console.printBuildFailure(\"No devices are found.\");",
      "right" : "console.printBuildFailure(\"No devices are found.\");",
      "info" : "ExpressionStatement[6239-6290]:ExpressionStatement[6239-6290]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6297-6309]:ReturnStatement[6297-6309]"
    }, {
      "left" : "if (devices.isEmpty())",
      "right" : "if (devices.isEmpty())",
      "info" : "IfStatement[6321-6530]:IfStatement[6321-6530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6344-6530]:Block[6344-6530]"
    }, {
      "left" : "console.printBuildFailure(String.format(\n          \"Found %d connected device(s), but none of them matches specified filter.\",\n          onlineDevices));",
      "right" : "console.printBuildFailure(String.format(\n          \"Found %d connected device(s), but none of them matches specified filter.\",\n          onlineDevices));",
      "info" : "ExpressionStatement[6352-6505]:ExpressionStatement[6352-6505]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6512-6524]:ReturnStatement[6512-6524]"
    }, {
      "left" : "if (!options.isMultiInstallModeEnabled() && devices.size() > 1)",
      "right" : "if (!options.isMultiInstallModeEnabled() && devices.size() > 1)",
      "info" : "IfStatement[6605-6995]:IfStatement[6605-6995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6669-6995]:Block[6669-6995]"
    }, {
      "left" : "console.printBuildFailure(\n          String.format(\"%d device(s) matches specified device filter (1 expected).\\n\" +\n                        \"Either disconnect other devices or enable multi-install mode (%s).\",\n                         devices.size(), AdbOptions.MULTI_INSTALL_MODE_SHORT_ARG));",
      "right" : "console.printBuildFailure(\n          String.format(\"%d device(s) matches specified device filter (1 expected).\\n\" +\n                        \"Either disconnect other devices or enable multi-install mode (%s).\",\n                         devices.size(), AdbOptions.MULTI_INSTALL_MODE_SHORT_ARG));",
      "info" : "ExpressionStatement[6677-6970]:ExpressionStatement[6677-6970]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6977-6989]:ReturnStatement[6977-6989]"
    }, {
      "left" : "if (devices.size() > 1)",
      "right" : "if (devices.size() > 1)",
      "info" : "IfStatement[7060-7177]:IfStatement[7060-7177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7084-7177]:Block[7084-7177]"
    }, {
      "left" : "console.getStdOut().printf(\"Found \" + devices.size() + \" matching devices.\\n\");",
      "right" : "console.getStdOut().printf(\"Found \" + devices.size() + \" matching devices.\\n\");",
      "info" : "ExpressionStatement[7092-7171]:ExpressionStatement[7092-7171]"
    }, {
      "left" : "return devices;",
      "right" : "return devices;",
      "info" : "ReturnStatement[7182-7197]:ReturnStatement[7182-7197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7262-7327]:Block[7262-7327]"
    }, {
      "left" : "return adb.isConnected() && adb.hasInitialDeviceList();",
      "right" : "return adb.isConnected() && adb.hasInitialDeviceList();",
      "info" : "ReturnStatement[7268-7323]:ReturnStatement[7268-7323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7610-8366]:Block[7610-8366]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7616-7792]:TryStatement[7616-7792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7620-7685]:Block[7620-7685]"
    }, {
      "left" : "AndroidDebugBridge.init(/* clientSupport */ false);",
      "right" : "AndroidDebugBridge.init(/* clientSupport */ false);",
      "info" : "ExpressionStatement[7628-7679]:ExpressionStatement[7628-7679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7719-7792]:Block[7719-7792]"
    }, {
      "left" : "AndroidDebugBridge adb =\n        AndroidDebugBridge.createBridge(context.getPathToAdbExecutable(), false);",
      "right" : "AndroidDebugBridge adb =\n        AndroidDebugBridge.createBridge(context.getPathToAdbExecutable(), false);",
      "info" : "VariableDeclarationStatement[7798-7904]:VariableDeclarationStatement[7798-7904]"
    }, {
      "left" : "if (adb == null)",
      "right" : "if (adb == null)",
      "info" : "IfStatement[7909-8047]:IfStatement[7909-8047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7926-8047]:Block[7926-8047]"
    }, {
      "left" : "console.printBuildFailure(\"Failed to connect to adb. Make sure adb server is running.\");",
      "right" : "console.printBuildFailure(\"Failed to connect to adb. Make sure adb server is running.\");",
      "info" : "ExpressionStatement[7934-8022]:ExpressionStatement[7934-8022]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8029-8041]:ReturnStatement[8029-8041]"
    }, {
      "left" : "long start = System.currentTimeMillis();",
      "right" : "long start = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[8053-8093]:VariableDeclarationStatement[8053-8093]"
    }, {
      "left" : "while (!isAdbInitialized(adb))",
      "right" : "while (!isAdbInitialized(adb))",
      "info" : "WhileStatement[8098-8315]:WhileStatement[8098-8315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8129-8315]:Block[8129-8315]"
    }, {
      "left" : "long timeLeft = start + ADB_CONNECT_TIMEOUT_MS - System.currentTimeMillis();",
      "right" : "long timeLeft = start + ADB_CONNECT_TIMEOUT_MS - System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[8137-8213]:VariableDeclarationStatement[8137-8213]"
    }, {
      "left" : "if (timeLeft <= 0)",
      "right" : "if (timeLeft <= 0)",
      "info" : "IfStatement[8220-8263]:IfStatement[8220-8263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8239-8263]:Block[8239-8263]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8249-8255]:BreakStatement[8249-8255]"
    }, {
      "left" : "Thread.sleep(ADB_CONNECT_TIME_STEP_MS);",
      "right" : "Thread.sleep(ADB_CONNECT_TIME_STEP_MS);",
      "info" : "ExpressionStatement[8270-8309]:ExpressionStatement[8270-8309]"
    }, {
      "left" : "return isAdbInitialized(adb) ? adb : null;",
      "right" : "return isAdbInitialized(adb) ? adb : null;",
      "info" : "ReturnStatement[8320-8362]:ReturnStatement[8320-8362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9122-11795]:Block[9735-11877]"
    }, {
      "left" : "List<IDevice> devices;",
      "right" : "List<IDevice> devices;",
      "info" : "VariableDeclarationStatement[9128-9150]:VariableDeclarationStatement[9741-9763]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9156-9872]:TryStatement[9769-9954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9245-9872]:Block[8444-8979]"
    }, {
      "left" : "AndroidDebugBridge adb = createAdb(context);",
      "right" : "AndroidDebugBridge adb = createAdb(context);",
      "info" : "VariableDeclarationStatement[9290-9334]:VariableDeclarationStatement[8484-8528]"
    }, {
      "left" : "if (adb == null)",
      "right" : "if (adb == null)",
      "info" : "IfStatement[9341-9460]:IfStatement[8533-8645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9358-9460]:Block[8550-8645]"
    }, {
      "left" : "console.printBuildFailure(\"Failed to create adb connection.\");",
      "right" : "console.printBuildFailure(\"Failed to create adb connection.\");",
      "info" : "ExpressionStatement[9368-9430]:ExpressionStatement[8558-8620]"
    }, {
      "left" : "return false;",
      "right" : "return null;",
      "info" : "ReturnStatement[9439-9452]:ReturnStatement[8627-8639]"
    }, {
      "left" : "if (restartAdbOnFailure)",
      "right" : "if (devices == null && restartAdbOnFailure)",
      "info" : "IfStatement[9589-9790]:IfStatement[8751-8955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9614-9790]:Block[8795-8955]"
    }, {
      "left" : "console.printErrorText(\"No devices found with adb, restarting adb-server.\");",
      "right" : "console.printErrorText(\"No devices found with adb, restarting adb-server.\");",
      "info" : "ExpressionStatement[9626-9702]:ExpressionStatement[8803-8879]"
    }, {
      "left" : "adb.restart();",
      "right" : "adb.restart();",
      "info" : "ExpressionStatement[9713-9727]:ExpressionStatement[8886-8900]"
    }, {
      "left" : "devices = filterDevices(adb.getDevices());",
      "right" : "devices = filterDevices(adb.getDevices());",
      "info" : "ExpressionStatement[9738-9780]:ExpressionStatement[8907-8949]"
    }, {
      "left" : "if (devices == null)",
      "right" : "if (devices == null)",
      "info" : "IfStatement[9800-9858]:IfStatement[9896-9948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9821-9858]:Block[9917-9948]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9835-9848]:ReturnStatement[9927-9940]"
    }, {
      "left" : "int adbThreadCount = options.getAdbThreadCount();",
      "right" : "int adbThreadCount = options.getAdbThreadCount();",
      "info" : "VariableDeclarationStatement[9878-9927]:VariableDeclarationStatement[9960-10009]"
    }, {
      "left" : "if (adbThreadCount <= 0)",
      "right" : "if (adbThreadCount <= 0)",
      "info" : "IfStatement[9932-10003]:IfStatement[10014-10085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9957-10003]:Block[10039-10085]"
    }, {
      "left" : "adbThreadCount = devices.size();",
      "right" : "adbThreadCount = devices.size();",
      "info" : "ExpressionStatement[9965-9997]:ExpressionStatement[10047-10079]"
    }, {
      "left" : "List<ListenableFuture<Boolean>> futures = Lists.newArrayList();",
      "right" : "List<ListenableFuture<Boolean>> futures = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[10058-10121]:VariableDeclarationStatement[10140-10203]"
    }, {
      "left" : "ListeningExecutorService executorService =\n        listeningDecorator(\n            newMultiThreadExecutor(\n                new CommandThreadFactory(getClass().getSimpleName()),\n                adbThreadCount));",
      "right" : "ListeningExecutorService executorService =\n        listeningDecorator(\n            newMultiThreadExecutor(\n                new CommandThreadFactory(getClass().getSimpleName()),\n                adbThreadCount));",
      "info" : "VariableDeclarationStatement[10126-10336]:VariableDeclarationStatement[10208-10418]"
    }, {
      "left" : "for (final IDevice device : devices)",
      "right" : "for (final IDevice device : devices)",
      "info" : "EnhancedForStatement[10342-10460]:EnhancedForStatement[10424-10542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10379-10460]:Block[10461-10542]"
    }, {
      "left" : "futures.add(executorService.submit(adbCallable.forDevice(device)));",
      "right" : "futures.add(executorService.submit(adbCallable.forDevice(device)));",
      "info" : "ExpressionStatement[10387-10454]:ExpressionStatement[10469-10536]"
    }, {
      "left" : "List<Boolean> results = null;",
      "right" : "List<Boolean> results = null;",
      "info" : "VariableDeclarationStatement[10518-10547]:VariableDeclarationStatement[10600-10629]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10552-11253]:TryStatement[10634-11335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10556-10613]:Block[10638-10695]"
    }, {
      "left" : "results = Futures.allAsList(futures).get();",
      "right" : "results = Futures.allAsList(futures).get();",
      "info" : "ExpressionStatement[10564-10607]:ExpressionStatement[10646-10689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10644-10777]:Block[10726-10859]"
    }, {
      "left" : "console.printBuildFailure(\"Failed: \" + adbCallable);",
      "right" : "console.printBuildFailure(\"Failed: \" + adbCallable);",
      "info" : "ExpressionStatement[10652-10704]:ExpressionStatement[10734-10786]"
    }, {
      "left" : "ex.printStackTrace(console.getStdErr());",
      "right" : "ex.printStackTrace(console.getStdErr());",
      "info" : "ExpressionStatement[10711-10751]:ExpressionStatement[10793-10833]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10758-10771]:ReturnStatement[10840-10853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10809-11048]:Block[10891-11130]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10817-10985]:TryStatement[10899-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10821-10879]:Block[10903-10961]"
    }, {
      "left" : "Futures.allAsList(futures).cancel(true);",
      "right" : "Futures.allAsList(futures).cancel(true);",
      "info" : "ExpressionStatement[10831-10871]:ExpressionStatement[10913-10953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10918-10985]:Block[11000-11067]"
    }, {
      "left" : "Thread.currentThread().interrupt();",
      "right" : "Thread.currentThread().interrupt();",
      "info" : "ExpressionStatement[10992-11027]:ExpressionStatement[11074-11109]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[11034-11042]:ThrowStatement[11116-11124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11057-11253]:Block[11139-11335]"
    }, {
      "left" : "MoreExecutors.shutdownOrThrow(\n          executorService,\n          10,\n          TimeUnit.MINUTES,\n          new InterruptionFailedException(\"Failed to shutdown ExecutorService.\"));",
      "right" : "MoreExecutors.shutdownOrThrow(\n          executorService,\n          10,\n          TimeUnit.MINUTES,\n          new InterruptionFailedException(\"Failed to shutdown ExecutorService.\"));",
      "info" : "ExpressionStatement[11065-11247]:ExpressionStatement[11147-11329]"
    }, {
      "left" : "int successCount = 0;",
      "right" : "int successCount = 0;",
      "info" : "VariableDeclarationStatement[11259-11280]:VariableDeclarationStatement[11341-11362]"
    }, {
      "left" : "for (Boolean result : results)",
      "right" : "for (Boolean result : results)",
      "info" : "EnhancedForStatement[11285-11375]:EnhancedForStatement[11367-11457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11316-11375]:Block[11398-11457]"
    }, {
      "left" : "if (result)",
      "right" : "if (result)",
      "info" : "IfStatement[11324-11369]:IfStatement[11406-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11336-11369]:Block[11418-11451]"
    }, {
      "left" : "successCount++;",
      "right" : "successCount++;",
      "info" : "ExpressionStatement[11346-11361]:ExpressionStatement[11428-11443]"
    }, {
      "left" : "int failureCount = results.size() - successCount;",
      "right" : "int failureCount = results.size() - successCount;",
      "info" : "VariableDeclarationStatement[11380-11429]:VariableDeclarationStatement[11462-11511]"
    }, {
      "left" : "if (successCount > 0)",
      "right" : "if (successCount > 0)",
      "info" : "IfStatement[11458-11607]:IfStatement[11540-11689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11480-11607]:Block[11562-11689]"
    }, {
      "left" : "console.printSuccess(\n          String.format(\"Successfully ran %s on %d device(s)\", adbCallable, successCount));",
      "right" : "console.printSuccess(\n          String.format(\"Successfully ran %s on %d device(s)\", adbCallable, successCount));",
      "info" : "ExpressionStatement[11488-11601]:ExpressionStatement[11570-11683]"
    }, {
      "left" : "if (failureCount > 0)",
      "right" : "if (failureCount > 0)",
      "info" : "IfStatement[11612-11760]:IfStatement[11694-11842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11634-11760]:Block[11716-11842]"
    }, {
      "left" : "console.printBuildFailure(\n          String.format(\"Failed to %s on %d device(s).\", adbCallable, failureCount));",
      "right" : "console.printBuildFailure(\n          String.format(\"Failed to %s on %d device(s).\", adbCallable, failureCount));",
      "info" : "ExpressionStatement[11642-11754]:ExpressionStatement[11724-11836]"
    }, {
      "left" : "return failureCount == 0;",
      "right" : "return failureCount == 0;",
      "info" : "ReturnStatement[11766-11791]:ReturnStatement[11848-11873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12702-12991]:Block[12784-13073]"
    }, {
      "left" : "return new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return AdbCallable.this.call(device);\n        }\n        @Override\n        public String toString() {\n          return AdbCallable.this.toString();\n        }\n      };",
      "right" : "return new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return AdbCallable.this.call(device);\n        }\n        @Override\n        public String toString() {\n          return AdbCallable.this.toString();\n        }\n      };",
      "info" : "ReturnStatement[12710-12985]:ReturnStatement[12792-13067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12808-12867]:Block[12890-12949]"
    }, {
      "left" : "return AdbCallable.this.call(device);",
      "right" : "return AdbCallable.this.call(device);",
      "info" : "ReturnStatement[12820-12857]:ReturnStatement[12902-12939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12919-12976]:Block[13001-13058]"
    }, {
      "left" : "return AdbCallable.this.toString();",
      "right" : "return AdbCallable.this.toString();",
      "info" : "ReturnStatement[12931-12966]:ReturnStatement[13013-13048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13933-13960]:Block[14015-14042]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13941-13954]:ReturnStatement[14023-14036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14024-14414]:Block[14106-14496]"
    }, {
      "left" : "for (String line : lines)",
      "right" : "for (String line : lines)",
      "info" : "EnhancedForStatement[14034-14408]:EnhancedForStatement[14116-14490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14060-14408]:Block[14142-14490]"
    }, {
      "left" : "if (line.length() > 0)",
      "right" : "if (line.length() > 0)",
      "info" : "IfStatement[14074-14398]:IfStatement[14156-14480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14097-14398]:Block[14179-14480]"
    }, {
      "left" : "if (matchForSuccess(line))",
      "right" : "if (matchForSuccess(line))",
      "info" : "IfStatement[14115-14384]:IfStatement[14197-14466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14142-14202]:Block[14224-14284]"
    }, {
      "left" : "errorMessage = null;",
      "right" : "errorMessage = null;",
      "info" : "ExpressionStatement[14164-14184]:ExpressionStatement[14246-14266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14208-14384]:Block[14290-14466]"
    }, {
      "left" : "String err = matchForError(line);",
      "right" : "String err = matchForError(line);",
      "info" : "VariableDeclarationStatement[14230-14263]:VariableDeclarationStatement[14312-14345]"
    }, {
      "left" : "if (err != null)",
      "right" : "if (err != null)",
      "info" : "IfStatement[14284-14366]:IfStatement[14366-14448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14301-14366]:Block[14383-14448]"
    }, {
      "left" : "errorMessage = err;",
      "right" : "errorMessage = err;",
      "info" : "ExpressionStatement[14325-14344]:ExpressionStatement[14407-14426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14463-14492]:Block[14545-14574]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14473-14486]:ReturnStatement[14555-14568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14544-14579]:Block[14626-14661]"
    }, {
      "left" : "return errorMessage;",
      "right" : "return errorMessage;",
      "info" : "ReturnStatement[14553-14573]:ReturnStatement[14635-14655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14963-15157]:Block[15045-15239]"
    }, {
      "left" : "super(\"Command '\" + command + \"' failed with code \" + exitCode + \".  Output:\\n\" + output);",
      "right" : "super(\"Command '\" + command + \"' failed with code \" + exitCode + \".  Output:\\n\" + output);",
      "info" : "SuperConstructorInvocation[14971-15061]:SuperConstructorInvocation[15053-15143]"
    }, {
      "left" : "this.command = command;",
      "right" : "this.command = command;",
      "info" : "ExpressionStatement[15068-15091]:ExpressionStatement[15150-15173]"
    }, {
      "left" : "this.exitCode = exitCode;",
      "right" : "this.exitCode = exitCode;",
      "info" : "ExpressionStatement[15098-15123]:ExpressionStatement[15180-15205]"
    }, {
      "left" : "this.output = output;",
      "right" : "this.output = output;",
      "info" : "ExpressionStatement[15130-15151]:ExpressionStatement[15212-15233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15788-16025]:Block[15870-16107]"
    }, {
      "left" : "CollectingOutputReceiver receiver = new CollectingOutputReceiver();",
      "right" : "CollectingOutputReceiver receiver = new CollectingOutputReceiver();",
      "info" : "VariableDeclarationStatement[15794-15861]:VariableDeclarationStatement[15876-15943]"
    }, {
      "left" : "device.executeShellCommand(command + ECHO_COMMAND_SUFFIX, receiver);",
      "right" : "device.executeShellCommand(command + ECHO_COMMAND_SUFFIX, receiver);",
      "info" : "ExpressionStatement[15866-15934]:ExpressionStatement[15948-16016]"
    }, {
      "left" : "String realOutput = checkReceiverOutput(command, receiver);",
      "right" : "String realOutput = checkReceiverOutput(command, receiver);",
      "info" : "VariableDeclarationStatement[15939-15998]:VariableDeclarationStatement[16021-16080]"
    }, {
      "left" : "return realOutput;",
      "right" : "return realOutput;",
      "info" : "ReturnStatement[16003-16021]:ReturnStatement[16085-16103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16347-16732]:Block[16429-16814]"
    }, {
      "left" : "String fullOutput = receiver.getOutput();",
      "right" : "String fullOutput = receiver.getOutput();",
      "info" : "VariableDeclarationStatement[16353-16394]:VariableDeclarationStatement[16435-16476]"
    }, {
      "left" : "int colon = fullOutput.lastIndexOf(':');",
      "right" : "int colon = fullOutput.lastIndexOf(':');",
      "info" : "VariableDeclarationStatement[16399-16439]:VariableDeclarationStatement[16481-16521]"
    }, {
      "left" : "String realOutput = fullOutput.substring(0, colon);",
      "right" : "String realOutput = fullOutput.substring(0, colon);",
      "info" : "VariableDeclarationStatement[16444-16495]:VariableDeclarationStatement[16526-16577]"
    }, {
      "left" : "String exitCodeStr = fullOutput.substring(colon + 1);",
      "right" : "String exitCodeStr = fullOutput.substring(colon + 1);",
      "info" : "VariableDeclarationStatement[16500-16553]:VariableDeclarationStatement[16582-16635]"
    }, {
      "left" : "int exitCode = Integer.parseInt(exitCodeStr);",
      "right" : "int exitCode = Integer.parseInt(exitCodeStr);",
      "info" : "VariableDeclarationStatement[16558-16603]:VariableDeclarationStatement[16640-16685]"
    }, {
      "left" : "if (exitCode != 0)",
      "right" : "if (exitCode != 0)",
      "info" : "IfStatement[16608-16705]:IfStatement[16690-16787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16627-16705]:Block[16709-16787]"
    }, {
      "left" : "throw new CommandFailedException(command, exitCode, realOutput);",
      "right" : "throw new CommandFailedException(command, exitCode, realOutput);",
      "info" : "ThrowStatement[16635-16699]:ThrowStatement[16717-16781]"
    }, {
      "left" : "return realOutput;",
      "right" : "return realOutput;",
      "info" : "ReturnStatement[16710-16728]:ReturnStatement[16792-16810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17475-18085]:Block[17557-18167]"
    }, {
      "left" : "getBuckEventBus().post(InstallEvent.started(installableApk.getBuildTarget()));",
      "right" : "getBuckEventBus().post(InstallEvent.started(installableApk.getBuildTarget()));",
      "info" : "ExpressionStatement[17481-17559]:ExpressionStatement[17563-17641]"
    }, {
      "left" : "final File apk = installableApk.getApkPath().toFile();",
      "right" : "final File apk = installableApk.getApkPath().toFile();",
      "info" : "VariableDeclarationStatement[17565-17619]:VariableDeclarationStatement[17647-17701]"
    }, {
      "left" : "boolean success = adbCall(\n        new AdbHelper.AdbCallable() {\n          @Override\n          public boolean call(IDevice device) throws Exception {\n            return installApkOnDevice(device, apk, installViaSd);\n          }\n\n          @Override\n          public String toString() {\n            return \"install apk\";\n          }\n        });",
      "right" : "boolean success = adbCall(\n        new AdbHelper.AdbCallable() {\n          @Override\n          public boolean call(IDevice device) throws Exception {\n            return installApkOnDevice(device, apk, installViaSd);\n          }\n\n          @Override\n          public String toString() {\n            return \"install apk\";\n          }\n        });",
      "info" : "VariableDeclarationStatement[17624-17967]:VariableDeclarationStatement[17706-18049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17772-17851]:Block[17854-17933]"
    }, {
      "left" : "return installApkOnDevice(device, apk, installViaSd);",
      "right" : "return installApkOnDevice(device, apk, installViaSd);",
      "info" : "ReturnStatement[17786-17839]:ReturnStatement[17868-17921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17908-17955]:Block[17990-18037]"
    }, {
      "left" : "return \"install apk\";",
      "right" : "return \"install apk\";",
      "info" : "ReturnStatement[17922-17943]:ReturnStatement[18004-18025]"
    }, {
      "left" : "getBuckEventBus().post(InstallEvent.finished(installableApk.getBuildTarget(), success));",
      "right" : "getBuckEventBus().post(InstallEvent.finished(installableApk.getBuildTarget(), success));",
      "info" : "ExpressionStatement[17972-18060]:ExpressionStatement[18054-18142]"
    }, {
      "left" : "return success;",
      "right" : "return success;",
      "info" : "ReturnStatement[18066-18081]:ReturnStatement[18148-18163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18308-19381]:Block[18390-19463]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[18314-18326]:VariableDeclarationStatement[18396-18408]"
    }, {
      "left" : "if (device.isEmulator())",
      "right" : "if (device.isEmulator())",
      "info" : "IfStatement[18331-18621]:IfStatement[18413-18703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18356-18437]:Block[18438-18519]"
    }, {
      "left" : "name = device.getSerialNumber() + \" (\" + device.getAvdName() + \")\";",
      "right" : "name = device.getSerialNumber() + \" (\" + device.getAvdName() + \")\";",
      "info" : "ExpressionStatement[18364-18431]:ExpressionStatement[18446-18513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18443-18621]:Block[18525-18703]"
    }, {
      "left" : "name = device.getSerialNumber();",
      "right" : "name = device.getSerialNumber();",
      "info" : "ExpressionStatement[18451-18483]:ExpressionStatement[18533-18565]"
    }, {
      "left" : "String model = device.getProperty(\"ro.product.model\");",
      "right" : "String model = device.getProperty(\"ro.product.model\");",
      "info" : "VariableDeclarationStatement[18490-18544]:VariableDeclarationStatement[18572-18626]"
    }, {
      "left" : "if (model != null)",
      "right" : "if (model != null)",
      "info" : "IfStatement[18551-18615]:IfStatement[18633-18697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18570-18615]:Block[18652-18697]"
    }, {
      "left" : "name += \" (\" + model + \")\";",
      "right" : "name += \" (\" + model + \")\";",
      "info" : "ExpressionStatement[18580-18607]:ExpressionStatement[18662-18689]"
    }, {
      "left" : "if (!isDeviceTempWritable(device, name))",
      "right" : "if (!isDeviceTempWritable(device, name))",
      "info" : "IfStatement[18627-18695]:IfStatement[18709-18777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18668-18695]:Block[18750-18777]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18676-18689]:ReturnStatement[18758-18771]"
    }, {
      "left" : "getBuckEventBus().post(ConsoleEvent.info(\"Installing apk on %s.\", name));",
      "right" : "getBuckEventBus().post(ConsoleEvent.info(\"Installing apk on %s.\", name));",
      "info" : "ExpressionStatement[18701-18774]:ExpressionStatement[18783-18856]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18779-19377]:TryStatement[18861-19459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18783-19188]:Block[18865-19270]"
    }, {
      "left" : "String reason = null;",
      "right" : "String reason = null;",
      "info" : "VariableDeclarationStatement[18791-18812]:VariableDeclarationStatement[18873-18894]"
    }, {
      "left" : "if (installViaSd)",
      "right" : "if (installViaSd)",
      "info" : "IfStatement[18819-19005]:IfStatement[18901-19087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18837-18921]:Block[18919-19003]"
    }, {
      "left" : "reason = deviceInstallPackageViaSd(device, apk.getAbsolutePath());",
      "right" : "reason = deviceInstallPackageViaSd(device, apk.getAbsolutePath());",
      "info" : "ExpressionStatement[18847-18913]:ExpressionStatement[18929-18995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18927-19005]:Block[19009-19087]"
    }, {
      "left" : "reason = device.installPackage(apk.getAbsolutePath(), true);",
      "right" : "reason = device.installPackage(apk.getAbsolutePath(), true);",
      "info" : "ExpressionStatement[18937-18997]:ExpressionStatement[19019-19079]"
    }, {
      "left" : "if (reason != null)",
      "right" : "if (reason != null)",
      "info" : "IfStatement[19012-19163]:IfStatement[19094-19245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19032-19163]:Block[19114-19245]"
    }, {
      "left" : "console.printBuildFailure(String.format(\"Failed to install apk on %s: %s.\", name, reason));",
      "right" : "console.printBuildFailure(String.format(\"Failed to install apk on %s: %s.\", name, reason));",
      "info" : "ExpressionStatement[19042-19133]:ExpressionStatement[19124-19215]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19142-19155]:ReturnStatement[19224-19237]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19170-19182]:ReturnStatement[19252-19264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19217-19377]:Block[19299-19459]"
    }, {
      "left" : "console.printBuildFailure(String.format(\"Failed to install apk on %s.\", name));",
      "right" : "console.printBuildFailure(String.format(\"Failed to install apk on %s.\", name));",
      "info" : "ExpressionStatement[19225-19304]:ExpressionStatement[19307-19386]"
    }, {
      "left" : "ex.printStackTrace(console.getStdErr());",
      "right" : "ex.printStackTrace(console.getStdErr());",
      "info" : "ExpressionStatement[19311-19351]:ExpressionStatement[19393-19433]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19358-19371]:ReturnStatement[19440-19453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19474-22494]:Block[19556-22576]"
    }, {
      "left" : "StringBuilder loggingInfo = new StringBuilder();",
      "right" : "StringBuilder loggingInfo = new StringBuilder();",
      "info" : "VariableDeclarationStatement[19480-19528]:VariableDeclarationStatement[19562-19610]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19533-21786]:TryStatement[19615-21868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19537-21465]:Block[19619-21547]"
    }, {
      "left" : "String output = null;",
      "right" : "String output = null;",
      "info" : "VariableDeclarationStatement[19545-19566]:VariableDeclarationStatement[19627-19648]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19574-21005]:TryStatement[19656-21087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19578-20739]:Block[19660-20821]"
    }, {
      "left" : "output = executeCommandWithErrorChecking(device, \"ls -l -d /data/local/tmp\");",
      "right" : "output = executeCommandWithErrorChecking(device, \"ls -l -d /data/local/tmp\");",
      "info" : "ExpressionStatement[19588-19665]:ExpressionStatement[19670-19747]"
    }, {
      "left" : "if (!(\n            // Pattern for Android's \"toolbox\" version of ls\n            output.matches(\"\\\\Adrwx....-x +shell +shell.* tmp[\\\\r\\\\n]*\\\\z\") ||\n            // Pattern for CyanogenMod's busybox version of ls\n            output.matches(\"\\\\Adrwx....-x +[0-9]+ +shell +shell.* /data/local/tmp[\\\\r\\\\n]*\\\\z\")))",
      "right" : "if (!(\n            // Pattern for Android's \"toolbox\" version of ls\n            output.matches(\"\\\\Adrwx....-x +shell +shell.* tmp[\\\\r\\\\n]*\\\\z\") ||\n            // Pattern for CyanogenMod's busybox version of ls\n            output.matches(\"\\\\Adrwx....-x +[0-9]+ +shell +shell.* /data/local/tmp[\\\\r\\\\n]*\\\\z\")))",
      "info" : "IfStatement[19674-20187]:IfStatement[19756-20269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19982-20187]:Block[20064-20269]"
    }, {
      "left" : "loggingInfo.append(\n              String.format(\n                  java.util.Locale.ENGLISH,\n                  \"Bad ls output for /data/local/tmp: '%s'\\n\",\n                  output));",
      "right" : "loggingInfo.append(\n              String.format(\n                  java.util.Locale.ENGLISH,\n                  \"Bad ls output for /data/local/tmp: '%s'\\n\",\n                  output));",
      "info" : "ExpressionStatement[19994-20177]:ExpressionStatement[20076-20259]"
    }, {
      "left" : "executeCommandWithErrorChecking(device, \"echo exo > /data/local/tmp/buck-experiment\");",
      "right" : "executeCommandWithErrorChecking(device, \"echo exo > /data/local/tmp/buck-experiment\");",
      "info" : "ExpressionStatement[20197-20283]:ExpressionStatement[20279-20365]"
    }, {
      "left" : "output = executeCommandWithErrorChecking(device, \"cat /data/local/tmp/buck-experiment\");",
      "right" : "output = executeCommandWithErrorChecking(device, \"cat /data/local/tmp/buck-experiment\");",
      "info" : "ExpressionStatement[20292-20380]:ExpressionStatement[20374-20462]"
    }, {
      "left" : "if (!output.matches(\"\\\\Aexo[\\\\r\\\\n]*\\\\z\"))",
      "right" : "if (!output.matches(\"\\\\Aexo[\\\\r\\\\n]*\\\\z\"))",
      "info" : "IfStatement[20389-20643]:IfStatement[20471-20725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20432-20643]:Block[20514-20725]"
    }, {
      "left" : "loggingInfo.append(\n              String.format(\n                  java.util.Locale.ENGLISH,\n                  \"Bad echo/cat output for /data/local/tmp: '%s'\\n\",\n                  output));",
      "right" : "loggingInfo.append(\n              String.format(\n                  java.util.Locale.ENGLISH,\n                  \"Bad echo/cat output for /data/local/tmp: '%s'\\n\",\n                  output));",
      "info" : "ExpressionStatement[20444-20633]:ExpressionStatement[20526-20715]"
    }, {
      "left" : "executeCommandWithErrorChecking(device, \"rm /data/local/tmp/buck-experiment\");",
      "right" : "executeCommandWithErrorChecking(device, \"rm /data/local/tmp/buck-experiment\");",
      "info" : "ExpressionStatement[20652-20730]:ExpressionStatement[20734-20812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20773-21005]:Block[20855-21087]"
    }, {
      "left" : "loggingInfo.append(\n            String.format(\n                java.util.Locale.ENGLISH,\n                \"Failed (%d) '%s':\\n%s\\n\",\n                e.exitCode,\n                e.command,\n                e.output));",
      "right" : "loggingInfo.append(\n            String.format(\n                java.util.Locale.ENGLISH,\n                \"Failed (%d) '%s':\\n%s\\n\",\n                e.exitCode,\n                e.command,\n                e.output));",
      "info" : "ExpressionStatement[20783-20997]:ExpressionStatement[20865-21079]"
    }, {
      "left" : "if (!loggingInfo.toString().isEmpty())",
      "right" : "if (!loggingInfo.toString().isEmpty())",
      "info" : "IfStatement[21013-21458]:IfStatement[21095-21540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21052-21458]:Block[21134-21540]"
    }, {
      "left" : "CollectingOutputReceiver receiver = new CollectingOutputReceiver();",
      "right" : "CollectingOutputReceiver receiver = new CollectingOutputReceiver();",
      "info" : "VariableDeclarationStatement[21062-21129]:VariableDeclarationStatement[21144-21211]"
    }, {
      "left" : "device.executeShellCommand(\"getprop\", receiver);",
      "right" : "device.executeShellCommand(\"getprop\", receiver);",
      "info" : "ExpressionStatement[21138-21186]:ExpressionStatement[21220-21268]"
    }, {
      "left" : "for (String line : com.google.common.base.Splitter.on('\\n').split(receiver.getOutput()))",
      "right" : "for (String line : com.google.common.base.Splitter.on('\\n').split(receiver.getOutput()))",
      "info" : "EnhancedForStatement[21195-21450]:EnhancedForStatement[21277-21532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21284-21450]:Block[21366-21532]"
    }, {
      "left" : "if (line.contains(\"ro.product.model\") || line.contains(\"ro.build.description\"))",
      "right" : "if (line.contains(\"ro.product.model\") || line.contains(\"ro.build.description\"))",
      "info" : "IfStatement[21296-21440]:IfStatement[21378-21522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21376-21440]:Block[21458-21522]"
    }, {
      "left" : "loggingInfo.append(line).append('\\n');",
      "right" : "loggingInfo.append(line).append('\\n');",
      "info" : "ExpressionStatement[21390-21428]:ExpressionStatement[21472-21510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21618-21786]:Block[21700-21868]"
    }, {
      "left" : "console.printBuildFailure(String.format(\"Failed to test /data/local/tmp on %s.\", name));",
      "right" : "console.printBuildFailure(String.format(\"Failed to test /data/local/tmp on %s.\", name));",
      "info" : "ExpressionStatement[21626-21714]:ExpressionStatement[21708-21796]"
    }, {
      "left" : "e.printStackTrace(console.getStdErr());",
      "right" : "e.printStackTrace(console.getStdErr());",
      "info" : "ExpressionStatement[21721-21760]:ExpressionStatement[21803-21842]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21767-21780]:ReturnStatement[21849-21862]"
    }, {
      "left" : "String logMessage = loggingInfo.toString();",
      "right" : "String logMessage = loggingInfo.toString();",
      "info" : "VariableDeclarationStatement[21791-21834]:VariableDeclarationStatement[21873-21916]"
    }, {
      "left" : "if (!logMessage.isEmpty())",
      "right" : "if (!logMessage.isEmpty())",
      "info" : "IfStatement[21839-22472]:IfStatement[21921-22554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21866-22472]:Block[21948-22554]"
    }, {
      "left" : "StringBuilder fullMessage = new StringBuilder();",
      "right" : "StringBuilder fullMessage = new StringBuilder();",
      "info" : "VariableDeclarationStatement[21874-21922]:VariableDeclarationStatement[21956-22004]"
    }, {
      "left" : "fullMessage.append(\"============================================================\\n\");",
      "right" : "fullMessage.append(\"============================================================\\n\");",
      "info" : "ExpressionStatement[21929-22014]:ExpressionStatement[22011-22096]"
    }, {
      "left" : "fullMessage.append('\\n');",
      "right" : "fullMessage.append('\\n');",
      "info" : "ExpressionStatement[22021-22046]:ExpressionStatement[22103-22128]"
    }, {
      "left" : "fullMessage.append(\"HEY! LISTEN!\\n\");",
      "right" : "fullMessage.append(\"HEY! LISTEN!\\n\");",
      "info" : "ExpressionStatement[22053-22090]:ExpressionStatement[22135-22172]"
    }, {
      "left" : "fullMessage.append('\\n');",
      "right" : "fullMessage.append('\\n');",
      "info" : "ExpressionStatement[22097-22122]:ExpressionStatement[22179-22204]"
    }, {
      "left" : "fullMessage.append(\"The /data/local/tmp directory on your device isn't fully-functional.\\n\");",
      "right" : "fullMessage.append(\"The /data/local/tmp directory on your device isn't fully-functional.\\n\");",
      "info" : "ExpressionStatement[22129-22222]:ExpressionStatement[22211-22304]"
    }, {
      "left" : "fullMessage.append(\"Here's some extra info:\\n\");",
      "right" : "fullMessage.append(\"Here's some extra info:\\n\");",
      "info" : "ExpressionStatement[22229-22277]:ExpressionStatement[22311-22359]"
    }, {
      "left" : "fullMessage.append(logMessage);",
      "right" : "fullMessage.append(logMessage);",
      "info" : "ExpressionStatement[22284-22315]:ExpressionStatement[22366-22397]"
    }, {
      "left" : "fullMessage.append(\"============================================================\\n\");",
      "right" : "fullMessage.append(\"============================================================\\n\");",
      "info" : "ExpressionStatement[22322-22407]:ExpressionStatement[22404-22489]"
    }, {
      "left" : "console.getStdErr().println(fullMessage.toString());",
      "right" : "console.getStdErr().println(fullMessage.toString());",
      "info" : "ExpressionStatement[22414-22466]:ExpressionStatement[22496-22548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22478-22490]:ReturnStatement[22560-22572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22647-23311]:Block[22729-23393]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22653-23307]:TryStatement[22735-23389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22657-23234]:Block[22739-23316]"
    }, {
      "left" : "String externalStorage = deviceGetExternalStorage(device);",
      "right" : "String externalStorage = deviceGetExternalStorage(device);",
      "info" : "VariableDeclarationStatement[22715-22773]:VariableDeclarationStatement[22797-22855]"
    }, {
      "left" : "if (externalStorage == null)",
      "right" : "if (externalStorage == null)",
      "info" : "IfStatement[22780-22874]:IfStatement[22862-22956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22809-22874]:Block[22891-22956]"
    }, {
      "left" : "return \"Cannot get external storage location.\";",
      "right" : "return \"Cannot get external storage location.\";",
      "info" : "ReturnStatement[22819-22866]:ReturnStatement[22901-22948]"
    }, {
      "left" : "String remotePackage = String.format(\"%s/%s.apk\", externalStorage, UUID.randomUUID());",
      "right" : "String remotePackage = String.format(\"%s/%s.apk\", externalStorage, UUID.randomUUID());",
      "info" : "VariableDeclarationStatement[22881-22967]:VariableDeclarationStatement[22963-23049]"
    }, {
      "left" : "device.pushFile(apk, remotePackage);",
      "right" : "device.pushFile(apk, remotePackage);",
      "info" : "ExpressionStatement[23002-23038]:ExpressionStatement[23084-23120]"
    }, {
      "left" : "String reason = device.installRemotePackage(remotePackage, true);",
      "right" : "String reason = device.installRemotePackage(remotePackage, true);",
      "info" : "VariableDeclarationStatement[23062-23127]:VariableDeclarationStatement[23144-23209]"
    }, {
      "left" : "device.removeRemotePackage(remotePackage);",
      "right" : "device.removeRemotePackage(remotePackage);",
      "info" : "ExpressionStatement[23165-23207]:ExpressionStatement[23247-23289]"
    }, {
      "left" : "return reason;",
      "right" : "return reason;",
      "info" : "ReturnStatement[23214-23228]:ReturnStatement[23296-23310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23255-23307]:Block[23337-23389]"
    }, {
      "left" : "return String.valueOf(t.getMessage());",
      "right" : "return String.valueOf(t.getMessage());",
      "info" : "ReturnStatement[23263-23301]:ReturnStatement[23345-23383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23566-23912]:Block[23648-23994]"
    }, {
      "left" : "CollectingOutputReceiver receiver = new CollectingOutputReceiver();",
      "right" : "CollectingOutputReceiver receiver = new CollectingOutputReceiver();",
      "info" : "VariableDeclarationStatement[23572-23639]:VariableDeclarationStatement[23654-23721]"
    }, {
      "left" : "device.executeShellCommand(\n        \"echo $EXTERNAL_STORAGE\",\n        receiver,\n        AdbHelper.GETPROP_TIMEOUT,\n        TimeUnit.MILLISECONDS);",
      "right" : "device.executeShellCommand(\n        \"echo $EXTERNAL_STORAGE\",\n        receiver,\n        AdbHelper.GETPROP_TIMEOUT,\n        TimeUnit.MILLISECONDS);",
      "info" : "ExpressionStatement[23644-23790]:ExpressionStatement[23726-23872]"
    }, {
      "left" : "String value = receiver.getOutput().trim();",
      "right" : "String value = receiver.getOutput().trim();",
      "info" : "VariableDeclarationStatement[23795-23838]:VariableDeclarationStatement[23877-23920]"
    }, {
      "left" : "if (value.isEmpty())",
      "right" : "if (value.isEmpty())",
      "info" : "IfStatement[23843-23890]:IfStatement[23925-23972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23864-23890]:Block[23946-23972]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23872-23884]:ReturnStatement[23954-23966]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[23895-23908]:ReturnStatement[23977-23990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24053-26077]:Block[24135-26159]"
    }, {
      "left" : "Path pathToManifest = installableApk.getManifestPath();",
      "right" : "Path pathToManifest = installableApk.getManifestPath();",
      "info" : "VariableDeclarationStatement[24136-24191]:VariableDeclarationStatement[24218-24273]"
    }, {
      "left" : "AndroidManifestReader reader = DefaultAndroidManifestReader.forPath(\n        pathToManifest, context.getProjectFilesystem());",
      "right" : "AndroidManifestReader reader = DefaultAndroidManifestReader.forPath(\n        pathToManifest, context.getProjectFilesystem());",
      "info" : "VariableDeclarationStatement[24196-24321]:VariableDeclarationStatement[24278-24403]"
    }, {
      "left" : "if (activity == null)",
      "right" : "if (activity == null)",
      "info" : "IfStatement[24327-25111]:IfStatement[24409-25193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24349-24940]:Block[24431-25022]"
    }, {
      "left" : "List<String> launcherActivities = reader.getLauncherActivities();",
      "right" : "List<String> launcherActivities = reader.getLauncherActivities();",
      "info" : "VariableDeclarationStatement[24419-24484]:VariableDeclarationStatement[24501-24566]"
    }, {
      "left" : "if (launcherActivities.isEmpty())",
      "right" : "if (launcherActivities.isEmpty())",
      "info" : "IfStatement[24515-24783]:IfStatement[24597-24865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24549-24646]:Block[24631-24728]"
    }, {
      "left" : "console.printBuildFailure(\"No launchable activities found.\");",
      "right" : "console.printBuildFailure(\"No launchable activities found.\");",
      "info" : "ExpressionStatement[24559-24620]:ExpressionStatement[24641-24702]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[24629-24638]:ReturnStatement[24711-24720]"
    }, {
      "left" : "if (launcherActivities.size() > 1)",
      "right" : "if (launcherActivities.size() > 1)",
      "info" : "IfStatement[24652-24783]:IfStatement[24734-24865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24687-24783]:Block[24769-24865]"
    }, {
      "left" : "console.printBuildFailure(\"Default activity is ambiguous.\");",
      "right" : "console.printBuildFailure(\"Default activity is ambiguous.\");",
      "info" : "ExpressionStatement[24697-24757]:ExpressionStatement[24779-24839]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[24766-24775]:ReturnStatement[24848-24857]"
    }, {
      "left" : "activity = reader.getPackage() + \"/\" + launcherActivities.get(0);",
      "right" : "activity = reader.getPackage() + \"/\" + launcherActivities.get(0);",
      "info" : "ExpressionStatement[24869-24934]:ExpressionStatement[24951-25016]"
    }, {
      "left" : "if (!activity.contains(\"/\"))",
      "right" : "if (!activity.contains(\"/\"))",
      "info" : "IfStatement[24946-25111]:IfStatement[25028-25193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24975-25111]:Block[25057-25193]"
    }, {
      "left" : "activity = reader.getPackage() + \"/\" + activity;",
      "right" : "activity = reader.getPackage() + \"/\" + activity;",
      "info" : "ExpressionStatement[25057-25105]:ExpressionStatement[25139-25187]"
    }, {
      "left" : "final String activityToRun = activity;",
      "right" : "final String activityToRun = activity;",
      "info" : "VariableDeclarationStatement[25117-25155]:VariableDeclarationStatement[25199-25237]"
    }, {
      "left" : "PrintStream stdOut = console.getStdOut();",
      "right" : "PrintStream stdOut = console.getStdOut();",
      "info" : "VariableDeclarationStatement[25161-25202]:VariableDeclarationStatement[25243-25284]"
    }, {
      "left" : "stdOut.println(String.format(\"Starting activity %s...\", activityToRun));",
      "right" : "stdOut.println(String.format(\"Starting activity %s...\", activityToRun));",
      "info" : "ExpressionStatement[25207-25279]:ExpressionStatement[25289-25361]"
    }, {
      "left" : "getBuckEventBus().post(StartActivityEvent.started(installableApk.getBuildTarget(),\n        activityToRun));",
      "right" : "getBuckEventBus().post(StartActivityEvent.started(installableApk.getBuildTarget(),\n        activityToRun));",
      "info" : "ExpressionStatement[25285-25392]:ExpressionStatement[25367-25474]"
    }, {
      "left" : "boolean success = adbCall(\n        new AdbHelper.AdbCallable() {\n          @Override\n          public boolean call(IDevice device) throws Exception {\n            String err = deviceStartActivity(device, activityToRun);\n            if (err != null) {\n              console.printBuildFailure(err);\n              return false;\n            } else {\n              return true;\n            }\n          }\n\n          @Override\n          public String toString() {\n            return \"start activity\";\n          }\n        });",
      "right" : "boolean success = adbCall(\n        new AdbHelper.AdbCallable() {\n          @Override\n          public boolean call(IDevice device) throws Exception {\n            String err = deviceStartActivity(device, activityToRun);\n            if (err != null) {\n              console.printBuildFailure(err);\n              return false;\n            } else {\n              return true;\n            }\n          }\n\n          @Override\n          public String toString() {\n            return \"start activity\";\n          }\n        });",
      "info" : "VariableDeclarationStatement[25397-25913]:VariableDeclarationStatement[25479-25995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25545-25794]:Block[25627-25876]"
    }, {
      "left" : "String err = deviceStartActivity(device, activityToRun);",
      "right" : "String err = deviceStartActivity(device, activityToRun);",
      "info" : "VariableDeclarationStatement[25559-25615]:VariableDeclarationStatement[25641-25697]"
    }, {
      "left" : "if (err != null)",
      "right" : "if (err != null)",
      "info" : "IfStatement[25628-25782]:IfStatement[25710-25864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25645-25734]:Block[25727-25816]"
    }, {
      "left" : "console.printBuildFailure(err);",
      "right" : "console.printBuildFailure(err);",
      "info" : "ExpressionStatement[25661-25692]:ExpressionStatement[25743-25774]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25707-25720]:ReturnStatement[25789-25802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25740-25782]:Block[25822-25864]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25756-25768]:ReturnStatement[25838-25850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25851-25901]:Block[25933-25983]"
    }, {
      "left" : "return \"start activity\";",
      "right" : "return \"start activity\";",
      "info" : "ReturnStatement[25865-25889]:ReturnStatement[25947-25971]"
    }, {
      "left" : "getBuckEventBus().post(StartActivityEvent.finished(installableApk.getBuildTarget(),\n        activityToRun,\n        success));",
      "right" : "getBuckEventBus().post(StartActivityEvent.finished(installableApk.getBuildTarget(),\n        activityToRun,\n        success));",
      "info" : "ExpressionStatement[25918-26043]:ExpressionStatement[26000-26125]"
    }, {
      "left" : "return success ? 0 : 1;",
      "right" : "return success ? 0 : 1;",
      "info" : "ReturnStatement[26049-26072]:ReturnStatement[26131-26154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26179-26910]:Block[26261-26992]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26185-26906]:TryStatement[26267-26988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26189-26851]:Block[26271-26933]"
    }, {
      "left" : "AdbHelper.ErrorParsingReceiver receiver = new AdbHelper.ErrorParsingReceiver() {\n        @Override\n        @Nullable\n        protected String matchForError(String line) {\n          // Parses output from shell am to determine if activity was started correctly.\n          return (Pattern.matches(\"^([\\\\w_$.])*(Exception|Error|error).*$\", line) ||\n              line.contains(\"am: not found\")) ? line : null;\n        }\n      };",
      "right" : "AdbHelper.ErrorParsingReceiver receiver = new AdbHelper.ErrorParsingReceiver() {\n        @Override\n        @Nullable\n        protected String matchForError(String line) {\n          // Parses output from shell am to determine if activity was started correctly.\n          return (Pattern.matches(\"^([\\\\w_$.])*(Exception|Error|error).*$\", line) ||\n              line.contains(\"am: not found\")) ? line : null;\n        }\n      };",
      "info" : "VariableDeclarationStatement[26197-26621]:VariableDeclarationStatement[26279-26703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26366-26612]:Block[26448-26694]"
    }, {
      "left" : "return (Pattern.matches(\"^([\\\\w_$.])*(Exception|Error|error).*$\", line) ||\n              line.contains(\"am: not found\")) ? line : null;",
      "right" : "return (Pattern.matches(\"^([\\\\w_$.])*(Exception|Error|error).*$\", line) ||\n              line.contains(\"am: not found\")) ? line : null;",
      "info" : "ReturnStatement[26467-26602]:ReturnStatement[26549-26684]"
    }, {
      "left" : "device.executeShellCommand(\n          String.format(\"am start -n %s\", activityToRun),\n          receiver,\n          AdbHelper.INSTALL_TIMEOUT,\n          TimeUnit.MILLISECONDS);",
      "right" : "device.executeShellCommand(\n          String.format(\"am start -n %s\", activityToRun),\n          receiver,\n          AdbHelper.INSTALL_TIMEOUT,\n          TimeUnit.MILLISECONDS);",
      "info" : "ExpressionStatement[26628-26804]:ExpressionStatement[26710-26886]"
    }, {
      "left" : "return receiver.getErrorMessage();",
      "right" : "return receiver.getErrorMessage();",
      "info" : "ReturnStatement[26811-26845]:ReturnStatement[26893-26927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26872-26906]:Block[26954-26988]"
    }, {
      "left" : "return e.toString();",
      "right" : "return e.toString();",
      "info" : "ReturnStatement[26880-26900]:ReturnStatement[26962-26982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27153-27979]:Block[27235-28061]"
    }, {
      "left" : "Preconditions.checkArgument(AdbHelper.PACKAGE_NAME_PATTERN.matcher(packageName).matches());",
      "right" : "Preconditions.checkArgument(AdbHelper.PACKAGE_NAME_PATTERN.matcher(packageName).matches());",
      "info" : "ExpressionStatement[27159-27250]:ExpressionStatement[27241-27332]"
    }, {
      "left" : "getBuckEventBus().post(UninstallEvent.started(packageName));",
      "right" : "getBuckEventBus().post(UninstallEvent.started(packageName));",
      "info" : "ExpressionStatement[27256-27316]:ExpressionStatement[27338-27398]"
    }, {
      "left" : "boolean success = adbCall(\n        new AdbHelper.AdbCallable() {\n      @Override\n      public boolean call(IDevice device) throws Exception {\n        // Remove any exopackage data as well.  GB doesn't support \"rm -f\", so just ignore output.\n        device.executeShellCommand(\"rm -r /data/local/tmp/exopackage/\" + packageName,\n            NullOutputReceiver.getReceiver());\n        return uninstallApkFromDevice(device, packageName, shouldKeepUserData);\n      }\n\n      @Override\n      public String toString() {\n        return \"uninstall apk\";\n      }\n    });",
      "right" : "boolean success = adbCall(\n        new AdbHelper.AdbCallable() {\n      @Override\n      public boolean call(IDevice device) throws Exception {\n        // Remove any exopackage data as well.  GB doesn't support \"rm -f\", so just ignore output.\n        device.executeShellCommand(\"rm -r /data/local/tmp/exopackage/\" + packageName,\n            NullOutputReceiver.getReceiver());\n        return uninstallApkFromDevice(device, packageName, shouldKeepUserData);\n      }\n\n      @Override\n      public String toString() {\n        return \"uninstall apk\";\n      }\n    });",
      "info" : "VariableDeclarationStatement[27321-27880]:VariableDeclarationStatement[27403-27962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27461-27782]:Block[27543-27864]"
    }, {
      "left" : "device.executeShellCommand(\"rm -r /data/local/tmp/exopackage/\" + packageName,\n            NullOutputReceiver.getReceiver());",
      "right" : "device.executeShellCommand(\"rm -r /data/local/tmp/exopackage/\" + packageName,\n            NullOutputReceiver.getReceiver());",
      "info" : "ExpressionStatement[27570-27694]:ExpressionStatement[27652-27776]"
    }, {
      "left" : "return uninstallApkFromDevice(device, packageName, shouldKeepUserData);",
      "right" : "return uninstallApkFromDevice(device, packageName, shouldKeepUserData);",
      "info" : "ReturnStatement[27703-27774]:ReturnStatement[27785-27856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27831-27872]:Block[27913-27954]"
    }, {
      "left" : "return \"uninstall apk\";",
      "right" : "return \"uninstall apk\";",
      "info" : "ReturnStatement[27841-27864]:ReturnStatement[27923-27946]"
    }, {
      "left" : "getBuckEventBus().post(UninstallEvent.finished(packageName, success));",
      "right" : "getBuckEventBus().post(UninstallEvent.finished(packageName, success));",
      "info" : "ExpressionStatement[27885-27955]:ExpressionStatement[27967-28037]"
    }, {
      "left" : "return success;",
      "right" : "return success;",
      "info" : "ReturnStatement[27960-27975]:ReturnStatement[28042-28057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28370-29490]:Block[28452-29572]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[28376-28388]:VariableDeclarationStatement[28458-28470]"
    }, {
      "left" : "if (device.isEmulator())",
      "right" : "if (device.isEmulator())",
      "info" : "IfStatement[28393-28683]:IfStatement[28475-28765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28418-28499]:Block[28500-28581]"
    }, {
      "left" : "name = device.getSerialNumber() + \" (\" + device.getAvdName() + \")\";",
      "right" : "name = device.getSerialNumber() + \" (\" + device.getAvdName() + \")\";",
      "info" : "ExpressionStatement[28426-28493]:ExpressionStatement[28508-28575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28505-28683]:Block[28587-28765]"
    }, {
      "left" : "name = device.getSerialNumber();",
      "right" : "name = device.getSerialNumber();",
      "info" : "ExpressionStatement[28513-28545]:ExpressionStatement[28595-28627]"
    }, {
      "left" : "String model = device.getProperty(\"ro.product.model\");",
      "right" : "String model = device.getProperty(\"ro.product.model\");",
      "info" : "VariableDeclarationStatement[28552-28606]:VariableDeclarationStatement[28634-28688]"
    }, {
      "left" : "if (model != null)",
      "right" : "if (model != null)",
      "info" : "IfStatement[28613-28677]:IfStatement[28695-28759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28632-28677]:Block[28714-28759]"
    }, {
      "left" : "name += \" (\" + model + \")\";",
      "right" : "name += \" (\" + model + \")\";",
      "info" : "ExpressionStatement[28642-28669]:ExpressionStatement[28724-28751]"
    }, {
      "left" : "PrintStream stdOut = console.getStdOut();",
      "right" : "PrintStream stdOut = console.getStdOut();",
      "info" : "VariableDeclarationStatement[28689-28730]:VariableDeclarationStatement[28771-28812]"
    }, {
      "left" : "stdOut.printf(\"Removing apk from %s.\\n\", name);",
      "right" : "stdOut.printf(\"Removing apk from %s.\\n\", name);",
      "info" : "ExpressionStatement[28735-28782]:ExpressionStatement[28817-28864]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28787-29486]:TryStatement[28869-29568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28791-29293]:Block[28873-29375]"
    }, {
      "left" : "long start = System.currentTimeMillis();",
      "right" : "long start = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[28799-28839]:VariableDeclarationStatement[28881-28921]"
    }, {
      "left" : "String reason = deviceUninstallPackage(device, packageName, keepData);",
      "right" : "String reason = deviceUninstallPackage(device, packageName, keepData);",
      "info" : "VariableDeclarationStatement[28846-28916]:VariableDeclarationStatement[28928-28998]"
    }, {
      "left" : "long end = System.currentTimeMillis();",
      "right" : "long end = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[28923-28961]:VariableDeclarationStatement[29005-29043]"
    }, {
      "left" : "if (reason != null)",
      "right" : "if (reason != null)",
      "info" : "IfStatement[28969-29137]:IfStatement[29051-29219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28989-29137]:Block[29071-29219]"
    }, {
      "left" : "console.printBuildFailure(\n            String.format(\"Failed to uninstall apk from %s: %s.\", name, reason));",
      "right" : "console.printBuildFailure(\n            String.format(\"Failed to uninstall apk from %s: %s.\", name, reason));",
      "info" : "ExpressionStatement[28999-29107]:ExpressionStatement[29081-29189]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29116-29129]:ReturnStatement[29198-29211]"
    }, {
      "left" : "long delta = end - start;",
      "right" : "long delta = end - start;",
      "info" : "VariableDeclarationStatement[29145-29170]:VariableDeclarationStatement[29227-29252]"
    }, {
      "left" : "stdOut.printf(\"Uninstalled apk from %s in %d.%03ds.\\n\", name, delta / 1000, delta % 1000);",
      "right" : "stdOut.printf(\"Uninstalled apk from %s in %d.%03ds.\\n\", name, delta / 1000, delta % 1000);",
      "info" : "ExpressionStatement[29177-29267]:ExpressionStatement[29259-29349]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29274-29286]:ReturnStatement[29356-29368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29322-29486]:Block[29404-29568]"
    }, {
      "left" : "console.printBuildFailure(String.format(\"Failed to uninstall apk from %s.\", name));",
      "right" : "console.printBuildFailure(String.format(\"Failed to uninstall apk from %s.\", name));",
      "info" : "ExpressionStatement[29330-29413]:ExpressionStatement[29412-29495]"
    }, {
      "left" : "ex.printStackTrace(console.getStdErr());",
      "right" : "ex.printStackTrace(console.getStdErr());",
      "info" : "ExpressionStatement[29420-29460]:ExpressionStatement[29502-29542]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29467-29480]:ReturnStatement[29549-29562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29962-30794]:Block[30044-30876]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29968-30790]:TryStatement[30050-30872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29972-30479]:Block[30054-30561]"
    }, {
      "left" : "AdbHelper.ErrorParsingReceiver receiver = new AdbHelper.ErrorParsingReceiver() {\n        @Override\n        @Nullable\n        protected String matchForError(String line) {\n          return line.toLowerCase().contains(\"failure\") ? line : null;\n        }\n      };",
      "right" : "AdbHelper.ErrorParsingReceiver receiver = new AdbHelper.ErrorParsingReceiver() {\n        @Override\n        @Nullable\n        protected String matchForError(String line) {\n          return line.toLowerCase().contains(\"failure\") ? line : null;\n        }\n      };",
      "info" : "VariableDeclarationStatement[29980-30240]:VariableDeclarationStatement[30062-30322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30149-30231]:Block[30231-30313]"
    }, {
      "left" : "return line.toLowerCase().contains(\"failure\") ? line : null;",
      "right" : "return line.toLowerCase().contains(\"failure\") ? line : null;",
      "info" : "ReturnStatement[30161-30221]:ReturnStatement[30243-30303]"
    }, {
      "left" : "device.executeShellCommand(\n          \"pm uninstall \" + (keepData ? \"-k \" : \"\") + packageName,\n          receiver,\n          AdbHelper.INSTALL_TIMEOUT,\n          TimeUnit.MILLISECONDS);",
      "right" : "device.executeShellCommand(\n          \"pm uninstall \" + (keepData ? \"-k \" : \"\") + packageName,\n          receiver,\n          AdbHelper.INSTALL_TIMEOUT,\n          TimeUnit.MILLISECONDS);",
      "info" : "ExpressionStatement[30247-30432]:ExpressionStatement[30329-30514]"
    }, {
      "left" : "return receiver.getErrorMessage();",
      "right" : "return receiver.getErrorMessage();",
      "info" : "ReturnStatement[30439-30473]:ReturnStatement[30521-30555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30507-30551]:Block[30589-30633]"
    }, {
      "left" : "throw new InstallException(e);",
      "right" : "throw new InstallException(e);",
      "info" : "ThrowStatement[30515-30545]:ThrowStatement[30597-30627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30590-30634]:Block[30672-30716]"
    }, {
      "left" : "throw new InstallException(e);",
      "right" : "throw new InstallException(e);",
      "info" : "ThrowStatement[30598-30628]:ThrowStatement[30680-30710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30679-30723]:Block[30761-30805]"
    }, {
      "left" : "throw new InstallException(e);",
      "right" : "throw new InstallException(e);",
      "info" : "ThrowStatement[30687-30717]:ThrowStatement[30769-30799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30746-30790]:Block[30828-30872]"
    }, {
      "left" : "throw new InstallException(e);",
      "right" : "throw new InstallException(e);",
      "info" : "ThrowStatement[30754-30784]:ThrowStatement[30836-30866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30928-31594]:Block[31010-31676]"
    }, {
      "left" : "Path pathToManifest = androidBinaryRule.getManifestPath();",
      "right" : "Path pathToManifest = androidBinaryRule.getManifestPath();",
      "info" : "VariableDeclarationStatement[30934-30992]:VariableDeclarationStatement[31016-31074]"
    }, {
      "left" : "if (!Files.isRegularFile(pathToManifest))",
      "right" : "if (!Files.isRegularFile(pathToManifest))",
      "info" : "IfStatement[31125-31322]:IfStatement[31207-31404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31167-31322]:Block[31249-31404]"
    }, {
      "left" : "throw new HumanReadableException(\n          \"Manifest file %s does not exist, so could not extract package name.\",\n          pathToManifest);",
      "right" : "throw new HumanReadableException(\n          \"Manifest file %s does not exist, so could not extract package name.\",\n          pathToManifest);",
      "info" : "ThrowStatement[31175-31316]:ThrowStatement[31257-31398]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31328-31590]:TryStatement[31410-31672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31332-31462]:Block[31414-31544]"
    }, {
      "left" : "return DefaultAndroidManifestReader.forPath(pathToManifest, context.getProjectFilesystem())\n          .getPackage();",
      "right" : "return DefaultAndroidManifestReader.forPath(pathToManifest, context.getProjectFilesystem())\n          .getPackage();",
      "info" : "ReturnStatement[31340-31456]:ReturnStatement[31422-31538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31485-31590]:Block[31567-31672]"
    }, {
      "left" : "throw new HumanReadableException(\"Could not extract package name from %s\", pathToManifest);",
      "right" : "throw new HumanReadableException(\"Could not extract package name from %s\", pathToManifest);",
      "info" : "ThrowStatement[31493-31584]:ThrowStatement[31575-31666]"
    } ]
  },
  "interFileMappings" : { }
}