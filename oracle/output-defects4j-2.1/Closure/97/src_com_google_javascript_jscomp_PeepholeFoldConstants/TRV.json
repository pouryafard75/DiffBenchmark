{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n      \"JSC_DIVIDE_BY_0_ERROR\",\n      \"Divide by 0\");",
      "right" : "static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n      \"JSC_DIVIDE_BY_0_ERROR\",\n      \"Divide by 0\");",
      "info" : "FieldDeclaration[1047-1169]:FieldDeclaration[1047-1169]"
    }, {
      "left" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "right" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "info" : "FieldDeclaration[1173-1346]:FieldDeclaration[1173-1346]"
    }, {
      "left" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "right" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "info" : "FieldDeclaration[1350-1521]:FieldDeclaration[1350-1521]"
    }, {
      "left" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "right" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "info" : "FieldDeclaration[1525-1705]:FieldDeclaration[1525-1705]"
    }, {
      "left" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "right" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "info" : "FieldDeclaration[1709-1922]:FieldDeclaration[1709-1922]"
    }, {
      "left" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "right" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "info" : "FieldDeclaration[1926-2086]:FieldDeclaration[1926-2086]"
    }, {
      "left" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "right" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "info" : "FieldDeclaration[2090-2250]:FieldDeclaration[2090-2250]"
    }, {
      "left" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "right" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "info" : "FieldDeclaration[2254-2316]:FieldDeclaration[2254-2316]"
    }, {
      "left" : "Node optimizeSubtree(Node subtree)",
      "right" : "Node optimizeSubtree(Node subtree)",
      "info" : "MethodDeclaration[2320-2722]:MethodDeclaration[2320-2722]"
    }, {
      "left" : "private Node tryFoldBinaryOperator(Node subtree)",
      "right" : "private Node tryFoldBinaryOperator(Node subtree)",
      "info" : "MethodDeclaration[2726-4169]:MethodDeclaration[2726-4169]"
    }, {
      "left" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "right" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "info" : "MethodDeclaration[4173-5685]:MethodDeclaration[4173-5685]"
    }, {
      "left" : "private Node tryFoldUnaryOperator(Node n)",
      "right" : "private Node tryFoldUnaryOperator(Node n)",
      "info" : "MethodDeclaration[5689-8678]:MethodDeclaration[5689-8678]"
    }, {
      "left" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "right" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[8682-9604]:MethodDeclaration[8682-9604]"
    }, {
      "left" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[9608-11243]:MethodDeclaration[9608-11243]"
    }, {
      "left" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[11247-13579]:MethodDeclaration[11247-13579]"
    }, {
      "left" : "private Node tryFoldLeftChildAdd(Node n, Node left, Node right)",
      "right" : "private Node tryFoldLeftChildAdd(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[13583-15065]:MethodDeclaration[13583-15065]"
    }, {
      "left" : "private Node tryFoldAddConstant(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAddConstant(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[15069-15781]:MethodDeclaration[15069-15781]"
    }, {
      "left" : "private Node tryFoldArithmetic(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArithmetic(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[15785-17187]:MethodDeclaration[15785-17187]"
    }, {
      "left" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "right" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "info" : "MethodDeclaration[17191-17555]:MethodDeclaration[17191-17555]"
    }, {
      "left" : "private Node tryFoldBitAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldBitAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[17559-18967]:MethodDeclaration[17559-18967]"
    }, {
      "left" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "right" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[20898-26832]:MethodDeclaration[20948-26882]"
    }, {
      "left" : "private Node tryFoldKnownMethods(Node subtree)",
      "right" : "private Node tryFoldKnownMethods(Node subtree)",
      "info" : "MethodDeclaration[26836-27103]:MethodDeclaration[26886-27153]"
    }, {
      "left" : "private Node tryFoldStringIndexOf(Node n)",
      "right" : "private Node tryFoldStringIndexOf(Node n)",
      "info" : "MethodDeclaration[27107-28880]:MethodDeclaration[27157-28930]"
    }, {
      "left" : "private Node tryFoldStringJoin(Node n)",
      "right" : "private Node tryFoldStringJoin(Node n)",
      "info" : "MethodDeclaration[28884-32284]:MethodDeclaration[28934-32334]"
    }, {
      "left" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[32288-33444]:MethodDeclaration[32338-33494]"
    }, {
      "left" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[33448-34478]:MethodDeclaration[33498-34528]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2367-2722]:Block[2367-2722]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT:\n        return tryFoldUnaryOperator(subtree);\n\n      default:\n        return tryFoldBinaryOperator(subtree);\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.NEG:\n      case Token.BITNOT:\n        return tryFoldUnaryOperator(subtree);\n\n      default:\n        return tryFoldBinaryOperator(subtree);\n    }",
      "info" : "SwitchStatement[2373-2718]:SwitchStatement[2373-2718]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[2407-2423]:SwitchCase[2407-2423]"
    }, {
      "left" : "return tryFoldKnownMethods(subtree);",
      "right" : "return tryFoldKnownMethods(subtree);",
      "info" : "ReturnStatement[2432-2468]:ReturnStatement[2432-2468]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[2476-2494]:SwitchCase[2476-2494]"
    }, {
      "left" : "return tryFoldTypeof(subtree);",
      "right" : "return tryFoldTypeof(subtree);",
      "info" : "ReturnStatement[2503-2533]:ReturnStatement[2503-2533]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2541-2556]:SwitchCase[2541-2556]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[2563-2578]:SwitchCase[2563-2578]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[2585-2603]:SwitchCase[2585-2603]"
    }, {
      "left" : "return tryFoldUnaryOperator(subtree);",
      "right" : "return tryFoldUnaryOperator(subtree);",
      "info" : "ReturnStatement[2612-2649]:ReturnStatement[2612-2649]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2657-2665]:SwitchCase[2657-2665]"
    }, {
      "left" : "return tryFoldBinaryOperator(subtree);",
      "right" : "return tryFoldBinaryOperator(subtree);",
      "info" : "ReturnStatement[2674-2712]:ReturnStatement[2674-2712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2775-4169]:Block[2775-4169]"
    }, {
      "left" : "Node left = subtree.getFirstChild();",
      "right" : "Node left = subtree.getFirstChild();",
      "info" : "VariableDeclarationStatement[2781-2817]:VariableDeclarationStatement[2781-2817]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[2823-2870]:IfStatement[2823-2870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2841-2870]:Block[2841-2870]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[2849-2864]:ReturnStatement[2849-2864]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[2876-2904]:VariableDeclarationStatement[2876-2904]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[2910-2958]:IfStatement[2910-2958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2929-2958]:Block[2929-2958]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[2937-2952]:ReturnStatement[2937-2952]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.BITAND:\n      case Token.BITOR:\n        return tryFoldBitAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n        return tryFoldArithmetic(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.BITAND:\n      case Token.BITOR:\n        return tryFoldBitAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n        return tryFoldArithmetic(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "info" : "SwitchStatement[3027-4165]:SwitchStatement[3027-4165]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[3061-3080]:SwitchCase[3061-3080]"
    }, {
      "left" : "return tryFoldGetProp(subtree, left, right);",
      "right" : "return tryFoldGetProp(subtree, left, right);",
      "info" : "ReturnStatement[3089-3133]:ReturnStatement[3089-3133]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[3141-3160]:SwitchCase[3141-3160]"
    }, {
      "left" : "return tryFoldGetElem(subtree, left, right);",
      "right" : "return tryFoldGetElem(subtree, left, right);",
      "info" : "ReturnStatement[3169-3213]:ReturnStatement[3169-3213]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[3221-3243]:SwitchCase[3221-3243]"
    }, {
      "left" : "return tryFoldInstanceof(subtree, left, right);",
      "right" : "return tryFoldInstanceof(subtree, left, right);",
      "info" : "ReturnStatement[3252-3299]:ReturnStatement[3252-3299]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[3307-3322]:SwitchCase[3307-3322]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3329-3343]:SwitchCase[3329-3343]"
    }, {
      "left" : "return tryFoldAndOr(subtree, left, right);",
      "right" : "return tryFoldAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3352-3394]:ReturnStatement[3352-3394]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[3402-3420]:SwitchCase[3402-3420]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[3427-3444]:SwitchCase[3427-3444]"
    }, {
      "left" : "return tryFoldBitAndOr(subtree, left, right);",
      "right" : "return tryFoldBitAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3453-3498]:ReturnStatement[3453-3498]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[3506-3521]:SwitchCase[3506-3521]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[3528-3543]:SwitchCase[3528-3543]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[3550-3566]:SwitchCase[3550-3566]"
    }, {
      "left" : "return tryFoldShift(subtree, left, right);",
      "right" : "return tryFoldShift(subtree, left, right);",
      "info" : "ReturnStatement[3575-3617]:ReturnStatement[3575-3617]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[3625-3643]:SwitchCase[3625-3643]"
    }, {
      "left" : "return tryFoldAssign(subtree, left, right);",
      "right" : "return tryFoldAssign(subtree, left, right);",
      "info" : "ReturnStatement[3652-3695]:ReturnStatement[3652-3695]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[3703-3718]:SwitchCase[3703-3718]"
    }, {
      "left" : "return tryFoldAdd(subtree, left, right);",
      "right" : "return tryFoldAdd(subtree, left, right);",
      "info" : "ReturnStatement[3727-3767]:ReturnStatement[3727-3767]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[3775-3790]:SwitchCase[3775-3790]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[3797-3812]:SwitchCase[3797-3812]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[3819-3834]:SwitchCase[3819-3834]"
    }, {
      "left" : "return tryFoldArithmetic(subtree, left, right);",
      "right" : "return tryFoldArithmetic(subtree, left, right);",
      "info" : "ReturnStatement[3843-3890]:ReturnStatement[3843-3890]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[3898-3912]:SwitchCase[3898-3912]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[3919-3933]:SwitchCase[3919-3933]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[3940-3954]:SwitchCase[3940-3954]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[3961-3975]:SwitchCase[3961-3975]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[3982-3996]:SwitchCase[3982-3996]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[4003-4017]:SwitchCase[4003-4017]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[4024-4040]:SwitchCase[4024-4040]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[4047-4063]:SwitchCase[4047-4063]"
    }, {
      "left" : "return tryFoldComparison(subtree, left, right);",
      "right" : "return tryFoldComparison(subtree, left, right);",
      "info" : "ReturnStatement[4072-4119]:ReturnStatement[4072-4119]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4127-4135]:SwitchCase[4127-4135]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[4144-4159]:ReturnStatement[4144-4159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4348-5685]:Block[4348-5685]"
    }, {
      "left" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "right" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "info" : "ExpressionStatement[4354-4428]:ExpressionStatement[4354-4428]"
    }, {
      "left" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "right" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[4434-4489]:VariableDeclarationStatement[4434-4489]"
    }, {
      "left" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode))",
      "right" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode))",
      "info" : "IfStatement[4494-4602]:IfStatement[4494-4602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4562-4602]:Block[4562-4602]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[4570-4596]:ReturnStatement[4570-4596]"
    }, {
      "left" : "String typeNameString = null;",
      "right" : "String typeNameString = null;",
      "info" : "VariableDeclarationStatement[4608-4637]:VariableDeclarationStatement[4608-4637]"
    }, {
      "left" : "switch (argumentNode.getType()) {\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "right" : "switch (argumentNode.getType()) {\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "info" : "SwitchStatement[4643-5426]:SwitchStatement[4643-5426]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[4683-4701]:SwitchCase[4683-4701]"
    }, {
      "left" : "typeNameString = \"string\";",
      "right" : "typeNameString = \"string\";",
      "info" : "ExpressionStatement[4710-4736]:ExpressionStatement[4710-4736]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4745-4751]:BreakStatement[4745-4751]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[4758-4776]:SwitchCase[4758-4776]"
    }, {
      "left" : "typeNameString = \"number\";",
      "right" : "typeNameString = \"number\";",
      "info" : "ExpressionStatement[4785-4811]:ExpressionStatement[4785-4811]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4820-4826]:BreakStatement[4820-4826]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4833-4849]:SwitchCase[4833-4849]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4856-4873]:SwitchCase[4856-4873]"
    }, {
      "left" : "typeNameString = \"boolean\";",
      "right" : "typeNameString = \"boolean\";",
      "info" : "ExpressionStatement[4882-4909]:ExpressionStatement[4882-4909]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4918-4924]:BreakStatement[4918-4924]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[4931-4947]:SwitchCase[4931-4947]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[4954-4975]:SwitchCase[4954-4975]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[4982-5002]:SwitchCase[4982-5002]"
    }, {
      "left" : "typeNameString = \"object\";",
      "right" : "typeNameString = \"object\";",
      "info" : "ExpressionStatement[5011-5037]:ExpressionStatement[5011-5037]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5046-5052]:BreakStatement[5046-5052]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[5059-5075]:SwitchCase[5059-5075]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[5084-5113]:ExpressionStatement[5084-5113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5122-5128]:BreakStatement[5122-5128]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5135-5151]:SwitchCase[5135-5151]"
    }, {
      "left" : "if (\"undefined\".equals(argumentNode.getString()))",
      "right" : "if (\"undefined\".equals(argumentNode.getString()))",
      "info" : "IfStatement[5304-5405]:IfStatement[5304-5405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5354-5405]:Block[5354-5405]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[5366-5395]:ExpressionStatement[5366-5395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5414-5420]:BreakStatement[5414-5420]"
    }, {
      "left" : "if (typeNameString != null)",
      "right" : "if (typeNameString != null)",
      "info" : "IfStatement[5432-5649]:IfStatement[5432-5649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5460-5649]:Block[5460-5649]"
    }, {
      "left" : "Node newNode = Node.newString(typeNameString);",
      "right" : "Node newNode = Node.newString(typeNameString);",
      "info" : "VariableDeclarationStatement[5468-5514]:VariableDeclarationStatement[5468-5514]"
    }, {
      "left" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "right" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "info" : "ExpressionStatement[5521-5594]:ExpressionStatement[5521-5594]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[5601-5620]:ExpressionStatement[5601-5620]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[5628-5643]:ReturnStatement[5628-5643]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[5655-5681]:ReturnStatement[5655-5681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5731-8678]:Block[5731-8678]"
    }, {
      "left" : "Preconditions.checkState(n.hasOneChild());",
      "right" : "Preconditions.checkState(n.hasOneChild());",
      "info" : "ExpressionStatement[5737-5779]:ExpressionStatement[5737-5779]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5785-5815]:VariableDeclarationStatement[5785-5815]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5820-5848]:VariableDeclarationStatement[5820-5848]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[5854-5895]:IfStatement[5854-5895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5872-5895]:Block[5872-5895]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[5880-5889]:ReturnStatement[5880-5889]"
    }, {
      "left" : "if (NodeUtil.isExpressionNode(parent))",
      "right" : "if (NodeUtil.isExpressionNode(parent))",
      "info" : "IfStatement[6155-6375]:IfStatement[6155-6375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6194-6375]:Block[6194-6375]"
    }, {
      "left" : "parent.replaceChild(n, n.removeFirstChild());",
      "right" : "parent.replaceChild(n, n.removeFirstChild());",
      "info" : "ExpressionStatement[6279-6324]:ExpressionStatement[6279-6324]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6331-6350]:ExpressionStatement[6331-6350]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6357-6369]:ReturnStatement[6357-6369]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "info" : "VariableDeclarationStatement[6381-6435]:VariableDeclarationStatement[6381-6435]"
    }, {
      "left" : "if (leftVal == TernaryValue.UNKNOWN)",
      "right" : "if (leftVal == TernaryValue.UNKNOWN)",
      "info" : "IfStatement[6440-6500]:IfStatement[6440-6500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6477-6500]:Block[6477-6500]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6485-6494]:ReturnStatement[6485-6494]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "info" : "SwitchStatement[6506-8674]:SwitchStatement[6506-8674]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6535-6550]:SwitchCase[6535-6550]"
    }, {
      "left" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "right" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "info" : "VariableDeclarationStatement[6559-6623]:VariableDeclarationStatement[6559-6623]"
    }, {
      "left" : "Node replacementNode = new Node(result);",
      "right" : "Node replacementNode = new Node(result);",
      "info" : "VariableDeclarationStatement[6632-6672]:VariableDeclarationStatement[6632-6672]"
    }, {
      "left" : "parent.replaceChild(n, replacementNode);",
      "right" : "parent.replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[6681-6721]:ExpressionStatement[6681-6721]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6730-6749]:ExpressionStatement[6730-6749]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[6758-6781]:ReturnStatement[6758-6781]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[6788-6803]:SwitchCase[6788-6803]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6812-7740]:TryStatement[6812-7740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6816-7483]:Block[6816-7483]"
    }, {
      "left" : "if (left.getType() == Token.NAME)",
      "right" : "if (left.getType() == Token.NAME)",
      "info" : "IfStatement[6828-7269]:IfStatement[6828-7269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6862-7269]:Block[6862-7269]"
    }, {
      "left" : "if (left.getString().equals(\"Infinity\"))",
      "right" : "if (left.getString().equals(\"Infinity\"))",
      "info" : "IfStatement[6876-7257]:IfStatement[6876-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6917-7026]:Block[6917-7026]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7003-7012]:ReturnStatement[7003-7012]"
    }, {
      "left" : "if (left.getString().equals(\"NaN\"))",
      "right" : "if (left.getString().equals(\"NaN\"))",
      "info" : "IfStatement[7032-7257]:IfStatement[7032-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7068-7257]:Block[7068-7257]"
    }, {
      "left" : "n.removeChild(left);",
      "right" : "n.removeChild(left);",
      "info" : "ExpressionStatement[7118-7138]:ExpressionStatement[7118-7138]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[7153-7182]:ExpressionStatement[7153-7182]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7197-7216]:ExpressionStatement[7197-7216]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[7231-7243]:ReturnStatement[7231-7243]"
    }, {
      "left" : "double negNum = -left.getDouble();",
      "right" : "double negNum = -left.getDouble();",
      "info" : "VariableDeclarationStatement[7281-7315]:VariableDeclarationStatement[7281-7315]"
    }, {
      "left" : "Node negNumNode = Node.newNumber(negNum);",
      "right" : "Node negNumNode = Node.newNumber(negNum);",
      "info" : "VariableDeclarationStatement[7327-7368]:VariableDeclarationStatement[7327-7368]"
    }, {
      "left" : "parent.replaceChild(n, negNumNode);",
      "right" : "parent.replaceChild(n, negNumNode);",
      "info" : "ExpressionStatement[7379-7414]:ExpressionStatement[7379-7414]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7425-7444]:ExpressionStatement[7425-7444]"
    }, {
      "left" : "return negNumNode;",
      "right" : "return negNumNode;",
      "info" : "ReturnStatement[7455-7473]:ReturnStatement[7455-7473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7525-7740]:Block[7525-7740]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[7669-7710]:ExpressionStatement[7669-7710]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7721-7730]:ReturnStatement[7721-7730]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[7747-7765]:SwitchCase[7747-7765]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7774-8631]:TryStatement[7774-8631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7778-8374]:Block[7778-8374]"
    }, {
      "left" : "double val = left.getDouble();",
      "right" : "double val = left.getDouble();",
      "info" : "VariableDeclarationStatement[7790-7820]:VariableDeclarationStatement[7790-7820]"
    }, {
      "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "info" : "IfStatement[7831-8364]:IfStatement[7831-8364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7889-8268]:Block[7889-8268]"
    }, {
      "left" : "int intVal = (int) val;",
      "right" : "int intVal = (int) val;",
      "info" : "VariableDeclarationStatement[7903-7926]:VariableDeclarationStatement[7903-7926]"
    }, {
      "left" : "if (intVal == val)",
      "right" : "if (intVal == val)",
      "info" : "IfStatement[7939-8256]:IfStatement[7939-8256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7958-8156]:Block[7958-8156]"
    }, {
      "left" : "Node notIntValNode = Node.newNumber(~intVal);",
      "right" : "Node notIntValNode = Node.newNumber(~intVal);",
      "info" : "VariableDeclarationStatement[7974-8019]:VariableDeclarationStatement[7974-8019]"
    }, {
      "left" : "parent.replaceChild(n, notIntValNode);",
      "right" : "parent.replaceChild(n, notIntValNode);",
      "info" : "ExpressionStatement[8034-8072]:ExpressionStatement[8034-8072]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8087-8106]:ExpressionStatement[8087-8106]"
    }, {
      "left" : "return notIntValNode;",
      "right" : "return notIntValNode;",
      "info" : "ReturnStatement[8121-8142]:ReturnStatement[8121-8142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8162-8256]:Block[8162-8256]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[8178-8218]:ExpressionStatement[8178-8218]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8233-8242]:ReturnStatement[8233-8242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8274-8364]:Block[8274-8364]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[8288-8330]:ExpressionStatement[8288-8330]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8343-8352]:ReturnStatement[8343-8352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8416-8631]:Block[8416-8631]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[8560-8601]:ExpressionStatement[8560-8601]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8612-8621]:ReturnStatement[8612-8621]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8640-8648]:SwitchCase[8640-8648]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8659-8668]:ReturnStatement[8659-8668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8844-9604]:Block[8844-9604]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "info" : "ExpressionStatement[8850-8911]:ExpressionStatement[8850-8911]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left)\n        && !NodeUtil.mayHaveSideEffects(right))",
      "right" : "if (NodeUtil.isLiteralValue(left)\n        && !NodeUtil.mayHaveSideEffects(right))",
      "info" : "IfStatement[9000-9585]:IfStatement[9000-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9082-9585]:Block[9082-9585]"
    }, {
      "left" : "Node replacementNode = null;",
      "right" : "Node replacementNode = null;",
      "info" : "VariableDeclarationStatement[9091-9119]:VariableDeclarationStatement[9091-9119]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(left))",
      "right" : "if (NodeUtil.isImmutableValue(left))",
      "info" : "IfStatement[9127-9417]:IfStatement[9127-9417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9164-9271]:Block[9164-9271]"
    }, {
      "left" : "replacementNode = new Node(Token.FALSE);",
      "right" : "replacementNode = new Node(Token.FALSE);",
      "info" : "ExpressionStatement[9223-9263]:ExpressionStatement[9223-9263]"
    }, {
      "left" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "right" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "info" : "IfStatement[9277-9417]:IfStatement[9277-9417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9360-9417]:Block[9360-9417]"
    }, {
      "left" : "replacementNode = new Node(Token.TRUE);",
      "right" : "replacementNode = new Node(Token.TRUE);",
      "info" : "ExpressionStatement[9370-9409]:ExpressionStatement[9370-9409]"
    }, {
      "left" : "if (replacementNode != null)",
      "right" : "if (replacementNode != null)",
      "info" : "IfStatement[9425-9579]:IfStatement[9425-9579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9454-9579]:Block[9454-9579]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacementNode);",
      "right" : "n.getParent().replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[9464-9511]:ExpressionStatement[9464-9511]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9520-9539]:ExpressionStatement[9520-9539]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[9548-9571]:ReturnStatement[9548-9571]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9591-9600]:ReturnStatement[9591-9600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9666-11243]:Block[9666-11243]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "info" : "ExpressionStatement[9672-9729]:ExpressionStatement[9672-9729]"
    }, {
      "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "info" : "IfStatement[9780-9933]:IfStatement[9780-9933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9873-9933]:Block[9873-9933]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9918-9927]:ReturnStatement[9918-9927]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(left))",
      "right" : "if (NodeUtil.mayHaveSideEffects(left))",
      "info" : "IfStatement[9939-10001]:IfStatement[9939-10001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9978-10001]:Block[9978-10001]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9986-9995]:ReturnStatement[9986-9995]"
    }, {
      "left" : "Node leftChild = right.getFirstChild();",
      "right" : "Node leftChild = right.getFirstChild();",
      "info" : "VariableDeclarationStatement[10007-10046]:VariableDeclarationStatement[10007-10046]"
    }, {
      "left" : "if (!areNodesEqualForInlining(left, leftChild))",
      "right" : "if (!areNodesEqualForInlining(left, leftChild))",
      "info" : "IfStatement[10051-10122]:IfStatement[10051-10122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10099-10122]:Block[10099-10122]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10107-10116]:ReturnStatement[10107-10116]"
    }, {
      "left" : "int newType = -1;",
      "right" : "int newType = -1;",
      "info" : "VariableDeclarationStatement[10128-10145]:VariableDeclarationStatement[10128-10145]"
    }, {
      "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[10150-11036]:SwitchStatement[10150-11036]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[10183-10198]:SwitchCase[10183-10198]"
    }, {
      "left" : "newType = Token.ASSIGN_ADD;",
      "right" : "newType = Token.ASSIGN_ADD;",
      "info" : "ExpressionStatement[10207-10234]:ExpressionStatement[10207-10234]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10243-10249]:BreakStatement[10243-10249]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[10256-10274]:SwitchCase[10256-10274]"
    }, {
      "left" : "newType = Token.ASSIGN_BITAND;",
      "right" : "newType = Token.ASSIGN_BITAND;",
      "info" : "ExpressionStatement[10283-10313]:ExpressionStatement[10283-10313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10322-10328]:BreakStatement[10322-10328]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[10335-10352]:SwitchCase[10335-10352]"
    }, {
      "left" : "newType = Token.ASSIGN_BITOR;",
      "right" : "newType = Token.ASSIGN_BITOR;",
      "info" : "ExpressionStatement[10361-10390]:ExpressionStatement[10361-10390]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10399-10405]:BreakStatement[10399-10405]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[10412-10430]:SwitchCase[10412-10430]"
    }, {
      "left" : "newType = Token.ASSIGN_BITXOR;",
      "right" : "newType = Token.ASSIGN_BITXOR;",
      "info" : "ExpressionStatement[10439-10469]:ExpressionStatement[10439-10469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10478-10484]:BreakStatement[10478-10484]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[10491-10506]:SwitchCase[10491-10506]"
    }, {
      "left" : "newType = Token.ASSIGN_DIV;",
      "right" : "newType = Token.ASSIGN_DIV;",
      "info" : "ExpressionStatement[10515-10542]:ExpressionStatement[10515-10542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10551-10557]:BreakStatement[10551-10557]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[10564-10579]:SwitchCase[10564-10579]"
    }, {
      "left" : "newType = Token.ASSIGN_LSH;",
      "right" : "newType = Token.ASSIGN_LSH;",
      "info" : "ExpressionStatement[10588-10615]:ExpressionStatement[10588-10615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10624-10630]:BreakStatement[10624-10630]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[10637-10652]:SwitchCase[10637-10652]"
    }, {
      "left" : "newType = Token.ASSIGN_MOD;",
      "right" : "newType = Token.ASSIGN_MOD;",
      "info" : "ExpressionStatement[10661-10688]:ExpressionStatement[10661-10688]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10697-10703]:BreakStatement[10697-10703]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[10710-10725]:SwitchCase[10710-10725]"
    }, {
      "left" : "newType = Token.ASSIGN_MUL;",
      "right" : "newType = Token.ASSIGN_MUL;",
      "info" : "ExpressionStatement[10734-10761]:ExpressionStatement[10734-10761]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10770-10776]:BreakStatement[10770-10776]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[10783-10798]:SwitchCase[10783-10798]"
    }, {
      "left" : "newType = Token.ASSIGN_RSH;",
      "right" : "newType = Token.ASSIGN_RSH;",
      "info" : "ExpressionStatement[10807-10834]:ExpressionStatement[10807-10834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10843-10849]:BreakStatement[10843-10849]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[10856-10871]:SwitchCase[10856-10871]"
    }, {
      "left" : "newType = Token.ASSIGN_SUB;",
      "right" : "newType = Token.ASSIGN_SUB;",
      "info" : "ExpressionStatement[10880-10907]:ExpressionStatement[10880-10907]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10916-10922]:BreakStatement[10916-10922]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[10929-10945]:SwitchCase[10929-10945]"
    }, {
      "left" : "newType = Token.ASSIGN_URSH;",
      "right" : "newType = Token.ASSIGN_URSH;",
      "info" : "ExpressionStatement[10954-10982]:ExpressionStatement[10954-10982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10991-10997]:BreakStatement[10991-10997]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11004-11012]:SwitchCase[11004-11012]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11021-11030]:ReturnStatement[11021-11030]"
    }, {
      "left" : "Node newNode = new Node(newType,\n        left.detachFromParent(), right.getLastChild().detachFromParent());",
      "right" : "Node newNode = new Node(newType,\n        left.detachFromParent(), right.getLastChild().detachFromParent());",
      "info" : "VariableDeclarationStatement[11042-11149]:VariableDeclarationStatement[11042-11149]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[11154-11193]:ExpressionStatement[11154-11193]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11199-11218]:ExpressionStatement[11199-11218]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[11224-11239]:ReturnStatement[11224-11239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11348-13579]:Block[11348-13579]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[11354-11382]:VariableDeclarationStatement[11354-11382]"
    }, {
      "left" : "Node result = null;",
      "right" : "Node result = null;",
      "info" : "VariableDeclarationStatement[11388-11407]:VariableDeclarationStatement[11388-11407]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[11413-11436]:VariableDeclarationStatement[11413-11436]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getBooleanValue(left);",
      "info" : "VariableDeclarationStatement[11442-11496]:VariableDeclarationStatement[11442-11496]"
    }, {
      "left" : "if (leftVal != TernaryValue.UNKNOWN)",
      "right" : "if (leftVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[11502-13215]:IfStatement[11502-13215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11539-11881]:Block[11539-11881]"
    }, {
      "left" : "boolean lval = leftVal.toBoolean(true);",
      "right" : "boolean lval = leftVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[11547-11586]:VariableDeclarationStatement[11547-11586]"
    }, {
      "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "info" : "IfStatement[11676-11875]:IfStatement[11676-11875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11746-11779]:Block[11746-11779]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[11756-11770]:ExpressionStatement[11756-11770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11785-11875]:Block[11785-11875]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[11852-11867]:ExpressionStatement[11852-11867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11887-13215]:Block[11887-13215]"
    }, {
      "left" : "TernaryValue rightVal = NodeUtil.getBooleanValue(right);",
      "right" : "TernaryValue rightVal = NodeUtil.getBooleanValue(right);",
      "info" : "VariableDeclarationStatement[11895-11951]:VariableDeclarationStatement[11895-11951]"
    }, {
      "left" : "if (rightVal != TernaryValue.UNKNOWN)",
      "right" : "if (rightVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[11958-13209]:IfStatement[11958-13209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11996-13209]:Block[11996-13209]"
    }, {
      "left" : "int pt = parent.getType();",
      "right" : "int pt = parent.getType();",
      "info" : "VariableDeclarationStatement[12512-12538]:VariableDeclarationStatement[12512-12538]"
    }, {
      "left" : "if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||\n          (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||\n          (pt == Token.HOOK && parent.getFirstChild() == n))",
      "right" : "if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||\n          (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||\n          (pt == Token.HOOK && parent.getFirstChild() == n))",
      "info" : "IfStatement[12545-13201]:IfStatement[12545-13201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12746-13201]:Block[12746-13201]"
    }, {
      "left" : "boolean rval = rightVal.toBoolean(true);",
      "right" : "boolean rval = rightVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[12756-12796]:VariableDeclarationStatement[12756-12796]"
    }, {
      "left" : "if (type == Token.OR && !rval ||\n            type == Token.AND && rval)",
      "right" : "if (type == Token.OR && !rval ||\n            type == Token.AND && rval)",
      "info" : "IfStatement[12863-13191]:IfStatement[12863-13191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12935-12971]:Block[12935-12971]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[12947-12961]:ExpressionStatement[12947-12961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12977-13191]:Block[12977-13191]"
    }, {
      "left" : "if (!NodeUtil.mayHaveSideEffects(left))",
      "right" : "if (!NodeUtil.mayHaveSideEffects(left))",
      "info" : "IfStatement[13100-13181]:IfStatement[13100-13181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13140-13181]:Block[13140-13181]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[13154-13169]:ExpressionStatement[13154-13169]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[13386-13575]:IfStatement[13386-13575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13406-13546]:Block[13406-13546]"
    }, {
      "left" : "n.removeChild(result);",
      "right" : "n.removeChild(result);",
      "info" : "ExpressionStatement[13432-13454]:ExpressionStatement[13432-13454]"
    }, {
      "left" : "parent.replaceChild(n, result);",
      "right" : "parent.replaceChild(n, result);",
      "info" : "ExpressionStatement[13461-13492]:ExpressionStatement[13461-13492]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13499-13518]:ExpressionStatement[13499-13518]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[13526-13540]:ReturnStatement[13526-13540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13552-13575]:Block[13552-13575]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13560-13569]:ReturnStatement[13560-13569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14181-15065]:Block[14181-15065]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(right) &&\n        left.getType() == Token.ADD &&\n        left.getChildCount() == 2)",
      "right" : "if (NodeUtil.isLiteralValue(right) &&\n        left.getType() == Token.ADD &&\n        left.getChildCount() == 2)",
      "info" : "IfStatement[14188-15046]:IfStatement[14188-15046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14300-15046]:Block[14300-15046]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[14309-14340]:VariableDeclarationStatement[14309-14340]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[14347-14370]:VariableDeclarationStatement[14347-14370]"
    }, {
      "left" : "if (lr.getType() != Token.STRING)",
      "right" : "if (lr.getType() != Token.STRING)",
      "info" : "IfStatement[14604-14665]:IfStatement[14604-14665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14638-14665]:Block[14638-14665]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14648-14657]:ReturnStatement[14648-14657]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(lr);",
      "right" : "String leftString = NodeUtil.getStringValue(lr);",
      "info" : "VariableDeclarationStatement[14673-14721]:VariableDeclarationStatement[14673-14721]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[14728-14780]:VariableDeclarationStatement[14728-14780]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[14787-15040]:IfStatement[14787-15040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14834-15040]:Block[14834-15040]"
    }, {
      "left" : "left.removeChild(ll);",
      "right" : "left.removeChild(ll);",
      "info" : "ExpressionStatement[14844-14865]:ExpressionStatement[14844-14865]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[14874-14915]:VariableDeclarationStatement[14874-14915]"
    }, {
      "left" : "n.replaceChild(left, ll);",
      "right" : "n.replaceChild(left, ll);",
      "info" : "ExpressionStatement[14924-14949]:ExpressionStatement[14924-14949]"
    }, {
      "left" : "n.replaceChild(right, Node.newString(result));",
      "right" : "n.replaceChild(right, Node.newString(result));",
      "info" : "ExpressionStatement[14958-15004]:ExpressionStatement[14958-15004]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15013-15032]:ExpressionStatement[15013-15032]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15052-15061]:ReturnStatement[15052-15061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15196-15781]:Block[15196-15781]"
    }, {
      "left" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "right" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "info" : "IfStatement[15202-15762]:IfStatement[15202-15762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15281-15673]:Block[15281-15673]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[15312-15362]:VariableDeclarationStatement[15312-15362]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[15369-15421]:VariableDeclarationStatement[15369-15421]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[15428-15667]:IfStatement[15428-15667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15475-15667]:Block[15475-15667]"
    }, {
      "left" : "Node newStringNode = Node.newString(leftString + rightString);",
      "right" : "Node newStringNode = Node.newString(leftString + rightString);",
      "info" : "VariableDeclarationStatement[15485-15547]:VariableDeclarationStatement[15485-15547]"
    }, {
      "left" : "n.getParent().replaceChild(n, newStringNode);",
      "right" : "n.getParent().replaceChild(n, newStringNode);",
      "info" : "ExpressionStatement[15556-15601]:ExpressionStatement[15556-15601]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15610-15629]:ExpressionStatement[15610-15629]"
    }, {
      "left" : "return newStringNode;",
      "right" : "return newStringNode;",
      "info" : "ReturnStatement[15638-15659]:ReturnStatement[15638-15659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15679-15762]:Block[15679-15762]"
    }, {
      "left" : "return tryFoldArithmetic(n, left, right);",
      "right" : "return tryFoldArithmetic(n, left, right);",
      "info" : "ReturnStatement[15715-15756]:ReturnStatement[15715-15756]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15768-15777]:ReturnStatement[15768-15777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15904-17187]:Block[15904-17187]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[15910-17169]:IfStatement[15910-17169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15989-17169]:Block[15989-17169]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[15997-16011]:VariableDeclarationStatement[15997-16011]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[16018-16049]:VariableDeclarationStatement[16018-16049]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[16056-16088]:VariableDeclarationStatement[16056-16088]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.ADD:\n          result = lval + rval;\n          break;\n        case Token.SUB:\n          result = lval - rval;\n          break;\n        case Token.MUL:\n          result = lval * rval;\n          break;\n        case Token.DIV:\n          if (rval == 0) {\n            error(DIVIDE_BY_0_ERROR, right);\n            return n;\n          }\n          result = lval / rval;\n          break;\n        default:\n          throw new Error(\"Unknown arithmetic operator\");\n      }",
      "right" : "switch (n.getType()) {\n        case Token.ADD:\n          result = lval + rval;\n          break;\n        case Token.SUB:\n          result = lval - rval;\n          break;\n        case Token.MUL:\n          result = lval * rval;\n          break;\n        case Token.DIV:\n          if (rval == 0) {\n            error(DIVIDE_BY_0_ERROR, right);\n            return n;\n          }\n          result = lval / rval;\n          break;\n        default:\n          throw new Error(\"Unknown arithmetic operator\");\n      }",
      "info" : "SwitchStatement[16096-16599]:SwitchStatement[16096-16599]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[16127-16142]:SwitchCase[16127-16142]"
    }, {
      "left" : "result = lval + rval;",
      "right" : "result = lval + rval;",
      "info" : "ExpressionStatement[16153-16174]:ExpressionStatement[16153-16174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16185-16191]:BreakStatement[16185-16191]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[16200-16215]:SwitchCase[16200-16215]"
    }, {
      "left" : "result = lval - rval;",
      "right" : "result = lval - rval;",
      "info" : "ExpressionStatement[16226-16247]:ExpressionStatement[16226-16247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16258-16264]:BreakStatement[16258-16264]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[16273-16288]:SwitchCase[16273-16288]"
    }, {
      "left" : "result = lval * rval;",
      "right" : "result = lval * rval;",
      "info" : "ExpressionStatement[16299-16320]:ExpressionStatement[16299-16320]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16331-16337]:BreakStatement[16331-16337]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[16346-16361]:SwitchCase[16346-16361]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[16372-16467]:IfStatement[16372-16467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16387-16467]:Block[16387-16467]"
    }, {
      "left" : "error(DIVIDE_BY_0_ERROR, right);",
      "right" : "error(DIVIDE_BY_0_ERROR, right);",
      "info" : "ExpressionStatement[16401-16433]:ExpressionStatement[16401-16433]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[16446-16455]:ReturnStatement[16446-16455]"
    }, {
      "left" : "result = lval / rval;",
      "right" : "result = lval / rval;",
      "info" : "ExpressionStatement[16478-16499]:ExpressionStatement[16478-16499]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16510-16516]:BreakStatement[16510-16516]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16525-16533]:SwitchCase[16525-16533]"
    }, {
      "left" : "throw new Error(\"Unknown arithmetic operator\");",
      "right" : "throw new Error(\"Unknown arithmetic operator\");",
      "info" : "ThrowStatement[16544-16591]:ThrowStatement[16544-16591]"
    }, {
      "left" : "if (String.valueOf(result).length() <=\n          String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n          // Do not try to fold arithmetic for numbers > 2^53. After that\n          // point, fixed-point math starts to break down and become inaccurate.\n          Math.abs(result) <= MAX_FOLD_NUMBER)",
      "right" : "if (String.valueOf(result).length() <=\n          String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n          // Do not try to fold arithmetic for numbers > 2^53. After that\n          // point, fixed-point math starts to break down and become inaccurate.\n          Math.abs(result) <= MAX_FOLD_NUMBER)",
      "info" : "IfStatement[16681-17164]:IfStatement[16681-17164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17002-17164]:Block[17002-17164]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[17012-17052]:VariableDeclarationStatement[17012-17052]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[17061-17102]:ExpressionStatement[17061-17102]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17111-17130]:ExpressionStatement[17111-17130]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[17139-17156]:ReturnStatement[17139-17156]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17174-17183]:ReturnStatement[17174-17183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17249-17555]:Block[17249-17555]"
    }, {
      "left" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "right" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "info" : "ExpressionStatement[17255-17312]:ExpressionStatement[17255-17312]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right))",
      "right" : "if (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right))",
      "info" : "IfStatement[17318-17551]:IfStatement[17318-17551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17387-17461]:Block[17387-17461]"
    }, {
      "left" : "return tryFoldAddConstant(node, left, right);",
      "right" : "return tryFoldAddConstant(node, left, right);",
      "info" : "ReturnStatement[17410-17455]:ReturnStatement[17410-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17467-17551]:Block[17467-17551]"
    }, {
      "left" : "return tryFoldLeftChildAdd(node, left, right);",
      "right" : "return tryFoldLeftChildAdd(node, left, right);",
      "info" : "ReturnStatement[17499-17545]:ReturnStatement[17499-17545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17676-18967]:Block[17676-18967]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BITAND\n        || n.getType() == Token.BITOR);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BITAND\n        || n.getType() == Token.BITOR);",
      "info" : "ExpressionStatement[17682-17777]:ExpressionStatement[17682-17777]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[17783-18948]:IfStatement[17783-18948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17862-18948]:Block[17862-18948]"
    }, {
      "left" : "double resultDouble;",
      "right" : "double resultDouble;",
      "info" : "VariableDeclarationStatement[17870-17890]:VariableDeclarationStatement[17870-17890]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[17897-17928]:VariableDeclarationStatement[17897-17928]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[17935-17967]:VariableDeclarationStatement[17935-17967]"
    }, {
      "left" : "if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n          rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE)",
      "right" : "if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE ||\n          rval < Integer.MIN_VALUE || rval > Integer.MAX_VALUE)",
      "info" : "IfStatement[18090-18316]:IfStatement[18090-18316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18214-18316]:Block[18214-18316]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18299-18308]:ReturnStatement[18299-18308]"
    }, {
      "left" : "int lvalInt = (int) lval;",
      "right" : "int lvalInt = (int) lval;",
      "info" : "VariableDeclarationStatement[18361-18386]:VariableDeclarationStatement[18361-18386]"
    }, {
      "left" : "if (lvalInt != lval)",
      "right" : "if (lvalInt != lval)",
      "info" : "IfStatement[18393-18441]:IfStatement[18393-18441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18414-18441]:Block[18414-18441]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18424-18433]:ReturnStatement[18424-18433]"
    }, {
      "left" : "int rvalInt = (int) rval;",
      "right" : "int rvalInt = (int) rval;",
      "info" : "VariableDeclarationStatement[18449-18474]:VariableDeclarationStatement[18449-18474]"
    }, {
      "left" : "if (rvalInt != rval)",
      "right" : "if (rvalInt != rval)",
      "info" : "IfStatement[18481-18529]:IfStatement[18481-18529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18502-18529]:Block[18502-18529]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18512-18521]:ReturnStatement[18512-18521]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.BITAND:\n          resultDouble = lvalInt & rvalInt;\n          break;\n        case Token.BITOR:\n          resultDouble = lvalInt | rvalInt;\n          break;\n        default:\n          throw new Error(\"Unknown bitwise operator\");\n      }",
      "right" : "switch (n.getType()) {\n        case Token.BITAND:\n          resultDouble = lvalInt & rvalInt;\n          break;\n        case Token.BITOR:\n          resultDouble = lvalInt | rvalInt;\n          break;\n        default:\n          throw new Error(\"Unknown bitwise operator\");\n      }",
      "info" : "SwitchStatement[18537-18814]:SwitchStatement[18537-18814]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[18568-18586]:SwitchCase[18568-18586]"
    }, {
      "left" : "resultDouble = lvalInt & rvalInt;",
      "right" : "resultDouble = lvalInt & rvalInt;",
      "info" : "ExpressionStatement[18597-18630]:ExpressionStatement[18597-18630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18641-18647]:BreakStatement[18641-18647]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[18656-18673]:SwitchCase[18656-18673]"
    }, {
      "left" : "resultDouble = lvalInt | rvalInt;",
      "right" : "resultDouble = lvalInt | rvalInt;",
      "info" : "ExpressionStatement[18684-18717]:ExpressionStatement[18684-18717]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18728-18734]:BreakStatement[18728-18734]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18743-18751]:SwitchCase[18743-18751]"
    }, {
      "left" : "throw new Error(\"Unknown bitwise operator\");",
      "right" : "throw new Error(\"Unknown bitwise operator\");",
      "info" : "ThrowStatement[18762-18806]:ThrowStatement[18762-18806]"
    }, {
      "left" : "Node newNumber = Node.newNumber(resultDouble);",
      "right" : "Node newNumber = Node.newNumber(resultDouble);",
      "info" : "VariableDeclarationStatement[18822-18868]:VariableDeclarationStatement[18822-18868]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[18875-18916]:ExpressionStatement[18875-18916]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18923-18942]:ExpressionStatement[18923-18942]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18954-18963]:ReturnStatement[18954-18963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21049-26832]:Block[21099-26882]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right))",
      "right" : "if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right))",
      "info" : "IfStatement[21055-21283]:IfStatement[21105-21333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21126-21283]:Block[21176-21333]"
    }, {
      "left" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "right" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "info" : "IfStatement[21194-21277]:IfStatement[21244-21327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21250-21277]:Block[21300-21327]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21260-21269]:ReturnStatement[21310-21319]"
    }, {
      "left" : "int op = n.getType();",
      "right" : "int op = n.getType();",
      "info" : "VariableDeclarationStatement[21289-21310]:VariableDeclarationStatement[21339-21360]"
    }, {
      "left" : "boolean result;",
      "right" : "boolean result;",
      "info" : "VariableDeclarationStatement[21315-21330]:VariableDeclarationStatement[21365-21380]"
    }, {
      "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right);",
      "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right);",
      "info" : "VariableDeclarationStatement[21412-21466]:VariableDeclarationStatement[21462-21516]"
    }, {
      "left" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild())));",
      "right" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild())));",
      "info" : "VariableDeclarationStatement[21471-21690]:VariableDeclarationStatement[21521-21740]"
    }, {
      "left" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          boolean nullRight = (Token.NULL == right.getType());\n          boolean equivalent = undefinedRight || nullRight;\n          switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = (op == Token.EQ);\n          break;\n        }\n        // fall through\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        // fall through\n      case Token.THIS:\n        int tt = right.getType();\n        if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      case Token.NAME:\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            boolean nullRight = (Token.NULL == right.getType());\n            boolean equivalent = undefinedRight || nullRight;\n            switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "right" : "switch (left.getType()) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild())) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          boolean nullRight = (Token.NULL == right.getType());\n          boolean equivalent = undefinedRight || nullRight;\n          switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }\n        }\n        break;\n\n      case Token.NULL:\n        if (undefinedRight) {\n          result = (op == Token.EQ);\n          break;\n        }\n        // fall through\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        // fall through\n      case Token.THIS:\n        int tt = right.getType();\n        if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = false;\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        double lv = left.getDouble();\n        double rv = right.getDouble();\n\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      case Token.NAME:\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            boolean nullRight = (Token.NULL == right.getType());\n            boolean equivalent = undefinedRight || nullRight;\n            switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "info" : "SwitchStatement[21696-26674]:SwitchStatement[21746-26724]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21728-21744]:SwitchCase[21778-21794]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left.getFirstChild()))",
      "right" : "if (!NodeUtil.isLiteralValue(left.getFirstChild()))",
      "info" : "IfStatement[21753-22662]:IfStatement[21803-22712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21805-21836]:Block[21855-21886]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21817-21826]:ReturnStatement[21867-21876]"
    }, {
      "left" : "if (!rightLiteral)",
      "right" : "if (!rightLiteral)",
      "info" : "IfStatement[21842-22662]:IfStatement[21892-22712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21861-21892]:Block[21911-21942]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21873-21882]:ReturnStatement[21923-21932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21898-22662]:Block[21948-22712]"
    }, {
      "left" : "boolean nullRight = (Token.NULL == right.getType());",
      "right" : "boolean nullRight = (Token.NULL == right.getType());",
      "info" : "VariableDeclarationStatement[21910-21962]:VariableDeclarationStatement[21960-22012]"
    }, {
      "left" : "boolean equivalent = undefinedRight || nullRight;",
      "right" : "boolean equivalent = undefinedRight || nullRight;",
      "info" : "VariableDeclarationStatement[21973-22022]:VariableDeclarationStatement[22023-22072]"
    }, {
      "left" : "switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }",
      "right" : "switch (op) {\n            case Token.EQ:\n              // undefined is only equal to\n              result = equivalent;\n              break;\n            case Token.NE:\n              result = !equivalent;\n              break;\n            case Token.SHEQ:\n              result = undefinedRight;\n              break;\n            case Token.SHNE:\n              result = !undefinedRight;\n              break;\n            case Token.LT:\n            case Token.GT:\n            case Token.LE:\n            case Token.GE:\n              result = false;\n              break;\n            default:\n              return n;\n          }",
      "info" : "SwitchStatement[22033-22652]:SwitchStatement[22083-22702]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[22059-22073]:SwitchCase[22109-22123]"
    }, {
      "left" : "result = equivalent;",
      "right" : "result = equivalent;",
      "info" : "ExpressionStatement[22132-22152]:ExpressionStatement[22182-22202]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22167-22173]:BreakStatement[22217-22223]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[22186-22200]:SwitchCase[22236-22250]"
    }, {
      "left" : "result = !equivalent;",
      "right" : "result = !equivalent;",
      "info" : "ExpressionStatement[22215-22236]:ExpressionStatement[22265-22286]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22251-22257]:BreakStatement[22301-22307]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[22270-22286]:SwitchCase[22320-22336]"
    }, {
      "left" : "result = undefinedRight;",
      "right" : "result = undefinedRight;",
      "info" : "ExpressionStatement[22301-22325]:ExpressionStatement[22351-22375]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22340-22346]:BreakStatement[22390-22396]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[22359-22375]:SwitchCase[22409-22425]"
    }, {
      "left" : "result = !undefinedRight;",
      "right" : "result = !undefinedRight;",
      "info" : "ExpressionStatement[22390-22415]:ExpressionStatement[22440-22465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22430-22436]:BreakStatement[22480-22486]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[22449-22463]:SwitchCase[22499-22513]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[22476-22490]:SwitchCase[22526-22540]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[22503-22517]:SwitchCase[22553-22567]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[22530-22544]:SwitchCase[22580-22594]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[22559-22574]:ExpressionStatement[22609-22624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22589-22595]:BreakStatement[22639-22645]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22608-22616]:SwitchCase[22658-22666]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[22631-22640]:ReturnStatement[22681-22690]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22671-22677]:BreakStatement[22721-22727]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[22685-22701]:SwitchCase[22735-22751]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[22710-22795]:IfStatement[22760-22845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22730-22795]:Block[22780-22845]"
    }, {
      "left" : "result = (op == Token.EQ);",
      "right" : "result = (op == Token.EQ);",
      "info" : "ExpressionStatement[22742-22768]:ExpressionStatement[22792-22818]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22779-22785]:BreakStatement[22829-22835]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[22826-22842]:SwitchCase[22876-22892]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[22849-22866]:SwitchCase[22899-22916]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[22875-22949]:IfStatement[22925-22999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22895-22949]:Block[22945-22999]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[22907-22922]:ExpressionStatement[22957-22972]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22933-22939]:BreakStatement[22983-22989]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[22980-22996]:SwitchCase[23030-23046]"
    }, {
      "left" : "int tt = right.getType();",
      "right" : "int tt = right.getType();",
      "info" : "VariableDeclarationStatement[23005-23030]:VariableDeclarationStatement[23055-23080]"
    }, {
      "left" : "if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)",
      "right" : "if (tt != Token.THIS &&\n            tt != Token.TRUE &&\n            tt != Token.FALSE &&\n            tt != Token.NULL)",
      "info" : "IfStatement[23039-23189]:IfStatement[23089-23239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23158-23189]:Block[23208-23239]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23170-23179]:ReturnStatement[23220-23229]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getType() == right.getType();\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = left.getType() != right.getType();\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[23198-23552]:SwitchStatement[23248-23602]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[23222-23238]:SwitchCase[23272-23288]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[23249-23263]:SwitchCase[23299-23313]"
    }, {
      "left" : "result = left.getType() == right.getType();",
      "right" : "result = left.getType() == right.getType();",
      "info" : "ExpressionStatement[23276-23319]:ExpressionStatement[23326-23369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23332-23338]:BreakStatement[23382-23388]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[23350-23366]:SwitchCase[23400-23416]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[23377-23391]:SwitchCase[23427-23441]"
    }, {
      "left" : "result = left.getType() != right.getType();",
      "right" : "result = left.getType() != right.getType();",
      "info" : "ExpressionStatement[23404-23447]:ExpressionStatement[23454-23497]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23460-23466]:BreakStatement[23510-23516]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23478-23486]:SwitchCase[23528-23536]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23499-23508]:ReturnStatement[23549-23558]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23561-23567]:BreakStatement[23611-23617]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[23575-23593]:SwitchCase[23625-23643]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[23602-23676]:IfStatement[23652-23726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23622-23676]:Block[23672-23726]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[23634-23649]:ExpressionStatement[23684-23699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23660-23666]:BreakStatement[23710-23716]"
    }, {
      "left" : "if (Token.STRING != right.getType())",
      "right" : "if (Token.STRING != right.getType())",
      "info" : "IfStatement[23685-23793]:IfStatement[23735-23843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23722-23793]:Block[23772-23843]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23734-23743]:ReturnStatement[23784-23793]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[23802-24175]:SwitchStatement[23852-24225]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[23826-23842]:SwitchCase[23876-23892]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[23853-23867]:SwitchCase[23903-23917]"
    }, {
      "left" : "result = left.getString().equals(right.getString());",
      "right" : "result = left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[23880-23932]:ExpressionStatement[23930-23982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23945-23951]:BreakStatement[23995-24001]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[23963-23979]:SwitchCase[24013-24029]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[23990-24004]:SwitchCase[24040-24054]"
    }, {
      "left" : "result = !left.getString().equals(right.getString());",
      "right" : "result = !left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[24017-24070]:ExpressionStatement[24067-24120]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24083-24089]:BreakStatement[24133-24139]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24101-24109]:SwitchCase[24151-24159]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24122-24131]:ReturnStatement[24172-24181]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24184-24190]:BreakStatement[24234-24240]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[24198-24216]:SwitchCase[24248-24266]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[24225-24299]:IfStatement[24275-24349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24245-24299]:Block[24295-24349]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[24257-24272]:ExpressionStatement[24307-24322]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24283-24289]:BreakStatement[24333-24339]"
    }, {
      "left" : "if (Token.NUMBER != right.getType())",
      "right" : "if (Token.NUMBER != right.getType())",
      "info" : "IfStatement[24308-24416]:IfStatement[24358-24466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24345-24416]:Block[24395-24466]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24357-24366]:ReturnStatement[24407-24416]"
    }, {
      "left" : "double lv = left.getDouble();",
      "right" : "double lv = left.getDouble();",
      "info" : "VariableDeclarationStatement[24425-24454]:VariableDeclarationStatement[24475-24504]"
    }, {
      "left" : "double rv = right.getDouble();",
      "right" : "double rv = right.getDouble();",
      "info" : "VariableDeclarationStatement[24463-24493]:VariableDeclarationStatement[24513-24543]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ: result = lv == rv; break;\n          case Token.SHNE:\n          case Token.NE: result = lv != rv; break;\n          case Token.LE: result = lv <= rv; break;\n          case Token.LT: result = lv <  rv; break;\n          case Token.GE: result = lv >= rv; break;\n          case Token.GT: result = lv >  rv; break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[24503-24952]:SwitchStatement[24553-25002]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[24527-24543]:SwitchCase[24577-24593]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[24554-24568]:SwitchCase[24604-24618]"
    }, {
      "left" : "result = lv == rv;",
      "right" : "result = lv == rv;",
      "info" : "ExpressionStatement[24569-24587]:ExpressionStatement[24619-24637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24588-24594]:BreakStatement[24638-24644]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[24605-24621]:SwitchCase[24655-24671]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[24632-24646]:SwitchCase[24682-24696]"
    }, {
      "left" : "result = lv != rv;",
      "right" : "result = lv != rv;",
      "info" : "ExpressionStatement[24647-24665]:ExpressionStatement[24697-24715]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24666-24672]:BreakStatement[24716-24722]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[24683-24697]:SwitchCase[24733-24747]"
    }, {
      "left" : "result = lv <= rv;",
      "right" : "result = lv <= rv;",
      "info" : "ExpressionStatement[24698-24716]:ExpressionStatement[24748-24766]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24717-24723]:BreakStatement[24767-24773]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[24734-24748]:SwitchCase[24784-24798]"
    }, {
      "left" : "result = lv <  rv;",
      "right" : "result = lv <  rv;",
      "info" : "ExpressionStatement[24749-24767]:ExpressionStatement[24799-24817]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24768-24774]:BreakStatement[24818-24824]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[24785-24799]:SwitchCase[24835-24849]"
    }, {
      "left" : "result = lv >= rv;",
      "right" : "result = lv >= rv;",
      "info" : "ExpressionStatement[24800-24818]:ExpressionStatement[24850-24868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24819-24825]:BreakStatement[24869-24875]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[24836-24850]:SwitchCase[24886-24900]"
    }, {
      "left" : "result = lv >  rv;",
      "right" : "result = lv >  rv;",
      "info" : "ExpressionStatement[24851-24869]:ExpressionStatement[24901-24919]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24870-24876]:BreakStatement[24920-24926]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24887-24895]:SwitchCase[24937-24945]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24908-24917]:ReturnStatement[24958-24967]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24961-24967]:BreakStatement[25011-25017]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[24975-24991]:SwitchCase[25025-25041]"
    }, {
      "left" : "if (rightLiteral)",
      "right" : "if (rightLiteral)",
      "info" : "IfStatement[25000-25968]:IfStatement[25050-26018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25018-25968]:Block[25068-26018]"
    }, {
      "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "info" : "VariableDeclarationStatement[25030-25093]:VariableDeclarationStatement[25080-25143]"
    }, {
      "left" : "if (undefinedLeft)",
      "right" : "if (undefinedLeft)",
      "info" : "IfStatement[25104-25958]:IfStatement[25154-26008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25123-25958]:Block[25173-26008]"
    }, {
      "left" : "boolean nullRight = (Token.NULL == right.getType());",
      "right" : "boolean nullRight = (Token.NULL == right.getType());",
      "info" : "VariableDeclarationStatement[25137-25189]:VariableDeclarationStatement[25187-25239]"
    }, {
      "left" : "boolean equivalent = undefinedRight || nullRight;",
      "right" : "boolean equivalent = undefinedRight || nullRight;",
      "info" : "VariableDeclarationStatement[25202-25251]:VariableDeclarationStatement[25252-25301]"
    }, {
      "left" : "switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }",
      "right" : "switch (op) {\n              case Token.EQ:\n                // undefined is only equal to\n                result = equivalent;\n                break;\n              case Token.NE:\n                result = !equivalent;\n                break;\n              case Token.SHEQ:\n                result = undefinedRight;\n                break;\n              case Token.SHNE:\n                result = !undefinedRight;\n                break;\n              case Token.LT:\n              case Token.GT:\n              case Token.LE:\n              case Token.GE:\n                result = false;\n                break;\n              default:\n                return n;\n            }",
      "info" : "SwitchStatement[25264-25927]:SwitchStatement[25314-25977]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[25292-25306]:SwitchCase[25342-25356]"
    }, {
      "left" : "result = equivalent;",
      "right" : "result = equivalent;",
      "info" : "ExpressionStatement[25369-25389]:ExpressionStatement[25419-25439]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25406-25412]:BreakStatement[25456-25462]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[25427-25441]:SwitchCase[25477-25491]"
    }, {
      "left" : "result = !equivalent;",
      "right" : "result = !equivalent;",
      "info" : "ExpressionStatement[25458-25479]:ExpressionStatement[25508-25529]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25496-25502]:BreakStatement[25546-25552]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[25517-25533]:SwitchCase[25567-25583]"
    }, {
      "left" : "result = undefinedRight;",
      "right" : "result = undefinedRight;",
      "info" : "ExpressionStatement[25550-25574]:ExpressionStatement[25600-25624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25591-25597]:BreakStatement[25641-25647]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[25612-25628]:SwitchCase[25662-25678]"
    }, {
      "left" : "result = !undefinedRight;",
      "right" : "result = !undefinedRight;",
      "info" : "ExpressionStatement[25645-25670]:ExpressionStatement[25695-25720]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25687-25693]:BreakStatement[25737-25743]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[25708-25722]:SwitchCase[25758-25772]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[25737-25751]:SwitchCase[25787-25801]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[25766-25780]:SwitchCase[25816-25830]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[25795-25809]:SwitchCase[25845-25859]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[25826-25841]:ExpressionStatement[25876-25891]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25858-25864]:BreakStatement[25908-25914]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25879-25887]:SwitchCase[25929-25937]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25904-25913]:ReturnStatement[25954-25963]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25940-25946]:BreakStatement[25990-25996]"
    }, {
      "left" : "if (Token.NAME != right.getType())",
      "right" : "if (Token.NAME != right.getType())",
      "info" : "IfStatement[25978-26084]:IfStatement[26028-26134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26013-26084]:Block[26063-26134]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26025-26034]:ReturnStatement[26075-26084]"
    }, {
      "left" : "String ln = left.getString();",
      "right" : "String ln = left.getString();",
      "info" : "VariableDeclarationStatement[26093-26122]:VariableDeclarationStatement[26143-26172]"
    }, {
      "left" : "String rn = right.getString();",
      "right" : "String rn = right.getString();",
      "info" : "VariableDeclarationStatement[26131-26161]:VariableDeclarationStatement[26181-26211]"
    }, {
      "left" : "if (!ln.equals(rn))",
      "right" : "if (!ln.equals(rn))",
      "info" : "IfStatement[26170-26250]:IfStatement[26220-26300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26190-26250]:Block[26240-26300]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26202-26211]:ReturnStatement[26252-26261]"
    }, {
      "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[26260-26571]:SwitchStatement[26310-26621]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[26409-26423]:SwitchCase[26459-26473]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[26434-26448]:SwitchCase[26484-26498]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[26461-26476]:ExpressionStatement[26511-26526]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26489-26495]:BreakStatement[26539-26545]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26506-26514]:SwitchCase[26556-26564]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26527-26536]:ReturnStatement[26577-26586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26580-26586]:BreakStatement[26630-26636]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26594-26602]:SwitchCase[26644-26652]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26659-26668]:ReturnStatement[26709-26718]"
    }, {
      "left" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "right" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "info" : "VariableDeclarationStatement[26680-26739]:VariableDeclarationStatement[26730-26789]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[26744-26783]:ExpressionStatement[26794-26833]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26788-26807]:ExpressionStatement[26838-26857]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[26813-26828]:ReturnStatement[26863-26878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26883-27103]:Block[26933-27153]"
    }, {
      "left" : "subtree = tryFoldStringJoin(subtree);",
      "right" : "subtree = tryFoldStringJoin(subtree);",
      "info" : "ExpressionStatement[26944-26981]:ExpressionStatement[26994-27031]"
    }, {
      "left" : "if (subtree.getType() == Token.CALL)",
      "right" : "if (subtree.getType() == Token.CALL)",
      "info" : "IfStatement[26987-27078]:IfStatement[27037-27128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27024-27078]:Block[27074-27128]"
    }, {
      "left" : "subtree = tryFoldStringIndexOf(subtree);",
      "right" : "subtree = tryFoldStringIndexOf(subtree);",
      "info" : "ExpressionStatement[27032-27072]:ExpressionStatement[27082-27122]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[27084-27099]:ReturnStatement[27134-27149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27289-28880]:Block[27339-28930]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[27295-27350]:ExpressionStatement[27345-27400]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27356-27386]:VariableDeclarationStatement[27406-27436]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[27392-27433]:IfStatement[27442-27483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27410-27433]:Block[27460-27483]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27418-27427]:ReturnStatement[27468-27477]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[27439-27467]:VariableDeclarationStatement[27489-27517]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[27473-27515]:IfStatement[27523-27565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27492-27515]:Block[27542-27565]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27500-27509]:ReturnStatement[27550-27559]"
    }, {
      "left" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "right" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "info" : "IfStatement[27521-27612]:IfStatement[27571-27662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27589-27612]:Block[27639-27662]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27597-27606]:ReturnStatement[27647-27656]"
    }, {
      "left" : "Node lstringNode = left.getFirstChild();",
      "right" : "Node lstringNode = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[27618-27658]:VariableDeclarationStatement[27668-27708]"
    }, {
      "left" : "Node functionName = lstringNode.getNext();",
      "right" : "Node functionName = lstringNode.getNext();",
      "info" : "VariableDeclarationStatement[27663-27705]:VariableDeclarationStatement[27713-27755]"
    }, {
      "left" : "if ((lstringNode.getType() != Token.STRING) ||\n        (!functionName.getString().equals(\"indexOf\") &&\n        !functionName.getString().equals(\"lastIndexOf\")))",
      "right" : "if ((lstringNode.getType() != Token.STRING) ||\n        (!functionName.getString().equals(\"indexOf\") &&\n        !functionName.getString().equals(\"lastIndexOf\")))",
      "info" : "IfStatement[27711-27895]:IfStatement[27761-27945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27872-27895]:Block[27922-27945]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27880-27889]:ReturnStatement[27930-27939]"
    }, {
      "left" : "String lstring = NodeUtil.getStringValue(lstringNode);",
      "right" : "String lstring = NodeUtil.getStringValue(lstringNode);",
      "info" : "VariableDeclarationStatement[27901-27955]:VariableDeclarationStatement[27951-28005]"
    }, {
      "left" : "boolean isIndexOf = functionName.getString().equals(\"indexOf\");",
      "right" : "boolean isIndexOf = functionName.getString().equals(\"indexOf\");",
      "info" : "VariableDeclarationStatement[27960-28023]:VariableDeclarationStatement[28010-28073]"
    }, {
      "left" : "Node firstArg = right;",
      "right" : "Node firstArg = right;",
      "info" : "VariableDeclarationStatement[28028-28050]:VariableDeclarationStatement[28078-28100]"
    }, {
      "left" : "Node secondArg = right.getNext();",
      "right" : "Node secondArg = right.getNext();",
      "info" : "VariableDeclarationStatement[28055-28088]:VariableDeclarationStatement[28105-28138]"
    }, {
      "left" : "String searchValue = NodeUtil.getStringValue(firstArg);",
      "right" : "String searchValue = NodeUtil.getStringValue(firstArg);",
      "info" : "VariableDeclarationStatement[28093-28148]:VariableDeclarationStatement[28143-28198]"
    }, {
      "left" : "if (searchValue == null)",
      "right" : "if (searchValue == null)",
      "info" : "IfStatement[28196-28244]:IfStatement[28246-28294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28221-28244]:Block[28271-28294]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28229-28238]:ReturnStatement[28279-28288]"
    }, {
      "left" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
      "right" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
      "info" : "VariableDeclarationStatement[28249-28298]:VariableDeclarationStatement[28299-28348]"
    }, {
      "left" : "if (secondArg != null)",
      "right" : "if (secondArg != null)",
      "info" : "IfStatement[28303-28594]:IfStatement[28353-28644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28326-28594]:Block[28376-28644]"
    }, {
      "left" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
      "right" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
      "info" : "IfStatement[28411-28588]:IfStatement[28461-28638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28497-28524]:Block[28547-28574]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28507-28516]:ReturnStatement[28557-28566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28530-28588]:Block[28580-28638]"
    }, {
      "left" : "fromIndex = (int) secondArg.getDouble();",
      "right" : "fromIndex = (int) secondArg.getDouble();",
      "info" : "ExpressionStatement[28540-28580]:ExpressionStatement[28590-28630]"
    }, {
      "left" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
      "right" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
      "info" : "VariableDeclarationStatement[28599-28741]:VariableDeclarationStatement[28649-28791]"
    }, {
      "left" : "Node newNode = Node.newNumber(indexVal);",
      "right" : "Node newNode = Node.newNumber(indexVal);",
      "info" : "VariableDeclarationStatement[28746-28786]:VariableDeclarationStatement[28796-28836]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[28791-28830]:ExpressionStatement[28841-28880]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[28836-28855]:ExpressionStatement[28886-28905]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[28861-28876]:ReturnStatement[28911-28926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29002-32284]:Block[29052-32334]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[29008-29038]:VariableDeclarationStatement[29058-29088]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[29044-29085]:IfStatement[29094-29135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29062-29085]:Block[29112-29135]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29070-29079]:ReturnStatement[29120-29129]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[29091-29119]:VariableDeclarationStatement[29141-29169]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[29125-29167]:IfStatement[29175-29217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29144-29167]:Block[29194-29217]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29152-29161]:ReturnStatement[29202-29211]"
    }, {
      "left" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "right" : "if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right))",
      "info" : "IfStatement[29173-29264]:IfStatement[29223-29314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29241-29264]:Block[29291-29314]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29249-29258]:ReturnStatement[29299-29308]"
    }, {
      "left" : "Node arrayNode = left.getFirstChild();",
      "right" : "Node arrayNode = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[29270-29308]:VariableDeclarationStatement[29320-29358]"
    }, {
      "left" : "Node functionName = arrayNode.getNext();",
      "right" : "Node functionName = arrayNode.getNext();",
      "info" : "VariableDeclarationStatement[29313-29353]:VariableDeclarationStatement[29363-29403]"
    }, {
      "left" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
      "right" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
      "info" : "IfStatement[29359-29479]:IfStatement[29409-29529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29456-29479]:Block[29506-29529]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29464-29473]:ReturnStatement[29514-29523]"
    }, {
      "left" : "String joinString = NodeUtil.getStringValue(right);",
      "right" : "String joinString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[29485-29536]:VariableDeclarationStatement[29535-29586]"
    }, {
      "left" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
      "right" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
      "info" : "VariableDeclarationStatement[29541-29596]:VariableDeclarationStatement[29591-29646]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[29601-29625]:VariableDeclarationStatement[29651-29675]"
    }, {
      "left" : "int foldedSize = 0;",
      "right" : "int foldedSize = 0;",
      "info" : "VariableDeclarationStatement[29630-29649]:VariableDeclarationStatement[29680-29699]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[29654-29671]:VariableDeclarationStatement[29704-29721]"
    }, {
      "left" : "Node elem = arrayNode.getFirstChild();",
      "right" : "Node elem = arrayNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[29676-29714]:VariableDeclarationStatement[29726-29764]"
    }, {
      "left" : "while (elem != null)",
      "right" : "while (elem != null)",
      "info" : "WhileStatement[29756-30450]:WhileStatement[29806-30500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29777-30450]:Block[29827-30500]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(elem))",
      "right" : "if (NodeUtil.isImmutableValue(elem))",
      "info" : "IfStatement[29785-30396]:IfStatement[29835-30446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29822-30003]:Block[29872-30053]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[29832-29945]:IfStatement[29882-29995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29848-29895]:Block[29898-29945]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[29860-29885]:ExpressionStatement[29910-29935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29901-29945]:Block[29951-29995]"
    }, {
      "left" : "sb.append(joinString);",
      "right" : "sb.append(joinString);",
      "info" : "ExpressionStatement[29913-29935]:ExpressionStatement[29963-29985]"
    }, {
      "left" : "sb.append(NodeUtil.getStringValue(elem));",
      "right" : "sb.append(NodeUtil.getStringValue(elem));",
      "info" : "ExpressionStatement[29954-29995]:ExpressionStatement[30004-30045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30009-30396]:Block[30059-30446]"
    }, {
      "left" : "if (sb != null)",
      "right" : "if (sb != null)",
      "info" : "IfStatement[30019-30292]:IfStatement[30069-30342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30035-30292]:Block[30085-30342]"
    }, {
      "left" : "Preconditions.checkNotNull(prev);",
      "right" : "Preconditions.checkNotNull(prev);",
      "info" : "ExpressionStatement[30047-30080]:ExpressionStatement[30097-30130]"
    }, {
      "left" : "foldedSize += sb.length() + 2;",
      "right" : "foldedSize += sb.length() + 2;",
      "info" : "ExpressionStatement[30124-30154]:ExpressionStatement[30174-30204]"
    }, {
      "left" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
      "right" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
      "info" : "ExpressionStatement[30165-30261]:ExpressionStatement[30215-30311]"
    }, {
      "left" : "sb = null;",
      "right" : "sb = null;",
      "info" : "ExpressionStatement[30272-30282]:ExpressionStatement[30322-30332]"
    }, {
      "left" : "foldedSize += InlineCostEstimator.getCost(elem);",
      "right" : "foldedSize += InlineCostEstimator.getCost(elem);",
      "info" : "ExpressionStatement[30301-30349]:ExpressionStatement[30351-30399]"
    }, {
      "left" : "arrayFoldedChildren.add(elem);",
      "right" : "arrayFoldedChildren.add(elem);",
      "info" : "ExpressionStatement[30358-30388]:ExpressionStatement[30408-30438]"
    }, {
      "left" : "prev = elem;",
      "right" : "prev = elem;",
      "info" : "ExpressionStatement[30403-30415]:ExpressionStatement[30453-30465]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[30422-30444]:ExpressionStatement[30472-30494]"
    }, {
      "left" : "if (sb != null)",
      "right" : "if (sb != null)",
      "info" : "IfStatement[30456-30684]:IfStatement[30506-30734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30472-30684]:Block[30522-30734]"
    }, {
      "left" : "Preconditions.checkNotNull(prev);",
      "right" : "Preconditions.checkNotNull(prev);",
      "info" : "ExpressionStatement[30480-30513]:ExpressionStatement[30530-30563]"
    }, {
      "left" : "foldedSize += sb.length() + 2;",
      "right" : "foldedSize += sb.length() + 2;",
      "info" : "ExpressionStatement[30549-30579]:ExpressionStatement[30599-30629]"
    }, {
      "left" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
      "right" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
      "info" : "ExpressionStatement[30586-30678]:ExpressionStatement[30636-30728]"
    }, {
      "left" : "foldedSize += arrayFoldedChildren.size() - 1;",
      "right" : "foldedSize += arrayFoldedChildren.size() - 1;",
      "info" : "ExpressionStatement[30716-30761]:ExpressionStatement[30766-30811]"
    }, {
      "left" : "int originalSize = InlineCostEstimator.getCost(n);",
      "right" : "int originalSize = InlineCostEstimator.getCost(n);",
      "info" : "VariableDeclarationStatement[30767-30817]:VariableDeclarationStatement[30817-30867]"
    }, {
      "left" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
      "right" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
      "info" : "SwitchStatement[30822-32265]:SwitchStatement[30872-32315]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[30866-30873]:SwitchCase[30916-30923]"
    }, {
      "left" : "Node emptyStringNode = Node.newString(\"\");",
      "right" : "Node emptyStringNode = Node.newString(\"\");",
      "info" : "VariableDeclarationStatement[30882-30924]:VariableDeclarationStatement[30932-30974]"
    }, {
      "left" : "n.getParent().replaceChild(n, emptyStringNode);",
      "right" : "n.getParent().replaceChild(n, emptyStringNode);",
      "info" : "ExpressionStatement[30933-30980]:ExpressionStatement[30983-31030]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[30989-31008]:ExpressionStatement[31039-31058]"
    }, {
      "left" : "return emptyStringNode;",
      "right" : "return emptyStringNode;",
      "info" : "ReturnStatement[31017-31040]:ReturnStatement[31067-31090]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[31047-31054]:SwitchCase[31097-31104]"
    }, {
      "left" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
      "right" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
      "info" : "VariableDeclarationStatement[31063-31117]:VariableDeclarationStatement[31113-31167]"
    }, {
      "left" : "if (foldedSize > originalSize)",
      "right" : "if (foldedSize > originalSize)",
      "info" : "IfStatement[31126-31188]:IfStatement[31176-31238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31157-31188]:Block[31207-31238]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31169-31178]:ReturnStatement[31219-31228]"
    }, {
      "left" : "arrayNode.detachChildren();",
      "right" : "arrayNode.detachChildren();",
      "info" : "ExpressionStatement[31197-31224]:ExpressionStatement[31247-31274]"
    }, {
      "left" : "if (foldedStringNode.getType() != Token.STRING)",
      "right" : "if (foldedStringNode.getType() != Token.STRING)",
      "info" : "IfStatement[31233-31579]:IfStatement[31283-31629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31281-31579]:Block[31331-31629]"
    }, {
      "left" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);",
      "right" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(right),\n              foldedStringNode);",
      "info" : "VariableDeclarationStatement[31395-31527]:VariableDeclarationStatement[31445-31577]"
    }, {
      "left" : "foldedStringNode = replacement;",
      "right" : "foldedStringNode = replacement;",
      "info" : "ExpressionStatement[31538-31569]:ExpressionStatement[31588-31619]"
    }, {
      "left" : "n.getParent().replaceChild(n, foldedStringNode);",
      "right" : "n.getParent().replaceChild(n, foldedStringNode);",
      "info" : "ExpressionStatement[31588-31636]:ExpressionStatement[31638-31686]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[31645-31664]:ExpressionStatement[31695-31714]"
    }, {
      "left" : "return foldedStringNode;",
      "right" : "return foldedStringNode;",
      "info" : "ReturnStatement[31673-31697]:ReturnStatement[31723-31747]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31704-31712]:SwitchCase[31754-31762]"
    }, {
      "left" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
      "right" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
      "info" : "IfStatement[31772-31864]:IfStatement[31822-31914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31833-31864]:Block[31883-31914]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31845-31854]:ReturnStatement[31895-31904]"
    }, {
      "left" : "int kJoinOverhead = \"[].join()\".length();",
      "right" : "int kJoinOverhead = \"[].join()\".length();",
      "info" : "VariableDeclarationStatement[31873-31914]:VariableDeclarationStatement[31923-31964]"
    }, {
      "left" : "foldedSize += kJoinOverhead;",
      "right" : "foldedSize += kJoinOverhead;",
      "info" : "ExpressionStatement[31923-31951]:ExpressionStatement[31973-32001]"
    }, {
      "left" : "foldedSize += InlineCostEstimator.getCost(right);",
      "right" : "foldedSize += InlineCostEstimator.getCost(right);",
      "info" : "ExpressionStatement[31960-32009]:ExpressionStatement[32010-32059]"
    }, {
      "left" : "if (foldedSize > originalSize)",
      "right" : "if (foldedSize > originalSize)",
      "info" : "IfStatement[32018-32080]:IfStatement[32068-32130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32049-32080]:Block[32099-32130]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32061-32070]:ReturnStatement[32111-32120]"
    }, {
      "left" : "arrayNode.detachChildren();",
      "right" : "arrayNode.detachChildren();",
      "info" : "ExpressionStatement[32089-32116]:ExpressionStatement[32139-32166]"
    }, {
      "left" : "for (Node node : arrayFoldedChildren)",
      "right" : "for (Node node : arrayFoldedChildren)",
      "info" : "EnhancedForStatement[32125-32216]:EnhancedForStatement[32175-32266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32163-32216]:Block[32213-32266]"
    }, {
      "left" : "arrayNode.addChildToBack(node);",
      "right" : "arrayNode.addChildToBack(node);",
      "info" : "ExpressionStatement[32175-32206]:ExpressionStatement[32225-32256]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[32225-32244]:ExpressionStatement[32275-32294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32253-32259]:BreakStatement[32303-32309]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32271-32280]:ReturnStatement[32321-32330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32410-33444]:Block[32460-33494]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "info" : "ExpressionStatement[32416-32474]:ExpressionStatement[32466-32524]"
    }, {
      "left" : "if (left.getType() == Token.ARRAYLIT)",
      "right" : "if (left.getType() == Token.ARRAYLIT)",
      "info" : "IfStatement[32480-33426]:IfStatement[32530-33476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32518-33426]:Block[32568-33476]"
    }, {
      "left" : "if (right.getType() != Token.NUMBER)",
      "right" : "if (right.getType() != Token.NUMBER)",
      "info" : "IfStatement[32527-32724]:IfStatement[32577-32774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32564-32724]:Block[32614-32774]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32707-32716]:ReturnStatement[32757-32766]"
    }, {
      "left" : "double index = right.getDouble();",
      "right" : "double index = right.getDouble();",
      "info" : "VariableDeclarationStatement[32732-32765]:VariableDeclarationStatement[32782-32815]"
    }, {
      "left" : "int intIndex = (int) index;",
      "right" : "int intIndex = (int) index;",
      "info" : "VariableDeclarationStatement[32772-32799]:VariableDeclarationStatement[32822-32849]"
    }, {
      "left" : "if (intIndex != index)",
      "right" : "if (intIndex != index)",
      "info" : "IfStatement[32806-32907]:IfStatement[32856-32957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32829-32907]:Block[32879-32957]"
    }, {
      "left" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "right" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "info" : "ExpressionStatement[32839-32881]:ExpressionStatement[32889-32931]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32890-32899]:ReturnStatement[32940-32949]"
    }, {
      "left" : "if (intIndex < 0)",
      "right" : "if (intIndex < 0)",
      "info" : "IfStatement[32915-33009]:IfStatement[32965-33059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32933-33009]:Block[32983-33059]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[32943-32983]:ExpressionStatement[32993-33033]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32992-33001]:ReturnStatement[33042-33051]"
    }, {
      "left" : "Node elem = left.getFirstChild();",
      "right" : "Node elem = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[33017-33050]:VariableDeclarationStatement[33067-33100]"
    }, {
      "left" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "right" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "info" : "ForStatement[33057-33148]:ForStatement[33107-33198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33108-33148]:Block[33158-33198]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[33118-33140]:ExpressionStatement[33168-33190]"
    }, {
      "left" : "if (elem == null)",
      "right" : "if (elem == null)",
      "info" : "IfStatement[33156-33250]:IfStatement[33206-33300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33174-33250]:Block[33224-33300]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[33184-33224]:ExpressionStatement[33234-33274]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33233-33242]:ReturnStatement[33283-33292]"
    }, {
      "left" : "left.removeChild(elem);",
      "right" : "left.removeChild(elem);",
      "info" : "ExpressionStatement[33309-33332]:ExpressionStatement[33359-33382]"
    }, {
      "left" : "n.getParent().replaceChild(n, elem);",
      "right" : "n.getParent().replaceChild(n, elem);",
      "info" : "ExpressionStatement[33339-33375]:ExpressionStatement[33389-33425]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[33382-33401]:ExpressionStatement[33432-33451]"
    }, {
      "left" : "return elem;",
      "right" : "return elem;",
      "info" : "ReturnStatement[33408-33420]:ReturnStatement[33458-33470]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33431-33440]:ReturnStatement[33481-33490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33598-34478]:Block[33648-34528]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "info" : "ExpressionStatement[33604-33662]:ExpressionStatement[33654-33712]"
    }, {
      "left" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "right" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "info" : "IfStatement[33668-34459]:IfStatement[33718-34509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33751-34459]:Block[33801-34509]"
    }, {
      "left" : "int knownLength = -1;",
      "right" : "int knownLength = -1;",
      "info" : "VariableDeclarationStatement[33759-33780]:VariableDeclarationStatement[33809-33830]"
    }, {
      "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (NodeUtil.mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (NodeUtil.mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "info" : "SwitchStatement[33787-34247]:SwitchStatement[33837-34297]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[33821-33841]:SwitchCase[33871-33891]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(left))",
      "right" : "if (NodeUtil.mayHaveSideEffects(left))",
      "info" : "IfStatement[33852-33999]:IfStatement[33902-34049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33891-33999]:Block[33941-34049]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33978-33987]:ReturnStatement[34028-34037]"
    }, {
      "left" : "knownLength = left.getChildCount();",
      "right" : "knownLength = left.getChildCount();",
      "info" : "ExpressionStatement[34010-34045]:ExpressionStatement[34060-34095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34056-34062]:BreakStatement[34106-34112]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[34071-34089]:SwitchCase[34121-34139]"
    }, {
      "left" : "knownLength = left.getString().length();",
      "right" : "knownLength = left.getString().length();",
      "info" : "ExpressionStatement[34100-34140]:ExpressionStatement[34150-34190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34151-34157]:BreakStatement[34201-34207]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34166-34174]:SwitchCase[34216-34224]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34230-34239]:ReturnStatement[34280-34289]"
    }, {
      "left" : "Preconditions.checkState(knownLength != -1);",
      "right" : "Preconditions.checkState(knownLength != -1);",
      "info" : "ExpressionStatement[34255-34299]:ExpressionStatement[34305-34349]"
    }, {
      "left" : "Node lengthNode = Node.newNumber(knownLength);",
      "right" : "Node lengthNode = Node.newNumber(knownLength);",
      "info" : "VariableDeclarationStatement[34306-34352]:VariableDeclarationStatement[34356-34402]"
    }, {
      "left" : "n.getParent().replaceChild(n, lengthNode);",
      "right" : "n.getParent().replaceChild(n, lengthNode);",
      "info" : "ExpressionStatement[34359-34401]:ExpressionStatement[34409-34451]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[34408-34427]:ExpressionStatement[34458-34477]"
    }, {
      "left" : "return lengthNode;",
      "right" : "return lengthNode;",
      "info" : "ReturnStatement[34435-34453]:ReturnStatement[34485-34503]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34465-34474]:ReturnStatement[34515-34524]"
    } ]
  },
  "interFileMappings" : { }
}