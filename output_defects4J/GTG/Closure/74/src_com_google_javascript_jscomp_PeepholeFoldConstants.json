{
  "matchedElements" : [
 {
    "left" : "class : PeepholeFoldConstants",
    "right" : "class : PeepholeFoldConstants",
    "info" : "TypeDeclaration[992-50293]:TypeDeclaration[992-50638]"
  }, {
    "left" : "INVALID_GETELEM_INDEX_ERROR",
    "right" : "INVALID_GETELEM_INDEX_ERROR",
    "info" : "FieldDeclaration[1144-1317]:FieldDeclaration[1144-1317]"
  }, {
    "left" : "INDEX_OUT_OF_BOUNDS_ERROR",
    "right" : "INDEX_OUT_OF_BOUNDS_ERROR",
    "info" : "FieldDeclaration[1321-1492]:FieldDeclaration[1321-1492]"
  }, {
    "left" : "NEGATING_A_NON_NUMBER_ERROR",
    "right" : "NEGATING_A_NON_NUMBER_ERROR",
    "info" : "FieldDeclaration[1496-1676]:FieldDeclaration[1496-1676]"
  }, {
    "left" : "BITWISE_OPERAND_OUT_OF_RANGE",
    "right" : "BITWISE_OPERAND_OUT_OF_RANGE",
    "info" : "FieldDeclaration[1680-1893]:FieldDeclaration[1680-1893]"
  }, {
    "left" : "SHIFT_AMOUNT_OUT_OF_BOUNDS",
    "right" : "SHIFT_AMOUNT_OUT_OF_BOUNDS",
    "info" : "FieldDeclaration[1897-2057]:FieldDeclaration[1897-2057]"
  }, {
    "left" : "FRACTIONAL_BITWISE_OPERAND",
    "right" : "FRACTIONAL_BITWISE_OPERAND",
    "info" : "FieldDeclaration[2061-2221]:FieldDeclaration[2061-2221]"
  }, {
    "left" : "MAX_FOLD_NUMBER",
    "right" : "MAX_FOLD_NUMBER",
    "info" : "FieldDeclaration[2225-2287]:FieldDeclaration[2225-2287]"
  }, {
    "left" : "ROOT_LOCALE",
    "right" : "ROOT_LOCALE",
    "info" : "FieldDeclaration[2328-2385]:FieldDeclaration[2328-2385]"
  }, {
    "left" : "package optimizeSubtree(subtree ) : ",
    "right" : "package optimizeSubtree(subtree ) : ",
    "info" : "MethodDeclaration[2389-3022]:MethodDeclaration[2389-3022]"
  }, {
    "left" : "private tryFoldBinaryOperator(subtree ) : ",
    "right" : "private tryFoldBinaryOperator(subtree ) : ",
    "info" : "MethodDeclaration[3026-4654]:MethodDeclaration[3026-4654]"
  }, {
    "left" : "private tryReduceVoid(n ) : ",
    "right" : "private tryReduceVoid(n ) : ",
    "info" : "MethodDeclaration[4658-4947]:MethodDeclaration[4658-4947]"
  }, {
    "left" : "private tryReduceOperandsForOp(n ) : void",
    "right" : "private tryReduceOperandsForOp(n ) : void",
    "info" : "MethodDeclaration[4951-6040]:MethodDeclaration[4951-6040]"
  }, {
    "left" : "private tryConvertOperandsToNumber(n ) : void",
    "right" : "private tryConvertOperandsToNumber(n ) : void",
    "info" : "MethodDeclaration[6044-6233]:MethodDeclaration[6044-6233]"
  }, {
    "left" : "private tryConvertToNumber(n ) : void",
    "right" : "private tryConvertToNumber(n ) : void",
    "info" : "MethodDeclaration[6237-7412]:MethodDeclaration[6237-7412]"
  }, {
    "left" : "private tryFoldTypeof(originalTypeofNode ) : ",
    "right" : "private tryFoldTypeof(originalTypeofNode ) : ",
    "info" : "MethodDeclaration[7416-9013]:MethodDeclaration[7416-9013]"
  }, {
    "left" : "private tryFoldUnaryOperator(n ) : ",
    "right" : "private tryFoldUnaryOperator(n ) : ",
    "info" : "MethodDeclaration[9017-12018]:MethodDeclaration[9017-12018]"
  }, {
    "left" : "private tryFoldInstanceof(n , left , right ) : ",
    "right" : "private tryFoldInstanceof(n , left , right ) : ",
    "info" : "MethodDeclaration[12022-12941]:MethodDeclaration[12022-12941]"
  }, {
    "left" : "private tryFoldAssign(n , left , right ) : ",
    "right" : "private tryFoldAssign(n , left , right ) : ",
    "info" : "MethodDeclaration[12945-14761]:MethodDeclaration[12945-14761]"
  }, {
    "left" : "private tryFoldAndOr(n , left , right ) : ",
    "right" : "private tryFoldAndOr(n , left , right ) : ",
    "info" : "MethodDeclaration[14765-15749]:MethodDeclaration[14765-15749]"
  }, {
    "left" : "private tryFoldChildAddString(n , left , right ) : ",
    "right" : "private tryFoldChildAddString(n , left , right ) : ",
    "info" : "MethodDeclaration[15753-17979]:MethodDeclaration[15753-17979]"
  }, {
    "left" : "private tryFoldAddConstantString(n , left , right ) : ",
    "right" : "private tryFoldAddConstantString(n , left , right ) : ",
    "info" : "MethodDeclaration[17983-18613]:MethodDeclaration[17983-18613]"
  }, {
    "left" : "private tryFoldArithmeticOp(n , left , right ) : ",
    "right" : "private tryFoldArithmeticOp(n , left , right ) : ",
    "info" : "MethodDeclaration[18617-18990]:MethodDeclaration[18617-18990]"
  }, {
    "left" : "private performArithmeticOp(opType int, left , right ) : ",
    "right" : "private performArithmeticOp(opType int, left , right ) : ",
    "info" : "MethodDeclaration[18994-21547]:MethodDeclaration[18994-21547]"
  }, {
    "left" : "private tryFoldLeftChildOp(n , left , right ) : ",
    "right" : "private tryFoldLeftChildOp(n , left , right ) : ",
    "info" : "MethodDeclaration[21551-23447]:MethodDeclaration[21551-23447]"
  }, {
    "left" : "private tryFoldAdd(node , left , right ) : ",
    "right" : "private tryFoldAdd(node , left , right ) : ",
    "info" : "MethodDeclaration[23451-24125]:MethodDeclaration[23451-24125]"
  }, {
    "left" : "private tryFoldShift(n , left , right ) : ",
    "right" : "private tryFoldShift(n , left , right ) : ",
    "info" : "MethodDeclaration[24129-26102]:MethodDeclaration[24129-26102]"
  }, {
    "left" : "private tryFoldComparison(n , left , right ) : ",
    "right" : "private tryFoldComparison(n , left , right ) : ",
    "info" : "MethodDeclaration[26106-31239]:MethodDeclaration[26106-31265]"
  }, {
    "left" : "private compareAsNumbers(op int, left , right ) : ",
    "right" : "private compareAsNumbers(op int, left , right ) : ",
    "info" : "MethodDeclaration[31329-32497]:MethodDeclaration[31674-32842]"
  }, {
    "left" : "private compareToUndefined(value , op int) : boolean",
    "right" : "private compareToUndefined(value , op int) : boolean",
    "info" : "MethodDeclaration[32501-33534]:MethodDeclaration[32846-33879]"
  }, {
    "left" : "private tryFoldCtorCall(n ) : ",
    "right" : "private tryFoldCtorCall(n ) : ",
    "info" : "MethodDeclaration[33538-33919]:MethodDeclaration[33883-34264]"
  }, {
    "left" : "private inForcedStringContext(n ) : boolean",
    "right" : "private inForcedStringContext(n ) : boolean",
    "info" : "MethodDeclaration[33923-34136]:MethodDeclaration[34268-34481]"
  }, {
    "left" : "private tryFoldInForcedStringContext(n ) : ",
    "right" : "private tryFoldInForcedStringContext(n ) : ",
    "info" : "MethodDeclaration[34140-35054]:MethodDeclaration[34485-35399]"
  }, {
    "left" : "private tryFoldKnownMethods(subtree ) : ",
    "right" : "private tryFoldKnownMethods(subtree ) : ",
    "info" : "MethodDeclaration[35058-35361]:MethodDeclaration[35403-35706]"
  }, {
    "left" : "private tryFoldKnownStringMethods(subtree ) : ",
    "right" : "private tryFoldKnownStringMethods(subtree ) : ",
    "info" : "MethodDeclaration[35365-37049]:MethodDeclaration[35710-37394]"
  }, {
    "left" : "private tryFoldStringToLowerCase(subtree , stringNode ) : ",
    "right" : "private tryFoldStringToLowerCase(subtree , stringNode ) : ",
    "info" : "MethodDeclaration[37053-37460]:MethodDeclaration[37398-37805]"
  }, {
    "left" : "private tryFoldStringToUpperCase(subtree , stringNode ) : ",
    "right" : "private tryFoldStringToUpperCase(subtree , stringNode ) : ",
    "info" : "MethodDeclaration[37464-37871]:MethodDeclaration[37809-38216]"
  }, {
    "left" : "private tryFoldStringIndexOf(n , functionName , lstringNode , firstArg ) : ",
    "right" : "private tryFoldStringIndexOf(n , functionName , lstringNode , firstArg ) : ",
    "info" : "MethodDeclaration[37875-39200]:MethodDeclaration[38220-39545]"
  }, {
    "left" : "private tryFoldArrayJoin(n ) : ",
    "right" : "private tryFoldArrayJoin(n ) : ",
    "info" : "MethodDeclaration[39204-42688]:MethodDeclaration[39549-43033]"
  }, {
    "left" : "private tryFoldStringSubstr(n , stringNode , arg1 ) : ",
    "right" : "private tryFoldStringSubstr(n , stringNode , arg1 ) : ",
    "info" : "MethodDeclaration[42692-44235]:MethodDeclaration[43037-44580]"
  }, {
    "left" : "private tryFoldStringSubstring(n , stringNode , arg1 ) : ",
    "right" : "private tryFoldStringSubstring(n , stringNode , arg1 ) : ",
    "info" : "MethodDeclaration[44239-45708]:MethodDeclaration[44584-46053]"
  }, {
    "left" : "private tryFoldGetElem(n , left , right ) : ",
    "right" : "private tryFoldGetElem(n , left , right ) : ",
    "info" : "MethodDeclaration[45712-47090]:MethodDeclaration[46057-47435]"
  }, {
    "left" : "private tryFoldGetProp(n , left , right ) : ",
    "right" : "private tryFoldGetProp(n , left , right ) : ",
    "info" : "MethodDeclaration[47094-48221]:MethodDeclaration[47439-48566]"
  }, {
    "left" : "private tryFoldObjectPropAccess(n , left , right ) : ",
    "right" : "private tryFoldObjectPropAccess(n , left , right ) : ",
    "info" : "MethodDeclaration[48225-50291]:MethodDeclaration[48570-50636]"
  } ],
  "mappings" : [
 {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2389-2398]:MarkerAnnotation[2389-2398]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[2401-2405]:SimpleType[2401-2405]"
  }, {
    "left" : "optimizeSubtree",
    "right" : "optimizeSubtree",
    "info" : "SimpleName[2406-2421]:SimpleName[2406-2421]"
  }, {
    "left" : "Node subtree",
    "right" : "Node subtree",
    "info" : "SingleVariableDeclaration[2422-2434]:SingleVariableDeclaration[2422-2434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2436-3022]:Block[2436-3022]"
  }, {
    "left" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
    "right" : "switch(subtree.getType()) {\n      case Token.CALL:\n        return tryFoldKnownMethods(subtree);\n\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
    "info" : "SwitchStatement[2442-3018]:SwitchStatement[2442-3018]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[2476-2492]:SwitchCase[2476-2492]"
  }, {
    "left" : "return tryFoldKnownMethods(subtree);",
    "right" : "return tryFoldKnownMethods(subtree);",
    "info" : "ReturnStatement[2501-2537]:ReturnStatement[2501-2537]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[2545-2560]:SwitchCase[2545-2560]"
  }, {
    "left" : "return tryFoldCtorCall(subtree);",
    "right" : "return tryFoldCtorCall(subtree);",
    "info" : "ReturnStatement[2569-2601]:ReturnStatement[2569-2601]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[2609-2627]:SwitchCase[2609-2627]"
  }, {
    "left" : "return tryFoldTypeof(subtree);",
    "right" : "return tryFoldTypeof(subtree);",
    "info" : "ReturnStatement[2636-2666]:ReturnStatement[2636-2666]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[2674-2689]:SwitchCase[2674-2689]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[2696-2711]:SwitchCase[2696-2711]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[2718-2733]:SwitchCase[2718-2733]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[2740-2758]:SwitchCase[2740-2758]"
  }, {
    "left" : "tryReduceOperandsForOp(subtree);",
    "right" : "tryReduceOperandsForOp(subtree);",
    "info" : "ExpressionStatement[2767-2799]:ExpressionStatement[2767-2799]"
  }, {
    "left" : "return tryFoldUnaryOperator(subtree);",
    "right" : "return tryFoldUnaryOperator(subtree);",
    "info" : "ReturnStatement[2808-2845]:ReturnStatement[2808-2845]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[2853-2869]:SwitchCase[2853-2869]"
  }, {
    "left" : "return tryReduceVoid(subtree);",
    "right" : "return tryReduceVoid(subtree);",
    "info" : "ReturnStatement[2878-2908]:ReturnStatement[2878-2908]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[2916-2924]:SwitchCase[2916-2924]"
  }, {
    "left" : "tryReduceOperandsForOp(subtree);",
    "right" : "tryReduceOperandsForOp(subtree);",
    "info" : "ExpressionStatement[2933-2965]:ExpressionStatement[2933-2965]"
  }, {
    "left" : "return tryFoldBinaryOperator(subtree);",
    "right" : "return tryFoldBinaryOperator(subtree);",
    "info" : "ReturnStatement[2974-3012]:ReturnStatement[2974-3012]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3026-3033]:Modifier[3026-3033]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[3034-3038]:SimpleType[3034-3038]"
  }, {
    "left" : "tryFoldBinaryOperator",
    "right" : "tryFoldBinaryOperator",
    "info" : "SimpleName[3039-3060]:SimpleName[3039-3060]"
  }, {
    "left" : "Node subtree",
    "right" : "Node subtree",
    "info" : "SingleVariableDeclaration[3061-3073]:SingleVariableDeclaration[3061-3073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3075-4654]:Block[3075-4654]"
  }, {
    "left" : "Node left = subtree.getFirstChild();",
    "right" : "Node left = subtree.getFirstChild();",
    "info" : "VariableDeclarationStatement[3081-3117]:VariableDeclarationStatement[3081-3117]"
  }, {
    "left" : "if (left == null)",
    "right" : "if (left == null)",
    "info" : "IfStatement[3123-3170]:IfStatement[3123-3170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3141-3170]:Block[3141-3170]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[3149-3164]:ReturnStatement[3149-3164]"
  }, {
    "left" : "Node right = left.getNext();",
    "right" : "Node right = left.getNext();",
    "info" : "VariableDeclarationStatement[3176-3204]:VariableDeclarationStatement[3176-3204]"
  }, {
    "left" : "if (right == null)",
    "right" : "if (right == null)",
    "info" : "IfStatement[3210-3258]:IfStatement[3210-3258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3229-3258]:Block[3229-3258]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[3237-3252]:ReturnStatement[3237-3252]"
  }, {
    "left" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
    "right" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
    "info" : "SwitchStatement[3327-4650]:SwitchStatement[3327-4650]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[3361-3380]:SwitchCase[3361-3380]"
  }, {
    "left" : "return tryFoldGetProp(subtree, left, right);",
    "right" : "return tryFoldGetProp(subtree, left, right);",
    "info" : "ReturnStatement[3389-3433]:ReturnStatement[3389-3433]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[3441-3460]:SwitchCase[3441-3460]"
  }, {
    "left" : "return tryFoldGetElem(subtree, left, right);",
    "right" : "return tryFoldGetElem(subtree, left, right);",
    "info" : "ReturnStatement[3469-3513]:ReturnStatement[3469-3513]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[3521-3543]:SwitchCase[3521-3543]"
  }, {
    "left" : "return tryFoldInstanceof(subtree, left, right);",
    "right" : "return tryFoldInstanceof(subtree, left, right);",
    "info" : "ReturnStatement[3552-3599]:ReturnStatement[3552-3599]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[3607-3622]:SwitchCase[3607-3622]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[3629-3643]:SwitchCase[3629-3643]"
  }, {
    "left" : "return tryFoldAndOr(subtree, left, right);",
    "right" : "return tryFoldAndOr(subtree, left, right);",
    "info" : "ReturnStatement[3652-3694]:ReturnStatement[3652-3694]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[3702-3717]:SwitchCase[3702-3717]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[3724-3739]:SwitchCase[3724-3739]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[3746-3762]:SwitchCase[3746-3762]"
  }, {
    "left" : "return tryFoldShift(subtree, left, right);",
    "right" : "return tryFoldShift(subtree, left, right);",
    "info" : "ReturnStatement[3771-3813]:ReturnStatement[3771-3813]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[3821-3839]:SwitchCase[3821-3839]"
  }, {
    "left" : "return tryFoldAssign(subtree, left, right);",
    "right" : "return tryFoldAssign(subtree, left, right);",
    "info" : "ReturnStatement[3848-3891]:ReturnStatement[3848-3891]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[3899-3914]:SwitchCase[3899-3914]"
  }, {
    "left" : "return tryFoldAdd(subtree, left, right);",
    "right" : "return tryFoldAdd(subtree, left, right);",
    "info" : "ReturnStatement[3923-3963]:ReturnStatement[3923-3963]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[3971-3986]:SwitchCase[3971-3986]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[3993-4008]:SwitchCase[3993-4008]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[4015-4030]:SwitchCase[4015-4030]"
  }, {
    "left" : "return tryFoldArithmeticOp(subtree, left, right);",
    "right" : "return tryFoldArithmeticOp(subtree, left, right);",
    "info" : "ReturnStatement[4039-4088]:ReturnStatement[4039-4088]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[4096-4111]:SwitchCase[4096-4111]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[4118-4136]:SwitchCase[4118-4136]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[4143-4160]:SwitchCase[4143-4160]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[4167-4185]:SwitchCase[4167-4185]"
  }, {
    "left" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
    "right" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
    "info" : "VariableDeclarationStatement[4194-4250]:VariableDeclarationStatement[4194-4250]"
  }, {
    "left" : "if (result != subtree)",
    "right" : "if (result != subtree)",
    "info" : "IfStatement[4259-4318]:IfStatement[4259-4318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4282-4318]:Block[4282-4318]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[4294-4308]:ReturnStatement[4294-4308]"
  }, {
    "left" : "return tryFoldLeftChildOp(subtree, left, right);",
    "right" : "return tryFoldLeftChildOp(subtree, left, right);",
    "info" : "ReturnStatement[4327-4375]:ReturnStatement[4327-4375]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[4383-4397]:SwitchCase[4383-4397]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[4404-4418]:SwitchCase[4404-4418]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[4425-4439]:SwitchCase[4425-4439]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[4446-4460]:SwitchCase[4446-4460]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[4467-4481]:SwitchCase[4467-4481]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[4488-4502]:SwitchCase[4488-4502]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[4509-4525]:SwitchCase[4509-4525]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[4532-4548]:SwitchCase[4532-4548]"
  }, {
    "left" : "return tryFoldComparison(subtree, left, right);",
    "right" : "return tryFoldComparison(subtree, left, right);",
    "info" : "ReturnStatement[4557-4604]:ReturnStatement[4557-4604]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[4612-4620]:SwitchCase[4612-4620]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[4629-4644]:ReturnStatement[4629-4644]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4658-4665]:Modifier[4658-4665]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[4666-4670]:SimpleType[4666-4670]"
  }, {
    "left" : "tryReduceVoid",
    "right" : "tryReduceVoid",
    "info" : "SimpleName[4671-4684]:SimpleName[4671-4684]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4685-4691]:SingleVariableDeclaration[4685-4691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4693-4947]:Block[4693-4947]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[4699-4730]:VariableDeclarationStatement[4699-4730]"
  }, {
    "left" : "if (child.getType() != Token.NUMBER || child.getDouble() != 0.0)",
    "right" : "if (child.getType() != Token.NUMBER || child.getDouble() != 0.0)",
    "info" : "IfStatement[4735-4929]:IfStatement[4735-4929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4800-4929]:Block[4800-4929]"
  }, {
    "left" : "if (!mayHaveSideEffects(n))",
    "right" : "if (!mayHaveSideEffects(n))",
    "info" : "IfStatement[4808-4923]:IfStatement[4808-4923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4836-4923]:Block[4836-4923]"
  }, {
    "left" : "n.replaceChild(child, Node.newNumber(0));",
    "right" : "n.replaceChild(child, Node.newNumber(0));",
    "info" : "ExpressionStatement[4846-4887]:ExpressionStatement[4846-4887]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[4896-4915]:ExpressionStatement[4896-4915]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[4934-4943]:ReturnStatement[4934-4943]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4951-4958]:Modifier[4951-4958]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4959-4963]:PrimitiveType[4959-4963]"
  }, {
    "left" : "tryReduceOperandsForOp",
    "right" : "tryReduceOperandsForOp",
    "info" : "SimpleName[4964-4986]:SimpleName[4964-4986]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4987-4993]:SingleVariableDeclaration[4987-4993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4995-6040]:Block[4995-6040]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
    "info" : "SwitchStatement[5001-6036]:SwitchStatement[5001-6036]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[5030-5045]:SwitchCase[5030-5045]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[5054-5084]:VariableDeclarationStatement[5054-5084]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[5093-5123]:VariableDeclarationStatement[5093-5123]"
  }, {
    "left" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
    "right" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
    "info" : "IfStatement[5132-5249]:IfStatement[5132-5249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5197-5249]:Block[5197-5249]"
  }, {
    "left" : "tryConvertOperandsToNumber(n);",
    "right" : "tryConvertOperandsToNumber(n);",
    "info" : "ExpressionStatement[5209-5239]:ExpressionStatement[5209-5239]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5258-5264]:BreakStatement[5258-5264]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[5271-5295]:SwitchCase[5271-5295]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[5302-5327]:SwitchCase[5302-5327]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[5334-5359]:SwitchCase[5334-5359]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[5420-5442]:SwitchCase[5420-5442]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[5449-5471]:SwitchCase[5449-5471]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[5478-5501]:SwitchCase[5478-5501]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[5508-5530]:SwitchCase[5508-5530]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[5537-5559]:SwitchCase[5537-5559]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[5566-5588]:SwitchCase[5566-5588]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[5595-5617]:SwitchCase[5595-5617]"
  }, {
    "left" : "tryConvertToNumber(n.getLastChild());",
    "right" : "tryConvertToNumber(n.getLastChild());",
    "info" : "ExpressionStatement[5626-5663]:ExpressionStatement[5626-5663]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5672-5678]:BreakStatement[5672-5678]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[5685-5703]:SwitchCase[5685-5703]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[5710-5727]:SwitchCase[5710-5727]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[5734-5752]:SwitchCase[5734-5752]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[5759-5777]:SwitchCase[5759-5777]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[5784-5799]:SwitchCase[5784-5799]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[5806-5821]:SwitchCase[5806-5821]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[5828-5844]:SwitchCase[5828-5844]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[5851-5866]:SwitchCase[5851-5866]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[5873-5888]:SwitchCase[5873-5888]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[5895-5910]:SwitchCase[5895-5910]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[5917-5932]:SwitchCase[5917-5932]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[5939-5954]:SwitchCase[5939-5954]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[5961-5976]:SwitchCase[5961-5976]"
  }, {
    "left" : "tryConvertOperandsToNumber(n);",
    "right" : "tryConvertOperandsToNumber(n);",
    "info" : "ExpressionStatement[5985-6015]:ExpressionStatement[5985-6015]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6024-6030]:BreakStatement[6024-6030]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6044-6051]:Modifier[6044-6051]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6052-6056]:PrimitiveType[6052-6056]"
  }, {
    "left" : "tryConvertOperandsToNumber",
    "right" : "tryConvertOperandsToNumber",
    "info" : "SimpleName[6057-6083]:SimpleName[6057-6083]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6084-6090]:SingleVariableDeclaration[6084-6090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6092-6233]:Block[6092-6233]"
  }, {
    "left" : "Node next;",
    "right" : "Node next;",
    "info" : "VariableDeclarationStatement[6098-6108]:VariableDeclarationStatement[6098-6108]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = next)",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = next)",
    "info" : "ForStatement[6113-6229]:ForStatement[6113-6229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6167-6229]:Block[6167-6229]"
  }, {
    "left" : "next = c.getNext();",
    "right" : "next = c.getNext();",
    "info" : "ExpressionStatement[6175-6194]:ExpressionStatement[6175-6194]"
  }, {
    "left" : "tryConvertToNumber(c);",
    "right" : "tryConvertToNumber(c);",
    "info" : "ExpressionStatement[6201-6223]:ExpressionStatement[6201-6223]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6237-6244]:Modifier[6237-6244]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6245-6249]:PrimitiveType[6245-6249]"
  }, {
    "left" : "tryConvertToNumber",
    "right" : "tryConvertToNumber",
    "info" : "SimpleName[6250-6268]:SimpleName[6250-6268]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6269-6275]:SingleVariableDeclaration[6269-6275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6277-7412]:Block[6277-7412]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
    "info" : "SwitchStatement[6283-6747]:SwitchStatement[6283-6747]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[6312-6330]:SwitchCase[6312-6330]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6364-6371]:ReturnStatement[6364-6371]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[6378-6393]:SwitchCase[6378-6393]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[6400-6414]:SwitchCase[6400-6414]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[6421-6438]:SwitchCase[6421-6438]"
  }, {
    "left" : "tryConvertToNumber(n.getLastChild());",
    "right" : "tryConvertToNumber(n.getLastChild());",
    "info" : "ExpressionStatement[6447-6484]:ExpressionStatement[6447-6484]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6493-6500]:ReturnStatement[6493-6500]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[6507-6523]:SwitchCase[6507-6523]"
  }, {
    "left" : "tryConvertToNumber(n.getChildAtIndex(1));",
    "right" : "tryConvertToNumber(n.getChildAtIndex(1));",
    "info" : "ExpressionStatement[6532-6573]:ExpressionStatement[6532-6573]"
  }, {
    "left" : "tryConvertToNumber(n.getLastChild());",
    "right" : "tryConvertToNumber(n.getLastChild());",
    "info" : "ExpressionStatement[6582-6619]:ExpressionStatement[6582-6619]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6628-6635]:ReturnStatement[6628-6635]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[6642-6658]:SwitchCase[6642-6658]"
  }, {
    "left" : "if (!NodeUtil.isUndefined(n))",
    "right" : "if (!NodeUtil.isUndefined(n))",
    "info" : "IfStatement[6667-6726]:IfStatement[6667-6726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6697-6726]:Block[6697-6726]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6709-6716]:ReturnStatement[6709-6716]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6735-6741]:BreakStatement[6735-6741]"
  }, {
    "left" : "Double result = NodeUtil.getNumberValue(n);",
    "right" : "Double result = NodeUtil.getNumberValue(n);",
    "info" : "VariableDeclarationStatement[6753-6796]:VariableDeclarationStatement[6753-6796]"
  }, {
    "left" : "if (result == null)",
    "right" : "if (result == null)",
    "info" : "IfStatement[6801-6842]:IfStatement[6801-6842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6821-6842]:Block[6821-6842]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[6829-6836]:ReturnStatement[6829-6836]"
  }, {
    "left" : "double value = result;",
    "right" : "double value = result;",
    "info" : "VariableDeclarationStatement[6848-6870]:VariableDeclarationStatement[6848-6870]"
  }, {
    "left" : "Node replacement;",
    "right" : "Node replacement;",
    "info" : "VariableDeclarationStatement[6876-6893]:VariableDeclarationStatement[6876-6893]"
  }, {
    "left" : "if (Double.isNaN(value))",
    "right" : "if (Double.isNaN(value))",
    "info" : "IfStatement[6898-7335]:IfStatement[6898-7335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6923-6985]:Block[6923-6985]"
  }, {
    "left" : "replacement = Node.newString(Token.NAME, \"NaN\");",
    "right" : "replacement = Node.newString(Token.NAME, \"NaN\");",
    "info" : "ExpressionStatement[6931-6979]:ExpressionStatement[6931-6979]"
  }, {
    "left" : "if (value == Double.POSITIVE_INFINITY)",
    "right" : "if (value == Double.POSITIVE_INFINITY)",
    "info" : "IfStatement[6991-7335]:IfStatement[6991-7335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7030-7097]:Block[7030-7097]"
  }, {
    "left" : "replacement = Node.newString(Token.NAME, \"Infinity\");",
    "right" : "replacement = Node.newString(Token.NAME, \"Infinity\");",
    "info" : "ExpressionStatement[7038-7091]:ExpressionStatement[7038-7091]"
  }, {
    "left" : "if (value == Double.NEGATIVE_INFINITY)",
    "right" : "if (value == Double.NEGATIVE_INFINITY)",
    "info" : "IfStatement[7103-7335]:IfStatement[7103-7335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7142-7279]:Block[7142-7279]"
  }, {
    "left" : "replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
    "right" : "replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
    "info" : "ExpressionStatement[7150-7224]:ExpressionStatement[7150-7224]"
  }, {
    "left" : "replacement.copyInformationFromForTree(n);",
    "right" : "replacement.copyInformationFromForTree(n);",
    "info" : "ExpressionStatement[7231-7273]:ExpressionStatement[7231-7273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7285-7335]:Block[7285-7335]"
  }, {
    "left" : "replacement = Node.newNumber(value);",
    "right" : "replacement = Node.newNumber(value);",
    "info" : "ExpressionStatement[7293-7329]:ExpressionStatement[7293-7329]"
  }, {
    "left" : "n.getParent().replaceChild(n, replacement);",
    "right" : "n.getParent().replaceChild(n, replacement);",
    "info" : "ExpressionStatement[7341-7384]:ExpressionStatement[7341-7384]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[7389-7408]:ExpressionStatement[7389-7408]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7539-7546]:Modifier[7539-7546]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[7547-7551]:SimpleType[7547-7551]"
  }, {
    "left" : "tryFoldTypeof",
    "right" : "tryFoldTypeof",
    "info" : "SimpleName[7552-7565]:SimpleName[7552-7565]"
  }, {
    "left" : "Node originalTypeofNode",
    "right" : "Node originalTypeofNode",
    "info" : "SingleVariableDeclaration[7566-7589]:SingleVariableDeclaration[7566-7589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7591-9013]:Block[7591-9013]"
  }, {
    "left" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
    "right" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
    "info" : "ExpressionStatement[7597-7671]:ExpressionStatement[7597-7671]"
  }, {
    "left" : "Node argumentNode = originalTypeofNode.getFirstChild();",
    "right" : "Node argumentNode = originalTypeofNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[7677-7732]:VariableDeclarationStatement[7677-7732]"
  }, {
    "left" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
    "right" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
    "info" : "IfStatement[7737-7851]:IfStatement[7737-7851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7811-7851]:Block[7811-7851]"
  }, {
    "left" : "return originalTypeofNode;",
    "right" : "return originalTypeofNode;",
    "info" : "ReturnStatement[7819-7845]:ReturnStatement[7819-7845]"
  }, {
    "left" : "String typeNameString = null;",
    "right" : "String typeNameString = null;",
    "info" : "VariableDeclarationStatement[7857-7886]:VariableDeclarationStatement[7857-7886]"
  }, {
    "left" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
    "right" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
    "info" : "SwitchStatement[7892-8754]:SwitchStatement[7892-8754]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[7932-7952]:SwitchCase[7932-7952]"
  }, {
    "left" : "typeNameString = \"function\";",
    "right" : "typeNameString = \"function\";",
    "info" : "ExpressionStatement[7961-7989]:ExpressionStatement[7961-7989]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7998-8004]:BreakStatement[7998-8004]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[8011-8029]:SwitchCase[8011-8029]"
  }, {
    "left" : "typeNameString = \"string\";",
    "right" : "typeNameString = \"string\";",
    "info" : "ExpressionStatement[8038-8064]:ExpressionStatement[8038-8064]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8073-8079]:BreakStatement[8073-8079]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[8086-8104]:SwitchCase[8086-8104]"
  }, {
    "left" : "typeNameString = \"number\";",
    "right" : "typeNameString = \"number\";",
    "info" : "ExpressionStatement[8113-8139]:ExpressionStatement[8113-8139]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8148-8154]:BreakStatement[8148-8154]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[8161-8177]:SwitchCase[8161-8177]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[8184-8201]:SwitchCase[8184-8201]"
  }, {
    "left" : "typeNameString = \"boolean\";",
    "right" : "typeNameString = \"boolean\";",
    "info" : "ExpressionStatement[8210-8237]:ExpressionStatement[8210-8237]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8246-8252]:BreakStatement[8246-8252]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[8259-8275]:SwitchCase[8259-8275]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[8282-8303]:SwitchCase[8282-8303]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[8310-8330]:SwitchCase[8310-8330]"
  }, {
    "left" : "typeNameString = \"object\";",
    "right" : "typeNameString = \"object\";",
    "info" : "ExpressionStatement[8339-8365]:ExpressionStatement[8339-8365]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8374-8380]:BreakStatement[8374-8380]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[8387-8403]:SwitchCase[8387-8403]"
  }, {
    "left" : "typeNameString = \"undefined\";",
    "right" : "typeNameString = \"undefined\";",
    "info" : "ExpressionStatement[8412-8441]:ExpressionStatement[8412-8441]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8450-8456]:BreakStatement[8450-8456]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[8463-8479]:SwitchCase[8463-8479]"
  }, {
    "left" : "if (\"undefined\".equals(argumentNode.getString()))",
    "right" : "if (\"undefined\".equals(argumentNode.getString()))",
    "info" : "IfStatement[8632-8733]:IfStatement[8632-8733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8682-8733]:Block[8682-8733]"
  }, {
    "left" : "typeNameString = \"undefined\";",
    "right" : "typeNameString = \"undefined\";",
    "info" : "ExpressionStatement[8694-8723]:ExpressionStatement[8694-8723]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8742-8748]:BreakStatement[8742-8748]"
  }, {
    "left" : "if (typeNameString != null)",
    "right" : "if (typeNameString != null)",
    "info" : "IfStatement[8760-8977]:IfStatement[8760-8977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8788-8977]:Block[8788-8977]"
  }, {
    "left" : "Node newNode = Node.newString(typeNameString);",
    "right" : "Node newNode = Node.newString(typeNameString);",
    "info" : "VariableDeclarationStatement[8796-8842]:VariableDeclarationStatement[8796-8842]"
  }, {
    "left" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
    "right" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
    "info" : "ExpressionStatement[8849-8922]:ExpressionStatement[8849-8922]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[8929-8948]:ExpressionStatement[8929-8948]"
  }, {
    "left" : "return newNode;",
    "right" : "return newNode;",
    "info" : "ReturnStatement[8956-8971]:ReturnStatement[8956-8971]"
  }, {
    "left" : "return originalTypeofNode;",
    "right" : "return originalTypeofNode;",
    "info" : "ReturnStatement[8983-9009]:ReturnStatement[8983-9009]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9017-9024]:Modifier[9017-9024]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[9025-9029]:SimpleType[9025-9029]"
  }, {
    "left" : "tryFoldUnaryOperator",
    "right" : "tryFoldUnaryOperator",
    "info" : "SimpleName[9030-9050]:SimpleName[9030-9050]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[9051-9057]:SingleVariableDeclaration[9051-9057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9059-12018]:Block[9059-12018]"
  }, {
    "left" : "Preconditions.checkState(n.hasOneChild());",
    "right" : "Preconditions.checkState(n.hasOneChild());",
    "info" : "ExpressionStatement[9065-9107]:ExpressionStatement[9065-9107]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[9113-9143]:VariableDeclarationStatement[9113-9143]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[9148-9176]:VariableDeclarationStatement[9148-9176]"
  }, {
    "left" : "if (left == null)",
    "right" : "if (left == null)",
    "info" : "IfStatement[9182-9223]:IfStatement[9182-9223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9200-9223]:Block[9200-9223]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[9208-9217]:ReturnStatement[9208-9217]"
  }, {
    "left" : "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);",
    "right" : "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);",
    "info" : "VariableDeclarationStatement[9229-9287]:VariableDeclarationStatement[9229-9287]"
  }, {
    "left" : "if (leftVal == TernaryValue.UNKNOWN)",
    "right" : "if (leftVal == TernaryValue.UNKNOWN)",
    "info" : "IfStatement[9292-9352]:IfStatement[9292-9352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9329-9352]:Block[9329-9352]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[9337-9346]:ReturnStatement[9337-9346]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (left.getType() == Token.NUMBER) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (left.getType() == Token.NUMBER) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
    "info" : "SwitchStatement[9358-12014]:SwitchStatement[9358-12014]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[9387-9402]:SwitchCase[9387-9402]"
  }, {
    "left" : "if (left.getType() == Token.NUMBER)",
    "right" : "if (left.getType() == Token.NUMBER)",
    "info" : "IfStatement[9458-9633]:IfStatement[9458-9633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9494-9633]:Block[9494-9633]"
  }, {
    "left" : "double numValue = left.getDouble();",
    "right" : "double numValue = left.getDouble();",
    "info" : "VariableDeclarationStatement[9506-9541]:VariableDeclarationStatement[9506-9541]"
  }, {
    "left" : "if (numValue == 0 || numValue == 1)",
    "right" : "if (numValue == 0 || numValue == 1)",
    "info" : "IfStatement[9552-9623]:IfStatement[9552-9623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9588-9623]:Block[9588-9623]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[9602-9611]:ReturnStatement[9602-9611]"
  }, {
    "left" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
    "right" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
    "info" : "VariableDeclarationStatement[9642-9706]:VariableDeclarationStatement[9642-9706]"
  }, {
    "left" : "Node replacementNode = new Node(result);",
    "right" : "Node replacementNode = new Node(result);",
    "info" : "VariableDeclarationStatement[9715-9755]:VariableDeclarationStatement[9715-9755]"
  }, {
    "left" : "parent.replaceChild(n, replacementNode);",
    "right" : "parent.replaceChild(n, replacementNode);",
    "info" : "ExpressionStatement[9764-9804]:ExpressionStatement[9764-9804]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[9813-9832]:ExpressionStatement[9813-9832]"
  }, {
    "left" : "return replacementNode;",
    "right" : "return replacementNode;",
    "info" : "ReturnStatement[9841-9864]:ReturnStatement[9841-9864]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[9871-9886]:SwitchCase[9871-9886]"
  }, {
    "left" : "if (NodeUtil.isNumericResult(left))",
    "right" : "if (NodeUtil.isNumericResult(left))",
    "info" : "IfStatement[9895-10103]:IfStatement[9895-10103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9931-10103]:Block[9931-10103]"
  }, {
    "left" : "parent.replaceChild(n, left.detachFromParent());",
    "right" : "parent.replaceChild(n, left.detachFromParent());",
    "info" : "ExpressionStatement[9992-10040]:ExpressionStatement[9992-10040]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[10051-10070]:ExpressionStatement[10051-10070]"
  }, {
    "left" : "return left;",
    "right" : "return left;",
    "info" : "ReturnStatement[10081-10093]:ReturnStatement[10081-10093]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[10112-10121]:ReturnStatement[10112-10121]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[10128-10143]:SwitchCase[10128-10143]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10152-11080]:TryStatement[10152-11080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10156-10823]:Block[10156-10823]"
  }, {
    "left" : "if (left.getType() == Token.NAME)",
    "right" : "if (left.getType() == Token.NAME)",
    "info" : "IfStatement[10168-10609]:IfStatement[10168-10609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10202-10609]:Block[10202-10609]"
  }, {
    "left" : "if (left.getString().equals(\"Infinity\"))",
    "right" : "if (left.getString().equals(\"Infinity\"))",
    "info" : "IfStatement[10216-10597]:IfStatement[10216-10597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10257-10366]:Block[10257-10366]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[10343-10352]:ReturnStatement[10343-10352]"
  }, {
    "left" : "if (left.getString().equals(\"NaN\"))",
    "right" : "if (left.getString().equals(\"NaN\"))",
    "info" : "IfStatement[10372-10597]:IfStatement[10372-10597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10408-10597]:Block[10408-10597]"
  }, {
    "left" : "n.removeChild(left);",
    "right" : "n.removeChild(left);",
    "info" : "ExpressionStatement[10458-10478]:ExpressionStatement[10458-10478]"
  }, {
    "left" : "parent.replaceChild(n, left);",
    "right" : "parent.replaceChild(n, left);",
    "info" : "ExpressionStatement[10493-10522]:ExpressionStatement[10493-10522]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[10537-10556]:ExpressionStatement[10537-10556]"
  }, {
    "left" : "return left;",
    "right" : "return left;",
    "info" : "ReturnStatement[10571-10583]:ReturnStatement[10571-10583]"
  }, {
    "left" : "double negNum = -left.getDouble();",
    "right" : "double negNum = -left.getDouble();",
    "info" : "VariableDeclarationStatement[10621-10655]:VariableDeclarationStatement[10621-10655]"
  }, {
    "left" : "Node negNumNode = Node.newNumber(negNum);",
    "right" : "Node negNumNode = Node.newNumber(negNum);",
    "info" : "VariableDeclarationStatement[10667-10708]:VariableDeclarationStatement[10667-10708]"
  }, {
    "left" : "parent.replaceChild(n, negNumNode);",
    "right" : "parent.replaceChild(n, negNumNode);",
    "info" : "ExpressionStatement[10719-10754]:ExpressionStatement[10719-10754]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[10765-10784]:ExpressionStatement[10765-10784]"
  }, {
    "left" : "return negNumNode;",
    "right" : "return negNumNode;",
    "info" : "ReturnStatement[10795-10813]:ReturnStatement[10795-10813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10865-11080]:Block[10865-11080]"
  }, {
    "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
    "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
    "info" : "ExpressionStatement[11009-11050]:ExpressionStatement[11009-11050]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[11061-11070]:ReturnStatement[11061-11070]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[11087-11105]:SwitchCase[11087-11105]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[11114-11971]:TryStatement[11114-11971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11118-11714]:Block[11118-11714]"
  }, {
    "left" : "double val = left.getDouble();",
    "right" : "double val = left.getDouble();",
    "info" : "VariableDeclarationStatement[11130-11160]:VariableDeclarationStatement[11130-11160]"
  }, {
    "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
    "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
    "info" : "IfStatement[11171-11704]:IfStatement[11171-11704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11229-11608]:Block[11229-11608]"
  }, {
    "left" : "int intVal = (int) val;",
    "right" : "int intVal = (int) val;",
    "info" : "VariableDeclarationStatement[11243-11266]:VariableDeclarationStatement[11243-11266]"
  }, {
    "left" : "if (intVal == val)",
    "right" : "if (intVal == val)",
    "info" : "IfStatement[11279-11596]:IfStatement[11279-11596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11298-11496]:Block[11298-11496]"
  }, {
    "left" : "Node notIntValNode = Node.newNumber(~intVal);",
    "right" : "Node notIntValNode = Node.newNumber(~intVal);",
    "info" : "VariableDeclarationStatement[11314-11359]:VariableDeclarationStatement[11314-11359]"
  }, {
    "left" : "parent.replaceChild(n, notIntValNode);",
    "right" : "parent.replaceChild(n, notIntValNode);",
    "info" : "ExpressionStatement[11374-11412]:ExpressionStatement[11374-11412]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[11427-11446]:ExpressionStatement[11427-11446]"
  }, {
    "left" : "return notIntValNode;",
    "right" : "return notIntValNode;",
    "info" : "ReturnStatement[11461-11482]:ReturnStatement[11461-11482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11502-11596]:Block[11502-11596]"
  }, {
    "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
    "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
    "info" : "ExpressionStatement[11518-11558]:ExpressionStatement[11518-11558]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[11573-11582]:ReturnStatement[11573-11582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11614-11704]:Block[11614-11704]"
  }, {
    "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "info" : "ExpressionStatement[11628-11670]:ExpressionStatement[11628-11670]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[11683-11692]:ReturnStatement[11683-11692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11756-11971]:Block[11756-11971]"
  }, {
    "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
    "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
    "info" : "ExpressionStatement[11900-11941]:ExpressionStatement[11900-11941]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[11952-11961]:ReturnStatement[11952-11961]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[11980-11988]:SwitchCase[11980-11988]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[11999-12008]:ReturnStatement[11999-12008]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12122-12129]:Modifier[12122-12129]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12130-12134]:SimpleType[12130-12134]"
  }, {
    "left" : "tryFoldInstanceof",
    "right" : "tryFoldInstanceof",
    "info" : "SimpleName[12135-12152]:SimpleName[12135-12152]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12153-12159]:SingleVariableDeclaration[12153-12159]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[12161-12170]:SingleVariableDeclaration[12161-12170]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[12172-12182]:SingleVariableDeclaration[12172-12182]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12184-12941]:Block[12184-12941]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
    "info" : "ExpressionStatement[12190-12251]:ExpressionStatement[12190-12251]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
    "right" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
    "info" : "IfStatement[12340-12922]:IfStatement[12340-12922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12419-12922]:Block[12419-12922]"
  }, {
    "left" : "Node replacementNode = null;",
    "right" : "Node replacementNode = null;",
    "info" : "VariableDeclarationStatement[12428-12456]:VariableDeclarationStatement[12428-12456]"
  }, {
    "left" : "if (NodeUtil.isImmutableValue(left))",
    "right" : "if (NodeUtil.isImmutableValue(left))",
    "info" : "IfStatement[12464-12754]:IfStatement[12464-12754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12501-12608]:Block[12501-12608]"
  }, {
    "left" : "replacementNode = new Node(Token.FALSE);",
    "right" : "replacementNode = new Node(Token.FALSE);",
    "info" : "ExpressionStatement[12560-12600]:ExpressionStatement[12560-12600]"
  }, {
    "left" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
    "right" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
    "info" : "IfStatement[12614-12754]:IfStatement[12614-12754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12697-12754]:Block[12697-12754]"
  }, {
    "left" : "replacementNode = new Node(Token.TRUE);",
    "right" : "replacementNode = new Node(Token.TRUE);",
    "info" : "ExpressionStatement[12707-12746]:ExpressionStatement[12707-12746]"
  }, {
    "left" : "if (replacementNode != null)",
    "right" : "if (replacementNode != null)",
    "info" : "IfStatement[12762-12916]:IfStatement[12762-12916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12791-12916]:Block[12791-12916]"
  }, {
    "left" : "n.getParent().replaceChild(n, replacementNode);",
    "right" : "n.getParent().replaceChild(n, replacementNode);",
    "info" : "ExpressionStatement[12801-12848]:ExpressionStatement[12801-12848]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[12857-12876]:ExpressionStatement[12857-12876]"
  }, {
    "left" : "return replacementNode;",
    "right" : "return replacementNode;",
    "info" : "ReturnStatement[12885-12908]:ReturnStatement[12885-12908]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[12928-12937]:ReturnStatement[12928-12937]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12945-12952]:Modifier[12945-12952]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12953-12957]:SimpleType[12953-12957]"
  }, {
    "left" : "tryFoldAssign",
    "right" : "tryFoldAssign",
    "info" : "SimpleName[12958-12971]:SimpleName[12958-12971]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12972-12978]:SingleVariableDeclaration[12972-12978]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[12980-12989]:SingleVariableDeclaration[12980-12989]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[12991-13001]:SingleVariableDeclaration[12991-13001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13003-14761]:Block[13003-14761]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
    "info" : "ExpressionStatement[13009-13066]:ExpressionStatement[13009-13066]"
  }, {
    "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
    "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
    "info" : "IfStatement[13117-13270]:IfStatement[13117-13270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13210-13270]:Block[13210-13270]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[13255-13264]:ReturnStatement[13255-13264]"
  }, {
    "left" : "if (mayHaveSideEffects(left))",
    "right" : "if (mayHaveSideEffects(left))",
    "info" : "IfStatement[13276-13329]:IfStatement[13276-13329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13306-13329]:Block[13306-13329]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[13314-13323]:ReturnStatement[13314-13323]"
  }, {
    "left" : "Node newRight;",
    "right" : "Node newRight;",
    "info" : "VariableDeclarationStatement[13335-13349]:VariableDeclarationStatement[13335-13349]"
  }, {
    "left" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
    "right" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
    "info" : "IfStatement[13354-13652]:IfStatement[13354-13652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13413-13459]:Block[13413-13459]"
  }, {
    "left" : "newRight = right.getLastChild();",
    "right" : "newRight = right.getLastChild();",
    "info" : "ExpressionStatement[13421-13453]:ExpressionStatement[13421-13453]"
  }, {
    "left" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
    "right" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
    "info" : "IfStatement[13465-13652]:IfStatement[13465-13652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13576-13623]:Block[13576-13623]"
  }, {
    "left" : "newRight = right.getFirstChild();",
    "right" : "newRight = right.getFirstChild();",
    "info" : "ExpressionStatement[13584-13617]:ExpressionStatement[13584-13617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13629-13652]:Block[13629-13652]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[13637-13646]:ReturnStatement[13637-13646]"
  }, {
    "left" : "int newType = -1;",
    "right" : "int newType = -1;",
    "info" : "VariableDeclarationStatement[13658-13675]:VariableDeclarationStatement[13658-13675]"
  }, {
    "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
    "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
    "info" : "SwitchStatement[13680-14566]:SwitchStatement[13680-14566]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[13713-13728]:SwitchCase[13713-13728]"
  }, {
    "left" : "newType = Token.ASSIGN_ADD;",
    "right" : "newType = Token.ASSIGN_ADD;",
    "info" : "ExpressionStatement[13737-13764]:ExpressionStatement[13737-13764]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13773-13779]:BreakStatement[13773-13779]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[13786-13804]:SwitchCase[13786-13804]"
  }, {
    "left" : "newType = Token.ASSIGN_BITAND;",
    "right" : "newType = Token.ASSIGN_BITAND;",
    "info" : "ExpressionStatement[13813-13843]:ExpressionStatement[13813-13843]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13852-13858]:BreakStatement[13852-13858]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[13865-13882]:SwitchCase[13865-13882]"
  }, {
    "left" : "newType = Token.ASSIGN_BITOR;",
    "right" : "newType = Token.ASSIGN_BITOR;",
    "info" : "ExpressionStatement[13891-13920]:ExpressionStatement[13891-13920]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13929-13935]:BreakStatement[13929-13935]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[13942-13960]:SwitchCase[13942-13960]"
  }, {
    "left" : "newType = Token.ASSIGN_BITXOR;",
    "right" : "newType = Token.ASSIGN_BITXOR;",
    "info" : "ExpressionStatement[13969-13999]:ExpressionStatement[13969-13999]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14008-14014]:BreakStatement[14008-14014]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[14021-14036]:SwitchCase[14021-14036]"
  }, {
    "left" : "newType = Token.ASSIGN_DIV;",
    "right" : "newType = Token.ASSIGN_DIV;",
    "info" : "ExpressionStatement[14045-14072]:ExpressionStatement[14045-14072]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14081-14087]:BreakStatement[14081-14087]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[14094-14109]:SwitchCase[14094-14109]"
  }, {
    "left" : "newType = Token.ASSIGN_LSH;",
    "right" : "newType = Token.ASSIGN_LSH;",
    "info" : "ExpressionStatement[14118-14145]:ExpressionStatement[14118-14145]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14154-14160]:BreakStatement[14154-14160]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[14167-14182]:SwitchCase[14167-14182]"
  }, {
    "left" : "newType = Token.ASSIGN_MOD;",
    "right" : "newType = Token.ASSIGN_MOD;",
    "info" : "ExpressionStatement[14191-14218]:ExpressionStatement[14191-14218]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14227-14233]:BreakStatement[14227-14233]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[14240-14255]:SwitchCase[14240-14255]"
  }, {
    "left" : "newType = Token.ASSIGN_MUL;",
    "right" : "newType = Token.ASSIGN_MUL;",
    "info" : "ExpressionStatement[14264-14291]:ExpressionStatement[14264-14291]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14300-14306]:BreakStatement[14300-14306]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[14313-14328]:SwitchCase[14313-14328]"
  }, {
    "left" : "newType = Token.ASSIGN_RSH;",
    "right" : "newType = Token.ASSIGN_RSH;",
    "info" : "ExpressionStatement[14337-14364]:ExpressionStatement[14337-14364]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14373-14379]:BreakStatement[14373-14379]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[14386-14401]:SwitchCase[14386-14401]"
  }, {
    "left" : "newType = Token.ASSIGN_SUB;",
    "right" : "newType = Token.ASSIGN_SUB;",
    "info" : "ExpressionStatement[14410-14437]:ExpressionStatement[14410-14437]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14446-14452]:BreakStatement[14446-14452]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[14459-14475]:SwitchCase[14459-14475]"
  }, {
    "left" : "newType = Token.ASSIGN_URSH;",
    "right" : "newType = Token.ASSIGN_URSH;",
    "info" : "ExpressionStatement[14484-14512]:ExpressionStatement[14484-14512]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14521-14527]:BreakStatement[14521-14527]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[14534-14542]:SwitchCase[14534-14542]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[14551-14560]:ReturnStatement[14551-14560]"
  }, {
    "left" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
    "right" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
    "info" : "VariableDeclarationStatement[14572-14667]:VariableDeclarationStatement[14572-14667]"
  }, {
    "left" : "n.getParent().replaceChild(n, newNode);",
    "right" : "n.getParent().replaceChild(n, newNode);",
    "info" : "ExpressionStatement[14672-14711]:ExpressionStatement[14672-14711]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[14717-14736]:ExpressionStatement[14717-14736]"
  }, {
    "left" : "return newNode;",
    "right" : "return newNode;",
    "info" : "ReturnStatement[14742-14757]:ReturnStatement[14742-14757]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14809-14816]:Modifier[14809-14816]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[14817-14821]:SimpleType[14817-14821]"
  }, {
    "left" : "tryFoldAndOr",
    "right" : "tryFoldAndOr",
    "info" : "SimpleName[14822-14834]:SimpleName[14822-14834]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14835-14841]:SingleVariableDeclaration[14835-14841]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[14843-14852]:SingleVariableDeclaration[14843-14852]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[14854-14864]:SingleVariableDeclaration[14854-14864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14866-15749]:Block[14866-15749]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[14872-14900]:VariableDeclarationStatement[14872-14900]"
  }, {
    "left" : "Node result = null;",
    "right" : "Node result = null;",
    "info" : "VariableDeclarationStatement[14906-14925]:VariableDeclarationStatement[14906-14925]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[14931-14954]:VariableDeclarationStatement[14931-14954]"
  }, {
    "left" : "TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);",
    "right" : "TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);",
    "info" : "VariableDeclarationStatement[14960-15020]:VariableDeclarationStatement[14960-15020]"
  }, {
    "left" : "if (leftVal != TernaryValue.UNKNOWN)",
    "right" : "if (leftVal != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[15026-15436]:IfStatement[15026-15436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15063-15436]:Block[15063-15436]"
  }, {
    "left" : "boolean lval = leftVal.toBoolean(true);",
    "right" : "boolean lval = leftVal.toBoolean(true);",
    "info" : "VariableDeclarationStatement[15071-15110]:VariableDeclarationStatement[15071-15110]"
  }, {
    "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
    "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
    "info" : "IfStatement[15200-15430]:IfStatement[15200-15430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15270-15303]:Block[15270-15303]"
  }, {
    "left" : "result = left;",
    "right" : "result = left;",
    "info" : "ExpressionStatement[15280-15294]:ExpressionStatement[15280-15294]"
  }, {
    "left" : "if (!mayHaveSideEffects(left))",
    "right" : "if (!mayHaveSideEffects(left))",
    "info" : "IfStatement[15309-15430]:IfStatement[15309-15430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15340-15430]:Block[15340-15430]"
  }, {
    "left" : "result = right;",
    "right" : "result = right;",
    "info" : "ExpressionStatement[15407-15422]:ExpressionStatement[15407-15422]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[15556-15745]:IfStatement[15556-15745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15576-15716]:Block[15576-15716]"
  }, {
    "left" : "n.removeChild(result);",
    "right" : "n.removeChild(result);",
    "info" : "ExpressionStatement[15602-15624]:ExpressionStatement[15602-15624]"
  }, {
    "left" : "parent.replaceChild(n, result);",
    "right" : "parent.replaceChild(n, result);",
    "info" : "ExpressionStatement[15631-15662]:ExpressionStatement[15631-15662]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[15669-15688]:ExpressionStatement[15669-15688]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[15696-15710]:ReturnStatement[15696-15710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15722-15745]:Block[15722-15745]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[15730-15739]:ReturnStatement[15730-15739]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16178-16185]:Modifier[16178-16185]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[16186-16190]:SimpleType[16186-16190]"
  }, {
    "left" : "tryFoldChildAddString",
    "right" : "tryFoldChildAddString",
    "info" : "SimpleName[16191-16212]:SimpleName[16191-16212]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16213-16219]:SingleVariableDeclaration[16213-16219]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[16221-16230]:SingleVariableDeclaration[16221-16230]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[16232-16242]:SingleVariableDeclaration[16232-16242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16244-17979]:Block[16244-17979]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.getType() == Token.ADD)",
    "right" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.getType() == Token.ADD)",
    "info" : "IfStatement[16251-17098]:IfStatement[16251-17098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16333-17098]:Block[16333-17098]"
  }, {
    "left" : "Node ll = left.getFirstChild();",
    "right" : "Node ll = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[16342-16373]:VariableDeclarationStatement[16342-16373]"
  }, {
    "left" : "Node lr = ll.getNext();",
    "right" : "Node lr = ll.getNext();",
    "info" : "VariableDeclarationStatement[16380-16403]:VariableDeclarationStatement[16380-16403]"
  }, {
    "left" : "if (lr.getType() == Token.STRING)",
    "right" : "if (lr.getType() == Token.STRING)",
    "info" : "IfStatement[16637-17092]:IfStatement[16637-17092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16671-17092]:Block[16671-17092]"
  }, {
    "left" : "String leftString = NodeUtil.getStringValue(lr);",
    "right" : "String leftString = NodeUtil.getStringValue(lr);",
    "info" : "VariableDeclarationStatement[16681-16729]:VariableDeclarationStatement[16681-16729]"
  }, {
    "left" : "String rightString = NodeUtil.getStringValue(right);",
    "right" : "String rightString = NodeUtil.getStringValue(right);",
    "info" : "VariableDeclarationStatement[16738-16790]:VariableDeclarationStatement[16738-16790]"
  }, {
    "left" : "if (leftString != null && rightString != null)",
    "right" : "if (leftString != null && rightString != null)",
    "info" : "IfStatement[16799-17084]:IfStatement[16799-17084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16846-17084]:Block[16846-17084]"
  }, {
    "left" : "left.removeChild(ll);",
    "right" : "left.removeChild(ll);",
    "info" : "ExpressionStatement[16858-16879]:ExpressionStatement[16858-16879]"
  }, {
    "left" : "String result = leftString + rightString;",
    "right" : "String result = leftString + rightString;",
    "info" : "VariableDeclarationStatement[16890-16931]:VariableDeclarationStatement[16890-16931]"
  }, {
    "left" : "n.replaceChild(left, ll);",
    "right" : "n.replaceChild(left, ll);",
    "info" : "ExpressionStatement[16942-16967]:ExpressionStatement[16942-16967]"
  }, {
    "left" : "n.replaceChild(right, Node.newString(result));",
    "right" : "n.replaceChild(right, Node.newString(result));",
    "info" : "ExpressionStatement[16978-17024]:ExpressionStatement[16978-17024]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[17035-17054]:ExpressionStatement[17035-17054]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[17065-17074]:ReturnStatement[17065-17074]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.getType() == Token.ADD)",
    "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.getType() == Token.ADD)",
    "info" : "IfStatement[17104-17960]:IfStatement[17104-17960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17186-17960]:Block[17186-17960]"
  }, {
    "left" : "Node rl = right.getFirstChild();",
    "right" : "Node rl = right.getFirstChild();",
    "info" : "VariableDeclarationStatement[17195-17227]:VariableDeclarationStatement[17195-17227]"
  }, {
    "left" : "Node rr = right.getLastChild();",
    "right" : "Node rr = right.getLastChild();",
    "info" : "VariableDeclarationStatement[17234-17265]:VariableDeclarationStatement[17234-17265]"
  }, {
    "left" : "if (rl.getType() == Token.STRING)",
    "right" : "if (rl.getType() == Token.STRING)",
    "info" : "IfStatement[17499-17954]:IfStatement[17499-17954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17533-17954]:Block[17533-17954]"
  }, {
    "left" : "String leftString = NodeUtil.getStringValue(left);",
    "right" : "String leftString = NodeUtil.getStringValue(left);",
    "info" : "VariableDeclarationStatement[17543-17593]:VariableDeclarationStatement[17543-17593]"
  }, {
    "left" : "String rightString = NodeUtil.getStringValue(rl);",
    "right" : "String rightString = NodeUtil.getStringValue(rl);",
    "info" : "VariableDeclarationStatement[17602-17651]:VariableDeclarationStatement[17602-17651]"
  }, {
    "left" : "if (leftString != null && rightString != null)",
    "right" : "if (leftString != null && rightString != null)",
    "info" : "IfStatement[17660-17946]:IfStatement[17660-17946]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17707-17946]:Block[17707-17946]"
  }, {
    "left" : "right.removeChild(rr);",
    "right" : "right.removeChild(rr);",
    "info" : "ExpressionStatement[17719-17741]:ExpressionStatement[17719-17741]"
  }, {
    "left" : "String result = leftString + rightString;",
    "right" : "String result = leftString + rightString;",
    "info" : "VariableDeclarationStatement[17752-17793]:VariableDeclarationStatement[17752-17793]"
  }, {
    "left" : "n.replaceChild(right, rr);",
    "right" : "n.replaceChild(right, rr);",
    "info" : "ExpressionStatement[17804-17830]:ExpressionStatement[17804-17830]"
  }, {
    "left" : "n.replaceChild(left, Node.newString(result));",
    "right" : "n.replaceChild(left, Node.newString(result));",
    "info" : "ExpressionStatement[17841-17886]:ExpressionStatement[17841-17886]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[17897-17916]:ExpressionStatement[17897-17916]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[17927-17936]:ReturnStatement[17927-17936]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[17966-17975]:ReturnStatement[17966-17975]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18047-18054]:Modifier[18047-18054]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[18055-18059]:SimpleType[18055-18059]"
  }, {
    "left" : "tryFoldAddConstantString",
    "right" : "tryFoldAddConstantString",
    "info" : "SimpleName[18060-18084]:SimpleName[18060-18084]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18085-18091]:SingleVariableDeclaration[18085-18091]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[18093-18102]:SingleVariableDeclaration[18093-18102]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[18104-18114]:SingleVariableDeclaration[18104-18114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18116-18613]:Block[18116-18613]"
  }, {
    "left" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
    "right" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
    "info" : "IfStatement[18122-18592]:IfStatement[18122-18592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18201-18592]:Block[18201-18592]"
  }, {
    "left" : "String leftString = NodeUtil.getStringValue(left);",
    "right" : "String leftString = NodeUtil.getStringValue(left);",
    "info" : "VariableDeclarationStatement[18231-18281]:VariableDeclarationStatement[18231-18281]"
  }, {
    "left" : "String rightString = NodeUtil.getStringValue(right);",
    "right" : "String rightString = NodeUtil.getStringValue(right);",
    "info" : "VariableDeclarationStatement[18288-18340]:VariableDeclarationStatement[18288-18340]"
  }, {
    "left" : "if (leftString != null && rightString != null)",
    "right" : "if (leftString != null && rightString != null)",
    "info" : "IfStatement[18347-18586]:IfStatement[18347-18586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18394-18586]:Block[18394-18586]"
  }, {
    "left" : "Node newStringNode = Node.newString(leftString + rightString);",
    "right" : "Node newStringNode = Node.newString(leftString + rightString);",
    "info" : "VariableDeclarationStatement[18404-18466]:VariableDeclarationStatement[18404-18466]"
  }, {
    "left" : "n.getParent().replaceChild(n, newStringNode);",
    "right" : "n.getParent().replaceChild(n, newStringNode);",
    "info" : "ExpressionStatement[18475-18520]:ExpressionStatement[18475-18520]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[18529-18548]:ExpressionStatement[18529-18548]"
  }, {
    "left" : "return newStringNode;",
    "right" : "return newStringNode;",
    "info" : "ReturnStatement[18557-18578]:ReturnStatement[18557-18578]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[18600-18609]:ReturnStatement[18600-18609]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18674-18681]:Modifier[18674-18681]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[18682-18686]:SimpleType[18682-18686]"
  }, {
    "left" : "tryFoldArithmeticOp",
    "right" : "tryFoldArithmeticOp",
    "info" : "SimpleName[18687-18706]:SimpleName[18687-18706]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18707-18713]:SingleVariableDeclaration[18707-18713]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[18715-18724]:SingleVariableDeclaration[18715-18724]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[18726-18736]:SingleVariableDeclaration[18726-18736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18738-18990]:Block[18738-18990]"
  }, {
    "left" : "Node result = performArithmeticOp(n.getType(), left, right);",
    "right" : "Node result = performArithmeticOp(n.getType(), left, right);",
    "info" : "VariableDeclarationStatement[18744-18804]:VariableDeclarationStatement[18744-18804]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[18809-18972]:IfStatement[18809-18972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18829-18972]:Block[18829-18972]"
  }, {
    "left" : "result.copyInformationFromForTree(n);",
    "right" : "result.copyInformationFromForTree(n);",
    "info" : "ExpressionStatement[18837-18874]:ExpressionStatement[18837-18874]"
  }, {
    "left" : "n.getParent().replaceChild(n, result);",
    "right" : "n.getParent().replaceChild(n, result);",
    "info" : "ExpressionStatement[18881-18919]:ExpressionStatement[18881-18919]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[18926-18945]:ExpressionStatement[18926-18945]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[18952-18966]:ReturnStatement[18952-18966]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[18977-18986]:ReturnStatement[18977-18986]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19051-19058]:Modifier[19051-19058]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[19059-19063]:SimpleType[19059-19063]"
  }, {
    "left" : "performArithmeticOp",
    "right" : "performArithmeticOp",
    "info" : "SimpleName[19064-19083]:SimpleName[19064-19083]"
  }, {
    "left" : "int opType",
    "right" : "int opType",
    "info" : "SingleVariableDeclaration[19084-19094]:SingleVariableDeclaration[19084-19094]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[19096-19105]:SingleVariableDeclaration[19096-19105]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[19107-19117]:SingleVariableDeclaration[19107-19117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19119-21547]:Block[19119-21547]"
  }, {
    "left" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
    "right" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
    "info" : "IfStatement[19213-19361]:IfStatement[19213-19361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19335-19361]:Block[19335-19361]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[19343-19355]:ReturnStatement[19343-19355]"
  }, {
    "left" : "double result;",
    "right" : "double result;",
    "info" : "VariableDeclarationStatement[19367-19381]:VariableDeclarationStatement[19367-19381]"
  }, {
    "left" : "Double lValObj = NodeUtil.getNumberValue(left);",
    "right" : "Double lValObj = NodeUtil.getNumberValue(left);",
    "info" : "VariableDeclarationStatement[19510-19557]:VariableDeclarationStatement[19510-19557]"
  }, {
    "left" : "if (lValObj == null)",
    "right" : "if (lValObj == null)",
    "info" : "IfStatement[19562-19609]:IfStatement[19562-19609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19583-19609]:Block[19583-19609]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[19591-19603]:ReturnStatement[19591-19603]"
  }, {
    "left" : "Double rValObj = NodeUtil.getNumberValue(right);",
    "right" : "Double rValObj = NodeUtil.getNumberValue(right);",
    "info" : "VariableDeclarationStatement[19614-19662]:VariableDeclarationStatement[19614-19662]"
  }, {
    "left" : "if (rValObj == null)",
    "right" : "if (rValObj == null)",
    "info" : "IfStatement[19667-19714]:IfStatement[19667-19714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19688-19714]:Block[19688-19714]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[19696-19708]:ReturnStatement[19696-19708]"
  }, {
    "left" : "double lval = lValObj;",
    "right" : "double lval = lValObj;",
    "info" : "VariableDeclarationStatement[19720-19742]:VariableDeclarationStatement[19720-19742]"
  }, {
    "left" : "double rval = rValObj;",
    "right" : "double rval = rValObj;",
    "info" : "VariableDeclarationStatement[19747-19769]:VariableDeclarationStatement[19747-19769]"
  }, {
    "left" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
    "right" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
    "info" : "SwitchStatement[19775-20670]:SwitchStatement[19775-20670]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[19799-19817]:SwitchCase[19799-19817]"
  }, {
    "left" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
    "right" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
    "info" : "ExpressionStatement[19826-19893]:ExpressionStatement[19826-19893]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19902-19908]:BreakStatement[19902-19908]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[19915-19932]:SwitchCase[19915-19932]"
  }, {
    "left" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
    "right" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
    "info" : "ExpressionStatement[19941-20008]:ExpressionStatement[19941-20008]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20017-20023]:BreakStatement[20017-20023]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[20030-20048]:SwitchCase[20030-20048]"
  }, {
    "left" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
    "right" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
    "info" : "ExpressionStatement[20057-20124]:ExpressionStatement[20057-20124]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20133-20139]:BreakStatement[20133-20139]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[20146-20161]:SwitchCase[20146-20161]"
  }, {
    "left" : "result = lval + rval;",
    "right" : "result = lval + rval;",
    "info" : "ExpressionStatement[20170-20191]:ExpressionStatement[20170-20191]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20200-20206]:BreakStatement[20200-20206]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[20213-20228]:SwitchCase[20213-20228]"
  }, {
    "left" : "result = lval - rval;",
    "right" : "result = lval - rval;",
    "info" : "ExpressionStatement[20237-20258]:ExpressionStatement[20237-20258]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20267-20273]:BreakStatement[20267-20273]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[20280-20295]:SwitchCase[20280-20295]"
  }, {
    "left" : "result = lval * rval;",
    "right" : "result = lval * rval;",
    "info" : "ExpressionStatement[20304-20325]:ExpressionStatement[20304-20325]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20334-20340]:BreakStatement[20334-20340]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[20347-20362]:SwitchCase[20347-20362]"
  }, {
    "left" : "if (rval == 0)",
    "right" : "if (rval == 0)",
    "info" : "IfStatement[20371-20420]:IfStatement[20371-20420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20386-20420]:Block[20386-20420]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[20398-20410]:ReturnStatement[20398-20410]"
  }, {
    "left" : "result = lval % rval;",
    "right" : "result = lval % rval;",
    "info" : "ExpressionStatement[20429-20450]:ExpressionStatement[20429-20450]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20459-20465]:BreakStatement[20459-20465]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[20472-20487]:SwitchCase[20472-20487]"
  }, {
    "left" : "if (rval == 0)",
    "right" : "if (rval == 0)",
    "info" : "IfStatement[20496-20545]:IfStatement[20496-20545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20511-20545]:Block[20511-20545]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[20523-20535]:ReturnStatement[20523-20535]"
  }, {
    "left" : "result = lval / rval;",
    "right" : "result = lval / rval;",
    "info" : "ExpressionStatement[20554-20575]:ExpressionStatement[20554-20575]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20584-20590]:BreakStatement[20584-20590]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[20597-20605]:SwitchCase[20597-20605]"
  }, {
    "left" : "throw new Error(\"Unexpected arithmetic operator\");",
    "right" : "throw new Error(\"Unexpected arithmetic operator\");",
    "info" : "ThrowStatement[20614-20664]:ThrowStatement[20614-20664]"
  }, {
    "left" : "if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER)",
    "right" : "if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER)",
    "info" : "IfStatement[20814-21525]:IfStatement[20814-21525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21127-21205]:Block[21127-21205]"
  }, {
    "left" : "Node newNumber = Node.newNumber(result);",
    "right" : "Node newNumber = Node.newNumber(result);",
    "info" : "VariableDeclarationStatement[21135-21175]:VariableDeclarationStatement[21135-21175]"
  }, {
    "left" : "return newNumber;",
    "right" : "return newNumber;",
    "info" : "ReturnStatement[21182-21199]:ReturnStatement[21182-21199]"
  }, {
    "left" : "if (Double.isNaN(result))",
    "right" : "if (Double.isNaN(result))",
    "info" : "IfStatement[21211-21525]:IfStatement[21211-21525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21237-21292]:Block[21237-21292]"
  }, {
    "left" : "return Node.newString(Token.NAME, \"NaN\");",
    "right" : "return Node.newString(Token.NAME, \"NaN\");",
    "info" : "ReturnStatement[21245-21286]:ReturnStatement[21245-21286]"
  }, {
    "left" : "if (result == Double.POSITIVE_INFINITY)",
    "right" : "if (result == Double.POSITIVE_INFINITY)",
    "info" : "IfStatement[21298-21525]:IfStatement[21298-21525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21338-21398]:Block[21338-21398]"
  }, {
    "left" : "return Node.newString(Token.NAME, \"Infinity\");",
    "right" : "return Node.newString(Token.NAME, \"Infinity\");",
    "info" : "ReturnStatement[21346-21392]:ReturnStatement[21346-21392]"
  }, {
    "left" : "if (result == Double.NEGATIVE_INFINITY)",
    "right" : "if (result == Double.NEGATIVE_INFINITY)",
    "info" : "IfStatement[21404-21525]:IfStatement[21404-21525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21444-21525]:Block[21444-21525]"
  }, {
    "left" : "return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
    "right" : "return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
    "info" : "ReturnStatement[21452-21519]:ReturnStatement[21452-21519]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[21531-21543]:ReturnStatement[21531-21543]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22011-22018]:Modifier[22011-22018]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[22019-22023]:SimpleType[22019-22023]"
  }, {
    "left" : "tryFoldLeftChildOp",
    "right" : "tryFoldLeftChildOp",
    "info" : "SimpleName[22024-22042]:SimpleName[22024-22042]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22043-22049]:SingleVariableDeclaration[22043-22049]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[22051-22060]:SingleVariableDeclaration[22051-22060]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[22062-22072]:SingleVariableDeclaration[22062-22072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22074-23447]:Block[22074-23447]"
  }, {
    "left" : "int opType = n.getType();",
    "right" : "int opType = n.getType();",
    "info" : "VariableDeclarationStatement[22080-22105]:VariableDeclarationStatement[22080-22105]"
  }, {
    "left" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.getType() == Token.ADD);",
    "right" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.getType() == Token.ADD);",
    "info" : "ExpressionStatement[22110-22248]:ExpressionStatement[22110-22248]"
  }, {
    "left" : "Preconditions.checkState(\n        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));",
    "right" : "Preconditions.checkState(\n        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));",
    "info" : "ExpressionStatement[22254-22342]:ExpressionStatement[22254-22342]"
  }, {
    "left" : "Double rightValObj = NodeUtil.getNumberValue(right);",
    "right" : "Double rightValObj = NodeUtil.getNumberValue(right);",
    "info" : "VariableDeclarationStatement[22476-22528]:VariableDeclarationStatement[22476-22528]"
  }, {
    "left" : "if (rightValObj != null && left.getType() == opType)",
    "right" : "if (rightValObj != null && left.getType() == opType)",
    "info" : "IfStatement[22533-23428]:IfStatement[22533-23428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22586-23428]:Block[22586-23428]"
  }, {
    "left" : "Preconditions.checkState(left.getChildCount() == 2);",
    "right" : "Preconditions.checkState(left.getChildCount() == 2);",
    "info" : "ExpressionStatement[22594-22646]:ExpressionStatement[22594-22646]"
  }, {
    "left" : "Node ll = left.getFirstChild();",
    "right" : "Node ll = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[22654-22685]:VariableDeclarationStatement[22654-22685]"
  }, {
    "left" : "Node lr = ll.getNext();",
    "right" : "Node lr = ll.getNext();",
    "info" : "VariableDeclarationStatement[22692-22715]:VariableDeclarationStatement[22692-22715]"
  }, {
    "left" : "Node valueToCombine = ll;",
    "right" : "Node valueToCombine = ll;",
    "info" : "VariableDeclarationStatement[22723-22748]:VariableDeclarationStatement[22723-22748]"
  }, {
    "left" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
    "right" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
    "info" : "VariableDeclarationStatement[22755-22825]:VariableDeclarationStatement[22755-22825]"
  }, {
    "left" : "if (replacement == null)",
    "right" : "if (replacement == null)",
    "info" : "IfStatement[22832-22969]:IfStatement[22832-22969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22857-22969]:Block[22857-22969]"
  }, {
    "left" : "valueToCombine = lr;",
    "right" : "valueToCombine = lr;",
    "info" : "ExpressionStatement[22867-22887]:ExpressionStatement[22867-22887]"
  }, {
    "left" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
    "right" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
    "info" : "ExpressionStatement[22896-22961]:ExpressionStatement[22896-22961]"
  }, {
    "left" : "if (replacement != null)",
    "right" : "if (replacement != null)",
    "info" : "IfStatement[22976-23422]:IfStatement[22976-23422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23001-23422]:Block[23001-23422]"
  }, {
    "left" : "left.removeChild(valueToCombine);",
    "right" : "left.removeChild(valueToCombine);",
    "info" : "ExpressionStatement[23062-23095]:ExpressionStatement[23062-23095]"
  }, {
    "left" : "n.replaceChild(left, left.removeFirstChild());",
    "right" : "n.replaceChild(left, left.removeFirstChild());",
    "info" : "ExpressionStatement[23161-23207]:ExpressionStatement[23161-23207]"
  }, {
    "left" : "replacement.copyInformationFromForTree(right);",
    "right" : "replacement.copyInformationFromForTree(right);",
    "info" : "ExpressionStatement[23296-23342]:ExpressionStatement[23296-23342]"
  }, {
    "left" : "n.replaceChild(right, replacement);",
    "right" : "n.replaceChild(right, replacement);",
    "info" : "ExpressionStatement[23351-23386]:ExpressionStatement[23351-23386]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[23395-23414]:ExpressionStatement[23395-23414]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[23434-23443]:ReturnStatement[23434-23443]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23451-23458]:Modifier[23451-23458]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[23459-23463]:SimpleType[23459-23463]"
  }, {
    "left" : "tryFoldAdd",
    "right" : "tryFoldAdd",
    "info" : "SimpleName[23464-23474]:SimpleName[23464-23474]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[23475-23484]:SingleVariableDeclaration[23475-23484]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[23486-23495]:SingleVariableDeclaration[23486-23495]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[23497-23507]:SingleVariableDeclaration[23497-23507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23509-24125]:Block[23509-24125]"
  }, {
    "left" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
    "right" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
    "info" : "ExpressionStatement[23515-23572]:ExpressionStatement[23515-23572]"
  }, {
    "left" : "if (NodeUtil.mayBeString(node, true))",
    "right" : "if (NodeUtil.mayBeString(node, true))",
    "info" : "IfStatement[23578-24121]:IfStatement[23578-24121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23616-23909]:Block[23616-23909]"
  }, {
    "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
    "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
    "info" : "IfStatement[23624-23903]:IfStatement[23624-23903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23717-23805]:Block[23717-23805]"
  }, {
    "left" : "return tryFoldAddConstantString(node, left, right);",
    "right" : "return tryFoldAddConstantString(node, left, right);",
    "info" : "ReturnStatement[23746-23797]:ReturnStatement[23746-23797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23811-23903]:Block[23811-23903]"
  }, {
    "left" : "return tryFoldChildAddString(node, left, right);",
    "right" : "return tryFoldChildAddString(node, left, right);",
    "info" : "ReturnStatement[23847-23895]:ReturnStatement[23847-23895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23915-24121]:Block[23915-24121]"
  }, {
    "left" : "Node result = tryFoldArithmeticOp(node, left, right);",
    "right" : "Node result = tryFoldArithmeticOp(node, left, right);",
    "info" : "VariableDeclarationStatement[23951-24004]:VariableDeclarationStatement[23951-24004]"
  }, {
    "left" : "if (result != node)",
    "right" : "if (result != node)",
    "info" : "IfStatement[24011-24063]:IfStatement[24011-24063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24031-24063]:Block[24031-24063]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[24041-24055]:ReturnStatement[24041-24055]"
  }, {
    "left" : "return tryFoldLeftChildOp(node, left, right);",
    "right" : "return tryFoldLeftChildOp(node, left, right);",
    "info" : "ReturnStatement[24070-24115]:ReturnStatement[24070-24115]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24175-24182]:Modifier[24175-24182]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[24183-24187]:SimpleType[24183-24187]"
  }, {
    "left" : "tryFoldShift",
    "right" : "tryFoldShift",
    "info" : "SimpleName[24188-24200]:SimpleName[24188-24200]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24201-24207]:SingleVariableDeclaration[24201-24207]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[24209-24218]:SingleVariableDeclaration[24209-24218]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[24220-24230]:SingleVariableDeclaration[24220-24230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24232-26102]:Block[24232-26102]"
  }, {
    "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
    "info" : "IfStatement[24238-26083]:IfStatement[24238-26083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24317-26083]:Block[24317-26083]"
  }, {
    "left" : "double result;",
    "right" : "double result;",
    "info" : "VariableDeclarationStatement[24326-24340]:VariableDeclarationStatement[24326-24340]"
  }, {
    "left" : "double lval = left.getDouble();",
    "right" : "double lval = left.getDouble();",
    "info" : "VariableDeclarationStatement[24347-24378]:VariableDeclarationStatement[24347-24378]"
  }, {
    "left" : "double rval = right.getDouble();",
    "right" : "double rval = right.getDouble();",
    "info" : "VariableDeclarationStatement[24385-24417]:VariableDeclarationStatement[24385-24417]"
  }, {
    "left" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
    "right" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
    "info" : "IfStatement[24570-24711]:IfStatement[24570-24711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24633-24711]:Block[24633-24711]"
  }, {
    "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
    "info" : "ExpressionStatement[24643-24685]:ExpressionStatement[24643-24685]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[24694-24703]:ReturnStatement[24694-24703]"
  }, {
    "left" : "if (!(rval >= 0 && rval < 32))",
    "right" : "if (!(rval >= 0 && rval < 32))",
    "info" : "IfStatement[24842-24950]:IfStatement[24842-24950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24873-24950]:Block[24873-24950]"
  }, {
    "left" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
    "right" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
    "info" : "ExpressionStatement[24883-24924]:ExpressionStatement[24883-24924]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[24933-24942]:ReturnStatement[24933-24942]"
  }, {
    "left" : "int lvalInt = (int) lval;",
    "right" : "int lvalInt = (int) lval;",
    "info" : "VariableDeclarationStatement[24995-25020]:VariableDeclarationStatement[24995-25020]"
  }, {
    "left" : "if (lvalInt != lval)",
    "right" : "if (lvalInt != lval)",
    "info" : "IfStatement[25027-25124]:IfStatement[25027-25124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25048-25124]:Block[25048-25124]"
  }, {
    "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
    "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
    "info" : "ExpressionStatement[25058-25098]:ExpressionStatement[25058-25098]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[25107-25116]:ReturnStatement[25107-25116]"
  }, {
    "left" : "int rvalInt = (int) rval;",
    "right" : "int rvalInt = (int) rval;",
    "info" : "VariableDeclarationStatement[25132-25157]:VariableDeclarationStatement[25132-25157]"
  }, {
    "left" : "if (rvalInt != rval)",
    "right" : "if (rvalInt != rval)",
    "info" : "IfStatement[25164-25262]:IfStatement[25164-25262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25185-25262]:Block[25185-25262]"
  }, {
    "left" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
    "right" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
    "info" : "ExpressionStatement[25195-25236]:ExpressionStatement[25195-25236]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[25245-25254]:ReturnStatement[25245-25254]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
    "right" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
    "info" : "SwitchStatement[25270-25930]:SwitchStatement[25270-25930]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[25301-25316]:SwitchCase[25301-25316]"
  }, {
    "left" : "result = lvalInt << rvalInt;",
    "right" : "result = lvalInt << rvalInt;",
    "info" : "ExpressionStatement[25327-25355]:ExpressionStatement[25327-25355]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25366-25372]:BreakStatement[25366-25372]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[25381-25396]:SwitchCase[25381-25396]"
  }, {
    "left" : "result = lvalInt >> rvalInt;",
    "right" : "result = lvalInt >> rvalInt;",
    "info" : "ExpressionStatement[25407-25435]:ExpressionStatement[25407-25435]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25446-25452]:BreakStatement[25446-25452]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[25461-25477]:SwitchCase[25461-25477]"
  }, {
    "left" : "long lvalLong = lvalInt & 0xffffffffL;",
    "right" : "long lvalLong = lvalInt & 0xffffffffL;",
    "info" : "VariableDeclarationStatement[25699-25737]:VariableDeclarationStatement[25699-25737]"
  }, {
    "left" : "result = lvalLong >>> rvalInt;",
    "right" : "result = lvalLong >>> rvalInt;",
    "info" : "ExpressionStatement[25748-25778]:ExpressionStatement[25748-25778]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25789-25795]:BreakStatement[25789-25795]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25804-25812]:SwitchCase[25804-25812]"
  }, {
    "left" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
    "right" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
    "info" : "ThrowStatement[25823-25922]:ThrowStatement[25823-25922]"
  }, {
    "left" : "Node newNumber = Node.newNumber(result);",
    "right" : "Node newNumber = Node.newNumber(result);",
    "info" : "VariableDeclarationStatement[25938-25978]:VariableDeclarationStatement[25938-25978]"
  }, {
    "left" : "n.getParent().replaceChild(n, newNumber);",
    "right" : "n.getParent().replaceChild(n, newNumber);",
    "info" : "ExpressionStatement[25985-26026]:ExpressionStatement[25985-26026]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[26033-26052]:ExpressionStatement[26033-26052]"
  }, {
    "left" : "return newNumber;",
    "right" : "return newNumber;",
    "info" : "ReturnStatement[26060-26077]:ReturnStatement[26060-26077]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[26089-26098]:ReturnStatement[26089-26098]"
  }, {
    "left" : "@SuppressWarnings(\"fallthrough\")",
    "right" : "@SuppressWarnings(\"fallthrough\")",
    "info" : "SingleMemberAnnotation[26160-26192]:SingleMemberAnnotation[26160-26192]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26195-26202]:Modifier[26195-26202]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[26203-26207]:SimpleType[26203-26207]"
  }, {
    "left" : "tryFoldComparison",
    "right" : "tryFoldComparison",
    "info" : "SimpleName[26208-26225]:SimpleName[26208-26225]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[26226-26232]:SingleVariableDeclaration[26226-26232]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[26234-26243]:SingleVariableDeclaration[26234-26243]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[26245-26255]:SingleVariableDeclaration[26245-26255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26257-31239]:Block[26257-31265]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false))",
    "right" : "if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false))",
    "info" : "IfStatement[26263-26513]:IfStatement[26263-26513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26356-26513]:Block[26356-26513]"
  }, {
    "left" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
    "right" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
    "info" : "IfStatement[26424-26507]:IfStatement[26424-26507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26480-26507]:Block[26480-26507]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[26490-26499]:ReturnStatement[26490-26499]"
  }, {
    "left" : "int op = n.getType();",
    "right" : "int op = n.getType();",
    "info" : "VariableDeclarationStatement[26519-26540]:VariableDeclarationStatement[26519-26540]"
  }, {
    "left" : "boolean result;",
    "right" : "boolean result;",
    "info" : "VariableDeclarationStatement[26545-26560]:VariableDeclarationStatement[26545-26560]"
  }, {
    "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, false);",
    "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, false);",
    "info" : "VariableDeclarationStatement[26642-26703]:VariableDeclarationStatement[26642-26703]"
  }, {
    "left" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));",
    "right" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));",
    "info" : "VariableDeclarationStatement[26708-26934]:VariableDeclarationStatement[26708-26934]"
  }, {
    "left" : "int lhType = left.getType();",
    "right" : "int lhType = getNormalizedNodeType(left);",
    "info" : "VariableDeclarationStatement[26939-26967]:VariableDeclarationStatement[26939-26980]"
  }, {
    "left" : "left",
    "right" : "left",
    "info" : "SimpleName[26952-26956]:SimpleName[26974-26978]"
  }, {
    "left" : "int rhType = right.getType();",
    "right" : "int rhType = getNormalizedNodeType(right);",
    "info" : "VariableDeclarationStatement[26972-27001]:VariableDeclarationStatement[26985-27027]"
  }, {
    "left" : "right",
    "right" : "right",
    "info" : "SimpleName[26985-26990]:SimpleName[27020-27025]"
  }, {
    "left" : "switch (lhType) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
    "right" : "switch (lhType) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
    "info" : "SwitchStatement[27006-31081]:SwitchStatement[27032-31107]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[27030-27046]:SwitchCase[27056-27072]"
  }, {
    "left" : "if (!NodeUtil.isLiteralValue(left.getFirstChild(), false))",
    "right" : "if (!NodeUtil.isLiteralValue(left.getFirstChild(), false))",
    "info" : "IfStatement[27055-27268]:IfStatement[27081-27294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27114-27145]:Block[27140-27171]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[27126-27135]:ReturnStatement[27152-27161]"
  }, {
    "left" : "if (!rightLiteral)",
    "right" : "if (!rightLiteral)",
    "info" : "IfStatement[27151-27268]:IfStatement[27177-27294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27170-27201]:Block[27196-27227]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[27182-27191]:ReturnStatement[27208-27217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27207-27268]:Block[27233-27294]"
  }, {
    "left" : "result = compareToUndefined(right, op);",
    "right" : "result = compareToUndefined(right, op);",
    "info" : "ExpressionStatement[27219-27258]:ExpressionStatement[27245-27284]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27277-27283]:BreakStatement[27303-27309]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[27291-27307]:SwitchCase[27317-27333]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[27314-27330]:SwitchCase[27340-27356]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[27337-27354]:SwitchCase[27363-27380]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[27363-27460]:IfStatement[27389-27486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27383-27460]:Block[27409-27486]"
  }, {
    "left" : "result = compareToUndefined(left, op);",
    "right" : "result = compareToUndefined(left, op);",
    "info" : "ExpressionStatement[27395-27433]:ExpressionStatement[27421-27459]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27444-27450]:BreakStatement[27470-27476]"
  }, {
    "left" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
    "right" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
    "info" : "IfStatement[27469-27599]:IfStatement[27495-27625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27568-27599]:Block[27594-27625]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[27580-27589]:ReturnStatement[27606-27615]"
  }, {
    "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
    "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
    "info" : "SwitchStatement[27608-28257]:SwitchStatement[27634-28283]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[27632-27648]:SwitchCase[27658-27674]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[27659-27673]:SwitchCase[27685-27699]"
  }, {
    "left" : "result = lhType == rhType;",
    "right" : "result = lhType == rhType;",
    "info" : "ExpressionStatement[27686-27712]:ExpressionStatement[27712-27738]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27725-27731]:BreakStatement[27751-27757]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[27743-27759]:SwitchCase[27769-27785]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[27770-27784]:SwitchCase[27796-27810]"
  }, {
    "left" : "result = lhType != rhType;",
    "right" : "result = lhType != rhType;",
    "info" : "ExpressionStatement[27797-27823]:ExpressionStatement[27823-27849]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[27836-27842]:BreakStatement[27862-27868]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[27854-27868]:SwitchCase[27880-27894]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[27879-27893]:SwitchCase[27905-27919]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[27904-27918]:SwitchCase[27930-27944]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[27929-27943]:SwitchCase[27955-27969]"
  }, {
    "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
    "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
    "info" : "VariableDeclarationStatement[27956-28014]:VariableDeclarationStatement[27982-28040]"
  }, {
    "left" : "if (compareResult != null)",
    "right" : "if (compareResult != null)",
    "info" : "IfStatement[28027-28152]:IfStatement[28053-28178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28054-28107]:Block[28080-28133]"
  }, {
    "left" : "result = compareResult;",
    "right" : "result = compareResult;",
    "info" : "ExpressionStatement[28070-28093]:ExpressionStatement[28096-28119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28113-28152]:Block[28139-28178]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[28129-28138]:ReturnStatement[28155-28164]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28165-28171]:BreakStatement[28191-28197]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[28183-28191]:SwitchCase[28209-28217]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[28204-28213]:ReturnStatement[28230-28239]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28266-28272]:BreakStatement[28292-28298]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[28280-28296]:SwitchCase[28306-28322]"
  }, {
    "left" : "if (right.getType() != Token.THIS)",
    "right" : "if (right.getType() != Token.THIS)",
    "info" : "IfStatement[28305-28371]:IfStatement[28331-28397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28340-28371]:Block[28366-28397]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[28352-28361]:ReturnStatement[28378-28387]"
  }, {
    "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
    "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
    "info" : "SwitchStatement[28380-28905]:SwitchStatement[28406-28931]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[28404-28420]:SwitchCase[28430-28446]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[28431-28445]:SwitchCase[28457-28471]"
  }, {
    "left" : "result = true;",
    "right" : "result = true;",
    "info" : "ExpressionStatement[28458-28472]:ExpressionStatement[28484-28498]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28485-28491]:BreakStatement[28511-28517]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[28503-28519]:SwitchCase[28529-28545]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[28530-28544]:SwitchCase[28556-28570]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[28557-28572]:ExpressionStatement[28583-28598]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28585-28591]:BreakStatement[28611-28617]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[28865-28873]:SwitchCase[28891-28899]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[28886-28895]:ReturnStatement[28912-28921]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28914-28920]:BreakStatement[28940-28946]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[28928-28946]:SwitchCase[28954-28972]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[28955-29052]:IfStatement[28981-29078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28975-29052]:Block[29001-29078]"
  }, {
    "left" : "result = compareToUndefined(left, op);",
    "right" : "result = compareToUndefined(left, op);",
    "info" : "ExpressionStatement[28987-29025]:ExpressionStatement[29013-29051]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29036-29042]:BreakStatement[29062-29068]"
  }, {
    "left" : "if (Token.STRING != right.getType())",
    "right" : "if (Token.STRING != right.getType())",
    "info" : "IfStatement[29061-29169]:IfStatement[29087-29195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29098-29169]:Block[29124-29195]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[29110-29119]:ReturnStatement[29136-29145]"
  }, {
    "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
    "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
    "info" : "SwitchStatement[29178-29551]:SwitchStatement[29204-29577]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[29202-29218]:SwitchCase[29228-29244]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[29229-29243]:SwitchCase[29255-29269]"
  }, {
    "left" : "result = left.getString().equals(right.getString());",
    "right" : "result = left.getString().equals(right.getString());",
    "info" : "ExpressionStatement[29256-29308]:ExpressionStatement[29282-29334]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29321-29327]:BreakStatement[29347-29353]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[29339-29355]:SwitchCase[29365-29381]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[29366-29380]:SwitchCase[29392-29406]"
  }, {
    "left" : "result = !left.getString().equals(right.getString());",
    "right" : "result = !left.getString().equals(right.getString());",
    "info" : "ExpressionStatement[29393-29446]:ExpressionStatement[29419-29472]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29459-29465]:BreakStatement[29485-29491]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[29477-29485]:SwitchCase[29503-29511]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[29498-29507]:ReturnStatement[29524-29533]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29560-29566]:BreakStatement[29586-29592]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[29574-29592]:SwitchCase[29600-29618]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[29601-29698]:IfStatement[29627-29724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29621-29698]:Block[29647-29724]"
  }, {
    "left" : "result = compareToUndefined(left, op);",
    "right" : "result = compareToUndefined(left, op);",
    "info" : "ExpressionStatement[29633-29671]:ExpressionStatement[29659-29697]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[29682-29688]:BreakStatement[29708-29714]"
  }, {
    "left" : "if (Token.NUMBER != right.getType())",
    "right" : "if (Token.NUMBER != right.getType())",
    "info" : "IfStatement[29707-29815]:IfStatement[29733-29841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29744-29815]:Block[29770-29841]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[29756-29765]:ReturnStatement[29782-29791]"
  }, {
    "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
    "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
    "info" : "VariableDeclarationStatement[29824-29882]:VariableDeclarationStatement[29850-29908]"
  }, {
    "left" : "if (compareResult != null)",
    "right" : "if (compareResult != null)",
    "info" : "IfStatement[29891-30003]:IfStatement[29917-30029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29918-29963]:Block[29944-29989]"
  }, {
    "left" : "result = compareResult;",
    "right" : "result = compareResult;",
    "info" : "ExpressionStatement[29930-29953]:ExpressionStatement[29956-29979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29969-30003]:Block[29995-30029]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[29981-29993]:ReturnStatement[30007-30019]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30012-30018]:BreakStatement[30038-30044]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[30026-30042]:SwitchCase[30052-30068]"
  }, {
    "left" : "if (undefinedRight)",
    "right" : "if (undefinedRight)",
    "info" : "IfStatement[30051-30148]:IfStatement[30077-30174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30071-30148]:Block[30097-30174]"
  }, {
    "left" : "result = compareToUndefined(left, op);",
    "right" : "result = compareToUndefined(left, op);",
    "info" : "ExpressionStatement[30083-30121]:ExpressionStatement[30109-30147]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30132-30138]:BreakStatement[30158-30164]"
  }, {
    "left" : "if (rightLiteral)",
    "right" : "if (rightLiteral)",
    "info" : "IfStatement[30158-30375]:IfStatement[30184-30401]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30176-30375]:Block[30202-30401]"
  }, {
    "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
    "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
    "info" : "VariableDeclarationStatement[30188-30251]:VariableDeclarationStatement[30214-30277]"
  }, {
    "left" : "if (undefinedLeft)",
    "right" : "if (undefinedLeft)",
    "info" : "IfStatement[30262-30365]:IfStatement[30288-30391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30281-30365]:Block[30307-30391]"
  }, {
    "left" : "result = compareToUndefined(right, op);",
    "right" : "result = compareToUndefined(right, op);",
    "info" : "ExpressionStatement[30295-30334]:ExpressionStatement[30321-30360]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30347-30353]:BreakStatement[30373-30379]"
  }, {
    "left" : "if (Token.NAME != right.getType())",
    "right" : "if (Token.NAME != right.getType())",
    "info" : "IfStatement[30385-30491]:IfStatement[30411-30517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30420-30491]:Block[30446-30517]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[30432-30441]:ReturnStatement[30458-30467]"
  }, {
    "left" : "String ln = left.getString();",
    "right" : "String ln = left.getString();",
    "info" : "VariableDeclarationStatement[30500-30529]:VariableDeclarationStatement[30526-30555]"
  }, {
    "left" : "String rn = right.getString();",
    "right" : "String rn = right.getString();",
    "info" : "VariableDeclarationStatement[30538-30568]:VariableDeclarationStatement[30564-30594]"
  }, {
    "left" : "if (!ln.equals(rn))",
    "right" : "if (!ln.equals(rn))",
    "info" : "IfStatement[30577-30657]:IfStatement[30603-30683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30597-30657]:Block[30623-30683]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[30609-30618]:ReturnStatement[30635-30644]"
  }, {
    "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
    "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
    "info" : "SwitchStatement[30667-30978]:SwitchStatement[30693-31004]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[30816-30830]:SwitchCase[30842-30856]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[30841-30855]:SwitchCase[30867-30881]"
  }, {
    "left" : "result = false;",
    "right" : "result = false;",
    "info" : "ExpressionStatement[30868-30883]:ExpressionStatement[30894-30909]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30896-30902]:BreakStatement[30922-30928]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[30913-30921]:SwitchCase[30939-30947]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[30934-30943]:ReturnStatement[30960-30969]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30987-30993]:BreakStatement[31013-31019]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[31001-31009]:SwitchCase[31027-31035]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[31066-31075]:ReturnStatement[31092-31101]"
  }, {
    "left" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
    "right" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
    "info" : "VariableDeclarationStatement[31087-31146]:VariableDeclarationStatement[31113-31172]"
  }, {
    "left" : "n.getParent().replaceChild(n, newNode);",
    "right" : "n.getParent().replaceChild(n, newNode);",
    "info" : "ExpressionStatement[31151-31190]:ExpressionStatement[31177-31216]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[31195-31214]:ExpressionStatement[31221-31240]"
  }, {
    "left" : "return newNode;",
    "right" : "return newNode;",
    "info" : "ReturnStatement[31220-31235]:ReturnStatement[31246-31261]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31440-31447]:Modifier[31785-31792]"
  }, {
    "left" : "Boolean",
    "right" : "Boolean",
    "info" : "SimpleType[31448-31455]:SimpleType[31793-31800]"
  }, {
    "left" : "compareAsNumbers",
    "right" : "compareAsNumbers",
    "info" : "SimpleName[31456-31472]:SimpleName[31801-31817]"
  }, {
    "left" : "int op",
    "right" : "int op",
    "info" : "SingleVariableDeclaration[31473-31479]:SingleVariableDeclaration[31818-31824]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[31481-31490]:SingleVariableDeclaration[31826-31835]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[31492-31502]:SingleVariableDeclaration[31837-31847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31504-32497]:Block[31849-32842]"
  }, {
    "left" : "Double leftValue = NodeUtil.getNumberValue(left);",
    "right" : "Double leftValue = NodeUtil.getNumberValue(left);",
    "info" : "VariableDeclarationStatement[31510-31559]:VariableDeclarationStatement[31855-31904]"
  }, {
    "left" : "if (leftValue == null)",
    "right" : "if (leftValue == null)",
    "info" : "IfStatement[31564-31613]:IfStatement[31909-31958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31587-31613]:Block[31932-31958]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[31595-31607]:ReturnStatement[31940-31952]"
  }, {
    "left" : "Double rightValue = NodeUtil.getNumberValue(right);",
    "right" : "Double rightValue = NodeUtil.getNumberValue(right);",
    "info" : "VariableDeclarationStatement[31618-31669]:VariableDeclarationStatement[31963-32014]"
  }, {
    "left" : "if (rightValue == null)",
    "right" : "if (rightValue == null)",
    "info" : "IfStatement[31674-31724]:IfStatement[32019-32069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31698-31724]:Block[32043-32069]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[31706-31718]:ReturnStatement[32051-32063]"
  }, {
    "left" : "double lv = leftValue;",
    "right" : "double lv = leftValue;",
    "info" : "VariableDeclarationStatement[31730-31752]:VariableDeclarationStatement[32075-32097]"
  }, {
    "left" : "double rv = rightValue;",
    "right" : "double rv = rightValue;",
    "info" : "VariableDeclarationStatement[31757-31780]:VariableDeclarationStatement[32102-32125]"
  }, {
    "left" : "Boolean result;",
    "right" : "Boolean result;",
    "info" : "VariableDeclarationStatement[31786-31801]:VariableDeclarationStatement[32131-32146]"
  }, {
    "left" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
    "right" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
    "info" : "SwitchStatement[31806-32474]:SwitchStatement[32151-32819]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[31826-31842]:SwitchCase[32171-32187]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[31849-31863]:SwitchCase[32194-32208]"
  }, {
    "left" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
    "right" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
    "info" : "ExpressionStatement[31872-31977]:ExpressionStatement[32217-32322]"
  }, {
    "left" : "result = lv == rv;",
    "right" : "result = lv == rv;",
    "info" : "ExpressionStatement[31986-32004]:ExpressionStatement[32331-32349]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32013-32019]:BreakStatement[32358-32364]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[32026-32042]:SwitchCase[32371-32387]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[32049-32063]:SwitchCase[32394-32408]"
  }, {
    "left" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
    "right" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
    "info" : "ExpressionStatement[32072-32177]:ExpressionStatement[32417-32522]"
  }, {
    "left" : "result = lv != rv;",
    "right" : "result = lv != rv;",
    "info" : "ExpressionStatement[32186-32204]:ExpressionStatement[32531-32549]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32213-32219]:BreakStatement[32558-32564]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[32226-32240]:SwitchCase[32571-32585]"
  }, {
    "left" : "result = lv <= rv;",
    "right" : "result = lv <= rv;",
    "info" : "ExpressionStatement[32241-32259]:ExpressionStatement[32586-32604]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32260-32266]:BreakStatement[32605-32611]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[32273-32287]:SwitchCase[32618-32632]"
  }, {
    "left" : "result = lv <  rv;",
    "right" : "result = lv <  rv;",
    "info" : "ExpressionStatement[32288-32306]:ExpressionStatement[32633-32651]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32307-32313]:BreakStatement[32652-32658]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[32320-32334]:SwitchCase[32665-32679]"
  }, {
    "left" : "result = lv >= rv;",
    "right" : "result = lv >= rv;",
    "info" : "ExpressionStatement[32335-32353]:ExpressionStatement[32680-32698]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32354-32360]:BreakStatement[32699-32705]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[32367-32381]:SwitchCase[32712-32726]"
  }, {
    "left" : "result = lv >  rv;",
    "right" : "result = lv >  rv;",
    "info" : "ExpressionStatement[32382-32400]:ExpressionStatement[32727-32745]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32401-32407]:BreakStatement[32746-32752]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[32414-32422]:SwitchCase[32759-32767]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[32431-32443]:ReturnStatement[32776-32788]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[32479-32493]:ReturnStatement[32824-32838]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32666-32673]:Modifier[33011-33018]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32674-32681]:PrimitiveType[33019-33026]"
  }, {
    "left" : "compareToUndefined",
    "right" : "compareToUndefined",
    "info" : "SimpleName[32682-32700]:SimpleName[33027-33045]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[32701-32711]:SingleVariableDeclaration[33046-33056]"
  }, {
    "left" : "int op",
    "right" : "int op",
    "info" : "SingleVariableDeclaration[32713-32719]:SingleVariableDeclaration[33058-33064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32721-33534]:Block[33066-33879]"
  }, {
    "left" : "boolean valueUndefined = ((Token.NAME == value.getType()\n        && value.getString().equals(\"undefined\"))\n        || (Token.VOID == value.getType()\n            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));",
    "right" : "boolean valueUndefined = ((Token.NAME == value.getType()\n        && value.getString().equals(\"undefined\"))\n        || (Token.VOID == value.getType()\n            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));",
    "info" : "VariableDeclarationStatement[32727-32947]:VariableDeclarationStatement[33072-33292]"
  }, {
    "left" : "boolean valueNull = (Token.NULL == value.getType());",
    "right" : "boolean valueNull = (Token.NULL == value.getType());",
    "info" : "VariableDeclarationStatement[32952-33004]:VariableDeclarationStatement[33297-33349]"
  }, {
    "left" : "boolean equivalent = valueUndefined || valueNull;",
    "right" : "boolean equivalent = valueUndefined || valueNull;",
    "info" : "VariableDeclarationStatement[33009-33058]:VariableDeclarationStatement[33354-33403]"
  }, {
    "left" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
    "right" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
    "info" : "SwitchStatement[33063-33530]:SwitchStatement[33408-33875]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[33083-33097]:SwitchCase[33428-33442]"
  }, {
    "left" : "return equivalent;",
    "right" : "return equivalent;",
    "info" : "ReturnStatement[33171-33189]:ReturnStatement[33516-33534]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[33196-33210]:SwitchCase[33541-33555]"
  }, {
    "left" : "return !equivalent;",
    "right" : "return !equivalent;",
    "info" : "ReturnStatement[33219-33238]:ReturnStatement[33564-33583]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[33245-33261]:SwitchCase[33590-33606]"
  }, {
    "left" : "return valueUndefined;",
    "right" : "return valueUndefined;",
    "info" : "ReturnStatement[33270-33292]:ReturnStatement[33615-33637]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[33299-33315]:SwitchCase[33644-33660]"
  }, {
    "left" : "return !valueUndefined;",
    "right" : "return !valueUndefined;",
    "info" : "ReturnStatement[33324-33347]:ReturnStatement[33669-33692]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[33354-33368]:SwitchCase[33699-33713]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[33375-33389]:SwitchCase[33720-33734]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[33396-33410]:SwitchCase[33741-33755]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[33417-33431]:SwitchCase[33762-33776]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33440-33453]:ReturnStatement[33785-33798]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[33460-33468]:SwitchCase[33805-33813]"
  }, {
    "left" : "throw new IllegalStateException(\"unexpected.\");",
    "right" : "throw new IllegalStateException(\"unexpected.\");",
    "info" : "ThrowStatement[33477-33524]:ThrowStatement[33822-33869]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33654-33661]:Modifier[33999-34006]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[33662-33666]:SimpleType[34007-34011]"
  }, {
    "left" : "tryFoldCtorCall",
    "right" : "tryFoldCtorCall",
    "info" : "SimpleName[33667-33682]:SimpleName[34012-34027]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33683-33689]:SingleVariableDeclaration[34028-34034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33691-33919]:Block[34036-34264]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
    "info" : "ExpressionStatement[33697-33751]:ExpressionStatement[34042-34096]"
  }, {
    "left" : "if (inForcedStringContext(n))",
    "right" : "if (inForcedStringContext(n))",
    "info" : "IfStatement[33818-33901]:IfStatement[34163-34246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33848-33901]:Block[34193-34246]"
  }, {
    "left" : "return tryFoldInForcedStringContext(n);",
    "right" : "return tryFoldInForcedStringContext(n);",
    "info" : "ReturnStatement[33856-33895]:ReturnStatement[34201-34240]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[33906-33915]:ReturnStatement[34251-34260]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33987-33994]:Modifier[34332-34339]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33995-34002]:PrimitiveType[34340-34347]"
  }, {
    "left" : "inForcedStringContext",
    "right" : "inForcedStringContext",
    "info" : "SimpleName[34003-34024]:SimpleName[34348-34369]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34025-34031]:SingleVariableDeclaration[34370-34376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34033-34136]:Block[34378-34481]"
  }, {
    "left" : "return n.getParent().getType() == Token.GETELEM &&\n        n.getParent().getLastChild() == n;",
    "right" : "return n.getParent().getType() == Token.GETELEM &&\n        n.getParent().getLastChild() == n;",
    "info" : "ReturnStatement[34039-34132]:ReturnStatement[34384-34477]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34140-34147]:Modifier[34485-34492]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[34148-34152]:SimpleType[34493-34497]"
  }, {
    "left" : "tryFoldInForcedStringContext",
    "right" : "tryFoldInForcedStringContext",
    "info" : "SimpleName[34153-34181]:SimpleName[34498-34526]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34182-34188]:SingleVariableDeclaration[34527-34533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34190-35054]:Block[34535-35399]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
    "info" : "ExpressionStatement[34244-34298]:ExpressionStatement[34589-34643]"
  }, {
    "left" : "Node objectType = n.getFirstChild();",
    "right" : "Node objectType = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[34304-34340]:VariableDeclarationStatement[34649-34685]"
  }, {
    "left" : "if (objectType.getType() != Token.NAME)",
    "right" : "if (objectType.getType() != Token.NAME)",
    "info" : "IfStatement[34345-34408]:IfStatement[34690-34753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34385-34408]:Block[34730-34753]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[34393-34402]:ReturnStatement[34738-34747]"
  }, {
    "left" : "if (objectType.getString().equals(\"String\"))",
    "right" : "if (objectType.getString().equals(\"String\"))",
    "info" : "IfStatement[34414-35036]:IfStatement[34759-35381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34459-35036]:Block[34804-35381]"
  }, {
    "left" : "Node value = objectType.getNext();",
    "right" : "Node value = objectType.getNext();",
    "info" : "VariableDeclarationStatement[34467-34501]:VariableDeclarationStatement[34812-34846]"
  }, {
    "left" : "String stringValue = null;",
    "right" : "String stringValue = null;",
    "info" : "VariableDeclarationStatement[34508-34534]:VariableDeclarationStatement[34853-34879]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[34541-34744]:IfStatement[34886-35089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34560-34595]:Block[34905-34940]"
  }, {
    "left" : "stringValue = \"\";",
    "right" : "stringValue = \"\";",
    "info" : "ExpressionStatement[34570-34587]:ExpressionStatement[34915-34932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34601-34744]:Block[34946-35089]"
  }, {
    "left" : "if (!NodeUtil.isImmutableValue(value))",
    "right" : "if (!NodeUtil.isImmutableValue(value))",
    "info" : "IfStatement[34611-34681]:IfStatement[34956-35026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34650-34681]:Block[34995-35026]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[34662-34671]:ReturnStatement[35007-35016]"
  }, {
    "left" : "stringValue = NodeUtil.getStringValue(value);",
    "right" : "stringValue = NodeUtil.getStringValue(value);",
    "info" : "ExpressionStatement[34691-34736]:ExpressionStatement[35036-35081]"
  }, {
    "left" : "if (stringValue == null)",
    "right" : "if (stringValue == null)",
    "info" : "IfStatement[34752-34804]:IfStatement[35097-35149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34777-34804]:Block[35122-35149]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[34787-34796]:ReturnStatement[35132-35141]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[34812-34840]:VariableDeclarationStatement[35157-35185]"
  }, {
    "left" : "Node newString = Node.newString(stringValue);",
    "right" : "Node newString = Node.newString(stringValue);",
    "info" : "VariableDeclarationStatement[34847-34892]:VariableDeclarationStatement[35192-35237]"
  }, {
    "left" : "parent.replaceChild(n, newString);",
    "right" : "parent.replaceChild(n, newString);",
    "info" : "ExpressionStatement[34900-34934]:ExpressionStatement[35245-35279]"
  }, {
    "left" : "newString.copyInformationFrom(parent);",
    "right" : "newString.copyInformationFrom(parent);",
    "info" : "ExpressionStatement[34941-34979]:ExpressionStatement[35286-35324]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[34986-35005]:ExpressionStatement[35331-35350]"
  }, {
    "left" : "return newString;",
    "right" : "return newString;",
    "info" : "ReturnStatement[35013-35030]:ReturnStatement[35358-35375]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[35041-35050]:ReturnStatement[35386-35395]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35058-35065]:Modifier[35403-35410]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[35066-35070]:SimpleType[35411-35415]"
  }, {
    "left" : "tryFoldKnownMethods",
    "right" : "tryFoldKnownMethods",
    "info" : "SimpleName[35071-35090]:SimpleName[35416-35435]"
  }, {
    "left" : "Node subtree",
    "right" : "Node subtree",
    "info" : "SingleVariableDeclaration[35091-35103]:SingleVariableDeclaration[35436-35448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35105-35361]:Block[35450-35706]"
  }, {
    "left" : "subtree = tryFoldArrayJoin(subtree);",
    "right" : "subtree = tryFoldArrayJoin(subtree);",
    "info" : "ExpressionStatement[35198-35234]:ExpressionStatement[35543-35579]"
  }, {
    "left" : "if (subtree.getType() == Token.CALL)",
    "right" : "if (subtree.getType() == Token.CALL)",
    "info" : "IfStatement[35240-35336]:IfStatement[35585-35681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35277-35336]:Block[35622-35681]"
  }, {
    "left" : "subtree = tryFoldKnownStringMethods(subtree);",
    "right" : "subtree = tryFoldKnownStringMethods(subtree);",
    "info" : "ExpressionStatement[35285-35330]:ExpressionStatement[35630-35675]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[35342-35357]:ReturnStatement[35687-35702]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35463-35470]:Modifier[35808-35815]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[35471-35475]:SimpleType[35816-35820]"
  }, {
    "left" : "tryFoldKnownStringMethods",
    "right" : "tryFoldKnownStringMethods",
    "info" : "SimpleName[35476-35501]:SimpleName[35821-35846]"
  }, {
    "left" : "Node subtree",
    "right" : "Node subtree",
    "info" : "SingleVariableDeclaration[35502-35514]:SingleVariableDeclaration[35847-35859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35516-37049]:Block[35861-37394]"
  }, {
    "left" : "Preconditions.checkArgument(subtree.getType() == Token.CALL);",
    "right" : "Preconditions.checkArgument(subtree.getType() == Token.CALL);",
    "info" : "ExpressionStatement[35522-35583]:ExpressionStatement[35867-35928]"
  }, {
    "left" : "Node callTarget = subtree.getFirstChild();",
    "right" : "Node callTarget = subtree.getFirstChild();",
    "info" : "VariableDeclarationStatement[35688-35730]:VariableDeclarationStatement[36033-36075]"
  }, {
    "left" : "if (callTarget == null)",
    "right" : "if (callTarget == null)",
    "info" : "IfStatement[35735-35788]:IfStatement[36080-36133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35759-35788]:Block[36104-36133]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[35767-35782]:ReturnStatement[36112-36127]"
  }, {
    "left" : "if (!NodeUtil.isGet(callTarget))",
    "right" : "if (!NodeUtil.isGet(callTarget))",
    "info" : "IfStatement[35794-35856]:IfStatement[36139-36201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35827-35856]:Block[36172-36201]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[35835-35850]:ReturnStatement[36180-36195]"
  }, {
    "left" : "Node stringNode = callTarget.getFirstChild();",
    "right" : "Node stringNode = callTarget.getFirstChild();",
    "info" : "VariableDeclarationStatement[35862-35907]:VariableDeclarationStatement[36207-36252]"
  }, {
    "left" : "Node functionName = stringNode.getNext();",
    "right" : "Node functionName = stringNode.getNext();",
    "info" : "VariableDeclarationStatement[35912-35953]:VariableDeclarationStatement[36257-36298]"
  }, {
    "left" : "if ((stringNode.getType() != Token.STRING) || (\n        (functionName.getType() != Token.STRING)))",
    "right" : "if ((stringNode.getType() != Token.STRING) || (\n        (functionName.getType() != Token.STRING)))",
    "info" : "IfStatement[35959-36087]:IfStatement[36304-36432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36058-36087]:Block[36403-36432]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[36066-36081]:ReturnStatement[36411-36426]"
  }, {
    "left" : "String functionNameString = functionName.getString();",
    "right" : "String functionNameString = functionName.getString();",
    "info" : "VariableDeclarationStatement[36093-36146]:VariableDeclarationStatement[36438-36491]"
  }, {
    "left" : "Node firstArg = callTarget.getNext();",
    "right" : "Node firstArg = callTarget.getNext();",
    "info" : "VariableDeclarationStatement[36151-36188]:VariableDeclarationStatement[36496-36533]"
  }, {
    "left" : "if (firstArg == null)",
    "right" : "if (firstArg == null)",
    "info" : "IfStatement[36193-37024]:IfStatement[36538-37369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36215-36497]:Block[36560-36842]"
  }, {
    "left" : "if (functionNameString.equals(\"toLowerCase\"))",
    "right" : "if (functionNameString.equals(\"toLowerCase\"))",
    "info" : "IfStatement[36223-36469]:IfStatement[36568-36814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36269-36343]:Block[36614-36688]"
  }, {
    "left" : "subtree = tryFoldStringToLowerCase(subtree, stringNode);",
    "right" : "subtree = tryFoldStringToLowerCase(subtree, stringNode);",
    "info" : "ExpressionStatement[36279-36335]:ExpressionStatement[36624-36680]"
  }, {
    "left" : "if (functionNameString.equals(\"toUpperCase\"))",
    "right" : "if (functionNameString.equals(\"toUpperCase\"))",
    "info" : "IfStatement[36349-36469]:IfStatement[36694-36814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36395-36469]:Block[36740-36814]"
  }, {
    "left" : "subtree = tryFoldStringToUpperCase(subtree, stringNode);",
    "right" : "subtree = tryFoldStringToUpperCase(subtree, stringNode);",
    "info" : "ExpressionStatement[36405-36461]:ExpressionStatement[36750-36806]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[36476-36491]:ReturnStatement[36821-36836]"
  }, {
    "left" : "if (NodeUtil.isImmutableValue(firstArg))",
    "right" : "if (NodeUtil.isImmutableValue(firstArg))",
    "info" : "IfStatement[36503-37024]:IfStatement[36848-37369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36544-37024]:Block[36889-37369]"
  }, {
    "left" : "if (functionNameString.equals(\"indexOf\") ||\n          functionNameString.equals(\"lastIndexOf\"))",
    "right" : "if (functionNameString.equals(\"indexOf\") ||\n          functionNameString.equals(\"lastIndexOf\"))",
    "info" : "IfStatement[36552-37018]:IfStatement[36897-37363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36648-36760]:Block[36993-37105]"
  }, {
    "left" : "subtree = tryFoldStringIndexOf(subtree, functionNameString,\n            stringNode, firstArg);",
    "right" : "subtree = tryFoldStringIndexOf(subtree, functionNameString,\n            stringNode, firstArg);",
    "info" : "ExpressionStatement[36658-36752]:ExpressionStatement[37003-37097]"
  }, {
    "left" : "if (functionNameString.equals(\"substr\"))",
    "right" : "if (functionNameString.equals(\"substr\"))",
    "info" : "IfStatement[36766-37018]:IfStatement[37111-37363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36807-36886]:Block[37152-37231]"
  }, {
    "left" : "subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);",
    "right" : "subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);",
    "info" : "ExpressionStatement[36817-36878]:ExpressionStatement[37162-37223]"
  }, {
    "left" : "if (functionNameString.equals(\"substring\"))",
    "right" : "if (functionNameString.equals(\"substring\"))",
    "info" : "IfStatement[36892-37018]:IfStatement[37237-37363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36936-37018]:Block[37281-37363]"
  }, {
    "left" : "subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);",
    "right" : "subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);",
    "info" : "ExpressionStatement[36946-37010]:ExpressionStatement[37291-37355]"
  }, {
    "left" : "return subtree;",
    "right" : "return subtree;",
    "info" : "ReturnStatement[37030-37045]:ReturnStatement[37375-37390]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37103-37110]:Modifier[37448-37455]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[37111-37115]:SimpleType[37456-37460]"
  }, {
    "left" : "tryFoldStringToLowerCase",
    "right" : "tryFoldStringToLowerCase",
    "info" : "SimpleName[37116-37140]:SimpleName[37461-37485]"
  }, {
    "left" : "Node subtree",
    "right" : "Node subtree",
    "info" : "SingleVariableDeclaration[37141-37153]:SingleVariableDeclaration[37486-37498]"
  }, {
    "left" : "Node stringNode",
    "right" : "Node stringNode",
    "info" : "SingleVariableDeclaration[37155-37170]:SingleVariableDeclaration[37500-37515]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37172-37460]:Block[37517-37805]"
  }, {
    "left" : "String lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);",
    "right" : "String lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);",
    "info" : "VariableDeclarationStatement[37235-37300]:VariableDeclarationStatement[37580-37645]"
  }, {
    "left" : "Node replacement = Node.newString(lowered);",
    "right" : "Node replacement = Node.newString(lowered);",
    "info" : "VariableDeclarationStatement[37305-37348]:VariableDeclarationStatement[37650-37693]"
  }, {
    "left" : "subtree.getParent().replaceChild(subtree, replacement);",
    "right" : "subtree.getParent().replaceChild(subtree, replacement);",
    "info" : "ExpressionStatement[37353-37408]:ExpressionStatement[37698-37753]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[37413-37432]:ExpressionStatement[37758-37777]"
  }, {
    "left" : "return replacement;",
    "right" : "return replacement;",
    "info" : "ReturnStatement[37437-37456]:ReturnStatement[37782-37801]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37514-37521]:Modifier[37859-37866]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[37522-37526]:SimpleType[37867-37871]"
  }, {
    "left" : "tryFoldStringToUpperCase",
    "right" : "tryFoldStringToUpperCase",
    "info" : "SimpleName[37527-37551]:SimpleName[37872-37896]"
  }, {
    "left" : "Node subtree",
    "right" : "Node subtree",
    "info" : "SingleVariableDeclaration[37552-37564]:SingleVariableDeclaration[37897-37909]"
  }, {
    "left" : "Node stringNode",
    "right" : "Node stringNode",
    "info" : "SingleVariableDeclaration[37566-37581]:SingleVariableDeclaration[37911-37926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37583-37871]:Block[37928-38216]"
  }, {
    "left" : "String uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);",
    "right" : "String uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);",
    "info" : "VariableDeclarationStatement[37646-37711]:VariableDeclarationStatement[37991-38056]"
  }, {
    "left" : "Node replacement = Node.newString(uppered);",
    "right" : "Node replacement = Node.newString(uppered);",
    "info" : "VariableDeclarationStatement[37716-37759]:VariableDeclarationStatement[38061-38104]"
  }, {
    "left" : "subtree.getParent().replaceChild(subtree, replacement);",
    "right" : "subtree.getParent().replaceChild(subtree, replacement);",
    "info" : "ExpressionStatement[37764-37819]:ExpressionStatement[38109-38164]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[37824-37843]:ExpressionStatement[38169-38188]"
  }, {
    "left" : "return replacement;",
    "right" : "return replacement;",
    "info" : "ReturnStatement[37848-37867]:ReturnStatement[38193-38212]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38015-38022]:Modifier[38360-38367]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[38023-38027]:SimpleType[38368-38372]"
  }, {
    "left" : "tryFoldStringIndexOf",
    "right" : "tryFoldStringIndexOf",
    "info" : "SimpleName[38028-38048]:SimpleName[38373-38393]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38056-38062]:SingleVariableDeclaration[38401-38407]"
  }, {
    "left" : "String functionName",
    "right" : "String functionName",
    "info" : "SingleVariableDeclaration[38064-38083]:SingleVariableDeclaration[38409-38428]"
  }, {
    "left" : "Node lstringNode",
    "right" : "Node lstringNode",
    "info" : "SingleVariableDeclaration[38085-38101]:SingleVariableDeclaration[38430-38446]"
  }, {
    "left" : "Node firstArg",
    "right" : "Node firstArg",
    "info" : "SingleVariableDeclaration[38103-38116]:SingleVariableDeclaration[38448-38461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38118-39200]:Block[38463-39545]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
    "info" : "ExpressionStatement[38124-38179]:ExpressionStatement[38469-38524]"
  }, {
    "left" : "Preconditions.checkArgument(lstringNode.getType() == Token.STRING);",
    "right" : "Preconditions.checkArgument(lstringNode.getType() == Token.STRING);",
    "info" : "ExpressionStatement[38184-38251]:ExpressionStatement[38529-38596]"
  }, {
    "left" : "String lstring = NodeUtil.getStringValue(lstringNode);",
    "right" : "String lstring = NodeUtil.getStringValue(lstringNode);",
    "info" : "VariableDeclarationStatement[38257-38311]:VariableDeclarationStatement[38602-38656]"
  }, {
    "left" : "boolean isIndexOf = functionName.equals(\"indexOf\");",
    "right" : "boolean isIndexOf = functionName.equals(\"indexOf\");",
    "info" : "VariableDeclarationStatement[38316-38367]:VariableDeclarationStatement[38661-38712]"
  }, {
    "left" : "Node secondArg = firstArg.getNext();",
    "right" : "Node secondArg = firstArg.getNext();",
    "info" : "VariableDeclarationStatement[38372-38408]:VariableDeclarationStatement[38717-38753]"
  }, {
    "left" : "String searchValue = NodeUtil.getStringValue(firstArg);",
    "right" : "String searchValue = NodeUtil.getStringValue(firstArg);",
    "info" : "VariableDeclarationStatement[38413-38468]:VariableDeclarationStatement[38758-38813]"
  }, {
    "left" : "if (searchValue == null)",
    "right" : "if (searchValue == null)",
    "info" : "IfStatement[38516-38564]:IfStatement[38861-38909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38541-38564]:Block[38886-38909]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[38549-38558]:ReturnStatement[38894-38903]"
  }, {
    "left" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
    "right" : "int fromIndex = isIndexOf ? 0 : lstring.length();",
    "info" : "VariableDeclarationStatement[38569-38618]:VariableDeclarationStatement[38914-38963]"
  }, {
    "left" : "if (secondArg != null)",
    "right" : "if (secondArg != null)",
    "info" : "IfStatement[38623-38914]:IfStatement[38968-39259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38646-38914]:Block[38991-39259]"
  }, {
    "left" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
    "right" : "if ((secondArg.getNext() != null) ||\n          (secondArg.getType() != Token.NUMBER))",
    "info" : "IfStatement[38731-38908]:IfStatement[39076-39253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38817-38844]:Block[39162-39189]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[38827-38836]:ReturnStatement[39172-39181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38850-38908]:Block[39195-39253]"
  }, {
    "left" : "fromIndex = (int) secondArg.getDouble();",
    "right" : "fromIndex = (int) secondArg.getDouble();",
    "info" : "ExpressionStatement[38860-38900]:ExpressionStatement[39205-39245]"
  }, {
    "left" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
    "right" : "int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)\n                             : lstring.lastIndexOf(searchValue, fromIndex);",
    "info" : "VariableDeclarationStatement[38919-39061]:VariableDeclarationStatement[39264-39406]"
  }, {
    "left" : "Node newNode = Node.newNumber(indexVal);",
    "right" : "Node newNode = Node.newNumber(indexVal);",
    "info" : "VariableDeclarationStatement[39066-39106]:VariableDeclarationStatement[39411-39451]"
  }, {
    "left" : "n.getParent().replaceChild(n, newNode);",
    "right" : "n.getParent().replaceChild(n, newNode);",
    "info" : "ExpressionStatement[39111-39150]:ExpressionStatement[39456-39495]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[39156-39175]:ExpressionStatement[39501-39520]"
  }, {
    "left" : "return newNode;",
    "right" : "return newNode;",
    "info" : "ReturnStatement[39181-39196]:ReturnStatement[39526-39541]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39283-39290]:Modifier[39628-39635]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[39291-39295]:SimpleType[39636-39640]"
  }, {
    "left" : "tryFoldArrayJoin",
    "right" : "tryFoldArrayJoin",
    "info" : "SimpleName[39296-39312]:SimpleName[39641-39657]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[39313-39319]:SingleVariableDeclaration[39658-39664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39321-42688]:Block[39666-43033]"
  }, {
    "left" : "Node callTarget = n.getFirstChild();",
    "right" : "Node callTarget = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[39327-39363]:VariableDeclarationStatement[39672-39708]"
  }, {
    "left" : "if (callTarget == null || !NodeUtil.isGetProp(callTarget))",
    "right" : "if (callTarget == null || !NodeUtil.isGetProp(callTarget))",
    "info" : "IfStatement[39369-39451]:IfStatement[39714-39796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39428-39451]:Block[39773-39796]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[39436-39445]:ReturnStatement[39781-39790]"
  }, {
    "left" : "Node right = callTarget.getNext();",
    "right" : "Node right = callTarget.getNext();",
    "info" : "VariableDeclarationStatement[39457-39491]:VariableDeclarationStatement[39802-39836]"
  }, {
    "left" : "if (right != null && !NodeUtil.isImmutableValue(right))",
    "right" : "if (right != null && !NodeUtil.isImmutableValue(right))",
    "info" : "IfStatement[39496-39575]:IfStatement[39841-39920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39552-39575]:Block[39897-39920]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[39560-39569]:ReturnStatement[39905-39914]"
  }, {
    "left" : "Node arrayNode = callTarget.getFirstChild();",
    "right" : "Node arrayNode = callTarget.getFirstChild();",
    "info" : "VariableDeclarationStatement[39581-39625]:VariableDeclarationStatement[39926-39970]"
  }, {
    "left" : "Node functionName = arrayNode.getNext();",
    "right" : "Node functionName = arrayNode.getNext();",
    "info" : "VariableDeclarationStatement[39630-39670]:VariableDeclarationStatement[39975-40015]"
  }, {
    "left" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
    "right" : "if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\"))",
    "info" : "IfStatement[39676-39796]:IfStatement[40021-40141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39773-39796]:Block[40118-40141]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[39781-39790]:ReturnStatement[40126-40135]"
  }, {
    "left" : "String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);",
    "right" : "String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);",
    "info" : "VariableDeclarationStatement[39802-39877]:VariableDeclarationStatement[40147-40222]"
  }, {
    "left" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
    "right" : "List<Node> arrayFoldedChildren = Lists.newLinkedList();",
    "info" : "VariableDeclarationStatement[39882-39937]:VariableDeclarationStatement[40227-40282]"
  }, {
    "left" : "StringBuilder sb = null;",
    "right" : "StringBuilder sb = null;",
    "info" : "VariableDeclarationStatement[39942-39966]:VariableDeclarationStatement[40287-40311]"
  }, {
    "left" : "int foldedSize = 0;",
    "right" : "int foldedSize = 0;",
    "info" : "VariableDeclarationStatement[39971-39990]:VariableDeclarationStatement[40316-40335]"
  }, {
    "left" : "Node prev = null;",
    "right" : "Node prev = null;",
    "info" : "VariableDeclarationStatement[39995-40012]:VariableDeclarationStatement[40340-40357]"
  }, {
    "left" : "Node elem = arrayNode.getFirstChild();",
    "right" : "Node elem = arrayNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[40017-40055]:VariableDeclarationStatement[40362-40400]"
  }, {
    "left" : "while (elem != null)",
    "right" : "while (elem != null)",
    "info" : "WhileStatement[40097-40836]:WhileStatement[40442-41181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40118-40836]:Block[40463-41181]"
  }, {
    "left" : "if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY)",
    "right" : "if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY)",
    "info" : "IfStatement[40126-40782]:IfStatement[40471-41127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40196-40389]:Block[40541-40734]"
  }, {
    "left" : "if (sb == null)",
    "right" : "if (sb == null)",
    "info" : "IfStatement[40206-40319]:IfStatement[40551-40664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40222-40269]:Block[40567-40614]"
  }, {
    "left" : "sb = new StringBuilder();",
    "right" : "sb = new StringBuilder();",
    "info" : "ExpressionStatement[40234-40259]:ExpressionStatement[40579-40604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40275-40319]:Block[40620-40664]"
  }, {
    "left" : "sb.append(joinString);",
    "right" : "sb.append(joinString);",
    "info" : "ExpressionStatement[40287-40309]:ExpressionStatement[40632-40654]"
  }, {
    "left" : "sb.append(NodeUtil.getArrayElementStringValue(elem));",
    "right" : "sb.append(NodeUtil.getArrayElementStringValue(elem));",
    "info" : "ExpressionStatement[40328-40381]:ExpressionStatement[40673-40726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40395-40782]:Block[40740-41127]"
  }, {
    "left" : "if (sb != null)",
    "right" : "if (sb != null)",
    "info" : "IfStatement[40405-40678]:IfStatement[40750-41023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40421-40678]:Block[40766-41023]"
  }, {
    "left" : "Preconditions.checkNotNull(prev);",
    "right" : "Preconditions.checkNotNull(prev);",
    "info" : "ExpressionStatement[40433-40466]:ExpressionStatement[40778-40811]"
  }, {
    "left" : "foldedSize += sb.length() + 2;",
    "right" : "foldedSize += sb.length() + 2;",
    "info" : "ExpressionStatement[40510-40540]:ExpressionStatement[40855-40885]"
  }, {
    "left" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
    "right" : "arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));",
    "info" : "ExpressionStatement[40551-40647]:ExpressionStatement[40896-40992]"
  }, {
    "left" : "sb = null;",
    "right" : "sb = null;",
    "info" : "ExpressionStatement[40658-40668]:ExpressionStatement[41003-41013]"
  }, {
    "left" : "foldedSize += InlineCostEstimator.getCost(elem);",
    "right" : "foldedSize += InlineCostEstimator.getCost(elem);",
    "info" : "ExpressionStatement[40687-40735]:ExpressionStatement[41032-41080]"
  }, {
    "left" : "arrayFoldedChildren.add(elem);",
    "right" : "arrayFoldedChildren.add(elem);",
    "info" : "ExpressionStatement[40744-40774]:ExpressionStatement[41089-41119]"
  }, {
    "left" : "prev = elem;",
    "right" : "prev = elem;",
    "info" : "ExpressionStatement[40789-40801]:ExpressionStatement[41134-41146]"
  }, {
    "left" : "elem = elem.getNext();",
    "right" : "elem = elem.getNext();",
    "info" : "ExpressionStatement[40808-40830]:ExpressionStatement[41153-41175]"
  }, {
    "left" : "if (sb != null)",
    "right" : "if (sb != null)",
    "info" : "IfStatement[40842-41070]:IfStatement[41187-41415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40858-41070]:Block[41203-41415]"
  }, {
    "left" : "Preconditions.checkNotNull(prev);",
    "right" : "Preconditions.checkNotNull(prev);",
    "info" : "ExpressionStatement[40866-40899]:ExpressionStatement[41211-41244]"
  }, {
    "left" : "foldedSize += sb.length() + 2;",
    "right" : "foldedSize += sb.length() + 2;",
    "info" : "ExpressionStatement[40935-40965]:ExpressionStatement[41280-41310]"
  }, {
    "left" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
    "right" : "arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));",
    "info" : "ExpressionStatement[40972-41064]:ExpressionStatement[41317-41409]"
  }, {
    "left" : "foldedSize += arrayFoldedChildren.size() - 1;",
    "right" : "foldedSize += arrayFoldedChildren.size() - 1;",
    "info" : "ExpressionStatement[41102-41147]:ExpressionStatement[41447-41492]"
  }, {
    "left" : "int originalSize = InlineCostEstimator.getCost(n);",
    "right" : "int originalSize = InlineCostEstimator.getCost(n);",
    "info" : "VariableDeclarationStatement[41153-41203]:VariableDeclarationStatement[41498-41548]"
  }, {
    "left" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
    "right" : "switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }",
    "info" : "SwitchStatement[41208-42669]:SwitchStatement[41553-43014]"
  }, {
    "left" : "case 0:",
    "right" : "case 0:",
    "info" : "SwitchCase[41252-41259]:SwitchCase[41597-41604]"
  }, {
    "left" : "Node emptyStringNode = Node.newString(\"\");",
    "right" : "Node emptyStringNode = Node.newString(\"\");",
    "info" : "VariableDeclarationStatement[41268-41310]:VariableDeclarationStatement[41613-41655]"
  }, {
    "left" : "n.getParent().replaceChild(n, emptyStringNode);",
    "right" : "n.getParent().replaceChild(n, emptyStringNode);",
    "info" : "ExpressionStatement[41319-41366]:ExpressionStatement[41664-41711]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[41375-41394]:ExpressionStatement[41720-41739]"
  }, {
    "left" : "return emptyStringNode;",
    "right" : "return emptyStringNode;",
    "info" : "ReturnStatement[41403-41426]:ReturnStatement[41748-41771]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[41433-41440]:SwitchCase[41778-41785]"
  }, {
    "left" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
    "right" : "Node foldedStringNode = arrayFoldedChildren.remove(0);",
    "info" : "VariableDeclarationStatement[41449-41503]:VariableDeclarationStatement[41794-41848]"
  }, {
    "left" : "if (foldedSize > originalSize)",
    "right" : "if (foldedSize > originalSize)",
    "info" : "IfStatement[41512-41574]:IfStatement[41857-41919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41543-41574]:Block[41888-41919]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[41555-41564]:ReturnStatement[41900-41909]"
  }, {
    "left" : "arrayNode.detachChildren();",
    "right" : "arrayNode.detachChildren();",
    "info" : "ExpressionStatement[41583-41610]:ExpressionStatement[41928-41955]"
  }, {
    "left" : "if (foldedStringNode.getType() != Token.STRING)",
    "right" : "if (foldedStringNode.getType() != Token.STRING)",
    "info" : "IfStatement[41619-41961]:IfStatement[41964-42306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41667-41961]:Block[42012-42306]"
  }, {
    "left" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);",
    "right" : "Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").copyInformationFrom(n),\n              foldedStringNode);",
    "info" : "VariableDeclarationStatement[41781-41909]:VariableDeclarationStatement[42126-42254]"
  }, {
    "left" : "foldedStringNode = replacement;",
    "right" : "foldedStringNode = replacement;",
    "info" : "ExpressionStatement[41920-41951]:ExpressionStatement[42265-42296]"
  }, {
    "left" : "n.getParent().replaceChild(n, foldedStringNode);",
    "right" : "n.getParent().replaceChild(n, foldedStringNode);",
    "info" : "ExpressionStatement[41970-42018]:ExpressionStatement[42315-42363]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[42027-42046]:ExpressionStatement[42372-42391]"
  }, {
    "left" : "return foldedStringNode;",
    "right" : "return foldedStringNode;",
    "info" : "ReturnStatement[42055-42079]:ReturnStatement[42400-42424]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[42086-42094]:SwitchCase[42431-42439]"
  }, {
    "left" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
    "right" : "if (arrayFoldedChildren.size() == arrayNode.getChildCount())",
    "info" : "IfStatement[42154-42246]:IfStatement[42499-42591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42215-42246]:Block[42560-42591]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[42227-42236]:ReturnStatement[42572-42581]"
  }, {
    "left" : "int kJoinOverhead = \"[].join()\".length();",
    "right" : "int kJoinOverhead = \"[].join()\".length();",
    "info" : "VariableDeclarationStatement[42255-42296]:VariableDeclarationStatement[42600-42641]"
  }, {
    "left" : "foldedSize += kJoinOverhead;",
    "right" : "foldedSize += kJoinOverhead;",
    "info" : "ExpressionStatement[42305-42333]:ExpressionStatement[42650-42678]"
  }, {
    "left" : "foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;",
    "right" : "foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;",
    "info" : "ExpressionStatement[42342-42413]:ExpressionStatement[42687-42758]"
  }, {
    "left" : "if (foldedSize > originalSize)",
    "right" : "if (foldedSize > originalSize)",
    "info" : "IfStatement[42422-42484]:IfStatement[42767-42829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42453-42484]:Block[42798-42829]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[42465-42474]:ReturnStatement[42810-42819]"
  }, {
    "left" : "arrayNode.detachChildren();",
    "right" : "arrayNode.detachChildren();",
    "info" : "ExpressionStatement[42493-42520]:ExpressionStatement[42838-42865]"
  }, {
    "left" : "for (Node node : arrayFoldedChildren)",
    "right" : "for (Node node : arrayFoldedChildren)",
    "info" : "EnhancedForStatement[42529-42620]:EnhancedForStatement[42874-42965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42567-42620]:Block[42912-42965]"
  }, {
    "left" : "arrayNode.addChildToBack(node);",
    "right" : "arrayNode.addChildToBack(node);",
    "info" : "ExpressionStatement[42579-42610]:ExpressionStatement[42924-42955]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[42629-42648]:ExpressionStatement[42974-42993]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42657-42663]:BreakStatement[43002-43008]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[42675-42684]:ReturnStatement[43020-43029]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42748-42755]:Modifier[43093-43100]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[42756-42760]:SimpleType[43101-43105]"
  }, {
    "left" : "tryFoldStringSubstr",
    "right" : "tryFoldStringSubstr",
    "info" : "SimpleName[42761-42780]:SimpleName[43106-43125]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42781-42787]:SingleVariableDeclaration[43126-43132]"
  }, {
    "left" : "Node stringNode",
    "right" : "Node stringNode",
    "info" : "SingleVariableDeclaration[42789-42804]:SingleVariableDeclaration[43134-43149]"
  }, {
    "left" : "Node arg1",
    "right" : "Node arg1",
    "info" : "SingleVariableDeclaration[42806-42815]:SingleVariableDeclaration[43151-43160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42817-44235]:Block[43162-44580]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
    "info" : "ExpressionStatement[42823-42878]:ExpressionStatement[43168-43223]"
  }, {
    "left" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
    "right" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
    "info" : "ExpressionStatement[42883-42949]:ExpressionStatement[43228-43294]"
  }, {
    "left" : "int start, length;",
    "right" : "int start, length;",
    "info" : "VariableDeclarationStatement[42955-42973]:VariableDeclarationStatement[43300-43318]"
  }, {
    "left" : "String stringAsString = stringNode.getString();",
    "right" : "String stringAsString = stringNode.getString();",
    "info" : "VariableDeclarationStatement[42978-43025]:VariableDeclarationStatement[43323-43370]"
  }, {
    "left" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
    "right" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
    "info" : "IfStatement[43114-43240]:IfStatement[43459-43585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43166-43211]:Block[43511-43556]"
  }, {
    "left" : "start = (int) arg1.getDouble();",
    "right" : "start = (int) arg1.getDouble();",
    "info" : "ExpressionStatement[43174-43205]:ExpressionStatement[43519-43550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43217-43240]:Block[43562-43585]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[43225-43234]:ReturnStatement[43570-43579]"
  }, {
    "left" : "Node arg2 = arg1.getNext();",
    "right" : "Node arg2 = arg1.getNext();",
    "info" : "VariableDeclarationStatement[43246-43273]:VariableDeclarationStatement[43591-43618]"
  }, {
    "left" : "if (arg2 != null)",
    "right" : "if (arg2 != null)",
    "info" : "IfStatement[43278-43644]:IfStatement[43623-43989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43296-43551]:Block[43641-43896]"
  }, {
    "left" : "if (arg2.getType() == Token.NUMBER)",
    "right" : "if (arg2.getType() == Token.NUMBER)",
    "info" : "IfStatement[43304-43423]:IfStatement[43649-43768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43340-43390]:Block[43685-43735]"
  }, {
    "left" : "length = (int) arg2.getDouble();",
    "right" : "length = (int) arg2.getDouble();",
    "info" : "ExpressionStatement[43350-43382]:ExpressionStatement[43695-43727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43396-43423]:Block[43741-43768]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[43406-43415]:ReturnStatement[43751-43760]"
  }, {
    "left" : "if (arg2.getNext() != null)",
    "right" : "if (arg2.getNext() != null)",
    "info" : "IfStatement[43431-43545]:IfStatement[43776-43890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43459-43545]:Block[43804-43890]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[43528-43537]:ReturnStatement[43873-43882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43557-43644]:Block[43902-43989]"
  }, {
    "left" : "length = stringAsString.length() - start;",
    "right" : "length = stringAsString.length() - start;",
    "info" : "ExpressionStatement[43597-43638]:ExpressionStatement[43942-43983]"
  }, {
    "left" : "if ((start + length) > stringAsString.length() ||\n        (length < 0) ||\n        (start < 0))",
    "right" : "if ((start + length) > stringAsString.length() ||\n        (length < 0) ||\n        (start < 0))",
    "info" : "IfStatement[43876-43994]:IfStatement[44221-44339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43971-43994]:Block[44316-44339]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[43979-43988]:ReturnStatement[44324-44333]"
  }, {
    "left" : "String result = stringAsString.substring(start, start + length);",
    "right" : "String result = stringAsString.substring(start, start + length);",
    "info" : "VariableDeclarationStatement[44000-44064]:VariableDeclarationStatement[44345-44409]"
  }, {
    "left" : "Node resultNode = Node.newString(result);",
    "right" : "Node resultNode = Node.newString(result);",
    "info" : "VariableDeclarationStatement[44069-44110]:VariableDeclarationStatement[44414-44455]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[44116-44144]:VariableDeclarationStatement[44461-44489]"
  }, {
    "left" : "parent.replaceChild(n, resultNode);",
    "right" : "parent.replaceChild(n, resultNode);",
    "info" : "ExpressionStatement[44149-44184]:ExpressionStatement[44494-44529]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[44189-44208]:ExpressionStatement[44534-44553]"
  }, {
    "left" : "return resultNode;",
    "right" : "return resultNode;",
    "info" : "ReturnStatement[44213-44231]:ReturnStatement[44558-44576]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44298-44305]:Modifier[44643-44650]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[44306-44310]:SimpleType[44651-44655]"
  }, {
    "left" : "tryFoldStringSubstring",
    "right" : "tryFoldStringSubstring",
    "info" : "SimpleName[44311-44333]:SimpleName[44656-44678]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44334-44340]:SingleVariableDeclaration[44679-44685]"
  }, {
    "left" : "Node stringNode",
    "right" : "Node stringNode",
    "info" : "SingleVariableDeclaration[44342-44357]:SingleVariableDeclaration[44687-44702]"
  }, {
    "left" : "Node arg1",
    "right" : "Node arg1",
    "info" : "SingleVariableDeclaration[44359-44368]:SingleVariableDeclaration[44704-44713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44370-45708]:Block[44715-46053]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.CALL);",
    "info" : "ExpressionStatement[44376-44431]:ExpressionStatement[44721-44776]"
  }, {
    "left" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
    "right" : "Preconditions.checkArgument(stringNode.getType() == Token.STRING);",
    "info" : "ExpressionStatement[44436-44502]:ExpressionStatement[44781-44847]"
  }, {
    "left" : "int start, end;",
    "right" : "int start, end;",
    "info" : "VariableDeclarationStatement[44508-44523]:VariableDeclarationStatement[44853-44868]"
  }, {
    "left" : "String stringAsString = stringNode.getString();",
    "right" : "String stringAsString = stringNode.getString();",
    "info" : "VariableDeclarationStatement[44528-44575]:VariableDeclarationStatement[44873-44920]"
  }, {
    "left" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
    "right" : "if (arg1 != null && arg1.getType() == Token.NUMBER)",
    "info" : "IfStatement[44581-44707]:IfStatement[44926-45052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44633-44678]:Block[44978-45023]"
  }, {
    "left" : "start = (int) arg1.getDouble();",
    "right" : "start = (int) arg1.getDouble();",
    "info" : "ExpressionStatement[44641-44672]:ExpressionStatement[44986-45017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44684-44707]:Block[45029-45052]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[44692-44701]:ReturnStatement[45037-45046]"
  }, {
    "left" : "Node arg2 = arg1.getNext();",
    "right" : "Node arg2 = arg1.getNext();",
    "info" : "VariableDeclarationStatement[44713-44740]:VariableDeclarationStatement[45058-45085]"
  }, {
    "left" : "if (arg2 != null)",
    "right" : "if (arg2 != null)",
    "info" : "IfStatement[44745-45097]:IfStatement[45090-45442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44763-45015]:Block[45108-45360]"
  }, {
    "left" : "if (arg2.getType() == Token.NUMBER)",
    "right" : "if (arg2.getType() == Token.NUMBER)",
    "info" : "IfStatement[44771-44887]:IfStatement[45116-45232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44807-44854]:Block[45152-45199]"
  }, {
    "left" : "end = (int) arg2.getDouble();",
    "right" : "end = (int) arg2.getDouble();",
    "info" : "ExpressionStatement[44817-44846]:ExpressionStatement[45162-45191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44860-44887]:Block[45205-45232]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[44870-44879]:ReturnStatement[45215-45224]"
  }, {
    "left" : "if (arg2.getNext() != null)",
    "right" : "if (arg2.getNext() != null)",
    "info" : "IfStatement[44895-45009]:IfStatement[45240-45354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44923-45009]:Block[45268-45354]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[44992-45001]:ReturnStatement[45337-45346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45021-45097]:Block[45366-45442]"
  }, {
    "left" : "end = stringAsString.length();",
    "right" : "end = stringAsString.length();",
    "info" : "ExpressionStatement[45061-45091]:ExpressionStatement[45406-45436]"
  }, {
    "left" : "if ((end > stringAsString.length()) ||\n        (start > stringAsString.length()) ||\n        (end < 0) ||\n        (start < 0))",
    "right" : "if ((end > stringAsString.length()) ||\n        (start > stringAsString.length()) ||\n        (end < 0) ||\n        (start < 0))",
    "info" : "IfStatement[45329-45478]:IfStatement[45674-45823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45455-45478]:Block[45800-45823]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[45463-45472]:ReturnStatement[45808-45817]"
  }, {
    "left" : "String result = stringAsString.substring(start, end);",
    "right" : "String result = stringAsString.substring(start, end);",
    "info" : "VariableDeclarationStatement[45484-45537]:VariableDeclarationStatement[45829-45882]"
  }, {
    "left" : "Node resultNode = Node.newString(result);",
    "right" : "Node resultNode = Node.newString(result);",
    "info" : "VariableDeclarationStatement[45542-45583]:VariableDeclarationStatement[45887-45928]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[45589-45617]:VariableDeclarationStatement[45934-45962]"
  }, {
    "left" : "parent.replaceChild(n, resultNode);",
    "right" : "parent.replaceChild(n, resultNode);",
    "info" : "ExpressionStatement[45622-45657]:ExpressionStatement[45967-46002]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[45662-45681]:ExpressionStatement[46007-46026]"
  }, {
    "left" : "return resultNode;",
    "right" : "return resultNode;",
    "info" : "ReturnStatement[45686-45704]:ReturnStatement[46031-46049]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45775-45782]:Modifier[46120-46127]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[45783-45787]:SimpleType[46128-46132]"
  }, {
    "left" : "tryFoldGetElem",
    "right" : "tryFoldGetElem",
    "info" : "SimpleName[45788-45802]:SimpleName[46133-46147]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45803-45809]:SingleVariableDeclaration[46148-46154]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[45811-45820]:SingleVariableDeclaration[46156-46165]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[45822-45832]:SingleVariableDeclaration[46167-46177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45834-47090]:Block[46179-47435]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
    "info" : "ExpressionStatement[45840-45898]:ExpressionStatement[46185-46243]"
  }, {
    "left" : "if (left.getType() == Token.OBJECTLIT)",
    "right" : "if (left.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[45904-46004]:IfStatement[46249-46349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45943-46004]:Block[46288-46349]"
  }, {
    "left" : "return tryFoldObjectPropAccess(n, left, right);",
    "right" : "return tryFoldObjectPropAccess(n, left, right);",
    "info" : "ReturnStatement[45951-45998]:ReturnStatement[46296-46343]"
  }, {
    "left" : "if (left.getType() == Token.ARRAYLIT)",
    "right" : "if (left.getType() == Token.ARRAYLIT)",
    "info" : "IfStatement[46010-47072]:IfStatement[46355-47417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46048-47072]:Block[46393-47417]"
  }, {
    "left" : "if (right.getType() != Token.NUMBER)",
    "right" : "if (right.getType() != Token.NUMBER)",
    "info" : "IfStatement[46056-46253]:IfStatement[46401-46598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46093-46253]:Block[46438-46598]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[46236-46245]:ReturnStatement[46581-46590]"
  }, {
    "left" : "double index = right.getDouble();",
    "right" : "double index = right.getDouble();",
    "info" : "VariableDeclarationStatement[46261-46294]:VariableDeclarationStatement[46606-46639]"
  }, {
    "left" : "int intIndex = (int) index;",
    "right" : "int intIndex = (int) index;",
    "info" : "VariableDeclarationStatement[46301-46328]:VariableDeclarationStatement[46646-46673]"
  }, {
    "left" : "if (intIndex != index)",
    "right" : "if (intIndex != index)",
    "info" : "IfStatement[46335-46436]:IfStatement[46680-46781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46358-46436]:Block[46703-46781]"
  }, {
    "left" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
    "right" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
    "info" : "ExpressionStatement[46368-46410]:ExpressionStatement[46713-46755]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[46419-46428]:ReturnStatement[46764-46773]"
  }, {
    "left" : "if (intIndex < 0)",
    "right" : "if (intIndex < 0)",
    "info" : "IfStatement[46444-46538]:IfStatement[46789-46883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46462-46538]:Block[46807-46883]"
  }, {
    "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
    "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
    "info" : "ExpressionStatement[46472-46512]:ExpressionStatement[46817-46857]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[46521-46530]:ReturnStatement[46866-46875]"
  }, {
    "left" : "Node elem = left.getFirstChild();",
    "right" : "Node elem = left.getFirstChild();",
    "info" : "VariableDeclarationStatement[46546-46579]:VariableDeclarationStatement[46891-46924]"
  }, {
    "left" : "for (int i = 0; elem != null && i < intIndex; i++)",
    "right" : "for (int i = 0; elem != null && i < intIndex; i++)",
    "info" : "ForStatement[46586-46677]:ForStatement[46931-47022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46637-46677]:Block[46982-47022]"
  }, {
    "left" : "elem = elem.getNext();",
    "right" : "elem = elem.getNext();",
    "info" : "ExpressionStatement[46647-46669]:ExpressionStatement[46992-47014]"
  }, {
    "left" : "if (elem == null)",
    "right" : "if (elem == null)",
    "info" : "IfStatement[46685-46779]:IfStatement[47030-47124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46703-46779]:Block[47048-47124]"
  }, {
    "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
    "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
    "info" : "ExpressionStatement[46713-46753]:ExpressionStatement[47058-47098]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[46762-46771]:ReturnStatement[47107-47116]"
  }, {
    "left" : "if (elem.getType() == Token.EMPTY)",
    "right" : "if (elem.getType() == Token.EMPTY)",
    "info" : "IfStatement[46787-46926]:IfStatement[47132-47271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46822-46879]:Block[47167-47224]"
  }, {
    "left" : "elem = NodeUtil.newUndefinedNode(elem);",
    "right" : "elem = NodeUtil.newUndefinedNode(elem);",
    "info" : "ExpressionStatement[46832-46871]:ExpressionStatement[47177-47216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46885-46926]:Block[47230-47271]"
  }, {
    "left" : "left.removeChild(elem);",
    "right" : "left.removeChild(elem);",
    "info" : "ExpressionStatement[46895-46918]:ExpressionStatement[47240-47263]"
  }, {
    "left" : "n.getParent().replaceChild(n, elem);",
    "right" : "n.getParent().replaceChild(n, elem);",
    "info" : "ExpressionStatement[46985-47021]:ExpressionStatement[47330-47366]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[47028-47047]:ExpressionStatement[47373-47392]"
  }, {
    "left" : "return elem;",
    "right" : "return elem;",
    "info" : "ReturnStatement[47054-47066]:ReturnStatement[47399-47411]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[47077-47086]:ReturnStatement[47422-47431]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47185-47192]:Modifier[47530-47537]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[47193-47197]:SimpleType[47538-47542]"
  }, {
    "left" : "tryFoldGetProp",
    "right" : "tryFoldGetProp",
    "info" : "SimpleName[47198-47212]:SimpleName[47543-47557]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47213-47219]:SingleVariableDeclaration[47558-47564]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[47221-47230]:SingleVariableDeclaration[47566-47575]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[47232-47242]:SingleVariableDeclaration[47577-47587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47244-48221]:Block[47589-48566]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
    "info" : "ExpressionStatement[47250-47308]:ExpressionStatement[47595-47653]"
  }, {
    "left" : "if (left.getType() == Token.OBJECTLIT)",
    "right" : "if (left.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[47314-47414]:IfStatement[47659-47759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47353-47414]:Block[47698-47759]"
  }, {
    "left" : "return tryFoldObjectPropAccess(n, left, right);",
    "right" : "return tryFoldObjectPropAccess(n, left, right);",
    "info" : "ReturnStatement[47361-47408]:ReturnStatement[47706-47753]"
  }, {
    "left" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
    "right" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
    "info" : "IfStatement[47420-48202]:IfStatement[47765-48547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47503-48202]:Block[47848-48547]"
  }, {
    "left" : "int knownLength = -1;",
    "right" : "int knownLength = -1;",
    "info" : "VariableDeclarationStatement[47511-47532]:VariableDeclarationStatement[47856-47877]"
  }, {
    "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
    "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
    "info" : "SwitchStatement[47539-47990]:SwitchStatement[47884-48335]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[47573-47593]:SwitchCase[47918-47938]"
  }, {
    "left" : "if (mayHaveSideEffects(left))",
    "right" : "if (mayHaveSideEffects(left))",
    "info" : "IfStatement[47604-47742]:IfStatement[47949-48087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47634-47742]:Block[47979-48087]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[47721-47730]:ReturnStatement[48066-48075]"
  }, {
    "left" : "knownLength = left.getChildCount();",
    "right" : "knownLength = left.getChildCount();",
    "info" : "ExpressionStatement[47753-47788]:ExpressionStatement[48098-48133]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47799-47805]:BreakStatement[48144-48150]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[47814-47832]:SwitchCase[48159-48177]"
  }, {
    "left" : "knownLength = left.getString().length();",
    "right" : "knownLength = left.getString().length();",
    "info" : "ExpressionStatement[47843-47883]:ExpressionStatement[48188-48228]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47894-47900]:BreakStatement[48239-48245]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[47909-47917]:SwitchCase[48254-48262]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[47973-47982]:ReturnStatement[48318-48327]"
  }, {
    "left" : "Preconditions.checkState(knownLength != -1);",
    "right" : "Preconditions.checkState(knownLength != -1);",
    "info" : "ExpressionStatement[47998-48042]:ExpressionStatement[48343-48387]"
  }, {
    "left" : "Node lengthNode = Node.newNumber(knownLength);",
    "right" : "Node lengthNode = Node.newNumber(knownLength);",
    "info" : "VariableDeclarationStatement[48049-48095]:VariableDeclarationStatement[48394-48440]"
  }, {
    "left" : "n.getParent().replaceChild(n, lengthNode);",
    "right" : "n.getParent().replaceChild(n, lengthNode);",
    "info" : "ExpressionStatement[48102-48144]:ExpressionStatement[48447-48489]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[48151-48170]:ExpressionStatement[48496-48515]"
  }, {
    "left" : "return lengthNode;",
    "right" : "return lengthNode;",
    "info" : "ReturnStatement[48178-48196]:ReturnStatement[48523-48541]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[48208-48217]:ReturnStatement[48553-48562]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48225-48232]:Modifier[48570-48577]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[48233-48237]:SimpleType[48578-48582]"
  }, {
    "left" : "tryFoldObjectPropAccess",
    "right" : "tryFoldObjectPropAccess",
    "info" : "SimpleName[48238-48261]:SimpleName[48583-48606]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48262-48268]:SingleVariableDeclaration[48607-48613]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[48270-48279]:SingleVariableDeclaration[48615-48624]"
  }, {
    "left" : "Node right",
    "right" : "Node right",
    "info" : "SingleVariableDeclaration[48281-48291]:SingleVariableDeclaration[48626-48636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48293-50291]:Block[48638-50636]"
  }, {
    "left" : "Preconditions.checkArgument(NodeUtil.isGet(n));",
    "right" : "Preconditions.checkArgument(NodeUtil.isGet(n));",
    "info" : "ExpressionStatement[48299-48346]:ExpressionStatement[48644-48691]"
  }, {
    "left" : "if (left.getType() != Token.OBJECTLIT || right.getType() != Token.STRING)",
    "right" : "if (left.getType() != Token.OBJECTLIT || right.getType() != Token.STRING)",
    "info" : "IfStatement[48352-48449]:IfStatement[48697-48794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48426-48449]:Block[48771-48794]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[48434-48443]:ReturnStatement[48779-48788]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[48455-48483]:VariableDeclarationStatement[48800-48828]"
  }, {
    "left" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.DEC)",
    "right" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.DEC)",
    "info" : "IfStatement[48488-48839]:IfStatement[48833-49184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48640-48839]:Block[48985-49184]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[48824-48833]:ReturnStatement[49169-49178]"
  }, {
    "left" : "Node key = null;",
    "right" : "Node key = null;",
    "info" : "VariableDeclarationStatement[48899-48915]:VariableDeclarationStatement[49244-49260]"
  }, {
    "left" : "Node value = null;",
    "right" : "Node value = null;",
    "info" : "VariableDeclarationStatement[48920-48938]:VariableDeclarationStatement[49265-49283]"
  }, {
    "left" : "for (Node c = left.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = left.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[48943-49719]:ForStatement[49288-50064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49007-49719]:Block[49352-50064]"
  }, {
    "left" : "if (c.getString().equals(right.getString()))",
    "right" : "if (c.getString().equals(right.getString()))",
    "info" : "IfStatement[49015-49713]:IfStatement[49360-50058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49060-49521]:Block[49405-49866]"
  }, {
    "left" : "switch (c.getType()) {\n          case Token.SET:\n            continue;\n          case Token.GET:\n          case Token.STRING:\n            if (value != null && mayHaveSideEffects(value)) {\n              // The previously found value had side-effects\n              return n;\n            }\n            key = c;\n            value = key.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
    "right" : "switch (c.getType()) {\n          case Token.SET:\n            continue;\n          case Token.GET:\n          case Token.STRING:\n            if (value != null && mayHaveSideEffects(value)) {\n              // The previously found value had side-effects\n              return n;\n            }\n            key = c;\n            value = key.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
    "info" : "SwitchStatement[49070-49513]:SwitchStatement[49415-49858]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[49103-49118]:SwitchCase[49448-49463]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[49131-49140]:ContinueStatement[49476-49485]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[49151-49166]:SwitchCase[49496-49511]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[49177-49195]:SwitchCase[49522-49540]"
  }, {
    "left" : "if (value != null && mayHaveSideEffects(value))",
    "right" : "if (value != null && mayHaveSideEffects(value))",
    "info" : "IfStatement[49208-49356]:IfStatement[49553-49701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49256-49356]:Block[49601-49701]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[49333-49342]:ReturnStatement[49678-49687]"
  }, {
    "left" : "key = c;",
    "right" : "key = c;",
    "info" : "ExpressionStatement[49369-49377]:ExpressionStatement[49714-49722]"
  }, {
    "left" : "value = key.getFirstChild();",
    "right" : "value = key.getFirstChild();",
    "info" : "ExpressionStatement[49390-49418]:ExpressionStatement[49735-49763]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[49431-49437]:BreakStatement[49776-49782]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[49448-49456]:SwitchCase[49793-49801]"
  }, {
    "left" : "throw new IllegalStateException();",
    "right" : "throw new IllegalStateException();",
    "info" : "ThrowStatement[49469-49503]:ThrowStatement[49814-49848]"
  }, {
    "left" : "if (mayHaveSideEffects(c.getFirstChild()))",
    "right" : "if (mayHaveSideEffects(c.getFirstChild()))",
    "info" : "IfStatement[49527-49713]:IfStatement[49872-50058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49570-49713]:Block[49915-50058]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[49696-49705]:ReturnStatement[50041-50050]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[49844-49886]:IfStatement[50189-50231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49863-49886]:Block[50208-50231]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[49871-49880]:ReturnStatement[50216-50225]"
  }, {
    "left" : "if (value.getType() == Token.FUNCTION && NodeUtil.referencesThis(value))",
    "right" : "if (value.getType() == Token.FUNCTION && NodeUtil.referencesThis(value))",
    "info" : "IfStatement[49892-50052]:IfStatement[50237-50397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49965-50052]:Block[50310-50397]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[50037-50046]:ReturnStatement[50382-50391]"
  }, {
    "left" : "Node replacement = value.detachFromParent();",
    "right" : "Node replacement = value.detachFromParent();",
    "info" : "VariableDeclarationStatement[50058-50102]:VariableDeclarationStatement[50403-50447]"
  }, {
    "left" : "if (key.getType() == Token.GET)",
    "right" : "if (key.getType() == Token.GET)",
    "info" : "IfStatement[50107-50200]:IfStatement[50452-50545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50138-50200]:Block[50483-50545]"
  }, {
    "left" : "replacement = new Node(Token.CALL, replacement);",
    "right" : "replacement = new Node(Token.CALL, replacement);",
    "info" : "ExpressionStatement[50146-50194]:ExpressionStatement[50491-50539]"
  }, {
    "left" : "n.getParent().replaceChild(n, replacement);",
    "right" : "n.getParent().replaceChild(n, replacement);",
    "info" : "ExpressionStatement[50206-50249]:ExpressionStatement[50551-50594]"
  }, {
    "left" : "reportCodeChange();",
    "right" : "reportCodeChange();",
    "info" : "ExpressionStatement[50254-50273]:ExpressionStatement[50599-50618]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[50278-50287]:ReturnStatement[50623-50632]"
  } ]
}