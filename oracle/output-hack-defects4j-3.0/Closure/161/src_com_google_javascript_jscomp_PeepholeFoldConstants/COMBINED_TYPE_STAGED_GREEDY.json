{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeFoldConstants",
      "right" : "PeepholeFoldConstants",
      "info" : "TypeDeclaration[903-40330]:TypeDeclaration[903-40385]"
    }, {
      "left" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "right" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "info" : "FieldDeclaration[1055-1228]:FieldDeclaration[1055-1228]"
    }, {
      "left" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "right" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "info" : "FieldDeclaration[1232-1403]:FieldDeclaration[1232-1403]"
    }, {
      "left" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "right" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "info" : "FieldDeclaration[1407-1587]:FieldDeclaration[1407-1587]"
    }, {
      "left" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "right" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "info" : "FieldDeclaration[1591-1804]:FieldDeclaration[1591-1804]"
    }, {
      "left" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "right" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "info" : "FieldDeclaration[1808-1968]:FieldDeclaration[1808-1968]"
    }, {
      "left" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "right" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "info" : "FieldDeclaration[1972-2132]:FieldDeclaration[1972-2132]"
    }, {
      "left" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "right" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "info" : "FieldDeclaration[2136-2198]:FieldDeclaration[2136-2198]"
    }, {
      "left" : "Node optimizeSubtree(Node subtree)",
      "right" : "Node optimizeSubtree(Node subtree)",
      "info" : "MethodDeclaration[2202-2766]:MethodDeclaration[2202-2766]"
    }, {
      "left" : "private Node tryFoldBinaryOperator(Node subtree)",
      "right" : "private Node tryFoldBinaryOperator(Node subtree)",
      "info" : "MethodDeclaration[2770-4398]:MethodDeclaration[2770-4398]"
    }, {
      "left" : "private Node tryReduceVoid(Node n)",
      "right" : "private Node tryReduceVoid(Node n)",
      "info" : "MethodDeclaration[4402-4691]:MethodDeclaration[4402-4691]"
    }, {
      "left" : "private void tryReduceOperandsForOp(Node n)",
      "right" : "private void tryReduceOperandsForOp(Node n)",
      "info" : "MethodDeclaration[4695-5784]:MethodDeclaration[4695-5784]"
    }, {
      "left" : "private void tryConvertOperandsToNumber(Node n)",
      "right" : "private void tryConvertOperandsToNumber(Node n)",
      "info" : "MethodDeclaration[5788-5977]:MethodDeclaration[5788-5977]"
    }, {
      "left" : "private void tryConvertToNumber(Node n)",
      "right" : "private void tryConvertToNumber(Node n)",
      "info" : "MethodDeclaration[5981-7156]:MethodDeclaration[5981-7156]"
    }, {
      "left" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "right" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "info" : "MethodDeclaration[7160-8757]:MethodDeclaration[7160-8757]"
    }, {
      "left" : "private Node tryFoldUnaryOperator(Node n)",
      "right" : "private Node tryFoldUnaryOperator(Node n)",
      "info" : "MethodDeclaration[8761-11762]:MethodDeclaration[8761-11762]"
    }, {
      "left" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "right" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[11766-12685]:MethodDeclaration[11766-12685]"
    }, {
      "left" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[12689-14505]:MethodDeclaration[12689-14505]"
    }, {
      "left" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[14509-15493]:MethodDeclaration[14509-15493]"
    }, {
      "left" : "private Node tryFoldChildAddString(Node n, Node left, Node right)",
      "right" : "private Node tryFoldChildAddString(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[15497-17723]:MethodDeclaration[15497-17723]"
    }, {
      "left" : "private Node tryFoldAddConstantString(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAddConstantString(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[17727-18357]:MethodDeclaration[17727-18357]"
    }, {
      "left" : "private Node tryFoldArithmeticOp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArithmeticOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[18361-18734]:MethodDeclaration[18361-18734]"
    }, {
      "left" : "private Node performArithmeticOp(int opType, Node left, Node right)",
      "right" : "private Node performArithmeticOp(int opType, Node left, Node right)",
      "info" : "MethodDeclaration[18738-21291]:MethodDeclaration[18738-21291]"
    }, {
      "left" : "private Node tryFoldLeftChildOp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldLeftChildOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[21295-23191]:MethodDeclaration[21295-23191]"
    }, {
      "left" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "right" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "info" : "MethodDeclaration[23195-23869]:MethodDeclaration[23195-23869]"
    }, {
      "left" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "right" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[23873-25846]:MethodDeclaration[23873-25846]"
    }, {
      "left" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "right" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[25850-31009]:MethodDeclaration[25850-31009]"
    }, {
      "left" : "private int getNormalizedNodeType(Node n)",
      "right" : "private int getNormalizedNodeType(Node n)",
      "info" : "MethodDeclaration[31013-31414]:MethodDeclaration[31013-31414]"
    }, {
      "left" : "private Boolean compareAsNumbers(int op, Node left, Node right)",
      "right" : "private Boolean compareAsNumbers(int op, Node left, Node right)",
      "info" : "MethodDeclaration[31418-32586]:MethodDeclaration[31418-32586]"
    }, {
      "left" : "private boolean compareToUndefined(Node value, int op)",
      "right" : "private boolean compareToUndefined(Node value, int op)",
      "info" : "MethodDeclaration[32590-33623]:MethodDeclaration[32590-33623]"
    }, {
      "left" : "private Node tryFoldCtorCall(Node n)",
      "right" : "private Node tryFoldCtorCall(Node n)",
      "info" : "MethodDeclaration[33627-34008]:MethodDeclaration[33627-34008]"
    }, {
      "left" : "private boolean inForcedStringContext(Node n)",
      "right" : "private boolean inForcedStringContext(Node n)",
      "info" : "MethodDeclaration[34012-34225]:MethodDeclaration[34012-34225]"
    }, {
      "left" : "private Node tryFoldInForcedStringContext(Node n)",
      "right" : "private Node tryFoldInForcedStringContext(Node n)",
      "info" : "MethodDeclaration[34229-35143]:MethodDeclaration[34229-35143]"
    }, {
      "left" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[35147-35557]:MethodDeclaration[35147-35557]"
    }, {
      "left" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[35561-36688]:MethodDeclaration[35561-36688]"
    }, {
      "left" : "private boolean isAssignmentTarget(Node n)",
      "right" : "private boolean isAssignmentTarget(Node n)",
      "info" : "MethodDeclaration[36692-37150]:MethodDeclaration[36692-37150]"
    }, {
      "left" : "private Node tryFoldArrayAccess(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArrayAccess(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[37154-38360]:MethodDeclaration[37154-38415]"
    }, {
      "left" : "private Node tryFoldObjectPropAccess(Node n, Node left, Node right)",
      "right" : "private Node tryFoldObjectPropAccess(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[38364-40328]:MethodDeclaration[38419-40383]"
    } ],
    "mappings" : [
 {
      "left" : "AbstractPeepholeOptimization",
      "right" : "AbstractPeepholeOptimization",
      "info" : "SimpleType[1021-1049]:SimpleType[1021-1049]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2202-2211]:MarkerAnnotation[2202-2211]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2214-2218]:SimpleType[2214-2218]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[2219-2234]:SimpleName[2219-2234]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[2235-2247]:SingleVariableDeclaration[2235-2247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2249-2766]:Block[2249-2766]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
      "info" : "SwitchStatement[2255-2762]:SwitchStatement[2255-2762]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[2289-2304]:SwitchCase[2289-2304]"
    }, {
      "left" : "return tryFoldCtorCall(subtree);",
      "right" : "return tryFoldCtorCall(subtree);",
      "info" : "ReturnStatement[2313-2345]:ReturnStatement[2313-2345]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[2353-2371]:SwitchCase[2353-2371]"
    }, {
      "left" : "return tryFoldTypeof(subtree);",
      "right" : "return tryFoldTypeof(subtree);",
      "info" : "ReturnStatement[2380-2410]:ReturnStatement[2380-2410]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2418-2433]:SwitchCase[2418-2433]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[2440-2455]:SwitchCase[2440-2455]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[2462-2477]:SwitchCase[2462-2477]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[2484-2502]:SwitchCase[2484-2502]"
    }, {
      "left" : "tryReduceOperandsForOp(subtree);",
      "right" : "tryReduceOperandsForOp(subtree);",
      "info" : "ExpressionStatement[2511-2543]:ExpressionStatement[2511-2543]"
    }, {
      "left" : "return tryFoldUnaryOperator(subtree);",
      "right" : "return tryFoldUnaryOperator(subtree);",
      "info" : "ReturnStatement[2552-2589]:ReturnStatement[2552-2589]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[2597-2613]:SwitchCase[2597-2613]"
    }, {
      "left" : "return tryReduceVoid(subtree);",
      "right" : "return tryReduceVoid(subtree);",
      "info" : "ReturnStatement[2622-2652]:ReturnStatement[2622-2652]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2660-2668]:SwitchCase[2660-2668]"
    }, {
      "left" : "tryReduceOperandsForOp(subtree);",
      "right" : "tryReduceOperandsForOp(subtree);",
      "info" : "ExpressionStatement[2677-2709]:ExpressionStatement[2677-2709]"
    }, {
      "left" : "return tryFoldBinaryOperator(subtree);",
      "right" : "return tryFoldBinaryOperator(subtree);",
      "info" : "ReturnStatement[2718-2756]:ReturnStatement[2718-2756]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2770-2777]:Modifier[2770-2777]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2778-2782]:SimpleType[2778-2782]"
    }, {
      "left" : "tryFoldBinaryOperator",
      "right" : "tryFoldBinaryOperator",
      "info" : "SimpleName[2783-2804]:SimpleName[2783-2804]"
    }, {
      "left" : "Node subtree",
      "right" : "Node subtree",
      "info" : "SingleVariableDeclaration[2805-2817]:SingleVariableDeclaration[2805-2817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2819-4398]:Block[2819-4398]"
    }, {
      "left" : "Node left = subtree.getFirstChild();",
      "right" : "Node left = subtree.getFirstChild();",
      "info" : "VariableDeclarationStatement[2825-2861]:VariableDeclarationStatement[2825-2861]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[2867-2914]:IfStatement[2867-2914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2885-2914]:Block[2885-2914]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[2893-2908]:ReturnStatement[2893-2908]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[2920-2948]:VariableDeclarationStatement[2920-2948]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[2954-3002]:IfStatement[2954-3002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2973-3002]:Block[2973-3002]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[2981-2996]:ReturnStatement[2981-2996]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "info" : "SwitchStatement[3071-4394]:SwitchStatement[3071-4394]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[3105-3124]:SwitchCase[3105-3124]"
    }, {
      "left" : "return tryFoldGetProp(subtree, left, right);",
      "right" : "return tryFoldGetProp(subtree, left, right);",
      "info" : "ReturnStatement[3133-3177]:ReturnStatement[3133-3177]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[3185-3204]:SwitchCase[3185-3204]"
    }, {
      "left" : "return tryFoldGetElem(subtree, left, right);",
      "right" : "return tryFoldGetElem(subtree, left, right);",
      "info" : "ReturnStatement[3213-3257]:ReturnStatement[3213-3257]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[3265-3287]:SwitchCase[3265-3287]"
    }, {
      "left" : "return tryFoldInstanceof(subtree, left, right);",
      "right" : "return tryFoldInstanceof(subtree, left, right);",
      "info" : "ReturnStatement[3296-3343]:ReturnStatement[3296-3343]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[3351-3366]:SwitchCase[3351-3366]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3373-3387]:SwitchCase[3373-3387]"
    }, {
      "left" : "return tryFoldAndOr(subtree, left, right);",
      "right" : "return tryFoldAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3396-3438]:ReturnStatement[3396-3438]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[3446-3461]:SwitchCase[3446-3461]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[3468-3483]:SwitchCase[3468-3483]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[3490-3506]:SwitchCase[3490-3506]"
    }, {
      "left" : "return tryFoldShift(subtree, left, right);",
      "right" : "return tryFoldShift(subtree, left, right);",
      "info" : "ReturnStatement[3515-3557]:ReturnStatement[3515-3557]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[3565-3583]:SwitchCase[3565-3583]"
    }, {
      "left" : "return tryFoldAssign(subtree, left, right);",
      "right" : "return tryFoldAssign(subtree, left, right);",
      "info" : "ReturnStatement[3592-3635]:ReturnStatement[3592-3635]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[3643-3658]:SwitchCase[3643-3658]"
    }, {
      "left" : "return tryFoldAdd(subtree, left, right);",
      "right" : "return tryFoldAdd(subtree, left, right);",
      "info" : "ReturnStatement[3667-3707]:ReturnStatement[3667-3707]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[3715-3730]:SwitchCase[3715-3730]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[3737-3752]:SwitchCase[3737-3752]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[3759-3774]:SwitchCase[3759-3774]"
    }, {
      "left" : "return tryFoldArithmeticOp(subtree, left, right);",
      "right" : "return tryFoldArithmeticOp(subtree, left, right);",
      "info" : "ReturnStatement[3783-3832]:ReturnStatement[3783-3832]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[3840-3855]:SwitchCase[3840-3855]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[3862-3880]:SwitchCase[3862-3880]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[3887-3904]:SwitchCase[3887-3904]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[3911-3929]:SwitchCase[3911-3929]"
    }, {
      "left" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
      "right" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
      "info" : "VariableDeclarationStatement[3938-3994]:VariableDeclarationStatement[3938-3994]"
    }, {
      "left" : "if (result != subtree)",
      "right" : "if (result != subtree)",
      "info" : "IfStatement[4003-4062]:IfStatement[4003-4062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4026-4062]:Block[4026-4062]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4038-4052]:ReturnStatement[4038-4052]"
    }, {
      "left" : "return tryFoldLeftChildOp(subtree, left, right);",
      "right" : "return tryFoldLeftChildOp(subtree, left, right);",
      "info" : "ReturnStatement[4071-4119]:ReturnStatement[4071-4119]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[4127-4141]:SwitchCase[4127-4141]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[4148-4162]:SwitchCase[4148-4162]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[4169-4183]:SwitchCase[4169-4183]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[4190-4204]:SwitchCase[4190-4204]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[4211-4225]:SwitchCase[4211-4225]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[4232-4246]:SwitchCase[4232-4246]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[4253-4269]:SwitchCase[4253-4269]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[4276-4292]:SwitchCase[4276-4292]"
    }, {
      "left" : "return tryFoldComparison(subtree, left, right);",
      "right" : "return tryFoldComparison(subtree, left, right);",
      "info" : "ReturnStatement[4301-4348]:ReturnStatement[4301-4348]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4356-4364]:SwitchCase[4356-4364]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[4373-4388]:ReturnStatement[4373-4388]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4402-4409]:Modifier[4402-4409]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[4410-4414]:SimpleType[4410-4414]"
    }, {
      "left" : "tryReduceVoid",
      "right" : "tryReduceVoid",
      "info" : "SimpleName[4415-4428]:SimpleName[4415-4428]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4429-4435]:SingleVariableDeclaration[4429-4435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4437-4691]:Block[4437-4691]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[4443-4474]:VariableDeclarationStatement[4443-4474]"
    }, {
      "left" : "if (child.getType() != Token.NUMBER || child.getDouble() != 0.0)",
      "right" : "if (child.getType() != Token.NUMBER || child.getDouble() != 0.0)",
      "info" : "IfStatement[4479-4673]:IfStatement[4479-4673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4544-4673]:Block[4544-4673]"
    }, {
      "left" : "if (!mayHaveSideEffects(n))",
      "right" : "if (!mayHaveSideEffects(n))",
      "info" : "IfStatement[4552-4667]:IfStatement[4552-4667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4580-4667]:Block[4580-4667]"
    }, {
      "left" : "n.replaceChild(child, Node.newNumber(0));",
      "right" : "n.replaceChild(child, Node.newNumber(0));",
      "info" : "ExpressionStatement[4590-4631]:ExpressionStatement[4590-4631]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[4640-4659]:ExpressionStatement[4640-4659]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[4678-4687]:ReturnStatement[4678-4687]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4695-4702]:Modifier[4695-4702]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4703-4707]:PrimitiveType[4703-4707]"
    }, {
      "left" : "tryReduceOperandsForOp",
      "right" : "tryReduceOperandsForOp",
      "info" : "SimpleName[4708-4730]:SimpleName[4708-4730]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4731-4737]:SingleVariableDeclaration[4731-4737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4739-5784]:Block[4739-5784]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
      "info" : "SwitchStatement[4745-5780]:SwitchStatement[4745-5780]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[4774-4789]:SwitchCase[4774-4789]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[4798-4828]:VariableDeclarationStatement[4798-4828]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[4837-4867]:VariableDeclarationStatement[4837-4867]"
    }, {
      "left" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
      "right" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
      "info" : "IfStatement[4876-4993]:IfStatement[4876-4993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-4993]:Block[4941-4993]"
    }, {
      "left" : "tryConvertOperandsToNumber(n);",
      "right" : "tryConvertOperandsToNumber(n);",
      "info" : "ExpressionStatement[4953-4983]:ExpressionStatement[4953-4983]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5002-5008]:BreakStatement[5002-5008]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[5015-5039]:SwitchCase[5015-5039]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[5046-5071]:SwitchCase[5046-5071]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[5078-5103]:SwitchCase[5078-5103]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[5164-5186]:SwitchCase[5164-5186]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[5193-5215]:SwitchCase[5193-5215]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[5222-5245]:SwitchCase[5222-5245]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[5252-5274]:SwitchCase[5252-5274]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[5281-5303]:SwitchCase[5281-5303]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[5310-5332]:SwitchCase[5310-5332]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[5339-5361]:SwitchCase[5339-5361]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[5370-5407]:ExpressionStatement[5370-5407]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5416-5422]:BreakStatement[5416-5422]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[5429-5447]:SwitchCase[5429-5447]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[5454-5471]:SwitchCase[5454-5471]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[5478-5496]:SwitchCase[5478-5496]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[5503-5521]:SwitchCase[5503-5521]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[5528-5543]:SwitchCase[5528-5543]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[5550-5565]:SwitchCase[5550-5565]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[5572-5588]:SwitchCase[5572-5588]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[5595-5610]:SwitchCase[5595-5610]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[5617-5632]:SwitchCase[5617-5632]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[5639-5654]:SwitchCase[5639-5654]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[5661-5676]:SwitchCase[5661-5676]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[5683-5698]:SwitchCase[5683-5698]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[5705-5720]:SwitchCase[5705-5720]"
    }, {
      "left" : "tryConvertOperandsToNumber(n);",
      "right" : "tryConvertOperandsToNumber(n);",
      "info" : "ExpressionStatement[5729-5759]:ExpressionStatement[5729-5759]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5768-5774]:BreakStatement[5768-5774]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5788-5795]:Modifier[5788-5795]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5796-5800]:PrimitiveType[5796-5800]"
    }, {
      "left" : "tryConvertOperandsToNumber",
      "right" : "tryConvertOperandsToNumber",
      "info" : "SimpleName[5801-5827]:SimpleName[5801-5827]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5828-5834]:SingleVariableDeclaration[5828-5834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5836-5977]:Block[5836-5977]"
    }, {
      "left" : "Node next;",
      "right" : "Node next;",
      "info" : "VariableDeclarationStatement[5842-5852]:VariableDeclarationStatement[5842-5852]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[5857-5973]:ForStatement[5857-5973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5911-5973]:Block[5911-5973]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[5919-5938]:ExpressionStatement[5919-5938]"
    }, {
      "left" : "tryConvertToNumber(c);",
      "right" : "tryConvertToNumber(c);",
      "info" : "ExpressionStatement[5945-5967]:ExpressionStatement[5945-5967]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5981-5988]:Modifier[5981-5988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5989-5993]:PrimitiveType[5989-5993]"
    }, {
      "left" : "tryConvertToNumber",
      "right" : "tryConvertToNumber",
      "info" : "SimpleName[5994-6012]:SimpleName[5994-6012]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6013-6019]:SingleVariableDeclaration[6013-6019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6021-7156]:Block[6021-7156]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
      "info" : "SwitchStatement[6027-6491]:SwitchStatement[6027-6491]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6056-6074]:SwitchCase[6056-6074]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6108-6115]:ReturnStatement[6108-6115]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[6122-6137]:SwitchCase[6122-6137]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[6144-6158]:SwitchCase[6144-6158]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6165-6182]:SwitchCase[6165-6182]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[6191-6228]:ExpressionStatement[6191-6228]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6237-6244]:ReturnStatement[6237-6244]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[6251-6267]:SwitchCase[6251-6267]"
    }, {
      "left" : "tryConvertToNumber(n.getChildAtIndex(1));",
      "right" : "tryConvertToNumber(n.getChildAtIndex(1));",
      "info" : "ExpressionStatement[6276-6317]:ExpressionStatement[6276-6317]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[6326-6363]:ExpressionStatement[6326-6363]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6372-6379]:ReturnStatement[6372-6379]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6386-6402]:SwitchCase[6386-6402]"
    }, {
      "left" : "if (!NodeUtil.isUndefined(n))",
      "right" : "if (!NodeUtil.isUndefined(n))",
      "info" : "IfStatement[6411-6470]:IfStatement[6411-6470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6441-6470]:Block[6441-6470]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6453-6460]:ReturnStatement[6453-6460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6479-6485]:BreakStatement[6479-6485]"
    }, {
      "left" : "Double result = NodeUtil.getNumberValue(n);",
      "right" : "Double result = NodeUtil.getNumberValue(n);",
      "info" : "VariableDeclarationStatement[6497-6540]:VariableDeclarationStatement[6497-6540]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[6545-6586]:IfStatement[6545-6586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6565-6586]:Block[6565-6586]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6573-6580]:ReturnStatement[6573-6580]"
    }, {
      "left" : "double value = result;",
      "right" : "double value = result;",
      "info" : "VariableDeclarationStatement[6592-6614]:VariableDeclarationStatement[6592-6614]"
    }, {
      "left" : "Node replacement;",
      "right" : "Node replacement;",
      "info" : "VariableDeclarationStatement[6620-6637]:VariableDeclarationStatement[6620-6637]"
    }, {
      "left" : "if (Double.isNaN(value))",
      "right" : "if (Double.isNaN(value))",
      "info" : "IfStatement[6642-7079]:IfStatement[6642-7079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6667-6729]:Block[6667-6729]"
    }, {
      "left" : "replacement = Node.newString(Token.NAME, \"NaN\");",
      "right" : "replacement = Node.newString(Token.NAME, \"NaN\");",
      "info" : "ExpressionStatement[6675-6723]:ExpressionStatement[6675-6723]"
    }, {
      "left" : "if (value == Double.POSITIVE_INFINITY)",
      "right" : "if (value == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[6735-7079]:IfStatement[6735-7079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6774-6841]:Block[6774-6841]"
    }, {
      "left" : "replacement = Node.newString(Token.NAME, \"Infinity\");",
      "right" : "replacement = Node.newString(Token.NAME, \"Infinity\");",
      "info" : "ExpressionStatement[6782-6835]:ExpressionStatement[6782-6835]"
    }, {
      "left" : "if (value == Double.NEGATIVE_INFINITY)",
      "right" : "if (value == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[6847-7079]:IfStatement[6847-7079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6886-7023]:Block[6886-7023]"
    }, {
      "left" : "replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "right" : "replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "info" : "ExpressionStatement[6894-6968]:ExpressionStatement[6894-6968]"
    }, {
      "left" : "replacement.copyInformationFromForTree(n);",
      "right" : "replacement.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[6975-7017]:ExpressionStatement[6975-7017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7029-7079]:Block[7029-7079]"
    }, {
      "left" : "replacement = Node.newNumber(value);",
      "right" : "replacement = Node.newNumber(value);",
      "info" : "ExpressionStatement[7037-7073]:ExpressionStatement[7037-7073]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[7085-7128]:ExpressionStatement[7085-7128]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7133-7152]:ExpressionStatement[7133-7152]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7283-7290]:Modifier[7283-7290]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7291-7295]:SimpleType[7291-7295]"
    }, {
      "left" : "tryFoldTypeof",
      "right" : "tryFoldTypeof",
      "info" : "SimpleName[7296-7309]:SimpleName[7296-7309]"
    }, {
      "left" : "Node originalTypeofNode",
      "right" : "Node originalTypeofNode",
      "info" : "SingleVariableDeclaration[7310-7333]:SingleVariableDeclaration[7310-7333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7335-8757]:Block[7335-8757]"
    }, {
      "left" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "right" : "Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);",
      "info" : "ExpressionStatement[7341-7415]:ExpressionStatement[7341-7415]"
    }, {
      "left" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "right" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[7421-7476]:VariableDeclarationStatement[7421-7476]"
    }, {
      "left" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
      "right" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
      "info" : "IfStatement[7481-7595]:IfStatement[7481-7595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7555-7595]:Block[7555-7595]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[7563-7589]:ReturnStatement[7563-7589]"
    }, {
      "left" : "String typeNameString = null;",
      "right" : "String typeNameString = null;",
      "info" : "VariableDeclarationStatement[7601-7630]:VariableDeclarationStatement[7601-7630]"
    }, {
      "left" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "right" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "info" : "SwitchStatement[7636-8498]:SwitchStatement[7636-8498]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[7676-7696]:SwitchCase[7676-7696]"
    }, {
      "left" : "typeNameString = \"function\";",
      "right" : "typeNameString = \"function\";",
      "info" : "ExpressionStatement[7705-7733]:ExpressionStatement[7705-7733]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7742-7748]:BreakStatement[7742-7748]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[7755-7773]:SwitchCase[7755-7773]"
    }, {
      "left" : "typeNameString = \"string\";",
      "right" : "typeNameString = \"string\";",
      "info" : "ExpressionStatement[7782-7808]:ExpressionStatement[7782-7808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7817-7823]:BreakStatement[7817-7823]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[7830-7848]:SwitchCase[7830-7848]"
    }, {
      "left" : "typeNameString = \"number\";",
      "right" : "typeNameString = \"number\";",
      "info" : "ExpressionStatement[7857-7883]:ExpressionStatement[7857-7883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7892-7898]:BreakStatement[7892-7898]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[7905-7921]:SwitchCase[7905-7921]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[7928-7945]:SwitchCase[7928-7945]"
    }, {
      "left" : "typeNameString = \"boolean\";",
      "right" : "typeNameString = \"boolean\";",
      "info" : "ExpressionStatement[7954-7981]:ExpressionStatement[7954-7981]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7990-7996]:BreakStatement[7990-7996]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[8003-8019]:SwitchCase[8003-8019]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[8026-8047]:SwitchCase[8026-8047]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[8054-8074]:SwitchCase[8054-8074]"
    }, {
      "left" : "typeNameString = \"object\";",
      "right" : "typeNameString = \"object\";",
      "info" : "ExpressionStatement[8083-8109]:ExpressionStatement[8083-8109]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8118-8124]:BreakStatement[8118-8124]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8131-8147]:SwitchCase[8131-8147]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[8156-8185]:ExpressionStatement[8156-8185]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8194-8200]:BreakStatement[8194-8200]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8207-8223]:SwitchCase[8207-8223]"
    }, {
      "left" : "if (\"undefined\".equals(argumentNode.getString()))",
      "right" : "if (\"undefined\".equals(argumentNode.getString()))",
      "info" : "IfStatement[8376-8477]:IfStatement[8376-8477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8426-8477]:Block[8426-8477]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[8438-8467]:ExpressionStatement[8438-8467]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8486-8492]:BreakStatement[8486-8492]"
    }, {
      "left" : "if (typeNameString != null)",
      "right" : "if (typeNameString != null)",
      "info" : "IfStatement[8504-8721]:IfStatement[8504-8721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8532-8721]:Block[8532-8721]"
    }, {
      "left" : "Node newNode = Node.newString(typeNameString);",
      "right" : "Node newNode = Node.newString(typeNameString);",
      "info" : "VariableDeclarationStatement[8540-8586]:VariableDeclarationStatement[8540-8586]"
    }, {
      "left" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "right" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "info" : "ExpressionStatement[8593-8666]:ExpressionStatement[8593-8666]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8673-8692]:ExpressionStatement[8673-8692]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[8700-8715]:ReturnStatement[8700-8715]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[8727-8753]:ReturnStatement[8727-8753]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8761-8768]:Modifier[8761-8768]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8769-8773]:SimpleType[8769-8773]"
    }, {
      "left" : "tryFoldUnaryOperator",
      "right" : "tryFoldUnaryOperator",
      "info" : "SimpleName[8774-8794]:SimpleName[8774-8794]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8795-8801]:SingleVariableDeclaration[8795-8801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8803-11762]:Block[8803-11762]"
    }, {
      "left" : "Preconditions.checkState(n.hasOneChild());",
      "right" : "Preconditions.checkState(n.hasOneChild());",
      "info" : "ExpressionStatement[8809-8851]:ExpressionStatement[8809-8851]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[8857-8887]:VariableDeclarationStatement[8857-8887]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8892-8920]:VariableDeclarationStatement[8892-8920]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[8926-8967]:IfStatement[8926-8967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8944-8967]:Block[8944-8967]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8952-8961]:ReturnStatement[8952-8961]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);",
      "info" : "VariableDeclarationStatement[8973-9031]:VariableDeclarationStatement[8973-9031]"
    }, {
      "left" : "if (leftVal == TernaryValue.UNKNOWN)",
      "right" : "if (leftVal == TernaryValue.UNKNOWN)",
      "info" : "IfStatement[9036-9096]:IfStatement[9036-9096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9073-9096]:Block[9073-9096]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9081-9090]:ReturnStatement[9081-9090]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (left.getType() == Token.NUMBER) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (left.getType() == Token.NUMBER) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n        Node replacementNode = new Node(result);\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.getType() == Token.NAME) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = Node.newNumber(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = Node.newNumber(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "info" : "SwitchStatement[9102-11758]:SwitchStatement[9102-11758]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[9131-9146]:SwitchCase[9131-9146]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER)",
      "info" : "IfStatement[9202-9377]:IfStatement[9202-9377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9238-9377]:Block[9238-9377]"
    }, {
      "left" : "double numValue = left.getDouble();",
      "right" : "double numValue = left.getDouble();",
      "info" : "VariableDeclarationStatement[9250-9285]:VariableDeclarationStatement[9250-9285]"
    }, {
      "left" : "if (numValue == 0 || numValue == 1)",
      "right" : "if (numValue == 0 || numValue == 1)",
      "info" : "IfStatement[9296-9367]:IfStatement[9296-9367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9332-9367]:Block[9332-9367]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9346-9355]:ReturnStatement[9346-9355]"
    }, {
      "left" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "right" : "int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;",
      "info" : "VariableDeclarationStatement[9386-9450]:VariableDeclarationStatement[9386-9450]"
    }, {
      "left" : "Node replacementNode = new Node(result);",
      "right" : "Node replacementNode = new Node(result);",
      "info" : "VariableDeclarationStatement[9459-9499]:VariableDeclarationStatement[9459-9499]"
    }, {
      "left" : "parent.replaceChild(n, replacementNode);",
      "right" : "parent.replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[9508-9548]:ExpressionStatement[9508-9548]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9557-9576]:ExpressionStatement[9557-9576]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[9585-9608]:ReturnStatement[9585-9608]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[9615-9630]:SwitchCase[9615-9630]"
    }, {
      "left" : "if (NodeUtil.isNumericResult(left))",
      "right" : "if (NodeUtil.isNumericResult(left))",
      "info" : "IfStatement[9639-9847]:IfStatement[9639-9847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9675-9847]:Block[9675-9847]"
    }, {
      "left" : "parent.replaceChild(n, left.detachFromParent());",
      "right" : "parent.replaceChild(n, left.detachFromParent());",
      "info" : "ExpressionStatement[9736-9784]:ExpressionStatement[9736-9784]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9795-9814]:ExpressionStatement[9795-9814]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[9825-9837]:ReturnStatement[9825-9837]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9856-9865]:ReturnStatement[9856-9865]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[9872-9887]:SwitchCase[9872-9887]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9896-10824]:TryStatement[9896-10824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9900-10567]:Block[9900-10567]"
    }, {
      "left" : "if (left.getType() == Token.NAME)",
      "right" : "if (left.getType() == Token.NAME)",
      "info" : "IfStatement[9912-10353]:IfStatement[9912-10353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9946-10353]:Block[9946-10353]"
    }, {
      "left" : "if (left.getString().equals(\"Infinity\"))",
      "right" : "if (left.getString().equals(\"Infinity\"))",
      "info" : "IfStatement[9960-10341]:IfStatement[9960-10341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10001-10110]:Block[10001-10110]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10087-10096]:ReturnStatement[10087-10096]"
    }, {
      "left" : "if (left.getString().equals(\"NaN\"))",
      "right" : "if (left.getString().equals(\"NaN\"))",
      "info" : "IfStatement[10116-10341]:IfStatement[10116-10341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10152-10341]:Block[10152-10341]"
    }, {
      "left" : "n.removeChild(left);",
      "right" : "n.removeChild(left);",
      "info" : "ExpressionStatement[10202-10222]:ExpressionStatement[10202-10222]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[10237-10266]:ExpressionStatement[10237-10266]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10281-10300]:ExpressionStatement[10281-10300]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[10315-10327]:ReturnStatement[10315-10327]"
    }, {
      "left" : "double negNum = -left.getDouble();",
      "right" : "double negNum = -left.getDouble();",
      "info" : "VariableDeclarationStatement[10365-10399]:VariableDeclarationStatement[10365-10399]"
    }, {
      "left" : "Node negNumNode = Node.newNumber(negNum);",
      "right" : "Node negNumNode = Node.newNumber(negNum);",
      "info" : "VariableDeclarationStatement[10411-10452]:VariableDeclarationStatement[10411-10452]"
    }, {
      "left" : "parent.replaceChild(n, negNumNode);",
      "right" : "parent.replaceChild(n, negNumNode);",
      "info" : "ExpressionStatement[10463-10498]:ExpressionStatement[10463-10498]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10509-10528]:ExpressionStatement[10509-10528]"
    }, {
      "left" : "return negNumNode;",
      "right" : "return negNumNode;",
      "info" : "ReturnStatement[10539-10557]:ReturnStatement[10539-10557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10609-10824]:Block[10609-10824]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[10753-10794]:ExpressionStatement[10753-10794]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10805-10814]:ReturnStatement[10805-10814]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[10831-10849]:SwitchCase[10831-10849]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10858-11715]:TryStatement[10858-11715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10862-11458]:Block[10862-11458]"
    }, {
      "left" : "double val = left.getDouble();",
      "right" : "double val = left.getDouble();",
      "info" : "VariableDeclarationStatement[10874-10904]:VariableDeclarationStatement[10874-10904]"
    }, {
      "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "info" : "IfStatement[10915-11448]:IfStatement[10915-11448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10973-11352]:Block[10973-11352]"
    }, {
      "left" : "int intVal = (int) val;",
      "right" : "int intVal = (int) val;",
      "info" : "VariableDeclarationStatement[10987-11010]:VariableDeclarationStatement[10987-11010]"
    }, {
      "left" : "if (intVal == val)",
      "right" : "if (intVal == val)",
      "info" : "IfStatement[11023-11340]:IfStatement[11023-11340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11042-11240]:Block[11042-11240]"
    }, {
      "left" : "Node notIntValNode = Node.newNumber(~intVal);",
      "right" : "Node notIntValNode = Node.newNumber(~intVal);",
      "info" : "VariableDeclarationStatement[11058-11103]:VariableDeclarationStatement[11058-11103]"
    }, {
      "left" : "parent.replaceChild(n, notIntValNode);",
      "right" : "parent.replaceChild(n, notIntValNode);",
      "info" : "ExpressionStatement[11118-11156]:ExpressionStatement[11118-11156]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11171-11190]:ExpressionStatement[11171-11190]"
    }, {
      "left" : "return notIntValNode;",
      "right" : "return notIntValNode;",
      "info" : "ReturnStatement[11205-11226]:ReturnStatement[11205-11226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11246-11340]:Block[11246-11340]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[11262-11302]:ExpressionStatement[11262-11302]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11317-11326]:ReturnStatement[11317-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11358-11448]:Block[11358-11448]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[11372-11414]:ExpressionStatement[11372-11414]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11427-11436]:ReturnStatement[11427-11436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11500-11715]:Block[11500-11715]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[11644-11685]:ExpressionStatement[11644-11685]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11696-11705]:ReturnStatement[11696-11705]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11724-11732]:SwitchCase[11724-11732]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11743-11752]:ReturnStatement[11743-11752]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11866-11873]:Modifier[11866-11873]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11874-11878]:SimpleType[11874-11878]"
    }, {
      "left" : "tryFoldInstanceof",
      "right" : "tryFoldInstanceof",
      "info" : "SimpleName[11879-11896]:SimpleName[11879-11896]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11897-11903]:SingleVariableDeclaration[11897-11903]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[11905-11914]:SingleVariableDeclaration[11905-11914]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[11916-11926]:SingleVariableDeclaration[11916-11926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11928-12685]:Block[11928-12685]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);",
      "info" : "ExpressionStatement[11934-11995]:ExpressionStatement[11934-11995]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
      "right" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
      "info" : "IfStatement[12084-12666]:IfStatement[12084-12666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12163-12666]:Block[12163-12666]"
    }, {
      "left" : "Node replacementNode = null;",
      "right" : "Node replacementNode = null;",
      "info" : "VariableDeclarationStatement[12172-12200]:VariableDeclarationStatement[12172-12200]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(left))",
      "right" : "if (NodeUtil.isImmutableValue(left))",
      "info" : "IfStatement[12208-12498]:IfStatement[12208-12498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12245-12352]:Block[12245-12352]"
    }, {
      "left" : "replacementNode = new Node(Token.FALSE);",
      "right" : "replacementNode = new Node(Token.FALSE);",
      "info" : "ExpressionStatement[12304-12344]:ExpressionStatement[12304-12344]"
    }, {
      "left" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "right" : "if (right.getType() == Token.NAME\n          && \"Object\".equals(right.getString()))",
      "info" : "IfStatement[12358-12498]:IfStatement[12358-12498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12441-12498]:Block[12441-12498]"
    }, {
      "left" : "replacementNode = new Node(Token.TRUE);",
      "right" : "replacementNode = new Node(Token.TRUE);",
      "info" : "ExpressionStatement[12451-12490]:ExpressionStatement[12451-12490]"
    }, {
      "left" : "if (replacementNode != null)",
      "right" : "if (replacementNode != null)",
      "info" : "IfStatement[12506-12660]:IfStatement[12506-12660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12535-12660]:Block[12535-12660]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacementNode);",
      "right" : "n.getParent().replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[12545-12592]:ExpressionStatement[12545-12592]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12601-12620]:ExpressionStatement[12601-12620]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[12629-12652]:ReturnStatement[12629-12652]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12672-12681]:ReturnStatement[12672-12681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12689-12696]:Modifier[12689-12696]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12697-12701]:SimpleType[12697-12701]"
    }, {
      "left" : "tryFoldAssign",
      "right" : "tryFoldAssign",
      "info" : "SimpleName[12702-12715]:SimpleName[12702-12715]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12716-12722]:SingleVariableDeclaration[12716-12722]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[12724-12733]:SingleVariableDeclaration[12724-12733]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[12735-12745]:SingleVariableDeclaration[12735-12745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12747-14505]:Block[12747-14505]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.ASSIGN);",
      "info" : "ExpressionStatement[12753-12810]:ExpressionStatement[12753-12810]"
    }, {
      "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "info" : "IfStatement[12861-13014]:IfStatement[12861-13014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12954-13014]:Block[12954-13014]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12999-13008]:ReturnStatement[12999-13008]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[13020-13073]:IfStatement[13020-13073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13050-13073]:Block[13050-13073]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13058-13067]:ReturnStatement[13058-13067]"
    }, {
      "left" : "Node newRight;",
      "right" : "Node newRight;",
      "info" : "VariableDeclarationStatement[13079-13093]:VariableDeclarationStatement[13079-13093]"
    }, {
      "left" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
      "right" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
      "info" : "IfStatement[13098-13396]:IfStatement[13098-13396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13157-13203]:Block[13157-13203]"
    }, {
      "left" : "newRight = right.getLastChild();",
      "right" : "newRight = right.getLastChild();",
      "info" : "ExpressionStatement[13165-13197]:ExpressionStatement[13165-13197]"
    }, {
      "left" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
      "right" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
      "info" : "IfStatement[13209-13396]:IfStatement[13209-13396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13320-13367]:Block[13320-13367]"
    }, {
      "left" : "newRight = right.getFirstChild();",
      "right" : "newRight = right.getFirstChild();",
      "info" : "ExpressionStatement[13328-13361]:ExpressionStatement[13328-13361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13373-13396]:Block[13373-13396]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13381-13390]:ReturnStatement[13381-13390]"
    }, {
      "left" : "int newType = -1;",
      "right" : "int newType = -1;",
      "info" : "VariableDeclarationStatement[13402-13419]:VariableDeclarationStatement[13402-13419]"
    }, {
      "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[13424-14310]:SwitchStatement[13424-14310]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[13457-13472]:SwitchCase[13457-13472]"
    }, {
      "left" : "newType = Token.ASSIGN_ADD;",
      "right" : "newType = Token.ASSIGN_ADD;",
      "info" : "ExpressionStatement[13481-13508]:ExpressionStatement[13481-13508]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13517-13523]:BreakStatement[13517-13523]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[13530-13548]:SwitchCase[13530-13548]"
    }, {
      "left" : "newType = Token.ASSIGN_BITAND;",
      "right" : "newType = Token.ASSIGN_BITAND;",
      "info" : "ExpressionStatement[13557-13587]:ExpressionStatement[13557-13587]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13596-13602]:BreakStatement[13596-13602]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[13609-13626]:SwitchCase[13609-13626]"
    }, {
      "left" : "newType = Token.ASSIGN_BITOR;",
      "right" : "newType = Token.ASSIGN_BITOR;",
      "info" : "ExpressionStatement[13635-13664]:ExpressionStatement[13635-13664]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13673-13679]:BreakStatement[13673-13679]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[13686-13704]:SwitchCase[13686-13704]"
    }, {
      "left" : "newType = Token.ASSIGN_BITXOR;",
      "right" : "newType = Token.ASSIGN_BITXOR;",
      "info" : "ExpressionStatement[13713-13743]:ExpressionStatement[13713-13743]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13752-13758]:BreakStatement[13752-13758]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[13765-13780]:SwitchCase[13765-13780]"
    }, {
      "left" : "newType = Token.ASSIGN_DIV;",
      "right" : "newType = Token.ASSIGN_DIV;",
      "info" : "ExpressionStatement[13789-13816]:ExpressionStatement[13789-13816]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13825-13831]:BreakStatement[13825-13831]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[13838-13853]:SwitchCase[13838-13853]"
    }, {
      "left" : "newType = Token.ASSIGN_LSH;",
      "right" : "newType = Token.ASSIGN_LSH;",
      "info" : "ExpressionStatement[13862-13889]:ExpressionStatement[13862-13889]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13898-13904]:BreakStatement[13898-13904]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[13911-13926]:SwitchCase[13911-13926]"
    }, {
      "left" : "newType = Token.ASSIGN_MOD;",
      "right" : "newType = Token.ASSIGN_MOD;",
      "info" : "ExpressionStatement[13935-13962]:ExpressionStatement[13935-13962]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13971-13977]:BreakStatement[13971-13977]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[13984-13999]:SwitchCase[13984-13999]"
    }, {
      "left" : "newType = Token.ASSIGN_MUL;",
      "right" : "newType = Token.ASSIGN_MUL;",
      "info" : "ExpressionStatement[14008-14035]:ExpressionStatement[14008-14035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14044-14050]:BreakStatement[14044-14050]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[14057-14072]:SwitchCase[14057-14072]"
    }, {
      "left" : "newType = Token.ASSIGN_RSH;",
      "right" : "newType = Token.ASSIGN_RSH;",
      "info" : "ExpressionStatement[14081-14108]:ExpressionStatement[14081-14108]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14117-14123]:BreakStatement[14117-14123]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[14130-14145]:SwitchCase[14130-14145]"
    }, {
      "left" : "newType = Token.ASSIGN_SUB;",
      "right" : "newType = Token.ASSIGN_SUB;",
      "info" : "ExpressionStatement[14154-14181]:ExpressionStatement[14154-14181]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14190-14196]:BreakStatement[14190-14196]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[14203-14219]:SwitchCase[14203-14219]"
    }, {
      "left" : "newType = Token.ASSIGN_URSH;",
      "right" : "newType = Token.ASSIGN_URSH;",
      "info" : "ExpressionStatement[14228-14256]:ExpressionStatement[14228-14256]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14265-14271]:BreakStatement[14265-14271]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14278-14286]:SwitchCase[14278-14286]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14295-14304]:ReturnStatement[14295-14304]"
    }, {
      "left" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
      "right" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
      "info" : "VariableDeclarationStatement[14316-14411]:VariableDeclarationStatement[14316-14411]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[14416-14455]:ExpressionStatement[14416-14455]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14461-14480]:ExpressionStatement[14461-14480]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[14486-14501]:ReturnStatement[14486-14501]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14553-14560]:Modifier[14553-14560]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14561-14565]:SimpleType[14561-14565]"
    }, {
      "left" : "tryFoldAndOr",
      "right" : "tryFoldAndOr",
      "info" : "SimpleName[14566-14578]:SimpleName[14566-14578]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14579-14585]:SingleVariableDeclaration[14579-14585]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[14587-14596]:SingleVariableDeclaration[14587-14596]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[14598-14608]:SingleVariableDeclaration[14598-14608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14610-15493]:Block[14610-15493]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[14616-14644]:VariableDeclarationStatement[14616-14644]"
    }, {
      "left" : "Node result = null;",
      "right" : "Node result = null;",
      "info" : "VariableDeclarationStatement[14650-14669]:VariableDeclarationStatement[14650-14669]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[14675-14698]:VariableDeclarationStatement[14675-14698]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);",
      "info" : "VariableDeclarationStatement[14704-14764]:VariableDeclarationStatement[14704-14764]"
    }, {
      "left" : "if (leftVal != TernaryValue.UNKNOWN)",
      "right" : "if (leftVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[14770-15180]:IfStatement[14770-15180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14807-15180]:Block[14807-15180]"
    }, {
      "left" : "boolean lval = leftVal.toBoolean(true);",
      "right" : "boolean lval = leftVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[14815-14854]:VariableDeclarationStatement[14815-14854]"
    }, {
      "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "info" : "IfStatement[14944-15174]:IfStatement[14944-15174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15014-15047]:Block[15014-15047]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[15024-15038]:ExpressionStatement[15024-15038]"
    }, {
      "left" : "if (!mayHaveSideEffects(left))",
      "right" : "if (!mayHaveSideEffects(left))",
      "info" : "IfStatement[15053-15174]:IfStatement[15053-15174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15084-15174]:Block[15084-15174]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[15151-15166]:ExpressionStatement[15151-15166]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[15300-15489]:IfStatement[15300-15489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15320-15460]:Block[15320-15460]"
    }, {
      "left" : "n.removeChild(result);",
      "right" : "n.removeChild(result);",
      "info" : "ExpressionStatement[15346-15368]:ExpressionStatement[15346-15368]"
    }, {
      "left" : "parent.replaceChild(n, result);",
      "right" : "parent.replaceChild(n, result);",
      "info" : "ExpressionStatement[15375-15406]:ExpressionStatement[15375-15406]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15413-15432]:ExpressionStatement[15413-15432]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15440-15454]:ReturnStatement[15440-15454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15466-15489]:Block[15466-15489]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15474-15483]:ReturnStatement[15474-15483]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15922-15929]:Modifier[15922-15929]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15930-15934]:SimpleType[15930-15934]"
    }, {
      "left" : "tryFoldChildAddString",
      "right" : "tryFoldChildAddString",
      "info" : "SimpleName[15935-15956]:SimpleName[15935-15956]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15957-15963]:SingleVariableDeclaration[15957-15963]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[15965-15974]:SingleVariableDeclaration[15965-15974]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[15976-15986]:SingleVariableDeclaration[15976-15986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15988-17723]:Block[15988-17723]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.getType() == Token.ADD)",
      "right" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.getType() == Token.ADD)",
      "info" : "IfStatement[15995-16842]:IfStatement[15995-16842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16077-16842]:Block[16077-16842]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[16086-16117]:VariableDeclarationStatement[16086-16117]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[16124-16147]:VariableDeclarationStatement[16124-16147]"
    }, {
      "left" : "if (lr.getType() == Token.STRING)",
      "right" : "if (lr.getType() == Token.STRING)",
      "info" : "IfStatement[16381-16836]:IfStatement[16381-16836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16415-16836]:Block[16415-16836]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(lr);",
      "right" : "String leftString = NodeUtil.getStringValue(lr);",
      "info" : "VariableDeclarationStatement[16425-16473]:VariableDeclarationStatement[16425-16473]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[16482-16534]:VariableDeclarationStatement[16482-16534]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[16543-16828]:IfStatement[16543-16828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16590-16828]:Block[16590-16828]"
    }, {
      "left" : "left.removeChild(ll);",
      "right" : "left.removeChild(ll);",
      "info" : "ExpressionStatement[16602-16623]:ExpressionStatement[16602-16623]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[16634-16675]:VariableDeclarationStatement[16634-16675]"
    }, {
      "left" : "n.replaceChild(left, ll);",
      "right" : "n.replaceChild(left, ll);",
      "info" : "ExpressionStatement[16686-16711]:ExpressionStatement[16686-16711]"
    }, {
      "left" : "n.replaceChild(right, Node.newString(result));",
      "right" : "n.replaceChild(right, Node.newString(result));",
      "info" : "ExpressionStatement[16722-16768]:ExpressionStatement[16722-16768]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[16779-16798]:ExpressionStatement[16779-16798]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[16809-16818]:ReturnStatement[16809-16818]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.getType() == Token.ADD)",
      "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.getType() == Token.ADD)",
      "info" : "IfStatement[16848-17704]:IfStatement[16848-17704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16930-17704]:Block[16930-17704]"
    }, {
      "left" : "Node rl = right.getFirstChild();",
      "right" : "Node rl = right.getFirstChild();",
      "info" : "VariableDeclarationStatement[16939-16971]:VariableDeclarationStatement[16939-16971]"
    }, {
      "left" : "Node rr = right.getLastChild();",
      "right" : "Node rr = right.getLastChild();",
      "info" : "VariableDeclarationStatement[16978-17009]:VariableDeclarationStatement[16978-17009]"
    }, {
      "left" : "if (rl.getType() == Token.STRING)",
      "right" : "if (rl.getType() == Token.STRING)",
      "info" : "IfStatement[17243-17698]:IfStatement[17243-17698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17277-17698]:Block[17277-17698]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[17287-17337]:VariableDeclarationStatement[17287-17337]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(rl);",
      "right" : "String rightString = NodeUtil.getStringValue(rl);",
      "info" : "VariableDeclarationStatement[17346-17395]:VariableDeclarationStatement[17346-17395]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[17404-17690]:IfStatement[17404-17690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17451-17690]:Block[17451-17690]"
    }, {
      "left" : "right.removeChild(rr);",
      "right" : "right.removeChild(rr);",
      "info" : "ExpressionStatement[17463-17485]:ExpressionStatement[17463-17485]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[17496-17537]:VariableDeclarationStatement[17496-17537]"
    }, {
      "left" : "n.replaceChild(right, rr);",
      "right" : "n.replaceChild(right, rr);",
      "info" : "ExpressionStatement[17548-17574]:ExpressionStatement[17548-17574]"
    }, {
      "left" : "n.replaceChild(left, Node.newString(result));",
      "right" : "n.replaceChild(left, Node.newString(result));",
      "info" : "ExpressionStatement[17585-17630]:ExpressionStatement[17585-17630]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17641-17660]:ExpressionStatement[17641-17660]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17671-17680]:ReturnStatement[17671-17680]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17710-17719]:ReturnStatement[17710-17719]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17791-17798]:Modifier[17791-17798]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17799-17803]:SimpleType[17799-17803]"
    }, {
      "left" : "tryFoldAddConstantString",
      "right" : "tryFoldAddConstantString",
      "info" : "SimpleName[17804-17828]:SimpleName[17804-17828]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17829-17835]:SingleVariableDeclaration[17829-17835]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[17837-17846]:SingleVariableDeclaration[17837-17846]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[17848-17858]:SingleVariableDeclaration[17848-17858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17860-18357]:Block[17860-18357]"
    }, {
      "left" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "right" : "if (left.getType() == Token.STRING ||\n        right.getType() == Token.STRING)",
      "info" : "IfStatement[17866-18336]:IfStatement[17866-18336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17945-18336]:Block[17945-18336]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[17975-18025]:VariableDeclarationStatement[17975-18025]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[18032-18084]:VariableDeclarationStatement[18032-18084]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[18091-18330]:IfStatement[18091-18330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18138-18330]:Block[18138-18330]"
    }, {
      "left" : "Node newStringNode = Node.newString(leftString + rightString);",
      "right" : "Node newStringNode = Node.newString(leftString + rightString);",
      "info" : "VariableDeclarationStatement[18148-18210]:VariableDeclarationStatement[18148-18210]"
    }, {
      "left" : "n.getParent().replaceChild(n, newStringNode);",
      "right" : "n.getParent().replaceChild(n, newStringNode);",
      "info" : "ExpressionStatement[18219-18264]:ExpressionStatement[18219-18264]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18273-18292]:ExpressionStatement[18273-18292]"
    }, {
      "left" : "return newStringNode;",
      "right" : "return newStringNode;",
      "info" : "ReturnStatement[18301-18322]:ReturnStatement[18301-18322]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18344-18353]:ReturnStatement[18344-18353]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18418-18425]:Modifier[18418-18425]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18426-18430]:SimpleType[18426-18430]"
    }, {
      "left" : "tryFoldArithmeticOp",
      "right" : "tryFoldArithmeticOp",
      "info" : "SimpleName[18431-18450]:SimpleName[18431-18450]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18451-18457]:SingleVariableDeclaration[18451-18457]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[18459-18468]:SingleVariableDeclaration[18459-18468]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[18470-18480]:SingleVariableDeclaration[18470-18480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18482-18734]:Block[18482-18734]"
    }, {
      "left" : "Node result = performArithmeticOp(n.getType(), left, right);",
      "right" : "Node result = performArithmeticOp(n.getType(), left, right);",
      "info" : "VariableDeclarationStatement[18488-18548]:VariableDeclarationStatement[18488-18548]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[18553-18716]:IfStatement[18553-18716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18573-18716]:Block[18573-18716]"
    }, {
      "left" : "result.copyInformationFromForTree(n);",
      "right" : "result.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[18581-18618]:ExpressionStatement[18581-18618]"
    }, {
      "left" : "n.getParent().replaceChild(n, result);",
      "right" : "n.getParent().replaceChild(n, result);",
      "info" : "ExpressionStatement[18625-18663]:ExpressionStatement[18625-18663]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18670-18689]:ExpressionStatement[18670-18689]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[18696-18710]:ReturnStatement[18696-18710]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18721-18730]:ReturnStatement[18721-18730]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18795-18802]:Modifier[18795-18802]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18803-18807]:SimpleType[18803-18807]"
    }, {
      "left" : "performArithmeticOp",
      "right" : "performArithmeticOp",
      "info" : "SimpleName[18808-18827]:SimpleName[18808-18827]"
    }, {
      "left" : "int opType",
      "right" : "int opType",
      "info" : "SingleVariableDeclaration[18828-18838]:SingleVariableDeclaration[18828-18838]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[18840-18849]:SingleVariableDeclaration[18840-18849]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[18851-18861]:SingleVariableDeclaration[18851-18861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18863-21291]:Block[18863-21291]"
    }, {
      "left" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
      "right" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
      "info" : "IfStatement[18957-19105]:IfStatement[18957-19105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19079-19105]:Block[19079-19105]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19087-19099]:ReturnStatement[19087-19099]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[19111-19125]:VariableDeclarationStatement[19111-19125]"
    }, {
      "left" : "Double lValObj = NodeUtil.getNumberValue(left);",
      "right" : "Double lValObj = NodeUtil.getNumberValue(left);",
      "info" : "VariableDeclarationStatement[19254-19301]:VariableDeclarationStatement[19254-19301]"
    }, {
      "left" : "if (lValObj == null)",
      "right" : "if (lValObj == null)",
      "info" : "IfStatement[19306-19353]:IfStatement[19306-19353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19327-19353]:Block[19327-19353]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19335-19347]:ReturnStatement[19335-19347]"
    }, {
      "left" : "Double rValObj = NodeUtil.getNumberValue(right);",
      "right" : "Double rValObj = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[19358-19406]:VariableDeclarationStatement[19358-19406]"
    }, {
      "left" : "if (rValObj == null)",
      "right" : "if (rValObj == null)",
      "info" : "IfStatement[19411-19458]:IfStatement[19411-19458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19432-19458]:Block[19432-19458]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19440-19452]:ReturnStatement[19440-19452]"
    }, {
      "left" : "double lval = lValObj;",
      "right" : "double lval = lValObj;",
      "info" : "VariableDeclarationStatement[19464-19486]:VariableDeclarationStatement[19464-19486]"
    }, {
      "left" : "double rval = rValObj;",
      "right" : "double rval = rValObj;",
      "info" : "VariableDeclarationStatement[19491-19513]:VariableDeclarationStatement[19491-19513]"
    }, {
      "left" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
      "right" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
      "info" : "SwitchStatement[19519-20414]:SwitchStatement[19519-20414]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[19543-19561]:SwitchCase[19543-19561]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[19570-19637]:ExpressionStatement[19570-19637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19646-19652]:BreakStatement[19646-19652]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[19659-19676]:SwitchCase[19659-19676]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[19685-19752]:ExpressionStatement[19685-19752]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19761-19767]:BreakStatement[19761-19767]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[19774-19792]:SwitchCase[19774-19792]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[19801-19868]:ExpressionStatement[19801-19868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19877-19883]:BreakStatement[19877-19883]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[19890-19905]:SwitchCase[19890-19905]"
    }, {
      "left" : "result = lval + rval;",
      "right" : "result = lval + rval;",
      "info" : "ExpressionStatement[19914-19935]:ExpressionStatement[19914-19935]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19944-19950]:BreakStatement[19944-19950]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[19957-19972]:SwitchCase[19957-19972]"
    }, {
      "left" : "result = lval - rval;",
      "right" : "result = lval - rval;",
      "info" : "ExpressionStatement[19981-20002]:ExpressionStatement[19981-20002]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20011-20017]:BreakStatement[20011-20017]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[20024-20039]:SwitchCase[20024-20039]"
    }, {
      "left" : "result = lval * rval;",
      "right" : "result = lval * rval;",
      "info" : "ExpressionStatement[20048-20069]:ExpressionStatement[20048-20069]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20078-20084]:BreakStatement[20078-20084]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[20091-20106]:SwitchCase[20091-20106]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[20115-20164]:IfStatement[20115-20164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20130-20164]:Block[20130-20164]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20142-20154]:ReturnStatement[20142-20154]"
    }, {
      "left" : "result = lval % rval;",
      "right" : "result = lval % rval;",
      "info" : "ExpressionStatement[20173-20194]:ExpressionStatement[20173-20194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20203-20209]:BreakStatement[20203-20209]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[20216-20231]:SwitchCase[20216-20231]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[20240-20289]:IfStatement[20240-20289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20255-20289]:Block[20255-20289]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20267-20279]:ReturnStatement[20267-20279]"
    }, {
      "left" : "result = lval / rval;",
      "right" : "result = lval / rval;",
      "info" : "ExpressionStatement[20298-20319]:ExpressionStatement[20298-20319]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20328-20334]:BreakStatement[20328-20334]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20341-20349]:SwitchCase[20341-20349]"
    }, {
      "left" : "throw new Error(\"Unexpected arithmetic operator\");",
      "right" : "throw new Error(\"Unexpected arithmetic operator\");",
      "info" : "ThrowStatement[20358-20408]:ThrowStatement[20358-20408]"
    }, {
      "left" : "if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER)",
      "right" : "if (String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        Math.abs(result) <= MAX_FOLD_NUMBER)",
      "info" : "IfStatement[20558-21269]:IfStatement[20558-21269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20871-20949]:Block[20871-20949]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[20879-20919]:VariableDeclarationStatement[20879-20919]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[20926-20943]:ReturnStatement[20926-20943]"
    }, {
      "left" : "if (Double.isNaN(result))",
      "right" : "if (Double.isNaN(result))",
      "info" : "IfStatement[20955-21269]:IfStatement[20955-21269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20981-21036]:Block[20981-21036]"
    }, {
      "left" : "return Node.newString(Token.NAME, \"NaN\");",
      "right" : "return Node.newString(Token.NAME, \"NaN\");",
      "info" : "ReturnStatement[20989-21030]:ReturnStatement[20989-21030]"
    }, {
      "left" : "if (result == Double.POSITIVE_INFINITY)",
      "right" : "if (result == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[21042-21269]:IfStatement[21042-21269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21082-21142]:Block[21082-21142]"
    }, {
      "left" : "return Node.newString(Token.NAME, \"Infinity\");",
      "right" : "return Node.newString(Token.NAME, \"Infinity\");",
      "info" : "ReturnStatement[21090-21136]:ReturnStatement[21090-21136]"
    }, {
      "left" : "if (result == Double.NEGATIVE_INFINITY)",
      "right" : "if (result == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[21148-21269]:IfStatement[21148-21269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21188-21269]:Block[21188-21269]"
    }, {
      "left" : "return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "right" : "return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));",
      "info" : "ReturnStatement[21196-21263]:ReturnStatement[21196-21263]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21275-21287]:ReturnStatement[21275-21287]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21755-21762]:Modifier[21755-21762]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21763-21767]:SimpleType[21763-21767]"
    }, {
      "left" : "tryFoldLeftChildOp",
      "right" : "tryFoldLeftChildOp",
      "info" : "SimpleName[21768-21786]:SimpleName[21768-21786]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21787-21793]:SingleVariableDeclaration[21787-21793]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[21795-21804]:SingleVariableDeclaration[21795-21804]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[21806-21816]:SingleVariableDeclaration[21806-21816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21818-23191]:Block[21818-23191]"
    }, {
      "left" : "int opType = n.getType();",
      "right" : "int opType = n.getType();",
      "info" : "VariableDeclarationStatement[21824-21849]:VariableDeclarationStatement[21824-21849]"
    }, {
      "left" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.getType() == Token.ADD);",
      "right" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.getType() == Token.ADD);",
      "info" : "ExpressionStatement[21854-21992]:ExpressionStatement[21854-21992]"
    }, {
      "left" : "Preconditions.checkState(\n        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));",
      "right" : "Preconditions.checkState(\n        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));",
      "info" : "ExpressionStatement[21998-22086]:ExpressionStatement[21998-22086]"
    }, {
      "left" : "Double rightValObj = NodeUtil.getNumberValue(right);",
      "right" : "Double rightValObj = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[22220-22272]:VariableDeclarationStatement[22220-22272]"
    }, {
      "left" : "if (rightValObj != null && left.getType() == opType)",
      "right" : "if (rightValObj != null && left.getType() == opType)",
      "info" : "IfStatement[22277-23172]:IfStatement[22277-23172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22330-23172]:Block[22330-23172]"
    }, {
      "left" : "Preconditions.checkState(left.getChildCount() == 2);",
      "right" : "Preconditions.checkState(left.getChildCount() == 2);",
      "info" : "ExpressionStatement[22338-22390]:ExpressionStatement[22338-22390]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[22398-22429]:VariableDeclarationStatement[22398-22429]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[22436-22459]:VariableDeclarationStatement[22436-22459]"
    }, {
      "left" : "Node valueToCombine = ll;",
      "right" : "Node valueToCombine = ll;",
      "info" : "VariableDeclarationStatement[22467-22492]:VariableDeclarationStatement[22467-22492]"
    }, {
      "left" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
      "right" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
      "info" : "VariableDeclarationStatement[22499-22569]:VariableDeclarationStatement[22499-22569]"
    }, {
      "left" : "if (replacement == null)",
      "right" : "if (replacement == null)",
      "info" : "IfStatement[22576-22713]:IfStatement[22576-22713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22601-22713]:Block[22601-22713]"
    }, {
      "left" : "valueToCombine = lr;",
      "right" : "valueToCombine = lr;",
      "info" : "ExpressionStatement[22611-22631]:ExpressionStatement[22611-22631]"
    }, {
      "left" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
      "right" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
      "info" : "ExpressionStatement[22640-22705]:ExpressionStatement[22640-22705]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[22720-23166]:IfStatement[22720-23166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22745-23166]:Block[22745-23166]"
    }, {
      "left" : "left.removeChild(valueToCombine);",
      "right" : "left.removeChild(valueToCombine);",
      "info" : "ExpressionStatement[22806-22839]:ExpressionStatement[22806-22839]"
    }, {
      "left" : "n.replaceChild(left, left.removeFirstChild());",
      "right" : "n.replaceChild(left, left.removeFirstChild());",
      "info" : "ExpressionStatement[22905-22951]:ExpressionStatement[22905-22951]"
    }, {
      "left" : "replacement.copyInformationFromForTree(right);",
      "right" : "replacement.copyInformationFromForTree(right);",
      "info" : "ExpressionStatement[23040-23086]:ExpressionStatement[23040-23086]"
    }, {
      "left" : "n.replaceChild(right, replacement);",
      "right" : "n.replaceChild(right, replacement);",
      "info" : "ExpressionStatement[23095-23130]:ExpressionStatement[23095-23130]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23139-23158]:ExpressionStatement[23139-23158]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23178-23187]:ReturnStatement[23178-23187]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23195-23202]:Modifier[23195-23202]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23203-23207]:SimpleType[23203-23207]"
    }, {
      "left" : "tryFoldAdd",
      "right" : "tryFoldAdd",
      "info" : "SimpleName[23208-23218]:SimpleName[23208-23218]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[23219-23228]:SingleVariableDeclaration[23219-23228]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[23230-23239]:SingleVariableDeclaration[23230-23239]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[23241-23251]:SingleVariableDeclaration[23241-23251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23253-23869]:Block[23253-23869]"
    }, {
      "left" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "right" : "Preconditions.checkArgument(node.getType() == Token.ADD);",
      "info" : "ExpressionStatement[23259-23316]:ExpressionStatement[23259-23316]"
    }, {
      "left" : "if (NodeUtil.mayBeString(node, true))",
      "right" : "if (NodeUtil.mayBeString(node, true))",
      "info" : "IfStatement[23322-23865]:IfStatement[23322-23865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23360-23653]:Block[23360-23653]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
      "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
      "info" : "IfStatement[23368-23647]:IfStatement[23368-23647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23461-23549]:Block[23461-23549]"
    }, {
      "left" : "return tryFoldAddConstantString(node, left, right);",
      "right" : "return tryFoldAddConstantString(node, left, right);",
      "info" : "ReturnStatement[23490-23541]:ReturnStatement[23490-23541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23555-23647]:Block[23555-23647]"
    }, {
      "left" : "return tryFoldChildAddString(node, left, right);",
      "right" : "return tryFoldChildAddString(node, left, right);",
      "info" : "ReturnStatement[23591-23639]:ReturnStatement[23591-23639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23659-23865]:Block[23659-23865]"
    }, {
      "left" : "Node result = tryFoldArithmeticOp(node, left, right);",
      "right" : "Node result = tryFoldArithmeticOp(node, left, right);",
      "info" : "VariableDeclarationStatement[23695-23748]:VariableDeclarationStatement[23695-23748]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[23755-23807]:IfStatement[23755-23807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23775-23807]:Block[23775-23807]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[23785-23799]:ReturnStatement[23785-23799]"
    }, {
      "left" : "return tryFoldLeftChildOp(node, left, right);",
      "right" : "return tryFoldLeftChildOp(node, left, right);",
      "info" : "ReturnStatement[23814-23859]:ReturnStatement[23814-23859]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23919-23926]:Modifier[23919-23926]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23927-23931]:SimpleType[23927-23931]"
    }, {
      "left" : "tryFoldShift",
      "right" : "tryFoldShift",
      "info" : "SimpleName[23932-23944]:SimpleName[23932-23944]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23945-23951]:SingleVariableDeclaration[23945-23951]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[23953-23962]:SingleVariableDeclaration[23953-23962]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[23964-23974]:SingleVariableDeclaration[23964-23974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23976-25846]:Block[23976-25846]"
    }, {
      "left" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "right" : "if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER)",
      "info" : "IfStatement[23982-25827]:IfStatement[23982-25827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24061-25827]:Block[24061-25827]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[24070-24084]:VariableDeclarationStatement[24070-24084]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[24091-24122]:VariableDeclarationStatement[24091-24122]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[24129-24161]:VariableDeclarationStatement[24129-24161]"
    }, {
      "left" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "right" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "info" : "IfStatement[24314-24455]:IfStatement[24314-24455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24377-24455]:Block[24377-24455]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[24387-24429]:ExpressionStatement[24387-24429]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24438-24447]:ReturnStatement[24438-24447]"
    }, {
      "left" : "if (!(rval >= 0 && rval < 32))",
      "right" : "if (!(rval >= 0 && rval < 32))",
      "info" : "IfStatement[24586-24694]:IfStatement[24586-24694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24617-24694]:Block[24617-24694]"
    }, {
      "left" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "right" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "info" : "ExpressionStatement[24627-24668]:ExpressionStatement[24627-24668]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24677-24686]:ReturnStatement[24677-24686]"
    }, {
      "left" : "int lvalInt = (int) lval;",
      "right" : "int lvalInt = (int) lval;",
      "info" : "VariableDeclarationStatement[24739-24764]:VariableDeclarationStatement[24739-24764]"
    }, {
      "left" : "if (lvalInt != lval)",
      "right" : "if (lvalInt != lval)",
      "info" : "IfStatement[24771-24868]:IfStatement[24771-24868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24792-24868]:Block[24792-24868]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[24802-24842]:ExpressionStatement[24802-24842]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24851-24860]:ReturnStatement[24851-24860]"
    }, {
      "left" : "int rvalInt = (int) rval;",
      "right" : "int rvalInt = (int) rval;",
      "info" : "VariableDeclarationStatement[24876-24901]:VariableDeclarationStatement[24876-24901]"
    }, {
      "left" : "if (rvalInt != rval)",
      "right" : "if (rvalInt != rval)",
      "info" : "IfStatement[24908-25006]:IfStatement[24908-25006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24929-25006]:Block[24929-25006]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "info" : "ExpressionStatement[24939-24980]:ExpressionStatement[24939-24980]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24989-24998]:ReturnStatement[24989-24998]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
      "right" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }",
      "info" : "SwitchStatement[25014-25674]:SwitchStatement[25014-25674]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[25045-25060]:SwitchCase[25045-25060]"
    }, {
      "left" : "result = lvalInt << rvalInt;",
      "right" : "result = lvalInt << rvalInt;",
      "info" : "ExpressionStatement[25071-25099]:ExpressionStatement[25071-25099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25110-25116]:BreakStatement[25110-25116]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[25125-25140]:SwitchCase[25125-25140]"
    }, {
      "left" : "result = lvalInt >> rvalInt;",
      "right" : "result = lvalInt >> rvalInt;",
      "info" : "ExpressionStatement[25151-25179]:ExpressionStatement[25151-25179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25190-25196]:BreakStatement[25190-25196]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[25205-25221]:SwitchCase[25205-25221]"
    }, {
      "left" : "long lvalLong = lvalInt & 0xffffffffL;",
      "right" : "long lvalLong = lvalInt & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[25443-25481]:VariableDeclarationStatement[25443-25481]"
    }, {
      "left" : "result = lvalLong >>> rvalInt;",
      "right" : "result = lvalLong >>> rvalInt;",
      "info" : "ExpressionStatement[25492-25522]:ExpressionStatement[25492-25522]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25533-25539]:BreakStatement[25533-25539]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25548-25556]:SwitchCase[25548-25556]"
    }, {
      "left" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
      "right" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));",
      "info" : "ThrowStatement[25567-25666]:ThrowStatement[25567-25666]"
    }, {
      "left" : "Node newNumber = Node.newNumber(result);",
      "right" : "Node newNumber = Node.newNumber(result);",
      "info" : "VariableDeclarationStatement[25682-25722]:VariableDeclarationStatement[25682-25722]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[25729-25770]:ExpressionStatement[25729-25770]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[25777-25796]:ExpressionStatement[25777-25796]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[25804-25821]:ReturnStatement[25804-25821]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25833-25842]:ReturnStatement[25833-25842]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[25904-25936]:SingleMemberAnnotation[25904-25936]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25939-25946]:Modifier[25939-25946]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25947-25951]:SimpleType[25947-25951]"
    }, {
      "left" : "tryFoldComparison",
      "right" : "tryFoldComparison",
      "info" : "SimpleName[25952-25969]:SimpleName[25952-25969]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25970-25976]:SingleVariableDeclaration[25970-25976]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[25978-25987]:SingleVariableDeclaration[25978-25987]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[25989-25999]:SingleVariableDeclaration[25989-25999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26001-31009]:Block[26001-31009]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false))",
      "right" : "if (!NodeUtil.isLiteralValue(left, false) ||\n        !NodeUtil.isLiteralValue(right, false))",
      "info" : "IfStatement[26007-26257]:IfStatement[26007-26257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26100-26257]:Block[26100-26257]"
    }, {
      "left" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "right" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "info" : "IfStatement[26168-26251]:IfStatement[26168-26251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26224-26251]:Block[26224-26251]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26234-26243]:ReturnStatement[26234-26243]"
    }, {
      "left" : "int op = n.getType();",
      "right" : "int op = n.getType();",
      "info" : "VariableDeclarationStatement[26263-26284]:VariableDeclarationStatement[26263-26284]"
    }, {
      "left" : "boolean result;",
      "right" : "boolean result;",
      "info" : "VariableDeclarationStatement[26289-26304]:VariableDeclarationStatement[26289-26304]"
    }, {
      "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, false);",
      "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, false);",
      "info" : "VariableDeclarationStatement[26386-26447]:VariableDeclarationStatement[26386-26447]"
    }, {
      "left" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));",
      "right" : "boolean undefinedRight = ((Token.NAME == right.getType()\n          && right.getString().equals(\"undefined\"))\n          || (Token.VOID == right.getType()\n              && NodeUtil.isLiteralValue(right.getFirstChild(), false)));",
      "info" : "VariableDeclarationStatement[26452-26678]:VariableDeclarationStatement[26452-26678]"
    }, {
      "left" : "int lhType = getNormalizedNodeType(left);",
      "right" : "int lhType = getNormalizedNodeType(left);",
      "info" : "VariableDeclarationStatement[26683-26724]:VariableDeclarationStatement[26683-26724]"
    }, {
      "left" : "int rhType = getNormalizedNodeType(right);",
      "right" : "int rhType = getNormalizedNodeType(right);",
      "info" : "VariableDeclarationStatement[26729-26771]:VariableDeclarationStatement[26729-26771]"
    }, {
      "left" : "switch (lhType) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "right" : "switch (lhType) {\n      case Token.VOID:\n        if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (right.getType() != Token.THIS) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "info" : "SwitchStatement[26776-30851]:SwitchStatement[26776-30851]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[26800-26816]:SwitchCase[26800-26816]"
    }, {
      "left" : "if (!NodeUtil.isLiteralValue(left.getFirstChild(), false))",
      "right" : "if (!NodeUtil.isLiteralValue(left.getFirstChild(), false))",
      "info" : "IfStatement[26825-27038]:IfStatement[26825-27038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26884-26915]:Block[26884-26915]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26896-26905]:ReturnStatement[26896-26905]"
    }, {
      "left" : "if (!rightLiteral)",
      "right" : "if (!rightLiteral)",
      "info" : "IfStatement[26921-27038]:IfStatement[26921-27038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26940-26971]:Block[26940-26971]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26952-26961]:ReturnStatement[26952-26961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26977-27038]:Block[26977-27038]"
    }, {
      "left" : "result = compareToUndefined(right, op);",
      "right" : "result = compareToUndefined(right, op);",
      "info" : "ExpressionStatement[26989-27028]:ExpressionStatement[26989-27028]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27047-27053]:BreakStatement[27047-27053]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[27061-27077]:SwitchCase[27061-27077]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[27084-27100]:SwitchCase[27084-27100]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[27107-27124]:SwitchCase[27107-27124]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[27133-27230]:IfStatement[27133-27230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27153-27230]:Block[27153-27230]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[27165-27203]:ExpressionStatement[27165-27203]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27214-27220]:BreakStatement[27214-27220]"
    }, {
      "left" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
      "right" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
      "info" : "IfStatement[27239-27369]:IfStatement[27239-27369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27338-27369]:Block[27338-27369]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27350-27359]:ReturnStatement[27350-27359]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[27378-28027]:SwitchStatement[27378-28027]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[27402-27418]:SwitchCase[27402-27418]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[27429-27443]:SwitchCase[27429-27443]"
    }, {
      "left" : "result = lhType == rhType;",
      "right" : "result = lhType == rhType;",
      "info" : "ExpressionStatement[27456-27482]:ExpressionStatement[27456-27482]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27495-27501]:BreakStatement[27495-27501]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[27513-27529]:SwitchCase[27513-27529]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[27540-27554]:SwitchCase[27540-27554]"
    }, {
      "left" : "result = lhType != rhType;",
      "right" : "result = lhType != rhType;",
      "info" : "ExpressionStatement[27567-27593]:ExpressionStatement[27567-27593]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27606-27612]:BreakStatement[27606-27612]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[27624-27638]:SwitchCase[27624-27638]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[27649-27663]:SwitchCase[27649-27663]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[27674-27688]:SwitchCase[27674-27688]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[27699-27713]:SwitchCase[27699-27713]"
    }, {
      "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "info" : "VariableDeclarationStatement[27726-27784]:VariableDeclarationStatement[27726-27784]"
    }, {
      "left" : "if (compareResult != null)",
      "right" : "if (compareResult != null)",
      "info" : "IfStatement[27797-27922]:IfStatement[27797-27922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27824-27877]:Block[27824-27877]"
    }, {
      "left" : "result = compareResult;",
      "right" : "result = compareResult;",
      "info" : "ExpressionStatement[27840-27863]:ExpressionStatement[27840-27863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27883-27922]:Block[27883-27922]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27899-27908]:ReturnStatement[27899-27908]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27935-27941]:BreakStatement[27935-27941]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27953-27961]:SwitchCase[27953-27961]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27974-27983]:ReturnStatement[27974-27983]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28036-28042]:BreakStatement[28036-28042]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[28050-28066]:SwitchCase[28050-28066]"
    }, {
      "left" : "if (right.getType() != Token.THIS)",
      "right" : "if (right.getType() != Token.THIS)",
      "info" : "IfStatement[28075-28141]:IfStatement[28075-28141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28110-28141]:Block[28110-28141]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28122-28131]:ReturnStatement[28122-28131]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
      "info" : "SwitchStatement[28150-28675]:SwitchStatement[28150-28675]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[28174-28190]:SwitchCase[28174-28190]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[28201-28215]:SwitchCase[28201-28215]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[28228-28242]:ExpressionStatement[28228-28242]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28255-28261]:BreakStatement[28255-28261]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[28273-28289]:SwitchCase[28273-28289]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[28300-28314]:SwitchCase[28300-28314]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[28327-28342]:ExpressionStatement[28327-28342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28355-28361]:BreakStatement[28355-28361]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28635-28643]:SwitchCase[28635-28643]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28656-28665]:ReturnStatement[28656-28665]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28684-28690]:BreakStatement[28684-28690]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[28698-28716]:SwitchCase[28698-28716]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[28725-28822]:IfStatement[28725-28822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28745-28822]:Block[28745-28822]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[28757-28795]:ExpressionStatement[28757-28795]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28806-28812]:BreakStatement[28806-28812]"
    }, {
      "left" : "if (Token.STRING != right.getType())",
      "right" : "if (Token.STRING != right.getType())",
      "info" : "IfStatement[28831-28939]:IfStatement[28831-28939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28868-28939]:Block[28868-28939]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28880-28889]:ReturnStatement[28880-28889]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = left.getString().equals(right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = !left.getString().equals(right.getString());\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[28948-29321]:SwitchStatement[28948-29321]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[28972-28988]:SwitchCase[28972-28988]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[28999-29013]:SwitchCase[28999-29013]"
    }, {
      "left" : "result = left.getString().equals(right.getString());",
      "right" : "result = left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[29026-29078]:ExpressionStatement[29026-29078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29091-29097]:BreakStatement[29091-29097]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[29109-29125]:SwitchCase[29109-29125]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[29136-29150]:SwitchCase[29136-29150]"
    }, {
      "left" : "result = !left.getString().equals(right.getString());",
      "right" : "result = !left.getString().equals(right.getString());",
      "info" : "ExpressionStatement[29163-29216]:ExpressionStatement[29163-29216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29229-29235]:BreakStatement[29229-29235]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29247-29255]:SwitchCase[29247-29255]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29268-29277]:ReturnStatement[29268-29277]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29330-29336]:BreakStatement[29330-29336]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[29344-29362]:SwitchCase[29344-29362]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[29371-29468]:IfStatement[29371-29468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29391-29468]:Block[29391-29468]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[29403-29441]:ExpressionStatement[29403-29441]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29452-29458]:BreakStatement[29452-29458]"
    }, {
      "left" : "if (Token.NUMBER != right.getType())",
      "right" : "if (Token.NUMBER != right.getType())",
      "info" : "IfStatement[29477-29585]:IfStatement[29477-29585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29514-29585]:Block[29514-29585]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29526-29535]:ReturnStatement[29526-29535]"
    }, {
      "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "info" : "VariableDeclarationStatement[29594-29652]:VariableDeclarationStatement[29594-29652]"
    }, {
      "left" : "if (compareResult != null)",
      "right" : "if (compareResult != null)",
      "info" : "IfStatement[29661-29773]:IfStatement[29661-29773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29688-29733]:Block[29688-29733]"
    }, {
      "left" : "result = compareResult;",
      "right" : "result = compareResult;",
      "info" : "ExpressionStatement[29700-29723]:ExpressionStatement[29700-29723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29739-29773]:Block[29739-29773]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29751-29763]:ReturnStatement[29751-29763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29782-29788]:BreakStatement[29782-29788]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[29796-29812]:SwitchCase[29796-29812]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[29821-29918]:IfStatement[29821-29918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29841-29918]:Block[29841-29918]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[29853-29891]:ExpressionStatement[29853-29891]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29902-29908]:BreakStatement[29902-29908]"
    }, {
      "left" : "if (rightLiteral)",
      "right" : "if (rightLiteral)",
      "info" : "IfStatement[29928-30145]:IfStatement[29928-30145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29946-30145]:Block[29946-30145]"
    }, {
      "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "info" : "VariableDeclarationStatement[29958-30021]:VariableDeclarationStatement[29958-30021]"
    }, {
      "left" : "if (undefinedLeft)",
      "right" : "if (undefinedLeft)",
      "info" : "IfStatement[30032-30135]:IfStatement[30032-30135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30051-30135]:Block[30051-30135]"
    }, {
      "left" : "result = compareToUndefined(right, op);",
      "right" : "result = compareToUndefined(right, op);",
      "info" : "ExpressionStatement[30065-30104]:ExpressionStatement[30065-30104]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30117-30123]:BreakStatement[30117-30123]"
    }, {
      "left" : "if (Token.NAME != right.getType())",
      "right" : "if (Token.NAME != right.getType())",
      "info" : "IfStatement[30155-30261]:IfStatement[30155-30261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30190-30261]:Block[30190-30261]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30202-30211]:ReturnStatement[30202-30211]"
    }, {
      "left" : "String ln = left.getString();",
      "right" : "String ln = left.getString();",
      "info" : "VariableDeclarationStatement[30270-30299]:VariableDeclarationStatement[30270-30299]"
    }, {
      "left" : "String rn = right.getString();",
      "right" : "String rn = right.getString();",
      "info" : "VariableDeclarationStatement[30308-30338]:VariableDeclarationStatement[30308-30338]"
    }, {
      "left" : "if (!ln.equals(rn))",
      "right" : "if (!ln.equals(rn))",
      "info" : "IfStatement[30347-30427]:IfStatement[30347-30427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30367-30427]:Block[30367-30427]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30379-30388]:ReturnStatement[30379-30388]"
    }, {
      "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[30437-30748]:SwitchStatement[30437-30748]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[30586-30600]:SwitchCase[30586-30600]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[30611-30625]:SwitchCase[30611-30625]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[30638-30653]:ExpressionStatement[30638-30653]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30666-30672]:BreakStatement[30666-30672]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30683-30691]:SwitchCase[30683-30691]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30704-30713]:ReturnStatement[30704-30713]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30757-30763]:BreakStatement[30757-30763]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30771-30779]:SwitchCase[30771-30779]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30836-30845]:ReturnStatement[30836-30845]"
    }, {
      "left" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "right" : "Node newNode = new Node(result ? Token.TRUE : Token.FALSE);",
      "info" : "VariableDeclarationStatement[30857-30916]:VariableDeclarationStatement[30857-30916]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[30921-30960]:ExpressionStatement[30921-30960]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[30965-30984]:ExpressionStatement[30965-30984]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[30990-31005]:ReturnStatement[30990-31005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31098-31105]:Modifier[31098-31105]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[31106-31109]:PrimitiveType[31106-31109]"
    }, {
      "left" : "getNormalizedNodeType",
      "right" : "getNormalizedNodeType",
      "info" : "SimpleName[31110-31131]:SimpleName[31110-31131]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31132-31138]:SingleVariableDeclaration[31132-31138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31140-31414]:Block[31140-31414]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[31146-31169]:VariableDeclarationStatement[31146-31169]"
    }, {
      "left" : "if (type == Token.NOT)",
      "right" : "if (type == Token.NOT)",
      "info" : "IfStatement[31174-31393]:IfStatement[31174-31393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31197-31393]:Block[31197-31393]"
    }, {
      "left" : "TernaryValue value = NodeUtil.getPureBooleanValue(n);",
      "right" : "TernaryValue value = NodeUtil.getPureBooleanValue(n);",
      "info" : "VariableDeclarationStatement[31205-31258]:VariableDeclarationStatement[31205-31258]"
    }, {
      "left" : "switch (value) {\n        case TRUE:\n          return Token.TRUE;\n        case FALSE:\n          return Token.FALSE;\n      }",
      "right" : "switch (value) {\n        case TRUE:\n          return Token.TRUE;\n        case FALSE:\n          return Token.FALSE;\n      }",
      "info" : "SwitchStatement[31265-31387]:SwitchStatement[31265-31387]"
    }, {
      "left" : "case TRUE:",
      "right" : "case TRUE:",
      "info" : "SwitchCase[31290-31300]:SwitchCase[31290-31300]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[31311-31329]:ReturnStatement[31311-31329]"
    }, {
      "left" : "case FALSE:",
      "right" : "case FALSE:",
      "info" : "SwitchCase[31338-31349]:SwitchCase[31338-31349]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[31360-31379]:ReturnStatement[31360-31379]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[31398-31410]:ReturnStatement[31398-31410]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31529-31536]:Modifier[31529-31536]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[31537-31544]:SimpleType[31537-31544]"
    }, {
      "left" : "compareAsNumbers",
      "right" : "compareAsNumbers",
      "info" : "SimpleName[31545-31561]:SimpleName[31545-31561]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[31562-31568]:SingleVariableDeclaration[31562-31568]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[31570-31579]:SingleVariableDeclaration[31570-31579]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[31581-31591]:SingleVariableDeclaration[31581-31591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31593-32586]:Block[31593-32586]"
    }, {
      "left" : "Double leftValue = NodeUtil.getNumberValue(left);",
      "right" : "Double leftValue = NodeUtil.getNumberValue(left);",
      "info" : "VariableDeclarationStatement[31599-31648]:VariableDeclarationStatement[31599-31648]"
    }, {
      "left" : "if (leftValue == null)",
      "right" : "if (leftValue == null)",
      "info" : "IfStatement[31653-31702]:IfStatement[31653-31702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31676-31702]:Block[31676-31702]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31684-31696]:ReturnStatement[31684-31696]"
    }, {
      "left" : "Double rightValue = NodeUtil.getNumberValue(right);",
      "right" : "Double rightValue = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[31707-31758]:VariableDeclarationStatement[31707-31758]"
    }, {
      "left" : "if (rightValue == null)",
      "right" : "if (rightValue == null)",
      "info" : "IfStatement[31763-31813]:IfStatement[31763-31813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31787-31813]:Block[31787-31813]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31795-31807]:ReturnStatement[31795-31807]"
    }, {
      "left" : "double lv = leftValue;",
      "right" : "double lv = leftValue;",
      "info" : "VariableDeclarationStatement[31819-31841]:VariableDeclarationStatement[31819-31841]"
    }, {
      "left" : "double rv = rightValue;",
      "right" : "double rv = rightValue;",
      "info" : "VariableDeclarationStatement[31846-31869]:VariableDeclarationStatement[31846-31869]"
    }, {
      "left" : "Boolean result;",
      "right" : "Boolean result;",
      "info" : "VariableDeclarationStatement[31875-31890]:VariableDeclarationStatement[31875-31890]"
    }, {
      "left" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
      "right" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
      "info" : "SwitchStatement[31895-32563]:SwitchStatement[31895-32563]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[31915-31931]:SwitchCase[31915-31931]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[31938-31952]:SwitchCase[31938-31952]"
    }, {
      "left" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "right" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "info" : "ExpressionStatement[31961-32066]:ExpressionStatement[31961-32066]"
    }, {
      "left" : "result = lv == rv;",
      "right" : "result = lv == rv;",
      "info" : "ExpressionStatement[32075-32093]:ExpressionStatement[32075-32093]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32102-32108]:BreakStatement[32102-32108]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[32115-32131]:SwitchCase[32115-32131]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[32138-32152]:SwitchCase[32138-32152]"
    }, {
      "left" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "right" : "Preconditions.checkState(\n            left.getType() == Token.NUMBER && right.getType() == Token.NUMBER);",
      "info" : "ExpressionStatement[32161-32266]:ExpressionStatement[32161-32266]"
    }, {
      "left" : "result = lv != rv;",
      "right" : "result = lv != rv;",
      "info" : "ExpressionStatement[32275-32293]:ExpressionStatement[32275-32293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32302-32308]:BreakStatement[32302-32308]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[32315-32329]:SwitchCase[32315-32329]"
    }, {
      "left" : "result = lv <= rv;",
      "right" : "result = lv <= rv;",
      "info" : "ExpressionStatement[32330-32348]:ExpressionStatement[32330-32348]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32349-32355]:BreakStatement[32349-32355]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[32362-32376]:SwitchCase[32362-32376]"
    }, {
      "left" : "result = lv <  rv;",
      "right" : "result = lv <  rv;",
      "info" : "ExpressionStatement[32377-32395]:ExpressionStatement[32377-32395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32396-32402]:BreakStatement[32396-32402]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[32409-32423]:SwitchCase[32409-32423]"
    }, {
      "left" : "result = lv >= rv;",
      "right" : "result = lv >= rv;",
      "info" : "ExpressionStatement[32424-32442]:ExpressionStatement[32424-32442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32443-32449]:BreakStatement[32443-32449]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[32456-32470]:SwitchCase[32456-32470]"
    }, {
      "left" : "result = lv >  rv;",
      "right" : "result = lv >  rv;",
      "info" : "ExpressionStatement[32471-32489]:ExpressionStatement[32471-32489]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32490-32496]:BreakStatement[32490-32496]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32503-32511]:SwitchCase[32503-32511]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32520-32532]:ReturnStatement[32520-32532]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32568-32582]:ReturnStatement[32568-32582]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32755-32762]:Modifier[32755-32762]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32763-32770]:PrimitiveType[32763-32770]"
    }, {
      "left" : "compareToUndefined",
      "right" : "compareToUndefined",
      "info" : "SimpleName[32771-32789]:SimpleName[32771-32789]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[32790-32800]:SingleVariableDeclaration[32790-32800]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[32802-32808]:SingleVariableDeclaration[32802-32808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32810-33623]:Block[32810-33623]"
    }, {
      "left" : "boolean valueUndefined = ((Token.NAME == value.getType()\n        && value.getString().equals(\"undefined\"))\n        || (Token.VOID == value.getType()\n            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));",
      "right" : "boolean valueUndefined = ((Token.NAME == value.getType()\n        && value.getString().equals(\"undefined\"))\n        || (Token.VOID == value.getType()\n            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));",
      "info" : "VariableDeclarationStatement[32816-33036]:VariableDeclarationStatement[32816-33036]"
    }, {
      "left" : "boolean valueNull = (Token.NULL == value.getType());",
      "right" : "boolean valueNull = (Token.NULL == value.getType());",
      "info" : "VariableDeclarationStatement[33041-33093]:VariableDeclarationStatement[33041-33093]"
    }, {
      "left" : "boolean equivalent = valueUndefined || valueNull;",
      "right" : "boolean equivalent = valueUndefined || valueNull;",
      "info" : "VariableDeclarationStatement[33098-33147]:VariableDeclarationStatement[33098-33147]"
    }, {
      "left" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "right" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "info" : "SwitchStatement[33152-33619]:SwitchStatement[33152-33619]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[33172-33186]:SwitchCase[33172-33186]"
    }, {
      "left" : "return equivalent;",
      "right" : "return equivalent;",
      "info" : "ReturnStatement[33260-33278]:ReturnStatement[33260-33278]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[33285-33299]:SwitchCase[33285-33299]"
    }, {
      "left" : "return !equivalent;",
      "right" : "return !equivalent;",
      "info" : "ReturnStatement[33308-33327]:ReturnStatement[33308-33327]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[33334-33350]:SwitchCase[33334-33350]"
    }, {
      "left" : "return valueUndefined;",
      "right" : "return valueUndefined;",
      "info" : "ReturnStatement[33359-33381]:ReturnStatement[33359-33381]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[33388-33404]:SwitchCase[33388-33404]"
    }, {
      "left" : "return !valueUndefined;",
      "right" : "return !valueUndefined;",
      "info" : "ReturnStatement[33413-33436]:ReturnStatement[33413-33436]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[33443-33457]:SwitchCase[33443-33457]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[33464-33478]:SwitchCase[33464-33478]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[33485-33499]:SwitchCase[33485-33499]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[33506-33520]:SwitchCase[33506-33520]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33529-33542]:ReturnStatement[33529-33542]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33549-33557]:SwitchCase[33549-33557]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected.\");",
      "right" : "throw new IllegalStateException(\"unexpected.\");",
      "info" : "ThrowStatement[33566-33613]:ThrowStatement[33566-33613]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33743-33750]:Modifier[33743-33750]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33751-33755]:SimpleType[33751-33755]"
    }, {
      "left" : "tryFoldCtorCall",
      "right" : "tryFoldCtorCall",
      "info" : "SimpleName[33756-33771]:SimpleName[33756-33771]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33772-33778]:SingleVariableDeclaration[33772-33778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33780-34008]:Block[33780-34008]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[33786-33840]:ExpressionStatement[33786-33840]"
    }, {
      "left" : "if (inForcedStringContext(n))",
      "right" : "if (inForcedStringContext(n))",
      "info" : "IfStatement[33907-33990]:IfStatement[33907-33990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33937-33990]:Block[33937-33990]"
    }, {
      "left" : "return tryFoldInForcedStringContext(n);",
      "right" : "return tryFoldInForcedStringContext(n);",
      "info" : "ReturnStatement[33945-33984]:ReturnStatement[33945-33984]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[33995-34004]:ReturnStatement[33995-34004]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34076-34083]:Modifier[34076-34083]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34084-34091]:PrimitiveType[34084-34091]"
    }, {
      "left" : "inForcedStringContext",
      "right" : "inForcedStringContext",
      "info" : "SimpleName[34092-34113]:SimpleName[34092-34113]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34114-34120]:SingleVariableDeclaration[34114-34120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34122-34225]:Block[34122-34225]"
    }, {
      "left" : "return n.getParent().getType() == Token.GETELEM &&\n        n.getParent().getLastChild() == n;",
      "right" : "return n.getParent().getType() == Token.GETELEM &&\n        n.getParent().getLastChild() == n;",
      "info" : "ReturnStatement[34128-34221]:ReturnStatement[34128-34221]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34229-34236]:Modifier[34229-34236]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34237-34241]:SimpleType[34237-34241]"
    }, {
      "left" : "tryFoldInForcedStringContext",
      "right" : "tryFoldInForcedStringContext",
      "info" : "SimpleName[34242-34270]:SimpleName[34242-34270]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34271-34277]:SingleVariableDeclaration[34271-34277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34279-35143]:Block[34279-35143]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[34333-34387]:ExpressionStatement[34333-34387]"
    }, {
      "left" : "Node objectType = n.getFirstChild();",
      "right" : "Node objectType = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[34393-34429]:VariableDeclarationStatement[34393-34429]"
    }, {
      "left" : "if (objectType.getType() != Token.NAME)",
      "right" : "if (objectType.getType() != Token.NAME)",
      "info" : "IfStatement[34434-34497]:IfStatement[34434-34497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34474-34497]:Block[34474-34497]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34482-34491]:ReturnStatement[34482-34491]"
    }, {
      "left" : "if (objectType.getString().equals(\"String\"))",
      "right" : "if (objectType.getString().equals(\"String\"))",
      "info" : "IfStatement[34503-35125]:IfStatement[34503-35125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34548-35125]:Block[34548-35125]"
    }, {
      "left" : "Node value = objectType.getNext();",
      "right" : "Node value = objectType.getNext();",
      "info" : "VariableDeclarationStatement[34556-34590]:VariableDeclarationStatement[34556-34590]"
    }, {
      "left" : "String stringValue = null;",
      "right" : "String stringValue = null;",
      "info" : "VariableDeclarationStatement[34597-34623]:VariableDeclarationStatement[34597-34623]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[34630-34833]:IfStatement[34630-34833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34649-34684]:Block[34649-34684]"
    }, {
      "left" : "stringValue = \"\";",
      "right" : "stringValue = \"\";",
      "info" : "ExpressionStatement[34659-34676]:ExpressionStatement[34659-34676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34690-34833]:Block[34690-34833]"
    }, {
      "left" : "if (!NodeUtil.isImmutableValue(value))",
      "right" : "if (!NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[34700-34770]:IfStatement[34700-34770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34739-34770]:Block[34739-34770]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34751-34760]:ReturnStatement[34751-34760]"
    }, {
      "left" : "stringValue = NodeUtil.getStringValue(value);",
      "right" : "stringValue = NodeUtil.getStringValue(value);",
      "info" : "ExpressionStatement[34780-34825]:ExpressionStatement[34780-34825]"
    }, {
      "left" : "if (stringValue == null)",
      "right" : "if (stringValue == null)",
      "info" : "IfStatement[34841-34893]:IfStatement[34841-34893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34866-34893]:Block[34866-34893]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[34876-34885]:ReturnStatement[34876-34885]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[34901-34929]:VariableDeclarationStatement[34901-34929]"
    }, {
      "left" : "Node newString = Node.newString(stringValue);",
      "right" : "Node newString = Node.newString(stringValue);",
      "info" : "VariableDeclarationStatement[34936-34981]:VariableDeclarationStatement[34936-34981]"
    }, {
      "left" : "parent.replaceChild(n, newString);",
      "right" : "parent.replaceChild(n, newString);",
      "info" : "ExpressionStatement[34989-35023]:ExpressionStatement[34989-35023]"
    }, {
      "left" : "newString.copyInformationFrom(parent);",
      "right" : "newString.copyInformationFrom(parent);",
      "info" : "ExpressionStatement[35030-35068]:ExpressionStatement[35030-35068]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[35075-35094]:ExpressionStatement[35075-35094]"
    }, {
      "left" : "return newString;",
      "right" : "return newString;",
      "info" : "ReturnStatement[35102-35119]:ReturnStatement[35102-35119]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[35130-35139]:ReturnStatement[35130-35139]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35210-35217]:Modifier[35210-35217]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35218-35222]:SimpleType[35218-35222]"
    }, {
      "left" : "tryFoldGetElem",
      "right" : "tryFoldGetElem",
      "info" : "SimpleName[35223-35237]:SimpleName[35223-35237]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35238-35244]:SingleVariableDeclaration[35238-35244]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[35246-35255]:SingleVariableDeclaration[35246-35255]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[35257-35267]:SingleVariableDeclaration[35257-35267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35269-35557]:Block[35269-35557]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETELEM);",
      "info" : "ExpressionStatement[35275-35333]:ExpressionStatement[35275-35333]"
    }, {
      "left" : "if (left.getType() == Token.OBJECTLIT)",
      "right" : "if (left.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[35339-35439]:IfStatement[35339-35439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35378-35439]:Block[35378-35439]"
    }, {
      "left" : "return tryFoldObjectPropAccess(n, left, right);",
      "right" : "return tryFoldObjectPropAccess(n, left, right);",
      "info" : "ReturnStatement[35386-35433]:ReturnStatement[35386-35433]"
    }, {
      "left" : "if (left.getType() == Token.ARRAYLIT)",
      "right" : "if (left.getType() == Token.ARRAYLIT)",
      "info" : "IfStatement[35445-35539]:IfStatement[35445-35539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35483-35539]:Block[35483-35539]"
    }, {
      "left" : "return tryFoldArrayAccess(n, left, right);",
      "right" : "return tryFoldArrayAccess(n, left, right);",
      "info" : "ReturnStatement[35491-35533]:ReturnStatement[35491-35533]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[35544-35553]:ReturnStatement[35544-35553]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35652-35659]:Modifier[35652-35659]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35660-35664]:SimpleType[35660-35664]"
    }, {
      "left" : "tryFoldGetProp",
      "right" : "tryFoldGetProp",
      "info" : "SimpleName[35665-35679]:SimpleName[35665-35679]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35680-35686]:SingleVariableDeclaration[35680-35686]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[35688-35697]:SingleVariableDeclaration[35688-35697]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[35699-35709]:SingleVariableDeclaration[35699-35709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35711-36688]:Block[35711-36688]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.GETPROP);",
      "info" : "ExpressionStatement[35717-35775]:ExpressionStatement[35717-35775]"
    }, {
      "left" : "if (left.getType() == Token.OBJECTLIT)",
      "right" : "if (left.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[35781-35881]:IfStatement[35781-35881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35820-35881]:Block[35820-35881]"
    }, {
      "left" : "return tryFoldObjectPropAccess(n, left, right);",
      "right" : "return tryFoldObjectPropAccess(n, left, right);",
      "info" : "ReturnStatement[35828-35875]:ReturnStatement[35828-35875]"
    }, {
      "left" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "right" : "if (right.getType() == Token.STRING &&\n        right.getString().equals(\"length\"))",
      "info" : "IfStatement[35887-36669]:IfStatement[35887-36669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35970-36669]:Block[35970-36669]"
    }, {
      "left" : "int knownLength = -1;",
      "right" : "int knownLength = -1;",
      "info" : "VariableDeclarationStatement[35978-35999]:VariableDeclarationStatement[35978-35999]"
    }, {
      "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "info" : "SwitchStatement[36006-36457]:SwitchStatement[36006-36457]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[36040-36060]:SwitchCase[36040-36060]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[36071-36209]:IfStatement[36071-36209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36101-36209]:Block[36101-36209]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[36188-36197]:ReturnStatement[36188-36197]"
    }, {
      "left" : "knownLength = left.getChildCount();",
      "right" : "knownLength = left.getChildCount();",
      "info" : "ExpressionStatement[36220-36255]:ExpressionStatement[36220-36255]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36266-36272]:BreakStatement[36266-36272]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[36281-36299]:SwitchCase[36281-36299]"
    }, {
      "left" : "knownLength = left.getString().length();",
      "right" : "knownLength = left.getString().length();",
      "info" : "ExpressionStatement[36310-36350]:ExpressionStatement[36310-36350]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36361-36367]:BreakStatement[36361-36367]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36376-36384]:SwitchCase[36376-36384]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[36440-36449]:ReturnStatement[36440-36449]"
    }, {
      "left" : "Preconditions.checkState(knownLength != -1);",
      "right" : "Preconditions.checkState(knownLength != -1);",
      "info" : "ExpressionStatement[36465-36509]:ExpressionStatement[36465-36509]"
    }, {
      "left" : "Node lengthNode = Node.newNumber(knownLength);",
      "right" : "Node lengthNode = Node.newNumber(knownLength);",
      "info" : "VariableDeclarationStatement[36516-36562]:VariableDeclarationStatement[36516-36562]"
    }, {
      "left" : "n.getParent().replaceChild(n, lengthNode);",
      "right" : "n.getParent().replaceChild(n, lengthNode);",
      "info" : "ExpressionStatement[36569-36611]:ExpressionStatement[36569-36611]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[36618-36637]:ExpressionStatement[36618-36637]"
    }, {
      "left" : "return lengthNode;",
      "right" : "return lengthNode;",
      "info" : "ReturnStatement[36645-36663]:ReturnStatement[36645-36663]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[36675-36684]:ReturnStatement[36675-36684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36692-36699]:Modifier[36692-36699]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36700-36707]:PrimitiveType[36700-36707]"
    }, {
      "left" : "isAssignmentTarget",
      "right" : "isAssignmentTarget",
      "info" : "SimpleName[36708-36726]:SimpleName[36708-36726]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36727-36733]:SingleVariableDeclaration[36727-36733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36735-37150]:Block[36735-37150]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[36741-36769]:VariableDeclarationStatement[36741-36769]"
    }, {
      "left" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.DEC)",
      "right" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.getType() == Token.INC\n        || parent.getType() == Token.DEC)",
      "info" : "IfStatement[36774-37128]:IfStatement[36774-37128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36926-37128]:Block[36926-37128]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37110-37122]:ReturnStatement[37110-37122]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37133-37146]:ReturnStatement[37133-37146]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37154-37161]:Modifier[37154-37161]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[37162-37166]:SimpleType[37162-37166]"
    }, {
      "left" : "tryFoldArrayAccess",
      "right" : "tryFoldArrayAccess",
      "info" : "SimpleName[37167-37185]:SimpleName[37167-37185]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37186-37192]:SingleVariableDeclaration[37186-37192]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[37194-37203]:SingleVariableDeclaration[37194-37203]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[37205-37215]:SingleVariableDeclaration[37205-37215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37217-38360]:Block[37217-38415]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[37223-37251]:VariableDeclarationStatement[37223-37251]"
    }, {
      "left" : "if (right.getType() != Token.NUMBER)",
      "right" : "if (right.getType() != Token.NUMBER)",
      "info" : "IfStatement[37408-37597]:IfStatement[37463-37652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37445-37597]:Block[37500-37652]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37582-37591]:ReturnStatement[37637-37646]"
    }, {
      "left" : "double index = right.getDouble();",
      "right" : "double index = right.getDouble();",
      "info" : "VariableDeclarationStatement[37603-37636]:VariableDeclarationStatement[37658-37691]"
    }, {
      "left" : "int intIndex = (int) index;",
      "right" : "int intIndex = (int) index;",
      "info" : "VariableDeclarationStatement[37641-37668]:VariableDeclarationStatement[37696-37723]"
    }, {
      "left" : "if (intIndex != index)",
      "right" : "if (intIndex != index)",
      "info" : "IfStatement[37673-37768]:IfStatement[37728-37823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37696-37768]:Block[37751-37823]"
    }, {
      "left" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "right" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "info" : "ExpressionStatement[37704-37746]:ExpressionStatement[37759-37801]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37753-37762]:ReturnStatement[37808-37817]"
    }, {
      "left" : "if (intIndex < 0)",
      "right" : "if (intIndex < 0)",
      "info" : "IfStatement[37774-37862]:IfStatement[37829-37917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37792-37862]:Block[37847-37917]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[37800-37840]:ExpressionStatement[37855-37895]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37847-37856]:ReturnStatement[37902-37911]"
    }, {
      "left" : "Node elem = left.getFirstChild();",
      "right" : "Node elem = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[37868-37901]:VariableDeclarationStatement[37923-37956]"
    }, {
      "left" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "right" : "for (int i = 0; elem != null && i < intIndex; i++)",
      "info" : "ForStatement[37906-37993]:ForStatement[37961-38048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37957-37993]:Block[38012-38048]"
    }, {
      "left" : "elem = elem.getNext();",
      "right" : "elem = elem.getNext();",
      "info" : "ExpressionStatement[37965-37987]:ExpressionStatement[38020-38042]"
    }, {
      "left" : "if (elem == null)",
      "right" : "if (elem == null)",
      "info" : "IfStatement[37999-38087]:IfStatement[38054-38142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38017-38087]:Block[38072-38142]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[38025-38065]:ExpressionStatement[38080-38120]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38072-38081]:ReturnStatement[38127-38136]"
    }, {
      "left" : "if (elem.getType() == Token.EMPTY)",
      "right" : "if (elem.getType() == Token.EMPTY)",
      "info" : "IfStatement[38093-38224]:IfStatement[38148-38279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38128-38181]:Block[38183-38236]"
    }, {
      "left" : "elem = NodeUtil.newUndefinedNode(elem);",
      "right" : "elem = NodeUtil.newUndefinedNode(elem);",
      "info" : "ExpressionStatement[38136-38175]:ExpressionStatement[38191-38230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38187-38224]:Block[38242-38279]"
    }, {
      "left" : "left.removeChild(elem);",
      "right" : "left.removeChild(elem);",
      "info" : "ExpressionStatement[38195-38218]:ExpressionStatement[38250-38273]"
    }, {
      "left" : "n.getParent().replaceChild(n, elem);",
      "right" : "n.getParent().replaceChild(n, elem);",
      "info" : "ExpressionStatement[38279-38315]:ExpressionStatement[38334-38370]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[38320-38339]:ExpressionStatement[38375-38394]"
    }, {
      "left" : "return elem;",
      "right" : "return elem;",
      "info" : "ReturnStatement[38344-38356]:ReturnStatement[38399-38411]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38364-38371]:Modifier[38419-38426]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[38372-38376]:SimpleType[38427-38431]"
    }, {
      "left" : "tryFoldObjectPropAccess",
      "right" : "tryFoldObjectPropAccess",
      "info" : "SimpleName[38377-38400]:SimpleName[38432-38455]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38401-38407]:SingleVariableDeclaration[38456-38462]"
    }, {
      "left" : "Node left",
      "right" : "Node left",
      "info" : "SingleVariableDeclaration[38409-38418]:SingleVariableDeclaration[38464-38473]"
    }, {
      "left" : "Node right",
      "right" : "Node right",
      "info" : "SingleVariableDeclaration[38420-38430]:SingleVariableDeclaration[38475-38485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38432-40328]:Block[38487-40383]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isGet(n));",
      "right" : "Preconditions.checkArgument(NodeUtil.isGet(n));",
      "info" : "ExpressionStatement[38438-38485]:ExpressionStatement[38493-38540]"
    }, {
      "left" : "if (left.getType() != Token.OBJECTLIT || right.getType() != Token.STRING)",
      "right" : "if (left.getType() != Token.OBJECTLIT || right.getType() != Token.STRING)",
      "info" : "IfStatement[38491-38588]:IfStatement[38546-38643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38565-38588]:Block[38620-38643]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38573-38582]:ReturnStatement[38628-38637]"
    }, {
      "left" : "if (isAssignmentTarget(n))",
      "right" : "if (isAssignmentTarget(n))",
      "info" : "IfStatement[38594-38820]:IfStatement[38649-38875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38621-38820]:Block[38676-38875]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38805-38814]:ReturnStatement[38860-38869]"
    }, {
      "left" : "Node key = null;",
      "right" : "Node key = null;",
      "info" : "VariableDeclarationStatement[38880-38896]:VariableDeclarationStatement[38935-38951]"
    }, {
      "left" : "Node value = null;",
      "right" : "Node value = null;",
      "info" : "VariableDeclarationStatement[38901-38919]:VariableDeclarationStatement[38956-38974]"
    }, {
      "left" : "for (Node c = left.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = left.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[38924-39700]:ForStatement[38979-39755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38988-39700]:Block[39043-39755]"
    }, {
      "left" : "if (c.getString().equals(right.getString()))",
      "right" : "if (c.getString().equals(right.getString()))",
      "info" : "IfStatement[38996-39694]:IfStatement[39051-39749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39041-39502]:Block[39096-39557]"
    }, {
      "left" : "switch (c.getType()) {\n          case Token.SET:\n            continue;\n          case Token.GET:\n          case Token.STRING:\n            if (value != null && mayHaveSideEffects(value)) {\n              // The previously found value had side-effects\n              return n;\n            }\n            key = c;\n            value = key.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (c.getType()) {\n          case Token.SET:\n            continue;\n          case Token.GET:\n          case Token.STRING:\n            if (value != null && mayHaveSideEffects(value)) {\n              // The previously found value had side-effects\n              return n;\n            }\n            key = c;\n            value = key.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[39051-39494]:SwitchStatement[39106-39549]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[39084-39099]:SwitchCase[39139-39154]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[39112-39121]:ContinueStatement[39167-39176]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[39132-39147]:SwitchCase[39187-39202]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[39158-39176]:SwitchCase[39213-39231]"
    }, {
      "left" : "if (value != null && mayHaveSideEffects(value))",
      "right" : "if (value != null && mayHaveSideEffects(value))",
      "info" : "IfStatement[39189-39337]:IfStatement[39244-39392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39237-39337]:Block[39292-39392]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39314-39323]:ReturnStatement[39369-39378]"
    }, {
      "left" : "key = c;",
      "right" : "key = c;",
      "info" : "ExpressionStatement[39350-39358]:ExpressionStatement[39405-39413]"
    }, {
      "left" : "value = key.getFirstChild();",
      "right" : "value = key.getFirstChild();",
      "info" : "ExpressionStatement[39371-39399]:ExpressionStatement[39426-39454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39412-39418]:BreakStatement[39467-39473]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39429-39437]:SwitchCase[39484-39492]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[39450-39484]:ThrowStatement[39505-39539]"
    }, {
      "left" : "if (mayHaveSideEffects(c.getFirstChild()))",
      "right" : "if (mayHaveSideEffects(c.getFirstChild()))",
      "info" : "IfStatement[39508-39694]:IfStatement[39563-39749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39551-39694]:Block[39606-39749]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39677-39686]:ReturnStatement[39732-39741]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[39825-39867]:IfStatement[39880-39922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39844-39867]:Block[39899-39922]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39852-39861]:ReturnStatement[39907-39916]"
    }, {
      "left" : "if (value.getType() == Token.FUNCTION && NodeUtil.referencesThis(value))",
      "right" : "if (value.getType() == Token.FUNCTION && NodeUtil.referencesThis(value))",
      "info" : "IfStatement[39873-40033]:IfStatement[39928-40088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39946-40033]:Block[40001-40088]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40018-40027]:ReturnStatement[40073-40082]"
    }, {
      "left" : "Node replacement = value.detachFromParent();",
      "right" : "Node replacement = value.detachFromParent();",
      "info" : "VariableDeclarationStatement[40039-40083]:VariableDeclarationStatement[40094-40138]"
    }, {
      "left" : "if (key.getType() == Token.GET)",
      "right" : "if (key.getType() == Token.GET)",
      "info" : "IfStatement[40088-40237]:IfStatement[40143-40292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40119-40237]:Block[40174-40292]"
    }, {
      "left" : "replacement = new Node(Token.CALL, replacement);",
      "right" : "replacement = new Node(Token.CALL, replacement);",
      "info" : "ExpressionStatement[40127-40175]:ExpressionStatement[40182-40230]"
    }, {
      "left" : "replacement.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "replacement.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[40182-40231]:ExpressionStatement[40237-40286]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[40243-40286]:ExpressionStatement[40298-40341]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[40291-40310]:ExpressionStatement[40346-40365]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40315-40324]:ReturnStatement[40370-40379]"
    } ]
  },
  "interFileMappings" : { }
}