{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
      "right" : "public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
      "info" : "FieldDeclaration[1780-1848]:FieldDeclaration[1780-1848]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1852-1892]:FieldDeclaration[1852-1892]"
    }, {
      "left" : "private final Supplier<String> safeNameIdSupplier;",
      "right" : "private final Supplier<String> safeNameIdSupplier;",
      "info" : "FieldDeclaration[1896-1946]:FieldDeclaration[1896-1946]"
    }, {
      "left" : "InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier)",
      "right" : "InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier)",
      "info" : "MethodDeclaration[1950-2133]:MethodDeclaration[1950-2133]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2137-2355]:MethodDeclaration[2137-2355]"
    }, {
      "left" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "right" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[2584-2793]:FieldDeclaration[2584-2793]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[2799-3705]:MethodDeclaration[2799-3705]"
    }, {
      "left" : "private void blacklistVarReferencesInTree(Node root, final Scope scope)",
      "right" : "private void blacklistVarReferencesInTree(Node root, final Scope scope)",
      "info" : "MethodDeclaration[3711-4317]:MethodDeclaration[3711-4317]"
    }, {
      "left" : "public void visit(Node node)",
      "right" : "public void visit(Node node)",
      "info" : "MethodDeclaration[4112-4272]:MethodDeclaration[4112-4272]"
    }, {
      "left" : "private boolean isVarInlineForbidden(Var var)",
      "right" : "private boolean isVarInlineForbidden(Var var)",
      "info" : "MethodDeclaration[4323-5173]:MethodDeclaration[4323-5173]"
    }, {
      "left" : "private boolean isVarOrAssignExprLhs(Node n)",
      "right" : "private boolean isVarOrAssignExprLhs(Node n)",
      "info" : "MethodDeclaration[9030-9275]:MethodDeclaration[9104-9349]"
    }, {
      "left" : "private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo)",
      "right" : "private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo)",
      "info" : "MethodDeclaration[9281-10845]:MethodDeclaration[9355-10919]"
    }, {
      "left" : "private void fillInitialValues(Reference init, Map<String, Node> initvals)",
      "right" : "private void fillInitialValues(Reference init, Map<String, Node> initvals)",
      "info" : "MethodDeclaration[10851-11365]:MethodDeclaration[10925-11439]"
    }, {
      "left" : "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap)",
      "right" : "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap)",
      "info" : "MethodDeclaration[11371-13819]:MethodDeclaration[11445-13893]"
    }, {
      "left" : "private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo)",
      "right" : "private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo)",
      "info" : "MethodDeclaration[13825-16857]:MethodDeclaration[13899-16931]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2048-2133]:Block[2048-2133]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2054-2079]:ExpressionStatement[2054-2079]"
    }, {
      "left" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "right" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "info" : "ExpressionStatement[2084-2129]:ExpressionStatement[2084-2129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2194-2355]:Block[2194-2355]"
    }, {
      "left" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());",
      "right" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());",
      "info" : "VariableDeclarationStatement[2200-2314]:VariableDeclarationStatement[2200-2314]"
    }, {
      "left" : "callback.process(externs, root);",
      "right" : "callback.process(externs, root);",
      "info" : "ExpressionStatement[2319-2351]:ExpressionStatement[2319-2351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2884-3705]:Block[2884-3705]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[2892-3699]:ForStatement[2892-3699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2955-3699]:Block[2955-3699]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[2965-2983]:VariableDeclarationStatement[2965-2983]"
    }, {
      "left" : "if (isVarInlineForbidden(v))",
      "right" : "if (isVarInlineForbidden(v))",
      "info" : "IfStatement[2993-3053]:IfStatement[2993-3053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3022-3053]:Block[3022-3053]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3034-3043]:ContinueStatement[3034-3043]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[3063-3129]:VariableDeclarationStatement[3063-3129]"
    }, {
      "left" : "if (isInlinableObject(referenceInfo.references))",
      "right" : "if (isInlinableObject(referenceInfo.references))",
      "info" : "IfStatement[3139-3691]:IfStatement[3139-3691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3188-3691]:Block[3188-3691]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[3342-3359]:ExpressionStatement[3342-3359]"
    }, {
      "left" : "Reference declaration = referenceInfo.references.get(0);",
      "right" : "Reference declaration = referenceInfo.references.get(0);",
      "info" : "VariableDeclarationStatement[3371-3427]:VariableDeclarationStatement[3371-3427]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[3438-3496]:VariableDeclarationStatement[3438-3496]"
    }, {
      "left" : "splitObject(v, declaration, init, referenceInfo);",
      "right" : "splitObject(v, declaration, init, referenceInfo);",
      "info" : "ExpressionStatement[3632-3681]:ExpressionStatement[3632-3681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4042-4317]:Block[4042-4317]"
    }, {
      "left" : "NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.isName()) {\n            staleVars.add(scope.getVar(node.getString()));\n          }\n        }\n      }, NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.isName()) {\n            staleVars.add(scope.getVar(node.getString()));\n          }\n        }\n      }, NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[4050-4311]:ExpressionStatement[4050-4311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4159-4272]:Block[4159-4272]"
    }, {
      "left" : "if (node.isName())",
      "right" : "if (node.isName())",
      "info" : "IfStatement[4171-4262]:IfStatement[4171-4262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4190-4262]:Block[4190-4262]"
    }, {
      "left" : "staleVars.add(scope.getVar(node.getString()));",
      "right" : "staleVars.add(scope.getVar(node.getString()));",
      "info" : "ExpressionStatement[4204-4250]:ExpressionStatement[4204-4250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4452-5173]:Block[4452-5173]"
    }, {
      "left" : "return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "right" : "return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "info" : "ReturnStatement[4938-5167]:ReturnStatement[4938-5167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9075-9275]:Block[9149-9349]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[9083-9111]:VariableDeclarationStatement[9157-9185]"
    }, {
      "left" : "return parent.isVar() ||\n          (parent.isAssign()\n              && parent.getFirstChild() == n\n              && parent.getParent().isExprResult());",
      "right" : "return parent.isVar() ||\n          (parent.isAssign()\n              && parent.getFirstChild() == n\n              && parent.getParent().isExprResult());",
      "info" : "ReturnStatement[9118-9269]:ReturnStatement[9192-9343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9543-10845]:Block[9617-10919]"
    }, {
      "left" : "Map<String, String> varmap = Maps.newLinkedHashMap();",
      "right" : "Map<String, String> varmap = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[9551-9604]:VariableDeclarationStatement[9625-9678]"
    }, {
      "left" : "for (Reference ref : referenceInfo.references)",
      "right" : "for (Reference ref : referenceInfo.references)",
      "info" : "EnhancedForStatement[9612-10817]:EnhancedForStatement[9686-10891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9659-10817]:Block[9733-10891]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[9669-10809]:IfStatement[9743-10883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9724-10282]:Block[9798-10356]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[9736-9770]:VariableDeclarationStatement[9810-9844]"
    }, {
      "left" : "if (val != null)",
      "right" : "if (val != null)",
      "info" : "IfStatement[9781-10272]:IfStatement[9855-10346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9798-10272]:Block[9872-10346]"
    }, {
      "left" : "Preconditions.checkState(val.isObjectLit());",
      "right" : "Preconditions.checkState(val.isObjectLit());",
      "info" : "ExpressionStatement[9812-9856]:ExpressionStatement[9886-9930]"
    }, {
      "left" : "for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext())",
      "right" : "for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext())",
      "info" : "ForStatement[9869-10260]:ForStatement[9943-10334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9965-10260]:Block[10039-10334]"
    }, {
      "left" : "String varname = child.getString();",
      "right" : "String varname = child.getString();",
      "info" : "VariableDeclarationStatement[9981-10016]:VariableDeclarationStatement[10055-10090]"
    }, {
      "left" : "if (varmap.containsKey(varname))",
      "right" : "if (varmap.containsKey(varname))",
      "info" : "IfStatement[10031-10107]:IfStatement[10105-10181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10064-10107]:Block[10138-10181]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[10082-10091]:ContinueStatement[10156-10165]"
    }, {
      "left" : "String var = VAR_PREFIX + varname + \"_\" +\n                safeNameIdSupplier.get();",
      "right" : "String var = VAR_PREFIX + varname + \"_\" +\n                safeNameIdSupplier.get();",
      "info" : "VariableDeclarationStatement[10123-10206]:VariableDeclarationStatement[10197-10280]"
    }, {
      "left" : "varmap.put(varname, var);",
      "right" : "varmap.put(varname, var);",
      "info" : "ExpressionStatement[10221-10246]:ExpressionStatement[10295-10320]"
    }, {
      "left" : "if (ref.getParent().isVar())",
      "right" : "if (ref.getParent().isVar())",
      "info" : "IfStatement[10288-10809]:IfStatement[10362-10883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10317-10377]:Block[10391-10451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10383-10809]:Block[10457-10883]"
    }, {
      "left" : "Node getprop = ref.getParent();",
      "right" : "Node getprop = ref.getParent();",
      "info" : "VariableDeclarationStatement[10395-10426]:VariableDeclarationStatement[10469-10500]"
    }, {
      "left" : "Preconditions.checkState(getprop.isGetProp());",
      "right" : "Preconditions.checkState(getprop.isGetProp());",
      "info" : "ExpressionStatement[10437-10483]:ExpressionStatement[10511-10557]"
    }, {
      "left" : "String varname = getprop.getLastChild().getString();",
      "right" : "String varname = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[10553-10605]:VariableDeclarationStatement[10627-10679]"
    }, {
      "left" : "if (varmap.containsKey(varname))",
      "right" : "if (varmap.containsKey(varname))",
      "info" : "IfStatement[10616-10684]:IfStatement[10690-10758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10649-10684]:Block[10723-10758]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[10663-10672]:ContinueStatement[10737-10746]"
    }, {
      "left" : "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get();",
      "right" : "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get();",
      "info" : "VariableDeclarationStatement[10696-10763]:VariableDeclarationStatement[10770-10837]"
    }, {
      "left" : "varmap.put(varname, var);",
      "right" : "varmap.put(varname, var);",
      "info" : "ExpressionStatement[10774-10799]:ExpressionStatement[10848-10873]"
    }, {
      "left" : "return varmap;",
      "right" : "return varmap;",
      "info" : "ReturnStatement[10825-10839]:ReturnStatement[10899-10913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11095-11365]:Block[11169-11439]"
    }, {
      "left" : "Node object = init.getAssignedValue();",
      "right" : "Node object = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[11103-11141]:VariableDeclarationStatement[11177-11215]"
    }, {
      "left" : "Preconditions.checkState(object.isObjectLit());",
      "right" : "Preconditions.checkState(object.isObjectLit());",
      "info" : "ExpressionStatement[11148-11195]:ExpressionStatement[11222-11269]"
    }, {
      "left" : "for (Node key = object.getFirstChild(); key != null;\n           key = key.getNext())",
      "right" : "for (Node key = object.getFirstChild(); key != null;\n           key = key.getNext())",
      "info" : "ForStatement[11202-11359]:ForStatement[11276-11433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11287-11359]:Block[11361-11433]"
    }, {
      "left" : "initvals.put(key.getString(), key.removeFirstChild());",
      "right" : "initvals.put(key.getString(), key.removeFirstChild());",
      "info" : "ExpressionStatement[11297-11351]:ExpressionStatement[11371-11425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11708-13819]:Block[11782-13893]"
    }, {
      "left" : "List<Node> nodes = Lists.newArrayList();",
      "right" : "List<Node> nodes = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11766-11806]:VariableDeclarationStatement[11840-11880]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[11813-11847]:VariableDeclarationStatement[11887-11921]"
    }, {
      "left" : "blacklistVarReferencesInTree(val, v.scope);",
      "right" : "blacklistVarReferencesInTree(val, v.scope);",
      "info" : "ExpressionStatement[11854-11897]:ExpressionStatement[11928-11971]"
    }, {
      "left" : "Preconditions.checkState(val.isObjectLit());",
      "right" : "Preconditions.checkState(val.isObjectLit());",
      "info" : "ExpressionStatement[11904-11948]:ExpressionStatement[11978-12022]"
    }, {
      "left" : "Set<String> all = Sets.newLinkedHashSet(varmap.keySet());",
      "right" : "Set<String> all = Sets.newLinkedHashSet(varmap.keySet());",
      "info" : "VariableDeclarationStatement[11955-12012]:VariableDeclarationStatement[12029-12086]"
    }, {
      "left" : "for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext())",
      "right" : "for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext())",
      "info" : "ForStatement[12019-12373]:ForStatement[12093-12447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12101-12373]:Block[12175-12447]"
    }, {
      "left" : "String var = key.getString();",
      "right" : "String var = key.getString();",
      "info" : "VariableDeclarationStatement[12111-12140]:VariableDeclarationStatement[12185-12214]"
    }, {
      "left" : "Node value = key.removeFirstChild();",
      "right" : "Node value = key.removeFirstChild();",
      "info" : "VariableDeclarationStatement[12149-12185]:VariableDeclarationStatement[12223-12259]"
    }, {
      "left" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                value));",
      "right" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                value));",
      "info" : "ExpressionStatement[12240-12340]:ExpressionStatement[12314-12414]"
    }, {
      "left" : "all.remove(var);",
      "right" : "all.remove(var);",
      "info" : "ExpressionStatement[12349-12365]:ExpressionStatement[12423-12439]"
    }, {
      "left" : "for (String var : all)",
      "right" : "for (String var : all)",
      "info" : "EnhancedForStatement[12429-12596]:EnhancedForStatement[12503-12670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12452-12596]:Block[12526-12670]"
    }, {
      "left" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                NodeUtil.newUndefinedNode(null)));",
      "right" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                NodeUtil.newUndefinedNode(null)));",
      "info" : "ExpressionStatement[12462-12588]:ExpressionStatement[12536-12662]"
    }, {
      "left" : "Node replacement;",
      "right" : "Node replacement;",
      "info" : "VariableDeclarationStatement[12604-12621]:VariableDeclarationStatement[12678-12695]"
    }, {
      "left" : "if (nodes.isEmpty())",
      "right" : "if (nodes.isEmpty())",
      "info" : "IfStatement[12628-13507]:IfStatement[12702-13581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12649-12695]:Block[12723-12769]"
    }, {
      "left" : "replacement = IR.trueNode();",
      "right" : "replacement = IR.trueNode();",
      "info" : "ExpressionStatement[12659-12687]:ExpressionStatement[12733-12761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12701-13507]:Block[12775-13581]"
    }, {
      "left" : "nodes.add(IR.trueNode());",
      "right" : "nodes.add(IR.trueNode());",
      "info" : "ExpressionStatement[12842-12867]:ExpressionStatement[12916-12941]"
    }, {
      "left" : "nodes = Lists.reverse(nodes);",
      "right" : "nodes = Lists.reverse(nodes);",
      "info" : "ExpressionStatement[13089-13118]:ExpressionStatement[13163-13192]"
    }, {
      "left" : "replacement = new Node(Token.COMMA);",
      "right" : "replacement = new Node(Token.COMMA);",
      "info" : "ExpressionStatement[13127-13163]:ExpressionStatement[13201-13237]"
    }, {
      "left" : "Node cur = replacement;",
      "right" : "Node cur = replacement;",
      "info" : "VariableDeclarationStatement[13172-13195]:VariableDeclarationStatement[13246-13269]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[13204-13210]:VariableDeclarationStatement[13278-13284]"
    }, {
      "left" : "for (i = 0; i < nodes.size() - 2; i++)",
      "right" : "for (i = 0; i < nodes.size() - 2; i++)",
      "info" : "ForStatement[13219-13409]:ForStatement[13293-13483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13258-13409]:Block[13332-13483]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i));",
      "right" : "cur.addChildToFront(nodes.get(i));",
      "info" : "ExpressionStatement[13270-13304]:ExpressionStatement[13344-13378]"
    }, {
      "left" : "Node t = new Node(Token.COMMA);",
      "right" : "Node t = new Node(Token.COMMA);",
      "info" : "VariableDeclarationStatement[13315-13346]:VariableDeclarationStatement[13389-13420]"
    }, {
      "left" : "cur.addChildToFront(t);",
      "right" : "cur.addChildToFront(t);",
      "info" : "ExpressionStatement[13357-13380]:ExpressionStatement[13431-13454]"
    }, {
      "left" : "cur = t;",
      "right" : "cur = t;",
      "info" : "ExpressionStatement[13391-13399]:ExpressionStatement[13465-13473]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i));",
      "right" : "cur.addChildToFront(nodes.get(i));",
      "info" : "ExpressionStatement[13418-13452]:ExpressionStatement[13492-13526]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i + 1));",
      "right" : "cur.addChildToFront(nodes.get(i + 1));",
      "info" : "ExpressionStatement[13461-13499]:ExpressionStatement[13535-13573]"
    }, {
      "left" : "Node replace = ref.getParent();",
      "right" : "Node replace = ref.getParent();",
      "info" : "VariableDeclarationStatement[13515-13546]:VariableDeclarationStatement[13589-13620]"
    }, {
      "left" : "replacement.copyInformationFromForTree(replace);",
      "right" : "replacement.copyInformationFromForTree(replace);",
      "info" : "ExpressionStatement[13553-13601]:ExpressionStatement[13627-13675]"
    }, {
      "left" : "if (replace.isVar())",
      "right" : "if (replace.isVar())",
      "info" : "IfStatement[13609-13813]:IfStatement[13683-13887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13630-13734]:Block[13704-13808]"
    }, {
      "left" : "replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));",
      "right" : "replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));",
      "info" : "ExpressionStatement[13640-13726]:ExpressionStatement[13714-13800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13740-13813]:Block[13814-13887]"
    }, {
      "left" : "replace.getParent().replaceChild(replace, replacement);",
      "right" : "replace.getParent().replaceChild(replace, replacement);",
      "info" : "ExpressionStatement[13750-13805]:ExpressionStatement[13824-13879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14097-16857]:Block[14171-16931]"
    }, {
      "left" : "Map<String, String> varmap = computeVarList(v, referenceInfo);",
      "right" : "Map<String, String> varmap = computeVarList(v, referenceInfo);",
      "info" : "VariableDeclarationStatement[14222-14284]:VariableDeclarationStatement[14296-14358]"
    }, {
      "left" : "Map<String, Node> initvals = Maps.newHashMap();",
      "right" : "Map<String, Node> initvals = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[14292-14339]:VariableDeclarationStatement[14366-14413]"
    }, {
      "left" : "Node vnode;",
      "right" : "Node vnode;",
      "info" : "VariableDeclarationStatement[14538-14549]:VariableDeclarationStatement[14612-14623]"
    }, {
      "left" : "boolean defined = referenceInfo.isWellDefined() &&\n          init.getParent().isVar();",
      "right" : "boolean defined = referenceInfo.isWellDefined() &&\n          init.getParent().isVar();",
      "info" : "VariableDeclarationStatement[14556-14642]:VariableDeclarationStatement[14630-14716]"
    }, {
      "left" : "if (defined)",
      "right" : "if (defined)",
      "info" : "IfStatement[14649-14948]:IfStatement[14723-15022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14662-14748]:Block[14736-14822]"
    }, {
      "left" : "vnode = init.getParent();",
      "right" : "vnode = init.getParent();",
      "info" : "ExpressionStatement[14672-14697]:ExpressionStatement[14746-14771]"
    }, {
      "left" : "fillInitialValues(init, initvals);",
      "right" : "fillInitialValues(init, initvals);",
      "info" : "ExpressionStatement[14706-14740]:ExpressionStatement[14780-14814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14754-14948]:Block[14828-15022]"
    }, {
      "left" : "vnode = v.getScope().getRootNode().getLastChild().getFirstChild();",
      "right" : "vnode = v.getScope().getRootNode().getLastChild().getFirstChild();",
      "info" : "ExpressionStatement[14874-14940]:ExpressionStatement[14948-15014]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : varmap.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : varmap.entrySet())",
      "info" : "EnhancedForStatement[14956-15386]:EnhancedForStatement[15030-15460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15014-15386]:Block[15088-15460]"
    }, {
      "left" : "Node val = initvals.get(entry.getKey());",
      "right" : "Node val = initvals.get(entry.getKey());",
      "info" : "VariableDeclarationStatement[15024-15064]:VariableDeclarationStatement[15098-15138]"
    }, {
      "left" : "Node varnode = NodeUtil.newVarNode(entry.getValue(), val);",
      "right" : "Node varnode = NodeUtil.newVarNode(entry.getValue(), val);",
      "info" : "VariableDeclarationStatement[15073-15131]:VariableDeclarationStatement[15147-15205]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[15140-15320]:IfStatement[15214-15394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15157-15249]:Block[15231-15323]"
    }, {
      "left" : "varnode.copyInformationFromForTree(vnode);",
      "right" : "varnode.copyInformationFromForTree(vnode);",
      "info" : "ExpressionStatement[15197-15239]:ExpressionStatement[15271-15313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15255-15320]:Block[15329-15394]"
    }, {
      "left" : "blacklistVarReferencesInTree(val, v.scope);",
      "right" : "blacklistVarReferencesInTree(val, v.scope);",
      "info" : "ExpressionStatement[15267-15310]:ExpressionStatement[15341-15384]"
    }, {
      "left" : "vnode.getParent().addChildBefore(varnode, vnode);",
      "right" : "vnode.getParent().addChildBefore(varnode, vnode);",
      "info" : "ExpressionStatement[15329-15378]:ExpressionStatement[15403-15452]"
    }, {
      "left" : "if (defined)",
      "right" : "if (defined)",
      "info" : "IfStatement[15394-15462]:IfStatement[15468-15536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15407-15462]:Block[15481-15536]"
    }, {
      "left" : "vnode.getParent().removeChild(vnode);",
      "right" : "vnode.getParent().removeChild(vnode);",
      "info" : "ExpressionStatement[15417-15454]:ExpressionStatement[15491-15528]"
    }, {
      "left" : "for (Reference ref : referenceInfo.references)",
      "right" : "for (Reference ref : referenceInfo.references)",
      "info" : "EnhancedForStatement[15470-16815]:EnhancedForStatement[15544-16889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15517-16815]:Block[15591-16889]"
    }, {
      "left" : "if (defined && ref == init)",
      "right" : "if (defined && ref == init)",
      "info" : "IfStatement[15581-15618]:IfStatement[15655-15692]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15609-15618]:ContinueStatement[15683-15692]"
    }, {
      "left" : "if (ref.isLvalue())",
      "right" : "if (ref.isLvalue())",
      "info" : "IfStatement[15628-16807]:IfStatement[15702-16881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15648-15831]:Block[15722-15905]"
    }, {
      "left" : "replaceAssignmentExpression(v, ref, varmap);",
      "right" : "replaceAssignmentExpression(v, ref, varmap);",
      "info" : "ExpressionStatement[15777-15821]:ExpressionStatement[15851-15895]"
    }, {
      "left" : "if (ref.getParent().isVar())",
      "right" : "if (ref.getParent().isVar())",
      "info" : "IfStatement[15837-16807]:IfStatement[15911-16881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15866-16065]:Block[15940-16139]"
    }, {
      "left" : "ref.getGrandparent().removeChild(ref.getParent());",
      "right" : "ref.getGrandparent().removeChild(ref.getParent());",
      "info" : "ExpressionStatement[16005-16055]:ExpressionStatement[16079-16129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16071-16807]:Block[16145-16881]"
    }, {
      "left" : "Node getprop = ref.getParent();",
      "right" : "Node getprop = ref.getParent();",
      "info" : "VariableDeclarationStatement[16161-16192]:VariableDeclarationStatement[16235-16266]"
    }, {
      "left" : "Preconditions.checkState(getprop.isGetProp());",
      "right" : "Preconditions.checkState(getprop.isGetProp());",
      "info" : "ExpressionStatement[16203-16249]:ExpressionStatement[16277-16323]"
    }, {
      "left" : "String var = getprop.getChildAtIndex(1).getString();",
      "right" : "String var = getprop.getChildAtIndex(1).getString();",
      "info" : "VariableDeclarationStatement[16319-16371]:VariableDeclarationStatement[16393-16445]"
    }, {
      "left" : "Preconditions.checkState(varmap.containsKey(var));",
      "right" : "Preconditions.checkState(varmap.containsKey(var));",
      "info" : "ExpressionStatement[16513-16563]:ExpressionStatement[16587-16637]"
    }, {
      "left" : "Node replacement = IR.name(varmap.get(var));",
      "right" : "Node replacement = IR.name(varmap.get(var));",
      "info" : "VariableDeclarationStatement[16626-16670]:VariableDeclarationStatement[16700-16744]"
    }, {
      "left" : "replacement.copyInformationFrom(getprop);",
      "right" : "replacement.copyInformationFrom(getprop);",
      "info" : "ExpressionStatement[16681-16722]:ExpressionStatement[16755-16796]"
    }, {
      "left" : "ref.getGrandparent().replaceChild(ref.getParent(), replacement);",
      "right" : "ref.getGrandparent().replaceChild(ref.getParent(), replacement);",
      "info" : "ExpressionStatement[16733-16797]:ExpressionStatement[16807-16871]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[16823-16851]:ExpressionStatement[16897-16925]"
    } ]
  },
  "interFileMappings" : { }
}