{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeValidator",
      "right" : "TypeValidator",
      "info" : "TypeDeclaration[2131-31105]:TypeDeclaration[2131-30709]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2540-2580]:FieldDeclaration[2540-2580]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[2583-2625]:FieldDeclaration[2583-2625]"
    }, {
      "left" : "private final JSType allValueTypes;",
      "right" : "private final JSType allValueTypes;",
      "info" : "FieldDeclaration[2628-2663]:FieldDeclaration[2628-2663]"
    }, {
      "left" : "private boolean shouldReport = true;",
      "right" : "private boolean shouldReport = true;",
      "info" : "FieldDeclaration[2666-2702]:FieldDeclaration[2666-2702]"
    }, {
      "left" : "private final JSType nullOrUndefined;",
      "right" : "private final JSType nullOrUndefined;",
      "info" : "FieldDeclaration[2705-2742]:FieldDeclaration[2705-2742]"
    }, {
      "left" : "private final List<TypeMismatch> mismatches = Lists.newArrayList();",
      "right" : "private final List<TypeMismatch> mismatches = Lists.newArrayList();",
      "info" : "FieldDeclaration[2957-3024]:FieldDeclaration[2957-3024]"
    }, {
      "left" : "private static final String FOUND_REQUIRED =\n      \"{0}\\n\" +\n      \"found   : {1}\\n\" +\n      \"required: {2}\";",
      "right" : "private static final String FOUND_REQUIRED =\n      \"{0}\\n\" +\n      \"found   : {1}\\n\" +\n      \"required: {2}\";",
      "info" : "FieldDeclaration[3047-3156]:FieldDeclaration[3047-3156]"
    }, {
      "left" : "static final DiagnosticType INVALID_CAST =\n      DiagnosticType.warning(\"JSC_INVALID_CAST\",\n          \"invalid cast - must be a subtype or supertype\\n\" +\n          \"from: {0}\\n\" +\n          \"to  : {1}\");",
      "right" : "static final DiagnosticType INVALID_CAST =\n      DiagnosticType.warning(\"JSC_INVALID_CAST\",\n          \"invalid cast - must be a subtype or supertype\\n\" +\n          \"from: {0}\\n\" +\n          \"to  : {1}\");",
      "info" : "FieldDeclaration[3160-3363]:FieldDeclaration[3160-3363]"
    }, {
      "left" : "static final DiagnosticType TYPE_MISMATCH_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TYPE_MISMATCH\",\n          \"{0}\");",
      "right" : "static final DiagnosticType TYPE_MISMATCH_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TYPE_MISMATCH\",\n          \"{0}\");",
      "info" : "FieldDeclaration[3367-3497]:FieldDeclaration[3367-3497]"
    }, {
      "left" : "static final DiagnosticType MISSING_EXTENDS_TAG_WARNING =\n      DiagnosticType.warning(\n          \"JSC_MISSING_EXTENDS_TAG\",\n          \"Missing @extends tag on type {0}\");",
      "right" : "static final DiagnosticType MISSING_EXTENDS_TAG_WARNING =\n      DiagnosticType.warning(\n          \"JSC_MISSING_EXTENDS_TAG\",\n          \"Missing @extends tag on type {0}\");",
      "info" : "FieldDeclaration[3501-3672]:FieldDeclaration[3501-3672]"
    }, {
      "left" : "static final DiagnosticType DUP_VAR_DECLARATION =\n      DiagnosticType.warning(\"JSC_DUP_VAR_DECLARATION\",\n          \"variable {0} redefined with type {1}, \" +\n          \"original definition at {2}:{3} with type {4}\");",
      "right" : "static final DiagnosticType DUP_VAR_DECLARATION =\n      DiagnosticType.warning(\"JSC_DUP_VAR_DECLARATION\",\n          \"variable {0} redefined with type {1}, \" +\n          \"original definition at {2}:{3} with type {4}\");",
      "info" : "FieldDeclaration[3676-3893]:FieldDeclaration[3676-3893]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "info" : "FieldDeclaration[3897-4197]:FieldDeclaration[3897-4197]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_NOT_IMPLEMENTED\",\n          \"property {0} on interface {1} is not implemented by type {2}\");",
      "right" : "static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_NOT_IMPLEMENTED\",\n          \"property {0} on interface {1} is not implemented by type {2}\");",
      "info" : "FieldDeclaration[4201-4418]:FieldDeclaration[4201-4418]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\n        \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\",\n        \"mismatch of the {0} property type and the type \" +\n        \"of the property it overrides from interface {1}\\n\" +\n        \"original: {2}\\n\" +\n        \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\n        \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\",\n        \"mismatch of the {0} property type and the type \" +\n        \"of the property it overrides from interface {1}\\n\" +\n        \"original: {2}\\n\" +\n        \"override: {3}\");",
      "info" : "FieldDeclaration[4422-4742]:FieldDeclaration[4422-4742]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_TYPEOF_VALUE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_TYPEOF_VALUE\", \"unknown type: {0}\");",
      "right" : "static final DiagnosticType UNKNOWN_TYPEOF_VALUE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_TYPEOF_VALUE\", \"unknown type: {0}\");",
      "info" : "FieldDeclaration[4746-4875]:FieldDeclaration[4746-4875]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_PROPERTY_ACCESS =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_ACCESS\",\n                             \"Cannot do {0} access on a {1}\");",
      "right" : "static final DiagnosticType ILLEGAL_PROPERTY_ACCESS =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_ACCESS\",\n                             \"Cannot do {0} access on a {1}\");",
      "info" : "FieldDeclaration[4879-5055]:FieldDeclaration[4879-5055]"
    }, {
      "left" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      INVALID_CAST,\n      TYPE_MISMATCH_WARNING,\n      MISSING_EXTENDS_TAG_WARNING,\n      DUP_VAR_DECLARATION,\n      HIDDEN_PROPERTY_MISMATCH,\n      INTERFACE_METHOD_NOT_IMPLEMENTED,\n      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n      UNKNOWN_TYPEOF_VALUE,\n      ILLEGAL_PROPERTY_ACCESS);",
      "right" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      INVALID_CAST,\n      TYPE_MISMATCH_WARNING,\n      MISSING_EXTENDS_TAG_WARNING,\n      DUP_VAR_DECLARATION,\n      HIDDEN_PROPERTY_MISMATCH,\n      INTERFACE_METHOD_NOT_IMPLEMENTED,\n      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n      UNKNOWN_TYPEOF_VALUE,\n      ILLEGAL_PROPERTY_ACCESS);",
      "info" : "FieldDeclaration[5059-5411]:FieldDeclaration[5059-5411]"
    }, {
      "left" : "TypeValidator(AbstractCompiler compiler)",
      "right" : "TypeValidator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[5415-5757]:MethodDeclaration[5415-5757]"
    }, {
      "left" : "Iterable<TypeMismatch> getMismatches()",
      "right" : "Iterable<TypeMismatch> getMismatches()",
      "info" : "MethodDeclaration[5761-6021]:MethodDeclaration[5761-6021]"
    }, {
      "left" : "void setShouldReport(boolean report)",
      "right" : "void setShouldReport(boolean report)",
      "info" : "MethodDeclaration[6025-6099]:MethodDeclaration[6025-6099]"
    }, {
      "left" : "void expectValidTypeofName(NodeTraversal t, Node n, String found)",
      "right" : "void expectValidTypeofName(NodeTraversal t, Node n, String found)",
      "info" : "MethodDeclaration[6342-6490]:MethodDeclaration[6342-6490]"
    }, {
      "left" : "boolean expectObject(NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "boolean expectObject(NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[6494-6958]:MethodDeclaration[6494-6958]"
    }, {
      "left" : "void expectActualObject(NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "void expectActualObject(NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[6962-7245]:MethodDeclaration[6962-7245]"
    }, {
      "left" : "void expectAnyObject(NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "void expectAnyObject(NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[7249-7664]:MethodDeclaration[7249-7664]"
    }, {
      "left" : "void expectString(NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "void expectString(NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[7668-8017]:MethodDeclaration[7668-8017]"
    }, {
      "left" : "void expectNumber(NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "void expectNumber(NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[8021-8370]:MethodDeclaration[8021-8370]"
    }, {
      "left" : "void expectBitwiseable(NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "void expectBitwiseable(NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[8374-8786]:MethodDeclaration[8374-8786]"
    }, {
      "left" : "void expectStringOrNumber(\n      NodeTraversal t, Node n, JSType type, String msg)",
      "right" : "void expectStringOrNumber(\n      NodeTraversal t, Node n, JSType type, String msg)",
      "info" : "MethodDeclaration[8790-9210]:MethodDeclaration[8790-9210]"
    }, {
      "left" : "boolean expectNotNullOrUndefined(\n      NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
      "right" : "boolean expectNotNullOrUndefined(\n      NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
      "info" : "MethodDeclaration[9214-10467]:MethodDeclaration[9214-10467]"
    }, {
      "left" : "private boolean containsForwardDeclaredUnresolvedName(JSType type)",
      "right" : "private boolean containsForwardDeclaredUnresolvedName(JSType type)",
      "info" : "MethodDeclaration[10471-10781]:MethodDeclaration[10471-10781]"
    }, {
      "left" : "void expectSwitchMatchesCase(NodeTraversal t, Node n, JSType switchType,\n      JSType caseType)",
      "right" : "void expectSwitchMatchesCase(NodeTraversal t, Node n, JSType switchType,\n      JSType caseType)",
      "info" : "MethodDeclaration[10785-11517]:MethodDeclaration[10785-11517]"
    }, {
      "left" : "void expectIndexMatch(NodeTraversal t, Node n, JSType objType,\n                        JSType indexType)",
      "right" : "void expectIndexMatch(NodeTraversal t, Node n, JSType objType,\n                        JSType indexType)",
      "info" : "MethodDeclaration[11521-13068]:MethodDeclaration[11521-13068]"
    }, {
      "left" : "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, Node owner, String propName)",
      "right" : "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, Node owner, String propName)",
      "info" : "MethodDeclaration[13072-14709]:MethodDeclaration[13072-14511]"
    }, {
      "left" : "boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, String msg)",
      "right" : "boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, String msg)",
      "info" : "MethodDeclaration[14713-15593]:MethodDeclaration[14515-15197]"
    }, {
      "left" : "void expectArgumentMatchesParameter(NodeTraversal t, Node n, JSType argType,\n      JSType paramType, Node callNode, int ordinal)",
      "right" : "void expectArgumentMatchesParameter(NodeTraversal t, Node n, JSType argType,\n      JSType paramType, Node callNode, int ordinal)",
      "info" : "MethodDeclaration[15597-16455]:MethodDeclaration[15201-16059]"
    }, {
      "left" : "void expectCanOverride(NodeTraversal t, Node n, JSType overridingType,\n      JSType hiddenType, String propertyName, JSType ownerType)",
      "right" : "void expectCanOverride(NodeTraversal t, Node n, JSType overridingType,\n      JSType hiddenType, String propertyName, JSType ownerType)",
      "info" : "MethodDeclaration[16459-17363]:MethodDeclaration[16063-16967]"
    }, {
      "left" : "void expectSuperType(NodeTraversal t, Node n, ObjectType superObject,\n      ObjectType subObject)",
      "right" : "void expectSuperType(NodeTraversal t, Node n, ObjectType superObject,\n      ObjectType subObject)",
      "info" : "MethodDeclaration[17367-18631]:MethodDeclaration[16971-18235]"
    }, {
      "left" : "void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType)",
      "right" : "void expectCanCast(NodeTraversal t, Node n, JSType type, JSType castType)",
      "info" : "MethodDeclaration[18635-19351]:MethodDeclaration[18239-18955]"
    }, {
      "left" : "Var expectUndeclaredVariable(String sourceName, CompilerInput input,\n      Node n, Node parent, Var var, String variableName, JSType newType)",
      "right" : "Var expectUndeclaredVariable(String sourceName, CompilerInput input,\n      Node n, Node parent, Var var, String variableName, JSType newType)",
      "info" : "MethodDeclaration[19355-22352]:MethodDeclaration[18959-21956]"
    }, {
      "left" : "void expectAllInterfaceProperties(NodeTraversal t, Node n,\n      FunctionType type)",
      "right" : "void expectAllInterfaceProperties(NodeTraversal t, Node n,\n      FunctionType type)",
      "info" : "MethodDeclaration[22356-22943]:MethodDeclaration[21960-22547]"
    }, {
      "left" : "private void expectInterfaceProperty(NodeTraversal t, Node n,\n      ObjectType instance, ObjectType implementedInterface, String prop)",
      "right" : "private void expectInterfaceProperty(NodeTraversal t, Node n,\n      ObjectType instance, ObjectType implementedInterface, String prop)",
      "info" : "MethodDeclaration[22947-24618]:MethodDeclaration[22551-24222]"
    }, {
      "left" : "private void mismatch(NodeTraversal t, Node n,\n                        String msg, JSType found, JSType required)",
      "right" : "private void mismatch(NodeTraversal t, Node n,\n                        String msg, JSType found, JSType required)",
      "info" : "MethodDeclaration[24622-24839]:MethodDeclaration[24226-24443]"
    }, {
      "left" : "private void mismatch(NodeTraversal t, Node n,\n                        String msg, JSType found, JSTypeNative required)",
      "right" : "private void mismatch(NodeTraversal t, Node n,\n                        String msg, JSType found, JSTypeNative required)",
      "info" : "MethodDeclaration[24843-25025]:MethodDeclaration[24447-24629]"
    }, {
      "left" : "private void mismatch(String sourceName, Node n,\n                        String msg, JSType found, JSType required)",
      "right" : "private void mismatch(String sourceName, Node n,\n                        String msg, JSType found, JSType required)",
      "info" : "MethodDeclaration[25029-25322]:MethodDeclaration[24633-24926]"
    }, {
      "left" : "private void registerMismatch(JSType found, JSType required, JSError error)",
      "right" : "private void registerMismatch(JSType found, JSType required, JSError error)",
      "info" : "MethodDeclaration[25326-26372]:MethodDeclaration[24930-25976]"
    }, {
      "left" : "private void registerIfMismatch(\n      JSType found, JSType required, JSError error)",
      "right" : "private void registerIfMismatch(\n      JSType found, JSType required, JSError error)",
      "info" : "MethodDeclaration[26376-26605]:MethodDeclaration[25980-26209]"
    }, {
      "left" : "private String formatFoundRequired(String description, JSType found,\n      JSType required)",
      "right" : "private String formatFoundRequired(String description, JSType found,\n      JSType required)",
      "info" : "MethodDeclaration[26609-26842]:MethodDeclaration[26213-26446]"
    }, {
      "left" : "String getReadableJSTypeName(Node n, boolean dereference)",
      "right" : "String getReadableJSTypeName(Node n, boolean dereference)",
      "info" : "MethodDeclaration[26846-29086]:MethodDeclaration[26450-28690]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[29090-29651]:MethodDeclaration[28694-29255]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[29655-29757]:MethodDeclaration[29259-29361]"
    }, {
      "left" : "private JSError report(JSError error)",
      "right" : "private JSError report(JSError error)",
      "info" : "MethodDeclaration[29761-29882]:MethodDeclaration[29365-29486]"
    }, {
      "left" : "TypeMismatch",
      "right" : "TypeMismatch",
      "info" : "TypeDeclaration[29886-31103]:TypeDeclaration[29490-30707]"
    }, {
      "left" : "final JSType typeA;",
      "right" : "final JSType typeA;",
      "info" : "FieldDeclaration[30140-30159]:FieldDeclaration[29744-29763]"
    }, {
      "left" : "final JSType typeB;",
      "right" : "final JSType typeB;",
      "info" : "FieldDeclaration[30164-30183]:FieldDeclaration[29768-29787]"
    }, {
      "left" : "final JSError src;",
      "right" : "final JSError src;",
      "info" : "FieldDeclaration[30188-30206]:FieldDeclaration[29792-29810]"
    }, {
      "left" : "TypeMismatch(JSType a, JSType b, JSError src)",
      "right" : "TypeMismatch(JSType a, JSType b, JSError src)",
      "info" : "MethodDeclaration[30212-30506]:MethodDeclaration[29816-30110]"
    }, {
      "left" : "public boolean equals(Object object)",
      "right" : "public boolean equals(Object object)",
      "info" : "MethodDeclaration[30512-30914]:MethodDeclaration[30116-30518]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[30920-31004]:MethodDeclaration[30524-30608]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[31010-31099]:MethodDeclaration[30614-30703]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2515-2520]:TYPE_DECLARATION_KIND[2515-2520]"
    }, {
      "left" : "TypeValidator",
      "right" : "TypeValidator",
      "info" : "SimpleName[2521-2534]:SimpleName[2521-2534]"
    }, {
      "left" : "TypeValidator",
      "right" : "TypeValidator",
      "info" : "SimpleName[5415-5428]:SimpleName[5415-5428]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5429-5454]:SingleVariableDeclaration[5429-5454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5456-5757]:Block[5456-5757]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[5462-5487]:ExpressionStatement[5462-5487]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[5492-5539]:ExpressionStatement[5492-5539]"
    }, {
      "left" : "this.allValueTypes = typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);",
      "right" : "this.allValueTypes = typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);",
      "info" : "ExpressionStatement[5544-5665]:ExpressionStatement[5544-5665]"
    }, {
      "left" : "this.nullOrUndefined = typeRegistry.createUnionType(\n        NULL_TYPE, VOID_TYPE);",
      "right" : "this.nullOrUndefined = typeRegistry.createUnionType(\n        NULL_TYPE, VOID_TYPE);",
      "info" : "ExpressionStatement[5670-5753]:ExpressionStatement[5670-5753]"
    }, {
      "left" : "Iterable<TypeMismatch>",
      "right" : "Iterable<TypeMismatch>",
      "info" : "ParameterizedType[5954-5976]:ParameterizedType[5954-5976]"
    }, {
      "left" : "getMismatches",
      "right" : "getMismatches",
      "info" : "SimpleName[5977-5990]:SimpleName[5977-5990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5993-6021]:Block[5993-6021]"
    }, {
      "left" : "return mismatches;",
      "right" : "return mismatches;",
      "info" : "ReturnStatement[5999-6017]:ReturnStatement[5999-6017]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6025-6029]:PrimitiveType[6025-6029]"
    }, {
      "left" : "setShouldReport",
      "right" : "setShouldReport",
      "info" : "SimpleName[6030-6045]:SimpleName[6030-6045]"
    }, {
      "left" : "boolean report",
      "right" : "boolean report",
      "info" : "SingleVariableDeclaration[6046-6060]:SingleVariableDeclaration[6046-6060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6062-6099]:Block[6062-6099]"
    }, {
      "left" : "this.shouldReport = report;",
      "right" : "this.shouldReport = report;",
      "info" : "ExpressionStatement[6068-6095]:ExpressionStatement[6068-6095]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6342-6346]:PrimitiveType[6342-6346]"
    }, {
      "left" : "expectValidTypeofName",
      "right" : "expectValidTypeofName",
      "info" : "SimpleName[6347-6368]:SimpleName[6347-6368]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6369-6384]:SingleVariableDeclaration[6369-6384]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6386-6392]:SingleVariableDeclaration[6386-6392]"
    }, {
      "left" : "String found",
      "right" : "String found",
      "info" : "SingleVariableDeclaration[6394-6406]:SingleVariableDeclaration[6394-6406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6408-6490]:Block[6408-6490]"
    }, {
      "left" : "report(JSError.make(t.getSourceName(), n, UNKNOWN_TYPEOF_VALUE, found));",
      "right" : "report(JSError.make(t.getSourceName(), n, UNKNOWN_TYPEOF_VALUE, found));",
      "info" : "ExpressionStatement[6414-6486]:ExpressionStatement[6414-6486]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6753-6760]:PrimitiveType[6753-6760]"
    }, {
      "left" : "expectObject",
      "right" : "expectObject",
      "info" : "SimpleName[6761-6773]:SimpleName[6761-6773]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6774-6789]:SingleVariableDeclaration[6774-6789]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6791-6797]:SingleVariableDeclaration[6791-6797]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[6799-6810]:SingleVariableDeclaration[6799-6810]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[6812-6822]:SingleVariableDeclaration[6812-6822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6824-6958]:Block[6824-6958]"
    }, {
      "left" : "if (!type.matchesObjectContext())",
      "right" : "if (!type.matchesObjectContext())",
      "info" : "IfStatement[6830-6937]:IfStatement[6830-6937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6864-6937]:Block[6864-6937]"
    }, {
      "left" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
      "right" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
      "info" : "ExpressionStatement[6872-6911]:ExpressionStatement[6872-6911]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6918-6931]:ReturnStatement[6918-6931]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6942-6954]:ReturnStatement[6942-6954]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7086-7090]:PrimitiveType[7086-7090]"
    }, {
      "left" : "expectActualObject",
      "right" : "expectActualObject",
      "info" : "SimpleName[7091-7109]:SimpleName[7091-7109]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7110-7125]:SingleVariableDeclaration[7110-7125]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7127-7133]:SingleVariableDeclaration[7127-7133]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7135-7146]:SingleVariableDeclaration[7135-7146]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[7148-7158]:SingleVariableDeclaration[7148-7158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7160-7245]:Block[7160-7245]"
    }, {
      "left" : "if (!type.isObject())",
      "right" : "if (!type.isObject())",
      "info" : "IfStatement[7166-7241]:IfStatement[7166-7241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7188-7241]:Block[7188-7241]"
    }, {
      "left" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
      "right" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
      "info" : "ExpressionStatement[7196-7235]:ExpressionStatement[7196-7235]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7411-7415]:PrimitiveType[7411-7415]"
    }, {
      "left" : "expectAnyObject",
      "right" : "expectAnyObject",
      "info" : "SimpleName[7416-7431]:SimpleName[7416-7431]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7432-7447]:SingleVariableDeclaration[7432-7447]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7449-7455]:SingleVariableDeclaration[7449-7455]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7457-7468]:SingleVariableDeclaration[7457-7468]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[7470-7480]:SingleVariableDeclaration[7470-7480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7482-7664]:Block[7482-7664]"
    }, {
      "left" : "JSType anyObjectType = getNativeType(NO_OBJECT_TYPE);",
      "right" : "JSType anyObjectType = getNativeType(NO_OBJECT_TYPE);",
      "info" : "VariableDeclarationStatement[7488-7541]:VariableDeclarationStatement[7488-7541]"
    }, {
      "left" : "if (!anyObjectType.isSubtype(type) && !type.isEmptyType())",
      "right" : "if (!anyObjectType.isSubtype(type) && !type.isEmptyType())",
      "info" : "IfStatement[7546-7660]:IfStatement[7546-7660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7605-7660]:Block[7605-7660]"
    }, {
      "left" : "mismatch(t, n, msg, type, anyObjectType);",
      "right" : "mismatch(t, n, msg, type, anyObjectType);",
      "info" : "ExpressionStatement[7613-7654]:ExpressionStatement[7613-7654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7852-7856]:PrimitiveType[7852-7856]"
    }, {
      "left" : "expectString",
      "right" : "expectString",
      "info" : "SimpleName[7857-7869]:SimpleName[7857-7869]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7870-7885]:SingleVariableDeclaration[7870-7885]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7887-7893]:SingleVariableDeclaration[7887-7893]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7895-7906]:SingleVariableDeclaration[7895-7906]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[7908-7918]:SingleVariableDeclaration[7908-7918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7920-8017]:Block[7920-8017]"
    }, {
      "left" : "if (!type.matchesStringContext())",
      "right" : "if (!type.matchesStringContext())",
      "info" : "IfStatement[7926-8013]:IfStatement[7926-8013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7960-8013]:Block[7960-8013]"
    }, {
      "left" : "mismatch(t, n, msg, type, STRING_TYPE);",
      "right" : "mismatch(t, n, msg, type, STRING_TYPE);",
      "info" : "ExpressionStatement[7968-8007]:ExpressionStatement[7968-8007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8205-8209]:PrimitiveType[8205-8209]"
    }, {
      "left" : "expectNumber",
      "right" : "expectNumber",
      "info" : "SimpleName[8210-8222]:SimpleName[8210-8222]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8223-8238]:SingleVariableDeclaration[8223-8238]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8240-8246]:SingleVariableDeclaration[8240-8246]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[8248-8259]:SingleVariableDeclaration[8248-8259]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[8261-8271]:SingleVariableDeclaration[8261-8271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8273-8370]:Block[8273-8370]"
    }, {
      "left" : "if (!type.matchesNumberContext())",
      "right" : "if (!type.matchesNumberContext())",
      "info" : "IfStatement[8279-8366]:IfStatement[8279-8366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8313-8366]:Block[8313-8366]"
    }, {
      "left" : "mismatch(t, n, msg, type, NUMBER_TYPE);",
      "right" : "mismatch(t, n, msg, type, NUMBER_TYPE);",
      "info" : "ExpressionStatement[8321-8360]:ExpressionStatement[8321-8360]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8580-8584]:PrimitiveType[8580-8584]"
    }, {
      "left" : "expectBitwiseable",
      "right" : "expectBitwiseable",
      "info" : "SimpleName[8585-8602]:SimpleName[8585-8602]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[8603-8618]:SingleVariableDeclaration[8603-8618]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8620-8626]:SingleVariableDeclaration[8620-8626]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[8628-8639]:SingleVariableDeclaration[8628-8639]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[8641-8651]:SingleVariableDeclaration[8641-8651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8653-8786]:Block[8653-8786]"
    }, {
      "left" : "if (!type.matchesNumberContext() && !type.isSubtype(allValueTypes))",
      "right" : "if (!type.matchesNumberContext() && !type.isSubtype(allValueTypes))",
      "info" : "IfStatement[8659-8782]:IfStatement[8659-8782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8727-8782]:Block[8727-8782]"
    }, {
      "left" : "mismatch(t, n, msg, type, allValueTypes);",
      "right" : "mismatch(t, n, msg, type, allValueTypes);",
      "info" : "ExpressionStatement[8735-8776]:ExpressionStatement[8735-8776]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8996-9000]:PrimitiveType[8996-9000]"
    }, {
      "left" : "expectStringOrNumber",
      "right" : "expectStringOrNumber",
      "info" : "SimpleName[9001-9021]:SimpleName[9001-9021]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9029-9044]:SingleVariableDeclaration[9029-9044]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9046-9052]:SingleVariableDeclaration[9046-9052]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[9054-9065]:SingleVariableDeclaration[9054-9065]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[9067-9077]:SingleVariableDeclaration[9067-9077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9079-9210]:Block[9079-9210]"
    }, {
      "left" : "if (!type.matchesNumberContext() && !type.matchesStringContext())",
      "right" : "if (!type.matchesNumberContext() && !type.matchesStringContext())",
      "info" : "IfStatement[9085-9206]:IfStatement[9085-9206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9151-9206]:Block[9151-9206]"
    }, {
      "left" : "mismatch(t, n, msg, type, NUMBER_STRING);",
      "right" : "mismatch(t, n, msg, type, NUMBER_STRING);",
      "info" : "ExpressionStatement[9159-9200]:ExpressionStatement[9159-9200]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9544-9551]:PrimitiveType[9544-9551]"
    }, {
      "left" : "expectNotNullOrUndefined",
      "right" : "expectNotNullOrUndefined",
      "info" : "SimpleName[9552-9576]:SimpleName[9552-9576]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9584-9599]:SingleVariableDeclaration[9584-9599]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9601-9607]:SingleVariableDeclaration[9601-9607]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[9609-9620]:SingleVariableDeclaration[9609-9620]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[9622-9632]:SingleVariableDeclaration[9622-9632]"
    }, {
      "left" : "JSType expectedType",
      "right" : "JSType expectedType",
      "info" : "SingleVariableDeclaration[9634-9653]:SingleVariableDeclaration[9634-9653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9655-10467]:Block[9655-10467]"
    }, {
      "left" : "if (!type.isNoType() && !type.isUnknownType() &&\n        type.isSubtype(nullOrUndefined) &&\n        !containsForwardDeclaredUnresolvedName(type))",
      "right" : "if (!type.isNoType() && !type.isUnknownType() &&\n        type.isSubtype(nullOrUndefined) &&\n        !containsForwardDeclaredUnresolvedName(type))",
      "info" : "IfStatement[9661-10446]:IfStatement[9661-10446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9807-10446]:Block[9807-10446]"
    }, {
      "left" : "if (n.isGetProp() &&\n          !t.inGlobalScope() && type.isNullType())",
      "right" : "if (n.isGetProp() &&\n          !t.inGlobalScope() && type.isNullType())",
      "info" : "IfStatement[10270-10372]:IfStatement[10270-10372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10342-10372]:Block[10342-10372]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10352-10364]:ReturnStatement[10352-10364]"
    }, {
      "left" : "mismatch(t, n, msg, type, expectedType);",
      "right" : "mismatch(t, n, msg, type, expectedType);",
      "info" : "ExpressionStatement[10380-10420]:ExpressionStatement[10380-10420]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10427-10440]:ReturnStatement[10427-10440]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10451-10463]:ReturnStatement[10451-10463]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10471-10478]:Modifier[10471-10478]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10479-10486]:PrimitiveType[10479-10486]"
    }, {
      "left" : "containsForwardDeclaredUnresolvedName",
      "right" : "containsForwardDeclaredUnresolvedName",
      "info" : "SimpleName[10487-10524]:SimpleName[10487-10524]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[10525-10536]:SingleVariableDeclaration[10525-10536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10538-10781]:Block[10538-10781]"
    }, {
      "left" : "if (type.isUnionType())",
      "right" : "if (type.isUnionType())",
      "info" : "IfStatement[10544-10741]:IfStatement[10544-10741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10568-10741]:Block[10568-10741]"
    }, {
      "left" : "for (JSType alt : type.toMaybeUnionType().getAlternates())",
      "right" : "for (JSType alt : type.toMaybeUnionType().getAlternates())",
      "info" : "EnhancedForStatement[10576-10735]:EnhancedForStatement[10576-10735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10635-10735]:Block[10635-10735]"
    }, {
      "left" : "if (containsForwardDeclaredUnresolvedName(alt))",
      "right" : "if (containsForwardDeclaredUnresolvedName(alt))",
      "info" : "IfStatement[10645-10727]:IfStatement[10645-10727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10693-10727]:Block[10693-10727]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10705-10717]:ReturnStatement[10705-10717]"
    }, {
      "left" : "return type.isNoResolvedType();",
      "right" : "return type.isNoResolvedType();",
      "info" : "ReturnStatement[10746-10777]:ReturnStatement[10746-10777]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10890-10894]:PrimitiveType[10890-10894]"
    }, {
      "left" : "expectSwitchMatchesCase",
      "right" : "expectSwitchMatchesCase",
      "info" : "SimpleName[10895-10918]:SimpleName[10895-10918]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10919-10934]:SingleVariableDeclaration[10919-10934]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10936-10942]:SingleVariableDeclaration[10936-10942]"
    }, {
      "left" : "JSType switchType",
      "right" : "JSType switchType",
      "info" : "SingleVariableDeclaration[10944-10961]:SingleVariableDeclaration[10944-10961]"
    }, {
      "left" : "JSType caseType",
      "right" : "JSType caseType",
      "info" : "SingleVariableDeclaration[10969-10984]:SingleVariableDeclaration[10969-10984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10986-11517]:Block[10986-11517]"
    }, {
      "left" : "if (!switchType.canTestForShallowEqualityWith(caseType) &&\n        (caseType.autoboxesTo() == null ||\n            !caseType.autoboxesTo().isSubtype(switchType)))",
      "right" : "if (!switchType.canTestForShallowEqualityWith(caseType) &&\n        (caseType.autoboxesTo() == null ||\n            !caseType.autoboxesTo().isSubtype(switchType)))",
      "info" : "IfStatement[11224-11513]:IfStatement[11224-11513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11386-11513]:Block[11386-11513]"
    }, {
      "left" : "mismatch(t, n.getFirstChild(),\n          \"case expression doesn't match switch\",\n          caseType, switchType);",
      "right" : "mismatch(t, n.getFirstChild(),\n          \"case expression doesn't match switch\",\n          caseType, switchType);",
      "info" : "ExpressionStatement[11394-11507]:ExpressionStatement[11394-11507]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11911-11915]:PrimitiveType[11911-11915]"
    }, {
      "left" : "expectIndexMatch",
      "right" : "expectIndexMatch",
      "info" : "SimpleName[11916-11932]:SimpleName[11916-11932]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11933-11948]:SingleVariableDeclaration[11933-11948]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11950-11956]:SingleVariableDeclaration[11950-11956]"
    }, {
      "left" : "JSType objType",
      "right" : "JSType objType",
      "info" : "SingleVariableDeclaration[11958-11972]:SingleVariableDeclaration[11958-11972]"
    }, {
      "left" : "JSType indexType",
      "right" : "JSType indexType",
      "info" : "SingleVariableDeclaration[11998-12014]:SingleVariableDeclaration[11998-12014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12016-13068]:Block[12016-13068]"
    }, {
      "left" : "Preconditions.checkState(n.isGetElem());",
      "right" : "Preconditions.checkState(n.isGetElem());",
      "info" : "ExpressionStatement[12022-12062]:ExpressionStatement[12022-12062]"
    }, {
      "left" : "Node indexNode = n.getLastChild();",
      "right" : "Node indexNode = n.getLastChild();",
      "info" : "VariableDeclarationStatement[12067-12101]:VariableDeclarationStatement[12067-12101]"
    }, {
      "left" : "if (objType.isStruct())",
      "right" : "if (objType.isStruct())",
      "info" : "IfStatement[12106-12264]:IfStatement[12106-12264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12130-12264]:Block[12130-12264]"
    }, {
      "left" : "report(JSError.make(t.getSourceName(), indexNode,\n                          ILLEGAL_PROPERTY_ACCESS, \"'[]'\", \"struct\"));",
      "right" : "report(JSError.make(t.getSourceName(), indexNode,\n                          ILLEGAL_PROPERTY_ACCESS, \"'[]'\", \"struct\"));",
      "info" : "ExpressionStatement[12138-12258]:ExpressionStatement[12138-12258]"
    }, {
      "left" : "if (objType.isUnknownType())",
      "right" : "if (objType.isUnknownType())",
      "info" : "IfStatement[12269-13064]:IfStatement[12269-13064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12298-12377]:Block[12298-12377]"
    }, {
      "left" : "expectStringOrNumber(t, indexNode, indexType, \"property access\");",
      "right" : "expectStringOrNumber(t, indexNode, indexType, \"property access\");",
      "info" : "ExpressionStatement[12306-12371]:ExpressionStatement[12306-12371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12383-13064]:Block[12383-13064]"
    }, {
      "left" : "ObjectType dereferenced = objType.dereference();",
      "right" : "ObjectType dereferenced = objType.dereference();",
      "info" : "VariableDeclarationStatement[12391-12439]:VariableDeclarationStatement[12391-12439]"
    }, {
      "left" : "if (dereferenced != null && dereferenced.getIndexType() != null)",
      "right" : "if (dereferenced != null && dereferenced.getIndexType() != null)",
      "info" : "IfStatement[12446-13058]:IfStatement[12446-13058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12511-12638]:Block[12511-12638]"
    }, {
      "left" : "expectCanAssignTo(t, indexNode, indexType, dereferenced.getIndexType(),\n            \"restricted index type\");",
      "right" : "expectCanAssignTo(t, indexNode, indexType, dereferenced.getIndexType(),\n            \"restricted index type\");",
      "info" : "ExpressionStatement[12521-12630]:ExpressionStatement[12521-12630]"
    }, {
      "left" : "if (dereferenced != null && dereferenced.isArrayType())",
      "right" : "if (dereferenced != null && dereferenced.isArrayType())",
      "info" : "IfStatement[12644-13058]:IfStatement[12644-13058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12700-12772]:Block[12700-12772]"
    }, {
      "left" : "expectNumber(t, indexNode, indexType, \"array access\");",
      "right" : "expectNumber(t, indexNode, indexType, \"array access\");",
      "info" : "ExpressionStatement[12710-12764]:ExpressionStatement[12710-12764]"
    }, {
      "left" : "if (objType.matchesObjectContext())",
      "right" : "if (objType.matchesObjectContext())",
      "info" : "IfStatement[12778-13058]:IfStatement[12778-13058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12814-12889]:Block[12814-12889]"
    }, {
      "left" : "expectString(t, indexNode, indexType, \"property access\");",
      "right" : "expectString(t, indexNode, indexType, \"property access\");",
      "info" : "ExpressionStatement[12824-12881]:ExpressionStatement[12824-12881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12895-13058]:Block[12895-13058]"
    }, {
      "left" : "mismatch(t, n, \"only arrays or objects can be accessed\",\n            objType,\n            typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));",
      "right" : "mismatch(t, n, \"only arrays or objects can be accessed\",\n            objType,\n            typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));",
      "info" : "ExpressionStatement[12905-13050]:ExpressionStatement[12905-13050]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13565-13572]:PrimitiveType[13565-13572]"
    }, {
      "left" : "expectCanAssignToPropertyOf",
      "right" : "expectCanAssignToPropertyOf",
      "info" : "SimpleName[13573-13600]:SimpleName[13573-13600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13696-14709]:Block[13696-14511]"
    }, {
      "left" : "if (!leftType.isNoType() && !rightType.canAssignTo(leftType))",
      "right" : "if (!leftType.isNoType() && !rightType.canAssignTo(leftType))",
      "info" : "IfStatement[13762-14688]:IfStatement[13762-14490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13824-14688]:Block[13824-14490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14014-14662]:Block[14080-14306]"
    }, {
      "left" : "JSType ownerType = getJSType(owner);",
      "right" : "JSType ownerType = getJSType(owner);",
      "info" : "VariableDeclarationStatement[14186-14222]:VariableDeclarationStatement[13996-14032]"
    }, {
      "left" : "if (ownerType.isFunctionPrototypeType())",
      "right" : "if (ownerType.isFunctionPrototypeType())",
      "info" : "IfStatement[14229-14496]:IfStatement[14039-14306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14270-14496]:Block[14264-14298]"
    }, {
      "left" : "FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();",
      "right" : "FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();",
      "info" : "VariableDeclarationStatement[14280-14347]:VariableDeclarationStatement[14090-14157]"
    }, {
      "left" : "if (ownerFn.isInterface() &&\n            rightType.isFunctionType() && leftType.isFunctionType())",
      "right" : "if (ownerFn.isInterface() &&\n            rightType.isFunctionType() && leftType.isFunctionType())",
      "info" : "IfStatement[14356-14488]:IfStatement[14166-14298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14466-14478]:ReturnStatement[14276-14288]"
    }, {
      "left" : "mismatch(t, n,\n          \"assignment to property \" + propName + \" of \" +\n          getReadableJSTypeName(owner, true),\n          rightType, leftType);",
      "right" : "mismatch(t, n,\n          \"assignment to property \" + propName + \" of \" +\n          getReadableJSTypeName(owner, true),\n          rightType, leftType);",
      "info" : "ExpressionStatement[14504-14654]:ExpressionStatement[14314-14464]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14669-14682]:ReturnStatement[14471-14484]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14693-14705]:ReturnStatement[14495-14507]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15151-15158]:PrimitiveType[14953-14960]"
    }, {
      "left" : "expectCanAssignTo",
      "right" : "expectCanAssignTo",
      "info" : "SimpleName[15159-15176]:SimpleName[14961-14978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15255-15593]:Block[15057-15197]"
    }, {
      "left" : "if (!rightType.canAssignTo(leftType))",
      "right" : "if (!rightType.canAssignTo(leftType))",
      "info" : "IfStatement[15261-15572]:IfStatement[15063-15176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15299-15572]:Block[15101-15176]"
    }, {
      "left" : "mismatch(t, n, msg, rightType, leftType);",
      "right" : "mismatch(t, n, msg, rightType, leftType);",
      "info" : "ExpressionStatement[15497-15538]:ExpressionStatement[15109-15150]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15553-15566]:ReturnStatement[15157-15170]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15577-15589]:ReturnStatement[15181-15193]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16036-16040]:PrimitiveType[15640-15644]"
    }, {
      "left" : "expectArgumentMatchesParameter",
      "right" : "expectArgumentMatchesParameter",
      "info" : "SimpleName[16041-16071]:SimpleName[15645-15675]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[16072-16087]:SingleVariableDeclaration[15676-15691]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16089-16095]:SingleVariableDeclaration[15693-15699]"
    }, {
      "left" : "JSType argType",
      "right" : "JSType argType",
      "info" : "SingleVariableDeclaration[16097-16111]:SingleVariableDeclaration[15701-15715]"
    }, {
      "left" : "JSType paramType",
      "right" : "JSType paramType",
      "info" : "SingleVariableDeclaration[16119-16135]:SingleVariableDeclaration[15723-15739]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[16137-16150]:SingleVariableDeclaration[15741-15754]"
    }, {
      "left" : "int ordinal",
      "right" : "int ordinal",
      "info" : "SingleVariableDeclaration[16152-16163]:SingleVariableDeclaration[15756-15767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16165-16455]:Block[15769-16059]"
    }, {
      "left" : "if (!argType.canAssignTo(paramType))",
      "right" : "if (!argType.canAssignTo(paramType))",
      "info" : "IfStatement[16171-16451]:IfStatement[15775-16055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16208-16451]:Block[15812-16055]"
    }, {
      "left" : "mismatch(t, n,\n          String.format(\"actual parameter %d of %s does not match \" +\n              \"formal parameter\", ordinal,\n              getReadableJSTypeName(callNode.getFirstChild(), false)),\n          argType, paramType);",
      "right" : "mismatch(t, n,\n          String.format(\"actual parameter %d of %s does not match \" +\n              \"formal parameter\", ordinal,\n              getReadableJSTypeName(callNode.getFirstChild(), false)),\n          argType, paramType);",
      "info" : "ExpressionStatement[16216-16445]:ExpressionStatement[15820-16049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16944-16948]:PrimitiveType[16548-16552]"
    }, {
      "left" : "expectCanOverride",
      "right" : "expectCanOverride",
      "info" : "SimpleName[16949-16966]:SimpleName[16553-16570]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[16967-16982]:SingleVariableDeclaration[16571-16586]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16984-16990]:SingleVariableDeclaration[16588-16594]"
    }, {
      "left" : "JSType overridingType",
      "right" : "JSType overridingType",
      "info" : "SingleVariableDeclaration[16992-17013]:SingleVariableDeclaration[16596-16617]"
    }, {
      "left" : "JSType hiddenType",
      "right" : "JSType hiddenType",
      "info" : "SingleVariableDeclaration[17021-17038]:SingleVariableDeclaration[16625-16642]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[17040-17059]:SingleVariableDeclaration[16644-16663]"
    }, {
      "left" : "JSType ownerType",
      "right" : "JSType ownerType",
      "info" : "SingleVariableDeclaration[17061-17077]:SingleVariableDeclaration[16665-16681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17079-17363]:Block[16683-16967]"
    }, {
      "left" : "if (!overridingType.canAssignTo(hiddenType))",
      "right" : "if (!overridingType.canAssignTo(hiddenType))",
      "info" : "IfStatement[17085-17359]:IfStatement[16689-16963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17130-17359]:Block[16734-16963]"
    }, {
      "left" : "registerMismatch(overridingType, hiddenType,\n          report(t.makeError(n, HIDDEN_PROPERTY_MISMATCH, propertyName,\n            ownerType.toString(), hiddenType.toString(),\n            overridingType.toString())));",
      "right" : "registerMismatch(overridingType, hiddenType,\n          report(t.makeError(n, HIDDEN_PROPERTY_MISMATCH, propertyName,\n            ownerType.toString(), hiddenType.toString(),\n            overridingType.toString())));",
      "info" : "ExpressionStatement[17138-17353]:ExpressionStatement[16742-16957]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17653-17657]:PrimitiveType[17257-17261]"
    }, {
      "left" : "expectSuperType",
      "right" : "expectSuperType",
      "info" : "SimpleName[17658-17673]:SimpleName[17262-17277]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17674-17689]:SingleVariableDeclaration[17278-17293]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17691-17697]:SingleVariableDeclaration[17295-17301]"
    }, {
      "left" : "ObjectType superObject",
      "right" : "ObjectType superObject",
      "info" : "SingleVariableDeclaration[17699-17721]:SingleVariableDeclaration[17303-17325]"
    }, {
      "left" : "ObjectType subObject",
      "right" : "ObjectType subObject",
      "info" : "SingleVariableDeclaration[17729-17749]:SingleVariableDeclaration[17333-17353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17751-18631]:Block[17355-18235]"
    }, {
      "left" : "FunctionType subCtor = subObject.getConstructor();",
      "right" : "FunctionType subCtor = subObject.getConstructor();",
      "info" : "VariableDeclarationStatement[17757-17807]:VariableDeclarationStatement[17361-17411]"
    }, {
      "left" : "ObjectType implicitProto = subObject.getImplicitPrototype();",
      "right" : "ObjectType implicitProto = subObject.getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[17812-17872]:VariableDeclarationStatement[17416-17476]"
    }, {
      "left" : "ObjectType declaredSuper =\n        implicitProto == null ? null : implicitProto.getImplicitPrototype();",
      "right" : "ObjectType declaredSuper =\n        implicitProto == null ? null : implicitProto.getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[17877-17980]:VariableDeclarationStatement[17481-17584]"
    }, {
      "left" : "if (declaredSuper != null &&\n        !(superObject instanceof UnknownType) &&\n        !declaredSuper.isEquivalentTo(superObject))",
      "right" : "if (declaredSuper != null &&\n        !(superObject instanceof UnknownType) &&\n        !declaredSuper.isEquivalentTo(superObject))",
      "info" : "IfStatement[17985-18627]:IfStatement[17589-18231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18115-18627]:Block[17719-18231]"
    }, {
      "left" : "if (declaredSuper.isEquivalentTo(getNativeType(OBJECT_TYPE)))",
      "right" : "if (declaredSuper.isEquivalentTo(getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[18123-18489]:IfStatement[17727-18093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18185-18336]:Block[17789-17940]"
    }, {
      "left" : "registerMismatch(superObject, declaredSuper, report(\n            t.makeError(n, MISSING_EXTENDS_TAG_WARNING, subObject.toString())));",
      "right" : "registerMismatch(superObject, declaredSuper, report(\n            t.makeError(n, MISSING_EXTENDS_TAG_WARNING, subObject.toString())));",
      "info" : "ExpressionStatement[18195-18328]:ExpressionStatement[17799-17932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18342-18489]:Block[17946-18093]"
    }, {
      "left" : "mismatch(t.getSourceName(), n,\n            \"mismatch in declaration of superclass type\",\n            superObject, declaredSuper);",
      "right" : "mismatch(t.getSourceName(), n,\n            \"mismatch in declaration of superclass type\",\n            superObject, declaredSuper);",
      "info" : "ExpressionStatement[18352-18481]:ExpressionStatement[17956-18085]"
    }, {
      "left" : "if (!subCtor.hasCachedValues())",
      "right" : "if (!subCtor.hasCachedValues())",
      "info" : "IfStatement[18530-18621]:IfStatement[18134-18225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18562-18621]:Block[18166-18225]"
    }, {
      "left" : "subCtor.setPrototypeBasedOn(superObject);",
      "right" : "subCtor.setPrototypeBasedOn(superObject);",
      "info" : "ExpressionStatement[18572-18613]:ExpressionStatement[18176-18217]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18965-18969]:PrimitiveType[18569-18573]"
    }, {
      "left" : "expectCanCast",
      "right" : "expectCanCast",
      "info" : "SimpleName[18970-18983]:SimpleName[18574-18587]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18984-18999]:SingleVariableDeclaration[18588-18603]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19001-19007]:SingleVariableDeclaration[18605-18611]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[19009-19020]:SingleVariableDeclaration[18613-18624]"
    }, {
      "left" : "JSType castType",
      "right" : "JSType castType",
      "info" : "SingleVariableDeclaration[19022-19037]:SingleVariableDeclaration[18626-18641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19039-19351]:Block[18643-18955]"
    }, {
      "left" : "castType = castType.restrictByNotNullOrUndefined();",
      "right" : "castType = castType.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[19045-19096]:ExpressionStatement[18649-18700]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[19101-19144]:ExpressionStatement[18705-18748]"
    }, {
      "left" : "if (!type.canAssignTo(castType) && !castType.canAssignTo(type))",
      "right" : "if (!type.canAssignTo(castType) && !castType.canAssignTo(type))",
      "info" : "IfStatement[19150-19347]:IfStatement[18754-18951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19214-19347]:Block[18818-18951]"
    }, {
      "left" : "registerMismatch(type, castType, report(t.makeError(n, INVALID_CAST,\n          castType.toString(), type.toString())));",
      "right" : "registerMismatch(type, castType, report(t.makeError(n, INVALID_CAST,\n          castType.toString(), type.toString())));",
      "info" : "ExpressionStatement[19222-19341]:ExpressionStatement[18826-18945]"
    }, {
      "left" : "Var",
      "right" : "Var",
      "info" : "SimpleType[20010-20013]:SimpleType[19614-19617]"
    }, {
      "left" : "expectUndeclaredVariable",
      "right" : "expectUndeclaredVariable",
      "info" : "SimpleName[20014-20038]:SimpleName[19618-19642]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[20039-20056]:SingleVariableDeclaration[19643-19660]"
    }, {
      "left" : "CompilerInput input",
      "right" : "CompilerInput input",
      "info" : "SingleVariableDeclaration[20058-20077]:SingleVariableDeclaration[19662-19681]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20085-20091]:SingleVariableDeclaration[19689-19695]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20093-20104]:SingleVariableDeclaration[19697-19708]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[20106-20113]:SingleVariableDeclaration[19710-19717]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[20115-20134]:SingleVariableDeclaration[19719-19738]"
    }, {
      "left" : "JSType newType",
      "right" : "JSType newType",
      "info" : "SingleVariableDeclaration[20136-20150]:SingleVariableDeclaration[19740-19754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20152-22352]:Block[19756-21956]"
    }, {
      "left" : "Var newVar = var;",
      "right" : "Var newVar = var;",
      "info" : "VariableDeclarationStatement[20158-20175]:VariableDeclarationStatement[19762-19779]"
    }, {
      "left" : "boolean allowDupe = false;",
      "right" : "boolean allowDupe = false;",
      "info" : "VariableDeclarationStatement[20180-20206]:VariableDeclarationStatement[19784-19810]"
    }, {
      "left" : "if (n.isGetProp() ||\n        NodeUtil.isObjectLitKey(n, parent))",
      "right" : "if (n.isGetProp() ||\n        NodeUtil.isObjectLitKey(n, parent))",
      "info" : "IfStatement[20211-20486]:IfStatement[19815-20090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20276-20486]:Block[19880-20090]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20284-20318]:VariableDeclarationStatement[19888-19922]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[20325-20390]:IfStatement[19929-19994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20343-20390]:Block[19947-19994]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[20353-20382]:ExpressionStatement[19957-19986]"
    }, {
      "left" : "allowDupe =\n          info != null && info.getSuppressions().contains(\"duplicate\");",
      "right" : "allowDupe =\n          info != null && info.getSuppressions().contains(\"duplicate\");",
      "info" : "ExpressionStatement[20397-20480]:ExpressionStatement[20001-20084]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[20492-20523]:VariableDeclarationStatement[20096-20127]"
    }, {
      "left" : "if (varType != null &&\n        varType != typeRegistry.getNativeType(UNKNOWN_TYPE) &&\n        newType != null &&\n        newType != typeRegistry.getNativeType(UNKNOWN_TYPE))",
      "right" : "if (varType != null &&\n        varType != typeRegistry.getNativeType(UNKNOWN_TYPE) &&\n        newType != null &&\n        newType != typeRegistry.getNativeType(UNKNOWN_TYPE))",
      "info" : "IfStatement[20701-22328]:IfStatement[20305-21932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20875-22328]:Block[20479-21932]"
    }, {
      "left" : "if (var.input == null)",
      "right" : "if (var.input == null)",
      "info" : "IfStatement[21240-22322]:IfStatement[20844-21926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21263-21687]:Block[20867-21291]"
    }, {
      "left" : "Scope s = var.getScope();",
      "right" : "Scope s = var.getScope();",
      "info" : "VariableDeclarationStatement[21273-21298]:VariableDeclarationStatement[20877-20902]"
    }, {
      "left" : "s.undeclare(var);",
      "right" : "s.undeclare(var);",
      "info" : "ExpressionStatement[21307-21324]:ExpressionStatement[20911-20928]"
    }, {
      "left" : "newVar = s.declare(variableName, n, varType, input, false);",
      "right" : "newVar = s.declare(variableName, n, varType, input, false);",
      "info" : "ExpressionStatement[21333-21392]:ExpressionStatement[20937-20996]"
    }, {
      "left" : "n.setJSType(varType);",
      "right" : "n.setJSType(varType);",
      "info" : "ExpressionStatement[21402-21423]:ExpressionStatement[21006-21027]"
    }, {
      "left" : "if (parent.isVar())",
      "right" : "if (parent.isVar())",
      "info" : "IfStatement[21432-21679]:IfStatement[21036-21283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21452-21568]:Block[21056-21172]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[21464-21558]:IfStatement[21068-21162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21495-21558]:Block[21099-21162]"
    }, {
      "left" : "n.getFirstChild().setJSType(varType);",
      "right" : "n.getFirstChild().setJSType(varType);",
      "info" : "ExpressionStatement[21509-21546]:ExpressionStatement[21113-21150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21574-21679]:Block[21178-21283]"
    }, {
      "left" : "Preconditions.checkState(parent.isFunction());",
      "right" : "Preconditions.checkState(parent.isFunction());",
      "info" : "ExpressionStatement[21586-21632]:ExpressionStatement[21190-21236]"
    }, {
      "left" : "parent.setJSType(varType);",
      "right" : "parent.setJSType(varType);",
      "info" : "ExpressionStatement[21643-21669]:ExpressionStatement[21247-21273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21693-22322]:Block[21297-21926]"
    }, {
      "left" : "if (!(allowDupe ||\n              var.getParentNode().isExprResult()) ||\n            !newType.isEquivalentTo(varType))",
      "right" : "if (!(allowDupe ||\n              var.getParentNode().isExprResult()) ||\n            !newType.isEquivalentTo(varType))",
      "info" : "IfStatement[21959-22314]:IfStatement[21563-21918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22077-22314]:Block[21681-21918]"
    }, {
      "left" : "report(JSError.make(sourceName, n, DUP_VAR_DECLARATION,\n              variableName, newType.toString(), var.getInputName(),\n              String.valueOf(var.nameNode.getLineno()),\n              varType.toString()));",
      "right" : "report(JSError.make(sourceName, n, DUP_VAR_DECLARATION,\n              variableName, newType.toString(), var.getInputName(),\n              String.valueOf(var.nameNode.getLineno()),\n              varType.toString()));",
      "info" : "ExpressionStatement[22089-22304]:ExpressionStatement[21693-21908]"
    }, {
      "left" : "return newVar;",
      "right" : "return newVar;",
      "info" : "ReturnStatement[22334-22348]:ReturnStatement[21938-21952]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22482-22486]:PrimitiveType[22086-22090]"
    }, {
      "left" : "expectAllInterfaceProperties",
      "right" : "expectAllInterfaceProperties",
      "info" : "SimpleName[22487-22515]:SimpleName[22091-22119]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[22516-22531]:SingleVariableDeclaration[22120-22135]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22533-22539]:SingleVariableDeclaration[22137-22143]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[22547-22564]:SingleVariableDeclaration[22151-22168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22566-22943]:Block[22170-22547]"
    }, {
      "left" : "ObjectType instance = type.getInstanceType();",
      "right" : "ObjectType instance = type.getInstanceType();",
      "info" : "VariableDeclarationStatement[22572-22617]:VariableDeclarationStatement[22176-22221]"
    }, {
      "left" : "for (ObjectType implemented : type.getAllImplementedInterfaces())",
      "right" : "for (ObjectType implemented : type.getAllImplementedInterfaces())",
      "info" : "EnhancedForStatement[22622-22939]:EnhancedForStatement[22226-22543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22688-22939]:Block[22292-22543]"
    }, {
      "left" : "if (implemented.getImplicitPrototype() != null)",
      "right" : "if (implemented.getImplicitPrototype() != null)",
      "info" : "IfStatement[22696-22933]:IfStatement[22300-22537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22744-22933]:Block[22348-22537]"
    }, {
      "left" : "for (String prop :\n             implemented.getImplicitPrototype().getOwnPropertyNames())",
      "right" : "for (String prop :\n             implemented.getImplicitPrototype().getOwnPropertyNames())",
      "info" : "EnhancedForStatement[22754-22925]:EnhancedForStatement[22358-22529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22844-22925]:Block[22448-22529]"
    }, {
      "left" : "expectInterfaceProperty(t, n, instance, implemented, prop);",
      "right" : "expectInterfaceProperty(t, n, instance, implemented, prop);",
      "info" : "ExpressionStatement[22856-22915]:ExpressionStatement[22460-22519]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23072-23079]:Modifier[22676-22683]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23080-23084]:PrimitiveType[22684-22688]"
    }, {
      "left" : "expectInterfaceProperty",
      "right" : "expectInterfaceProperty",
      "info" : "SimpleName[23085-23108]:SimpleName[22689-22712]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[23109-23124]:SingleVariableDeclaration[22713-22728]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23126-23132]:SingleVariableDeclaration[22730-22736]"
    }, {
      "left" : "ObjectType instance",
      "right" : "ObjectType instance",
      "info" : "SingleVariableDeclaration[23140-23159]:SingleVariableDeclaration[22744-22763]"
    }, {
      "left" : "ObjectType implementedInterface",
      "right" : "ObjectType implementedInterface",
      "info" : "SingleVariableDeclaration[23161-23192]:SingleVariableDeclaration[22765-22796]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[23194-23205]:SingleVariableDeclaration[22798-22809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23207-24618]:Block[22811-24222]"
    }, {
      "left" : "StaticSlot<JSType> propSlot = instance.getSlot(prop);",
      "right" : "StaticSlot<JSType> propSlot = instance.getSlot(prop);",
      "info" : "VariableDeclarationStatement[23213-23266]:VariableDeclarationStatement[22817-22870]"
    }, {
      "left" : "if (propSlot == null)",
      "right" : "if (propSlot == null)",
      "info" : "IfStatement[23271-24614]:IfStatement[22875-24218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23293-23648]:Block[22897-23252]"
    }, {
      "left" : "String sourceName = n.getSourceFileName();",
      "right" : "String sourceName = n.getSourceFileName();",
      "info" : "VariableDeclarationStatement[23326-23368]:VariableDeclarationStatement[22930-22972]"
    }, {
      "left" : "sourceName = sourceName == null ? \"\" : sourceName;",
      "right" : "sourceName = sourceName == null ? \"\" : sourceName;",
      "info" : "ExpressionStatement[23375-23425]:ExpressionStatement[22979-23029]"
    }, {
      "left" : "registerMismatch(instance, implementedInterface,\n          report(JSError.make(sourceName, n,\n          INTERFACE_METHOD_NOT_IMPLEMENTED,\n          prop, implementedInterface.toString(), instance.toString())));",
      "right" : "registerMismatch(instance, implementedInterface,\n          report(JSError.make(sourceName, n,\n          INTERFACE_METHOD_NOT_IMPLEMENTED,\n          prop, implementedInterface.toString(), instance.toString())));",
      "info" : "ExpressionStatement[23432-23642]:ExpressionStatement[23036-23246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23654-24614]:Block[23258-24218]"
    }, {
      "left" : "Node propNode = propSlot.getDeclaration() == null ?\n          null : propSlot.getDeclaration().getNode();",
      "right" : "Node propNode = propSlot.getDeclaration() == null ?\n          null : propSlot.getDeclaration().getNode();",
      "info" : "VariableDeclarationStatement[23662-23767]:VariableDeclarationStatement[23266-23371]"
    }, {
      "left" : "propNode = propNode == null ? n : propNode;",
      "right" : "propNode = propNode == null ? n : propNode;",
      "info" : "ExpressionStatement[23869-23912]:ExpressionStatement[23473-23516]"
    }, {
      "left" : "JSType found = propSlot.getType();",
      "right" : "JSType found = propSlot.getType();",
      "info" : "VariableDeclarationStatement[23920-23954]:VariableDeclarationStatement[23524-23558]"
    }, {
      "left" : "JSType required\n          = implementedInterface.getImplicitPrototype().getPropertyType(prop);",
      "right" : "JSType required\n          = implementedInterface.getImplicitPrototype().getPropertyType(prop);",
      "info" : "VariableDeclarationStatement[23961-24055]:VariableDeclarationStatement[23565-23659]"
    }, {
      "left" : "found = found.restrictByNotNullOrUndefined();",
      "right" : "found = found.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[24062-24107]:ExpressionStatement[23666-23711]"
    }, {
      "left" : "required = required.restrictByNotNullOrUndefined();",
      "right" : "required = required.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[24114-24165]:ExpressionStatement[23718-23769]"
    }, {
      "left" : "if (!found.canAssignTo(required))",
      "right" : "if (!found.canAssignTo(required))",
      "info" : "IfStatement[24172-24608]:IfStatement[23776-24212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24206-24608]:Block[23810-24212]"
    }, {
      "left" : "FunctionType constructor =\n            implementedInterface.toObjectType().getConstructor();",
      "right" : "FunctionType constructor =\n            implementedInterface.toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[24264-24356]:VariableDeclarationStatement[23868-23960]"
    }, {
      "left" : "registerMismatch(found, required, report(t.makeError(propNode,\n            HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,\n            constructor.getTopMostDefiningType(prop).toString(),\n            required.toString(), found.toString())));",
      "right" : "registerMismatch(found, required, report(t.makeError(propNode,\n            HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,\n            constructor.getTopMostDefiningType(prop).toString(),\n            required.toString(), found.toString())));",
      "info" : "ExpressionStatement[24365-24600]:ExpressionStatement[23969-24204]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24662-24669]:Modifier[24266-24273]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24670-24674]:PrimitiveType[24274-24278]"
    }, {
      "left" : "mismatch",
      "right" : "mismatch",
      "info" : "SimpleName[24675-24683]:SimpleName[24279-24287]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[24684-24699]:SingleVariableDeclaration[24288-24303]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24701-24707]:SingleVariableDeclaration[24305-24311]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[24733-24743]:SingleVariableDeclaration[24337-24347]"
    }, {
      "left" : "JSType found",
      "right" : "JSType found",
      "info" : "SingleVariableDeclaration[24745-24757]:SingleVariableDeclaration[24349-24361]"
    }, {
      "left" : "JSType required",
      "right" : "JSType required",
      "info" : "SingleVariableDeclaration[24759-24774]:SingleVariableDeclaration[24363-24378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24776-24839]:Block[24380-24443]"
    }, {
      "left" : "mismatch(t.getSourceName(), n, msg, found, required);",
      "right" : "mismatch(t.getSourceName(), n, msg, found, required);",
      "info" : "ExpressionStatement[24782-24835]:ExpressionStatement[24386-24439]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24843-24850]:Modifier[24447-24454]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24851-24855]:PrimitiveType[24455-24459]"
    }, {
      "left" : "mismatch",
      "right" : "mismatch",
      "info" : "SimpleName[24856-24864]:SimpleName[24460-24468]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[24865-24880]:SingleVariableDeclaration[24469-24484]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24882-24888]:SingleVariableDeclaration[24486-24492]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[24914-24924]:SingleVariableDeclaration[24518-24528]"
    }, {
      "left" : "JSType found",
      "right" : "JSType found",
      "info" : "SingleVariableDeclaration[24926-24938]:SingleVariableDeclaration[24530-24542]"
    }, {
      "left" : "JSTypeNative required",
      "right" : "JSTypeNative required",
      "info" : "SingleVariableDeclaration[24940-24961]:SingleVariableDeclaration[24544-24565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24963-25025]:Block[24567-24629]"
    }, {
      "left" : "mismatch(t, n, msg, found, getNativeType(required));",
      "right" : "mismatch(t, n, msg, found, getNativeType(required));",
      "info" : "ExpressionStatement[24969-25021]:ExpressionStatement[24573-24625]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25029-25036]:Modifier[24633-24640]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25037-25041]:PrimitiveType[24641-24645]"
    }, {
      "left" : "mismatch",
      "right" : "mismatch",
      "info" : "SimpleName[25042-25050]:SimpleName[24646-24654]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[25051-25068]:SingleVariableDeclaration[24655-24672]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25070-25076]:SingleVariableDeclaration[24674-24680]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[25102-25112]:SingleVariableDeclaration[24706-24716]"
    }, {
      "left" : "JSType found",
      "right" : "JSType found",
      "info" : "SingleVariableDeclaration[25114-25126]:SingleVariableDeclaration[24718-24730]"
    }, {
      "left" : "JSType required",
      "right" : "JSType required",
      "info" : "SingleVariableDeclaration[25128-25143]:SingleVariableDeclaration[24732-24747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25145-25322]:Block[24749-24926]"
    }, {
      "left" : "registerMismatch(found, required, report(\n        JSError.make(sourceName, n, TYPE_MISMATCH_WARNING,\n                     formatFoundRequired(msg, found, required))));",
      "right" : "registerMismatch(found, required, report(\n        JSError.make(sourceName, n, TYPE_MISMATCH_WARNING,\n                     formatFoundRequired(msg, found, required))));",
      "info" : "ExpressionStatement[25151-25318]:ExpressionStatement[24755-24922]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25326-25333]:Modifier[24930-24937]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25334-25338]:PrimitiveType[24938-24942]"
    }, {
      "left" : "registerMismatch",
      "right" : "registerMismatch",
      "info" : "SimpleName[25339-25355]:SimpleName[24943-24959]"
    }, {
      "left" : "JSType found",
      "right" : "JSType found",
      "info" : "SingleVariableDeclaration[25356-25368]:SingleVariableDeclaration[24960-24972]"
    }, {
      "left" : "JSType required",
      "right" : "JSType required",
      "info" : "SingleVariableDeclaration[25370-25385]:SingleVariableDeclaration[24974-24989]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[25387-25400]:SingleVariableDeclaration[24991-25004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25402-26372]:Block[25006-25976]"
    }, {
      "left" : "found = found.restrictByNotNullOrUndefined();",
      "right" : "found = found.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[25517-25562]:ExpressionStatement[25121-25166]"
    }, {
      "left" : "required = required.restrictByNotNullOrUndefined();",
      "right" : "required = required.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[25567-25618]:ExpressionStatement[25171-25222]"
    }, {
      "left" : "if (found.canAssignTo(required) || required.canAssignTo(found))",
      "right" : "if (found.canAssignTo(required) || required.canAssignTo(found))",
      "info" : "IfStatement[25623-25708]:IfStatement[25227-25312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25687-25708]:Block[25291-25312]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25695-25702]:ReturnStatement[25299-25306]"
    }, {
      "left" : "mismatches.add(new TypeMismatch(found, required, error));",
      "right" : "mismatches.add(new TypeMismatch(found, required, error));",
      "info" : "ExpressionStatement[25714-25771]:ExpressionStatement[25318-25375]"
    }, {
      "left" : "if (found.isFunctionType() &&\n        required.isFunctionType())",
      "right" : "if (found.isFunctionType() &&\n        required.isFunctionType())",
      "info" : "IfStatement[25776-26368]:IfStatement[25380-25972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25841-26368]:Block[25445-25972]"
    }, {
      "left" : "FunctionType fnTypeA = found.toMaybeFunctionType();",
      "right" : "FunctionType fnTypeA = found.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[25849-25900]:VariableDeclarationStatement[25453-25504]"
    }, {
      "left" : "FunctionType fnTypeB = required.toMaybeFunctionType();",
      "right" : "FunctionType fnTypeB = required.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[25907-25961]:VariableDeclarationStatement[25511-25565]"
    }, {
      "left" : "Iterator<Node> paramItA = fnTypeA.getParameters().iterator();",
      "right" : "Iterator<Node> paramItA = fnTypeA.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[25968-26029]:VariableDeclarationStatement[25572-25633]"
    }, {
      "left" : "Iterator<Node> paramItB = fnTypeB.getParameters().iterator();",
      "right" : "Iterator<Node> paramItB = fnTypeB.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[26036-26097]:VariableDeclarationStatement[25640-25701]"
    }, {
      "left" : "while (paramItA.hasNext() && paramItB.hasNext())",
      "right" : "while (paramItA.hasNext() && paramItB.hasNext())",
      "info" : "WhileStatement[26104-26267]:WhileStatement[25708-25871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26153-26267]:Block[25757-25871]"
    }, {
      "left" : "registerIfMismatch(paramItA.next().getJSType(),\n            paramItB.next().getJSType(), error);",
      "right" : "registerIfMismatch(paramItA.next().getJSType(),\n            paramItB.next().getJSType(), error);",
      "info" : "ExpressionStatement[26163-26259]:ExpressionStatement[25767-25863]"
    }, {
      "left" : "registerIfMismatch(\n          fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);",
      "right" : "registerIfMismatch(\n          fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);",
      "info" : "ExpressionStatement[26275-26362]:ExpressionStatement[25879-25966]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26376-26383]:Modifier[25980-25987]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26384-26388]:PrimitiveType[25988-25992]"
    }, {
      "left" : "registerIfMismatch",
      "right" : "registerIfMismatch",
      "info" : "SimpleName[26389-26407]:SimpleName[25993-26011]"
    }, {
      "left" : "JSType found",
      "right" : "JSType found",
      "info" : "SingleVariableDeclaration[26415-26427]:SingleVariableDeclaration[26019-26031]"
    }, {
      "left" : "JSType required",
      "right" : "JSType required",
      "info" : "SingleVariableDeclaration[26429-26444]:SingleVariableDeclaration[26033-26048]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[26446-26459]:SingleVariableDeclaration[26050-26063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26461-26605]:Block[26065-26209]"
    }, {
      "left" : "if (found != null && required != null &&\n        !found.canAssignTo(required))",
      "right" : "if (found != null && required != null &&\n        !found.canAssignTo(required))",
      "info" : "IfStatement[26467-26601]:IfStatement[26071-26205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26546-26601]:Block[26150-26205]"
    }, {
      "left" : "registerMismatch(found, required, error);",
      "right" : "registerMismatch(found, required, error);",
      "info" : "ExpressionStatement[26554-26595]:ExpressionStatement[26158-26199]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26666-26673]:Modifier[26270-26277]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[26674-26680]:SimpleType[26278-26284]"
    }, {
      "left" : "formatFoundRequired",
      "right" : "formatFoundRequired",
      "info" : "SimpleName[26681-26700]:SimpleName[26285-26304]"
    }, {
      "left" : "String description",
      "right" : "String description",
      "info" : "SingleVariableDeclaration[26701-26719]:SingleVariableDeclaration[26305-26323]"
    }, {
      "left" : "JSType found",
      "right" : "JSType found",
      "info" : "SingleVariableDeclaration[26721-26733]:SingleVariableDeclaration[26325-26337]"
    }, {
      "left" : "JSType required",
      "right" : "JSType required",
      "info" : "SingleVariableDeclaration[26741-26756]:SingleVariableDeclaration[26345-26360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26758-26842]:Block[26362-26446]"
    }, {
      "left" : "return MessageFormat.format(FOUND_REQUIRED, description, found, required);",
      "right" : "return MessageFormat.format(FOUND_REQUIRED, description, found, required);",
      "info" : "ReturnStatement[26764-26838]:ReturnStatement[26368-26442]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27264-27270]:SimpleType[26868-26874]"
    }, {
      "left" : "getReadableJSTypeName",
      "right" : "getReadableJSTypeName",
      "info" : "SimpleName[27271-27292]:SimpleName[26875-26896]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27293-27299]:SingleVariableDeclaration[26897-26903]"
    }, {
      "left" : "boolean dereference",
      "right" : "boolean dereference",
      "info" : "SingleVariableDeclaration[27301-27320]:SingleVariableDeclaration[26905-26924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27322-29086]:Block[26926-28690]"
    }, {
      "left" : "if (n.isGetProp())",
      "right" : "if (n.isGetProp())",
      "info" : "IfStatement[27518-28451]:IfStatement[27122-28055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27537-28451]:Block[27141-28055]"
    }, {
      "left" : "ObjectType objectType = getJSType(n.getFirstChild()).dereference();",
      "right" : "ObjectType objectType = getJSType(n.getFirstChild()).dereference();",
      "info" : "VariableDeclarationStatement[27545-27612]:VariableDeclarationStatement[27149-27216]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[27619-28445]:IfStatement[27223-28049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27643-28445]:Block[27247-28049]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[27653-27700]:VariableDeclarationStatement[27257-27304]"
    }, {
      "left" : "if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface())",
      "right" : "if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface())",
      "info" : "IfStatement[27709-28105]:IfStatement[27313-27709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27807-27916]:Block[27411-27520]"
    }, {
      "left" : "objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);",
      "right" : "objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);",
      "info" : "ExpressionStatement[27819-27906]:ExpressionStatement[27423-27510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27922-28105]:Block[27526-27709]"
    }, {
      "left" : "while (objectType != null && !objectType.hasOwnProperty(propName))",
      "right" : "while (objectType != null && !objectType.hasOwnProperty(propName))",
      "info" : "WhileStatement[27955-28095]:WhileStatement[27559-27699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28022-28095]:Block[27626-27699]"
    }, {
      "left" : "objectType = objectType.getImplicitPrototype();",
      "right" : "objectType = objectType.getImplicitPrototype();",
      "info" : "ExpressionStatement[28036-28083]:ExpressionStatement[27640-27687]"
    }, {
      "left" : "if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType()))",
      "right" : "if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType()))",
      "info" : "IfStatement[28239-28437]:IfStatement[27843-28041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28369-28437]:Block[27973-28041]"
    }, {
      "left" : "return objectType.toString() + \".\" + propName;",
      "right" : "return objectType.toString() + \".\" + propName;",
      "info" : "ReturnStatement[28381-28427]:ReturnStatement[27985-28031]"
    }, {
      "left" : "JSType type = getJSType(n);",
      "right" : "JSType type = getJSType(n);",
      "info" : "VariableDeclarationStatement[28457-28484]:VariableDeclarationStatement[28061-28088]"
    }, {
      "left" : "if (dereference)",
      "right" : "if (dereference)",
      "info" : "IfStatement[28489-28636]:IfStatement[28093-28240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28506-28636]:Block[28110-28240]"
    }, {
      "left" : "ObjectType dereferenced = type.dereference();",
      "right" : "ObjectType dereferenced = type.dereference();",
      "info" : "VariableDeclarationStatement[28514-28559]:VariableDeclarationStatement[28118-28163]"
    }, {
      "left" : "if (dereferenced != null)",
      "right" : "if (dereferenced != null)",
      "info" : "IfStatement[28566-28630]:IfStatement[28170-28234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28592-28630]:Block[28196-28234]"
    }, {
      "left" : "type = dereferenced;",
      "right" : "type = dereferenced;",
      "info" : "ExpressionStatement[28602-28622]:ExpressionStatement[28206-28226]"
    }, {
      "left" : "String qualifiedName = n.getQualifiedName();",
      "right" : "String qualifiedName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[28642-28686]:VariableDeclarationStatement[28246-28290]"
    }, {
      "left" : "if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null))",
      "right" : "if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null))",
      "info" : "IfStatement[28691-29082]:IfStatement[28295-28686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28825-28862]:Block[28429-28466]"
    }, {
      "left" : "return type.toString();",
      "right" : "return type.toString();",
      "info" : "ReturnStatement[28833-28856]:ReturnStatement[28437-28460]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[28868-29082]:IfStatement[28472-28686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28895-28930]:Block[28499-28534]"
    }, {
      "left" : "return qualifiedName;",
      "right" : "return qualifiedName;",
      "info" : "ReturnStatement[28903-28924]:ReturnStatement[28507-28528]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[28936-29082]:IfStatement[28540-28686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28963-29039]:Block[28567-28643]"
    }, {
      "left" : "return \"function\";",
      "right" : "return \"function\";",
      "info" : "ReturnStatement[29015-29033]:ReturnStatement[28619-28637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29045-29082]:Block[28649-28686]"
    }, {
      "left" : "return type.toString();",
      "right" : "return type.toString();",
      "info" : "ReturnStatement[29053-29076]:ReturnStatement[28657-28680]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29196-29203]:Modifier[28800-28807]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[29204-29210]:SimpleType[28808-28814]"
    }, {
      "left" : "getJSType",
      "right" : "getJSType",
      "info" : "SimpleName[29211-29220]:SimpleName[28815-28824]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29221-29227]:SingleVariableDeclaration[28825-28831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29229-29651]:Block[28833-29255]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[29235-29265]:VariableDeclarationStatement[28839-28869]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[29270-29647]:IfStatement[28874-29251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29290-29613]:Block[28894-29217]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[29572-29607]:ReturnStatement[29176-29211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29619-29647]:Block[29223-29251]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[29627-29641]:ReturnStatement[29231-29245]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29655-29662]:Modifier[29259-29266]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[29663-29669]:SimpleType[29267-29273]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[29670-29683]:SimpleName[29274-29287]"
    }, {
      "left" : "JSTypeNative typeId",
      "right" : "JSTypeNative typeId",
      "info" : "SingleVariableDeclaration[29684-29703]:SingleVariableDeclaration[29288-29307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29705-29757]:Block[29309-29361]"
    }, {
      "left" : "return typeRegistry.getNativeType(typeId);",
      "right" : "return typeRegistry.getNativeType(typeId);",
      "info" : "ReturnStatement[29711-29753]:ReturnStatement[29315-29357]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29761-29768]:Modifier[29365-29372]"
    }, {
      "left" : "JSError",
      "right" : "JSError",
      "info" : "SimpleType[29769-29776]:SimpleType[29373-29380]"
    }, {
      "left" : "report",
      "right" : "report",
      "info" : "SimpleName[29777-29783]:SimpleName[29381-29387]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[29784-29797]:SingleVariableDeclaration[29388-29401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29799-29882]:Block[29403-29486]"
    }, {
      "left" : "if (shouldReport)",
      "right" : "if (shouldReport)",
      "info" : "IfStatement[29805-29860]:IfStatement[29409-29464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29823-29860]:Block[29427-29464]"
    }, {
      "left" : "compiler.report(error);",
      "right" : "compiler.report(error);",
      "info" : "ExpressionStatement[29831-29854]:ExpressionStatement[29435-29458]"
    }, {
      "left" : "return error;",
      "right" : "return error;",
      "info" : "ReturnStatement[29865-29878]:ReturnStatement[29469-29482]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30108-30114]:Modifier[29712-29718]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30115-30120]:TYPE_DECLARATION_KIND[29719-29724]"
    }, {
      "left" : "TypeMismatch",
      "right" : "TypeMismatch",
      "info" : "SimpleName[30121-30133]:SimpleName[29725-29737]"
    }, {
      "left" : "TypeMismatch",
      "right" : "TypeMismatch",
      "info" : "SimpleName[30387-30399]:SimpleName[29991-30003]"
    }, {
      "left" : "JSType a",
      "right" : "JSType a",
      "info" : "SingleVariableDeclaration[30400-30408]:SingleVariableDeclaration[30004-30012]"
    }, {
      "left" : "JSType b",
      "right" : "JSType b",
      "info" : "SingleVariableDeclaration[30410-30418]:SingleVariableDeclaration[30014-30022]"
    }, {
      "left" : "JSError src",
      "right" : "JSError src",
      "info" : "SingleVariableDeclaration[30420-30431]:SingleVariableDeclaration[30024-30035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30433-30506]:Block[30037-30110]"
    }, {
      "left" : "this.typeA = a;",
      "right" : "this.typeA = a;",
      "info" : "ExpressionStatement[30441-30456]:ExpressionStatement[30045-30060]"
    }, {
      "left" : "this.typeB = b;",
      "right" : "this.typeB = b;",
      "info" : "ExpressionStatement[30463-30478]:ExpressionStatement[30067-30082]"
    }, {
      "left" : "this.src = src;",
      "right" : "this.src = src;",
      "info" : "ExpressionStatement[30485-30500]:ExpressionStatement[30089-30104]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30512-30521]:MarkerAnnotation[30116-30125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30522-30528]:Modifier[30126-30132]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30529-30536]:PrimitiveType[30133-30140]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[30537-30543]:SimpleName[30141-30147]"
    }, {
      "left" : "Object object",
      "right" : "Object object",
      "info" : "SingleVariableDeclaration[30544-30557]:SingleVariableDeclaration[30148-30161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30559-30914]:Block[30163-30518]"
    }, {
      "left" : "if (object instanceof TypeMismatch)",
      "right" : "if (object instanceof TypeMismatch)",
      "info" : "IfStatement[30567-30888]:IfStatement[30171-30492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30603-30888]:Block[30207-30492]"
    }, {
      "left" : "TypeMismatch that = (TypeMismatch) object;",
      "right" : "TypeMismatch that = (TypeMismatch) object;",
      "info" : "VariableDeclarationStatement[30613-30655]:VariableDeclarationStatement[30217-30259]"
    }, {
      "left" : "return (that.typeA.isEquivalentTo(this.typeA)\n                && that.typeB.isEquivalentTo(this.typeB))\n            || (that.typeB.isEquivalentTo(this.typeA)\n                && that.typeA.isEquivalentTo(this.typeB));",
      "right" : "return (that.typeA.isEquivalentTo(this.typeA)\n                && that.typeB.isEquivalentTo(this.typeB))\n            || (that.typeB.isEquivalentTo(this.typeA)\n                && that.typeA.isEquivalentTo(this.typeB));",
      "info" : "ReturnStatement[30664-30880]:ReturnStatement[30268-30484]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30895-30908]:ReturnStatement[30499-30512]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30920-30929]:MarkerAnnotation[30524-30533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30930-30936]:Modifier[30534-30540]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30937-30940]:PrimitiveType[30541-30544]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[30941-30949]:SimpleName[30545-30553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30952-31004]:Block[30556-30608]"
    }, {
      "left" : "return Objects.hashCode(typeA, typeB);",
      "right" : "return Objects.hashCode(typeA, typeB);",
      "info" : "ReturnStatement[30960-30998]:ReturnStatement[30564-30602]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31010-31019]:MarkerAnnotation[30614-30623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31020-31026]:Modifier[30624-30630]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31027-31033]:SimpleType[30631-30637]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[31034-31042]:SimpleName[30638-30646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31045-31099]:Block[30649-30703]"
    }, {
      "left" : "return \"(\" + typeA + \", \" + typeB + \")\";",
      "right" : "return \"(\" + typeA + \", \" + typeB + \")\";",
      "info" : "ReturnStatement[31053-31093]:ReturnStatement[30657-30697]"
    } ]
  },
  "interFileMappings" : { }
}