{
  "matchedElements" : [
 {
    "left" : "class : UnionType",
    "right" : "class : UnionType",
    "info" : "TypeDeclaration[1875-14306]:TypeDeclaration[1875-14310]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2520-2568]:FieldDeclaration[2520-2568]"
  }, {
    "left" : "alternates",
    "right" : "alternates",
    "info" : "FieldDeclaration[2572-2595]:FieldDeclaration[2572-2595]"
  }, {
    "left" : "package UnionType(registry , alternates ...)",
    "right" : "package UnionType(registry , alternates ...)",
    "info" : "MethodDeclaration[2599-2813]:MethodDeclaration[2599-2813]"
  }, {
    "left" : "public getAlternates() : ",
    "right" : "public getAlternates() : ",
    "info" : "MethodDeclaration[2817-3040]:MethodDeclaration[2817-3040]"
  }, {
    "left" : "public forgiveUnknownNames() : void",
    "right" : "public forgiveUnknownNames() : void",
    "info" : "MethodDeclaration[3044-3177]:MethodDeclaration[3044-3177]"
  }, {
    "left" : "public matchesNumberContext() : boolean",
    "right" : "public matchesNumberContext() : boolean",
    "info" : "MethodDeclaration[3181-3657]:MethodDeclaration[3181-3657]"
  }, {
    "left" : "public matchesStringContext() : boolean",
    "right" : "public matchesStringContext() : boolean",
    "info" : "MethodDeclaration[3661-4388]:MethodDeclaration[3661-4388]"
  }, {
    "left" : "public matchesObjectContext() : boolean",
    "right" : "public matchesObjectContext() : boolean",
    "info" : "MethodDeclaration[4392-5304]:MethodDeclaration[4392-5304]"
  }, {
    "left" : "public findPropertyType(propertyName ) : ",
    "right" : "public findPropertyType(propertyName ) : ",
    "info" : "MethodDeclaration[5308-5929]:MethodDeclaration[5308-5929]"
  }, {
    "left" : "public canAssignTo(that ) : boolean",
    "right" : "public canAssignTo(that ) : boolean",
    "info" : "MethodDeclaration[5933-6182]:MethodDeclaration[5933-6182]"
  }, {
    "left" : "public canBeCalled() : boolean",
    "right" : "public canBeCalled() : boolean",
    "info" : "MethodDeclaration[6186-6349]:MethodDeclaration[6186-6349]"
  }, {
    "left" : "public restrictByNotNullOrUndefined() : ",
    "right" : "public restrictByNotNullOrUndefined() : ",
    "info" : "MethodDeclaration[6353-6617]:MethodDeclaration[6353-6617]"
  }, {
    "left" : "public testForEquality(that ) : ",
    "right" : "public testForEquality(that ) : ",
    "info" : "MethodDeclaration[6621-6953]:MethodDeclaration[6621-6953]"
  }, {
    "left" : "public isNullable() : boolean",
    "right" : "public isNullable() : boolean",
    "info" : "MethodDeclaration[6957-7406]:MethodDeclaration[6957-7406]"
  }, {
    "left" : "public isUnknownType() : boolean",
    "right" : "public isUnknownType() : boolean",
    "info" : "MethodDeclaration[7410-7576]:MethodDeclaration[7410-7576]"
  }, {
    "left" : "public getLeastSupertype(that ) : ",
    "right" : "public getLeastSupertype(that ) : ",
    "info" : "MethodDeclaration[7580-7880]:MethodDeclaration[7580-7880]"
  }, {
    "left" : "package meet(that ) : ",
    "right" : "package meet(that ) : ",
    "info" : "MethodDeclaration[7884-8673]:MethodDeclaration[7884-8677]"
  }, {
    "left" : "public equals(object ) : boolean",
    "right" : "public equals(object ) : boolean",
    "info" : "MethodDeclaration[8677-9022]:MethodDeclaration[8681-9026]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[9026-9099]:MethodDeclaration[9030-9103]"
  }, {
    "left" : "public isUnionType() : boolean",
    "right" : "public isUnionType() : boolean",
    "info" : "MethodDeclaration[9103-9166]:MethodDeclaration[9107-9170]"
  }, {
    "left" : "public isObject() : boolean",
    "right" : "public isObject() : boolean",
    "info" : "MethodDeclaration[9170-9343]:MethodDeclaration[9174-9347]"
  }, {
    "left" : "public contains(alternate ) : boolean",
    "right" : "public contains(alternate ) : boolean",
    "info" : "MethodDeclaration[9347-9821]:MethodDeclaration[9351-9825]"
  }, {
    "left" : "public getRestrictedUnion(type ) : ",
    "right" : "public getRestrictedUnion(type ) : ",
    "info" : "MethodDeclaration[9825-10570]:MethodDeclaration[9829-10574]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[10574-11032]:MethodDeclaration[10578-11036]"
  }, {
    "left" : "public isSubtype(that ) : boolean",
    "right" : "public isSubtype(that ) : boolean",
    "info" : "MethodDeclaration[11036-11222]:MethodDeclaration[11040-11226]"
  }, {
    "left" : "public getRestrictedTypeGivenToBooleanOutcome(outcome boolean) : ",
    "right" : "public getRestrictedTypeGivenToBooleanOutcome(outcome boolean) : ",
    "info" : "MethodDeclaration[11226-11596]:MethodDeclaration[11230-11600]"
  }, {
    "left" : "public getPossibleToBooleanOutcomes() : ",
    "right" : "public getPossibleToBooleanOutcomes() : ",
    "info" : "MethodDeclaration[11600-11942]:MethodDeclaration[11604-11946]"
  }, {
    "left" : "public getTypesUnderEquality(that ) : ",
    "right" : "public getTypesUnderEquality(that ) : ",
    "info" : "MethodDeclaration[11946-12512]:MethodDeclaration[11950-12516]"
  }, {
    "left" : "public getTypesUnderInequality(that ) : ",
    "right" : "public getTypesUnderInequality(that ) : ",
    "info" : "MethodDeclaration[12516-13086]:MethodDeclaration[12520-13090]"
  }, {
    "left" : "public getTypesUnderShallowInequality(that ) : ",
    "right" : "public getTypesUnderShallowInequality(that ) : ",
    "info" : "MethodDeclaration[13090-13674]:MethodDeclaration[13094-13678]"
  }, {
    "left" : "public visit(visitor ) : ",
    "right" : "public visit(visitor ) : ",
    "info" : "MethodDeclaration[13678-13774]:MethodDeclaration[13682-13778]"
  }, {
    "left" : "package resolveInternal(t , scope ) : ",
    "right" : "package resolveInternal(t , scope ) : ",
    "info" : "MethodDeclaration[13778-14304]:MethodDeclaration[13782-14308]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2478-2484]:Modifier[2478-2484]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2485-2490]:TYPE_DECLARATION_KIND[2485-2490]"
  }, {
    "left" : "UnionType",
    "right" : "UnionType",
    "info" : "SimpleName[2694-2703]:SimpleName[2694-2703]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[2704-2727]:SingleVariableDeclaration[2704-2727]"
  }, {
    "left" : "Set<JSType> alternates",
    "right" : "Set<JSType> alternates",
    "info" : "SingleVariableDeclaration[2729-2751]:SingleVariableDeclaration[2729-2751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2753-2813]:Block[2753-2813]"
  }, {
    "left" : "super(registry);",
    "right" : "super(registry);",
    "info" : "SuperConstructorInvocation[2759-2775]:SuperConstructorInvocation[2759-2775]"
  }, {
    "left" : "this.alternates = alternates;",
    "right" : "this.alternates = alternates;",
    "info" : "ExpressionStatement[2780-2809]:ExpressionStatement[2780-2809]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2972-2978]:Modifier[2972-2978]"
  }, {
    "left" : "Iterable<JSType>",
    "right" : "Iterable<JSType>",
    "info" : "ParameterizedType[2979-2995]:ParameterizedType[2979-2995]"
  }, {
    "left" : "getAlternates",
    "right" : "getAlternates",
    "info" : "SimpleName[2996-3009]:SimpleName[2996-3009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3012-3040]:Block[3012-3040]"
  }, {
    "left" : "return alternates;",
    "right" : "return alternates;",
    "info" : "ReturnStatement[3018-3036]:ReturnStatement[3018-3036]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3044-3053]:MarkerAnnotation[3044-3053]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3056-3062]:Modifier[3056-3062]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3063-3067]:PrimitiveType[3063-3067]"
  }, {
    "left" : "forgiveUnknownNames",
    "right" : "forgiveUnknownNames",
    "info" : "SimpleName[3068-3087]:SimpleName[3068-3087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3090-3177]:Block[3090-3177]"
  }, {
    "left" : "for (JSType type : getAlternates())",
    "right" : "for (JSType type : getAlternates())",
    "info" : "EnhancedForStatement[3096-3173]:EnhancedForStatement[3096-3173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3132-3173]:Block[3132-3173]"
  }, {
    "left" : "type.forgiveUnknownNames();",
    "right" : "type.forgiveUnknownNames();",
    "info" : "ExpressionStatement[3140-3167]:ExpressionStatement[3140-3167]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3399-3408]:MarkerAnnotation[3399-3408]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3411-3417]:Modifier[3411-3417]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3418-3425]:PrimitiveType[3418-3425]"
  }, {
    "left" : "matchesNumberContext",
    "right" : "matchesNumberContext",
    "info" : "SimpleName[3426-3446]:SimpleName[3426-3446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3449-3657]:Block[3449-3657]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[3533-3635]:EnhancedForStatement[3533-3635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3561-3635]:Block[3561-3635]"
  }, {
    "left" : "if (t.matchesNumberContext())",
    "right" : "if (t.matchesNumberContext())",
    "info" : "IfStatement[3569-3629]:IfStatement[3569-3629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3599-3629]:Block[3599-3629]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3609-3621]:ReturnStatement[3609-3621]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3640-3653]:ReturnStatement[3640-3653]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4130-4139]:MarkerAnnotation[4130-4139]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4142-4148]:Modifier[4142-4148]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4149-4156]:PrimitiveType[4149-4156]"
  }, {
    "left" : "matchesStringContext",
    "right" : "matchesStringContext",
    "info" : "SimpleName[4157-4177]:SimpleName[4157-4177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4180-4388]:Block[4180-4388]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[4264-4366]:EnhancedForStatement[4264-4366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4292-4366]:Block[4292-4366]"
  }, {
    "left" : "if (t.matchesStringContext())",
    "right" : "if (t.matchesStringContext())",
    "info" : "IfStatement[4300-4360]:IfStatement[4300-4360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4330-4360]:Block[4330-4360]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4340-4352]:ReturnStatement[4340-4352]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4371-4384]:ReturnStatement[4371-4384]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5046-5055]:MarkerAnnotation[5046-5055]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5058-5064]:Modifier[5058-5064]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5065-5072]:PrimitiveType[5065-5072]"
  }, {
    "left" : "matchesObjectContext",
    "right" : "matchesObjectContext",
    "info" : "SimpleName[5073-5093]:SimpleName[5073-5093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5096-5304]:Block[5096-5304]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[5180-5282]:EnhancedForStatement[5180-5282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5208-5282]:Block[5208-5282]"
  }, {
    "left" : "if (t.matchesObjectContext())",
    "right" : "if (t.matchesObjectContext())",
    "info" : "IfStatement[5216-5276]:IfStatement[5216-5276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5246-5276]:Block[5246-5276]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[5256-5268]:ReturnStatement[5256-5268]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5287-5300]:ReturnStatement[5287-5300]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5308-5317]:MarkerAnnotation[5308-5317]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5320-5326]:Modifier[5320-5326]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[5327-5333]:SimpleType[5327-5333]"
  }, {
    "left" : "findPropertyType",
    "right" : "findPropertyType",
    "info" : "SimpleName[5334-5350]:SimpleName[5334-5350]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[5351-5370]:SingleVariableDeclaration[5351-5370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5372-5929]:Block[5372-5929]"
  }, {
    "left" : "JSType propertyType = null;",
    "right" : "JSType propertyType = null;",
    "info" : "VariableDeclarationStatement[5378-5405]:VariableDeclarationStatement[5378-5405]"
  }, {
    "left" : "for (JSType alternate : getAlternates())",
    "right" : "for (JSType alternate : getAlternates())",
    "info" : "EnhancedForStatement[5411-5899]:EnhancedForStatement[5411-5899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5452-5899]:Block[5452-5899]"
  }, {
    "left" : "if (alternate.isNullType() || alternate.isVoidType())",
    "right" : "if (alternate.isNullType() || alternate.isVoidType())",
    "info" : "IfStatement[5505-5586]:IfStatement[5505-5586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5559-5586]:Block[5559-5586]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[5569-5578]:ContinueStatement[5569-5578]"
  }, {
    "left" : "JSType altPropertyType = alternate.findPropertyType(propertyName);",
    "right" : "JSType altPropertyType = alternate.findPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[5594-5660]:VariableDeclarationStatement[5594-5660]"
  }, {
    "left" : "if (altPropertyType == null)",
    "right" : "if (altPropertyType == null)",
    "info" : "IfStatement[5667-5723]:IfStatement[5667-5723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5696-5723]:Block[5696-5723]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[5706-5715]:ContinueStatement[5706-5715]"
  }, {
    "left" : "if (propertyType == null)",
    "right" : "if (propertyType == null)",
    "info" : "IfStatement[5731-5893]:IfStatement[5731-5893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5757-5806]:Block[5757-5806]"
  }, {
    "left" : "propertyType = altPropertyType;",
    "right" : "propertyType = altPropertyType;",
    "info" : "ExpressionStatement[5767-5798]:ExpressionStatement[5767-5798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5812-5893]:Block[5812-5893]"
  }, {
    "left" : "propertyType = propertyType.getLeastSupertype(altPropertyType);",
    "right" : "propertyType = propertyType.getLeastSupertype(altPropertyType);",
    "info" : "ExpressionStatement[5822-5885]:ExpressionStatement[5822-5885]"
  }, {
    "left" : "return propertyType;",
    "right" : "return propertyType;",
    "info" : "ReturnStatement[5905-5925]:ReturnStatement[5905-5925]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5933-5942]:MarkerAnnotation[5933-5942]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5945-5951]:Modifier[5945-5951]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5952-5959]:PrimitiveType[5952-5959]"
  }, {
    "left" : "canAssignTo",
    "right" : "canAssignTo",
    "info" : "SimpleName[5960-5971]:SimpleName[5960-5971]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[5972-5983]:SingleVariableDeclaration[5972-5983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5985-6182]:Block[5985-6182]"
  }, {
    "left" : "boolean canAssign = true;",
    "right" : "boolean canAssign = true;",
    "info" : "VariableDeclarationStatement[5991-6016]:VariableDeclarationStatement[5991-6016]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6021-6156]:EnhancedForStatement[6021-6156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6049-6156]:Block[6049-6156]"
  }, {
    "left" : "if (t.isUnknownType())",
    "right" : "if (t.isUnknownType())",
    "info" : "IfStatement[6057-6110]:IfStatement[6057-6110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6080-6110]:Block[6080-6110]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6090-6102]:ReturnStatement[6090-6102]"
  }, {
    "left" : "canAssign &= t.canAssignTo(that);",
    "right" : "canAssign &= t.canAssignTo(that);",
    "info" : "ExpressionStatement[6117-6150]:ExpressionStatement[6117-6150]"
  }, {
    "left" : "return canAssign;",
    "right" : "return canAssign;",
    "info" : "ReturnStatement[6161-6178]:ReturnStatement[6161-6178]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6186-6195]:MarkerAnnotation[6186-6195]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6198-6204]:Modifier[6198-6204]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6205-6212]:PrimitiveType[6205-6212]"
  }, {
    "left" : "canBeCalled",
    "right" : "canBeCalled",
    "info" : "SimpleName[6213-6224]:SimpleName[6213-6224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6227-6349]:Block[6227-6349]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6233-6328]:EnhancedForStatement[6233-6328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6261-6328]:Block[6261-6328]"
  }, {
    "left" : "if (!t.canBeCalled())",
    "right" : "if (!t.canBeCalled())",
    "info" : "IfStatement[6269-6322]:IfStatement[6269-6322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6291-6322]:Block[6291-6322]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6301-6314]:ReturnStatement[6301-6314]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6333-6345]:ReturnStatement[6333-6345]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6353-6362]:MarkerAnnotation[6353-6362]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6365-6371]:Modifier[6365-6371]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[6372-6378]:SimpleType[6372-6378]"
  }, {
    "left" : "restrictByNotNullOrUndefined",
    "right" : "restrictByNotNullOrUndefined",
    "info" : "SimpleName[6379-6407]:SimpleName[6379-6407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6410-6617]:Block[6410-6617]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[6416-6477]:VariableDeclarationStatement[6416-6477]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6482-6582]:EnhancedForStatement[6482-6582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6510-6582]:Block[6510-6582]"
  }, {
    "left" : "restricted.addAlternate(t.restrictByNotNullOrUndefined());",
    "right" : "restricted.addAlternate(t.restrictByNotNullOrUndefined());",
    "info" : "ExpressionStatement[6518-6576]:ExpressionStatement[6518-6576]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[6587-6613]:ReturnStatement[6587-6613]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6621-6630]:MarkerAnnotation[6621-6630]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6633-6639]:Modifier[6633-6639]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[6640-6652]:SimpleType[6640-6652]"
  }, {
    "left" : "testForEquality",
    "right" : "testForEquality",
    "info" : "SimpleName[6653-6668]:SimpleName[6653-6668]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[6669-6680]:SingleVariableDeclaration[6669-6680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6682-6953]:Block[6682-6953]"
  }, {
    "left" : "TernaryValue result = null;",
    "right" : "TernaryValue result = null;",
    "info" : "VariableDeclarationStatement[6688-6715]:VariableDeclarationStatement[6688-6715]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[6720-6930]:EnhancedForStatement[6720-6930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6748-6930]:Block[6748-6930]"
  }, {
    "left" : "TernaryValue test = t.testForEquality(that);",
    "right" : "TernaryValue test = t.testForEquality(that);",
    "info" : "VariableDeclarationStatement[6756-6800]:VariableDeclarationStatement[6756-6800]"
  }, {
    "left" : "if (result == null)",
    "right" : "if (result == null)",
    "info" : "IfStatement[6807-6924]:IfStatement[6807-6924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6827-6859]:Block[6827-6859]"
  }, {
    "left" : "result = test;",
    "right" : "result = test;",
    "info" : "ExpressionStatement[6837-6851]:ExpressionStatement[6837-6851]"
  }, {
    "left" : "if (!result.equals(test))",
    "right" : "if (!result.equals(test))",
    "info" : "IfStatement[6865-6924]:IfStatement[6865-6924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6891-6924]:Block[6891-6924]"
  }, {
    "left" : "return UNKNOWN;",
    "right" : "return UNKNOWN;",
    "info" : "ReturnStatement[6901-6916]:ReturnStatement[6901-6916]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[6935-6949]:ReturnStatement[6935-6949]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7246-7255]:MarkerAnnotation[7246-7255]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7258-7264]:Modifier[7258-7264]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7265-7272]:PrimitiveType[7265-7272]"
  }, {
    "left" : "isNullable",
    "right" : "isNullable",
    "info" : "SimpleName[7273-7283]:SimpleName[7273-7283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7286-7406]:Block[7286-7406]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[7292-7384]:EnhancedForStatement[7292-7384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7320-7384]:Block[7320-7384]"
  }, {
    "left" : "if (t.isNullable())",
    "right" : "if (t.isNullable())",
    "info" : "IfStatement[7328-7378]:IfStatement[7328-7378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7348-7378]:Block[7348-7378]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7358-7370]:ReturnStatement[7358-7370]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7389-7402]:ReturnStatement[7389-7402]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7410-7419]:MarkerAnnotation[7410-7419]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7422-7428]:Modifier[7422-7428]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7429-7436]:PrimitiveType[7429-7436]"
  }, {
    "left" : "isUnknownType",
    "right" : "isUnknownType",
    "info" : "SimpleName[7437-7450]:SimpleName[7437-7450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7453-7576]:Block[7453-7576]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[7459-7554]:EnhancedForStatement[7459-7554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7487-7554]:Block[7487-7554]"
  }, {
    "left" : "if (t.isUnknownType())",
    "right" : "if (t.isUnknownType())",
    "info" : "IfStatement[7495-7548]:IfStatement[7495-7548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7518-7548]:Block[7518-7548]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7528-7540]:ReturnStatement[7528-7540]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7559-7572]:ReturnStatement[7559-7572]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7580-7589]:MarkerAnnotation[7580-7589]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7592-7598]:Modifier[7592-7598]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[7599-7605]:SimpleType[7599-7605]"
  }, {
    "left" : "getLeastSupertype",
    "right" : "getLeastSupertype",
    "info" : "SimpleName[7606-7623]:SimpleName[7606-7623]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[7624-7635]:SingleVariableDeclaration[7624-7635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7637-7880]:Block[7637-7880]"
  }, {
    "left" : "if (!that.isUnknownType())",
    "right" : "if (!that.isUnknownType())",
    "info" : "IfStatement[7643-7833]:IfStatement[7643-7833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7670-7833]:Block[7670-7833]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[7678-7827]:EnhancedForStatement[7678-7827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7714-7827]:Block[7714-7827]"
  }, {
    "left" : "if (!alternate.isUnknownType() && that.isSubtype(alternate))",
    "right" : "if (!alternate.isUnknownType() && that.isSubtype(alternate))",
    "info" : "IfStatement[7724-7819]:IfStatement[7724-7819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7785-7819]:Block[7785-7819]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[7797-7809]:ReturnStatement[7797-7809]"
  }, {
    "left" : "return getLeastSupertype(this, that);",
    "right" : "return getLeastSupertype(this, that);",
    "info" : "ReturnStatement[7839-7876]:ReturnStatement[7839-7876]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[7884-7890]:SimpleType[7884-7890]"
  }, {
    "left" : "meet",
    "right" : "meet",
    "info" : "SimpleName[7891-7895]:SimpleName[7891-7895]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[7896-7907]:SingleVariableDeclaration[7896-7907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7909-8673]:Block[7909-8677]"
  }, {
    "left" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[7915-7973]:VariableDeclarationStatement[7915-7973]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[7978-8109]:EnhancedForStatement[7978-8109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8014-8109]:Block[8014-8109]"
  }, {
    "left" : "if (alternate.isSubtype(that))",
    "right" : "if (alternate.isSubtype(that))",
    "info" : "IfStatement[8022-8103]:IfStatement[8022-8103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8053-8103]:Block[8053-8103]"
  }, {
    "left" : "builder.addAlternate(alternate);",
    "right" : "builder.addAlternate(alternate);",
    "info" : "ExpressionStatement[8063-8095]:ExpressionStatement[8063-8095]"
  }, {
    "left" : "if (that instanceof UnionType)",
    "right" : "if (that instanceof UnionType)",
    "info" : "IfStatement[8115-8406]:IfStatement[8115-8406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8146-8333]:Block[8146-8333]"
  }, {
    "left" : "for (JSType otherAlternate : ((UnionType) that).alternates)",
    "right" : "for (JSType otherAlternate : ((UnionType) that).alternates)",
    "info" : "EnhancedForStatement[8154-8327]:EnhancedForStatement[8154-8327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8214-8327]:Block[8214-8327]"
  }, {
    "left" : "if (otherAlternate.isSubtype(this))",
    "right" : "if (otherAlternate.isSubtype(this))",
    "info" : "IfStatement[8224-8319]:IfStatement[8224-8319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8260-8319]:Block[8260-8319]"
  }, {
    "left" : "builder.addAlternate(otherAlternate);",
    "right" : "builder.addAlternate(otherAlternate);",
    "info" : "ExpressionStatement[8272-8309]:ExpressionStatement[8272-8309]"
  }, {
    "left" : "if (that.isSubtype(this))",
    "right" : "if (that.isSubtype(this))",
    "info" : "IfStatement[8339-8406]:IfStatement[8339-8406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8365-8406]:Block[8365-8406]"
  }, {
    "left" : "builder.addAlternate(that);",
    "right" : "builder.addAlternate(that);",
    "info" : "ExpressionStatement[8373-8400]:ExpressionStatement[8373-8400]"
  }, {
    "left" : "JSType result = builder.build();",
    "right" : "JSType result = builder.build();",
    "info" : "VariableDeclarationStatement[8411-8443]:VariableDeclarationStatement[8411-8443]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (!result.isNoType())",
    "info" : "IfStatement[8448-8669]:IfStatement[8448-8673]"
  }, {
    "left" : "result",
    "right" : "result",
    "info" : "SimpleName[8452-8458]:SimpleName[8453-8459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8468-8496]:Block[8472-8500]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[8476-8490]:ReturnStatement[8480-8494]"
  }, {
    "left" : "if (this.isObject() && that.isObject())",
    "right" : "if (this.isObject() && that.isObject())",
    "info" : "IfStatement[8502-8669]:IfStatement[8506-8673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8542-8606]:Block[8546-8610]"
  }, {
    "left" : "return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "right" : "return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "info" : "ReturnStatement[8550-8600]:ReturnStatement[8554-8604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8612-8669]:Block[8616-8673]"
  }, {
    "left" : "return getNativeType(JSTypeNative.NO_TYPE);",
    "right" : "return getNativeType(JSTypeNative.NO_TYPE);",
    "info" : "ReturnStatement[8620-8663]:ReturnStatement[8624-8667]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8798-8807]:MarkerAnnotation[8802-8811]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8810-8816]:Modifier[8814-8820]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8817-8824]:PrimitiveType[8821-8828]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[8825-8831]:SimpleName[8829-8835]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[8832-8845]:SingleVariableDeclaration[8836-8849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8847-9022]:Block[8851-9026]"
  }, {
    "left" : "if (object instanceof UnionType)",
    "right" : "if (object instanceof UnionType)",
    "info" : "IfStatement[8853-9018]:IfStatement[8857-9022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8886-8985]:Block[8890-8989]"
  }, {
    "left" : "UnionType that = (UnionType) object;",
    "right" : "UnionType that = (UnionType) object;",
    "info" : "VariableDeclarationStatement[8894-8930]:VariableDeclarationStatement[8898-8934]"
  }, {
    "left" : "return alternates.equals(that.alternates);",
    "right" : "return alternates.equals(that.alternates);",
    "info" : "ReturnStatement[8937-8979]:ReturnStatement[8941-8983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8991-9018]:Block[8995-9022]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8999-9012]:ReturnStatement[9003-9016]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9026-9035]:MarkerAnnotation[9030-9039]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9038-9044]:Modifier[9042-9048]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[9045-9048]:PrimitiveType[9049-9052]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[9049-9057]:SimpleName[9053-9061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9060-9099]:Block[9064-9103]"
  }, {
    "left" : "return alternates.hashCode();",
    "right" : "return alternates.hashCode();",
    "info" : "ReturnStatement[9066-9095]:ReturnStatement[9070-9099]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9103-9112]:MarkerAnnotation[9107-9116]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9115-9121]:Modifier[9119-9125]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9122-9129]:PrimitiveType[9126-9133]"
  }, {
    "left" : "isUnionType",
    "right" : "isUnionType",
    "info" : "SimpleName[9130-9141]:SimpleName[9134-9145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9144-9166]:Block[9148-9170]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9150-9162]:ReturnStatement[9154-9166]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9170-9179]:MarkerAnnotation[9174-9183]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9182-9188]:Modifier[9186-9192]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9189-9196]:PrimitiveType[9193-9200]"
  }, {
    "left" : "isObject",
    "right" : "isObject",
    "info" : "SimpleName[9197-9205]:SimpleName[9201-9209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9208-9343]:Block[9212-9347]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[9214-9322]:EnhancedForStatement[9218-9326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9250-9322]:Block[9254-9326]"
  }, {
    "left" : "if (!alternate.isObject())",
    "right" : "if (!alternate.isObject())",
    "info" : "IfStatement[9258-9316]:IfStatement[9262-9320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9285-9316]:Block[9289-9320]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9295-9308]:ReturnStatement[9299-9312]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9327-9339]:ReturnStatement[9331-9343]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9731-9737]:Modifier[9735-9741]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9738-9745]:PrimitiveType[9742-9749]"
  }, {
    "left" : "contains",
    "right" : "contains",
    "info" : "SimpleName[9746-9754]:SimpleName[9750-9758]"
  }, {
    "left" : "JSType alternate",
    "right" : "JSType alternate",
    "info" : "SingleVariableDeclaration[9755-9771]:SingleVariableDeclaration[9759-9775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9773-9821]:Block[9777-9825]"
  }, {
    "left" : "return alternates.contains(alternate);",
    "right" : "return alternates.contains(alternate);",
    "info" : "ReturnStatement[9779-9817]:ReturnStatement[9783-9821]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10285-10291]:Modifier[10289-10295]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[10292-10298]:SimpleType[10296-10302]"
  }, {
    "left" : "getRestrictedUnion",
    "right" : "getRestrictedUnion",
    "info" : "SimpleName[10299-10317]:SimpleName[10303-10321]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[10318-10329]:SingleVariableDeclaration[10322-10333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10331-10570]:Block[10335-10574]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[10337-10398]:VariableDeclarationStatement[10341-10402]"
  }, {
    "left" : "for (JSType t : alternates)",
    "right" : "for (JSType t : alternates)",
    "info" : "EnhancedForStatement[10403-10535]:EnhancedForStatement[10407-10539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10431-10535]:Block[10435-10539]"
  }, {
    "left" : "if (t.isUnknownType() || !t.isSubtype(type))",
    "right" : "if (t.isUnknownType() || !t.isSubtype(type))",
    "info" : "IfStatement[10439-10529]:IfStatement[10443-10533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10484-10529]:Block[10488-10533]"
  }, {
    "left" : "restricted.addAlternate(t);",
    "right" : "restricted.addAlternate(t);",
    "info" : "ExpressionStatement[10494-10521]:ExpressionStatement[10498-10525]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[10540-10566]:ReturnStatement[10544-10570]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10574-10583]:MarkerAnnotation[10578-10587]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10584-10590]:Modifier[10588-10594]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10591-10597]:SimpleType[10595-10601]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[10598-10606]:SimpleName[10602-10610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10609-11032]:Block[10613-11036]"
  }, {
    "left" : "StringBuilder result = new StringBuilder();",
    "right" : "StringBuilder result = new StringBuilder();",
    "info" : "VariableDeclarationStatement[10615-10658]:VariableDeclarationStatement[10619-10662]"
  }, {
    "left" : "boolean firstAlternate = true;",
    "right" : "boolean firstAlternate = true;",
    "info" : "VariableDeclarationStatement[10663-10693]:VariableDeclarationStatement[10667-10697]"
  }, {
    "left" : "result.append(\"(\");",
    "right" : "result.append(\"(\");",
    "info" : "ExpressionStatement[10699-10718]:ExpressionStatement[10703-10722]"
  }, {
    "left" : "SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA);",
    "right" : "SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA);",
    "info" : "VariableDeclarationStatement[10723-10777]:VariableDeclarationStatement[10727-10781]"
  }, {
    "left" : "sorted.addAll(alternates);",
    "right" : "sorted.addAll(alternates);",
    "info" : "ExpressionStatement[10782-10808]:ExpressionStatement[10786-10812]"
  }, {
    "left" : "for (JSType t : sorted)",
    "right" : "for (JSType t : sorted)",
    "info" : "EnhancedForStatement[10813-10974]:EnhancedForStatement[10817-10978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10837-10974]:Block[10841-10978]"
  }, {
    "left" : "if (!firstAlternate)",
    "right" : "if (!firstAlternate)",
    "info" : "IfStatement[10845-10903]:IfStatement[10849-10907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10866-10903]:Block[10870-10907]"
  }, {
    "left" : "result.append(\"|\");",
    "right" : "result.append(\"|\");",
    "info" : "ExpressionStatement[10876-10895]:ExpressionStatement[10880-10899]"
  }, {
    "left" : "result.append(t.toString());",
    "right" : "result.append(t.toString());",
    "info" : "ExpressionStatement[10910-10938]:ExpressionStatement[10914-10942]"
  }, {
    "left" : "firstAlternate = false;",
    "right" : "firstAlternate = false;",
    "info" : "ExpressionStatement[10945-10968]:ExpressionStatement[10949-10972]"
  }, {
    "left" : "result.append(\")\");",
    "right" : "result.append(\")\");",
    "info" : "ExpressionStatement[10979-10998]:ExpressionStatement[10983-11002]"
  }, {
    "left" : "return result.toString();",
    "right" : "return result.toString();",
    "info" : "ReturnStatement[11003-11028]:ReturnStatement[11007-11032]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11036-11045]:MarkerAnnotation[11040-11049]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11048-11054]:Modifier[11052-11058]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11055-11062]:PrimitiveType[11059-11066]"
  }, {
    "left" : "isSubtype",
    "right" : "isSubtype",
    "info" : "SimpleName[11063-11072]:SimpleName[11067-11076]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[11073-11084]:SingleVariableDeclaration[11077-11088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11086-11222]:Block[11090-11226]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[11092-11201]:EnhancedForStatement[11096-11205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11126-11201]:Block[11130-11205]"
  }, {
    "left" : "if (!element.isSubtype(that))",
    "right" : "if (!element.isSubtype(that))",
    "info" : "IfStatement[11134-11195]:IfStatement[11138-11199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11164-11195]:Block[11168-11199]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11174-11187]:ReturnStatement[11178-11191]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11206-11218]:ReturnStatement[11210-11222]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11226-11235]:MarkerAnnotation[11230-11239]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11238-11244]:Modifier[11242-11248]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[11245-11251]:SimpleType[11249-11255]"
  }, {
    "left" : "getRestrictedTypeGivenToBooleanOutcome",
    "right" : "getRestrictedTypeGivenToBooleanOutcome",
    "info" : "SimpleName[11252-11290]:SimpleName[11256-11294]"
  }, {
    "left" : "boolean outcome",
    "right" : "boolean outcome",
    "info" : "SingleVariableDeclaration[11291-11306]:SingleVariableDeclaration[11295-11310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11308-11596]:Block[11312-11600]"
  }, {
    "left" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder restricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[11355-11416]:VariableDeclarationStatement[11359-11420]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[11421-11561]:EnhancedForStatement[11425-11565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11455-11561]:Block[11459-11565]"
  }, {
    "left" : "restricted.addAlternate(\n          element.getRestrictedTypeGivenToBooleanOutcome(outcome));",
    "right" : "restricted.addAlternate(\n          element.getRestrictedTypeGivenToBooleanOutcome(outcome));",
    "info" : "ExpressionStatement[11463-11555]:ExpressionStatement[11467-11559]"
  }, {
    "left" : "return restricted.build();",
    "right" : "return restricted.build();",
    "info" : "ReturnStatement[11566-11592]:ReturnStatement[11570-11596]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11600-11609]:MarkerAnnotation[11604-11613]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11612-11618]:Modifier[11616-11622]"
  }, {
    "left" : "BooleanLiteralSet",
    "right" : "BooleanLiteralSet",
    "info" : "SimpleType[11619-11636]:SimpleType[11623-11640]"
  }, {
    "left" : "getPossibleToBooleanOutcomes",
    "right" : "getPossibleToBooleanOutcomes",
    "info" : "SimpleName[11637-11665]:SimpleName[11641-11669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11668-11942]:Block[11672-11946]"
  }, {
    "left" : "BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;",
    "right" : "BooleanLiteralSet literals = BooleanLiteralSet.EMPTY;",
    "info" : "VariableDeclarationStatement[11674-11727]:VariableDeclarationStatement[11678-11731]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[11732-11917]:EnhancedForStatement[11736-11921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11766-11917]:Block[11770-11921]"
  }, {
    "left" : "literals = literals.union(element.getPossibleToBooleanOutcomes());",
    "right" : "literals = literals.union(element.getPossibleToBooleanOutcomes());",
    "info" : "ExpressionStatement[11774-11840]:ExpressionStatement[11778-11844]"
  }, {
    "left" : "if (literals == BooleanLiteralSet.BOTH)",
    "right" : "if (literals == BooleanLiteralSet.BOTH)",
    "info" : "IfStatement[11847-11911]:IfStatement[11851-11915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11887-11911]:Block[11891-11915]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11897-11903]:BreakStatement[11901-11907]"
  }, {
    "left" : "return literals;",
    "right" : "return literals;",
    "info" : "ReturnStatement[11922-11938]:ReturnStatement[11926-11942]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11946-11955]:MarkerAnnotation[11950-11959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11958-11964]:Modifier[11962-11968]"
  }, {
    "left" : "TypePair",
    "right" : "TypePair",
    "info" : "SimpleType[11965-11973]:SimpleType[11969-11977]"
  }, {
    "left" : "getTypesUnderEquality",
    "right" : "getTypesUnderEquality",
    "info" : "SimpleName[11974-11995]:SimpleName[11978-11999]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[11996-12007]:SingleVariableDeclaration[12000-12011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12009-12512]:Block[12013-12516]"
  }, {
    "left" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[12015-12080]:VariableDeclarationStatement[12019-12084]"
  }, {
    "left" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[12085-12150]:VariableDeclarationStatement[12089-12154]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[12155-12418]:EnhancedForStatement[12159-12422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12189-12418]:Block[12193-12422]"
  }, {
    "left" : "TypePair p = element.getTypesUnderEquality(that);",
    "right" : "TypePair p = element.getTypesUnderEquality(that);",
    "info" : "VariableDeclarationStatement[12197-12246]:VariableDeclarationStatement[12201-12250]"
  }, {
    "left" : "if (p.typeA != null)",
    "right" : "if (p.typeA != null)",
    "info" : "IfStatement[12253-12329]:IfStatement[12257-12333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12274-12329]:Block[12278-12333]"
  }, {
    "left" : "thisRestricted.addAlternate(p.typeA);",
    "right" : "thisRestricted.addAlternate(p.typeA);",
    "info" : "ExpressionStatement[12284-12321]:ExpressionStatement[12288-12325]"
  }, {
    "left" : "if (p.typeB != null)",
    "right" : "if (p.typeB != null)",
    "info" : "IfStatement[12336-12412]:IfStatement[12340-12416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12357-12412]:Block[12361-12416]"
  }, {
    "left" : "thatRestricted.addAlternate(p.typeB);",
    "right" : "thatRestricted.addAlternate(p.typeB);",
    "info" : "ExpressionStatement[12367-12404]:ExpressionStatement[12371-12408]"
  }, {
    "left" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "right" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "info" : "ReturnStatement[12423-12508]:ReturnStatement[12427-12512]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12516-12525]:MarkerAnnotation[12520-12529]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12528-12534]:Modifier[12532-12538]"
  }, {
    "left" : "TypePair",
    "right" : "TypePair",
    "info" : "SimpleType[12535-12543]:SimpleType[12539-12547]"
  }, {
    "left" : "getTypesUnderInequality",
    "right" : "getTypesUnderInequality",
    "info" : "SimpleName[12544-12567]:SimpleName[12548-12571]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[12568-12579]:SingleVariableDeclaration[12572-12583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12581-13086]:Block[12585-13090]"
  }, {
    "left" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[12587-12652]:VariableDeclarationStatement[12591-12656]"
  }, {
    "left" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[12657-12722]:VariableDeclarationStatement[12661-12726]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[12727-12992]:EnhancedForStatement[12731-12996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12761-12992]:Block[12765-12996]"
  }, {
    "left" : "TypePair p = element.getTypesUnderInequality(that);",
    "right" : "TypePair p = element.getTypesUnderInequality(that);",
    "info" : "VariableDeclarationStatement[12769-12820]:VariableDeclarationStatement[12773-12824]"
  }, {
    "left" : "if (p.typeA != null)",
    "right" : "if (p.typeA != null)",
    "info" : "IfStatement[12827-12903]:IfStatement[12831-12907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12848-12903]:Block[12852-12907]"
  }, {
    "left" : "thisRestricted.addAlternate(p.typeA);",
    "right" : "thisRestricted.addAlternate(p.typeA);",
    "info" : "ExpressionStatement[12858-12895]:ExpressionStatement[12862-12899]"
  }, {
    "left" : "if (p.typeB != null)",
    "right" : "if (p.typeB != null)",
    "info" : "IfStatement[12910-12986]:IfStatement[12914-12990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12931-12986]:Block[12935-12990]"
  }, {
    "left" : "thatRestricted.addAlternate(p.typeB);",
    "right" : "thatRestricted.addAlternate(p.typeB);",
    "info" : "ExpressionStatement[12941-12978]:ExpressionStatement[12945-12982]"
  }, {
    "left" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "right" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "info" : "ReturnStatement[12997-13082]:ReturnStatement[13001-13086]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13090-13099]:MarkerAnnotation[13094-13103]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13102-13108]:Modifier[13106-13112]"
  }, {
    "left" : "TypePair",
    "right" : "TypePair",
    "info" : "SimpleType[13109-13117]:SimpleType[13113-13121]"
  }, {
    "left" : "getTypesUnderShallowInequality",
    "right" : "getTypesUnderShallowInequality",
    "info" : "SimpleName[13118-13148]:SimpleName[13122-13152]"
  }, {
    "left" : "JSType that",
    "right" : "JSType that",
    "info" : "SingleVariableDeclaration[13149-13160]:SingleVariableDeclaration[13153-13164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13162-13674]:Block[13166-13678]"
  }, {
    "left" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thisRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[13168-13233]:VariableDeclarationStatement[13172-13237]"
  }, {
    "left" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "right" : "UnionTypeBuilder thatRestricted = new UnionTypeBuilder(registry);",
    "info" : "VariableDeclarationStatement[13238-13303]:VariableDeclarationStatement[13242-13307]"
  }, {
    "left" : "for (JSType element : alternates)",
    "right" : "for (JSType element : alternates)",
    "info" : "EnhancedForStatement[13308-13580]:EnhancedForStatement[13312-13584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13342-13580]:Block[13346-13584]"
  }, {
    "left" : "TypePair p = element.getTypesUnderShallowInequality(that);",
    "right" : "TypePair p = element.getTypesUnderShallowInequality(that);",
    "info" : "VariableDeclarationStatement[13350-13408]:VariableDeclarationStatement[13354-13412]"
  }, {
    "left" : "if (p.typeA != null)",
    "right" : "if (p.typeA != null)",
    "info" : "IfStatement[13415-13491]:IfStatement[13419-13495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13436-13491]:Block[13440-13495]"
  }, {
    "left" : "thisRestricted.addAlternate(p.typeA);",
    "right" : "thisRestricted.addAlternate(p.typeA);",
    "info" : "ExpressionStatement[13446-13483]:ExpressionStatement[13450-13487]"
  }, {
    "left" : "if (p.typeB != null)",
    "right" : "if (p.typeB != null)",
    "info" : "IfStatement[13498-13574]:IfStatement[13502-13578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13519-13574]:Block[13523-13578]"
  }, {
    "left" : "thatRestricted.addAlternate(p.typeB);",
    "right" : "thatRestricted.addAlternate(p.typeB);",
    "info" : "ExpressionStatement[13529-13566]:ExpressionStatement[13533-13570]"
  }, {
    "left" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "right" : "return new TypePair(\n        thisRestricted.build(),\n        thatRestricted.build());",
    "info" : "ReturnStatement[13585-13670]:ReturnStatement[13589-13674]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13678-13687]:MarkerAnnotation[13682-13691]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13690-13696]:Modifier[13694-13700]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "TypeParameter[13698-13699]:TypeParameter[13702-13703]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[13701-13702]:SimpleType[13705-13706]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[13703-13708]:SimpleName[13707-13712]"
  }, {
    "left" : "Visitor<T> visitor",
    "right" : "Visitor<T> visitor",
    "info" : "SingleVariableDeclaration[13709-13727]:SingleVariableDeclaration[13713-13731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13729-13774]:Block[13733-13778]"
  }, {
    "left" : "return visitor.caseUnionType(this);",
    "right" : "return visitor.caseUnionType(this);",
    "info" : "ReturnStatement[13735-13770]:ReturnStatement[13739-13774]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13778-13787]:MarkerAnnotation[13782-13791]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[13790-13796]:SimpleType[13794-13800]"
  }, {
    "left" : "resolveInternal",
    "right" : "resolveInternal",
    "info" : "SimpleName[13797-13812]:SimpleName[13801-13816]"
  }, {
    "left" : "ErrorReporter t",
    "right" : "ErrorReporter t",
    "info" : "SingleVariableDeclaration[13813-13828]:SingleVariableDeclaration[13817-13832]"
  }, {
    "left" : "StaticScope<JSType> scope",
    "right" : "StaticScope<JSType> scope",
    "info" : "SingleVariableDeclaration[13830-13855]:SingleVariableDeclaration[13834-13859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13857-14304]:Block[13861-14308]"
  }, {
    "left" : "setResolvedTypeInternal(this);",
    "right" : "setResolvedTypeInternal(this);",
    "info" : "ExpressionStatement[13863-13893]:ExpressionStatement[13867-13897]"
  }, {
    "left" : "boolean changed = false;",
    "right" : "boolean changed = false;",
    "info" : "VariableDeclarationStatement[13932-13956]:VariableDeclarationStatement[13936-13960]"
  }, {
    "left" : "ImmutableSet.Builder<JSType> resolvedTypes = ImmutableSet.builder();",
    "right" : "ImmutableSet.Builder<JSType> resolvedTypes = ImmutableSet.builder();",
    "info" : "VariableDeclarationStatement[13961-14029]:VariableDeclarationStatement[13965-14033]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[14034-14216]:EnhancedForStatement[14038-14220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14070-14216]:Block[14074-14220]"
  }, {
    "left" : "JSType newAlternate = alternate.resolve(t, scope);",
    "right" : "JSType newAlternate = alternate.resolve(t, scope);",
    "info" : "VariableDeclarationStatement[14078-14128]:VariableDeclarationStatement[14082-14132]"
  }, {
    "left" : "changed |= (alternate != newAlternate);",
    "right" : "changed |= (alternate != newAlternate);",
    "info" : "ExpressionStatement[14135-14174]:ExpressionStatement[14139-14178]"
  }, {
    "left" : "resolvedTypes.add(alternate);",
    "right" : "resolvedTypes.add(alternate);",
    "info" : "ExpressionStatement[14181-14210]:ExpressionStatement[14185-14214]"
  }, {
    "left" : "if (changed)",
    "right" : "if (changed)",
    "info" : "IfStatement[14221-14283]:IfStatement[14225-14287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14234-14283]:Block[14238-14287]"
  }, {
    "left" : "alternates = resolvedTypes.build();",
    "right" : "alternates = resolvedTypes.build();",
    "info" : "ExpressionStatement[14242-14277]:ExpressionStatement[14246-14281]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[14288-14300]:ReturnStatement[14292-14304]"
  } ]
}