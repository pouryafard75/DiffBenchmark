{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public void setUp()",
      "right" : "public void setUp()",
      "info" : "MethodDeclaration[998-1149]:MethodDeclaration[2848-2999]"
    }, {
      "left" : "protected CompilerOptions getOptions()",
      "right" : "protected CompilerOptions getOptions()",
      "info" : "MethodDeclaration[1153-1339]:MethodDeclaration[3003-3189]"
    }, {
      "left" : "public CompilerPass getProcessor(Compiler compiler)",
      "right" : "public CompilerPass getProcessor(Compiler compiler)",
      "info" : "MethodDeclaration[1343-1463]:MethodDeclaration[3193-3313]"
    }, {
      "left" : "protected int getNumRepetitions()",
      "right" : "protected int getNumRepetitions()",
      "info" : "MethodDeclaration[1467-1532]:MethodDeclaration[3317-3382]"
    }, {
      "left" : "public void testVariableDeclaration()",
      "right" : "public void testVariableDeclaration()",
      "info" : "MethodDeclaration[1536-1647]:MethodDeclaration[3386-3497]"
    }, {
      "left" : "public void testVariableDeclarationWithoutDeclaredType() throws Exception",
      "right" : "public void testVariableDeclarationWithoutDeclaredType() throws Exception",
      "info" : "MethodDeclaration[1651-1768]:MethodDeclaration[3501-3618]"
    }, {
      "left" : "public void testFunctionReturnType() throws Exception",
      "right" : "public void testFunctionReturnType() throws Exception",
      "info" : "MethodDeclaration[1772-1912]:MethodDeclaration[3622-3762]"
    }, {
      "left" : "public void testFunctionParameterTypes() throws Exception",
      "right" : "public void testFunctionParameterTypes() throws Exception",
      "info" : "MethodDeclaration[1916-2100]:MethodDeclaration[3766-3950]"
    }, {
      "left" : "public void testFunctionInsideAssignment() throws Exception",
      "right" : "public void testFunctionInsideAssignment() throws Exception",
      "info" : "MethodDeclaration[2104-2340]:MethodDeclaration[3954-4190]"
    }, {
      "left" : "public void testNestedFunctions() throws Exception",
      "right" : "public void testNestedFunctions() throws Exception",
      "info" : "MethodDeclaration[2344-2654]:MethodDeclaration[4194-4504]"
    }, {
      "left" : "public void testUnknownType() throws Exception",
      "right" : "public void testUnknownType() throws Exception",
      "info" : "MethodDeclaration[2658-2762]:MethodDeclaration[4508-4612]"
    }, {
      "left" : "public void testUndefinedType() throws Exception",
      "right" : "public void testUndefinedType() throws Exception",
      "info" : "MethodDeclaration[2877-2986]:MethodDeclaration[4727-4836]"
    } ],
    "mappings" : [
 {
      "left" : "package com.google.javascript.jscomp;",
      "right" : "package com.google.javascript.jscomp;",
      "info" : "PackageDeclaration[614-651]:PackageDeclaration[614-651]"
    }, {
      "left" : "import com.google.javascript.jscomp.CompilerOptions.LanguageMode;",
      "right" : "import com.google.javascript.jscomp.CompilerOptions.LanguageMode;",
      "info" : "ImportDeclaration[653-718]:ImportDeclaration[2123-2188]"
    }, {
      "left" : "CompilerTestCase",
      "right" : "CompilerTestCase",
      "info" : "SimpleType[976-992]:SimpleType[2826-2842]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[998-1007]:MarkerAnnotation[2848-2857]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1010-1016]:Modifier[2860-2866]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1017-1021]:PrimitiveType[2867-2871]"
    }, {
      "left" : "setUp",
      "right" : "setUp",
      "info" : "SimpleName[1022-1027]:SimpleName[2872-2877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1030-1149]:Block[2880-2999]"
    }, {
      "left" : "setAcceptedLanguage(LanguageMode.ECMASCRIPT6_TYPED);",
      "right" : "setAcceptedLanguage(LanguageMode.ECMASCRIPT6_TYPED);",
      "info" : "ExpressionStatement[1036-1088]:ExpressionStatement[2886-2938]"
    }, {
      "left" : "enableAstValidation(true);",
      "right" : "enableAstValidation(true);",
      "info" : "ExpressionStatement[1093-1119]:ExpressionStatement[2943-2969]"
    }, {
      "left" : "compareJsDoc = false;",
      "right" : "compareJsDoc = false;",
      "info" : "ExpressionStatement[1124-1145]:ExpressionStatement[2974-2995]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1153-1162]:MarkerAnnotation[3003-3012]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1165-1174]:Modifier[3015-3024]"
    }, {
      "left" : "CompilerOptions",
      "right" : "CompilerOptions",
      "info" : "SimpleType[1175-1190]:SimpleType[3025-3040]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[1191-1201]:SimpleName[3041-3051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1204-1339]:Block[3054-3189]"
    }, {
      "left" : "CompilerOptions options = super.getOptions();",
      "right" : "CompilerOptions options = super.getOptions();",
      "info" : "VariableDeclarationStatement[1210-1255]:VariableDeclarationStatement[3060-3105]"
    }, {
      "left" : "options.setLanguageOut(LanguageMode.ECMASCRIPT6_TYPED);",
      "right" : "options.setLanguageOut(LanguageMode.ECMASCRIPT6_TYPED);",
      "info" : "ExpressionStatement[1260-1315]:ExpressionStatement[3110-3165]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[1320-1335]:ReturnStatement[3170-3185]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1343-1352]:MarkerAnnotation[3193-3202]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1355-1361]:Modifier[3205-3211]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1362-1374]:SimpleType[3212-3224]"
    }, {
      "left" : "getProcessor",
      "right" : "getProcessor",
      "info" : "SimpleName[1375-1387]:SimpleName[3225-3237]"
    }, {
      "left" : "Compiler compiler",
      "right" : "Compiler compiler",
      "info" : "SingleVariableDeclaration[1388-1405]:SingleVariableDeclaration[3238-3255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1407-1463]:Block[3257-3313]"
    }, {
      "left" : "return new JsdocToEs6TypedConverter(compiler);",
      "right" : "return new JsdocToEs6TypedConverter(compiler);",
      "info" : "ReturnStatement[1413-1459]:ReturnStatement[3263-3309]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1467-1476]:MarkerAnnotation[3317-3326]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1479-1488]:Modifier[3329-3338]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1489-1492]:PrimitiveType[3339-3342]"
    }, {
      "left" : "getNumRepetitions",
      "right" : "getNumRepetitions",
      "info" : "SimpleName[1493-1510]:SimpleName[3343-3360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1513-1532]:Block[3363-3382]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[1519-1528]:ReturnStatement[3369-3378]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1536-1542]:Modifier[3386-3392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1543-1547]:PrimitiveType[3393-3397]"
    }, {
      "left" : "testVariableDeclaration",
      "right" : "testVariableDeclaration",
      "info" : "SimpleName[1548-1571]:SimpleName[3398-3421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1574-1647]:Block[3424-3497]"
    }, {
      "left" : "test(\"/** @type {string} */ var print;\", \"var print: string;\");",
      "right" : "test(\"/** @type {string} */ var print;\", \"var print: string;\");",
      "info" : "ExpressionStatement[1580-1643]:ExpressionStatement[3430-3493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1651-1657]:Modifier[3501-3507]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1658-1662]:PrimitiveType[3508-3512]"
    }, {
      "left" : "testVariableDeclarationWithoutDeclaredType",
      "right" : "testVariableDeclarationWithoutDeclaredType",
      "info" : "SimpleName[1663-1705]:SimpleName[3513-3555]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1715-1724]:SimpleType[3565-3574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1725-1768]:Block[3575-3618]"
    }, {
      "left" : "test(\"var print;\", \"var print;\");",
      "right" : "test(\"var print;\", \"var print;\");",
      "info" : "ExpressionStatement[1731-1764]:ExpressionStatement[3581-3614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1772-1778]:Modifier[3622-3628]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1779-1783]:PrimitiveType[3629-3633]"
    }, {
      "left" : "testFunctionReturnType",
      "right" : "testFunctionReturnType",
      "info" : "SimpleName[1784-1806]:SimpleName[3634-3656]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1816-1825]:SimpleType[3666-3675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1826-1912]:Block[3676-3762]"
    }, {
      "left" : "test(\"/** @return {boolean} */ function b(){}\", \"function b(): boolean {}\");",
      "right" : "test(\"/** @return {boolean} */ function b(){}\", \"function b(): boolean {}\");",
      "info" : "ExpressionStatement[1832-1908]:ExpressionStatement[3682-3758]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1916-1922]:Modifier[3766-3772]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1923-1927]:PrimitiveType[3773-3777]"
    }, {
      "left" : "testFunctionParameterTypes",
      "right" : "testFunctionParameterTypes",
      "info" : "SimpleName[1928-1954]:SimpleName[3778-3804]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1964-1973]:SimpleType[3814-3823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1974-2100]:Block[3824-3950]"
    }, {
      "left" : "test(\"/** @param {number} n @param {string} s */ function t(n,s){}\",\n        \"function t(n: number, s: string) {}\");",
      "right" : "test(\"/** @param {number} n @param {string} s */ function t(n,s){}\",\n        \"function t(n: number, s: string) {}\");",
      "info" : "ExpressionStatement[1980-2096]:ExpressionStatement[3830-3946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2104-2110]:Modifier[3954-3960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2111-2115]:PrimitiveType[3961-3965]"
    }, {
      "left" : "testFunctionInsideAssignment",
      "right" : "testFunctionInsideAssignment",
      "info" : "SimpleName[2116-2144]:SimpleName[3966-3994]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2154-2163]:SimpleType[4004-4013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2164-2340]:Block[4014-4190]"
    }, {
      "left" : "test(\"/** @param {boolean} b @return {boolean} */ \"\n            + \"var f = function(b){return !b};\",\n        \"var f = function(b: boolean): boolean { return !b; };\");",
      "right" : "test(\"/** @param {boolean} b @return {boolean} */ \"\n            + \"var f = function(b){return !b};\",\n        \"var f = function(b: boolean): boolean { return !b; };\");",
      "info" : "ExpressionStatement[2170-2336]:ExpressionStatement[4020-4186]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2344-2350]:Modifier[4194-4200]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2351-2355]:PrimitiveType[4201-4205]"
    }, {
      "left" : "testNestedFunctions",
      "right" : "testNestedFunctions",
      "info" : "SimpleName[2356-2375]:SimpleName[4206-4225]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2385-2394]:SimpleType[4235-4244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2395-2654]:Block[4245-4504]"
    }, {
      "left" : "test(\"/**@param {boolean} b*/ \"\n            + \"var f = function(b){var t = function(l) {}; t();};\",\n            \"var f = function(b: boolean) {\"\n            + \"  var t = function(l) {\"\n            + \"  };\"\n            + \"  t();\"\n            + \"};\");",
      "right" : "test(\"/**@param {boolean} b*/ \"\n            + \"var f = function(b){var t = function(l) {}; t();};\",\n            \"var f = function(b: boolean) {\"\n            + \"  var t = function(l) {\"\n            + \"  };\"\n            + \"  t();\"\n            + \"};\");",
      "info" : "ExpressionStatement[2401-2650]:ExpressionStatement[4251-4500]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2658-2664]:Modifier[4508-4514]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2665-2669]:PrimitiveType[4515-4519]"
    }, {
      "left" : "testUnknownType",
      "right" : "testUnknownType",
      "info" : "SimpleName[2670-2685]:SimpleName[4520-4535]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2695-2704]:SimpleType[4545-4554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2705-2762]:Block[4555-4612]"
    }, {
      "left" : "test(\"/** @type {?} */ var n;\", \"var n: any;\");",
      "right" : "test(\"/** @type {?} */ var n;\", \"var n: any;\");",
      "info" : "ExpressionStatement[2711-2758]:ExpressionStatement[4561-4608]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2877-2883]:Modifier[4727-4733]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2884-2888]:PrimitiveType[4734-4738]"
    }, {
      "left" : "testUndefinedType",
      "right" : "testUndefinedType",
      "info" : "SimpleName[2889-2906]:SimpleName[4739-4756]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2916-2925]:SimpleType[4766-4775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2926-2986]:Block[4776-4836]"
    }, {
      "left" : "test(\"/** @type {undefined} */ var n;\", \"var n;\");",
      "right" : "test(\"/** @type {undefined} */ var n;\", \"var n;\");",
      "info" : "ExpressionStatement[2932-2982]:ExpressionStatement[4782-4832]"
    } ]
  },
  "interFileMappings" : {
    "Moved from File: test/com/google/javascript/jscomp/parsing/TypeDeclarationsIRFactoryTest.java" : {
      "matchedElements" : [
 {
        "left" : "TypeDeclarationsIRFactoryTest",
        "right" : "JsdocToEs6TypedConverterTest",
        "info" : "TypeDeclaration[2541-9692]:TypeDeclaration[2570-10200]"
      }, {
        "left" : "public void testConvertSimpleTypes()",
        "right" : "public void testConvertSimpleTypes()",
        "info" : "MethodDeclaration[2808-3146]:MethodDeclaration[4840-5178]"
      }, {
        "left" : "public void testConvertNamedTypes() throws Exception",
        "right" : "public void testConvertNamedTypes() throws Exception",
        "info" : "MethodDeclaration[3150-3571]:MethodDeclaration[5182-5603]"
      }, {
        "left" : "public void testConvertTypeApplication() throws Exception",
        "right" : "public void testConvertTypeApplication() throws Exception",
        "info" : "MethodDeclaration[3575-4143]:MethodDeclaration[5607-6175]"
      }, {
        "left" : "public void testConvertTypeUnion() throws Exception",
        "right" : "public void testConvertTypeUnion() throws Exception",
        "info" : "MethodDeclaration[4147-4314]:MethodDeclaration[6179-6346]"
      }, {
        "left" : "public void testConvertRecordType() throws Exception",
        "right" : "public void testConvertRecordType() throws Exception",
        "info" : "MethodDeclaration[4318-4644]:MethodDeclaration[6350-6676]"
      }, {
        "left" : "public void testCreateRecordType() throws Exception",
        "right" : "public void testCreateRecordType() throws Exception",
        "info" : "MethodDeclaration[4648-5167]:MethodDeclaration[6680-7199]"
      }, {
        "left" : "public void testConvertRecordTypeWithTypeApplication() throws Exception",
        "right" : "public void testConvertRecordTypeWithTypeApplication() throws Exception",
        "info" : "MethodDeclaration[5171-5453]:MethodDeclaration[7203-7485]"
      }, {
        "left" : "public void testConvertNullableType() throws Exception",
        "right" : "public void testConvertNullableType() throws Exception",
        "info" : "MethodDeclaration[5457-5592]:MethodDeclaration[7489-7624]"
      }, {
        "left" : "public void testConvertNonNullableType() throws Exception",
        "right" : "public void testConvertNonNullableType() throws Exception",
        "info" : "MethodDeclaration[5693-5838]:MethodDeclaration[7725-7870]"
      }, {
        "left" : "public void testConvertFunctionType() throws Exception",
        "right" : "public void testConvertFunctionType() throws Exception",
        "info" : "MethodDeclaration[5842-6195]:MethodDeclaration[7874-8227]"
      }, {
        "left" : "public void testConvertFunctionReturnType() throws Exception",
        "right" : "public void testConvertFunctionReturnType() throws Exception",
        "info" : "MethodDeclaration[6199-6391]:MethodDeclaration[8231-8423]"
      }, {
        "left" : "public void testConvertFunctionThisType() throws Exception",
        "right" : "public void testConvertFunctionThisType() throws Exception",
        "info" : "MethodDeclaration[6395-6680]:MethodDeclaration[8427-8712]"
      }, {
        "left" : "public void testConvertFunctionNewType() throws Exception",
        "right" : "public void testConvertFunctionNewType() throws Exception",
        "info" : "MethodDeclaration[6684-6967]:MethodDeclaration[8716-8999]"
      }, {
        "left" : "public void testConvertVariableParameters() throws Exception",
        "right" : "public void testConvertVariableParameters() throws Exception",
        "info" : "MethodDeclaration[6971-7353]:MethodDeclaration[9003-9385]"
      }, {
        "left" : "public void testConvertOptionalFunctionParameters() throws Exception",
        "right" : "public void testConvertOptionalFunctionParameters() throws Exception",
        "info" : "MethodDeclaration[7357-7843]:MethodDeclaration[9389-9875]"
      }, {
        "left" : "private NodeSubject assertParseTypeAndConvert(final String typeExpr)",
        "right" : "private NodeSubject assertParseTypeAndConvert(final String typeExpr)",
        "info" : "MethodDeclaration[9371-9690]:MethodDeclaration[9879-10198]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2845-3146]:Block[4877-5178]"
      }, {
        "left" : "assertParseTypeAndConvert(\"?\").hasType(ANY_TYPE);",
        "right" : "assertParseTypeAndConvert(\"?\").hasType(ANY_TYPE);",
        "info" : "ExpressionStatement[2851-2900]:ExpressionStatement[4883-4932]"
      }, {
        "left" : "assertParseTypeAndConvert(\"*\").hasType(ANY_TYPE);",
        "right" : "assertParseTypeAndConvert(\"*\").hasType(ANY_TYPE);",
        "info" : "ExpressionStatement[2905-2954]:ExpressionStatement[4937-4986]"
      }, {
        "left" : "assertParseTypeAndConvert(\"boolean\").hasType(BOOLEAN_TYPE);",
        "right" : "assertParseTypeAndConvert(\"boolean\").hasType(BOOLEAN_TYPE);",
        "info" : "ExpressionStatement[2959-3018]:ExpressionStatement[4991-5050]"
      }, {
        "left" : "assertParseTypeAndConvert(\"number\").hasType(NUMBER_TYPE);",
        "right" : "assertParseTypeAndConvert(\"number\").hasType(NUMBER_TYPE);",
        "info" : "ExpressionStatement[3023-3080]:ExpressionStatement[5055-5112]"
      }, {
        "left" : "assertParseTypeAndConvert(\"string\").hasType(STRING_TYPE);",
        "right" : "assertParseTypeAndConvert(\"string\").hasType(STRING_TYPE);",
        "info" : "ExpressionStatement[3085-3142]:ExpressionStatement[5117-5174]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3203-3571]:Block[5235-5603]"
      }, {
        "left" : "assertParseTypeAndConvert(\"Window\")\n        .isEqualTo(namedType(\"Window\"));",
        "right" : "assertParseTypeAndConvert(\"Window\")\n        .isEqualTo(namedType(\"Window\"));",
        "info" : "ExpressionStatement[3209-3285]:ExpressionStatement[5241-5317]"
      }, {
        "left" : "assertParseTypeAndConvert(\"goog.ui.Menu\")\n        .isEqualTo(namedType(\"goog.ui.Menu\"));",
        "right" : "assertParseTypeAndConvert(\"goog.ui.Menu\")\n        .isEqualTo(namedType(\"goog.ui.Menu\"));",
        "info" : "ExpressionStatement[3290-3378]:ExpressionStatement[5322-5410]"
      }, {
        "left" : "assertNode(namedType(\"goog.ui.Menu\"))\n        .isEqualTo(new TypeDeclarationNode(NAMED_TYPE,\n            IR.getprop(IR.getprop(IR.name(\"goog\"), IR.string(\"ui\")), IR.string(\"Menu\"))));",
        "right" : "assertNode(namedType(\"goog.ui.Menu\"))\n        .isEqualTo(new TypeDeclarationNode(NAMED_TYPE,\n            IR.getprop(IR.getprop(IR.name(\"goog\"), IR.string(\"ui\")), IR.string(\"Menu\"))));",
        "info" : "ExpressionStatement[3384-3567]:ExpressionStatement[5416-5599]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3633-4143]:Block[5665-6175]"
      }, {
        "left" : "assertParseTypeAndConvert(\"Array.<string>\")\n        .isEqualTo(arrayType(stringType()));",
        "right" : "assertParseTypeAndConvert(\"Array.<string>\")\n        .isEqualTo(arrayType(stringType()));",
        "info" : "ExpressionStatement[3639-3727]:ExpressionStatement[5671-5759]"
      }, {
        "left" : "assertParseTypeAndConvert(\"Object.<string, number>\")\n        .isEqualTo(parameterizedType(namedType(\"Object\"), asList(stringType(), numberType())));",
        "right" : "assertParseTypeAndConvert(\"Object.<string, number>\")\n        .isEqualTo(parameterizedType(namedType(\"Object\"), asList(stringType(), numberType())));",
        "info" : "ExpressionStatement[3732-3880]:ExpressionStatement[5764-5912]"
      }, {
        "left" : "assertNode(parameterizedType(namedType(\"Array\"), asList(stringType())))\n        .isEqualTo(new TypeDeclarationNode(PARAMETERIZED_TYPE,\n            new TypeDeclarationNode(NAMED_TYPE, IR.name(\"Array\")),\n            new TypeDeclarationNode(STRING_TYPE)));",
        "right" : "assertNode(parameterizedType(namedType(\"Array\"), asList(stringType())))\n        .isEqualTo(new TypeDeclarationNode(PARAMETERIZED_TYPE,\n            new TypeDeclarationNode(NAMED_TYPE, IR.name(\"Array\")),\n            new TypeDeclarationNode(STRING_TYPE)));",
        "info" : "ExpressionStatement[3886-4139]:ExpressionStatement[5918-6171]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4199-4314]:Block[6231-6346]"
      }, {
        "left" : "assertParseTypeAndConvert(\"(number|boolean)\")\n        .isEqualTo(unionType(numberType(), booleanType()));",
        "right" : "assertParseTypeAndConvert(\"(number|boolean)\")\n        .isEqualTo(unionType(numberType(), booleanType()));",
        "info" : "ExpressionStatement[4205-4310]:ExpressionStatement[6237-6342]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4371-4644]:Block[6403-6676]"
      }, {
        "left" : "LinkedHashMap<String, TypeDeclarationNode> properties = new LinkedHashMap<>();",
        "right" : "LinkedHashMap<String, TypeDeclarationNode> properties = new LinkedHashMap<>();",
        "info" : "VariableDeclarationStatement[4377-4455]:VariableDeclarationStatement[6409-6487]"
      }, {
        "left" : "properties.put(\"myNum\", numberType());",
        "right" : "properties.put(\"myNum\", numberType());",
        "info" : "ExpressionStatement[4460-4498]:ExpressionStatement[6492-6530]"
      }, {
        "left" : "properties.put(\"myObject\", null);",
        "right" : "properties.put(\"myObject\", null);",
        "info" : "ExpressionStatement[4503-4536]:ExpressionStatement[6535-6568]"
      }, {
        "left" : "assertParseTypeAndConvert(\"{myNum: number, myObject}\")\n        .isEqualTo(recordType(properties));",
        "right" : "assertParseTypeAndConvert(\"{myNum: number, myObject}\")\n        .isEqualTo(recordType(properties));",
        "info" : "ExpressionStatement[4542-4640]:ExpressionStatement[6574-6672]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4700-5167]:Block[6732-7199]"
      }, {
        "left" : "LinkedHashMap<String, TypeDeclarationNode> properties = new LinkedHashMap<>();",
        "right" : "LinkedHashMap<String, TypeDeclarationNode> properties = new LinkedHashMap<>();",
        "info" : "VariableDeclarationStatement[4706-4784]:VariableDeclarationStatement[6738-6816]"
      }, {
        "left" : "properties.put(\"myNum\", numberType());",
        "right" : "properties.put(\"myNum\", numberType());",
        "info" : "ExpressionStatement[4789-4827]:ExpressionStatement[6821-6859]"
      }, {
        "left" : "properties.put(\"myObject\", null);",
        "right" : "properties.put(\"myObject\", null);",
        "info" : "ExpressionStatement[4832-4865]:ExpressionStatement[6864-6897]"
      }, {
        "left" : "TypeDeclarationNode node = recordType(properties);",
        "right" : "TypeDeclarationNode node = recordType(properties);",
        "info" : "VariableDeclarationStatement[4870-4920]:VariableDeclarationStatement[6902-6952]"
      }, {
        "left" : "Node prop1 = IR.stringKey(\"myNum\");",
        "right" : "Node prop1 = IR.stringKey(\"myNum\");",
        "info" : "VariableDeclarationStatement[4926-4961]:VariableDeclarationStatement[6958-6993]"
      }, {
        "left" : "prop1.addChildToFront(new TypeDeclarationNode(NUMBER_TYPE));",
        "right" : "prop1.addChildToFront(new TypeDeclarationNode(NUMBER_TYPE));",
        "info" : "ExpressionStatement[4966-5026]:ExpressionStatement[6998-7058]"
      }, {
        "left" : "Node prop2 = IR.stringKey(\"myObject\");",
        "right" : "Node prop2 = IR.stringKey(\"myObject\");",
        "info" : "VariableDeclarationStatement[5031-5069]:VariableDeclarationStatement[7063-7101]"
      }, {
        "left" : "assertNode(node)\n        .isEqualTo(new TypeDeclarationNode(RECORD_TYPE, prop1, prop2));",
        "right" : "assertNode(node)\n        .isEqualTo(new TypeDeclarationNode(RECORD_TYPE, prop1, prop2));",
        "info" : "ExpressionStatement[5075-5163]:ExpressionStatement[7107-7195]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5243-5453]:Block[7275-7485]"
      }, {
        "left" : "Node prop1 = IR.stringKey(\"length\");",
        "right" : "Node prop1 = IR.stringKey(\"length\");",
        "info" : "VariableDeclarationStatement[5249-5285]:VariableDeclarationStatement[7281-7317]"
      }, {
        "left" : "assertParseTypeAndConvert(\"Array.<{length}>\")\n        .isEqualTo(new TypeDeclarationNode(ARRAY_TYPE,\n            new TypeDeclarationNode(RECORD_TYPE, prop1)));",
        "right" : "assertParseTypeAndConvert(\"Array.<{length}>\")\n        .isEqualTo(new TypeDeclarationNode(ARRAY_TYPE,\n            new TypeDeclarationNode(RECORD_TYPE, prop1)));",
        "info" : "ExpressionStatement[5290-5449]:ExpressionStatement[7322-7481]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5512-5592]:Block[7544-7624]"
      }, {
        "left" : "assertParseTypeAndConvert(\"?number\")\n        .isEqualTo(numberType());",
        "right" : "assertParseTypeAndConvert(\"?number\")\n        .isEqualTo(numberType());",
        "info" : "ExpressionStatement[5518-5588]:ExpressionStatement[7550-7620]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5751-5838]:Block[7783-7870]"
      }, {
        "left" : "assertParseTypeAndConvert(\"!Object\")\n        .isEqualTo(namedType(\"Object\"));",
        "right" : "assertParseTypeAndConvert(\"!Object\")\n        .isEqualTo(namedType(\"Object\"));",
        "info" : "ExpressionStatement[5757-5834]:ExpressionStatement[7789-7866]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5897-6195]:Block[7929-8227]"
      }, {
        "left" : "Node p1 = IR.name(\"p1\");",
        "right" : "Node p1 = IR.name(\"p1\");",
        "info" : "VariableDeclarationStatement[5903-5927]:VariableDeclarationStatement[7935-7959]"
      }, {
        "left" : "p1.setDeclaredTypeExpression(stringType());",
        "right" : "p1.setDeclaredTypeExpression(stringType());",
        "info" : "ExpressionStatement[5932-5975]:ExpressionStatement[7964-8007]"
      }, {
        "left" : "Node p2 = IR.name(\"p2\");",
        "right" : "Node p2 = IR.name(\"p2\");",
        "info" : "VariableDeclarationStatement[5980-6004]:VariableDeclarationStatement[8012-8036]"
      }, {
        "left" : "p2.setDeclaredTypeExpression(booleanType());",
        "right" : "p2.setDeclaredTypeExpression(booleanType());",
        "info" : "ExpressionStatement[6009-6053]:ExpressionStatement[8041-8085]"
      }, {
        "left" : "assertParseTypeAndConvert(\"function(string, boolean)\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, anyType(), p1, p2));",
        "right" : "assertParseTypeAndConvert(\"function(string, boolean)\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, anyType(), p1, p2));",
        "info" : "ExpressionStatement[6058-6191]:ExpressionStatement[8090-8223]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6260-6391]:Block[8292-8423]"
      }, {
        "left" : "assertParseTypeAndConvert(\"function(): number\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, numberType()));",
        "right" : "assertParseTypeAndConvert(\"function(): number\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, numberType()));",
        "info" : "ExpressionStatement[6266-6387]:ExpressionStatement[8298-8419]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6454-6680]:Block[8486-8712]"
      }, {
        "left" : "Node p1 = IR.name(\"p1\");",
        "right" : "Node p1 = IR.name(\"p1\");",
        "info" : "VariableDeclarationStatement[6460-6484]:VariableDeclarationStatement[8492-8516]"
      }, {
        "left" : "p1.setDeclaredTypeExpression(stringType());",
        "right" : "p1.setDeclaredTypeExpression(stringType());",
        "info" : "ExpressionStatement[6489-6532]:ExpressionStatement[8521-8564]"
      }, {
        "left" : "assertParseTypeAndConvert(\"function(this:goog.ui.Menu, string)\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, anyType(), p1));",
        "right" : "assertParseTypeAndConvert(\"function(this:goog.ui.Menu, string)\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, anyType(), p1));",
        "info" : "ExpressionStatement[6537-6676]:ExpressionStatement[8569-8708]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6742-6967]:Block[8774-8999]"
      }, {
        "left" : "Node p1 = IR.name(\"p1\");",
        "right" : "Node p1 = IR.name(\"p1\");",
        "info" : "VariableDeclarationStatement[6748-6772]:VariableDeclarationStatement[8780-8804]"
      }, {
        "left" : "p1.setDeclaredTypeExpression(stringType());",
        "right" : "p1.setDeclaredTypeExpression(stringType());",
        "info" : "ExpressionStatement[6777-6820]:ExpressionStatement[8809-8852]"
      }, {
        "left" : "assertParseTypeAndConvert(\"function(new:goog.ui.Menu, string)\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, anyType(), p1));",
        "right" : "assertParseTypeAndConvert(\"function(new:goog.ui.Menu, string)\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, anyType(), p1));",
        "info" : "ExpressionStatement[6825-6963]:ExpressionStatement[8857-8995]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7032-7353]:Block[9064-9385]"
      }, {
        "left" : "Node p1 = IR.name(\"p1\");",
        "right" : "Node p1 = IR.name(\"p1\");",
        "info" : "VariableDeclarationStatement[7038-7062]:VariableDeclarationStatement[9070-9094]"
      }, {
        "left" : "p1.setDeclaredTypeExpression(stringType());",
        "right" : "p1.setDeclaredTypeExpression(stringType());",
        "info" : "ExpressionStatement[7067-7110]:ExpressionStatement[9099-9142]"
      }, {
        "left" : "Node p2 = IR.rest(\"p2\");",
        "right" : "Node p2 = IR.rest(\"p2\");",
        "info" : "VariableDeclarationStatement[7115-7139]:VariableDeclarationStatement[9147-9171]"
      }, {
        "left" : "p2.setDeclaredTypeExpression(arrayType(numberType()));",
        "right" : "p2.setDeclaredTypeExpression(arrayType(numberType()));",
        "info" : "ExpressionStatement[7144-7198]:ExpressionStatement[9176-9230]"
      }, {
        "left" : "assertParseTypeAndConvert(\"function(string, ...number): number\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, numberType(), p1, p2));",
        "right" : "assertParseTypeAndConvert(\"function(string, ...number): number\")\n        .isEqualTo(new TypeDeclarationNode(FUNCTION_TYPE, numberType(), p1, p2));",
        "info" : "ExpressionStatement[7203-7349]:ExpressionStatement[9235-9381]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7426-7843]:Block[9458-9875]"
      }, {
        "left" : "LinkedHashMap<String, TypeDeclarationNode> requiredParams = new LinkedHashMap<>();",
        "right" : "LinkedHashMap<String, TypeDeclarationNode> requiredParams = new LinkedHashMap<>();",
        "info" : "VariableDeclarationStatement[7432-7514]:VariableDeclarationStatement[9464-9546]"
      }, {
        "left" : "LinkedHashMap<String, TypeDeclarationNode> optionalParams = new LinkedHashMap<>();",
        "right" : "LinkedHashMap<String, TypeDeclarationNode> optionalParams = new LinkedHashMap<>();",
        "info" : "VariableDeclarationStatement[7519-7601]:VariableDeclarationStatement[9551-9633]"
      }, {
        "left" : "optionalParams.put(\"p1\", stringType());",
        "right" : "optionalParams.put(\"p1\", stringType());",
        "info" : "ExpressionStatement[7606-7645]:ExpressionStatement[9638-9677]"
      }, {
        "left" : "optionalParams.put(\"p2\", numberType());",
        "right" : "optionalParams.put(\"p2\", numberType());",
        "info" : "ExpressionStatement[7650-7689]:ExpressionStatement[9682-9721]"
      }, {
        "left" : "assertParseTypeAndConvert(\"function(?string=, number=)\")\n        .isEqualTo(functionType(anyType(), requiredParams, optionalParams, null, null));",
        "right" : "assertParseTypeAndConvert(\"function(?string=, number=)\")\n        .isEqualTo(functionType(anyType(), requiredParams, optionalParams, null, null));",
        "info" : "ExpressionStatement[7694-7839]:ExpressionStatement[9726-9871]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[9440-9690]:Block[9948-10198]"
      }, {
        "left" : "Node oldAST = JsDocInfoParser.parseTypeString(typeExpr);",
        "right" : "Node oldAST = JsDocInfoParser.parseTypeString(typeExpr);",
        "info" : "VariableDeclarationStatement[9446-9502]:VariableDeclarationStatement[9954-10010]"
      }, {
        "left" : "assertNotNull(typeExpr + \" did not produce a parsed AST\", oldAST);",
        "right" : "assertNotNull(typeExpr + \" did not produce a parsed AST\", oldAST);",
        "info" : "ExpressionStatement[9507-9573]:ExpressionStatement[10015-10081]"
      }, {
        "left" : "return new NodeSubject(THROW_ASSERTION_ERROR,\n        TypeDeclarationsIRFactory.convertTypeNodeAST(oldAST));",
        "right" : "return new NodeSubject(THROW_ASSERTION_ERROR,\n        TypeDeclarationsIRFactory.convertTypeNodeAST(oldAST));",
        "info" : "ReturnStatement[9578-9686]:ReturnStatement[10086-10194]"
      } ]
    }
  }
}