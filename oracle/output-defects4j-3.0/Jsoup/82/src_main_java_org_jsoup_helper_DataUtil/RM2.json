{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "TypeDeclaration[806-11691]:TypeDeclaration[806-11807]"
    }, {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[899-1008]:FieldDeclaration[899-1008]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[1013-1058]:FieldDeclaration[1013-1058]"
    }, {
      "left" : "private static final int firstReadBufferSize = 1024 * 5;",
      "right" : "private static final int firstReadBufferSize = 1024 * 5;",
      "info" : "FieldDeclaration[1110-1166]:FieldDeclaration[1110-1166]"
    }, {
      "left" : "static final int bufferSize = 1024 * 32;",
      "right" : "static final int bufferSize = 1024 * 32;",
      "info" : "FieldDeclaration[1171-1211]:FieldDeclaration[1171-1211]"
    }, {
      "left" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "right" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "info" : "FieldDeclaration[1216-1357]:FieldDeclaration[1216-1357]"
    }, {
      "left" : "static final int boundaryLength = 32;",
      "right" : "static final int boundaryLength = 32;",
      "info" : "FieldDeclaration[1362-1399]:FieldDeclaration[1362-1399]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[1405-1426]:MethodDeclaration[1405-1426]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1432-1903]:MethodDeclaration[1432-1903]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1909-2414]:MethodDeclaration[1909-2414]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2420-3027]:MethodDeclaration[2420-3027]"
    }, {
      "left" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "right" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "info" : "MethodDeclaration[3033-3511]:MethodDeclaration[3033-3511]"
    }, {
      "left" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[3517-7728]:MethodDeclaration[3517-7844]"
    }, {
      "left" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[7734-8574]:MethodDeclaration[7850-8690]"
    }, {
      "left" : "static ByteBuffer emptyByteBuffer()",
      "right" : "static ByteBuffer emptyByteBuffer()",
      "info" : "MethodDeclaration[8580-8662]:MethodDeclaration[8696-8778]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[8668-9337]:MethodDeclaration[8784-9453]"
    }, {
      "left" : "private static String validateCharset(String cs)",
      "right" : "private static String validateCharset(String cs)",
      "info" : "MethodDeclaration[9343-9831]:MethodDeclaration[9459-9947]"
    }, {
      "left" : "static String mimeBoundary()",
      "right" : "static String mimeBoundary()",
      "info" : "MethodDeclaration[9837-10246]:MethodDeclaration[9953-10362]"
    }, {
      "left" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "right" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "info" : "MethodDeclaration[10252-11427]:MethodDeclaration[10368-11543]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "TypeDeclaration[11433-11689]:TypeDeclaration[11549-11805]"
    }, {
      "left" : "private final String charset;",
      "right" : "private final String charset;",
      "info" : "FieldDeclaration[11475-11504]:FieldDeclaration[11591-11620]"
    }, {
      "left" : "private final boolean offset;",
      "right" : "private final boolean offset;",
      "info" : "FieldDeclaration[11513-11542]:FieldDeclaration[11629-11658]"
    }, {
      "left" : "public BomCharset(String charset, boolean offset)",
      "right" : "public BomCharset(String charset, boolean offset)",
      "info" : "MethodDeclaration[11552-11683]:MethodDeclaration[11668-11799]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[865-871]:Modifier[865-871]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[878-883]:TYPE_DECLARATION_KIND[878-883]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[884-892]:SimpleName[884-892]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1405-1412]:Modifier[1405-1412]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[1413-1421]:SimpleName[1413-1421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1424-1426]:Block[1424-1426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1703-1709]:Modifier[1703-1709]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1710-1716]:Modifier[1710-1716]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1717-1725]:SimpleType[1717-1725]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[1726-1730]:SimpleName[1726-1730]"
    }, {
      "left" : "File in",
      "right" : "File in",
      "info" : "SingleVariableDeclaration[1731-1738]:SingleVariableDeclaration[1731-1738]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[1740-1758]:SingleVariableDeclaration[1740-1758]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1760-1774]:SingleVariableDeclaration[1760-1774]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1783-1794]:SimpleType[1783-1794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1795-1903]:Block[1795-1903]"
    }, {
      "left" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1805-1897]:ReturnStatement[1805-1897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2228-2234]:Modifier[2228-2234]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2235-2241]:Modifier[2235-2241]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2242-2250]:SimpleType[2242-2250]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2251-2255]:SimpleName[2251-2255]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2256-2270]:SingleVariableDeclaration[2256-2270]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2272-2290]:SingleVariableDeclaration[2272-2290]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2292-2306]:SingleVariableDeclaration[2292-2306]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2315-2326]:SimpleType[2315-2326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2327-2414]:Block[2327-2414]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[2337-2408]:ReturnStatement[2337-2408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2839-2845]:Modifier[2839-2845]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2846-2852]:Modifier[2846-2852]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2853-2861]:SimpleType[2853-2861]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2862-2866]:SimpleName[2862-2866]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2867-2881]:SingleVariableDeclaration[2867-2881]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2883-2901]:SingleVariableDeclaration[2883-2901]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2903-2917]:SingleVariableDeclaration[2903-2917]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[2919-2932]:SingleVariableDeclaration[2919-2932]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2941-2952]:SimpleType[2941-2952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2953-3027]:Block[2953-3027]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "right" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2963-3021]:ReturnStatement[2963-3021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3248-3254]:Modifier[3248-3254]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3255-3259]:PrimitiveType[3255-3259]"
    }, {
      "left" : "crossStreams",
      "right" : "crossStreams",
      "info" : "SimpleName[3260-3272]:SimpleName[3260-3272]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[3273-3293]:SingleVariableDeclaration[3273-3293]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[3295-3317]:SingleVariableDeclaration[3295-3317]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3326-3337]:SimpleType[3326-3337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3338-3511]:Block[3338-3511]"
    }, {
      "left" : "final byte[] buffer = new byte[bufferSize];",
      "right" : "final byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[3348-3391]:VariableDeclarationStatement[3348-3391]"
    }, {
      "left" : "int len;",
      "right" : "int len;",
      "info" : "VariableDeclarationStatement[3400-3408]:VariableDeclarationStatement[3400-3408]"
    }, {
      "left" : "while ((len = in.read(buffer)) != -1)",
      "right" : "while ((len = in.read(buffer)) != -1)",
      "info" : "WhileStatement[3417-3505]:WhileStatement[3417-3505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3455-3505]:Block[3455-3505]"
    }, {
      "left" : "out.write(buffer, 0, len);",
      "right" : "out.write(buffer, 0, len);",
      "info" : "ExpressionStatement[3469-3495]:ExpressionStatement[3469-3495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3517-3523]:Modifier[3517-3523]"
    }, {
      "left" : "parseInputStream",
      "right" : "parseInputStream",
      "info" : "SimpleName[3533-3549]:SimpleName[3533-3549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3640-7728]:Block[3640-7844]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[3650-3724]:IfStatement[3650-3724]"
    }, {
      "left" : "return new Document(baseUri);",
      "right" : "return new Document(baseUri);",
      "info" : "ReturnStatement[3695-3724]:ReturnStatement[3695-3724]"
    }, {
      "left" : "input = ConstrainableInputStream.wrap(input, bufferSize, 0);",
      "right" : "input = ConstrainableInputStream.wrap(input, bufferSize, 0);",
      "info" : "ExpressionStatement[3733-3793]:ExpressionStatement[3733-3793]"
    }, {
      "left" : "Document doc = null;",
      "right" : "Document doc = null;",
      "info" : "VariableDeclarationStatement[3803-3823]:VariableDeclarationStatement[3803-3823]"
    }, {
      "left" : "boolean fullyRead = false;",
      "right" : "boolean fullyRead = false;",
      "info" : "VariableDeclarationStatement[3832-3858]:VariableDeclarationStatement[3832-3858]"
    }, {
      "left" : "input.mark(bufferSize);",
      "right" : "input.mark(bufferSize);",
      "info" : "ExpressionStatement[3943-3966]:ExpressionStatement[3943-3966]"
    }, {
      "left" : "ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);",
      "right" : "ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1);",
      "info" : "VariableDeclarationStatement[3975-4048]:VariableDeclarationStatement[3975-4048]"
    }, {
      "left" : "fullyRead = input.read() == -1;",
      "right" : "fullyRead = input.read() == -1;",
      "info" : "ExpressionStatement[4159-4190]:ExpressionStatement[4159-4190]"
    }, {
      "left" : "input.reset();",
      "right" : "input.reset();",
      "info" : "ExpressionStatement[4199-4213]:ExpressionStatement[4199-4213]"
    }, {
      "left" : "BomCharset bomCharset = detectCharsetFromBom(firstBytes);",
      "right" : "BomCharset bomCharset = detectCharsetFromBom(firstBytes);",
      "info" : "VariableDeclarationStatement[4285-4342]:VariableDeclarationStatement[4285-4342]"
    }, {
      "left" : "if (bomCharset != null)",
      "right" : "if (bomCharset != null)",
      "info" : "IfStatement[4351-4420]:IfStatement[4351-4420]"
    }, {
      "left" : "charsetName = bomCharset.charset;",
      "right" : "charsetName = bomCharset.charset;",
      "info" : "ExpressionStatement[4387-4420]:ExpressionStatement[4387-4420]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[4430-6788]:IfStatement[4430-6788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4455-6563]:Block[4455-6563]"
    }, {
      "left" : "String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
      "right" : "String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
      "info" : "VariableDeclarationStatement[4519-4598]:VariableDeclarationStatement[4519-4598]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[4611-4653]:ExpressionStatement[4611-4653]"
    }, {
      "left" : "Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");",
      "right" : "Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");",
      "info" : "VariableDeclarationStatement[4792-4875]:VariableDeclarationStatement[4792-4875]"
    }, {
      "left" : "String foundCharset = null;",
      "right" : "String foundCharset = null;",
      "info" : "VariableDeclarationStatement[4888-4915]:VariableDeclarationStatement[4888-4915]"
    }, {
      "left" : "for (Element meta : metaElements)",
      "right" : "for (Element meta : metaElements)",
      "info" : "EnhancedForStatement[4977-5353]:EnhancedForStatement[4977-5353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5011-5353]:Block[5011-5353]"
    }, {
      "left" : "if (meta.hasAttr(\"http-equiv\"))",
      "right" : "if (meta.hasAttr(\"http-equiv\"))",
      "info" : "IfStatement[5029-5144]:IfStatement[5029-5144]"
    }, {
      "left" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "right" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "info" : "ExpressionStatement[5081-5144]:ExpressionStatement[5081-5144]"
    }, {
      "left" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "right" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "info" : "IfStatement[5161-5270]:IfStatement[5161-5270]"
    }, {
      "left" : "foundCharset = meta.attr(\"charset\");",
      "right" : "foundCharset = meta.attr(\"charset\");",
      "info" : "ExpressionStatement[5234-5270]:ExpressionStatement[5234-5270]"
    }, {
      "left" : "if (foundCharset != null)",
      "right" : "if (foundCharset != null)",
      "info" : "IfStatement[5287-5339]:IfStatement[5287-5339]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5333-5339]:BreakStatement[5333-5339]"
    }, {
      "left" : "if (foundCharset == null && doc.childNodeSize() > 0)",
      "right" : "if (foundCharset == null && doc.childNodeSize() > 0)",
      "info" : "IfStatement[5421-6098]:IfStatement[5421-6098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5474-6098]:Block[5474-6098]"
    }, {
      "left" : "Node first = doc.childNode(0);",
      "right" : "Node first = doc.childNode(0);",
      "info" : "VariableDeclarationStatement[5492-5522]:VariableDeclarationStatement[5492-5522]"
    }, {
      "left" : "XmlDeclaration decl = null;",
      "right" : "XmlDeclaration decl = null;",
      "info" : "VariableDeclarationStatement[5539-5566]:VariableDeclarationStatement[5539-5566]"
    }, {
      "left" : "if (first instanceof XmlDeclaration)",
      "right" : "if (first instanceof XmlDeclaration)",
      "info" : "IfStatement[5583-5907]:IfStatement[5583-5907]"
    }, {
      "left" : "decl = (XmlDeclaration) first;",
      "right" : "decl = (XmlDeclaration) first;",
      "info" : "ExpressionStatement[5640-5670]:ExpressionStatement[5640-5670]"
    }, {
      "left" : "if (first instanceof Comment)",
      "right" : "if (first instanceof Comment)",
      "info" : "IfStatement[5692-5907]:IfStatement[5692-5907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5722-5907]:Block[5722-5907]"
    }, {
      "left" : "Comment comment = (Comment) first;",
      "right" : "Comment comment = (Comment) first;",
      "info" : "VariableDeclarationStatement[5744-5778]:VariableDeclarationStatement[5744-5778]"
    }, {
      "left" : "if (comment.isXmlDeclaration())",
      "right" : "if (comment.isXmlDeclaration())",
      "info" : "IfStatement[5799-5889]:IfStatement[5799-5889]"
    }, {
      "left" : "decl = comment.asXmlDeclaration();",
      "right" : "decl = comment.asXmlDeclaration();",
      "info" : "ExpressionStatement[5855-5889]:ExpressionStatement[5855-5889]"
    }, {
      "left" : "if (decl != null)",
      "right" : "if (decl != null)",
      "info" : "IfStatement[5924-6084]:IfStatement[5924-6084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5942-6084]:Block[5942-6084]"
    }, {
      "left" : "if (decl.name().equalsIgnoreCase(\"xml\"))",
      "right" : "if (decl.name().equalsIgnoreCase(\"xml\"))",
      "info" : "IfStatement[5964-6066]:IfStatement[5964-6066]"
    }, {
      "left" : "foundCharset = decl.attr(\"encoding\");",
      "right" : "foundCharset = decl.attr(\"encoding\");",
      "info" : "ExpressionStatement[6029-6066]:ExpressionStatement[6029-6066]"
    }, {
      "left" : "foundCharset = validateCharset(foundCharset);",
      "right" : "foundCharset = validateCharset(foundCharset);",
      "info" : "ExpressionStatement[6111-6156]:ExpressionStatement[6111-6156]"
    }, {
      "left" : "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset))",
      "right" : "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset))",
      "info" : "IfStatement[6169-6553]:IfStatement[6169-6553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6245-6488]:Block[6245-6488]"
    }, {
      "left" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[6343-6402]:ExpressionStatement[6343-6402]"
    }, {
      "left" : "charsetName = foundCharset;",
      "right" : "charsetName = foundCharset;",
      "info" : "ExpressionStatement[6419-6446]:ExpressionStatement[6419-6446]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[6463-6474]:ExpressionStatement[6463-6474]"
    }, {
      "left" : "if (!fullyRead)",
      "right" : "if (!fullyRead)",
      "info" : "IfStatement[6494-6553]:IfStatement[6494-6553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6510-6553]:Block[6510-6553]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[6528-6539]:ExpressionStatement[6528-6539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6569-6788]:Block[6569-6788]"
    }, {
      "left" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "right" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "info" : "ExpressionStatement[6645-6778]:ExpressionStatement[6645-6778]"
    }, {
      "left" : "if (doc == null)",
      "right" : "if (doc == null)",
      "info" : "IfStatement[6797-7679]:IfStatement[6797-7795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6814-7679]:Block[6814-7795]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[6828-6898]:IfStatement[6828-6898]"
    }, {
      "left" : "charsetName = defaultCharset;",
      "right" : "charsetName = defaultCharset;",
      "info" : "ExpressionStatement[6869-6898]:ExpressionStatement[6869-6898]"
    }, {
      "left" : "BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);",
      "right" : "BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);",
      "info" : "VariableDeclarationStatement[6911-7009]:VariableDeclarationStatement[6911-7009]"
    }, {
      "left" : "if (bomCharset != null && bomCharset.offset)",
      "right" : "if (bomCharset != null && bomCharset.offset)",
      "info" : "IfStatement[7022-7171]:IfStatement[7022-7171]"
    }, {
      "left" : "reader.skip(1);",
      "right" : "reader.skip(1);",
      "info" : "ExpressionStatement[7156-7171]:ExpressionStatement[7156-7171]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7184-7446]:TryStatement[7184-7446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7188-7261]:Block[7188-7261]"
    }, {
      "left" : "doc = parser.parseInput(reader, baseUri);",
      "right" : "doc = parser.parseInput(reader, baseUri);",
      "info" : "ExpressionStatement[7206-7247]:ExpressionStatement[7206-7247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7293-7446]:Block[7293-7446]"
    }, {
      "left" : "throw e.ioException();",
      "right" : "throw e.ioException();",
      "info" : "ThrowStatement[7410-7432]:ThrowStatement[7410-7432]"
    }, {
      "left" : "Charset charset = Charset.forName(charsetName);",
      "right" : "Charset charset = Charset.forName(charsetName);",
      "info" : "VariableDeclarationStatement[7459-7506]:VariableDeclarationStatement[7459-7506]"
    }, {
      "left" : "doc.outputSettings().charset(charset);",
      "right" : "doc.outputSettings().charset(charset);",
      "info" : "ExpressionStatement[7519-7557]:ExpressionStatement[7519-7557]"
    }, {
      "left" : "input.close();",
      "right" : "input.close();",
      "info" : "ExpressionStatement[7688-7702]:ExpressionStatement[7804-7818]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[7711-7722]:ReturnStatement[7827-7838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8232-8238]:Modifier[8348-8354]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8239-8245]:Modifier[8355-8361]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[8246-8256]:SimpleType[8362-8372]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[8257-8273]:SimpleName[8373-8389]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[8274-8294]:SingleVariableDeclaration[8390-8410]"
    }, {
      "left" : "int maxSize",
      "right" : "int maxSize",
      "info" : "SingleVariableDeclaration[8296-8307]:SingleVariableDeclaration[8412-8423]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8316-8327]:SimpleType[8432-8443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8328-8574]:Block[8444-8690]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[8338-8411]:ExpressionStatement[8454-8527]"
    }, {
      "left" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "right" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "info" : "VariableDeclarationStatement[8420-8520]:VariableDeclarationStatement[8536-8636]"
    }, {
      "left" : "return input.readToByteBuffer(maxSize);",
      "right" : "return input.readToByteBuffer(maxSize);",
      "info" : "ReturnStatement[8529-8568]:ReturnStatement[8645-8684]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8580-8586]:Modifier[8696-8702]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[8587-8597]:SimpleType[8703-8713]"
    }, {
      "left" : "emptyByteBuffer",
      "right" : "emptyByteBuffer",
      "info" : "SimpleName[8598-8613]:SimpleName[8714-8729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8616-8662]:Block[8732-8778]"
    }, {
      "left" : "return ByteBuffer.allocate(0);",
      "right" : "return ByteBuffer.allocate(0);",
      "info" : "ReturnStatement[8626-8656]:ReturnStatement[8742-8772]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8964-8970]:Modifier[9080-9086]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8971-8977]:SimpleType[9087-9093]"
    }, {
      "left" : "getCharsetFromContentType",
      "right" : "getCharsetFromContentType",
      "info" : "SimpleName[8978-9003]:SimpleName[9094-9119]"
    }, {
      "left" : "String contentType",
      "right" : "String contentType",
      "info" : "SingleVariableDeclaration[9004-9022]:SingleVariableDeclaration[9120-9138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9024-9337]:Block[9140-9453]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[9034-9071]:IfStatement[9150-9187]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9059-9071]:ReturnStatement[9175-9187]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[9080-9128]:VariableDeclarationStatement[9196-9244]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[9137-9310]:IfStatement[9253-9426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9151-9310]:Block[9267-9426]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[9165-9200]:VariableDeclarationStatement[9281-9316]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[9213-9255]:ExpressionStatement[9329-9371]"
    }, {
      "left" : "return validateCharset(charset);",
      "right" : "return validateCharset(charset);",
      "info" : "ReturnStatement[9268-9300]:ReturnStatement[9384-9416]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9319-9331]:ReturnStatement[9435-9447]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9343-9350]:Modifier[9459-9466]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9351-9357]:Modifier[9467-9473]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9358-9364]:SimpleType[9474-9480]"
    }, {
      "left" : "validateCharset",
      "right" : "validateCharset",
      "info" : "SimpleName[9365-9380]:SimpleName[9481-9496]"
    }, {
      "left" : "String cs",
      "right" : "String cs",
      "info" : "SingleVariableDeclaration[9381-9390]:SingleVariableDeclaration[9497-9506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9392-9831]:Block[9508-9947]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[9402-9450]:IfStatement[9518-9566]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9438-9450]:ReturnStatement[9554-9566]"
    }, {
      "left" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[9459-9498]:ExpressionStatement[9575-9614]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9507-9804]:TryStatement[9623-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9511-9675]:Block[9627-9791]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9525-9564]:IfStatement[9641-9680]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9554-9564]:ReturnStatement[9670-9680]"
    }, {
      "left" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "right" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[9577-9613]:ExpressionStatement[9693-9729]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9626-9665]:IfStatement[9742-9781]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9655-9665]:ReturnStatement[9771-9781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9714-9804]:Block[9830-9920]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9813-9825]:ReturnStatement[9929-9941]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9921-9927]:Modifier[10037-10043]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9928-9934]:SimpleType[10044-10050]"
    }, {
      "left" : "mimeBoundary",
      "right" : "mimeBoundary",
      "info" : "SimpleName[9935-9947]:SimpleName[10051-10063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9950-10246]:Block[10066-10362]"
    }, {
      "left" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "right" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "info" : "VariableDeclarationStatement[9960-10021]:VariableDeclarationStatement[10076-10137]"
    }, {
      "left" : "final Random rand = new Random();",
      "right" : "final Random rand = new Random();",
      "info" : "VariableDeclarationStatement[10030-10063]:VariableDeclarationStatement[10146-10179]"
    }, {
      "left" : "for (int i = 0; i < boundaryLength; i++)",
      "right" : "for (int i = 0; i < boundaryLength; i++)",
      "info" : "ForStatement[10072-10208]:ForStatement[10188-10324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10113-10208]:Block[10229-10324]"
    }, {
      "left" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "right" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "info" : "ExpressionStatement[10127-10198]:ExpressionStatement[10243-10314]"
    }, {
      "left" : "return mime.toString();",
      "right" : "return mime.toString();",
      "info" : "ReturnStatement[10217-10240]:ReturnStatement[10333-10356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10252-10259]:Modifier[10368-10375]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10260-10266]:Modifier[10376-10382]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "SimpleType[10267-10277]:SimpleType[10383-10393]"
    }, {
      "left" : "detectCharsetFromBom",
      "right" : "detectCharsetFromBom",
      "info" : "SimpleName[10278-10298]:SimpleName[10394-10414]"
    }, {
      "left" : "final ByteBuffer byteData",
      "right" : "final ByteBuffer byteData",
      "info" : "SingleVariableDeclaration[10299-10324]:SingleVariableDeclaration[10415-10440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10326-11427]:Block[10442-11543]"
    }, {
      "left" : "final Buffer buffer = byteData;",
      "right" : "final Buffer buffer = byteData;",
      "info" : "VariableDeclarationStatement[10336-10367]:VariableDeclarationStatement[10452-10483]"
    }, {
      "left" : "buffer.mark();",
      "right" : "buffer.mark();",
      "info" : "ExpressionStatement[10463-10477]:ExpressionStatement[10579-10593]"
    }, {
      "left" : "byte[] bom = new byte[4];",
      "right" : "byte[] bom = new byte[4];",
      "info" : "VariableDeclarationStatement[10486-10511]:VariableDeclarationStatement[10602-10627]"
    }, {
      "left" : "if (byteData.remaining() >= bom.length)",
      "right" : "if (byteData.remaining() >= bom.length)",
      "info" : "IfStatement[10520-10631]:IfStatement[10636-10747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10560-10631]:Block[10676-10747]"
    }, {
      "left" : "byteData.get(bom);",
      "right" : "byteData.get(bom);",
      "info" : "ExpressionStatement[10574-10592]:ExpressionStatement[10690-10708]"
    }, {
      "left" : "buffer.rewind();",
      "right" : "buffer.rewind();",
      "info" : "ExpressionStatement[10605-10621]:ExpressionStatement[10721-10737]"
    }, {
      "left" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "right" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "info" : "IfStatement[10640-11400]:IfStatement[10756-11516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10832-10935]:Block[10948-11051]"
    }, {
      "left" : "return new BomCharset(\"UTF-32\", false);",
      "right" : "return new BomCharset(\"UTF-32\", false);",
      "info" : "ReturnStatement[10852-10891]:ReturnStatement[10968-11007]"
    }, {
      "left" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "right" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "info" : "IfStatement[10941-11400]:IfStatement[11057-11516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11061-11140]:Block[11177-11256]"
    }, {
      "left" : "return new BomCharset(\"UTF-16\", false);",
      "right" : "return new BomCharset(\"UTF-16\", false);",
      "info" : "ReturnStatement[11075-11114]:ReturnStatement[11191-11230]"
    }, {
      "left" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "right" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "info" : "IfStatement[11146-11400]:IfStatement[11262-11516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11223-11400]:Block[11339-11516]"
    }, {
      "left" : "return new BomCharset(\"UTF-8\", true);",
      "right" : "return new BomCharset(\"UTF-8\", true);",
      "info" : "ReturnStatement[11237-11274]:ReturnStatement[11353-11390]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11409-11421]:ReturnStatement[11525-11537]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11433-11440]:Modifier[11549-11556]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11441-11447]:Modifier[11557-11563]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11448-11453]:TYPE_DECLARATION_KIND[11564-11569]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "SimpleName[11454-11464]:SimpleName[11570-11580]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11552-11558]:Modifier[11668-11674]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "SimpleName[11559-11569]:SimpleName[11675-11685]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[11570-11584]:SingleVariableDeclaration[11686-11700]"
    }, {
      "left" : "boolean offset",
      "right" : "boolean offset",
      "info" : "SingleVariableDeclaration[11586-11600]:SingleVariableDeclaration[11702-11716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11602-11683]:Block[11718-11799]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[11616-11639]:ExpressionStatement[11732-11755]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[11652-11673]:ExpressionStatement[11768-11789]"
    } ]
  },
  "interFileMappings" : { }
}