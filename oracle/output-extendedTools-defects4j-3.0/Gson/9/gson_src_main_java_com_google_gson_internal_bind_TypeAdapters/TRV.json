{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private TypeAdapters()",
      "right" : "private TypeAdapters()",
      "info" : "MethodDeclaration[2053-2128]:MethodDeclaration[2053-2128]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
      "right" : "@SuppressWarnings(\"rawtypes\")\n  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n    @Override\n    public void write(JsonWriter out, Class value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n      } else {\n        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");\n      }\n    }\n    @Override\n    public Class read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      } else {\n        throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n      }\n    }\n  };",
      "info" : "FieldDeclaration[2132-2903]:FieldDeclaration[2132-2903]"
    }, {
      "left" : "public void write(JsonWriter out, Class value) throws IOException",
      "right" : "public void write(JsonWriter out, Class value) throws IOException",
      "info" : "MethodDeclaration[2242-2568]:MethodDeclaration[2242-2568]"
    }, {
      "left" : "public Class read(JsonReader in) throws IOException",
      "right" : "public Class read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[2573-2898]:MethodDeclaration[2573-2898]"
    }, {
      "left" : "public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);",
      "right" : "public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);",
      "info" : "FieldDeclaration[2906-2992]:FieldDeclaration[2906-2992]"
    }, {
      "left" : "public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n    @Override public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset = new BitSet();\n      in.beginArray();\n      int i = 0;\n      JsonToken tokenType = in.peek();\n      while (tokenType != JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType = in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    @Override public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src == null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i = 0; i < src.length(); i++) {\n        int value = (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
      "right" : "public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n    @Override public BitSet read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n\n      BitSet bitset = new BitSet();\n      in.beginArray();\n      int i = 0;\n      JsonToken tokenType = in.peek();\n      while (tokenType != JsonToken.END_ARRAY) {\n        boolean set;\n        switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }\n        if (set) {\n          bitset.set(i);\n        }\n        ++i;\n        tokenType = in.peek();\n      }\n      in.endArray();\n      return bitset;\n    }\n\n    @Override public void write(JsonWriter out, BitSet src) throws IOException {\n      if (src == null) {\n        out.nullValue();\n        return;\n      }\n\n      out.beginArray();\n      for (int i = 0; i < src.length(); i++) {\n        int value = (src.get(i)) ? 1 : 0;\n        out.value(value);\n      }\n      out.endArray();\n    }\n  };",
      "info" : "FieldDeclaration[2996-4543]:FieldDeclaration[2996-4543]"
    }, {
      "left" : "public BitSet read(JsonReader in) throws IOException",
      "right" : "public BitSet read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[3078-4206]:MethodDeclaration[3078-4206]"
    }, {
      "left" : "public void write(JsonWriter out, BitSet src) throws IOException",
      "right" : "public void write(JsonWriter out, BitSet src) throws IOException",
      "info" : "MethodDeclaration[4212-4538]:MethodDeclaration[4212-4538]"
    }, {
      "left" : "public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);",
      "right" : "public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);",
      "info" : "FieldDeclaration[4547-4638]:FieldDeclaration[4547-4638]"
    }, {
      "left" : "public Boolean read(JsonReader in) throws IOException",
      "right" : "public Boolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[4726-5088]:MethodDeclaration[4726-5088]"
    }, {
      "left" : "public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value == null ? \"null\" : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {\n    @Override public Boolean read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return Boolean.valueOf(in.nextString());\n    }\n\n    @Override public void write(JsonWriter out, Boolean value) throws IOException {\n      out.value(value == null ? \"null\" : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[5291-5868]:FieldDeclaration[5215-5792]"
    }, {
      "left" : "public Boolean read(JsonReader in) throws IOException",
      "right" : "public Boolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[5501-5712]:MethodDeclaration[5425-5636]"
    }, {
      "left" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "right" : "public void write(JsonWriter out, Boolean value) throws IOException",
      "info" : "MethodDeclaration[5718-5863]:MethodDeclaration[5642-5787]"
    }, {
      "left" : "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      = newFactory(boolean.class, Boolean.class, BOOLEAN);",
      "right" : "public static final TypeAdapterFactory BOOLEAN_FACTORY\n      = newFactory(boolean.class, Boolean.class, BOOLEAN);",
      "info" : "FieldDeclaration[5872-5985]:FieldDeclaration[5796-5909]"
    }, {
      "left" : "public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue = in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        int intValue = in.nextInt();\n        return (byte) intValue;\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[5989-6530]:FieldDeclaration[5913-6454]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[6068-6408]:MethodDeclaration[5992-6332]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[6413-6525]:MethodDeclaration[6337-6449]"
    }, {
      "left" : "public static final TypeAdapterFactory BYTE_FACTORY\n      = newFactory(byte.class, Byte.class, BYTE);",
      "right" : "public static final TypeAdapterFactory BYTE_FACTORY\n      = newFactory(byte.class, Byte.class, BYTE);",
      "info" : "FieldDeclaration[6534-6635]:FieldDeclaration[6458-6559]"
    }, {
      "left" : "public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return (short) in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[6639-7149]:FieldDeclaration[6563-7073]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[6719-7027]:MethodDeclaration[6643-6951]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[7032-7144]:MethodDeclaration[6956-7068]"
    }, {
      "left" : "public static final TypeAdapterFactory SHORT_FACTORY\n      = newFactory(short.class, Short.class, SHORT);",
      "right" : "public static final TypeAdapterFactory SHORT_FACTORY\n      = newFactory(short.class, Short.class, SHORT);",
      "info" : "FieldDeclaration[7153-7258]:FieldDeclaration[7077-7182]"
    }, {
      "left" : "public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextInt();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[7262-7766]:FieldDeclaration[7186-7690]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[7344-7644]:MethodDeclaration[7268-7568]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[7649-7761]:MethodDeclaration[7573-7685]"
    }, {
      "left" : "public static final TypeAdapterFactory INTEGER_FACTORY\n      = newFactory(int.class, Integer.class, INTEGER);",
      "right" : "public static final TypeAdapterFactory INTEGER_FACTORY\n      = newFactory(int.class, Integer.class, INTEGER);",
      "info" : "FieldDeclaration[7769-7878]:FieldDeclaration[7693-7802]"
    }, {
      "left" : "public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {\n    @Override public AtomicInteger read(JsonReader in) throws IOException {\n      try {\n        return new AtomicInteger(in.nextInt());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {\n    @Override public AtomicInteger read(JsonReader in) throws IOException {\n      try {\n        return new AtomicInteger(in.nextInt());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[7882-8356]:FieldDeclaration[7806-8280]"
    }, {
      "left" : "public AtomicInteger read(JsonReader in) throws IOException",
      "right" : "public AtomicInteger read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[7985-8214]:MethodDeclaration[7909-8138]"
    }, {
      "left" : "public void write(JsonWriter out, AtomicInteger value) throws IOException",
      "right" : "public void write(JsonWriter out, AtomicInteger value) throws IOException",
      "info" : "MethodDeclaration[8219-8340]:MethodDeclaration[8143-8264]"
    }, {
      "left" : "public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =\n      newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);",
      "right" : "public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =\n      newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);",
      "info" : "FieldDeclaration[8359-8490]:FieldDeclaration[8283-8414]"
    }, {
      "left" : "public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {\n    @Override public AtomicBoolean read(JsonReader in) throws IOException {\n      return new AtomicBoolean(in.nextBoolean());\n    }\n    @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {\n    @Override public AtomicBoolean read(JsonReader in) throws IOException {\n      return new AtomicBoolean(in.nextBoolean());\n    }\n    @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {\n      out.value(value.get());\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[8494-8866]:FieldDeclaration[8418-8790]"
    }, {
      "left" : "public AtomicBoolean read(JsonReader in) throws IOException",
      "right" : "public AtomicBoolean read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[8597-8724]:MethodDeclaration[8521-8648]"
    }, {
      "left" : "public void write(JsonWriter out, AtomicBoolean value) throws IOException",
      "right" : "public void write(JsonWriter out, AtomicBoolean value) throws IOException",
      "info" : "MethodDeclaration[8729-8850]:MethodDeclaration[8653-8774]"
    }, {
      "left" : "public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =\n      newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);",
      "right" : "public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =\n      newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);",
      "info" : "FieldDeclaration[8869-9000]:FieldDeclaration[8793-8924]"
    }, {
      "left" : "public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {\n    @Override public AtomicIntegerArray read(JsonReader in) throws IOException {\n        List<Integer> list = new ArrayList<Integer>();\n        in.beginArray();\n        while (in.hasNext()) {\n          try {\n            int integer = in.nextInt();\n            list.add(integer);\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(e);\n          }\n        }\n        in.endArray();\n        int length = list.size();\n        AtomicIntegerArray array = new AtomicIntegerArray(length);\n        for (int i = 0; i < length; ++i) {\n          array.set(i, list.get(i));\n        }\n        return array;\n    }\n    @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {\n      out.beginArray();\n      for (int i = 0, length = value.length(); i < length; i++) {\n        out.value(value.get(i));\n      }\n      out.endArray();\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {\n    @Override public AtomicIntegerArray read(JsonReader in) throws IOException {\n        List<Integer> list = new ArrayList<Integer>();\n        in.beginArray();\n        while (in.hasNext()) {\n          try {\n            int integer = in.nextInt();\n            list.add(integer);\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(e);\n          }\n        }\n        in.endArray();\n        int length = list.size();\n        AtomicIntegerArray array = new AtomicIntegerArray(length);\n        for (int i = 0; i < length; ++i) {\n          array.set(i, list.get(i));\n        }\n        return array;\n    }\n    @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {\n      out.beginArray();\n      for (int i = 0, length = value.length(); i < length; i++) {\n        out.value(value.get(i));\n      }\n      out.endArray();\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[9004-10023]:FieldDeclaration[8928-9947]"
    }, {
      "left" : "public AtomicIntegerArray read(JsonReader in) throws IOException",
      "right" : "public AtomicIntegerArray read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[9123-9753]:MethodDeclaration[9047-9677]"
    }, {
      "left" : "public void write(JsonWriter out, AtomicIntegerArray value) throws IOException",
      "right" : "public void write(JsonWriter out, AtomicIntegerArray value) throws IOException",
      "info" : "MethodDeclaration[9758-10007]:MethodDeclaration[9682-9931]"
    }, {
      "left" : "public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =\n      newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);",
      "right" : "public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =\n      newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);",
      "info" : "FieldDeclaration[10026-10174]:FieldDeclaration[9950-10098]"
    }, {
      "left" : "public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return in.nextLong();\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[10178-10680]:FieldDeclaration[10102-10604]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[10257-10558]:MethodDeclaration[10181-10482]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[10563-10675]:MethodDeclaration[10487-10599]"
    }, {
      "left" : "public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return (float) in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[10684-11091]:FieldDeclaration[10608-11015]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[10764-10969]:MethodDeclaration[10688-10893]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[10974-11086]:MethodDeclaration[10898-11010]"
    }, {
      "left" : "public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return in.nextDouble();\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[11095-11495]:FieldDeclaration[11019-11419]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[11176-11373]:MethodDeclaration[11100-11297]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[11378-11490]:MethodDeclaration[11302-11414]"
    }, {
      "left" : "public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {\n    @Override\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Number value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[11499-12079]:FieldDeclaration[11423-12003]"
    }, {
      "left" : "public Number read(JsonReader in) throws IOException",
      "right" : "public Number read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[11580-11957]:MethodDeclaration[11504-11881]"
    }, {
      "left" : "public void write(JsonWriter out, Number value) throws IOException",
      "right" : "public void write(JsonWriter out, Number value) throws IOException",
      "info" : "MethodDeclaration[11962-12074]:MethodDeclaration[11886-11998]"
    }, {
      "left" : "public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);",
      "right" : "public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);",
      "info" : "FieldDeclaration[12083-12172]:FieldDeclaration[12007-12096]"
    }, {
      "left" : "public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str = in.nextString();\n      if (str.length() != 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value == null ? null : String.valueOf(value));\n    }\n  };",
      "right" : "public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {\n    @Override\n    public Character read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String str = in.nextString();\n      if (str.length() != 1) {\n        throw new JsonSyntaxException(\"Expecting character, got: \" + str);\n      }\n      return str.charAt(0);\n    }\n    @Override\n    public void write(JsonWriter out, Character value) throws IOException {\n      out.value(value == null ? null : String.valueOf(value));\n    }\n  };",
      "info" : "FieldDeclaration[12176-12778]:FieldDeclaration[12100-12702]"
    }, {
      "left" : "public Character read(JsonReader in) throws IOException",
      "right" : "public Character read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[12266-12614]:MethodDeclaration[12190-12538]"
    }, {
      "left" : "public void write(JsonWriter out, Character value) throws IOException",
      "right" : "public void write(JsonWriter out, Character value) throws IOException",
      "info" : "MethodDeclaration[12619-12773]:MethodDeclaration[12543-12697]"
    }, {
      "left" : "public static final TypeAdapterFactory CHARACTER_FACTORY\n      = newFactory(char.class, Character.class, CHARACTER);",
      "right" : "public static final TypeAdapterFactory CHARACTER_FACTORY\n      = newFactory(char.class, Character.class, CHARACTER);",
      "info" : "FieldDeclaration[12782-12898]:FieldDeclaration[12706-12822]"
    }, {
      "left" : "public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek = in.peek();\n      if (peek == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      \n      if (peek == JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n    @Override\n    public String read(JsonReader in) throws IOException {\n      JsonToken peek = in.peek();\n      if (peek == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      \n      if (peek == JsonToken.BOOLEAN) {\n        return Boolean.toString(in.nextBoolean());\n      }\n      return in.nextString();\n    }\n    @Override\n    public void write(JsonWriter out, String value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[12902-13496]:FieldDeclaration[12826-13420]"
    }, {
      "left" : "public String read(JsonReader in) throws IOException",
      "right" : "public String read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[12983-13374]:MethodDeclaration[12907-13298]"
    }, {
      "left" : "public void write(JsonWriter out, String value) throws IOException",
      "right" : "public void write(JsonWriter out, String value) throws IOException",
      "info" : "MethodDeclaration[13379-13491]:MethodDeclaration[13303-13415]"
    }, {
      "left" : "public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {\n    @Override public BigDecimal read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigDecimal(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigDecimal value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[13502-14038]:FieldDeclaration[13426-13962]"
    }, {
      "left" : "public BigDecimal read(JsonReader in) throws IOException",
      "right" : "public BigDecimal read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[13596-13915]:MethodDeclaration[13520-13839]"
    }, {
      "left" : "public void write(JsonWriter out, BigDecimal value) throws IOException",
      "right" : "public void write(JsonWriter out, BigDecimal value) throws IOException",
      "info" : "MethodDeclaration[13921-14033]:MethodDeclaration[13845-13957]"
    }, {
      "left" : "public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
      "right" : "public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {\n    @Override public BigInteger read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        return new BigInteger(in.nextString());\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n      }\n    }\n\n    @Override public void write(JsonWriter out, BigInteger value) throws IOException {\n      out.value(value);\n    }\n  };",
      "info" : "FieldDeclaration[14044-14580]:FieldDeclaration[13968-14504]"
    }, {
      "left" : "public BigInteger read(JsonReader in) throws IOException",
      "right" : "public BigInteger read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[14138-14457]:MethodDeclaration[14062-14381]"
    }, {
      "left" : "public void write(JsonWriter out, BigInteger value) throws IOException",
      "right" : "public void write(JsonWriter out, BigInteger value) throws IOException",
      "info" : "MethodDeclaration[14463-14575]:MethodDeclaration[14387-14499]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);",
      "right" : "public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);",
      "info" : "FieldDeclaration[14584-14673]:FieldDeclaration[14508-14597]"
    }, {
      "left" : "public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n    @Override\n    public StringBuilder read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuilder(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuilder value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[14677-15166]:FieldDeclaration[14601-15090]"
    }, {
      "left" : "public StringBuilder read(JsonReader in) throws IOException",
      "right" : "public StringBuilder read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[14780-15003]:MethodDeclaration[14704-14927]"
    }, {
      "left" : "public void write(JsonWriter out, StringBuilder value) throws IOException",
      "right" : "public void write(JsonWriter out, StringBuilder value) throws IOException",
      "info" : "MethodDeclaration[15008-15161]:MethodDeclaration[14932-15085]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_BUILDER_FACTORY =\n    newFactory(StringBuilder.class, STRING_BUILDER);",
      "right" : "public static final TypeAdapterFactory STRING_BUILDER_FACTORY =\n    newFactory(StringBuilder.class, STRING_BUILDER);",
      "info" : "FieldDeclaration[15170-15286]:FieldDeclaration[15094-15210]"
    }, {
      "left" : "public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n    @Override\n    public StringBuffer read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return new StringBuffer(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, StringBuffer value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[15290-15773]:FieldDeclaration[15214-15697]"
    }, {
      "left" : "public StringBuffer read(JsonReader in) throws IOException",
      "right" : "public StringBuffer read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[15390-15611]:MethodDeclaration[15314-15535]"
    }, {
      "left" : "public void write(JsonWriter out, StringBuffer value) throws IOException",
      "right" : "public void write(JsonWriter out, StringBuffer value) throws IOException",
      "info" : "MethodDeclaration[15616-15768]:MethodDeclaration[15540-15692]"
    }, {
      "left" : "public static final TypeAdapterFactory STRING_BUFFER_FACTORY =\n    newFactory(StringBuffer.class, STRING_BUFFER);",
      "right" : "public static final TypeAdapterFactory STRING_BUFFER_FACTORY =\n    newFactory(StringBuffer.class, STRING_BUFFER);",
      "info" : "FieldDeclaration[15777-15890]:FieldDeclaration[15701-15814]"
    }, {
      "left" : "public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString = in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value == null ? null : value.toExternalForm());\n    }\n  };",
      "right" : "public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n    @Override\n    public URL read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String nextString = in.nextString();\n      return \"null\".equals(nextString) ? null : new URL(nextString);\n    }\n    @Override\n    public void write(JsonWriter out, URL value) throws IOException {\n      out.value(value == null ? null : value.toExternalForm());\n    }\n  };",
      "info" : "FieldDeclaration[15894-16401]:FieldDeclaration[15818-16325]"
    }, {
      "left" : "public URL read(JsonReader in) throws IOException",
      "right" : "public URL read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[15966-16242]:MethodDeclaration[15890-16166]"
    }, {
      "left" : "public void write(JsonWriter out, URL value) throws IOException",
      "right" : "public void write(JsonWriter out, URL value) throws IOException",
      "info" : "MethodDeclaration[16247-16396]:MethodDeclaration[16171-16320]"
    }, {
      "left" : "public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);",
      "right" : "public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);",
      "info" : "FieldDeclaration[16405-16485]:FieldDeclaration[16329-16409]"
    }, {
      "left" : "public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString = in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value == null ? null : value.toASCIIString());\n    }\n  };",
      "right" : "public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n    @Override\n    public URI read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      try {\n        String nextString = in.nextString();\n        return \"null\".equals(nextString) ? null : new URI(nextString);\n      } catch (URISyntaxException e) {\n        throw new JsonIOException(e);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, URI value) throws IOException {\n      out.value(value == null ? null : value.toASCIIString());\n    }\n  };",
      "info" : "FieldDeclaration[16489-17096]:FieldDeclaration[16413-17020]"
    }, {
      "left" : "public URI read(JsonReader in) throws IOException",
      "right" : "public URI read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[16561-16938]:MethodDeclaration[16485-16862]"
    }, {
      "left" : "public void write(JsonWriter out, URI value) throws IOException",
      "right" : "public void write(JsonWriter out, URI value) throws IOException",
      "info" : "MethodDeclaration[16943-17091]:MethodDeclaration[16867-17015]"
    }, {
      "left" : "public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);",
      "right" : "public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);",
      "info" : "FieldDeclaration[17100-17180]:FieldDeclaration[17024-17104]"
    }, {
      "left" : "public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value == null ? null : value.getHostAddress());\n    }\n  };",
      "right" : "public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {\n    @Override\n    public InetAddress read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      // regrettably, this should have included both the host name and the host address\n      return InetAddress.getByName(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, InetAddress value) throws IOException {\n      out.value(value == null ? null : value.getHostAddress());\n    }\n  };",
      "info" : "FieldDeclaration[17184-17761]:FieldDeclaration[17108-17685]"
    }, {
      "left" : "public InetAddress read(JsonReader in) throws IOException",
      "right" : "public InetAddress read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[17281-17594]:MethodDeclaration[17205-17518]"
    }, {
      "left" : "public void write(JsonWriter out, InetAddress value) throws IOException",
      "right" : "public void write(JsonWriter out, InetAddress value) throws IOException",
      "info" : "MethodDeclaration[17599-17756]:MethodDeclaration[17523-17680]"
    }, {
      "left" : "public static final TypeAdapterFactory INET_ADDRESS_FACTORY =\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
      "right" : "public static final TypeAdapterFactory INET_ADDRESS_FACTORY =\n    newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);",
      "info" : "FieldDeclaration[17765-17888]:FieldDeclaration[17689-17812]"
    }, {
      "left" : "public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n    @Override\n    public UUID read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return java.util.UUID.fromString(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, UUID value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[17892-18343]:FieldDeclaration[17816-18267]"
    }, {
      "left" : "public UUID read(JsonReader in) throws IOException",
      "right" : "public UUID read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[17967-18189]:MethodDeclaration[17891-18113]"
    }, {
      "left" : "public void write(JsonWriter out, UUID value) throws IOException",
      "right" : "public void write(JsonWriter out, UUID value) throws IOException",
      "info" : "MethodDeclaration[18194-18338]:MethodDeclaration[18118-18262]"
    }, {
      "left" : "public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);",
      "right" : "public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);",
      "info" : "FieldDeclaration[18347-18430]:FieldDeclaration[18271-18354]"
    }, {
      "left" : "public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {\n    @Override\n    public Currency read(JsonReader in) throws IOException {\n      return Currency.getInstance(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, Currency value) throws IOException {\n      out.value(value.getCurrencyCode());\n    }\n  }.nullSafe();",
      "right" : "public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {\n    @Override\n    public Currency read(JsonReader in) throws IOException {\n      return Currency.getInstance(in.nextString());\n    }\n    @Override\n    public void write(JsonWriter out, Currency value) throws IOException {\n      out.value(value.getCurrencyCode());\n    }\n  }.nullSafe();",
      "info" : "FieldDeclaration[18434-18802]:FieldDeclaration[18358-18726]"
    }, {
      "left" : "public Currency read(JsonReader in) throws IOException",
      "right" : "public Currency read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[18521-18649]:MethodDeclaration[18445-18573]"
    }, {
      "left" : "public void write(JsonWriter out, Currency value) throws IOException",
      "right" : "public void write(JsonWriter out, Currency value) throws IOException",
      "info" : "MethodDeclaration[18654-18786]:MethodDeclaration[18578-18710]"
    }, {
      "left" : "public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);",
      "right" : "public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);",
      "info" : "FieldDeclaration[18805-18900]:FieldDeclaration[18729-18824]"
    }, {
      "left" : "public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      if (typeToken.getRawType() != Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
      "right" : "public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      if (typeToken.getRawType() != Timestamp.class) {\n        return null;\n      }\n\n      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\n      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };\n    }\n  };",
      "info" : "FieldDeclaration[18904-19755]:FieldDeclaration[18828-19679]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[18994-19750]:MethodDeclaration[18918-19674]"
    }, {
      "left" : "public Timestamp read(JsonReader in) throws IOException",
      "right" : "public Timestamp read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[19394-19589]:MethodDeclaration[19318-19513]"
    }, {
      "left" : "public void write(JsonWriter out, Timestamp value) throws IOException",
      "right" : "public void write(JsonWriter out, Timestamp value) throws IOException",
      "info" : "MethodDeclaration[19599-19735]:MethodDeclaration[19523-19659]"
    }, {
      "left" : "public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n    private static final String YEAR = \"year\";\n    private static final String MONTH = \"month\";\n    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n    private static final String HOUR_OF_DAY = \"hourOfDay\";\n    private static final String MINUTE = \"minute\";\n    private static final String SECOND = \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year = 0;\n      int month = 0;\n      int dayOfMonth = 0;\n      int hourOfDay = 0;\n      int minute = 0;\n      int second = 0;\n      while (in.peek() != JsonToken.END_OBJECT) {\n        String name = in.nextName();\n        int value = in.nextInt();\n        if (YEAR.equals(name)) {\n          year = value;\n        } else if (MONTH.equals(name)) {\n          month = value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth = value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay = value;\n        } else if (MINUTE.equals(name)) {\n          minute = value;\n        } else if (SECOND.equals(name)) {\n          second = value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
      "right" : "public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n    private static final String YEAR = \"year\";\n    private static final String MONTH = \"month\";\n    private static final String DAY_OF_MONTH = \"dayOfMonth\";\n    private static final String HOUR_OF_DAY = \"hourOfDay\";\n    private static final String MINUTE = \"minute\";\n    private static final String SECOND = \"second\";\n\n    @Override\n    public Calendar read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return  null;\n      }\n      in.beginObject();\n      int year = 0;\n      int month = 0;\n      int dayOfMonth = 0;\n      int hourOfDay = 0;\n      int minute = 0;\n      int second = 0;\n      while (in.peek() != JsonToken.END_OBJECT) {\n        String name = in.nextName();\n        int value = in.nextInt();\n        if (YEAR.equals(name)) {\n          year = value;\n        } else if (MONTH.equals(name)) {\n          month = value;\n        } else if (DAY_OF_MONTH.equals(name)) {\n          dayOfMonth = value;\n        } else if (HOUR_OF_DAY.equals(name)) {\n          hourOfDay = value;\n        } else if (MINUTE.equals(name)) {\n          minute = value;\n        } else if (SECOND.equals(name)) {\n          second = value;\n        }\n      }\n      in.endObject();\n      return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n    }\n\n    @Override\n    public void write(JsonWriter out, Calendar value) throws IOException {\n      if (value == null) {\n        out.nullValue();\n        return;\n      }\n      out.beginObject();\n      out.name(YEAR);\n      out.value(value.get(Calendar.YEAR));\n      out.name(MONTH);\n      out.value(value.get(Calendar.MONTH));\n      out.name(DAY_OF_MONTH);\n      out.value(value.get(Calendar.DAY_OF_MONTH));\n      out.name(HOUR_OF_DAY);\n      out.value(value.get(Calendar.HOUR_OF_DAY));\n      out.name(MINUTE);\n      out.value(value.get(Calendar.MINUTE));\n      out.name(SECOND);\n      out.value(value.get(Calendar.SECOND));\n      out.endObject();\n    }\n  };",
      "info" : "FieldDeclaration[19759-21812]:FieldDeclaration[19683-21736]"
    }, {
      "left" : "private static final String YEAR = \"year\";",
      "right" : "private static final String YEAR = \"year\";",
      "info" : "FieldDeclaration[19846-19888]:FieldDeclaration[19770-19812]"
    }, {
      "left" : "private static final String MONTH = \"month\";",
      "right" : "private static final String MONTH = \"month\";",
      "info" : "FieldDeclaration[19893-19937]:FieldDeclaration[19817-19861]"
    }, {
      "left" : "private static final String DAY_OF_MONTH = \"dayOfMonth\";",
      "right" : "private static final String DAY_OF_MONTH = \"dayOfMonth\";",
      "info" : "FieldDeclaration[19942-19998]:FieldDeclaration[19866-19922]"
    }, {
      "left" : "private static final String HOUR_OF_DAY = \"hourOfDay\";",
      "right" : "private static final String HOUR_OF_DAY = \"hourOfDay\";",
      "info" : "FieldDeclaration[20003-20057]:FieldDeclaration[19927-19981]"
    }, {
      "left" : "private static final String MINUTE = \"minute\";",
      "right" : "private static final String MINUTE = \"minute\";",
      "info" : "FieldDeclaration[20062-20108]:FieldDeclaration[19986-20032]"
    }, {
      "left" : "private static final String SECOND = \"second\";",
      "right" : "private static final String SECOND = \"second\";",
      "info" : "FieldDeclaration[20113-20159]:FieldDeclaration[20037-20083]"
    }, {
      "left" : "public Calendar read(JsonReader in) throws IOException",
      "right" : "public Calendar read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[20165-21157]:MethodDeclaration[20089-21081]"
    }, {
      "left" : "public void write(JsonWriter out, Calendar value) throws IOException",
      "right" : "public void write(JsonWriter out, Calendar value) throws IOException",
      "info" : "MethodDeclaration[21163-21807]:MethodDeclaration[21087-21731]"
    }, {
      "left" : "public static final TypeAdapterFactory CALENDAR_FACTORY =\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
      "right" : "public static final TypeAdapterFactory CALENDAR_FACTORY =\n    newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);",
      "info" : "FieldDeclaration[21816-21956]:FieldDeclaration[21740-21880]"
    }, {
      "left" : "public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale = in.nextString();\n      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n      String language = null;\n      String country = null;\n      String variant = null;\n      if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n      }\n      if (country == null && variant == null) {\n        return new Locale(language);\n      } else if (variant == null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "right" : "public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n    @Override\n    public Locale read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      String locale = in.nextString();\n      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n      String language = null;\n      String country = null;\n      String variant = null;\n      if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n      }\n      if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n      }\n      if (country == null && variant == null) {\n        return new Locale(language);\n      } else if (variant == null) {\n        return new Locale(language, country);\n      } else {\n        return new Locale(language, country, variant);\n      }\n    }\n    @Override\n    public void write(JsonWriter out, Locale value) throws IOException {\n      out.value(value == null ? null : value.toString());\n    }\n  };",
      "info" : "FieldDeclaration[21960-23075]:FieldDeclaration[21884-22999]"
    }, {
      "left" : "public Locale read(JsonReader in) throws IOException",
      "right" : "public Locale read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[22041-22919]:MethodDeclaration[21965-22843]"
    }, {
      "left" : "public void write(JsonWriter out, Locale value) throws IOException",
      "right" : "public void write(JsonWriter out, Locale value) throws IOException",
      "info" : "MethodDeclaration[22924-23070]:MethodDeclaration[22848-22994]"
    }, {
      "left" : "public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);",
      "right" : "public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);",
      "info" : "FieldDeclaration[23079-23168]:FieldDeclaration[23003-23092]"
    }, {
      "left" : "public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value == null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n      }\n    }\n  };",
      "right" : "public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {\n    @Override public JsonElement read(JsonReader in) throws IOException {\n      switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }\n    }\n\n    @Override public void write(JsonWriter out, JsonElement value) throws IOException {\n      if (value == null || value.isJsonNull()) {\n        out.nullValue();\n      } else if (value.isJsonPrimitive()) {\n        JsonPrimitive primitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n          out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n          out.value(primitive.getAsBoolean());\n        } else {\n          out.value(primitive.getAsString());\n        }\n\n      } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (JsonElement e : value.getAsJsonArray()) {\n          write(out, e);\n        }\n        out.endArray();\n\n      } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {\n          out.name(e.getKey());\n          write(out, e.getValue());\n        }\n        out.endObject();\n\n      } else {\n        throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());\n      }\n    }\n  };",
      "info" : "FieldDeclaration[23172-25381]:FieldDeclaration[23096-25305]"
    }, {
      "left" : "public JsonElement read(JsonReader in) throws IOException",
      "right" : "public JsonElement read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[23269-24310]:MethodDeclaration[23193-24234]"
    }, {
      "left" : "public void write(JsonWriter out, JsonElement value) throws IOException",
      "right" : "public void write(JsonWriter out, JsonElement value) throws IOException",
      "info" : "MethodDeclaration[24316-25376]:MethodDeclaration[24240-25300]"
    }, {
      "left" : "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
      "right" : "public static final TypeAdapterFactory JSON_ELEMENT_FACTORY\n      = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);",
      "info" : "FieldDeclaration[25385-25510]:FieldDeclaration[25309-25434]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "TypeDeclaration[25514-26833]:TypeDeclaration[25438-26757]"
    }, {
      "left" : "private final Map<String, T> nameToConstant = new HashMap<String, T>();",
      "right" : "private final Map<String, T> nameToConstant = new HashMap<String, T>();",
      "info" : "FieldDeclaration[25605-25676]:FieldDeclaration[25529-25600]"
    }, {
      "left" : "private final Map<T, String> constantToName = new HashMap<T, String>();",
      "right" : "private final Map<T, String> constantToName = new HashMap<T, String>();",
      "info" : "FieldDeclaration[25681-25752]:FieldDeclaration[25605-25676]"
    }, {
      "left" : "public EnumTypeAdapter(Class<T> classOfT)",
      "right" : "public EnumTypeAdapter(Class<T> classOfT)",
      "info" : "MethodDeclaration[25758-26464]:MethodDeclaration[25682-26388]"
    }, {
      "left" : "public T read(JsonReader in) throws IOException",
      "right" : "public T read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[26469-26677]:MethodDeclaration[26393-26601]"
    }, {
      "left" : "public void write(JsonWriter out, T value) throws IOException",
      "right" : "public void write(JsonWriter out, T value) throws IOException",
      "info" : "MethodDeclaration[26683-26829]:MethodDeclaration[26607-26753]"
    }, {
      "left" : "public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      Class<? super T> rawType = typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n    }\n  };",
      "right" : "public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n      Class<? super T> rawType = typeToken.getRawType();\n      if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {\n        return null;\n      }\n      if (!rawType.isEnum()) {\n        rawType = rawType.getSuperclass(); // handle anonymous subclasses\n      }\n      return (TypeAdapter<T>) new EnumTypeAdapter(rawType);\n    }\n  };",
      "info" : "FieldDeclaration[26837-27396]:FieldDeclaration[26761-27320]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[26922-27391]:MethodDeclaration[26846-27315]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter)",
      "info" : "MethodDeclaration[27400-27829]:MethodDeclaration[27324-27753]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[27563-27818]:MethodDeclaration[27487-27742]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> type, final TypeAdapter<TT> typeAdapter)",
      "info" : "MethodDeclaration[27833-28400]:MethodDeclaration[27757-28324]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[27992-28255]:MethodDeclaration[27916-28179]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[28262-28389]:MethodDeclaration[28186-28313]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactory(\n      final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter)",
      "info" : "MethodDeclaration[28404-29113]:MethodDeclaration[28328-29037]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[28597-28929]:MethodDeclaration[28521-28853]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[28936-29102]:MethodDeclaration[28860-29026]"
    }, {
      "left" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\n      final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
      "right" : "public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,\n      final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter)",
      "info" : "MethodDeclaration[29117-29836]:MethodDeclaration[29041-29760]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken)",
      "info" : "MethodDeclaration[29330-29657]:MethodDeclaration[29254-29581]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[29664-29825]:MethodDeclaration[29588-29749]"
    }, {
      "left" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
      "right" : "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter)",
      "info" : "MethodDeclaration[29840-31221]:MethodDeclaration[29764-31145]"
    }, {
      "left" : "public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken)",
      "right" : "public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken)",
      "info" : "MethodDeclaration[30182-31066]:MethodDeclaration[30106-30990]"
    }, {
      "left" : "public void write(JsonWriter out, T1 value) throws IOException",
      "right" : "public void write(JsonWriter out, T1 value) throws IOException",
      "info" : "MethodDeclaration[30528-30657]:MethodDeclaration[30452-30581]"
    }, {
      "left" : "public T1 read(JsonReader in) throws IOException",
      "right" : "public T1 read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[30669-31047]:MethodDeclaration[30593-30971]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[31073-31210]:MethodDeclaration[30997-31134]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2053-2060]:Modifier[2053-2060]"
    }, {
      "left" : "TypeAdapters",
      "right" : "TypeAdapters",
      "info" : "SimpleName[2061-2073]:SimpleName[2061-2073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2076-2128]:Block[2076-2128]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[2082-2124]:ThrowStatement[2082-2124]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2242-2251]:MarkerAnnotation[2242-2251]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2256-2262]:Modifier[2256-2262]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2263-2267]:PrimitiveType[2263-2267]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[2268-2273]:SimpleName[2268-2273]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[2274-2288]:SingleVariableDeclaration[2274-2288]"
    }, {
      "left" : "Class value",
      "right" : "Class value",
      "info" : "SingleVariableDeclaration[2290-2301]:SingleVariableDeclaration[2290-2301]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2310-2321]:SimpleType[2310-2321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2322-2568]:Block[2322-2568]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[2330-2562]:IfStatement[2330-2562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2349-2383]:Block[2349-2383]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[2359-2375]:ExpressionStatement[2359-2375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2389-2562]:Block[2389-2562]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");",
      "right" : "throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n            + value.getName() + \". Forgot to register a type adapter?\");",
      "info" : "ThrowStatement[2399-2554]:ThrowStatement[2399-2554]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2573-2582]:MarkerAnnotation[2573-2582]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2587-2593]:Modifier[2587-2593]"
    }, {
      "left" : "Class",
      "right" : "Class",
      "info" : "SimpleType[2594-2599]:SimpleType[2594-2599]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2600-2604]:SimpleName[2600-2604]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[2605-2618]:SingleVariableDeclaration[2605-2618]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2627-2638]:SimpleType[2627-2638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2639-2898]:Block[2639-2898]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[2647-2892]:IfStatement[2647-2892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2680-2733]:Block[2680-2733]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[2690-2704]:ExpressionStatement[2690-2704]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2713-2725]:ReturnStatement[2713-2725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2739-2892]:Block[2739-2892]"
    }, {
      "left" : "throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");",
      "right" : "throw new UnsupportedOperationException(\n            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");",
      "info" : "ThrowStatement[2749-2884]:ThrowStatement[2749-2884]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3078-3087]:MarkerAnnotation[3078-3087]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3088-3094]:Modifier[3088-3094]"
    }, {
      "left" : "BitSet",
      "right" : "BitSet",
      "info" : "SimpleType[3095-3101]:SimpleType[3095-3101]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3102-3106]:SimpleName[3102-3106]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[3107-3120]:SingleVariableDeclaration[3107-3120]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3129-3140]:SimpleType[3129-3140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3141-4206]:Block[3141-4206]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[3149-3235]:IfStatement[3149-3235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3182-3235]:Block[3182-3235]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[3192-3206]:ExpressionStatement[3192-3206]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3215-3227]:ReturnStatement[3215-3227]"
    }, {
      "left" : "BitSet bitset = new BitSet();",
      "right" : "BitSet bitset = new BitSet();",
      "info" : "VariableDeclarationStatement[3243-3272]:VariableDeclarationStatement[3243-3272]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[3279-3295]:ExpressionStatement[3279-3295]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[3302-3312]:VariableDeclarationStatement[3302-3312]"
    }, {
      "left" : "JsonToken tokenType = in.peek();",
      "right" : "JsonToken tokenType = in.peek();",
      "info" : "VariableDeclarationStatement[3319-3351]:VariableDeclarationStatement[3319-3351]"
    }, {
      "left" : "while (tokenType != JsonToken.END_ARRAY)",
      "right" : "while (tokenType != JsonToken.END_ARRAY)",
      "info" : "WhileStatement[3358-4158]:WhileStatement[3358-4158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3399-4158]:Block[3399-4158]"
    }, {
      "left" : "boolean set;",
      "right" : "boolean set;",
      "info" : "VariableDeclarationStatement[3409-3421]:VariableDeclarationStatement[3409-3421]"
    }, {
      "left" : "switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }",
      "right" : "switch (tokenType) {\n        case NUMBER:\n          set = in.nextInt() != 0;\n          break;\n        case BOOLEAN:\n          set = in.nextBoolean();\n          break;\n        case STRING:\n          String stringValue = in.nextString();\n          try {\n            set = Integer.parseInt(stringValue) != 0;\n          } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);\n          }\n          break;\n        default:\n          throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);\n        }",
      "info" : "SwitchStatement[3430-4052]:SwitchStatement[3430-4052]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[3459-3471]:SwitchCase[3459-3471]"
    }, {
      "left" : "set = in.nextInt() != 0;",
      "right" : "set = in.nextInt() != 0;",
      "info" : "ExpressionStatement[3482-3506]:ExpressionStatement[3482-3506]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3517-3523]:BreakStatement[3517-3523]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[3532-3545]:SwitchCase[3532-3545]"
    }, {
      "left" : "set = in.nextBoolean();",
      "right" : "set = in.nextBoolean();",
      "info" : "ExpressionStatement[3556-3579]:ExpressionStatement[3556-3579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3590-3596]:BreakStatement[3590-3596]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[3605-3617]:SwitchCase[3605-3617]"
    }, {
      "left" : "String stringValue = in.nextString();",
      "right" : "String stringValue = in.nextString();",
      "info" : "VariableDeclarationStatement[3628-3665]:VariableDeclarationStatement[3628-3665]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3676-3924]:TryStatement[3676-3924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3680-3747]:Block[3680-3747]"
    }, {
      "left" : "set = Integer.parseInt(stringValue) != 0;",
      "right" : "set = Integer.parseInt(stringValue) != 0;",
      "info" : "ExpressionStatement[3694-3735]:ExpressionStatement[3694-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3780-3924]:Block[3780-3924]"
    }, {
      "left" : "throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);",
      "right" : "throw new JsonSyntaxException(\n                \"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue);",
      "info" : "ThrowStatement[3794-3912]:ThrowStatement[3794-3912]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3935-3941]:BreakStatement[3935-3941]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3950-3958]:SwitchCase[3950-3958]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);",
      "right" : "throw new JsonSyntaxException(\"Invalid bitset value type: \" + tokenType);",
      "info" : "ThrowStatement[3969-4042]:ThrowStatement[3969-4042]"
    }, {
      "left" : "if (set)",
      "right" : "if (set)",
      "info" : "IfStatement[4061-4106]:IfStatement[4061-4106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4070-4106]:Block[4070-4106]"
    }, {
      "left" : "bitset.set(i);",
      "right" : "bitset.set(i);",
      "info" : "ExpressionStatement[4082-4096]:ExpressionStatement[4082-4096]"
    }, {
      "left" : "++i;",
      "right" : "++i;",
      "info" : "ExpressionStatement[4115-4119]:ExpressionStatement[4115-4119]"
    }, {
      "left" : "tokenType = in.peek();",
      "right" : "tokenType = in.peek();",
      "info" : "ExpressionStatement[4128-4150]:ExpressionStatement[4128-4150]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[4165-4179]:ExpressionStatement[4165-4179]"
    }, {
      "left" : "return bitset;",
      "right" : "return bitset;",
      "info" : "ReturnStatement[4186-4200]:ReturnStatement[4186-4200]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4212-4221]:MarkerAnnotation[4212-4221]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4222-4228]:Modifier[4222-4228]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4229-4233]:PrimitiveType[4229-4233]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[4234-4239]:SimpleName[4234-4239]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[4240-4254]:SingleVariableDeclaration[4240-4254]"
    }, {
      "left" : "BitSet src",
      "right" : "BitSet src",
      "info" : "SingleVariableDeclaration[4256-4266]:SingleVariableDeclaration[4256-4266]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4275-4286]:SimpleType[4275-4286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4287-4538]:Block[4287-4538]"
    }, {
      "left" : "if (src == null)",
      "right" : "if (src == null)",
      "info" : "IfStatement[4295-4362]:IfStatement[4295-4362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4312-4362]:Block[4312-4362]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[4322-4338]:ExpressionStatement[4322-4338]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4347-4354]:ReturnStatement[4347-4354]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[4370-4387]:ExpressionStatement[4370-4387]"
    }, {
      "left" : "for (int i = 0; i < src.length(); i++)",
      "right" : "for (int i = 0; i < src.length(); i++)",
      "info" : "ForStatement[4394-4510]:ForStatement[4394-4510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4433-4510]:Block[4433-4510]"
    }, {
      "left" : "int value = (src.get(i)) ? 1 : 0;",
      "right" : "int value = (src.get(i)) ? 1 : 0;",
      "info" : "VariableDeclarationStatement[4443-4476]:VariableDeclarationStatement[4443-4476]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[4485-4502]:ExpressionStatement[4485-4502]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[4517-4532]:ExpressionStatement[4517-4532]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4726-4735]:MarkerAnnotation[4726-4735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4740-4746]:Modifier[4740-4746]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[4747-4754]:SimpleType[4747-4754]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4755-4759]:SimpleName[4755-4759]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[4760-4773]:SingleVariableDeclaration[4760-4773]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4782-4793]:SimpleType[4782-4793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4794-5088]:Block[4794-5088]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[4802-5051]:IfStatement[4802-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4835-4888]:Block[4835-4888]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[4845-4859]:ExpressionStatement[4845-4859]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4868-4880]:ReturnStatement[4868-4880]"
    }, {
      "left" : "if (in.peek() == JsonToken.STRING)",
      "right" : "if (in.peek() == JsonToken.STRING)",
      "info" : "IfStatement[4894-5051]:IfStatement[4894-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4929-5051]:Block[4929-5051]"
    }, {
      "left" : "return Boolean.parseBoolean(in.nextString());",
      "right" : "return Boolean.parseBoolean(in.nextString());",
      "info" : "ReturnStatement[4998-5043]:ReturnStatement[4998-5043]"
    }, {
      "left" : "return in.nextBoolean();",
      "right" : "return in.nextBoolean();",
      "info" : "ReturnStatement[5058-5082]:ReturnStatement[5058-5082]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5501-5510]:MarkerAnnotation[5425-5434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5511-5517]:Modifier[5435-5441]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[5518-5525]:SimpleType[5442-5449]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5526-5530]:SimpleName[5450-5454]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[5531-5544]:SingleVariableDeclaration[5455-5468]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5553-5564]:SimpleType[5477-5488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5565-5712]:Block[5489-5636]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[5573-5659]:IfStatement[5497-5583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5606-5659]:Block[5530-5583]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[5616-5630]:ExpressionStatement[5540-5554]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5639-5651]:ReturnStatement[5563-5575]"
    }, {
      "left" : "return Boolean.valueOf(in.nextString());",
      "right" : "return Boolean.valueOf(in.nextString());",
      "info" : "ReturnStatement[5666-5706]:ReturnStatement[5590-5630]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5718-5727]:MarkerAnnotation[5642-5651]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5728-5734]:Modifier[5652-5658]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5735-5739]:PrimitiveType[5659-5663]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[5740-5745]:SimpleName[5664-5669]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[5746-5760]:SingleVariableDeclaration[5670-5684]"
    }, {
      "left" : "Boolean value",
      "right" : "Boolean value",
      "info" : "SingleVariableDeclaration[5762-5775]:SingleVariableDeclaration[5686-5699]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5784-5795]:SimpleType[5708-5719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5796-5863]:Block[5720-5787]"
    }, {
      "left" : "out.value(value == null ? \"null\" : value.toString());",
      "right" : "out.value(value == null ? \"null\" : value.toString());",
      "info" : "ExpressionStatement[5804-5857]:ExpressionStatement[5728-5781]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6068-6077]:MarkerAnnotation[5992-6001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6082-6088]:Modifier[6006-6012]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[6089-6095]:SimpleType[6013-6019]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[6096-6100]:SimpleName[6020-6024]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[6101-6114]:SingleVariableDeclaration[6025-6038]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6123-6134]:SimpleType[6047-6058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6135-6408]:Block[6059-6332]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[6143-6229]:IfStatement[6067-6153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6176-6229]:Block[6100-6153]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[6186-6200]:ExpressionStatement[6110-6124]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6209-6221]:ReturnStatement[6133-6145]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6236-6402]:TryStatement[6160-6326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6240-6318]:Block[6164-6242]"
    }, {
      "left" : "int intValue = in.nextInt();",
      "right" : "int intValue = in.nextInt();",
      "info" : "VariableDeclarationStatement[6250-6278]:VariableDeclarationStatement[6174-6202]"
    }, {
      "left" : "return (byte) intValue;",
      "right" : "return (byte) intValue;",
      "info" : "ReturnStatement[6287-6310]:ReturnStatement[6211-6234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6351-6402]:Block[6275-6326]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[6361-6394]:ThrowStatement[6285-6318]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6413-6422]:MarkerAnnotation[6337-6346]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6427-6433]:Modifier[6351-6357]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6434-6438]:PrimitiveType[6358-6362]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[6439-6444]:SimpleName[6363-6368]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[6445-6459]:SingleVariableDeclaration[6369-6383]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[6461-6473]:SingleVariableDeclaration[6385-6397]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6482-6493]:SimpleType[6406-6417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6494-6525]:Block[6418-6449]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[6502-6519]:ExpressionStatement[6426-6443]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6719-6728]:MarkerAnnotation[6643-6652]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6733-6739]:Modifier[6657-6663]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[6740-6746]:SimpleType[6664-6670]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[6747-6751]:SimpleName[6671-6675]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[6752-6765]:SingleVariableDeclaration[6676-6689]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6774-6785]:SimpleType[6698-6709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6786-7027]:Block[6710-6951]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[6794-6880]:IfStatement[6718-6804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6827-6880]:Block[6751-6804]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[6837-6851]:ExpressionStatement[6761-6775]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6860-6872]:ReturnStatement[6784-6796]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6887-7021]:TryStatement[6811-6945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6891-6937]:Block[6815-6861]"
    }, {
      "left" : "return (short) in.nextInt();",
      "right" : "return (short) in.nextInt();",
      "info" : "ReturnStatement[6901-6929]:ReturnStatement[6825-6853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6970-7021]:Block[6894-6945]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[6980-7013]:ThrowStatement[6904-6937]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7032-7041]:MarkerAnnotation[6956-6965]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7046-7052]:Modifier[6970-6976]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7053-7057]:PrimitiveType[6977-6981]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[7058-7063]:SimpleName[6982-6987]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[7064-7078]:SingleVariableDeclaration[6988-7002]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[7080-7092]:SingleVariableDeclaration[7004-7016]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7101-7112]:SimpleType[7025-7036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7113-7144]:Block[7037-7068]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[7121-7138]:ExpressionStatement[7045-7062]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7344-7353]:MarkerAnnotation[7268-7277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7358-7364]:Modifier[7282-7288]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[7365-7371]:SimpleType[7289-7295]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7372-7376]:SimpleName[7296-7300]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[7377-7390]:SingleVariableDeclaration[7301-7314]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7399-7410]:SimpleType[7323-7334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7411-7644]:Block[7335-7568]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[7419-7505]:IfStatement[7343-7429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7452-7505]:Block[7376-7429]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[7462-7476]:ExpressionStatement[7386-7400]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7485-7497]:ReturnStatement[7409-7421]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7512-7638]:TryStatement[7436-7562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7516-7554]:Block[7440-7478]"
    }, {
      "left" : "return in.nextInt();",
      "right" : "return in.nextInt();",
      "info" : "ReturnStatement[7526-7546]:ReturnStatement[7450-7470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7587-7638]:Block[7511-7562]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[7597-7630]:ThrowStatement[7521-7554]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7649-7658]:MarkerAnnotation[7573-7582]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7663-7669]:Modifier[7587-7593]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7670-7674]:PrimitiveType[7594-7598]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[7675-7680]:SimpleName[7599-7604]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[7681-7695]:SingleVariableDeclaration[7605-7619]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[7697-7709]:SingleVariableDeclaration[7621-7633]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7718-7729]:SimpleType[7642-7653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7730-7761]:Block[7654-7685]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[7738-7755]:ExpressionStatement[7662-7679]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7985-7994]:MarkerAnnotation[7909-7918]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7995-8001]:Modifier[7919-7925]"
    }, {
      "left" : "AtomicInteger",
      "right" : "AtomicInteger",
      "info" : "SimpleType[8002-8015]:SimpleType[7926-7939]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8016-8020]:SimpleName[7940-7944]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[8021-8034]:SingleVariableDeclaration[7945-7958]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8043-8054]:SimpleType[7967-7978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8055-8214]:Block[7979-8138]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8063-8208]:TryStatement[7987-8132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8067-8124]:Block[7991-8048]"
    }, {
      "left" : "return new AtomicInteger(in.nextInt());",
      "right" : "return new AtomicInteger(in.nextInt());",
      "info" : "ReturnStatement[8077-8116]:ReturnStatement[8001-8040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8157-8208]:Block[8081-8132]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[8167-8200]:ThrowStatement[8091-8124]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8219-8228]:MarkerAnnotation[8143-8152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8229-8235]:Modifier[8153-8159]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8236-8240]:PrimitiveType[8160-8164]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[8241-8246]:SimpleName[8165-8170]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[8247-8261]:SingleVariableDeclaration[8171-8185]"
    }, {
      "left" : "AtomicInteger value",
      "right" : "AtomicInteger value",
      "info" : "SingleVariableDeclaration[8263-8282]:SingleVariableDeclaration[8187-8206]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8291-8302]:SimpleType[8215-8226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8303-8340]:Block[8227-8264]"
    }, {
      "left" : "out.value(value.get());",
      "right" : "out.value(value.get());",
      "info" : "ExpressionStatement[8311-8334]:ExpressionStatement[8235-8258]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8597-8606]:MarkerAnnotation[8521-8530]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8607-8613]:Modifier[8531-8537]"
    }, {
      "left" : "AtomicBoolean",
      "right" : "AtomicBoolean",
      "info" : "SimpleType[8614-8627]:SimpleType[8538-8551]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8628-8632]:SimpleName[8552-8556]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[8633-8646]:SingleVariableDeclaration[8557-8570]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8655-8666]:SimpleType[8579-8590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8667-8724]:Block[8591-8648]"
    }, {
      "left" : "return new AtomicBoolean(in.nextBoolean());",
      "right" : "return new AtomicBoolean(in.nextBoolean());",
      "info" : "ReturnStatement[8675-8718]:ReturnStatement[8599-8642]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8729-8738]:MarkerAnnotation[8653-8662]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8739-8745]:Modifier[8663-8669]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8746-8750]:PrimitiveType[8670-8674]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[8751-8756]:SimpleName[8675-8680]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[8757-8771]:SingleVariableDeclaration[8681-8695]"
    }, {
      "left" : "AtomicBoolean value",
      "right" : "AtomicBoolean value",
      "info" : "SingleVariableDeclaration[8773-8792]:SingleVariableDeclaration[8697-8716]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8801-8812]:SimpleType[8725-8736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8813-8850]:Block[8737-8774]"
    }, {
      "left" : "out.value(value.get());",
      "right" : "out.value(value.get());",
      "info" : "ExpressionStatement[8821-8844]:ExpressionStatement[8745-8768]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9123-9132]:MarkerAnnotation[9047-9056]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9133-9139]:Modifier[9057-9063]"
    }, {
      "left" : "AtomicIntegerArray",
      "right" : "AtomicIntegerArray",
      "info" : "SimpleType[9140-9158]:SimpleType[9064-9082]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9159-9163]:SimpleName[9083-9087]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[9164-9177]:SingleVariableDeclaration[9088-9101]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9186-9197]:SimpleType[9110-9121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9198-9753]:Block[9122-9677]"
    }, {
      "left" : "List<Integer> list = new ArrayList<Integer>();",
      "right" : "List<Integer> list = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[9208-9254]:VariableDeclarationStatement[9132-9178]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[9263-9279]:ExpressionStatement[9187-9203]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[9288-9511]:WhileStatement[9212-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9309-9511]:Block[9233-9435]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9321-9501]:TryStatement[9245-9425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9325-9409]:Block[9249-9333]"
    }, {
      "left" : "int integer = in.nextInt();",
      "right" : "int integer = in.nextInt();",
      "info" : "VariableDeclarationStatement[9339-9366]:VariableDeclarationStatement[9263-9290]"
    }, {
      "left" : "list.add(integer);",
      "right" : "list.add(integer);",
      "info" : "ExpressionStatement[9379-9397]:ExpressionStatement[9303-9321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9442-9501]:Block[9366-9425]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[9456-9489]:ThrowStatement[9380-9413]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[9520-9534]:ExpressionStatement[9444-9458]"
    }, {
      "left" : "int length = list.size();",
      "right" : "int length = list.size();",
      "info" : "VariableDeclarationStatement[9543-9568]:VariableDeclarationStatement[9467-9492]"
    }, {
      "left" : "AtomicIntegerArray array = new AtomicIntegerArray(length);",
      "right" : "AtomicIntegerArray array = new AtomicIntegerArray(length);",
      "info" : "VariableDeclarationStatement[9577-9635]:VariableDeclarationStatement[9501-9559]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)",
      "right" : "for (int i = 0; i < length; ++i)",
      "info" : "ForStatement[9644-9725]:ForStatement[9568-9649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9677-9725]:Block[9601-9649]"
    }, {
      "left" : "array.set(i, list.get(i));",
      "right" : "array.set(i, list.get(i));",
      "info" : "ExpressionStatement[9689-9715]:ExpressionStatement[9613-9639]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[9734-9747]:ReturnStatement[9658-9671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9758-9767]:MarkerAnnotation[9682-9691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9768-9774]:Modifier[9692-9698]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9775-9779]:PrimitiveType[9699-9703]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[9780-9785]:SimpleName[9704-9709]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[9786-9800]:SingleVariableDeclaration[9710-9724]"
    }, {
      "left" : "AtomicIntegerArray value",
      "right" : "AtomicIntegerArray value",
      "info" : "SingleVariableDeclaration[9802-9826]:SingleVariableDeclaration[9726-9750]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9835-9846]:SimpleType[9759-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9847-10007]:Block[9771-9931]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[9855-9872]:ExpressionStatement[9779-9796]"
    }, {
      "left" : "for (int i = 0, length = value.length(); i < length; i++)",
      "right" : "for (int i = 0, length = value.length(); i < length; i++)",
      "info" : "ForStatement[9879-9979]:ForStatement[9803-9903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9937-9979]:Block[9861-9903]"
    }, {
      "left" : "out.value(value.get(i));",
      "right" : "out.value(value.get(i));",
      "info" : "ExpressionStatement[9947-9971]:ExpressionStatement[9871-9895]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[9986-10001]:ExpressionStatement[9910-9925]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10257-10266]:MarkerAnnotation[10181-10190]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10271-10277]:Modifier[10195-10201]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[10278-10284]:SimpleType[10202-10208]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10285-10289]:SimpleName[10209-10213]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[10290-10303]:SingleVariableDeclaration[10214-10227]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10312-10323]:SimpleType[10236-10247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10324-10558]:Block[10248-10482]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[10332-10418]:IfStatement[10256-10342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10365-10418]:Block[10289-10342]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[10375-10389]:ExpressionStatement[10299-10313]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10398-10410]:ReturnStatement[10322-10334]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10425-10552]:TryStatement[10349-10476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10429-10468]:Block[10353-10392]"
    }, {
      "left" : "return in.nextLong();",
      "right" : "return in.nextLong();",
      "info" : "ReturnStatement[10439-10460]:ReturnStatement[10363-10384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10501-10552]:Block[10425-10476]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[10511-10544]:ThrowStatement[10435-10468]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10563-10572]:MarkerAnnotation[10487-10496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10577-10583]:Modifier[10501-10507]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10584-10588]:PrimitiveType[10508-10512]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[10589-10594]:SimpleName[10513-10518]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[10595-10609]:SingleVariableDeclaration[10519-10533]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[10611-10623]:SingleVariableDeclaration[10535-10547]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10632-10643]:SimpleType[10556-10567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10644-10675]:Block[10568-10599]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[10652-10669]:ExpressionStatement[10576-10593]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10764-10773]:MarkerAnnotation[10688-10697]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10778-10784]:Modifier[10702-10708]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[10785-10791]:SimpleType[10709-10715]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10792-10796]:SimpleName[10716-10720]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[10797-10810]:SingleVariableDeclaration[10721-10734]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10819-10830]:SimpleType[10743-10754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10831-10969]:Block[10755-10893]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[10839-10925]:IfStatement[10763-10849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10872-10925]:Block[10796-10849]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[10882-10896]:ExpressionStatement[10806-10820]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10905-10917]:ReturnStatement[10829-10841]"
    }, {
      "left" : "return (float) in.nextDouble();",
      "right" : "return (float) in.nextDouble();",
      "info" : "ReturnStatement[10932-10963]:ReturnStatement[10856-10887]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10974-10983]:MarkerAnnotation[10898-10907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10988-10994]:Modifier[10912-10918]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10995-10999]:PrimitiveType[10919-10923]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[11000-11005]:SimpleName[10924-10929]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[11006-11020]:SingleVariableDeclaration[10930-10944]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[11022-11034]:SingleVariableDeclaration[10946-10958]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11043-11054]:SimpleType[10967-10978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11055-11086]:Block[10979-11010]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[11063-11080]:ExpressionStatement[10987-11004]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11176-11185]:MarkerAnnotation[11100-11109]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11190-11196]:Modifier[11114-11120]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[11197-11203]:SimpleType[11121-11127]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11204-11208]:SimpleName[11128-11132]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[11209-11222]:SingleVariableDeclaration[11133-11146]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11231-11242]:SimpleType[11155-11166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11243-11373]:Block[11167-11297]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[11251-11337]:IfStatement[11175-11261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11284-11337]:Block[11208-11261]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[11294-11308]:ExpressionStatement[11218-11232]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11317-11329]:ReturnStatement[11241-11253]"
    }, {
      "left" : "return in.nextDouble();",
      "right" : "return in.nextDouble();",
      "info" : "ReturnStatement[11344-11367]:ReturnStatement[11268-11291]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11378-11387]:MarkerAnnotation[11302-11311]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11392-11398]:Modifier[11316-11322]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11399-11403]:PrimitiveType[11323-11327]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[11404-11409]:SimpleName[11328-11333]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[11410-11424]:SingleVariableDeclaration[11334-11348]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[11426-11438]:SingleVariableDeclaration[11350-11362]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11447-11458]:SimpleType[11371-11382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11459-11490]:Block[11383-11414]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[11467-11484]:ExpressionStatement[11391-11408]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11580-11589]:MarkerAnnotation[11504-11513]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11594-11600]:Modifier[11518-11524]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[11601-11607]:SimpleType[11525-11531]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11608-11612]:SimpleName[11532-11536]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[11613-11626]:SingleVariableDeclaration[11537-11550]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11635-11646]:SimpleType[11559-11570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11647-11957]:Block[11571-11881]"
    }, {
      "left" : "JsonToken jsonToken = in.peek();",
      "right" : "JsonToken jsonToken = in.peek();",
      "info" : "VariableDeclarationStatement[11655-11687]:VariableDeclarationStatement[11579-11611]"
    }, {
      "left" : "switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }",
      "right" : "switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }",
      "info" : "SwitchStatement[11694-11951]:SwitchStatement[11618-11875]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[11721-11731]:SwitchCase[11645-11655]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[11740-11754]:ExpressionStatement[11664-11678]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11763-11775]:ReturnStatement[11687-11699]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[11782-11794]:SwitchCase[11706-11718]"
    }, {
      "left" : "return new LazilyParsedNumber(in.nextString());",
      "right" : "return new LazilyParsedNumber(in.nextString());",
      "info" : "ReturnStatement[11803-11850]:ReturnStatement[11727-11774]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11857-11865]:SwitchCase[11781-11789]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);",
      "right" : "throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);",
      "info" : "ThrowStatement[11874-11943]:ThrowStatement[11798-11867]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11962-11971]:MarkerAnnotation[11886-11895]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11976-11982]:Modifier[11900-11906]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11983-11987]:PrimitiveType[11907-11911]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[11988-11993]:SimpleName[11912-11917]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[11994-12008]:SingleVariableDeclaration[11918-11932]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[12010-12022]:SingleVariableDeclaration[11934-11946]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12031-12042]:SimpleType[11955-11966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12043-12074]:Block[11967-11998]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[12051-12068]:ExpressionStatement[11975-11992]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12266-12275]:MarkerAnnotation[12190-12199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12280-12286]:Modifier[12204-12210]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[12287-12296]:SimpleType[12211-12220]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12297-12301]:SimpleName[12221-12225]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[12302-12315]:SingleVariableDeclaration[12226-12239]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12324-12335]:SimpleType[12248-12259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12336-12614]:Block[12260-12538]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[12344-12430]:IfStatement[12268-12354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12377-12430]:Block[12301-12354]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[12387-12401]:ExpressionStatement[12311-12325]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12410-12422]:ReturnStatement[12334-12346]"
    }, {
      "left" : "String str = in.nextString();",
      "right" : "String str = in.nextString();",
      "info" : "VariableDeclarationStatement[12437-12466]:VariableDeclarationStatement[12361-12390]"
    }, {
      "left" : "if (str.length() != 1)",
      "right" : "if (str.length() != 1)",
      "info" : "IfStatement[12473-12580]:IfStatement[12397-12504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12496-12580]:Block[12420-12504]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expecting character, got: \" + str);",
      "right" : "throw new JsonSyntaxException(\"Expecting character, got: \" + str);",
      "info" : "ThrowStatement[12506-12572]:ThrowStatement[12430-12496]"
    }, {
      "left" : "return str.charAt(0);",
      "right" : "return str.charAt(0);",
      "info" : "ReturnStatement[12587-12608]:ReturnStatement[12511-12532]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12619-12628]:MarkerAnnotation[12543-12552]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12633-12639]:Modifier[12557-12563]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12640-12644]:PrimitiveType[12564-12568]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[12645-12650]:SimpleName[12569-12574]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[12651-12665]:SingleVariableDeclaration[12575-12589]"
    }, {
      "left" : "Character value",
      "right" : "Character value",
      "info" : "SingleVariableDeclaration[12667-12682]:SingleVariableDeclaration[12591-12606]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12691-12702]:SimpleType[12615-12626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12703-12773]:Block[12627-12697]"
    }, {
      "left" : "out.value(value == null ? null : String.valueOf(value));",
      "right" : "out.value(value == null ? null : String.valueOf(value));",
      "info" : "ExpressionStatement[12711-12767]:ExpressionStatement[12635-12691]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12983-12992]:MarkerAnnotation[12907-12916]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12997-13003]:Modifier[12921-12927]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13004-13010]:SimpleType[12928-12934]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13011-13015]:SimpleName[12935-12939]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[13016-13029]:SingleVariableDeclaration[12940-12953]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13038-13049]:SimpleType[12962-12973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13050-13374]:Block[12974-13298]"
    }, {
      "left" : "JsonToken peek = in.peek();",
      "right" : "JsonToken peek = in.peek();",
      "info" : "VariableDeclarationStatement[13058-13085]:VariableDeclarationStatement[12982-13009]"
    }, {
      "left" : "if (peek == JsonToken.NULL)",
      "right" : "if (peek == JsonToken.NULL)",
      "info" : "IfStatement[13092-13173]:IfStatement[13016-13097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13120-13173]:Block[13044-13097]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[13130-13144]:ExpressionStatement[13054-13068]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13153-13165]:ReturnStatement[13077-13089]"
    }, {
      "left" : "if (peek == JsonToken.BOOLEAN)",
      "right" : "if (peek == JsonToken.BOOLEAN)",
      "info" : "IfStatement[13247-13338]:IfStatement[13171-13262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13278-13338]:Block[13202-13262]"
    }, {
      "left" : "return Boolean.toString(in.nextBoolean());",
      "right" : "return Boolean.toString(in.nextBoolean());",
      "info" : "ReturnStatement[13288-13330]:ReturnStatement[13212-13254]"
    }, {
      "left" : "return in.nextString();",
      "right" : "return in.nextString();",
      "info" : "ReturnStatement[13345-13368]:ReturnStatement[13269-13292]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13379-13388]:MarkerAnnotation[13303-13312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13393-13399]:Modifier[13317-13323]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13400-13404]:PrimitiveType[13324-13328]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[13405-13410]:SimpleName[13329-13334]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[13411-13425]:SingleVariableDeclaration[13335-13349]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[13427-13439]:SingleVariableDeclaration[13351-13363]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13448-13459]:SimpleType[13372-13383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13460-13491]:Block[13384-13415]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[13468-13485]:ExpressionStatement[13392-13409]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13596-13605]:MarkerAnnotation[13520-13529]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13606-13612]:Modifier[13530-13536]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[13613-13623]:SimpleType[13537-13547]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13624-13628]:SimpleName[13548-13552]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[13629-13642]:SingleVariableDeclaration[13553-13566]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13651-13662]:SimpleType[13575-13586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13663-13915]:Block[13587-13839]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[13671-13757]:IfStatement[13595-13681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13704-13757]:Block[13628-13681]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[13714-13728]:ExpressionStatement[13638-13652]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13737-13749]:ReturnStatement[13661-13673]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13764-13909]:TryStatement[13688-13833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13768-13825]:Block[13692-13749]"
    }, {
      "left" : "return new BigDecimal(in.nextString());",
      "right" : "return new BigDecimal(in.nextString());",
      "info" : "ReturnStatement[13778-13817]:ReturnStatement[13702-13741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13858-13909]:Block[13782-13833]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[13868-13901]:ThrowStatement[13792-13825]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13921-13930]:MarkerAnnotation[13845-13854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13931-13937]:Modifier[13855-13861]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13938-13942]:PrimitiveType[13862-13866]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[13943-13948]:SimpleName[13867-13872]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[13949-13963]:SingleVariableDeclaration[13873-13887]"
    }, {
      "left" : "BigDecimal value",
      "right" : "BigDecimal value",
      "info" : "SingleVariableDeclaration[13965-13981]:SingleVariableDeclaration[13889-13905]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13990-14001]:SimpleType[13914-13925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14002-14033]:Block[13926-13957]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[14010-14027]:ExpressionStatement[13934-13951]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14138-14147]:MarkerAnnotation[14062-14071]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14148-14154]:Modifier[14072-14078]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[14155-14165]:SimpleType[14079-14089]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14166-14170]:SimpleName[14090-14094]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[14171-14184]:SingleVariableDeclaration[14095-14108]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14193-14204]:SimpleType[14117-14128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14205-14457]:Block[14129-14381]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[14213-14299]:IfStatement[14137-14223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14246-14299]:Block[14170-14223]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[14256-14270]:ExpressionStatement[14180-14194]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14279-14291]:ReturnStatement[14203-14215]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14306-14451]:TryStatement[14230-14375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14310-14367]:Block[14234-14291]"
    }, {
      "left" : "return new BigInteger(in.nextString());",
      "right" : "return new BigInteger(in.nextString());",
      "info" : "ReturnStatement[14320-14359]:ReturnStatement[14244-14283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14400-14451]:Block[14324-14375]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[14410-14443]:ThrowStatement[14334-14367]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14463-14472]:MarkerAnnotation[14387-14396]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14473-14479]:Modifier[14397-14403]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14480-14484]:PrimitiveType[14404-14408]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[14485-14490]:SimpleName[14409-14414]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[14491-14505]:SingleVariableDeclaration[14415-14429]"
    }, {
      "left" : "BigInteger value",
      "right" : "BigInteger value",
      "info" : "SingleVariableDeclaration[14507-14523]:SingleVariableDeclaration[14431-14447]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14532-14543]:SimpleType[14456-14467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14544-14575]:Block[14468-14499]"
    }, {
      "left" : "out.value(value);",
      "right" : "out.value(value);",
      "info" : "ExpressionStatement[14552-14569]:ExpressionStatement[14476-14493]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14780-14789]:MarkerAnnotation[14704-14713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14794-14800]:Modifier[14718-14724]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[14801-14814]:SimpleType[14725-14738]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14815-14819]:SimpleName[14739-14743]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[14820-14833]:SingleVariableDeclaration[14744-14757]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14842-14853]:SimpleType[14766-14777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14854-15003]:Block[14778-14927]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[14862-14948]:IfStatement[14786-14872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14895-14948]:Block[14819-14872]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[14905-14919]:ExpressionStatement[14829-14843]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14928-14940]:ReturnStatement[14852-14864]"
    }, {
      "left" : "return new StringBuilder(in.nextString());",
      "right" : "return new StringBuilder(in.nextString());",
      "info" : "ReturnStatement[14955-14997]:ReturnStatement[14879-14921]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15008-15017]:MarkerAnnotation[14932-14941]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15022-15028]:Modifier[14946-14952]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15029-15033]:PrimitiveType[14953-14957]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[15034-15039]:SimpleName[14958-14963]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[15040-15054]:SingleVariableDeclaration[14964-14978]"
    }, {
      "left" : "StringBuilder value",
      "right" : "StringBuilder value",
      "info" : "SingleVariableDeclaration[15056-15075]:SingleVariableDeclaration[14980-14999]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15084-15095]:SimpleType[15008-15019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15096-15161]:Block[15020-15085]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[15104-15155]:ExpressionStatement[15028-15079]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15390-15399]:MarkerAnnotation[15314-15323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15404-15410]:Modifier[15328-15334]"
    }, {
      "left" : "StringBuffer",
      "right" : "StringBuffer",
      "info" : "SimpleType[15411-15423]:SimpleType[15335-15347]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15424-15428]:SimpleName[15348-15352]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[15429-15442]:SingleVariableDeclaration[15353-15366]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15451-15462]:SimpleType[15375-15386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15463-15611]:Block[15387-15535]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[15471-15557]:IfStatement[15395-15481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15504-15557]:Block[15428-15481]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[15514-15528]:ExpressionStatement[15438-15452]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15537-15549]:ReturnStatement[15461-15473]"
    }, {
      "left" : "return new StringBuffer(in.nextString());",
      "right" : "return new StringBuffer(in.nextString());",
      "info" : "ReturnStatement[15564-15605]:ReturnStatement[15488-15529]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15616-15625]:MarkerAnnotation[15540-15549]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15630-15636]:Modifier[15554-15560]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15637-15641]:PrimitiveType[15561-15565]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[15642-15647]:SimpleName[15566-15571]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[15648-15662]:SingleVariableDeclaration[15572-15586]"
    }, {
      "left" : "StringBuffer value",
      "right" : "StringBuffer value",
      "info" : "SingleVariableDeclaration[15664-15682]:SingleVariableDeclaration[15588-15606]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15691-15702]:SimpleType[15615-15626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15703-15768]:Block[15627-15692]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[15711-15762]:ExpressionStatement[15635-15686]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15966-15975]:MarkerAnnotation[15890-15899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15980-15986]:Modifier[15904-15910]"
    }, {
      "left" : "URL",
      "right" : "URL",
      "info" : "SimpleType[15987-15990]:SimpleType[15911-15914]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15991-15995]:SimpleName[15915-15919]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[15996-16009]:SingleVariableDeclaration[15920-15933]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16018-16029]:SimpleType[15942-15953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16030-16242]:Block[15954-16166]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[16038-16124]:IfStatement[15962-16048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16071-16124]:Block[15995-16048]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[16081-16095]:ExpressionStatement[16005-16019]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16104-16116]:ReturnStatement[16028-16040]"
    }, {
      "left" : "String nextString = in.nextString();",
      "right" : "String nextString = in.nextString();",
      "info" : "VariableDeclarationStatement[16131-16167]:VariableDeclarationStatement[16055-16091]"
    }, {
      "left" : "return \"null\".equals(nextString) ? null : new URL(nextString);",
      "right" : "return \"null\".equals(nextString) ? null : new URL(nextString);",
      "info" : "ReturnStatement[16174-16236]:ReturnStatement[16098-16160]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16247-16256]:MarkerAnnotation[16171-16180]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16261-16267]:Modifier[16185-16191]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16268-16272]:PrimitiveType[16192-16196]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[16273-16278]:SimpleName[16197-16202]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[16279-16293]:SingleVariableDeclaration[16203-16217]"
    }, {
      "left" : "URL value",
      "right" : "URL value",
      "info" : "SingleVariableDeclaration[16295-16304]:SingleVariableDeclaration[16219-16228]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16313-16324]:SimpleType[16237-16248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16325-16396]:Block[16249-16320]"
    }, {
      "left" : "out.value(value == null ? null : value.toExternalForm());",
      "right" : "out.value(value == null ? null : value.toExternalForm());",
      "info" : "ExpressionStatement[16333-16390]:ExpressionStatement[16257-16314]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16561-16570]:MarkerAnnotation[16485-16494]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16575-16581]:Modifier[16499-16505]"
    }, {
      "left" : "URI",
      "right" : "URI",
      "info" : "SimpleType[16582-16585]:SimpleType[16506-16509]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[16586-16590]:SimpleName[16510-16514]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[16591-16604]:SingleVariableDeclaration[16515-16528]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16613-16624]:SimpleType[16537-16548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16625-16938]:Block[16549-16862]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[16633-16719]:IfStatement[16557-16643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16666-16719]:Block[16590-16643]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[16676-16690]:ExpressionStatement[16600-16614]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16699-16711]:ReturnStatement[16623-16635]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16726-16932]:TryStatement[16650-16856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16730-16855]:Block[16654-16779]"
    }, {
      "left" : "String nextString = in.nextString();",
      "right" : "String nextString = in.nextString();",
      "info" : "VariableDeclarationStatement[16740-16776]:VariableDeclarationStatement[16664-16700]"
    }, {
      "left" : "return \"null\".equals(nextString) ? null : new URI(nextString);",
      "right" : "return \"null\".equals(nextString) ? null : new URI(nextString);",
      "info" : "ReturnStatement[16785-16847]:ReturnStatement[16709-16771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-16932]:Block[16809-16856]"
    }, {
      "left" : "throw new JsonIOException(e);",
      "right" : "throw new JsonIOException(e);",
      "info" : "ThrowStatement[16895-16924]:ThrowStatement[16819-16848]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16943-16952]:MarkerAnnotation[16867-16876]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16957-16963]:Modifier[16881-16887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16964-16968]:PrimitiveType[16888-16892]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[16969-16974]:SimpleName[16893-16898]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[16975-16989]:SingleVariableDeclaration[16899-16913]"
    }, {
      "left" : "URI value",
      "right" : "URI value",
      "info" : "SingleVariableDeclaration[16991-17000]:SingleVariableDeclaration[16915-16924]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17009-17020]:SimpleType[16933-16944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17021-17091]:Block[16945-17015]"
    }, {
      "left" : "out.value(value == null ? null : value.toASCIIString());",
      "right" : "out.value(value == null ? null : value.toASCIIString());",
      "info" : "ExpressionStatement[17029-17085]:ExpressionStatement[16953-17009]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17281-17290]:MarkerAnnotation[17205-17214]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17295-17301]:Modifier[17219-17225]"
    }, {
      "left" : "InetAddress",
      "right" : "InetAddress",
      "info" : "SimpleType[17302-17313]:SimpleType[17226-17237]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17314-17318]:SimpleName[17238-17242]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[17319-17332]:SingleVariableDeclaration[17243-17256]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17341-17352]:SimpleType[17265-17276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17353-17594]:Block[17277-17518]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[17361-17447]:IfStatement[17285-17371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17394-17447]:Block[17318-17371]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[17404-17418]:ExpressionStatement[17328-17342]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17427-17439]:ReturnStatement[17351-17363]"
    }, {
      "left" : "return InetAddress.getByName(in.nextString());",
      "right" : "return InetAddress.getByName(in.nextString());",
      "info" : "ReturnStatement[17542-17588]:ReturnStatement[17466-17512]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17599-17608]:MarkerAnnotation[17523-17532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17613-17619]:Modifier[17537-17543]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17620-17624]:PrimitiveType[17544-17548]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[17625-17630]:SimpleName[17549-17554]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[17631-17645]:SingleVariableDeclaration[17555-17569]"
    }, {
      "left" : "InetAddress value",
      "right" : "InetAddress value",
      "info" : "SingleVariableDeclaration[17647-17664]:SingleVariableDeclaration[17571-17588]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17673-17684]:SimpleType[17597-17608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17685-17756]:Block[17609-17680]"
    }, {
      "left" : "out.value(value == null ? null : value.getHostAddress());",
      "right" : "out.value(value == null ? null : value.getHostAddress());",
      "info" : "ExpressionStatement[17693-17750]:ExpressionStatement[17617-17674]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17967-17976]:MarkerAnnotation[17891-17900]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17981-17987]:Modifier[17905-17911]"
    }, {
      "left" : "UUID",
      "right" : "UUID",
      "info" : "SimpleType[17988-17992]:SimpleType[17912-17916]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17993-17997]:SimpleName[17917-17921]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[17998-18011]:SingleVariableDeclaration[17922-17935]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18020-18031]:SimpleType[17944-17955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18032-18189]:Block[17956-18113]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[18040-18126]:IfStatement[17964-18050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18073-18126]:Block[17997-18050]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[18083-18097]:ExpressionStatement[18007-18021]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18106-18118]:ReturnStatement[18030-18042]"
    }, {
      "left" : "return java.util.UUID.fromString(in.nextString());",
      "right" : "return java.util.UUID.fromString(in.nextString());",
      "info" : "ReturnStatement[18133-18183]:ReturnStatement[18057-18107]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18194-18203]:MarkerAnnotation[18118-18127]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18208-18214]:Modifier[18132-18138]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18215-18219]:PrimitiveType[18139-18143]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[18220-18225]:SimpleName[18144-18149]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[18226-18240]:SingleVariableDeclaration[18150-18164]"
    }, {
      "left" : "UUID value",
      "right" : "UUID value",
      "info" : "SingleVariableDeclaration[18242-18252]:SingleVariableDeclaration[18166-18176]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18261-18272]:SimpleType[18185-18196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18273-18338]:Block[18197-18262]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[18281-18332]:ExpressionStatement[18205-18256]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18521-18530]:MarkerAnnotation[18445-18454]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18535-18541]:Modifier[18459-18465]"
    }, {
      "left" : "Currency",
      "right" : "Currency",
      "info" : "SimpleType[18542-18550]:SimpleType[18466-18474]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[18551-18555]:SimpleName[18475-18479]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[18556-18569]:SingleVariableDeclaration[18480-18493]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18578-18589]:SimpleType[18502-18513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18590-18649]:Block[18514-18573]"
    }, {
      "left" : "return Currency.getInstance(in.nextString());",
      "right" : "return Currency.getInstance(in.nextString());",
      "info" : "ReturnStatement[18598-18643]:ReturnStatement[18522-18567]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18654-18663]:MarkerAnnotation[18578-18587]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18668-18674]:Modifier[18592-18598]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18675-18679]:PrimitiveType[18599-18603]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[18680-18685]:SimpleName[18604-18609]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[18686-18700]:SingleVariableDeclaration[18610-18624]"
    }, {
      "left" : "Currency value",
      "right" : "Currency value",
      "info" : "SingleVariableDeclaration[18702-18716]:SingleVariableDeclaration[18626-18640]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18725-18736]:SimpleType[18649-18660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18737-18786]:Block[18661-18710]"
    }, {
      "left" : "out.value(value.getCurrencyCode());",
      "right" : "out.value(value.getCurrencyCode());",
      "info" : "ExpressionStatement[18745-18780]:ExpressionStatement[18669-18704]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[18994-19024]:SingleMemberAnnotation[18918-18948]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19083-19092]:MarkerAnnotation[19007-19016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19093-19099]:Modifier[19017-19023]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[19101-19102]:TypeParameter[19025-19026]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[19104-19118]:ParameterizedType[19028-19042]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[19119-19125]:SimpleName[19043-19049]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[19126-19135]:SingleVariableDeclaration[19050-19059]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[19137-19159]:SingleVariableDeclaration[19061-19083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19161-19750]:Block[19085-19674]"
    }, {
      "left" : "if (typeToken.getRawType() != Timestamp.class)",
      "right" : "if (typeToken.getRawType() != Timestamp.class)",
      "info" : "IfStatement[19169-19246]:IfStatement[19093-19170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19216-19246]:Block[19140-19170]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19226-19238]:ReturnStatement[19150-19162]"
    }, {
      "left" : "final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);",
      "right" : "final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);",
      "info" : "VariableDeclarationStatement[19254-19324]:VariableDeclarationStatement[19178-19248]"
    }, {
      "left" : "return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };",
      "right" : "return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {\n        @Override public Timestamp read(JsonReader in) throws IOException {\n          Date date = dateTypeAdapter.read(in);\n          return date != null ? new Timestamp(date.getTime()) : null;\n        }\n\n        @Override public void write(JsonWriter out, Timestamp value) throws IOException {\n          dateTypeAdapter.write(out, value);\n        }\n      };",
      "info" : "ReturnStatement[19331-19744]:ReturnStatement[19255-19668]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19394-19403]:MarkerAnnotation[19318-19327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19404-19410]:Modifier[19328-19334]"
    }, {
      "left" : "Timestamp",
      "right" : "Timestamp",
      "info" : "SimpleType[19411-19420]:SimpleType[19335-19344]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19421-19425]:SimpleName[19345-19349]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[19426-19439]:SingleVariableDeclaration[19350-19363]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19448-19459]:SimpleType[19372-19383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19460-19589]:Block[19384-19513]"
    }, {
      "left" : "Date date = dateTypeAdapter.read(in);",
      "right" : "Date date = dateTypeAdapter.read(in);",
      "info" : "VariableDeclarationStatement[19472-19509]:VariableDeclarationStatement[19396-19433]"
    }, {
      "left" : "return date != null ? new Timestamp(date.getTime()) : null;",
      "right" : "return date != null ? new Timestamp(date.getTime()) : null;",
      "info" : "ReturnStatement[19520-19579]:ReturnStatement[19444-19503]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19599-19608]:MarkerAnnotation[19523-19532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19609-19615]:Modifier[19533-19539]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19616-19620]:PrimitiveType[19540-19544]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[19621-19626]:SimpleName[19545-19550]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[19627-19641]:SingleVariableDeclaration[19551-19565]"
    }, {
      "left" : "Timestamp value",
      "right" : "Timestamp value",
      "info" : "SingleVariableDeclaration[19643-19658]:SingleVariableDeclaration[19567-19582]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19667-19678]:SimpleType[19591-19602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19679-19735]:Block[19603-19659]"
    }, {
      "left" : "dateTypeAdapter.write(out, value);",
      "right" : "dateTypeAdapter.write(out, value);",
      "info" : "ExpressionStatement[19691-19725]:ExpressionStatement[19615-19649]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20165-20174]:MarkerAnnotation[20089-20098]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20179-20185]:Modifier[20103-20109]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[20186-20194]:SimpleType[20110-20118]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[20195-20199]:SimpleName[20119-20123]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[20200-20213]:SingleVariableDeclaration[20124-20137]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20222-20233]:SimpleType[20146-20157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20234-21157]:Block[20158-21081]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[20242-20329]:IfStatement[20166-20253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20275-20329]:Block[20199-20253]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[20285-20299]:ExpressionStatement[20209-20223]"
    }, {
      "left" : "return  null;",
      "right" : "return  null;",
      "info" : "ReturnStatement[20308-20321]:ReturnStatement[20232-20245]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[20336-20353]:ExpressionStatement[20260-20277]"
    }, {
      "left" : "int year = 0;",
      "right" : "int year = 0;",
      "info" : "VariableDeclarationStatement[20360-20373]:VariableDeclarationStatement[20284-20297]"
    }, {
      "left" : "int month = 0;",
      "right" : "int month = 0;",
      "info" : "VariableDeclarationStatement[20380-20394]:VariableDeclarationStatement[20304-20318]"
    }, {
      "left" : "int dayOfMonth = 0;",
      "right" : "int dayOfMonth = 0;",
      "info" : "VariableDeclarationStatement[20401-20420]:VariableDeclarationStatement[20325-20344]"
    }, {
      "left" : "int hourOfDay = 0;",
      "right" : "int hourOfDay = 0;",
      "info" : "VariableDeclarationStatement[20427-20445]:VariableDeclarationStatement[20351-20369]"
    }, {
      "left" : "int minute = 0;",
      "right" : "int minute = 0;",
      "info" : "VariableDeclarationStatement[20452-20467]:VariableDeclarationStatement[20376-20391]"
    }, {
      "left" : "int second = 0;",
      "right" : "int second = 0;",
      "info" : "VariableDeclarationStatement[20474-20489]:VariableDeclarationStatement[20398-20413]"
    }, {
      "left" : "while (in.peek() != JsonToken.END_OBJECT)",
      "right" : "while (in.peek() != JsonToken.END_OBJECT)",
      "info" : "WhileStatement[20496-21041]:WhileStatement[20420-20965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20538-21041]:Block[20462-20965]"
    }, {
      "left" : "String name = in.nextName();",
      "right" : "String name = in.nextName();",
      "info" : "VariableDeclarationStatement[20548-20576]:VariableDeclarationStatement[20472-20500]"
    }, {
      "left" : "int value = in.nextInt();",
      "right" : "int value = in.nextInt();",
      "info" : "VariableDeclarationStatement[20585-20610]:VariableDeclarationStatement[20509-20534]"
    }, {
      "left" : "if (YEAR.equals(name))",
      "right" : "if (YEAR.equals(name))",
      "info" : "IfStatement[20619-21033]:IfStatement[20543-20957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20642-20677]:Block[20566-20601]"
    }, {
      "left" : "year = value;",
      "right" : "year = value;",
      "info" : "ExpressionStatement[20654-20667]:ExpressionStatement[20578-20591]"
    }, {
      "left" : "if (MONTH.equals(name))",
      "right" : "if (MONTH.equals(name))",
      "info" : "IfStatement[20683-21033]:IfStatement[20607-20957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20707-20743]:Block[20631-20667]"
    }, {
      "left" : "month = value;",
      "right" : "month = value;",
      "info" : "ExpressionStatement[20719-20733]:ExpressionStatement[20643-20657]"
    }, {
      "left" : "if (DAY_OF_MONTH.equals(name))",
      "right" : "if (DAY_OF_MONTH.equals(name))",
      "info" : "IfStatement[20749-21033]:IfStatement[20673-20957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20780-20821]:Block[20704-20745]"
    }, {
      "left" : "dayOfMonth = value;",
      "right" : "dayOfMonth = value;",
      "info" : "ExpressionStatement[20792-20811]:ExpressionStatement[20716-20735]"
    }, {
      "left" : "if (HOUR_OF_DAY.equals(name))",
      "right" : "if (HOUR_OF_DAY.equals(name))",
      "info" : "IfStatement[20827-21033]:IfStatement[20751-20957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20857-20897]:Block[20781-20821]"
    }, {
      "left" : "hourOfDay = value;",
      "right" : "hourOfDay = value;",
      "info" : "ExpressionStatement[20869-20887]:ExpressionStatement[20793-20811]"
    }, {
      "left" : "if (MINUTE.equals(name))",
      "right" : "if (MINUTE.equals(name))",
      "info" : "IfStatement[20903-21033]:IfStatement[20827-20957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20928-20965]:Block[20852-20889]"
    }, {
      "left" : "minute = value;",
      "right" : "minute = value;",
      "info" : "ExpressionStatement[20940-20955]:ExpressionStatement[20864-20879]"
    }, {
      "left" : "if (SECOND.equals(name))",
      "right" : "if (SECOND.equals(name))",
      "info" : "IfStatement[20971-21033]:IfStatement[20895-20957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20996-21033]:Block[20920-20957]"
    }, {
      "left" : "second = value;",
      "right" : "second = value;",
      "info" : "ExpressionStatement[21008-21023]:ExpressionStatement[20932-20947]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[21048-21063]:ExpressionStatement[20972-20987]"
    }, {
      "left" : "return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);",
      "right" : "return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);",
      "info" : "ReturnStatement[21070-21151]:ReturnStatement[20994-21075]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21163-21172]:MarkerAnnotation[21087-21096]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21177-21183]:Modifier[21101-21107]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21184-21188]:PrimitiveType[21108-21112]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[21189-21194]:SimpleName[21113-21118]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[21195-21209]:SingleVariableDeclaration[21119-21133]"
    }, {
      "left" : "Calendar value",
      "right" : "Calendar value",
      "info" : "SingleVariableDeclaration[21211-21225]:SingleVariableDeclaration[21135-21149]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21234-21245]:SimpleType[21158-21169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21246-21807]:Block[21170-21731]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[21254-21323]:IfStatement[21178-21247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21273-21323]:Block[21197-21247]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[21283-21299]:ExpressionStatement[21207-21223]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21308-21315]:ReturnStatement[21232-21239]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[21330-21348]:ExpressionStatement[21254-21272]"
    }, {
      "left" : "out.name(YEAR);",
      "right" : "out.name(YEAR);",
      "info" : "ExpressionStatement[21355-21370]:ExpressionStatement[21279-21294]"
    }, {
      "left" : "out.value(value.get(Calendar.YEAR));",
      "right" : "out.value(value.get(Calendar.YEAR));",
      "info" : "ExpressionStatement[21377-21413]:ExpressionStatement[21301-21337]"
    }, {
      "left" : "out.name(MONTH);",
      "right" : "out.name(MONTH);",
      "info" : "ExpressionStatement[21420-21436]:ExpressionStatement[21344-21360]"
    }, {
      "left" : "out.value(value.get(Calendar.MONTH));",
      "right" : "out.value(value.get(Calendar.MONTH));",
      "info" : "ExpressionStatement[21443-21480]:ExpressionStatement[21367-21404]"
    }, {
      "left" : "out.name(DAY_OF_MONTH);",
      "right" : "out.name(DAY_OF_MONTH);",
      "info" : "ExpressionStatement[21487-21510]:ExpressionStatement[21411-21434]"
    }, {
      "left" : "out.value(value.get(Calendar.DAY_OF_MONTH));",
      "right" : "out.value(value.get(Calendar.DAY_OF_MONTH));",
      "info" : "ExpressionStatement[21517-21561]:ExpressionStatement[21441-21485]"
    }, {
      "left" : "out.name(HOUR_OF_DAY);",
      "right" : "out.name(HOUR_OF_DAY);",
      "info" : "ExpressionStatement[21568-21590]:ExpressionStatement[21492-21514]"
    }, {
      "left" : "out.value(value.get(Calendar.HOUR_OF_DAY));",
      "right" : "out.value(value.get(Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[21597-21640]:ExpressionStatement[21521-21564]"
    }, {
      "left" : "out.name(MINUTE);",
      "right" : "out.name(MINUTE);",
      "info" : "ExpressionStatement[21647-21664]:ExpressionStatement[21571-21588]"
    }, {
      "left" : "out.value(value.get(Calendar.MINUTE));",
      "right" : "out.value(value.get(Calendar.MINUTE));",
      "info" : "ExpressionStatement[21671-21709]:ExpressionStatement[21595-21633]"
    }, {
      "left" : "out.name(SECOND);",
      "right" : "out.name(SECOND);",
      "info" : "ExpressionStatement[21716-21733]:ExpressionStatement[21640-21657]"
    }, {
      "left" : "out.value(value.get(Calendar.SECOND));",
      "right" : "out.value(value.get(Calendar.SECOND));",
      "info" : "ExpressionStatement[21740-21778]:ExpressionStatement[21664-21702]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[21785-21801]:ExpressionStatement[21709-21725]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22041-22050]:MarkerAnnotation[21965-21974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22055-22061]:Modifier[21979-21985]"
    }, {
      "left" : "Locale",
      "right" : "Locale",
      "info" : "SimpleType[22062-22068]:SimpleType[21986-21992]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[22069-22073]:SimpleName[21993-21997]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[22074-22087]:SingleVariableDeclaration[21998-22011]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22096-22107]:SimpleType[22020-22031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22108-22919]:Block[22032-22843]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[22116-22202]:IfStatement[22040-22126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22149-22202]:Block[22073-22126]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[22159-22173]:ExpressionStatement[22083-22097]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22182-22194]:ReturnStatement[22106-22118]"
    }, {
      "left" : "String locale = in.nextString();",
      "right" : "String locale = in.nextString();",
      "info" : "VariableDeclarationStatement[22209-22241]:VariableDeclarationStatement[22133-22165]"
    }, {
      "left" : "StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");",
      "right" : "StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");",
      "info" : "VariableDeclarationStatement[22248-22309]:VariableDeclarationStatement[22172-22233]"
    }, {
      "left" : "String language = null;",
      "right" : "String language = null;",
      "info" : "VariableDeclarationStatement[22316-22339]:VariableDeclarationStatement[22240-22263]"
    }, {
      "left" : "String country = null;",
      "right" : "String country = null;",
      "info" : "VariableDeclarationStatement[22346-22368]:VariableDeclarationStatement[22270-22292]"
    }, {
      "left" : "String variant = null;",
      "right" : "String variant = null;",
      "info" : "VariableDeclarationStatement[22375-22397]:VariableDeclarationStatement[22299-22321]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[22404-22488]:IfStatement[22328-22412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22437-22488]:Block[22361-22412]"
    }, {
      "left" : "language = tokenizer.nextToken();",
      "right" : "language = tokenizer.nextToken();",
      "info" : "ExpressionStatement[22447-22480]:ExpressionStatement[22371-22404]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[22495-22578]:IfStatement[22419-22502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22528-22578]:Block[22452-22502]"
    }, {
      "left" : "country = tokenizer.nextToken();",
      "right" : "country = tokenizer.nextToken();",
      "info" : "ExpressionStatement[22538-22570]:ExpressionStatement[22462-22494]"
    }, {
      "left" : "if (tokenizer.hasMoreElements())",
      "right" : "if (tokenizer.hasMoreElements())",
      "info" : "IfStatement[22585-22668]:IfStatement[22509-22592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22618-22668]:Block[22542-22592]"
    }, {
      "left" : "variant = tokenizer.nextToken();",
      "right" : "variant = tokenizer.nextToken();",
      "info" : "ExpressionStatement[22628-22660]:ExpressionStatement[22552-22584]"
    }, {
      "left" : "if (country == null && variant == null)",
      "right" : "if (country == null && variant == null)",
      "info" : "IfStatement[22675-22913]:IfStatement[22599-22837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22715-22761]:Block[22639-22685]"
    }, {
      "left" : "return new Locale(language);",
      "right" : "return new Locale(language);",
      "info" : "ReturnStatement[22725-22753]:ReturnStatement[22649-22677]"
    }, {
      "left" : "if (variant == null)",
      "right" : "if (variant == null)",
      "info" : "IfStatement[22767-22913]:IfStatement[22691-22837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22788-22843]:Block[22712-22767]"
    }, {
      "left" : "return new Locale(language, country);",
      "right" : "return new Locale(language, country);",
      "info" : "ReturnStatement[22798-22835]:ReturnStatement[22722-22759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22849-22913]:Block[22773-22837]"
    }, {
      "left" : "return new Locale(language, country, variant);",
      "right" : "return new Locale(language, country, variant);",
      "info" : "ReturnStatement[22859-22905]:ReturnStatement[22783-22829]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22924-22933]:MarkerAnnotation[22848-22857]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22938-22944]:Modifier[22862-22868]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22945-22949]:PrimitiveType[22869-22873]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[22950-22955]:SimpleName[22874-22879]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[22956-22970]:SingleVariableDeclaration[22880-22894]"
    }, {
      "left" : "Locale value",
      "right" : "Locale value",
      "info" : "SingleVariableDeclaration[22972-22984]:SingleVariableDeclaration[22896-22908]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22993-23004]:SimpleType[22917-22928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23005-23070]:Block[22929-22994]"
    }, {
      "left" : "out.value(value == null ? null : value.toString());",
      "right" : "out.value(value == null ? null : value.toString());",
      "info" : "ExpressionStatement[23013-23064]:ExpressionStatement[22937-22988]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23269-23278]:MarkerAnnotation[23193-23202]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23279-23285]:Modifier[23203-23209]"
    }, {
      "left" : "JsonElement",
      "right" : "JsonElement",
      "info" : "SimpleType[23286-23297]:SimpleType[23210-23221]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23298-23302]:SimpleName[23222-23226]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[23303-23316]:SingleVariableDeclaration[23227-23240]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23325-23336]:SimpleType[23249-23260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23337-24310]:Block[23261-24234]"
    }, {
      "left" : "switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }",
      "right" : "switch (in.peek()) {\n      case STRING:\n        return new JsonPrimitive(in.nextString());\n      case NUMBER:\n        String number = in.nextString();\n        return new JsonPrimitive(new LazilyParsedNumber(number));\n      case BOOLEAN:\n        return new JsonPrimitive(in.nextBoolean());\n      case NULL:\n        in.nextNull();\n        return JsonNull.INSTANCE;\n      case BEGIN_ARRAY:\n        JsonArray array = new JsonArray();\n        in.beginArray();\n        while (in.hasNext()) {\n          array.add(read(in));\n        }\n        in.endArray();\n        return array;\n      case BEGIN_OBJECT:\n        JsonObject object = new JsonObject();\n        in.beginObject();\n        while (in.hasNext()) {\n          object.add(in.nextName(), read(in));\n        }\n        in.endObject();\n        return object;\n      case END_DOCUMENT:\n      case NAME:\n      case END_OBJECT:\n      case END_ARRAY:\n      default:\n        throw new IllegalArgumentException();\n      }",
      "info" : "SwitchStatement[23345-24304]:SwitchStatement[23269-24228]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[23372-23384]:SwitchCase[23296-23308]"
    }, {
      "left" : "return new JsonPrimitive(in.nextString());",
      "right" : "return new JsonPrimitive(in.nextString());",
      "info" : "ReturnStatement[23393-23435]:ReturnStatement[23317-23359]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[23442-23454]:SwitchCase[23366-23378]"
    }, {
      "left" : "String number = in.nextString();",
      "right" : "String number = in.nextString();",
      "info" : "VariableDeclarationStatement[23463-23495]:VariableDeclarationStatement[23387-23419]"
    }, {
      "left" : "return new JsonPrimitive(new LazilyParsedNumber(number));",
      "right" : "return new JsonPrimitive(new LazilyParsedNumber(number));",
      "info" : "ReturnStatement[23504-23561]:ReturnStatement[23428-23485]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[23568-23581]:SwitchCase[23492-23505]"
    }, {
      "left" : "return new JsonPrimitive(in.nextBoolean());",
      "right" : "return new JsonPrimitive(in.nextBoolean());",
      "info" : "ReturnStatement[23590-23633]:ReturnStatement[23514-23557]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[23640-23650]:SwitchCase[23564-23574]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[23659-23673]:ExpressionStatement[23583-23597]"
    }, {
      "left" : "return JsonNull.INSTANCE;",
      "right" : "return JsonNull.INSTANCE;",
      "info" : "ReturnStatement[23682-23707]:ReturnStatement[23606-23631]"
    }, {
      "left" : "case BEGIN_ARRAY:",
      "right" : "case BEGIN_ARRAY:",
      "info" : "SwitchCase[23714-23731]:SwitchCase[23638-23655]"
    }, {
      "left" : "JsonArray array = new JsonArray();",
      "right" : "JsonArray array = new JsonArray();",
      "info" : "VariableDeclarationStatement[23740-23774]:VariableDeclarationStatement[23664-23698]"
    }, {
      "left" : "in.beginArray();",
      "right" : "in.beginArray();",
      "info" : "ExpressionStatement[23783-23799]:ExpressionStatement[23707-23723]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[23808-23871]:WhileStatement[23732-23795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23829-23871]:Block[23753-23795]"
    }, {
      "left" : "array.add(read(in));",
      "right" : "array.add(read(in));",
      "info" : "ExpressionStatement[23841-23861]:ExpressionStatement[23765-23785]"
    }, {
      "left" : "in.endArray();",
      "right" : "in.endArray();",
      "info" : "ExpressionStatement[23880-23894]:ExpressionStatement[23804-23818]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[23903-23916]:ReturnStatement[23827-23840]"
    }, {
      "left" : "case BEGIN_OBJECT:",
      "right" : "case BEGIN_OBJECT:",
      "info" : "SwitchCase[23923-23941]:SwitchCase[23847-23865]"
    }, {
      "left" : "JsonObject object = new JsonObject();",
      "right" : "JsonObject object = new JsonObject();",
      "info" : "VariableDeclarationStatement[23950-23987]:VariableDeclarationStatement[23874-23911]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[23996-24013]:ExpressionStatement[23920-23937]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[24022-24101]:WhileStatement[23946-24025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24043-24101]:Block[23967-24025]"
    }, {
      "left" : "object.add(in.nextName(), read(in));",
      "right" : "object.add(in.nextName(), read(in));",
      "info" : "ExpressionStatement[24055-24091]:ExpressionStatement[23979-24015]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[24110-24125]:ExpressionStatement[24034-24049]"
    }, {
      "left" : "return object;",
      "right" : "return object;",
      "info" : "ReturnStatement[24134-24148]:ReturnStatement[24058-24072]"
    }, {
      "left" : "case END_DOCUMENT:",
      "right" : "case END_DOCUMENT:",
      "info" : "SwitchCase[24155-24173]:SwitchCase[24079-24097]"
    }, {
      "left" : "case NAME:",
      "right" : "case NAME:",
      "info" : "SwitchCase[24180-24190]:SwitchCase[24104-24114]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[24197-24213]:SwitchCase[24121-24137]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[24220-24235]:SwitchCase[24144-24159]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24242-24250]:SwitchCase[24166-24174]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[24259-24296]:ThrowStatement[24183-24220]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24316-24325]:MarkerAnnotation[24240-24249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24326-24332]:Modifier[24250-24256]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24333-24337]:PrimitiveType[24257-24261]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[24338-24343]:SimpleName[24262-24267]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[24344-24358]:SingleVariableDeclaration[24268-24282]"
    }, {
      "left" : "JsonElement value",
      "right" : "JsonElement value",
      "info" : "SingleVariableDeclaration[24360-24377]:SingleVariableDeclaration[24284-24301]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24386-24397]:SimpleType[24310-24321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24398-25376]:Block[24322-25300]"
    }, {
      "left" : "if (value == null || value.isJsonNull())",
      "right" : "if (value == null || value.isJsonNull())",
      "info" : "IfStatement[24406-25370]:IfStatement[24330-25294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24447-24481]:Block[24371-24405]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[24457-24473]:ExpressionStatement[24381-24397]"
    }, {
      "left" : "if (value.isJsonPrimitive())",
      "right" : "if (value.isJsonPrimitive())",
      "info" : "IfStatement[24487-25370]:IfStatement[24411-25294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24516-24834]:Block[24440-24758]"
    }, {
      "left" : "JsonPrimitive primitive = value.getAsJsonPrimitive();",
      "right" : "JsonPrimitive primitive = value.getAsJsonPrimitive();",
      "info" : "VariableDeclarationStatement[24526-24579]:VariableDeclarationStatement[24450-24503]"
    }, {
      "left" : "if (primitive.isNumber())",
      "right" : "if (primitive.isNumber())",
      "info" : "IfStatement[24588-24825]:IfStatement[24512-24749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24614-24671]:Block[24538-24595]"
    }, {
      "left" : "out.value(primitive.getAsNumber());",
      "right" : "out.value(primitive.getAsNumber());",
      "info" : "ExpressionStatement[24626-24661]:ExpressionStatement[24550-24585]"
    }, {
      "left" : "if (primitive.isBoolean())",
      "right" : "if (primitive.isBoolean())",
      "info" : "IfStatement[24677-24825]:IfStatement[24601-24749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24704-24762]:Block[24628-24686]"
    }, {
      "left" : "out.value(primitive.getAsBoolean());",
      "right" : "out.value(primitive.getAsBoolean());",
      "info" : "ExpressionStatement[24716-24752]:ExpressionStatement[24640-24676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24768-24825]:Block[24692-24749]"
    }, {
      "left" : "out.value(primitive.getAsString());",
      "right" : "out.value(primitive.getAsString());",
      "info" : "ExpressionStatement[24780-24815]:ExpressionStatement[24704-24739]"
    }, {
      "left" : "if (value.isJsonArray())",
      "right" : "if (value.isJsonArray())",
      "info" : "IfStatement[24840-25370]:IfStatement[24764-25294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24865-25015]:Block[24789-24939]"
    }, {
      "left" : "out.beginArray();",
      "right" : "out.beginArray();",
      "info" : "ExpressionStatement[24875-24892]:ExpressionStatement[24799-24816]"
    }, {
      "left" : "for (JsonElement e : value.getAsJsonArray())",
      "right" : "for (JsonElement e : value.getAsJsonArray())",
      "info" : "EnhancedForStatement[24901-24982]:EnhancedForStatement[24825-24906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24946-24982]:Block[24870-24906]"
    }, {
      "left" : "write(out, e);",
      "right" : "write(out, e);",
      "info" : "ExpressionStatement[24958-24972]:ExpressionStatement[24882-24896]"
    }, {
      "left" : "out.endArray();",
      "right" : "out.endArray();",
      "info" : "ExpressionStatement[24991-25006]:ExpressionStatement[24915-24930]"
    }, {
      "left" : "if (value.isJsonObject())",
      "right" : "if (value.isJsonObject())",
      "info" : "IfStatement[25021-25370]:IfStatement[24945-25294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25047-25273]:Block[24971-25197]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[25057-25075]:ExpressionStatement[24981-24999]"
    }, {
      "left" : "for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet())",
      "right" : "for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet())",
      "info" : "EnhancedForStatement[25084-25239]:EnhancedForStatement[25008-25163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25160-25239]:Block[25084-25163]"
    }, {
      "left" : "out.name(e.getKey());",
      "right" : "out.name(e.getKey());",
      "info" : "ExpressionStatement[25172-25193]:ExpressionStatement[25096-25117]"
    }, {
      "left" : "write(out, e.getValue());",
      "right" : "write(out, e.getValue());",
      "info" : "ExpressionStatement[25204-25229]:ExpressionStatement[25128-25153]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[25248-25264]:ExpressionStatement[25172-25188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25279-25370]:Block[25203-25294]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());",
      "right" : "throw new IllegalArgumentException(\"Couldn't write \" + value.getClass());",
      "info" : "ThrowStatement[25289-25362]:ThrowStatement[25213-25286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25514-25521]:Modifier[25438-25445]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25522-25528]:Modifier[25446-25452]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[25529-25534]:Modifier[25453-25458]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[25535-25540]:TYPE_DECLARATION_KIND[25459-25464]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "SimpleName[25541-25556]:SimpleName[25465-25480]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25758-25764]:Modifier[25682-25688]"
    }, {
      "left" : "EnumTypeAdapter",
      "right" : "EnumTypeAdapter",
      "info" : "SimpleName[25765-25780]:SimpleName[25689-25704]"
    }, {
      "left" : "Class<T> classOfT",
      "right" : "Class<T> classOfT",
      "info" : "SingleVariableDeclaration[25781-25798]:SingleVariableDeclaration[25705-25722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25800-26464]:Block[25724-26388]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25808-26458]:TryStatement[25732-26382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25812-26338]:Block[25736-26262]"
    }, {
      "left" : "for (T constant : classOfT.getEnumConstants())",
      "right" : "for (T constant : classOfT.getEnumConstants())",
      "info" : "EnhancedForStatement[25822-26330]:EnhancedForStatement[25746-26254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25869-26330]:Block[25793-26254]"
    }, {
      "left" : "String name = constant.name();",
      "right" : "String name = constant.name();",
      "info" : "VariableDeclarationStatement[25881-25911]:VariableDeclarationStatement[25805-25835]"
    }, {
      "left" : "SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);",
      "right" : "SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);",
      "info" : "VariableDeclarationStatement[25922-26010]:VariableDeclarationStatement[25846-25934]"
    }, {
      "left" : "if (annotation != null)",
      "right" : "if (annotation != null)",
      "info" : "IfStatement[26021-26228]:IfStatement[25945-26152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26045-26228]:Block[25969-26152]"
    }, {
      "left" : "name = annotation.value();",
      "right" : "name = annotation.value();",
      "info" : "ExpressionStatement[26059-26085]:ExpressionStatement[25983-26009]"
    }, {
      "left" : "for (String alternate : annotation.alternate())",
      "right" : "for (String alternate : annotation.alternate())",
      "info" : "EnhancedForStatement[26098-26216]:EnhancedForStatement[26022-26140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26146-26216]:Block[26070-26140]"
    }, {
      "left" : "nameToConstant.put(alternate, constant);",
      "right" : "nameToConstant.put(alternate, constant);",
      "info" : "ExpressionStatement[26162-26202]:ExpressionStatement[26086-26126]"
    }, {
      "left" : "nameToConstant.put(name, constant);",
      "right" : "nameToConstant.put(name, constant);",
      "info" : "ExpressionStatement[26239-26274]:ExpressionStatement[26163-26198]"
    }, {
      "left" : "constantToName.put(constant, name);",
      "right" : "constantToName.put(constant, name);",
      "info" : "ExpressionStatement[26285-26320]:ExpressionStatement[26209-26244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26370-26458]:Block[26294-26382]"
    }, {
      "left" : "throw new AssertionError(\"Missing field in \" + classOfT.getName(), e);",
      "right" : "throw new AssertionError(\"Missing field in \" + classOfT.getName(), e);",
      "info" : "ThrowStatement[26380-26450]:ThrowStatement[26304-26374]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26469-26478]:MarkerAnnotation[26393-26402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26479-26485]:Modifier[26403-26409]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[26486-26487]:SimpleType[26410-26411]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[26488-26492]:SimpleName[26412-26416]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[26493-26506]:SingleVariableDeclaration[26417-26430]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26515-26526]:SimpleType[26439-26450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26527-26677]:Block[26451-26601]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[26535-26621]:IfStatement[26459-26545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26568-26621]:Block[26492-26545]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[26578-26592]:ExpressionStatement[26502-26516]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26601-26613]:ReturnStatement[26525-26537]"
    }, {
      "left" : "return nameToConstant.get(in.nextString());",
      "right" : "return nameToConstant.get(in.nextString());",
      "info" : "ReturnStatement[26628-26671]:ReturnStatement[26552-26595]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26683-26692]:MarkerAnnotation[26607-26616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26693-26699]:Modifier[26617-26623]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26700-26704]:PrimitiveType[26624-26628]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[26705-26710]:SimpleName[26629-26634]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[26711-26725]:SingleVariableDeclaration[26635-26649]"
    }, {
      "left" : "T value",
      "right" : "T value",
      "info" : "SingleVariableDeclaration[26727-26734]:SingleVariableDeclaration[26651-26658]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26743-26754]:SimpleType[26667-26678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26755-26829]:Block[26679-26753]"
    }, {
      "left" : "out.value(value == null ? null : constantToName.get(value));",
      "right" : "out.value(value == null ? null : constantToName.get(value));",
      "info" : "ExpressionStatement[26763-26823]:ExpressionStatement[26687-26747]"
    }, {
      "left" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "right" : "@SuppressWarnings({\"rawtypes\", \"unchecked\"})",
      "info" : "SingleMemberAnnotation[26922-26966]:SingleMemberAnnotation[26846-26890]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26971-26980]:MarkerAnnotation[26895-26904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26981-26987]:Modifier[26905-26911]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[26989-26990]:TypeParameter[26913-26914]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[26992-27006]:ParameterizedType[26916-26930]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[27007-27013]:SimpleName[26931-26937]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[27014-27023]:SingleVariableDeclaration[26938-26947]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[27025-27047]:SingleVariableDeclaration[26949-26971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27049-27391]:Block[26973-27315]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[27057-27107]:VariableDeclarationStatement[26981-27031]"
    }, {
      "left" : "if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class)",
      "right" : "if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class)",
      "info" : "IfStatement[27114-27212]:IfStatement[27038-27136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27182-27212]:Block[27106-27136]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27192-27204]:ReturnStatement[27116-27128]"
    }, {
      "left" : "if (!rawType.isEnum())",
      "right" : "if (!rawType.isEnum())",
      "info" : "IfStatement[27219-27325]:IfStatement[27143-27249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27242-27325]:Block[27166-27249]"
    }, {
      "left" : "rawType = rawType.getSuperclass();",
      "right" : "rawType = rawType.getSuperclass();",
      "info" : "ExpressionStatement[27252-27286]:ExpressionStatement[27176-27210]"
    }, {
      "left" : "return (TypeAdapter<T>) new EnumTypeAdapter(rawType);",
      "right" : "return (TypeAdapter<T>) new EnumTypeAdapter(rawType);",
      "info" : "ReturnStatement[27332-27385]:ReturnStatement[27256-27309]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27400-27406]:Modifier[27324-27330]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27407-27413]:Modifier[27331-27337]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[27415-27417]:TypeParameter[27339-27341]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[27419-27437]:SimpleType[27343-27361]"
    }, {
      "left" : "newFactory",
      "right" : "newFactory",
      "info" : "SimpleName[27438-27448]:SimpleName[27362-27372]"
    }, {
      "left" : "final TypeToken<TT> type",
      "right" : "final TypeToken<TT> type",
      "info" : "SingleVariableDeclaration[27456-27480]:SingleVariableDeclaration[27380-27404]"
    }, {
      "left" : "final TypeAdapter<TT> typeAdapter",
      "right" : "final TypeAdapter<TT> typeAdapter",
      "info" : "SingleVariableDeclaration[27482-27515]:SingleVariableDeclaration[27406-27439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27517-27829]:Block[27441-27753]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n    };",
      "info" : "ReturnStatement[27523-27825]:ReturnStatement[27447-27749]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[27563-27593]:SingleMemberAnnotation[27487-27517]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27654-27663]:MarkerAnnotation[27578-27587]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27664-27670]:Modifier[27588-27594]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[27672-27673]:TypeParameter[27596-27597]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[27675-27689]:ParameterizedType[27599-27613]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[27690-27696]:SimpleName[27614-27620]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[27697-27706]:SingleVariableDeclaration[27621-27630]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[27708-27730]:SingleVariableDeclaration[27632-27654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27732-27818]:Block[27656-27742]"
    }, {
      "left" : "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[27742-27810]:ReturnStatement[27666-27734]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27833-27839]:Modifier[27757-27763]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27840-27846]:Modifier[27764-27770]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[27848-27850]:TypeParameter[27772-27774]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[27852-27870]:SimpleType[27776-27794]"
    }, {
      "left" : "newFactory",
      "right" : "newFactory",
      "info" : "SimpleName[27871-27881]:SimpleName[27795-27805]"
    }, {
      "left" : "final Class<TT> type",
      "right" : "final Class<TT> type",
      "info" : "SingleVariableDeclaration[27889-27909]:SingleVariableDeclaration[27813-27833]"
    }, {
      "left" : "final TypeAdapter<TT> typeAdapter",
      "right" : "final TypeAdapter<TT> typeAdapter",
      "info" : "SingleVariableDeclaration[27911-27944]:SingleVariableDeclaration[27835-27868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27946-28400]:Block[27870-28324]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[27952-28396]:ReturnStatement[27876-28320]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[27992-28022]:SingleMemberAnnotation[27916-27946]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28083-28092]:MarkerAnnotation[28007-28016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28093-28099]:Modifier[28017-28023]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[28101-28102]:TypeParameter[28025-28026]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[28104-28118]:ParameterizedType[28028-28042]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[28119-28125]:SimpleName[28043-28049]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[28126-28135]:SingleVariableDeclaration[28050-28059]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[28137-28159]:SingleVariableDeclaration[28061-28083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28161-28255]:Block[28085-28179]"
    }, {
      "left" : "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[28171-28247]:ReturnStatement[28095-28171]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28262-28271]:MarkerAnnotation[28186-28195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28272-28278]:Modifier[28196-28202]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28279-28285]:SimpleType[28203-28209]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[28286-28294]:SimpleName[28210-28218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28297-28389]:Block[28221-28313]"
    }, {
      "left" : "return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + type.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[28307-28381]:ReturnStatement[28231-28305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28404-28410]:Modifier[28328-28334]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28411-28417]:Modifier[28335-28341]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[28419-28421]:TypeParameter[28343-28345]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[28423-28441]:SimpleType[28347-28365]"
    }, {
      "left" : "newFactory",
      "right" : "newFactory",
      "info" : "SimpleName[28442-28452]:SimpleName[28366-28376]"
    }, {
      "left" : "final Class<TT> unboxed",
      "right" : "final Class<TT> unboxed",
      "info" : "SingleVariableDeclaration[28460-28483]:SingleVariableDeclaration[28384-28407]"
    }, {
      "left" : "final Class<TT> boxed",
      "right" : "final Class<TT> boxed",
      "info" : "SingleVariableDeclaration[28485-28506]:SingleVariableDeclaration[28409-28430]"
    }, {
      "left" : "final TypeAdapter<? super TT> typeAdapter",
      "right" : "final TypeAdapter<? super TT> typeAdapter",
      "info" : "SingleVariableDeclaration[28508-28549]:SingleVariableDeclaration[28432-28473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28551-29113]:Block[28475-29037]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[28557-29109]:ReturnStatement[28481-29033]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[28597-28627]:SingleMemberAnnotation[28521-28551]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28688-28697]:MarkerAnnotation[28612-28621]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28698-28704]:Modifier[28622-28628]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[28706-28707]:TypeParameter[28630-28631]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[28709-28723]:ParameterizedType[28633-28647]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[28724-28730]:SimpleName[28648-28654]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[28731-28740]:SingleVariableDeclaration[28655-28664]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[28742-28764]:SingleVariableDeclaration[28666-28688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28766-28929]:Block[28690-28853]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[28776-28826]:VariableDeclarationStatement[28700-28750]"
    }, {
      "left" : "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[28835-28921]:ReturnStatement[28759-28845]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28936-28945]:MarkerAnnotation[28860-28869]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28946-28952]:Modifier[28870-28876]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28953-28959]:SimpleType[28877-28883]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[28960-28968]:SimpleName[28884-28892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28971-29102]:Block[28895-29026]"
    }, {
      "left" : "return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + boxed.getName()\n            + \"+\" + unboxed.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[28981-29094]:ReturnStatement[28905-29018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29117-29123]:Modifier[29041-29047]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29124-29130]:Modifier[29048-29054]"
    }, {
      "left" : "TT",
      "right" : "TT",
      "info" : "TypeParameter[29132-29134]:TypeParameter[29056-29058]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[29136-29154]:SimpleType[29060-29078]"
    }, {
      "left" : "newFactoryForMultipleTypes",
      "right" : "newFactoryForMultipleTypes",
      "info" : "SimpleName[29155-29181]:SimpleName[29079-29105]"
    }, {
      "left" : "final Class<TT> base",
      "right" : "final Class<TT> base",
      "info" : "SingleVariableDeclaration[29182-29202]:SingleVariableDeclaration[29106-29126]"
    }, {
      "left" : "final Class<? extends TT> sub",
      "right" : "final Class<? extends TT> sub",
      "info" : "SingleVariableDeclaration[29210-29239]:SingleVariableDeclaration[29134-29163]"
    }, {
      "left" : "final TypeAdapter<? super TT> typeAdapter",
      "right" : "final TypeAdapter<? super TT> typeAdapter",
      "info" : "SingleVariableDeclaration[29241-29282]:SingleVariableDeclaration[29165-29206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29284-29836]:Block[29208-29760]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n        Class<? super T> rawType = typeToken.getRawType();\n        return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;\n      }\n      @Override public String toString() {\n        return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[29290-29832]:ReturnStatement[29214-29756]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[29330-29360]:SingleMemberAnnotation[29254-29284]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29421-29430]:MarkerAnnotation[29345-29354]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29431-29437]:Modifier[29355-29361]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[29439-29440]:TypeParameter[29363-29364]"
    }, {
      "left" : "TypeAdapter<T>",
      "right" : "TypeAdapter<T>",
      "info" : "ParameterizedType[29442-29456]:ParameterizedType[29366-29380]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[29457-29463]:SimpleName[29381-29387]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[29464-29473]:SingleVariableDeclaration[29388-29397]"
    }, {
      "left" : "TypeToken<T> typeToken",
      "right" : "TypeToken<T> typeToken",
      "info" : "SingleVariableDeclaration[29475-29497]:SingleVariableDeclaration[29399-29421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29499-29657]:Block[29423-29581]"
    }, {
      "left" : "Class<? super T> rawType = typeToken.getRawType();",
      "right" : "Class<? super T> rawType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[29509-29559]:VariableDeclarationStatement[29433-29483]"
    }, {
      "left" : "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
      "right" : "return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;",
      "info" : "ReturnStatement[29568-29649]:ReturnStatement[29492-29573]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29664-29673]:MarkerAnnotation[29588-29597]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29674-29680]:Modifier[29598-29604]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29681-29687]:SimpleType[29605-29611]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[29688-29696]:SimpleName[29612-29620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29699-29825]:Block[29623-29749]"
    }, {
      "left" : "return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[type=\" + base.getName()\n            + \"+\" + sub.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[29709-29817]:ReturnStatement[29633-29741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30009-30015]:Modifier[29933-29939]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30016-30022]:Modifier[29940-29946]"
    }, {
      "left" : "T1",
      "right" : "T1",
      "info" : "TypeParameter[30024-30026]:TypeParameter[29948-29950]"
    }, {
      "left" : "TypeAdapterFactory",
      "right" : "TypeAdapterFactory",
      "info" : "SimpleType[30028-30046]:SimpleType[29952-29970]"
    }, {
      "left" : "newTypeHierarchyFactory",
      "right" : "newTypeHierarchyFactory",
      "info" : "SimpleName[30047-30070]:SimpleName[29971-29994]"
    }, {
      "left" : "final Class<T1> clazz",
      "right" : "final Class<T1> clazz",
      "info" : "SingleVariableDeclaration[30078-30099]:SingleVariableDeclaration[30002-30023]"
    }, {
      "left" : "final TypeAdapter<T1> typeAdapter",
      "right" : "final TypeAdapter<T1> typeAdapter",
      "info" : "SingleVariableDeclaration[30101-30134]:SingleVariableDeclaration[30025-30058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30136-31221]:Block[30060-31145]"
    }, {
      "left" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "right" : "return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };",
      "info" : "ReturnStatement[30142-31217]:ReturnStatement[30066-31141]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[30182-30212]:SingleMemberAnnotation[30106-30136]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30219-30228]:MarkerAnnotation[30143-30152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30229-30235]:Modifier[30153-30159]"
    }, {
      "left" : "T2",
      "right" : "T2",
      "info" : "TypeParameter[30237-30239]:TypeParameter[30161-30163]"
    }, {
      "left" : "TypeAdapter<T2>",
      "right" : "TypeAdapter<T2>",
      "info" : "ParameterizedType[30241-30256]:ParameterizedType[30165-30180]"
    }, {
      "left" : "create",
      "right" : "create",
      "info" : "SimpleName[30257-30263]:SimpleName[30181-30187]"
    }, {
      "left" : "Gson gson",
      "right" : "Gson gson",
      "info" : "SingleVariableDeclaration[30264-30273]:SingleVariableDeclaration[30188-30197]"
    }, {
      "left" : "TypeToken<T2> typeToken",
      "right" : "TypeToken<T2> typeToken",
      "info" : "SingleVariableDeclaration[30275-30298]:SingleVariableDeclaration[30199-30222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30300-31066]:Block[30224-30990]"
    }, {
      "left" : "final Class<? super T2> requestedType = typeToken.getRawType();",
      "right" : "final Class<? super T2> requestedType = typeToken.getRawType();",
      "info" : "VariableDeclarationStatement[30310-30373]:VariableDeclarationStatement[30234-30297]"
    }, {
      "left" : "if (!clazz.isAssignableFrom(requestedType))",
      "right" : "if (!clazz.isAssignableFrom(requestedType))",
      "info" : "IfStatement[30382-30460]:IfStatement[30306-30384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30426-30460]:Block[30350-30384]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30438-30450]:ReturnStatement[30362-30374]"
    }, {
      "left" : "return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };",
      "right" : "return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n          @Override public void write(JsonWriter out, T1 value) throws IOException {\n            typeAdapter.write(out, value);\n          }\n\n          @Override public T1 read(JsonReader in) throws IOException {\n            T1 result = typeAdapter.read(in);\n            if (result != null && !requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n            return result;\n          }\n        };",
      "info" : "ReturnStatement[30469-31058]:ReturnStatement[30393-30982]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30528-30537]:MarkerAnnotation[30452-30461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30538-30544]:Modifier[30462-30468]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30545-30549]:PrimitiveType[30469-30473]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[30550-30555]:SimpleName[30474-30479]"
    }, {
      "left" : "JsonWriter out",
      "right" : "JsonWriter out",
      "info" : "SingleVariableDeclaration[30556-30570]:SingleVariableDeclaration[30480-30494]"
    }, {
      "left" : "T1 value",
      "right" : "T1 value",
      "info" : "SingleVariableDeclaration[30572-30580]:SingleVariableDeclaration[30496-30504]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30589-30600]:SimpleType[30513-30524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30601-30657]:Block[30525-30581]"
    }, {
      "left" : "typeAdapter.write(out, value);",
      "right" : "typeAdapter.write(out, value);",
      "info" : "ExpressionStatement[30615-30645]:ExpressionStatement[30539-30569]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30669-30678]:MarkerAnnotation[30593-30602]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30679-30685]:Modifier[30603-30609]"
    }, {
      "left" : "T1",
      "right" : "T1",
      "info" : "SimpleType[30686-30688]:SimpleType[30610-30612]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[30689-30693]:SimpleName[30613-30617]"
    }, {
      "left" : "JsonReader in",
      "right" : "JsonReader in",
      "info" : "SingleVariableDeclaration[30694-30707]:SingleVariableDeclaration[30618-30631]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30716-30727]:SimpleType[30640-30651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30728-31047]:Block[30652-30971]"
    }, {
      "left" : "T1 result = typeAdapter.read(in);",
      "right" : "T1 result = typeAdapter.read(in);",
      "info" : "VariableDeclarationStatement[30742-30775]:VariableDeclarationStatement[30666-30699]"
    }, {
      "left" : "if (result != null && !requestedType.isInstance(result))",
      "right" : "if (result != null && !requestedType.isInstance(result))",
      "info" : "IfStatement[30788-31008]:IfStatement[30712-30932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30845-31008]:Block[30769-30932]"
    }, {
      "left" : "throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());",
      "right" : "throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());",
      "info" : "ThrowStatement[30861-30994]:ThrowStatement[30785-30918]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[31021-31035]:ReturnStatement[30945-30959]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31073-31082]:MarkerAnnotation[30997-31006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31083-31089]:Modifier[31007-31013]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31090-31096]:SimpleType[31014-31020]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[31097-31105]:SimpleName[31021-31029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31108-31210]:Block[31032-31134]"
    }, {
      "left" : "return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "right" : "return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";",
      "info" : "ReturnStatement[31118-31202]:ReturnStatement[31042-31126]"
    } ]
  },
  "interFileMappings" : { }
}