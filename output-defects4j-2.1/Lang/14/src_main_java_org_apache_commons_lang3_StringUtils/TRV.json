{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String EMPTY = \"\";",
      "right" : "public static final String EMPTY = \"\";",
      "info" : "FieldDeclaration[5109-5217]:FieldDeclaration[5109-5217]"
    }, {
      "left" : "public static final int INDEX_NOT_FOUND = -1;",
      "right" : "public static final int INDEX_NOT_FOUND = -1;",
      "info" : "FieldDeclaration[5223-5343]:FieldDeclaration[5223-5343]"
    }, {
      "left" : "private static final int PAD_LIMIT = 8192;",
      "right" : "private static final int PAD_LIMIT = 8192;",
      "info" : "FieldDeclaration[5349-5483]:FieldDeclaration[5349-5483]"
    }, {
      "left" : "private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");",
      "right" : "private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");",
      "info" : "FieldDeclaration[5489-5649]:FieldDeclaration[5489-5649]"
    }, {
      "left" : "public StringUtils()",
      "right" : "public StringUtils()",
      "info" : "MethodDeclaration[5655-6014]:MethodDeclaration[5655-6014]"
    }, {
      "left" : "public static boolean isEmpty(CharSequence cs)",
      "right" : "public static boolean isEmpty(CharSequence cs)",
      "info" : "MethodDeclaration[6118-6935]:MethodDeclaration[6118-6935]"
    }, {
      "left" : "public static boolean isNotEmpty(CharSequence cs)",
      "right" : "public static boolean isNotEmpty(CharSequence cs)",
      "info" : "MethodDeclaration[6941-7628]:MethodDeclaration[6941-7628]"
    }, {
      "left" : "public static boolean isBlank(CharSequence cs)",
      "right" : "public static boolean isBlank(CharSequence cs)",
      "info" : "MethodDeclaration[7634-8575]:MethodDeclaration[7634-8575]"
    }, {
      "left" : "public static boolean isNotBlank(CharSequence cs)",
      "right" : "public static boolean isNotBlank(CharSequence cs)",
      "info" : "MethodDeclaration[8581-9335]:MethodDeclaration[8581-9335]"
    }, {
      "left" : "public static String trim(String str)",
      "right" : "public static String trim(String str)",
      "info" : "MethodDeclaration[9431-10379]:MethodDeclaration[9431-10379]"
    }, {
      "left" : "public static String trimToNull(String str)",
      "right" : "public static String trimToNull(String str)",
      "info" : "MethodDeclaration[10385-11385]:MethodDeclaration[10385-11385]"
    }, {
      "left" : "public static String trimToEmpty(String str)",
      "right" : "public static String trimToEmpty(String str)",
      "info" : "MethodDeclaration[11391-12347]:MethodDeclaration[11391-12347]"
    }, {
      "left" : "public static String strip(String str)",
      "right" : "public static String strip(String str)",
      "info" : "MethodDeclaration[12448-13356]:MethodDeclaration[12448-13356]"
    }, {
      "left" : "public static String stripToNull(String str)",
      "right" : "public static String stripToNull(String str)",
      "info" : "MethodDeclaration[13362-14482]:MethodDeclaration[13362-14482]"
    }, {
      "left" : "public static String stripToEmpty(String str)",
      "right" : "public static String stripToEmpty(String str)",
      "info" : "MethodDeclaration[14488-15484]:MethodDeclaration[14488-15484]"
    }, {
      "left" : "public static String strip(String str, String stripChars)",
      "right" : "public static String strip(String str, String stripChars)",
      "info" : "MethodDeclaration[15490-16855]:MethodDeclaration[15490-16855]"
    }, {
      "left" : "public static String stripStart(String str, String stripChars)",
      "right" : "public static String stripStart(String str, String stripChars)",
      "info" : "MethodDeclaration[16861-18571]:MethodDeclaration[16861-18571]"
    }, {
      "left" : "public static String stripEnd(String str, String stripChars)",
      "right" : "public static String stripEnd(String str, String stripChars)",
      "info" : "MethodDeclaration[18577-20286]:MethodDeclaration[18577-20286]"
    }, {
      "left" : "public static String[] stripAll(String... strs)",
      "right" : "public static String[] stripAll(String... strs)",
      "info" : "MethodDeclaration[20386-21284]:MethodDeclaration[20386-21284]"
    }, {
      "left" : "public static String[] stripAll(String[] strs, String stripChars)",
      "right" : "public static String[] stripAll(String[] strs, String stripChars)",
      "info" : "MethodDeclaration[21290-22843]:MethodDeclaration[21290-22843]"
    }, {
      "left" : "// See also Lucene's ASCIIFoldingFilter (Lucene 2.9) that replaces accented characters by their unaccented equivalent (and uncommitted bug fix: https://issues.apache.org/jira/browse/LUCENE-1343?focusedCommentId=12858907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12858907).\n    public static String stripAccents(String input)",
      "right" : "// See also Lucene's ASCIIFoldingFilter (Lucene 2.9) that replaces accented characters by their unaccented equivalent (and uncommitted bug fix: https://issues.apache.org/jira/browse/LUCENE-1343?focusedCommentId=12858907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12858907).\n    public static String stripAccents(String input)",
      "info" : "MethodDeclaration[22849-25315]:MethodDeclaration[22849-25315]"
    }, {
      "left" : "private static String removeAccentsJava6(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException",
      "right" : "private static String removeAccentsJava6(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException",
      "info" : "MethodDeclaration[25321-26683]:MethodDeclaration[25321-26683]"
    }, {
      "left" : "private static String removeAccentsSUN(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException",
      "right" : "private static String removeAccentsSUN(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException",
      "info" : "MethodDeclaration[26689-27859]:MethodDeclaration[26689-27859]"
    }, {
      "left" : "InitStripAccents",
      "right" : "InitStripAccents",
      "info" : "TypeDeclaration[27919-30633]:TypeDeclaration[27919-30633]"
    }, {
      "left" : "private static final Throwable sunException;",
      "right" : "private static final Throwable sunException;",
      "info" : "FieldDeclaration[28011-28055]:FieldDeclaration[28011-28055]"
    }, {
      "left" : "private static final Method  sunDecomposeMethod;",
      "right" : "private static final Method  sunDecomposeMethod;",
      "info" : "FieldDeclaration[28064-28112]:FieldDeclaration[28064-28112]"
    }, {
      "left" : "private static final Pattern sunPattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");",
      "right" : "private static final Pattern sunPattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");",
      "info" : "FieldDeclaration[28121-28216]:FieldDeclaration[28121-28216]"
    }, {
      "left" : "private static final Throwable java6Exception;",
      "right" : "private static final Throwable java6Exception;",
      "info" : "FieldDeclaration[28257-28303]:FieldDeclaration[28257-28303]"
    }, {
      "left" : "private static final Method  java6NormalizeMethod;",
      "right" : "private static final Method  java6NormalizeMethod;",
      "info" : "FieldDeclaration[28312-28362]:FieldDeclaration[28312-28362]"
    }, {
      "left" : "private static final Object  java6NormalizerFormNFD;",
      "right" : "private static final Object  java6NormalizerFormNFD;",
      "info" : "FieldDeclaration[28371-28423]:FieldDeclaration[28371-28423]"
    }, {
      "left" : "private static final Pattern java6Pattern = sunPattern;",
      "right" : "private static final Pattern java6Pattern = sunPattern;",
      "info" : "FieldDeclaration[28432-28487]:FieldDeclaration[28432-28487]"
    }, {
      "left" : "public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2)",
      "right" : "public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2)",
      "info" : "MethodDeclaration[31941-33222]:MethodDeclaration[32122-33403]"
    }, {
      "left" : "public static int indexOf(CharSequence seq, int searchChar)",
      "right" : "public static int indexOf(CharSequence seq, int searchChar)",
      "info" : "MethodDeclaration[33321-34356]:MethodDeclaration[33502-34537]"
    }, {
      "left" : "public static int indexOf(CharSequence seq, int searchChar, int startPos)",
      "right" : "public static int indexOf(CharSequence seq, int searchChar, int startPos)",
      "info" : "MethodDeclaration[34362-35775]:MethodDeclaration[34543-35956]"
    }, {
      "left" : "public static int indexOf(CharSequence seq, CharSequence searchSeq)",
      "right" : "public static int indexOf(CharSequence seq, CharSequence searchSeq)",
      "info" : "MethodDeclaration[35781-37066]:MethodDeclaration[35962-37247]"
    }, {
      "left" : "public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos)",
      "right" : "public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos)",
      "info" : "MethodDeclaration[37072-38905]:MethodDeclaration[37253-39086]"
    }, {
      "left" : "public static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal)",
      "right" : "public static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal)",
      "info" : "MethodDeclaration[38911-40649]:MethodDeclaration[39092-40830]"
    }, {
      "left" : "// Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int)\n    private static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal, boolean lastIndex)",
      "right" : "// Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int)\n    private static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal, boolean lastIndex)",
      "info" : "MethodDeclaration[40655-42207]:MethodDeclaration[40836-42388]"
    }, {
      "left" : "public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr)",
      "right" : "public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr)",
      "info" : "MethodDeclaration[42213-43505]:MethodDeclaration[42394-43686]"
    }, {
      "left" : "public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos)",
      "right" : "public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos)",
      "info" : "MethodDeclaration[43511-45819]:MethodDeclaration[43692-46000]"
    }, {
      "left" : "public static int lastIndexOf(CharSequence seq, int searchChar)",
      "right" : "public static int lastIndexOf(CharSequence seq, int searchChar)",
      "info" : "MethodDeclaration[45922-46979]:MethodDeclaration[46103-47160]"
    }, {
      "left" : "public static int lastIndexOf(CharSequence seq, int searchChar, int startPos)",
      "right" : "public static int lastIndexOf(CharSequence seq, int searchChar, int startPos)",
      "info" : "MethodDeclaration[46985-48516]:MethodDeclaration[47166-48697]"
    }, {
      "left" : "public static int lastIndexOf(CharSequence seq, CharSequence searchSeq)",
      "right" : "public static int lastIndexOf(CharSequence seq, CharSequence searchSeq)",
      "info" : "MethodDeclaration[48522-49782]:MethodDeclaration[48703-49963]"
    }, {
      "left" : "public static int lastOrdinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal)",
      "right" : "public static int lastOrdinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal)",
      "info" : "MethodDeclaration[49788-51577]:MethodDeclaration[49969-51758]"
    }, {
      "left" : "public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos)",
      "right" : "public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos)",
      "info" : "MethodDeclaration[51583-53310]:MethodDeclaration[51764-53491]"
    }, {
      "left" : "public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr)",
      "right" : "public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr)",
      "info" : "MethodDeclaration[53316-54704]:MethodDeclaration[53497-54885]"
    }, {
      "left" : "public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos)",
      "right" : "public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos)",
      "info" : "MethodDeclaration[54710-56914]:MethodDeclaration[54891-57095]"
    }, {
      "left" : "public static boolean contains(CharSequence seq, int searchChar)",
      "right" : "public static boolean contains(CharSequence seq, int searchChar)",
      "info" : "MethodDeclaration[57014-58048]:MethodDeclaration[57195-58229]"
    }, {
      "left" : "public static boolean contains(CharSequence seq, CharSequence searchSeq)",
      "right" : "public static boolean contains(CharSequence seq, CharSequence searchSeq)",
      "info" : "MethodDeclaration[58054-59237]:MethodDeclaration[58235-59418]"
    }, {
      "left" : "public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr)",
      "right" : "public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr)",
      "info" : "MethodDeclaration[59243-60788]:MethodDeclaration[59424-60969]"
    }, {
      "left" : "// From org.springframework.util.StringUtils, under Apache License 2.0\n    public static boolean containsWhitespace(CharSequence seq)",
      "right" : "// From org.springframework.util.StringUtils, under Apache License 2.0\n    public static boolean containsWhitespace(CharSequence seq)",
      "info" : "MethodDeclaration[60794-61547]:MethodDeclaration[60975-61728]"
    }, {
      "left" : "public static int indexOfAny(CharSequence cs, char... searchChars)",
      "right" : "public static int indexOfAny(CharSequence cs, char... searchChars)",
      "info" : "MethodDeclaration[61655-63643]:MethodDeclaration[61836-63824]"
    }, {
      "left" : "public static int indexOfAny(CharSequence cs, String searchChars)",
      "right" : "public static int indexOfAny(CharSequence cs, String searchChars)",
      "info" : "MethodDeclaration[63649-64878]:MethodDeclaration[63830-65059]"
    }, {
      "left" : "public static boolean containsAny(CharSequence cs, char... searchChars)",
      "right" : "public static boolean containsAny(CharSequence cs, char... searchChars)",
      "info" : "MethodDeclaration[64981-67232]:MethodDeclaration[65162-67413]"
    }, {
      "left" : "public static boolean containsAny(CharSequence cs, CharSequence searchChars)",
      "right" : "public static boolean containsAny(CharSequence cs, CharSequence searchChars)",
      "info" : "MethodDeclaration[67238-68598]:MethodDeclaration[67419-68779]"
    }, {
      "left" : "public static int indexOfAnyBut(CharSequence cs, char... searchChars)",
      "right" : "public static int indexOfAnyBut(CharSequence cs, char... searchChars)",
      "info" : "MethodDeclaration[68709-70828]:MethodDeclaration[68890-71009]"
    }, {
      "left" : "public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars)",
      "right" : "public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars)",
      "info" : "MethodDeclaration[70834-72670]:MethodDeclaration[71015-72851]"
    }, {
      "left" : "public static boolean containsOnly(CharSequence cs, char... valid)",
      "right" : "public static boolean containsOnly(CharSequence cs, char... valid)",
      "info" : "MethodDeclaration[72774-74216]:MethodDeclaration[72955-74397]"
    }, {
      "left" : "public static boolean containsOnly(CharSequence cs, String validChars)",
      "right" : "public static boolean containsOnly(CharSequence cs, String validChars)",
      "info" : "MethodDeclaration[74222-75485]:MethodDeclaration[74403-75666]"
    }, {
      "left" : "public static boolean containsNone(CharSequence cs, char... searchChars)",
      "right" : "public static boolean containsNone(CharSequence cs, char... searchChars)",
      "info" : "MethodDeclaration[75589-77752]:MethodDeclaration[75770-77933]"
    }, {
      "left" : "public static boolean containsNone(CharSequence cs, String invalidChars)",
      "right" : "public static boolean containsNone(CharSequence cs, String invalidChars)",
      "info" : "MethodDeclaration[77758-79019]:MethodDeclaration[77939-79200]"
    }, {
      "left" : "public static int indexOfAny(CharSequence str, CharSequence... searchStrs)",
      "right" : "public static int indexOfAny(CharSequence str, CharSequence... searchStrs)",
      "info" : "MethodDeclaration[79129-81360]:MethodDeclaration[79310-81541]"
    }, {
      "left" : "public static int lastIndexOfAny(CharSequence str, CharSequence... searchStrs)",
      "right" : "public static int lastIndexOfAny(CharSequence str, CharSequence... searchStrs)",
      "info" : "MethodDeclaration[81366-83404]:MethodDeclaration[81547-83585]"
    }, {
      "left" : "public static String substring(String str, int start)",
      "right" : "public static String substring(String str, int start)",
      "info" : "MethodDeclaration[83505-84945]:MethodDeclaration[83686-85126]"
    }, {
      "left" : "public static String substring(String str, int start, int end)",
      "right" : "public static String substring(String str, int start, int end)",
      "info" : "MethodDeclaration[84951-87337]:MethodDeclaration[85132-87518]"
    }, {
      "left" : "public static String left(String str, int len)",
      "right" : "public static String left(String str, int len)",
      "info" : "MethodDeclaration[87443-88518]:MethodDeclaration[87624-88699]"
    }, {
      "left" : "public static String right(String str, int len)",
      "right" : "public static String right(String str, int len)",
      "info" : "MethodDeclaration[88524-89624]:MethodDeclaration[88705-89805]"
    }, {
      "left" : "public static String mid(String str, int pos, int len)",
      "right" : "public static String mid(String str, int pos, int len)",
      "info" : "MethodDeclaration[89630-91082]:MethodDeclaration[89811-91263]"
    }, {
      "left" : "public static String substringBefore(String str, String separator)",
      "right" : "public static String substringBefore(String str, String separator)",
      "info" : "MethodDeclaration[91204-92741]:MethodDeclaration[91385-92922]"
    }, {
      "left" : "public static String substringAfter(String str, String separator)",
      "right" : "public static String substringAfter(String str, String separator)",
      "info" : "MethodDeclaration[92747-94312]:MethodDeclaration[92928-94493]"
    }, {
      "left" : "public static String substringBeforeLast(String str, String separator)",
      "right" : "public static String substringBeforeLast(String str, String separator)",
      "info" : "MethodDeclaration[94318-95828]:MethodDeclaration[94499-96009]"
    }, {
      "left" : "public static String substringAfterLast(String str, String separator)",
      "right" : "public static String substringAfterLast(String str, String separator)",
      "info" : "MethodDeclaration[95834-97544]:MethodDeclaration[96015-97725]"
    }, {
      "left" : "public static String substringBetween(String str, String tag)",
      "right" : "public static String substringBetween(String str, String tag)",
      "info" : "MethodDeclaration[97653-98633]:MethodDeclaration[97834-98814]"
    }, {
      "left" : "public static String substringBetween(String str, String open, String close)",
      "right" : "public static String substringBetween(String str, String open, String close)",
      "info" : "MethodDeclaration[98639-100393]:MethodDeclaration[98820-100574]"
    }, {
      "left" : "public static String[] substringsBetween(String str, String open, String close)",
      "right" : "public static String[] substringsBetween(String str, String open, String close)",
      "info" : "MethodDeclaration[100399-102469]:MethodDeclaration[100580-102650]"
    }, {
      "left" : "public static String[] split(String str)",
      "right" : "public static String[] split(String str)",
      "info" : "MethodDeclaration[102674-103628]:MethodDeclaration[102855-103809]"
    }, {
      "left" : "public static String[] split(String str, char separatorChar)",
      "right" : "public static String[] split(String str, char separatorChar)",
      "info" : "MethodDeclaration[103634-104763]:MethodDeclaration[103815-104944]"
    }, {
      "left" : "public static String[] split(String str, String separatorChars)",
      "right" : "public static String[] split(String str, String separatorChars)",
      "info" : "MethodDeclaration[104769-106000]:MethodDeclaration[104950-106181]"
    }, {
      "left" : "public static String[] split(String str, String separatorChars, int max)",
      "right" : "public static String[] split(String str, String separatorChars, int max)",
      "info" : "MethodDeclaration[106006-107547]:MethodDeclaration[106187-107728]"
    }, {
      "left" : "public static String[] splitByWholeSeparator(String str, String separator)",
      "right" : "public static String[] splitByWholeSeparator(String str, String separator)",
      "info" : "MethodDeclaration[107553-108855]:MethodDeclaration[107734-109036]"
    }, {
      "left" : "public static String[] splitByWholeSeparator( String str, String separator, int max )",
      "right" : "public static String[] splitByWholeSeparator( String str, String separator, int max )",
      "info" : "MethodDeclaration[108861-110461]:MethodDeclaration[109042-110642]"
    }, {
      "left" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)",
      "right" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)",
      "info" : "MethodDeclaration[110467-111984]:MethodDeclaration[110648-112165]"
    }, {
      "left" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)",
      "right" : "public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)",
      "info" : "MethodDeclaration[111990-113822]:MethodDeclaration[112171-114003]"
    }, {
      "left" : "private static String[] splitByWholeSeparatorWorker(\n            String str, String separator, int max, boolean preserveAllTokens)",
      "right" : "private static String[] splitByWholeSeparatorWorker(\n            String str, String separator, int max, boolean preserveAllTokens)",
      "info" : "MethodDeclaration[113828-116957]:MethodDeclaration[114009-117138]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str)",
      "right" : "public static String[] splitPreserveAllTokens(String str)",
      "info" : "MethodDeclaration[117042-118296]:MethodDeclaration[117223-118477]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str, char separatorChar)",
      "right" : "public static String[] splitPreserveAllTokens(String str, char separatorChar)",
      "info" : "MethodDeclaration[118302-120195]:MethodDeclaration[118483-120376]"
    }, {
      "left" : "private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)",
      "right" : "private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)",
      "info" : "MethodDeclaration[120201-121817]:MethodDeclaration[120382-121998]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str, String separatorChars)",
      "right" : "public static String[] splitPreserveAllTokens(String str, String separatorChars)",
      "info" : "MethodDeclaration[121823-123818]:MethodDeclaration[122004-123999]"
    }, {
      "left" : "public static String[] splitPreserveAllTokens(String str, String separatorChars, int max)",
      "right" : "public static String[] splitPreserveAllTokens(String str, String separatorChars, int max)",
      "info" : "MethodDeclaration[123824-125929]:MethodDeclaration[124005-126110]"
    }, {
      "left" : "private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)",
      "right" : "private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)",
      "info" : "MethodDeclaration[125935-129626]:MethodDeclaration[126116-129807]"
    }, {
      "left" : "public static String[] splitByCharacterType(String str)",
      "right" : "public static String[] splitByCharacterType(String str)",
      "info" : "MethodDeclaration[129632-130818]:MethodDeclaration[129813-130999]"
    }, {
      "left" : "public static String[] splitByCharacterTypeCamelCase(String str)",
      "right" : "public static String[] splitByCharacterTypeCamelCase(String str)",
      "info" : "MethodDeclaration[130824-132410]:MethodDeclaration[131005-132591]"
    }, {
      "left" : "private static String[] splitByCharacterType(String str, boolean camelCase)",
      "right" : "private static String[] splitByCharacterType(String str, boolean camelCase)",
      "info" : "MethodDeclaration[132416-134493]:MethodDeclaration[132597-134674]"
    }, {
      "left" : "public static <T> String join(T... elements)",
      "right" : "public static <T> String join(T... elements)",
      "info" : "MethodDeclaration[134592-135523]:MethodDeclaration[134773-135704]"
    }, {
      "left" : "public static String join(Object[] array, char separator)",
      "right" : "public static String join(Object[] array, char separator)",
      "info" : "MethodDeclaration[135529-136598]:MethodDeclaration[135710-136779]"
    }, {
      "left" : "public static String join(Object[] array, char separator, int startIndex, int endIndex)",
      "right" : "public static String join(Object[] array, char separator, int startIndex, int endIndex)",
      "info" : "MethodDeclaration[136604-138378]:MethodDeclaration[136785-138559]"
    }, {
      "left" : "public static String join(Object[] array, String separator)",
      "right" : "public static String join(Object[] array, String separator)",
      "info" : "MethodDeclaration[138384-139589]:MethodDeclaration[138565-139770]"
    }, {
      "left" : "public static String join(Object[] array, String separator, int startIndex, int endIndex)",
      "right" : "public static String join(Object[] array, String separator, int startIndex, int endIndex)",
      "info" : "MethodDeclaration[139595-141741]:MethodDeclaration[139776-141922]"
    }, {
      "left" : "public static String join(Iterator<?> iterator, char separator)",
      "right" : "public static String join(Iterator<?> iterator, char separator)",
      "info" : "MethodDeclaration[141747-143209]:MethodDeclaration[141928-143390]"
    }, {
      "left" : "public static String join(Iterator<?> iterator, String separator)",
      "right" : "public static String join(Iterator<?> iterator, String separator)",
      "info" : "MethodDeclaration[143215-144714]:MethodDeclaration[143396-144895]"
    }, {
      "left" : "public static String join(Iterable<?> iterable, char separator)",
      "right" : "public static String join(Iterable<?> iterable, char separator)",
      "info" : "MethodDeclaration[144720-145538]:MethodDeclaration[144901-145719]"
    }, {
      "left" : "public static String join(Iterable<?> iterable, String separator)",
      "right" : "public static String join(Iterable<?> iterable, String separator)",
      "info" : "MethodDeclaration[145544-146363]:MethodDeclaration[145725-146544]"
    }, {
      "left" : "public static String deleteWhitespace(String str)",
      "right" : "public static String deleteWhitespace(String str)",
      "info" : "MethodDeclaration[146461-147485]:MethodDeclaration[146642-147666]"
    }, {
      "left" : "public static String removeStart(String str, String remove)",
      "right" : "public static String removeStart(String str, String remove)",
      "info" : "MethodDeclaration[147583-148927]:MethodDeclaration[147764-149108]"
    }, {
      "left" : "public static String removeStartIgnoreCase(String str, String remove)",
      "right" : "public static String removeStartIgnoreCase(String str, String remove)",
      "info" : "MethodDeclaration[148933-150487]:MethodDeclaration[149114-150668]"
    }, {
      "left" : "public static String removeEnd(String str, String remove)",
      "right" : "public static String removeEnd(String str, String remove)",
      "info" : "MethodDeclaration[150493-151836]:MethodDeclaration[150674-152017]"
    }, {
      "left" : "public static String removeEndIgnoreCase(String str, String remove)",
      "right" : "public static String removeEndIgnoreCase(String str, String remove)",
      "info" : "MethodDeclaration[151842-153472]:MethodDeclaration[152023-153653]"
    }, {
      "left" : "public static String remove(String str, String remove)",
      "right" : "public static String remove(String str, String remove)",
      "info" : "MethodDeclaration[153478-154628]:MethodDeclaration[153659-154809]"
    }, {
      "left" : "public static String remove(String str, char remove)",
      "right" : "public static String remove(String str, char remove)",
      "info" : "MethodDeclaration[154634-155783]:MethodDeclaration[154815-155964]"
    }, {
      "left" : "public static String replaceOnce(String text, String searchString, String replacement)",
      "right" : "public static String replaceOnce(String text, String searchString, String replacement)",
      "info" : "MethodDeclaration[155884-157095]:MethodDeclaration[156065-157276]"
    }, {
      "left" : "public static String replace(String text, String searchString, String replacement)",
      "right" : "public static String replace(String text, String searchString, String replacement)",
      "info" : "MethodDeclaration[157101-158271]:MethodDeclaration[157282-158452]"
    }, {
      "left" : "public static String replace(String text, String searchString, String replacement, int max)",
      "right" : "public static String replace(String text, String searchString, String replacement, int max)",
      "info" : "MethodDeclaration[158277-160639]:MethodDeclaration[158458-160820]"
    }, {
      "left" : "public static String replaceEach(String text, String[] searchList, String[] replacementList)",
      "right" : "public static String replaceEach(String text, String[] searchList, String[] replacementList)",
      "info" : "MethodDeclaration[160645-162577]:MethodDeclaration[160826-162758]"
    }, {
      "left" : "public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)",
      "right" : "public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)",
      "info" : "MethodDeclaration[162583-165160]:MethodDeclaration[162764-165341]"
    }, {
      "left" : "private static String replaceEach(\n            String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive)",
      "right" : "private static String replaceEach(\n            String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive)",
      "info" : "MethodDeclaration[165166-172338]:MethodDeclaration[165347-172519]"
    }, {
      "left" : "public static String replaceChars(String str, char searchChar, char replaceChar)",
      "right" : "public static String replaceChars(String str, char searchChar, char replaceChar)",
      "info" : "MethodDeclaration[172454-173514]:MethodDeclaration[172635-173695]"
    }, {
      "left" : "public static String replaceChars(String str, String searchChars, String replaceChars)",
      "right" : "public static String replaceChars(String str, String searchChars, String replaceChars)",
      "info" : "MethodDeclaration[173520-176142]:MethodDeclaration[173701-176323]"
    }, {
      "left" : "public static String overlay(String str, String overlay, int start, int end)",
      "right" : "public static String overlay(String str, String overlay, int start, int end)",
      "info" : "MethodDeclaration[176241-178453]:MethodDeclaration[176422-178634]"
    }, {
      "left" : "public static String chomp(String str)",
      "right" : "public static String chomp(String str)",
      "info" : "MethodDeclaration[178553-180236]:MethodDeclaration[178734-180417]"
    }, {
      "left" : "public static String chomp(String str, String separator)",
      "right" : "public static String chomp(String str, String separator)",
      "info" : "MethodDeclaration[180242-181597]:MethodDeclaration[180423-181778]"
    }, {
      "left" : "public static String chop(String str)",
      "right" : "public static String chop(String str)",
      "info" : "MethodDeclaration[181697-183041]:MethodDeclaration[181878-183222]"
    }, {
      "left" : "public static String repeat(String str, int repeat)",
      "right" : "public static String repeat(String str, int repeat)",
      "info" : "MethodDeclaration[183237-185106]:MethodDeclaration[183418-185287]"
    }, {
      "left" : "public static String repeat(String str, String separator, int repeat)",
      "right" : "public static String repeat(String str, String separator, int repeat)",
      "info" : "MethodDeclaration[185112-186336]:MethodDeclaration[185293-186517]"
    }, {
      "left" : "public static String repeat(char ch, int repeat)",
      "right" : "public static String repeat(char ch, int repeat)",
      "info" : "MethodDeclaration[186342-187408]:MethodDeclaration[186523-187589]"
    }, {
      "left" : "public static String rightPad(String str, int size)",
      "right" : "public static String rightPad(String str, int size)",
      "info" : "MethodDeclaration[187414-188194]:MethodDeclaration[187595-188375]"
    }, {
      "left" : "public static String rightPad(String str, int size, char padChar)",
      "right" : "public static String rightPad(String str, int size, char padChar)",
      "info" : "MethodDeclaration[188200-189418]:MethodDeclaration[188381-189599]"
    }, {
      "left" : "public static String rightPad(String str, int size, String padStr)",
      "right" : "public static String rightPad(String str, int size, String padStr)",
      "info" : "MethodDeclaration[189424-191374]:MethodDeclaration[189605-191555]"
    }, {
      "left" : "public static String leftPad(String str, int size)",
      "right" : "public static String leftPad(String str, int size)",
      "info" : "MethodDeclaration[191380-192150]:MethodDeclaration[191561-192331]"
    }, {
      "left" : "public static String leftPad(String str, int size, char padChar)",
      "right" : "public static String leftPad(String str, int size, char padChar)",
      "info" : "MethodDeclaration[192156-193345]:MethodDeclaration[192337-193526]"
    }, {
      "left" : "public static String leftPad(String str, int size, String padStr)",
      "right" : "public static String leftPad(String str, int size, String padStr)",
      "info" : "MethodDeclaration[193351-195269]:MethodDeclaration[193532-195450]"
    }, {
      "left" : "public static int length(CharSequence cs)",
      "right" : "public static int length(CharSequence cs)",
      "info" : "MethodDeclaration[195275-195747]:MethodDeclaration[195456-195928]"
    }, {
      "left" : "public static String center(String str, int size)",
      "right" : "public static String center(String str, int size)",
      "info" : "MethodDeclaration[195848-196825]:MethodDeclaration[196029-197006]"
    }, {
      "left" : "public static String center(String str, int size, char padChar)",
      "right" : "public static String center(String str, int size, char padChar)",
      "info" : "MethodDeclaration[196831-198232]:MethodDeclaration[197012-198413]"
    }, {
      "left" : "public static String center(String str, int size, String padStr)",
      "right" : "public static String center(String str, int size, String padStr)",
      "info" : "MethodDeclaration[198238-199890]:MethodDeclaration[198419-200071]"
    }, {
      "left" : "public static String upperCase(String str)",
      "right" : "public static String upperCase(String str)",
      "info" : "MethodDeclaration[199997-200968]:MethodDeclaration[200178-201149]"
    }, {
      "left" : "public static String upperCase(String str, Locale locale)",
      "right" : "public static String upperCase(String str, Locale locale)",
      "info" : "MethodDeclaration[200974-201776]:MethodDeclaration[201155-201957]"
    }, {
      "left" : "public static String lowerCase(String str)",
      "right" : "public static String lowerCase(String str)",
      "info" : "MethodDeclaration[201782-202753]:MethodDeclaration[201963-202934]"
    }, {
      "left" : "public static String lowerCase(String str, Locale locale)",
      "right" : "public static String lowerCase(String str, Locale locale)",
      "info" : "MethodDeclaration[202759-203561]:MethodDeclaration[202940-203742]"
    }, {
      "left" : "public static String capitalize(String str)",
      "right" : "public static String capitalize(String str)",
      "info" : "MethodDeclaration[203567-204712]:MethodDeclaration[203748-204893]"
    }, {
      "left" : "public static String uncapitalize(String str)",
      "right" : "public static String uncapitalize(String str)",
      "info" : "MethodDeclaration[204718-205881]:MethodDeclaration[204899-206062]"
    }, {
      "left" : "public static String swapCase(String str)",
      "right" : "public static String swapCase(String str)",
      "info" : "MethodDeclaration[205887-207653]:MethodDeclaration[206068-207834]"
    }, {
      "left" : "public static int countMatches(CharSequence str, CharSequence sub)",
      "right" : "public static int countMatches(CharSequence str, CharSequence sub)",
      "info" : "MethodDeclaration[207758-209010]:MethodDeclaration[207939-209191]"
    }, {
      "left" : "public static boolean isAlpha(CharSequence cs)",
      "right" : "public static boolean isAlpha(CharSequence cs)",
      "info" : "MethodDeclaration[209117-210241]:MethodDeclaration[209298-210422]"
    }, {
      "left" : "public static boolean isAlphaSpace(CharSequence cs)",
      "right" : "public static boolean isAlphaSpace(CharSequence cs)",
      "info" : "MethodDeclaration[210247-211445]:MethodDeclaration[210428-211626]"
    }, {
      "left" : "public static boolean isAlphanumeric(CharSequence cs)",
      "right" : "public static boolean isAlphanumeric(CharSequence cs)",
      "info" : "MethodDeclaration[211451-212722]:MethodDeclaration[211632-212903]"
    }, {
      "left" : "public static boolean isAlphanumericSpace(CharSequence cs)",
      "right" : "public static boolean isAlphanumericSpace(CharSequence cs)",
      "info" : "MethodDeclaration[212728-214025]:MethodDeclaration[212909-214206]"
    }, {
      "left" : "public static boolean isAsciiPrintable(CharSequence cs)",
      "right" : "public static boolean isAsciiPrintable(CharSequence cs)",
      "info" : "MethodDeclaration[214031-215495]:MethodDeclaration[214212-215676]"
    }, {
      "left" : "public static boolean isNumeric(CharSequence cs)",
      "right" : "public static boolean isNumeric(CharSequence cs)",
      "info" : "MethodDeclaration[215501-216795]:MethodDeclaration[215682-216976]"
    }, {
      "left" : "public static boolean isNumericSpace(CharSequence cs)",
      "right" : "public static boolean isNumericSpace(CharSequence cs)",
      "info" : "MethodDeclaration[216801-218138]:MethodDeclaration[216982-218319]"
    }, {
      "left" : "public static boolean isWhitespace(CharSequence cs)",
      "right" : "public static boolean isWhitespace(CharSequence cs)",
      "info" : "MethodDeclaration[218144-219253]:MethodDeclaration[218325-219434]"
    }, {
      "left" : "public static boolean isAllLowerCase(CharSequence cs)",
      "right" : "public static boolean isAllLowerCase(CharSequence cs)",
      "info" : "MethodDeclaration[219259-220371]:MethodDeclaration[219440-220552]"
    }, {
      "left" : "public static boolean isAllUpperCase(CharSequence cs)",
      "right" : "public static boolean isAllUpperCase(CharSequence cs)",
      "info" : "MethodDeclaration[220377-221482]:MethodDeclaration[220558-221663]"
    }, {
      "left" : "public static String defaultString(String str)",
      "right" : "public static String defaultString(String str)",
      "info" : "MethodDeclaration[221582-222203]:MethodDeclaration[221763-222384]"
    }, {
      "left" : "public static String defaultString(String str, String defaultStr)",
      "right" : "public static String defaultString(String str, String defaultStr)",
      "info" : "MethodDeclaration[222209-222992]:MethodDeclaration[222390-223173]"
    }, {
      "left" : "public static <T extends CharSequence> T defaultIfBlank(T str, T defaultStr)",
      "right" : "public static <T extends CharSequence> T defaultIfBlank(T str, T defaultStr)",
      "info" : "MethodDeclaration[222998-224000]:MethodDeclaration[223179-224181]"
    }, {
      "left" : "public static <T extends CharSequence> T defaultIfEmpty(T str, T defaultStr)",
      "right" : "public static <T extends CharSequence> T defaultIfEmpty(T str, T defaultStr)",
      "info" : "MethodDeclaration[224006-224977]:MethodDeclaration[224187-225158]"
    }, {
      "left" : "public static String reverse(String str)",
      "right" : "public static String reverse(String str)",
      "info" : "MethodDeclaration[225078-225688]:MethodDeclaration[225259-225869]"
    }, {
      "left" : "public static String reverseDelimited(String str, char separatorChar)",
      "right" : "public static String reverseDelimited(String str, char separatorChar)",
      "info" : "MethodDeclaration[225694-226804]:MethodDeclaration[225875-226985]"
    }, {
      "left" : "public static String abbreviate(String str, int maxWidth)",
      "right" : "public static String abbreviate(String str, int maxWidth)",
      "info" : "MethodDeclaration[226908-228366]:MethodDeclaration[227089-228547]"
    }, {
      "left" : "public static String abbreviate(String str, int offset, int maxWidth)",
      "right" : "public static String abbreviate(String str, int offset, int maxWidth)",
      "info" : "MethodDeclaration[228372-231284]:MethodDeclaration[228553-231465]"
    }, {
      "left" : "public static String abbreviateMiddle(String str, String middle, int length)",
      "right" : "public static String abbreviateMiddle(String str, String middle, int length)",
      "info" : "MethodDeclaration[231290-233446]:MethodDeclaration[231471-233627]"
    }, {
      "left" : "public static String difference(String str1, String str2)",
      "right" : "public static String difference(String str1, String str2)",
      "info" : "MethodDeclaration[233548-234894]:MethodDeclaration[233729-235075]"
    }, {
      "left" : "public static int indexOfDifference(CharSequence cs1, CharSequence cs2)",
      "right" : "public static int indexOfDifference(CharSequence cs1, CharSequence cs2)",
      "info" : "MethodDeclaration[234900-236473]:MethodDeclaration[235081-236654]"
    }, {
      "left" : "public static int indexOfDifference(CharSequence... css)",
      "right" : "public static int indexOfDifference(CharSequence... css)",
      "info" : "MethodDeclaration[236479-240397]:MethodDeclaration[236660-240578]"
    }, {
      "left" : "public static String getCommonPrefix(String... strs)",
      "right" : "public static String getCommonPrefix(String... strs)",
      "info" : "MethodDeclaration[240403-242861]:MethodDeclaration[240584-243042]"
    }, {
      "left" : "public static int getLevenshteinDistance(CharSequence s, CharSequence t)",
      "right" : "public static int getLevenshteinDistance(CharSequence s, CharSequence t)",
      "info" : "MethodDeclaration[242957-247908]:MethodDeclaration[243138-248089]"
    }, {
      "left" : "public static int getLevenshteinDistance(CharSequence s, CharSequence t, int threshold)",
      "right" : "public static int getLevenshteinDistance(CharSequence s, CharSequence t, int threshold)",
      "info" : "MethodDeclaration[247914-254971]:MethodDeclaration[248095-255152]"
    }, {
      "left" : "public static boolean startsWith(CharSequence str, CharSequence prefix)",
      "right" : "public static boolean startsWith(CharSequence str, CharSequence prefix)",
      "info" : "MethodDeclaration[255074-256168]:MethodDeclaration[255255-256349]"
    }, {
      "left" : "public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix)",
      "right" : "public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix)",
      "info" : "MethodDeclaration[256174-257367]:MethodDeclaration[256355-257548]"
    }, {
      "left" : "private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase)",
      "right" : "private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase)",
      "info" : "MethodDeclaration[257373-258247]:MethodDeclaration[257554-258428]"
    }, {
      "left" : "public static boolean startsWithAny(CharSequence string, CharSequence... searchStrings)",
      "right" : "public static boolean startsWithAny(CharSequence string, CharSequence... searchStrings)",
      "info" : "MethodDeclaration[258253-259618]:MethodDeclaration[258434-259799]"
    }, {
      "left" : "public static boolean endsWith(CharSequence str, CharSequence suffix)",
      "right" : "public static boolean endsWith(CharSequence str, CharSequence suffix)",
      "info" : "MethodDeclaration[259719-260842]:MethodDeclaration[259900-261023]"
    }, {
      "left" : "public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix)",
      "right" : "public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix)",
      "info" : "MethodDeclaration[260848-262080]:MethodDeclaration[261029-262261]"
    }, {
      "left" : "private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase)",
      "right" : "private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase)",
      "info" : "MethodDeclaration[262086-263018]:MethodDeclaration[262267-263199]"
    }, {
      "left" : "public static String normalizeSpace(String str)",
      "right" : "public static String normalizeSpace(String str)",
      "info" : "MethodDeclaration[263024-264869]:MethodDeclaration[263205-265050]"
    }, {
      "left" : "public static boolean endsWithAny(CharSequence string, CharSequence... searchStrings)",
      "right" : "public static boolean endsWithAny(CharSequence string, CharSequence... searchStrings)",
      "info" : "MethodDeclaration[264875-266098]:MethodDeclaration[265056-266279]"
    }, {
      "left" : "public static String toString(byte[] bytes, String charsetName) throws UnsupportedEncodingException",
      "right" : "public static String toString(byte[] bytes, String charsetName) throws UnsupportedEncodingException",
      "info" : "MethodDeclaration[266104-266806]:MethodDeclaration[266285-266987]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5990-6014]:Block[5990-6014]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[6000-6008]:SuperConstructorInvocation[6000-6008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6881-6935]:Block[6881-6935]"
    }, {
      "left" : "return cs == null || cs.length() == 0;",
      "right" : "return cs == null || cs.length() == 0;",
      "info" : "ReturnStatement[6891-6929]:ReturnStatement[6891-6929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7580-7628]:Block[7580-7628]"
    }, {
      "left" : "return !StringUtils.isEmpty(cs);",
      "right" : "return !StringUtils.isEmpty(cs);",
      "info" : "ReturnStatement[7590-7622]:ReturnStatement[7590-7622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8273-8575]:Block[8273-8575]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[8283-8294]:VariableDeclarationStatement[8283-8294]"
    }, {
      "left" : "if (cs == null || (strLen = cs.length()) == 0)",
      "right" : "if (cs == null || (strLen = cs.length()) == 0)",
      "info" : "IfStatement[8303-8386]:IfStatement[8303-8386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8350-8386]:Block[8350-8386]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8364-8376]:ReturnStatement[8364-8376]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[8395-8548]:ForStatement[8395-8548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8428-8548]:Block[8428-8548]"
    }, {
      "left" : "if (Character.isWhitespace(cs.charAt(i)) == false)",
      "right" : "if (Character.isWhitespace(cs.charAt(i)) == false)",
      "info" : "IfStatement[8442-8538]:IfStatement[8442-8538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8493-8538]:Block[8493-8538]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8511-8524]:ReturnStatement[8511-8524]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8557-8569]:ReturnStatement[8557-8569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9287-9335]:Block[9287-9335]"
    }, {
      "left" : "return !StringUtils.isBlank(cs);",
      "right" : "return !StringUtils.isBlank(cs);",
      "info" : "ReturnStatement[9297-9329]:ReturnStatement[9297-9329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10324-10379]:Block[10324-10379]"
    }, {
      "left" : "return str == null ? null : str.trim();",
      "right" : "return str == null ? null : str.trim();",
      "info" : "ReturnStatement[10334-10373]:ReturnStatement[10334-10373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11307-11385]:Block[11307-11385]"
    }, {
      "left" : "String ts = trim(str);",
      "right" : "String ts = trim(str);",
      "info" : "VariableDeclarationStatement[11317-11339]:VariableDeclarationStatement[11317-11339]"
    }, {
      "left" : "return isEmpty(ts) ? null : ts;",
      "right" : "return isEmpty(ts) ? null : ts;",
      "info" : "ReturnStatement[11348-11379]:ReturnStatement[11348-11379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12291-12347]:Block[12291-12347]"
    }, {
      "left" : "return str == null ? EMPTY : str.trim();",
      "right" : "return str == null ? EMPTY : str.trim();",
      "info" : "ReturnStatement[12301-12341]:ReturnStatement[12301-12341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13316-13356]:Block[13316-13356]"
    }, {
      "left" : "return strip(str, null);",
      "right" : "return strip(str, null);",
      "info" : "ReturnStatement[13326-13350]:ReturnStatement[13326-13350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14334-14482]:Block[14334-14482]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[14344-14397]:IfStatement[14344-14397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14361-14397]:Block[14361-14397]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14375-14387]:ReturnStatement[14375-14387]"
    }, {
      "left" : "str = strip(str, null);",
      "right" : "str = strip(str, null);",
      "info" : "ExpressionStatement[14406-14429]:ExpressionStatement[14406-14429]"
    }, {
      "left" : "return str.length() == 0 ? null : str;",
      "right" : "return str.length() == 0 ? null : str;",
      "info" : "ReturnStatement[14438-14476]:ReturnStatement[14438-14476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15422-15484]:Block[15422-15484]"
    }, {
      "left" : "return str == null ? EMPTY : strip(str, null);",
      "right" : "return str == null ? EMPTY : strip(str, null);",
      "info" : "ReturnStatement[15432-15478]:ReturnStatement[15432-15478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16701-16855]:Block[16701-16855]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[16711-16764]:IfStatement[16711-16764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16729-16764]:Block[16729-16764]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[16743-16754]:ReturnStatement[16743-16754]"
    }, {
      "left" : "str = stripStart(str, stripChars);",
      "right" : "str = stripStart(str, stripChars);",
      "info" : "ExpressionStatement[16773-16807]:ExpressionStatement[16773-16807]"
    }, {
      "left" : "return stripEnd(str, stripChars);",
      "right" : "return stripEnd(str, stripChars);",
      "info" : "ReturnStatement[16816-16849]:ReturnStatement[16816-16849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18000-18571]:Block[18000-18571]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[18010-18021]:VariableDeclarationStatement[18010-18021]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[18030-18114]:IfStatement[18030-18114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18079-18114]:Block[18079-18114]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[18093-18104]:ReturnStatement[18093-18104]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[18123-18137]:VariableDeclarationStatement[18123-18137]"
    }, {
      "left" : "if (stripChars == null)",
      "right" : "if (stripChars == null)",
      "info" : "IfStatement[18146-18528]:IfStatement[18146-18528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18170-18303]:Block[18170-18303]"
    }, {
      "left" : "while (start != strLen && Character.isWhitespace(str.charAt(start)))",
      "right" : "while (start != strLen && Character.isWhitespace(str.charAt(start)))",
      "info" : "WhileStatement[18184-18293]:WhileStatement[18184-18293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18293]:Block[18253-18293]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[18271-18279]:ExpressionStatement[18271-18279]"
    }, {
      "left" : "if (stripChars.length() == 0)",
      "right" : "if (stripChars.length() == 0)",
      "info" : "IfStatement[18309-18528]:IfStatement[18309-18528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18339-18374]:Block[18339-18374]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[18353-18364]:ReturnStatement[18353-18364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18380-18528]:Block[18380-18528]"
    }, {
      "left" : "while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND)",
      "right" : "while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND)",
      "info" : "WhileStatement[18394-18518]:WhileStatement[18394-18518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18478-18518]:Block[18478-18518]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[18496-18504]:ExpressionStatement[18496-18504]"
    }, {
      "left" : "return str.substring(start);",
      "right" : "return str.substring(start);",
      "info" : "ReturnStatement[18537-18565]:ReturnStatement[18537-18565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19756-20286]:Block[19756-20286]"
    }, {
      "left" : "int end;",
      "right" : "int end;",
      "info" : "VariableDeclarationStatement[19766-19774]:VariableDeclarationStatement[19766-19774]"
    }, {
      "left" : "if (str == null || (end = str.length()) == 0)",
      "right" : "if (str == null || (end = str.length()) == 0)",
      "info" : "IfStatement[19783-19864]:IfStatement[19783-19864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19829-19864]:Block[19829-19864]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[19843-19854]:ReturnStatement[19843-19854]"
    }, {
      "left" : "if (stripChars == null)",
      "right" : "if (stripChars == null)",
      "info" : "IfStatement[19874-20242]:IfStatement[19874-20242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19898-20024]:Block[19898-20024]"
    }, {
      "left" : "while (end != 0 && Character.isWhitespace(str.charAt(end - 1)))",
      "right" : "while (end != 0 && Character.isWhitespace(str.charAt(end - 1)))",
      "info" : "WhileStatement[19912-20014]:WhileStatement[19912-20014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19976-20014]:Block[19976-20014]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[19994-20000]:ExpressionStatement[19994-20000]"
    }, {
      "left" : "if (stripChars.length() == 0)",
      "right" : "if (stripChars.length() == 0)",
      "info" : "IfStatement[20030-20242]:IfStatement[20030-20242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20060-20095]:Block[20060-20095]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[20074-20085]:ReturnStatement[20074-20085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20101-20242]:Block[20101-20242]"
    }, {
      "left" : "while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND)",
      "right" : "while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND)",
      "info" : "WhileStatement[20115-20232]:WhileStatement[20115-20232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20194-20232]:Block[20194-20232]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[20212-20218]:ExpressionStatement[20212-20218]"
    }, {
      "left" : "return str.substring(0, end);",
      "right" : "return str.substring(0, end);",
      "info" : "ReturnStatement[20251-20280]:ReturnStatement[20251-20280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21240-21284]:Block[21240-21284]"
    }, {
      "left" : "return stripAll(strs, null);",
      "right" : "return stripAll(strs, null);",
      "info" : "ReturnStatement[21250-21278]:ReturnStatement[21250-21278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22544-22843]:Block[22544-22843]"
    }, {
      "left" : "int strsLen;",
      "right" : "int strsLen;",
      "info" : "VariableDeclarationStatement[22554-22566]:VariableDeclarationStatement[22554-22566]"
    }, {
      "left" : "if (strs == null || (strsLen = strs.length) == 0)",
      "right" : "if (strs == null || (strsLen = strs.length) == 0)",
      "info" : "IfStatement[22575-22661]:IfStatement[22575-22661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22625-22661]:Block[22625-22661]"
    }, {
      "left" : "return strs;",
      "right" : "return strs;",
      "info" : "ReturnStatement[22639-22651]:ReturnStatement[22639-22651]"
    }, {
      "left" : "String[] newArr = new String[strsLen];",
      "right" : "String[] newArr = new String[strsLen];",
      "info" : "VariableDeclarationStatement[22670-22708]:VariableDeclarationStatement[22670-22708]"
    }, {
      "left" : "for (int i = 0; i < strsLen; i++)",
      "right" : "for (int i = 0; i < strsLen; i++)",
      "info" : "ForStatement[22717-22814]:ForStatement[22717-22814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22751-22814]:Block[22751-22814]"
    }, {
      "left" : "newArr[i] = strip(strs[i], stripChars);",
      "right" : "newArr[i] = strip(strs[i], stripChars);",
      "info" : "ExpressionStatement[22765-22804]:ExpressionStatement[22765-22804]"
    }, {
      "left" : "return newArr;",
      "right" : "return newArr;",
      "info" : "ReturnStatement[22823-22837]:ReturnStatement[22823-22837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24017-25315]:Block[24017-25315]"
    }, {
      "left" : "if(input == null)",
      "right" : "if(input == null)",
      "info" : "IfStatement[24027-24081]:IfStatement[24027-24081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24045-24081]:Block[24045-24081]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24059-24071]:ReturnStatement[24059-24071]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24090-25309]:TryStatement[24090-25309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24094-24807]:Block[24094-24807]"
    }, {
      "left" : "String result = null;",
      "right" : "String result = null;",
      "info" : "VariableDeclarationStatement[24108-24129]:VariableDeclarationStatement[24108-24129]"
    }, {
      "left" : "if (InitStripAccents.java6NormalizeMethod != null)",
      "right" : "if (InitStripAccents.java6NormalizeMethod != null)",
      "info" : "IfStatement[24142-24689]:IfStatement[24142-24689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24193-24260]:Block[24193-24260]"
    }, {
      "left" : "result = removeAccentsJava6(input);",
      "right" : "result = removeAccentsJava6(input);",
      "info" : "ExpressionStatement[24211-24246]:ExpressionStatement[24211-24246]"
    }, {
      "left" : "if (InitStripAccents.sunDecomposeMethod != null)",
      "right" : "if (InitStripAccents.sunDecomposeMethod != null)",
      "info" : "IfStatement[24266-24689]:IfStatement[24266-24689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24315-24380]:Block[24315-24380]"
    }, {
      "left" : "result = removeAccentsSUN(input);",
      "right" : "result = removeAccentsSUN(input);",
      "info" : "ExpressionStatement[24333-24366]:ExpressionStatement[24333-24366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24386-24689]:Block[24386-24689]"
    }, {
      "left" : "throw new UnsupportedOperationException(\n                    \"The stripAccents(CharSequence) method requires at least\"\n                        +\" Java6, but got: \"+InitStripAccents.java6Exception\n                        +\"; or a Sun JVM: \"+InitStripAccents.sunException);",
      "right" : "throw new UnsupportedOperationException(\n                    \"The stripAccents(CharSequence) method requires at least\"\n                        +\" Java6, but got: \"+InitStripAccents.java6Exception\n                        +\"; or a Sun JVM: \"+InitStripAccents.sunException);",
      "info" : "ThrowStatement[24404-24675]:ThrowStatement[24404-24675]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24783-24797]:ReturnStatement[24783-24797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24844-24937]:Block[24844-24937]"
    }, {
      "left" : "throw new RuntimeException(\"IllegalArgumentException occurred\", iae);",
      "right" : "throw new RuntimeException(\"IllegalArgumentException occurred\", iae);",
      "info" : "ThrowStatement[24858-24927]:ThrowStatement[24858-24927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24972-25063]:Block[24972-25063]"
    }, {
      "left" : "throw new RuntimeException(\"IllegalAccessException occurred\", iae);",
      "right" : "throw new RuntimeException(\"IllegalAccessException occurred\", iae);",
      "info" : "ThrowStatement[24986-25053]:ThrowStatement[24986-25053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25101-25195]:Block[25101-25195]"
    }, {
      "left" : "throw new RuntimeException(\"InvocationTargetException occurred\", ite);",
      "right" : "throw new RuntimeException(\"InvocationTargetException occurred\", ite);",
      "info" : "ThrowStatement[25115-25185]:ThrowStatement[25115-25185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25224-25309]:Block[25224-25309]"
    }, {
      "left" : "throw new RuntimeException(\"SecurityException occurred\", se);",
      "right" : "throw new RuntimeException(\"SecurityException occurred\", se);",
      "info" : "ThrowStatement[25238-25299]:ThrowStatement[25238-25299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25963-26683]:Block[25963-26683]"
    }, {
      "left" : "if (InitStripAccents.java6NormalizeMethod == null || InitStripAccents.java6NormalizerFormNFD == null)",
      "right" : "if (InitStripAccents.java6NormalizeMethod == null || InitStripAccents.java6NormalizerFormNFD == null)",
      "info" : "IfStatement[26167-26399]:IfStatement[26167-26399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26269-26399]:Block[26269-26399]"
    }, {
      "left" : "throw new IllegalStateException(\"java.text.Normalizer is not available\", InitStripAccents.java6Exception);",
      "right" : "throw new IllegalStateException(\"java.text.Normalizer is not available\", InitStripAccents.java6Exception);",
      "info" : "ThrowStatement[26283-26389]:ThrowStatement[26283-26389]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[26408-26422]:VariableDeclarationStatement[26408-26422]"
    }, {
      "left" : "result = (String) InitStripAccents.java6NormalizeMethod.invoke(null, new Object[] {text, InitStripAccents.java6NormalizerFormNFD});",
      "right" : "result = (String) InitStripAccents.java6NormalizeMethod.invoke(null, new Object[] {text, InitStripAccents.java6NormalizerFormNFD});",
      "info" : "ExpressionStatement[26431-26562]:ExpressionStatement[26431-26562]"
    }, {
      "left" : "result = InitStripAccents.java6Pattern.matcher(result).replaceAll(\"\");",
      "right" : "result = InitStripAccents.java6Pattern.matcher(result).replaceAll(\"\");",
      "info" : "ExpressionStatement[26571-26641]:ExpressionStatement[26571-26641]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[26663-26677]:ReturnStatement[26663-26677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27227-27859]:Block[27227-27859]"
    }, {
      "left" : "if (InitStripAccents.sunDecomposeMethod == null)",
      "right" : "if (InitStripAccents.sunDecomposeMethod == null)",
      "info" : "IfStatement[27409-27585]:IfStatement[27409-27585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27458-27585]:Block[27458-27585]"
    }, {
      "left" : "throw new IllegalStateException(\"sun.text.Normalizer is not available\", InitStripAccents.sunException);",
      "right" : "throw new IllegalStateException(\"sun.text.Normalizer is not available\", InitStripAccents.sunException);",
      "info" : "ThrowStatement[27472-27575]:ThrowStatement[27472-27575]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[27594-27608]:VariableDeclarationStatement[27594-27608]"
    }, {
      "left" : "result = (String) InitStripAccents.sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});",
      "right" : "result = (String) InitStripAccents.sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});",
      "info" : "ExpressionStatement[27617-27740]:ExpressionStatement[27617-27740]"
    }, {
      "left" : "result = InitStripAccents.sunPattern.matcher(result).replaceAll(\"\");",
      "right" : "result = InitStripAccents.sunPattern.matcher(result).replaceAll(\"\");",
      "info" : "ExpressionStatement[27749-27817]:ExpressionStatement[27749-27817]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27839-27853]:ReturnStatement[27839-27853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28508-30627]:Block[28508-30627]"
    }, {
      "left" : "Object _java6NormalizerFormNFD = null;",
      "right" : "Object _java6NormalizerFormNFD = null;",
      "info" : "VariableDeclarationStatement[28577-28615]:VariableDeclarationStatement[28577-28615]"
    }, {
      "left" : "Method _java6NormalizeMethod = null;",
      "right" : "Method _java6NormalizeMethod = null;",
      "info" : "VariableDeclarationStatement[28628-28664]:VariableDeclarationStatement[28628-28664]"
    }, {
      "left" : "Method _sunDecomposeMethod = null;",
      "right" : "Method _sunDecomposeMethod = null;",
      "info" : "VariableDeclarationStatement[28677-28711]:VariableDeclarationStatement[28677-28711]"
    }, {
      "left" : "Throwable _java6Exception = null;",
      "right" : "Throwable _java6Exception = null;",
      "info" : "VariableDeclarationStatement[28724-28757]:VariableDeclarationStatement[28724-28757]"
    }, {
      "left" : "Throwable _sunException = null;",
      "right" : "Throwable _sunException = null;",
      "info" : "VariableDeclarationStatement[28770-28801]:VariableDeclarationStatement[28770-28801]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28814-30308]:TryStatement[28814-30308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28818-29605]:Block[28818-29605]"
    }, {
      "left" : "Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()\n                    .loadClass(\"java.text.Normalizer$Form\");",
      "right" : "Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()\n                    .loadClass(\"java.text.Normalizer$Form\");",
      "info" : "VariableDeclarationStatement[28994-29132]:VariableDeclarationStatement[28994-29132]"
    }, {
      "left" : "_java6NormalizerFormNFD = normalizerFormClass.getField(\"NFD\").get(null);",
      "right" : "_java6NormalizerFormNFD = normalizerFormClass.getField(\"NFD\").get(null);",
      "info" : "ExpressionStatement[29162-29234]:ExpressionStatement[29162-29234]"
    }, {
      "left" : "Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                    .loadClass(\"java.text.Normalizer\");",
      "right" : "Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                    .loadClass(\"java.text.Normalizer\");",
      "info" : "VariableDeclarationStatement[29264-29393]:VariableDeclarationStatement[29264-29393]"
    }, {
      "left" : "_java6NormalizeMethod = normalizerClass.getMethod(\"normalize\",//$NON-NLS-1$\n                        new Class[] {CharSequence.class, normalizerFormClass});",
      "right" : "_java6NormalizeMethod = normalizerClass.getMethod(\"normalize\",//$NON-NLS-1$\n                        new Class[] {CharSequence.class, normalizerFormClass});",
      "info" : "ExpressionStatement[29423-29578]:ExpressionStatement[29423-29578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29627-30308]:Block[29627-30308]"
    }, {
      "left" : "_java6Exception = e1;",
      "right" : "_java6Exception = e1;",
      "info" : "ExpressionStatement[29724-29745]:ExpressionStatement[29724-29745]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29762-30294]:TryStatement[29762-30294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29766-30213]:Block[29766-30213]"
    }, {
      "left" : "Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                        .loadClass(\"sun.text.Normalizer\");",
      "right" : "Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                        .loadClass(\"sun.text.Normalizer\");",
      "info" : "VariableDeclarationStatement[29858-29990]:VariableDeclarationStatement[29858-29990]"
    }, {
      "left" : "_sunDecomposeMethod = normalizerClass.getMethod(\"decompose\",//$NON-NLS-1$\n                            new Class[] {String.class, Boolean.TYPE, Integer.TYPE});",
      "right" : "_sunDecomposeMethod = normalizerClass.getMethod(\"decompose\",//$NON-NLS-1$\n                            new Class[] {String.class, Boolean.TYPE, Integer.TYPE});",
      "info" : "ExpressionStatement[30024-30182]:ExpressionStatement[30024-30182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30235-30294]:Block[30235-30294]"
    }, {
      "left" : "_sunException = e2;",
      "right" : "_sunException = e2;",
      "info" : "ExpressionStatement[30257-30276]:ExpressionStatement[30257-30276]"
    }, {
      "left" : "java6Exception = _java6Exception;",
      "right" : "java6Exception = _java6Exception;",
      "info" : "ExpressionStatement[30368-30401]:ExpressionStatement[30368-30401]"
    }, {
      "left" : "java6NormalizerFormNFD = _java6NormalizerFormNFD;",
      "right" : "java6NormalizerFormNFD = _java6NormalizerFormNFD;",
      "info" : "ExpressionStatement[30414-30463]:ExpressionStatement[30414-30463]"
    }, {
      "left" : "java6NormalizeMethod = _java6NormalizeMethod;",
      "right" : "java6NormalizeMethod = _java6NormalizeMethod;",
      "info" : "ExpressionStatement[30476-30521]:ExpressionStatement[30476-30521]"
    }, {
      "left" : "sunException = _sunException;",
      "right" : "sunException = _sunException;",
      "info" : "ExpressionStatement[30534-30563]:ExpressionStatement[30534-30563]"
    }, {
      "left" : "sunDecomposeMethod = _sunDecomposeMethod;",
      "right" : "sunDecomposeMethod = _sunDecomposeMethod;",
      "info" : "ExpressionStatement[30576-30617]:ExpressionStatement[30576-30617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32995-33222]:Block[33176-33403]"
    }, {
      "left" : "if (str1 == null || str2 == null)",
      "right" : "if (str1 == null || str2 == null)",
      "info" : "IfStatement[33005-33216]:IfStatement[33186-33397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33039-33083]:Block[33220-33264]"
    }, {
      "left" : "return str1 == str2;",
      "right" : "return str1 == str2;",
      "info" : "ReturnStatement[33053-33073]:ReturnStatement[33234-33254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33089-33216]:Block[33270-33397]"
    }, {
      "left" : "return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));",
      "right" : "return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));",
      "info" : "ReturnStatement[33103-33206]:ReturnStatement[33284-33387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34213-34356]:Block[34394-34537]"
    }, {
      "left" : "if (isEmpty(seq))",
      "right" : "if (isEmpty(seq))",
      "info" : "IfStatement[34223-34288]:IfStatement[34404-34469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34241-34288]:Block[34422-34469]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[34255-34278]:ReturnStatement[34436-34459]"
    }, {
      "left" : "return CharSequenceUtils.indexOf(seq, searchChar, 0);",
      "right" : "return CharSequenceUtils.indexOf(seq, searchChar, 0);",
      "info" : "ReturnStatement[34297-34350]:ReturnStatement[34478-34531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35625-35775]:Block[35806-35956]"
    }, {
      "left" : "if (isEmpty(seq))",
      "right" : "if (isEmpty(seq))",
      "info" : "IfStatement[35635-35700]:IfStatement[35816-35881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35653-35700]:Block[35834-35881]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[35667-35690]:ReturnStatement[35848-35871]"
    }, {
      "left" : "return CharSequenceUtils.indexOf(seq, searchChar, startPos);",
      "right" : "return CharSequenceUtils.indexOf(seq, searchChar, startPos);",
      "info" : "ReturnStatement[35709-35769]:ReturnStatement[35890-35950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36904-37066]:Block[37085-37247]"
    }, {
      "left" : "if (seq == null || searchSeq == null)",
      "right" : "if (seq == null || searchSeq == null)",
      "info" : "IfStatement[36914-36999]:IfStatement[37095-37180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36952-36999]:Block[37133-37180]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[36966-36989]:ReturnStatement[37147-37170]"
    }, {
      "left" : "return CharSequenceUtils.indexOf(seq, searchSeq, 0);",
      "right" : "return CharSequenceUtils.indexOf(seq, searchSeq, 0);",
      "info" : "ReturnStatement[37008-37060]:ReturnStatement[37189-37241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38736-38905]:Block[38917-39086]"
    }, {
      "left" : "if (seq == null || searchSeq == null)",
      "right" : "if (seq == null || searchSeq == null)",
      "info" : "IfStatement[38746-38831]:IfStatement[38927-39012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38784-38831]:Block[38965-39012]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[38798-38821]:ReturnStatement[38979-39002]"
    }, {
      "left" : "return CharSequenceUtils.indexOf(seq, searchSeq, startPos);",
      "right" : "return CharSequenceUtils.indexOf(seq, searchSeq, startPos);",
      "info" : "ReturnStatement[38840-38899]:ReturnStatement[39021-39080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40579-40649]:Block[40760-40830]"
    }, {
      "left" : "return ordinalIndexOf(str, searchStr, ordinal, false);",
      "right" : "return ordinalIndexOf(str, searchStr, ordinal, false);",
      "info" : "ReturnStatement[40589-40643]:ReturnStatement[40770-40824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41517-42207]:Block[41698-42388]"
    }, {
      "left" : "if (str == null || searchStr == null || ordinal <= 0)",
      "right" : "if (str == null || searchStr == null || ordinal <= 0)",
      "info" : "IfStatement[41527-41628]:IfStatement[41708-41809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41581-41628]:Block[41762-41809]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[41595-41618]:ReturnStatement[41776-41799]"
    }, {
      "left" : "if (searchStr.length() == 0)",
      "right" : "if (searchStr.length() == 0)",
      "info" : "IfStatement[41637-41726]:IfStatement[41818-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41666-41726]:Block[41847-41907]"
    }, {
      "left" : "return lastIndex ? str.length() : 0;",
      "right" : "return lastIndex ? str.length() : 0;",
      "info" : "ReturnStatement[41680-41716]:ReturnStatement[41861-41897]"
    }, {
      "left" : "int found = 0;",
      "right" : "int found = 0;",
      "info" : "VariableDeclarationStatement[41735-41749]:VariableDeclarationStatement[41916-41930]"
    }, {
      "left" : "int index = lastIndex ? str.length() : INDEX_NOT_FOUND;",
      "right" : "int index = lastIndex ? str.length() : INDEX_NOT_FOUND;",
      "info" : "VariableDeclarationStatement[41758-41813]:VariableDeclarationStatement[41939-41994]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[41822-42179]:DoStatement[42003-42360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41825-42154]:Block[42006-42335]"
    }, {
      "left" : "if (lastIndex)",
      "right" : "if (lastIndex)",
      "info" : "IfStatement[41839-42050]:IfStatement[42020-42231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41854-41951]:Block[42035-42132]"
    }, {
      "left" : "index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);",
      "right" : "index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);",
      "info" : "ExpressionStatement[41872-41937]:ExpressionStatement[42053-42118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41957-42050]:Block[42138-42231]"
    }, {
      "left" : "index = CharSequenceUtils.indexOf(str, searchStr, index + 1);",
      "right" : "index = CharSequenceUtils.indexOf(str, searchStr, index + 1);",
      "info" : "ExpressionStatement[41975-42036]:ExpressionStatement[42156-42217]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[42063-42123]:IfStatement[42244-42304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42078-42123]:Block[42259-42304]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[42096-42109]:ReturnStatement[42277-42290]"
    }, {
      "left" : "found++;",
      "right" : "found++;",
      "info" : "ExpressionStatement[42136-42144]:ExpressionStatement[42317-42325]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[42188-42201]:ReturnStatement[42369-42382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43445-43505]:Block[43626-43686]"
    }, {
      "left" : "return indexOfIgnoreCase(str, searchStr, 0);",
      "right" : "return indexOfIgnoreCase(str, searchStr, 0);",
      "info" : "ReturnStatement[43455-43499]:ReturnStatement[43636-43680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45200-45819]:Block[45381-46000]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[45210-45295]:IfStatement[45391-45476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45248-45295]:Block[45429-45476]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[45262-45285]:ReturnStatement[45443-45466]"
    }, {
      "left" : "if (startPos < 0)",
      "right" : "if (startPos < 0)",
      "info" : "IfStatement[45304-45359]:IfStatement[45485-45540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45322-45359]:Block[45503-45540]"
    }, {
      "left" : "startPos = 0;",
      "right" : "startPos = 0;",
      "info" : "ExpressionStatement[45336-45349]:ExpressionStatement[45517-45530]"
    }, {
      "left" : "int endLimit = str.length() - searchStr.length() + 1;",
      "right" : "int endLimit = str.length() - searchStr.length() + 1;",
      "info" : "VariableDeclarationStatement[45368-45421]:VariableDeclarationStatement[45549-45602]"
    }, {
      "left" : "if (startPos > endLimit)",
      "right" : "if (startPos > endLimit)",
      "info" : "IfStatement[45430-45502]:IfStatement[45611-45683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45455-45502]:Block[45636-45683]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[45469-45492]:ReturnStatement[45650-45673]"
    }, {
      "left" : "if (searchStr.length() == 0)",
      "right" : "if (searchStr.length() == 0)",
      "info" : "IfStatement[45511-45580]:IfStatement[45692-45761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45540-45580]:Block[45721-45761]"
    }, {
      "left" : "return startPos;",
      "right" : "return startPos;",
      "info" : "ReturnStatement[45554-45570]:ReturnStatement[45735-45751]"
    }, {
      "left" : "for (int i = startPos; i < endLimit; i++)",
      "right" : "for (int i = startPos; i < endLimit; i++)",
      "info" : "ForStatement[45589-45781]:ForStatement[45770-45962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45631-45781]:Block[45812-45962]"
    }, {
      "left" : "if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length()))",
      "right" : "if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length()))",
      "info" : "IfStatement[45645-45771]:IfStatement[45826-45952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45730-45771]:Block[45911-45952]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[45748-45757]:ReturnStatement[45929-45938]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[45790-45813]:ReturnStatement[45971-45994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46821-46979]:Block[47002-47160]"
    }, {
      "left" : "if (isEmpty(seq))",
      "right" : "if (isEmpty(seq))",
      "info" : "IfStatement[46831-46896]:IfStatement[47012-47077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46849-46896]:Block[47030-47077]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[46863-46886]:ReturnStatement[47044-47067]"
    }, {
      "left" : "return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());",
      "right" : "return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());",
      "info" : "ReturnStatement[46905-46973]:ReturnStatement[47086-47154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48362-48516]:Block[48543-48697]"
    }, {
      "left" : "if (isEmpty(seq))",
      "right" : "if (isEmpty(seq))",
      "info" : "IfStatement[48372-48437]:IfStatement[48553-48618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48390-48437]:Block[48571-48618]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[48404-48427]:ReturnStatement[48585-48608]"
    }, {
      "left" : "return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);",
      "right" : "return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);",
      "info" : "ReturnStatement[48446-48510]:ReturnStatement[48627-48691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49605-49782]:Block[49786-49963]"
    }, {
      "left" : "if (seq == null || searchSeq == null)",
      "right" : "if (seq == null || searchSeq == null)",
      "info" : "IfStatement[49615-49700]:IfStatement[49796-49881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49653-49700]:Block[49834-49881]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[49667-49690]:ReturnStatement[49848-49871]"
    }, {
      "left" : "return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());",
      "right" : "return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());",
      "info" : "ReturnStatement[49709-49776]:ReturnStatement[49890-49957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51508-51577]:Block[51689-51758]"
    }, {
      "left" : "return ordinalIndexOf(str, searchStr, ordinal, true);",
      "right" : "return ordinalIndexOf(str, searchStr, ordinal, true);",
      "info" : "ReturnStatement[51518-51571]:ReturnStatement[51699-51752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53137-53310]:Block[53318-53491]"
    }, {
      "left" : "if (seq == null || searchSeq == null)",
      "right" : "if (seq == null || searchSeq == null)",
      "info" : "IfStatement[53147-53232]:IfStatement[53328-53413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53185-53232]:Block[53366-53413]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[53199-53222]:ReturnStatement[53380-53403]"
    }, {
      "left" : "return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);",
      "right" : "return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);",
      "info" : "ReturnStatement[53241-53304]:ReturnStatement[53422-53485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54535-54704]:Block[54716-54885]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[54545-54630]:IfStatement[54726-54811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54583-54630]:Block[54764-54811]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[54597-54620]:ReturnStatement[54778-54801]"
    }, {
      "left" : "return lastIndexOfIgnoreCase(str, searchStr, str.length());",
      "right" : "return lastIndexOfIgnoreCase(str, searchStr, str.length());",
      "info" : "ReturnStatement[54639-54698]:ReturnStatement[54820-54879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56305-56914]:Block[56486-57095]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[56315-56400]:IfStatement[56496-56581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56353-56400]:Block[56534-56581]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[56367-56390]:ReturnStatement[56548-56571]"
    }, {
      "left" : "if (startPos > str.length() - searchStr.length())",
      "right" : "if (startPos > str.length() - searchStr.length())",
      "info" : "IfStatement[56409-56528]:IfStatement[56590-56709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56459-56528]:Block[56640-56709]"
    }, {
      "left" : "startPos = str.length() - searchStr.length();",
      "right" : "startPos = str.length() - searchStr.length();",
      "info" : "ExpressionStatement[56473-56518]:ExpressionStatement[56654-56699]"
    }, {
      "left" : "if (startPos < 0)",
      "right" : "if (startPos < 0)",
      "info" : "IfStatement[56537-56602]:IfStatement[56718-56783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56555-56602]:Block[56736-56783]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[56569-56592]:ReturnStatement[56750-56773]"
    }, {
      "left" : "if (searchStr.length() == 0)",
      "right" : "if (searchStr.length() == 0)",
      "info" : "IfStatement[56611-56680]:IfStatement[56792-56861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56640-56680]:Block[56821-56861]"
    }, {
      "left" : "return startPos;",
      "right" : "return startPos;",
      "info" : "ReturnStatement[56654-56670]:ReturnStatement[56835-56851]"
    }, {
      "left" : "for (int i = startPos; i >= 0; i--)",
      "right" : "for (int i = startPos; i >= 0; i--)",
      "info" : "ForStatement[56690-56876]:ForStatement[56871-57057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56726-56876]:Block[56907-57057]"
    }, {
      "left" : "if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length()))",
      "right" : "if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length()))",
      "info" : "IfStatement[56740-56866]:IfStatement[56921-57047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56825-56866]:Block[57006-57047]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[56843-56852]:ReturnStatement[57024-57033]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[56885-56908]:ReturnStatement[57066-57089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57910-58048]:Block[58091-58229]"
    }, {
      "left" : "if (isEmpty(seq))",
      "right" : "if (isEmpty(seq))",
      "info" : "IfStatement[57920-57975]:IfStatement[58101-58156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57938-57975]:Block[58119-58156]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57952-57965]:ReturnStatement[58133-58146]"
    }, {
      "left" : "return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;",
      "right" : "return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;",
      "info" : "ReturnStatement[57984-58042]:ReturnStatement[58165-58223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59080-59237]:Block[59261-59418]"
    }, {
      "left" : "if (seq == null || searchSeq == null)",
      "right" : "if (seq == null || searchSeq == null)",
      "info" : "IfStatement[59090-59165]:IfStatement[59271-59346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59128-59165]:Block[59309-59346]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59142-59155]:ReturnStatement[59323-59336]"
    }, {
      "left" : "return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;",
      "right" : "return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;",
      "info" : "ReturnStatement[59174-59231]:ReturnStatement[59355-59412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60421-60788]:Block[60602-60969]"
    }, {
      "left" : "if (str == null || searchStr == null)",
      "right" : "if (str == null || searchStr == null)",
      "info" : "IfStatement[60431-60506]:IfStatement[60612-60687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60469-60506]:Block[60650-60687]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60483-60496]:ReturnStatement[60664-60677]"
    }, {
      "left" : "int len = searchStr.length();",
      "right" : "int len = searchStr.length();",
      "info" : "VariableDeclarationStatement[60515-60544]:VariableDeclarationStatement[60696-60725]"
    }, {
      "left" : "int max = str.length() - len;",
      "right" : "int max = str.length() - len;",
      "info" : "VariableDeclarationStatement[60553-60582]:VariableDeclarationStatement[60734-60763]"
    }, {
      "left" : "for (int i = 0; i <= max; i++)",
      "right" : "for (int i = 0; i <= max; i++)",
      "info" : "ForStatement[60591-60760]:ForStatement[60772-60941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60622-60760]:Block[60803-60941]"
    }, {
      "left" : "if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len))",
      "right" : "if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len))",
      "info" : "IfStatement[60636-60750]:IfStatement[60817-60931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60706-60750]:Block[60887-60931]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60724-60736]:ReturnStatement[60905-60917]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60769-60782]:ReturnStatement[60950-60963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61266-61547]:Block[61447-61728]"
    }, {
      "left" : "if (isEmpty(seq))",
      "right" : "if (isEmpty(seq))",
      "info" : "IfStatement[61276-61331]:IfStatement[61457-61512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61294-61331]:Block[61475-61512]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61308-61321]:ReturnStatement[61489-61502]"
    }, {
      "left" : "int strLen = seq.length();",
      "right" : "int strLen = seq.length();",
      "info" : "VariableDeclarationStatement[61340-61366]:VariableDeclarationStatement[61521-61547]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[61375-61519]:ForStatement[61556-61700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61408-61519]:Block[61589-61700]"
    }, {
      "left" : "if (Character.isWhitespace(seq.charAt(i)))",
      "right" : "if (Character.isWhitespace(seq.charAt(i)))",
      "info" : "IfStatement[61422-61509]:IfStatement[61603-61690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61465-61509]:Block[61646-61690]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61483-61495]:ReturnStatement[61664-61676]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61528-61541]:ReturnStatement[61709-61722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62766-63643]:Block[62947-63824]"
    }, {
      "left" : "if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars))",
      "right" : "if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars))",
      "info" : "IfStatement[62776-62875]:IfStatement[62957-63056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62828-62875]:Block[63009-63056]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[62842-62865]:ReturnStatement[63023-63046]"
    }, {
      "left" : "int csLen = cs.length();",
      "right" : "int csLen = cs.length();",
      "info" : "VariableDeclarationStatement[62884-62908]:VariableDeclarationStatement[63065-63089]"
    }, {
      "left" : "int csLast = csLen - 1;",
      "right" : "int csLast = csLen - 1;",
      "info" : "VariableDeclarationStatement[62917-62940]:VariableDeclarationStatement[63098-63121]"
    }, {
      "left" : "int searchLen = searchChars.length;",
      "right" : "int searchLen = searchChars.length;",
      "info" : "VariableDeclarationStatement[62949-62984]:VariableDeclarationStatement[63130-63165]"
    }, {
      "left" : "int searchLast = searchLen - 1;",
      "right" : "int searchLast = searchLen - 1;",
      "info" : "VariableDeclarationStatement[62993-63024]:VariableDeclarationStatement[63174-63205]"
    }, {
      "left" : "for (int i = 0; i < csLen; i++)",
      "right" : "for (int i = 0; i < csLen; i++)",
      "info" : "ForStatement[63033-63605]:ForStatement[63214-63786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63065-63605]:Block[63246-63786]"
    }, {
      "left" : "char ch = cs.charAt(i);",
      "right" : "char ch = cs.charAt(i);",
      "info" : "VariableDeclarationStatement[63079-63102]:VariableDeclarationStatement[63260-63283]"
    }, {
      "left" : "for (int j = 0; j < searchLen; j++)",
      "right" : "for (int j = 0; j < searchLen; j++)",
      "info" : "ForStatement[63115-63595]:ForStatement[63296-63776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63151-63595]:Block[63332-63776]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[63169-63581]:IfStatement[63350-63762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63195-63581]:Block[63376-63762]"
    }, {
      "left" : "if (i < csLast && j < searchLast && Character.isHighSurrogate(ch))",
      "right" : "if (i < csLast && j < searchLast && Character.isHighSurrogate(ch))",
      "info" : "IfStatement[63217-63563]:IfStatement[63398-63744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63284-63500]:Block[63465-63681]"
    }, {
      "left" : "if (searchChars[j + 1] == cs.charAt(i + 1))",
      "right" : "if (searchChars[j + 1] == cs.charAt(i + 1))",
      "info" : "IfStatement[63369-63478]:IfStatement[63550-63659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63413-63478]:Block[63594-63659]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[63443-63452]:ReturnStatement[63624-63633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63506-63563]:Block[63687-63744]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[63532-63541]:ReturnStatement[63713-63722]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[63614-63637]:ReturnStatement[63795-63818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64716-64878]:Block[64897-65059]"
    }, {
      "left" : "if (isEmpty(cs) || isEmpty(searchChars))",
      "right" : "if (isEmpty(cs) || isEmpty(searchChars))",
      "info" : "IfStatement[64726-64814]:IfStatement[64907-64995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64767-64814]:Block[64948-64995]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[64781-64804]:ReturnStatement[64962-64985]"
    }, {
      "left" : "return indexOfAny(cs, searchChars.toCharArray());",
      "right" : "return indexOfAny(cs, searchChars.toCharArray());",
      "info" : "ReturnStatement[64823-64872]:ReturnStatement[65004-65053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66161-67232]:Block[66342-67413]"
    }, {
      "left" : "if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars))",
      "right" : "if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars))",
      "info" : "IfStatement[66171-66260]:IfStatement[66352-66441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66223-66260]:Block[66404-66441]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66237-66250]:ReturnStatement[66418-66431]"
    }, {
      "left" : "int csLength = cs.length();",
      "right" : "int csLength = cs.length();",
      "info" : "VariableDeclarationStatement[66269-66296]:VariableDeclarationStatement[66450-66477]"
    }, {
      "left" : "int searchLength = searchChars.length;",
      "right" : "int searchLength = searchChars.length;",
      "info" : "VariableDeclarationStatement[66305-66343]:VariableDeclarationStatement[66486-66524]"
    }, {
      "left" : "int csLast = csLength - 1;",
      "right" : "int csLast = csLength - 1;",
      "info" : "VariableDeclarationStatement[66352-66378]:VariableDeclarationStatement[66533-66559]"
    }, {
      "left" : "int searchLast = searchLength - 1;",
      "right" : "int searchLast = searchLength - 1;",
      "info" : "VariableDeclarationStatement[66387-66421]:VariableDeclarationStatement[66568-66602]"
    }, {
      "left" : "for (int i = 0; i < csLength; i++)",
      "right" : "for (int i = 0; i < csLength; i++)",
      "info" : "ForStatement[66430-67204]:ForStatement[66611-67385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66465-67204]:Block[66646-67385]"
    }, {
      "left" : "char ch = cs.charAt(i);",
      "right" : "char ch = cs.charAt(i);",
      "info" : "VariableDeclarationStatement[66479-66502]:VariableDeclarationStatement[66660-66683]"
    }, {
      "left" : "for (int j = 0; j < searchLength; j++)",
      "right" : "for (int j = 0; j < searchLength; j++)",
      "info" : "ForStatement[66515-67194]:ForStatement[66696-67375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66554-67194]:Block[66735-67375]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[66572-67180]:IfStatement[66753-67361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66598-67180]:Block[66779-67361]"
    }, {
      "left" : "if (Character.isHighSurrogate(ch))",
      "right" : "if (Character.isHighSurrogate(ch))",
      "info" : "IfStatement[66620-67162]:IfStatement[66801-67343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66655-67031]:Block[66836-67212]"
    }, {
      "left" : "if (j == searchLast)",
      "right" : "if (j == searchLast)",
      "info" : "IfStatement[66681-66858]:IfStatement[66862-67039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66702-66858]:Block[66883-67039]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66820-66832]:ReturnStatement[67001-67013]"
    }, {
      "left" : "if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1))",
      "right" : "if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1))",
      "info" : "IfStatement[66883-67009]:IfStatement[67064-67190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66941-67009]:Block[67122-67190]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66971-66983]:ReturnStatement[67152-67164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67037-67162]:Block[67218-67343]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67128-67140]:ReturnStatement[67309-67321]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67213-67226]:ReturnStatement[67394-67407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68444-68598]:Block[68625-68779]"
    }, {
      "left" : "if (searchChars == null)",
      "right" : "if (searchChars == null)",
      "info" : "IfStatement[68454-68516]:IfStatement[68635-68697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68479-68516]:Block[68660-68697]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[68493-68506]:ReturnStatement[68674-68687]"
    }, {
      "left" : "return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));",
      "right" : "return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));",
      "info" : "ReturnStatement[68525-68592]:ReturnStatement[68706-68773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69961-70828]:Block[70142-71009]"
    }, {
      "left" : "if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars))",
      "right" : "if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars))",
      "info" : "IfStatement[69971-70070]:IfStatement[70152-70251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70023-70070]:Block[70204-70251]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[70037-70060]:ReturnStatement[70218-70241]"
    }, {
      "left" : "int csLen = cs.length();",
      "right" : "int csLen = cs.length();",
      "info" : "VariableDeclarationStatement[70079-70103]:VariableDeclarationStatement[70260-70284]"
    }, {
      "left" : "int csLast = csLen - 1;",
      "right" : "int csLast = csLen - 1;",
      "info" : "VariableDeclarationStatement[70112-70135]:VariableDeclarationStatement[70293-70316]"
    }, {
      "left" : "int searchLen = searchChars.length;",
      "right" : "int searchLen = searchChars.length;",
      "info" : "VariableDeclarationStatement[70144-70179]:VariableDeclarationStatement[70325-70360]"
    }, {
      "left" : "int searchLast = searchLen - 1;",
      "right" : "int searchLast = searchLen - 1;",
      "info" : "VariableDeclarationStatement[70188-70219]:VariableDeclarationStatement[70369-70400]"
    }, {
      "left" : "outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                        continue outer;\n                    }\n                }\n            }\n            return i;\n        }",
      "right" : "outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                        continue outer;\n                    }\n                }\n            }\n            return i;\n        }",
      "info" : "LabeledStatement[70228-70790]:LabeledStatement[70409-70971]"
    }, {
      "left" : "for (int i = 0; i < csLen; i++)",
      "right" : "for (int i = 0; i < csLen; i++)",
      "info" : "ForStatement[70243-70790]:ForStatement[70424-70971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70275-70790]:Block[70456-70971]"
    }, {
      "left" : "char ch = cs.charAt(i);",
      "right" : "char ch = cs.charAt(i);",
      "info" : "VariableDeclarationStatement[70289-70312]:VariableDeclarationStatement[70470-70493]"
    }, {
      "left" : "for (int j = 0; j < searchLen; j++)",
      "right" : "for (int j = 0; j < searchLen; j++)",
      "info" : "ForStatement[70325-70758]:ForStatement[70506-70939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70361-70758]:Block[70542-70939]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[70379-70744]:IfStatement[70560-70925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70405-70744]:Block[70586-70925]"
    }, {
      "left" : "if (i < csLast && j < searchLast && Character.isHighSurrogate(ch))",
      "right" : "if (i < csLast && j < searchLast && Character.isHighSurrogate(ch))",
      "info" : "IfStatement[70427-70726]:IfStatement[70608-70907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70494-70657]:Block[70675-70838]"
    }, {
      "left" : "if (searchChars[j + 1] == cs.charAt(i + 1))",
      "right" : "if (searchChars[j + 1] == cs.charAt(i + 1))",
      "info" : "IfStatement[70520-70635]:IfStatement[70701-70816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70564-70635]:Block[70745-70816]"
    }, {
      "left" : "continue outer;",
      "right" : "continue outer;",
      "info" : "ContinueStatement[70594-70609]:ContinueStatement[70775-70790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70663-70726]:Block[70844-70907]"
    }, {
      "left" : "continue outer;",
      "right" : "continue outer;",
      "info" : "ContinueStatement[70689-70704]:ContinueStatement[70870-70885]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[70771-70780]:ReturnStatement[70952-70961]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[70799-70822]:ReturnStatement[70980-71003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71965-72670]:Block[72146-72851]"
    }, {
      "left" : "if (isEmpty(seq) || isEmpty(searchChars))",
      "right" : "if (isEmpty(seq) || isEmpty(searchChars))",
      "info" : "IfStatement[71975-72064]:IfStatement[72156-72245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72017-72064]:Block[72198-72245]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[72031-72054]:ReturnStatement[72212-72235]"
    }, {
      "left" : "int strLen = seq.length();",
      "right" : "int strLen = seq.length();",
      "info" : "VariableDeclarationStatement[72073-72099]:VariableDeclarationStatement[72254-72280]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[72108-72632]:ForStatement[72289-72813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72141-72632]:Block[72322-72813]"
    }, {
      "left" : "char ch = seq.charAt(i);",
      "right" : "char ch = seq.charAt(i);",
      "info" : "VariableDeclarationStatement[72155-72179]:VariableDeclarationStatement[72336-72360]"
    }, {
      "left" : "boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;",
      "right" : "boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;",
      "info" : "VariableDeclarationStatement[72192-72261]:VariableDeclarationStatement[72373-72442]"
    }, {
      "left" : "if (i + 1 < strLen && Character.isHighSurrogate(ch))",
      "right" : "if (i + 1 < strLen && Character.isHighSurrogate(ch))",
      "info" : "IfStatement[72274-72622]:IfStatement[72455-72803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72327-72521]:Block[72508-72702]"
    }, {
      "left" : "char ch2 = seq.charAt(i + 1);",
      "right" : "char ch2 = seq.charAt(i + 1);",
      "info" : "VariableDeclarationStatement[72345-72374]:VariableDeclarationStatement[72526-72555]"
    }, {
      "left" : "if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0)",
      "right" : "if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0)",
      "info" : "IfStatement[72391-72507]:IfStatement[72572-72688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72458-72507]:Block[72639-72688]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72480-72489]:ReturnStatement[72661-72670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72527-72622]:Block[72708-72803]"
    }, {
      "left" : "if (!chFound)",
      "right" : "if (!chFound)",
      "info" : "IfStatement[72545-72608]:IfStatement[72726-72789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72559-72608]:Block[72740-72789]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[72581-72590]:ReturnStatement[72762-72771]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[72641-72664]:ReturnStatement[72822-72845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73860-74216]:Block[74041-74397]"
    }, {
      "left" : "if (valid == null || cs == null)",
      "right" : "if (valid == null || cs == null)",
      "info" : "IfStatement[73944-74014]:IfStatement[74125-74195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73977-74014]:Block[74158-74195]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73991-74004]:ReturnStatement[74172-74185]"
    }, {
      "left" : "if (cs.length() == 0)",
      "right" : "if (cs.length() == 0)",
      "info" : "IfStatement[74023-74081]:IfStatement[74204-74262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74045-74081]:Block[74226-74262]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[74059-74071]:ReturnStatement[74240-74252]"
    }, {
      "left" : "if (valid.length == 0)",
      "right" : "if (valid.length == 0)",
      "info" : "IfStatement[74090-74150]:IfStatement[74271-74331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74113-74150]:Block[74294-74331]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[74127-74140]:ReturnStatement[74308-74321]"
    }, {
      "left" : "return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;",
      "right" : "return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[74159-74210]:ReturnStatement[74340-74391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75335-75485]:Block[75516-75666]"
    }, {
      "left" : "if (cs == null || validChars == null)",
      "right" : "if (cs == null || validChars == null)",
      "info" : "IfStatement[75345-75420]:IfStatement[75526-75601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75383-75420]:Block[75564-75601]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75397-75410]:ReturnStatement[75578-75591]"
    }, {
      "left" : "return containsOnly(cs, validChars.toCharArray());",
      "right" : "return containsOnly(cs, validChars.toCharArray());",
      "info" : "ReturnStatement[75429-75479]:ReturnStatement[75610-75660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76711-77752]:Block[76892-77933]"
    }, {
      "left" : "if (cs == null || searchChars == null)",
      "right" : "if (cs == null || searchChars == null)",
      "info" : "IfStatement[76721-76796]:IfStatement[76902-76977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76760-76796]:Block[76941-76977]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[76774-76786]:ReturnStatement[76955-76967]"
    }, {
      "left" : "int csLen = cs.length();",
      "right" : "int csLen = cs.length();",
      "info" : "VariableDeclarationStatement[76805-76829]:VariableDeclarationStatement[76986-77010]"
    }, {
      "left" : "int csLast = csLen - 1;",
      "right" : "int csLast = csLen - 1;",
      "info" : "VariableDeclarationStatement[76838-76861]:VariableDeclarationStatement[77019-77042]"
    }, {
      "left" : "int searchLen = searchChars.length;",
      "right" : "int searchLen = searchChars.length;",
      "info" : "VariableDeclarationStatement[76870-76905]:VariableDeclarationStatement[77051-77086]"
    }, {
      "left" : "int searchLast = searchLen - 1;",
      "right" : "int searchLast = searchLen - 1;",
      "info" : "VariableDeclarationStatement[76914-76945]:VariableDeclarationStatement[77095-77126]"
    }, {
      "left" : "for (int i = 0; i < csLen; i++)",
      "right" : "for (int i = 0; i < csLen; i++)",
      "info" : "ForStatement[76954-77725]:ForStatement[77135-77906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76986-77725]:Block[77167-77906]"
    }, {
      "left" : "char ch = cs.charAt(i);",
      "right" : "char ch = cs.charAt(i);",
      "info" : "VariableDeclarationStatement[77000-77023]:VariableDeclarationStatement[77181-77204]"
    }, {
      "left" : "for (int j = 0; j < searchLen; j++)",
      "right" : "for (int j = 0; j < searchLen; j++)",
      "info" : "ForStatement[77036-77715]:ForStatement[77217-77896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77072-77715]:Block[77253-77896]"
    }, {
      "left" : "if (searchChars[j] == ch)",
      "right" : "if (searchChars[j] == ch)",
      "info" : "IfStatement[77090-77701]:IfStatement[77271-77882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77116-77701]:Block[77297-77882]"
    }, {
      "left" : "if (Character.isHighSurrogate(ch))",
      "right" : "if (Character.isHighSurrogate(ch))",
      "info" : "IfStatement[77138-77683]:IfStatement[77319-77864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77173-77551]:Block[77354-77732]"
    }, {
      "left" : "if (j == searchLast)",
      "right" : "if (j == searchLast)",
      "info" : "IfStatement[77199-77377]:IfStatement[77380-77558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77220-77377]:Block[77401-77558]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77338-77351]:ReturnStatement[77519-77532]"
    }, {
      "left" : "if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1))",
      "right" : "if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1))",
      "info" : "IfStatement[77402-77529]:IfStatement[77583-77710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77460-77529]:Block[77641-77710]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77490-77503]:ReturnStatement[77671-77684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77557-77683]:Block[77738-77864]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77648-77661]:ReturnStatement[77829-77842]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[77734-77746]:ReturnStatement[77915-77927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78866-79019]:Block[79047-79200]"
    }, {
      "left" : "if (cs == null || invalidChars == null)",
      "right" : "if (cs == null || invalidChars == null)",
      "info" : "IfStatement[78876-78952]:IfStatement[79057-79133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78916-78952]:Block[79097-79133]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[78930-78942]:ReturnStatement[79111-79123]"
    }, {
      "left" : "return containsNone(cs, invalidChars.toCharArray());",
      "right" : "return containsNone(cs, invalidChars.toCharArray());",
      "info" : "ReturnStatement[78961-79013]:ReturnStatement[79142-79194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80658-81360]:Block[80839-81541]"
    }, {
      "left" : "if (str == null || searchStrs == null)",
      "right" : "if (str == null || searchStrs == null)",
      "info" : "IfStatement[80668-80754]:IfStatement[80849-80935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80707-80754]:Block[80888-80935]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[80721-80744]:ReturnStatement[80902-80925]"
    }, {
      "left" : "int sz = searchStrs.length;",
      "right" : "int sz = searchStrs.length;",
      "info" : "VariableDeclarationStatement[80763-80790]:VariableDeclarationStatement[80944-80971]"
    }, {
      "left" : "int ret = Integer.MAX_VALUE;",
      "right" : "int ret = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[80852-80880]:VariableDeclarationStatement[81033-81061]"
    }, {
      "left" : "int tmp = 0;",
      "right" : "int tmp = 0;",
      "info" : "VariableDeclarationStatement[80890-80902]:VariableDeclarationStatement[81071-81083]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[80911-81288]:ForStatement[81092-81469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80940-81288]:Block[81121-81469]"
    }, {
      "left" : "CharSequence search = searchStrs[i];",
      "right" : "CharSequence search = searchStrs[i];",
      "info" : "VariableDeclarationStatement[80954-80990]:VariableDeclarationStatement[81135-81171]"
    }, {
      "left" : "if (search == null)",
      "right" : "if (search == null)",
      "info" : "IfStatement[81003-81064]:IfStatement[81184-81245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81023-81064]:Block[81204-81245]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[81041-81050]:ContinueStatement[81222-81231]"
    }, {
      "left" : "tmp = CharSequenceUtils.indexOf(str, search, 0);",
      "right" : "tmp = CharSequenceUtils.indexOf(str, search, 0);",
      "info" : "ExpressionStatement[81077-81125]:ExpressionStatement[81258-81306]"
    }, {
      "left" : "if (tmp == INDEX_NOT_FOUND)",
      "right" : "if (tmp == INDEX_NOT_FOUND)",
      "info" : "IfStatement[81138-81207]:IfStatement[81319-81388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81166-81207]:Block[81347-81388]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[81184-81193]:ContinueStatement[81365-81374]"
    }, {
      "left" : "if (tmp < ret)",
      "right" : "if (tmp < ret)",
      "info" : "IfStatement[81221-81278]:IfStatement[81402-81459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81236-81278]:Block[81417-81459]"
    }, {
      "left" : "ret = tmp;",
      "right" : "ret = tmp;",
      "info" : "ExpressionStatement[81254-81264]:ExpressionStatement[81435-81445]"
    }, {
      "left" : "return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;",
      "right" : "return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;",
      "info" : "ReturnStatement[81298-81354]:ReturnStatement[81479-81535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82872-83404]:Block[83053-83585]"
    }, {
      "left" : "if (str == null || searchStrs == null)",
      "right" : "if (str == null || searchStrs == null)",
      "info" : "IfStatement[82882-82968]:IfStatement[83063-83149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82921-82968]:Block[83102-83149]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[82935-82958]:ReturnStatement[83116-83139]"
    }, {
      "left" : "int sz = searchStrs.length;",
      "right" : "int sz = searchStrs.length;",
      "info" : "VariableDeclarationStatement[82977-83004]:VariableDeclarationStatement[83158-83185]"
    }, {
      "left" : "int ret = INDEX_NOT_FOUND;",
      "right" : "int ret = INDEX_NOT_FOUND;",
      "info" : "VariableDeclarationStatement[83013-83039]:VariableDeclarationStatement[83194-83220]"
    }, {
      "left" : "int tmp = 0;",
      "right" : "int tmp = 0;",
      "info" : "VariableDeclarationStatement[83048-83060]:VariableDeclarationStatement[83229-83241]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[83069-83378]:ForStatement[83250-83559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83098-83378]:Block[83279-83559]"
    }, {
      "left" : "CharSequence search = searchStrs[i];",
      "right" : "CharSequence search = searchStrs[i];",
      "info" : "VariableDeclarationStatement[83112-83148]:VariableDeclarationStatement[83293-83329]"
    }, {
      "left" : "if (search == null)",
      "right" : "if (search == null)",
      "info" : "IfStatement[83161-83222]:IfStatement[83342-83403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83181-83222]:Block[83362-83403]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[83199-83208]:ContinueStatement[83380-83389]"
    }, {
      "left" : "tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());",
      "right" : "tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());",
      "info" : "ExpressionStatement[83235-83298]:ExpressionStatement[83416-83479]"
    }, {
      "left" : "if (tmp > ret)",
      "right" : "if (tmp > ret)",
      "info" : "IfStatement[83311-83368]:IfStatement[83492-83549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83326-83368]:Block[83507-83549]"
    }, {
      "left" : "ret = tmp;",
      "right" : "ret = tmp;",
      "info" : "ExpressionStatement[83344-83354]:ExpressionStatement[83525-83535]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[83387-83398]:ReturnStatement[83568-83579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84540-84945]:Block[84721-85126]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[84550-84603]:IfStatement[84731-84784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84567-84603]:Block[84748-84784]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[84581-84593]:ReturnStatement[84762-84774]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[84672-84770]:IfStatement[84853-84951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84687-84770]:Block[84868-84951]"
    }, {
      "left" : "start = str.length() + start;",
      "right" : "start = str.length() + start;",
      "info" : "ExpressionStatement[84701-84730]:ExpressionStatement[84882-84911]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[84780-84829]:IfStatement[84961-85010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84795-84829]:Block[84976-85010]"
    }, {
      "left" : "start = 0;",
      "right" : "start = 0;",
      "info" : "ExpressionStatement[84809-84819]:ExpressionStatement[84990-85000]"
    }, {
      "left" : "if (start > str.length())",
      "right" : "if (start > str.length())",
      "info" : "IfStatement[84838-84901]:IfStatement[85019-85082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84864-84901]:Block[85045-85082]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[84878-84891]:ReturnStatement[85059-85072]"
    }, {
      "left" : "return str.substring(start);",
      "right" : "return str.substring(start);",
      "info" : "ReturnStatement[84911-84939]:ReturnStatement[85092-85120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86656-87337]:Block[86837-87518]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[86666-86719]:IfStatement[86847-86900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86683-86719]:Block[86864-86900]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[86697-86709]:ReturnStatement[86878-86890]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[86757-86847]:IfStatement[86938-87028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86770-86847]:Block[86951-87028]"
    }, {
      "left" : "end = str.length() + end;",
      "right" : "end = str.length() + end;",
      "info" : "ExpressionStatement[86784-86809]:ExpressionStatement[86965-86990]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[86856-86954]:IfStatement[87037-87135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86871-86954]:Block[87052-87135]"
    }, {
      "left" : "start = str.length() + start;",
      "right" : "start = str.length() + start;",
      "info" : "ExpressionStatement[86885-86914]:ExpressionStatement[87066-87095]"
    }, {
      "left" : "if (end > str.length())",
      "right" : "if (end > str.length())",
      "info" : "IfStatement[86993-87060]:IfStatement[87174-87241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87017-87060]:Block[87198-87241]"
    }, {
      "left" : "end = str.length();",
      "right" : "end = str.length();",
      "info" : "ExpressionStatement[87031-87050]:ExpressionStatement[87212-87231]"
    }, {
      "left" : "if (start > end)",
      "right" : "if (start > end)",
      "info" : "IfStatement[87121-87175]:IfStatement[87302-87356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87138-87175]:Block[87319-87356]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[87152-87165]:ReturnStatement[87333-87346]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[87185-87234]:IfStatement[87366-87415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87200-87234]:Block[87381-87415]"
    }, {
      "left" : "start = 0;",
      "right" : "start = 0;",
      "info" : "ExpressionStatement[87214-87224]:ExpressionStatement[87395-87405]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[87243-87288]:IfStatement[87424-87469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87256-87288]:Block[87437-87469]"
    }, {
      "left" : "end = 0;",
      "right" : "end = 0;",
      "info" : "ExpressionStatement[87270-87278]:ExpressionStatement[87451-87459]"
    }, {
      "left" : "return str.substring(start, end);",
      "right" : "return str.substring(start, end);",
      "info" : "ReturnStatement[87298-87331]:ReturnStatement[87479-87512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88283-88518]:Block[88464-88699]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[88293-88346]:IfStatement[88474-88527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88310-88346]:Block[88491-88527]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[88324-88336]:ReturnStatement[88505-88517]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[88355-88405]:IfStatement[88536-88586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88368-88405]:Block[88549-88586]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[88382-88395]:ReturnStatement[88563-88576]"
    }, {
      "left" : "if (str.length() <= len)",
      "right" : "if (str.length() <= len)",
      "info" : "IfStatement[88414-88474]:IfStatement[88595-88655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88439-88474]:Block[88620-88655]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[88453-88464]:ReturnStatement[88634-88645]"
    }, {
      "left" : "return str.substring(0, len);",
      "right" : "return str.substring(0, len);",
      "info" : "ReturnStatement[88483-88512]:ReturnStatement[88664-88693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89377-89624]:Block[89558-89805]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[89387-89440]:IfStatement[89568-89621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89404-89440]:Block[89585-89621]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[89418-89430]:ReturnStatement[89599-89611]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[89449-89499]:IfStatement[89630-89680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89462-89499]:Block[89643-89680]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[89476-89489]:ReturnStatement[89657-89670]"
    }, {
      "left" : "if (str.length() <= len)",
      "right" : "if (str.length() <= len)",
      "info" : "IfStatement[89508-89568]:IfStatement[89689-89749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89533-89568]:Block[89714-89749]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[89547-89558]:ReturnStatement[89728-89739]"
    }, {
      "left" : "return str.substring(str.length() - len);",
      "right" : "return str.substring(str.length() - len);",
      "info" : "ReturnStatement[89577-89618]:ReturnStatement[89758-89799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90742-91082]:Block[90923-91263]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[90752-90805]:IfStatement[90933-90986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90769-90805]:Block[90950-90986]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[90783-90795]:ReturnStatement[90964-90976]"
    }, {
      "left" : "if (len < 0 || pos > str.length())",
      "right" : "if (len < 0 || pos > str.length())",
      "info" : "IfStatement[90814-90886]:IfStatement[90995-91067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90849-90886]:Block[91030-91067]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[90863-90876]:ReturnStatement[91044-91057]"
    }, {
      "left" : "if (pos < 0)",
      "right" : "if (pos < 0)",
      "info" : "IfStatement[90895-90940]:IfStatement[91076-91121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90908-90940]:Block[91089-91121]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[90922-90930]:ExpressionStatement[91103-91111]"
    }, {
      "left" : "if (str.length() <= pos + len)",
      "right" : "if (str.length() <= pos + len)",
      "info" : "IfStatement[90949-91030]:IfStatement[91130-91211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90980-91030]:Block[91161-91211]"
    }, {
      "left" : "return str.substring(pos);",
      "right" : "return str.substring(pos);",
      "info" : "ReturnStatement[90994-91020]:ReturnStatement[91175-91201]"
    }, {
      "left" : "return str.substring(pos, pos + len);",
      "right" : "return str.substring(pos, pos + len);",
      "info" : "ReturnStatement[91039-91076]:ReturnStatement[91220-91257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92424-92741]:Block[92605-92922]"
    }, {
      "left" : "if (isEmpty(str) || separator == null)",
      "right" : "if (isEmpty(str) || separator == null)",
      "info" : "IfStatement[92434-92508]:IfStatement[92615-92689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92473-92508]:Block[92654-92689]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[92487-92498]:ReturnStatement[92668-92679]"
    }, {
      "left" : "if (separator.length() == 0)",
      "right" : "if (separator.length() == 0)",
      "info" : "IfStatement[92517-92583]:IfStatement[92698-92764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92546-92583]:Block[92727-92764]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[92560-92573]:ReturnStatement[92741-92754]"
    }, {
      "left" : "int pos = str.indexOf(separator);",
      "right" : "int pos = str.indexOf(separator);",
      "info" : "VariableDeclarationStatement[92592-92625]:VariableDeclarationStatement[92773-92806]"
    }, {
      "left" : "if (pos == INDEX_NOT_FOUND)",
      "right" : "if (pos == INDEX_NOT_FOUND)",
      "info" : "IfStatement[92634-92697]:IfStatement[92815-92878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92662-92697]:Block[92843-92878]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[92676-92687]:ReturnStatement[92857-92868]"
    }, {
      "left" : "return str.substring(0, pos);",
      "right" : "return str.substring(0, pos);",
      "info" : "ReturnStatement[92706-92735]:ReturnStatement[92887-92916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94002-94312]:Block[94183-94493]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[94012-94065]:IfStatement[94193-94246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94030-94065]:Block[94211-94246]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[94044-94055]:ReturnStatement[94225-94236]"
    }, {
      "left" : "if (separator == null)",
      "right" : "if (separator == null)",
      "info" : "IfStatement[94074-94134]:IfStatement[94255-94315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94097-94134]:Block[94278-94315]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[94111-94124]:ReturnStatement[94292-94305]"
    }, {
      "left" : "int pos = str.indexOf(separator);",
      "right" : "int pos = str.indexOf(separator);",
      "info" : "VariableDeclarationStatement[94143-94176]:VariableDeclarationStatement[94324-94357]"
    }, {
      "left" : "if (pos == INDEX_NOT_FOUND)",
      "right" : "if (pos == INDEX_NOT_FOUND)",
      "info" : "IfStatement[94185-94250]:IfStatement[94366-94431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94213-94250]:Block[94394-94431]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[94227-94240]:ReturnStatement[94408-94421]"
    }, {
      "left" : "return str.substring(pos + separator.length());",
      "right" : "return str.substring(pos + separator.length());",
      "info" : "ReturnStatement[94259-94306]:ReturnStatement[94440-94487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95581-95828]:Block[95762-96009]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(separator))",
      "right" : "if (isEmpty(str) || isEmpty(separator))",
      "info" : "IfStatement[95591-95666]:IfStatement[95772-95847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95631-95666]:Block[95812-95847]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[95645-95656]:ReturnStatement[95826-95837]"
    }, {
      "left" : "int pos = str.lastIndexOf(separator);",
      "right" : "int pos = str.lastIndexOf(separator);",
      "info" : "VariableDeclarationStatement[95675-95712]:VariableDeclarationStatement[95856-95893]"
    }, {
      "left" : "if (pos == INDEX_NOT_FOUND)",
      "right" : "if (pos == INDEX_NOT_FOUND)",
      "info" : "IfStatement[95721-95784]:IfStatement[95902-95965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95749-95784]:Block[95930-95965]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[95763-95774]:ReturnStatement[95944-95955]"
    }, {
      "left" : "return str.substring(0, pos);",
      "right" : "return str.substring(0, pos);",
      "info" : "ReturnStatement[95793-95822]:ReturnStatement[95974-96003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97185-97544]:Block[97366-97725]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[97195-97248]:IfStatement[97376-97429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97213-97248]:Block[97394-97429]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[97227-97238]:ReturnStatement[97408-97419]"
    }, {
      "left" : "if (isEmpty(separator))",
      "right" : "if (isEmpty(separator))",
      "info" : "IfStatement[97257-97318]:IfStatement[97438-97499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97281-97318]:Block[97462-97499]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[97295-97308]:ReturnStatement[97476-97489]"
    }, {
      "left" : "int pos = str.lastIndexOf(separator);",
      "right" : "int pos = str.lastIndexOf(separator);",
      "info" : "VariableDeclarationStatement[97327-97364]:VariableDeclarationStatement[97508-97545]"
    }, {
      "left" : "if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length())",
      "right" : "if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length())",
      "info" : "IfStatement[97373-97482]:IfStatement[97554-97663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97445-97482]:Block[97626-97663]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[97459-97472]:ReturnStatement[97640-97653]"
    }, {
      "left" : "return str.substring(pos + separator.length());",
      "right" : "return str.substring(pos + separator.length());",
      "info" : "ReturnStatement[97491-97538]:ReturnStatement[97672-97719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98578-98633]:Block[98759-98814]"
    }, {
      "left" : "return substringBetween(str, tag, tag);",
      "right" : "return substringBetween(str, tag, tag);",
      "info" : "ReturnStatement[98588-98627]:ReturnStatement[98769-98808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99994-100393]:Block[100175-100574]"
    }, {
      "left" : "if (str == null || open == null || close == null)",
      "right" : "if (str == null || open == null || close == null)",
      "info" : "IfStatement[100004-100090]:IfStatement[100185-100271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100054-100090]:Block[100235-100271]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[100068-100080]:ReturnStatement[100249-100261]"
    }, {
      "left" : "int start = str.indexOf(open);",
      "right" : "int start = str.indexOf(open);",
      "info" : "VariableDeclarationStatement[100099-100129]:VariableDeclarationStatement[100280-100310]"
    }, {
      "left" : "if (start != INDEX_NOT_FOUND)",
      "right" : "if (start != INDEX_NOT_FOUND)",
      "info" : "IfStatement[100138-100366]:IfStatement[100319-100547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100168-100366]:Block[100349-100547]"
    }, {
      "left" : "int end = str.indexOf(close, start + open.length());",
      "right" : "int end = str.indexOf(close, start + open.length());",
      "info" : "VariableDeclarationStatement[100182-100234]:VariableDeclarationStatement[100363-100415]"
    }, {
      "left" : "if (end != INDEX_NOT_FOUND)",
      "right" : "if (end != INDEX_NOT_FOUND)",
      "info" : "IfStatement[100247-100356]:IfStatement[100428-100537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100275-100356]:Block[100456-100537]"
    }, {
      "left" : "return str.substring(start + open.length(), end);",
      "right" : "return str.substring(start + open.length(), end);",
      "info" : "ReturnStatement[100293-100342]:ReturnStatement[100474-100523]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[100375-100387]:ReturnStatement[100556-100568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101581-102469]:Block[101762-102650]"
    }, {
      "left" : "if (str == null || isEmpty(open) || isEmpty(close))",
      "right" : "if (str == null || isEmpty(open) || isEmpty(close))",
      "info" : "IfStatement[101591-101679]:IfStatement[101772-101860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101643-101679]:Block[101824-101860]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[101657-101669]:ReturnStatement[101838-101850]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[101688-101714]:VariableDeclarationStatement[101869-101895]"
    }, {
      "left" : "if (strLen == 0)",
      "right" : "if (strLen == 0)",
      "info" : "IfStatement[101723-101801]:IfStatement[101904-101982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101740-101801]:Block[101921-101982]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[101754-101791]:ReturnStatement[101935-101972]"
    }, {
      "left" : "int closeLen = close.length();",
      "right" : "int closeLen = close.length();",
      "info" : "VariableDeclarationStatement[101810-101840]:VariableDeclarationStatement[101991-102021]"
    }, {
      "left" : "int openLen = open.length();",
      "right" : "int openLen = open.length();",
      "info" : "VariableDeclarationStatement[101849-101877]:VariableDeclarationStatement[102030-102058]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[101886-101930]:VariableDeclarationStatement[102067-102111]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[101939-101951]:VariableDeclarationStatement[102120-102132]"
    }, {
      "left" : "while (pos < strLen - closeLen)",
      "right" : "while (pos < strLen - closeLen)",
      "info" : "WhileStatement[101960-102343]:WhileStatement[102141-102524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101992-102343]:Block[102173-102524]"
    }, {
      "left" : "int start = str.indexOf(open, pos);",
      "right" : "int start = str.indexOf(open, pos);",
      "info" : "VariableDeclarationStatement[102006-102041]:VariableDeclarationStatement[102187-102222]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[102054-102107]:IfStatement[102235-102288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102069-102107]:Block[102250-102288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[102087-102093]:BreakStatement[102268-102274]"
    }, {
      "left" : "start += openLen;",
      "right" : "start += openLen;",
      "info" : "ExpressionStatement[102120-102137]:ExpressionStatement[102301-102318]"
    }, {
      "left" : "int end = str.indexOf(close, start);",
      "right" : "int end = str.indexOf(close, start);",
      "info" : "VariableDeclarationStatement[102150-102186]:VariableDeclarationStatement[102331-102367]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[102199-102250]:IfStatement[102380-102431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102212-102250]:Block[102393-102431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[102230-102236]:BreakStatement[102411-102417]"
    }, {
      "left" : "list.add(str.substring(start, end));",
      "right" : "list.add(str.substring(start, end));",
      "info" : "ExpressionStatement[102263-102299]:ExpressionStatement[102444-102480]"
    }, {
      "left" : "pos = end + closeLen;",
      "right" : "pos = end + closeLen;",
      "info" : "ExpressionStatement[102312-102333]:ExpressionStatement[102493-102514]"
    }, {
      "left" : "if (list.isEmpty())",
      "right" : "if (list.isEmpty())",
      "info" : "IfStatement[102352-102408]:IfStatement[102533-102589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102372-102408]:Block[102553-102589]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[102386-102398]:ReturnStatement[102567-102579]"
    }, {
      "left" : "return list.toArray(new String [list.size()]);",
      "right" : "return list.toArray(new String [list.size()]);",
      "info" : "ReturnStatement[102417-102463]:ReturnStatement[102598-102644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103584-103628]:Block[103765-103809]"
    }, {
      "left" : "return split(str, null, -1);",
      "right" : "return split(str, null, -1);",
      "info" : "ReturnStatement[103594-103622]:ReturnStatement[103775-103803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104701-104763]:Block[104882-104944]"
    }, {
      "left" : "return splitWorker(str, separatorChar, false);",
      "right" : "return splitWorker(str, separatorChar, false);",
      "info" : "ReturnStatement[104711-104757]:ReturnStatement[104892-104938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105933-106000]:Block[106114-106181]"
    }, {
      "left" : "return splitWorker(str, separatorChars, -1, false);",
      "right" : "return splitWorker(str, separatorChars, -1, false);",
      "info" : "ReturnStatement[105943-105994]:ReturnStatement[106124-106175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107479-107547]:Block[107660-107728]"
    }, {
      "left" : "return splitWorker(str, separatorChars, max, false);",
      "right" : "return splitWorker(str, separatorChars, max, false);",
      "info" : "ReturnStatement[107489-107541]:ReturnStatement[107670-107722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108774-108855]:Block[108955-109036]"
    }, {
      "left" : "return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",
      "right" : "return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",
      "info" : "ReturnStatement[108784-108849]:ReturnStatement[108965-109030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110382-110461]:Block[110563-110642]"
    }, {
      "left" : "return splitByWholeSeparatorWorker(str, separator, max, false);",
      "right" : "return splitByWholeSeparatorWorker(str, separator, max, false);",
      "info" : "ReturnStatement[110392-110455]:ReturnStatement[110573-110636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111907-111984]:Block[112088-112165]"
    }, {
      "left" : "return splitByWholeSeparatorWorker(str, separator, -1, true);",
      "right" : "return splitByWholeSeparatorWorker(str, separator, -1, true);",
      "info" : "ReturnStatement[111917-111978]:ReturnStatement[112098-112159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113744-113822]:Block[113925-114003]"
    }, {
      "left" : "return splitByWholeSeparatorWorker(str, separator, max, true);",
      "right" : "return splitByWholeSeparatorWorker(str, separator, max, true);",
      "info" : "ReturnStatement[113754-113816]:ReturnStatement[113935-113997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114675-116957]:Block[114856-117138]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[114685-114738]:IfStatement[114866-114919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114702-114738]:Block[114883-114919]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[114716-114728]:ReturnStatement[114897-114909]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[114748-114771]:VariableDeclarationStatement[114929-114952]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[114781-114856]:IfStatement[114962-115037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114795-114856]:Block[114976-115037]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[114809-114846]:ReturnStatement[114990-115027]"
    }, {
      "left" : "if (separator == null || EMPTY.equals(separator))",
      "right" : "if (separator == null || EMPTY.equals(separator))",
      "info" : "IfStatement[114866-115030]:IfStatement[115047-115211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114916-115030]:Block[115097-115211]"
    }, {
      "left" : "return splitWorker(str, null, max, preserveAllTokens);",
      "right" : "return splitWorker(str, null, max, preserveAllTokens);",
      "info" : "ReturnStatement[114966-115020]:ReturnStatement[115147-115201]"
    }, {
      "left" : "int separatorLength = separator.length();",
      "right" : "int separatorLength = separator.length();",
      "info" : "VariableDeclarationStatement[115040-115081]:VariableDeclarationStatement[115221-115262]"
    }, {
      "left" : "ArrayList<String> substrings = new ArrayList<String>();",
      "right" : "ArrayList<String> substrings = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[115091-115146]:VariableDeclarationStatement[115272-115327]"
    }, {
      "left" : "int numberOfSubstrings = 0;",
      "right" : "int numberOfSubstrings = 0;",
      "info" : "VariableDeclarationStatement[115155-115182]:VariableDeclarationStatement[115336-115363]"
    }, {
      "left" : "int beg = 0;",
      "right" : "int beg = 0;",
      "info" : "VariableDeclarationStatement[115191-115203]:VariableDeclarationStatement[115372-115384]"
    }, {
      "left" : "int end = 0;",
      "right" : "int end = 0;",
      "info" : "VariableDeclarationStatement[115212-115224]:VariableDeclarationStatement[115393-115405]"
    }, {
      "left" : "while (end < len)",
      "right" : "while (end < len)",
      "info" : "WhileStatement[115233-116884]:WhileStatement[115414-117065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115251-116884]:Block[115432-117065]"
    }, {
      "left" : "end = str.indexOf(separator, beg);",
      "right" : "end = str.indexOf(separator, beg);",
      "info" : "ExpressionStatement[115265-115299]:ExpressionStatement[115446-115480]"
    }, {
      "left" : "if (end > -1)",
      "right" : "if (end > -1)",
      "info" : "IfStatement[115313-116874]:IfStatement[115494-117055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115327-116689]:Block[115508-116870]"
    }, {
      "left" : "if (end > beg)",
      "right" : "if (end > beg)",
      "info" : "IfStatement[115345-116675]:IfStatement[115526-116856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115360-116128]:Block[115541-116309]"
    }, {
      "left" : "numberOfSubstrings += 1;",
      "right" : "numberOfSubstrings += 1;",
      "info" : "ExpressionStatement[115382-115406]:ExpressionStatement[115563-115587]"
    }, {
      "left" : "if (numberOfSubstrings == max)",
      "right" : "if (numberOfSubstrings == max)",
      "info" : "IfStatement[115428-116110]:IfStatement[115609-116291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115459-115577]:Block[115640-115758]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[115485-115495]:ExpressionStatement[115666-115676]"
    }, {
      "left" : "substrings.add(str.substring(beg));",
      "right" : "substrings.add(str.substring(beg));",
      "info" : "ExpressionStatement[115520-115555]:ExpressionStatement[115701-115736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115583-116110]:Block[115764-116291]"
    }, {
      "left" : "substrings.add(str.substring(beg, end));",
      "right" : "substrings.add(str.substring(beg, end));",
      "info" : "ExpressionStatement[115767-115807]:ExpressionStatement[115948-115988]"
    }, {
      "left" : "beg = end + separatorLength;",
      "right" : "beg = end + separatorLength;",
      "info" : "ExpressionStatement[116060-116088]:ExpressionStatement[116241-116269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116134-116675]:Block[116315-116856]"
    }, {
      "left" : "if (preserveAllTokens)",
      "right" : "if (preserveAllTokens)",
      "info" : "IfStatement[116243-116608]:IfStatement[116424-116789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116266-116608]:Block[116447-116789]"
    }, {
      "left" : "numberOfSubstrings += 1;",
      "right" : "numberOfSubstrings += 1;",
      "info" : "ExpressionStatement[116292-116316]:ExpressionStatement[116473-116497]"
    }, {
      "left" : "if (numberOfSubstrings == max)",
      "right" : "if (numberOfSubstrings == max)",
      "info" : "IfStatement[116341-116586]:IfStatement[116522-116767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116372-116502]:Block[116553-116683]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[116402-116412]:ExpressionStatement[116583-116593]"
    }, {
      "left" : "substrings.add(str.substring(beg));",
      "right" : "substrings.add(str.substring(beg));",
      "info" : "ExpressionStatement[116441-116476]:ExpressionStatement[116622-116657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116508-116586]:Block[116689-116767]"
    }, {
      "left" : "substrings.add(EMPTY);",
      "right" : "substrings.add(EMPTY);",
      "info" : "ExpressionStatement[116538-116560]:ExpressionStatement[116719-116741]"
    }, {
      "left" : "beg = end + separatorLength;",
      "right" : "beg = end + separatorLength;",
      "info" : "ExpressionStatement[116629-116657]:ExpressionStatement[116810-116838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116695-116874]:Block[116876-117055]"
    }, {
      "left" : "substrings.add(str.substring(beg));",
      "right" : "substrings.add(str.substring(beg));",
      "info" : "ExpressionStatement[116798-116833]:ExpressionStatement[116979-117014]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[116850-116860]:ExpressionStatement[117031-117041]"
    }, {
      "left" : "return substrings.toArray(new String[substrings.size()]);",
      "right" : "return substrings.toArray(new String[substrings.size()]);",
      "info" : "ReturnStatement[116894-116951]:ReturnStatement[117075-117132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118240-118296]:Block[118421-118477]"
    }, {
      "left" : "return splitWorker(str, null, -1, true);",
      "right" : "return splitWorker(str, null, -1, true);",
      "info" : "ReturnStatement[118250-118290]:ReturnStatement[118431-118471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120134-120195]:Block[120315-120376]"
    }, {
      "left" : "return splitWorker(str, separatorChar, true);",
      "right" : "return splitWorker(str, separatorChar, true);",
      "info" : "ReturnStatement[120144-120189]:ReturnStatement[120325-120370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120845-121817]:Block[121026-121998]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[120902-120955]:IfStatement[121083-121136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120919-120955]:Block[121100-121136]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[120933-120945]:ReturnStatement[121114-121126]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[120964-120987]:VariableDeclarationStatement[121145-121168]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[120996-121071]:IfStatement[121177-121252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121010-121071]:Block[121191-121252]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[121024-121061]:ReturnStatement[121205-121242]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[121080-121124]:VariableDeclarationStatement[121261-121305]"
    }, {
      "left" : "int i = 0, start = 0;",
      "right" : "int i = 0, start = 0;",
      "info" : "VariableDeclarationStatement[121133-121154]:VariableDeclarationStatement[121314-121335]"
    }, {
      "left" : "boolean match = false;",
      "right" : "boolean match = false;",
      "info" : "VariableDeclarationStatement[121163-121185]:VariableDeclarationStatement[121344-121366]"
    }, {
      "left" : "boolean lastMatch = false;",
      "right" : "boolean lastMatch = false;",
      "info" : "VariableDeclarationStatement[121194-121220]:VariableDeclarationStatement[121375-121401]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[121229-121645]:WhileStatement[121410-121826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121245-121645]:Block[121426-121826]"
    }, {
      "left" : "if (str.charAt(i) == separatorChar)",
      "right" : "if (str.charAt(i) == separatorChar)",
      "info" : "IfStatement[121259-121561]:IfStatement[121440-121742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121295-121561]:Block[121476-121742]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[121313-121492]:IfStatement[121494-121673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121345-121492]:Block[121526-121673]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[121367-121401]:ExpressionStatement[121548-121582]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[121422-121436]:ExpressionStatement[121603-121617]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[121457-121474]:ExpressionStatement[121638-121655]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[121509-121521]:ExpressionStatement[121690-121702]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[121538-121547]:ContinueStatement[121719-121728]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[121574-121592]:ExpressionStatement[121755-121773]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[121605-121618]:ExpressionStatement[121786-121799]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[121631-121635]:ExpressionStatement[121812-121816]"
    }, {
      "left" : "if (match || preserveAllTokens && lastMatch)",
      "right" : "if (match || preserveAllTokens && lastMatch)",
      "info" : "IfStatement[121654-121757]:IfStatement[121835-121938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121699-121757]:Block[121880-121938]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[121713-121747]:ExpressionStatement[121894-121928]"
    }, {
      "left" : "return list.toArray(new String[list.size()]);",
      "right" : "return list.toArray(new String[list.size()]);",
      "info" : "ReturnStatement[121766-121811]:ReturnStatement[121947-121992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123752-123818]:Block[123933-123999]"
    }, {
      "left" : "return splitWorker(str, separatorChars, -1, true);",
      "right" : "return splitWorker(str, separatorChars, -1, true);",
      "info" : "ReturnStatement[123762-123812]:ReturnStatement[123943-123993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125862-125929]:Block[126043-126110]"
    }, {
      "left" : "return splitWorker(str, separatorChars, max, true);",
      "right" : "return splitWorker(str, separatorChars, max, true);",
      "info" : "ReturnStatement[125872-125923]:ReturnStatement[126053-126104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126711-129626]:Block[126892-129807]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[126891-126944]:IfStatement[127072-127125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126908-126944]:Block[127089-127125]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[126922-126934]:ReturnStatement[127103-127115]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[126953-126976]:VariableDeclarationStatement[127134-127157]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[126985-127060]:IfStatement[127166-127241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126999-127060]:Block[127180-127241]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[127013-127050]:ReturnStatement[127194-127231]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[127069-127113]:VariableDeclarationStatement[127250-127294]"
    }, {
      "left" : "int sizePlus1 = 1;",
      "right" : "int sizePlus1 = 1;",
      "info" : "VariableDeclarationStatement[127122-127140]:VariableDeclarationStatement[127303-127321]"
    }, {
      "left" : "int i = 0, start = 0;",
      "right" : "int i = 0, start = 0;",
      "info" : "VariableDeclarationStatement[127149-127170]:VariableDeclarationStatement[127330-127351]"
    }, {
      "left" : "boolean match = false;",
      "right" : "boolean match = false;",
      "info" : "VariableDeclarationStatement[127179-127201]:VariableDeclarationStatement[127360-127382]"
    }, {
      "left" : "boolean lastMatch = false;",
      "right" : "boolean lastMatch = false;",
      "info" : "VariableDeclarationStatement[127210-127236]:VariableDeclarationStatement[127391-127417]"
    }, {
      "left" : "if (separatorChars == null)",
      "right" : "if (separatorChars == null)",
      "info" : "IfStatement[127245-129454]:IfStatement[127426-129635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127273-127983]:Block[127454-128164]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[127338-127973]:WhileStatement[127519-128154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127354-127973]:Block[127535-128154]"
    }, {
      "left" : "if (Character.isWhitespace(str.charAt(i)))",
      "right" : "if (Character.isWhitespace(str.charAt(i)))",
      "info" : "IfStatement[127372-127873]:IfStatement[127553-128054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127415-127873]:Block[127596-128054]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[127437-127792]:IfStatement[127618-127973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127469-127792]:Block[127650-127973]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[127495-127512]:ExpressionStatement[127676-127693]"
    }, {
      "left" : "if (sizePlus1++ == max)",
      "right" : "if (sizePlus1++ == max)",
      "info" : "IfStatement[127537-127672]:IfStatement[127718-127853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127561-127672]:Block[127742-127853]"
    }, {
      "left" : "i = len;",
      "right" : "i = len;",
      "info" : "ExpressionStatement[127591-127599]:ExpressionStatement[127772-127780]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[127628-127646]:ExpressionStatement[127809-127827]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[127697-127731]:ExpressionStatement[127878-127912]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[127756-127770]:ExpressionStatement[127937-127951]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[127813-127825]:ExpressionStatement[127994-128006]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[127846-127855]:ContinueStatement[128027-128036]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[127890-127908]:ExpressionStatement[128071-128089]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[127925-127938]:ExpressionStatement[128106-128119]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[127955-127959]:ExpressionStatement[128136-128140]"
    }, {
      "left" : "if (separatorChars.length() == 1)",
      "right" : "if (separatorChars.length() == 1)",
      "info" : "IfStatement[127989-129454]:IfStatement[128170-129635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128023-128755]:Block[128204-128936]"
    }, {
      "left" : "char sep = separatorChars.charAt(0);",
      "right" : "char sep = separatorChars.charAt(0);",
      "info" : "VariableDeclarationStatement[128078-128114]:VariableDeclarationStatement[128259-128295]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[128127-128745]:WhileStatement[128308-128926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128143-128745]:Block[128324-128926]"
    }, {
      "left" : "if (str.charAt(i) == sep)",
      "right" : "if (str.charAt(i) == sep)",
      "info" : "IfStatement[128161-128645]:IfStatement[128342-128826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128187-128645]:Block[128368-128826]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[128209-128564]:IfStatement[128390-128745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128241-128564]:Block[128422-128745]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[128267-128284]:ExpressionStatement[128448-128465]"
    }, {
      "left" : "if (sizePlus1++ == max)",
      "right" : "if (sizePlus1++ == max)",
      "info" : "IfStatement[128309-128444]:IfStatement[128490-128625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128333-128444]:Block[128514-128625]"
    }, {
      "left" : "i = len;",
      "right" : "i = len;",
      "info" : "ExpressionStatement[128363-128371]:ExpressionStatement[128544-128552]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[128400-128418]:ExpressionStatement[128581-128599]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[128469-128503]:ExpressionStatement[128650-128684]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[128528-128542]:ExpressionStatement[128709-128723]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[128585-128597]:ExpressionStatement[128766-128778]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[128618-128627]:ContinueStatement[128799-128808]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[128662-128680]:ExpressionStatement[128843-128861]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[128697-128710]:ExpressionStatement[128878-128891]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[128727-128731]:ExpressionStatement[128908-128912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128761-129454]:Block[128942-129635]"
    }, {
      "left" : "while (i < len)",
      "right" : "while (i < len)",
      "info" : "WhileStatement[128804-129444]:WhileStatement[128985-129625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128820-129444]:Block[129001-129625]"
    }, {
      "left" : "if (separatorChars.indexOf(str.charAt(i)) >= 0)",
      "right" : "if (separatorChars.indexOf(str.charAt(i)) >= 0)",
      "info" : "IfStatement[128838-129344]:IfStatement[129019-129525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128886-129344]:Block[129067-129525]"
    }, {
      "left" : "if (match || preserveAllTokens)",
      "right" : "if (match || preserveAllTokens)",
      "info" : "IfStatement[128908-129263]:IfStatement[129089-129444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128940-129263]:Block[129121-129444]"
    }, {
      "left" : "lastMatch = true;",
      "right" : "lastMatch = true;",
      "info" : "ExpressionStatement[128966-128983]:ExpressionStatement[129147-129164]"
    }, {
      "left" : "if (sizePlus1++ == max)",
      "right" : "if (sizePlus1++ == max)",
      "info" : "IfStatement[129008-129143]:IfStatement[129189-129324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129032-129143]:Block[129213-129324]"
    }, {
      "left" : "i = len;",
      "right" : "i = len;",
      "info" : "ExpressionStatement[129062-129070]:ExpressionStatement[129243-129251]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[129099-129117]:ExpressionStatement[129280-129298]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[129168-129202]:ExpressionStatement[129349-129383]"
    }, {
      "left" : "match = false;",
      "right" : "match = false;",
      "info" : "ExpressionStatement[129227-129241]:ExpressionStatement[129408-129422]"
    }, {
      "left" : "start = ++i;",
      "right" : "start = ++i;",
      "info" : "ExpressionStatement[129284-129296]:ExpressionStatement[129465-129477]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[129317-129326]:ContinueStatement[129498-129507]"
    }, {
      "left" : "lastMatch = false;",
      "right" : "lastMatch = false;",
      "info" : "ExpressionStatement[129361-129379]:ExpressionStatement[129542-129560]"
    }, {
      "left" : "match = true;",
      "right" : "match = true;",
      "info" : "ExpressionStatement[129396-129409]:ExpressionStatement[129577-129590]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[129426-129430]:ExpressionStatement[129607-129611]"
    }, {
      "left" : "if (match || preserveAllTokens && lastMatch)",
      "right" : "if (match || preserveAllTokens && lastMatch)",
      "info" : "IfStatement[129463-129566]:IfStatement[129644-129747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[129508-129566]:Block[129689-129747]"
    }, {
      "left" : "list.add(str.substring(start, i));",
      "right" : "list.add(str.substring(start, i));",
      "info" : "ExpressionStatement[129522-129556]:ExpressionStatement[129703-129737]"
    }, {
      "left" : "return list.toArray(new String[list.size()]);",
      "right" : "return list.toArray(new String[list.size()]);",
      "info" : "ReturnStatement[129575-129620]:ReturnStatement[129756-129801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130762-130818]:Block[130943-130999]"
    }, {
      "left" : "return splitByCharacterType(str, false);",
      "right" : "return splitByCharacterType(str, false);",
      "info" : "ReturnStatement[130772-130812]:ReturnStatement[130953-130993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132355-132410]:Block[132536-132591]"
    }, {
      "left" : "return splitByCharacterType(str, true);",
      "right" : "return splitByCharacterType(str, true);",
      "info" : "ReturnStatement[132365-132404]:ReturnStatement[132546-132585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133296-134493]:Block[133477-134674]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[133306-133359]:IfStatement[133487-133540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133323-133359]:Block[133504-133540]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[133337-133349]:ReturnStatement[133518-133530]"
    }, {
      "left" : "if (str.length() == 0)",
      "right" : "if (str.length() == 0)",
      "info" : "IfStatement[133368-133452]:IfStatement[133549-133633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133391-133452]:Block[133572-133633]"
    }, {
      "left" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "right" : "return ArrayUtils.EMPTY_STRING_ARRAY;",
      "info" : "ReturnStatement[133405-133442]:ReturnStatement[133586-133623]"
    }, {
      "left" : "char[] c = str.toCharArray();",
      "right" : "char[] c = str.toCharArray();",
      "info" : "VariableDeclarationStatement[133461-133490]:VariableDeclarationStatement[133642-133671]"
    }, {
      "left" : "List<String> list = new ArrayList<String>();",
      "right" : "List<String> list = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[133499-133543]:VariableDeclarationStatement[133680-133724]"
    }, {
      "left" : "int tokenStart = 0;",
      "right" : "int tokenStart = 0;",
      "info" : "VariableDeclarationStatement[133552-133571]:VariableDeclarationStatement[133733-133752]"
    }, {
      "left" : "int currentType = Character.getType(c[tokenStart]);",
      "right" : "int currentType = Character.getType(c[tokenStart]);",
      "info" : "VariableDeclarationStatement[133580-133631]:VariableDeclarationStatement[133761-133812]"
    }, {
      "left" : "for (int pos = tokenStart + 1; pos < c.length; pos++)",
      "right" : "for (int pos = tokenStart + 1; pos < c.length; pos++)",
      "info" : "ForStatement[133640-134365]:ForStatement[133821-134546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133694-134365]:Block[133875-134546]"
    }, {
      "left" : "int type = Character.getType(c[pos]);",
      "right" : "int type = Character.getType(c[pos]);",
      "info" : "VariableDeclarationStatement[133708-133745]:VariableDeclarationStatement[133889-133926]"
    }, {
      "left" : "if (type == currentType)",
      "right" : "if (type == currentType)",
      "info" : "IfStatement[133758-133824]:IfStatement[133939-134005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133783-133824]:Block[133964-134005]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[133801-133810]:ContinueStatement[133982-133991]"
    }, {
      "left" : "if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER)",
      "right" : "if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER)",
      "info" : "IfStatement[133837-134323]:IfStatement[134018-134504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[133935-134197]:Block[134116-134378]"
    }, {
      "left" : "int newTokenStart = pos - 1;",
      "right" : "int newTokenStart = pos - 1;",
      "info" : "VariableDeclarationStatement[133953-133981]:VariableDeclarationStatement[134134-134162]"
    }, {
      "left" : "if (newTokenStart != tokenStart)",
      "right" : "if (newTokenStart != tokenStart)",
      "info" : "IfStatement[133998-134183]:IfStatement[134179-134364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134031-134183]:Block[134212-134364]"
    }, {
      "left" : "list.add(new String(c, tokenStart, newTokenStart - tokenStart));",
      "right" : "list.add(new String(c, tokenStart, newTokenStart - tokenStart));",
      "info" : "ExpressionStatement[134053-134117]:ExpressionStatement[134234-134298]"
    }, {
      "left" : "tokenStart = newTokenStart;",
      "right" : "tokenStart = newTokenStart;",
      "info" : "ExpressionStatement[134138-134165]:ExpressionStatement[134319-134346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134203-134323]:Block[134384-134504]"
    }, {
      "left" : "list.add(new String(c, tokenStart, pos - tokenStart));",
      "right" : "list.add(new String(c, tokenStart, pos - tokenStart));",
      "info" : "ExpressionStatement[134221-134275]:ExpressionStatement[134402-134456]"
    }, {
      "left" : "tokenStart = pos;",
      "right" : "tokenStart = pos;",
      "info" : "ExpressionStatement[134292-134309]:ExpressionStatement[134473-134490]"
    }, {
      "left" : "currentType = type;",
      "right" : "currentType = type;",
      "info" : "ExpressionStatement[134336-134355]:ExpressionStatement[134517-134536]"
    }, {
      "left" : "list.add(new String(c, tokenStart, c.length - tokenStart));",
      "right" : "list.add(new String(c, tokenStart, c.length - tokenStart));",
      "info" : "ExpressionStatement[134374-134433]:ExpressionStatement[134555-134614]"
    }, {
      "left" : "return list.toArray(new String[list.size()]);",
      "right" : "return list.toArray(new String[list.size()]);",
      "info" : "ReturnStatement[134442-134487]:ReturnStatement[134623-134668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135479-135523]:Block[135660-135704]"
    }, {
      "left" : "return join(elements, null);",
      "right" : "return join(elements, null);",
      "info" : "ReturnStatement[135489-135517]:ReturnStatement[135670-135698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136470-136598]:Block[136651-136779]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[136480-136535]:IfStatement[136661-136716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136499-136535]:Block[136680-136716]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[136513-136525]:ReturnStatement[136694-136706]"
    }, {
      "left" : "return join(array, separator, 0, array.length);",
      "right" : "return join(array, separator, 0, array.length);",
      "info" : "ReturnStatement[136545-136592]:ReturnStatement[136726-136773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137851-138378]:Block[138032-138559]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[137861-137916]:IfStatement[138042-138097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137880-137916]:Block[138061-138097]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[137894-137906]:ReturnStatement[138075-138087]"
    }, {
      "left" : "int noOfItems = endIndex - startIndex;",
      "right" : "int noOfItems = endIndex - startIndex;",
      "info" : "VariableDeclarationStatement[137925-137963]:VariableDeclarationStatement[138106-138144]"
    }, {
      "left" : "if (noOfItems <= 0)",
      "right" : "if (noOfItems <= 0)",
      "info" : "IfStatement[137972-138029]:IfStatement[138153-138210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137992-138029]:Block[138173-138210]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[138006-138019]:ReturnStatement[138187-138200]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(noOfItems * 16);",
      "right" : "StringBuilder buf = new StringBuilder(noOfItems * 16);",
      "info" : "VariableDeclarationStatement[138047-138101]:VariableDeclarationStatement[138228-138282]"
    }, {
      "left" : "for (int i = startIndex; i < endIndex; i++)",
      "right" : "for (int i = startIndex; i < endIndex; i++)",
      "info" : "ForStatement[138111-138341]:ForStatement[138292-138522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138155-138341]:Block[138336-138522]"
    }, {
      "left" : "if (i > startIndex)",
      "right" : "if (i > startIndex)",
      "info" : "IfStatement[138169-138243]:IfStatement[138350-138424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138189-138243]:Block[138370-138424]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[138207-138229]:ExpressionStatement[138388-138410]"
    }, {
      "left" : "if (array[i] != null)",
      "right" : "if (array[i] != null)",
      "info" : "IfStatement[138256-138331]:IfStatement[138437-138512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138278-138331]:Block[138459-138512]"
    }, {
      "left" : "buf.append(array[i]);",
      "right" : "buf.append(array[i]);",
      "info" : "ExpressionStatement[138296-138317]:ExpressionStatement[138477-138498]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[138350-138372]:ReturnStatement[138531-138553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139462-139589]:Block[139643-139770]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[139472-139527]:IfStatement[139653-139708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139491-139527]:Block[139672-139708]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[139505-139517]:ReturnStatement[139686-139698]"
    }, {
      "left" : "return join(array, separator, 0, array.length);",
      "right" : "return join(array, separator, 0, array.length);",
      "info" : "ReturnStatement[139536-139583]:ReturnStatement[139717-139764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140979-141741]:Block[141160-141922]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[140989-141044]:IfStatement[141170-141225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141008-141044]:Block[141189-141225]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[141022-141034]:ReturnStatement[141203-141215]"
    }, {
      "left" : "if (separator == null)",
      "right" : "if (separator == null)",
      "info" : "IfStatement[141053-141118]:IfStatement[141234-141299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141076-141118]:Block[141257-141299]"
    }, {
      "left" : "separator = EMPTY;",
      "right" : "separator = EMPTY;",
      "info" : "ExpressionStatement[141090-141108]:ExpressionStatement[141271-141289]"
    }, {
      "left" : "int noOfItems = endIndex - startIndex;",
      "right" : "int noOfItems = endIndex - startIndex;",
      "info" : "VariableDeclarationStatement[141296-141334]:VariableDeclarationStatement[141477-141515]"
    }, {
      "left" : "if (noOfItems <= 0)",
      "right" : "if (noOfItems <= 0)",
      "info" : "IfStatement[141343-141400]:IfStatement[141524-141581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141363-141400]:Block[141544-141581]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[141377-141390]:ReturnStatement[141558-141571]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(noOfItems * 16);",
      "right" : "StringBuilder buf = new StringBuilder(noOfItems * 16);",
      "info" : "VariableDeclarationStatement[141410-141464]:VariableDeclarationStatement[141591-141645]"
    }, {
      "left" : "for (int i = startIndex; i < endIndex; i++)",
      "right" : "for (int i = startIndex; i < endIndex; i++)",
      "info" : "ForStatement[141474-141704]:ForStatement[141655-141885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141518-141704]:Block[141699-141885]"
    }, {
      "left" : "if (i > startIndex)",
      "right" : "if (i > startIndex)",
      "info" : "IfStatement[141532-141606]:IfStatement[141713-141787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141552-141606]:Block[141733-141787]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[141570-141592]:ExpressionStatement[141751-141773]"
    }, {
      "left" : "if (array[i] != null)",
      "right" : "if (array[i] != null)",
      "info" : "IfStatement[141619-141694]:IfStatement[141800-141875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[141641-141694]:Block[141822-141875]"
    }, {
      "left" : "buf.append(array[i]);",
      "right" : "buf.append(array[i]);",
      "info" : "ExpressionStatement[141659-141680]:ExpressionStatement[141840-141861]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[141713-141735]:ReturnStatement[141894-141916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142427-143209]:Block[142608-143390]"
    }, {
      "left" : "if (iterator == null)",
      "right" : "if (iterator == null)",
      "info" : "IfStatement[142509-142567]:IfStatement[142690-142748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142531-142567]:Block[142712-142748]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[142545-142557]:ReturnStatement[142726-142738]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[142576-142638]:IfStatement[142757-142819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142601-142638]:Block[142782-142819]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[142615-142628]:ReturnStatement[142796-142809]"
    }, {
      "left" : "Object first = iterator.next();",
      "right" : "Object first = iterator.next();",
      "info" : "VariableDeclarationStatement[142647-142678]:VariableDeclarationStatement[142828-142859]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[142687-142771]:IfStatement[142868-142952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142712-142771]:Block[142893-142952]"
    }, {
      "left" : "return ObjectUtils.toString(first);",
      "right" : "return ObjectUtils.toString(first);",
      "info" : "ReturnStatement[142726-142761]:ReturnStatement[142907-142942]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(256);",
      "right" : "StringBuilder buf = new StringBuilder(256);",
      "info" : "VariableDeclarationStatement[142813-142856]:VariableDeclarationStatement[142994-143037]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[142907-142968]:IfStatement[143088-143149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142926-142968]:Block[143107-143149]"
    }, {
      "left" : "buf.append(first);",
      "right" : "buf.append(first);",
      "info" : "ExpressionStatement[142940-142958]:ExpressionStatement[143121-143139]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[142978-143171]:WhileStatement[143159-143352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143005-143171]:Block[143186-143352]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[143019-143041]:ExpressionStatement[143200-143222]"
    }, {
      "left" : "Object obj = iterator.next();",
      "right" : "Object obj = iterator.next();",
      "info" : "VariableDeclarationStatement[143054-143083]:VariableDeclarationStatement[143235-143264]"
    }, {
      "left" : "if (obj != null)",
      "right" : "if (obj != null)",
      "info" : "IfStatement[143096-143161]:IfStatement[143277-143342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143113-143161]:Block[143294-143342]"
    }, {
      "left" : "buf.append(obj);",
      "right" : "buf.append(obj);",
      "info" : "ExpressionStatement[143131-143147]:ExpressionStatement[143312-143328]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[143181-143203]:ReturnStatement[143362-143384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143878-144714]:Block[144059-144895]"
    }, {
      "left" : "if (iterator == null)",
      "right" : "if (iterator == null)",
      "info" : "IfStatement[143960-144018]:IfStatement[144141-144199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143982-144018]:Block[144163-144199]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[143996-144008]:ReturnStatement[144177-144189]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[144027-144089]:IfStatement[144208-144270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144052-144089]:Block[144233-144270]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[144066-144079]:ReturnStatement[144247-144260]"
    }, {
      "left" : "Object first = iterator.next();",
      "right" : "Object first = iterator.next();",
      "info" : "VariableDeclarationStatement[144098-144129]:VariableDeclarationStatement[144279-144310]"
    }, {
      "left" : "if (!iterator.hasNext())",
      "right" : "if (!iterator.hasNext())",
      "info" : "IfStatement[144138-144222]:IfStatement[144319-144403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144163-144222]:Block[144344-144403]"
    }, {
      "left" : "return ObjectUtils.toString(first);",
      "right" : "return ObjectUtils.toString(first);",
      "info" : "ReturnStatement[144177-144212]:ReturnStatement[144358-144393]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(256);",
      "right" : "StringBuilder buf = new StringBuilder(256);",
      "info" : "VariableDeclarationStatement[144264-144307]:VariableDeclarationStatement[144445-144488]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[144358-144419]:IfStatement[144539-144600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144377-144419]:Block[144558-144600]"
    }, {
      "left" : "buf.append(first);",
      "right" : "buf.append(first);",
      "info" : "ExpressionStatement[144391-144409]:ExpressionStatement[144572-144590]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[144429-144677]:WhileStatement[144610-144858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144456-144677]:Block[144637-144858]"
    }, {
      "left" : "if (separator != null)",
      "right" : "if (separator != null)",
      "info" : "IfStatement[144470-144547]:IfStatement[144651-144728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144493-144547]:Block[144674-144728]"
    }, {
      "left" : "buf.append(separator);",
      "right" : "buf.append(separator);",
      "info" : "ExpressionStatement[144511-144533]:ExpressionStatement[144692-144714]"
    }, {
      "left" : "Object obj = iterator.next();",
      "right" : "Object obj = iterator.next();",
      "info" : "VariableDeclarationStatement[144560-144589]:VariableDeclarationStatement[144741-144770]"
    }, {
      "left" : "if (obj != null)",
      "right" : "if (obj != null)",
      "info" : "IfStatement[144602-144667]:IfStatement[144783-144848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144619-144667]:Block[144800-144848]"
    }, {
      "left" : "buf.append(obj);",
      "right" : "buf.append(obj);",
      "info" : "ExpressionStatement[144637-144653]:ExpressionStatement[144818-144834]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[144686-144708]:ReturnStatement[144867-144889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145411-145538]:Block[145592-145719]"
    }, {
      "left" : "if (iterable == null)",
      "right" : "if (iterable == null)",
      "info" : "IfStatement[145421-145479]:IfStatement[145602-145660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145443-145479]:Block[145624-145660]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[145457-145469]:ReturnStatement[145638-145650]"
    }, {
      "left" : "return join(iterable.iterator(), separator);",
      "right" : "return join(iterable.iterator(), separator);",
      "info" : "ReturnStatement[145488-145532]:ReturnStatement[145669-145713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146236-146363]:Block[146417-146544]"
    }, {
      "left" : "if (iterable == null)",
      "right" : "if (iterable == null)",
      "info" : "IfStatement[146246-146304]:IfStatement[146427-146485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146268-146304]:Block[146449-146485]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[146282-146294]:ReturnStatement[146463-146475]"
    }, {
      "left" : "return join(iterable.iterator(), separator);",
      "right" : "return join(iterable.iterator(), separator);",
      "info" : "ReturnStatement[146313-146357]:ReturnStatement[146494-146538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147057-147485]:Block[147238-147666]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[147067-147120]:IfStatement[147248-147301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147085-147120]:Block[147266-147301]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[147099-147110]:ReturnStatement[147280-147291]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[147129-147151]:VariableDeclarationStatement[147310-147332]"
    }, {
      "left" : "char[] chs = new char[sz];",
      "right" : "char[] chs = new char[sz];",
      "info" : "VariableDeclarationStatement[147160-147186]:VariableDeclarationStatement[147341-147367]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[147195-147209]:VariableDeclarationStatement[147376-147390]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[147218-147376]:ForStatement[147399-147557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147247-147376]:Block[147428-147557]"
    }, {
      "left" : "if (!Character.isWhitespace(str.charAt(i)))",
      "right" : "if (!Character.isWhitespace(str.charAt(i)))",
      "info" : "IfStatement[147261-147366]:IfStatement[147442-147547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147305-147366]:Block[147486-147547]"
    }, {
      "left" : "chs[count++] = str.charAt(i);",
      "right" : "chs[count++] = str.charAt(i);",
      "info" : "ExpressionStatement[147323-147352]:ExpressionStatement[147504-147533]"
    }, {
      "left" : "if (count == sz)",
      "right" : "if (count == sz)",
      "info" : "IfStatement[147385-147437]:IfStatement[147566-147618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147402-147437]:Block[147583-147618]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[147416-147427]:ReturnStatement[147597-147608]"
    }, {
      "left" : "return new String(chs, 0, count);",
      "right" : "return new String(chs, 0, count);",
      "info" : "ReturnStatement[147446-147479]:ReturnStatement[147627-147660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148721-148927]:Block[148902-149108]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[148731-148803]:IfStatement[148912-148984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148768-148803]:Block[148949-148984]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[148782-148793]:ReturnStatement[148963-148974]"
    }, {
      "left" : "if (str.startsWith(remove))",
      "right" : "if (str.startsWith(remove))",
      "info" : "IfStatement[148812-148901]:IfStatement[148993-149082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148839-148901]:Block[149020-149082]"
    }, {
      "left" : "return str.substring(remove.length());",
      "right" : "return str.substring(remove.length());",
      "info" : "ReturnStatement[148853-148891]:ReturnStatement[149034-149072]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[148910-148921]:ReturnStatement[149091-149102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150269-150487]:Block[150450-150668]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[150279-150351]:IfStatement[150460-150532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150316-150351]:Block[150497-150532]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[150330-150341]:ReturnStatement[150511-150522]"
    }, {
      "left" : "if (startsWithIgnoreCase(str, remove))",
      "right" : "if (startsWithIgnoreCase(str, remove))",
      "info" : "IfStatement[150360-150461]:IfStatement[150541-150642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150399-150461]:Block[150580-150642]"
    }, {
      "left" : "return str.substring(remove.length());",
      "right" : "return str.substring(remove.length());",
      "info" : "ReturnStatement[150413-150451]:ReturnStatement[150594-150632]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[150470-150481]:ReturnStatement[150651-150662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151613-151836]:Block[151794-152017]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[151623-151695]:IfStatement[151804-151876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151660-151695]:Block[151841-151876]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[151674-151685]:ReturnStatement[151855-151866]"
    }, {
      "left" : "if (str.endsWith(remove))",
      "right" : "if (str.endsWith(remove))",
      "info" : "IfStatement[151704-151810]:IfStatement[151885-151991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151730-151810]:Block[151911-151991]"
    }, {
      "left" : "return str.substring(0, str.length() - remove.length());",
      "right" : "return str.substring(0, str.length() - remove.length());",
      "info" : "ReturnStatement[151744-151800]:ReturnStatement[151925-151981]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[151819-151830]:ReturnStatement[152000-152011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153238-153472]:Block[153419-153653]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[153248-153320]:IfStatement[153429-153501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153285-153320]:Block[153466-153501]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[153299-153310]:ReturnStatement[153480-153491]"
    }, {
      "left" : "if (endsWithIgnoreCase(str, remove))",
      "right" : "if (endsWithIgnoreCase(str, remove))",
      "info" : "IfStatement[153329-153446]:IfStatement[153510-153627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153366-153446]:Block[153547-153627]"
    }, {
      "left" : "return str.substring(0, str.length() - remove.length());",
      "right" : "return str.substring(0, str.length() - remove.length());",
      "info" : "ReturnStatement[153380-153436]:ReturnStatement[153561-153617]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[153455-153466]:ReturnStatement[153636-153647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154492-154628]:Block[154673-154809]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(remove))",
      "right" : "if (isEmpty(str) || isEmpty(remove))",
      "info" : "IfStatement[154502-154574]:IfStatement[154683-154755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154539-154574]:Block[154720-154755]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[154553-154564]:ReturnStatement[154734-154745]"
    }, {
      "left" : "return replace(str, remove, EMPTY, -1);",
      "right" : "return replace(str, remove, EMPTY, -1);",
      "info" : "ReturnStatement[154583-154622]:ReturnStatement[154764-154803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155415-155783]:Block[155596-155964]"
    }, {
      "left" : "if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND)",
      "right" : "if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND)",
      "info" : "IfStatement[155425-155520]:IfStatement[155606-155701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155485-155520]:Block[155666-155701]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[155499-155510]:ReturnStatement[155680-155691]"
    }, {
      "left" : "char[] chars = str.toCharArray();",
      "right" : "char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[155529-155562]:VariableDeclarationStatement[155710-155743]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[155571-155583]:VariableDeclarationStatement[155752-155764]"
    }, {
      "left" : "for (int i = 0; i < chars.length; i++)",
      "right" : "for (int i = 0; i < chars.length; i++)",
      "info" : "ForStatement[155592-155735]:ForStatement[155773-155916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155631-155735]:Block[155812-155916]"
    }, {
      "left" : "if (chars[i] != remove)",
      "right" : "if (chars[i] != remove)",
      "info" : "IfStatement[155645-155725]:IfStatement[155826-155906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155669-155725]:Block[155850-155906]"
    }, {
      "left" : "chars[pos++] = chars[i];",
      "right" : "chars[pos++] = chars[i];",
      "info" : "ExpressionStatement[155687-155711]:ExpressionStatement[155868-155892]"
    }, {
      "left" : "return new String(chars, 0, pos);",
      "right" : "return new String(chars, 0, pos);",
      "info" : "ReturnStatement[155744-155777]:ReturnStatement[155925-155958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[157028-157095]:Block[157209-157276]"
    }, {
      "left" : "return replace(text, searchString, replacement, 1);",
      "right" : "return replace(text, searchString, replacement, 1);",
      "info" : "ReturnStatement[157038-157089]:ReturnStatement[157219-157270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[158203-158271]:Block[158384-158452]"
    }, {
      "left" : "return replace(text, searchString, replacement, -1);",
      "right" : "return replace(text, searchString, replacement, -1);",
      "info" : "ReturnStatement[158213-158265]:ReturnStatement[158394-158446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[159721-160639]:Block[159902-160820]"
    }, {
      "left" : "if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0)",
      "right" : "if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0)",
      "info" : "IfStatement[159731-159846]:IfStatement[159912-160027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[159810-159846]:Block[159991-160027]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[159824-159836]:ReturnStatement[160005-160017]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[159855-159869]:VariableDeclarationStatement[160036-160050]"
    }, {
      "left" : "int end = text.indexOf(searchString, start);",
      "right" : "int end = text.indexOf(searchString, start);",
      "info" : "VariableDeclarationStatement[159878-159922]:VariableDeclarationStatement[160059-160103]"
    }, {
      "left" : "if (end == INDEX_NOT_FOUND)",
      "right" : "if (end == INDEX_NOT_FOUND)",
      "info" : "IfStatement[159931-159995]:IfStatement[160112-160176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[159959-159995]:Block[160140-160176]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[159973-159985]:ReturnStatement[160154-160166]"
    }, {
      "left" : "int replLength = searchString.length();",
      "right" : "int replLength = searchString.length();",
      "info" : "VariableDeclarationStatement[160004-160043]:VariableDeclarationStatement[160185-160224]"
    }, {
      "left" : "int increase = replacement.length() - replLength;",
      "right" : "int increase = replacement.length() - replLength;",
      "info" : "VariableDeclarationStatement[160052-160101]:VariableDeclarationStatement[160233-160282]"
    }, {
      "left" : "increase = increase < 0 ? 0 : increase;",
      "right" : "increase = increase < 0 ? 0 : increase;",
      "info" : "ExpressionStatement[160110-160149]:ExpressionStatement[160291-160330]"
    }, {
      "left" : "increase *= max < 0 ? 16 : max > 64 ? 64 : max;",
      "right" : "increase *= max < 0 ? 16 : max > 64 ? 64 : max;",
      "info" : "ExpressionStatement[160158-160205]:ExpressionStatement[160339-160386]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "right" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "info" : "VariableDeclarationStatement[160214-160278]:VariableDeclarationStatement[160395-160459]"
    }, {
      "left" : "while (end != INDEX_NOT_FOUND)",
      "right" : "while (end != INDEX_NOT_FOUND)",
      "info" : "WhileStatement[160287-160559]:WhileStatement[160468-160740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[160318-160559]:Block[160499-160740]"
    }, {
      "left" : "buf.append(text.substring(start, end)).append(replacement);",
      "right" : "buf.append(text.substring(start, end)).append(replacement);",
      "info" : "ExpressionStatement[160332-160391]:ExpressionStatement[160513-160572]"
    }, {
      "left" : "start = end + replLength;",
      "right" : "start = end + replLength;",
      "info" : "ExpressionStatement[160404-160429]:ExpressionStatement[160585-160610]"
    }, {
      "left" : "if (--max == 0)",
      "right" : "if (--max == 0)",
      "info" : "IfStatement[160442-160496]:IfStatement[160623-160677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[160458-160496]:Block[160639-160677]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[160476-160482]:BreakStatement[160657-160663]"
    }, {
      "left" : "end = text.indexOf(searchString, start);",
      "right" : "end = text.indexOf(searchString, start);",
      "info" : "ExpressionStatement[160509-160549]:ExpressionStatement[160690-160730]"
    }, {
      "left" : "buf.append(text.substring(start));",
      "right" : "buf.append(text.substring(start));",
      "info" : "ExpressionStatement[160568-160602]:ExpressionStatement[160749-160783]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[160611-160633]:ReturnStatement[160792-160814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[162497-162577]:Block[162678-162758]"
    }, {
      "left" : "return replaceEach(text, searchList, replacementList, false, 0);",
      "right" : "return replaceEach(text, searchList, replacementList, false, 0);",
      "info" : "ReturnStatement[162507-162571]:ReturnStatement[162688-162752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[164881-165160]:Block[165062-165341]"
    }, {
      "left" : "int timeToLive = searchList == null ? 0 : searchList.length;",
      "right" : "int timeToLive = searchList == null ? 0 : searchList.length;",
      "info" : "VariableDeclarationStatement[165013-165073]:VariableDeclarationStatement[165194-165254]"
    }, {
      "left" : "return replaceEach(text, searchList, replacementList, true, timeToLive);",
      "right" : "return replaceEach(text, searchList, replacementList, true, timeToLive);",
      "info" : "ReturnStatement[165082-165154]:ReturnStatement[165263-165335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[167647-172338]:Block[167828-172519]"
    }, {
      "left" : "if (text == null || text.length() == 0 || searchList == null ||\n                searchList.length == 0 || replacementList == null || replacementList.length == 0)",
      "right" : "if (text == null || text.length() == 0 || searchList == null ||\n                searchList.length == 0 || replacementList == null || replacementList.length == 0)",
      "info" : "IfStatement[167840-168038]:IfStatement[168021-168219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168002-168038]:Block[168183-168219]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[168016-168028]:ReturnStatement[168197-168209]"
    }, {
      "left" : "if (timeToLive < 0)",
      "right" : "if (timeToLive < 0)",
      "info" : "IfStatement[168103-168323]:IfStatement[168284-168504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168123-168323]:Block[168304-168504]"
    }, {
      "left" : "throw new IllegalStateException(\"Aborting to protect against StackOverflowError - \" +\n                                            \"output of one loop is the input of another\");",
      "right" : "throw new IllegalStateException(\"Aborting to protect against StackOverflowError - \" +\n                                            \"output of one loop is the input of another\");",
      "info" : "ThrowStatement[168137-168313]:ThrowStatement[168318-168494]"
    }, {
      "left" : "int searchLength = searchList.length;",
      "right" : "int searchLength = searchList.length;",
      "info" : "VariableDeclarationStatement[168333-168370]:VariableDeclarationStatement[168514-168551]"
    }, {
      "left" : "int replacementLength = replacementList.length;",
      "right" : "int replacementLength = replacementList.length;",
      "info" : "VariableDeclarationStatement[168379-168426]:VariableDeclarationStatement[168560-168607]"
    }, {
      "left" : "if (searchLength != replacementLength)",
      "right" : "if (searchLength != replacementLength)",
      "info" : "IfStatement[168496-168736]:IfStatement[168677-168917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168535-168736]:Block[168716-168917]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);",
      "right" : "throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);",
      "info" : "ThrowStatement[168549-168726]:ThrowStatement[168730-168907]"
    }, {
      "left" : "boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];",
      "right" : "boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];",
      "info" : "VariableDeclarationStatement[168796-168860]:VariableDeclarationStatement[168977-169041]"
    }, {
      "left" : "int textIndex = -1;",
      "right" : "int textIndex = -1;",
      "info" : "VariableDeclarationStatement[168921-168940]:VariableDeclarationStatement[169102-169121]"
    }, {
      "left" : "int replaceIndex = -1;",
      "right" : "int replaceIndex = -1;",
      "info" : "VariableDeclarationStatement[168949-168971]:VariableDeclarationStatement[169130-169152]"
    }, {
      "left" : "int tempIndex = -1;",
      "right" : "int tempIndex = -1;",
      "info" : "VariableDeclarationStatement[168980-168999]:VariableDeclarationStatement[169161-169180]"
    }, {
      "left" : "for (int i = 0; i < searchLength; i++)",
      "right" : "for (int i = 0; i < searchLength; i++)",
      "info" : "ForStatement[169131-169772]:ForStatement[169312-169953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169170-169772]:Block[169351-169953]"
    }, {
      "left" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                    searchList[i].length() == 0 || replacementList[i] == null)",
      "right" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                    searchList[i].length() == 0 || replacementList[i] == null)",
      "info" : "IfStatement[169184-169365]:IfStatement[169365-169546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169324-169365]:Block[169505-169546]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[169342-169351]:ContinueStatement[169523-169532]"
    }, {
      "left" : "tempIndex = text.indexOf(searchList[i]);",
      "right" : "tempIndex = text.indexOf(searchList[i]);",
      "info" : "ExpressionStatement[169378-169418]:ExpressionStatement[169559-169599]"
    }, {
      "left" : "if (tempIndex == -1)",
      "right" : "if (tempIndex == -1)",
      "info" : "IfStatement[169489-169762]:IfStatement[169670-169943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169510-169578]:Block[169691-169759]"
    }, {
      "left" : "noMoreMatchesForReplIndex[i] = true;",
      "right" : "noMoreMatchesForReplIndex[i] = true;",
      "info" : "ExpressionStatement[169528-169564]:ExpressionStatement[169709-169745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169584-169762]:Block[169765-169943]"
    }, {
      "left" : "if (textIndex == -1 || tempIndex < textIndex)",
      "right" : "if (textIndex == -1 || tempIndex < textIndex)",
      "info" : "IfStatement[169602-169748]:IfStatement[169783-169929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169648-169748]:Block[169829-169929]"
    }, {
      "left" : "textIndex = tempIndex;",
      "right" : "textIndex = tempIndex;",
      "info" : "ExpressionStatement[169670-169692]:ExpressionStatement[169851-169873]"
    }, {
      "left" : "replaceIndex = i;",
      "right" : "replaceIndex = i;",
      "info" : "ExpressionStatement[169713-169730]:ExpressionStatement[169894-169911]"
    }, {
      "left" : "if (textIndex == -1)",
      "right" : "if (textIndex == -1)",
      "info" : "IfStatement[169870-169927]:IfStatement[170051-170108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[169891-169927]:Block[170072-170108]"
    }, {
      "left" : "return text;",
      "right" : "return text;",
      "info" : "ReturnStatement[169905-169917]:ReturnStatement[170086-170098]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[169937-169951]:VariableDeclarationStatement[170118-170132]"
    }, {
      "left" : "int increase = 0;",
      "right" : "int increase = 0;",
      "info" : "VariableDeclarationStatement[170073-170090]:VariableDeclarationStatement[170254-170271]"
    }, {
      "left" : "for (int i = 0; i < searchList.length; i++)",
      "right" : "for (int i = 0; i < searchList.length; i++)",
      "info" : "ForStatement[170208-170560]:ForStatement[170389-170741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170252-170560]:Block[170433-170741]"
    }, {
      "left" : "if (searchList[i] == null || replacementList[i] == null)",
      "right" : "if (searchList[i] == null || replacementList[i] == null)",
      "info" : "IfStatement[170266-170364]:IfStatement[170447-170545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170323-170364]:Block[170504-170545]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[170341-170350]:ContinueStatement[170522-170531]"
    }, {
      "left" : "int greater = replacementList[i].length() - searchList[i].length();",
      "right" : "int greater = replacementList[i].length() - searchList[i].length();",
      "info" : "VariableDeclarationStatement[170377-170444]:VariableDeclarationStatement[170558-170625]"
    }, {
      "left" : "if (greater > 0)",
      "right" : "if (greater > 0)",
      "info" : "IfStatement[170457-170550]:IfStatement[170638-170731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170474-170550]:Block[170655-170731]"
    }, {
      "left" : "increase += 3 * greater;",
      "right" : "increase += 3 * greater;",
      "info" : "ExpressionStatement[170492-170516]:ExpressionStatement[170673-170697]"
    }, {
      "left" : "increase = Math.min(increase, text.length() / 5);",
      "right" : "increase = Math.min(increase, text.length() / 5);",
      "info" : "ExpressionStatement[170638-170687]:ExpressionStatement[170819-170868]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "right" : "StringBuilder buf = new StringBuilder(text.length() + increase);",
      "info" : "VariableDeclarationStatement[170697-170761]:VariableDeclarationStatement[170878-170942]"
    }, {
      "left" : "while (textIndex != -1)",
      "right" : "while (textIndex != -1)",
      "info" : "WhileStatement[170771-172001]:WhileStatement[170952-172182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170795-172001]:Block[170976-172182]"
    }, {
      "left" : "for (int i = start; i < textIndex; i++)",
      "right" : "for (int i = start; i < textIndex; i++)",
      "info" : "ForStatement[170810-170909]:ForStatement[170991-171090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170850-170909]:Block[171031-171090]"
    }, {
      "left" : "buf.append(text.charAt(i));",
      "right" : "buf.append(text.charAt(i));",
      "info" : "ExpressionStatement[170868-170895]:ExpressionStatement[171049-171076]"
    }, {
      "left" : "buf.append(replacementList[replaceIndex]);",
      "right" : "buf.append(replacementList[replaceIndex]);",
      "info" : "ExpressionStatement[170922-170964]:ExpressionStatement[171103-171145]"
    }, {
      "left" : "start = textIndex + searchList[replaceIndex].length();",
      "right" : "start = textIndex + searchList[replaceIndex].length();",
      "info" : "ExpressionStatement[170978-171032]:ExpressionStatement[171159-171213]"
    }, {
      "left" : "textIndex = -1;",
      "right" : "textIndex = -1;",
      "info" : "ExpressionStatement[171046-171061]:ExpressionStatement[171227-171242]"
    }, {
      "left" : "replaceIndex = -1;",
      "right" : "replaceIndex = -1;",
      "info" : "ExpressionStatement[171074-171092]:ExpressionStatement[171255-171273]"
    }, {
      "left" : "tempIndex = -1;",
      "right" : "tempIndex = -1;",
      "info" : "ExpressionStatement[171105-171120]:ExpressionStatement[171286-171301]"
    }, {
      "left" : "for (int i = 0; i < searchLength; i++)",
      "right" : "for (int i = 0; i < searchLength; i++)",
      "info" : "ForStatement[171234-171942]:ForStatement[171415-172123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[171273-171942]:Block[171454-172123]"
    }, {
      "left" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                        searchList[i].length() == 0 || replacementList[i] == null)",
      "right" : "if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                        searchList[i].length() == 0 || replacementList[i] == null)",
      "info" : "IfStatement[171291-171484]:IfStatement[171472-171665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[171435-171484]:Block[171616-171665]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[171457-171466]:ContinueStatement[171638-171647]"
    }, {
      "left" : "tempIndex = text.indexOf(searchList[i], start);",
      "right" : "tempIndex = text.indexOf(searchList[i], start);",
      "info" : "ExpressionStatement[171501-171548]:ExpressionStatement[171682-171729]"
    }, {
      "left" : "if (tempIndex == -1)",
      "right" : "if (tempIndex == -1)",
      "info" : "IfStatement[171627-171928]:IfStatement[171808-172109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[171648-171724]:Block[171829-171905]"
    }, {
      "left" : "noMoreMatchesForReplIndex[i] = true;",
      "right" : "noMoreMatchesForReplIndex[i] = true;",
      "info" : "ExpressionStatement[171670-171706]:ExpressionStatement[171851-171887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[171730-171928]:Block[171911-172109]"
    }, {
      "left" : "if (textIndex == -1 || tempIndex < textIndex)",
      "right" : "if (textIndex == -1 || tempIndex < textIndex)",
      "info" : "IfStatement[171752-171910]:IfStatement[171933-172091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[171798-171910]:Block[171979-172091]"
    }, {
      "left" : "textIndex = tempIndex;",
      "right" : "textIndex = tempIndex;",
      "info" : "ExpressionStatement[171824-171846]:ExpressionStatement[172005-172027]"
    }, {
      "left" : "replaceIndex = i;",
      "right" : "replaceIndex = i;",
      "info" : "ExpressionStatement[171871-171888]:ExpressionStatement[172052-172069]"
    }, {
      "left" : "int textLength = text.length();",
      "right" : "int textLength = text.length();",
      "info" : "VariableDeclarationStatement[172010-172041]:VariableDeclarationStatement[172191-172222]"
    }, {
      "left" : "for (int i = start; i < textLength; i++)",
      "right" : "for (int i = start; i < textLength; i++)",
      "info" : "ForStatement[172050-172142]:ForStatement[172231-172323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172091-172142]:Block[172272-172323]"
    }, {
      "left" : "buf.append(text.charAt(i));",
      "right" : "buf.append(text.charAt(i));",
      "info" : "ExpressionStatement[172105-172132]:ExpressionStatement[172286-172313]"
    }, {
      "left" : "String result = buf.toString();",
      "right" : "String result = buf.toString();",
      "info" : "VariableDeclarationStatement[172151-172182]:VariableDeclarationStatement[172332-172363]"
    }, {
      "left" : "if (!repeat)",
      "right" : "if (!repeat)",
      "info" : "IfStatement[172191-172242]:IfStatement[172372-172423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172204-172242]:Block[172385-172423]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[172218-172232]:ReturnStatement[172399-172413]"
    }, {
      "left" : "return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",
      "right" : "return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",
      "info" : "ReturnStatement[172252-172332]:ReturnStatement[172433-172513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173392-173514]:Block[173573-173695]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[173402-173455]:IfStatement[173583-173636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173419-173455]:Block[173600-173636]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[173433-173445]:ReturnStatement[173614-173626]"
    }, {
      "left" : "return str.replace(searchChar, replaceChar);",
      "right" : "return str.replace(searchChar, replaceChar);",
      "info" : "ReturnStatement[173464-173508]:ReturnStatement[173645-173689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175294-176142]:Block[175475-176323]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(searchChars))",
      "right" : "if (isEmpty(str) || isEmpty(searchChars))",
      "info" : "IfStatement[175304-175381]:IfStatement[175485-175562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175346-175381]:Block[175527-175562]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[175360-175371]:ReturnStatement[175541-175552]"
    }, {
      "left" : "if (replaceChars == null)",
      "right" : "if (replaceChars == null)",
      "info" : "IfStatement[175390-175461]:IfStatement[175571-175642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175416-175461]:Block[175597-175642]"
    }, {
      "left" : "replaceChars = EMPTY;",
      "right" : "replaceChars = EMPTY;",
      "info" : "ExpressionStatement[175430-175451]:ExpressionStatement[175611-175632]"
    }, {
      "left" : "boolean modified = false;",
      "right" : "boolean modified = false;",
      "info" : "VariableDeclarationStatement[175470-175495]:VariableDeclarationStatement[175651-175676]"
    }, {
      "left" : "int replaceCharsLength = replaceChars.length();",
      "right" : "int replaceCharsLength = replaceChars.length();",
      "info" : "VariableDeclarationStatement[175504-175551]:VariableDeclarationStatement[175685-175732]"
    }, {
      "left" : "int strLength = str.length();",
      "right" : "int strLength = str.length();",
      "info" : "VariableDeclarationStatement[175560-175589]:VariableDeclarationStatement[175741-175770]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(strLength);",
      "right" : "StringBuilder buf = new StringBuilder(strLength);",
      "info" : "VariableDeclarationStatement[175598-175647]:VariableDeclarationStatement[175779-175828]"
    }, {
      "left" : "for (int i = 0; i < strLength; i++)",
      "right" : "for (int i = 0; i < strLength; i++)",
      "info" : "ForStatement[175656-176047]:ForStatement[175837-176228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175692-176047]:Block[175873-176228]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[175706-175730]:VariableDeclarationStatement[175887-175911]"
    }, {
      "left" : "int index = searchChars.indexOf(ch);",
      "right" : "int index = searchChars.indexOf(ch);",
      "info" : "VariableDeclarationStatement[175743-175779]:VariableDeclarationStatement[175924-175960]"
    }, {
      "left" : "if (index >= 0)",
      "right" : "if (index >= 0)",
      "info" : "IfStatement[175792-176037]:IfStatement[175973-176218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175808-175984]:Block[175989-176165]"
    }, {
      "left" : "modified = true;",
      "right" : "modified = true;",
      "info" : "ExpressionStatement[175826-175842]:ExpressionStatement[176007-176023]"
    }, {
      "left" : "if (index < replaceCharsLength)",
      "right" : "if (index < replaceCharsLength)",
      "info" : "IfStatement[175859-175970]:IfStatement[176040-176151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175891-175970]:Block[176072-176151]"
    }, {
      "left" : "buf.append(replaceChars.charAt(index));",
      "right" : "buf.append(replaceChars.charAt(index));",
      "info" : "ExpressionStatement[175913-175952]:ExpressionStatement[176094-176133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175990-176037]:Block[176171-176218]"
    }, {
      "left" : "buf.append(ch);",
      "right" : "buf.append(ch);",
      "info" : "ExpressionStatement[176008-176023]:ExpressionStatement[176189-176204]"
    }, {
      "left" : "if (modified)",
      "right" : "if (modified)",
      "info" : "IfStatement[176056-176116]:IfStatement[176237-176297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[176070-176116]:Block[176251-176297]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[176084-176106]:ReturnStatement[176265-176287]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[176125-176136]:ReturnStatement[176306-176317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177720-178453]:Block[177901-178634]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[177730-177783]:IfStatement[177911-177964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177747-177783]:Block[177928-177964]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[177761-177773]:ReturnStatement[177942-177954]"
    }, {
      "left" : "if (overlay == null)",
      "right" : "if (overlay == null)",
      "info" : "IfStatement[177792-177853]:IfStatement[177973-178034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177813-177853]:Block[177994-178034]"
    }, {
      "left" : "overlay = EMPTY;",
      "right" : "overlay = EMPTY;",
      "info" : "ExpressionStatement[177827-177843]:ExpressionStatement[178008-178024]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[177862-177885]:VariableDeclarationStatement[178043-178066]"
    }, {
      "left" : "if (start < 0)",
      "right" : "if (start < 0)",
      "info" : "IfStatement[177894-177943]:IfStatement[178075-178124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177909-177943]:Block[178090-178124]"
    }, {
      "left" : "start = 0;",
      "right" : "start = 0;",
      "info" : "ExpressionStatement[177923-177933]:ExpressionStatement[178104-178114]"
    }, {
      "left" : "if (start > len)",
      "right" : "if (start > len)",
      "info" : "IfStatement[177952-178005]:IfStatement[178133-178186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177969-178005]:Block[178150-178186]"
    }, {
      "left" : "start = len;",
      "right" : "start = len;",
      "info" : "ExpressionStatement[177983-177995]:ExpressionStatement[178164-178176]"
    }, {
      "left" : "if (end < 0)",
      "right" : "if (end < 0)",
      "info" : "IfStatement[178014-178059]:IfStatement[178195-178240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178027-178059]:Block[178208-178240]"
    }, {
      "left" : "end = 0;",
      "right" : "end = 0;",
      "info" : "ExpressionStatement[178041-178049]:ExpressionStatement[178222-178230]"
    }, {
      "left" : "if (end > len)",
      "right" : "if (end > len)",
      "info" : "IfStatement[178068-178117]:IfStatement[178249-178298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178083-178117]:Block[178264-178298]"
    }, {
      "left" : "end = len;",
      "right" : "end = len;",
      "info" : "ExpressionStatement[178097-178107]:ExpressionStatement[178278-178288]"
    }, {
      "left" : "if (start > end)",
      "right" : "if (start > end)",
      "info" : "IfStatement[178126-178233]:IfStatement[178307-178414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178143-178233]:Block[178324-178414]"
    }, {
      "left" : "int temp = start;",
      "right" : "int temp = start;",
      "info" : "VariableDeclarationStatement[178157-178174]:VariableDeclarationStatement[178338-178355]"
    }, {
      "left" : "start = end;",
      "right" : "start = end;",
      "info" : "ExpressionStatement[178187-178199]:ExpressionStatement[178368-178380]"
    }, {
      "left" : "end = temp;",
      "right" : "end = temp;",
      "info" : "ExpressionStatement[178212-178223]:ExpressionStatement[178393-178404]"
    }, {
      "left" : "return new StringBuilder(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();",
      "right" : "return new StringBuilder(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();",
      "info" : "ReturnStatement[178242-178447]:ReturnStatement[178423-178628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[179621-180236]:Block[179802-180417]"
    }, {
      "left" : "if (isEmpty(str))",
      "right" : "if (isEmpty(str))",
      "info" : "IfStatement[179631-179684]:IfStatement[179812-179865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[179649-179684]:Block[179830-179865]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[179663-179674]:ReturnStatement[179844-179855]"
    }, {
      "left" : "if (str.length() == 1)",
      "right" : "if (str.length() == 1)",
      "info" : "IfStatement[179694-179893]:IfStatement[179875-180074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[179717-179893]:Block[179898-180074]"
    }, {
      "left" : "char ch = str.charAt(0);",
      "right" : "char ch = str.charAt(0);",
      "info" : "VariableDeclarationStatement[179731-179755]:VariableDeclarationStatement[179912-179936]"
    }, {
      "left" : "if (ch == CharUtils.CR || ch == CharUtils.LF)",
      "right" : "if (ch == CharUtils.CR || ch == CharUtils.LF)",
      "info" : "IfStatement[179768-179859]:IfStatement[179949-180040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[179814-179859]:Block[179995-180040]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[179832-179845]:ReturnStatement[180013-180026]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[179872-179883]:ReturnStatement[180053-180064]"
    }, {
      "left" : "int lastIdx = str.length() - 1;",
      "right" : "int lastIdx = str.length() - 1;",
      "info" : "VariableDeclarationStatement[179903-179934]:VariableDeclarationStatement[180084-180115]"
    }, {
      "left" : "char last = str.charAt(lastIdx);",
      "right" : "char last = str.charAt(lastIdx);",
      "info" : "VariableDeclarationStatement[179943-179975]:VariableDeclarationStatement[180124-180156]"
    }, {
      "left" : "if (last == CharUtils.LF)",
      "right" : "if (last == CharUtils.LF)",
      "info" : "IfStatement[179985-180188]:IfStatement[180166-180369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180011-180122]:Block[180192-180303]"
    }, {
      "left" : "if (str.charAt(lastIdx - 1) == CharUtils.CR)",
      "right" : "if (str.charAt(lastIdx - 1) == CharUtils.CR)",
      "info" : "IfStatement[180025-180112]:IfStatement[180206-180293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180070-180112]:Block[180251-180293]"
    }, {
      "left" : "lastIdx--;",
      "right" : "lastIdx--;",
      "info" : "ExpressionStatement[180088-180098]:ExpressionStatement[180269-180279]"
    }, {
      "left" : "if (last != CharUtils.CR)",
      "right" : "if (last != CharUtils.CR)",
      "info" : "IfStatement[180128-180188]:IfStatement[180309-180369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180154-180188]:Block[180335-180369]"
    }, {
      "left" : "lastIdx++;",
      "right" : "lastIdx++;",
      "info" : "ExpressionStatement[180168-180178]:ExpressionStatement[180349-180359]"
    }, {
      "left" : "return str.substring(0, lastIdx);",
      "right" : "return str.substring(0, lastIdx);",
      "info" : "ReturnStatement[180197-180230]:ReturnStatement[180378-180411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[181549-181597]:Block[181730-181778]"
    }, {
      "left" : "return removeEnd(str,separator);",
      "right" : "return removeEnd(str,separator);",
      "info" : "ReturnStatement[181559-181591]:ReturnStatement[181740-181772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182593-183041]:Block[182774-183222]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[182603-182656]:IfStatement[182784-182837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182620-182656]:Block[182801-182837]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[182634-182646]:ReturnStatement[182815-182827]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[182665-182691]:VariableDeclarationStatement[182846-182872]"
    }, {
      "left" : "if (strLen < 2)",
      "right" : "if (strLen < 2)",
      "info" : "IfStatement[182700-182753]:IfStatement[182881-182934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182716-182753]:Block[182897-182934]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[182730-182743]:ReturnStatement[182911-182924]"
    }, {
      "left" : "int lastIdx = strLen - 1;",
      "right" : "int lastIdx = strLen - 1;",
      "info" : "VariableDeclarationStatement[182762-182787]:VariableDeclarationStatement[182943-182968]"
    }, {
      "left" : "String ret = str.substring(0, lastIdx);",
      "right" : "String ret = str.substring(0, lastIdx);",
      "info" : "VariableDeclarationStatement[182796-182835]:VariableDeclarationStatement[182977-183016]"
    }, {
      "left" : "char last = str.charAt(lastIdx);",
      "right" : "char last = str.charAt(lastIdx);",
      "info" : "VariableDeclarationStatement[182844-182876]:VariableDeclarationStatement[183025-183057]"
    }, {
      "left" : "if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR)",
      "right" : "if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR)",
      "info" : "IfStatement[182885-183015]:IfStatement[183066-183196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182954-183015]:Block[183135-183196]"
    }, {
      "left" : "return ret.substring(0, lastIdx - 1);",
      "right" : "return ret.substring(0, lastIdx - 1);",
      "info" : "ReturnStatement[182968-183005]:ReturnStatement[183149-183186]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[183024-183035]:ReturnStatement[183205-183216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[183920-185106]:Block[184101-185287]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[183977-184030]:IfStatement[184158-184211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[183994-184030]:Block[184175-184211]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[184008-184020]:ReturnStatement[184189-184201]"
    }, {
      "left" : "if (repeat <= 0)",
      "right" : "if (repeat <= 0)",
      "info" : "IfStatement[184039-184093]:IfStatement[184220-184274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184056-184093]:Block[184237-184274]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[184070-184083]:ReturnStatement[184251-184264]"
    }, {
      "left" : "int inputLength = str.length();",
      "right" : "int inputLength = str.length();",
      "info" : "VariableDeclarationStatement[184102-184133]:VariableDeclarationStatement[184283-184314]"
    }, {
      "left" : "if (repeat == 1 || inputLength == 0)",
      "right" : "if (repeat == 1 || inputLength == 0)",
      "info" : "IfStatement[184142-184214]:IfStatement[184323-184395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184179-184214]:Block[184360-184395]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[184193-184204]:ReturnStatement[184374-184385]"
    }, {
      "left" : "if (inputLength == 1 && repeat <= PAD_LIMIT)",
      "right" : "if (inputLength == 1 && repeat <= PAD_LIMIT)",
      "info" : "IfStatement[184223-184329]:IfStatement[184404-184510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184268-184329]:Block[184449-184510]"
    }, {
      "left" : "return repeat(str.charAt(0), repeat);",
      "right" : "return repeat(str.charAt(0), repeat);",
      "info" : "ReturnStatement[184282-184319]:ReturnStatement[184463-184500]"
    }, {
      "left" : "int outputLength = inputLength * repeat;",
      "right" : "int outputLength = inputLength * repeat;",
      "info" : "VariableDeclarationStatement[184339-184379]:VariableDeclarationStatement[184520-184560]"
    }, {
      "left" : "switch (inputLength) {\n            case 1 :\n                return repeat(str.charAt(0), repeat);\n            case 2 :\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                char[] output2 = new char[outputLength];\n                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {\n                    output2[i] = ch0;\n                    output2[i + 1] = ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuilder buf = new StringBuilder(outputLength);\n                for (int i = 0; i < repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }",
      "right" : "switch (inputLength) {\n            case 1 :\n                return repeat(str.charAt(0), repeat);\n            case 2 :\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                char[] output2 = new char[outputLength];\n                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {\n                    output2[i] = ch0;\n                    output2[i + 1] = ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuilder buf = new StringBuilder(outputLength);\n                for (int i = 0; i < repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }",
      "info" : "SwitchStatement[184388-185100]:SwitchStatement[184569-185281]"
    }, {
      "left" : "case 1 :",
      "right" : "case 1 :",
      "info" : "SwitchCase[184423-184431]:SwitchCase[184604-184612]"
    }, {
      "left" : "return repeat(str.charAt(0), repeat);",
      "right" : "return repeat(str.charAt(0), repeat);",
      "info" : "ReturnStatement[184448-184485]:ReturnStatement[184629-184666]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[184498-184506]:SwitchCase[184679-184687]"
    }, {
      "left" : "char ch0 = str.charAt(0);",
      "right" : "char ch0 = str.charAt(0);",
      "info" : "VariableDeclarationStatement[184523-184548]:VariableDeclarationStatement[184704-184729]"
    }, {
      "left" : "char ch1 = str.charAt(1);",
      "right" : "char ch1 = str.charAt(1);",
      "info" : "VariableDeclarationStatement[184565-184590]:VariableDeclarationStatement[184746-184771]"
    }, {
      "left" : "char[] output2 = new char[outputLength];",
      "right" : "char[] output2 = new char[outputLength];",
      "info" : "VariableDeclarationStatement[184607-184647]:VariableDeclarationStatement[184788-184828]"
    }, {
      "left" : "for (int i = repeat * 2 - 2; i >= 0; i--, i--)",
      "right" : "for (int i = repeat * 2 - 2; i >= 0; i--, i--)",
      "info" : "ForStatement[184664-184810]:ForStatement[184845-184991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184711-184810]:Block[184892-184991]"
    }, {
      "left" : "output2[i] = ch0;",
      "right" : "output2[i] = ch0;",
      "info" : "ExpressionStatement[184733-184750]:ExpressionStatement[184914-184931]"
    }, {
      "left" : "output2[i + 1] = ch1;",
      "right" : "output2[i + 1] = ch1;",
      "info" : "ExpressionStatement[184771-184792]:ExpressionStatement[184952-184973]"
    }, {
      "left" : "return new String(output2);",
      "right" : "return new String(output2);",
      "info" : "ReturnStatement[184827-184854]:ReturnStatement[185008-185035]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[184867-184876]:SwitchCase[185048-185057]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder(outputLength);",
      "right" : "StringBuilder buf = new StringBuilder(outputLength);",
      "info" : "VariableDeclarationStatement[184893-184945]:VariableDeclarationStatement[185074-185126]"
    }, {
      "left" : "for (int i = 0; i < repeat; i++)",
      "right" : "for (int i = 0; i < repeat; i++)",
      "info" : "ForStatement[184962-185051]:ForStatement[185143-185232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184995-185051]:Block[185176-185232]"
    }, {
      "left" : "buf.append(str);",
      "right" : "buf.append(str);",
      "info" : "ExpressionStatement[185017-185033]:ExpressionStatement[185198-185214]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[185068-185090]:ReturnStatement[185249-185271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[185985-186336]:Block[186166-186517]"
    }, {
      "left" : "if(str == null || separator == null)",
      "right" : "if(str == null || separator == null)",
      "info" : "IfStatement[185995-186330]:IfStatement[186176-186511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186032-186083]:Block[186213-186264]"
    }, {
      "left" : "return repeat(str, repeat);",
      "right" : "return repeat(str, repeat);",
      "info" : "ReturnStatement[186046-186073]:ReturnStatement[186227-186254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186089-186330]:Block[186270-186511]"
    }, {
      "left" : "String result = repeat(str + separator, repeat);",
      "right" : "String result = repeat(str + separator, repeat);",
      "info" : "VariableDeclarationStatement[186223-186271]:VariableDeclarationStatement[186404-186452]"
    }, {
      "left" : "return removeEnd(result, separator);",
      "right" : "return removeEnd(result, separator);",
      "info" : "ReturnStatement[186284-186320]:ReturnStatement[186465-186501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[187247-187408]:Block[187428-187589]"
    }, {
      "left" : "char[] buf = new char[repeat];",
      "right" : "char[] buf = new char[repeat];",
      "info" : "VariableDeclarationStatement[187257-187287]:VariableDeclarationStatement[187438-187468]"
    }, {
      "left" : "for (int i = repeat - 1; i >= 0; i--)",
      "right" : "for (int i = repeat - 1; i >= 0; i--)",
      "info" : "ForStatement[187296-187370]:ForStatement[187477-187551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[187334-187370]:Block[187515-187551]"
    }, {
      "left" : "buf[i] = ch;",
      "right" : "buf[i] = ch;",
      "info" : "ExpressionStatement[187348-187360]:ExpressionStatement[187529-187541]"
    }, {
      "left" : "return new String(buf);",
      "right" : "return new String(buf);",
      "info" : "ReturnStatement[187379-187402]:ReturnStatement[187560-187583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[188146-188194]:Block[188327-188375]"
    }, {
      "left" : "return rightPad(str, size, ' ');",
      "right" : "return rightPad(str, size, ' ');",
      "info" : "ReturnStatement[188156-188188]:ReturnStatement[188337-188369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189052-189418]:Block[189233-189599]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[189062-189115]:IfStatement[189243-189296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189079-189115]:Block[189260-189296]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[189093-189105]:ReturnStatement[189274-189286]"
    }, {
      "left" : "int pads = size - str.length();",
      "right" : "int pads = size - str.length();",
      "info" : "VariableDeclarationStatement[189124-189155]:VariableDeclarationStatement[189305-189336]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[189164-189255]:IfStatement[189345-189436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189179-189255]:Block[189360-189436]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[189193-189204]:ReturnStatement[189374-189385]"
    }, {
      "left" : "if (pads > PAD_LIMIT)",
      "right" : "if (pads > PAD_LIMIT)",
      "info" : "IfStatement[189264-189362]:IfStatement[189445-189543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189286-189362]:Block[189467-189543]"
    }, {
      "left" : "return rightPad(str, size, String.valueOf(padChar));",
      "right" : "return rightPad(str, size, String.valueOf(padChar));",
      "info" : "ReturnStatement[189300-189352]:ReturnStatement[189481-189533]"
    }, {
      "left" : "return str.concat(repeat(padChar, pads));",
      "right" : "return str.concat(repeat(padChar, pads));",
      "info" : "ReturnStatement[189371-189412]:ReturnStatement[189552-189593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190465-191374]:Block[190646-191555]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[190475-190528]:IfStatement[190656-190709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190492-190528]:Block[190673-190709]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[190506-190518]:ReturnStatement[190687-190699]"
    }, {
      "left" : "if (isEmpty(padStr))",
      "right" : "if (isEmpty(padStr))",
      "info" : "IfStatement[190537-190595]:IfStatement[190718-190776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190558-190595]:Block[190739-190776]"
    }, {
      "left" : "padStr = \" \";",
      "right" : "padStr = \" \";",
      "info" : "ExpressionStatement[190572-190585]:ExpressionStatement[190753-190766]"
    }, {
      "left" : "int padLen = padStr.length();",
      "right" : "int padLen = padStr.length();",
      "info" : "VariableDeclarationStatement[190604-190633]:VariableDeclarationStatement[190785-190814]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[190642-190668]:VariableDeclarationStatement[190823-190849]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[190677-190702]:VariableDeclarationStatement[190858-190883]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[190711-190802]:IfStatement[190892-190983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190726-190802]:Block[190907-190983]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[190740-190751]:ReturnStatement[190921-190932]"
    }, {
      "left" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "right" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "info" : "IfStatement[190811-190918]:IfStatement[190992-191099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190849-190918]:Block[191030-191099]"
    }, {
      "left" : "return rightPad(str, size, padStr.charAt(0));",
      "right" : "return rightPad(str, size, padStr.charAt(0));",
      "info" : "ReturnStatement[190863-190908]:ReturnStatement[191044-191089]"
    }, {
      "left" : "if (pads == padLen)",
      "right" : "if (pads == padLen)",
      "info" : "IfStatement[190928-191368]:IfStatement[191109-191549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190948-190998]:Block[191129-191179]"
    }, {
      "left" : "return str.concat(padStr);",
      "right" : "return str.concat(padStr);",
      "info" : "ReturnStatement[190962-190988]:ReturnStatement[191143-191169]"
    }, {
      "left" : "if (pads < padLen)",
      "right" : "if (pads < padLen)",
      "info" : "IfStatement[191004-191368]:IfStatement[191185-191549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191023-191092]:Block[191204-191273]"
    }, {
      "left" : "return str.concat(padStr.substring(0, pads));",
      "right" : "return str.concat(padStr.substring(0, pads));",
      "info" : "ReturnStatement[191037-191082]:ReturnStatement[191218-191263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191098-191368]:Block[191279-191549]"
    }, {
      "left" : "char[] padding = new char[pads];",
      "right" : "char[] padding = new char[pads];",
      "info" : "VariableDeclarationStatement[191112-191144]:VariableDeclarationStatement[191293-191325]"
    }, {
      "left" : "char[] padChars = padStr.toCharArray();",
      "right" : "char[] padChars = padStr.toCharArray();",
      "info" : "VariableDeclarationStatement[191157-191196]:VariableDeclarationStatement[191338-191377]"
    }, {
      "left" : "for (int i = 0; i < pads; i++)",
      "right" : "for (int i = 0; i < pads; i++)",
      "info" : "ForStatement[191209-191306]:ForStatement[191390-191487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191240-191306]:Block[191421-191487]"
    }, {
      "left" : "padding[i] = padChars[i % padLen];",
      "right" : "padding[i] = padChars[i % padLen];",
      "info" : "ExpressionStatement[191258-191292]:ExpressionStatement[191439-191473]"
    }, {
      "left" : "return str.concat(new String(padding));",
      "right" : "return str.concat(new String(padding));",
      "info" : "ReturnStatement[191319-191358]:ReturnStatement[191500-191539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[192103-192150]:Block[192284-192331]"
    }, {
      "left" : "return leftPad(str, size, ' ');",
      "right" : "return leftPad(str, size, ' ');",
      "info" : "ReturnStatement[192113-192144]:ReturnStatement[192294-192325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[192980-193345]:Block[193161-193526]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[192990-193043]:IfStatement[193171-193224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193007-193043]:Block[193188-193224]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[193021-193033]:ReturnStatement[193202-193214]"
    }, {
      "left" : "int pads = size - str.length();",
      "right" : "int pads = size - str.length();",
      "info" : "VariableDeclarationStatement[193052-193083]:VariableDeclarationStatement[193233-193264]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[193092-193183]:IfStatement[193273-193364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193107-193183]:Block[193288-193364]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[193121-193132]:ReturnStatement[193302-193313]"
    }, {
      "left" : "if (pads > PAD_LIMIT)",
      "right" : "if (pads > PAD_LIMIT)",
      "info" : "IfStatement[193192-193289]:IfStatement[193373-193470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193214-193289]:Block[193395-193470]"
    }, {
      "left" : "return leftPad(str, size, String.valueOf(padChar));",
      "right" : "return leftPad(str, size, String.valueOf(padChar));",
      "info" : "ReturnStatement[193228-193279]:ReturnStatement[193409-193460]"
    }, {
      "left" : "return repeat(padChar, pads).concat(str);",
      "right" : "return repeat(padChar, pads).concat(str);",
      "info" : "ReturnStatement[193298-193339]:ReturnStatement[193479-193520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194361-195269]:Block[194542-195450]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[194371-194424]:IfStatement[194552-194605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194388-194424]:Block[194569-194605]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[194402-194414]:ReturnStatement[194583-194595]"
    }, {
      "left" : "if (isEmpty(padStr))",
      "right" : "if (isEmpty(padStr))",
      "info" : "IfStatement[194433-194491]:IfStatement[194614-194672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194454-194491]:Block[194635-194672]"
    }, {
      "left" : "padStr = \" \";",
      "right" : "padStr = \" \";",
      "info" : "ExpressionStatement[194468-194481]:ExpressionStatement[194649-194662]"
    }, {
      "left" : "int padLen = padStr.length();",
      "right" : "int padLen = padStr.length();",
      "info" : "VariableDeclarationStatement[194500-194529]:VariableDeclarationStatement[194681-194710]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[194538-194564]:VariableDeclarationStatement[194719-194745]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[194573-194598]:VariableDeclarationStatement[194754-194779]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[194607-194698]:IfStatement[194788-194879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194622-194698]:Block[194803-194879]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[194636-194647]:ReturnStatement[194817-194828]"
    }, {
      "left" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "right" : "if (padLen == 1 && pads <= PAD_LIMIT)",
      "info" : "IfStatement[194707-194813]:IfStatement[194888-194994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194745-194813]:Block[194926-194994]"
    }, {
      "left" : "return leftPad(str, size, padStr.charAt(0));",
      "right" : "return leftPad(str, size, padStr.charAt(0));",
      "info" : "ReturnStatement[194759-194803]:ReturnStatement[194940-194984]"
    }, {
      "left" : "if (pads == padLen)",
      "right" : "if (pads == padLen)",
      "info" : "IfStatement[194823-195263]:IfStatement[195004-195444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194843-194893]:Block[195024-195074]"
    }, {
      "left" : "return padStr.concat(str);",
      "right" : "return padStr.concat(str);",
      "info" : "ReturnStatement[194857-194883]:ReturnStatement[195038-195064]"
    }, {
      "left" : "if (pads < padLen)",
      "right" : "if (pads < padLen)",
      "info" : "IfStatement[194899-195263]:IfStatement[195080-195444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194918-194987]:Block[195099-195168]"
    }, {
      "left" : "return padStr.substring(0, pads).concat(str);",
      "right" : "return padStr.substring(0, pads).concat(str);",
      "info" : "ReturnStatement[194932-194977]:ReturnStatement[195113-195158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194993-195263]:Block[195174-195444]"
    }, {
      "left" : "char[] padding = new char[pads];",
      "right" : "char[] padding = new char[pads];",
      "info" : "VariableDeclarationStatement[195007-195039]:VariableDeclarationStatement[195188-195220]"
    }, {
      "left" : "char[] padChars = padStr.toCharArray();",
      "right" : "char[] padChars = padStr.toCharArray();",
      "info" : "VariableDeclarationStatement[195052-195091]:VariableDeclarationStatement[195233-195272]"
    }, {
      "left" : "for (int i = 0; i < pads; i++)",
      "right" : "for (int i = 0; i < pads; i++)",
      "info" : "ForStatement[195104-195201]:ForStatement[195285-195382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195135-195201]:Block[195316-195382]"
    }, {
      "left" : "padding[i] = padChars[i % padLen];",
      "right" : "padding[i] = padChars[i % padLen];",
      "info" : "ExpressionStatement[195153-195187]:ExpressionStatement[195334-195368]"
    }, {
      "left" : "return new String(padding).concat(str);",
      "right" : "return new String(padding).concat(str);",
      "info" : "ReturnStatement[195214-195253]:ReturnStatement[195395-195434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195695-195747]:Block[195876-195928]"
    }, {
      "left" : "return cs == null ? 0 : cs.length();",
      "right" : "return cs == null ? 0 : cs.length();",
      "info" : "ReturnStatement[195705-195741]:ReturnStatement[195886-195922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[196779-196825]:Block[196960-197006]"
    }, {
      "left" : "return center(str, size, ' ');",
      "right" : "return center(str, size, ' ');",
      "info" : "ReturnStatement[196789-196819]:ReturnStatement[196970-197000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197903-198232]:Block[198084-198413]"
    }, {
      "left" : "if (str == null || size <= 0)",
      "right" : "if (str == null || size <= 0)",
      "info" : "IfStatement[197913-197978]:IfStatement[198094-198159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197943-197978]:Block[198124-198159]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[197957-197968]:ReturnStatement[198138-198149]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[197987-198013]:VariableDeclarationStatement[198168-198194]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[198022-198047]:VariableDeclarationStatement[198203-198228]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[198056-198106]:IfStatement[198237-198287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[198071-198106]:Block[198252-198287]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[198085-198096]:ReturnStatement[198266-198277]"
    }, {
      "left" : "str = leftPad(str, strLen + pads / 2, padChar);",
      "right" : "str = leftPad(str, strLen + pads / 2, padChar);",
      "info" : "ExpressionStatement[198115-198162]:ExpressionStatement[198296-198343]"
    }, {
      "left" : "str = rightPad(str, size, padChar);",
      "right" : "str = rightPad(str, size, padChar);",
      "info" : "ExpressionStatement[198171-198206]:ExpressionStatement[198352-198387]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[198215-198226]:ReturnStatement[198396-198407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199496-199890]:Block[199677-200071]"
    }, {
      "left" : "if (str == null || size <= 0)",
      "right" : "if (str == null || size <= 0)",
      "info" : "IfStatement[199506-199571]:IfStatement[199687-199752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199536-199571]:Block[199717-199752]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[199550-199561]:ReturnStatement[199731-199742]"
    }, {
      "left" : "if (isEmpty(padStr))",
      "right" : "if (isEmpty(padStr))",
      "info" : "IfStatement[199580-199638]:IfStatement[199761-199819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199601-199638]:Block[199782-199819]"
    }, {
      "left" : "padStr = \" \";",
      "right" : "padStr = \" \";",
      "info" : "ExpressionStatement[199615-199628]:ExpressionStatement[199796-199809]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[199647-199673]:VariableDeclarationStatement[199828-199854]"
    }, {
      "left" : "int pads = size - strLen;",
      "right" : "int pads = size - strLen;",
      "info" : "VariableDeclarationStatement[199682-199707]:VariableDeclarationStatement[199863-199888]"
    }, {
      "left" : "if (pads <= 0)",
      "right" : "if (pads <= 0)",
      "info" : "IfStatement[199716-199766]:IfStatement[199897-199947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199731-199766]:Block[199912-199947]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[199745-199756]:ReturnStatement[199926-199937]"
    }, {
      "left" : "str = leftPad(str, strLen + pads / 2, padStr);",
      "right" : "str = leftPad(str, strLen + pads / 2, padStr);",
      "info" : "ExpressionStatement[199775-199821]:ExpressionStatement[199956-200002]"
    }, {
      "left" : "str = rightPad(str, size, padStr);",
      "right" : "str = rightPad(str, size, padStr);",
      "info" : "ExpressionStatement[199830-199864]:ExpressionStatement[200011-200045]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[199873-199884]:ReturnStatement[200054-200065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[200865-200968]:Block[201046-201149]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[200875-200928]:IfStatement[201056-201109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[200892-200928]:Block[201073-201109]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[200906-200918]:ReturnStatement[201087-201099]"
    }, {
      "left" : "return str.toUpperCase();",
      "right" : "return str.toUpperCase();",
      "info" : "ReturnStatement[200937-200962]:ReturnStatement[201118-201143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[201667-201776]:Block[201848-201957]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[201677-201730]:IfStatement[201858-201911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[201694-201730]:Block[201875-201911]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[201708-201720]:ReturnStatement[201889-201901]"
    }, {
      "left" : "return str.toUpperCase(locale);",
      "right" : "return str.toUpperCase(locale);",
      "info" : "ReturnStatement[201739-201770]:ReturnStatement[201920-201951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[202650-202753]:Block[202831-202934]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[202660-202713]:IfStatement[202841-202894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[202677-202713]:Block[202858-202894]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[202691-202703]:ReturnStatement[202872-202884]"
    }, {
      "left" : "return str.toLowerCase();",
      "right" : "return str.toLowerCase();",
      "info" : "ReturnStatement[202722-202747]:ReturnStatement[202903-202928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203452-203561]:Block[203633-203742]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[203462-203515]:IfStatement[203643-203696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203479-203515]:Block[203660-203696]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[203493-203505]:ReturnStatement[203674-203686]"
    }, {
      "left" : "return str.toLowerCase(locale);",
      "right" : "return str.toLowerCase(locale);",
      "info" : "ReturnStatement[203524-203555]:ReturnStatement[203705-203736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[204430-204712]:Block[204611-204893]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[204440-204451]:VariableDeclarationStatement[204621-204632]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[204460-204544]:IfStatement[204641-204725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[204509-204544]:Block[204690-204725]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[204523-204534]:ReturnStatement[204704-204715]"
    }, {
      "left" : "return new StringBuilder(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "right" : "return new StringBuilder(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "info" : "ReturnStatement[204553-204706]:ReturnStatement[204734-204887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[205599-205881]:Block[205780-206062]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[205609-205620]:VariableDeclarationStatement[205790-205801]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[205629-205713]:IfStatement[205810-205894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[205678-205713]:Block[205859-205894]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[205692-205703]:ReturnStatement[205873-205884]"
    }, {
      "left" : "return new StringBuilder(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "right" : "return new StringBuilder(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();",
      "info" : "ReturnStatement[205722-205875]:ReturnStatement[205903-206056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207071-207653]:Block[207252-207834]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[207081-207146]:IfStatement[207262-207327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207111-207146]:Block[207292-207327]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[207125-207136]:ReturnStatement[207306-207317]"
    }, {
      "left" : "char[] buffer = str.toCharArray();",
      "right" : "char[] buffer = str.toCharArray();",
      "info" : "VariableDeclarationStatement[207156-207190]:VariableDeclarationStatement[207337-207371]"
    }, {
      "left" : "for (int i = 0; i < buffer.length; i++)",
      "right" : "for (int i = 0; i < buffer.length; i++)",
      "info" : "ForStatement[207200-207612]:ForStatement[207381-207793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207240-207612]:Block[207421-207793]"
    }, {
      "left" : "char ch = buffer[i];",
      "right" : "char ch = buffer[i];",
      "info" : "VariableDeclarationStatement[207254-207274]:VariableDeclarationStatement[207435-207455]"
    }, {
      "left" : "if (Character.isUpperCase(ch))",
      "right" : "if (Character.isUpperCase(ch))",
      "info" : "IfStatement[207287-207602]:IfStatement[207468-207783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207318-207388]:Block[207499-207569]"
    }, {
      "left" : "buffer[i] = Character.toLowerCase(ch);",
      "right" : "buffer[i] = Character.toLowerCase(ch);",
      "info" : "ExpressionStatement[207336-207374]:ExpressionStatement[207517-207555]"
    }, {
      "left" : "if (Character.isTitleCase(ch))",
      "right" : "if (Character.isTitleCase(ch))",
      "info" : "IfStatement[207394-207602]:IfStatement[207575-207783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207425-207495]:Block[207606-207676]"
    }, {
      "left" : "buffer[i] = Character.toLowerCase(ch);",
      "right" : "buffer[i] = Character.toLowerCase(ch);",
      "info" : "ExpressionStatement[207443-207481]:ExpressionStatement[207624-207662]"
    }, {
      "left" : "if (Character.isLowerCase(ch))",
      "right" : "if (Character.isLowerCase(ch))",
      "info" : "IfStatement[207501-207602]:IfStatement[207682-207783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207532-207602]:Block[207713-207783]"
    }, {
      "left" : "buffer[i] = Character.toUpperCase(ch);",
      "right" : "buffer[i] = Character.toUpperCase(ch);",
      "info" : "ExpressionStatement[207550-207588]:ExpressionStatement[207731-207769]"
    }, {
      "left" : "return new String(buffer);",
      "right" : "return new String(buffer);",
      "info" : "ReturnStatement[207621-207647]:ReturnStatement[207802-207828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[208711-209010]:Block[208892-209191]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(sub))",
      "right" : "if (isEmpty(str) || isEmpty(sub))",
      "info" : "IfStatement[208721-208788]:IfStatement[208902-208969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[208755-208788]:Block[208936-208969]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[208769-208778]:ReturnStatement[208950-208959]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[208797-208811]:VariableDeclarationStatement[208978-208992]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[208820-208832]:VariableDeclarationStatement[209001-209013]"
    }, {
      "left" : "while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND)",
      "right" : "while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND)",
      "info" : "WhileStatement[208841-208982]:WhileStatement[209022-209163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[208917-208982]:Block[209098-209163]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[208931-208939]:ExpressionStatement[209112-209120]"
    }, {
      "left" : "idx += sub.length();",
      "right" : "idx += sub.length();",
      "info" : "ExpressionStatement[208952-208972]:ExpressionStatement[209133-209153]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[208991-209004]:ReturnStatement[209172-209185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[209947-210241]:Block[210128-210422]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[209957-210030]:IfStatement[210138-210211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[209993-210030]:Block[210174-210211]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[210007-210020]:ReturnStatement[210188-210201]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[210039-210060]:VariableDeclarationStatement[210220-210241]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[210069-210214]:ForStatement[210250-210395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210098-210214]:Block[210279-210395]"
    }, {
      "left" : "if (Character.isLetter(cs.charAt(i)) == false)",
      "right" : "if (Character.isLetter(cs.charAt(i)) == false)",
      "info" : "IfStatement[210112-210204]:IfStatement[210293-210385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210159-210204]:Block[210340-210385]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[210177-210190]:ReturnStatement[210358-210371]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[210223-210235]:ReturnStatement[210404-210416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211148-211445]:Block[211329-211626]"
    }, {
      "left" : "if (cs == null)",
      "right" : "if (cs == null)",
      "info" : "IfStatement[211158-211211]:IfStatement[211339-211392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211174-211211]:Block[211355-211392]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[211188-211201]:ReturnStatement[211369-211382]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[211220-211241]:VariableDeclarationStatement[211401-211422]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[211250-211418]:ForStatement[211431-211599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211279-211418]:Block[211460-211599]"
    }, {
      "left" : "if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ')",
      "right" : "if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ')",
      "info" : "IfStatement[211293-211408]:IfStatement[211474-211589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211363-211408]:Block[211544-211589]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[211381-211394]:ReturnStatement[211562-211575]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[211427-211439]:ReturnStatement[211608-211620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212421-212722]:Block[212602-212903]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[212431-212504]:IfStatement[212612-212685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212467-212504]:Block[212648-212685]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[212481-212494]:ReturnStatement[212662-212675]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[212513-212534]:VariableDeclarationStatement[212694-212715]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[212543-212695]:ForStatement[212724-212876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212572-212695]:Block[212753-212876]"
    }, {
      "left" : "if (Character.isLetterOrDigit(cs.charAt(i)) == false)",
      "right" : "if (Character.isLetterOrDigit(cs.charAt(i)) == false)",
      "info" : "IfStatement[212586-212685]:IfStatement[212767-212866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212640-212685]:Block[212821-212866]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[212658-212671]:ReturnStatement[212839-212852]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[212704-212716]:ReturnStatement[212885-212897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213721-214025]:Block[213902-214206]"
    }, {
      "left" : "if (cs == null)",
      "right" : "if (cs == null)",
      "info" : "IfStatement[213731-213784]:IfStatement[213912-213965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213747-213784]:Block[213928-213965]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[213761-213774]:ReturnStatement[213942-213955]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[213793-213814]:VariableDeclarationStatement[213974-213995]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[213823-213998]:ForStatement[214004-214179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213852-213998]:Block[214033-214179]"
    }, {
      "left" : "if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ')",
      "right" : "if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ')",
      "info" : "IfStatement[213866-213988]:IfStatement[214047-214169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213943-213988]:Block[214124-214169]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[213961-213974]:ReturnStatement[214142-214155]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[214007-214019]:ReturnStatement[214188-214200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[215213-215495]:Block[215394-215676]"
    }, {
      "left" : "if (cs == null)",
      "right" : "if (cs == null)",
      "info" : "IfStatement[215223-215276]:IfStatement[215404-215457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[215239-215276]:Block[215420-215457]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[215253-215266]:ReturnStatement[215434-215447]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[215285-215306]:VariableDeclarationStatement[215466-215487]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[215315-215468]:ForStatement[215496-215649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[215344-215468]:Block[215525-215649]"
    }, {
      "left" : "if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false)",
      "right" : "if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false)",
      "info" : "IfStatement[215358-215458]:IfStatement[215539-215639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[215413-215458]:Block[215594-215639]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[215431-215444]:ReturnStatement[215612-215625]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[215477-215489]:ReturnStatement[215658-215670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216502-216795]:Block[216683-216976]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[216512-216585]:IfStatement[216693-216766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216548-216585]:Block[216729-216766]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[216562-216575]:ReturnStatement[216743-216756]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[216594-216615]:VariableDeclarationStatement[216775-216796]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[216624-216768]:ForStatement[216805-216949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216653-216768]:Block[216834-216949]"
    }, {
      "left" : "if (Character.isDigit(cs.charAt(i)) == false)",
      "right" : "if (Character.isDigit(cs.charAt(i)) == false)",
      "info" : "IfStatement[216667-216758]:IfStatement[216848-216939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216713-216758]:Block[216894-216939]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[216731-216744]:ReturnStatement[216912-216925]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[216777-216789]:ReturnStatement[216958-216970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[217842-218138]:Block[218023-218319]"
    }, {
      "left" : "if (cs == null)",
      "right" : "if (cs == null)",
      "info" : "IfStatement[217852-217905]:IfStatement[218033-218086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[217868-217905]:Block[218049-218086]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[217882-217895]:ReturnStatement[218063-218076]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[217914-217935]:VariableDeclarationStatement[218095-218116]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[217944-218111]:ForStatement[218125-218292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[217973-218111]:Block[218154-218292]"
    }, {
      "left" : "if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ')",
      "right" : "if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ')",
      "info" : "IfStatement[217987-218101]:IfStatement[218168-218282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[218056-218101]:Block[218237-218282]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[218074-218087]:ReturnStatement[218255-218268]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[218120-218132]:ReturnStatement[218301-218313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[218975-219253]:Block[219156-219434]"
    }, {
      "left" : "if (cs == null)",
      "right" : "if (cs == null)",
      "info" : "IfStatement[218985-219038]:IfStatement[219166-219219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[219001-219038]:Block[219182-219219]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[219015-219028]:ReturnStatement[219196-219209]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[219047-219068]:VariableDeclarationStatement[219228-219249]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[219077-219226]:ForStatement[219258-219407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[219106-219226]:Block[219287-219407]"
    }, {
      "left" : "if (Character.isWhitespace(cs.charAt(i)) == false)",
      "right" : "if (Character.isWhitespace(cs.charAt(i)) == false)",
      "info" : "IfStatement[219120-219216]:IfStatement[219301-219397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[219171-219216]:Block[219352-219397]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[219189-219202]:ReturnStatement[219370-219383]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[219235-219247]:ReturnStatement[219416-219428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220079-220371]:Block[220260-220552]"
    }, {
      "left" : "if (cs == null || isEmpty(cs))",
      "right" : "if (cs == null || isEmpty(cs))",
      "info" : "IfStatement[220089-220157]:IfStatement[220270-220338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220120-220157]:Block[220301-220338]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[220134-220147]:ReturnStatement[220315-220328]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[220166-220187]:VariableDeclarationStatement[220347-220368]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[220196-220344]:ForStatement[220377-220525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220225-220344]:Block[220406-220525]"
    }, {
      "left" : "if (Character.isLowerCase(cs.charAt(i)) == false)",
      "right" : "if (Character.isLowerCase(cs.charAt(i)) == false)",
      "info" : "IfStatement[220239-220334]:IfStatement[220420-220515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220289-220334]:Block[220470-220515]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[220307-220320]:ReturnStatement[220488-220501]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[220353-220365]:ReturnStatement[220534-220546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221190-221482]:Block[221371-221663]"
    }, {
      "left" : "if (cs == null || isEmpty(cs))",
      "right" : "if (cs == null || isEmpty(cs))",
      "info" : "IfStatement[221200-221268]:IfStatement[221381-221449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221231-221268]:Block[221412-221449]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[221245-221258]:ReturnStatement[221426-221439]"
    }, {
      "left" : "int sz = cs.length();",
      "right" : "int sz = cs.length();",
      "info" : "VariableDeclarationStatement[221277-221298]:VariableDeclarationStatement[221458-221479]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[221307-221455]:ForStatement[221488-221636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221336-221455]:Block[221517-221636]"
    }, {
      "left" : "if (Character.isUpperCase(cs.charAt(i)) == false)",
      "right" : "if (Character.isUpperCase(cs.charAt(i)) == false)",
      "info" : "IfStatement[221350-221445]:IfStatement[221531-221626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[221400-221445]:Block[221581-221626]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[221418-221431]:ReturnStatement[221599-221612]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[221464-221476]:ReturnStatement[221645-221657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[222154-222203]:Block[222335-222384]"
    }, {
      "left" : "return str == null ? EMPTY : str;",
      "right" : "return str == null ? EMPTY : str;",
      "info" : "ReturnStatement[222164-222197]:ReturnStatement[222345-222378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[222938-222992]:Block[223119-223173]"
    }, {
      "left" : "return str == null ? defaultStr : str;",
      "right" : "return str == null ? defaultStr : str;",
      "info" : "ReturnStatement[222948-222986]:ReturnStatement[223129-223167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[223933-224000]:Block[224114-224181]"
    }, {
      "left" : "return StringUtils.isBlank(str) ? defaultStr : str;",
      "right" : "return StringUtils.isBlank(str) ? defaultStr : str;",
      "info" : "ReturnStatement[223943-223994]:ReturnStatement[224124-224175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[224910-224977]:Block[225091-225158]"
    }, {
      "left" : "return StringUtils.isEmpty(str) ? defaultStr : str;",
      "right" : "return StringUtils.isEmpty(str) ? defaultStr : str;",
      "info" : "ReturnStatement[224920-224971]:ReturnStatement[225101-225152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[225559-225688]:Block[225740-225869]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[225569-225622]:IfStatement[225750-225803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[225586-225622]:Block[225767-225803]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[225600-225612]:ReturnStatement[225781-225793]"
    }, {
      "left" : "return new StringBuilder(str).reverse().toString();",
      "right" : "return new StringBuilder(str).reverse().toString();",
      "info" : "ReturnStatement[225631-225682]:ReturnStatement[225812-225863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[226500-226804]:Block[226681-226985]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[226510-226563]:IfStatement[226691-226744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[226527-226563]:Block[226708-226744]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[226541-226553]:ReturnStatement[226722-226734]"
    }, {
      "left" : "String[] strs = split(str, separatorChar);",
      "right" : "String[] strs = split(str, separatorChar);",
      "info" : "VariableDeclarationStatement[226680-226722]:VariableDeclarationStatement[226861-226903]"
    }, {
      "left" : "ArrayUtils.reverse(strs);",
      "right" : "ArrayUtils.reverse(strs);",
      "info" : "ExpressionStatement[226731-226756]:ExpressionStatement[226912-226937]"
    }, {
      "left" : "return join(strs, separatorChar);",
      "right" : "return join(strs, separatorChar);",
      "info" : "ReturnStatement[226765-226798]:ReturnStatement[226946-226979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[228314-228366]:Block[228495-228547]"
    }, {
      "left" : "return abbreviate(str, 0, maxWidth);",
      "right" : "return abbreviate(str, 0, maxWidth);",
      "info" : "ReturnStatement[228324-228360]:ReturnStatement[228505-228541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230328-231284]:Block[230509-231465]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[230338-230391]:IfStatement[230519-230572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230355-230391]:Block[230536-230572]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[230369-230381]:ReturnStatement[230550-230562]"
    }, {
      "left" : "if (maxWidth < 4)",
      "right" : "if (maxWidth < 4)",
      "info" : "IfStatement[230400-230512]:IfStatement[230581-230693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230418-230512]:Block[230599-230693]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");",
      "right" : "throw new IllegalArgumentException(\"Minimum abbreviation width is 4\");",
      "info" : "ThrowStatement[230432-230502]:ThrowStatement[230613-230683]"
    }, {
      "left" : "if (str.length() <= maxWidth)",
      "right" : "if (str.length() <= maxWidth)",
      "info" : "IfStatement[230521-230586]:IfStatement[230702-230767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230551-230586]:Block[230732-230767]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[230565-230576]:ReturnStatement[230746-230757]"
    }, {
      "left" : "if (offset > str.length())",
      "right" : "if (offset > str.length())",
      "info" : "IfStatement[230595-230668]:IfStatement[230776-230849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230622-230668]:Block[230803-230849]"
    }, {
      "left" : "offset = str.length();",
      "right" : "offset = str.length();",
      "info" : "ExpressionStatement[230636-230658]:ExpressionStatement[230817-230839]"
    }, {
      "left" : "if (str.length() - offset < maxWidth - 3)",
      "right" : "if (str.length() - offset < maxWidth - 3)",
      "info" : "IfStatement[230677-230782]:IfStatement[230858-230963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230719-230782]:Block[230900-230963]"
    }, {
      "left" : "offset = str.length() - (maxWidth - 3);",
      "right" : "offset = str.length() - (maxWidth - 3);",
      "info" : "ExpressionStatement[230733-230772]:ExpressionStatement[230914-230953]"
    }, {
      "left" : "final String abrevMarker = \"...\";",
      "right" : "final String abrevMarker = \"...\";",
      "info" : "VariableDeclarationStatement[230791-230824]:VariableDeclarationStatement[230972-231005]"
    }, {
      "left" : "if (offset <= 4)",
      "right" : "if (offset <= 4)",
      "info" : "IfStatement[230833-230926]:IfStatement[231014-231107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230850-230926]:Block[231031-231107]"
    }, {
      "left" : "return str.substring(0, maxWidth - 3) + abrevMarker;",
      "right" : "return str.substring(0, maxWidth - 3) + abrevMarker;",
      "info" : "ReturnStatement[230864-230916]:ReturnStatement[231045-231097]"
    }, {
      "left" : "if (maxWidth < 7)",
      "right" : "if (maxWidth < 7)",
      "info" : "IfStatement[230935-231059]:IfStatement[231116-231240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230953-231059]:Block[231134-231240]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");",
      "right" : "throw new IllegalArgumentException(\"Minimum abbreviation width with offset is 7\");",
      "info" : "ThrowStatement[230967-231049]:ThrowStatement[231148-231230]"
    }, {
      "left" : "if (offset + maxWidth - 3 < str.length())",
      "right" : "if (offset + maxWidth - 3 < str.length())",
      "info" : "IfStatement[231068-231203]:IfStatement[231249-231384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[231110-231203]:Block[231291-231384]"
    }, {
      "left" : "return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);",
      "right" : "return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);",
      "info" : "ReturnStatement[231124-231193]:ReturnStatement[231305-231374]"
    }, {
      "left" : "return abrevMarker + str.substring(str.length() - (maxWidth - 3));",
      "right" : "return abrevMarker + str.substring(str.length() - (maxWidth - 3));",
      "info" : "ReturnStatement[231212-231278]:ReturnStatement[231393-231459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[232865-233446]:Block[233046-233627]"
    }, {
      "left" : "if (isEmpty(str) || isEmpty(middle))",
      "right" : "if (isEmpty(str) || isEmpty(middle))",
      "info" : "IfStatement[232875-232947]:IfStatement[233056-233128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[232912-232947]:Block[233093-233128]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[232926-232937]:ReturnStatement[233107-233118]"
    }, {
      "left" : "if (length >= str.length() || length < middle.length()+2)",
      "right" : "if (length >= str.length() || length < middle.length()+2)",
      "info" : "IfStatement[232957-233050]:IfStatement[233138-233231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[233015-233050]:Block[233196-233231]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[233029-233040]:ReturnStatement[233210-233221]"
    }, {
      "left" : "int targetSting = length-middle.length();",
      "right" : "int targetSting = length-middle.length();",
      "info" : "VariableDeclarationStatement[233060-233101]:VariableDeclarationStatement[233241-233282]"
    }, {
      "left" : "int startOffset = targetSting/2+targetSting%2;",
      "right" : "int startOffset = targetSting/2+targetSting%2;",
      "info" : "VariableDeclarationStatement[233110-233156]:VariableDeclarationStatement[233291-233337]"
    }, {
      "left" : "int endOffset = str.length()-targetSting/2;",
      "right" : "int endOffset = str.length()-targetSting/2;",
      "info" : "VariableDeclarationStatement[233165-233208]:VariableDeclarationStatement[233346-233389]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder(length);",
      "right" : "StringBuilder builder = new StringBuilder(length);",
      "info" : "VariableDeclarationStatement[233218-233268]:VariableDeclarationStatement[233399-233449]"
    }, {
      "left" : "builder.append(str.substring(0,startOffset));",
      "right" : "builder.append(str.substring(0,startOffset));",
      "info" : "ExpressionStatement[233277-233322]:ExpressionStatement[233458-233503]"
    }, {
      "left" : "builder.append(middle);",
      "right" : "builder.append(middle);",
      "info" : "ExpressionStatement[233331-233354]:ExpressionStatement[233512-233535]"
    }, {
      "left" : "builder.append(str.substring(endOffset));",
      "right" : "builder.append(str.substring(endOffset));",
      "info" : "ExpressionStatement[233363-233404]:ExpressionStatement[233544-233585]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[233414-233440]:ReturnStatement[233595-233621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234605-234894]:Block[234786-235075]"
    }, {
      "left" : "if (str1 == null)",
      "right" : "if (str1 == null)",
      "info" : "IfStatement[234615-234669]:IfStatement[234796-234850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234633-234669]:Block[234814-234850]"
    }, {
      "left" : "return str2;",
      "right" : "return str2;",
      "info" : "ReturnStatement[234647-234659]:ReturnStatement[234828-234840]"
    }, {
      "left" : "if (str2 == null)",
      "right" : "if (str2 == null)",
      "info" : "IfStatement[234678-234732]:IfStatement[234859-234913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234696-234732]:Block[234877-234913]"
    }, {
      "left" : "return str1;",
      "right" : "return str1;",
      "info" : "ReturnStatement[234710-234722]:ReturnStatement[234891-234903]"
    }, {
      "left" : "int at = indexOfDifference(str1, str2);",
      "right" : "int at = indexOfDifference(str1, str2);",
      "info" : "VariableDeclarationStatement[234741-234780]:VariableDeclarationStatement[234922-234961]"
    }, {
      "left" : "if (at == INDEX_NOT_FOUND)",
      "right" : "if (at == INDEX_NOT_FOUND)",
      "info" : "IfStatement[234789-234853]:IfStatement[234970-235034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234816-234853]:Block[234997-235034]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[234830-234843]:ReturnStatement[235011-235024]"
    }, {
      "left" : "return str2.substring(at);",
      "right" : "return str2.substring(at);",
      "info" : "ReturnStatement[234862-234888]:ReturnStatement[235043-235069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236027-236473]:Block[236208-236654]"
    }, {
      "left" : "if (cs1 == cs2)",
      "right" : "if (cs1 == cs2)",
      "info" : "IfStatement[236037-236100]:IfStatement[236218-236281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236053-236100]:Block[236234-236281]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[236067-236090]:ReturnStatement[236248-236271]"
    }, {
      "left" : "if (cs1 == null || cs2 == null)",
      "right" : "if (cs1 == null || cs2 == null)",
      "info" : "IfStatement[236109-236174]:IfStatement[236290-236355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236141-236174]:Block[236322-236355]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[236155-236164]:ReturnStatement[236336-236345]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[236183-236189]:VariableDeclarationStatement[236364-236370]"
    }, {
      "left" : "for (i = 0; i < cs1.length() && i < cs2.length(); ++i)",
      "right" : "for (i = 0; i < cs1.length() && i < cs2.length(); ++i)",
      "info" : "ForStatement[236198-236351]:ForStatement[236379-236532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236253-236351]:Block[236434-236532]"
    }, {
      "left" : "if (cs1.charAt(i) != cs2.charAt(i))",
      "right" : "if (cs1.charAt(i) != cs2.charAt(i))",
      "info" : "IfStatement[236267-236341]:IfStatement[236448-236522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236303-236341]:Block[236484-236522]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[236321-236327]:BreakStatement[236502-236508]"
    }, {
      "left" : "if (i < cs2.length() || i < cs1.length())",
      "right" : "if (i < cs2.length() || i < cs1.length())",
      "info" : "IfStatement[236360-236435]:IfStatement[236541-236616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236402-236435]:Block[236583-236616]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[236416-236425]:ReturnStatement[236597-236606]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[236444-236467]:ReturnStatement[236625-236648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[238292-240397]:Block[238473-240578]"
    }, {
      "left" : "if (css == null || css.length <= 1)",
      "right" : "if (css == null || css.length <= 1)",
      "info" : "IfStatement[238302-238385]:IfStatement[238483-238566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[238338-238385]:Block[238519-238566]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[238352-238375]:ReturnStatement[238533-238556]"
    }, {
      "left" : "boolean anyStringNull = false;",
      "right" : "boolean anyStringNull = false;",
      "info" : "VariableDeclarationStatement[238394-238424]:VariableDeclarationStatement[238575-238605]"
    }, {
      "left" : "boolean allStringsNull = true;",
      "right" : "boolean allStringsNull = true;",
      "info" : "VariableDeclarationStatement[238433-238463]:VariableDeclarationStatement[238614-238644]"
    }, {
      "left" : "int arrayLen = css.length;",
      "right" : "int arrayLen = css.length;",
      "info" : "VariableDeclarationStatement[238472-238498]:VariableDeclarationStatement[238653-238679]"
    }, {
      "left" : "int shortestStrLen = Integer.MAX_VALUE;",
      "right" : "int shortestStrLen = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[238507-238546]:VariableDeclarationStatement[238688-238727]"
    }, {
      "left" : "int longestStrLen = 0;",
      "right" : "int longestStrLen = 0;",
      "info" : "VariableDeclarationStatement[238555-238577]:VariableDeclarationStatement[238736-238758]"
    }, {
      "left" : "for (int i = 0; i < arrayLen; i++)",
      "right" : "for (int i = 0; i < arrayLen; i++)",
      "info" : "ForStatement[238772-239151]:ForStatement[238953-239332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[238807-239151]:Block[238988-239332]"
    }, {
      "left" : "if (css[i] == null)",
      "right" : "if (css[i] == null)",
      "info" : "IfStatement[238821-239141]:IfStatement[239002-239322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[238841-238930]:Block[239022-239111]"
    }, {
      "left" : "anyStringNull = true;",
      "right" : "anyStringNull = true;",
      "info" : "ExpressionStatement[238859-238880]:ExpressionStatement[239040-239061]"
    }, {
      "left" : "shortestStrLen = 0;",
      "right" : "shortestStrLen = 0;",
      "info" : "ExpressionStatement[238897-238916]:ExpressionStatement[239078-239097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[238936-239141]:Block[239117-239322]"
    }, {
      "left" : "allStringsNull = false;",
      "right" : "allStringsNull = false;",
      "info" : "ExpressionStatement[238954-238977]:ExpressionStatement[239135-239158]"
    }, {
      "left" : "shortestStrLen = Math.min(css[i].length(), shortestStrLen);",
      "right" : "shortestStrLen = Math.min(css[i].length(), shortestStrLen);",
      "info" : "ExpressionStatement[238994-239053]:ExpressionStatement[239175-239234]"
    }, {
      "left" : "longestStrLen = Math.max(css[i].length(), longestStrLen);",
      "right" : "longestStrLen = Math.max(css[i].length(), longestStrLen);",
      "info" : "ExpressionStatement[239070-239127]:ExpressionStatement[239251-239308]"
    }, {
      "left" : "if (allStringsNull || longestStrLen == 0 && !anyStringNull)",
      "right" : "if (allStringsNull || longestStrLen == 0 && !anyStringNull)",
      "info" : "IfStatement[239227-239334]:IfStatement[239408-239515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239287-239334]:Block[239468-239515]"
    }, {
      "left" : "return INDEX_NOT_FOUND;",
      "right" : "return INDEX_NOT_FOUND;",
      "info" : "ReturnStatement[239301-239324]:ReturnStatement[239482-239505]"
    }, {
      "left" : "if (shortestStrLen == 0)",
      "right" : "if (shortestStrLen == 0)",
      "info" : "IfStatement[239412-239470]:IfStatement[239593-239651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239437-239470]:Block[239618-239651]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[239451-239460]:ReturnStatement[239632-239641]"
    }, {
      "left" : "int firstDiff = -1;",
      "right" : "int firstDiff = -1;",
      "info" : "VariableDeclarationStatement[239554-239573]:VariableDeclarationStatement[239735-239754]"
    }, {
      "left" : "for (int stringPos = 0; stringPos < shortestStrLen; stringPos++)",
      "right" : "for (int stringPos = 0; stringPos < shortestStrLen; stringPos++)",
      "info" : "ForStatement[239582-240035]:ForStatement[239763-240216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239647-240035]:Block[239828-240216]"
    }, {
      "left" : "char comparisonChar = css[0].charAt(stringPos);",
      "right" : "char comparisonChar = css[0].charAt(stringPos);",
      "info" : "VariableDeclarationStatement[239661-239708]:VariableDeclarationStatement[239842-239889]"
    }, {
      "left" : "for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++)",
      "right" : "for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++)",
      "info" : "ForStatement[239721-239953]:ForStatement[239902-240134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239777-239953]:Block[239958-240134]"
    }, {
      "left" : "if (css[arrayPos].charAt(stringPos) != comparisonChar)",
      "right" : "if (css[arrayPos].charAt(stringPos) != comparisonChar)",
      "info" : "IfStatement[239795-239939]:IfStatement[239976-240120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239850-239939]:Block[240031-240120]"
    }, {
      "left" : "firstDiff = stringPos;",
      "right" : "firstDiff = stringPos;",
      "info" : "ExpressionStatement[239872-239894]:ExpressionStatement[240053-240075]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[239915-239921]:BreakStatement[240096-240102]"
    }, {
      "left" : "if (firstDiff != -1)",
      "right" : "if (firstDiff != -1)",
      "info" : "IfStatement[239966-240025]:IfStatement[240147-240206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239987-240025]:Block[240168-240206]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[240005-240011]:BreakStatement[240186-240192]"
    }, {
      "left" : "if (firstDiff == -1 && shortestStrLen != longestStrLen)",
      "right" : "if (firstDiff == -1 && shortestStrLen != longestStrLen)",
      "info" : "IfStatement[240045-240365]:IfStatement[240226-240546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[240101-240365]:Block[240282-240546]"
    }, {
      "left" : "return shortestStrLen;",
      "right" : "return shortestStrLen;",
      "info" : "ReturnStatement[240333-240355]:ReturnStatement[240514-240536]"
    }, {
      "left" : "return firstDiff;",
      "right" : "return firstDiff;",
      "info" : "ReturnStatement[240374-240391]:ReturnStatement[240555-240572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242231-242861]:Block[242412-243042]"
    }, {
      "left" : "if (strs == null || strs.length == 0)",
      "right" : "if (strs == null || strs.length == 0)",
      "info" : "IfStatement[242241-242316]:IfStatement[242422-242497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242279-242316]:Block[242460-242497]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[242293-242306]:ReturnStatement[242474-242487]"
    }, {
      "left" : "int smallestIndexOfDiff = indexOfDifference(strs);",
      "right" : "int smallestIndexOfDiff = indexOfDifference(strs);",
      "info" : "VariableDeclarationStatement[242325-242375]:VariableDeclarationStatement[242506-242556]"
    }, {
      "left" : "if (smallestIndexOfDiff == INDEX_NOT_FOUND)",
      "right" : "if (smallestIndexOfDiff == INDEX_NOT_FOUND)",
      "info" : "IfStatement[242384-242855]:IfStatement[242565-243036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242428-242588]:Block[242609-242769]"
    }, {
      "left" : "if (strs[0] == null)",
      "right" : "if (strs[0] == null)",
      "info" : "IfStatement[242484-242550]:IfStatement[242665-242731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242505-242550]:Block[242686-242731]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[242523-242536]:ReturnStatement[242704-242717]"
    }, {
      "left" : "return strs[0];",
      "right" : "return strs[0];",
      "info" : "ReturnStatement[242563-242578]:ReturnStatement[242744-242759]"
    }, {
      "left" : "if (smallestIndexOfDiff == 0)",
      "right" : "if (smallestIndexOfDiff == 0)",
      "info" : "IfStatement[242594-242855]:IfStatement[242775-243036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242624-242716]:Block[242805-242897]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[242693-242706]:ReturnStatement[242874-242887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242722-242855]:Block[242903-243036]"
    }, {
      "left" : "return strs[0].substring(0, smallestIndexOfDiff);",
      "right" : "return strs[0].substring(0, smallestIndexOfDiff);",
      "info" : "ReturnStatement[242796-242845]:ReturnStatement[242977-243026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245036-247908]:Block[245217-248089]"
    }, {
      "left" : "if (s == null || t == null)",
      "right" : "if (s == null || t == null)",
      "info" : "IfStatement[245046-245161]:IfStatement[245227-245342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245074-245161]:Block[245255-245342]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strings must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Strings must not be null\");",
      "info" : "ThrowStatement[245088-245151]:ThrowStatement[245269-245332]"
    }, {
      "left" : "int n = s.length();",
      "right" : "int n = s.length();",
      "info" : "VariableDeclarationStatement[246379-246398]:VariableDeclarationStatement[246560-246579]"
    }, {
      "left" : "int m = t.length();",
      "right" : "int m = t.length();",
      "info" : "VariableDeclarationStatement[246422-246441]:VariableDeclarationStatement[246603-246622]"
    }, {
      "left" : "if (n == 0)",
      "right" : "if (n == 0)",
      "info" : "IfStatement[246466-246562]:IfStatement[246647-246743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[246478-246511]:Block[246659-246692]"
    }, {
      "left" : "return m;",
      "right" : "return m;",
      "info" : "ReturnStatement[246492-246501]:ReturnStatement[246673-246682]"
    }, {
      "left" : "if (m == 0)",
      "right" : "if (m == 0)",
      "info" : "IfStatement[246517-246562]:IfStatement[246698-246743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[246529-246562]:Block[246710-246743]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[246543-246552]:ReturnStatement[246724-246733]"
    }, {
      "left" : "if (n > m)",
      "right" : "if (n > m)",
      "info" : "IfStatement[246572-246776]:IfStatement[246753-246957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[246583-246776]:Block[246764-246957]"
    }, {
      "left" : "CharSequence tmp = s;",
      "right" : "CharSequence tmp = s;",
      "info" : "VariableDeclarationStatement[246658-246679]:VariableDeclarationStatement[246839-246860]"
    }, {
      "left" : "s = t;",
      "right" : "s = t;",
      "info" : "ExpressionStatement[246692-246698]:ExpressionStatement[246873-246879]"
    }, {
      "left" : "t = tmp;",
      "right" : "t = tmp;",
      "info" : "ExpressionStatement[246711-246719]:ExpressionStatement[246892-246900]"
    }, {
      "left" : "n = m;",
      "right" : "n = m;",
      "info" : "ExpressionStatement[246732-246738]:ExpressionStatement[246913-246919]"
    }, {
      "left" : "m = t.length();",
      "right" : "m = t.length();",
      "info" : "ExpressionStatement[246751-246766]:ExpressionStatement[246932-246947]"
    }, {
      "left" : "int p[] = new int[n + 1];",
      "right" : "int p[] = new int[n + 1];",
      "info" : "VariableDeclarationStatement[246786-246811]:VariableDeclarationStatement[246967-246992]"
    }, {
      "left" : "int d[] = new int[n + 1];",
      "right" : "int d[] = new int[n + 1];",
      "info" : "VariableDeclarationStatement[246858-246883]:VariableDeclarationStatement[247039-247064]"
    }, {
      "left" : "int _d[];",
      "right" : "int _d[];",
      "info" : "VariableDeclarationStatement[246920-246929]:VariableDeclarationStatement[247101-247110]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[247023-247029]:VariableDeclarationStatement[247204-247210]"
    }, {
      "left" : "int j;",
      "right" : "int j;",
      "info" : "VariableDeclarationStatement[247060-247066]:VariableDeclarationStatement[247241-247247]"
    }, {
      "left" : "char t_j;",
      "right" : "char t_j;",
      "info" : "VariableDeclarationStatement[247098-247107]:VariableDeclarationStatement[247279-247288]"
    }, {
      "left" : "int cost;",
      "right" : "int cost;",
      "info" : "VariableDeclarationStatement[247139-247148]:VariableDeclarationStatement[247320-247329]"
    }, {
      "left" : "for (i = 0; i <= n; i++)",
      "right" : "for (i = 0; i <= n; i++)",
      "info" : "ForStatement[247166-247224]:ForStatement[247347-247405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[247191-247224]:Block[247372-247405]"
    }, {
      "left" : "p[i] = i;",
      "right" : "p[i] = i;",
      "info" : "ExpressionStatement[247205-247214]:ExpressionStatement[247386-247395]"
    }, {
      "left" : "for (j = 1; j <= m; j++)",
      "right" : "for (j = 1; j <= m; j++)",
      "info" : "ForStatement[247234-247751]:ForStatement[247415-247932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[247259-247751]:Block[247440-247932]"
    }, {
      "left" : "t_j = t.charAt(j - 1);",
      "right" : "t_j = t.charAt(j - 1);",
      "info" : "ExpressionStatement[247273-247295]:ExpressionStatement[247454-247476]"
    }, {
      "left" : "d[0] = j;",
      "right" : "d[0] = j;",
      "info" : "ExpressionStatement[247308-247317]:ExpressionStatement[247489-247498]"
    }, {
      "left" : "for (i = 1; i <= n; i++)",
      "right" : "for (i = 1; i <= n; i++)",
      "info" : "ForStatement[247331-247603]:ForStatement[247512-247784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[247356-247603]:Block[247537-247784]"
    }, {
      "left" : "cost = s.charAt(i - 1) == t_j ? 0 : 1;",
      "right" : "cost = s.charAt(i - 1) == t_j ? 0 : 1;",
      "info" : "ExpressionStatement[247374-247412]:ExpressionStatement[247555-247593]"
    }, {
      "left" : "d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);",
      "right" : "d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);",
      "info" : "ExpressionStatement[247522-247589]:ExpressionStatement[247703-247770]"
    }, {
      "left" : "_d = p;",
      "right" : "_d = p;",
      "info" : "ExpressionStatement[247695-247702]:ExpressionStatement[247876-247883]"
    }, {
      "left" : "p = d;",
      "right" : "p = d;",
      "info" : "ExpressionStatement[247715-247721]:ExpressionStatement[247896-247902]"
    }, {
      "left" : "d = _d;",
      "right" : "d = _d;",
      "info" : "ExpressionStatement[247734-247741]:ExpressionStatement[247915-247922]"
    }, {
      "left" : "return p[n];",
      "right" : "return p[n];",
      "info" : "ReturnStatement[247890-247902]:ReturnStatement[248071-248083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[249875-254971]:Block[250056-255152]"
    }, {
      "left" : "if (s == null || t == null)",
      "right" : "if (s == null || t == null)",
      "info" : "IfStatement[249885-250000]:IfStatement[250066-250181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[249913-250000]:Block[250094-250181]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strings must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Strings must not be null\");",
      "info" : "ThrowStatement[249927-249990]:ThrowStatement[250108-250171]"
    }, {
      "left" : "if (threshold < 0)",
      "right" : "if (threshold < 0)",
      "info" : "IfStatement[250009-250121]:IfStatement[250190-250302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[250028-250121]:Block[250209-250302]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Threshold must not be negative\");",
      "right" : "throw new IllegalArgumentException(\"Threshold must not be negative\");",
      "info" : "ThrowStatement[250042-250111]:ThrowStatement[250223-250292]"
    }, {
      "left" : "int n = s.length();",
      "right" : "int n = s.length();",
      "info" : "VariableDeclarationStatement[252385-252404]:VariableDeclarationStatement[252566-252585]"
    }, {
      "left" : "int m = t.length();",
      "right" : "int m = t.length();",
      "info" : "VariableDeclarationStatement[252428-252447]:VariableDeclarationStatement[252609-252628]"
    }, {
      "left" : "if (n == 0)",
      "right" : "if (n == 0)",
      "info" : "IfStatement[252564-252704]:IfStatement[252745-252885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[252576-252631]:Block[252757-252812]"
    }, {
      "left" : "return m <= threshold ? m : -1;",
      "right" : "return m <= threshold ? m : -1;",
      "info" : "ReturnStatement[252590-252621]:ReturnStatement[252771-252802]"
    }, {
      "left" : "if (m == 0)",
      "right" : "if (m == 0)",
      "info" : "IfStatement[252637-252704]:IfStatement[252818-252885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[252649-252704]:Block[252830-252885]"
    }, {
      "left" : "return n <= threshold ? n : -1;",
      "right" : "return n <= threshold ? n : -1;",
      "info" : "ReturnStatement[252663-252694]:ReturnStatement[252844-252875]"
    }, {
      "left" : "if (n > m)",
      "right" : "if (n > m)",
      "info" : "IfStatement[252714-252916]:IfStatement[252895-253097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[252725-252916]:Block[252906-253097]"
    }, {
      "left" : "CharSequence tmp = s;",
      "right" : "CharSequence tmp = s;",
      "info" : "VariableDeclarationStatement[252798-252819]:VariableDeclarationStatement[252979-253000]"
    }, {
      "left" : "s = t;",
      "right" : "s = t;",
      "info" : "ExpressionStatement[252832-252838]:ExpressionStatement[253013-253019]"
    }, {
      "left" : "t = tmp;",
      "right" : "t = tmp;",
      "info" : "ExpressionStatement[252851-252859]:ExpressionStatement[253032-253040]"
    }, {
      "left" : "n = m;",
      "right" : "n = m;",
      "info" : "ExpressionStatement[252872-252878]:ExpressionStatement[253053-253059]"
    }, {
      "left" : "m = t.length();",
      "right" : "m = t.length();",
      "info" : "ExpressionStatement[252891-252906]:ExpressionStatement[253072-253087]"
    }, {
      "left" : "int p[] = new int[n + 1];",
      "right" : "int p[] = new int[n + 1];",
      "info" : "VariableDeclarationStatement[252926-252951]:VariableDeclarationStatement[253107-253132]"
    }, {
      "left" : "int d[] = new int[n + 1];",
      "right" : "int d[] = new int[n + 1];",
      "info" : "VariableDeclarationStatement[252999-253024]:VariableDeclarationStatement[253180-253205]"
    }, {
      "left" : "int _d[];",
      "right" : "int _d[];",
      "info" : "VariableDeclarationStatement[253061-253070]:VariableDeclarationStatement[253242-253251]"
    }, {
      "left" : "int boundary = Math.min(n, threshold) + 1;",
      "right" : "int boundary = Math.min(n, threshold) + 1;",
      "info" : "VariableDeclarationStatement[253166-253208]:VariableDeclarationStatement[253347-253389]"
    }, {
      "left" : "for (int i = 0; i < boundary; i++)",
      "right" : "for (int i = 0; i < boundary; i++)",
      "info" : "ForStatement[253217-253285]:ForStatement[253398-253466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[253252-253285]:Block[253433-253466]"
    }, {
      "left" : "p[i] = i;",
      "right" : "p[i] = i;",
      "info" : "ExpressionStatement[253266-253275]:ExpressionStatement[253447-253456]"
    }, {
      "left" : "Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);",
      "right" : "Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);",
      "info" : "ExpressionStatement[253436-253490]:ExpressionStatement[253617-253671]"
    }, {
      "left" : "Arrays.fill(d, Integer.MAX_VALUE);",
      "right" : "Arrays.fill(d, Integer.MAX_VALUE);",
      "info" : "ExpressionStatement[253499-253533]:ExpressionStatement[253680-253714]"
    }, {
      "left" : "for (int j = 1; j <= m; j++)",
      "right" : "for (int j = 1; j <= m; j++)",
      "info" : "ForStatement[253573-254741]:ForStatement[253754-254922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[253602-254741]:Block[253783-254922]"
    }, {
      "left" : "char t_j = t.charAt(j - 1);",
      "right" : "char t_j = t.charAt(j - 1);",
      "info" : "VariableDeclarationStatement[253616-253643]:VariableDeclarationStatement[253797-253824]"
    }, {
      "left" : "d[0] = j;",
      "right" : "d[0] = j;",
      "info" : "ExpressionStatement[253678-253687]:ExpressionStatement[253859-253868]"
    }, {
      "left" : "int min = Math.max(1, j - threshold);",
      "right" : "int min = Math.max(1, j - threshold);",
      "info" : "VariableDeclarationStatement[253764-253801]:VariableDeclarationStatement[253945-253982]"
    }, {
      "left" : "int max = Math.min(n, j + threshold);",
      "right" : "int max = Math.min(n, j + threshold);",
      "info" : "VariableDeclarationStatement[253814-253851]:VariableDeclarationStatement[253995-254032]"
    }, {
      "left" : "if (min > max)",
      "right" : "if (min > max)",
      "info" : "IfStatement[253951-254008]:IfStatement[254132-254189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[253966-254008]:Block[254147-254189]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[253984-253994]:ReturnStatement[254165-254175]"
    }, {
      "left" : "if (min > 1)",
      "right" : "if (min > 1)",
      "info" : "IfStatement[254067-254143]:IfStatement[254248-254324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254080-254143]:Block[254261-254324]"
    }, {
      "left" : "d[min - 1] = Integer.MAX_VALUE;",
      "right" : "d[min - 1] = Integer.MAX_VALUE;",
      "info" : "ExpressionStatement[254098-254129]:ExpressionStatement[254279-254310]"
    }, {
      "left" : "for (int i = min; i <= max; i++)",
      "right" : "for (int i = min; i <= max; i++)",
      "info" : "ForStatement[254205-254593]:ForStatement[254386-254774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254238-254593]:Block[254419-254774]"
    }, {
      "left" : "if (s.charAt(i - 1) == t_j)",
      "right" : "if (s.charAt(i - 1) == t_j)",
      "info" : "IfStatement[254256-254579]:IfStatement[254437-254760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254284-254386]:Block[254465-254567]"
    }, {
      "left" : "d[i] = p[i - 1];",
      "right" : "d[i] = p[i - 1];",
      "info" : "ExpressionStatement[254352-254368]:ExpressionStatement[254533-254549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254392-254579]:Block[254573-254760]"
    }, {
      "left" : "d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);",
      "right" : "d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);",
      "info" : "ExpressionStatement[254505-254561]:ExpressionStatement[254686-254742]"
    }, {
      "left" : "_d = p;",
      "right" : "_d = p;",
      "info" : "ExpressionStatement[254685-254692]:ExpressionStatement[254866-254873]"
    }, {
      "left" : "p = d;",
      "right" : "p = d;",
      "info" : "ExpressionStatement[254705-254711]:ExpressionStatement[254886-254892]"
    }, {
      "left" : "d = _d;",
      "right" : "d = _d;",
      "info" : "ExpressionStatement[254724-254731]:ExpressionStatement[254905-254912]"
    }, {
      "left" : "if (p[n] <= threshold)",
      "right" : "if (p[n] <= threshold)",
      "info" : "IfStatement[254866-254965]:IfStatement[255047-255146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254889-254925]:Block[255070-255106]"
    }, {
      "left" : "return p[n];",
      "right" : "return p[n];",
      "info" : "ReturnStatement[254903-254915]:ReturnStatement[255084-255096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254931-254965]:Block[255112-255146]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[254945-254955]:ReturnStatement[255126-255136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[256114-256168]:Block[256295-256349]"
    }, {
      "left" : "return startsWith(str, prefix, false);",
      "right" : "return startsWith(str, prefix, false);",
      "info" : "ReturnStatement[256124-256162]:ReturnStatement[256305-256343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257314-257367]:Block[257495-257548]"
    }, {
      "left" : "return startsWith(str, prefix, true);",
      "right" : "return startsWith(str, prefix, true);",
      "info" : "ReturnStatement[257324-257361]:ReturnStatement[257505-257542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257957-258247]:Block[258138-258428]"
    }, {
      "left" : "if (str == null || prefix == null)",
      "right" : "if (str == null || prefix == null)",
      "info" : "IfStatement[257967-258063]:IfStatement[258148-258244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[258002-258063]:Block[258183-258244]"
    }, {
      "left" : "return str == null && prefix == null;",
      "right" : "return str == null && prefix == null;",
      "info" : "ReturnStatement[258016-258053]:ReturnStatement[258197-258234]"
    }, {
      "left" : "if (prefix.length() > str.length())",
      "right" : "if (prefix.length() > str.length())",
      "info" : "IfStatement[258072-258145]:IfStatement[258253-258326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[258108-258145]:Block[258289-258326]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[258122-258135]:ReturnStatement[258303-258316]"
    }, {
      "left" : "return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());",
      "right" : "return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());",
      "info" : "ReturnStatement[258154-258241]:ReturnStatement[258335-258422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259310-259618]:Block[259491-259799]"
    }, {
      "left" : "if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings))",
      "right" : "if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings))",
      "info" : "IfStatement[259320-259415]:IfStatement[259501-259596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259378-259415]:Block[259559-259596]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[259392-259405]:ReturnStatement[259573-259586]"
    }, {
      "left" : "for (CharSequence searchString : searchStrings)",
      "right" : "for (CharSequence searchString : searchStrings)",
      "info" : "EnhancedForStatement[259424-259590]:EnhancedForStatement[259605-259771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259472-259590]:Block[259653-259771]"
    }, {
      "left" : "if (StringUtils.startsWith(string, searchString))",
      "right" : "if (StringUtils.startsWith(string, searchString))",
      "info" : "IfStatement[259486-259580]:IfStatement[259667-259761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259536-259580]:Block[259717-259761]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[259554-259566]:ReturnStatement[259735-259747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[259599-259612]:ReturnStatement[259780-259793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[260790-260842]:Block[260971-261023]"
    }, {
      "left" : "return endsWith(str, suffix, false);",
      "right" : "return endsWith(str, suffix, false);",
      "info" : "ReturnStatement[260800-260836]:ReturnStatement[260981-261017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262029-262080]:Block[262210-262261]"
    }, {
      "left" : "return endsWith(str, suffix, true);",
      "right" : "return endsWith(str, suffix, true);",
      "info" : "ReturnStatement[262039-262074]:ReturnStatement[262220-262255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262664-263018]:Block[262845-263199]"
    }, {
      "left" : "if (str == null || suffix == null)",
      "right" : "if (str == null || suffix == null)",
      "info" : "IfStatement[262674-262770]:IfStatement[262855-262951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262709-262770]:Block[262890-262951]"
    }, {
      "left" : "return str == null && suffix == null;",
      "right" : "return str == null && suffix == null;",
      "info" : "ReturnStatement[262723-262760]:ReturnStatement[262904-262941]"
    }, {
      "left" : "if (suffix.length() > str.length())",
      "right" : "if (suffix.length() > str.length())",
      "info" : "IfStatement[262779-262852]:IfStatement[262960-263033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262815-262852]:Block[262996-263033]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[262829-262842]:ReturnStatement[263010-263023]"
    }, {
      "left" : "int strOffset = str.length() - suffix.length();",
      "right" : "int strOffset = str.length() - suffix.length();",
      "info" : "VariableDeclarationStatement[262861-262908]:VariableDeclarationStatement[263042-263089]"
    }, {
      "left" : "return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());",
      "right" : "return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());",
      "info" : "ReturnStatement[262917-263012]:ReturnStatement[263098-263193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[264732-264869]:Block[264913-265050]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[264742-264795]:IfStatement[264923-264976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[264759-264795]:Block[264940-264976]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[264773-264785]:ReturnStatement[264954-264966]"
    }, {
      "left" : "return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll(\" \");",
      "right" : "return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll(\" \");",
      "info" : "ReturnStatement[264804-264863]:ReturnStatement[264985-265044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[265792-266098]:Block[265973-266279]"
    }, {
      "left" : "if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings))",
      "right" : "if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings))",
      "info" : "IfStatement[265802-265897]:IfStatement[265983-266078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[265860-265897]:Block[266041-266078]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[265874-265887]:ReturnStatement[266055-266068]"
    }, {
      "left" : "for (CharSequence searchString : searchStrings)",
      "right" : "for (CharSequence searchString : searchStrings)",
      "info" : "EnhancedForStatement[265906-266070]:EnhancedForStatement[266087-266251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[265954-266070]:Block[266135-266251]"
    }, {
      "left" : "if (StringUtils.endsWith(string, searchString))",
      "right" : "if (StringUtils.endsWith(string, searchString))",
      "info" : "IfStatement[265968-266060]:IfStatement[266149-266241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[266016-266060]:Block[266197-266241]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[266034-266046]:ReturnStatement[266215-266227]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[266079-266092]:ReturnStatement[266260-266273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[266710-266806]:Block[266891-266987]"
    }, {
      "left" : "return charsetName == null ? new String(bytes) : new String(bytes, charsetName);",
      "right" : "return charsetName == null ? new String(bytes) : new String(bytes, charsetName);",
      "info" : "ReturnStatement[266720-266800]:ReturnStatement[266901-266981]"
    } ]
  },
  "interFileMappings" : { }
}