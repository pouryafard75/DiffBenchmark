{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SourceMap",
      "right" : "SourceMap",
      "info" : "TypeDeclaration[867-16711]:TypeDeclaration[867-18836]"
    }, {
      "left" : "Mapping",
      "right" : "Mapping",
      "info" : "TypeDeclaration[1137-2925]:TypeDeclaration[1179-2310]"
    }, {
      "left" : "int id;",
      "right" : "int id = UNMAPPED;",
      "info" : "FieldDeclaration[1285-1373]:FieldDeclaration[1327-1426]"
    }, {
      "left" : "String sourceFile;",
      "right" : "String sourceFile;",
      "info" : "FieldDeclaration[1379-1443]:FieldDeclaration[1432-1496]"
    }, {
      "left" : "Position originalPosition;",
      "right" : "Position originalPosition;",
      "info" : "FieldDeclaration[1449-1670]:FieldDeclaration[1502-1723]"
    }, {
      "left" : "Position startPosition;",
      "right" : "Position startPosition;",
      "info" : "FieldDeclaration[1676-1837]:FieldDeclaration[1729-1890]"
    }, {
      "left" : "Position endPosition;",
      "right" : "Position endPosition;",
      "info" : "FieldDeclaration[1843-2000]:FieldDeclaration[1896-2053]"
    }, {
      "left" : "String originalName;",
      "right" : "String originalName;",
      "info" : "FieldDeclaration[2006-2147]:FieldDeclaration[2059-2200]"
    }, {
      "left" : "void appendTo(Appendable out) throws IOException",
      "right" : "private void appendMappingTo(\n        Mapping m, Appendable out) throws IOException",
      "info" : "MethodDeclaration[2292-2852]:MethodDeclaration[2583-3661]"
    }, {
      "left" : "private List<Mapping> mappings = Lists.newArrayList();",
      "right" : "private List<Mapping> mappings = Lists.newArrayList();",
      "info" : "FieldDeclaration[2929-3067]:FieldDeclaration[3916-4054]"
    }, {
      "left" : "private Position offsetPosition = new Position(0, 0);",
      "right" : "private Position offsetPosition = new Position(0, 0);",
      "info" : "FieldDeclaration[3071-3261]:FieldDeclaration[4058-4248]"
    }, {
      "left" : "private Position prefixPosition = new Position(0, 0);",
      "right" : "private Position prefixPosition = new Position(0, 0);",
      "info" : "FieldDeclaration[3265-3485]:FieldDeclaration[4252-4472]"
    }, {
      "left" : "private static String escapeString(String value)",
      "right" : "private static String escapeString(String value)",
      "info" : "MethodDeclaration[3489-3657]:MethodDeclaration[4476-4644]"
    }, {
      "left" : "private String lastSourceFile = null;",
      "right" : "private String lastSourceFile = null;",
      "info" : "FieldDeclaration[3660-3697]:FieldDeclaration[2348-2443]"
    }, {
      "left" : "private String lastSourceFileEscaped = null;",
      "right" : "private String lastSourceFileEscaped = null;",
      "info" : "FieldDeclaration[3700-3744]:FieldDeclaration[2448-2492]"
    }, {
      "left" : "void addMapping(Node node, Position startPosition, Position endPosition)",
      "right" : "void addMapping(Node node, Position startPosition, Position endPosition)",
      "info" : "MethodDeclaration[3748-6037]:MethodDeclaration[4648-6830]"
    }, {
      "left" : "void setWrapperPrefix(String prefix)",
      "right" : "void setWrapperPrefix(String prefix)",
      "info" : "MethodDeclaration[6041-6684]:MethodDeclaration[6834-7477]"
    }, {
      "left" : "void setStartingPosition(int offsetLine, int offsetIndex)",
      "right" : "void setStartingPosition(int offsetLine, int offsetIndex)",
      "info" : "MethodDeclaration[6688-7447]:MethodDeclaration[7481-8240]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[7451-7678]:MethodDeclaration[8244-8471]"
    }, {
      "left" : "private int findLastLine()",
      "right" : "private int prepMappings() throws IOException",
      "info" : "MethodDeclaration[7682-7950]:MethodDeclaration[10761-11388]"
    }, {
      "left" : "public void appendTo(Appendable out, String name) throws IOException",
      "right" : "public void appendTo(Appendable out, String name) throws IOException",
      "info" : "MethodDeclaration[7953-10286]:MethodDeclaration[8475-10757]"
    }, {
      "left" : "LineMapper",
      "right" : "LineMapper",
      "info" : "TypeDeclaration[10290-16709]:TypeDeclaration[11392-13588]"
    }, {
      "left" : "private final Appendable out;",
      "right" : "private final Appendable out;",
      "info" : "FieldDeclaration[10566-10595]:FieldDeclaration[11473-11502]"
    }, {
      "left" : "private int line;",
      "right" : "private int line;",
      "info" : "FieldDeclaration[10600-10617]:FieldDeclaration[14659-14676]"
    }, {
      "left" : "private int col;",
      "right" : "private int col;",
      "info" : "FieldDeclaration[10622-10638]:FieldDeclaration[14681-14697]"
    }, {
      "left" : "private boolean firstChar = true;",
      "right" : "private boolean firstChar = true;",
      "info" : "FieldDeclaration[10704-10737]:FieldDeclaration[11569-11602]"
    }, {
      "left" : "private final static String UNMAPPED_STRING = \"-1\";",
      "right" : "private final static String UNMAPPED_STRING = \"-1\";",
      "info" : "FieldDeclaration[10743-10794]:FieldDeclaration[11608-11659]"
    }, {
      "left" : "private final static int UNMAPPED = -1;",
      "right" : "private final static int UNMAPPED = -1;",
      "info" : "FieldDeclaration[10800-10839]:FieldDeclaration[1136-1175]"
    }, {
      "left" : "LineMapper(Appendable out)",
      "right" : "LineMapper(Appendable out)",
      "info" : "MethodDeclaration[10845-10901]:MethodDeclaration[11752-11808]"
    }, {
      "left" : "// Prevent the creation of unnecessary temporary stings for often\n        // repeated values.\n\n\n\n    // Append the line mapping entries.\n    void appendLineMappings() throws IOException",
      "right" : "void appendLineMappings() throws IOException",
      "info" : "MethodDeclaration[10907-13467]:MethodDeclaration[12629-12887]"
    }, {
      "left" : "private void openLine() throws IOException",
      "right" : "private void openLine() throws IOException",
      "info" : "MethodDeclaration[13472-13574]:MethodDeclaration[12893-13087]"
    }, {
      "left" : "private void closeLine() throws IOException",
      "right" : "private void closeLine() throws IOException",
      "info" : "MethodDeclaration[13579-13655]:MethodDeclaration[13093-13253]"
    }, {
      "left" : "private void addCharEntry(String id) throws IOException",
      "right" : "private void addCharEntry(String id) throws IOException",
      "info" : "MethodDeclaration[13660-13843]:MethodDeclaration[13259-13584]"
    }, {
      "left" : "private int getAdjustedLine(Position p)",
      "right" : "private int getAdjustedLine(Position p)",
      "info" : "MethodDeclaration[13849-14035]:MethodDeclaration[16106-16292]"
    }, {
      "left" : "private int getAdjustedCol(Position p)",
      "right" : "private int getAdjustedCol(Position p)",
      "info" : "MethodDeclaration[14041-14406]:MethodDeclaration[16298-16663]"
    }, {
      "left" : "private boolean isOverlapped(Mapping m1, Mapping m2)",
      "right" : "private boolean isOverlapped(Mapping m1, Mapping m2)",
      "info" : "MethodDeclaration[14412-14867]:MethodDeclaration[16669-17124]"
    }, {
      "left" : "private void writeClosedMapping(Mapping m) throws IOException",
      "right" : "private void maybeVisit(MappingVisitor v, Mapping m) throws IOException",
      "info" : "MethodDeclaration[14873-15412]:MethodDeclaration[17130-17670]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2405-2852]:Block[2731-3661]"
    }, {
      "left" : "out.append(\"[\");",
      "right" : "out.append(\"[\");",
      "info" : "ExpressionStatement[2413-2429]:ExpressionStatement[2739-2755]"
    }, {
      "left" : "out.append(sourceFile);",
      "right" : "out.append(escapedSourceFile);",
      "info" : "ExpressionStatement[2437-2460]:ExpressionStatement[3137-3167]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[2538-2554]:ExpressionStatement[3174-3190]"
    }, {
      "left" : "out.append(String.valueOf(originalPosition.getLineNumber()));",
      "right" : "out.append(escapeString(m.originalName));",
      "info" : "ExpressionStatement[2563-2624]:ExpressionStatement[3580-3621]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[2632-2648]:ExpressionStatement[3408-3424]"
    }, {
      "left" : "out.append(String.valueOf(originalPosition.getCharacterIndex()));",
      "right" : "out.append(String.valueOf(\n          m.originalPosition.getCharacterIndex()));",
      "info" : "ExpressionStatement[2655-2720]:ExpressionStatement[3431-3509]"
    }, {
      "left" : "if (originalName != null)",
      "right" : "if (m.originalName != null)",
      "info" : "IfStatement[2728-2822]:IfStatement[3517-3629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2754-2822]:Block[3545-3629]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[2764-2780]:ExpressionStatement[3555-3571]"
    }, {
      "left" : "out.append(originalName);",
      "right" : "out.append(lineValue);",
      "info" : "ExpressionStatement[2789-2814]:ExpressionStatement[3378-3400]"
    }, {
      "left" : "out.append(\"]\");",
      "right" : "out.append(\"]\\n\");",
      "info" : "ExpressionStatement[2830-2846]:ExpressionStatement[3637-3655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3590-3657]:Block[4577-4644]"
    }, {
      "left" : "return CodeGenerator.escapeToDoubleQuotedJsString(value);",
      "right" : "return CodeGenerator.escapeToDoubleQuotedJsString(value);",
      "info" : "ReturnStatement[3596-3653]:ReturnStatement[4583-4640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4088-6037]:Block[4988-6830]"
    }, {
      "left" : "String sourceFile = (String)node.getProp(Node.SOURCEFILE_PROP);",
      "right" : "String sourceFile = (String)node.getProp(Node.SOURCEFILE_PROP);",
      "info" : "VariableDeclarationStatement[4094-4157]:VariableDeclarationStatement[4994-5057]"
    }, {
      "left" : "if (sourceFile == null || node.getLineno() < 0)",
      "right" : "if (sourceFile == null || node.getLineno() < 0)",
      "info" : "IfStatement[4341-4410]:IfStatement[5241-5310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4389-4410]:Block[5289-5310]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4397-4404]:ReturnStatement[5297-5304]"
    }, {
      "left" : "Mapping mapping = new Mapping();",
      "right" : "Mapping mapping = new Mapping();",
      "info" : "VariableDeclarationStatement[4702-4734]:VariableDeclarationStatement[5347-5379]"
    }, {
      "left" : "mapping.id = mappings.size();",
      "right" : "mapping.sourceFile = sourceFile;",
      "info" : "ExpressionStatement[4739-4768]:ExpressionStatement[5384-5416]"
    }, {
      "left" : "mapping.originalPosition = new Position(node.getLineno(), node.getCharno());",
      "right" : "mapping.originalPosition = new Position(node.getLineno(), node.getCharno());",
      "info" : "ExpressionStatement[4817-4893]:ExpressionStatement[5421-5497]"
    }, {
      "left" : "String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);",
      "right" : "String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);",
      "info" : "VariableDeclarationStatement[4899-4966]:VariableDeclarationStatement[5503-5570]"
    }, {
      "left" : "if (originalName != null)",
      "right" : "if (originalName != null)",
      "info" : "IfStatement[4971-5061]:IfStatement[5575-5651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4997-5061]:Block[5601-5651]"
    }, {
      "left" : "mapping.originalName = escapeString(originalName);",
      "right" : "mapping.originalName = originalName;",
      "info" : "ExpressionStatement[5005-5055]:ExpressionStatement[5609-5645]"
    }, {
      "left" : "int offsetLine = offsetPosition.getLineNumber();",
      "right" : "int offsetLine = offsetPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[5299-5347]:VariableDeclarationStatement[6086-6134]"
    }, {
      "left" : "int startOffsetPosition = offsetPosition.getCharacterIndex();",
      "right" : "int startOffsetPosition = offsetPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[5354-5415]:VariableDeclarationStatement[6141-6202]"
    }, {
      "left" : "int endOffsetPosition = offsetPosition.getCharacterIndex();",
      "right" : "int endOffsetPosition = offsetPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[5422-5481]:VariableDeclarationStatement[6209-6268]"
    }, {
      "left" : "if (startPosition.getLineNumber() > 0)",
      "right" : "if (startPosition.getLineNumber() > 0)",
      "info" : "IfStatement[5489-5570]:IfStatement[6276-6357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5528-5570]:Block[5848-6798]"
    }, {
      "left" : "startOffsetPosition = 0;",
      "right" : "startOffsetPosition = 0;",
      "info" : "ExpressionStatement[5538-5562]:ExpressionStatement[6325-6349]"
    }, {
      "left" : "if (endPosition.getLineNumber() > 0)",
      "right" : "if (endPosition.getLineNumber() > 0)",
      "info" : "IfStatement[5578-5655]:IfStatement[6365-6442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5615-5655]:Block[6402-6442]"
    }, {
      "left" : "endOffsetPosition = 0;",
      "right" : "endOffsetPosition = 0;",
      "info" : "ExpressionStatement[5625-5647]:ExpressionStatement[6412-6434]"
    }, {
      "left" : "mapping.startPosition =\n          new Position(startPosition.getLineNumber() + offsetLine,\n                       startPosition.getCharacterIndex() + startOffsetPosition);",
      "right" : "mapping.startPosition =\n          new Position(startPosition.getLineNumber() + offsetLine,\n                       startPosition.getCharacterIndex() + startOffsetPosition);",
      "info" : "ExpressionStatement[5663-5834]:ExpressionStatement[6450-6621]"
    }, {
      "left" : "mapping.endPosition =\n          new Position(endPosition.getLineNumber() + offsetLine,\n                       endPosition.getCharacterIndex() + endOffsetPosition);",
      "right" : "mapping.endPosition =\n          new Position(endPosition.getLineNumber() + offsetLine,\n                       endPosition.getCharacterIndex() + endOffsetPosition);",
      "info" : "ExpressionStatement[5842-6005]:ExpressionStatement[6629-6792]"
    }, {
      "left" : "mappings.add(mapping);",
      "right" : "mappings.add(mapping);",
      "info" : "ExpressionStatement[6011-6033]:ExpressionStatement[6804-6826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6325-6684]:Block[7118-7477]"
    }, {
      "left" : "int prefixLine = 0;",
      "right" : "int prefixLine = 0;",
      "info" : "VariableDeclarationStatement[6389-6408]:VariableDeclarationStatement[7182-7201]"
    }, {
      "left" : "int prefixIndex = 0;",
      "right" : "int prefixIndex = 0;",
      "info" : "VariableDeclarationStatement[6413-6433]:VariableDeclarationStatement[7206-7226]"
    }, {
      "left" : "for (int i = 0; i < prefix.length(); ++i)",
      "right" : "for (int i = 0; i < prefix.length(); ++i)",
      "info" : "ForStatement[6439-6619]:ForStatement[7232-7412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6481-6619]:Block[7274-7412]"
    }, {
      "left" : "if (prefix.charAt(i) == '\\n')",
      "right" : "if (prefix.charAt(i) == '\\n')",
      "info" : "IfStatement[6489-6613]:IfStatement[7282-7406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6519-6575]:Block[7312-7368]"
    }, {
      "left" : "prefixLine++;",
      "right" : "prefixLine++;",
      "info" : "ExpressionStatement[6529-6542]:ExpressionStatement[7322-7335]"
    }, {
      "left" : "prefixIndex = 0;",
      "right" : "prefixIndex = 0;",
      "info" : "ExpressionStatement[6551-6567]:ExpressionStatement[7344-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6581-6613]:Block[7374-7406]"
    }, {
      "left" : "prefixIndex++;",
      "right" : "prefixIndex++;",
      "info" : "ExpressionStatement[6591-6605]:ExpressionStatement[7384-7398]"
    }, {
      "left" : "prefixPosition = new Position(prefixLine, prefixIndex);",
      "right" : "prefixPosition = new Position(prefixLine, prefixIndex);",
      "info" : "ExpressionStatement[6625-6680]:ExpressionStatement[7418-7473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7241-7447]:Block[8034-8240]"
    }, {
      "left" : "offsetPosition = new Position(offsetLine, offsetIndex);",
      "right" : "offsetPosition = new Position(offsetLine, offsetIndex);",
      "info" : "ExpressionStatement[7388-7443]:ExpressionStatement[8181-8236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7554-7678]:Block[8347-8471]"
    }, {
      "left" : "mappings = Lists.newArrayList();",
      "right" : "mappings = Lists.newArrayList();",
      "info" : "ExpressionStatement[7560-7592]:ExpressionStatement[8353-8385]"
    }, {
      "left" : "offsetPosition = new Position(0, 0);",
      "right" : "offsetPosition = new Position(0, 0);",
      "info" : "ExpressionStatement[7597-7633]:ExpressionStatement[8390-8426]"
    }, {
      "left" : "prefixPosition = new Position(0, 0);",
      "right" : "prefixPosition = new Position(0, 0);",
      "info" : "ExpressionStatement[7638-7674]:ExpressionStatement[8431-8467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7709-7950]:Block[10899-11388]"
    }, {
      "left" : "int maxLine = 0;",
      "right" : "int maxLine = 0;",
      "info" : "VariableDeclarationStatement[7715-7731]:VariableDeclarationStatement[11081-11097]"
    }, {
      "left" : "for (Mapping mapping : mappings)",
      "right" : "for (Mapping m : mappings)",
      "info" : "EnhancedForStatement[7736-7893]:EnhancedForStatement[11102-11300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7769-7893]:Block[11129-11300]"
    }, {
      "left" : "int endPositionLine = mapping.endPosition.getLineNumber();",
      "right" : "int endPositionLine = m.endPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[7777-7835]:VariableDeclarationStatement[11180-11232]"
    }, {
      "left" : "maxLine = Math.max(maxLine, endPositionLine);",
      "right" : "maxLine = Math.max(maxLine, endPositionLine);",
      "info" : "ExpressionStatement[7842-7887]:ExpressionStatement[11241-11286]"
    }, {
      "left" : "return maxLine + prefixPosition.getLineNumber();",
      "right" : "return maxLine + prefixPosition.getLineNumber();",
      "info" : "ReturnStatement[7898-7946]:ReturnStatement[11336-11384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8263-10286]:Block[8785-10757]"
    }, {
      "left" : "out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \");",
      "right" : "out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \");",
      "info" : "ExpressionStatement[9591-9643]:ExpressionStatement[10113-10165]"
    }, {
      "left" : "out.append(escapeString(name));",
      "right" : "out.append(escapeString(name));",
      "info" : "ExpressionStatement[9648-9679]:ExpressionStatement[10170-10201]"
    }, {
      "left" : "out.append(\", \\\"count\\\": \");",
      "right" : "out.append(\", \\\"count\\\": \");",
      "info" : "ExpressionStatement[9684-9712]:ExpressionStatement[10206-10234]"
    }, {
      "left" : "out.append(String.valueOf(maxLine + 1));",
      "right" : "out.append(String.valueOf(maxLine + 1));",
      "info" : "ExpressionStatement[9717-9757]:ExpressionStatement[10239-10279]"
    }, {
      "left" : "out.append(\" }\\n\");",
      "right" : "out.append(\" }\\n\");",
      "info" : "ExpressionStatement[9762-9781]:ExpressionStatement[10284-10303]"
    }, {
      "left" : "(new LineMapper(out)).appendLineMappings();",
      "right" : "(new LineMapper(out)).appendLineMappings();",
      "info" : "ExpressionStatement[9786-9829]:ExpressionStatement[10308-10351]"
    }, {
      "left" : "out.append(\"/** Begin file information. **/\\n\");",
      "right" : "out.append(\"/** Begin file information. **/\\n\");",
      "info" : "ExpressionStatement[9868-9916]:ExpressionStatement[10390-10438]"
    }, {
      "left" : "for (int i = 0; i <= maxLine; ++i)",
      "right" : "for (int i = 0; i <= maxLine; ++i)",
      "info" : "ForStatement[10022-10090]:ForStatement[10544-10612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10057-10090]:Block[10579-10612]"
    }, {
      "left" : "out.append(\"[]\\n\");",
      "right" : "out.append(\"[]\\n\");",
      "info" : "ExpressionStatement[10065-10084]:ExpressionStatement[10587-10606]"
    }, {
      "left" : "out.append(\"/** Begin mapping definitions. **/\\n\");",
      "right" : "out.append(\"/** Begin mapping definitions. **/\\n\");",
      "info" : "ExpressionStatement[10132-10183]:ExpressionStatement[10654-10705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10872-10901]:Block[11779-11808]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[10880-10895]:ExpressionStatement[11787-11802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11188-13467]:Block[12674-12887]"
    }, {
      "left" : "Preconditions.checkState(!mappings.isEmpty());",
      "right" : "Preconditions.checkState(!mappings.isEmpty());",
      "info" : "ExpressionStatement[11196-11242]:ExpressionStatement[12682-12728]"
    }, {
      "left" : "openLine();",
      "right" : "openLine();",
      "info" : "ExpressionStatement[11281-11292]:ExpressionStatement[12767-12778]"
    }, {
      "left" : "closeLine();",
      "right" : "closeLine();",
      "info" : "ExpressionStatement[13449-13461]:ExpressionStatement[12869-12881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13515-13574]:Block[12991-13087]"
    }, {
      "left" : "out.append(\"[\");",
      "right" : "out.append(\"[\");",
      "info" : "ExpressionStatement[13523-13539]:ExpressionStatement[13026-13042]"
    }, {
      "left" : "this.firstChar = true;",
      "right" : "this.firstChar = true;",
      "info" : "ExpressionStatement[13546-13568]:ExpressionStatement[13051-13073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13623-13655]:Block[13186-13253]"
    }, {
      "left" : "out.append(\"]\\n\");",
      "right" : "out.append(\"]\\n\");",
      "info" : "ExpressionStatement[13631-13649]:ExpressionStatement[13221-13239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13716-13843]:Block[13412-13584]"
    }, {
      "left" : "if (firstChar)",
      "right" : "if (firstChar)",
      "info" : "IfStatement[13724-13815]:IfStatement[13447-13546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13739-13775]:Block[13437-13578]"
    }, {
      "left" : "firstChar = false;",
      "right" : "firstChar = false;",
      "info" : "ExpressionStatement[13749-13767]:ExpressionStatement[13474-13492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13781-13815]:Block[13508-13546]"
    }, {
      "left" : "out.append(\",\");",
      "right" : "out.append(\",\");",
      "info" : "ExpressionStatement[13791-13807]:ExpressionStatement[13520-13536]"
    }, {
      "left" : "out.append(id);",
      "right" : "out.append(id);",
      "info" : "ExpressionStatement[13822-13837]:ExpressionStatement[13555-13570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13963-14035]:Block[16220-16292]"
    }, {
      "left" : "return p.getLineNumber() + prefixPosition.getLineNumber();",
      "right" : "return p.getLineNumber() + prefixPosition.getLineNumber();",
      "info" : "ReturnStatement[13971-14029]:ReturnStatement[16228-16286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14156-14406]:Block[16413-16663]"
    }, {
      "left" : "int rawLine = p.getLineNumber();",
      "right" : "int rawLine = p.getLineNumber();",
      "info" : "VariableDeclarationStatement[14164-14196]:VariableDeclarationStatement[16421-16453]"
    }, {
      "left" : "int rawCol = p.getCharacterIndex();",
      "right" : "int rawCol = p.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14203-14238]:VariableDeclarationStatement[16460-16495]"
    }, {
      "left" : "return (rawLine != 0)\n          ? rawCol : rawCol + prefixPosition.getCharacterIndex();",
      "right" : "return (rawLine != 0)\n          ? rawCol : rawCol + prefixPosition.getCharacterIndex();",
      "info" : "ReturnStatement[14313-14400]:ReturnStatement[16570-16657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14530-14867]:Block[16787-17124]"
    }, {
      "left" : "int l1 = m1.endPosition.getLineNumber();",
      "right" : "int l1 = m1.endPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[14619-14659]:VariableDeclarationStatement[16876-16916]"
    }, {
      "left" : "int l2 = m2.startPosition.getLineNumber();",
      "right" : "int l2 = m2.startPosition.getLineNumber();",
      "info" : "VariableDeclarationStatement[14666-14708]:VariableDeclarationStatement[16923-16965]"
    }, {
      "left" : "int c1 = m1.endPosition.getCharacterIndex();",
      "right" : "int c1 = m1.endPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14715-14759]:VariableDeclarationStatement[16972-17016]"
    }, {
      "left" : "int c2 = m2.startPosition.getCharacterIndex();",
      "right" : "int c2 = m2.startPosition.getCharacterIndex();",
      "info" : "VariableDeclarationStatement[14766-14812]:VariableDeclarationStatement[17023-17069]"
    }, {
      "left" : "return (l1 == l2 && c1 >= c2) || l1 > l2;",
      "right" : "return (l1 == l2 && c1 >= c2) || l1 > l2;",
      "info" : "ReturnStatement[14820-14861]:ReturnStatement[17077-17118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15052-15412]:Block[17319-17670]"
    }, {
      "left" : "int nextLine = getAdjustedLine(m.endPosition);",
      "right" : "int nextLine = getAdjustedLine(m.endPosition);",
      "info" : "VariableDeclarationStatement[15060-15106]:VariableDeclarationStatement[17327-17373]"
    }, {
      "left" : "int nextCol = getAdjustedCol(m.endPosition);",
      "right" : "int nextCol = getAdjustedCol(m.endPosition);",
      "info" : "VariableDeclarationStatement[15113-15157]:VariableDeclarationStatement[17380-17424]"
    }, {
      "left" : "if (line < nextLine || (line == nextLine && col < nextCol))",
      "right" : "if (line < nextLine || (line == nextLine && col < nextCol))",
      "info" : "IfStatement[15288-15406]:IfStatement[17555-17664]"
    } ]
  },
  "interFileMappings" : { }
}