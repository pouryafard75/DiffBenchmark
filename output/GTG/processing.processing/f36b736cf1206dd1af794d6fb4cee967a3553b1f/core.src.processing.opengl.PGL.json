{
  "matchedElements" : [ {
    "left" : "class : PGL",
    "right" : "class : PGL",
    "info" : "TypeDeclaration[1239-143846]:TypeDeclaration[1239-144086]"
  }, {
    "left" : "pg",
    "right" : "pg",
    "info" : "FieldDeclaration[1525-1605]:FieldDeclaration[1525-1605]"
  }, {
    "left" : "glThread",
    "right" : "glThread",
    "info" : "FieldDeclaration[1609-1658]:FieldDeclaration[1609-1658]"
  }, {
    "left" : "glContext",
    "right" : "glContext",
    "info" : "FieldDeclaration[1662-1743]:FieldDeclaration[1662-1743]"
  }, {
    "left" : "primaryPGL",
    "right" : "primaryPGL",
    "info" : "FieldDeclaration[1747-1847]:FieldDeclaration[1747-1847]"
  }, {
    "left" : "USE_FBOLAYER_BY_DEFAULT",
    "right" : "USE_FBOLAYER_BY_DEFAULT",
    "info" : "FieldDeclaration[1931-1988]:FieldDeclaration[1931-1988]"
  }, {
    "left" : "REQUESTED_DEPTH_BITS",
    "right" : "REQUESTED_DEPTH_BITS",
    "info" : "FieldDeclaration[1991-2037]:FieldDeclaration[1991-2037]"
  }, {
    "left" : "REQUESTED_STENCIL_BITS",
    "right" : "REQUESTED_STENCIL_BITS",
    "info" : "FieldDeclaration[2040-2085]:FieldDeclaration[2040-2085]"
  }, {
    "left" : "REQUESTED_ALPHA_BITS",
    "right" : "REQUESTED_ALPHA_BITS",
    "info" : "FieldDeclaration[2088-2133]:FieldDeclaration[2088-2133]"
  }, {
    "left" : "USE_DIRECT_BUFFERS",
    "right" : "USE_DIRECT_BUFFERS",
    "info" : "FieldDeclaration[2137-2253]:FieldDeclaration[2137-2253]"
  }, {
    "left" : "MIN_DIRECT_BUFFER_SIZE",
    "right" : "MIN_DIRECT_BUFFER_SIZE",
    "info" : "FieldDeclaration[2256-2304]:FieldDeclaration[2256-2304]"
  }, {
    "left" : "SAVE_SURFACE_TO_PIXELS_HACK",
    "right" : "SAVE_SURFACE_TO_PIXELS_HACK",
    "info" : "FieldDeclaration[2308-2618]:FieldDeclaration[2308-2618]"
  }, {
    "left" : "MIPMAPS_ENABLED",
    "right" : "MIPMAPS_ENABLED",
    "info" : "FieldDeclaration[2622-2708]:FieldDeclaration[2622-2708]"
  }, {
    "left" : "DEFAULT_IN_VERTICES",
    "right" : "DEFAULT_IN_VERTICES",
    "info" : "FieldDeclaration[2712-2825]:FieldDeclaration[2712-2825]"
  }, {
    "left" : "DEFAULT_IN_EDGES",
    "right" : "DEFAULT_IN_EDGES",
    "info" : "FieldDeclaration[2828-2877]:FieldDeclaration[2828-2877]"
  }, {
    "left" : "DEFAULT_IN_TEXTURES",
    "right" : "DEFAULT_IN_TEXTURES",
    "info" : "FieldDeclaration[2880-2928]:FieldDeclaration[2880-2928]"
  }, {
    "left" : "DEFAULT_TESS_VERTICES",
    "right" : "DEFAULT_TESS_VERTICES",
    "info" : "FieldDeclaration[2931-2979]:FieldDeclaration[2931-2979]"
  }, {
    "left" : "DEFAULT_TESS_INDICES",
    "right" : "DEFAULT_TESS_INDICES",
    "info" : "FieldDeclaration[2982-3031]:FieldDeclaration[2982-3031]"
  }, {
    "left" : "MAX_LIGHTS",
    "right" : "MAX_LIGHTS",
    "info" : "FieldDeclaration[3035-3143]:FieldDeclaration[3035-3143]"
  }, {
    "left" : "MAX_VERTEX_INDEX",
    "right" : "MAX_VERTEX_INDEX",
    "info" : "FieldDeclaration[3147-3487]:FieldDeclaration[3147-3487]"
  }, {
    "left" : "MAX_VERTEX_INDEX1",
    "right" : "MAX_VERTEX_INDEX1",
    "info" : "FieldDeclaration[3490-3552]:FieldDeclaration[3490-3552]"
  }, {
    "left" : "FLUSH_VERTEX_COUNT",
    "right" : "FLUSH_VERTEX_COUNT",
    "info" : "FieldDeclaration[3556-3948]:FieldDeclaration[3556-3948]"
  }, {
    "left" : "MIN_FONT_TEX_SIZE",
    "right" : "MIN_FONT_TEX_SIZE",
    "info" : "FieldDeclaration[3952-4070]:FieldDeclaration[3952-4070]"
  }, {
    "left" : "MAX_FONT_TEX_SIZE",
    "right" : "MAX_FONT_TEX_SIZE",
    "info" : "FieldDeclaration[4073-4119]:FieldDeclaration[4073-4119]"
  }, {
    "left" : "MIN_CAPS_JOINS_WEIGHT",
    "right" : "MIN_CAPS_JOINS_WEIGHT",
    "info" : "FieldDeclaration[4123-4301]:FieldDeclaration[4123-4301]"
  }, {
    "left" : "MAX_CAPS_JOINS_LENGTH",
    "right" : "MAX_CAPS_JOINS_LENGTH",
    "info" : "FieldDeclaration[4305-4481]:FieldDeclaration[4305-4481]"
  }, {
    "left" : "MIN_ARRAYCOPY_SIZE",
    "right" : "MIN_ARRAYCOPY_SIZE",
    "info" : "FieldDeclaration[4485-4584]:FieldDeclaration[4485-4584]"
  }, {
    "left" : "STROKE_DISPLACEMENT",
    "right" : "STROKE_DISPLACEMENT",
    "info" : "FieldDeclaration[4588-4788]:FieldDeclaration[4588-4788]"
  }, {
    "left" : "fboLayerRequested",
    "right" : "fboLayerRequested",
    "info" : "FieldDeclaration[4872-4916]:FieldDeclaration[4872-4916]"
  }, {
    "left" : "fboLayerCreated",
    "right" : "fboLayerCreated",
    "info" : "FieldDeclaration[4919-4961]:FieldDeclaration[4919-4961]"
  }, {
    "left" : "fboLayerInUse",
    "right" : "fboLayerInUse",
    "info" : "FieldDeclaration[4964-5004]:FieldDeclaration[4964-5004]"
  }, {
    "left" : "firstFrame",
    "right" : "firstFrame",
    "info" : "FieldDeclaration[5007-5043]:FieldDeclaration[5007-5043]"
  }, {
    "left" : "reqNumSamples",
    "right" : "reqNumSamples",
    "info" : "FieldDeclaration[5046-5071]:FieldDeclaration[5046-5071]"
  }, {
    "left" : "numSamples",
    "right" : "numSamples",
    "info" : "FieldDeclaration[5074-5099]:FieldDeclaration[5074-5099]"
  }, {
    "left" : "glColorFbo",
    "right" : "glColorFbo",
    "info" : "FieldDeclaration[5102-5133]:FieldDeclaration[5102-5133]"
  }, {
    "left" : "glMultiFbo",
    "right" : "glMultiFbo",
    "info" : "FieldDeclaration[5136-5167]:FieldDeclaration[5136-5167]"
  }, {
    "left" : "glColorBuf",
    "right" : "glColorBuf",
    "info" : "FieldDeclaration[5170-5201]:FieldDeclaration[5170-5201]"
  }, {
    "left" : "glColorTex",
    "right" : "glColorTex",
    "info" : "FieldDeclaration[5204-5235]:FieldDeclaration[5204-5235]"
  }, {
    "left" : "glDepthStencil",
    "right" : "glDepthStencil",
    "info" : "FieldDeclaration[5238-5273]:FieldDeclaration[5238-5273]"
  }, {
    "left" : "glDepth",
    "right" : "glDepth",
    "info" : "FieldDeclaration[5276-5304]:FieldDeclaration[5276-5304]"
  }, {
    "left" : "glStencil",
    "right" : "glStencil",
    "info" : "FieldDeclaration[5307-5337]:FieldDeclaration[5307-5337]"
  }, {
    "left" : "fboWidth",
    "right" : "fboWidth",
    "info" : "FieldDeclaration[5340-5374]:FieldDeclaration[5340-5374]"
  }, {
    "left" : "backTex",
    "right" : "backTex",
    "info" : "FieldDeclaration[5377-5409]:FieldDeclaration[5377-5409]"
  }, {
    "left" : "usingFrontTex",
    "right" : "usingFrontTex",
    "info" : "FieldDeclaration[5413-5524]:FieldDeclaration[5413-5524]"
  }, {
    "left" : "needSepFrontTex",
    "right" : "needSepFrontTex",
    "info" : "FieldDeclaration[5527-5569]:FieldDeclaration[5527-5569]"
  }, {
    "left" : "loadedTex2DShader",
    "right" : "loadedTex2DShader",
    "info" : "FieldDeclaration[5660-5704]:FieldDeclaration[5660-5704]"
  }, {
    "left" : "tex2DShaderProgram",
    "right" : "tex2DShaderProgram",
    "info" : "FieldDeclaration[5707-5740]:FieldDeclaration[5707-5740]"
  }, {
    "left" : "tex2DVertShader",
    "right" : "tex2DVertShader",
    "info" : "FieldDeclaration[5743-5773]:FieldDeclaration[5743-5773]"
  }, {
    "left" : "tex2DFragShader",
    "right" : "tex2DFragShader",
    "info" : "FieldDeclaration[5776-5806]:FieldDeclaration[5776-5806]"
  }, {
    "left" : "tex2DShaderContext",
    "right" : "tex2DShaderContext",
    "info" : "FieldDeclaration[5809-5842]:FieldDeclaration[5809-5842]"
  }, {
    "left" : "tex2DVertLoc",
    "right" : "tex2DVertLoc",
    "info" : "FieldDeclaration[5845-5872]:FieldDeclaration[5845-5872]"
  }, {
    "left" : "tex2DTCoordLoc",
    "right" : "tex2DTCoordLoc",
    "info" : "FieldDeclaration[5875-5904]:FieldDeclaration[5875-5904]"
  }, {
    "left" : "tex2DSamplerLoc",
    "right" : "tex2DSamplerLoc",
    "info" : "FieldDeclaration[5907-5937]:FieldDeclaration[5907-5937]"
  }, {
    "left" : "tex2DGeoVBO",
    "right" : "tex2DGeoVBO",
    "info" : "FieldDeclaration[5940-5966]:FieldDeclaration[5940-5966]"
  }, {
    "left" : "loadedTexRectShader",
    "right" : "loadedTexRectShader",
    "info" : "FieldDeclaration[5970-6016]:FieldDeclaration[5970-6016]"
  }, {
    "left" : "texRectShaderProgram",
    "right" : "texRectShaderProgram",
    "info" : "FieldDeclaration[6019-6054]:FieldDeclaration[6019-6054]"
  }, {
    "left" : "texRectVertShader",
    "right" : "texRectVertShader",
    "info" : "FieldDeclaration[6057-6089]:FieldDeclaration[6057-6089]"
  }, {
    "left" : "texRectFragShader",
    "right" : "texRectFragShader",
    "info" : "FieldDeclaration[6092-6124]:FieldDeclaration[6092-6124]"
  }, {
    "left" : "texRectShaderContext",
    "right" : "texRectShaderContext",
    "info" : "FieldDeclaration[6127-6162]:FieldDeclaration[6127-6162]"
  }, {
    "left" : "texRectVertLoc",
    "right" : "texRectVertLoc",
    "info" : "FieldDeclaration[6165-6194]:FieldDeclaration[6165-6194]"
  }, {
    "left" : "texRectTCoordLoc",
    "right" : "texRectTCoordLoc",
    "info" : "FieldDeclaration[6197-6228]:FieldDeclaration[6197-6228]"
  }, {
    "left" : "texRectSamplerLoc",
    "right" : "texRectSamplerLoc",
    "info" : "FieldDeclaration[6231-6263]:FieldDeclaration[6231-6263]"
  }, {
    "left" : "texRectGeoVBO",
    "right" : "texRectGeoVBO",
    "info" : "FieldDeclaration[6266-6294]:FieldDeclaration[6266-6294]"
  }, {
    "left" : "texCoords",
    "right" : "texCoords",
    "info" : "FieldDeclaration[6298-6482]:FieldDeclaration[6298-6482]"
  }, {
    "left" : "texData",
    "right" : "texData",
    "info" : "FieldDeclaration[6485-6515]:FieldDeclaration[6485-6515]"
  }, {
    "left" : "SHADER_PREPROCESSOR_DIRECTIVE",
    "right" : "SHADER_PREPROCESSOR_DIRECTIVE",
    "info" : "FieldDeclaration[6519-6687]:FieldDeclaration[6519-6687]"
  }, {
    "left" : "texVertShaderSource",
    "right" : "texVertShaderSource",
    "info" : "FieldDeclaration[6691-6951]:FieldDeclaration[6691-6951]"
  }, {
    "left" : "tex2DFragShaderSource",
    "right" : "tex2DFragShaderSource",
    "info" : "FieldDeclaration[6955-7201]:FieldDeclaration[6955-7201]"
  }, {
    "left" : "texRectFragShaderSource",
    "right" : "texRectFragShaderSource",
    "info" : "FieldDeclaration[7205-7462]:FieldDeclaration[7205-7462]"
  }, {
    "left" : "texturingTargets",
    "right" : "texturingTargets",
    "info" : "FieldDeclaration[7466-7567]:FieldDeclaration[7466-7567]"
  }, {
    "left" : "maxTexUnits",
    "right" : "maxTexUnits",
    "info" : "FieldDeclaration[7571-7668]:FieldDeclaration[7571-7668]"
  }, {
    "left" : "activeTexUnit",
    "right" : "activeTexUnit",
    "info" : "FieldDeclaration[7671-7703]:FieldDeclaration[7671-7703]"
  }, {
    "left" : "boundTextures",
    "right" : "boundTextures",
    "info" : "FieldDeclaration[7706-7738]:FieldDeclaration[7706-7738]"
  }, {
    "left" : "targetFps",
    "right" : "targetFps",
    "info" : "FieldDeclaration[7830-7861]:FieldDeclaration[7830-7861]"
  }, {
    "left" : "currentFps",
    "right" : "currentFps",
    "info" : "FieldDeclaration[7864-7896]:FieldDeclaration[7864-7896]"
  }, {
    "left" : "setFps",
    "right" : "setFps",
    "info" : "FieldDeclaration[7899-7932]:FieldDeclaration[7899-7932]"
  }, {
    "left" : "byteBuffer",
    "right" : "byteBuffer",
    "info" : "FieldDeclaration[8021-8053]:FieldDeclaration[8021-8053]"
  }, {
    "left" : "intBuffer",
    "right" : "intBuffer",
    "info" : "FieldDeclaration[8056-8086]:FieldDeclaration[8056-8086]"
  }, {
    "left" : "viewBuffer",
    "right" : "viewBuffer",
    "info" : "FieldDeclaration[8089-8120]:FieldDeclaration[8089-8120]"
  }, {
    "left" : "colorBuffer",
    "right" : "colorBuffer",
    "info" : "FieldDeclaration[8124-8156]:FieldDeclaration[8124-8156]"
  }, {
    "left" : "depthBuffer",
    "right" : "depthBuffer",
    "info" : "FieldDeclaration[8159-8193]:FieldDeclaration[8159-8193]"
  }, {
    "left" : "stencilBuffer",
    "right" : "stencilBuffer",
    "info" : "FieldDeclaration[8196-8231]:FieldDeclaration[8196-8231]"
  }, {
    "left" : "WIKI",
    "right" : "WIKI",
    "info" : "FieldDeclaration[8319-8418]:FieldDeclaration[8319-8418]"
  }, {
    "left" : "FRAMEBUFFER_ERROR",
    "right" : "FRAMEBUFFER_ERROR",
    "info" : "FieldDeclaration[8422-8553]:FieldDeclaration[8422-8553]"
  }, {
    "left" : "MISSING_FBO_ERROR",
    "right" : "MISSING_FBO_ERROR",
    "info" : "FieldDeclaration[8557-8684]:FieldDeclaration[8557-8684]"
  }, {
    "left" : "MISSING_GLSL_ERROR",
    "right" : "MISSING_GLSL_ERROR",
    "info" : "FieldDeclaration[8688-8809]:FieldDeclaration[8688-8809]"
  }, {
    "left" : "MISSING_GLFUNC_ERROR",
    "right" : "MISSING_GLFUNC_ERROR",
    "info" : "FieldDeclaration[8813-8939]:FieldDeclaration[8813-8939]"
  }, {
    "left" : "UNSUPPORTED_GLPROF_ERROR",
    "right" : "UNSUPPORTED_GLPROF_ERROR",
    "info" : "FieldDeclaration[8943-9031]:FieldDeclaration[8943-9031]"
  }, {
    "left" : "TEXUNIT_ERROR",
    "right" : "TEXUNIT_ERROR",
    "info" : "FieldDeclaration[9035-9158]:FieldDeclaration[9035-9158]"
  }, {
    "left" : "NONPRIMARY_ERROR",
    "right" : "NONPRIMARY_ERROR",
    "info" : "FieldDeclaration[9162-9634]:FieldDeclaration[9162-9634]"
  }, {
    "left" : "SIZEOF_SHORT",
    "right" : "SIZEOF_SHORT",
    "info" : "FieldDeclaration[9717-9810]:FieldDeclaration[9717-9810]"
  }, {
    "left" : "SIZEOF_INT",
    "right" : "SIZEOF_INT",
    "info" : "FieldDeclaration[9813-9866]:FieldDeclaration[9813-9866]"
  }, {
    "left" : "SIZEOF_FLOAT",
    "right" : "SIZEOF_FLOAT",
    "info" : "FieldDeclaration[9869-9920]:FieldDeclaration[9869-9920]"
  }, {
    "left" : "SIZEOF_BYTE",
    "right" : "SIZEOF_BYTE",
    "info" : "FieldDeclaration[9923-9973]:FieldDeclaration[9923-9973]"
  }, {
    "left" : "SIZEOF_INDEX",
    "right" : "SIZEOF_INDEX",
    "info" : "FieldDeclaration[9976-10025]:FieldDeclaration[9976-10025]"
  }, {
    "left" : "INDEX_TYPE",
    "right" : "INDEX_TYPE",
    "info" : "FieldDeclaration[10028-10071]:FieldDeclaration[10028-10071]"
  }, {
    "left" : "FLOAT_EPS",
    "right" : "FLOAT_EPS",
    "info" : "FieldDeclaration[10096-10193]:FieldDeclaration[10096-10193]"
  }, {
    "left" : "BIG_ENDIAN",
    "right" : "BIG_ENDIAN",
    "info" : "FieldDeclaration[10476-10707]:FieldDeclaration[10476-10707]"
  }, {
    "left" : "presentMode",
    "right" : "presentMode",
    "info" : "FieldDeclaration[10713-10748]:FieldDeclaration[10713-10748]"
  }, {
    "left" : "offsetX",
    "right" : "offsetX",
    "info" : "FieldDeclaration[10751-10772]:FieldDeclaration[10751-10772]"
  }, {
    "left" : "offsetY",
    "right" : "offsetY",
    "info" : "FieldDeclaration[10775-10796]:FieldDeclaration[10775-10796]"
  }, {
    "left" : "public PGL()",
    "right" : "public PGL()",
    "info" : "MethodDeclaration[10903-10919]:MethodDeclaration[10903-10919]"
  }, {
    "left" : "public PGL(pg )",
    "right" : "public PGL(pg )",
    "info" : "MethodDeclaration[10924-11506]:MethodDeclaration[10924-11506]"
  }, {
    "left" : "public setPrimary(primary boolean) : void",
    "right" : "public setPrimary(primary boolean) : void",
    "info" : "MethodDeclaration[11511-11582]:MethodDeclaration[11511-11582]"
  }, {
    "left" : "protected smoothToSamples(smooth int) : int",
    "right" : "protected smoothToSamples(smooth int) : int",
    "info" : "MethodDeclaration[11587-11937]:MethodDeclaration[11587-11937]"
  }, {
    "left" : "protected deleteSurface() : void",
    "right" : "protected deleteSurface() : void",
    "info" : "MethodDeclaration[12204-12662]:MethodDeclaration[12204-12662]"
  }, {
    "left" : "protected getReadFramebuffer() : int",
    "right" : "protected getReadFramebuffer() : int",
    "info" : "MethodDeclaration[12667-12758]:MethodDeclaration[12667-12758]"
  }, {
    "left" : "protected getDrawFramebuffer() : int",
    "right" : "protected getDrawFramebuffer() : int",
    "info" : "MethodDeclaration[12763-12956]:MethodDeclaration[12763-12956]"
  }, {
    "left" : "protected getDefaultDrawBuffer() : int",
    "right" : "protected getDefaultDrawBuffer() : int",
    "info" : "MethodDeclaration[12961-13057]:MethodDeclaration[12961-13057]"
  }, {
    "left" : "protected getDefaultReadBuffer() : int",
    "right" : "protected getDefaultReadBuffer() : int",
    "info" : "MethodDeclaration[13062-13159]:MethodDeclaration[13062-13159]"
  }, {
    "left" : "protected isFBOBacked() : boolean",
    "right" : "protected isFBOBacked() : boolean",
    "info" : "MethodDeclaration[13164-13228]:MethodDeclaration[13164-13228]"
  }, {
    "left" : "public requestFBOLayer() : void",
    "right" : "public requestFBOLayer() : void",
    "info" : "MethodDeclaration[13233-13298]:MethodDeclaration[13233-13298]"
  }, {
    "left" : "protected isMultisampled() : boolean",
    "right" : "protected isMultisampled() : boolean",
    "info" : "MethodDeclaration[13303-13370]:MethodDeclaration[13303-13370]"
  }, {
    "left" : "protected getDepthBits() : int",
    "right" : "protected getDepthBits() : int",
    "info" : "MethodDeclaration[13375-13503]:MethodDeclaration[13375-13503]"
  }, {
    "left" : "protected getStencilBits() : int",
    "right" : "protected getStencilBits() : int",
    "info" : "MethodDeclaration[13508-13640]:MethodDeclaration[13508-13640]"
  }, {
    "left" : "protected getDepthTest() : boolean",
    "right" : "protected getDepthTest() : boolean",
    "info" : "MethodDeclaration[13645-13796]:MethodDeclaration[13645-13796]"
  }, {
    "left" : "protected getDepthWriteMask() : boolean",
    "right" : "protected getDepthWriteMask() : boolean",
    "info" : "MethodDeclaration[13801-13962]:MethodDeclaration[13801-13962]"
  }, {
    "left" : "protected wrapBackTexture(texture ) : ",
    "right" : "protected wrapBackTexture(texture ) : ",
    "info" : "MethodDeclaration[13967-14476]:MethodDeclaration[13967-14476]"
  }, {
    "left" : "protected wrapFrontTexture(texture ) : ",
    "right" : "protected wrapFrontTexture(texture ) : ",
    "info" : "MethodDeclaration[14481-14962]:MethodDeclaration[14481-14962]"
  }, {
    "left" : "protected bindFrontTexture() : void",
    "right" : "protected bindFrontTexture() : void",
    "info" : "MethodDeclaration[14967-15171]:MethodDeclaration[14967-15171]"
  }, {
    "left" : "protected unbindFrontTexture() : void",
    "right" : "protected unbindFrontTexture() : void",
    "info" : "MethodDeclaration[15176-15601]:MethodDeclaration[15176-15601]"
  }, {
    "left" : "protected syncBackTexture() : void",
    "right" : "protected syncBackTexture() : void",
    "info" : "MethodDeclaration[15606-15999]:MethodDeclaration[15606-15999]"
  }, {
    "left" : "protected beginDraw(clear0 boolean) : void",
    "right" : "protected beginDraw(clear0 boolean) : void",
    "info" : "MethodDeclaration[16090-18096]:MethodDeclaration[16090-18096]"
  }, {
    "left" : "labelTex",
    "right" : "labelTex",
    "info" : "FieldDeclaration[18101-18120]:FieldDeclaration[18101-18120]"
  }, {
    "left" : "protected endDraw(clear0 boolean, windowColor int) : void",
    "right" : "protected endDraw(clear0 boolean, windowColor int) : void",
    "info" : "MethodDeclaration[18123-21111]:MethodDeclaration[18123-21111]"
  }, {
    "left" : "protected abstract getGL(pgl ) : void",
    "right" : "protected abstract getGL(pgl ) : void",
    "info" : "MethodDeclaration[21116-21155]:MethodDeclaration[21116-21155]"
  }, {
    "left" : "public threadIsCurrent() : boolean",
    "right" : "public threadIsCurrent() : boolean",
    "info" : "MethodDeclaration[21356-21442]:MethodDeclaration[21356-21442]"
  }, {
    "left" : "public setThread(thread ) : void",
    "right" : "public setThread(thread ) : void",
    "info" : "MethodDeclaration[21447-21512]:MethodDeclaration[21447-21512]"
  }, {
    "left" : "protected beginGL() : void",
    "right" : "protected beginGL() : void",
    "info" : "MethodDeclaration[21517-21545]:MethodDeclaration[21517-21545]"
  }, {
    "left" : "protected endGL() : void",
    "right" : "protected endGL() : void",
    "info" : "MethodDeclaration[21550-21576]:MethodDeclaration[21550-21576]"
  }, {
    "left" : "private needFBOLayer(clear0 boolean) : boolean",
    "right" : "private needFBOLayer(clear0 boolean) : boolean",
    "info" : "MethodDeclaration[21581-21960]:MethodDeclaration[21581-21960]"
  }, {
    "left" : "private createFBOLayer() : void",
    "right" : "private createFBOLayer() : void",
    "info" : "MethodDeclaration[21965-27269]:MethodDeclaration[21965-24750]"
  }, {
    "left" : "protected createEmptyContext() : int",
    "right" : "protected createEmptyContext() : int",
    "info" : "MethodDeclaration[27362-27417]:MethodDeclaration[27602-27657]"
  }, {
    "left" : "protected getCurrentContext() : int",
    "right" : "protected getCurrentContext() : int",
    "info" : "MethodDeclaration[27422-27483]:MethodDeclaration[27662-27723]"
  }, {
    "left" : "protected contextIsCurrent(other int) : boolean",
    "right" : "protected contextIsCurrent(other int) : boolean",
    "info" : "MethodDeclaration[27576-27673]:MethodDeclaration[27816-27913]"
  }, {
    "left" : "protected enableTexturing(target int) : void",
    "right" : "protected enableTexturing(target int) : void",
    "info" : "MethodDeclaration[27678-27878]:MethodDeclaration[27918-28118]"
  }, {
    "left" : "protected disableTexturing(target int) : void",
    "right" : "protected disableTexturing(target int) : void",
    "info" : "MethodDeclaration[27883-28086]:MethodDeclaration[28123-28326]"
  }, {
    "left" : "protected texturingIsEnabled(target int) : boolean",
    "right" : "protected texturingIsEnabled(target int) : boolean",
    "info" : "MethodDeclaration[28091-28330]:MethodDeclaration[28331-28570]"
  }, {
    "left" : "protected textureIsBound(target int, id int) : boolean",
    "right" : "protected textureIsBound(target int, id int) : boolean",
    "info" : "MethodDeclaration[28335-28660]:MethodDeclaration[28575-28900]"
  }, {
    "left" : "protected initTexture(target int, format int, width int, height int) : void",
    "right" : "protected initTexture(target int, format int, width int, height int) : void",
    "info" : "MethodDeclaration[28665-28795]:MethodDeclaration[28905-29035]"
  }, {
    "left" : "protected initTexture(target int, format int, width int, height int, initColor int) : void",
    "right" : "protected initTexture(target int, format int, width int, height int, initColor int) : void",
    "info" : "MethodDeclaration[28800-29383]:MethodDeclaration[29040-29623]"
  }, {
    "left" : "protected copyToTexture(target int, format int, id int, x int, y int, w int, h int, buffer ) : void",
    "right" : "protected copyToTexture(target int, format int, id int, x int, y int, w int, h int, buffer ) : void",
    "info" : "MethodDeclaration[29388-29603]:MethodDeclaration[29628-29843]"
  }, {
    "left" : "protected copyToTexture(target int, format int, id int, x int, y int, w int, h int, buffer ) : void",
    "right" : "protected copyToTexture(target int, format int, id int, x int, y int, w int, h int, buffer ) : void",
    "info" : "MethodDeclaration[29607-30102]:MethodDeclaration[29847-30342]"
  }, {
    "left" : "public drawTexture(target int, id int, width int, height int, X0 int, Y0 int, X1 int, Y1 int) : void",
    "right" : "public drawTexture(target int, id int, width int, height int, X0 int, Y0 int, X1 int, Y1 int) : void",
    "info" : "MethodDeclaration[30107-30471]:MethodDeclaration[30347-30711]"
  }, {
    "left" : "public drawTexture(target int, id int, texW int, texH int, viewX int, viewY int, scrW int, scrH int, texX0 int, texY0 int, texX1 int, texY1 int, scrX0 int, scrY0 int, scrX1 int, scrY1 int) : void",
    "right" : "public drawTexture(target int, id int, texW int, texH int, viewX int, viewY int, scrW int, scrH int, texX0 int, texY0 int, texX1 int, texY1 int, scrX0 int, scrY0 int, scrX1 int, scrY1 int) : void",
    "info" : "MethodDeclaration[30476-31291]:MethodDeclaration[30716-31531]"
  }, {
    "left" : "protected initTex2DShader() : ",
    "right" : "protected initTex2DShader() : ",
    "info" : "MethodDeclaration[31296-32619]:MethodDeclaration[31536-32859]"
  }, {
    "left" : "protected drawTexture2D(id int, texW int, texH int, viewX int, viewY int, scrW int, scrH int, texX0 int, texY0 int, texX1 int, texY1 int, scrX0 int, scrY0 int, scrX1 int, scrY1 int) : void",
    "right" : "protected drawTexture2D(id int, texW int, texH int, viewX int, viewY int, scrW int, scrH int, texX0 int, texY0 int, texX1 int, texY1 int, scrX0 int, scrY0 int, scrX1 int, scrY1 int) : void",
    "info" : "MethodDeclaration[32624-35916]:MethodDeclaration[32864-36156]"
  }, {
    "left" : "protected initTexRectShader() : ",
    "right" : "protected initTexRectShader() : ",
    "info" : "MethodDeclaration[35921-37243]:MethodDeclaration[36161-37483]"
  }, {
    "left" : "protected drawTextureRect(id int, texW int, texH int, viewX int, viewY int, scrW int, scrH int, texX0 int, texY0 int, texX1 int, texY1 int, scrX0 int, scrY0 int, scrX1 int, scrY1 int) : void",
    "right" : "protected drawTextureRect(id int, texW int, texH int, viewX int, viewY int, scrW int, scrH int, texX0 int, texY0 int, texX1 int, texY1 int, scrX0 int, scrY0 int, scrX1 int, scrY1 int) : void",
    "info" : "MethodDeclaration[37248-40588]:MethodDeclaration[37488-40828]"
  }, {
    "left" : "protected getColorValue(scrX int, scrY int) : int",
    "right" : "protected getColorValue(scrX int, scrY int) : int",
    "info" : "MethodDeclaration[40593-40881]:MethodDeclaration[40833-41121]"
  }, {
    "left" : "protected getDepthValue(scrX int, scrY int) : float",
    "right" : "protected getDepthValue(scrX int, scrY int) : float",
    "info" : "MethodDeclaration[40886-41182]:MethodDeclaration[41126-41422]"
  }, {
    "left" : "protected getStencilValue(scrX int, scrY int) : byte",
    "right" : "protected getStencilValue(scrX int, scrY int) : byte",
    "info" : "MethodDeclaration[41187-41499]:MethodDeclaration[41427-41739]"
  }, {
    "left" : "protected isPowerOfTwo(val int) : boolean",
    "right" : "protected isPowerOfTwo(val int) : boolean",
    "info" : "MethodDeclaration[41504-41591]:MethodDeclaration[41744-41831]"
  }, {
    "left" : "protected nextPowerOfTwo(val int) : int",
    "right" : "protected nextPowerOfTwo(val int) : int",
    "info" : "MethodDeclaration[41643-41759]:MethodDeclaration[41883-41999]"
  }, {
    "left" : "protected nativeToJavaARGB(color int) : int",
    "right" : "protected nativeToJavaARGB(color int) : int",
    "info" : "MethodDeclaration[41764-42258]:MethodDeclaration[42004-42498]"
  }, {
    "left" : "protected nativeToJavaARGB(pixels , width int, height int) : void",
    "right" : "protected nativeToJavaARGB(pixels , width int, height int) : void",
    "info" : "MethodDeclaration[42263-43854]:MethodDeclaration[42503-44094]"
  }, {
    "left" : "protected nativeToJavaRGB(color int) : int",
    "right" : "protected nativeToJavaRGB(color int) : int",
    "info" : "MethodDeclaration[43859-44326]:MethodDeclaration[44099-44566]"
  }, {
    "left" : "protected nativeToJavaRGB(pixels , width int, height int) : void",
    "right" : "protected nativeToJavaRGB(pixels , width int, height int) : void",
    "info" : "MethodDeclaration[44331-45979]:MethodDeclaration[44571-46219]"
  }, {
    "left" : "protected javaToNativeARGB(color int) : int",
    "right" : "protected javaToNativeARGB(color int) : int",
    "info" : "MethodDeclaration[45984-46421]:MethodDeclaration[46224-46661]"
  }, {
    "left" : "protected javaToNativeARGB(pixels , width int, height int) : void",
    "right" : "protected javaToNativeARGB(pixels , width int, height int) : void",
    "info" : "MethodDeclaration[46426-48102]:MethodDeclaration[46666-48342]"
  }, {
    "left" : "protected javaToNativeRGB(color int) : int",
    "right" : "protected javaToNativeRGB(color int) : int",
    "info" : "MethodDeclaration[48107-48554]:MethodDeclaration[48347-48794]"
  }, {
    "left" : "protected javaToNativeRGB(pixels , width int, height int) : void",
    "right" : "protected javaToNativeRGB(pixels , width int, height int) : void",
    "info" : "MethodDeclaration[48559-50218]:MethodDeclaration[48799-50458]"
  }, {
    "left" : "protected qualityToSamples(quality int) : int",
    "right" : "protected qualityToSamples(quality int) : int",
    "info" : "MethodDeclaration[50223-50440]:MethodDeclaration[50463-50680]"
  }, {
    "left" : "protected loadVertexShader(filename ) : ",
    "right" : "protected loadVertexShader(filename ) : ",
    "info" : "MethodDeclaration[50445-50547]:MethodDeclaration[50685-50787]"
  }, {
    "left" : "protected loadFragmentShader(filename ) : ",
    "right" : "protected loadFragmentShader(filename ) : ",
    "info" : "MethodDeclaration[50552-50656]:MethodDeclaration[50792-50896]"
  }, {
    "left" : "protected loadFragmentShader(url ) : ",
    "right" : "protected loadFragmentShader(url ) : ",
    "info" : "MethodDeclaration[50661-50907]:MethodDeclaration[50901-51147]"
  }, {
    "left" : "protected loadVertexShader(url ) : ",
    "right" : "protected loadVertexShader(url ) : ",
    "info" : "MethodDeclaration[50912-51154]:MethodDeclaration[51152-51394]"
  }, {
    "left" : "protected loadVertexShader(filename , version int) : ",
    "right" : "protected loadVertexShader(filename , version int) : ",
    "info" : "MethodDeclaration[51159-51269]:MethodDeclaration[51399-51509]"
  }, {
    "left" : "protected loadFragmentShader(filename , version int) : ",
    "right" : "protected loadFragmentShader(filename , version int) : ",
    "info" : "MethodDeclaration[51274-51388]:MethodDeclaration[51514-51628]"
  }, {
    "left" : "protected loadFragmentShader(url , version int) : ",
    "right" : "protected loadFragmentShader(url , version int) : ",
    "info" : "MethodDeclaration[51393-51494]:MethodDeclaration[51633-51734]"
  }, {
    "left" : "protected loadVertexShader(url , version int) : ",
    "right" : "protected loadVertexShader(url , version int) : ",
    "info" : "MethodDeclaration[51499-51596]:MethodDeclaration[51739-51836]"
  }, {
    "left" : "protected convertFragmentSource(fragSrc0 , version0 int, version1 int) : ",
    "right" : "protected convertFragmentSource(fragSrc0 , version0 int, version1 int) : ",
    "info" : "MethodDeclaration[51601-52419]:MethodDeclaration[51841-52659]"
  }, {
    "left" : "protected convertVertexSource(vertSrc0 , version0 int, version1 int) : ",
    "right" : "protected convertVertexSource(vertSrc0 , version0 int, version1 int) : ",
    "info" : "MethodDeclaration[52425-52978]:MethodDeclaration[52665-53218]"
  }, {
    "left" : "protected createShader(shaderType int, source ) : int",
    "right" : "protected createShader(shaderType int, source ) : int",
    "info" : "MethodDeclaration[52982-53420]:MethodDeclaration[53222-53660]"
  }, {
    "left" : "protected createProgram(vertexShader int, fragmentShader int) : int",
    "right" : "protected createProgram(vertexShader int, fragmentShader int) : int",
    "info" : "MethodDeclaration[53425-53900]:MethodDeclaration[53665-54140]"
  }, {
    "left" : "protected compiled(shader int) : boolean",
    "right" : "protected compiled(shader int) : boolean",
    "info" : "MethodDeclaration[53905-54074]:MethodDeclaration[54145-54314]"
  }, {
    "left" : "protected linked(program int) : boolean",
    "right" : "protected linked(program int) : boolean",
    "info" : "MethodDeclaration[54079-54246]:MethodDeclaration[54319-54486]"
  }, {
    "left" : "protected validateFramebuffer() : boolean",
    "right" : "protected validateFramebuffer() : boolean",
    "info" : "MethodDeclaration[54251-55496]:MethodDeclaration[54491-55736]"
  }, {
    "left" : "protected getGLVersion() : ",
    "right" : "protected getGLVersion() : ",
    "info" : "MethodDeclaration[55501-56241]:MethodDeclaration[55741-56481]"
  }, {
    "left" : "protected hasFBOs() : boolean",
    "right" : "protected hasFBOs() : boolean",
    "info" : "MethodDeclaration[56246-56698]:MethodDeclaration[56486-56938]"
  }, {
    "left" : "protected hasShaders() : boolean",
    "right" : "protected hasShaders() : boolean",
    "info" : "MethodDeclaration[56703-57301]:MethodDeclaration[56943-57541]"
  }, {
    "left" : "protected hasNpotTexSupport() : boolean",
    "right" : "protected hasNpotTexSupport() : boolean",
    "info" : "MethodDeclaration[57306-57545]:MethodDeclaration[57546-57785]"
  }, {
    "left" : "protected hasAutoMipmapGenSupport() : boolean",
    "right" : "protected hasAutoMipmapGenSupport() : boolean",
    "info" : "MethodDeclaration[57550-57786]:MethodDeclaration[57790-58026]"
  }, {
    "left" : "protected hasFboMultisampleSupport() : boolean",
    "right" : "protected hasFboMultisampleSupport() : boolean",
    "info" : "MethodDeclaration[57791-58036]:MethodDeclaration[58031-58276]"
  }, {
    "left" : "protected hasPackedDepthStencilSupport() : boolean",
    "right" : "protected hasPackedDepthStencilSupport() : boolean",
    "info" : "MethodDeclaration[58041-58287]:MethodDeclaration[58281-58527]"
  }, {
    "left" : "protected hasAnisoSamplingSupport() : boolean",
    "right" : "protected hasAnisoSamplingSupport() : boolean",
    "info" : "MethodDeclaration[58292-58539]:MethodDeclaration[58532-58779]"
  }, {
    "left" : "protected maxSamples() : int",
    "right" : "protected maxSamples() : int",
    "info" : "MethodDeclaration[58544-58670]:MethodDeclaration[58784-58910]"
  }, {
    "left" : "protected getMaxTexUnits() : int",
    "right" : "protected getMaxTexUnits() : int",
    "info" : "MethodDeclaration[58675-58817]:MethodDeclaration[58915-59057]"
  }, {
    "left" : "protected allocateDirectByteBuffer(size int) : ",
    "right" : "protected allocateDirectByteBuffer(size int) : ",
    "info" : "MethodDeclaration[58822-59039]:MethodDeclaration[59062-59279]"
  }, {
    "left" : "protected allocateByteBuffer(size int) : ",
    "right" : "protected allocateByteBuffer(size int) : ",
    "info" : "MethodDeclaration[59044-59240]:MethodDeclaration[59284-59480]"
  }, {
    "left" : "protected allocateByteBuffer(arr ) : ",
    "right" : "protected allocateByteBuffer(arr ) : ",
    "info" : "MethodDeclaration[59245-59515]:MethodDeclaration[59485-59755]"
  }, {
    "left" : "protected updateByteBuffer(buf , arr , wrap boolean) : ",
    "right" : "protected updateByteBuffer(buf , arr , wrap boolean) : ",
    "info" : "MethodDeclaration[59520-60166]:MethodDeclaration[59760-60406]"
  }, {
    "left" : "protected updateByteBuffer(buf , arr , offset int, size int) : void",
    "right" : "protected updateByteBuffer(buf , arr , offset int, size int) : void",
    "info" : "MethodDeclaration[60171-60466]:MethodDeclaration[60411-60706]"
  }, {
    "left" : "protected getByteArray(buf , arr ) : void",
    "right" : "protected getByteArray(buf , arr ) : void",
    "info" : "MethodDeclaration[60471-60657]:MethodDeclaration[60711-60897]"
  }, {
    "left" : "protected putByteArray(buf , arr ) : void",
    "right" : "protected putByteArray(buf , arr ) : void",
    "info" : "MethodDeclaration[60662-60848]:MethodDeclaration[60902-61088]"
  }, {
    "left" : "protected fillByteBuffer(buf , i0 int, i1 int, val byte) : void",
    "right" : "protected fillByteBuffer(buf , i0 int, i1 int, val byte) : void",
    "info" : "MethodDeclaration[60853-61127]:MethodDeclaration[61093-61367]"
  }, {
    "left" : "protected allocateDirectShortBuffer(size int) : ",
    "right" : "protected allocateDirectShortBuffer(size int) : ",
    "info" : "MethodDeclaration[61132-61380]:MethodDeclaration[61372-61620]"
  }, {
    "left" : "protected allocateShortBuffer(size int) : ",
    "right" : "protected allocateShortBuffer(size int) : ",
    "info" : "MethodDeclaration[61385-61585]:MethodDeclaration[61625-61825]"
  }, {
    "left" : "protected allocateShortBuffer(arr ) : ",
    "right" : "protected allocateShortBuffer(arr ) : ",
    "info" : "MethodDeclaration[61590-61866]:MethodDeclaration[61830-62106]"
  }, {
    "left" : "protected updateShortBuffer(buf , arr , wrap boolean) : ",
    "right" : "protected updateShortBuffer(buf , arr , wrap boolean) : ",
    "info" : "MethodDeclaration[61871-62526]:MethodDeclaration[62111-62766]"
  }, {
    "left" : "protected updateShortBuffer(buf , arr , offset int, size int) : void",
    "right" : "protected updateShortBuffer(buf , arr , offset int, size int) : void",
    "info" : "MethodDeclaration[62531-62830]:MethodDeclaration[62771-63070]"
  }, {
    "left" : "protected getShortArray(buf , arr ) : void",
    "right" : "protected getShortArray(buf , arr ) : void",
    "info" : "MethodDeclaration[62835-63024]:MethodDeclaration[63075-63264]"
  }, {
    "left" : "protected putShortArray(buf , arr ) : void",
    "right" : "protected putShortArray(buf , arr ) : void",
    "info" : "MethodDeclaration[63029-63218]:MethodDeclaration[63269-63458]"
  }, {
    "left" : "protected fillShortBuffer(buf , i0 int, i1 int, val short) : void",
    "right" : "protected fillShortBuffer(buf , i0 int, i1 int, val short) : void",
    "info" : "MethodDeclaration[63223-63503]:MethodDeclaration[63463-63743]"
  }, {
    "left" : "protected allocateDirectIntBuffer(size int) : ",
    "right" : "protected allocateDirectIntBuffer(size int) : ",
    "info" : "MethodDeclaration[63508-63748]:MethodDeclaration[63748-63988]"
  }, {
    "left" : "protected allocateIntBuffer(size int) : ",
    "right" : "protected allocateIntBuffer(size int) : ",
    "info" : "MethodDeclaration[63753-63945]:MethodDeclaration[63993-64185]"
  }, {
    "left" : "protected allocateIntBuffer(arr ) : ",
    "right" : "protected allocateIntBuffer(arr ) : ",
    "info" : "MethodDeclaration[63950-64214]:MethodDeclaration[64190-64454]"
  }, {
    "left" : "protected updateIntBuffer(buf , arr , wrap boolean) : ",
    "right" : "protected updateIntBuffer(buf , arr , wrap boolean) : ",
    "info" : "MethodDeclaration[64219-64856]:MethodDeclaration[64459-65096]"
  }, {
    "left" : "protected updateIntBuffer(buf , arr , offset int, size int) : void",
    "right" : "protected updateIntBuffer(buf , arr , offset int, size int) : void",
    "info" : "MethodDeclaration[64861-65158]:MethodDeclaration[65101-65398]"
  }, {
    "left" : "protected getIntArray(buf , arr ) : void",
    "right" : "protected getIntArray(buf , arr ) : void",
    "info" : "MethodDeclaration[65163-65346]:MethodDeclaration[65403-65586]"
  }, {
    "left" : "protected putIntArray(buf , arr ) : void",
    "right" : "protected putIntArray(buf , arr ) : void",
    "info" : "MethodDeclaration[65351-65534]:MethodDeclaration[65591-65774]"
  }, {
    "left" : "protected fillIntBuffer(buf , i0 int, i1 int, val int) : void",
    "right" : "protected fillIntBuffer(buf , i0 int, i1 int, val int) : void",
    "info" : "MethodDeclaration[65539-65769]:MethodDeclaration[65779-66009]"
  }, {
    "left" : "protected allocateDirectFloatBuffer(size int) : ",
    "right" : "protected allocateDirectFloatBuffer(size int) : ",
    "info" : "MethodDeclaration[65774-66022]:MethodDeclaration[66014-66262]"
  }, {
    "left" : "protected allocateFloatBuffer(size int) : ",
    "right" : "protected allocateFloatBuffer(size int) : ",
    "info" : "MethodDeclaration[66027-66227]:MethodDeclaration[66267-66467]"
  }, {
    "left" : "protected allocateFloatBuffer(arr ) : ",
    "right" : "protected allocateFloatBuffer(arr ) : ",
    "info" : "MethodDeclaration[66232-66508]:MethodDeclaration[66472-66748]"
  }, {
    "left" : "protected updateFloatBuffer(buf , arr , wrap boolean) : ",
    "right" : "protected updateFloatBuffer(buf , arr , wrap boolean) : ",
    "info" : "MethodDeclaration[66513-67168]:MethodDeclaration[66753-67408]"
  }, {
    "left" : "protected updateFloatBuffer(buf , arr , offset int, size int) : void",
    "right" : "protected updateFloatBuffer(buf , arr , offset int, size int) : void",
    "info" : "MethodDeclaration[67173-67476]:MethodDeclaration[67413-67716]"
  }, {
    "left" : "protected getFloatArray(buf , arr ) : void",
    "right" : "protected getFloatArray(buf , arr ) : void",
    "info" : "MethodDeclaration[67481-67670]:MethodDeclaration[67721-67910]"
  }, {
    "left" : "protected putFloatArray(buf , arr ) : void",
    "right" : "protected putFloatArray(buf , arr ) : void",
    "info" : "MethodDeclaration[67675-67864]:MethodDeclaration[67915-68104]"
  }, {
    "left" : "protected fillFloatBuffer(buf , i0 int, i1 int, val float) : void",
    "right" : "protected fillFloatBuffer(buf , i0 int, i1 int, val float) : void",
    "info" : "MethodDeclaration[67869-68149]:MethodDeclaration[68109-68389]"
  }, {
    "left" : "abstract protected getFontAscent(font ) : int",
    "right" : "abstract protected getFontAscent(font ) : int",
    "info" : "MethodDeclaration[68287-68337]:MethodDeclaration[68527-68577]"
  }, {
    "left" : "abstract protected getFontDescent(font ) : int",
    "right" : "abstract protected getFontDescent(font ) : int",
    "info" : "MethodDeclaration[68342-68393]:MethodDeclaration[68582-68633]"
  }, {
    "left" : "abstract protected getTextWidth(font , buffer , start int, stop int) : int",
    "right" : "abstract protected getTextWidth(font , buffer , start int, stop int) : int",
    "info" : "MethodDeclaration[68398-68483]:MethodDeclaration[68638-68723]"
  }, {
    "left" : "abstract protected getDerivedFont(font , size float) : ",
    "right" : "abstract protected getDerivedFont(font , size float) : ",
    "info" : "MethodDeclaration[68488-68554]:MethodDeclaration[68728-68794]"
  }, {
    "left" : "protected abstract createTessellator(callback ) : ",
    "right" : "protected abstract createTessellator(callback ) : ",
    "info" : "MethodDeclaration[68651-68730]:MethodDeclaration[68891-68970]"
  }, {
    "left" : "interface : Tessellator",
    "right" : "interface : Tessellator",
    "info" : "TypeDeclaration[68735-68977]:TypeDeclaration[68975-69217]"
  }, {
    "left" : "public beginPolygon() : void",
    "right" : "public beginPolygon() : void",
    "info" : "MethodDeclaration[68773-68800]:MethodDeclaration[69013-69040]"
  }, {
    "left" : "public endPolygon() : void",
    "right" : "public endPolygon() : void",
    "info" : "MethodDeclaration[68805-68830]:MethodDeclaration[69045-69070]"
  }, {
    "left" : "public setWindingRule(rule int) : void",
    "right" : "public setWindingRule(rule int) : void",
    "info" : "MethodDeclaration[68835-68872]:MethodDeclaration[69075-69112]"
  }, {
    "left" : "public beginContour() : void",
    "right" : "public beginContour() : void",
    "info" : "MethodDeclaration[68877-68904]:MethodDeclaration[69117-69144]"
  }, {
    "left" : "public endContour() : void",
    "right" : "public endContour() : void",
    "info" : "MethodDeclaration[68909-68934]:MethodDeclaration[69149-69174]"
  }, {
    "left" : "public addVertex(v ) : void",
    "right" : "public addVertex(v ) : void",
    "info" : "MethodDeclaration[68939-68973]:MethodDeclaration[69179-69213]"
  }, {
    "left" : "interface : TessellatorCallback",
    "right" : "interface : TessellatorCallback",
    "info" : "TypeDeclaration[68982-69271]:TypeDeclaration[69222-69511]"
  }, {
    "left" : "public begin(type int) : void",
    "right" : "public begin(type int) : void",
    "info" : "MethodDeclaration[69029-69057]:MethodDeclaration[69269-69297]"
  }, {
    "left" : "public end() : void",
    "right" : "public end() : void",
    "info" : "MethodDeclaration[69062-69080]:MethodDeclaration[69302-69320]"
  }, {
    "left" : "public vertex(data ) : void",
    "right" : "public vertex(data ) : void",
    "info" : "MethodDeclaration[69085-69117]:MethodDeclaration[69325-69357]"
  }, {
    "left" : "public combine(coords , data , weight , outData ) : void",
    "right" : "public combine(coords , data , weight , outData ) : void",
    "info" : "MethodDeclaration[69122-69232]:MethodDeclaration[69362-69472]"
  }, {
    "left" : "public error(errnum int) : void",
    "right" : "public error(errnum int) : void",
    "info" : "MethodDeclaration[69237-69267]:MethodDeclaration[69477-69507]"
  }, {
    "left" : "protected tessError(err int) : ",
    "right" : "protected tessError(err int) : ",
    "info" : "MethodDeclaration[69276-69332]:MethodDeclaration[69516-69572]"
  }, {
    "left" : "SHAPE_TEXT_SUPPORTED",
    "right" : "SHAPE_TEXT_SUPPORTED",
    "info" : "FieldDeclaration[69429-69475]:FieldDeclaration[69669-69715]"
  }, {
    "left" : "SEG_MOVETO",
    "right" : "SEG_MOVETO",
    "info" : "FieldDeclaration[69478-69510]:FieldDeclaration[69718-69750]"
  }, {
    "left" : "SEG_LINETO",
    "right" : "SEG_LINETO",
    "info" : "FieldDeclaration[69513-69545]:FieldDeclaration[69753-69785]"
  }, {
    "left" : "SEG_QUADTO",
    "right" : "SEG_QUADTO",
    "info" : "FieldDeclaration[69548-69580]:FieldDeclaration[69788-69820]"
  }, {
    "left" : "SEG_CUBICTO",
    "right" : "SEG_CUBICTO",
    "info" : "FieldDeclaration[69583-69616]:FieldDeclaration[69823-69856]"
  }, {
    "left" : "SEG_CLOSE",
    "right" : "SEG_CLOSE",
    "info" : "FieldDeclaration[69619-69650]:FieldDeclaration[69859-69890]"
  }, {
    "left" : "protected abstract createFontOutline(ch char, font ) : ",
    "right" : "protected abstract createFontOutline(ch char, font ) : ",
    "info" : "MethodDeclaration[69655-69726]:MethodDeclaration[69895-69966]"
  }, {
    "left" : "interface : FontOutline",
    "right" : "interface : FontOutline",
    "info" : "TypeDeclaration[69731-69868]:TypeDeclaration[69971-70108]"
  }, {
    "left" : "public isDone() : boolean",
    "right" : "public isDone() : boolean",
    "info" : "MethodDeclaration[69769-69793]:MethodDeclaration[70009-70033]"
  }, {
    "left" : "public currentSegment(coords float) : int",
    "right" : "public currentSegment(coords float) : int",
    "info" : "MethodDeclaration[69798-69840]:MethodDeclaration[70038-70080]"
  }, {
    "left" : "public next() : void",
    "right" : "public next() : void",
    "info" : "MethodDeclaration[69845-69864]:MethodDeclaration[70085-70104]"
  }, {
    "left" : "FALSE",
    "right" : "FALSE",
    "info" : "FieldDeclaration[71447-71471]:FieldDeclaration[71687-71711]"
  }, {
    "left" : "TRUE",
    "right" : "TRUE",
    "info" : "FieldDeclaration[71474-71497]:FieldDeclaration[71714-71737]"
  }, {
    "left" : "INT",
    "right" : "INT",
    "info" : "FieldDeclaration[71501-71523]:FieldDeclaration[71741-71763]"
  }, {
    "left" : "BYTE",
    "right" : "BYTE",
    "info" : "FieldDeclaration[71526-71549]:FieldDeclaration[71766-71789]"
  }, {
    "left" : "SHORT",
    "right" : "SHORT",
    "info" : "FieldDeclaration[71552-71576]:FieldDeclaration[71792-71816]"
  }, {
    "left" : "FLOAT",
    "right" : "FLOAT",
    "info" : "FieldDeclaration[71579-71603]:FieldDeclaration[71819-71843]"
  }, {
    "left" : "BOOL",
    "right" : "BOOL",
    "info" : "FieldDeclaration[71606-71629]:FieldDeclaration[71846-71869]"
  }, {
    "left" : "UNSIGNED_INT",
    "right" : "UNSIGNED_INT",
    "info" : "FieldDeclaration[71632-71663]:FieldDeclaration[71872-71903]"
  }, {
    "left" : "UNSIGNED_BYTE",
    "right" : "UNSIGNED_BYTE",
    "info" : "FieldDeclaration[71666-71698]:FieldDeclaration[71906-71938]"
  }, {
    "left" : "UNSIGNED_SHORT",
    "right" : "UNSIGNED_SHORT",
    "info" : "FieldDeclaration[71701-71734]:FieldDeclaration[71941-71974]"
  }, {
    "left" : "RGB",
    "right" : "RGB",
    "info" : "FieldDeclaration[71738-71760]:FieldDeclaration[71978-72000]"
  }, {
    "left" : "RGBA",
    "right" : "RGBA",
    "info" : "FieldDeclaration[71763-71786]:FieldDeclaration[72003-72026]"
  }, {
    "left" : "ALPHA",
    "right" : "ALPHA",
    "info" : "FieldDeclaration[71789-71813]:FieldDeclaration[72029-72053]"
  }, {
    "left" : "LUMINANCE",
    "right" : "LUMINANCE",
    "info" : "FieldDeclaration[71816-71844]:FieldDeclaration[72056-72084]"
  }, {
    "left" : "LUMINANCE_ALPHA",
    "right" : "LUMINANCE_ALPHA",
    "info" : "FieldDeclaration[71847-71881]:FieldDeclaration[72087-72121]"
  }, {
    "left" : "UNSIGNED_SHORT_5_6_5",
    "right" : "UNSIGNED_SHORT_5_6_5",
    "info" : "FieldDeclaration[71885-71924]:FieldDeclaration[72125-72164]"
  }, {
    "left" : "UNSIGNED_SHORT_4_4_4_4",
    "right" : "UNSIGNED_SHORT_4_4_4_4",
    "info" : "FieldDeclaration[71927-71968]:FieldDeclaration[72167-72208]"
  }, {
    "left" : "UNSIGNED_SHORT_5_5_5_1",
    "right" : "UNSIGNED_SHORT_5_5_5_1",
    "info" : "FieldDeclaration[71971-72012]:FieldDeclaration[72211-72252]"
  }, {
    "left" : "RGBA4",
    "right" : "RGBA4",
    "info" : "FieldDeclaration[72016-72040]:FieldDeclaration[72256-72280]"
  }, {
    "left" : "RGB5_A1",
    "right" : "RGB5_A1",
    "info" : "FieldDeclaration[72043-72069]:FieldDeclaration[72283-72309]"
  }, {
    "left" : "RGB565",
    "right" : "RGB565",
    "info" : "FieldDeclaration[72072-72097]:FieldDeclaration[72312-72337]"
  }, {
    "left" : "RGB8",
    "right" : "RGB8",
    "info" : "FieldDeclaration[72100-72123]:FieldDeclaration[72340-72363]"
  }, {
    "left" : "RGBA8",
    "right" : "RGBA8",
    "info" : "FieldDeclaration[72126-72150]:FieldDeclaration[72366-72390]"
  }, {
    "left" : "ALPHA8",
    "right" : "ALPHA8",
    "info" : "FieldDeclaration[72153-72178]:FieldDeclaration[72393-72418]"
  }, {
    "left" : "READ_ONLY",
    "right" : "READ_ONLY",
    "info" : "FieldDeclaration[72182-72210]:FieldDeclaration[72422-72450]"
  }, {
    "left" : "WRITE_ONLY",
    "right" : "WRITE_ONLY",
    "info" : "FieldDeclaration[72213-72242]:FieldDeclaration[72453-72482]"
  }, {
    "left" : "READ_WRITE",
    "right" : "READ_WRITE",
    "info" : "FieldDeclaration[72245-72274]:FieldDeclaration[72485-72514]"
  }, {
    "left" : "TESS_WINDING_NONZERO",
    "right" : "TESS_WINDING_NONZERO",
    "info" : "FieldDeclaration[72278-72317]:FieldDeclaration[72518-72557]"
  }, {
    "left" : "TESS_WINDING_ODD",
    "right" : "TESS_WINDING_ODD",
    "info" : "FieldDeclaration[72320-72355]:FieldDeclaration[72560-72595]"
  }, {
    "left" : "GENERATE_MIPMAP_HINT",
    "right" : "GENERATE_MIPMAP_HINT",
    "info" : "FieldDeclaration[72359-72398]:FieldDeclaration[72599-72638]"
  }, {
    "left" : "FASTEST",
    "right" : "FASTEST",
    "info" : "FieldDeclaration[72401-72427]:FieldDeclaration[72641-72667]"
  }, {
    "left" : "NICEST",
    "right" : "NICEST",
    "info" : "FieldDeclaration[72430-72455]:FieldDeclaration[72670-72695]"
  }, {
    "left" : "DONT_CARE",
    "right" : "DONT_CARE",
    "info" : "FieldDeclaration[72458-72486]:FieldDeclaration[72698-72726]"
  }, {
    "left" : "VENDOR",
    "right" : "VENDOR",
    "info" : "FieldDeclaration[72490-72515]:FieldDeclaration[72730-72755]"
  }, {
    "left" : "RENDERER",
    "right" : "RENDERER",
    "info" : "FieldDeclaration[72518-72545]:FieldDeclaration[72758-72785]"
  }, {
    "left" : "VERSION",
    "right" : "VERSION",
    "info" : "FieldDeclaration[72548-72574]:FieldDeclaration[72788-72814]"
  }, {
    "left" : "EXTENSIONS",
    "right" : "EXTENSIONS",
    "info" : "FieldDeclaration[72577-72606]:FieldDeclaration[72817-72846]"
  }, {
    "left" : "SHADING_LANGUAGE_VERSION",
    "right" : "SHADING_LANGUAGE_VERSION",
    "info" : "FieldDeclaration[72609-72652]:FieldDeclaration[72849-72892]"
  }, {
    "left" : "MAX_SAMPLES",
    "right" : "MAX_SAMPLES",
    "info" : "FieldDeclaration[72656-72686]:FieldDeclaration[72896-72926]"
  }, {
    "left" : "SAMPLES",
    "right" : "SAMPLES",
    "info" : "FieldDeclaration[72689-72715]:FieldDeclaration[72929-72955]"
  }, {
    "left" : "ALIASED_LINE_WIDTH_RANGE",
    "right" : "ALIASED_LINE_WIDTH_RANGE",
    "info" : "FieldDeclaration[72719-72762]:FieldDeclaration[72959-73002]"
  }, {
    "left" : "ALIASED_POINT_SIZE_RANGE",
    "right" : "ALIASED_POINT_SIZE_RANGE",
    "info" : "FieldDeclaration[72765-72808]:FieldDeclaration[73005-73048]"
  }, {
    "left" : "DEPTH_BITS",
    "right" : "DEPTH_BITS",
    "info" : "FieldDeclaration[72812-72841]:FieldDeclaration[73052-73081]"
  }, {
    "left" : "STENCIL_BITS",
    "right" : "STENCIL_BITS",
    "info" : "FieldDeclaration[72844-72875]:FieldDeclaration[73084-73115]"
  }, {
    "left" : "CCW",
    "right" : "CCW",
    "info" : "FieldDeclaration[72879-72901]:FieldDeclaration[73119-73141]"
  }, {
    "left" : "CW",
    "right" : "CW",
    "info" : "FieldDeclaration[72904-72925]:FieldDeclaration[73144-73165]"
  }, {
    "left" : "VIEWPORT",
    "right" : "VIEWPORT",
    "info" : "FieldDeclaration[72929-72956]:FieldDeclaration[73169-73196]"
  }, {
    "left" : "ARRAY_BUFFER",
    "right" : "ARRAY_BUFFER",
    "info" : "FieldDeclaration[72960-72991]:FieldDeclaration[73200-73231]"
  }, {
    "left" : "ELEMENT_ARRAY_BUFFER",
    "right" : "ELEMENT_ARRAY_BUFFER",
    "info" : "FieldDeclaration[72994-73033]:FieldDeclaration[73234-73273]"
  }, {
    "left" : "MAX_VERTEX_ATTRIBS",
    "right" : "MAX_VERTEX_ATTRIBS",
    "info" : "FieldDeclaration[73037-73074]:FieldDeclaration[73277-73314]"
  }, {
    "left" : "STATIC_DRAW",
    "right" : "STATIC_DRAW",
    "info" : "FieldDeclaration[73078-73108]:FieldDeclaration[73318-73348]"
  }, {
    "left" : "DYNAMIC_DRAW",
    "right" : "DYNAMIC_DRAW",
    "info" : "FieldDeclaration[73111-73142]:FieldDeclaration[73351-73382]"
  }, {
    "left" : "STREAM_DRAW",
    "right" : "STREAM_DRAW",
    "info" : "FieldDeclaration[73145-73175]:FieldDeclaration[73385-73415]"
  }, {
    "left" : "BUFFER_SIZE",
    "right" : "BUFFER_SIZE",
    "info" : "FieldDeclaration[73179-73209]:FieldDeclaration[73419-73449]"
  }, {
    "left" : "BUFFER_USAGE",
    "right" : "BUFFER_USAGE",
    "info" : "FieldDeclaration[73212-73243]:FieldDeclaration[73452-73483]"
  }, {
    "left" : "POINTS",
    "right" : "POINTS",
    "info" : "FieldDeclaration[73247-73272]:FieldDeclaration[73487-73512]"
  }, {
    "left" : "LINE_STRIP",
    "right" : "LINE_STRIP",
    "info" : "FieldDeclaration[73275-73304]:FieldDeclaration[73515-73544]"
  }, {
    "left" : "LINE_LOOP",
    "right" : "LINE_LOOP",
    "info" : "FieldDeclaration[73307-73335]:FieldDeclaration[73547-73575]"
  }, {
    "left" : "LINES",
    "right" : "LINES",
    "info" : "FieldDeclaration[73338-73362]:FieldDeclaration[73578-73602]"
  }, {
    "left" : "TRIANGLE_FAN",
    "right" : "TRIANGLE_FAN",
    "info" : "FieldDeclaration[73365-73396]:FieldDeclaration[73605-73636]"
  }, {
    "left" : "TRIANGLE_STRIP",
    "right" : "TRIANGLE_STRIP",
    "info" : "FieldDeclaration[73399-73432]:FieldDeclaration[73639-73672]"
  }, {
    "left" : "TRIANGLES",
    "right" : "TRIANGLES",
    "info" : "FieldDeclaration[73435-73463]:FieldDeclaration[73675-73703]"
  }, {
    "left" : "CULL_FACE",
    "right" : "CULL_FACE",
    "info" : "FieldDeclaration[73467-73495]:FieldDeclaration[73707-73735]"
  }, {
    "left" : "FRONT",
    "right" : "FRONT",
    "info" : "FieldDeclaration[73498-73522]:FieldDeclaration[73738-73762]"
  }, {
    "left" : "BACK",
    "right" : "BACK",
    "info" : "FieldDeclaration[73525-73548]:FieldDeclaration[73765-73788]"
  }, {
    "left" : "FRONT_AND_BACK",
    "right" : "FRONT_AND_BACK",
    "info" : "FieldDeclaration[73551-73584]:FieldDeclaration[73791-73824]"
  }, {
    "left" : "POLYGON_OFFSET_FILL",
    "right" : "POLYGON_OFFSET_FILL",
    "info" : "FieldDeclaration[73588-73626]:FieldDeclaration[73828-73866]"
  }, {
    "left" : "UNPACK_ALIGNMENT",
    "right" : "UNPACK_ALIGNMENT",
    "info" : "FieldDeclaration[73630-73665]:FieldDeclaration[73870-73905]"
  }, {
    "left" : "PACK_ALIGNMENT",
    "right" : "PACK_ALIGNMENT",
    "info" : "FieldDeclaration[73668-73701]:FieldDeclaration[73908-73941]"
  }, {
    "left" : "TEXTURE_2D",
    "right" : "TEXTURE_2D",
    "info" : "FieldDeclaration[73705-73734]:FieldDeclaration[73945-73974]"
  }, {
    "left" : "TEXTURE_RECTANGLE",
    "right" : "TEXTURE_RECTANGLE",
    "info" : "FieldDeclaration[73737-73773]:FieldDeclaration[73977-74013]"
  }, {
    "left" : "TEXTURE_BINDING_2D",
    "right" : "TEXTURE_BINDING_2D",
    "info" : "FieldDeclaration[73777-73814]:FieldDeclaration[74017-74054]"
  }, {
    "left" : "TEXTURE_BINDING_RECTANGLE",
    "right" : "TEXTURE_BINDING_RECTANGLE",
    "info" : "FieldDeclaration[73817-73861]:FieldDeclaration[74057-74101]"
  }, {
    "left" : "MAX_TEXTURE_SIZE",
    "right" : "MAX_TEXTURE_SIZE",
    "info" : "FieldDeclaration[73865-73900]:FieldDeclaration[74105-74140]"
  }, {
    "left" : "TEXTURE_MAX_ANISOTROPY",
    "right" : "TEXTURE_MAX_ANISOTROPY",
    "info" : "FieldDeclaration[73903-73944]:FieldDeclaration[74143-74184]"
  }, {
    "left" : "MAX_TEXTURE_MAX_ANISOTROPY",
    "right" : "MAX_TEXTURE_MAX_ANISOTROPY",
    "info" : "FieldDeclaration[73947-73992]:FieldDeclaration[74187-74232]"
  }, {
    "left" : "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
    "right" : "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
    "info" : "FieldDeclaration[73996-74045]:FieldDeclaration[74236-74285]"
  }, {
    "left" : "MAX_TEXTURE_IMAGE_UNITS",
    "right" : "MAX_TEXTURE_IMAGE_UNITS",
    "info" : "FieldDeclaration[74048-74090]:FieldDeclaration[74288-74330]"
  }, {
    "left" : "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
    "right" : "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
    "info" : "FieldDeclaration[74093-74144]:FieldDeclaration[74333-74384]"
  }, {
    "left" : "NUM_COMPRESSED_TEXTURE_FORMATS",
    "right" : "NUM_COMPRESSED_TEXTURE_FORMATS",
    "info" : "FieldDeclaration[74148-74197]:FieldDeclaration[74388-74437]"
  }, {
    "left" : "COMPRESSED_TEXTURE_FORMATS",
    "right" : "COMPRESSED_TEXTURE_FORMATS",
    "info" : "FieldDeclaration[74200-74245]:FieldDeclaration[74440-74485]"
  }, {
    "left" : "NEAREST",
    "right" : "NEAREST",
    "info" : "FieldDeclaration[74249-74275]:FieldDeclaration[74489-74515]"
  }, {
    "left" : "LINEAR",
    "right" : "LINEAR",
    "info" : "FieldDeclaration[74278-74303]:FieldDeclaration[74518-74543]"
  }, {
    "left" : "LINEAR_MIPMAP_NEAREST",
    "right" : "LINEAR_MIPMAP_NEAREST",
    "info" : "FieldDeclaration[74306-74346]:FieldDeclaration[74546-74586]"
  }, {
    "left" : "LINEAR_MIPMAP_LINEAR",
    "right" : "LINEAR_MIPMAP_LINEAR",
    "info" : "FieldDeclaration[74349-74388]:FieldDeclaration[74589-74628]"
  }, {
    "left" : "CLAMP_TO_EDGE",
    "right" : "CLAMP_TO_EDGE",
    "info" : "FieldDeclaration[74392-74424]:FieldDeclaration[74632-74664]"
  }, {
    "left" : "REPEAT",
    "right" : "REPEAT",
    "info" : "FieldDeclaration[74427-74452]:FieldDeclaration[74667-74692]"
  }, {
    "left" : "TEXTURE0",
    "right" : "TEXTURE0",
    "info" : "FieldDeclaration[74456-74483]:FieldDeclaration[74696-74723]"
  }, {
    "left" : "TEXTURE1",
    "right" : "TEXTURE1",
    "info" : "FieldDeclaration[74486-74513]:FieldDeclaration[74726-74753]"
  }, {
    "left" : "TEXTURE2",
    "right" : "TEXTURE2",
    "info" : "FieldDeclaration[74516-74543]:FieldDeclaration[74756-74783]"
  }, {
    "left" : "TEXTURE3",
    "right" : "TEXTURE3",
    "info" : "FieldDeclaration[74546-74573]:FieldDeclaration[74786-74813]"
  }, {
    "left" : "TEXTURE_MIN_FILTER",
    "right" : "TEXTURE_MIN_FILTER",
    "info" : "FieldDeclaration[74576-74613]:FieldDeclaration[74816-74853]"
  }, {
    "left" : "TEXTURE_MAG_FILTER",
    "right" : "TEXTURE_MAG_FILTER",
    "info" : "FieldDeclaration[74616-74653]:FieldDeclaration[74856-74893]"
  }, {
    "left" : "TEXTURE_WRAP_S",
    "right" : "TEXTURE_WRAP_S",
    "info" : "FieldDeclaration[74656-74689]:FieldDeclaration[74896-74929]"
  }, {
    "left" : "TEXTURE_WRAP_T",
    "right" : "TEXTURE_WRAP_T",
    "info" : "FieldDeclaration[74692-74725]:FieldDeclaration[74932-74965]"
  }, {
    "left" : "TEXTURE_WRAP_R",
    "right" : "TEXTURE_WRAP_R",
    "info" : "FieldDeclaration[74728-74761]:FieldDeclaration[74968-75001]"
  }, {
    "left" : "TEXTURE_CUBE_MAP",
    "right" : "TEXTURE_CUBE_MAP",
    "info" : "FieldDeclaration[74765-74800]:FieldDeclaration[75005-75040]"
  }, {
    "left" : "TEXTURE_CUBE_MAP_POSITIVE_X",
    "right" : "TEXTURE_CUBE_MAP_POSITIVE_X",
    "info" : "FieldDeclaration[74803-74849]:FieldDeclaration[75043-75089]"
  }, {
    "left" : "TEXTURE_CUBE_MAP_POSITIVE_Y",
    "right" : "TEXTURE_CUBE_MAP_POSITIVE_Y",
    "info" : "FieldDeclaration[74852-74898]:FieldDeclaration[75092-75138]"
  }, {
    "left" : "TEXTURE_CUBE_MAP_POSITIVE_Z",
    "right" : "TEXTURE_CUBE_MAP_POSITIVE_Z",
    "info" : "FieldDeclaration[74901-74947]:FieldDeclaration[75141-75187]"
  }, {
    "left" : "TEXTURE_CUBE_MAP_NEGATIVE_X",
    "right" : "TEXTURE_CUBE_MAP_NEGATIVE_X",
    "info" : "FieldDeclaration[74950-74996]:FieldDeclaration[75190-75236]"
  }, {
    "left" : "TEXTURE_CUBE_MAP_NEGATIVE_Y",
    "right" : "TEXTURE_CUBE_MAP_NEGATIVE_Y",
    "info" : "FieldDeclaration[74999-75045]:FieldDeclaration[75239-75285]"
  }, {
    "left" : "TEXTURE_CUBE_MAP_NEGATIVE_Z",
    "right" : "TEXTURE_CUBE_MAP_NEGATIVE_Z",
    "info" : "FieldDeclaration[75048-75094]:FieldDeclaration[75288-75334]"
  }, {
    "left" : "VERTEX_SHADER",
    "right" : "VERTEX_SHADER",
    "info" : "FieldDeclaration[75098-75130]:FieldDeclaration[75338-75370]"
  }, {
    "left" : "FRAGMENT_SHADER",
    "right" : "FRAGMENT_SHADER",
    "info" : "FieldDeclaration[75133-75167]:FieldDeclaration[75373-75407]"
  }, {
    "left" : "INFO_LOG_LENGTH",
    "right" : "INFO_LOG_LENGTH",
    "info" : "FieldDeclaration[75170-75204]:FieldDeclaration[75410-75444]"
  }, {
    "left" : "SHADER_SOURCE_LENGTH",
    "right" : "SHADER_SOURCE_LENGTH",
    "info" : "FieldDeclaration[75207-75246]:FieldDeclaration[75447-75486]"
  }, {
    "left" : "COMPILE_STATUS",
    "right" : "COMPILE_STATUS",
    "info" : "FieldDeclaration[75249-75282]:FieldDeclaration[75489-75522]"
  }, {
    "left" : "LINK_STATUS",
    "right" : "LINK_STATUS",
    "info" : "FieldDeclaration[75285-75315]:FieldDeclaration[75525-75555]"
  }, {
    "left" : "VALIDATE_STATUS",
    "right" : "VALIDATE_STATUS",
    "info" : "FieldDeclaration[75318-75352]:FieldDeclaration[75558-75592]"
  }, {
    "left" : "SHADER_TYPE",
    "right" : "SHADER_TYPE",
    "info" : "FieldDeclaration[75355-75385]:FieldDeclaration[75595-75625]"
  }, {
    "left" : "DELETE_STATUS",
    "right" : "DELETE_STATUS",
    "info" : "FieldDeclaration[75388-75420]:FieldDeclaration[75628-75660]"
  }, {
    "left" : "FLOAT_VEC2",
    "right" : "FLOAT_VEC2",
    "info" : "FieldDeclaration[75424-75453]:FieldDeclaration[75664-75693]"
  }, {
    "left" : "FLOAT_VEC3",
    "right" : "FLOAT_VEC3",
    "info" : "FieldDeclaration[75456-75485]:FieldDeclaration[75696-75725]"
  }, {
    "left" : "FLOAT_VEC4",
    "right" : "FLOAT_VEC4",
    "info" : "FieldDeclaration[75488-75517]:FieldDeclaration[75728-75757]"
  }, {
    "left" : "FLOAT_MAT2",
    "right" : "FLOAT_MAT2",
    "info" : "FieldDeclaration[75520-75549]:FieldDeclaration[75760-75789]"
  }, {
    "left" : "FLOAT_MAT3",
    "right" : "FLOAT_MAT3",
    "info" : "FieldDeclaration[75552-75581]:FieldDeclaration[75792-75821]"
  }, {
    "left" : "FLOAT_MAT4",
    "right" : "FLOAT_MAT4",
    "info" : "FieldDeclaration[75584-75613]:FieldDeclaration[75824-75853]"
  }, {
    "left" : "INT_VEC2",
    "right" : "INT_VEC2",
    "info" : "FieldDeclaration[75616-75643]:FieldDeclaration[75856-75883]"
  }, {
    "left" : "INT_VEC3",
    "right" : "INT_VEC3",
    "info" : "FieldDeclaration[75646-75673]:FieldDeclaration[75886-75913]"
  }, {
    "left" : "INT_VEC4",
    "right" : "INT_VEC4",
    "info" : "FieldDeclaration[75676-75703]:FieldDeclaration[75916-75943]"
  }, {
    "left" : "BOOL_VEC2",
    "right" : "BOOL_VEC2",
    "info" : "FieldDeclaration[75706-75734]:FieldDeclaration[75946-75974]"
  }, {
    "left" : "BOOL_VEC3",
    "right" : "BOOL_VEC3",
    "info" : "FieldDeclaration[75737-75765]:FieldDeclaration[75977-76005]"
  }, {
    "left" : "BOOL_VEC4",
    "right" : "BOOL_VEC4",
    "info" : "FieldDeclaration[75768-75796]:FieldDeclaration[76008-76036]"
  }, {
    "left" : "SAMPLER_2D",
    "right" : "SAMPLER_2D",
    "info" : "FieldDeclaration[75799-75828]:FieldDeclaration[76039-76068]"
  }, {
    "left" : "SAMPLER_CUBE",
    "right" : "SAMPLER_CUBE",
    "info" : "FieldDeclaration[75831-75862]:FieldDeclaration[76071-76102]"
  }, {
    "left" : "LOW_FLOAT",
    "right" : "LOW_FLOAT",
    "info" : "FieldDeclaration[75866-75894]:FieldDeclaration[76106-76134]"
  }, {
    "left" : "MEDIUM_FLOAT",
    "right" : "MEDIUM_FLOAT",
    "info" : "FieldDeclaration[75897-75928]:FieldDeclaration[76137-76168]"
  }, {
    "left" : "HIGH_FLOAT",
    "right" : "HIGH_FLOAT",
    "info" : "FieldDeclaration[75931-75960]:FieldDeclaration[76171-76200]"
  }, {
    "left" : "LOW_INT",
    "right" : "LOW_INT",
    "info" : "FieldDeclaration[75963-75989]:FieldDeclaration[76203-76229]"
  }, {
    "left" : "MEDIUM_INT",
    "right" : "MEDIUM_INT",
    "info" : "FieldDeclaration[75992-76021]:FieldDeclaration[76232-76261]"
  }, {
    "left" : "HIGH_INT",
    "right" : "HIGH_INT",
    "info" : "FieldDeclaration[76024-76051]:FieldDeclaration[76264-76291]"
  }, {
    "left" : "CURRENT_VERTEX_ATTRIB",
    "right" : "CURRENT_VERTEX_ATTRIB",
    "info" : "FieldDeclaration[76055-76095]:FieldDeclaration[76295-76335]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
    "right" : "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
    "info" : "FieldDeclaration[76099-76152]:FieldDeclaration[76339-76392]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_ENABLED",
    "right" : "VERTEX_ATTRIB_ARRAY_ENABLED",
    "info" : "FieldDeclaration[76155-76201]:FieldDeclaration[76395-76441]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_SIZE",
    "right" : "VERTEX_ATTRIB_ARRAY_SIZE",
    "info" : "FieldDeclaration[76204-76247]:FieldDeclaration[76444-76487]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_STRIDE",
    "right" : "VERTEX_ATTRIB_ARRAY_STRIDE",
    "info" : "FieldDeclaration[76250-76295]:FieldDeclaration[76490-76535]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_TYPE",
    "right" : "VERTEX_ATTRIB_ARRAY_TYPE",
    "info" : "FieldDeclaration[76298-76341]:FieldDeclaration[76538-76581]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_NORMALIZED",
    "right" : "VERTEX_ATTRIB_ARRAY_NORMALIZED",
    "info" : "FieldDeclaration[76344-76393]:FieldDeclaration[76584-76633]"
  }, {
    "left" : "VERTEX_ATTRIB_ARRAY_POINTER",
    "right" : "VERTEX_ATTRIB_ARRAY_POINTER",
    "info" : "FieldDeclaration[76396-76442]:FieldDeclaration[76636-76682]"
  }, {
    "left" : "BLEND",
    "right" : "BLEND",
    "info" : "FieldDeclaration[76446-76470]:FieldDeclaration[76686-76710]"
  }, {
    "left" : "ONE",
    "right" : "ONE",
    "info" : "FieldDeclaration[76473-76495]:FieldDeclaration[76713-76735]"
  }, {
    "left" : "ZERO",
    "right" : "ZERO",
    "info" : "FieldDeclaration[76498-76521]:FieldDeclaration[76738-76761]"
  }, {
    "left" : "SRC_ALPHA",
    "right" : "SRC_ALPHA",
    "info" : "FieldDeclaration[76524-76552]:FieldDeclaration[76764-76792]"
  }, {
    "left" : "DST_ALPHA",
    "right" : "DST_ALPHA",
    "info" : "FieldDeclaration[76555-76583]:FieldDeclaration[76795-76823]"
  }, {
    "left" : "ONE_MINUS_SRC_ALPHA",
    "right" : "ONE_MINUS_SRC_ALPHA",
    "info" : "FieldDeclaration[76586-76624]:FieldDeclaration[76826-76864]"
  }, {
    "left" : "ONE_MINUS_DST_COLOR",
    "right" : "ONE_MINUS_DST_COLOR",
    "info" : "FieldDeclaration[76627-76665]:FieldDeclaration[76867-76905]"
  }, {
    "left" : "ONE_MINUS_SRC_COLOR",
    "right" : "ONE_MINUS_SRC_COLOR",
    "info" : "FieldDeclaration[76668-76706]:FieldDeclaration[76908-76946]"
  }, {
    "left" : "DST_COLOR",
    "right" : "DST_COLOR",
    "info" : "FieldDeclaration[76709-76737]:FieldDeclaration[76949-76977]"
  }, {
    "left" : "SRC_COLOR",
    "right" : "SRC_COLOR",
    "info" : "FieldDeclaration[76740-76768]:FieldDeclaration[76980-77008]"
  }, {
    "left" : "SAMPLE_ALPHA_TO_COVERAGE",
    "right" : "SAMPLE_ALPHA_TO_COVERAGE",
    "info" : "FieldDeclaration[76772-76815]:FieldDeclaration[77012-77055]"
  }, {
    "left" : "SAMPLE_COVERAGE",
    "right" : "SAMPLE_COVERAGE",
    "info" : "FieldDeclaration[76818-76852]:FieldDeclaration[77058-77092]"
  }, {
    "left" : "KEEP",
    "right" : "KEEP",
    "info" : "FieldDeclaration[76856-76879]:FieldDeclaration[77096-77119]"
  }, {
    "left" : "REPLACE",
    "right" : "REPLACE",
    "info" : "FieldDeclaration[76882-76908]:FieldDeclaration[77122-77148]"
  }, {
    "left" : "INCR",
    "right" : "INCR",
    "info" : "FieldDeclaration[76911-76934]:FieldDeclaration[77151-77174]"
  }, {
    "left" : "DECR",
    "right" : "DECR",
    "info" : "FieldDeclaration[76937-76960]:FieldDeclaration[77177-77200]"
  }, {
    "left" : "INVERT",
    "right" : "INVERT",
    "info" : "FieldDeclaration[76963-76988]:FieldDeclaration[77203-77228]"
  }, {
    "left" : "INCR_WRAP",
    "right" : "INCR_WRAP",
    "info" : "FieldDeclaration[76991-77019]:FieldDeclaration[77231-77259]"
  }, {
    "left" : "DECR_WRAP",
    "right" : "DECR_WRAP",
    "info" : "FieldDeclaration[77022-77050]:FieldDeclaration[77262-77290]"
  }, {
    "left" : "NEVER",
    "right" : "NEVER",
    "info" : "FieldDeclaration[77053-77077]:FieldDeclaration[77293-77317]"
  }, {
    "left" : "ALWAYS",
    "right" : "ALWAYS",
    "info" : "FieldDeclaration[77080-77105]:FieldDeclaration[77320-77345]"
  }, {
    "left" : "EQUAL",
    "right" : "EQUAL",
    "info" : "FieldDeclaration[77109-77133]:FieldDeclaration[77349-77373]"
  }, {
    "left" : "LESS",
    "right" : "LESS",
    "info" : "FieldDeclaration[77136-77159]:FieldDeclaration[77376-77399]"
  }, {
    "left" : "LEQUAL",
    "right" : "LEQUAL",
    "info" : "FieldDeclaration[77162-77187]:FieldDeclaration[77402-77427]"
  }, {
    "left" : "GREATER",
    "right" : "GREATER",
    "info" : "FieldDeclaration[77190-77216]:FieldDeclaration[77430-77456]"
  }, {
    "left" : "GEQUAL",
    "right" : "GEQUAL",
    "info" : "FieldDeclaration[77219-77244]:FieldDeclaration[77459-77484]"
  }, {
    "left" : "NOTEQUAL",
    "right" : "NOTEQUAL",
    "info" : "FieldDeclaration[77247-77274]:FieldDeclaration[77487-77514]"
  }, {
    "left" : "FUNC_ADD",
    "right" : "FUNC_ADD",
    "info" : "FieldDeclaration[77278-77305]:FieldDeclaration[77518-77545]"
  }, {
    "left" : "FUNC_MIN",
    "right" : "FUNC_MIN",
    "info" : "FieldDeclaration[77308-77335]:FieldDeclaration[77548-77575]"
  }, {
    "left" : "FUNC_MAX",
    "right" : "FUNC_MAX",
    "info" : "FieldDeclaration[77338-77365]:FieldDeclaration[77578-77605]"
  }, {
    "left" : "FUNC_REVERSE_SUBTRACT",
    "right" : "FUNC_REVERSE_SUBTRACT",
    "info" : "FieldDeclaration[77368-77408]:FieldDeclaration[77608-77648]"
  }, {
    "left" : "FUNC_SUBTRACT",
    "right" : "FUNC_SUBTRACT",
    "info" : "FieldDeclaration[77411-77443]:FieldDeclaration[77651-77683]"
  }, {
    "left" : "DITHER",
    "right" : "DITHER",
    "info" : "FieldDeclaration[77447-77472]:FieldDeclaration[77687-77712]"
  }, {
    "left" : "CONSTANT_COLOR",
    "right" : "CONSTANT_COLOR",
    "info" : "FieldDeclaration[77476-77509]:FieldDeclaration[77716-77749]"
  }, {
    "left" : "CONSTANT_ALPHA",
    "right" : "CONSTANT_ALPHA",
    "info" : "FieldDeclaration[77512-77545]:FieldDeclaration[77752-77785]"
  }, {
    "left" : "ONE_MINUS_CONSTANT_COLOR",
    "right" : "ONE_MINUS_CONSTANT_COLOR",
    "info" : "FieldDeclaration[77548-77591]:FieldDeclaration[77788-77831]"
  }, {
    "left" : "ONE_MINUS_CONSTANT_ALPHA",
    "right" : "ONE_MINUS_CONSTANT_ALPHA",
    "info" : "FieldDeclaration[77594-77637]:FieldDeclaration[77834-77877]"
  }, {
    "left" : "SRC_ALPHA_SATURATE",
    "right" : "SRC_ALPHA_SATURATE",
    "info" : "FieldDeclaration[77640-77677]:FieldDeclaration[77880-77917]"
  }, {
    "left" : "SCISSOR_TEST",
    "right" : "SCISSOR_TEST",
    "info" : "FieldDeclaration[77681-77712]:FieldDeclaration[77921-77952]"
  }, {
    "left" : "STENCIL_TEST",
    "right" : "STENCIL_TEST",
    "info" : "FieldDeclaration[77715-77746]:FieldDeclaration[77955-77986]"
  }, {
    "left" : "DEPTH_TEST",
    "right" : "DEPTH_TEST",
    "info" : "FieldDeclaration[77749-77778]:FieldDeclaration[77989-78018]"
  }, {
    "left" : "DEPTH_WRITEMASK",
    "right" : "DEPTH_WRITEMASK",
    "info" : "FieldDeclaration[77781-77815]:FieldDeclaration[78021-78055]"
  }, {
    "left" : "ALPHA_TEST",
    "right" : "ALPHA_TEST",
    "info" : "FieldDeclaration[77818-77847]:FieldDeclaration[78058-78087]"
  }, {
    "left" : "COLOR_BUFFER_BIT",
    "right" : "COLOR_BUFFER_BIT",
    "info" : "FieldDeclaration[77851-77886]:FieldDeclaration[78091-78126]"
  }, {
    "left" : "DEPTH_BUFFER_BIT",
    "right" : "DEPTH_BUFFER_BIT",
    "info" : "FieldDeclaration[77889-77924]:FieldDeclaration[78129-78164]"
  }, {
    "left" : "STENCIL_BUFFER_BIT",
    "right" : "STENCIL_BUFFER_BIT",
    "info" : "FieldDeclaration[77927-77964]:FieldDeclaration[78167-78204]"
  }, {
    "left" : "FRAMEBUFFER",
    "right" : "FRAMEBUFFER",
    "info" : "FieldDeclaration[77968-77998]:FieldDeclaration[78208-78238]"
  }, {
    "left" : "COLOR_ATTACHMENT0",
    "right" : "COLOR_ATTACHMENT0",
    "info" : "FieldDeclaration[78001-78037]:FieldDeclaration[78241-78277]"
  }, {
    "left" : "COLOR_ATTACHMENT1",
    "right" : "COLOR_ATTACHMENT1",
    "info" : "FieldDeclaration[78040-78076]:FieldDeclaration[78280-78316]"
  }, {
    "left" : "COLOR_ATTACHMENT2",
    "right" : "COLOR_ATTACHMENT2",
    "info" : "FieldDeclaration[78079-78115]:FieldDeclaration[78319-78355]"
  }, {
    "left" : "COLOR_ATTACHMENT3",
    "right" : "COLOR_ATTACHMENT3",
    "info" : "FieldDeclaration[78118-78154]:FieldDeclaration[78358-78394]"
  }, {
    "left" : "RENDERBUFFER",
    "right" : "RENDERBUFFER",
    "info" : "FieldDeclaration[78157-78188]:FieldDeclaration[78397-78428]"
  }, {
    "left" : "DEPTH_ATTACHMENT",
    "right" : "DEPTH_ATTACHMENT",
    "info" : "FieldDeclaration[78191-78226]:FieldDeclaration[78431-78466]"
  }, {
    "left" : "STENCIL_ATTACHMENT",
    "right" : "STENCIL_ATTACHMENT",
    "info" : "FieldDeclaration[78229-78266]:FieldDeclaration[78469-78506]"
  }, {
    "left" : "READ_FRAMEBUFFER",
    "right" : "READ_FRAMEBUFFER",
    "info" : "FieldDeclaration[78269-78304]:FieldDeclaration[78509-78544]"
  }, {
    "left" : "DRAW_FRAMEBUFFER",
    "right" : "DRAW_FRAMEBUFFER",
    "info" : "FieldDeclaration[78307-78342]:FieldDeclaration[78547-78582]"
  }, {
    "left" : "DEPTH24_STENCIL8",
    "right" : "DEPTH24_STENCIL8",
    "info" : "FieldDeclaration[78346-78381]:FieldDeclaration[78586-78621]"
  }, {
    "left" : "DEPTH_COMPONENT",
    "right" : "DEPTH_COMPONENT",
    "info" : "FieldDeclaration[78385-78419]:FieldDeclaration[78625-78659]"
  }, {
    "left" : "DEPTH_COMPONENT16",
    "right" : "DEPTH_COMPONENT16",
    "info" : "FieldDeclaration[78422-78458]:FieldDeclaration[78662-78698]"
  }, {
    "left" : "DEPTH_COMPONENT24",
    "right" : "DEPTH_COMPONENT24",
    "info" : "FieldDeclaration[78461-78497]:FieldDeclaration[78701-78737]"
  }, {
    "left" : "DEPTH_COMPONENT32",
    "right" : "DEPTH_COMPONENT32",
    "info" : "FieldDeclaration[78500-78536]:FieldDeclaration[78740-78776]"
  }, {
    "left" : "STENCIL_INDEX",
    "right" : "STENCIL_INDEX",
    "info" : "FieldDeclaration[78540-78572]:FieldDeclaration[78780-78812]"
  }, {
    "left" : "STENCIL_INDEX1",
    "right" : "STENCIL_INDEX1",
    "info" : "FieldDeclaration[78575-78608]:FieldDeclaration[78815-78848]"
  }, {
    "left" : "STENCIL_INDEX4",
    "right" : "STENCIL_INDEX4",
    "info" : "FieldDeclaration[78611-78644]:FieldDeclaration[78851-78884]"
  }, {
    "left" : "STENCIL_INDEX8",
    "right" : "STENCIL_INDEX8",
    "info" : "FieldDeclaration[78647-78680]:FieldDeclaration[78887-78920]"
  }, {
    "left" : "DEPTH_STENCIL",
    "right" : "DEPTH_STENCIL",
    "info" : "FieldDeclaration[78684-78716]:FieldDeclaration[78924-78956]"
  }, {
    "left" : "FRAMEBUFFER_COMPLETE",
    "right" : "FRAMEBUFFER_COMPLETE",
    "info" : "FieldDeclaration[78720-78759]:FieldDeclaration[78960-78999]"
  }, {
    "left" : "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
    "right" : "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
    "info" : "FieldDeclaration[78762-78814]:FieldDeclaration[79002-79054]"
  }, {
    "left" : "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
    "right" : "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
    "info" : "FieldDeclaration[78817-78877]:FieldDeclaration[79057-79117]"
  }, {
    "left" : "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
    "right" : "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
    "info" : "FieldDeclaration[78880-78932]:FieldDeclaration[79120-79172]"
  }, {
    "left" : "FRAMEBUFFER_INCOMPLETE_FORMATS",
    "right" : "FRAMEBUFFER_INCOMPLETE_FORMATS",
    "info" : "FieldDeclaration[78935-78984]:FieldDeclaration[79175-79224]"
  }, {
    "left" : "FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER",
    "right" : "FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER",
    "info" : "FieldDeclaration[78987-79040]:FieldDeclaration[79227-79280]"
  }, {
    "left" : "FRAMEBUFFER_INCOMPLETE_READ_BUFFER",
    "right" : "FRAMEBUFFER_INCOMPLETE_READ_BUFFER",
    "info" : "FieldDeclaration[79043-79096]:FieldDeclaration[79283-79336]"
  }, {
    "left" : "FRAMEBUFFER_UNSUPPORTED",
    "right" : "FRAMEBUFFER_UNSUPPORTED",
    "info" : "FieldDeclaration[79099-79141]:FieldDeclaration[79339-79381]"
  }, {
    "left" : "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
    "right" : "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
    "info" : "FieldDeclaration[79145-79198]:FieldDeclaration[79385-79438]"
  }, {
    "left" : "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
    "right" : "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
    "info" : "FieldDeclaration[79201-79254]:FieldDeclaration[79441-79494]"
  }, {
    "left" : "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
    "right" : "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
    "info" : "FieldDeclaration[79257-79312]:FieldDeclaration[79497-79552]"
  }, {
    "left" : "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
    "right" : "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
    "info" : "FieldDeclaration[79315-79378]:FieldDeclaration[79555-79618]"
  }, {
    "left" : "RENDERBUFFER_WIDTH",
    "right" : "RENDERBUFFER_WIDTH",
    "info" : "FieldDeclaration[79382-79419]:FieldDeclaration[79622-79659]"
  }, {
    "left" : "RENDERBUFFER_HEIGHT",
    "right" : "RENDERBUFFER_HEIGHT",
    "info" : "FieldDeclaration[79422-79460]:FieldDeclaration[79662-79700]"
  }, {
    "left" : "RENDERBUFFER_RED_SIZE",
    "right" : "RENDERBUFFER_RED_SIZE",
    "info" : "FieldDeclaration[79463-79503]:FieldDeclaration[79703-79743]"
  }, {
    "left" : "RENDERBUFFER_GREEN_SIZE",
    "right" : "RENDERBUFFER_GREEN_SIZE",
    "info" : "FieldDeclaration[79506-79548]:FieldDeclaration[79746-79788]"
  }, {
    "left" : "RENDERBUFFER_BLUE_SIZE",
    "right" : "RENDERBUFFER_BLUE_SIZE",
    "info" : "FieldDeclaration[79551-79592]:FieldDeclaration[79791-79832]"
  }, {
    "left" : "RENDERBUFFER_ALPHA_SIZE",
    "right" : "RENDERBUFFER_ALPHA_SIZE",
    "info" : "FieldDeclaration[79595-79637]:FieldDeclaration[79835-79877]"
  }, {
    "left" : "RENDERBUFFER_DEPTH_SIZE",
    "right" : "RENDERBUFFER_DEPTH_SIZE",
    "info" : "FieldDeclaration[79640-79682]:FieldDeclaration[79880-79922]"
  }, {
    "left" : "RENDERBUFFER_STENCIL_SIZE",
    "right" : "RENDERBUFFER_STENCIL_SIZE",
    "info" : "FieldDeclaration[79685-79729]:FieldDeclaration[79925-79969]"
  }, {
    "left" : "RENDERBUFFER_INTERNAL_FORMAT",
    "right" : "RENDERBUFFER_INTERNAL_FORMAT",
    "info" : "FieldDeclaration[79732-79779]:FieldDeclaration[79972-80019]"
  }, {
    "left" : "MULTISAMPLE",
    "right" : "MULTISAMPLE",
    "info" : "FieldDeclaration[79783-79813]:FieldDeclaration[80023-80053]"
  }, {
    "left" : "POINT_SMOOTH",
    "right" : "POINT_SMOOTH",
    "info" : "FieldDeclaration[79816-79847]:FieldDeclaration[80056-80087]"
  }, {
    "left" : "LINE_SMOOTH",
    "right" : "LINE_SMOOTH",
    "info" : "FieldDeclaration[79850-79880]:FieldDeclaration[80090-80120]"
  }, {
    "left" : "POLYGON_SMOOTH",
    "right" : "POLYGON_SMOOTH",
    "info" : "FieldDeclaration[79883-79916]:FieldDeclaration[80123-80156]"
  }, {
    "left" : "public abstract flush() : void",
    "right" : "public abstract flush() : void",
    "info" : "MethodDeclaration[80007-80036]:MethodDeclaration[80247-80276]"
  }, {
    "left" : "public abstract finish() : void",
    "right" : "public abstract finish() : void",
    "info" : "MethodDeclaration[80039-80069]:MethodDeclaration[80279-80309]"
  }, {
    "left" : "public abstract hint(target int, hint int) : void",
    "right" : "public abstract hint(target int, hint int) : void",
    "info" : "MethodDeclaration[80072-80120]:MethodDeclaration[80312-80360]"
  }, {
    "left" : "public abstract enable(value int) : void",
    "right" : "public abstract enable(value int) : void",
    "info" : "MethodDeclaration[80218-80257]:MethodDeclaration[80458-80497]"
  }, {
    "left" : "public abstract disable(value int) : void",
    "right" : "public abstract disable(value int) : void",
    "info" : "MethodDeclaration[80260-80300]:MethodDeclaration[80500-80540]"
  }, {
    "left" : "public abstract getBooleanv(value int, data ) : void",
    "right" : "public abstract getBooleanv(value int, data ) : void",
    "info" : "MethodDeclaration[80303-80363]:MethodDeclaration[80543-80603]"
  }, {
    "left" : "public abstract getIntegerv(value int, data ) : void",
    "right" : "public abstract getIntegerv(value int, data ) : void",
    "info" : "MethodDeclaration[80366-80426]:MethodDeclaration[80606-80666]"
  }, {
    "left" : "public abstract getFloatv(value int, data ) : void",
    "right" : "public abstract getFloatv(value int, data ) : void",
    "info" : "MethodDeclaration[80429-80489]:MethodDeclaration[80669-80729]"
  }, {
    "left" : "public abstract isEnabled(value int) : boolean",
    "right" : "public abstract isEnabled(value int) : boolean",
    "info" : "MethodDeclaration[80492-80537]:MethodDeclaration[80732-80777]"
  }, {
    "left" : "public abstract getString(name int) : ",
    "right" : "public abstract getString(name int) : ",
    "info" : "MethodDeclaration[80540-80583]:MethodDeclaration[80780-80823]"
  }, {
    "left" : "public abstract getError() : int",
    "right" : "public abstract getError() : int",
    "info" : "MethodDeclaration[80671-80702]:MethodDeclaration[80911-80942]"
  }, {
    "left" : "public abstract errorString(err int) : ",
    "right" : "public abstract errorString(err int) : ",
    "info" : "MethodDeclaration[80705-80749]:MethodDeclaration[80945-80989]"
  }, {
    "left" : "public abstract genBuffers(n int, buffers ) : void",
    "right" : "public abstract genBuffers(n int, buffers ) : void",
    "info" : "MethodDeclaration[80856-80914]:MethodDeclaration[81096-81154]"
  }, {
    "left" : "public abstract deleteBuffers(n int, buffers ) : void",
    "right" : "public abstract deleteBuffers(n int, buffers ) : void",
    "info" : "MethodDeclaration[80917-80978]:MethodDeclaration[81157-81218]"
  }, {
    "left" : "public abstract bindBuffer(target int, buffer int) : void",
    "right" : "public abstract bindBuffer(target int, buffer int) : void",
    "info" : "MethodDeclaration[80981-81037]:MethodDeclaration[81221-81277]"
  }, {
    "left" : "public abstract bufferData(target int, size int, data , usage int) : void",
    "right" : "public abstract bufferData(target int, size int, data , usage int) : void",
    "info" : "MethodDeclaration[81040-81118]:MethodDeclaration[81280-81358]"
  }, {
    "left" : "public abstract bufferSubData(target int, offset int, size int, data ) : void",
    "right" : "public abstract bufferSubData(target int, offset int, size int, data ) : void",
    "info" : "MethodDeclaration[81121-81203]:MethodDeclaration[81361-81443]"
  }, {
    "left" : "public abstract isBuffer(buffer int) : void",
    "right" : "public abstract isBuffer(buffer int) : void",
    "info" : "MethodDeclaration[81206-81248]:MethodDeclaration[81446-81488]"
  }, {
    "left" : "public abstract getBufferParameteriv(target int, value int, data ) : void",
    "right" : "public abstract getBufferParameteriv(target int, value int, data ) : void",
    "info" : "MethodDeclaration[81251-81332]:MethodDeclaration[81491-81572]"
  }, {
    "left" : "public abstract mapBuffer(target int, access int) : ",
    "right" : "public abstract mapBuffer(target int, access int) : ",
    "info" : "MethodDeclaration[81335-81396]:MethodDeclaration[81575-81636]"
  }, {
    "left" : "public abstract mapBufferRange(target int, offset int, length int, access int) : ",
    "right" : "public abstract mapBufferRange(target int, offset int, length int, access int) : ",
    "info" : "MethodDeclaration[81399-81489]:MethodDeclaration[81639-81729]"
  }, {
    "left" : "public abstract unmapBuffer(target int) : void",
    "right" : "public abstract unmapBuffer(target int) : void",
    "info" : "MethodDeclaration[81492-81537]:MethodDeclaration[81732-81777]"
  }, {
    "left" : "public abstract depthRangef(n float, f float) : void",
    "right" : "public abstract depthRangef(n float, f float) : void",
    "info" : "MethodDeclaration[81651-81702]:MethodDeclaration[81891-81942]"
  }, {
    "left" : "public abstract viewport(x int, y int, w int, h int) : void",
    "right" : "public abstract viewport(x int, y int, w int, h int) : void",
    "info" : "MethodDeclaration[81705-81763]:MethodDeclaration[81945-82003]"
  }, {
    "left" : "public readPixels(x int, y int, width int, height int, format int, type int, buffer ) : void",
    "right" : "public readPixels(x int, y int, width int, height int, format int, type int, buffer ) : void",
    "info" : "MethodDeclaration[82164-82525]:MethodDeclaration[82404-82765]"
  }, {
    "left" : "protected abstract readPixelsImpl(x int, y int, width int, height int, format int, type int, buffer ) : void",
    "right" : "protected abstract readPixelsImpl(x int, y int, width int, height int, format int, type int, buffer ) : void",
    "info" : "MethodDeclaration[82529-82642]:MethodDeclaration[82769-82882]"
  }, {
    "left" : "public abstract vertexAttrib1f(index int, value float) : void",
    "right" : "public abstract vertexAttrib1f(index int, value float) : void",
    "info" : "MethodDeclaration[82743-82803]:MethodDeclaration[82983-83043]"
  }, {
    "left" : "public abstract vertexAttrib2f(index int, value0 float, value1 float) : void",
    "right" : "public abstract vertexAttrib2f(index int, value0 float, value1 float) : void",
    "info" : "MethodDeclaration[82806-82881]:MethodDeclaration[83046-83121]"
  }, {
    "left" : "public abstract vertexAttrib3f(index int, value0 float, value1 float, value2 float) : void",
    "right" : "public abstract vertexAttrib3f(index int, value0 float, value1 float, value2 float) : void",
    "info" : "MethodDeclaration[82884-82973]:MethodDeclaration[83124-83213]"
  }, {
    "left" : "public abstract vertexAttrib4f(index int, value0 float, value1 float, value2 float, value3 float) : void",
    "right" : "public abstract vertexAttrib4f(index int, value0 float, value1 float, value2 float, value3 float) : void",
    "info" : "MethodDeclaration[82976-83079]:MethodDeclaration[83216-83319]"
  }, {
    "left" : "public abstract vertexAttrib1fv(index int, values ) : void",
    "right" : "public abstract vertexAttrib1fv(index int, values ) : void",
    "info" : "MethodDeclaration[83082-83150]:MethodDeclaration[83322-83390]"
  }, {
    "left" : "public abstract vertexAttrib2fv(index int, values ) : void",
    "right" : "public abstract vertexAttrib2fv(index int, values ) : void",
    "info" : "MethodDeclaration[83153-83221]:MethodDeclaration[83393-83461]"
  }, {
    "left" : "public abstract vertexAttrib3fv(index int, values ) : void",
    "right" : "public abstract vertexAttrib3fv(index int, values ) : void",
    "info" : "MethodDeclaration[83224-83292]:MethodDeclaration[83464-83532]"
  }, {
    "left" : "public abstract vertexAttri4fv(index int, values ) : void",
    "right" : "public abstract vertexAttri4fv(index int, values ) : void",
    "info" : "MethodDeclaration[83295-83362]:MethodDeclaration[83535-83602]"
  }, {
    "left" : "public abstract vertexAttribPointer(index int, size int, type int, normalized boolean, stride int, offset int) : void",
    "right" : "public abstract vertexAttribPointer(index int, size int, type int, normalized boolean, stride int, offset int) : void",
    "info" : "MethodDeclaration[83365-83481]:MethodDeclaration[83605-83721]"
  }, {
    "left" : "public abstract vertexAttribPointer(index int, size int, type int, normalized boolean, stride int, data ) : void",
    "right" : "public abstract vertexAttribPointer(index int, size int, type int, normalized boolean, stride int, data ) : void",
    "info" : "MethodDeclaration[83484-83601]:MethodDeclaration[83724-83841]"
  }, {
    "left" : "public abstract enableVertexAttribArray(index int) : void",
    "right" : "public abstract enableVertexAttribArray(index int) : void",
    "info" : "MethodDeclaration[83604-83660]:MethodDeclaration[83844-83900]"
  }, {
    "left" : "public abstract disableVertexAttribArray(index int) : void",
    "right" : "public abstract disableVertexAttribArray(index int) : void",
    "info" : "MethodDeclaration[83663-83720]:MethodDeclaration[83903-83960]"
  }, {
    "left" : "public abstract drawArrays(mode int, first int, count int) : void",
    "right" : "public abstract drawArrays(mode int, first int, count int) : void",
    "info" : "MethodDeclaration[83723-83787]:MethodDeclaration[83963-84027]"
  }, {
    "left" : "public abstract drawElements(mode int, count int, type int, offset int) : void",
    "right" : "public abstract drawElements(mode int, count int, type int, offset int) : void",
    "info" : "MethodDeclaration[83790-83867]:MethodDeclaration[84030-84107]"
  }, {
    "left" : "public abstract drawElements(mode int, count int, type int, indices ) : void",
    "right" : "public abstract drawElements(mode int, count int, type int, indices ) : void",
    "info" : "MethodDeclaration[83870-83951]:MethodDeclaration[84110-84191]"
  }, {
    "left" : "public abstract lineWidth(width float) : void",
    "right" : "public abstract lineWidth(width float) : void",
    "info" : "MethodDeclaration[84057-84101]:MethodDeclaration[84297-84341]"
  }, {
    "left" : "public abstract frontFace(dir int) : void",
    "right" : "public abstract frontFace(dir int) : void",
    "info" : "MethodDeclaration[84104-84144]:MethodDeclaration[84344-84384]"
  }, {
    "left" : "public abstract cullFace(mode int) : void",
    "right" : "public abstract cullFace(mode int) : void",
    "info" : "MethodDeclaration[84147-84187]:MethodDeclaration[84387-84427]"
  }, {
    "left" : "public abstract polygonOffset(factor float, units float) : void",
    "right" : "public abstract polygonOffset(factor float, units float) : void",
    "info" : "MethodDeclaration[84190-84252]:MethodDeclaration[84430-84492]"
  }, {
    "left" : "public abstract pixelStorei(pname int, param int) : void",
    "right" : "public abstract pixelStorei(pname int, param int) : void",
    "info" : "MethodDeclaration[84361-84416]:MethodDeclaration[84601-84656]"
  }, {
    "left" : "public abstract texImage2D(target int, level int, internalFormat int, width int, height int, border int, format int, type int, data ) : void",
    "right" : "public abstract texImage2D(target int, level int, internalFormat int, width int, height int, border int, format int, type int, data ) : void",
    "info" : "MethodDeclaration[84499-84644]:MethodDeclaration[84739-84884]"
  }, {
    "left" : "public abstract copyTexImage2D(target int, level int, internalFormat int, x int, y int, width int, height int, border int) : void",
    "right" : "public abstract copyTexImage2D(target int, level int, internalFormat int, x int, y int, width int, height int, border int) : void",
    "info" : "MethodDeclaration[84647-84775]:MethodDeclaration[84887-85015]"
  }, {
    "left" : "public abstract texSubImage2D(target int, level int, xOffset int, yOffset int, width int, height int, format int, type int, data ) : void",
    "right" : "public abstract texSubImage2D(target int, level int, xOffset int, yOffset int, width int, height int, format int, type int, data ) : void",
    "info" : "MethodDeclaration[84778-84920]:MethodDeclaration[85018-85160]"
  }, {
    "left" : "public abstract copyTexSubImage2D(target int, level int, xOffset int, yOffset int, x int, y int, width int, height int) : void",
    "right" : "public abstract copyTexSubImage2D(target int, level int, xOffset int, yOffset int, x int, y int, width int, height int) : void",
    "info" : "MethodDeclaration[84923-85048]:MethodDeclaration[85163-85288]"
  }, {
    "left" : "public abstract compressedTexImage2D(target int, level int, internalFormat int, width int, height int, border int, imageSize int, data ) : void",
    "right" : "public abstract compressedTexImage2D(target int, level int, internalFormat int, width int, height int, border int, imageSize int, data ) : void",
    "info" : "MethodDeclaration[85051-85199]:MethodDeclaration[85291-85439]"
  }, {
    "left" : "public abstract compressedTexSubImage2D(target int, level int, xOffset int, yOffset int, width int, height int, format int, imageSize int, data ) : void",
    "right" : "public abstract compressedTexSubImage2D(target int, level int, xOffset int, yOffset int, width int, height int, format int, imageSize int, data ) : void",
    "info" : "MethodDeclaration[85202-85359]:MethodDeclaration[85442-85599]"
  }, {
    "left" : "public abstract texParameteri(target int, pname int, param int) : void",
    "right" : "public abstract texParameteri(target int, pname int, param int) : void",
    "info" : "MethodDeclaration[85362-85431]:MethodDeclaration[85602-85671]"
  }, {
    "left" : "public abstract texParameterf(target int, pname int, param float) : void",
    "right" : "public abstract texParameterf(target int, pname int, param float) : void",
    "info" : "MethodDeclaration[85434-85505]:MethodDeclaration[85674-85745]"
  }, {
    "left" : "public abstract texParameteriv(target int, pname int, params ) : void",
    "right" : "public abstract texParameteriv(target int, pname int, params ) : void",
    "info" : "MethodDeclaration[85508-85585]:MethodDeclaration[85748-85825]"
  }, {
    "left" : "public abstract texParameterfv(target int, pname int, params ) : void",
    "right" : "public abstract texParameterfv(target int, pname int, params ) : void",
    "info" : "MethodDeclaration[85588-85667]:MethodDeclaration[85828-85907]"
  }, {
    "left" : "public abstract generateMipmap(target int) : void",
    "right" : "public abstract generateMipmap(target int) : void",
    "info" : "MethodDeclaration[85670-85718]:MethodDeclaration[85910-85958]"
  }, {
    "left" : "public abstract genTextures(n int, textures ) : void",
    "right" : "public abstract genTextures(n int, textures ) : void",
    "info" : "MethodDeclaration[85721-85781]:MethodDeclaration[85961-86021]"
  }, {
    "left" : "public abstract deleteTextures(n int, textures ) : void",
    "right" : "public abstract deleteTextures(n int, textures ) : void",
    "info" : "MethodDeclaration[85784-85847]:MethodDeclaration[86024-86087]"
  }, {
    "left" : "public abstract getTexParameteriv(target int, pname int, params ) : void",
    "right" : "public abstract getTexParameteriv(target int, pname int, params ) : void",
    "info" : "MethodDeclaration[85850-85930]:MethodDeclaration[86090-86170]"
  }, {
    "left" : "public abstract getTexParameterfv(target int, pname int, params ) : void",
    "right" : "public abstract getTexParameterfv(target int, pname int, params ) : void",
    "info" : "MethodDeclaration[85933-86015]:MethodDeclaration[86173-86255]"
  }, {
    "left" : "public abstract isTexture(texture int) : boolean",
    "right" : "public abstract isTexture(texture int) : boolean",
    "info" : "MethodDeclaration[86018-86065]:MethodDeclaration[86258-86305]"
  }, {
    "left" : "public activeTexture(texture int) : void",
    "right" : "public activeTexture(texture int) : void",
    "info" : "MethodDeclaration[86255-86371]:MethodDeclaration[86495-86611]"
  }, {
    "left" : "protected abstract activeTextureImpl(texture int) : void",
    "right" : "protected abstract activeTextureImpl(texture int) : void",
    "info" : "MethodDeclaration[86375-86430]:MethodDeclaration[86615-86670]"
  }, {
    "left" : "public bindTexture(target int, texture int) : void",
    "right" : "public bindTexture(target int, texture int) : void",
    "info" : "MethodDeclaration[86434-86930]:MethodDeclaration[86674-87170]"
  }, {
    "left" : "protected abstract bindTextureImpl(target int, texture int) : void",
    "right" : "protected abstract bindTextureImpl(target int, texture int) : void",
    "info" : "MethodDeclaration[86933-86998]:MethodDeclaration[87173-87238]"
  }, {
    "left" : "public abstract createShader(type int) : int",
    "right" : "public abstract createShader(type int) : int",
    "info" : "MethodDeclaration[87092-87135]:MethodDeclaration[87332-87375]"
  }, {
    "left" : "public abstract shaderSource(shader int, source ) : void",
    "right" : "public abstract shaderSource(shader int, source ) : void",
    "info" : "MethodDeclaration[87138-87199]:MethodDeclaration[87378-87439]"
  }, {
    "left" : "public abstract compileShader(shader int) : void",
    "right" : "public abstract compileShader(shader int) : void",
    "info" : "MethodDeclaration[87202-87249]:MethodDeclaration[87442-87489]"
  }, {
    "left" : "public abstract releaseShaderCompiler() : void",
    "right" : "public abstract releaseShaderCompiler() : void",
    "info" : "MethodDeclaration[87252-87297]:MethodDeclaration[87492-87537]"
  }, {
    "left" : "public abstract deleteShader(shader int) : void",
    "right" : "public abstract deleteShader(shader int) : void",
    "info" : "MethodDeclaration[87300-87346]:MethodDeclaration[87540-87586]"
  }, {
    "left" : "public abstract shaderBinary(count int, shaders , binaryFormat int, binary , length int) : void",
    "right" : "public abstract shaderBinary(count int, shaders , binaryFormat int, binary , length int) : void",
    "info" : "MethodDeclaration[87349-87458]:MethodDeclaration[87589-87698]"
  }, {
    "left" : "public abstract createProgram() : int",
    "right" : "public abstract createProgram() : int",
    "info" : "MethodDeclaration[87461-87497]:MethodDeclaration[87701-87737]"
  }, {
    "left" : "public abstract attachShader(program int, shader int) : void",
    "right" : "public abstract attachShader(program int, shader int) : void",
    "info" : "MethodDeclaration[87500-87559]:MethodDeclaration[87740-87799]"
  }, {
    "left" : "public abstract detachShader(program int, shader int) : void",
    "right" : "public abstract detachShader(program int, shader int) : void",
    "info" : "MethodDeclaration[87562-87621]:MethodDeclaration[87802-87861]"
  }, {
    "left" : "public abstract linkProgram(program int) : void",
    "right" : "public abstract linkProgram(program int) : void",
    "info" : "MethodDeclaration[87624-87670]:MethodDeclaration[87864-87910]"
  }, {
    "left" : "public abstract useProgram(program int) : void",
    "right" : "public abstract useProgram(program int) : void",
    "info" : "MethodDeclaration[87673-87718]:MethodDeclaration[87913-87958]"
  }, {
    "left" : "public abstract deleteProgram(program int) : void",
    "right" : "public abstract deleteProgram(program int) : void",
    "info" : "MethodDeclaration[87721-87769]:MethodDeclaration[87961-88009]"
  }, {
    "left" : "public abstract getActiveAttrib(program int, index int, size , type ) : ",
    "right" : "public abstract getActiveAttrib(program int, index int, size , type ) : ",
    "info" : "MethodDeclaration[87772-87867]:MethodDeclaration[88012-88107]"
  }, {
    "left" : "public abstract getAttribLocation(program int, name ) : int",
    "right" : "public abstract getAttribLocation(program int, name ) : int",
    "info" : "MethodDeclaration[87870-87934]:MethodDeclaration[88110-88174]"
  }, {
    "left" : "public abstract bindAttribLocation(program int, index int, name ) : void",
    "right" : "public abstract bindAttribLocation(program int, index int, name ) : void",
    "info" : "MethodDeclaration[87937-88014]:MethodDeclaration[88177-88254]"
  }, {
    "left" : "public abstract getUniformLocation(program int, name ) : int",
    "right" : "public abstract getUniformLocation(program int, name ) : int",
    "info" : "MethodDeclaration[88017-88082]:MethodDeclaration[88257-88322]"
  }, {
    "left" : "public abstract getActiveUniform(program int, index int, size , type ) : ",
    "right" : "public abstract getActiveUniform(program int, index int, size , type ) : ",
    "info" : "MethodDeclaration[88085-88181]:MethodDeclaration[88325-88421]"
  }, {
    "left" : "public abstract uniform1i(location int, value int) : void",
    "right" : "public abstract uniform1i(location int, value int) : void",
    "info" : "MethodDeclaration[88184-88240]:MethodDeclaration[88424-88480]"
  }, {
    "left" : "public abstract uniform2i(location int, value0 int, value1 int) : void",
    "right" : "public abstract uniform2i(location int, value0 int, value1 int) : void",
    "info" : "MethodDeclaration[88243-88312]:MethodDeclaration[88483-88552]"
  }, {
    "left" : "public abstract uniform3i(location int, value0 int, value1 int, value2 int) : void",
    "right" : "public abstract uniform3i(location int, value0 int, value1 int, value2 int) : void",
    "info" : "MethodDeclaration[88315-88396]:MethodDeclaration[88555-88636]"
  }, {
    "left" : "public abstract uniform4i(location int, value0 int, value1 int, value2 int, value3 int) : void",
    "right" : "public abstract uniform4i(location int, value0 int, value1 int, value2 int, value3 int) : void",
    "info" : "MethodDeclaration[88399-88492]:MethodDeclaration[88639-88732]"
  }, {
    "left" : "public abstract uniform1f(location int, value float) : void",
    "right" : "public abstract uniform1f(location int, value float) : void",
    "info" : "MethodDeclaration[88495-88553]:MethodDeclaration[88735-88793]"
  }, {
    "left" : "public abstract uniform2f(location int, value0 float, value1 float) : void",
    "right" : "public abstract uniform2f(location int, value0 float, value1 float) : void",
    "info" : "MethodDeclaration[88556-88629]:MethodDeclaration[88796-88869]"
  }, {
    "left" : "public abstract uniform3f(location int, value0 float, value1 float, value2 float) : void",
    "right" : "public abstract uniform3f(location int, value0 float, value1 float, value2 float) : void",
    "info" : "MethodDeclaration[88632-88719]:MethodDeclaration[88872-88959]"
  }, {
    "left" : "public abstract uniform4f(location int, value0 float, value1 float, value2 float, value3 float) : void",
    "right" : "public abstract uniform4f(location int, value0 float, value1 float, value2 float, value3 float) : void",
    "info" : "MethodDeclaration[88722-88823]:MethodDeclaration[88962-89063]"
  }, {
    "left" : "public abstract uniform1iv(location int, count int, v ) : void",
    "right" : "public abstract uniform1iv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[88826-88896]:MethodDeclaration[89066-89136]"
  }, {
    "left" : "public abstract uniform2iv(location int, count int, v ) : void",
    "right" : "public abstract uniform2iv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[88899-88969]:MethodDeclaration[89139-89209]"
  }, {
    "left" : "public abstract uniform3iv(location int, count int, v ) : void",
    "right" : "public abstract uniform3iv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[88972-89042]:MethodDeclaration[89212-89282]"
  }, {
    "left" : "public abstract uniform4iv(location int, count int, v ) : void",
    "right" : "public abstract uniform4iv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[89045-89115]:MethodDeclaration[89285-89355]"
  }, {
    "left" : "public abstract uniform1fv(location int, count int, v ) : void",
    "right" : "public abstract uniform1fv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[89118-89190]:MethodDeclaration[89358-89430]"
  }, {
    "left" : "public abstract uniform2fv(location int, count int, v ) : void",
    "right" : "public abstract uniform2fv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[89193-89265]:MethodDeclaration[89433-89505]"
  }, {
    "left" : "public abstract uniform3fv(location int, count int, v ) : void",
    "right" : "public abstract uniform3fv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[89268-89340]:MethodDeclaration[89508-89580]"
  }, {
    "left" : "public abstract uniform4fv(location int, count int, v ) : void",
    "right" : "public abstract uniform4fv(location int, count int, v ) : void",
    "info" : "MethodDeclaration[89343-89415]:MethodDeclaration[89583-89655]"
  }, {
    "left" : "public abstract uniformMatrix2fv(location int, count int, transpose boolean, mat ) : void",
    "right" : "public abstract uniformMatrix2fv(location int, count int, transpose boolean, mat ) : void",
    "info" : "MethodDeclaration[89418-89517]:MethodDeclaration[89658-89757]"
  }, {
    "left" : "public abstract uniformMatrix3fv(location int, count int, transpose boolean, mat ) : void",
    "right" : "public abstract uniformMatrix3fv(location int, count int, transpose boolean, mat ) : void",
    "info" : "MethodDeclaration[89520-89619]:MethodDeclaration[89760-89859]"
  }, {
    "left" : "public abstract uniformMatrix4fv(location int, count int, transpose boolean, mat ) : void",
    "right" : "public abstract uniformMatrix4fv(location int, count int, transpose boolean, mat ) : void",
    "info" : "MethodDeclaration[89622-89721]:MethodDeclaration[89862-89961]"
  }, {
    "left" : "public abstract validateProgram(program int) : void",
    "right" : "public abstract validateProgram(program int) : void",
    "info" : "MethodDeclaration[89724-89774]:MethodDeclaration[89964-90014]"
  }, {
    "left" : "public abstract isShader(shader int) : boolean",
    "right" : "public abstract isShader(shader int) : boolean",
    "info" : "MethodDeclaration[89777-89822]:MethodDeclaration[90017-90062]"
  }, {
    "left" : "public abstract getShaderiv(shader int, pname int, params ) : void",
    "right" : "public abstract getShaderiv(shader int, pname int, params ) : void",
    "info" : "MethodDeclaration[89825-89899]:MethodDeclaration[90065-90139]"
  }, {
    "left" : "public abstract getAttachedShaders(program int, maxCount int, count , shaders ) : void",
    "right" : "public abstract getAttachedShaders(program int, maxCount int, count , shaders ) : void",
    "info" : "MethodDeclaration[89902-90005]:MethodDeclaration[90142-90245]"
  }, {
    "left" : "public abstract getShaderInfoLog(shader int) : ",
    "right" : "public abstract getShaderInfoLog(shader int) : ",
    "info" : "MethodDeclaration[90008-90060]:MethodDeclaration[90248-90300]"
  }, {
    "left" : "public abstract getShaderSource(shader int) : ",
    "right" : "public abstract getShaderSource(shader int) : ",
    "info" : "MethodDeclaration[90063-90114]:MethodDeclaration[90303-90354]"
  }, {
    "left" : "public abstract getShaderPrecisionFormat(shaderType int, precisionType int, range , precision ) : void",
    "right" : "public abstract getShaderPrecisionFormat(shaderType int, precisionType int, range , precision ) : void",
    "info" : "MethodDeclaration[90117-90236]:MethodDeclaration[90357-90476]"
  }, {
    "left" : "public abstract getVertexAttribfv(index int, pname int, params ) : void",
    "right" : "public abstract getVertexAttribfv(index int, pname int, params ) : void",
    "info" : "MethodDeclaration[90239-90320]:MethodDeclaration[90479-90560]"
  }, {
    "left" : "public abstract getVertexAttribiv(index int, pname int, params ) : void",
    "right" : "public abstract getVertexAttribiv(index int, pname int, params ) : void",
    "info" : "MethodDeclaration[90323-90402]:MethodDeclaration[90563-90642]"
  }, {
    "left" : "public abstract getVertexAttribPointerv(index int, pname int, data ) : void",
    "right" : "public abstract getVertexAttribPointerv(index int, pname int, data ) : void",
    "info" : "MethodDeclaration[90405-90489]:MethodDeclaration[90645-90729]"
  }, {
    "left" : "public abstract getUniformfv(program int, location int, params ) : void",
    "right" : "public abstract getUniformfv(program int, location int, params ) : void",
    "info" : "MethodDeclaration[90492-90573]:MethodDeclaration[90732-90813]"
  }, {
    "left" : "public abstract getUniformiv(program int, location int, params ) : void",
    "right" : "public abstract getUniformiv(program int, location int, params ) : void",
    "info" : "MethodDeclaration[90576-90655]:MethodDeclaration[90816-90895]"
  }, {
    "left" : "public abstract isProgram(program int) : boolean",
    "right" : "public abstract isProgram(program int) : boolean",
    "info" : "MethodDeclaration[90658-90705]:MethodDeclaration[90898-90945]"
  }, {
    "left" : "public abstract getProgramiv(program int, pname int, params ) : void",
    "right" : "public abstract getProgramiv(program int, pname int, params ) : void",
    "info" : "MethodDeclaration[90708-90784]:MethodDeclaration[90948-91024]"
  }, {
    "left" : "public abstract getProgramInfoLog(program int) : ",
    "right" : "public abstract getProgramInfoLog(program int) : ",
    "info" : "MethodDeclaration[90787-90841]:MethodDeclaration[91027-91081]"
  }, {
    "left" : "public abstract scissor(x int, y int, w int, h int) : void",
    "right" : "public abstract scissor(x int, y int, w int, h int) : void",
    "info" : "MethodDeclaration[90938-90995]:MethodDeclaration[91178-91235]"
  }, {
    "left" : "public abstract sampleCoverage(value float, invert boolean) : void",
    "right" : "public abstract sampleCoverage(value float, invert boolean) : void",
    "info" : "MethodDeclaration[90998-91063]:MethodDeclaration[91238-91303]"
  }, {
    "left" : "public abstract stencilFunc(func int, ref int, mask int) : void",
    "right" : "public abstract stencilFunc(func int, ref int, mask int) : void",
    "info" : "MethodDeclaration[91066-91128]:MethodDeclaration[91306-91368]"
  }, {
    "left" : "public abstract stencilFuncSeparate(face int, func int, ref int, mask int) : void",
    "right" : "public abstract stencilFuncSeparate(face int, func int, ref int, mask int) : void",
    "info" : "MethodDeclaration[91131-91211]:MethodDeclaration[91371-91451]"
  }, {
    "left" : "public abstract stencilOp(sfail int, dpfail int, dppass int) : void",
    "right" : "public abstract stencilOp(sfail int, dpfail int, dppass int) : void",
    "info" : "MethodDeclaration[91214-91280]:MethodDeclaration[91454-91520]"
  }, {
    "left" : "public abstract stencilOpSeparate(face int, sfail int, dpfail int, dppass int) : void",
    "right" : "public abstract stencilOpSeparate(face int, sfail int, dpfail int, dppass int) : void",
    "info" : "MethodDeclaration[91283-91367]:MethodDeclaration[91523-91607]"
  }, {
    "left" : "public abstract depthFunc(func int) : void",
    "right" : "public abstract depthFunc(func int) : void",
    "info" : "MethodDeclaration[91370-91411]:MethodDeclaration[91610-91651]"
  }, {
    "left" : "public abstract blendEquation(mode int) : void",
    "right" : "public abstract blendEquation(mode int) : void",
    "info" : "MethodDeclaration[91414-91459]:MethodDeclaration[91654-91699]"
  }, {
    "left" : "public abstract blendEquationSeparate(modeRGB int, modeAlpha int) : void",
    "right" : "public abstract blendEquationSeparate(modeRGB int, modeAlpha int) : void",
    "info" : "MethodDeclaration[91462-91533]:MethodDeclaration[91702-91773]"
  }, {
    "left" : "public abstract blendFunc(src int, dst int) : void",
    "right" : "public abstract blendFunc(src int, dst int) : void",
    "info" : "MethodDeclaration[91536-91585]:MethodDeclaration[91776-91825]"
  }, {
    "left" : "public abstract blendFuncSeparate(srcRGB int, dstRGB int, srcAlpha int, dstAlpha int) : void",
    "right" : "public abstract blendFuncSeparate(srcRGB int, dstRGB int, srcAlpha int, dstAlpha int) : void",
    "info" : "MethodDeclaration[91588-91679]:MethodDeclaration[91828-91919]"
  }, {
    "left" : "public abstract blendColor(red float, green float, blue float, alpha float) : void",
    "right" : "public abstract blendColor(red float, green float, blue float, alpha float) : void",
    "info" : "MethodDeclaration[91682-91763]:MethodDeclaration[91922-92003]"
  }, {
    "left" : "public abstract alphaFunc(func int, ref float) : void",
    "right" : "public abstract alphaFunc(func int, ref float) : void",
    "info" : "MethodDeclaration[91766-91818]:MethodDeclaration[92006-92058]"
  }, {
    "left" : "public abstract colorMask(r boolean, g boolean, b boolean, a boolean) : void",
    "right" : "public abstract colorMask(r boolean, g boolean, b boolean, a boolean) : void",
    "info" : "MethodDeclaration[91920-91995]:MethodDeclaration[92160-92235]"
  }, {
    "left" : "public abstract depthMask(mask boolean) : void",
    "right" : "public abstract depthMask(mask boolean) : void",
    "info" : "MethodDeclaration[91998-92043]:MethodDeclaration[92238-92283]"
  }, {
    "left" : "public abstract stencilMask(mask int) : void",
    "right" : "public abstract stencilMask(mask int) : void",
    "info" : "MethodDeclaration[92046-92089]:MethodDeclaration[92286-92329]"
  }, {
    "left" : "public abstract stencilMaskSeparate(face int, mask int) : void",
    "right" : "public abstract stencilMaskSeparate(face int, mask int) : void",
    "info" : "MethodDeclaration[92092-92153]:MethodDeclaration[92332-92393]"
  }, {
    "left" : "public abstract clear(buf int) : void",
    "right" : "public abstract clear(buf int) : void",
    "info" : "MethodDeclaration[92156-92192]:MethodDeclaration[92396-92432]"
  }, {
    "left" : "public abstract clearColor(r float, g float, b float, a float) : void",
    "right" : "public abstract clearColor(r float, g float, b float, a float) : void",
    "info" : "MethodDeclaration[92195-92263]:MethodDeclaration[92435-92503]"
  }, {
    "left" : "public abstract clearDepth(d float) : void",
    "right" : "public abstract clearDepth(d float) : void",
    "info" : "MethodDeclaration[92266-92307]:MethodDeclaration[92506-92547]"
  }, {
    "left" : "public abstract clearStencil(s int) : void",
    "right" : "public abstract clearStencil(s int) : void",
    "info" : "MethodDeclaration[92310-92351]:MethodDeclaration[92550-92591]"
  }, {
    "left" : "public bindFramebuffer(target int, framebuffer int) : void",
    "right" : "public bindFramebuffer(target int, framebuffer int) : void",
    "info" : "MethodDeclaration[92445-92651]:MethodDeclaration[92685-92891]"
  }, {
    "left" : "protected abstract bindFramebufferImpl(target int, framebuffer int) : void",
    "right" : "protected abstract bindFramebufferImpl(target int, framebuffer int) : void",
    "info" : "MethodDeclaration[92654-92727]:MethodDeclaration[92894-92967]"
  }, {
    "left" : "public abstract deleteFramebuffers(n int, framebuffers ) : void",
    "right" : "public abstract deleteFramebuffers(n int, framebuffers ) : void",
    "info" : "MethodDeclaration[92731-92802]:MethodDeclaration[92971-93042]"
  }, {
    "left" : "public abstract genFramebuffers(n int, framebuffers ) : void",
    "right" : "public abstract genFramebuffers(n int, framebuffers ) : void",
    "info" : "MethodDeclaration[92805-92873]:MethodDeclaration[93045-93113]"
  }, {
    "left" : "public abstract bindRenderbuffer(target int, renderbuffer int) : void",
    "right" : "public abstract bindRenderbuffer(target int, renderbuffer int) : void",
    "info" : "MethodDeclaration[92876-92944]:MethodDeclaration[93116-93184]"
  }, {
    "left" : "public abstract deleteRenderbuffers(n int, renderbuffers ) : void",
    "right" : "public abstract deleteRenderbuffers(n int, renderbuffers ) : void",
    "info" : "MethodDeclaration[92947-93020]:MethodDeclaration[93187-93260]"
  }, {
    "left" : "public abstract genRenderbuffers(n int, renderbuffers ) : void",
    "right" : "public abstract genRenderbuffers(n int, renderbuffers ) : void",
    "info" : "MethodDeclaration[93023-93093]:MethodDeclaration[93263-93333]"
  }, {
    "left" : "public abstract renderbufferStorage(target int, internalFormat int, width int, height int) : void",
    "right" : "public abstract renderbufferStorage(target int, internalFormat int, width int, height int) : void",
    "info" : "MethodDeclaration[93096-93192]:MethodDeclaration[93336-93432]"
  }, {
    "left" : "public abstract framebufferRenderbuffer(target int, attachment int, rendbuferfTarget int, renderbuffer int) : void",
    "right" : "public abstract framebufferRenderbuffer(target int, attachment int, rendbuferfTarget int, renderbuffer int) : void",
    "info" : "MethodDeclaration[93195-93308]:MethodDeclaration[93435-93548]"
  }, {
    "left" : "public abstract framebufferTexture2D(target int, attachment int, texTarget int, texture int, level int) : void",
    "right" : "public abstract framebufferTexture2D(target int, attachment int, texTarget int, texture int, level int) : void",
    "info" : "MethodDeclaration[93311-93420]:MethodDeclaration[93551-93660]"
  }, {
    "left" : "public abstract checkFramebufferStatus(target int) : int",
    "right" : "public abstract checkFramebufferStatus(target int) : int",
    "info" : "MethodDeclaration[93423-93478]:MethodDeclaration[93663-93718]"
  }, {
    "left" : "public abstract isFramebuffer(framebuffer int) : boolean",
    "right" : "public abstract isFramebuffer(framebuffer int) : boolean",
    "info" : "MethodDeclaration[93481-93536]:MethodDeclaration[93721-93776]"
  }, {
    "left" : "public abstract getFramebufferAttachmentParameteriv(target int, attachment int, pname int, params ) : void",
    "right" : "public abstract getFramebufferAttachmentParameteriv(target int, attachment int, pname int, params ) : void",
    "info" : "MethodDeclaration[93539-93653]:MethodDeclaration[93779-93893]"
  }, {
    "left" : "public abstract isRenderbuffer(renderbuffer int) : boolean",
    "right" : "public abstract isRenderbuffer(renderbuffer int) : boolean",
    "info" : "MethodDeclaration[93656-93713]:MethodDeclaration[93896-93953]"
  }, {
    "left" : "public abstract getRenderbufferParameteriv(target int, pname int, params ) : void",
    "right" : "public abstract getRenderbufferParameteriv(target int, pname int, params ) : void",
    "info" : "MethodDeclaration[93716-93805]:MethodDeclaration[93956-94045]"
  }, {
    "left" : "public abstract blitFramebuffer(srcX0 int, srcY0 int, srcX1 int, srcY1 int, dstX0 int, dstY0 int, dstX1 int, dstY1 int, mask int, filter int) : void",
    "right" : "public abstract blitFramebuffer(srcX0 int, srcY0 int, srcX1 int, srcY1 int, dstX0 int, dstY0 int, dstX1 int, dstY1 int, mask int, filter int) : void",
    "info" : "MethodDeclaration[93808-93955]:MethodDeclaration[94048-94195]"
  }, {
    "left" : "public abstract renderbufferStorageMultisample(target int, samples int, format int, width int, height int) : void",
    "right" : "public abstract renderbufferStorageMultisample(target int, samples int, format int, width int, height int) : void",
    "info" : "MethodDeclaration[93958-94070]:MethodDeclaration[94198-94310]"
  }, {
    "left" : "public abstract readBuffer(buf int) : void",
    "right" : "public abstract readBuffer(buf int) : void",
    "info" : "MethodDeclaration[94073-94114]:MethodDeclaration[94313-94354]"
  }, {
    "left" : "public abstract drawBuffer(buf int) : void",
    "right" : "public abstract drawBuffer(buf int) : void",
    "info" : "MethodDeclaration[94117-94158]:MethodDeclaration[94357-94398]"
  }, {
    "left" : "labelPix",
    "right" : "labelPix",
    "info" : "FieldDeclaration[94181-143843]:FieldDeclaration[94421-144083]"
  } ],
  "mappings" : [ {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10345-10472]:Block[10345-10472]"
  }, {
    "left" : "float eps = 1.0f;",
    "right" : "float eps = 1.0f;",
    "info" : "VariableDeclarationStatement[10351-10368]:VariableDeclarationStatement[10351-10368]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[10374-10446]:DoStatement[10374-10446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10377-10403]:Block[10377-10403]"
  }, {
    "left" : "eps /= 2.0f;",
    "right" : "eps /= 2.0f;",
    "info" : "ExpressionStatement[10385-10397]:ExpressionStatement[10385-10397]"
  }, {
    "left" : "FLOAT_EPS = eps;",
    "right" : "FLOAT_EPS = eps;",
    "info" : "ExpressionStatement[10452-10468]:ExpressionStatement[10452-10468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10916-10919]:Block[10916-10919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10955-11506]:Block[10955-11506]"
  }, {
    "left" : "this.pg = pg;",
    "right" : "this.pg = pg;",
    "info" : "ExpressionStatement[10961-10974]:ExpressionStatement[10961-10974]"
  }, {
    "left" : "if (glColorTex == null)",
    "right" : "if (glColorTex == null)",
    "info" : "IfStatement[10979-11384]:IfStatement[10979-11384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11003-11384]:Block[11003-11384]"
  }, {
    "left" : "glColorTex = allocateIntBuffer(2);",
    "right" : "glColorTex = allocateIntBuffer(2);",
    "info" : "ExpressionStatement[11011-11045]:ExpressionStatement[11011-11045]"
  }, {
    "left" : "glColorFbo = allocateIntBuffer(1);",
    "right" : "glColorFbo = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11052-11086]:ExpressionStatement[11052-11086]"
  }, {
    "left" : "glMultiFbo = allocateIntBuffer(1);",
    "right" : "glMultiFbo = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11093-11127]:ExpressionStatement[11093-11127]"
  }, {
    "left" : "glColorBuf = allocateIntBuffer(1);",
    "right" : "glColorBuf = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11134-11168]:ExpressionStatement[11134-11168]"
  }, {
    "left" : "glDepthStencil = allocateIntBuffer(1);",
    "right" : "glDepthStencil = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11175-11213]:ExpressionStatement[11175-11213]"
  }, {
    "left" : "glDepth = allocateIntBuffer(1);",
    "right" : "glDepth = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11220-11251]:ExpressionStatement[11220-11251]"
  }, {
    "left" : "glStencil = allocateIntBuffer(1);",
    "right" : "glStencil = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11258-11291]:ExpressionStatement[11258-11291]"
  }, {
    "left" : "fboLayerCreated = false;",
    "right" : "fboLayerCreated = false;",
    "info" : "ExpressionStatement[11299-11323]:ExpressionStatement[11299-11323]"
  }, {
    "left" : "fboLayerInUse = false;",
    "right" : "fboLayerInUse = false;",
    "info" : "ExpressionStatement[11330-11352]:ExpressionStatement[11330-11352]"
  }, {
    "left" : "firstFrame = false;",
    "right" : "firstFrame = false;",
    "info" : "ExpressionStatement[11359-11378]:ExpressionStatement[11359-11378]"
  }, {
    "left" : "byteBuffer = allocateByteBuffer(1);",
    "right" : "byteBuffer = allocateByteBuffer(1);",
    "info" : "ExpressionStatement[11390-11425]:ExpressionStatement[11390-11425]"
  }, {
    "left" : "intBuffer = allocateIntBuffer(1);",
    "right" : "intBuffer = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[11430-11463]:ExpressionStatement[11430-11463]"
  }, {
    "left" : "viewBuffer = allocateIntBuffer(4);",
    "right" : "viewBuffer = allocateIntBuffer(4);",
    "info" : "ExpressionStatement[11468-11502]:ExpressionStatement[11468-11502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11551-11582]:Block[11551-11582]"
  }, {
    "left" : "primaryPGL = primary;",
    "right" : "primaryPGL = primary;",
    "info" : "ExpressionStatement[11557-11578]:ExpressionStatement[11557-11578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11636-11937]:Block[11636-11937]"
  }, {
    "left" : "if (smooth == 0)",
    "right" : "if (smooth == 0)",
    "info" : "IfStatement[11642-11933]:IfStatement[11642-11933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11659-11737]:Block[11659-11737]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[11722-11731]:ReturnStatement[11722-11731]"
  }, {
    "left" : "if (smooth == 1)",
    "right" : "if (smooth == 1)",
    "info" : "IfStatement[11743-11933]:IfStatement[11743-11933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11760-11852]:Block[11760-11852]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[11837-11846]:ReturnStatement[11837-11846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11858-11933]:Block[11858-11933]"
  }, {
    "left" : "return smooth;",
    "right" : "return smooth;",
    "info" : "ReturnStatement[11913-11927]:ReturnStatement[11913-11927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12235-12662]:Block[12235-12662]"
  }, {
    "left" : "if (threadIsCurrent() && fboLayerCreated)",
    "right" : "if (threadIsCurrent() && fboLayerCreated)",
    "info" : "IfStatement[12241-12577]:IfStatement[12241-12577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12283-12577]:Block[12283-12577]"
  }, {
    "left" : "deleteTextures(2, glColorTex);",
    "right" : "deleteTextures(2, glColorTex);",
    "info" : "ExpressionStatement[12291-12321]:ExpressionStatement[12291-12321]"
  }, {
    "left" : "deleteFramebuffers(1, glColorFbo);",
    "right" : "deleteFramebuffers(1, glColorFbo);",
    "info" : "ExpressionStatement[12328-12362]:ExpressionStatement[12328-12362]"
  }, {
    "left" : "deleteFramebuffers(1, glMultiFbo);",
    "right" : "deleteFramebuffers(1, glMultiFbo);",
    "info" : "ExpressionStatement[12369-12403]:ExpressionStatement[12369-12403]"
  }, {
    "left" : "deleteRenderbuffers(1, glColorBuf);",
    "right" : "deleteRenderbuffers(1, glColorBuf);",
    "info" : "ExpressionStatement[12410-12445]:ExpressionStatement[12410-12445]"
  }, {
    "left" : "deleteRenderbuffers(1, glDepthStencil);",
    "right" : "deleteRenderbuffers(1, glDepthStencil);",
    "info" : "ExpressionStatement[12452-12491]:ExpressionStatement[12452-12491]"
  }, {
    "left" : "deleteRenderbuffers(1, glDepth);",
    "right" : "deleteRenderbuffers(1, glDepth);",
    "info" : "ExpressionStatement[12498-12530]:ExpressionStatement[12498-12530]"
  }, {
    "left" : "deleteRenderbuffers(1, glStencil);",
    "right" : "deleteRenderbuffers(1, glStencil);",
    "info" : "ExpressionStatement[12537-12571]:ExpressionStatement[12537-12571]"
  }, {
    "left" : "fboLayerCreated = false;",
    "right" : "fboLayerCreated = false;",
    "info" : "ExpressionStatement[12583-12607]:ExpressionStatement[12583-12607]"
  }, {
    "left" : "fboLayerInUse = false;",
    "right" : "fboLayerInUse = false;",
    "info" : "ExpressionStatement[12612-12634]:ExpressionStatement[12612-12634]"
  }, {
    "left" : "firstFrame = false;",
    "right" : "firstFrame = false;",
    "info" : "ExpressionStatement[12639-12658]:ExpressionStatement[12639-12658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12703-12758]:Block[12703-12758]"
  }, {
    "left" : "return fboLayerInUse ? glColorFbo.get(0) : 0;",
    "right" : "return fboLayerInUse ? glColorFbo.get(0) : 0;",
    "info" : "ReturnStatement[12709-12754]:ReturnStatement[12709-12754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12799-12956]:Block[12799-12956]"
  }, {
    "left" : "if (fboLayerInUse)",
    "right" : "if (fboLayerInUse)",
    "info" : "IfStatement[12805-12952]:IfStatement[12805-12952]"
  }, {
    "left" : "return 1 < numSamples ? glMultiFbo.get(0) :\n                                               glColorFbo.get(0);",
    "right" : "return 1 < numSamples ? glMultiFbo.get(0) :\n                                               glColorFbo.get(0);",
    "info" : "ReturnStatement[12824-12933]:ReturnStatement[12824-12933]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[12943-12952]:ReturnStatement[12943-12952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12999-13057]:Block[12999-13057]"
  }, {
    "left" : "return fboLayerInUse ? COLOR_ATTACHMENT0 : BACK;",
    "right" : "return fboLayerInUse ? COLOR_ATTACHMENT0 : BACK;",
    "info" : "ReturnStatement[13005-13053]:ReturnStatement[13005-13053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13100-13159]:Block[13100-13159]"
  }, {
    "left" : "return fboLayerInUse ? COLOR_ATTACHMENT0 : FRONT;",
    "right" : "return fboLayerInUse ? COLOR_ATTACHMENT0 : FRONT;",
    "info" : "ReturnStatement[13106-13155]:ReturnStatement[13106-13155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13196-13228]:Block[13196-13228]"
  }, {
    "left" : ";",
    "right" : ";",
    "info" : "EmptyStatement[13197-13198]:EmptyStatement[13197-13198]"
  }, {
    "left" : "return fboLayerInUse;",
    "right" : "return fboLayerInUse;",
    "info" : "ReturnStatement[13203-13224]:ReturnStatement[13203-13224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13263-13298]:Block[13263-13298]"
  }, {
    "left" : "fboLayerRequested = true;",
    "right" : "fboLayerRequested = true;",
    "info" : "ExpressionStatement[13269-13294]:ExpressionStatement[13269-13294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13338-13370]:Block[13338-13370]"
  }, {
    "left" : "return 1 < numSamples;",
    "right" : "return 1 < numSamples;",
    "info" : "ReturnStatement[13344-13366]:ReturnStatement[13344-13366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13405-13503]:Block[13405-13503]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[13411-13430]:ExpressionStatement[13411-13430]"
  }, {
    "left" : "getIntegerv(DEPTH_BITS, intBuffer);",
    "right" : "getIntegerv(DEPTH_BITS, intBuffer);",
    "info" : "ExpressionStatement[13435-13470]:ExpressionStatement[13435-13470]"
  }, {
    "left" : "return intBuffer.get(0);",
    "right" : "return intBuffer.get(0);",
    "info" : "ReturnStatement[13475-13499]:ReturnStatement[13475-13499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13540-13640]:Block[13540-13640]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[13546-13565]:ExpressionStatement[13546-13565]"
  }, {
    "left" : "getIntegerv(STENCIL_BITS, intBuffer);",
    "right" : "getIntegerv(STENCIL_BITS, intBuffer);",
    "info" : "ExpressionStatement[13570-13607]:ExpressionStatement[13570-13607]"
  }, {
    "left" : "return intBuffer.get(0);",
    "right" : "return intBuffer.get(0);",
    "info" : "ReturnStatement[13612-13636]:ReturnStatement[13612-13636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13678-13796]:Block[13678-13796]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[13684-13703]:ExpressionStatement[13684-13703]"
  }, {
    "left" : "getBooleanv(DEPTH_TEST, intBuffer);",
    "right" : "getBooleanv(DEPTH_TEST, intBuffer);",
    "info" : "ExpressionStatement[13708-13743]:ExpressionStatement[13708-13743]"
  }, {
    "left" : "return intBuffer.get(0) == 0 ? false : true;",
    "right" : "return intBuffer.get(0) == 0 ? false : true;",
    "info" : "ReturnStatement[13748-13792]:ReturnStatement[13748-13792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13839-13962]:Block[13839-13962]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[13845-13864]:ExpressionStatement[13845-13864]"
  }, {
    "left" : "getBooleanv(DEPTH_WRITEMASK, intBuffer);",
    "right" : "getBooleanv(DEPTH_WRITEMASK, intBuffer);",
    "info" : "ExpressionStatement[13869-13909]:ExpressionStatement[13869-13909]"
  }, {
    "left" : "return intBuffer.get(0) == 0 ? false : true;",
    "right" : "return intBuffer.get(0) == 0 ? false : true;",
    "info" : "ReturnStatement[13914-13958]:ReturnStatement[13914-13958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14018-14476]:Block[14018-14476]"
  }, {
    "left" : "if (texture == null)",
    "right" : "if (texture == null)",
    "info" : "IfStatement[14024-14452]:IfStatement[14024-14452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14045-14391]:Block[14045-14391]"
  }, {
    "left" : "texture = new Texture(pg);",
    "right" : "texture = new Texture(pg);",
    "info" : "ExpressionStatement[14053-14079]:ExpressionStatement[14053-14079]"
  }, {
    "left" : "texture.init(pg.width, pg.height,\n                   glColorTex.get(backTex), TEXTURE_2D, RGBA,\n                   fboWidth, fboHeight, NEAREST, NEAREST,\n                   CLAMP_TO_EDGE, CLAMP_TO_EDGE);",
    "right" : "texture.init(pg.width, pg.height,\n                   glColorTex.get(backTex), TEXTURE_2D, RGBA,\n                   fboWidth, fboHeight, NEAREST, NEAREST,\n                   CLAMP_TO_EDGE, CLAMP_TO_EDGE);",
    "info" : "ExpressionStatement[14086-14289]:ExpressionStatement[14086-14289]"
  }, {
    "left" : "texture.invertedY(true);",
    "right" : "texture.invertedY(true);",
    "info" : "ExpressionStatement[14296-14320]:ExpressionStatement[14296-14320]"
  }, {
    "left" : "texture.colorBuffer(true);",
    "right" : "texture.colorBuffer(true);",
    "info" : "ExpressionStatement[14327-14353]:ExpressionStatement[14327-14353]"
  }, {
    "left" : "pg.setCache(pg, texture);",
    "right" : "pg.setCache(pg, texture);",
    "info" : "ExpressionStatement[14360-14385]:ExpressionStatement[14360-14385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14397-14452]:Block[14397-14452]"
  }, {
    "left" : "texture.glName = glColorTex.get(backTex);",
    "right" : "texture.glName = glColorTex.get(backTex);",
    "info" : "ExpressionStatement[14405-14446]:ExpressionStatement[14405-14446]"
  }, {
    "left" : "return texture;",
    "right" : "return texture;",
    "info" : "ReturnStatement[14457-14472]:ReturnStatement[14457-14472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14534-14962]:Block[14534-14962]"
  }, {
    "left" : "if (texture == null)",
    "right" : "if (texture == null)",
    "info" : "IfStatement[14540-14938]:IfStatement[14540-14938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14561-14876]:Block[14561-14876]"
  }, {
    "left" : "texture = new Texture(pg);",
    "right" : "texture = new Texture(pg);",
    "info" : "ExpressionStatement[14569-14595]:ExpressionStatement[14569-14595]"
  }, {
    "left" : "texture.init(pg.width, pg.height,\n                   glColorTex.get(frontTex), TEXTURE_2D, RGBA,\n                   fboWidth, fboHeight, NEAREST, NEAREST,\n                   CLAMP_TO_EDGE, CLAMP_TO_EDGE);",
    "right" : "texture.init(pg.width, pg.height,\n                   glColorTex.get(frontTex), TEXTURE_2D, RGBA,\n                   fboWidth, fboHeight, NEAREST, NEAREST,\n                   CLAMP_TO_EDGE, CLAMP_TO_EDGE);",
    "info" : "ExpressionStatement[14602-14806]:ExpressionStatement[14602-14806]"
  }, {
    "left" : "texture.invertedY(true);",
    "right" : "texture.invertedY(true);",
    "info" : "ExpressionStatement[14813-14837]:ExpressionStatement[14813-14837]"
  }, {
    "left" : "texture.colorBuffer(true);",
    "right" : "texture.colorBuffer(true);",
    "info" : "ExpressionStatement[14844-14870]:ExpressionStatement[14844-14870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14882-14938]:Block[14882-14938]"
  }, {
    "left" : "texture.glName = glColorTex.get(frontTex);",
    "right" : "texture.glName = glColorTex.get(frontTex);",
    "info" : "ExpressionStatement[14890-14932]:ExpressionStatement[14890-14932]"
  }, {
    "left" : "return texture;",
    "right" : "return texture;",
    "info" : "ReturnStatement[14943-14958]:ReturnStatement[14943-14958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15001-15171]:Block[15001-15171]"
  }, {
    "left" : "usingFrontTex = true;",
    "right" : "usingFrontTex = true;",
    "info" : "ExpressionStatement[15007-15028]:ExpressionStatement[15007-15028]"
  }, {
    "left" : "if (!texturingIsEnabled(TEXTURE_2D))",
    "right" : "if (!texturingIsEnabled(TEXTURE_2D))",
    "info" : "IfStatement[15033-15112]:IfStatement[15033-15112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15070-15112]:Block[15070-15112]"
  }, {
    "left" : "enableTexturing(TEXTURE_2D);",
    "right" : "enableTexturing(TEXTURE_2D);",
    "info" : "ExpressionStatement[15078-15106]:ExpressionStatement[15078-15106]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, glColorTex.get(frontTex));",
    "right" : "bindTexture(TEXTURE_2D, glColorTex.get(frontTex));",
    "info" : "ExpressionStatement[15117-15167]:ExpressionStatement[15117-15167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15212-15601]:Block[15212-15601]"
  }, {
    "left" : "if (textureIsBound(TEXTURE_2D, glColorTex.get(frontTex)))",
    "right" : "if (textureIsBound(TEXTURE_2D, glColorTex.get(frontTex)))",
    "info" : "IfStatement[15218-15597]:IfStatement[15218-15597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15276-15597]:Block[15276-15597]"
  }, {
    "left" : "if (!texturingIsEnabled(TEXTURE_2D))",
    "right" : "if (!texturingIsEnabled(TEXTURE_2D))",
    "info" : "IfStatement[15383-15591]:IfStatement[15383-15591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15420-15540]:Block[15420-15540]"
  }, {
    "left" : "enableTexturing(TEXTURE_2D);",
    "right" : "enableTexturing(TEXTURE_2D);",
    "info" : "ExpressionStatement[15430-15458]:ExpressionStatement[15430-15458]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, 0);",
    "right" : "bindTexture(TEXTURE_2D, 0);",
    "info" : "ExpressionStatement[15467-15494]:ExpressionStatement[15467-15494]"
  }, {
    "left" : "disableTexturing(TEXTURE_2D);",
    "right" : "disableTexturing(TEXTURE_2D);",
    "info" : "ExpressionStatement[15503-15532]:ExpressionStatement[15503-15532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15546-15591]:Block[15546-15591]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, 0);",
    "right" : "bindTexture(TEXTURE_2D, 0);",
    "info" : "ExpressionStatement[15556-15583]:ExpressionStatement[15556-15583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15639-15999]:Block[15639-15999]"
  }, {
    "left" : "if (usingFrontTex)",
    "right" : "if (usingFrontTex)",
    "info" : "IfStatement[15645-15687]:IfStatement[15645-15687]"
  }, {
    "left" : "needSepFrontTex = true;",
    "right" : "needSepFrontTex = true;",
    "info" : "ExpressionStatement[15664-15687]:ExpressionStatement[15664-15687]"
  }, {
    "left" : "if (1 < numSamples)",
    "right" : "if (1 < numSamples)",
    "info" : "IfStatement[15692-15995]:IfStatement[15692-15995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15712-15995]:Block[15712-15995]"
  }, {
    "left" : "bindFramebufferImpl(READ_FRAMEBUFFER, glMultiFbo.get(0));",
    "right" : "bindFramebufferImpl(READ_FRAMEBUFFER, glMultiFbo.get(0));",
    "info" : "ExpressionStatement[15720-15777]:ExpressionStatement[15720-15777]"
  }, {
    "left" : "bindFramebufferImpl(DRAW_FRAMEBUFFER, glColorFbo.get(0));",
    "right" : "bindFramebufferImpl(DRAW_FRAMEBUFFER, glColorFbo.get(0));",
    "info" : "ExpressionStatement[15784-15841]:ExpressionStatement[15784-15841]"
  }, {
    "left" : "blitFramebuffer(0, 0, fboWidth, fboHeight,\n                      0, 0, fboWidth, fboHeight,\n                      COLOR_BUFFER_BIT, NEAREST);",
    "right" : "blitFramebuffer(0, 0, fboWidth, fboHeight,\n                      0, 0, fboWidth, fboHeight,\n                      COLOR_BUFFER_BIT, NEAREST);",
    "info" : "ExpressionStatement[15848-15989]:ExpressionStatement[15848-15989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16131-18096]:Block[16131-18096]"
  }, {
    "left" : "if (needFBOLayer(clear0))",
    "right" : "if (needFBOLayer(clear0))",
    "info" : "IfStatement[16137-17629]:IfStatement[16137-17629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16163-17587]:Block[16163-17587]"
  }, {
    "left" : "if (!fboLayerCreated)",
    "right" : "if (!fboLayerCreated)",
    "info" : "IfStatement[16171-16210]:IfStatement[16171-16210]"
  }, {
    "left" : "createFBOLayer();",
    "right" : "createFBOLayer();",
    "info" : "ExpressionStatement[16193-16210]:ExpressionStatement[16193-16210]"
  }, {
    "left" : "bindFramebufferImpl(FRAMEBUFFER, glColorFbo.get(0));",
    "right" : "bindFramebufferImpl(FRAMEBUFFER, glColorFbo.get(0));",
    "info" : "ExpressionStatement[16266-16318]:ExpressionStatement[16266-16318]"
  }, {
    "left" : "framebufferTexture2D(FRAMEBUFFER, COLOR_ATTACHMENT0,\n                           TEXTURE_2D, glColorTex.get(backTex), 0);",
    "right" : "framebufferTexture2D(FRAMEBUFFER, COLOR_ATTACHMENT0,\n                           TEXTURE_2D, glColorTex.get(backTex), 0);",
    "info" : "ExpressionStatement[16325-16445]:ExpressionStatement[16325-16445]"
  }, {
    "left" : "if (1 < numSamples)",
    "right" : "if (1 < numSamples)",
    "info" : "IfStatement[16453-16543]:IfStatement[16453-16543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16473-16543]:Block[16473-16543]"
  }, {
    "left" : "bindFramebufferImpl(FRAMEBUFFER, glMultiFbo.get(0));",
    "right" : "bindFramebufferImpl(FRAMEBUFFER, glMultiFbo.get(0));",
    "info" : "ExpressionStatement[16483-16535]:ExpressionStatement[16483-16535]"
  }, {
    "left" : "if (firstFrame)",
    "right" : "if (firstFrame)",
    "info" : "IfStatement[16551-17552]:IfStatement[16551-17552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16567-16953]:Block[16567-16953]"
  }, {
    "left" : "int argb = pg.backgroundColor;",
    "right" : "int argb = pg.backgroundColor;",
    "info" : "VariableDeclarationStatement[16657-16687]:VariableDeclarationStatement[16657-16687]"
  }, {
    "left" : "float a = ((argb >> 24) & 0xff) / 255.0f;",
    "right" : "float a = ((argb >> 24) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[16696-16737]:VariableDeclarationStatement[16696-16737]"
  }, {
    "left" : "float r = ((argb >> 16) & 0xff) / 255.0f;",
    "right" : "float r = ((argb >> 16) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[16746-16787]:VariableDeclarationStatement[16746-16787]"
  }, {
    "left" : "float g = ((argb >> 8) & 0xff) / 255.0f;",
    "right" : "float g = ((argb >> 8) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[16796-16836]:VariableDeclarationStatement[16796-16836]"
  }, {
    "left" : "float b = ((argb) & 0xff) / 255.0f;",
    "right" : "float b = ((argb) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[16845-16880]:VariableDeclarationStatement[16845-16880]"
  }, {
    "left" : "clearColor(r, g, b, a);",
    "right" : "clearColor(r, g, b, a);",
    "info" : "ExpressionStatement[16889-16912]:ExpressionStatement[16889-16912]"
  }, {
    "left" : "clear(COLOR_BUFFER_BIT);",
    "right" : "clear(COLOR_BUFFER_BIT);",
    "info" : "ExpressionStatement[16921-16945]:ExpressionStatement[16921-16945]"
  }, {
    "left" : "if (!clear0)",
    "right" : "if (!clear0)",
    "info" : "IfStatement[16959-17552]:IfStatement[16959-17552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16972-17552]:Block[16972-17552]"
  }, {
    "left" : "int x = 0;",
    "right" : "int x = 0;",
    "info" : "VariableDeclarationStatement[17129-17139]:VariableDeclarationStatement[17129-17139]"
  }, {
    "left" : "int y = 0;",
    "right" : "int y = 0;",
    "info" : "VariableDeclarationStatement[17148-17158]:VariableDeclarationStatement[17148-17158]"
  }, {
    "left" : "if (presentMode)",
    "right" : "if (presentMode)",
    "info" : "IfStatement[17167-17251]:IfStatement[17167-17251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17184-17251]:Block[17184-17251]"
  }, {
    "left" : "x = (int)offsetX;",
    "right" : "x = (int)offsetX;",
    "info" : "ExpressionStatement[17196-17213]:ExpressionStatement[17196-17213]"
  }, {
    "left" : "y = (int)offsetY;",
    "right" : "y = (int)offsetY;",
    "info" : "ExpressionStatement[17224-17241]:ExpressionStatement[17224-17241]"
  }, {
    "left" : "float scale = pg.getPixelScale();",
    "right" : "float scale = pg.getPixelScale();",
    "info" : "VariableDeclarationStatement[17260-17293]:VariableDeclarationStatement[17260-17293]"
  }, {
    "left" : "drawTexture(TEXTURE_2D, glColorTex.get(frontTex), fboWidth, fboHeight,\n                    x, y, pg.width, pg.height,\n                    0, 0, (int)(scale * pg.width), (int)(scale * pg.height),\n                    0, 0, pg.width, pg.height);",
    "right" : "drawTexture(TEXTURE_2D, glColorTex.get(frontTex), fboWidth, fboHeight,\n                    x, y, pg.width, pg.height,\n                    0, 0, (int)(scale * pg.width), (int)(scale * pg.height),\n                    0, 0, pg.width, pg.height);",
    "info" : "ExpressionStatement[17302-17544]:ExpressionStatement[17302-17544]"
  }, {
    "left" : "fboLayerInUse = true;",
    "right" : "fboLayerInUse = true;",
    "info" : "ExpressionStatement[17560-17581]:ExpressionStatement[17560-17581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17593-17629]:Block[17593-17629]"
  }, {
    "left" : "fboLayerInUse = false;",
    "right" : "fboLayerInUse = false;",
    "info" : "ExpressionStatement[17601-17623]:ExpressionStatement[17601-17623]"
  }, {
    "left" : "if (firstFrame)",
    "right" : "if (firstFrame)",
    "info" : "IfStatement[17635-17684]:IfStatement[17635-17684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17651-17684]:Block[17651-17684]"
  }, {
    "left" : "firstFrame = false;",
    "right" : "firstFrame = false;",
    "info" : "ExpressionStatement[17659-17678]:ExpressionStatement[17659-17678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18179-21111]:Block[18179-21111]"
  }, {
    "left" : "if (fboLayerInUse)",
    "right" : "if (fboLayerInUse)",
    "info" : "IfStatement[18185-21107]:IfStatement[18185-21107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18204-21107]:Block[18204-21107]"
  }, {
    "left" : "syncBackTexture();",
    "right" : "syncBackTexture();",
    "info" : "ExpressionStatement[18212-18230]:ExpressionStatement[18212-18230]"
  }, {
    "left" : "bindFramebufferImpl(FRAMEBUFFER, 0);",
    "right" : "bindFramebufferImpl(FRAMEBUFFER, 0);",
    "info" : "ExpressionStatement[18312-18348]:ExpressionStatement[18312-18348]"
  }, {
    "left" : "if (presentMode)",
    "right" : "if (presentMode)",
    "info" : "IfStatement[18356-20474]:IfStatement[18356-20474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18373-20352]:Block[18373-20352]"
  }, {
    "left" : "int argb = windowColor;",
    "right" : "int argb = windowColor;",
    "info" : "VariableDeclarationStatement[18383-18406]:VariableDeclarationStatement[18383-18406]"
  }, {
    "left" : "float a = ((argb >> 24) & 0xff)  / 255.0f;",
    "right" : "float a = ((argb >> 24) & 0xff)  / 255.0f;",
    "info" : "VariableDeclarationStatement[18415-18457]:VariableDeclarationStatement[18415-18457]"
  }, {
    "left" : "float r = ((argb >> 16) & 0xff) / 255.0f;",
    "right" : "float r = ((argb >> 16) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[18466-18507]:VariableDeclarationStatement[18466-18507]"
  }, {
    "left" : "float g = ((argb >> 8) & 0xff) / 255.0f;",
    "right" : "float g = ((argb >> 8) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[18516-18556]:VariableDeclarationStatement[18516-18556]"
  }, {
    "left" : "float b = (argb & 0xff) / 255.0f;",
    "right" : "float b = (argb & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[18565-18598]:VariableDeclarationStatement[18565-18598]"
  }, {
    "left" : "clearDepth(1);",
    "right" : "clearDepth(1);",
    "info" : "ExpressionStatement[18607-18621]:ExpressionStatement[18607-18621]"
  }, {
    "left" : "clearColor(r, g, b, a);",
    "right" : "clearColor(r, g, b, a);",
    "info" : "ExpressionStatement[18630-18653]:ExpressionStatement[18630-18653]"
  }, {
    "left" : "clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);",
    "right" : "clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);",
    "info" : "ExpressionStatement[18662-18705]:ExpressionStatement[18662-18705]"
  }, {
    "left" : "if (labelTex == null)",
    "right" : "if (labelTex == null)",
    "info" : "IfStatement[18715-19700]:IfStatement[18715-19700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18737-19700]:Block[18737-19700]"
  }, {
    "left" : "labelTex = allocateIntBuffer(1);",
    "right" : "labelTex = allocateIntBuffer(1);",
    "info" : "ExpressionStatement[18749-18781]:ExpressionStatement[18749-18781]"
  }, {
    "left" : "genTextures(1, labelTex);",
    "right" : "genTextures(1, labelTex);",
    "info" : "ExpressionStatement[18792-18817]:ExpressionStatement[18792-18817]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, labelTex.get(0));",
    "right" : "bindTexture(TEXTURE_2D, labelTex.get(0));",
    "info" : "ExpressionStatement[18828-18869]:ExpressionStatement[18828-18869]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, NEAREST);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, NEAREST);",
    "info" : "ExpressionStatement[18880-18935]:ExpressionStatement[18880-18935]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, NEAREST);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, NEAREST);",
    "info" : "ExpressionStatement[18946-19001]:ExpressionStatement[18946-19001]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);",
    "info" : "ExpressionStatement[19012-19069]:ExpressionStatement[19012-19069]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);",
    "info" : "ExpressionStatement[19080-19137]:ExpressionStatement[19080-19137]"
  }, {
    "left" : "texImage2D(TEXTURE_2D, 0, RGBA, 100, 50, 0, RGBA, UNSIGNED_BYTE, null);",
    "right" : "texImage2D(TEXTURE_2D, 0, RGBA, 100, 50, 0, RGBA, UNSIGNED_BYTE, null);",
    "info" : "ExpressionStatement[19148-19219]:ExpressionStatement[19148-19219]"
  }, {
    "left" : "IntBuffer buf = allocateIntBuffer(labelPix);",
    "right" : "IntBuffer buf = allocateIntBuffer(labelPix);",
    "info" : "VariableDeclarationStatement[19528-19572]:VariableDeclarationStatement[19528-19572]"
  }, {
    "left" : "copyToTexture(TEXTURE_2D, RGBA, labelTex.get(0), 0, 0, 100, 50, buf);",
    "right" : "copyToTexture(TEXTURE_2D, RGBA, labelTex.get(0), 0, 0, 100, 50, buf);",
    "info" : "ExpressionStatement[19583-19652]:ExpressionStatement[19583-19652]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, 0);",
    "right" : "bindTexture(TEXTURE_2D, 0);",
    "info" : "ExpressionStatement[19663-19690]:ExpressionStatement[19663-19690]"
  }, {
    "left" : "drawTexture(TEXTURE_2D, labelTex.get(0), 100, 50,\n                    0, 0, 20 + 100, 20 + 50,\n                    0, 50, 100, 0,\n                    20, 20, 20 + 100, 20 + 50);",
    "right" : "drawTexture(TEXTURE_2D, labelTex.get(0), 100, 50,\n                    0, 0, 20 + 100, 20 + 50,\n                    0, 50, 100, 0,\n                    20, 20, 20 + 100, 20 + 50);",
    "info" : "ExpressionStatement[19709-19886]:ExpressionStatement[19709-19886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20358-20474]:Block[20358-20474]"
  }, {
    "left" : "clearDepth(1);",
    "right" : "clearDepth(1);",
    "info" : "ExpressionStatement[20368-20382]:ExpressionStatement[20368-20382]"
  }, {
    "left" : "clearColor(0, 0, 0, 0);",
    "right" : "clearColor(0, 0, 0, 0);",
    "info" : "ExpressionStatement[20391-20414]:ExpressionStatement[20391-20414]"
  }, {
    "left" : "clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);",
    "right" : "clear(COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);",
    "info" : "ExpressionStatement[20423-20466]:ExpressionStatement[20423-20466]"
  }, {
    "left" : "disable(BLEND);",
    "right" : "disable(BLEND);",
    "info" : "ExpressionStatement[20548-20563]:ExpressionStatement[20548-20563]"
  }, {
    "left" : "int x = 0;",
    "right" : "int x = 0;",
    "info" : "VariableDeclarationStatement[20570-20580]:VariableDeclarationStatement[20570-20580]"
  }, {
    "left" : "int y = 0;",
    "right" : "int y = 0;",
    "info" : "VariableDeclarationStatement[20587-20597]:VariableDeclarationStatement[20587-20597]"
  }, {
    "left" : "if (presentMode)",
    "right" : "if (presentMode)",
    "info" : "IfStatement[20604-20682]:IfStatement[20604-20682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20621-20682]:Block[20621-20682]"
  }, {
    "left" : "x = (int)offsetX;",
    "right" : "x = (int)offsetX;",
    "info" : "ExpressionStatement[20631-20648]:ExpressionStatement[20631-20648]"
  }, {
    "left" : "y = (int)offsetY;",
    "right" : "y = (int)offsetY;",
    "info" : "ExpressionStatement[20657-20674]:ExpressionStatement[20657-20674]"
  }, {
    "left" : "float scale = pg.getPixelScale();",
    "right" : "float scale = pg.getPixelScale();",
    "info" : "VariableDeclarationStatement[20689-20722]:VariableDeclarationStatement[20689-20722]"
  }, {
    "left" : "drawTexture(TEXTURE_2D, glColorTex.get(backTex),\n                  fboWidth, fboHeight,\n                  x, y, pg.width, pg.height,\n                  0, 0, (int)(scale * pg.width), (int)(scale * pg.height),\n                  0, 0, pg.width, pg.height);",
    "right" : "drawTexture(TEXTURE_2D, glColorTex.get(backTex),\n                  fboWidth, fboHeight,\n                  x, y, pg.width, pg.height,\n                  0, 0, (int)(scale * pg.width), (int)(scale * pg.height),\n                  0, 0, pg.width, pg.height);",
    "info" : "ExpressionStatement[20729-20982]:ExpressionStatement[20729-20982]"
  }, {
    "left" : "int temp = frontTex;",
    "right" : "int temp = frontTex;",
    "info" : "VariableDeclarationStatement[21033-21053]:VariableDeclarationStatement[21033-21053]"
  }, {
    "left" : "frontTex = backTex;",
    "right" : "frontTex = backTex;",
    "info" : "ExpressionStatement[21060-21079]:ExpressionStatement[21060-21079]"
  }, {
    "left" : "backTex = temp;",
    "right" : "backTex = temp;",
    "info" : "ExpressionStatement[21086-21101]:ExpressionStatement[21086-21101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21390-21442]:Block[21390-21442]"
  }, {
    "left" : "return Thread.currentThread() == glThread;",
    "right" : "return Thread.currentThread() == glThread;",
    "info" : "ReturnStatement[21396-21438]:ReturnStatement[21396-21438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21484-21512]:Block[21484-21512]"
  }, {
    "left" : "glThread = thread;",
    "right" : "glThread = thread;",
    "info" : "ExpressionStatement[21490-21508]:ExpressionStatement[21490-21508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21542-21545]:Block[21542-21545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21573-21576]:Block[21573-21576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21626-21960]:Block[21626-21960]"
  }, {
    "left" : "return fboLayerRequested;",
    "right" : "return fboLayerRequested;",
    "info" : "ReturnStatement[21931-21956]:ReturnStatement[21931-21956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21995-27269]:Block[21995-24750]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[22001-22036]:VariableDeclarationStatement[22001-22036]"
  }, {
    "left" : "float scale = pg.getPixelScale();",
    "right" : "float scale = pg.getPixelScale();",
    "info" : "VariableDeclarationStatement[22041-22074]:VariableDeclarationStatement[22041-22074]"
  }, {
    "left" : "if (-1 < ext.indexOf(\"texture_non_power_of_two\"))",
    "right" : "if (-1 < ext.indexOf(\"texture_non_power_of_two\"))",
    "info" : "IfStatement[22080-22354]:IfStatement[22080-22354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22130-22223]:Block[22130-22223]"
  }, {
    "left" : "fboWidth = (int)(scale * pg.width);",
    "right" : "fboWidth = (int)(scale * pg.width);",
    "info" : "ExpressionStatement[22138-22173]:ExpressionStatement[22138-22173]"
  }, {
    "left" : "fboHeight = (int)(scale * pg.height);",
    "right" : "fboHeight = (int)(scale * pg.height);",
    "info" : "ExpressionStatement[22180-22217]:ExpressionStatement[22180-22217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22229-22354]:Block[22229-22354]"
  }, {
    "left" : "fboWidth = nextPowerOfTwo((int)(scale * pg.width));",
    "right" : "fboWidth = nextPowerOfTwo((int)(scale * pg.width));",
    "info" : "ExpressionStatement[22237-22288]:ExpressionStatement[22237-22288]"
  }, {
    "left" : "fboHeight = nextPowerOfTwo((int)(scale * pg.height));",
    "right" : "fboHeight = nextPowerOfTwo((int)(scale * pg.height));",
    "info" : "ExpressionStatement[22295-22348]:ExpressionStatement[22295-22348]"
  }, {
    "left" : "int maxs = maxSamples();",
    "right" : "int maxs = maxSamples();",
    "info" : "VariableDeclarationStatement[22360-22384]:VariableDeclarationStatement[22360-22384]"
  }, {
    "left" : "if (-1 < ext.indexOf(\"_framebuffer_multisample\") && 1 < maxs)",
    "right" : "if (-1 < ext.indexOf(\"_framebuffer_multisample\") && 1 < maxs)",
    "info" : "IfStatement[22389-22546]:IfStatement[22389-22546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22451-22511]:Block[22451-22511]"
  }, {
    "left" : "numSamples = PApplet.min(reqNumSamples, maxs);",
    "right" : "numSamples = PApplet.min(reqNumSamples, maxs);",
    "info" : "ExpressionStatement[22459-22505]:ExpressionStatement[22459-22505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22517-22546]:Block[22517-22546]"
  }, {
    "left" : "numSamples = 1;",
    "right" : "numSamples = 1;",
    "info" : "ExpressionStatement[22525-22540]:ExpressionStatement[22525-22540]"
  }, {
    "left" : "boolean multisample = 1 < numSamples;",
    "right" : "boolean multisample = 1 < numSamples;",
    "info" : "VariableDeclarationStatement[22551-22588]:VariableDeclarationStatement[22551-22588]"
  }, {
    "left" : "boolean packed = ext.indexOf(\"packed_depth_stencil\") != -1;",
    "right" : "boolean packed = ext.indexOf(\"packed_depth_stencil\") != -1;",
    "info" : "VariableDeclarationStatement[22594-22653]:VariableDeclarationStatement[22594-22653]"
  }, {
    "left" : "int depthBits = PApplet.min(REQUESTED_DEPTH_BITS, getDepthBits());",
    "right" : "int depthBits = PApplet.min(REQUESTED_DEPTH_BITS, getDepthBits());",
    "info" : "VariableDeclarationStatement[22658-22724]:VariableDeclarationStatement[22658-22724]"
  }, {
    "left" : "int stencilBits = PApplet.min(REQUESTED_STENCIL_BITS, getStencilBits());",
    "right" : "int stencilBits = PApplet.min(REQUESTED_STENCIL_BITS, getStencilBits());",
    "info" : "VariableDeclarationStatement[22729-22801]:VariableDeclarationStatement[22729-22801]"
  }, {
    "left" : "genTextures(2, glColorTex);",
    "right" : "genTextures(2, glColorTex);",
    "info" : "ExpressionStatement[22807-22834]:ExpressionStatement[22807-22834]"
  }, {
    "left" : "for (int i = 0; i < 2; i++)",
    "right" : "for (int i = 0; i < 2; i++)",
    "info" : "ForStatement[22839-23361]:ForStatement[22839-23361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22867-23361]:Block[22867-23361]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, glColorTex.get(i));",
    "right" : "bindTexture(TEXTURE_2D, glColorTex.get(i));",
    "info" : "ExpressionStatement[22875-22918]:ExpressionStatement[22875-22918]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, NEAREST);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, NEAREST);",
    "info" : "ExpressionStatement[22925-22980]:ExpressionStatement[22925-22980]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, NEAREST);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, NEAREST);",
    "info" : "ExpressionStatement[22987-23042]:ExpressionStatement[22987-23042]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);",
    "info" : "ExpressionStatement[23049-23106]:ExpressionStatement[23049-23106]"
  }, {
    "left" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);",
    "right" : "texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);",
    "info" : "ExpressionStatement[23113-23170]:ExpressionStatement[23113-23170]"
  }, {
    "left" : "texImage2D(TEXTURE_2D, 0, RGBA, fboWidth, fboHeight, 0,\n                 RGBA, UNSIGNED_BYTE, null);",
    "right" : "texImage2D(TEXTURE_2D, 0, RGBA, fboWidth, fboHeight, 0,\n                 RGBA, UNSIGNED_BYTE, null);",
    "info" : "ExpressionStatement[23177-23277]:ExpressionStatement[23177-23277]"
  }, {
    "left" : "initTexture(TEXTURE_2D, RGBA, fboWidth, fboHeight, pg.backgroundColor);",
    "right" : "initTexture(TEXTURE_2D, RGBA, fboWidth, fboHeight, pg.backgroundColor);",
    "info" : "ExpressionStatement[23284-23355]:ExpressionStatement[23284-23355]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, 0);",
    "right" : "bindTexture(TEXTURE_2D, 0);",
    "info" : "ExpressionStatement[23366-23393]:ExpressionStatement[23366-23393]"
  }, {
    "left" : "backTex = 0;",
    "right" : "backTex = 0;",
    "info" : "ExpressionStatement[23399-23411]:ExpressionStatement[23399-23411]"
  }, {
    "left" : "frontTex = 1;",
    "right" : "frontTex = 1;",
    "info" : "ExpressionStatement[23416-23429]:ExpressionStatement[23416-23429]"
  }, {
    "left" : "genFramebuffers(1, glColorFbo);",
    "right" : "genFramebuffers(1, glColorFbo);",
    "info" : "ExpressionStatement[23435-23466]:ExpressionStatement[23435-23466]"
  }, {
    "left" : "bindFramebufferImpl(FRAMEBUFFER, glColorFbo.get(0));",
    "right" : "bindFramebufferImpl(FRAMEBUFFER, glColorFbo.get(0));",
    "info" : "ExpressionStatement[23471-23523]:ExpressionStatement[23471-23523]"
  }, {
    "left" : "framebufferTexture2D(FRAMEBUFFER, COLOR_ATTACHMENT0, TEXTURE_2D,\n                         glColorTex.get(backTex), 0);",
    "right" : "framebufferTexture2D(FRAMEBUFFER, COLOR_ATTACHMENT0, TEXTURE_2D,\n                         glColorTex.get(backTex), 0);",
    "info" : "ExpressionStatement[23528-23646]:ExpressionStatement[23528-23646]"
  }, {
    "left" : "if (multisample)",
    "right" : "if (multisample)",
    "info" : "IfStatement[23652-24192]:IfStatement[23652-24192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23669-24192]:Block[23669-24192]"
  }, {
    "left" : "genFramebuffers(1, glMultiFbo);",
    "right" : "genFramebuffers(1, glMultiFbo);",
    "info" : "ExpressionStatement[23712-23743]:ExpressionStatement[23712-23743]"
  }, {
    "left" : "bindFramebufferImpl(FRAMEBUFFER, glMultiFbo.get(0));",
    "right" : "bindFramebufferImpl(FRAMEBUFFER, glMultiFbo.get(0));",
    "info" : "ExpressionStatement[23750-23802]:ExpressionStatement[23750-23802]"
  }, {
    "left" : "genRenderbuffers(1, glColorBuf);",
    "right" : "genRenderbuffers(1, glColorBuf);",
    "info" : "ExpressionStatement[23842-23874]:ExpressionStatement[23842-23874]"
  }, {
    "left" : "bindRenderbuffer(RENDERBUFFER, glColorBuf.get(0));",
    "right" : "bindRenderbuffer(RENDERBUFFER, glColorBuf.get(0));",
    "info" : "ExpressionStatement[23881-23931]:ExpressionStatement[23881-23931]"
  }, {
    "left" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                     RGBA8, fboWidth, fboHeight);",
    "right" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                     RGBA8, fboWidth, fboHeight);",
    "info" : "ExpressionStatement[23938-24060]:ExpressionStatement[23938-24060]"
  }, {
    "left" : "framebufferRenderbuffer(FRAMEBUFFER, COLOR_ATTACHMENT0,\n                              RENDERBUFFER, glColorBuf.get(0));",
    "right" : "framebufferRenderbuffer(FRAMEBUFFER, COLOR_ATTACHMENT0,\n                              RENDERBUFFER, glColorBuf.get(0));",
    "info" : "ExpressionStatement[24067-24186]:ExpressionStatement[24067-24186]"
  }, {
    "left" : "if (packed && depthBits == 24 && stencilBits == 8)",
    "right" : "if (packed && depthBits == 24 && stencilBits == 8)",
    "info" : "IfStatement[24240-26790]:IfStatement[24955-27505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24291-25001]:Block[25006-25716]"
  }, {
    "left" : "genRenderbuffers(1, glDepthStencil);",
    "right" : "genRenderbuffers(1, glDepthStencil);",
    "info" : "ExpressionStatement[24336-24372]:ExpressionStatement[25051-25087]"
  }, {
    "left" : "bindRenderbuffer(RENDERBUFFER, glDepthStencil.get(0));",
    "right" : "bindRenderbuffer(RENDERBUFFER, glDepthStencil.get(0));",
    "info" : "ExpressionStatement[24379-24433]:ExpressionStatement[25094-25148]"
  }, {
    "left" : "if (multisample)",
    "right" : "if (multisample)",
    "info" : "IfStatement[24440-24735]:IfStatement[25155-25450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24457-24610]:Block[25172-25325]"
  }, {
    "left" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                       DEPTH24_STENCIL8, fboWidth, fboHeight);",
    "right" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                       DEPTH24_STENCIL8, fboWidth, fboHeight);",
    "info" : "ExpressionStatement[24467-24602]:ExpressionStatement[25182-25317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24616-24735]:Block[25331-25450]"
  }, {
    "left" : "renderbufferStorage(RENDERBUFFER, DEPTH24_STENCIL8,\n                            fboWidth, fboHeight);",
    "right" : "renderbufferStorage(RENDERBUFFER, DEPTH24_STENCIL8,\n                            fboWidth, fboHeight);",
    "info" : "ExpressionStatement[24626-24727]:ExpressionStatement[25341-25442]"
  }, {
    "left" : "framebufferRenderbuffer(FRAMEBUFFER, DEPTH_ATTACHMENT, RENDERBUFFER,\n                              glDepthStencil.get(0));",
    "right" : "framebufferRenderbuffer(FRAMEBUFFER, DEPTH_ATTACHMENT, RENDERBUFFER,\n                              glDepthStencil.get(0));",
    "info" : "ExpressionStatement[24742-24864]:ExpressionStatement[25457-25579]"
  }, {
    "left" : "framebufferRenderbuffer(FRAMEBUFFER, STENCIL_ATTACHMENT, RENDERBUFFER,\n                              glDepthStencil.get(0));",
    "right" : "framebufferRenderbuffer(FRAMEBUFFER, STENCIL_ATTACHMENT, RENDERBUFFER,\n                              glDepthStencil.get(0));",
    "info" : "ExpressionStatement[24871-24995]:ExpressionStatement[25586-25710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25007-26790]:Block[25722-27505]"
  }, {
    "left" : "if (0 < depthBits)",
    "right" : "if (0 < depthBits)",
    "info" : "IfStatement[25059-25923]:IfStatement[25774-26638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25078-25923]:Block[25793-26638]"
  }, {
    "left" : "int depthComponent = DEPTH_COMPONENT16;",
    "right" : "int depthComponent = DEPTH_COMPONENT16;",
    "info" : "VariableDeclarationStatement[25088-25127]:VariableDeclarationStatement[25803-25842]"
  }, {
    "left" : "if (depthBits == 32)",
    "right" : "if (depthBits == 32)",
    "info" : "IfStatement[25136-25382]:IfStatement[25851-26097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25157-25214]:Block[25872-25929]"
  }, {
    "left" : "depthComponent = DEPTH_COMPONENT32;",
    "right" : "depthComponent = DEPTH_COMPONENT32;",
    "info" : "ExpressionStatement[25169-25204]:ExpressionStatement[25884-25919]"
  }, {
    "left" : "if (depthBits == 24)",
    "right" : "if (depthBits == 24)",
    "info" : "IfStatement[25220-25382]:IfStatement[25935-26097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25241-25298]:Block[25956-26013]"
  }, {
    "left" : "depthComponent = DEPTH_COMPONENT24;",
    "right" : "depthComponent = DEPTH_COMPONENT24;",
    "info" : "ExpressionStatement[25253-25288]:ExpressionStatement[25968-26003]"
  }, {
    "left" : "if (depthBits == 16)",
    "right" : "if (depthBits == 16)",
    "info" : "IfStatement[25304-25382]:IfStatement[26019-26097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25325-25382]:Block[26040-26097]"
  }, {
    "left" : "depthComponent = DEPTH_COMPONENT16;",
    "right" : "depthComponent = DEPTH_COMPONENT16;",
    "info" : "ExpressionStatement[25337-25372]:ExpressionStatement[26052-26087]"
  }, {
    "left" : "genRenderbuffers(1, glDepth);",
    "right" : "genRenderbuffers(1, glDepth);",
    "info" : "ExpressionStatement[25392-25421]:ExpressionStatement[26107-26136]"
  }, {
    "left" : "bindRenderbuffer(RENDERBUFFER, glDepth.get(0));",
    "right" : "bindRenderbuffer(RENDERBUFFER, glDepth.get(0));",
    "info" : "ExpressionStatement[25430-25477]:ExpressionStatement[26145-26192]"
  }, {
    "left" : "if (multisample)",
    "right" : "if (multisample)",
    "info" : "IfStatement[25486-25789]:IfStatement[26201-26504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25503-25660]:Block[26218-26375]"
  }, {
    "left" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                         depthComponent, fboWidth, fboHeight);",
    "right" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                         depthComponent, fboWidth, fboHeight);",
    "info" : "ExpressionStatement[25515-25650]:ExpressionStatement[26230-26365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25666-25789]:Block[26381-26504]"
  }, {
    "left" : "renderbufferStorage(RENDERBUFFER, depthComponent,\n                              fboWidth, fboHeight);",
    "right" : "renderbufferStorage(RENDERBUFFER, depthComponent,\n                              fboWidth, fboHeight);",
    "info" : "ExpressionStatement[25678-25779]:ExpressionStatement[26393-26494]"
  }, {
    "left" : "framebufferRenderbuffer(FRAMEBUFFER, DEPTH_ATTACHMENT,\n                                RENDERBUFFER, glDepth.get(0));",
    "right" : "framebufferRenderbuffer(FRAMEBUFFER, DEPTH_ATTACHMENT,\n                                RENDERBUFFER, glDepth.get(0));",
    "info" : "ExpressionStatement[25798-25915]:ExpressionStatement[26513-26630]"
  }, {
    "left" : "if (0 < stencilBits)",
    "right" : "if (0 < stencilBits)",
    "info" : "IfStatement[25931-26784]:IfStatement[26646-27499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25952-26784]:Block[26667-27499]"
  }, {
    "left" : "int stencilIndex = STENCIL_INDEX1;",
    "right" : "int stencilIndex = STENCIL_INDEX1;",
    "info" : "VariableDeclarationStatement[25962-25996]:VariableDeclarationStatement[26677-26711]"
  }, {
    "left" : "if (stencilBits == 8)",
    "right" : "if (stencilBits == 8)",
    "info" : "IfStatement[26005-26239]:IfStatement[26720-26954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26027-26079]:Block[26742-26794]"
  }, {
    "left" : "stencilIndex = STENCIL_INDEX8;",
    "right" : "stencilIndex = STENCIL_INDEX8;",
    "info" : "ExpressionStatement[26039-26069]:ExpressionStatement[26754-26784]"
  }, {
    "left" : "if (stencilBits == 4)",
    "right" : "if (stencilBits == 4)",
    "info" : "IfStatement[26085-26239]:IfStatement[26800-26954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26107-26159]:Block[26822-26874]"
  }, {
    "left" : "stencilIndex = STENCIL_INDEX4;",
    "right" : "stencilIndex = STENCIL_INDEX4;",
    "info" : "ExpressionStatement[26119-26149]:ExpressionStatement[26834-26864]"
  }, {
    "left" : "if (stencilBits == 1)",
    "right" : "if (stencilBits == 1)",
    "info" : "IfStatement[26165-26239]:IfStatement[26880-26954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26187-26239]:Block[26902-26954]"
  }, {
    "left" : "stencilIndex = STENCIL_INDEX1;",
    "right" : "stencilIndex = STENCIL_INDEX1;",
    "info" : "ExpressionStatement[26199-26229]:ExpressionStatement[26914-26944]"
  }, {
    "left" : "genRenderbuffers(1, glStencil);",
    "right" : "genRenderbuffers(1, glStencil);",
    "info" : "ExpressionStatement[26249-26280]:ExpressionStatement[26964-26995]"
  }, {
    "left" : "bindRenderbuffer(RENDERBUFFER, glStencil.get(0));",
    "right" : "bindRenderbuffer(RENDERBUFFER, glStencil.get(0));",
    "info" : "ExpressionStatement[26289-26338]:ExpressionStatement[27004-27053]"
  }, {
    "left" : "if (multisample)",
    "right" : "if (multisample)",
    "info" : "IfStatement[26347-26646]:IfStatement[27062-27361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26364-26519]:Block[27079-27234]"
  }, {
    "left" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                         stencilIndex, fboWidth, fboHeight);",
    "right" : "renderbufferStorageMultisample(RENDERBUFFER, numSamples,\n                                         stencilIndex, fboWidth, fboHeight);",
    "info" : "ExpressionStatement[26376-26509]:ExpressionStatement[27091-27224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26525-26646]:Block[27240-27361]"
  }, {
    "left" : "renderbufferStorage(RENDERBUFFER, stencilIndex,\n                              fboWidth, fboHeight);",
    "right" : "renderbufferStorage(RENDERBUFFER, stencilIndex,\n                              fboWidth, fboHeight);",
    "info" : "ExpressionStatement[26537-26636]:ExpressionStatement[27252-27351]"
  }, {
    "left" : "framebufferRenderbuffer(FRAMEBUFFER, STENCIL_ATTACHMENT,\n                                RENDERBUFFER, glStencil.get(0));",
    "right" : "framebufferRenderbuffer(FRAMEBUFFER, STENCIL_ATTACHMENT,\n                                RENDERBUFFER, glStencil.get(0));",
    "info" : "ExpressionStatement[26655-26776]:ExpressionStatement[27370-27491]"
  }, {
    "left" : "validateFramebuffer();",
    "right" : "validateFramebuffer();",
    "info" : "ExpressionStatement[26796-26818]:ExpressionStatement[24277-24299]"
  }, {
    "left" : "clearDepth(1);",
    "right" : "clearDepth(1);",
    "info" : "ExpressionStatement[26850-26864]:ExpressionStatement[24331-24345]"
  }, {
    "left" : "clearStencil(0);",
    "right" : "clearStencil(0);",
    "info" : "ExpressionStatement[26869-26885]:ExpressionStatement[24350-24366]"
  }, {
    "left" : "int argb = pg.backgroundColor;",
    "right" : "int argb = pg.backgroundColor;",
    "info" : "VariableDeclarationStatement[26890-26920]:VariableDeclarationStatement[24371-24401]"
  }, {
    "left" : "float a = ((argb >> 24) & 0xff) / 255.0f;",
    "right" : "float a = ((argb >> 24) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[26925-26966]:VariableDeclarationStatement[24406-24447]"
  }, {
    "left" : "float r = ((argb >> 16) & 0xff) / 255.0f;",
    "right" : "float r = ((argb >> 16) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[26971-27012]:VariableDeclarationStatement[24452-24493]"
  }, {
    "left" : "float g = ((argb >> 8) & 0xff) / 255.0f;",
    "right" : "float g = ((argb >> 8) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[27017-27057]:VariableDeclarationStatement[24498-24538]"
  }, {
    "left" : "float b = ((argb) & 0xff) / 255.0f;",
    "right" : "float b = ((argb) & 0xff) / 255.0f;",
    "info" : "VariableDeclarationStatement[27062-27097]:VariableDeclarationStatement[24543-24578]"
  }, {
    "left" : "clearColor(r, g, b, a);",
    "right" : "clearColor(r, g, b, a);",
    "info" : "ExpressionStatement[27102-27125]:ExpressionStatement[24583-24606]"
  }, {
    "left" : "clear(DEPTH_BUFFER_BIT | STENCIL_BUFFER_BIT | COLOR_BUFFER_BIT);",
    "right" : "clear(DEPTH_BUFFER_BIT | STENCIL_BUFFER_BIT | COLOR_BUFFER_BIT);",
    "info" : "ExpressionStatement[27130-27194]:ExpressionStatement[24611-24675]"
  }, {
    "left" : "bindFramebufferImpl(FRAMEBUFFER, 0);",
    "right" : "bindFramebufferImpl(FRAMEBUFFER, 0);",
    "info" : "ExpressionStatement[27200-27236]:ExpressionStatement[24681-24717]"
  }, {
    "left" : "fboLayerCreated = true;",
    "right" : "fboLayerCreated = true;",
    "info" : "ExpressionStatement[27242-27265]:ExpressionStatement[24723-24746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27397-27417]:Block[27637-27657]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[27403-27413]:ReturnStatement[27643-27653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27456-27483]:Block[27696-27723]"
  }, {
    "left" : "return glContext;",
    "right" : "return glContext;",
    "info" : "ReturnStatement[27462-27479]:ReturnStatement[27702-27719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27622-27673]:Block[27862-27913]"
  }, {
    "left" : "return other == -1 || other == glContext;",
    "right" : "return other == -1 || other == glContext;",
    "info" : "ReturnStatement[27628-27669]:ReturnStatement[27868-27909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27721-27878]:Block[27961-28118]"
  }, {
    "left" : "if (target == TEXTURE_2D)",
    "right" : "if (target == TEXTURE_2D)",
    "info" : "IfStatement[27727-27874]:IfStatement[27967-28114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27753-27794]:Block[27993-28034]"
  }, {
    "left" : "texturingTargets[0] = true;",
    "right" : "texturingTargets[0] = true;",
    "info" : "ExpressionStatement[27761-27788]:ExpressionStatement[28001-28028]"
  }, {
    "left" : "if (target == TEXTURE_RECTANGLE)",
    "right" : "if (target == TEXTURE_RECTANGLE)",
    "info" : "IfStatement[27800-27874]:IfStatement[28040-28114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27833-27874]:Block[28073-28114]"
  }, {
    "left" : "texturingTargets[1] = true;",
    "right" : "texturingTargets[1] = true;",
    "info" : "ExpressionStatement[27841-27868]:ExpressionStatement[28081-28108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27927-28086]:Block[28167-28326]"
  }, {
    "left" : "if (target == TEXTURE_2D)",
    "right" : "if (target == TEXTURE_2D)",
    "info" : "IfStatement[27933-28082]:IfStatement[28173-28322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27959-28001]:Block[28199-28241]"
  }, {
    "left" : "texturingTargets[0] = false;",
    "right" : "texturingTargets[0] = false;",
    "info" : "ExpressionStatement[27967-27995]:ExpressionStatement[28207-28235]"
  }, {
    "left" : "if (target == TEXTURE_RECTANGLE)",
    "right" : "if (target == TEXTURE_RECTANGLE)",
    "info" : "IfStatement[28007-28082]:IfStatement[28247-28322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28040-28082]:Block[28280-28322]"
  }, {
    "left" : "texturingTargets[1] = false;",
    "right" : "texturingTargets[1] = false;",
    "info" : "ExpressionStatement[28048-28076]:ExpressionStatement[28288-28316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28140-28330]:Block[28380-28570]"
  }, {
    "left" : "if (target == TEXTURE_2D)",
    "right" : "if (target == TEXTURE_2D)",
    "info" : "IfStatement[28146-28326]:IfStatement[28386-28566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28172-28213]:Block[28412-28453]"
  }, {
    "left" : "return texturingTargets[0];",
    "right" : "return texturingTargets[0];",
    "info" : "ReturnStatement[28180-28207]:ReturnStatement[28420-28447]"
  }, {
    "left" : "if (target == TEXTURE_RECTANGLE)",
    "right" : "if (target == TEXTURE_RECTANGLE)",
    "info" : "IfStatement[28219-28326]:IfStatement[28459-28566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28252-28293]:Block[28492-28533]"
  }, {
    "left" : "return texturingTargets[1];",
    "right" : "return texturingTargets[1];",
    "info" : "ReturnStatement[28260-28287]:ReturnStatement[28500-28527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28299-28326]:Block[28539-28566]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28307-28320]:ReturnStatement[28547-28560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28388-28660]:Block[28628-28900]"
  }, {
    "left" : "if (boundTextures == null)",
    "right" : "if (boundTextures == null)",
    "info" : "IfStatement[28394-28434]:IfStatement[28634-28674]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28421-28434]:ReturnStatement[28661-28674]"
  }, {
    "left" : "if (target == TEXTURE_2D)",
    "right" : "if (target == TEXTURE_2D)",
    "info" : "IfStatement[28440-28656]:IfStatement[28680-28896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28466-28525]:Block[28706-28765]"
  }, {
    "left" : "return boundTextures[activeTexUnit][0] == id;",
    "right" : "return boundTextures[activeTexUnit][0] == id;",
    "info" : "ReturnStatement[28474-28519]:ReturnStatement[28714-28759]"
  }, {
    "left" : "if (target == TEXTURE_RECTANGLE)",
    "right" : "if (target == TEXTURE_RECTANGLE)",
    "info" : "IfStatement[28531-28656]:IfStatement[28771-28896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28564-28623]:Block[28804-28863]"
  }, {
    "left" : "return boundTextures[activeTexUnit][1] == id;",
    "right" : "return boundTextures[activeTexUnit][1] == id;",
    "info" : "ReturnStatement[28572-28617]:ReturnStatement[28812-28857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28629-28656]:Block[28869-28896]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28637-28650]:ReturnStatement[28877-28890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28739-28795]:Block[28979-29035]"
  }, {
    "left" : "initTexture(target, format, width, height, 0);",
    "right" : "initTexture(target, format, width, height, 0);",
    "info" : "ExpressionStatement[28745-28791]:ExpressionStatement[28985-29031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28917-29383]:Block[29157-29623]"
  }, {
    "left" : "int[] glcolor = new int[16 * 16];",
    "right" : "int[] glcolor = new int[16 * 16];",
    "info" : "VariableDeclarationStatement[28923-28956]:VariableDeclarationStatement[29163-29196]"
  }, {
    "left" : "Arrays.fill(glcolor, javaToNativeARGB(initColor));",
    "right" : "Arrays.fill(glcolor, javaToNativeARGB(initColor));",
    "info" : "ExpressionStatement[28961-29011]:ExpressionStatement[29201-29251]"
  }, {
    "left" : "IntBuffer texels = allocateDirectIntBuffer(16 * 16);",
    "right" : "IntBuffer texels = allocateDirectIntBuffer(16 * 16);",
    "info" : "VariableDeclarationStatement[29016-29068]:VariableDeclarationStatement[29256-29308]"
  }, {
    "left" : "texels.put(glcolor);",
    "right" : "texels.put(glcolor);",
    "info" : "ExpressionStatement[29073-29093]:ExpressionStatement[29313-29333]"
  }, {
    "left" : "texels.rewind();",
    "right" : "texels.rewind();",
    "info" : "ExpressionStatement[29098-29114]:ExpressionStatement[29338-29354]"
  }, {
    "left" : "for (int y = 0; y < height; y += 16)",
    "right" : "for (int y = 0; y < height; y += 16)",
    "info" : "ForStatement[29119-29379]:ForStatement[29359-29619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29156-29379]:Block[29396-29619]"
  }, {
    "left" : "int h = PApplet.min(16, height - y);",
    "right" : "int h = PApplet.min(16, height - y);",
    "info" : "VariableDeclarationStatement[29164-29200]:VariableDeclarationStatement[29404-29440]"
  }, {
    "left" : "for (int x = 0; x < width; x += 16)",
    "right" : "for (int x = 0; x < width; x += 16)",
    "info" : "ForStatement[29207-29373]:ForStatement[29447-29613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29243-29373]:Block[29483-29613]"
  }, {
    "left" : "int w = PApplet.min(16, width - x);",
    "right" : "int w = PApplet.min(16, width - x);",
    "info" : "VariableDeclarationStatement[29253-29288]:VariableDeclarationStatement[29493-29528]"
  }, {
    "left" : "texSubImage2D(target, 0, x, y, w, h, format, UNSIGNED_BYTE, texels);",
    "right" : "texSubImage2D(target, 0, x, y, w, h, format, UNSIGNED_BYTE, texels);",
    "info" : "ExpressionStatement[29297-29365]:ExpressionStatement[29537-29605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29522-29603]:Block[29762-29843]"
  }, {
    "left" : "copyToTexture(target, format, id, x, y, w, h, IntBuffer.wrap(buffer));",
    "right" : "copyToTexture(target, format, id, x, y, w, h, IntBuffer.wrap(buffer));",
    "info" : "ExpressionStatement[29528-29598]:ExpressionStatement[29768-29838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29745-30102]:Block[29985-30342]"
  }, {
    "left" : "activeTexture(TEXTURE0);",
    "right" : "activeTexture(TEXTURE0);",
    "info" : "ExpressionStatement[29751-29775]:ExpressionStatement[29991-30015]"
  }, {
    "left" : "boolean enabledTex = false;",
    "right" : "boolean enabledTex = false;",
    "info" : "VariableDeclarationStatement[29780-29807]:VariableDeclarationStatement[30020-30047]"
  }, {
    "left" : "if (!texturingIsEnabled(target))",
    "right" : "if (!texturingIsEnabled(target))",
    "info" : "IfStatement[29812-29908]:IfStatement[30052-30148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29845-29908]:Block[30085-30148]"
  }, {
    "left" : "enableTexturing(target);",
    "right" : "enableTexturing(target);",
    "info" : "ExpressionStatement[29853-29877]:ExpressionStatement[30093-30117]"
  }, {
    "left" : "enabledTex = true;",
    "right" : "enabledTex = true;",
    "info" : "ExpressionStatement[29884-29902]:ExpressionStatement[30124-30142]"
  }, {
    "left" : "bindTexture(target, id);",
    "right" : "bindTexture(target, id);",
    "info" : "ExpressionStatement[29913-29937]:ExpressionStatement[30153-30177]"
  }, {
    "left" : "texSubImage2D(target, 0, x, y, w, h, format, UNSIGNED_BYTE, buffer);",
    "right" : "texSubImage2D(target, 0, x, y, w, h, format, UNSIGNED_BYTE, buffer);",
    "info" : "ExpressionStatement[29942-30010]:ExpressionStatement[30182-30250]"
  }, {
    "left" : "bindTexture(target, 0);",
    "right" : "bindTexture(target, 0);",
    "info" : "ExpressionStatement[30015-30038]:ExpressionStatement[30255-30278]"
  }, {
    "left" : "if (enabledTex)",
    "right" : "if (enabledTex)",
    "info" : "IfStatement[30043-30098]:IfStatement[30283-30338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30059-30098]:Block[30299-30338]"
  }, {
    "left" : "disableTexturing(target);",
    "right" : "disableTexturing(target);",
    "info" : "ExpressionStatement[30067-30092]:ExpressionStatement[30307-30332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30321-30471]:Block[30561-30711]"
  }, {
    "left" : "drawTexture(target, id, width, height,\n                0, 0, width, height,\n                X0, Y0, X1, Y1,\n                X0, Y0, X1, Y1);",
    "right" : "drawTexture(target, id, width, height,\n                0, 0, width, height,\n                X0, Y0, X1, Y1,\n                X0, Y0, X1, Y1);",
    "info" : "ExpressionStatement[30327-30467]:ExpressionStatement[30567-30707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30836-31291]:Block[31076-31531]"
  }, {
    "left" : "if (target == TEXTURE_2D)",
    "right" : "if (target == TEXTURE_2D)",
    "info" : "IfStatement[30842-31287]:IfStatement[31082-31527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30868-31054]:Block[31108-31294]"
  }, {
    "left" : "drawTexture2D(id, texW, texH,\n                    viewX, viewY, scrW, scrH,\n                    texX0, texY0, texX1, texY1,\n                    scrX0, scrY0, scrX1, scrY1);",
    "right" : "drawTexture2D(id, texW, texH,\n                    viewX, viewY, scrW, scrH,\n                    texX0, texY0, texX1, texY1,\n                    scrX0, scrY0, scrX1, scrY1);",
    "info" : "ExpressionStatement[30876-31048]:ExpressionStatement[31116-31288]"
  }, {
    "left" : "if (target == TEXTURE_RECTANGLE)",
    "right" : "if (target == TEXTURE_RECTANGLE)",
    "info" : "IfStatement[31060-31287]:IfStatement[31300-31527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31093-31287]:Block[31333-31527]"
  }, {
    "left" : "drawTextureRect(id, texW, texH,\n                      viewX, viewY, scrW, scrH,\n                      texX0, texY0, texX1, texY1,\n                      scrX0, scrY0, scrX1, scrY1);",
    "right" : "drawTextureRect(id, texW, texH,\n                      viewX, viewY, scrW, scrH,\n                      texX0, texY0, texX1, texY1,\n                      scrX0, scrY0, scrX1, scrY1);",
    "info" : "ExpressionStatement[31101-31281]:ExpressionStatement[31341-31521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31328-32619]:Block[31568-32859]"
  }, {
    "left" : "PGL ppgl = primaryPGL ? this : pg.getPrimaryPGL();",
    "right" : "PGL ppgl = primaryPGL ? this : pg.getPrimaryPGL();",
    "info" : "VariableDeclarationStatement[31334-31384]:VariableDeclarationStatement[31574-31624]"
  }, {
    "left" : "if (!ppgl.loadedTex2DShader || ppgl.tex2DShaderContext != ppgl.glContext)",
    "right" : "if (!ppgl.loadedTex2DShader || ppgl.tex2DShaderContext != ppgl.glContext)",
    "info" : "IfStatement[31390-32502]:IfStatement[31630-32742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31464-32502]:Block[31704-32742]"
  }, {
    "left" : "String vertSource = PApplet.join(texVertShaderSource, \"\\n\");",
    "right" : "String vertSource = PApplet.join(texVertShaderSource, \"\\n\");",
    "info" : "VariableDeclarationStatement[31472-31532]:VariableDeclarationStatement[31712-31772]"
  }, {
    "left" : "String fragSource = PApplet.join(tex2DFragShaderSource, \"\\n\");",
    "right" : "String fragSource = PApplet.join(tex2DFragShaderSource, \"\\n\");",
    "info" : "VariableDeclarationStatement[31539-31601]:VariableDeclarationStatement[31779-31841]"
  }, {
    "left" : "ppgl.tex2DVertShader = createShader(VERTEX_SHADER, vertSource);",
    "right" : "ppgl.tex2DVertShader = createShader(VERTEX_SHADER, vertSource);",
    "info" : "ExpressionStatement[31608-31671]:ExpressionStatement[31848-31911]"
  }, {
    "left" : "ppgl.tex2DFragShader = createShader(FRAGMENT_SHADER, fragSource);",
    "right" : "ppgl.tex2DFragShader = createShader(FRAGMENT_SHADER, fragSource);",
    "info" : "ExpressionStatement[31678-31743]:ExpressionStatement[31918-31983]"
  }, {
    "left" : "if (0 < ppgl.tex2DVertShader && 0 < ppgl.tex2DFragShader)",
    "right" : "if (0 < ppgl.tex2DVertShader && 0 < ppgl.tex2DFragShader)",
    "info" : "IfStatement[31750-31910]:IfStatement[31990-32150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31808-31910]:Block[32048-32150]"
  }, {
    "left" : "ppgl.tex2DShaderProgram = createProgram(ppgl.tex2DVertShader, ppgl.tex2DFragShader);",
    "right" : "ppgl.tex2DShaderProgram = createProgram(ppgl.tex2DVertShader, ppgl.tex2DFragShader);",
    "info" : "ExpressionStatement[31818-31902]:ExpressionStatement[32058-32142]"
  }, {
    "left" : "if (0 < ppgl.tex2DShaderProgram)",
    "right" : "if (0 < ppgl.tex2DShaderProgram)",
    "info" : "IfStatement[31917-32215]:IfStatement[32157-32455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31950-32215]:Block[32190-32455]"
  }, {
    "left" : "ppgl.tex2DVertLoc = getAttribLocation(ppgl.tex2DShaderProgram, \"position\");",
    "right" : "ppgl.tex2DVertLoc = getAttribLocation(ppgl.tex2DShaderProgram, \"position\");",
    "info" : "ExpressionStatement[31960-32035]:ExpressionStatement[32200-32275]"
  }, {
    "left" : "ppgl.tex2DTCoordLoc = getAttribLocation(ppgl.tex2DShaderProgram, \"texCoord\");",
    "right" : "ppgl.tex2DTCoordLoc = getAttribLocation(ppgl.tex2DShaderProgram, \"texCoord\");",
    "info" : "ExpressionStatement[32044-32121]:ExpressionStatement[32284-32361]"
  }, {
    "left" : "ppgl.tex2DSamplerLoc = getUniformLocation(ppgl.tex2DShaderProgram, \"texMap\");",
    "right" : "ppgl.tex2DSamplerLoc = getUniformLocation(ppgl.tex2DShaderProgram, \"texMap\");",
    "info" : "ExpressionStatement[32130-32207]:ExpressionStatement[32370-32447]"
  }, {
    "left" : "ppgl.loadedTex2DShader = true;",
    "right" : "ppgl.loadedTex2DShader = true;",
    "info" : "ExpressionStatement[32222-32252]:ExpressionStatement[32462-32492]"
  }, {
    "left" : "ppgl.tex2DShaderContext = ppgl.glContext;",
    "right" : "ppgl.tex2DShaderContext = ppgl.glContext;",
    "info" : "ExpressionStatement[32259-32300]:ExpressionStatement[32499-32540]"
  }, {
    "left" : "genBuffers(1, intBuffer);",
    "right" : "genBuffers(1, intBuffer);",
    "info" : "ExpressionStatement[32308-32333]:ExpressionStatement[32548-32573]"
  }, {
    "left" : "ppgl.tex2DGeoVBO = intBuffer.get(0);",
    "right" : "ppgl.tex2DGeoVBO = intBuffer.get(0);",
    "info" : "ExpressionStatement[32340-32376]:ExpressionStatement[32580-32616]"
  }, {
    "left" : "bindBuffer(ARRAY_BUFFER, ppgl.tex2DGeoVBO);",
    "right" : "bindBuffer(ARRAY_BUFFER, ppgl.tex2DGeoVBO);",
    "info" : "ExpressionStatement[32383-32426]:ExpressionStatement[32623-32666]"
  }, {
    "left" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, null, STATIC_DRAW);",
    "right" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, null, STATIC_DRAW);",
    "info" : "ExpressionStatement[32433-32496]:ExpressionStatement[32673-32736]"
  }, {
    "left" : "if (texData == null)",
    "right" : "if (texData == null)",
    "info" : "IfStatement[32508-32597]:IfStatement[32748-32837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32529-32597]:Block[32769-32837]"
  }, {
    "left" : "texData = allocateDirectFloatBuffer(texCoords.length);",
    "right" : "texData = allocateDirectFloatBuffer(texCoords.length);",
    "info" : "ExpressionStatement[32537-32591]:ExpressionStatement[32777-32831]"
  }, {
    "left" : "return ppgl;",
    "right" : "return ppgl;",
    "info" : "ReturnStatement[32603-32615]:ReturnStatement[32843-32855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32904-35916]:Block[33144-36156]"
  }, {
    "left" : "PGL ppgl = initTex2DShader();",
    "right" : "PGL ppgl = initTex2DShader();",
    "info" : "VariableDeclarationStatement[32910-32939]:VariableDeclarationStatement[33150-33179]"
  }, {
    "left" : "if (0 < ppgl.tex2DShaderProgram)",
    "right" : "if (0 < ppgl.tex2DShaderProgram)",
    "info" : "IfStatement[32945-35912]:IfStatement[33185-36152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32978-35912]:Block[33218-36152]"
  }, {
    "left" : "boolean depthTest = getDepthTest();",
    "right" : "boolean depthTest = getDepthTest();",
    "info" : "VariableDeclarationStatement[33042-33077]:VariableDeclarationStatement[33282-33317]"
  }, {
    "left" : "disable(DEPTH_TEST);",
    "right" : "disable(DEPTH_TEST);",
    "info" : "ExpressionStatement[33084-33104]:ExpressionStatement[33324-33344]"
  }, {
    "left" : "boolean depthMask = getDepthWriteMask();",
    "right" : "boolean depthMask = getDepthWriteMask();",
    "info" : "VariableDeclarationStatement[33321-33361]:VariableDeclarationStatement[33561-33601]"
  }, {
    "left" : "depthMask(false);",
    "right" : "depthMask(false);",
    "info" : "ExpressionStatement[33368-33385]:ExpressionStatement[33608-33625]"
  }, {
    "left" : "viewBuffer.rewind();",
    "right" : "viewBuffer.rewind();",
    "info" : "ExpressionStatement[33471-33491]:ExpressionStatement[33711-33731]"
  }, {
    "left" : "getIntegerv(VIEWPORT, viewBuffer);",
    "right" : "getIntegerv(VIEWPORT, viewBuffer);",
    "info" : "ExpressionStatement[33498-33532]:ExpressionStatement[33738-33772]"
  }, {
    "left" : "viewport(viewX, viewY, scrW, scrH);",
    "right" : "viewport(viewX, viewY, scrW, scrH);",
    "info" : "ExpressionStatement[33539-33574]:ExpressionStatement[33779-33814]"
  }, {
    "left" : "useProgram(ppgl.tex2DShaderProgram);",
    "right" : "useProgram(ppgl.tex2DShaderProgram);",
    "info" : "ExpressionStatement[33582-33618]:ExpressionStatement[33822-33858]"
  }, {
    "left" : "enableVertexAttribArray(ppgl.tex2DVertLoc);",
    "right" : "enableVertexAttribArray(ppgl.tex2DVertLoc);",
    "info" : "ExpressionStatement[33626-33669]:ExpressionStatement[33866-33909]"
  }, {
    "left" : "enableVertexAttribArray(ppgl.tex2DTCoordLoc);",
    "right" : "enableVertexAttribArray(ppgl.tex2DTCoordLoc);",
    "info" : "ExpressionStatement[33676-33721]:ExpressionStatement[33916-33961]"
  }, {
    "left" : "texCoords[ 0] = 2 * (float)scrX0 / scrW - 1;",
    "right" : "texCoords[ 0] = 2 * (float)scrX0 / scrW - 1;",
    "info" : "ExpressionStatement[33855-33899]:ExpressionStatement[34095-34139]"
  }, {
    "left" : "texCoords[ 1] = 2 * (float)scrY0 / scrH - 1;",
    "right" : "texCoords[ 1] = 2 * (float)scrY0 / scrH - 1;",
    "info" : "ExpressionStatement[33906-33950]:ExpressionStatement[34146-34190]"
  }, {
    "left" : "texCoords[ 2] = (float)texX0 / texW;",
    "right" : "texCoords[ 2] = (float)texX0 / texW;",
    "info" : "ExpressionStatement[33957-33993]:ExpressionStatement[34197-34233]"
  }, {
    "left" : "texCoords[ 3] = (float)texY0 / texH;",
    "right" : "texCoords[ 3] = (float)texY0 / texH;",
    "info" : "ExpressionStatement[34000-34036]:ExpressionStatement[34240-34276]"
  }, {
    "left" : "texCoords[ 4] = 2 * (float)scrX1 / scrW - 1;",
    "right" : "texCoords[ 4] = 2 * (float)scrX1 / scrW - 1;",
    "info" : "ExpressionStatement[34061-34105]:ExpressionStatement[34301-34345]"
  }, {
    "left" : "texCoords[ 5] = 2 * (float)scrY0 / scrH - 1;",
    "right" : "texCoords[ 5] = 2 * (float)scrY0 / scrH - 1;",
    "info" : "ExpressionStatement[34112-34156]:ExpressionStatement[34352-34396]"
  }, {
    "left" : "texCoords[ 6] = (float)texX1 / texW;",
    "right" : "texCoords[ 6] = (float)texX1 / texW;",
    "info" : "ExpressionStatement[34163-34199]:ExpressionStatement[34403-34439]"
  }, {
    "left" : "texCoords[ 7] = (float)texY0 / texH;",
    "right" : "texCoords[ 7] = (float)texY0 / texH;",
    "info" : "ExpressionStatement[34206-34242]:ExpressionStatement[34446-34482]"
  }, {
    "left" : "texCoords[ 8] = 2 * (float)scrX0 / scrW - 1;",
    "right" : "texCoords[ 8] = 2 * (float)scrX0 / scrW - 1;",
    "info" : "ExpressionStatement[34267-34311]:ExpressionStatement[34507-34551]"
  }, {
    "left" : "texCoords[ 9] = 2 * (float)scrY1 / scrH - 1;",
    "right" : "texCoords[ 9] = 2 * (float)scrY1 / scrH - 1;",
    "info" : "ExpressionStatement[34318-34362]:ExpressionStatement[34558-34602]"
  }, {
    "left" : "texCoords[10] = (float)texX0 / texW;",
    "right" : "texCoords[10] = (float)texX0 / texW;",
    "info" : "ExpressionStatement[34369-34405]:ExpressionStatement[34609-34645]"
  }, {
    "left" : "texCoords[11] = (float)texY1 / texH;",
    "right" : "texCoords[11] = (float)texY1 / texH;",
    "info" : "ExpressionStatement[34412-34448]:ExpressionStatement[34652-34688]"
  }, {
    "left" : "texCoords[12] = 2 * (float)scrX1 / scrW - 1;",
    "right" : "texCoords[12] = 2 * (float)scrX1 / scrW - 1;",
    "info" : "ExpressionStatement[34473-34517]:ExpressionStatement[34713-34757]"
  }, {
    "left" : "texCoords[13] = 2 * (float)scrY1 / scrH - 1;",
    "right" : "texCoords[13] = 2 * (float)scrY1 / scrH - 1;",
    "info" : "ExpressionStatement[34524-34568]:ExpressionStatement[34764-34808]"
  }, {
    "left" : "texCoords[14] = (float)texX1 / texW;",
    "right" : "texCoords[14] = (float)texX1 / texW;",
    "info" : "ExpressionStatement[34575-34611]:ExpressionStatement[34815-34851]"
  }, {
    "left" : "texCoords[15] = (float)texY1 / texH;",
    "right" : "texCoords[15] = (float)texY1 / texH;",
    "info" : "ExpressionStatement[34618-34654]:ExpressionStatement[34858-34894]"
  }, {
    "left" : "texData.rewind();",
    "right" : "texData.rewind();",
    "info" : "ExpressionStatement[34662-34679]:ExpressionStatement[34902-34919]"
  }, {
    "left" : "texData.put(texCoords);",
    "right" : "texData.put(texCoords);",
    "info" : "ExpressionStatement[34686-34709]:ExpressionStatement[34926-34949]"
  }, {
    "left" : "activeTexture(TEXTURE0);",
    "right" : "activeTexture(TEXTURE0);",
    "info" : "ExpressionStatement[34717-34741]:ExpressionStatement[34957-34981]"
  }, {
    "left" : "boolean enabledTex = false;",
    "right" : "boolean enabledTex = false;",
    "info" : "VariableDeclarationStatement[34748-34775]:VariableDeclarationStatement[34988-35015]"
  }, {
    "left" : "if (!texturingIsEnabled(TEXTURE_2D))",
    "right" : "if (!texturingIsEnabled(TEXTURE_2D))",
    "info" : "IfStatement[34782-34892]:IfStatement[35022-35132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34819-34892]:Block[35059-35132]"
  }, {
    "left" : "enableTexturing(TEXTURE_2D);",
    "right" : "enableTexturing(TEXTURE_2D);",
    "info" : "ExpressionStatement[34829-34857]:ExpressionStatement[35069-35097]"
  }, {
    "left" : "enabledTex = true;",
    "right" : "enabledTex = true;",
    "info" : "ExpressionStatement[34866-34884]:ExpressionStatement[35106-35124]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, id);",
    "right" : "bindTexture(TEXTURE_2D, id);",
    "info" : "ExpressionStatement[34899-34927]:ExpressionStatement[35139-35167]"
  }, {
    "left" : "uniform1i(ppgl.tex2DSamplerLoc, 0);",
    "right" : "uniform1i(ppgl.tex2DSamplerLoc, 0);",
    "info" : "ExpressionStatement[34934-34969]:ExpressionStatement[35174-35209]"
  }, {
    "left" : "texData.position(0);",
    "right" : "texData.position(0);",
    "info" : "ExpressionStatement[34977-34997]:ExpressionStatement[35217-35237]"
  }, {
    "left" : "bindBuffer(ARRAY_BUFFER, ppgl.tex2DGeoVBO);",
    "right" : "bindBuffer(ARRAY_BUFFER, ppgl.tex2DGeoVBO);",
    "info" : "ExpressionStatement[35004-35047]:ExpressionStatement[35244-35287]"
  }, {
    "left" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, texData, STATIC_DRAW);",
    "right" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, texData, STATIC_DRAW);",
    "info" : "ExpressionStatement[35054-35120]:ExpressionStatement[35294-35360]"
  }, {
    "left" : "vertexAttribPointer(ppgl.tex2DVertLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 0);",
    "right" : "vertexAttribPointer(ppgl.tex2DVertLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 0);",
    "info" : "ExpressionStatement[35128-35205]:ExpressionStatement[35368-35445]"
  }, {
    "left" : "vertexAttribPointer(ppgl.tex2DTCoordLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 2 * SIZEOF_FLOAT);",
    "right" : "vertexAttribPointer(ppgl.tex2DTCoordLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 2 * SIZEOF_FLOAT);",
    "info" : "ExpressionStatement[35212-35306]:ExpressionStatement[35452-35546]"
  }, {
    "left" : "drawArrays(TRIANGLE_STRIP, 0, 4);",
    "right" : "drawArrays(TRIANGLE_STRIP, 0, 4);",
    "info" : "ExpressionStatement[35314-35347]:ExpressionStatement[35554-35587]"
  }, {
    "left" : "bindBuffer(ARRAY_BUFFER, 0);",
    "right" : "bindBuffer(ARRAY_BUFFER, 0);",
    "info" : "ExpressionStatement[35355-35383]:ExpressionStatement[35595-35623]"
  }, {
    "left" : "bindTexture(TEXTURE_2D, 0);",
    "right" : "bindTexture(TEXTURE_2D, 0);",
    "info" : "ExpressionStatement[35442-35469]:ExpressionStatement[35682-35709]"
  }, {
    "left" : "if (enabledTex)",
    "right" : "if (enabledTex)",
    "info" : "IfStatement[35476-35539]:IfStatement[35716-35779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35492-35539]:Block[35732-35779]"
  }, {
    "left" : "disableTexturing(TEXTURE_2D);",
    "right" : "disableTexturing(TEXTURE_2D);",
    "info" : "ExpressionStatement[35502-35531]:ExpressionStatement[35742-35771]"
  }, {
    "left" : "disableVertexAttribArray(ppgl.tex2DVertLoc);",
    "right" : "disableVertexAttribArray(ppgl.tex2DVertLoc);",
    "info" : "ExpressionStatement[35547-35591]:ExpressionStatement[35787-35831]"
  }, {
    "left" : "disableVertexAttribArray(ppgl.tex2DTCoordLoc);",
    "right" : "disableVertexAttribArray(ppgl.tex2DTCoordLoc);",
    "info" : "ExpressionStatement[35598-35644]:ExpressionStatement[35838-35884]"
  }, {
    "left" : "useProgram(0);",
    "right" : "useProgram(0);",
    "info" : "ExpressionStatement[35652-35666]:ExpressionStatement[35892-35906]"
  }, {
    "left" : "if (depthTest)",
    "right" : "if (depthTest)",
    "info" : "IfStatement[35674-35770]:IfStatement[35914-36010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35689-35726]:Block[35929-35966]"
  }, {
    "left" : "enable(DEPTH_TEST);",
    "right" : "enable(DEPTH_TEST);",
    "info" : "ExpressionStatement[35699-35718]:ExpressionStatement[35939-35958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35732-35770]:Block[35972-36010]"
  }, {
    "left" : "disable(DEPTH_TEST);",
    "right" : "disable(DEPTH_TEST);",
    "info" : "ExpressionStatement[35742-35762]:ExpressionStatement[35982-36002]"
  }, {
    "left" : "depthMask(depthMask);",
    "right" : "depthMask(depthMask);",
    "info" : "ExpressionStatement[35777-35798]:ExpressionStatement[36017-36038]"
  }, {
    "left" : "viewport(viewBuffer.get(0), viewBuffer.get(1),\n               viewBuffer.get(2), viewBuffer.get(3));",
    "right" : "viewport(viewBuffer.get(0), viewBuffer.get(1),\n               viewBuffer.get(2), viewBuffer.get(3));",
    "info" : "ExpressionStatement[35806-35906]:ExpressionStatement[36046-36146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35955-37243]:Block[36195-37483]"
  }, {
    "left" : "PGL ppgl = primaryPGL ? this : pg.getPrimaryPGL();",
    "right" : "PGL ppgl = primaryPGL ? this : pg.getPrimaryPGL();",
    "info" : "VariableDeclarationStatement[35961-36011]:VariableDeclarationStatement[36201-36251]"
  }, {
    "left" : "if (!ppgl.loadedTexRectShader || ppgl.texRectShaderContext != ppgl.glContext)",
    "right" : "if (!ppgl.loadedTexRectShader || ppgl.texRectShaderContext != ppgl.glContext)",
    "info" : "IfStatement[36017-37221]:IfStatement[36257-37461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36095-37221]:Block[36335-37461]"
  }, {
    "left" : "String vertSource = PApplet.join(texVertShaderSource, \"\\n\");",
    "right" : "String vertSource = PApplet.join(texVertShaderSource, \"\\n\");",
    "info" : "VariableDeclarationStatement[36103-36163]:VariableDeclarationStatement[36343-36403]"
  }, {
    "left" : "String fragSource = PApplet.join(texRectFragShaderSource, \"\\n\");",
    "right" : "String fragSource = PApplet.join(texRectFragShaderSource, \"\\n\");",
    "info" : "VariableDeclarationStatement[36170-36234]:VariableDeclarationStatement[36410-36474]"
  }, {
    "left" : "ppgl.texRectVertShader = createShader(VERTEX_SHADER, vertSource);",
    "right" : "ppgl.texRectVertShader = createShader(VERTEX_SHADER, vertSource);",
    "info" : "ExpressionStatement[36241-36306]:ExpressionStatement[36481-36546]"
  }, {
    "left" : "ppgl.texRectFragShader = createShader(FRAGMENT_SHADER, fragSource);",
    "right" : "ppgl.texRectFragShader = createShader(FRAGMENT_SHADER, fragSource);",
    "info" : "ExpressionStatement[36313-36380]:ExpressionStatement[36553-36620]"
  }, {
    "left" : "if (0 < ppgl.texRectVertShader && 0 < ppgl.texRectFragShader)",
    "right" : "if (0 < ppgl.texRectVertShader && 0 < ppgl.texRectFragShader)",
    "info" : "IfStatement[36387-36607]:IfStatement[36627-36847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36449-36607]:Block[36689-36847]"
  }, {
    "left" : "ppgl.texRectShaderProgram = createProgram(ppgl.texRectVertShader,\n                                                  ppgl.texRectFragShader);",
    "right" : "ppgl.texRectShaderProgram = createProgram(ppgl.texRectVertShader,\n                                                  ppgl.texRectFragShader);",
    "info" : "ExpressionStatement[36459-36599]:ExpressionStatement[36699-36839]"
  }, {
    "left" : "if (0 < ppgl.texRectShaderProgram)",
    "right" : "if (0 < ppgl.texRectShaderProgram)",
    "info" : "IfStatement[36614-36926]:IfStatement[36854-37166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36649-36926]:Block[36889-37166]"
  }, {
    "left" : "ppgl.texRectVertLoc = getAttribLocation(ppgl.texRectShaderProgram, \"position\");",
    "right" : "ppgl.texRectVertLoc = getAttribLocation(ppgl.texRectShaderProgram, \"position\");",
    "info" : "ExpressionStatement[36659-36738]:ExpressionStatement[36899-36978]"
  }, {
    "left" : "ppgl.texRectTCoordLoc = getAttribLocation(ppgl.texRectShaderProgram, \"texCoord\");",
    "right" : "ppgl.texRectTCoordLoc = getAttribLocation(ppgl.texRectShaderProgram, \"texCoord\");",
    "info" : "ExpressionStatement[36747-36828]:ExpressionStatement[36987-37068]"
  }, {
    "left" : "ppgl.texRectSamplerLoc = getUniformLocation(ppgl.texRectShaderProgram, \"texMap\");",
    "right" : "ppgl.texRectSamplerLoc = getUniformLocation(ppgl.texRectShaderProgram, \"texMap\");",
    "info" : "ExpressionStatement[36837-36918]:ExpressionStatement[37077-37158]"
  }, {
    "left" : "ppgl.loadedTexRectShader = true;",
    "right" : "ppgl.loadedTexRectShader = true;",
    "info" : "ExpressionStatement[36933-36965]:ExpressionStatement[37173-37205]"
  }, {
    "left" : "ppgl.texRectShaderContext = ppgl.glContext;",
    "right" : "ppgl.texRectShaderContext = ppgl.glContext;",
    "info" : "ExpressionStatement[36972-37015]:ExpressionStatement[37212-37255]"
  }, {
    "left" : "genBuffers(1, intBuffer);",
    "right" : "genBuffers(1, intBuffer);",
    "info" : "ExpressionStatement[37023-37048]:ExpressionStatement[37263-37288]"
  }, {
    "left" : "ppgl.texRectGeoVBO = intBuffer.get(0);",
    "right" : "ppgl.texRectGeoVBO = intBuffer.get(0);",
    "info" : "ExpressionStatement[37055-37093]:ExpressionStatement[37295-37333]"
  }, {
    "left" : "bindBuffer(ARRAY_BUFFER, ppgl.texRectGeoVBO);",
    "right" : "bindBuffer(ARRAY_BUFFER, ppgl.texRectGeoVBO);",
    "info" : "ExpressionStatement[37100-37145]:ExpressionStatement[37340-37385]"
  }, {
    "left" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, null, STATIC_DRAW);",
    "right" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, null, STATIC_DRAW);",
    "info" : "ExpressionStatement[37152-37215]:ExpressionStatement[37392-37455]"
  }, {
    "left" : "return ppgl;",
    "right" : "return ppgl;",
    "info" : "ReturnStatement[37227-37239]:ReturnStatement[37467-37479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37536-40588]:Block[37776-40828]"
  }, {
    "left" : "PGL ppgl = initTexRectShader();",
    "right" : "PGL ppgl = initTexRectShader();",
    "info" : "VariableDeclarationStatement[37542-37573]:VariableDeclarationStatement[37782-37813]"
  }, {
    "left" : "if (texData == null)",
    "right" : "if (texData == null)",
    "info" : "IfStatement[37579-37668]:IfStatement[37819-37908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37600-37668]:Block[37840-37908]"
  }, {
    "left" : "texData = allocateDirectFloatBuffer(texCoords.length);",
    "right" : "texData = allocateDirectFloatBuffer(texCoords.length);",
    "info" : "ExpressionStatement[37608-37662]:ExpressionStatement[37848-37902]"
  }, {
    "left" : "if (0 < ppgl.texRectShaderProgram)",
    "right" : "if (0 < ppgl.texRectShaderProgram)",
    "info" : "IfStatement[37674-40584]:IfStatement[37914-40824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37709-40584]:Block[37949-40824]"
  }, {
    "left" : "boolean depthTest = getDepthTest();",
    "right" : "boolean depthTest = getDepthTest();",
    "info" : "VariableDeclarationStatement[37773-37808]:VariableDeclarationStatement[38013-38048]"
  }, {
    "left" : "disable(DEPTH_TEST);",
    "right" : "disable(DEPTH_TEST);",
    "info" : "ExpressionStatement[37815-37835]:ExpressionStatement[38055-38075]"
  }, {
    "left" : "boolean depthMask = getDepthWriteMask();",
    "right" : "boolean depthMask = getDepthWriteMask();",
    "info" : "VariableDeclarationStatement[38052-38092]:VariableDeclarationStatement[38292-38332]"
  }, {
    "left" : "depthMask(false);",
    "right" : "depthMask(false);",
    "info" : "ExpressionStatement[38099-38116]:ExpressionStatement[38339-38356]"
  }, {
    "left" : "viewBuffer.rewind();",
    "right" : "viewBuffer.rewind();",
    "info" : "ExpressionStatement[38202-38222]:ExpressionStatement[38442-38462]"
  }, {
    "left" : "getIntegerv(VIEWPORT, viewBuffer);",
    "right" : "getIntegerv(VIEWPORT, viewBuffer);",
    "info" : "ExpressionStatement[38229-38263]:ExpressionStatement[38469-38503]"
  }, {
    "left" : "viewport(viewX, viewY, scrW, scrH);",
    "right" : "viewport(viewX, viewY, scrW, scrH);",
    "info" : "ExpressionStatement[38270-38305]:ExpressionStatement[38510-38545]"
  }, {
    "left" : "useProgram(ppgl.texRectShaderProgram);",
    "right" : "useProgram(ppgl.texRectShaderProgram);",
    "info" : "ExpressionStatement[38313-38351]:ExpressionStatement[38553-38591]"
  }, {
    "left" : "enableVertexAttribArray(ppgl.texRectVertLoc);",
    "right" : "enableVertexAttribArray(ppgl.texRectVertLoc);",
    "info" : "ExpressionStatement[38359-38404]:ExpressionStatement[38599-38644]"
  }, {
    "left" : "enableVertexAttribArray(ppgl.texRectTCoordLoc);",
    "right" : "enableVertexAttribArray(ppgl.texRectTCoordLoc);",
    "info" : "ExpressionStatement[38411-38458]:ExpressionStatement[38651-38698]"
  }, {
    "left" : "texCoords[ 0] = 2 * (float)scrX0 / scrW - 1;",
    "right" : "texCoords[ 0] = 2 * (float)scrX0 / scrW - 1;",
    "info" : "ExpressionStatement[38592-38636]:ExpressionStatement[38832-38876]"
  }, {
    "left" : "texCoords[ 1] = 2 * (float)scrY0 / scrH - 1;",
    "right" : "texCoords[ 1] = 2 * (float)scrY0 / scrH - 1;",
    "info" : "ExpressionStatement[38643-38687]:ExpressionStatement[38883-38927]"
  }, {
    "left" : "texCoords[ 2] = texX0;",
    "right" : "texCoords[ 2] = texX0;",
    "info" : "ExpressionStatement[38694-38716]:ExpressionStatement[38934-38956]"
  }, {
    "left" : "texCoords[ 3] = texY0;",
    "right" : "texCoords[ 3] = texY0;",
    "info" : "ExpressionStatement[38723-38745]:ExpressionStatement[38963-38985]"
  }, {
    "left" : "texCoords[ 4] = 2 * (float)scrX1 / scrW - 1;",
    "right" : "texCoords[ 4] = 2 * (float)scrX1 / scrW - 1;",
    "info" : "ExpressionStatement[38770-38814]:ExpressionStatement[39010-39054]"
  }, {
    "left" : "texCoords[ 5] = 2 * (float)scrY0 / scrH - 1;",
    "right" : "texCoords[ 5] = 2 * (float)scrY0 / scrH - 1;",
    "info" : "ExpressionStatement[38821-38865]:ExpressionStatement[39061-39105]"
  }, {
    "left" : "texCoords[ 6] = texX1;",
    "right" : "texCoords[ 6] = texX1;",
    "info" : "ExpressionStatement[38872-38894]:ExpressionStatement[39112-39134]"
  }, {
    "left" : "texCoords[ 7] = texY0;",
    "right" : "texCoords[ 7] = texY0;",
    "info" : "ExpressionStatement[38901-38923]:ExpressionStatement[39141-39163]"
  }, {
    "left" : "texCoords[ 8] = 2 * (float)scrX0 / scrW - 1;",
    "right" : "texCoords[ 8] = 2 * (float)scrX0 / scrW - 1;",
    "info" : "ExpressionStatement[38948-38992]:ExpressionStatement[39188-39232]"
  }, {
    "left" : "texCoords[ 9] = 2 * (float)scrY1 / scrH - 1;",
    "right" : "texCoords[ 9] = 2 * (float)scrY1 / scrH - 1;",
    "info" : "ExpressionStatement[38999-39043]:ExpressionStatement[39239-39283]"
  }, {
    "left" : "texCoords[10] = texX0;",
    "right" : "texCoords[10] = texX0;",
    "info" : "ExpressionStatement[39050-39072]:ExpressionStatement[39290-39312]"
  }, {
    "left" : "texCoords[11] = texY1;",
    "right" : "texCoords[11] = texY1;",
    "info" : "ExpressionStatement[39079-39101]:ExpressionStatement[39319-39341]"
  }, {
    "left" : "texCoords[12] = 2 * (float)scrX1 / scrW - 1;",
    "right" : "texCoords[12] = 2 * (float)scrX1 / scrW - 1;",
    "info" : "ExpressionStatement[39126-39170]:ExpressionStatement[39366-39410]"
  }, {
    "left" : "texCoords[13] = 2 * (float)scrY1 / scrH - 1;",
    "right" : "texCoords[13] = 2 * (float)scrY1 / scrH - 1;",
    "info" : "ExpressionStatement[39177-39221]:ExpressionStatement[39417-39461]"
  }, {
    "left" : "texCoords[14] = texX1;",
    "right" : "texCoords[14] = texX1;",
    "info" : "ExpressionStatement[39228-39250]:ExpressionStatement[39468-39490]"
  }, {
    "left" : "texCoords[15] = texY1;",
    "right" : "texCoords[15] = texY1;",
    "info" : "ExpressionStatement[39257-39279]:ExpressionStatement[39497-39519]"
  }, {
    "left" : "texData.rewind();",
    "right" : "texData.rewind();",
    "info" : "ExpressionStatement[39287-39304]:ExpressionStatement[39527-39544]"
  }, {
    "left" : "texData.put(texCoords);",
    "right" : "texData.put(texCoords);",
    "info" : "ExpressionStatement[39311-39334]:ExpressionStatement[39551-39574]"
  }, {
    "left" : "activeTexture(TEXTURE0);",
    "right" : "activeTexture(TEXTURE0);",
    "info" : "ExpressionStatement[39342-39366]:ExpressionStatement[39582-39606]"
  }, {
    "left" : "boolean enabledTex = false;",
    "right" : "boolean enabledTex = false;",
    "info" : "VariableDeclarationStatement[39373-39400]:VariableDeclarationStatement[39613-39640]"
  }, {
    "left" : "if (!texturingIsEnabled(TEXTURE_RECTANGLE))",
    "right" : "if (!texturingIsEnabled(TEXTURE_RECTANGLE))",
    "info" : "IfStatement[39407-39531]:IfStatement[39647-39771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39451-39531]:Block[39691-39771]"
  }, {
    "left" : "enableTexturing(TEXTURE_RECTANGLE);",
    "right" : "enableTexturing(TEXTURE_RECTANGLE);",
    "info" : "ExpressionStatement[39461-39496]:ExpressionStatement[39701-39736]"
  }, {
    "left" : "enabledTex = true;",
    "right" : "enabledTex = true;",
    "info" : "ExpressionStatement[39505-39523]:ExpressionStatement[39745-39763]"
  }, {
    "left" : "bindTexture(TEXTURE_RECTANGLE, id);",
    "right" : "bindTexture(TEXTURE_RECTANGLE, id);",
    "info" : "ExpressionStatement[39538-39573]:ExpressionStatement[39778-39813]"
  }, {
    "left" : "uniform1i(ppgl.texRectSamplerLoc, 0);",
    "right" : "uniform1i(ppgl.texRectSamplerLoc, 0);",
    "info" : "ExpressionStatement[39580-39617]:ExpressionStatement[39820-39857]"
  }, {
    "left" : "texData.position(0);",
    "right" : "texData.position(0);",
    "info" : "ExpressionStatement[39625-39645]:ExpressionStatement[39865-39885]"
  }, {
    "left" : "bindBuffer(ARRAY_BUFFER, ppgl.texRectGeoVBO);",
    "right" : "bindBuffer(ARRAY_BUFFER, ppgl.texRectGeoVBO);",
    "info" : "ExpressionStatement[39652-39697]:ExpressionStatement[39892-39937]"
  }, {
    "left" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, texData, STATIC_DRAW);",
    "right" : "bufferData(ARRAY_BUFFER, 16 * SIZEOF_FLOAT, texData, STATIC_DRAW);",
    "info" : "ExpressionStatement[39704-39770]:ExpressionStatement[39944-40010]"
  }, {
    "left" : "vertexAttribPointer(ppgl.texRectVertLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 0);",
    "right" : "vertexAttribPointer(ppgl.texRectVertLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 0);",
    "info" : "ExpressionStatement[39778-39857]:ExpressionStatement[40018-40097]"
  }, {
    "left" : "vertexAttribPointer(ppgl.texRectTCoordLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 2 * SIZEOF_FLOAT);",
    "right" : "vertexAttribPointer(ppgl.texRectTCoordLoc, 2, FLOAT, false, 4 * SIZEOF_FLOAT, 2 * SIZEOF_FLOAT);",
    "info" : "ExpressionStatement[39864-39960]:ExpressionStatement[40104-40200]"
  }, {
    "left" : "drawArrays(TRIANGLE_STRIP, 0, 4);",
    "right" : "drawArrays(TRIANGLE_STRIP, 0, 4);",
    "info" : "ExpressionStatement[39968-40001]:ExpressionStatement[40208-40241]"
  }, {
    "left" : "bindBuffer(ARRAY_BUFFER, 0);",
    "right" : "bindBuffer(ARRAY_BUFFER, 0);",
    "info" : "ExpressionStatement[40009-40037]:ExpressionStatement[40249-40277]"
  }, {
    "left" : "bindTexture(TEXTURE_RECTANGLE, 0);",
    "right" : "bindTexture(TEXTURE_RECTANGLE, 0);",
    "info" : "ExpressionStatement[40096-40130]:ExpressionStatement[40336-40370]"
  }, {
    "left" : "if (enabledTex)",
    "right" : "if (enabledTex)",
    "info" : "IfStatement[40137-40207]:IfStatement[40377-40447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40153-40207]:Block[40393-40447]"
  }, {
    "left" : "disableTexturing(TEXTURE_RECTANGLE);",
    "right" : "disableTexturing(TEXTURE_RECTANGLE);",
    "info" : "ExpressionStatement[40163-40199]:ExpressionStatement[40403-40439]"
  }, {
    "left" : "disableVertexAttribArray(ppgl.texRectVertLoc);",
    "right" : "disableVertexAttribArray(ppgl.texRectVertLoc);",
    "info" : "ExpressionStatement[40215-40261]:ExpressionStatement[40455-40501]"
  }, {
    "left" : "disableVertexAttribArray(ppgl.texRectTCoordLoc);",
    "right" : "disableVertexAttribArray(ppgl.texRectTCoordLoc);",
    "info" : "ExpressionStatement[40268-40316]:ExpressionStatement[40508-40556]"
  }, {
    "left" : "useProgram(0);",
    "right" : "useProgram(0);",
    "info" : "ExpressionStatement[40324-40338]:ExpressionStatement[40564-40578]"
  }, {
    "left" : "if (depthTest)",
    "right" : "if (depthTest)",
    "info" : "IfStatement[40346-40442]:IfStatement[40586-40682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40361-40398]:Block[40601-40638]"
  }, {
    "left" : "enable(DEPTH_TEST);",
    "right" : "enable(DEPTH_TEST);",
    "info" : "ExpressionStatement[40371-40390]:ExpressionStatement[40611-40630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40404-40442]:Block[40644-40682]"
  }, {
    "left" : "disable(DEPTH_TEST);",
    "right" : "disable(DEPTH_TEST);",
    "info" : "ExpressionStatement[40414-40434]:ExpressionStatement[40654-40674]"
  }, {
    "left" : "depthMask(depthMask);",
    "right" : "depthMask(depthMask);",
    "info" : "ExpressionStatement[40449-40470]:ExpressionStatement[40689-40710]"
  }, {
    "left" : "viewport(viewBuffer.get(0), viewBuffer.get(1),\n               viewBuffer.get(2), viewBuffer.get(3));",
    "right" : "viewport(viewBuffer.get(0), viewBuffer.get(1),\n               viewBuffer.get(2), viewBuffer.get(3));",
    "info" : "ExpressionStatement[40478-40578]:ExpressionStatement[40718-40818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40641-40881]:Block[40881-41121]"
  }, {
    "left" : "if (colorBuffer == null)",
    "right" : "if (colorBuffer == null)",
    "info" : "IfStatement[40647-40722]:IfStatement[40887-40962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40672-40722]:Block[40912-40962]"
  }, {
    "left" : "colorBuffer = IntBuffer.allocate(1);",
    "right" : "colorBuffer = IntBuffer.allocate(1);",
    "info" : "ExpressionStatement[40680-40716]:ExpressionStatement[40920-40956]"
  }, {
    "left" : "colorBuffer.rewind();",
    "right" : "colorBuffer.rewind();",
    "info" : "ExpressionStatement[40727-40748]:ExpressionStatement[40967-40988]"
  }, {
    "left" : "readPixels(scrX, pg.height - scrY - 1, 1, 1, RGBA, UNSIGNED_BYTE,\n               colorBuffer);",
    "right" : "readPixels(scrX, pg.height - scrY - 1, 1, 1, RGBA, UNSIGNED_BYTE,\n               colorBuffer);",
    "info" : "ExpressionStatement[40753-40847]:ExpressionStatement[40993-41087]"
  }, {
    "left" : "return colorBuffer.get();",
    "right" : "return colorBuffer.get();",
    "info" : "ReturnStatement[40852-40877]:ReturnStatement[41092-41117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40936-41182]:Block[41176-41422]"
  }, {
    "left" : "if (depthBuffer == null)",
    "right" : "if (depthBuffer == null)",
    "info" : "IfStatement[40942-41019]:IfStatement[41182-41259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40967-41019]:Block[41207-41259]"
  }, {
    "left" : "depthBuffer = FloatBuffer.allocate(1);",
    "right" : "depthBuffer = FloatBuffer.allocate(1);",
    "info" : "ExpressionStatement[40975-41013]:ExpressionStatement[41215-41253]"
  }, {
    "left" : "depthBuffer.rewind();",
    "right" : "depthBuffer.rewind();",
    "info" : "ExpressionStatement[41024-41045]:ExpressionStatement[41264-41285]"
  }, {
    "left" : "readPixels(scrX, pg.height - scrY - 1, 1, 1, DEPTH_COMPONENT, FLOAT,\n               depthBuffer);",
    "right" : "readPixels(scrX, pg.height - scrY - 1, 1, 1, DEPTH_COMPONENT, FLOAT,\n               depthBuffer);",
    "info" : "ExpressionStatement[41050-41147]:ExpressionStatement[41290-41387]"
  }, {
    "left" : "return depthBuffer.get(0);",
    "right" : "return depthBuffer.get(0);",
    "info" : "ReturnStatement[41152-41178]:ReturnStatement[41392-41418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41238-41499]:Block[41478-41739]"
  }, {
    "left" : "if (stencilBuffer == null)",
    "right" : "if (stencilBuffer == null)",
    "info" : "IfStatement[41244-41324]:IfStatement[41484-41564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41271-41324]:Block[41511-41564]"
  }, {
    "left" : "stencilBuffer = ByteBuffer.allocate(1);",
    "right" : "stencilBuffer = ByteBuffer.allocate(1);",
    "info" : "ExpressionStatement[41279-41318]:ExpressionStatement[41519-41558]"
  }, {
    "left" : "stencilBuffer.rewind();",
    "right" : "stencilBuffer.rewind();",
    "info" : "ExpressionStatement[41329-41352]:ExpressionStatement[41569-41592]"
  }, {
    "left" : "readPixels(scrX, pg.height - scrY - 1, 1, 1, STENCIL_INDEX,\n               UNSIGNED_BYTE, stencilBuffer);",
    "right" : "readPixels(scrX, pg.height - scrY - 1, 1, 1, STENCIL_INDEX,\n               UNSIGNED_BYTE, stencilBuffer);",
    "info" : "ExpressionStatement[41357-41462]:ExpressionStatement[41597-41702]"
  }, {
    "left" : "return stencilBuffer.get(0);",
    "right" : "return stencilBuffer.get(0);",
    "info" : "ReturnStatement[41467-41495]:ReturnStatement[41707-41735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41551-41591]:Block[41791-41831]"
  }, {
    "left" : "return (val & (val - 1)) == 0;",
    "right" : "return (val & (val - 1)) == 0;",
    "info" : "ReturnStatement[41557-41587]:ReturnStatement[41797-41827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41688-41759]:Block[41928-41999]"
  }, {
    "left" : "int ret = 1;",
    "right" : "int ret = 1;",
    "info" : "VariableDeclarationStatement[41694-41706]:VariableDeclarationStatement[41934-41946]"
  }, {
    "left" : "while (ret < val) ret <<= 1;",
    "right" : "while (ret < val) ret <<= 1;",
    "info" : "WhileStatement[41711-41739]:WhileStatement[41951-41979]"
  }, {
    "left" : "ret <<= 1;",
    "right" : "ret <<= 1;",
    "info" : "ExpressionStatement[41729-41739]:ExpressionStatement[41969-41979]"
  }, {
    "left" : "return ret;",
    "right" : "return ret;",
    "info" : "ReturnStatement[41744-41755]:ReturnStatement[41984-41995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41928-42258]:Block[42168-42498]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[41934-42254]:IfStatement[42174-42494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41950-42123]:Block[42190-42363]"
  }, {
    "left" : "return (color >>> 8) | ((color << 24) & 0xFF000000);",
    "right" : "return (color >>> 8) | ((color << 24) & 0xFF000000);",
    "info" : "ReturnStatement[41974-42026]:ReturnStatement[42214-42266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42129-42254]:Block[42369-42494]"
  }, {
    "left" : "return ((color & 0xFF) << 16) | ((color & 0xFF0000) >> 16) |\n             (color & 0xFF00FF00);",
    "right" : "return ((color & 0xFF) << 16) | ((color & 0xFF0000) >> 16) |\n             (color & 0xFF00FF00);",
    "info" : "ReturnStatement[42153-42248]:ReturnStatement[42393-42488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42611-43854]:Block[42851-44094]"
  }, {
    "left" : "int index = 0;",
    "right" : "int index = 0;",
    "info" : "VariableDeclarationStatement[42617-42631]:VariableDeclarationStatement[42857-42871]"
  }, {
    "left" : "int yindex = (height - 1) * width;",
    "right" : "int yindex = (height - 1) * width;",
    "info" : "VariableDeclarationStatement[42636-42670]:VariableDeclarationStatement[42876-42910]"
  }, {
    "left" : "for (int y = 0; y < height / 2; y++)",
    "right" : "for (int y = 0; y < height / 2; y++)",
    "info" : "ForStatement[42675-43376]:ForStatement[42915-43616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42712-43376]:Block[42952-43616]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[42720-43343]:ForStatement[42960-43583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42752-43343]:Block[42992-43583]"
  }, {
    "left" : "int pixy = pixels[yindex];",
    "right" : "int pixy = pixels[yindex];",
    "info" : "VariableDeclarationStatement[42762-42788]:VariableDeclarationStatement[43002-43028]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[42797-42822]:VariableDeclarationStatement[43037-43062]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[42831-43300]:IfStatement[43071-43540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42847-43015]:Block[43087-43255]"
  }, {
    "left" : "pixels[index] = (pixy >>> 8) | ((pixy << 24) & 0xFF000000);",
    "right" : "pixels[index] = (pixy >>> 8) | ((pixy << 24) & 0xFF000000);",
    "info" : "ExpressionStatement[42875-42934]:ExpressionStatement[43115-43174]"
  }, {
    "left" : "pixels[yindex] = (pixi >>> 8) | ((pixi << 24) & 0xFF000000);",
    "right" : "pixels[yindex] = (pixi >>> 8) | ((pixi << 24) & 0xFF000000);",
    "info" : "ExpressionStatement[42945-43005]:ExpressionStatement[43185-43245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43021-43300]:Block[43261-43540]"
  }, {
    "left" : "pixels[index] = ((pixy & 0xFF) << 16) | ((pixy & 0xFF0000) >> 16) |\n                          (pixy & 0xFF00FF00);",
    "right" : "pixels[index] = ((pixy & 0xFF) << 16) | ((pixy & 0xFF0000) >> 16) |\n                          (pixy & 0xFF00FF00);",
    "info" : "ExpressionStatement[43049-43163]:ExpressionStatement[43289-43403]"
  }, {
    "left" : "pixels[yindex] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                           (pixi & 0xFF00FF00);",
    "right" : "pixels[yindex] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                           (pixi & 0xFF00FF00);",
    "info" : "ExpressionStatement[43174-43290]:ExpressionStatement[43414-43530]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[43309-43317]:ExpressionStatement[43549-43557]"
  }, {
    "left" : "yindex++;",
    "right" : "yindex++;",
    "info" : "ExpressionStatement[43326-43335]:ExpressionStatement[43566-43575]"
  }, {
    "left" : "yindex -= width * 2;",
    "right" : "yindex -= width * 2;",
    "info" : "ExpressionStatement[43350-43370]:ExpressionStatement[43590-43610]"
  }, {
    "left" : "if ((height % 2) == 1)",
    "right" : "if ((height % 2) == 1)",
    "info" : "IfStatement[43382-43850]:IfStatement[43622-44090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43405-43850]:Block[43645-44090]"
  }, {
    "left" : "index = (height / 2) * width;",
    "right" : "index = (height / 2) * width;",
    "info" : "ExpressionStatement[43436-43465]:ExpressionStatement[43676-43705]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[43472-43844]:ForStatement[43712-44084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43504-43844]:Block[43744-44084]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[43514-43539]:VariableDeclarationStatement[43754-43779]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[43548-43819]:IfStatement[43788-44059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43564-43661]:Block[43804-43901]"
  }, {
    "left" : "pixels[index] = (pixi >>> 8) | ((pixi << 24) & 0xFF000000);",
    "right" : "pixels[index] = (pixi >>> 8) | ((pixi << 24) & 0xFF000000);",
    "info" : "ExpressionStatement[43592-43651]:ExpressionStatement[43832-43891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43667-43819]:Block[43907-44059]"
  }, {
    "left" : "pixels[index] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                          (pixi & 0xFF00FF00);",
    "right" : "pixels[index] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                          (pixi & 0xFF00FF00);",
    "info" : "ExpressionStatement[43695-43809]:ExpressionStatement[43935-44049]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[43828-43836]:ExpressionStatement[44068-44076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44092-44326]:Block[44332-44566]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[44098-44322]:IfStatement[44338-44562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44114-44178]:Block[44354-44418]"
  }, {
    "left" : "return (color >>> 8) | 0xFF000000;",
    "right" : "return (color >>> 8) | 0xFF000000;",
    "info" : "ReturnStatement[44138-44172]:ReturnStatement[44378-44412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44184-44322]:Block[44424-44562]"
  }, {
    "left" : "return ((color & 0xFF) << 16) | ((color & 0xFF0000) >> 16) |\n             (color & 0xFF00FF00) | 0xFF000000;",
    "right" : "return ((color & 0xFF) << 16) | ((color & 0xFF0000) >> 16) |\n             (color & 0xFF00FF00) | 0xFF000000;",
    "info" : "ReturnStatement[44208-44316]:ReturnStatement[44448-44556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44748-45979]:Block[44988-46219]"
  }, {
    "left" : "int index = 0;",
    "right" : "int index = 0;",
    "info" : "VariableDeclarationStatement[44754-44768]:VariableDeclarationStatement[44994-45008]"
  }, {
    "left" : "int yindex = (height - 1) * width;",
    "right" : "int yindex = (height - 1) * width;",
    "info" : "VariableDeclarationStatement[44773-44807]:VariableDeclarationStatement[45013-45047]"
  }, {
    "left" : "for (int y = 0; y < height / 2; y++)",
    "right" : "for (int y = 0; y < height / 2; y++)",
    "info" : "ForStatement[44812-45505]:ForStatement[45052-45745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44849-45505]:Block[45089-45745]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[44857-45472]:ForStatement[45097-45712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44889-45472]:Block[45129-45712]"
  }, {
    "left" : "int pixy = pixels[yindex];",
    "right" : "int pixy = pixels[yindex];",
    "info" : "VariableDeclarationStatement[44899-44925]:VariableDeclarationStatement[45139-45165]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[44934-44959]:VariableDeclarationStatement[45174-45199]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[44968-45429]:IfStatement[45208-45669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44984-45118]:Block[45224-45358]"
  }, {
    "left" : "pixels[index] = (pixy >>> 8) | 0xFF000000;",
    "right" : "pixels[index] = (pixy >>> 8) | 0xFF000000;",
    "info" : "ExpressionStatement[45012-45054]:ExpressionStatement[45252-45294]"
  }, {
    "left" : "pixels[yindex] = (pixi >>> 8) | 0xFF000000;",
    "right" : "pixels[yindex] = (pixi >>> 8) | 0xFF000000;",
    "info" : "ExpressionStatement[45065-45108]:ExpressionStatement[45305-45348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45124-45429]:Block[45364-45669]"
  }, {
    "left" : "pixels[index] = ((pixy & 0xFF) << 16) | ((pixy & 0xFF0000) >> 16) |\n                          (pixy & 0xFF00FF00) | 0xFF000000;",
    "right" : "pixels[index] = ((pixy & 0xFF) << 16) | ((pixy & 0xFF0000) >> 16) |\n                          (pixy & 0xFF00FF00) | 0xFF000000;",
    "info" : "ExpressionStatement[45152-45279]:ExpressionStatement[45392-45519]"
  }, {
    "left" : "pixels[yindex] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                           (pixi & 0xFF00FF00) | 0xFF000000;",
    "right" : "pixels[yindex] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                           (pixi & 0xFF00FF00) | 0xFF000000;",
    "info" : "ExpressionStatement[45290-45419]:ExpressionStatement[45530-45659]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[45438-45446]:ExpressionStatement[45678-45686]"
  }, {
    "left" : "yindex++;",
    "right" : "yindex++;",
    "info" : "ExpressionStatement[45455-45464]:ExpressionStatement[45695-45704]"
  }, {
    "left" : "yindex -= width * 2;",
    "right" : "yindex -= width * 2;",
    "info" : "ExpressionStatement[45479-45499]:ExpressionStatement[45719-45739]"
  }, {
    "left" : "if ((height % 2) == 1)",
    "right" : "if ((height % 2) == 1)",
    "info" : "IfStatement[45511-45975]:IfStatement[45751-46215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45534-45975]:Block[45774-46215]"
  }, {
    "left" : "index = (height / 2) * width;",
    "right" : "index = (height / 2) * width;",
    "info" : "ExpressionStatement[45565-45594]:ExpressionStatement[45805-45834]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[45601-45969]:ForStatement[45841-46209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45633-45969]:Block[45873-46209]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[45643-45668]:VariableDeclarationStatement[45883-45908]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[45677-45944]:IfStatement[45917-46184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45693-45773]:Block[45933-46013]"
  }, {
    "left" : "pixels[index] = (pixi >>> 8) | 0xFF000000;",
    "right" : "pixels[index] = (pixi >>> 8) | 0xFF000000;",
    "info" : "ExpressionStatement[45721-45763]:ExpressionStatement[45961-46003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45779-45944]:Block[46019-46184]"
  }, {
    "left" : "pixels[index] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                          (pixi & 0xFF00FF00) | 0xFF000000;",
    "right" : "pixels[index] = ((pixi & 0xFF) << 16) | ((pixi & 0xFF0000) >> 16) |\n                          (pixi & 0xFF00FF00) | 0xFF000000;",
    "info" : "ExpressionStatement[45807-45934]:ExpressionStatement[46047-46174]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[45953-45961]:ExpressionStatement[46193-46201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46155-46421]:Block[46395-46661]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[46161-46417]:IfStatement[46401-46657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46177-46267]:Block[46417-46507]"
  }, {
    "left" : "return ((color >> 24) & 0xFF) | ((color << 8) & 0xFFFFFF00);",
    "right" : "return ((color >> 24) & 0xFF) | ((color << 8) & 0xFFFFFF00);",
    "info" : "ReturnStatement[46201-46261]:ReturnStatement[46441-46501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46273-46417]:Block[46513-46657]"
  }, {
    "left" : "return (color & 0xFF000000) | ((color << 16) & 0xFF0000) |\n             (color & 0xFF00) | ((color >> 16) & 0xFF);",
    "right" : "return (color & 0xFF000000) | ((color << 16) & 0xFF0000) |\n             (color & 0xFF00) | ((color >> 16) & 0xFF);",
    "info" : "ReturnStatement[46297-46411]:ReturnStatement[46537-46651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46781-48102]:Block[47021-48342]"
  }, {
    "left" : "int index = 0;",
    "right" : "int index = 0;",
    "info" : "VariableDeclarationStatement[46787-46801]:VariableDeclarationStatement[47027-47041]"
  }, {
    "left" : "int yindex = (height - 1) * width;",
    "right" : "int yindex = (height - 1) * width;",
    "info" : "VariableDeclarationStatement[46806-46840]:VariableDeclarationStatement[47046-47080]"
  }, {
    "left" : "for (int y = 0; y < height / 2; y++)",
    "right" : "for (int y = 0; y < height / 2; y++)",
    "info" : "ForStatement[46845-47598]:ForStatement[47085-47838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46882-47598]:Block[47122-47838]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[46890-47565]:ForStatement[47130-47805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46922-47565]:Block[47162-47805]"
  }, {
    "left" : "int pixy = pixels[yindex];",
    "right" : "int pixy = pixels[yindex];",
    "info" : "VariableDeclarationStatement[46932-46958]:VariableDeclarationStatement[47172-47198]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[46967-46992]:VariableDeclarationStatement[47207-47232]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[47001-47522]:IfStatement[47241-47762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47017-47201]:Block[47257-47441]"
  }, {
    "left" : "pixels[index] = ((pixy >> 24) & 0xFF) | ((pixy << 8) & 0xFFFFFF00);",
    "right" : "pixels[index] = ((pixy >> 24) & 0xFF) | ((pixy << 8) & 0xFFFFFF00);",
    "info" : "ExpressionStatement[47045-47112]:ExpressionStatement[47285-47352]"
  }, {
    "left" : "pixels[yindex] = ((pixi >> 24) & 0xFF) | ((pixi << 8) & 0xFFFFFF00);",
    "right" : "pixels[yindex] = ((pixi >> 24) & 0xFF) | ((pixi << 8) & 0xFFFFFF00);",
    "info" : "ExpressionStatement[47123-47191]:ExpressionStatement[47363-47431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47207-47522]:Block[47447-47762]"
  }, {
    "left" : "pixels[index] = (pixy & 0xFF000000) | ((pixy << 16) & 0xFF0000) |\n                          (pixy & 0xFF00) | ((pixy >> 16) & 0xFF);",
    "right" : "pixels[index] = (pixy & 0xFF000000) | ((pixy << 16) & 0xFF0000) |\n                          (pixy & 0xFF00) | ((pixy >> 16) & 0xFF);",
    "info" : "ExpressionStatement[47235-47367]:ExpressionStatement[47475-47607]"
  }, {
    "left" : "pixels[yindex] = (pixi & 0xFF000000) | ((pixi << 16) & 0xFF0000) |\n                           (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "right" : "pixels[yindex] = (pixi & 0xFF000000) | ((pixi << 16) & 0xFF0000) |\n                           (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "info" : "ExpressionStatement[47378-47512]:ExpressionStatement[47618-47752]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[47531-47539]:ExpressionStatement[47771-47779]"
  }, {
    "left" : "yindex++;",
    "right" : "yindex++;",
    "info" : "ExpressionStatement[47548-47557]:ExpressionStatement[47788-47797]"
  }, {
    "left" : "yindex -= width * 2;",
    "right" : "yindex -= width * 2;",
    "info" : "ExpressionStatement[47572-47592]:ExpressionStatement[47812-47832]"
  }, {
    "left" : "if ((height % 2) == 1)",
    "right" : "if ((height % 2) == 1)",
    "info" : "IfStatement[47604-48098]:IfStatement[47844-48338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47627-48098]:Block[47867-48338]"
  }, {
    "left" : "index = (height / 2) * width;",
    "right" : "index = (height / 2) * width;",
    "info" : "ExpressionStatement[47658-47687]:ExpressionStatement[47898-47927]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[47694-48092]:ForStatement[47934-48332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47726-48092]:Block[47966-48332]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[47736-47761]:VariableDeclarationStatement[47976-48001]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[47770-48067]:IfStatement[48010-48307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47786-47891]:Block[48026-48131]"
  }, {
    "left" : "pixels[index] = ((pixi >> 24) & 0xFF) | ((pixi << 8) & 0xFFFFFF00);",
    "right" : "pixels[index] = ((pixi >> 24) & 0xFF) | ((pixi << 8) & 0xFFFFFF00);",
    "info" : "ExpressionStatement[47814-47881]:ExpressionStatement[48054-48121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47897-48067]:Block[48137-48307]"
  }, {
    "left" : "pixels[index] = (pixi & 0xFF000000) | ((pixi << 16) & 0xFF0000) |\n                          (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "right" : "pixels[index] = (pixi & 0xFF000000) | ((pixi << 16) & 0xFF0000) |\n                          (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "info" : "ExpressionStatement[47925-48057]:ExpressionStatement[48165-48297]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[48076-48084]:ExpressionStatement[48316-48324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48318-48554]:Block[48558-48794]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[48324-48550]:IfStatement[48564-48790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48340-48411]:Block[48580-48651]"
  }, {
    "left" : "return 0xFF | ((color << 8) & 0xFFFFFF00);",
    "right" : "return 0xFF | ((color << 8) & 0xFFFFFF00);",
    "info" : "ReturnStatement[48363-48405]:ReturnStatement[48603-48645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48417-48550]:Block[48657-48790]"
  }, {
    "left" : "return 0xFF000000 | ((color << 16) & 0xFF0000) |\n             (color & 0xFF00) | ((color >> 16) & 0xFF);",
    "right" : "return 0xFF000000 | ((color << 16) & 0xFF0000) |\n             (color & 0xFF00) | ((color >> 16) & 0xFF);",
    "info" : "ReturnStatement[48440-48544]:ReturnStatement[48680-48784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48979-50218]:Block[49219-50458]"
  }, {
    "left" : "int index = 0;",
    "right" : "int index = 0;",
    "info" : "VariableDeclarationStatement[48985-48999]:VariableDeclarationStatement[49225-49239]"
  }, {
    "left" : "int yindex = (height - 1) * width;",
    "right" : "int yindex = (height - 1) * width;",
    "info" : "VariableDeclarationStatement[49004-49038]:VariableDeclarationStatement[49244-49278]"
  }, {
    "left" : "for (int y = 0; y < height / 2; y++)",
    "right" : "for (int y = 0; y < height / 2; y++)",
    "info" : "ForStatement[49043-49742]:ForStatement[49283-49982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49080-49742]:Block[49320-49982]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[49088-49709]:ForStatement[49328-49949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49120-49709]:Block[49360-49949]"
  }, {
    "left" : "int pixy = pixels[yindex];",
    "right" : "int pixy = pixels[yindex];",
    "info" : "VariableDeclarationStatement[49130-49156]:VariableDeclarationStatement[49370-49396]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[49165-49190]:VariableDeclarationStatement[49405-49430]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[49199-49666]:IfStatement[49439-49906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49215-49364]:Block[49455-49604]"
  }, {
    "left" : "pixels[index] = 0xFF | ((pixy << 8) & 0xFFFFFF00);",
    "right" : "pixels[index] = 0xFF | ((pixy << 8) & 0xFFFFFF00);",
    "info" : "ExpressionStatement[49242-49292]:ExpressionStatement[49482-49532]"
  }, {
    "left" : "pixels[yindex] = 0xFF | ((pixi << 8) & 0xFFFFFF00);",
    "right" : "pixels[yindex] = 0xFF | ((pixi << 8) & 0xFFFFFF00);",
    "info" : "ExpressionStatement[49303-49354]:ExpressionStatement[49543-49594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49370-49666]:Block[49610-49906]"
  }, {
    "left" : "pixels[index] = 0xFF000000 | ((pixy << 16) & 0xFF0000) |\n                          (pixy & 0xFF00) | ((pixy >> 16) & 0xFF);",
    "right" : "pixels[index] = 0xFF000000 | ((pixy << 16) & 0xFF0000) |\n                          (pixy & 0xFF00) | ((pixy >> 16) & 0xFF);",
    "info" : "ExpressionStatement[49397-49520]:ExpressionStatement[49637-49760]"
  }, {
    "left" : "pixels[yindex] = 0xFF000000 | ((pixi << 16) & 0xFF0000) |\n                           (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "right" : "pixels[yindex] = 0xFF000000 | ((pixi << 16) & 0xFF0000) |\n                           (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "info" : "ExpressionStatement[49531-49656]:ExpressionStatement[49771-49896]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[49675-49683]:ExpressionStatement[49915-49923]"
  }, {
    "left" : "yindex++;",
    "right" : "yindex++;",
    "info" : "ExpressionStatement[49692-49701]:ExpressionStatement[49932-49941]"
  }, {
    "left" : "yindex -= width * 2;",
    "right" : "yindex -= width * 2;",
    "info" : "ExpressionStatement[49716-49736]:ExpressionStatement[49956-49976]"
  }, {
    "left" : "if ((height % 2) == 1)",
    "right" : "if ((height % 2) == 1)",
    "info" : "IfStatement[49748-50214]:IfStatement[49988-50454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49771-50214]:Block[50011-50454]"
  }, {
    "left" : "index = (height / 2) * width;",
    "right" : "index = (height / 2) * width;",
    "info" : "ExpressionStatement[49802-49831]:ExpressionStatement[50042-50071]"
  }, {
    "left" : "for (int x = 0; x < width; x++)",
    "right" : "for (int x = 0; x < width; x++)",
    "info" : "ForStatement[49838-50208]:ForStatement[50078-50448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49870-50208]:Block[50110-50448]"
  }, {
    "left" : "int pixi = pixels[index];",
    "right" : "int pixi = pixels[index];",
    "info" : "VariableDeclarationStatement[49880-49905]:VariableDeclarationStatement[50120-50145]"
  }, {
    "left" : "if (BIG_ENDIAN)",
    "right" : "if (BIG_ENDIAN)",
    "info" : "IfStatement[49914-50183]:IfStatement[50154-50423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49930-50017]:Block[50170-50257]"
  }, {
    "left" : "pixels[index] = 0xFF | ((pixi << 8) & 0xFFFFFF00);",
    "right" : "pixels[index] = 0xFF | ((pixi << 8) & 0xFFFFFF00);",
    "info" : "ExpressionStatement[49957-50007]:ExpressionStatement[50197-50247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50023-50183]:Block[50263-50423]"
  }, {
    "left" : "pixels[index] = 0xFF000000 | ((pixi << 16) & 0xFF0000) |\n                          (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "right" : "pixels[index] = 0xFF000000 | ((pixi << 16) & 0xFF0000) |\n                          (pixi & 0xFF00) | ((pixi >> 16) & 0xFF);",
    "info" : "ExpressionStatement[50050-50173]:ExpressionStatement[50290-50413]"
  }, {
    "left" : "index++;",
    "right" : "index++;",
    "info" : "ExpressionStatement[50192-50200]:ExpressionStatement[50432-50440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50274-50440]:Block[50514-50680]"
  }, {
    "left" : "if (quality <= 1)",
    "right" : "if (quality <= 1)",
    "info" : "IfStatement[50280-50436]:IfStatement[50520-50676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50298-50321]:Block[50538-50561]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[50306-50315]:ReturnStatement[50546-50555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50327-50436]:Block[50567-50676]"
  }, {
    "left" : "int n = 2 * (quality / 2);",
    "right" : "int n = 2 * (quality / 2);",
    "info" : "VariableDeclarationStatement[50388-50414]:VariableDeclarationStatement[50628-50654]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[50421-50430]:ReturnStatement[50661-50670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50498-50547]:Block[50738-50787]"
  }, {
    "left" : "return pg.parent.loadStrings(filename);",
    "right" : "return pg.parent.loadStrings(filename);",
    "info" : "ReturnStatement[50504-50543]:ReturnStatement[50744-50783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50607-50656]:Block[50847-50896]"
  }, {
    "left" : "return pg.parent.loadStrings(filename);",
    "right" : "return pg.parent.loadStrings(filename);",
    "info" : "ReturnStatement[50613-50652]:ReturnStatement[50853-50892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50708-50907]:Block[50948-51147]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[50714-50886]:TryStatement[50954-51126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50718-50777]:Block[50958-51017]"
  }, {
    "left" : "return PApplet.loadStrings(url.openStream());",
    "right" : "return PApplet.loadStrings(url.openStream());",
    "info" : "ReturnStatement[50726-50771]:ReturnStatement[50966-51011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50800-50886]:Block[51040-51126]"
  }, {
    "left" : "PGraphics.showException(\"Cannot load fragment shader \" + url.getFile());",
    "right" : "PGraphics.showException(\"Cannot load fragment shader \" + url.getFile());",
    "info" : "ExpressionStatement[50808-50880]:ExpressionStatement[51048-51120]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[50891-50903]:ReturnStatement[51131-51143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50957-51154]:Block[51197-51394]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[50963-51133]:TryStatement[51203-51373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50967-51026]:Block[51207-51266]"
  }, {
    "left" : "return PApplet.loadStrings(url.openStream());",
    "right" : "return PApplet.loadStrings(url.openStream());",
    "info" : "ReturnStatement[50975-51020]:ReturnStatement[51215-51260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51049-51133]:Block[51289-51373]"
  }, {
    "left" : "PGraphics.showException(\"Cannot load vertex shader \" + url.getFile());",
    "right" : "PGraphics.showException(\"Cannot load vertex shader \" + url.getFile());",
    "info" : "ExpressionStatement[51057-51127]:ExpressionStatement[51297-51367]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[51138-51150]:ReturnStatement[51378-51390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51225-51269]:Block[51465-51509]"
  }, {
    "left" : "return loadVertexShader(filename);",
    "right" : "return loadVertexShader(filename);",
    "info" : "ReturnStatement[51231-51265]:ReturnStatement[51471-51505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51342-51388]:Block[51582-51628]"
  }, {
    "left" : "return loadFragmentShader(filename);",
    "right" : "return loadFragmentShader(filename);",
    "info" : "ReturnStatement[51348-51384]:ReturnStatement[51588-51624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51453-51494]:Block[51693-51734]"
  }, {
    "left" : "return loadFragmentShader(url);",
    "right" : "return loadFragmentShader(url);",
    "info" : "ReturnStatement[51459-51490]:ReturnStatement[51699-51730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51557-51596]:Block[51797-51836]"
  }, {
    "left" : "return loadVertexShader(url);",
    "right" : "return loadVertexShader(url);",
    "info" : "ReturnStatement[51563-51592]:ReturnStatement[51803-51832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51746-52419]:Block[51986-52659]"
  }, {
    "left" : "if (version0 == 120 && version1 == 150)",
    "right" : "if (version0 == 120 && version1 == 150)",
    "info" : "IfStatement[51752-52394]:IfStatement[51992-52634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51792-52394]:Block[52032-52634]"
  }, {
    "left" : "String[] fragSrc = new String[fragSrc0.length + 2];",
    "right" : "String[] fragSrc = new String[fragSrc0.length + 2];",
    "info" : "VariableDeclarationStatement[51800-51851]:VariableDeclarationStatement[52040-52091]"
  }, {
    "left" : "fragSrc[0] = \"#version 150\";",
    "right" : "fragSrc[0] = \"#version 150\";",
    "info" : "ExpressionStatement[51858-51886]:ExpressionStatement[52098-52126]"
  }, {
    "left" : "fragSrc[1] = \"out vec4 fragColor;\";",
    "right" : "fragSrc[1] = \"out vec4 fragColor;\";",
    "info" : "ExpressionStatement[51893-51928]:ExpressionStatement[52133-52168]"
  }, {
    "left" : "for (int i = 0; i < fragSrc0.length; i++)",
    "right" : "for (int i = 0; i < fragSrc0.length; i++)",
    "info" : "ForStatement[51935-52366]:ForStatement[52175-52606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51977-52366]:Block[52217-52606]"
  }, {
    "left" : "String line = fragSrc0[i];",
    "right" : "String line = fragSrc0[i];",
    "info" : "VariableDeclarationStatement[51987-52013]:VariableDeclarationStatement[52227-52253]"
  }, {
    "left" : "line = line.replace(\"varying\", \"in\");",
    "right" : "line = line.replace(\"varying\", \"in\");",
    "info" : "ExpressionStatement[52022-52059]:ExpressionStatement[52262-52299]"
  }, {
    "left" : "line = line.replace(\"attribute\", \"in\");",
    "right" : "line = line.replace(\"attribute\", \"in\");",
    "info" : "ExpressionStatement[52068-52107]:ExpressionStatement[52308-52347]"
  }, {
    "left" : "line = line.replace(\"gl_FragColor\", \"fragColor\");",
    "right" : "line = line.replace(\"gl_FragColor\", \"fragColor\");",
    "info" : "ExpressionStatement[52116-52165]:ExpressionStatement[52356-52405]"
  }, {
    "left" : "line = line.replace(\"texture\", \"texMap\");",
    "right" : "line = line.replace(\"texture\", \"texMap\");",
    "info" : "ExpressionStatement[52174-52215]:ExpressionStatement[52414-52455]"
  }, {
    "left" : "line = line.replace(\"texMap2D(\", \"texture(\");",
    "right" : "line = line.replace(\"texMap2D(\", \"texture(\");",
    "info" : "ExpressionStatement[52224-52269]:ExpressionStatement[52464-52509]"
  }, {
    "left" : "line = line.replace(\"texMap2DRect(\", \"texture(\");",
    "right" : "line = line.replace(\"texMap2DRect(\", \"texture(\");",
    "info" : "ExpressionStatement[52278-52327]:ExpressionStatement[52518-52567]"
  }, {
    "left" : "fragSrc[i + 2] = line;",
    "right" : "fragSrc[i + 2] = line;",
    "info" : "ExpressionStatement[52336-52358]:ExpressionStatement[52576-52598]"
  }, {
    "left" : "return fragSrc;",
    "right" : "return fragSrc;",
    "info" : "ReturnStatement[52373-52388]:ReturnStatement[52613-52628]"
  }, {
    "left" : "return fragSrc0;",
    "right" : "return fragSrc0;",
    "info" : "ReturnStatement[52399-52415]:ReturnStatement[52639-52655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52566-52978]:Block[52806-53218]"
  }, {
    "left" : "if (version0 == 120 && version1 == 150)",
    "right" : "if (version0 == 120 && version1 == 150)",
    "info" : "IfStatement[52572-52953]:IfStatement[52812-53193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52612-52953]:Block[52852-53193]"
  }, {
    "left" : "String[] vertSrc = new String[vertSrc0.length + 1];",
    "right" : "String[] vertSrc = new String[vertSrc0.length + 1];",
    "info" : "VariableDeclarationStatement[52620-52671]:VariableDeclarationStatement[52860-52911]"
  }, {
    "left" : "vertSrc[0] = \"#version 150\";",
    "right" : "vertSrc[0] = \"#version 150\";",
    "info" : "ExpressionStatement[52678-52706]:ExpressionStatement[52918-52946]"
  }, {
    "left" : "for (int i = 0; i < vertSrc0.length; i++)",
    "right" : "for (int i = 0; i < vertSrc0.length; i++)",
    "info" : "ForStatement[52713-52925]:ForStatement[52953-53165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52755-52925]:Block[52995-53165]"
  }, {
    "left" : "String line = vertSrc0[i];",
    "right" : "String line = vertSrc0[i];",
    "info" : "VariableDeclarationStatement[52765-52791]:VariableDeclarationStatement[53005-53031]"
  }, {
    "left" : "line = line.replace(\"attribute\", \"in\");",
    "right" : "line = line.replace(\"attribute\", \"in\");",
    "info" : "ExpressionStatement[52800-52839]:ExpressionStatement[53040-53079]"
  }, {
    "left" : "line = line.replace(\"varying\", \"out\");",
    "right" : "line = line.replace(\"varying\", \"out\");",
    "info" : "ExpressionStatement[52848-52886]:ExpressionStatement[53088-53126]"
  }, {
    "left" : "vertSrc[i + 1] = line;",
    "right" : "vertSrc[i + 1] = line;",
    "info" : "ExpressionStatement[52895-52917]:ExpressionStatement[53135-53157]"
  }, {
    "left" : "return vertSrc;",
    "right" : "return vertSrc;",
    "info" : "ReturnStatement[52932-52947]:ReturnStatement[53172-53187]"
  }, {
    "left" : "return vertSrc0;",
    "right" : "return vertSrc0;",
    "info" : "ReturnStatement[52958-52974]:ReturnStatement[53198-53214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53040-53420]:Block[53280-53660]"
  }, {
    "left" : "int shader = createShader(shaderType);",
    "right" : "int shader = createShader(shaderType);",
    "info" : "VariableDeclarationStatement[53046-53084]:VariableDeclarationStatement[53286-53324]"
  }, {
    "left" : "if (shader != 0)",
    "right" : "if (shader != 0)",
    "info" : "IfStatement[53089-53397]:IfStatement[53329-53637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53106-53397]:Block[53346-53637]"
  }, {
    "left" : "shaderSource(shader, source);",
    "right" : "shaderSource(shader, source);",
    "info" : "ExpressionStatement[53114-53143]:ExpressionStatement[53354-53383]"
  }, {
    "left" : "compileShader(shader);",
    "right" : "compileShader(shader);",
    "info" : "ExpressionStatement[53150-53172]:ExpressionStatement[53390-53412]"
  }, {
    "left" : "if (!compiled(shader))",
    "right" : "if (!compiled(shader))",
    "info" : "IfStatement[53179-53391]:IfStatement[53419-53631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53202-53391]:Block[53442-53631]"
  }, {
    "left" : "System.err.println(\"Could not compile shader \" + shaderType + \":\");",
    "right" : "System.err.println(\"Could not compile shader \" + shaderType + \":\");",
    "info" : "ExpressionStatement[53212-53279]:ExpressionStatement[53452-53519]"
  }, {
    "left" : "System.err.println(getShaderInfoLog(shader));",
    "right" : "System.err.println(getShaderInfoLog(shader));",
    "info" : "ExpressionStatement[53288-53333]:ExpressionStatement[53528-53573]"
  }, {
    "left" : "deleteShader(shader);",
    "right" : "deleteShader(shader);",
    "info" : "ExpressionStatement[53342-53363]:ExpressionStatement[53582-53603]"
  }, {
    "left" : "shader = 0;",
    "right" : "shader = 0;",
    "info" : "ExpressionStatement[53372-53383]:ExpressionStatement[53612-53623]"
  }, {
    "left" : "return shader;",
    "right" : "return shader;",
    "info" : "ReturnStatement[53402-53416]:ReturnStatement[53642-53656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53491-53900]:Block[53731-54140]"
  }, {
    "left" : "int program = createProgram();",
    "right" : "int program = createProgram();",
    "info" : "VariableDeclarationStatement[53497-53527]:VariableDeclarationStatement[53737-53767]"
  }, {
    "left" : "if (program != 0)",
    "right" : "if (program != 0)",
    "info" : "IfStatement[53532-53876]:IfStatement[53772-54116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53550-53876]:Block[53790-54116]"
  }, {
    "left" : "attachShader(program, vertexShader);",
    "right" : "attachShader(program, vertexShader);",
    "info" : "ExpressionStatement[53558-53594]:ExpressionStatement[53798-53834]"
  }, {
    "left" : "attachShader(program, fragmentShader);",
    "right" : "attachShader(program, fragmentShader);",
    "info" : "ExpressionStatement[53601-53639]:ExpressionStatement[53841-53879]"
  }, {
    "left" : "linkProgram(program);",
    "right" : "linkProgram(program);",
    "info" : "ExpressionStatement[53646-53667]:ExpressionStatement[53886-53907]"
  }, {
    "left" : "if (!linked(program))",
    "right" : "if (!linked(program))",
    "info" : "IfStatement[53674-53870]:IfStatement[53914-54110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53696-53870]:Block[53936-54110]"
  }, {
    "left" : "System.err.println(\"Could not link program: \");",
    "right" : "System.err.println(\"Could not link program: \");",
    "info" : "ExpressionStatement[53706-53753]:ExpressionStatement[53946-53993]"
  }, {
    "left" : "System.err.println(getProgramInfoLog(program));",
    "right" : "System.err.println(getProgramInfoLog(program));",
    "info" : "ExpressionStatement[53762-53809]:ExpressionStatement[54002-54049]"
  }, {
    "left" : "deleteProgram(program);",
    "right" : "deleteProgram(program);",
    "info" : "ExpressionStatement[53818-53841]:ExpressionStatement[54058-54081]"
  }, {
    "left" : "program = 0;",
    "right" : "program = 0;",
    "info" : "ExpressionStatement[53850-53862]:ExpressionStatement[54090-54102]"
  }, {
    "left" : "return program;",
    "right" : "return program;",
    "info" : "ReturnStatement[53881-53896]:ReturnStatement[54121-54136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53944-54074]:Block[54184-54314]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[53950-53969]:ExpressionStatement[54190-54209]"
  }, {
    "left" : "getShaderiv(shader, COMPILE_STATUS, intBuffer);",
    "right" : "getShaderiv(shader, COMPILE_STATUS, intBuffer);",
    "info" : "ExpressionStatement[53974-54021]:ExpressionStatement[54214-54261]"
  }, {
    "left" : "return intBuffer.get(0) == 0 ? false : true;",
    "right" : "return intBuffer.get(0) == 0 ? false : true;",
    "info" : "ReturnStatement[54026-54070]:ReturnStatement[54266-54310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54117-54246]:Block[54357-54486]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[54123-54142]:ExpressionStatement[54363-54382]"
  }, {
    "left" : "getProgramiv(program, LINK_STATUS, intBuffer);",
    "right" : "getProgramiv(program, LINK_STATUS, intBuffer);",
    "info" : "ExpressionStatement[54147-54193]:ExpressionStatement[54387-54433]"
  }, {
    "left" : "return intBuffer.get(0) == 0 ? false : true;",
    "right" : "return intBuffer.get(0) == 0 ? false : true;",
    "info" : "ReturnStatement[54198-54242]:ReturnStatement[54438-54482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54291-55496]:Block[54531-55736]"
  }, {
    "left" : "int status = checkFramebufferStatus(FRAMEBUFFER);",
    "right" : "int status = checkFramebufferStatus(FRAMEBUFFER);",
    "info" : "VariableDeclarationStatement[54297-54346]:VariableDeclarationStatement[54537-54586]"
  }, {
    "left" : "if (status == FRAMEBUFFER_COMPLETE)",
    "right" : "if (status == FRAMEBUFFER_COMPLETE)",
    "info" : "IfStatement[54351-55474]:IfStatement[54591-55714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54387-54413]:Block[54627-54653]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[54395-54407]:ReturnStatement[54635-54647]"
  }, {
    "left" : "if (status == FRAMEBUFFER_INCOMPLETE_ATTACHMENT)",
    "right" : "if (status == FRAMEBUFFER_INCOMPLETE_ATTACHMENT)",
    "info" : "IfStatement[54419-55474]:IfStatement[54659-55714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54468-54599]:Block[54708-54839]"
  }, {
    "left" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete attachment\"));",
    "right" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete attachment\"));",
    "info" : "ExpressionStatement[54476-54593]:ExpressionStatement[54716-54833]"
  }, {
    "left" : "if (status == FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)",
    "right" : "if (status == FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)",
    "info" : "IfStatement[54605-55474]:IfStatement[54845-55714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54662-54801]:Block[54902-55041]"
  }, {
    "left" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete missing attachment\"));",
    "right" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete missing attachment\"));",
    "info" : "ExpressionStatement[54670-54795]:ExpressionStatement[54910-55035]"
  }, {
    "left" : "if (status == FRAMEBUFFER_INCOMPLETE_DIMENSIONS)",
    "right" : "if (status == FRAMEBUFFER_INCOMPLETE_DIMENSIONS)",
    "info" : "IfStatement[54807-55474]:IfStatement[55047-55714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54856-54987]:Block[55096-55227]"
  }, {
    "left" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete dimensions\"));",
    "right" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete dimensions\"));",
    "info" : "ExpressionStatement[54864-54981]:ExpressionStatement[55104-55221]"
  }, {
    "left" : "if (status == FRAMEBUFFER_INCOMPLETE_FORMATS)",
    "right" : "if (status == FRAMEBUFFER_INCOMPLETE_FORMATS)",
    "info" : "IfStatement[54993-55474]:IfStatement[55233-55714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55039-55167]:Block[55279-55407]"
  }, {
    "left" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete formats\"));",
    "right" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"incomplete formats\"));",
    "info" : "ExpressionStatement[55047-55161]:ExpressionStatement[55287-55401]"
  }, {
    "left" : "if (status == FRAMEBUFFER_UNSUPPORTED)",
    "right" : "if (status == FRAMEBUFFER_UNSUPPORTED)",
    "info" : "IfStatement[55173-55474]:IfStatement[55413-55714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55212-55345]:Block[55452-55585]"
  }, {
    "left" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"framebuffer unsupported\"));",
    "right" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"framebuffer unsupported\"));",
    "info" : "ExpressionStatement[55220-55339]:ExpressionStatement[55460-55579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55351-55474]:Block[55591-55714]"
  }, {
    "left" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"unknown error\"));",
    "right" : "System.err.println(String.format(FRAMEBUFFER_ERROR,\n                                       \"unknown error\"));",
    "info" : "ExpressionStatement[55359-55468]:ExpressionStatement[55599-55708]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[55479-55492]:ReturnStatement[55719-55732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55532-56241]:Block[55772-56481]"
  }, {
    "left" : "String version = getString(VERSION).trim();",
    "right" : "String version = getString(VERSION).trim();",
    "info" : "VariableDeclarationStatement[55538-55581]:VariableDeclarationStatement[55778-55821]"
  }, {
    "left" : "int[] res = {0, 0, 0};",
    "right" : "int[] res = {0, 0, 0};",
    "info" : "VariableDeclarationStatement[55586-55608]:VariableDeclarationStatement[55826-55848]"
  }, {
    "left" : "String[] parts = version.split(\" \");",
    "right" : "String[] parts = version.split(\" \");",
    "info" : "VariableDeclarationStatement[55613-55649]:VariableDeclarationStatement[55853-55889]"
  }, {
    "left" : "for (int i = 0; i < parts.length; i++)",
    "right" : "for (int i = 0; i < parts.length; i++)",
    "info" : "ForStatement[55654-56221]:ForStatement[55894-56461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55693-56221]:Block[55933-56461]"
  }, {
    "left" : "if (0 < parts[i].indexOf(\".\"))",
    "right" : "if (0 < parts[i].indexOf(\".\"))",
    "info" : "IfStatement[55701-56215]:IfStatement[55941-56455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55732-56215]:Block[55972-56455]"
  }, {
    "left" : "String nums[] = parts[i].split(\"\\\\.\");",
    "right" : "String nums[] = parts[i].split(\"\\\\.\");",
    "info" : "VariableDeclarationStatement[55742-55780]:VariableDeclarationStatement[55982-56020]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[55789-55886]:TryStatement[56029-56126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55793-55850]:Block[56033-56090]"
  }, {
    "left" : "res[0] = Integer.parseInt(nums[0]);",
    "right" : "res[0] = Integer.parseInt(nums[0]);",
    "info" : "ExpressionStatement[55805-55840]:ExpressionStatement[56045-56080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55883-55886]:Block[56123-56126]"
  }, {
    "left" : "if (1 < nums.length)",
    "right" : "if (1 < nums.length)",
    "info" : "IfStatement[55895-56039]:IfStatement[56135-56279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55916-56039]:Block[56156-56279]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[55928-56029]:TryStatement[56168-56269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55932-55993]:Block[56172-56233]"
  }, {
    "left" : "res[1] = Integer.parseInt(nums[1]);",
    "right" : "res[1] = Integer.parseInt(nums[1]);",
    "info" : "ExpressionStatement[55946-55981]:ExpressionStatement[56186-56221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56026-56029]:Block[56266-56269]"
  }, {
    "left" : "if (2 < nums.length)",
    "right" : "if (2 < nums.length)",
    "info" : "IfStatement[56048-56192]:IfStatement[56288-56432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56069-56192]:Block[56309-56432]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[56081-56182]:TryStatement[56321-56422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56085-56146]:Block[56325-56386]"
  }, {
    "left" : "res[2] = Integer.parseInt(nums[2]);",
    "right" : "res[2] = Integer.parseInt(nums[2]);",
    "info" : "ExpressionStatement[56099-56134]:ExpressionStatement[56339-56374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56179-56182]:Block[56419-56422]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[56201-56207]:BreakStatement[56441-56447]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[56226-56237]:ReturnStatement[56466-56477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56274-56698]:Block[56514-56938]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[56337-56367]:VariableDeclarationStatement[56577-56607]"
  }, {
    "left" : "if (major < 2)",
    "right" : "if (major < 2)",
    "info" : "IfStatement[56372-56694]:IfStatement[56612-56934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56387-56662]:Block[56627-56902]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[56395-56430]:VariableDeclarationStatement[56635-56670]"
  }, {
    "left" : "return ext.indexOf(\"_framebuffer_object\") != -1 &&\n             ext.indexOf(\"_vertex_shader\")      != -1 &&\n             ext.indexOf(\"_shader_objects\")     != -1 &&\n             ext.indexOf(\"_shading_language\")   != -1;",
    "right" : "return ext.indexOf(\"_framebuffer_object\") != -1 &&\n             ext.indexOf(\"_vertex_shader\")      != -1 &&\n             ext.indexOf(\"_shader_objects\")     != -1 &&\n             ext.indexOf(\"_shading_language\")   != -1;",
    "info" : "ReturnStatement[56437-56656]:ReturnStatement[56677-56896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56668-56694]:Block[56908-56934]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[56676-56688]:ReturnStatement[56916-56928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56734-57301]:Block[56974-57541]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[56948-56978]:VariableDeclarationStatement[57188-57218]"
  }, {
    "left" : "if (major < 2)",
    "right" : "if (major < 2)",
    "info" : "IfStatement[56983-57297]:IfStatement[57223-57537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56998-57265]:Block[57238-57505]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[57006-57041]:VariableDeclarationStatement[57246-57281]"
  }, {
    "left" : "return ext.indexOf(\"_fragment_shader\")  != -1 &&\n             ext.indexOf(\"_vertex_shader\")    != -1 &&\n             ext.indexOf(\"_shader_objects\")   != -1 &&\n             ext.indexOf(\"_shading_language\") != -1;",
    "right" : "return ext.indexOf(\"_fragment_shader\")  != -1 &&\n             ext.indexOf(\"_vertex_shader\")    != -1 &&\n             ext.indexOf(\"_shader_objects\")   != -1 &&\n             ext.indexOf(\"_shading_language\") != -1;",
    "info" : "ReturnStatement[57048-57259]:ReturnStatement[57288-57499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57271-57297]:Block[57511-57537]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[57279-57291]:ReturnStatement[57519-57531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57344-57545]:Block[57584-57785]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[57350-57380]:VariableDeclarationStatement[57590-57620]"
  }, {
    "left" : "if (major < 3)",
    "right" : "if (major < 3)",
    "info" : "IfStatement[57385-57541]:IfStatement[57625-57781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57400-57509]:Block[57640-57749]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[57408-57443]:VariableDeclarationStatement[57648-57683]"
  }, {
    "left" : "return -1 < ext.indexOf(\"_texture_non_power_of_two\");",
    "right" : "return -1 < ext.indexOf(\"_texture_non_power_of_two\");",
    "info" : "ReturnStatement[57450-57503]:ReturnStatement[57690-57743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57515-57541]:Block[57755-57781]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[57523-57535]:ReturnStatement[57763-57775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57594-57786]:Block[57834-58026]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[57600-57630]:VariableDeclarationStatement[57840-57870]"
  }, {
    "left" : "if (major < 3)",
    "right" : "if (major < 3)",
    "info" : "IfStatement[57635-57782]:IfStatement[57875-58022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57650-57750]:Block[57890-57990]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[57658-57693]:VariableDeclarationStatement[57898-57933]"
  }, {
    "left" : "return -1 < ext.indexOf(\"_generate_mipmap\");",
    "right" : "return -1 < ext.indexOf(\"_generate_mipmap\");",
    "info" : "ReturnStatement[57700-57744]:ReturnStatement[57940-57984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57756-57782]:Block[57996-58022]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[57764-57776]:ReturnStatement[58004-58016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57836-58036]:Block[58076-58276]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[57842-57872]:VariableDeclarationStatement[58082-58112]"
  }, {
    "left" : "if (major < 3)",
    "right" : "if (major < 3)",
    "info" : "IfStatement[57877-58032]:IfStatement[58117-58272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57892-58000]:Block[58132-58240]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[57900-57935]:VariableDeclarationStatement[58140-58175]"
  }, {
    "left" : "return -1 < ext.indexOf(\"_framebuffer_multisample\");",
    "right" : "return -1 < ext.indexOf(\"_framebuffer_multisample\");",
    "info" : "ReturnStatement[57942-57994]:ReturnStatement[58182-58234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58006-58032]:Block[58246-58272]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[58014-58026]:ReturnStatement[58254-58266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58090-58287]:Block[58330-58527]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[58096-58126]:VariableDeclarationStatement[58336-58366]"
  }, {
    "left" : "if (major < 3)",
    "right" : "if (major < 3)",
    "info" : "IfStatement[58131-58283]:IfStatement[58371-58523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58146-58251]:Block[58386-58491]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[58154-58189]:VariableDeclarationStatement[58394-58429]"
  }, {
    "left" : "return -1 < ext.indexOf(\"_packed_depth_stencil\");",
    "right" : "return -1 < ext.indexOf(\"_packed_depth_stencil\");",
    "info" : "ReturnStatement[58196-58245]:ReturnStatement[58436-58485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58257-58283]:Block[58497-58523]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[58265-58277]:ReturnStatement[58505-58517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58336-58539]:Block[58576-58779]"
  }, {
    "left" : "int major = getGLVersion()[0];",
    "right" : "int major = getGLVersion()[0];",
    "info" : "VariableDeclarationStatement[58342-58372]:VariableDeclarationStatement[58582-58612]"
  }, {
    "left" : "if (major < 3)",
    "right" : "if (major < 3)",
    "info" : "IfStatement[58377-58535]:IfStatement[58617-58775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58392-58503]:Block[58632-58743]"
  }, {
    "left" : "String ext = getString(EXTENSIONS);",
    "right" : "String ext = getString(EXTENSIONS);",
    "info" : "VariableDeclarationStatement[58400-58435]:VariableDeclarationStatement[58640-58675]"
  }, {
    "left" : "return -1 < ext.indexOf(\"_texture_filter_anisotropic\");",
    "right" : "return -1 < ext.indexOf(\"_texture_filter_anisotropic\");",
    "info" : "ReturnStatement[58442-58497]:ReturnStatement[58682-58737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58509-58535]:Block[58749-58775]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[58517-58529]:ReturnStatement[58757-58769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58571-58670]:Block[58811-58910]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[58577-58596]:ExpressionStatement[58817-58836]"
  }, {
    "left" : "getIntegerv(MAX_SAMPLES, intBuffer);",
    "right" : "getIntegerv(MAX_SAMPLES, intBuffer);",
    "info" : "ExpressionStatement[58601-58637]:ExpressionStatement[58841-58877]"
  }, {
    "left" : "return intBuffer.get(0);",
    "right" : "return intBuffer.get(0);",
    "info" : "ReturnStatement[58642-58666]:ReturnStatement[58882-58906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58706-58817]:Block[58946-59057]"
  }, {
    "left" : "intBuffer.rewind();",
    "right" : "intBuffer.rewind();",
    "info" : "ExpressionStatement[58712-58731]:ExpressionStatement[58952-58971]"
  }, {
    "left" : "getIntegerv(MAX_TEXTURE_IMAGE_UNITS, intBuffer);",
    "right" : "getIntegerv(MAX_TEXTURE_IMAGE_UNITS, intBuffer);",
    "info" : "ExpressionStatement[58736-58784]:ExpressionStatement[58976-59024]"
  }, {
    "left" : "return intBuffer.get(0);",
    "right" : "return intBuffer.get(0);",
    "info" : "ReturnStatement[58789-58813]:ReturnStatement[59029-59053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58885-59039]:Block[59125-59279]"
  }, {
    "left" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_BYTE;",
    "right" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_BYTE;",
    "info" : "VariableDeclarationStatement[58891-58959]:VariableDeclarationStatement[59131-59199]"
  }, {
    "left" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder());",
    "right" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder());",
    "info" : "ReturnStatement[58964-59035]:ReturnStatement[59204-59275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59101-59240]:Block[59341-59480]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[59107-59236]:IfStatement[59347-59476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59131-59183]:Block[59371-59423]"
  }, {
    "left" : "return allocateDirectByteBuffer(size);",
    "right" : "return allocateDirectByteBuffer(size);",
    "info" : "ReturnStatement[59139-59177]:ReturnStatement[59379-59417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59189-59236]:Block[59429-59476]"
  }, {
    "left" : "return ByteBuffer.allocate(size);",
    "right" : "return ByteBuffer.allocate(size);",
    "info" : "ReturnStatement[59197-59230]:ReturnStatement[59437-59470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59304-59515]:Block[59544-59755]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[59310-59511]:IfStatement[59550-59751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59334-59463]:Block[59574-59703]"
  }, {
    "left" : "ByteBuffer buf = allocateDirectByteBuffer(arr.length);",
    "right" : "ByteBuffer buf = allocateDirectByteBuffer(arr.length);",
    "info" : "VariableDeclarationStatement[59342-59396]:VariableDeclarationStatement[59582-59636]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[59403-59416]:ExpressionStatement[59643-59656]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[59423-59439]:ExpressionStatement[59663-59679]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[59446-59457]:ReturnStatement[59686-59697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59469-59511]:Block[59709-59751]"
  }, {
    "left" : "return ByteBuffer.wrap(arr);",
    "right" : "return ByteBuffer.wrap(arr);",
    "info" : "ReturnStatement[59477-59505]:ReturnStatement[59717-59745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59654-60166]:Block[59894-60406]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[59660-60146]:IfStatement[59900-60386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59684-59870]:Block[59924-60110]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[59692-59801]:IfStatement[59932-60041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59740-59801]:Block[59980-60041]"
  }, {
    "left" : "buf = allocateDirectByteBuffer(arr.length);",
    "right" : "buf = allocateDirectByteBuffer(arr.length);",
    "info" : "ExpressionStatement[59750-59793]:ExpressionStatement[59990-60033]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[59808-59824]:ExpressionStatement[60048-60064]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[59831-59844]:ExpressionStatement[60071-60084]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[59851-59864]:ExpressionStatement[60091-60104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59876-60146]:Block[60116-60386]"
  }, {
    "left" : "if (wrap)",
    "right" : "if (wrap)",
    "info" : "IfStatement[59884-60140]:IfStatement[60124-60380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59894-59939]:Block[60134-60179]"
  }, {
    "left" : "buf = ByteBuffer.wrap(arr);",
    "right" : "buf = ByteBuffer.wrap(arr);",
    "info" : "ExpressionStatement[59904-59931]:ExpressionStatement[60144-60171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59945-60140]:Block[60185-60380]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[59955-60063]:IfStatement[60195-60303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60003-60063]:Block[60243-60303]"
  }, {
    "left" : "buf = ByteBuffer.allocate(arr.length);",
    "right" : "buf = ByteBuffer.allocate(arr.length);",
    "info" : "ExpressionStatement[60015-60053]:ExpressionStatement[60255-60293]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[60072-60088]:ExpressionStatement[60312-60328]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[60097-60110]:ExpressionStatement[60337-60350]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[60119-60132]:ExpressionStatement[60359-60372]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[60151-60162]:ReturnStatement[60391-60402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60301-60466]:Block[60541-60706]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "right" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "info" : "IfStatement[60307-60462]:IfStatement[60547-60702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60373-60462]:Block[60613-60702]"
  }, {
    "left" : "buf.position(offset);",
    "right" : "buf.position(offset);",
    "info" : "ExpressionStatement[60381-60402]:ExpressionStatement[60621-60642]"
  }, {
    "left" : "buf.put(arr, offset, size);",
    "right" : "buf.put(arr, offset, size);",
    "info" : "ExpressionStatement[60409-60436]:ExpressionStatement[60649-60676]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[60443-60456]:ExpressionStatement[60683-60696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60534-60657]:Block[60774-60897]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[60540-60653]:IfStatement[60780-60893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60583-60653]:Block[60823-60893]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[60591-60607]:ExpressionStatement[60831-60847]"
  }, {
    "left" : "buf.get(arr);",
    "right" : "buf.get(arr);",
    "info" : "ExpressionStatement[60614-60627]:ExpressionStatement[60854-60867]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[60634-60647]:ExpressionStatement[60874-60887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60725-60848]:Block[60965-61088]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[60731-60844]:IfStatement[60971-61084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60774-60844]:Block[61014-61084]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[60782-60798]:ExpressionStatement[61022-61038]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[60805-60818]:ExpressionStatement[61045-61058]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[60825-60838]:ExpressionStatement[61065-61078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60971-61127]:Block[61211-61367]"
  }, {
    "left" : "int n = i1 - i0;",
    "right" : "int n = i1 - i0;",
    "info" : "VariableDeclarationStatement[60977-60993]:VariableDeclarationStatement[61217-61233]"
  }, {
    "left" : "byte[] temp = new byte[n];",
    "right" : "byte[] temp = new byte[n];",
    "info" : "VariableDeclarationStatement[60998-61024]:VariableDeclarationStatement[61238-61264]"
  }, {
    "left" : "Arrays.fill(temp, 0, n, val);",
    "right" : "Arrays.fill(temp, 0, n, val);",
    "info" : "ExpressionStatement[61029-61058]:ExpressionStatement[61269-61298]"
  }, {
    "left" : "buf.position(i0);",
    "right" : "buf.position(i0);",
    "info" : "ExpressionStatement[61063-61080]:ExpressionStatement[61303-61320]"
  }, {
    "left" : "buf.put(temp, 0, n);",
    "right" : "buf.put(temp, 0, n);",
    "info" : "ExpressionStatement[61085-61105]:ExpressionStatement[61325-61345]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[61110-61123]:ExpressionStatement[61350-61363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61197-61380]:Block[61437-61620]"
  }, {
    "left" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_SHORT;",
    "right" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_SHORT;",
    "info" : "VariableDeclarationStatement[61203-61272]:VariableDeclarationStatement[61443-61512]"
  }, {
    "left" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder()).\n           asShortBuffer();",
    "right" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder()).\n           asShortBuffer();",
    "info" : "ReturnStatement[61277-61376]:ReturnStatement[61517-61616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61444-61585]:Block[61684-61825]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[61450-61581]:IfStatement[61690-61821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61474-61527]:Block[61714-61767]"
  }, {
    "left" : "return allocateDirectShortBuffer(size);",
    "right" : "return allocateDirectShortBuffer(size);",
    "info" : "ReturnStatement[61482-61521]:ReturnStatement[61722-61761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61533-61581]:Block[61773-61821]"
  }, {
    "left" : "return ShortBuffer.allocate(size);",
    "right" : "return ShortBuffer.allocate(size);",
    "info" : "ReturnStatement[61541-61575]:ReturnStatement[61781-61815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61652-61866]:Block[61892-62106]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[61658-61862]:IfStatement[61898-62102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61682-61813]:Block[61922-62053]"
  }, {
    "left" : "ShortBuffer buf = allocateDirectShortBuffer(arr.length);",
    "right" : "ShortBuffer buf = allocateDirectShortBuffer(arr.length);",
    "info" : "VariableDeclarationStatement[61690-61746]:VariableDeclarationStatement[61930-61986]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[61753-61766]:ExpressionStatement[61993-62006]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[61773-61789]:ExpressionStatement[62013-62029]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[61796-61807]:ReturnStatement[62036-62047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61819-61862]:Block[62059-62102]"
  }, {
    "left" : "return ShortBuffer.wrap(arr);",
    "right" : "return ShortBuffer.wrap(arr);",
    "info" : "ReturnStatement[61827-61856]:ReturnStatement[62067-62096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62011-62526]:Block[62251-62766]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[62017-62506]:IfStatement[62257-62746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62041-62228]:Block[62281-62468]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[62049-62159]:IfStatement[62289-62399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62097-62159]:Block[62337-62399]"
  }, {
    "left" : "buf = allocateDirectShortBuffer(arr.length);",
    "right" : "buf = allocateDirectShortBuffer(arr.length);",
    "info" : "ExpressionStatement[62107-62151]:ExpressionStatement[62347-62391]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[62166-62182]:ExpressionStatement[62406-62422]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[62189-62202]:ExpressionStatement[62429-62442]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[62209-62222]:ExpressionStatement[62449-62462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62234-62506]:Block[62474-62746]"
  }, {
    "left" : "if (wrap)",
    "right" : "if (wrap)",
    "info" : "IfStatement[62242-62500]:IfStatement[62482-62740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62252-62298]:Block[62492-62538]"
  }, {
    "left" : "buf = ShortBuffer.wrap(arr);",
    "right" : "buf = ShortBuffer.wrap(arr);",
    "info" : "ExpressionStatement[62262-62290]:ExpressionStatement[62502-62530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62304-62500]:Block[62544-62740]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[62314-62423]:IfStatement[62554-62663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62362-62423]:Block[62602-62663]"
  }, {
    "left" : "buf = ShortBuffer.allocate(arr.length);",
    "right" : "buf = ShortBuffer.allocate(arr.length);",
    "info" : "ExpressionStatement[62374-62413]:ExpressionStatement[62614-62653]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[62432-62448]:ExpressionStatement[62672-62688]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[62457-62470]:ExpressionStatement[62697-62710]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[62479-62492]:ExpressionStatement[62719-62732]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[62511-62522]:ReturnStatement[62751-62762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62665-62830]:Block[62905-63070]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "right" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "info" : "IfStatement[62671-62826]:IfStatement[62911-63066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62737-62826]:Block[62977-63066]"
  }, {
    "left" : "buf.position(offset);",
    "right" : "buf.position(offset);",
    "info" : "ExpressionStatement[62745-62766]:ExpressionStatement[62985-63006]"
  }, {
    "left" : "buf.put(arr, offset, size);",
    "right" : "buf.put(arr, offset, size);",
    "info" : "ExpressionStatement[62773-62800]:ExpressionStatement[63013-63040]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[62807-62820]:ExpressionStatement[63047-63060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62901-63024]:Block[63141-63264]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[62907-63020]:IfStatement[63147-63260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62950-63020]:Block[63190-63260]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[62958-62974]:ExpressionStatement[63198-63214]"
  }, {
    "left" : "buf.get(arr);",
    "right" : "buf.get(arr);",
    "info" : "ExpressionStatement[62981-62994]:ExpressionStatement[63221-63234]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[63001-63014]:ExpressionStatement[63241-63254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63095-63218]:Block[63335-63458]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[63101-63214]:IfStatement[63341-63454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63144-63214]:Block[63384-63454]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[63152-63168]:ExpressionStatement[63392-63408]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[63175-63188]:ExpressionStatement[63415-63428]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[63195-63208]:ExpressionStatement[63435-63448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63345-63503]:Block[63585-63743]"
  }, {
    "left" : "int n = i1 - i0;",
    "right" : "int n = i1 - i0;",
    "info" : "VariableDeclarationStatement[63351-63367]:VariableDeclarationStatement[63591-63607]"
  }, {
    "left" : "short[] temp = new short[n];",
    "right" : "short[] temp = new short[n];",
    "info" : "VariableDeclarationStatement[63372-63400]:VariableDeclarationStatement[63612-63640]"
  }, {
    "left" : "Arrays.fill(temp, 0, n, val);",
    "right" : "Arrays.fill(temp, 0, n, val);",
    "info" : "ExpressionStatement[63405-63434]:ExpressionStatement[63645-63674]"
  }, {
    "left" : "buf.position(i0);",
    "right" : "buf.position(i0);",
    "info" : "ExpressionStatement[63439-63456]:ExpressionStatement[63679-63696]"
  }, {
    "left" : "buf.put(temp, 0, n);",
    "right" : "buf.put(temp, 0, n);",
    "info" : "ExpressionStatement[63461-63481]:ExpressionStatement[63701-63721]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[63486-63499]:ExpressionStatement[63726-63739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63569-63748]:Block[63809-63988]"
  }, {
    "left" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_INT;",
    "right" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_INT;",
    "info" : "VariableDeclarationStatement[63575-63642]:VariableDeclarationStatement[63815-63882]"
  }, {
    "left" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder()).\n           asIntBuffer();",
    "right" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder()).\n           asIntBuffer();",
    "info" : "ReturnStatement[63647-63744]:ReturnStatement[63887-63984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63808-63945]:Block[64048-64185]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[63814-63941]:IfStatement[64054-64181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63838-63889]:Block[64078-64129]"
  }, {
    "left" : "return allocateDirectIntBuffer(size);",
    "right" : "return allocateDirectIntBuffer(size);",
    "info" : "ReturnStatement[63846-63883]:ReturnStatement[64086-64123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63895-63941]:Block[64135-64181]"
  }, {
    "left" : "return IntBuffer.allocate(size);",
    "right" : "return IntBuffer.allocate(size);",
    "info" : "ReturnStatement[63903-63935]:ReturnStatement[64143-64175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64006-64214]:Block[64246-64454]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[64012-64210]:IfStatement[64252-64450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64036-64163]:Block[64276-64403]"
  }, {
    "left" : "IntBuffer buf = allocateDirectIntBuffer(arr.length);",
    "right" : "IntBuffer buf = allocateDirectIntBuffer(arr.length);",
    "info" : "VariableDeclarationStatement[64044-64096]:VariableDeclarationStatement[64284-64336]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[64103-64116]:ExpressionStatement[64343-64356]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[64123-64139]:ExpressionStatement[64363-64379]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[64146-64157]:ReturnStatement[64386-64397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64169-64210]:Block[64409-64450]"
  }, {
    "left" : "return IntBuffer.wrap(arr);",
    "right" : "return IntBuffer.wrap(arr);",
    "info" : "ReturnStatement[64177-64204]:ReturnStatement[64417-64444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64347-64856]:Block[64587-65096]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[64353-64836]:IfStatement[64593-65076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64377-64562]:Block[64617-64802]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[64385-64493]:IfStatement[64625-64733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64433-64493]:Block[64673-64733]"
  }, {
    "left" : "buf = allocateDirectIntBuffer(arr.length);",
    "right" : "buf = allocateDirectIntBuffer(arr.length);",
    "info" : "ExpressionStatement[64443-64485]:ExpressionStatement[64683-64725]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[64500-64516]:ExpressionStatement[64740-64756]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[64523-64536]:ExpressionStatement[64763-64776]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[64543-64556]:ExpressionStatement[64783-64796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64568-64836]:Block[64808-65076]"
  }, {
    "left" : "if (wrap)",
    "right" : "if (wrap)",
    "info" : "IfStatement[64576-64830]:IfStatement[64816-65070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64586-64630]:Block[64826-64870]"
  }, {
    "left" : "buf = IntBuffer.wrap(arr);",
    "right" : "buf = IntBuffer.wrap(arr);",
    "info" : "ExpressionStatement[64596-64622]:ExpressionStatement[64836-64862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64636-64830]:Block[64876-65070]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[64646-64753]:IfStatement[64886-64993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64694-64753]:Block[64934-64993]"
  }, {
    "left" : "buf = IntBuffer.allocate(arr.length);",
    "right" : "buf = IntBuffer.allocate(arr.length);",
    "info" : "ExpressionStatement[64706-64743]:ExpressionStatement[64946-64983]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[64762-64778]:ExpressionStatement[65002-65018]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[64787-64800]:ExpressionStatement[65027-65040]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[64809-64822]:ExpressionStatement[65049-65062]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[64841-64852]:ReturnStatement[65081-65092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64987-65158]:Block[65227-65398]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "right" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "info" : "IfStatement[64994-65153]:IfStatement[65234-65393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65060-65153]:Block[65300-65393]"
  }, {
    "left" : "buf.position(offset);",
    "right" : "buf.position(offset);",
    "info" : "ExpressionStatement[65069-65090]:ExpressionStatement[65309-65330]"
  }, {
    "left" : "buf.put(arr, offset, size);",
    "right" : "buf.put(arr, offset, size);",
    "info" : "ExpressionStatement[65098-65125]:ExpressionStatement[65338-65365]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[65133-65146]:ExpressionStatement[65373-65386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65223-65346]:Block[65463-65586]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[65229-65342]:IfStatement[65469-65582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65272-65342]:Block[65512-65582]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[65280-65296]:ExpressionStatement[65520-65536]"
  }, {
    "left" : "buf.get(arr);",
    "right" : "buf.get(arr);",
    "info" : "ExpressionStatement[65303-65316]:ExpressionStatement[65543-65556]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[65323-65336]:ExpressionStatement[65563-65576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65411-65534]:Block[65651-65774]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[65417-65530]:IfStatement[65657-65770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65460-65530]:Block[65700-65770]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[65468-65484]:ExpressionStatement[65708-65724]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[65491-65504]:ExpressionStatement[65731-65744]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[65511-65524]:ExpressionStatement[65751-65764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65615-65769]:Block[65855-66009]"
  }, {
    "left" : "int n = i1 - i0;",
    "right" : "int n = i1 - i0;",
    "info" : "VariableDeclarationStatement[65621-65637]:VariableDeclarationStatement[65861-65877]"
  }, {
    "left" : "int[] temp = new int[n];",
    "right" : "int[] temp = new int[n];",
    "info" : "VariableDeclarationStatement[65642-65666]:VariableDeclarationStatement[65882-65906]"
  }, {
    "left" : "Arrays.fill(temp, 0, n, val);",
    "right" : "Arrays.fill(temp, 0, n, val);",
    "info" : "ExpressionStatement[65671-65700]:ExpressionStatement[65911-65940]"
  }, {
    "left" : "buf.position(i0);",
    "right" : "buf.position(i0);",
    "info" : "ExpressionStatement[65705-65722]:ExpressionStatement[65945-65962]"
  }, {
    "left" : "buf.put(temp, 0, n);",
    "right" : "buf.put(temp, 0, n);",
    "info" : "ExpressionStatement[65727-65747]:ExpressionStatement[65967-65987]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[65752-65765]:ExpressionStatement[65992-66005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65839-66022]:Block[66079-66262]"
  }, {
    "left" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_FLOAT;",
    "right" : "int bytes = PApplet.max(MIN_DIRECT_BUFFER_SIZE, size) * SIZEOF_FLOAT;",
    "info" : "VariableDeclarationStatement[65845-65914]:VariableDeclarationStatement[66085-66154]"
  }, {
    "left" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder()).\n           asFloatBuffer();",
    "right" : "return ByteBuffer.allocateDirect(bytes).order(ByteOrder.nativeOrder()).\n           asFloatBuffer();",
    "info" : "ReturnStatement[65919-66018]:ReturnStatement[66159-66258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66086-66227]:Block[66326-66467]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[66092-66223]:IfStatement[66332-66463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66116-66169]:Block[66356-66409]"
  }, {
    "left" : "return allocateDirectFloatBuffer(size);",
    "right" : "return allocateDirectFloatBuffer(size);",
    "info" : "ReturnStatement[66124-66163]:ReturnStatement[66364-66403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66175-66223]:Block[66415-66463]"
  }, {
    "left" : "return FloatBuffer.allocate(size);",
    "right" : "return FloatBuffer.allocate(size);",
    "info" : "ReturnStatement[66183-66217]:ReturnStatement[66423-66457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66294-66508]:Block[66534-66748]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[66300-66504]:IfStatement[66540-66744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66324-66455]:Block[66564-66695]"
  }, {
    "left" : "FloatBuffer buf = allocateDirectFloatBuffer(arr.length);",
    "right" : "FloatBuffer buf = allocateDirectFloatBuffer(arr.length);",
    "info" : "VariableDeclarationStatement[66332-66388]:VariableDeclarationStatement[66572-66628]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[66395-66408]:ExpressionStatement[66635-66648]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[66415-66431]:ExpressionStatement[66655-66671]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[66438-66449]:ReturnStatement[66678-66689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66461-66504]:Block[66701-66744]"
  }, {
    "left" : "return FloatBuffer.wrap(arr);",
    "right" : "return FloatBuffer.wrap(arr);",
    "info" : "ReturnStatement[66469-66498]:ReturnStatement[66709-66738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66653-67168]:Block[66893-67408]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS)",
    "right" : "if (USE_DIRECT_BUFFERS)",
    "info" : "IfStatement[66659-67148]:IfStatement[66899-67388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66683-66870]:Block[66923-67110]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[66691-66801]:IfStatement[66931-67041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66739-66801]:Block[66979-67041]"
  }, {
    "left" : "buf = allocateDirectFloatBuffer(arr.length);",
    "right" : "buf = allocateDirectFloatBuffer(arr.length);",
    "info" : "ExpressionStatement[66749-66793]:ExpressionStatement[66989-67033]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[66808-66824]:ExpressionStatement[67048-67064]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[66831-66844]:ExpressionStatement[67071-67084]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[66851-66864]:ExpressionStatement[67091-67104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66876-67148]:Block[67116-67388]"
  }, {
    "left" : "if (wrap)",
    "right" : "if (wrap)",
    "info" : "IfStatement[66884-67142]:IfStatement[67124-67382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66894-66940]:Block[67134-67180]"
  }, {
    "left" : "buf = FloatBuffer.wrap(arr);",
    "right" : "buf = FloatBuffer.wrap(arr);",
    "info" : "ExpressionStatement[66904-66932]:ExpressionStatement[67144-67172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66946-67142]:Block[67186-67382]"
  }, {
    "left" : "if (buf == null || buf.capacity() < arr.length)",
    "right" : "if (buf == null || buf.capacity() < arr.length)",
    "info" : "IfStatement[66956-67065]:IfStatement[67196-67305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67004-67065]:Block[67244-67305]"
  }, {
    "left" : "buf = FloatBuffer.allocate(arr.length);",
    "right" : "buf = FloatBuffer.allocate(arr.length);",
    "info" : "ExpressionStatement[67016-67055]:ExpressionStatement[67256-67295]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[67074-67090]:ExpressionStatement[67314-67330]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[67099-67112]:ExpressionStatement[67339-67352]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[67121-67134]:ExpressionStatement[67361-67374]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[67153-67164]:ReturnStatement[67393-67404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67305-67476]:Block[67545-67716]"
  }, {
    "left" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "right" : "if (USE_DIRECT_BUFFERS || (buf.hasArray() && buf.array() != arr))",
    "info" : "IfStatement[67312-67471]:IfStatement[67552-67711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67378-67471]:Block[67618-67711]"
  }, {
    "left" : "buf.position(offset);",
    "right" : "buf.position(offset);",
    "info" : "ExpressionStatement[67387-67408]:ExpressionStatement[67627-67648]"
  }, {
    "left" : "buf.put(arr, offset, size);",
    "right" : "buf.put(arr, offset, size);",
    "info" : "ExpressionStatement[67416-67443]:ExpressionStatement[67656-67683]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[67451-67464]:ExpressionStatement[67691-67704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67547-67670]:Block[67787-67910]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[67553-67666]:IfStatement[67793-67906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67596-67666]:Block[67836-67906]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[67604-67620]:ExpressionStatement[67844-67860]"
  }, {
    "left" : "buf.get(arr);",
    "right" : "buf.get(arr);",
    "info" : "ExpressionStatement[67627-67640]:ExpressionStatement[67867-67880]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[67647-67660]:ExpressionStatement[67887-67900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67741-67864]:Block[67981-68104]"
  }, {
    "left" : "if (!buf.hasArray() || buf.array() != arr)",
    "right" : "if (!buf.hasArray() || buf.array() != arr)",
    "info" : "IfStatement[67747-67860]:IfStatement[67987-68100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67790-67860]:Block[68030-68100]"
  }, {
    "left" : "buf.position(0);",
    "right" : "buf.position(0);",
    "info" : "ExpressionStatement[67798-67814]:ExpressionStatement[68038-68054]"
  }, {
    "left" : "buf.put(arr);",
    "right" : "buf.put(arr);",
    "info" : "ExpressionStatement[67821-67834]:ExpressionStatement[68061-68074]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[67841-67854]:ExpressionStatement[68081-68094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67991-68149]:Block[68231-68389]"
  }, {
    "left" : "int n = i1 - i0;",
    "right" : "int n = i1 - i0;",
    "info" : "VariableDeclarationStatement[67997-68013]:VariableDeclarationStatement[68237-68253]"
  }, {
    "left" : "float[] temp = new float[n];",
    "right" : "float[] temp = new float[n];",
    "info" : "VariableDeclarationStatement[68018-68046]:VariableDeclarationStatement[68258-68286]"
  }, {
    "left" : "Arrays.fill(temp, 0, n, val);",
    "right" : "Arrays.fill(temp, 0, n, val);",
    "info" : "ExpressionStatement[68051-68080]:ExpressionStatement[68291-68320]"
  }, {
    "left" : "buf.position(i0);",
    "right" : "buf.position(i0);",
    "info" : "ExpressionStatement[68085-68102]:ExpressionStatement[68325-68342]"
  }, {
    "left" : "buf.put(temp, 0, n);",
    "right" : "buf.put(temp, 0, n);",
    "info" : "ExpressionStatement[68107-68127]:ExpressionStatement[68347-68367]"
  }, {
    "left" : "buf.rewind();",
    "right" : "buf.rewind();",
    "info" : "ExpressionStatement[68132-68145]:ExpressionStatement[68372-68385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69312-69332]:Block[69552-69572]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[69318-69328]:ReturnStatement[69558-69568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82260-82525]:Block[82500-82765]"
  }, {
    "left" : "boolean pgCall = format != STENCIL_INDEX &&\n                     format != DEPTH_COMPONENT && format != DEPTH_STENCIL;",
    "right" : "boolean pgCall = format != STENCIL_INDEX &&\n                     format != DEPTH_COMPONENT && format != DEPTH_STENCIL;",
    "info" : "VariableDeclarationStatement[82266-82384]:VariableDeclarationStatement[82506-82624]"
  }, {
    "left" : "if (pgCall)",
    "right" : "if (pgCall)",
    "info" : "IfStatement[82389-82422]:IfStatement[82629-82662]"
  }, {
    "left" : "pg.beginReadPixels();",
    "right" : "pg.beginReadPixels();",
    "info" : "ExpressionStatement[82401-82422]:ExpressionStatement[82641-82662]"
  }, {
    "left" : "readPixelsImpl(x, y, width, height, format, type, buffer);",
    "right" : "readPixelsImpl(x, y, width, height, format, type, buffer);",
    "info" : "ExpressionStatement[82427-82485]:ExpressionStatement[82667-82725]"
  }, {
    "left" : "if (pgCall)",
    "right" : "if (pgCall)",
    "info" : "IfStatement[82490-82521]:IfStatement[82730-82761]"
  }, {
    "left" : "pg.endReadPixels();",
    "right" : "pg.endReadPixels();",
    "info" : "ExpressionStatement[82502-82521]:ExpressionStatement[82742-82761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86294-86371]:Block[86534-86611]"
  }, {
    "left" : "activeTexUnit = texture - TEXTURE0;",
    "right" : "activeTexUnit = texture - TEXTURE0;",
    "info" : "ExpressionStatement[86300-86335]:ExpressionStatement[86540-86575]"
  }, {
    "left" : "activeTextureImpl(texture);",
    "right" : "activeTextureImpl(texture);",
    "info" : "ExpressionStatement[86340-86367]:ExpressionStatement[86580-86607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86483-86930]:Block[86723-87170]"
  }, {
    "left" : "bindTextureImpl(target, texture);",
    "right" : "bindTextureImpl(target, texture);",
    "info" : "ExpressionStatement[86489-86522]:ExpressionStatement[86729-86762]"
  }, {
    "left" : "if (boundTextures == null)",
    "right" : "if (boundTextures == null)",
    "info" : "IfStatement[86528-86647]:IfStatement[86768-86887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86555-86647]:Block[86795-86887]"
  }, {
    "left" : "maxTexUnits = getMaxTexUnits();",
    "right" : "maxTexUnits = getMaxTexUnits();",
    "info" : "ExpressionStatement[86563-86594]:ExpressionStatement[86803-86834]"
  }, {
    "left" : "boundTextures = new int[maxTexUnits][2];",
    "right" : "boundTextures = new int[maxTexUnits][2];",
    "info" : "ExpressionStatement[86601-86641]:ExpressionStatement[86841-86881]"
  }, {
    "left" : "if (maxTexUnits <= activeTexUnit)",
    "right" : "if (maxTexUnits <= activeTexUnit)",
    "info" : "IfStatement[86653-86743]:IfStatement[86893-86983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86687-86743]:Block[86927-86983]"
  }, {
    "left" : "throw new RuntimeException(TEXUNIT_ERROR);",
    "right" : "throw new RuntimeException(TEXUNIT_ERROR);",
    "info" : "ThrowStatement[86695-86737]:ThrowStatement[86935-86977]"
  }, {
    "left" : "if (target == TEXTURE_2D)",
    "right" : "if (target == TEXTURE_2D)",
    "info" : "IfStatement[86749-86926]:IfStatement[86989-87166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86775-86831]:Block[87015-87071]"
  }, {
    "left" : "boundTextures[activeTexUnit][0] = texture;",
    "right" : "boundTextures[activeTexUnit][0] = texture;",
    "info" : "ExpressionStatement[86783-86825]:ExpressionStatement[87023-87065]"
  }, {
    "left" : "if (target == TEXTURE_RECTANGLE)",
    "right" : "if (target == TEXTURE_RECTANGLE)",
    "info" : "IfStatement[86837-86926]:IfStatement[87077-87166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[86870-86926]:Block[87110-87166]"
  }, {
    "left" : "boundTextures[activeTexUnit][1] = texture;",
    "right" : "boundTextures[activeTexUnit][1] = texture;",
    "info" : "ExpressionStatement[86878-86920]:ExpressionStatement[87118-87160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92502-92651]:Block[92742-92891]"
  }, {
    "left" : "pg.beginBindFramebuffer(target, framebuffer);",
    "right" : "pg.beginBindFramebuffer(target, framebuffer);",
    "info" : "ExpressionStatement[92508-92553]:ExpressionStatement[92748-92793]"
  }, {
    "left" : "bindFramebufferImpl(target, framebuffer);",
    "right" : "bindFramebufferImpl(target, framebuffer);",
    "info" : "ExpressionStatement[92558-92599]:ExpressionStatement[92798-92839]"
  }, {
    "left" : "pg.endBindFramebuffer(target, framebuffer);",
    "right" : "pg.endBindFramebuffer(target, framebuffer);",
    "info" : "ExpressionStatement[92604-92647]:ExpressionStatement[92844-92887]"
  } ]
}