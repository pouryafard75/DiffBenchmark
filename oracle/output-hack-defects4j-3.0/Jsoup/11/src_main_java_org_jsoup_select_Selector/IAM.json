{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Selector",
      "right" : "Selector",
      "info" : "TypeDeclaration[229-18666]:TypeDeclaration[229-19567]"
    }, {
      "left" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "right" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "info" : "FieldDeclaration[5977-6047]:FieldDeclaration[5977-6047]"
    }, {
      "left" : "private final Element root;",
      "right" : "private final Element root;",
      "info" : "FieldDeclaration[6052-6079]:FieldDeclaration[6052-6079]"
    }, {
      "left" : "private final LinkedHashSet<Element> elements;",
      "right" : "private final LinkedHashSet<Element> elements;",
      "info" : "FieldDeclaration[6084-6130]:FieldDeclaration[6084-6130]"
    }, {
      "left" : "private final String query;",
      "right" : "private final String query;",
      "info" : "FieldDeclaration[6174-6201]:FieldDeclaration[6174-6201]"
    }, {
      "left" : "private final TokenQueue tq;",
      "right" : "private final TokenQueue tq;",
      "info" : "FieldDeclaration[6206-6234]:FieldDeclaration[6206-6234]"
    }, {
      "left" : "private Selector(String query, Element root)",
      "right" : "private Selector(String query, Element root)",
      "info" : "MethodDeclaration[6240-6571]:MethodDeclaration[6240-6571]"
    }, {
      "left" : "public static Elements select(String query, Element root)",
      "right" : "public static Elements select(String query, Element root)",
      "info" : "MethodDeclaration[6577-6869]:MethodDeclaration[6577-6869]"
    }, {
      "left" : "public static Elements select(String query, Iterable<Element> roots)",
      "right" : "public static Elements select(String query, Iterable<Element> roots)",
      "info" : "MethodDeclaration[6875-7405]:MethodDeclaration[6875-7405]"
    }, {
      "left" : "private Elements select()",
      "right" : "private Elements select()",
      "info" : "MethodDeclaration[7411-8614]:MethodDeclaration[7411-8708]"
    }, {
      "left" : "private void combinator(String combinator)",
      "right" : "private void combinator(String combinator)",
      "info" : "MethodDeclaration[8624-9458]:MethodDeclaration[8718-9552]"
    }, {
      "left" : "private Elements findElements()",
      "right" : "private Elements findElements()",
      "info" : "MethodDeclaration[9468-10659]:MethodDeclaration[9562-10821]"
    }, {
      "left" : "private void addElements(Collection<Element> add)",
      "right" : "private void addElements(Collection<Element> add)",
      "info" : "MethodDeclaration[10669-10756]:MethodDeclaration[10831-10918]"
    }, {
      "left" : "private void intersectElements(Collection<Element> intersect)",
      "right" : "private void intersectElements(Collection<Element> intersect)",
      "info" : "MethodDeclaration[10766-10874]:MethodDeclaration[10928-11036]"
    }, {
      "left" : "private Elements byId()",
      "right" : "private Elements byId()",
      "info" : "MethodDeclaration[10880-11155]:MethodDeclaration[11042-11317]"
    }, {
      "left" : "private Elements byClass()",
      "right" : "private Elements byClass()",
      "info" : "MethodDeclaration[11161-11339]:MethodDeclaration[11323-11501]"
    }, {
      "left" : "private Elements byTag()",
      "right" : "private Elements byTag()",
      "info" : "MethodDeclaration[11345-11697]:MethodDeclaration[11507-11859]"
    }, {
      "left" : "private Elements byAttribute()",
      "right" : "private Elements byAttribute()",
      "info" : "MethodDeclaration[11703-13134]:MethodDeclaration[11865-13296]"
    }, {
      "left" : "private Elements allElements()",
      "right" : "private Elements allElements()",
      "info" : "MethodDeclaration[13140-13216]:MethodDeclaration[13302-13378]"
    }, {
      "left" : "private Elements indexLessThan()",
      "right" : "private Elements indexLessThan()",
      "info" : "MethodDeclaration[13264-13368]:MethodDeclaration[13426-13530]"
    }, {
      "left" : "private Elements indexGreaterThan()",
      "right" : "private Elements indexGreaterThan()",
      "info" : "MethodDeclaration[13378-13488]:MethodDeclaration[13540-13650]"
    }, {
      "left" : "private Elements indexEquals()",
      "right" : "private Elements indexEquals()",
      "info" : "MethodDeclaration[13498-13598]:MethodDeclaration[13660-13760]"
    }, {
      "left" : "private int consumeIndex()",
      "right" : "private int consumeIndex()",
      "info" : "MethodDeclaration[13604-13807]:MethodDeclaration[13766-13969]"
    }, {
      "left" : "private Elements has()",
      "right" : "private Elements has()",
      "info" : "MethodDeclaration[13845-14118]:MethodDeclaration[14007-14280]"
    }, {
      "left" : "private Elements contains(boolean own)",
      "right" : "private Elements contains(boolean own)",
      "info" : "MethodDeclaration[14186-14568]:MethodDeclaration[14348-14730]"
    }, {
      "left" : "private Elements matches(boolean own)",
      "right" : "private Elements matches(boolean own)",
      "info" : "MethodDeclaration[14620-15003]:MethodDeclaration[14782-15165]"
    }, {
      "left" : "private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates)",
      "right" : "private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates)",
      "info" : "MethodDeclaration[15065-15511]:MethodDeclaration[15500-15946]"
    }, {
      "left" : "private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates)",
      "right" : "private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates)",
      "info" : "MethodDeclaration[15699-16109]:MethodDeclaration[16134-16544]"
    }, {
      "left" : "private static Elements filterForParentsOfDescendants(Collection<Element> parents, Collection<Element> children)",
      "right" : "private static Elements filterForParentsOfDescendants(Collection<Element> parents, Collection<Element> children)",
      "info" : "MethodDeclaration[16192-16605]:MethodDeclaration[16627-17040]"
    }, {
      "left" : "private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "right" : "private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "info" : "MethodDeclaration[16640-17248]:MethodDeclaration[17075-17683]"
    }, {
      "left" : "private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "right" : "private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates)",
      "info" : "MethodDeclaration[17285-17891]:MethodDeclaration[17720-18326]"
    }, {
      "left" : "private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates)",
      "right" : "private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates)",
      "info" : "MethodDeclaration[17955-18369]:MethodDeclaration[18390-18804]"
    }, {
      "left" : "SelectorParseException",
      "right" : "SelectorParseException",
      "info" : "TypeDeclaration[18457-18664]:TypeDeclaration[19358-19565]"
    }, {
      "left" : "public SelectorParseException(String msg, Object... params)",
      "right" : "public SelectorParseException(String msg, Object... params)",
      "info" : "MethodDeclaration[18540-18658]:MethodDeclaration[19441-19559]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5949-5955]:Modifier[5949-5955]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5956-5961]:TYPE_DECLARATION_KIND[5956-5961]"
    }, {
      "left" : "Selector",
      "right" : "Selector",
      "info" : "SimpleName[5962-5970]:SimpleName[5962-5970]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6240-6247]:Modifier[6240-6247]"
    }, {
      "left" : "Selector",
      "right" : "Selector",
      "info" : "SimpleName[6248-6256]:SimpleName[6248-6256]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[6257-6269]:SingleVariableDeclaration[6257-6269]"
    }, {
      "left" : "Element root",
      "right" : "Element root",
      "info" : "SingleVariableDeclaration[6271-6283]:SingleVariableDeclaration[6271-6283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6285-6571]:Block[6285-6571]"
    }, {
      "left" : "Validate.notNull(query);",
      "right" : "Validate.notNull(query);",
      "info" : "ExpressionStatement[6295-6319]:ExpressionStatement[6295-6319]"
    }, {
      "left" : "query = query.trim();",
      "right" : "query = query.trim();",
      "info" : "ExpressionStatement[6328-6349]:ExpressionStatement[6328-6349]"
    }, {
      "left" : "Validate.notEmpty(query);",
      "right" : "Validate.notEmpty(query);",
      "info" : "ExpressionStatement[6358-6383]:ExpressionStatement[6358-6383]"
    }, {
      "left" : "Validate.notNull(root);",
      "right" : "Validate.notNull(root);",
      "info" : "ExpressionStatement[6392-6415]:ExpressionStatement[6392-6415]"
    }, {
      "left" : "this.elements = new LinkedHashSet<Element>();",
      "right" : "this.elements = new LinkedHashSet<Element>();",
      "info" : "ExpressionStatement[6425-6470]:ExpressionStatement[6425-6470]"
    }, {
      "left" : "this.query = query;",
      "right" : "this.query = query;",
      "info" : "ExpressionStatement[6479-6498]:ExpressionStatement[6479-6498]"
    }, {
      "left" : "this.root = root;",
      "right" : "this.root = root;",
      "info" : "ExpressionStatement[6507-6524]:ExpressionStatement[6507-6524]"
    }, {
      "left" : "this.tq = new TokenQueue(query);",
      "right" : "this.tq = new TokenQueue(query);",
      "info" : "ExpressionStatement[6533-6565]:ExpressionStatement[6533-6565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6753-6759]:Modifier[6753-6759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6760-6766]:Modifier[6760-6766]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[6767-6775]:SimpleType[6767-6775]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[6776-6782]:SimpleName[6776-6782]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[6783-6795]:SingleVariableDeclaration[6783-6795]"
    }, {
      "left" : "Element root",
      "right" : "Element root",
      "info" : "SingleVariableDeclaration[6797-6809]:SingleVariableDeclaration[6797-6809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6811-6869]:Block[6811-6869]"
    }, {
      "left" : "return new Selector(query, root).select();",
      "right" : "return new Selector(query, root).select();",
      "info" : "ReturnStatement[6821-6863]:ReturnStatement[6821-6863]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7053-7059]:Modifier[7053-7059]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7060-7066]:Modifier[7060-7066]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[7067-7075]:SimpleType[7067-7075]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[7076-7082]:SimpleName[7076-7082]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[7083-7095]:SingleVariableDeclaration[7083-7095]"
    }, {
      "left" : "Iterable<Element> roots",
      "right" : "Iterable<Element> roots",
      "info" : "SingleVariableDeclaration[7097-7120]:SingleVariableDeclaration[7097-7120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7122-7405]:Block[7122-7405]"
    }, {
      "left" : "Validate.notEmpty(query);",
      "right" : "Validate.notEmpty(query);",
      "info" : "ExpressionStatement[7132-7157]:ExpressionStatement[7132-7157]"
    }, {
      "left" : "Validate.notNull(roots);",
      "right" : "Validate.notNull(roots);",
      "info" : "ExpressionStatement[7166-7190]:ExpressionStatement[7166-7190]"
    }, {
      "left" : "LinkedHashSet<Element> elements = new LinkedHashSet<Element>();",
      "right" : "LinkedHashSet<Element> elements = new LinkedHashSet<Element>();",
      "info" : "VariableDeclarationStatement[7199-7262]:VariableDeclarationStatement[7199-7262]"
    }, {
      "left" : "for (Element root : roots)",
      "right" : "for (Element root : roots)",
      "info" : "EnhancedForStatement[7272-7360]:EnhancedForStatement[7272-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7299-7360]:Block[7299-7360]"
    }, {
      "left" : "elements.addAll(select(query, root));",
      "right" : "elements.addAll(select(query, root));",
      "info" : "ExpressionStatement[7313-7350]:ExpressionStatement[7313-7350]"
    }, {
      "left" : "return new Elements(elements);",
      "right" : "return new Elements(elements);",
      "info" : "ReturnStatement[7369-7399]:ReturnStatement[7369-7399]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7411-7418]:Modifier[7411-7418]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[7419-7427]:SimpleType[7419-7427]"
    }, {
      "left" : "select",
      "right" : "select",
      "info" : "SimpleName[7428-7434]:SimpleName[7428-7434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7437-8614]:Block[7437-8708]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[7447-7470]:ExpressionStatement[7447-7470]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[7488-7765]:IfStatement[7488-7859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7520-7665]:Block[7520-7665]"
    }, {
      "left" : "elements.add(root);",
      "right" : "elements.add(root);",
      "info" : "ExpressionStatement[7587-7606]:ExpressionStatement[7587-7606]"
    }, {
      "left" : "combinator(tq.consume().toString());",
      "right" : "combinator(tq.consume().toString());",
      "info" : "ExpressionStatement[7619-7655]:ExpressionStatement[7619-7655]"
    }, {
      "left" : "addElements(findElements());",
      "right" : "addElements(findElements());",
      "info" : "ExpressionStatement[7685-7713]:ExpressionStatement[7779-7807]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[7802-8569]:WhileStatement[7896-8663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7824-8569]:Block[7918-8663]"
    }, {
      "left" : "boolean seenWhite = tq.consumeWhitespace();",
      "right" : "boolean seenWhite = tq.consumeWhitespace();",
      "info" : "VariableDeclarationStatement[7874-7917]:VariableDeclarationStatement[7968-8011]"
    }, {
      "left" : "if (tq.matchChomp(\",\"))",
      "right" : "if (tq.matchChomp(\",\"))",
      "info" : "IfStatement[7943-8559]:IfStatement[8037-8653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7967-8168]:Block[8061-8262]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[7997-8154]:WhileStatement[8091-8248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8019-8154]:Block[8113-8248]"
    }, {
      "left" : "String subQuery = tq.chompTo(\",\");",
      "right" : "String subQuery = tq.chompTo(\",\");",
      "info" : "VariableDeclarationStatement[8041-8075]:VariableDeclarationStatement[8135-8169]"
    }, {
      "left" : "elements.addAll(select(subQuery, root));",
      "right" : "elements.addAll(select(subQuery, root));",
      "info" : "ExpressionStatement[8096-8136]:ExpressionStatement[8190-8230]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[8174-8559]:IfStatement[8268-8653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8206-8274]:Block[8300-8368]"
    }, {
      "left" : "combinator(tq.consume().toString());",
      "right" : "combinator(tq.consume().toString());",
      "info" : "ExpressionStatement[8224-8260]:ExpressionStatement[8318-8354]"
    }, {
      "left" : "if (seenWhite)",
      "right" : "if (seenWhite)",
      "info" : "IfStatement[8280-8559]:IfStatement[8374-8653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8295-8343]:Block[8389-8437]"
    }, {
      "left" : "combinator(\" \");",
      "right" : "combinator(\" \");",
      "info" : "ExpressionStatement[8313-8329]:ExpressionStatement[8407-8423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8349-8559]:Block[8443-8653]"
    }, {
      "left" : "Elements candidates = findElements();",
      "right" : "Elements candidates = findElements();",
      "info" : "VariableDeclarationStatement[8402-8439]:VariableDeclarationStatement[8496-8533]"
    }, {
      "left" : "intersectElements(filterForSelf(elements, candidates));",
      "right" : "intersectElements(filterForSelf(elements, candidates));",
      "info" : "ExpressionStatement[8490-8545]:ExpressionStatement[8584-8639]"
    }, {
      "left" : "return new Elements(elements);",
      "right" : "return new Elements(elements);",
      "info" : "ReturnStatement[8578-8608]:ReturnStatement[8672-8702]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8624-8631]:Modifier[8718-8725]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8632-8636]:PrimitiveType[8726-8730]"
    }, {
      "left" : "combinator",
      "right" : "combinator",
      "info" : "SimpleName[8637-8647]:SimpleName[8731-8741]"
    }, {
      "left" : "String combinator",
      "right" : "String combinator",
      "info" : "SingleVariableDeclaration[8648-8665]:SingleVariableDeclaration[8742-8759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8667-9458]:Block[8761-9552]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[8677-8700]:ExpressionStatement[8771-8794]"
    }, {
      "left" : "String subQuery = tq.consumeToAny(combinators);",
      "right" : "String subQuery = tq.consumeToAny(combinators);",
      "info" : "VariableDeclarationStatement[8709-8756]:VariableDeclarationStatement[8803-8850]"
    }, {
      "left" : "Elements output;",
      "right" : "Elements output;",
      "info" : "VariableDeclarationStatement[8800-8816]:VariableDeclarationStatement[8894-8910]"
    }, {
      "left" : "if (combinator.equals(\">\"))",
      "right" : "if (combinator.equals(\">\"))",
      "info" : "IfStatement[8825-9392]:IfStatement[8919-9486]"
    }, {
      "left" : "output = filterForChildren(elements, select(subQuery, elements));",
      "right" : "output = filterForChildren(elements, select(subQuery, elements));",
      "info" : "ExpressionStatement[8865-8930]:ExpressionStatement[8959-9024]"
    }, {
      "left" : "if (combinator.equals(\" \"))",
      "right" : "if (combinator.equals(\" \"))",
      "info" : "IfStatement[8944-9392]:IfStatement[9038-9486]"
    }, {
      "left" : "output = filterForDescendants(elements, select(subQuery, elements));",
      "right" : "output = filterForDescendants(elements, select(subQuery, elements));",
      "info" : "ExpressionStatement[8984-9052]:ExpressionStatement[9078-9146]"
    }, {
      "left" : "if (combinator.equals(\"+\"))",
      "right" : "if (combinator.equals(\"+\"))",
      "info" : "IfStatement[9066-9392]:IfStatement[9160-9486]"
    }, {
      "left" : "output = filterForAdjacentSiblings(elements, select(subQuery, root));",
      "right" : "output = filterForAdjacentSiblings(elements, select(subQuery, root));",
      "info" : "ExpressionStatement[9106-9175]:ExpressionStatement[9200-9269]"
    }, {
      "left" : "if (combinator.equals(\"~\"))",
      "right" : "if (combinator.equals(\"~\"))",
      "info" : "IfStatement[9189-9392]:IfStatement[9283-9486]"
    }, {
      "left" : "output = filterForGeneralSiblings(elements, select(subQuery, root));",
      "right" : "output = filterForGeneralSiblings(elements, select(subQuery, root));",
      "info" : "ExpressionStatement[9229-9297]:ExpressionStatement[9323-9391]"
    }, {
      "left" : "throw new IllegalStateException(\"Unknown combinator: \" + combinator);",
      "right" : "throw new IllegalStateException(\"Unknown combinator: \" + combinator);",
      "info" : "ThrowStatement[9323-9392]:ThrowStatement[9417-9486]"
    }, {
      "left" : "elements.clear();",
      "right" : "elements.clear();",
      "info" : "ExpressionStatement[9410-9427]:ExpressionStatement[9504-9521]"
    }, {
      "left" : "elements.addAll(output);",
      "right" : "elements.addAll(output);",
      "info" : "ExpressionStatement[9428-9452]:ExpressionStatement[9522-9546]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9468-9475]:Modifier[9562-9569]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[9476-9484]:SimpleType[9570-9578]"
    }, {
      "left" : "findElements",
      "right" : "findElements",
      "info" : "SimpleName[9485-9497]:SimpleName[9579-9591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9500-10659]:Block[9594-10821]"
    }, {
      "left" : "if (tq.matchChomp(\"#\"))",
      "right" : "if (tq.matchChomp(\"#\"))",
      "info" : "IfStatement[9510-10653]:IfStatement[9604-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9534-9572]:Block[9628-9666]"
    }, {
      "left" : "return byId();",
      "right" : "return byId();",
      "info" : "ReturnStatement[9548-9562]:ReturnStatement[9642-9656]"
    }, {
      "left" : "if (tq.matchChomp(\".\"))",
      "right" : "if (tq.matchChomp(\".\"))",
      "info" : "IfStatement[9578-10653]:IfStatement[9672-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9602-9643]:Block[9696-9737]"
    }, {
      "left" : "return byClass();",
      "right" : "return byClass();",
      "info" : "ReturnStatement[9616-9633]:ReturnStatement[9710-9727]"
    }, {
      "left" : "if (tq.matchesWord())",
      "right" : "if (tq.matchesWord())",
      "info" : "IfStatement[9649-10653]:IfStatement[9743-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9671-9710]:Block[9765-9804]"
    }, {
      "left" : "return byTag();",
      "right" : "return byTag();",
      "info" : "ReturnStatement[9685-9700]:ReturnStatement[9779-9794]"
    }, {
      "left" : "if (tq.matches(\"[\"))",
      "right" : "if (tq.matches(\"[\"))",
      "info" : "IfStatement[9716-10653]:IfStatement[9810-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9737-9782]:Block[9831-9876]"
    }, {
      "left" : "return byAttribute();",
      "right" : "return byAttribute();",
      "info" : "ReturnStatement[9751-9772]:ReturnStatement[9845-9866]"
    }, {
      "left" : "if (tq.matchChomp(\"*\"))",
      "right" : "if (tq.matchChomp(\"*\"))",
      "info" : "IfStatement[9788-10653]:IfStatement[9882-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9812-9857]:Block[9906-9951]"
    }, {
      "left" : "return allElements();",
      "right" : "return allElements();",
      "info" : "ReturnStatement[9826-9847]:ReturnStatement[9920-9941]"
    }, {
      "left" : "if (tq.matchChomp(\":lt(\"))",
      "right" : "if (tq.matchChomp(\":lt(\"))",
      "info" : "IfStatement[9863-10653]:IfStatement[9957-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9890-9937]:Block[9984-10031]"
    }, {
      "left" : "return indexLessThan();",
      "right" : "return indexLessThan();",
      "info" : "ReturnStatement[9904-9927]:ReturnStatement[9998-10021]"
    }, {
      "left" : "if (tq.matchChomp(\":gt(\"))",
      "right" : "if (tq.matchChomp(\":gt(\"))",
      "info" : "IfStatement[9943-10653]:IfStatement[10037-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9970-10020]:Block[10064-10114]"
    }, {
      "left" : "return indexGreaterThan();",
      "right" : "return indexGreaterThan();",
      "info" : "ReturnStatement[9984-10010]:ReturnStatement[10078-10104]"
    }, {
      "left" : "if (tq.matchChomp(\":eq(\"))",
      "right" : "if (tq.matchChomp(\":eq(\"))",
      "info" : "IfStatement[10026-10653]:IfStatement[10120-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10053-10098]:Block[10147-10192]"
    }, {
      "left" : "return indexEquals();",
      "right" : "return indexEquals();",
      "info" : "ReturnStatement[10067-10088]:ReturnStatement[10161-10182]"
    }, {
      "left" : "if (tq.matches(\":has(\"))",
      "right" : "if (tq.matches(\":has(\"))",
      "info" : "IfStatement[10104-10653]:IfStatement[10198-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10129-10166]:Block[10223-10260]"
    }, {
      "left" : "return has();",
      "right" : "return has();",
      "info" : "ReturnStatement[10143-10156]:ReturnStatement[10237-10250]"
    }, {
      "left" : "if (tq.matches(\":contains(\"))",
      "right" : "if (tq.matches(\":contains(\"))",
      "info" : "IfStatement[10172-10653]:IfStatement[10266-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10202-10249]:Block[10296-10343]"
    }, {
      "left" : "return contains(false);",
      "right" : "return contains(false);",
      "info" : "ReturnStatement[10216-10239]:ReturnStatement[10310-10333]"
    }, {
      "left" : "if (tq.matches(\":containsOwn(\"))",
      "right" : "if (tq.matches(\":containsOwn(\"))",
      "info" : "IfStatement[10255-10653]:IfStatement[10349-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10288-10334]:Block[10382-10428]"
    }, {
      "left" : "return contains(true);",
      "right" : "return contains(true);",
      "info" : "ReturnStatement[10302-10324]:ReturnStatement[10396-10418]"
    }, {
      "left" : "if (tq.matches(\":matches(\"))",
      "right" : "if (tq.matches(\":matches(\"))",
      "info" : "IfStatement[10340-10653]:IfStatement[10434-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10369-10415]:Block[10463-10509]"
    }, {
      "left" : "return matches(false);",
      "right" : "return matches(false);",
      "info" : "ReturnStatement[10383-10405]:ReturnStatement[10477-10499]"
    }, {
      "left" : "if (tq.matches(\":matchesOwn(\"))",
      "right" : "if (tq.matches(\":matchesOwn(\"))",
      "info" : "IfStatement[10421-10653]:IfStatement[10515-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10453-10498]:Block[10547-10592]"
    }, {
      "left" : "return matches(true);",
      "right" : "return matches(true);",
      "info" : "ReturnStatement[10467-10488]:ReturnStatement[10561-10582]"
    }, {
      "left" : "throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());",
      "right" : "throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());",
      "info" : "ThrowStatement[10531-10643]:ThrowStatement[10693-10805]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10669-10676]:Modifier[10831-10838]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10677-10681]:PrimitiveType[10839-10843]"
    }, {
      "left" : "addElements",
      "right" : "addElements",
      "info" : "SimpleName[10682-10693]:SimpleName[10844-10855]"
    }, {
      "left" : "Collection<Element> add",
      "right" : "Collection<Element> add",
      "info" : "SingleVariableDeclaration[10694-10717]:SingleVariableDeclaration[10856-10879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10719-10756]:Block[10881-10918]"
    }, {
      "left" : "elements.addAll(add);",
      "right" : "elements.addAll(add);",
      "info" : "ExpressionStatement[10729-10750]:ExpressionStatement[10891-10912]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10766-10773]:Modifier[10928-10935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10774-10778]:PrimitiveType[10936-10940]"
    }, {
      "left" : "intersectElements",
      "right" : "intersectElements",
      "info" : "SimpleName[10779-10796]:SimpleName[10941-10958]"
    }, {
      "left" : "Collection<Element> intersect",
      "right" : "Collection<Element> intersect",
      "info" : "SingleVariableDeclaration[10797-10826]:SingleVariableDeclaration[10959-10988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10828-10874]:Block[10990-11036]"
    }, {
      "left" : "elements.retainAll(intersect);",
      "right" : "elements.retainAll(intersect);",
      "info" : "ExpressionStatement[10838-10868]:ExpressionStatement[11000-11030]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10880-10887]:Modifier[11042-11049]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[10888-10896]:SimpleType[11050-11058]"
    }, {
      "left" : "byId",
      "right" : "byId",
      "info" : "SimpleName[10897-10901]:SimpleName[11059-11063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10904-11155]:Block[11066-11317]"
    }, {
      "left" : "String id = tq.consumeCssIdentifier();",
      "right" : "String id = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[10914-10952]:VariableDeclarationStatement[11076-11114]"
    }, {
      "left" : "Validate.notEmpty(id);",
      "right" : "Validate.notEmpty(id);",
      "info" : "ExpressionStatement[10961-10983]:ExpressionStatement[11123-11145]"
    }, {
      "left" : "Element found = root.getElementById(id);",
      "right" : "Element found = root.getElementById(id);",
      "info" : "VariableDeclarationStatement[10993-11033]:VariableDeclarationStatement[11155-11195]"
    }, {
      "left" : "Elements byId = new Elements();",
      "right" : "Elements byId = new Elements();",
      "info" : "VariableDeclarationStatement[11042-11073]:VariableDeclarationStatement[11204-11235]"
    }, {
      "left" : "if(found != null)",
      "right" : "if(found != null)",
      "info" : "IfStatement[11082-11128]:IfStatement[11244-11290]"
    }, {
      "left" : "byId.add(found);",
      "right" : "byId.add(found);",
      "info" : "ExpressionStatement[11112-11128]:ExpressionStatement[11274-11290]"
    }, {
      "left" : "return byId;",
      "right" : "return byId;",
      "info" : "ReturnStatement[11137-11149]:ReturnStatement[11299-11311]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11161-11168]:Modifier[11323-11330]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11169-11177]:SimpleType[11331-11339]"
    }, {
      "left" : "byClass",
      "right" : "byClass",
      "info" : "SimpleName[11178-11185]:SimpleName[11340-11347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11188-11339]:Block[11350-11501]"
    }, {
      "left" : "String className = tq.consumeCssIdentifier();",
      "right" : "String className = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[11198-11243]:VariableDeclarationStatement[11360-11405]"
    }, {
      "left" : "Validate.notEmpty(className);",
      "right" : "Validate.notEmpty(className);",
      "info" : "ExpressionStatement[11252-11281]:ExpressionStatement[11414-11443]"
    }, {
      "left" : "return root.getElementsByClass(className);",
      "right" : "return root.getElementsByClass(className);",
      "info" : "ReturnStatement[11291-11333]:ReturnStatement[11453-11495]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11345-11352]:Modifier[11507-11514]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11353-11361]:SimpleType[11515-11523]"
    }, {
      "left" : "byTag",
      "right" : "byTag",
      "info" : "SimpleName[11362-11367]:SimpleName[11524-11529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11370-11697]:Block[11532-11859]"
    }, {
      "left" : "String tagName = tq.consumeElementSelector();",
      "right" : "String tagName = tq.consumeElementSelector();",
      "info" : "VariableDeclarationStatement[11380-11425]:VariableDeclarationStatement[11542-11587]"
    }, {
      "left" : "Validate.notEmpty(tagName);",
      "right" : "Validate.notEmpty(tagName);",
      "info" : "ExpressionStatement[11434-11461]:ExpressionStatement[11596-11623]"
    }, {
      "left" : "if (tagName.contains(\"|\"))",
      "right" : "if (tagName.contains(\"|\"))",
      "info" : "IfStatement[11569-11644]:IfStatement[11731-11806]"
    }, {
      "left" : "tagName = tagName.replace(\"|\", \":\");",
      "right" : "tagName = tagName.replace(\"|\", \":\");",
      "info" : "ExpressionStatement[11608-11644]:ExpressionStatement[11770-11806]"
    }, {
      "left" : "return root.getElementsByTag(tagName);",
      "right" : "return root.getElementsByTag(tagName);",
      "info" : "ReturnStatement[11653-11691]:ReturnStatement[11815-11853]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11703-11710]:Modifier[11865-11872]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[11711-11719]:SimpleType[11873-11881]"
    }, {
      "left" : "byAttribute",
      "right" : "byAttribute",
      "info" : "SimpleName[11720-11731]:SimpleName[11882-11893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11734-13134]:Block[11896-13296]"
    }, {
      "left" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "right" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "info" : "VariableDeclarationStatement[11744-11803]:VariableDeclarationStatement[11906-11965]"
    }, {
      "left" : "String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\");",
      "right" : "String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\");",
      "info" : "VariableDeclarationStatement[11829-11893]:VariableDeclarationStatement[11991-12055]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[11951-11974]:ExpressionStatement[12113-12136]"
    }, {
      "left" : "cq.consumeWhitespace();",
      "right" : "cq.consumeWhitespace();",
      "info" : "ExpressionStatement[11983-12006]:ExpressionStatement[12145-12168]"
    }, {
      "left" : "if (cq.isEmpty())",
      "right" : "if (cq.isEmpty())",
      "info" : "IfStatement[12016-13128]:IfStatement[12178-13290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12034-12176]:Block[12196-12338]"
    }, {
      "left" : "return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);",
      "right" : "return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);",
      "info" : "ReturnStatement[12048-12166]:ReturnStatement[12210-12328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12182-13128]:Block[12344-13290]"
    }, {
      "left" : "if (cq.matchChomp(\"=\"))",
      "right" : "if (cq.matchChomp(\"=\"))",
      "info" : "IfStatement[12196-13118]:IfStatement[12358-13280]"
    }, {
      "left" : "return root.getElementsByAttributeValue(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValue(key, cq.remainder());",
      "info" : "ReturnStatement[12236-12297]:ReturnStatement[12398-12459]"
    }, {
      "left" : "if (cq.matchChomp(\"!=\"))",
      "right" : "if (cq.matchChomp(\"!=\"))",
      "info" : "IfStatement[12316-13118]:IfStatement[12478-13280]"
    }, {
      "left" : "return root.getElementsByAttributeValueNot(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueNot(key, cq.remainder());",
      "info" : "ReturnStatement[12357-12421]:ReturnStatement[12519-12583]"
    }, {
      "left" : "if (cq.matchChomp(\"^=\"))",
      "right" : "if (cq.matchChomp(\"^=\"))",
      "info" : "IfStatement[12440-13118]:IfStatement[12602-13280]"
    }, {
      "left" : "return root.getElementsByAttributeValueStarting(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueStarting(key, cq.remainder());",
      "info" : "ReturnStatement[12481-12550]:ReturnStatement[12643-12712]"
    }, {
      "left" : "if (cq.matchChomp(\"$=\"))",
      "right" : "if (cq.matchChomp(\"$=\"))",
      "info" : "IfStatement[12569-13118]:IfStatement[12731-13280]"
    }, {
      "left" : "return root.getElementsByAttributeValueEnding(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueEnding(key, cq.remainder());",
      "info" : "ReturnStatement[12610-12677]:ReturnStatement[12772-12839]"
    }, {
      "left" : "if (cq.matchChomp(\"*=\"))",
      "right" : "if (cq.matchChomp(\"*=\"))",
      "info" : "IfStatement[12696-13118]:IfStatement[12858-13280]"
    }, {
      "left" : "return root.getElementsByAttributeValueContaining(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueContaining(key, cq.remainder());",
      "info" : "ReturnStatement[12737-12808]:ReturnStatement[12899-12970]"
    }, {
      "left" : "if (cq.matchChomp(\"~=\"))",
      "right" : "if (cq.matchChomp(\"~=\"))",
      "info" : "IfStatement[12839-13118]:IfStatement[13001-13280]"
    }, {
      "left" : "return root.getElementsByAttributeValueMatching(key, cq.remainder());",
      "right" : "return root.getElementsByAttributeValueMatching(key, cq.remainder());",
      "info" : "ReturnStatement[12880-12949]:ReturnStatement[13042-13111]"
    }, {
      "left" : "throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "right" : "throw new SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "info" : "ThrowStatement[12996-13118]:ThrowStatement[13158-13280]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13140-13147]:Modifier[13302-13309]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13148-13156]:SimpleType[13310-13318]"
    }, {
      "left" : "allElements",
      "right" : "allElements",
      "info" : "SimpleName[13157-13168]:SimpleName[13319-13330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13171-13216]:Block[13333-13378]"
    }, {
      "left" : "return root.getAllElements();",
      "right" : "return root.getAllElements();",
      "info" : "ReturnStatement[13181-13210]:ReturnStatement[13343-13372]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13264-13271]:Modifier[13426-13433]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13272-13280]:SimpleType[13434-13442]"
    }, {
      "left" : "indexLessThan",
      "right" : "indexLessThan",
      "info" : "SimpleName[13281-13294]:SimpleName[13443-13456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13297-13368]:Block[13459-13530]"
    }, {
      "left" : "return root.getElementsByIndexLessThan(consumeIndex());",
      "right" : "return root.getElementsByIndexLessThan(consumeIndex());",
      "info" : "ReturnStatement[13307-13362]:ReturnStatement[13469-13524]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13378-13385]:Modifier[13540-13547]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13386-13394]:SimpleType[13548-13556]"
    }, {
      "left" : "indexGreaterThan",
      "right" : "indexGreaterThan",
      "info" : "SimpleName[13395-13411]:SimpleName[13557-13573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13414-13488]:Block[13576-13650]"
    }, {
      "left" : "return root.getElementsByIndexGreaterThan(consumeIndex());",
      "right" : "return root.getElementsByIndexGreaterThan(consumeIndex());",
      "info" : "ReturnStatement[13424-13482]:ReturnStatement[13586-13644]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13498-13505]:Modifier[13660-13667]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13506-13514]:SimpleType[13668-13676]"
    }, {
      "left" : "indexEquals",
      "right" : "indexEquals",
      "info" : "SimpleName[13515-13526]:SimpleName[13677-13688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13529-13598]:Block[13691-13760]"
    }, {
      "left" : "return root.getElementsByIndexEquals(consumeIndex());",
      "right" : "return root.getElementsByIndexEquals(consumeIndex());",
      "info" : "ReturnStatement[13539-13592]:ReturnStatement[13701-13754]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13604-13611]:Modifier[13766-13773]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13612-13615]:PrimitiveType[13774-13777]"
    }, {
      "left" : "consumeIndex",
      "right" : "consumeIndex",
      "info" : "SimpleName[13616-13628]:SimpleName[13778-13790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13631-13807]:Block[13793-13969]"
    }, {
      "left" : "String indexS = tq.chompTo(\")\").trim();",
      "right" : "String indexS = tq.chompTo(\")\").trim();",
      "info" : "VariableDeclarationStatement[13641-13680]:VariableDeclarationStatement[13803-13842]"
    }, {
      "left" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "right" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "info" : "ExpressionStatement[13689-13760]:ExpressionStatement[13851-13922]"
    }, {
      "left" : "return Integer.parseInt(indexS);",
      "right" : "return Integer.parseInt(indexS);",
      "info" : "ReturnStatement[13769-13801]:ReturnStatement[13931-13963]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13845-13852]:Modifier[14007-14014]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[13853-13861]:SimpleType[14015-14023]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[13862-13865]:SimpleName[14024-14027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13868-14118]:Block[14030-14280]"
    }, {
      "left" : "tq.consume(\":has\");",
      "right" : "tq.consume(\":has\");",
      "info" : "ExpressionStatement[13878-13897]:ExpressionStatement[14040-14059]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(',')');",
      "right" : "String subQuery = tq.chompBalanced('(',')');",
      "info" : "VariableDeclarationStatement[13906-13950]:VariableDeclarationStatement[14068-14112]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "info" : "ExpressionStatement[13959-14027]:ExpressionStatement[14121-14189]"
    }, {
      "left" : "return filterForParentsOfDescendants(elements, select(subQuery, elements));",
      "right" : "return filterForParentsOfDescendants(elements, select(subQuery, elements));",
      "info" : "ReturnStatement[14037-14112]:ReturnStatement[14199-14274]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14186-14193]:Modifier[14348-14355]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[14194-14202]:SimpleType[14356-14364]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[14203-14211]:SimpleName[14365-14373]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[14212-14223]:SingleVariableDeclaration[14374-14385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14225-14568]:Block[14387-14730]"
    }, {
      "left" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "right" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "info" : "ExpressionStatement[14235-14282]:ExpressionStatement[14397-14444]"
    }, {
      "left" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));",
      "right" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));",
      "info" : "VariableDeclarationStatement[14291-14358]:VariableDeclarationStatement[14453-14520]"
    }, {
      "left" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "right" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "info" : "ExpressionStatement[14367-14440]:ExpressionStatement[14529-14602]"
    }, {
      "left" : "return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);",
      "right" : "return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);",
      "info" : "ReturnStatement[14458-14562]:ReturnStatement[14620-14724]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14620-14627]:Modifier[14782-14789]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[14628-14636]:SimpleType[14790-14798]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[14637-14644]:SimpleName[14799-14806]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[14645-14656]:SingleVariableDeclaration[14807-14818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14658-15003]:Block[14820-15165]"
    }, {
      "left" : "tq.consume(own? \":matchesOwn\" : \":matches\");",
      "right" : "tq.consume(own? \":matchesOwn\" : \":matches\");",
      "info" : "ExpressionStatement[14668-14712]:ExpressionStatement[14830-14874]"
    }, {
      "left" : "String regex = tq.chompBalanced('(', ')');",
      "right" : "String regex = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[14721-14763]:VariableDeclarationStatement[14883-14925]"
    }, {
      "left" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "right" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "info" : "ExpressionStatement[14821-14889]:ExpressionStatement[14983-15051]"
    }, {
      "left" : "return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);",
      "right" : "return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);",
      "info" : "ReturnStatement[14907-14997]:ReturnStatement[15069-15159]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15065-15072]:Modifier[15500-15507]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15073-15079]:Modifier[15508-15514]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[15080-15088]:SimpleType[15515-15523]"
    }, {
      "left" : "filterForChildren",
      "right" : "filterForChildren",
      "info" : "SimpleName[15089-15106]:SimpleName[15524-15541]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[15107-15134]:SingleVariableDeclaration[15542-15569]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[15136-15166]:SingleVariableDeclaration[15571-15601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15168-15511]:Block[15603-15946]"
    }, {
      "left" : "Elements children = new Elements();",
      "right" : "Elements children = new Elements();",
      "info" : "VariableDeclarationStatement[15178-15213]:VariableDeclarationStatement[15613-15648]"
    }, {
      "left" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.parent() != null && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }",
      "right" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.parent() != null && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }",
      "info" : "LabeledStatement[15222-15480]:LabeledStatement[15657-15915]"
    }, {
      "left" : "for (Element c : candidates)",
      "right" : "for (Element c : candidates)",
      "info" : "EnhancedForStatement[15229-15480]:EnhancedForStatement[15664-15915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15258-15480]:Block[15693-15915]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[15272-15470]:EnhancedForStatement[15707-15905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15298-15470]:Block[15733-15905]"
    }, {
      "left" : "if (c.parent() != null && c.parent().equals(p))",
      "right" : "if (c.parent() != null && c.parent().equals(p))",
      "info" : "IfStatement[15316-15456]:IfStatement[15751-15891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15364-15456]:Block[15799-15891]"
    }, {
      "left" : "children.add(c);",
      "right" : "children.add(c);",
      "info" : "ExpressionStatement[15386-15402]:ExpressionStatement[15821-15837]"
    }, {
      "left" : "continue CHILD;",
      "right" : "continue CHILD;",
      "info" : "ContinueStatement[15423-15438]:ContinueStatement[15858-15873]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[15489-15505]:ReturnStatement[15924-15940]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15699-15706]:Modifier[16134-16141]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15707-15713]:Modifier[16142-16148]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[15714-15722]:SimpleType[16149-16157]"
    }, {
      "left" : "filterForDescendants",
      "right" : "filterForDescendants",
      "info" : "SimpleName[15723-15743]:SimpleName[16158-16178]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[15744-15771]:SingleVariableDeclaration[16179-16206]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[15773-15803]:SingleVariableDeclaration[16208-16238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15805-16109]:Block[16240-16544]"
    }, {
      "left" : "Elements children = new Elements();",
      "right" : "Elements children = new Elements();",
      "info" : "VariableDeclarationStatement[15815-15850]:VariableDeclarationStatement[16250-16285]"
    }, {
      "left" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }",
      "right" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }",
      "info" : "LabeledStatement[15859-16078]:LabeledStatement[16294-16513]"
    }, {
      "left" : "for (Element c : candidates)",
      "right" : "for (Element c : candidates)",
      "info" : "EnhancedForStatement[15866-16078]:EnhancedForStatement[16301-16513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15895-16078]:Block[16330-16513]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[15909-16039]:EnhancedForStatement[16344-16474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15935-16039]:Block[16370-16474]"
    }, {
      "left" : "if (c.equals(p))",
      "right" : "if (c.equals(p))",
      "info" : "IfStatement[15953-16025]:IfStatement[16388-16460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15970-16025]:Block[16405-16460]"
    }, {
      "left" : "continue CHILD;",
      "right" : "continue CHILD;",
      "info" : "ContinueStatement[15992-16007]:ContinueStatement[16427-16442]"
    }, {
      "left" : "children.add(c);",
      "right" : "children.add(c);",
      "info" : "ExpressionStatement[16052-16068]:ExpressionStatement[16487-16503]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[16087-16103]:ReturnStatement[16522-16538]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16192-16199]:Modifier[16627-16634]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16200-16206]:Modifier[16635-16641]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[16207-16215]:SimpleType[16642-16650]"
    }, {
      "left" : "filterForParentsOfDescendants",
      "right" : "filterForParentsOfDescendants",
      "info" : "SimpleName[16216-16245]:SimpleName[16651-16680]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[16246-16273]:SingleVariableDeclaration[16681-16708]"
    }, {
      "left" : "Collection<Element> children",
      "right" : "Collection<Element> children",
      "info" : "SingleVariableDeclaration[16275-16303]:SingleVariableDeclaration[16710-16738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16305-16605]:Block[16740-17040]"
    }, {
      "left" : "Elements filteredParents = new Elements();",
      "right" : "Elements filteredParents = new Elements();",
      "info" : "VariableDeclarationStatement[16315-16357]:VariableDeclarationStatement[16750-16792]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[16366-16567]:EnhancedForStatement[16801-17002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16392-16567]:Block[16827-17002]"
    }, {
      "left" : "for (Element c : children)",
      "right" : "for (Element c : children)",
      "info" : "EnhancedForStatement[16406-16557]:EnhancedForStatement[16841-16992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16433-16557]:Block[16868-16992]"
    }, {
      "left" : "if (c.parents().contains(p))",
      "right" : "if (c.parents().contains(p))",
      "info" : "IfStatement[16451-16543]:IfStatement[16886-16978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16480-16543]:Block[16915-16978]"
    }, {
      "left" : "filteredParents.add(p);",
      "right" : "filteredParents.add(p);",
      "info" : "ExpressionStatement[16502-16525]:ExpressionStatement[16937-16960]"
    }, {
      "left" : "return filteredParents;",
      "right" : "return filteredParents;",
      "info" : "ReturnStatement[16576-16599]:ReturnStatement[17011-17034]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16640-16647]:Modifier[17075-17082]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16648-16654]:Modifier[17083-17089]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[16655-16663]:SimpleType[17090-17098]"
    }, {
      "left" : "filterForAdjacentSiblings",
      "right" : "filterForAdjacentSiblings",
      "info" : "SimpleName[16664-16689]:SimpleName[17099-17124]"
    }, {
      "left" : "Collection<Element> elements",
      "right" : "Collection<Element> elements",
      "info" : "SingleVariableDeclaration[16690-16718]:SingleVariableDeclaration[17125-17153]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[16720-16750]:SingleVariableDeclaration[17155-17185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16752-17248]:Block[17187-17683]"
    }, {
      "left" : "Elements siblings = new Elements();",
      "right" : "Elements siblings = new Elements();",
      "info" : "VariableDeclarationStatement[16762-16797]:VariableDeclarationStatement[17197-17232]"
    }, {
      "left" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                Element previousSib = c.previousElementSibling();\n                if (previousSib != null && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "right" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                Element previousSib = c.previousElementSibling();\n                if (previousSib != null && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "info" : "LabeledStatement[16806-17217]:LabeledStatement[17241-17652]"
    }, {
      "left" : "for (Element c: candidates)",
      "right" : "for (Element c: candidates)",
      "info" : "EnhancedForStatement[16815-17217]:EnhancedForStatement[17250-17652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16843-17217]:Block[17278-17652]"
    }, {
      "left" : "for (Element e: elements)",
      "right" : "for (Element e: elements)",
      "info" : "EnhancedForStatement[16857-17207]:EnhancedForStatement[17292-17642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16883-17207]:Block[17318-17642]"
    }, {
      "left" : "if (!e.parent().equals(c.parent()))",
      "right" : "if (!e.parent().equals(c.parent()))",
      "info" : "IfStatement[16901-16966]:IfStatement[17336-17401]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16957-16966]:ContinueStatement[17392-17401]"
    }, {
      "left" : "Element previousSib = c.previousElementSibling();",
      "right" : "Element previousSib = c.previousElementSibling();",
      "info" : "VariableDeclarationStatement[16983-17032]:VariableDeclarationStatement[17418-17467]"
    }, {
      "left" : "if (previousSib != null && previousSib.equals(e))",
      "right" : "if (previousSib != null && previousSib.equals(e))",
      "info" : "IfStatement[17049-17193]:IfStatement[17484-17628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17099-17193]:Block[17534-17628]"
    }, {
      "left" : "siblings.add(c);",
      "right" : "siblings.add(c);",
      "info" : "ExpressionStatement[17121-17137]:ExpressionStatement[17556-17572]"
    }, {
      "left" : "continue SIBLING;",
      "right" : "continue SIBLING;",
      "info" : "ContinueStatement[17158-17175]:ContinueStatement[17593-17610]"
    }, {
      "left" : "return siblings;",
      "right" : "return siblings;",
      "info" : "ReturnStatement[17226-17242]:ReturnStatement[17661-17677]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17285-17292]:Modifier[17720-17727]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17293-17299]:Modifier[17728-17734]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[17300-17308]:SimpleType[17735-17743]"
    }, {
      "left" : "filterForGeneralSiblings",
      "right" : "filterForGeneralSiblings",
      "info" : "SimpleName[17309-17333]:SimpleName[17744-17768]"
    }, {
      "left" : "Collection<Element> elements",
      "right" : "Collection<Element> elements",
      "info" : "SingleVariableDeclaration[17334-17362]:SingleVariableDeclaration[17769-17797]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[17364-17394]:SingleVariableDeclaration[17799-17829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17396-17891]:Block[17831-18326]"
    }, {
      "left" : "Elements output = new Elements();",
      "right" : "Elements output = new Elements();",
      "info" : "VariableDeclarationStatement[17406-17439]:VariableDeclarationStatement[17841-17874]"
    }, {
      "left" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "right" : "SIBLING: for (Element c: candidates) {\n            for (Element e: elements) {\n                if (!e.parent().equals(c.parent()))\n                    continue;\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }",
      "info" : "LabeledStatement[17448-17862]:LabeledStatement[17883-18297]"
    }, {
      "left" : "for (Element c: candidates)",
      "right" : "for (Element c: candidates)",
      "info" : "EnhancedForStatement[17457-17862]:EnhancedForStatement[17892-18297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17485-17862]:Block[17920-18297]"
    }, {
      "left" : "for (Element e: elements)",
      "right" : "for (Element e: elements)",
      "info" : "EnhancedForStatement[17499-17852]:EnhancedForStatement[17934-18287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17525-17852]:Block[17960-18287]"
    }, {
      "left" : "if (!e.parent().equals(c.parent()))",
      "right" : "if (!e.parent().equals(c.parent()))",
      "info" : "IfStatement[17543-17608]:IfStatement[17978-18043]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17599-17608]:ContinueStatement[18034-18043]"
    }, {
      "left" : "int ePos = e.elementSiblingIndex();",
      "right" : "int ePos = e.elementSiblingIndex();",
      "info" : "VariableDeclarationStatement[17625-17660]:VariableDeclarationStatement[18060-18095]"
    }, {
      "left" : "int cPos = c.elementSiblingIndex();",
      "right" : "int cPos = c.elementSiblingIndex();",
      "info" : "VariableDeclarationStatement[17677-17712]:VariableDeclarationStatement[18112-18147]"
    }, {
      "left" : "if (cPos > ePos)",
      "right" : "if (cPos > ePos)",
      "info" : "IfStatement[17729-17838]:IfStatement[18164-18273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17746-17838]:Block[18181-18273]"
    }, {
      "left" : "output.add(c);",
      "right" : "output.add(c);",
      "info" : "ExpressionStatement[17768-17782]:ExpressionStatement[18203-18217]"
    }, {
      "left" : "continue SIBLING;",
      "right" : "continue SIBLING;",
      "info" : "ContinueStatement[17803-17820]:ContinueStatement[18238-18255]"
    }, {
      "left" : "return output;",
      "right" : "return output;",
      "info" : "ReturnStatement[17871-17885]:ReturnStatement[18306-18320]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17955-17962]:Modifier[18390-18397]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17963-17969]:Modifier[18398-18404]"
    }, {
      "left" : "Elements",
      "right" : "Elements",
      "info" : "SimpleType[17970-17978]:SimpleType[18405-18413]"
    }, {
      "left" : "filterForSelf",
      "right" : "filterForSelf",
      "info" : "SimpleName[17979-17992]:SimpleName[18414-18427]"
    }, {
      "left" : "Collection<Element> parents",
      "right" : "Collection<Element> parents",
      "info" : "SingleVariableDeclaration[17993-18020]:SingleVariableDeclaration[18428-18455]"
    }, {
      "left" : "Collection<Element> candidates",
      "right" : "Collection<Element> candidates",
      "info" : "SingleVariableDeclaration[18022-18052]:SingleVariableDeclaration[18457-18487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18054-18369]:Block[18489-18804]"
    }, {
      "left" : "Elements children = new Elements();",
      "right" : "Elements children = new Elements();",
      "info" : "VariableDeclarationStatement[18064-18099]:VariableDeclarationStatement[18499-18534]"
    }, {
      "left" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }   \n        }",
      "right" : "CHILD: for (Element c : candidates) {\n            for (Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }   \n        }",
      "info" : "LabeledStatement[18108-18338]:LabeledStatement[18543-18773]"
    }, {
      "left" : "for (Element c : candidates)",
      "right" : "for (Element c : candidates)",
      "info" : "EnhancedForStatement[18115-18338]:EnhancedForStatement[18550-18773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18144-18338]:Block[18579-18773]"
    }, {
      "left" : "for (Element p : parents)",
      "right" : "for (Element p : parents)",
      "info" : "EnhancedForStatement[18158-18325]:EnhancedForStatement[18593-18760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18184-18325]:Block[18619-18760]"
    }, {
      "left" : "if (c.equals(p))",
      "right" : "if (c.equals(p))",
      "info" : "IfStatement[18202-18311]:IfStatement[18637-18746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18219-18311]:Block[18654-18746]"
    }, {
      "left" : "children.add(c);",
      "right" : "children.add(c);",
      "info" : "ExpressionStatement[18241-18257]:ExpressionStatement[18676-18692]"
    }, {
      "left" : "continue CHILD;",
      "right" : "continue CHILD;",
      "info" : "ContinueStatement[18278-18293]:ContinueStatement[18713-18728]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[18347-18363]:ReturnStatement[18782-18798]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18457-18463]:Modifier[19358-19364]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18464-18470]:Modifier[19365-19371]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18471-18476]:TYPE_DECLARATION_KIND[19372-19377]"
    }, {
      "left" : "SelectorParseException",
      "right" : "SelectorParseException",
      "info" : "SimpleName[18477-18499]:SimpleName[19378-19400]"
    }, {
      "left" : "IllegalStateException",
      "right" : "IllegalStateException",
      "info" : "SimpleType[18508-18529]:SimpleType[19409-19430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18540-18546]:Modifier[19441-19447]"
    }, {
      "left" : "SelectorParseException",
      "right" : "SelectorParseException",
      "info" : "SimpleName[18547-18569]:SimpleName[19448-19470]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[18570-18580]:SingleVariableDeclaration[19471-19481]"
    }, {
      "left" : "Object... params",
      "right" : "Object... params",
      "info" : "SingleVariableDeclaration[18582-18598]:SingleVariableDeclaration[19483-19499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18600-18658]:Block[19501-19559]"
    }, {
      "left" : "super(String.format(msg, params));",
      "right" : "super(String.format(msg, params));",
      "info" : "SuperConstructorInvocation[18614-18648]:SuperConstructorInvocation[19515-19549]"
    } ]
  },
  "interFileMappings" : { }
}