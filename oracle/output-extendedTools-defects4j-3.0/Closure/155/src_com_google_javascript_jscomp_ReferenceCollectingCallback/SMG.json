{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReferenceCollectingCallback",
      "right" : "ReferenceCollectingCallback",
      "info" : "TypeDeclaration[1225-17980]:TypeDeclaration[1225-18105]"
    }, {
      "left" : "private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
      "right" : "private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[1698-1967]:FieldDeclaration[1698-1967]"
    }, {
      "left" : "private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
      "right" : "private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
      "info" : "FieldDeclaration[1971-2128]:FieldDeclaration[1971-2128]"
    }, {
      "left" : "private final Behavior behavior;",
      "right" : "private final Behavior behavior;",
      "info" : "FieldDeclaration[2132-2236]:FieldDeclaration[2132-2236]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2240-2339]:FieldDeclaration[2240-2339]"
    }, {
      "left" : "private final Predicate<Var> varFilter;",
      "right" : "private final Predicate<Var> varFilter;",
      "info" : "FieldDeclaration[2343-2447]:FieldDeclaration[2343-2447]"
    }, {
      "left" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior)",
      "right" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior)",
      "info" : "MethodDeclaration[2451-2644]:MethodDeclaration[2451-2644]"
    }, {
      "left" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,\n      Predicate<Var> varFilter)",
      "right" : "ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,\n      Predicate<Var> varFilter)",
      "info" : "MethodDeclaration[2648-3057]:MethodDeclaration[2648-3057]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3061-3267]:MethodDeclaration[3061-3267]"
    }, {
      "left" : "public Set<Var> getReferencedVariables()",
      "right" : "public Set<Var> getReferencedVariables()",
      "info" : "MethodDeclaration[3271-3426]:MethodDeclaration[3271-3426]"
    }, {
      "left" : "public ReferenceCollection getReferenceCollection(Var v)",
      "right" : "public ReferenceCollection getReferenceCollection(Var v)",
      "info" : "MethodDeclaration[3430-3595]:MethodDeclaration[3430-3595]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[3599-4064]:MethodDeclaration[3599-4189]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[4068-4349]:MethodDeclaration[4193-4474]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[4353-4540]:MethodDeclaration[4478-4665]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n      Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n      Node parent)",
      "info" : "MethodDeclaration[4544-4857]:MethodDeclaration[4669-4982]"
    }, {
      "left" : "private static boolean isBlockBoundary(Node n, Node parent)",
      "right" : "private static boolean isBlockBoundary(Node n, Node parent)",
      "info" : "MethodDeclaration[4861-5849]:MethodDeclaration[4986-5974]"
    }, {
      "left" : "private void addReference(NodeTraversal t, Var v, Reference reference)",
      "right" : "private void addReference(NodeTraversal t, Var v, Reference reference)",
      "info" : "MethodDeclaration[5853-6239]:MethodDeclaration[5978-6364]"
    }, {
      "left" : "Behavior",
      "right" : "Behavior",
      "info" : "TypeDeclaration[6243-6551]:TypeDeclaration[6368-6676]"
    }, {
      "left" : "void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap);",
      "right" : "void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap);",
      "info" : "MethodDeclaration[6398-6547]:MethodDeclaration[6523-6672]"
    }, {
      "left" : "static Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap) {}\n  };",
      "right" : "static Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap) {}\n  };",
      "info" : "FieldDeclaration[6555-6731]:FieldDeclaration[6680-6856]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t,\n        Map<Var, ReferenceCollection> referenceMap)",
      "info" : "MethodDeclaration[6614-6726]:MethodDeclaration[6739-6851]"
    }, {
      "left" : "ReferenceCollection",
      "right" : "ReferenceCollection",
      "info" : "TypeDeclaration[6735-12475]:TypeDeclaration[6860-12600]"
    }, {
      "left" : "List<Reference> references = Lists.newArrayList();",
      "right" : "List<Reference> references = Lists.newArrayList();",
      "info" : "FieldDeclaration[6898-6948]:FieldDeclaration[7023-7073]"
    }, {
      "left" : "void add(Reference reference, NodeTraversal t, Var v)",
      "right" : "void add(Reference reference, NodeTraversal t, Var v)",
      "info" : "MethodDeclaration[6954-7048]:MethodDeclaration[7079-7173]"
    }, {
      "left" : "protected boolean isWellDefined()",
      "right" : "protected boolean isWellDefined()",
      "info" : "MethodDeclaration[7054-8159]:MethodDeclaration[7179-8284]"
    }, {
      "left" : "boolean isEscaped()",
      "right" : "boolean isEscaped()",
      "info" : "MethodDeclaration[8165-8495]:MethodDeclaration[8290-8620]"
    }, {
      "left" : "private boolean isInitializingDeclarationAt(int index)",
      "right" : "private boolean isInitializingDeclarationAt(int index)",
      "info" : "MethodDeclaration[8501-9135]:MethodDeclaration[8626-9260]"
    }, {
      "left" : "private boolean isInitializingAssignmentAt(int index)",
      "right" : "private boolean isInitializingAssignmentAt(int index)",
      "info" : "MethodDeclaration[9141-9866]:MethodDeclaration[9266-9991]"
    }, {
      "left" : "Reference getInitializingReference()",
      "right" : "Reference getInitializingReference()",
      "info" : "MethodDeclaration[9872-10401]:MethodDeclaration[9997-10526]"
    }, {
      "left" : "Reference getInitializingReferenceForConstants()",
      "right" : "Reference getInitializingReferenceForConstants()",
      "info" : "MethodDeclaration[10407-10772]:MethodDeclaration[10532-10897]"
    }, {
      "left" : "boolean isAssignedOnceInLifetime()",
      "right" : "boolean isAssignedOnceInLifetime()",
      "info" : "MethodDeclaration[10778-11341]:MethodDeclaration[10903-11466]"
    }, {
      "left" : "private Reference getOneAndOnlyAssignment()",
      "right" : "private Reference getOneAndOnlyAssignment()",
      "info" : "MethodDeclaration[11347-11893]:MethodDeclaration[11472-12018]"
    }, {
      "left" : "boolean isNeverAssigned()",
      "right" : "boolean isNeverAssigned()",
      "info" : "MethodDeclaration[11899-12255]:MethodDeclaration[12024-12380]"
    }, {
      "left" : "boolean firstReferenceIsAssigningDeclaration()",
      "right" : "boolean firstReferenceIsAssigningDeclaration()",
      "info" : "MethodDeclaration[12261-12471]:MethodDeclaration[12386-12596]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "TypeDeclaration[12479-16051]:TypeDeclaration[12604-16176]"
    }, {
      "left" : "private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
      "right" : "private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
      "info" : "FieldDeclaration[12592-12712]:FieldDeclaration[12717-12837]"
    }, {
      "left" : "private final Node nameNode;",
      "right" : "private final Node nameNode;",
      "info" : "FieldDeclaration[12718-12746]:FieldDeclaration[12843-12871]"
    }, {
      "left" : "private final Node parent;",
      "right" : "private final Node parent;",
      "info" : "FieldDeclaration[12751-12777]:FieldDeclaration[12876-12902]"
    }, {
      "left" : "private final Node grandparent;",
      "right" : "private final Node grandparent;",
      "info" : "FieldDeclaration[12782-12813]:FieldDeclaration[12907-12938]"
    }, {
      "left" : "private final BasicBlock basicBlock;",
      "right" : "private final BasicBlock basicBlock;",
      "info" : "FieldDeclaration[12818-12854]:FieldDeclaration[12943-12979]"
    }, {
      "left" : "private final Scope scope;",
      "right" : "private final Scope scope;",
      "info" : "FieldDeclaration[12859-12885]:FieldDeclaration[12984-13010]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[12890-12922]:FieldDeclaration[13015-13047]"
    }, {
      "left" : "Reference(Node nameNode, Node parent, NodeTraversal t,\n        BasicBlock basicBlock)",
      "right" : "Reference(Node nameNode, Node parent, NodeTraversal t,\n        BasicBlock basicBlock)",
      "info" : "MethodDeclaration[12928-13127]:MethodDeclaration[13053-13252]"
    }, {
      "left" : "static Reference newBleedingFunction(NodeTraversal t,\n        BasicBlock basicBlock, Node func)",
      "right" : "static Reference newBleedingFunction(NodeTraversal t,\n        BasicBlock basicBlock, Node func)",
      "info" : "MethodDeclaration[13273-13505]:MethodDeclaration[13398-13630]"
    }, {
      "left" : "private Reference(Node nameNode, Node parent, Node grandparent,\n        BasicBlock basicBlock, Scope scope, String sourceName)",
      "right" : "private Reference(Node nameNode, Node parent, Node grandparent,\n        BasicBlock basicBlock, Scope scope, String sourceName)",
      "info" : "MethodDeclaration[13511-13841]:MethodDeclaration[13636-13966]"
    }, {
      "left" : "boolean isDeclaration()",
      "right" : "boolean isDeclaration()",
      "info" : "MethodDeclaration[13847-14034]:MethodDeclaration[13972-14159]"
    }, {
      "left" : "boolean isVarDeclaration()",
      "right" : "boolean isVarDeclaration()",
      "info" : "MethodDeclaration[14040-14118]:MethodDeclaration[14165-14243]"
    }, {
      "left" : "boolean isHoistedFunction()",
      "right" : "boolean isHoistedFunction()",
      "info" : "MethodDeclaration[14124-14219]:MethodDeclaration[14249-14344]"
    }, {
      "left" : "boolean isInitializingDeclaration()",
      "right" : "boolean isInitializingDeclaration()",
      "info" : "MethodDeclaration[14225-14624]:MethodDeclaration[14350-14749]"
    }, {
      "left" : "Node getAssignedValue()",
      "right" : "Node getAssignedValue()",
      "info" : "MethodDeclaration[14629-14916]:MethodDeclaration[14754-15041]"
    }, {
      "left" : "BasicBlock getBasicBlock()",
      "right" : "BasicBlock getBasicBlock()",
      "info" : "MethodDeclaration[14922-14981]:MethodDeclaration[15047-15106]"
    }, {
      "left" : "Node getParent()",
      "right" : "Node getParent()",
      "info" : "MethodDeclaration[14987-15032]:MethodDeclaration[15112-15157]"
    }, {
      "left" : "Node getNameNode()",
      "right" : "Node getNameNode()",
      "info" : "MethodDeclaration[15038-15087]:MethodDeclaration[15163-15212]"
    }, {
      "left" : "Node getGrandparent()",
      "right" : "Node getGrandparent()",
      "info" : "MethodDeclaration[15093-15148]:MethodDeclaration[15218-15273]"
    }, {
      "left" : "private static boolean isLhsOfForInExpression(Node n)",
      "right" : "private static boolean isLhsOfForInExpression(Node n)",
      "info" : "MethodDeclaration[15154-15418]:MethodDeclaration[15279-15543]"
    }, {
      "left" : "boolean isSimpleAssignmentToName()",
      "right" : "boolean isSimpleAssignmentToName()",
      "info" : "MethodDeclaration[15424-15561]:MethodDeclaration[15549-15686]"
    }, {
      "left" : "boolean isLvalue()",
      "right" : "boolean isLvalue()",
      "info" : "MethodDeclaration[15567-15929]:MethodDeclaration[15692-16054]"
    }, {
      "left" : "Scope getScope()",
      "right" : "Scope getScope()",
      "info" : "MethodDeclaration[15935-15979]:MethodDeclaration[16060-16104]"
    }, {
      "left" : "public String getSourceName()",
      "right" : "public String getSourceName()",
      "info" : "MethodDeclaration[15985-16047]:MethodDeclaration[16110-16172]"
    }, {
      "left" : "BasicBlock",
      "right" : "BasicBlock",
      "info" : "TypeDeclaration[16055-17978]:TypeDeclaration[16180-18103]"
    }, {
      "left" : "private final BasicBlock parent;",
      "right" : "private final BasicBlock parent;",
      "info" : "FieldDeclaration[16221-16253]:FieldDeclaration[16346-16378]"
    }, {
      "left" : "private final boolean isHoisted;",
      "right" : "private final boolean isHoisted;",
      "info" : "FieldDeclaration[16259-16441]:FieldDeclaration[16384-16566]"
    }, {
      "left" : "private final boolean isFunction;",
      "right" : "private final boolean isFunction;",
      "info" : "FieldDeclaration[16447-16548]:FieldDeclaration[16572-16673]"
    }, {
      "left" : "private final boolean isLoop;",
      "right" : "private final boolean isLoop;",
      "info" : "FieldDeclaration[16554-16641]:FieldDeclaration[16679-16766]"
    }, {
      "left" : "BasicBlock(BasicBlock parent, Node root)",
      "right" : "BasicBlock(BasicBlock parent, Node root)",
      "info" : "MethodDeclaration[16647-17281]:MethodDeclaration[16772-17406]"
    }, {
      "left" : "BasicBlock getParent()",
      "right" : "BasicBlock getParent()",
      "info" : "MethodDeclaration[17287-17338]:MethodDeclaration[17412-17463]"
    }, {
      "left" : "boolean provablyExecutesBefore(BasicBlock thatBlock)",
      "right" : "boolean provablyExecutesBefore(BasicBlock thatBlock)",
      "info" : "MethodDeclaration[17344-17974]:MethodDeclaration[17469-18099]"
    } ],
    "mappings" : [
 {
      "left" : "ScopedCallback",
      "right" : "ScopedCallback",
      "info" : "SimpleType[1664-1678]:SimpleType[1664-1678]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1680-1692]:SimpleType[1680-1692]"
    }, {
      "left" : "ReferenceCollectingCallback",
      "right" : "ReferenceCollectingCallback",
      "info" : "SimpleName[2505-2532]:SimpleName[2505-2532]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2533-2558]:SingleVariableDeclaration[2533-2558]"
    }, {
      "left" : "Behavior behavior",
      "right" : "Behavior behavior",
      "info" : "SingleVariableDeclaration[2560-2577]:SingleVariableDeclaration[2560-2577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2579-2644]:Block[2579-2644]"
    }, {
      "left" : "this(compiler, behavior, Predicates.<Var>alwaysTrue());",
      "right" : "this(compiler, behavior, Predicates.<Var>alwaysTrue());",
      "info" : "ConstructorInvocation[2585-2640]:ConstructorInvocation[2585-2640]"
    }, {
      "left" : "ReferenceCollectingCallback",
      "right" : "ReferenceCollectingCallback",
      "info" : "SimpleName[2854-2881]:SimpleName[2854-2881]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2882-2907]:SingleVariableDeclaration[2882-2907]"
    }, {
      "left" : "Behavior behavior",
      "right" : "Behavior behavior",
      "info" : "SingleVariableDeclaration[2909-2926]:SingleVariableDeclaration[2909-2926]"
    }, {
      "left" : "Predicate<Var> varFilter",
      "right" : "Predicate<Var> varFilter",
      "info" : "SingleVariableDeclaration[2934-2958]:SingleVariableDeclaration[2934-2958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2960-3057]:Block[2960-3057]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2966-2991]:ExpressionStatement[2966-2991]"
    }, {
      "left" : "this.behavior = behavior;",
      "right" : "this.behavior = behavior;",
      "info" : "ExpressionStatement[2996-3021]:ExpressionStatement[2996-3021]"
    }, {
      "left" : "this.varFilter = varFilter;",
      "right" : "this.varFilter = varFilter;",
      "info" : "ExpressionStatement[3026-3053]:ExpressionStatement[3026-3053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3167-3173]:Modifier[3167-3173]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3174-3178]:PrimitiveType[3174-3178]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3179-3186]:SimpleName[3179-3186]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[3187-3199]:SingleVariableDeclaration[3187-3199]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[3201-3210]:SingleVariableDeclaration[3201-3210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3212-3267]:Block[3212-3267]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[3218-3263]:ExpressionStatement[3218-3263]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3346-3352]:Modifier[3346-3352]"
    }, {
      "left" : "Set<Var>",
      "right" : "Set<Var>",
      "info" : "ParameterizedType[3353-3361]:ParameterizedType[3353-3361]"
    }, {
      "left" : "getReferencedVariables",
      "right" : "getReferencedVariables",
      "info" : "SimpleName[3362-3384]:SimpleName[3362-3384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3387-3426]:Block[3387-3426]"
    }, {
      "left" : "return referenceMap.keySet();",
      "right" : "return referenceMap.keySet();",
      "info" : "ReturnStatement[3393-3422]:ReturnStatement[3393-3422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3501-3507]:Modifier[3501-3507]"
    }, {
      "left" : "ReferenceCollection",
      "right" : "ReferenceCollection",
      "info" : "SimpleType[3508-3527]:SimpleType[3508-3527]"
    }, {
      "left" : "getReferenceCollection",
      "right" : "getReferenceCollection",
      "info" : "SimpleName[3528-3550]:SimpleName[3528-3550]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[3551-3556]:SingleVariableDeclaration[3551-3556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3558-3595]:Block[3558-3595]"
    }, {
      "left" : "return referenceMap.get(v);",
      "right" : "return referenceMap.get(v);",
      "info" : "ReturnStatement[3564-3591]:ReturnStatement[3564-3591]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3700-3706]:Modifier[3700-3706]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3707-3711]:PrimitiveType[3707-3711]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[3712-3717]:SimpleName[3712-3717]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[3718-3733]:SingleVariableDeclaration[3718-3733]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3735-3741]:SingleVariableDeclaration[3735-3741]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[3743-3754]:SingleVariableDeclaration[3743-3754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3756-4064]:Block[3756-4189]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[3762-3991]:IfStatement[3762-4116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3793-3991]:Block[3793-4116]"
    }, {
      "left" : "Var",
      "right" : "Var",
      "info" : "SimpleType[3801-3804]:SimpleType[3801-3804]"
    }, {
      "left" : "v",
      "right" : "v",
      "info" : "SimpleName[3805-3806]:SimpleName[3805-3806]"
    }, {
      "left" : "t.getScope().getVar(n.getString())",
      "right" : "t.getScope().getVar(n.getString())",
      "info" : "MethodInvocation[3809-3843]:MethodInvocation[3926-3960]"
    }, {
      "left" : "if (v != null && varFilter.apply(v))",
      "right" : "if (v != null && varFilter.apply(v))",
      "info" : "IfStatement[3851-3985]:IfStatement[3976-4110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3888-3985]:Block[4013-4110]"
    }, {
      "left" : "addReference(t, v,\n            new Reference(n, parent, t, blockStack.peek()));",
      "right" : "addReference(t, v,\n            new Reference(n, parent, t, blockStack.peek()));",
      "info" : "ExpressionStatement[3898-3977]:ExpressionStatement[4023-4102]"
    }, {
      "left" : "if (isBlockBoundary(n, parent))",
      "right" : "if (isBlockBoundary(n, parent))",
      "info" : "IfStatement[3997-4060]:IfStatement[4122-4185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4029-4060]:Block[4154-4185]"
    }, {
      "left" : "blockStack.pop();",
      "right" : "blockStack.pop();",
      "info" : "ExpressionStatement[4037-4054]:ExpressionStatement[4162-4179]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4142-4148]:Modifier[4267-4273]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4149-4153]:PrimitiveType[4274-4278]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[4154-4164]:SimpleName[4279-4289]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4165-4180]:SingleVariableDeclaration[4290-4305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4182-4349]:Block[4307-4474]"
    }, {
      "left" : "Node n = t.getScope().getRootNode();",
      "right" : "Node n = t.getScope().getRootNode();",
      "info" : "VariableDeclarationStatement[4188-4224]:VariableDeclarationStatement[4313-4349]"
    }, {
      "left" : "BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();",
      "right" : "BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();",
      "info" : "VariableDeclarationStatement[4229-4297]:VariableDeclarationStatement[4354-4422]"
    }, {
      "left" : "blockStack.push(new BasicBlock(parent, n));",
      "right" : "blockStack.push(new BasicBlock(parent, n));",
      "info" : "ExpressionStatement[4302-4345]:ExpressionStatement[4427-4470]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4428-4434]:Modifier[4553-4559]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4435-4439]:PrimitiveType[4560-4564]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[4440-4449]:SimpleName[4565-4574]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4450-4465]:SingleVariableDeclaration[4575-4590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4467-4540]:Block[4592-4665]"
    }, {
      "left" : "blockStack.pop();",
      "right" : "blockStack.pop();",
      "info" : "ExpressionStatement[4473-4490]:ExpressionStatement[4598-4615]"
    }, {
      "left" : "behavior.afterExitScope(t, referenceMap);",
      "right" : "behavior.afterExitScope(t, referenceMap);",
      "info" : "ExpressionStatement[4495-4536]:ExpressionStatement[4620-4661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4582-4588]:Modifier[4707-4713]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4589-4596]:PrimitiveType[4714-4721]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[4597-4611]:SimpleName[4722-4736]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[4612-4639]:SingleVariableDeclaration[4737-4764]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4641-4647]:SingleVariableDeclaration[4766-4772]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4655-4666]:SingleVariableDeclaration[4780-4791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4668-4857]:Block[4793-4982]"
    }, {
      "left" : "if (isBlockBoundary(n, parent))",
      "right" : "if (isBlockBoundary(n, parent))",
      "info" : "IfStatement[4736-4836]:IfStatement[4861-4961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4768-4836]:Block[4893-4961]"
    }, {
      "left" : "blockStack.push(new BasicBlock(blockStack.peek(), n));",
      "right" : "blockStack.push(new BasicBlock(blockStack.peek(), n));",
      "info" : "ExpressionStatement[4776-4830]:ExpressionStatement[4901-4955]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4841-4853]:ReturnStatement[4966-4978]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4941-4948]:Modifier[5066-5073]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4949-4955]:Modifier[5074-5080]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4956-4963]:PrimitiveType[5081-5088]"
    }, {
      "left" : "isBlockBoundary",
      "right" : "isBlockBoundary",
      "info" : "SimpleName[4964-4979]:SimpleName[5089-5104]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4980-4986]:SingleVariableDeclaration[5105-5111]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4988-4999]:SingleVariableDeclaration[5113-5124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5001-5849]:Block[5126-5974]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[5007-5806]:IfStatement[5132-5931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5027-5806]:Block[5152-5931]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.DO:\n        case Token.FOR:\n        case Token.TRY:\n        case Token.WHILE:\n        case Token.WITH:\n          // NOTE: TRY has up to 3 child blocks:\n          // TRY\n          //   BLOCK\n          //   BLOCK\n          //     CATCH\n          //   BLOCK\n          // Note that there is an explcit CATCH token but no explicit\n          // FINALLY token. For simplicity, we consider each BLOCK\n          // a separate basic BLOCK.\n          return true;\n        case Token.AND:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.OR:\n          // The first child of a conditional is not a boundary,\n          // but all the rest of the children are.\n          return n != parent.getFirstChild();\n\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.DO:\n        case Token.FOR:\n        case Token.TRY:\n        case Token.WHILE:\n        case Token.WITH:\n          // NOTE: TRY has up to 3 child blocks:\n          // TRY\n          //   BLOCK\n          //   BLOCK\n          //     CATCH\n          //   BLOCK\n          // Note that there is an explcit CATCH token but no explicit\n          // FINALLY token. For simplicity, we consider each BLOCK\n          // a separate basic BLOCK.\n          return true;\n        case Token.AND:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.OR:\n          // The first child of a conditional is not a boundary,\n          // but all the rest of the children are.\n          return n != parent.getFirstChild();\n\n      }",
      "info" : "SwitchStatement[5035-5800]:SwitchStatement[5160-5925]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[5071-5085]:SwitchCase[5196-5210]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[5094-5109]:SwitchCase[5219-5234]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[5118-5133]:SwitchCase[5243-5258]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[5142-5159]:SwitchCase[5267-5284]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[5168-5184]:SwitchCase[5293-5309]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5522-5534]:ReturnStatement[5647-5659]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[5543-5558]:SwitchCase[5668-5683]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[5567-5583]:SwitchCase[5692-5708]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[5592-5606]:SwitchCase[5717-5731]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[5615-5629]:SwitchCase[5740-5754]"
    }, {
      "left" : "return n != parent.getFirstChild();",
      "right" : "return n != parent.getFirstChild();",
      "info" : "ReturnStatement[5756-5791]:ReturnStatement[5881-5916]"
    }, {
      "left" : "return n.getType() == Token.CASE;",
      "right" : "return n.getType() == Token.CASE;",
      "info" : "ReturnStatement[5812-5845]:ReturnStatement[5937-5970]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5853-5860]:Modifier[5978-5985]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5861-5865]:PrimitiveType[5986-5990]"
    }, {
      "left" : "addReference",
      "right" : "addReference",
      "info" : "SimpleName[5866-5878]:SimpleName[5991-6003]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5879-5894]:SingleVariableDeclaration[6004-6019]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[5896-5901]:SingleVariableDeclaration[6021-6026]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[5903-5922]:SingleVariableDeclaration[6028-6047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5924-6239]:Block[6049-6364]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.get(v);",
      "info" : "VariableDeclarationStatement[5971-6027]:VariableDeclarationStatement[6096-6152]"
    }, {
      "left" : "if (referenceInfo == null)",
      "right" : "if (referenceInfo == null)",
      "info" : "IfStatement[6032-6157]:IfStatement[6157-6282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6059-6157]:Block[6184-6282]"
    }, {
      "left" : "referenceInfo = new ReferenceCollection();",
      "right" : "referenceInfo = new ReferenceCollection();",
      "info" : "ExpressionStatement[6067-6109]:ExpressionStatement[6192-6234]"
    }, {
      "left" : "referenceMap.put(v, referenceInfo);",
      "right" : "referenceMap.put(v, referenceInfo);",
      "info" : "ExpressionStatement[6116-6151]:ExpressionStatement[6241-6276]"
    }, {
      "left" : "referenceInfo.add(reference, t, v);",
      "right" : "referenceInfo.add(reference, t, v);",
      "info" : "ExpressionStatement[6200-6235]:ExpressionStatement[6325-6360]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[6373-6382]:TYPE_DECLARATION_KIND[6498-6507]"
    }, {
      "left" : "Behavior",
      "right" : "Behavior",
      "info" : "SimpleName[6383-6391]:SimpleName[6508-6516]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6458-6462]:PrimitiveType[6583-6587]"
    }, {
      "left" : "afterExitScope",
      "right" : "afterExitScope",
      "info" : "SimpleName[6463-6477]:SimpleName[6588-6602]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6478-6493]:SingleVariableDeclaration[6603-6618]"
    }, {
      "left" : "Map<Var, ReferenceCollection> referenceMap",
      "right" : "Map<Var, ReferenceCollection> referenceMap",
      "info" : "SingleVariableDeclaration[6503-6545]:SingleVariableDeclaration[6628-6670]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6614-6623]:MarkerAnnotation[6739-6748]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6628-6634]:Modifier[6753-6759]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6635-6639]:PrimitiveType[6760-6764]"
    }, {
      "left" : "afterExitScope",
      "right" : "afterExitScope",
      "info" : "SimpleName[6640-6654]:SimpleName[6765-6779]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6655-6670]:SingleVariableDeclaration[6780-6795]"
    }, {
      "left" : "Map<Var, ReferenceCollection> referenceMap",
      "right" : "Map<Var, ReferenceCollection> referenceMap",
      "info" : "SingleVariableDeclaration[6680-6722]:SingleVariableDeclaration[6805-6847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6724-6726]:Block[6849-6851]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6858-6864]:Modifier[6983-6989]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6865-6870]:TYPE_DECLARATION_KIND[6990-6995]"
    }, {
      "left" : "ReferenceCollection",
      "right" : "ReferenceCollection",
      "info" : "SimpleName[6871-6890]:SimpleName[6996-7015]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6954-6958]:PrimitiveType[7079-7083]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[6959-6962]:SimpleName[7084-7087]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[6963-6982]:SingleVariableDeclaration[7088-7107]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6984-6999]:SingleVariableDeclaration[7109-7124]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[7001-7006]:SingleVariableDeclaration[7126-7131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7008-7048]:Block[7133-7173]"
    }, {
      "left" : "references.add(reference);",
      "right" : "references.add(reference);",
      "info" : "ExpressionStatement[7016-7042]:ExpressionStatement[7141-7167]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7494-7503]:Modifier[7619-7628]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7504-7511]:PrimitiveType[7629-7636]"
    }, {
      "left" : "isWellDefined",
      "right" : "isWellDefined",
      "info" : "SimpleName[7512-7525]:SimpleName[7637-7650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7528-8159]:Block[7653-8284]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[7536-7565]:VariableDeclarationStatement[7661-7690]"
    }, {
      "left" : "if (size == 0)",
      "right" : "if (size == 0)",
      "info" : "IfStatement[7572-7618]:IfStatement[7697-7743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7587-7618]:Block[7712-7743]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7597-7610]:ReturnStatement[7722-7735]"
    }, {
      "left" : "Reference init = getInitializingReference();",
      "right" : "Reference init = getInitializingReference();",
      "info" : "VariableDeclarationStatement[7732-7776]:VariableDeclarationStatement[7857-7901]"
    }, {
      "left" : "if (init == null)",
      "right" : "if (init == null)",
      "info" : "IfStatement[7783-7832]:IfStatement[7908-7957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7801-7832]:Block[7926-7957]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7811-7824]:ReturnStatement[7936-7949]"
    }, {
      "left" : "Preconditions.checkState(references.get(0).isDeclaration());",
      "right" : "Preconditions.checkState(references.get(0).isDeclaration());",
      "info" : "ExpressionStatement[7840-7900]:ExpressionStatement[7965-8025]"
    }, {
      "left" : "BasicBlock initBlock = init.getBasicBlock();",
      "right" : "BasicBlock initBlock = init.getBasicBlock();",
      "info" : "VariableDeclarationStatement[7907-7951]:VariableDeclarationStatement[8032-8076]"
    }, {
      "left" : "for (int i = 1; i < size; i++)",
      "right" : "for (int i = 1; i < size; i++)",
      "info" : "ForStatement[7958-8133]:ForStatement[8083-8258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7989-8133]:Block[8114-8258]"
    }, {
      "left" : "if (!initBlock.provablyExecutesBefore(\n                references.get(i).getBasicBlock()))",
      "right" : "if (!initBlock.provablyExecutesBefore(\n                references.get(i).getBasicBlock()))",
      "info" : "IfStatement[7999-8125]:IfStatement[8124-8250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8090-8125]:Block[8215-8250]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8102-8115]:ReturnStatement[8227-8240]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8141-8153]:ReturnStatement[8266-8278]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8241-8248]:PrimitiveType[8366-8373]"
    }, {
      "left" : "isEscaped",
      "right" : "isEscaped",
      "info" : "SimpleName[8249-8258]:SimpleName[8374-8383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8261-8495]:Block[8386-8620]"
    }, {
      "left" : "Scope scope = null;",
      "right" : "Scope scope = null;",
      "info" : "VariableDeclarationStatement[8269-8288]:VariableDeclarationStatement[8394-8413]"
    }, {
      "left" : "for (Reference ref : references)",
      "right" : "for (Reference ref : references)",
      "info" : "EnhancedForStatement[8295-8469]:EnhancedForStatement[8420-8594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8328-8469]:Block[8453-8594]"
    }, {
      "left" : "if (scope == null)",
      "right" : "if (scope == null)",
      "info" : "IfStatement[8338-8461]:IfStatement[8463-8586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8357-8397]:Block[8482-8522]"
    }, {
      "left" : "scope = ref.scope;",
      "right" : "scope = ref.scope;",
      "info" : "ExpressionStatement[8369-8387]:ExpressionStatement[8494-8512]"
    }, {
      "left" : "if (scope != ref.scope)",
      "right" : "if (scope != ref.scope)",
      "info" : "IfStatement[8403-8461]:IfStatement[8528-8586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8427-8461]:Block[8552-8586]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8439-8451]:ReturnStatement[8564-8576]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8476-8489]:ReturnStatement[8601-8614]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8755-8762]:Modifier[8880-8887]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8763-8770]:PrimitiveType[8888-8895]"
    }, {
      "left" : "isInitializingDeclarationAt",
      "right" : "isInitializingDeclarationAt",
      "info" : "SimpleName[8771-8798]:SimpleName[8896-8923]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[8799-8808]:SingleVariableDeclaration[8924-8933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8810-9135]:Block[8935-9260]"
    }, {
      "left" : "Reference maybeInit = references.get(index);",
      "right" : "Reference maybeInit = references.get(index);",
      "info" : "VariableDeclarationStatement[8818-8862]:VariableDeclarationStatement[8943-8987]"
    }, {
      "left" : "if (maybeInit.isInitializingDeclaration())",
      "right" : "if (maybeInit.isInitializingDeclaration())",
      "info" : "IfStatement[8869-9109]:IfStatement[8994-9234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8912-9109]:Block[9037-9234]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9089-9101]:ReturnStatement[9214-9226]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9116-9129]:ReturnStatement[9241-9254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9394-9401]:Modifier[9519-9526]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9402-9409]:PrimitiveType[9527-9534]"
    }, {
      "left" : "isInitializingAssignmentAt",
      "right" : "isInitializingAssignmentAt",
      "info" : "SimpleName[9410-9436]:SimpleName[9535-9561]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[9437-9446]:SingleVariableDeclaration[9562-9571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9448-9866]:Block[9573-9991]"
    }, {
      "left" : "if (index < references.size() && index > 0)",
      "right" : "if (index < references.size() && index > 0)",
      "info" : "IfStatement[9456-9840]:IfStatement[9581-9965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9500-9840]:Block[9625-9965]"
    }, {
      "left" : "Reference maybeDecl = references.get(index-1);",
      "right" : "Reference maybeDecl = references.get(index-1);",
      "info" : "VariableDeclarationStatement[9510-9556]:VariableDeclarationStatement[9635-9681]"
    }, {
      "left" : "if (maybeDecl.isVarDeclaration())",
      "right" : "if (maybeDecl.isVarDeclaration())",
      "info" : "IfStatement[9565-9832]:IfStatement[9690-9957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9599-9832]:Block[9724-9957]"
    }, {
      "left" : "Preconditions.checkState(!maybeDecl.isInitializingDeclaration());",
      "right" : "Preconditions.checkState(!maybeDecl.isInitializingDeclaration());",
      "info" : "ExpressionStatement[9611-9676]:ExpressionStatement[9736-9801]"
    }, {
      "left" : "Reference maybeInit = references.get(index);",
      "right" : "Reference maybeInit = references.get(index);",
      "info" : "VariableDeclarationStatement[9687-9731]:VariableDeclarationStatement[9812-9856]"
    }, {
      "left" : "if (maybeInit.isSimpleAssignmentToName())",
      "right" : "if (maybeInit.isSimpleAssignmentToName())",
      "info" : "IfStatement[9742-9822]:IfStatement[9867-9947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9784-9822]:Block[9909-9947]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9798-9810]:ReturnStatement[9923-9935]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9847-9860]:ReturnStatement[9972-9985]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleType[10168-10177]:SimpleType[10293-10302]"
    }, {
      "left" : "getInitializingReference",
      "right" : "getInitializingReference",
      "info" : "SimpleName[10178-10202]:SimpleName[10303-10327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10205-10401]:Block[10330-10526]"
    }, {
      "left" : "if (isInitializingDeclarationAt(0))",
      "right" : "if (isInitializingDeclarationAt(0))",
      "info" : "IfStatement[10213-10376]:IfStatement[10338-10501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10249-10292]:Block[10374-10417]"
    }, {
      "left" : "return references.get(0);",
      "right" : "return references.get(0);",
      "info" : "ReturnStatement[10259-10284]:ReturnStatement[10384-10409]"
    }, {
      "left" : "if (isInitializingAssignmentAt(1))",
      "right" : "if (isInitializingAssignmentAt(1))",
      "info" : "IfStatement[10298-10376]:IfStatement[10423-10501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10333-10376]:Block[10458-10501]"
    }, {
      "left" : "return references.get(1);",
      "right" : "return references.get(1);",
      "info" : "ReturnStatement[10343-10368]:ReturnStatement[10468-10493]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10383-10395]:ReturnStatement[10508-10520]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleType[10489-10498]:SimpleType[10614-10623]"
    }, {
      "left" : "getInitializingReferenceForConstants",
      "right" : "getInitializingReferenceForConstants",
      "info" : "SimpleName[10499-10535]:SimpleName[10624-10660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10538-10772]:Block[10663-10897]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[10546-10575]:VariableDeclarationStatement[10671-10700]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[10582-10747]:ForStatement[10707-10872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10613-10747]:Block[10738-10872]"
    }, {
      "left" : "if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i))",
      "right" : "if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i))",
      "info" : "IfStatement[10623-10739]:IfStatement[10748-10864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10692-10739]:Block[10817-10864]"
    }, {
      "left" : "return references.get(i);",
      "right" : "return references.get(i);",
      "info" : "ReturnStatement[10704-10729]:ReturnStatement[10829-10854]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10754-10766]:ReturnStatement[10879-10891]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10889-10896]:PrimitiveType[11014-11021]"
    }, {
      "left" : "isAssignedOnceInLifetime",
      "right" : "isAssignedOnceInLifetime",
      "info" : "SimpleName[10897-10921]:SimpleName[11022-11046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10924-11341]:Block[11049-11466]"
    }, {
      "left" : "Reference ref = getOneAndOnlyAssignment();",
      "right" : "Reference ref = getOneAndOnlyAssignment();",
      "info" : "VariableDeclarationStatement[10932-10974]:VariableDeclarationStatement[11057-11099]"
    }, {
      "left" : "if (ref == null)",
      "right" : "if (ref == null)",
      "info" : "IfStatement[10981-11029]:IfStatement[11106-11154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10998-11029]:Block[11123-11154]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11008-11021]:ReturnStatement[11133-11146]"
    }, {
      "left" : "for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent())",
      "right" : "for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent())",
      "info" : "ForStatement[11090-11315]:ForStatement[11215-11440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11188-11315]:Block[11313-11440]"
    }, {
      "left" : "if (block.isFunction)",
      "right" : "if (block.isFunction)",
      "info" : "IfStatement[11198-11307]:IfStatement[11323-11432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11220-11248]:Block[11345-11373]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11232-11238]:BreakStatement[11357-11363]"
    }, {
      "left" : "if (block.isLoop)",
      "right" : "if (block.isLoop)",
      "info" : "IfStatement[11254-11307]:IfStatement[11379-11432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11272-11307]:Block[11397-11432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11284-11297]:ReturnStatement[11409-11422]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11323-11335]:ReturnStatement[11448-11460]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11459-11466]:Modifier[11584-11591]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleType[11467-11476]:SimpleType[11592-11601]"
    }, {
      "left" : "getOneAndOnlyAssignment",
      "right" : "getOneAndOnlyAssignment",
      "info" : "SimpleName[11477-11500]:SimpleName[11602-11625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11503-11893]:Block[11628-12018]"
    }, {
      "left" : "Reference assignment = null;",
      "right" : "Reference assignment = null;",
      "info" : "VariableDeclarationStatement[11511-11539]:VariableDeclarationStatement[11636-11664]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[11546-11575]:VariableDeclarationStatement[11671-11700]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[11582-11862]:ForStatement[11707-11987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11613-11862]:Block[11738-11987]"
    }, {
      "left" : "Reference ref = references.get(i);",
      "right" : "Reference ref = references.get(i);",
      "info" : "VariableDeclarationStatement[11623-11657]:VariableDeclarationStatement[11748-11782]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[11666-11854]:IfStatement[11791-11979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11721-11854]:Block[11846-11979]"
    }, {
      "left" : "if (assignment == null)",
      "right" : "if (assignment == null)",
      "info" : "IfStatement[11733-11844]:IfStatement[11858-11969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11757-11800]:Block[11882-11925]"
    }, {
      "left" : "assignment = ref;",
      "right" : "assignment = ref;",
      "info" : "ExpressionStatement[11771-11788]:ExpressionStatement[11896-11913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11806-11844]:Block[11931-11969]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11820-11832]:ReturnStatement[11945-11957]"
    }, {
      "left" : "return assignment;",
      "right" : "return assignment;",
      "info" : "ReturnStatement[11869-11887]:ReturnStatement[11994-12012]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11978-11985]:PrimitiveType[12103-12110]"
    }, {
      "left" : "isNeverAssigned",
      "right" : "isNeverAssigned",
      "info" : "SimpleName[11986-12001]:SimpleName[12111-12126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12004-12255]:Block[12129-12380]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[12012-12041]:VariableDeclarationStatement[12137-12166]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[12048-12230]:ForStatement[12173-12355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12079-12230]:Block[12204-12355]"
    }, {
      "left" : "Reference ref = references.get(i);",
      "right" : "Reference ref = references.get(i);",
      "info" : "VariableDeclarationStatement[12089-12123]:VariableDeclarationStatement[12214-12248]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[12132-12222]:IfStatement[12257-12347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12187-12222]:Block[12312-12347]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12199-12212]:ReturnStatement[12324-12337]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12237-12249]:ReturnStatement[12362-12374]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12261-12268]:PrimitiveType[12386-12393]"
    }, {
      "left" : "firstReferenceIsAssigningDeclaration",
      "right" : "firstReferenceIsAssigningDeclaration",
      "info" : "SimpleName[12269-12305]:SimpleName[12394-12430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12308-12471]:Block[12433-12596]"
    }, {
      "left" : "int size = references.size();",
      "right" : "int size = references.size();",
      "info" : "VariableDeclarationStatement[12316-12345]:VariableDeclarationStatement[12441-12470]"
    }, {
      "left" : "if (size > 0 && references.get(0).isInitializingDeclaration())",
      "right" : "if (size > 0 && references.get(0).isInitializingDeclaration())",
      "info" : "IfStatement[12352-12445]:IfStatement[12477-12570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12415-12445]:Block[12540-12570]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12425-12437]:ReturnStatement[12550-12562]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12452-12465]:ReturnStatement[12577-12590]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12556-12562]:Modifier[12681-12687]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[12563-12568]:Modifier[12688-12693]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12569-12574]:TYPE_DECLARATION_KIND[12694-12699]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[12575-12584]:SimpleName[12700-12709]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[12928-12937]:SimpleName[13053-13062]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[12938-12951]:SingleVariableDeclaration[13063-13076]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[12953-12964]:SingleVariableDeclaration[13078-13089]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[12966-12981]:SingleVariableDeclaration[13091-13106]"
    }, {
      "left" : "BasicBlock basicBlock",
      "right" : "BasicBlock basicBlock",
      "info" : "SingleVariableDeclaration[12991-13012]:SingleVariableDeclaration[13116-13137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13014-13127]:Block[13139-13252]"
    }, {
      "left" : "this(nameNode, parent, parent.getParent(), basicBlock, t.getScope(),\n           t.getSourceName());",
      "right" : "this(nameNode, parent, parent.getParent(), basicBlock, t.getScope(),\n           t.getSourceName());",
      "info" : "ConstructorInvocation[13022-13121]:ConstructorInvocation[13147-13246]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13273-13279]:Modifier[13398-13404]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleType[13280-13289]:SimpleType[13405-13414]"
    }, {
      "left" : "newBleedingFunction",
      "right" : "newBleedingFunction",
      "info" : "SimpleName[13290-13309]:SimpleName[13415-13434]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[13310-13325]:SingleVariableDeclaration[13435-13450]"
    }, {
      "left" : "BasicBlock basicBlock",
      "right" : "BasicBlock basicBlock",
      "info" : "SingleVariableDeclaration[13335-13356]:SingleVariableDeclaration[13460-13481]"
    }, {
      "left" : "Node func",
      "right" : "Node func",
      "info" : "SingleVariableDeclaration[13358-13367]:SingleVariableDeclaration[13483-13492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13369-13505]:Block[13494-13630]"
    }, {
      "left" : "return new Reference(func.getFirstChild(), func, func.getParent(),\n          basicBlock, t.getScope(), t.getSourceName());",
      "right" : "return new Reference(func.getFirstChild(), func, func.getParent(),\n          basicBlock, t.getScope(), t.getSourceName());",
      "info" : "ReturnStatement[13377-13499]:ReturnStatement[13502-13624]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13511-13518]:Modifier[13636-13643]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[13519-13528]:SimpleName[13644-13653]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[13529-13542]:SingleVariableDeclaration[13654-13667]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13544-13555]:SingleVariableDeclaration[13669-13680]"
    }, {
      "left" : "Node grandparent",
      "right" : "Node grandparent",
      "info" : "SingleVariableDeclaration[13557-13573]:SingleVariableDeclaration[13682-13698]"
    }, {
      "left" : "BasicBlock basicBlock",
      "right" : "BasicBlock basicBlock",
      "info" : "SingleVariableDeclaration[13583-13604]:SingleVariableDeclaration[13708-13729]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[13606-13617]:SingleVariableDeclaration[13731-13742]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[13619-13636]:SingleVariableDeclaration[13744-13761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13638-13841]:Block[13763-13966]"
    }, {
      "left" : "this.nameNode = nameNode;",
      "right" : "this.nameNode = nameNode;",
      "info" : "ExpressionStatement[13646-13671]:ExpressionStatement[13771-13796]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[13678-13699]:ExpressionStatement[13803-13824]"
    }, {
      "left" : "this.grandparent = grandparent;",
      "right" : "this.grandparent = grandparent;",
      "info" : "ExpressionStatement[13706-13737]:ExpressionStatement[13831-13862]"
    }, {
      "left" : "this.basicBlock = basicBlock;",
      "right" : "this.basicBlock = basicBlock;",
      "info" : "ExpressionStatement[13744-13773]:ExpressionStatement[13869-13898]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[13780-13799]:ExpressionStatement[13905-13924]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[13806-13835]:ExpressionStatement[13931-13960]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13847-13854]:PrimitiveType[13972-13979]"
    }, {
      "left" : "isDeclaration",
      "right" : "isDeclaration",
      "info" : "SimpleName[13855-13868]:SimpleName[13980-13993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13871-14034]:Block[13996-14159]"
    }, {
      "left" : "return DECLARATION_PARENTS.contains(parent.getType()) ||\n          parent.getType() == Token.LP &&\n          grandparent.getType() == Token.FUNCTION;",
      "right" : "return DECLARATION_PARENTS.contains(parent.getType()) ||\n          parent.getType() == Token.LP &&\n          grandparent.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[13879-14028]:ReturnStatement[14004-14153]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14040-14047]:PrimitiveType[14165-14172]"
    }, {
      "left" : "isVarDeclaration",
      "right" : "isVarDeclaration",
      "info" : "SimpleName[14048-14064]:SimpleName[14173-14189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14067-14118]:Block[14192-14243]"
    }, {
      "left" : "return parent.getType() == Token.VAR;",
      "right" : "return parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[14075-14112]:ReturnStatement[14200-14237]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14124-14131]:PrimitiveType[14249-14256]"
    }, {
      "left" : "isHoistedFunction",
      "right" : "isHoistedFunction",
      "info" : "SimpleName[14132-14149]:SimpleName[14257-14274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14152-14219]:Block[14277-14344]"
    }, {
      "left" : "return NodeUtil.isHoistedFunctionDeclaration(parent);",
      "right" : "return NodeUtil.isHoistedFunctionDeclaration(parent);",
      "info" : "ReturnStatement[14160-14213]:ReturnStatement[14285-14338]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14315-14322]:PrimitiveType[14440-14447]"
    }, {
      "left" : "isInitializingDeclaration",
      "right" : "isInitializingDeclaration",
      "info" : "SimpleName[14323-14348]:SimpleName[14448-14473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14351-14624]:Block[14476-14749]"
    }, {
      "left" : "return isDeclaration() &&\n          (parent.getType() != Token.VAR || nameNode.getFirstChild() != null);",
      "right" : "return isDeclaration() &&\n          (parent.getType() != Token.VAR || nameNode.getFirstChild() != null);",
      "info" : "ReturnStatement[14514-14618]:ReturnStatement[14639-14743]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14772-14776]:SimpleType[14897-14901]"
    }, {
      "left" : "getAssignedValue",
      "right" : "getAssignedValue",
      "info" : "SimpleName[14777-14793]:SimpleName[14902-14918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14796-14916]:Block[14921-15041]"
    }, {
      "left" : "return (parent.getType() == Token.FUNCTION)\n          ? parent : NodeUtil.getAssignedValue(getNameNode());",
      "right" : "return (parent.getType() == Token.FUNCTION)\n          ? parent : NodeUtil.getAssignedValue(getNameNode());",
      "info" : "ReturnStatement[14804-14910]:ReturnStatement[14929-15035]"
    }, {
      "left" : "BasicBlock",
      "right" : "BasicBlock",
      "info" : "SimpleType[14922-14932]:SimpleType[15047-15057]"
    }, {
      "left" : "getBasicBlock",
      "right" : "getBasicBlock",
      "info" : "SimpleName[14933-14946]:SimpleName[15058-15071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14949-14981]:Block[15074-15106]"
    }, {
      "left" : "return basicBlock;",
      "right" : "return basicBlock;",
      "info" : "ReturnStatement[14957-14975]:ReturnStatement[15082-15100]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14987-14991]:SimpleType[15112-15116]"
    }, {
      "left" : "getParent",
      "right" : "getParent",
      "info" : "SimpleName[14992-15001]:SimpleName[15117-15126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15004-15032]:Block[15129-15157]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[15012-15026]:ReturnStatement[15137-15151]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15038-15042]:SimpleType[15163-15167]"
    }, {
      "left" : "getNameNode",
      "right" : "getNameNode",
      "info" : "SimpleName[15043-15054]:SimpleName[15168-15179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15057-15087]:Block[15182-15212]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[15065-15081]:ReturnStatement[15190-15206]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15093-15097]:SimpleType[15218-15222]"
    }, {
      "left" : "getGrandparent",
      "right" : "getGrandparent",
      "info" : "SimpleName[15098-15112]:SimpleName[15223-15237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15115-15148]:Block[15240-15273]"
    }, {
      "left" : "return grandparent;",
      "right" : "return grandparent;",
      "info" : "ReturnStatement[15123-15142]:ReturnStatement[15248-15267]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15154-15161]:Modifier[15279-15286]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15162-15168]:Modifier[15287-15293]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15169-15176]:PrimitiveType[15294-15301]"
    }, {
      "left" : "isLhsOfForInExpression",
      "right" : "isLhsOfForInExpression",
      "info" : "SimpleName[15177-15199]:SimpleName[15302-15324]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15200-15206]:SingleVariableDeclaration[15325-15331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15208-15418]:Block[15333-15543]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[15216-15244]:VariableDeclarationStatement[15341-15369]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[15251-15342]:IfStatement[15376-15467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15286-15342]:Block[15411-15467]"
    }, {
      "left" : "return isLhsOfForInExpression(parent);",
      "right" : "return isLhsOfForInExpression(parent);",
      "info" : "ReturnStatement[15296-15334]:ReturnStatement[15421-15459]"
    }, {
      "left" : "return NodeUtil.isForIn(parent) && parent.getFirstChild() == n;",
      "right" : "return NodeUtil.isForIn(parent) && parent.getFirstChild() == n;",
      "info" : "ReturnStatement[15349-15412]:ReturnStatement[15474-15537]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15424-15431]:PrimitiveType[15549-15556]"
    }, {
      "left" : "isSimpleAssignmentToName",
      "right" : "isSimpleAssignmentToName",
      "info" : "SimpleName[15432-15456]:SimpleName[15557-15581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15459-15561]:Block[15584-15686]"
    }, {
      "left" : "return parent.getType() == Token.ASSIGN\n          && parent.getFirstChild() == nameNode;",
      "right" : "return parent.getType() == Token.ASSIGN\n          && parent.getFirstChild() == nameNode;",
      "info" : "ReturnStatement[15467-15555]:ReturnStatement[15592-15680]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15567-15574]:PrimitiveType[15692-15699]"
    }, {
      "left" : "isLvalue",
      "right" : "isLvalue",
      "info" : "SimpleName[15575-15583]:SimpleName[15700-15708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15586-15929]:Block[15711-16054]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[15594-15628]:VariableDeclarationStatement[15719-15753]"
    }, {
      "left" : "return (parentType == Token.VAR && nameNode.getFirstChild() != null)\n          || parentType == Token.INC\n          || parentType == Token.DEC\n          || (NodeUtil.isAssignmentOp(parent)\n              && parent.getFirstChild() == nameNode)\n          || isLhsOfForInExpression(nameNode);",
      "right" : "return (parentType == Token.VAR && nameNode.getFirstChild() != null)\n          || parentType == Token.INC\n          || parentType == Token.DEC\n          || (NodeUtil.isAssignmentOp(parent)\n              && parent.getFirstChild() == nameNode)\n          || isLhsOfForInExpression(nameNode);",
      "info" : "ReturnStatement[15635-15923]:ReturnStatement[15760-16048]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[15935-15940]:SimpleType[16060-16065]"
    }, {
      "left" : "getScope",
      "right" : "getScope",
      "info" : "SimpleName[15941-15949]:SimpleName[16066-16074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15952-15979]:Block[16077-16104]"
    }, {
      "left" : "return scope;",
      "right" : "return scope;",
      "info" : "ReturnStatement[15960-15973]:ReturnStatement[16085-16098]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15985-15991]:Modifier[16110-16116]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15992-15998]:SimpleType[16117-16123]"
    }, {
      "left" : "getSourceName",
      "right" : "getSourceName",
      "info" : "SimpleName[15999-16012]:SimpleName[16124-16137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16015-16047]:Block[16140-16172]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[16023-16041]:ReturnStatement[16148-16166]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16184-16190]:Modifier[16309-16315]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16191-16196]:Modifier[16316-16321]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16197-16202]:TYPE_DECLARATION_KIND[16322-16327]"
    }, {
      "left" : "BasicBlock",
      "right" : "BasicBlock",
      "info" : "SimpleName[16203-16213]:SimpleName[16328-16338]"
    }, {
      "left" : "BasicBlock",
      "right" : "BasicBlock",
      "info" : "SimpleName[16781-16791]:SimpleName[16906-16916]"
    }, {
      "left" : "BasicBlock parent",
      "right" : "BasicBlock parent",
      "info" : "SingleVariableDeclaration[16792-16809]:SingleVariableDeclaration[16917-16934]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[16811-16820]:SingleVariableDeclaration[16936-16945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16822-17281]:Block[16947-17406]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[16830-16851]:ExpressionStatement[16955-16976]"
    }, {
      "left" : "this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);",
      "right" : "this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);",
      "info" : "ExpressionStatement[16905-16966]:ExpressionStatement[17030-17091]"
    }, {
      "left" : "this.isFunction = root.getType() == Token.FUNCTION;",
      "right" : "this.isFunction = root.getType() == Token.FUNCTION;",
      "info" : "ExpressionStatement[16974-17025]:ExpressionStatement[17099-17150]"
    }, {
      "left" : "if (root.getParent() != null)",
      "right" : "if (root.getParent() != null)",
      "info" : "IfStatement[17033-17275]:IfStatement[17158-17400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17063-17231]:Block[17188-17356]"
    }, {
      "left" : "int pType = root.getParent().getType();",
      "right" : "int pType = root.getParent().getType();",
      "info" : "VariableDeclarationStatement[17073-17112]:VariableDeclarationStatement[17198-17237]"
    }, {
      "left" : "this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;",
      "right" : "this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;",
      "info" : "ExpressionStatement[17121-17223]:ExpressionStatement[17246-17348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17237-17275]:Block[17362-17400]"
    }, {
      "left" : "this.isLoop = false;",
      "right" : "this.isLoop = false;",
      "info" : "ExpressionStatement[17247-17267]:ExpressionStatement[17372-17392]"
    }, {
      "left" : "BasicBlock",
      "right" : "BasicBlock",
      "info" : "SimpleType[17287-17297]:SimpleType[17412-17422]"
    }, {
      "left" : "getParent",
      "right" : "getParent",
      "info" : "SimpleName[17298-17307]:SimpleName[17423-17432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17310-17338]:Block[17435-17463]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[17318-17332]:ReturnStatement[17443-17457]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17466-17473]:PrimitiveType[17591-17598]"
    }, {
      "left" : "provablyExecutesBefore",
      "right" : "provablyExecutesBefore",
      "info" : "SimpleName[17474-17496]:SimpleName[17599-17621]"
    }, {
      "left" : "BasicBlock thatBlock",
      "right" : "BasicBlock thatBlock",
      "info" : "SingleVariableDeclaration[17497-17517]:SingleVariableDeclaration[17622-17642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17519-17974]:Block[17644-18099]"
    }, {
      "left" : "BasicBlock currentBlock;",
      "right" : "BasicBlock currentBlock;",
      "info" : "VariableDeclarationStatement[17680-17704]:VariableDeclarationStatement[17805-17829]"
    }, {
      "left" : "for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent())",
      "right" : "for (currentBlock = thatBlock;\n           currentBlock != null && currentBlock != this;\n           currentBlock = currentBlock.getParent())",
      "info" : "ForStatement[17711-17932]:ForStatement[17836-18057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17851-17932]:Block[17976-18057]"
    }, {
      "left" : "if (currentBlock.isHoisted)",
      "right" : "if (currentBlock.isHoisted)",
      "info" : "IfStatement[17861-17924]:IfStatement[17986-18049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17889-17924]:Block[18014-18049]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17901-17914]:ReturnStatement[18026-18039]"
    }, {
      "left" : "return currentBlock == this;",
      "right" : "return currentBlock == this;",
      "info" : "ReturnStatement[17940-17968]:ReturnStatement[18065-18093]"
    } ]
  },
  "interFileMappings" : { }
}