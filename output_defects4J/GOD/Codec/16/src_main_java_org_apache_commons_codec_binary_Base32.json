{
  "matchedElements" : [
 {
    "left" : "class : Base32",
    "right" : "class : Base32",
    "info" : "TypeDeclaration[846-26049]:TypeDeclaration[846-26094]"
  }, {
    "left" : "BITS_PER_ENCODED_BYTE",
    "right" : "BITS_PER_ENCODED_BYTE",
    "info" : "FieldDeclaration[1657-1908]:FieldDeclaration[1657-1908]"
  }, {
    "left" : "BYTES_PER_ENCODED_BLOCK",
    "right" : "BYTES_PER_ENCODED_BLOCK",
    "info" : "FieldDeclaration[1913-1966]:FieldDeclaration[1913-1966]"
  }, {
    "left" : "BYTES_PER_UNENCODED_BLOCK",
    "right" : "BYTES_PER_UNENCODED_BLOCK",
    "info" : "FieldDeclaration[1971-2026]:FieldDeclaration[1971-2026]"
  }, {
    "left" : "CHUNK_SEPARATOR",
    "right" : "CHUNK_SEPARATOR",
    "info" : "FieldDeclaration[2032-2246]:FieldDeclaration[2032-2246]"
  }, {
    "left" : "DECODE_TABLE",
    "right" : "DECODE_TABLE",
    "info" : "FieldDeclaration[2252-3228]:FieldDeclaration[2252-3228]"
  }, {
    "left" : "ENCODE_TABLE",
    "right" : "ENCODE_TABLE",
    "info" : "FieldDeclaration[3234-3670]:FieldDeclaration[3234-3670]"
  }, {
    "left" : "HEX_DECODE_TABLE",
    "right" : "HEX_DECODE_TABLE",
    "info" : "FieldDeclaration[3676-4619]:FieldDeclaration[3676-4664]"
  }, {
    "left" : "HEX_ENCODE_TABLE",
    "right" : "HEX_ENCODE_TABLE",
    "info" : "FieldDeclaration[4625-5069]:FieldDeclaration[4670-5114]"
  }, {
    "left" : "MASK_5BITS",
    "right" : "MASK_5BITS",
    "info" : "FieldDeclaration[5075-5190]:FieldDeclaration[5120-5235]"
  }, {
    "left" : "decodeSize",
    "right" : "decodeSize",
    "info" : "FieldDeclaration[5640-5892]:FieldDeclaration[5685-5937]"
  }, {
    "left" : "decodeTable",
    "right" : "decodeTable",
    "info" : "FieldDeclaration[5898-5975]:FieldDeclaration[5943-6020]"
  }, {
    "left" : "encodeSize",
    "right" : "encodeSize",
    "info" : "FieldDeclaration[5981-6229]:FieldDeclaration[6026-6274]"
  }, {
    "left" : "encodeTable",
    "right" : "encodeTable",
    "info" : "FieldDeclaration[6235-6312]:FieldDeclaration[6280-6357]"
  }, {
    "left" : "lineSeparator",
    "right" : "lineSeparator",
    "info" : "FieldDeclaration[6318-6461]:FieldDeclaration[6363-6506]"
  }, {
    "left" : "public Base32()",
    "right" : "public Base32()",
    "info" : "MethodDeclaration[6467-6676]:MethodDeclaration[6512-6721]"
  }, {
    "left" : "public Base32(pad byte)",
    "right" : "public Base32(pad byte)",
    "info" : "MethodDeclaration[6682-6948]:MethodDeclaration[6727-6993]"
  }, {
    "left" : "public Base32(useHex boolean)",
    "right" : "public Base32(useHex boolean)",
    "info" : "MethodDeclaration[6954-7265]:MethodDeclaration[6999-7310]"
  }, {
    "left" : "public Base32(useHex boolean, pad byte)",
    "right" : "public Base32(useHex boolean, pad byte)",
    "info" : "MethodDeclaration[7271-7635]:MethodDeclaration[7316-7680]"
  }, {
    "left" : "public Base32(lineLength int)",
    "right" : "public Base32(lineLength int)",
    "info" : "MethodDeclaration[7641-8214]:MethodDeclaration[7686-8259]"
  }, {
    "left" : "public Base32(lineLength int, lineSeparator )",
    "right" : "public Base32(lineLength int, lineSeparator )",
    "info" : "MethodDeclaration[8220-9228]:MethodDeclaration[8265-9273]"
  }, {
    "left" : "public Base32(lineLength int, lineSeparator , useHex boolean)",
    "right" : "public Base32(lineLength int, lineSeparator , useHex boolean)",
    "info" : "MethodDeclaration[9234-10465]:MethodDeclaration[9279-10510]"
  }, {
    "left" : "public Base32(lineLength int, lineSeparator , useHex boolean, pad byte)",
    "right" : "public Base32(lineLength int, lineSeparator , useHex boolean, pad byte)",
    "info" : "MethodDeclaration[10471-13175]:MethodDeclaration[10516-13220]"
  }, {
    "left" : "package decode(in , inPos int, inAvail int, context ) : void",
    "right" : "package decode(in , inPos int, inAvail int, context ) : void",
    "info" : "MethodDeclaration[13181-18739]:MethodDeclaration[13226-18784]"
  }, {
    "left" : "package encode(in , inPos int, inAvail int, context ) : void",
    "right" : "package encode(in , inPos int, inAvail int, context ) : void",
    "info" : "MethodDeclaration[18745-25631]:MethodDeclaration[18790-25676]"
  }, {
    "left" : "public isInAlphabet(octet byte) : boolean",
    "right" : "public isInAlphabet(octet byte) : boolean",
    "info" : "MethodDeclaration[25637-26047]:MethodDeclaration[25682-26092]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1611-1617]:Modifier[1611-1617]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1618-1623]:TYPE_DECLARATION_KIND[1618-1623]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6632-6638]:Modifier[6677-6683]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[6639-6645]:SimpleName[6684-6690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6648-6676]:Block[6693-6721]"
  }, {
    "left" : "this(false);",
    "right" : "this(false);",
    "info" : "ConstructorInvocation[6658-6670]:ConstructorInvocation[6703-6715]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6885-6891]:Modifier[6930-6936]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[6892-6898]:SimpleName[6937-6943]"
  }, {
    "left" : "final byte pad",
    "right" : "final byte pad",
    "info" : "SingleVariableDeclaration[6899-6913]:SingleVariableDeclaration[6944-6958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6915-6948]:Block[6960-6993]"
  }, {
    "left" : "this(false, pad);",
    "right" : "this(false, pad);",
    "info" : "ConstructorInvocation[6925-6942]:ConstructorInvocation[6970-6987]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7178-7184]:Modifier[7223-7229]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[7185-7191]:SimpleName[7230-7236]"
  }, {
    "left" : "final boolean useHex",
    "right" : "final boolean useHex",
    "info" : "SingleVariableDeclaration[7192-7212]:SingleVariableDeclaration[7237-7257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7214-7265]:Block[7259-7310]"
  }, {
    "left" : "this(0, null, useHex, PAD_DEFAULT);",
    "right" : "this(0, null, useHex, PAD_DEFAULT);",
    "info" : "ConstructorInvocation[7224-7259]:ConstructorInvocation[7269-7304]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7540-7546]:Modifier[7585-7591]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[7547-7553]:SimpleName[7592-7598]"
  }, {
    "left" : "final boolean useHex",
    "right" : "final boolean useHex",
    "info" : "SingleVariableDeclaration[7554-7574]:SingleVariableDeclaration[7599-7619]"
  }, {
    "left" : "final byte pad",
    "right" : "final byte pad",
    "info" : "SingleVariableDeclaration[7576-7590]:SingleVariableDeclaration[7621-7635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7592-7635]:Block[7637-7680]"
  }, {
    "left" : "this(0, null, useHex, pad);",
    "right" : "this(0, null, useHex, pad);",
    "info" : "ConstructorInvocation[7602-7629]:ConstructorInvocation[7647-7674]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8128-8134]:Modifier[8173-8179]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[8135-8141]:SimpleName[8180-8186]"
  }, {
    "left" : "final int lineLength",
    "right" : "final int lineLength",
    "info" : "SingleVariableDeclaration[8142-8162]:SingleVariableDeclaration[8187-8207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8164-8214]:Block[8209-8259]"
  }, {
    "left" : "this(lineLength, CHUNK_SEPARATOR);",
    "right" : "this(lineLength, CHUNK_SEPARATOR);",
    "info" : "ConstructorInvocation[8174-8208]:ConstructorInvocation[8219-8253]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9096-9102]:Modifier[9141-9147]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[9103-9109]:SimpleName[9148-9154]"
  }, {
    "left" : "final int lineLength",
    "right" : "final int lineLength",
    "info" : "SingleVariableDeclaration[9110-9130]:SingleVariableDeclaration[9155-9175]"
  }, {
    "left" : "final byte[] lineSeparator",
    "right" : "final byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[9132-9158]:SingleVariableDeclaration[9177-9203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9160-9228]:Block[9205-9273]"
  }, {
    "left" : "this(lineLength, lineSeparator, false, PAD_DEFAULT);",
    "right" : "this(lineLength, lineSeparator, false, PAD_DEFAULT);",
    "info" : "ConstructorInvocation[9170-9222]:ConstructorInvocation[9215-9267]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10310-10316]:Modifier[10355-10361]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[10317-10323]:SimpleName[10362-10368]"
  }, {
    "left" : "final int lineLength",
    "right" : "final int lineLength",
    "info" : "SingleVariableDeclaration[10324-10344]:SingleVariableDeclaration[10369-10389]"
  }, {
    "left" : "final byte[] lineSeparator",
    "right" : "final byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[10346-10372]:SingleVariableDeclaration[10391-10417]"
  }, {
    "left" : "final boolean useHex",
    "right" : "final boolean useHex",
    "info" : "SingleVariableDeclaration[10374-10394]:SingleVariableDeclaration[10419-10439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10396-10465]:Block[10441-10510]"
  }, {
    "left" : "this(lineLength, lineSeparator, useHex, PAD_DEFAULT);",
    "right" : "this(lineLength, lineSeparator, useHex, PAD_DEFAULT);",
    "info" : "ConstructorInvocation[10406-10459]:ConstructorInvocation[10451-10504]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11592-11598]:Modifier[11637-11643]"
  }, {
    "left" : "Base32",
    "right" : "Base32",
    "info" : "SimpleName[11599-11605]:SimpleName[11644-11650]"
  }, {
    "left" : "final int lineLength",
    "right" : "final int lineLength",
    "info" : "SingleVariableDeclaration[11606-11626]:SingleVariableDeclaration[11651-11671]"
  }, {
    "left" : "final byte[] lineSeparator",
    "right" : "final byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[11628-11654]:SingleVariableDeclaration[11673-11699]"
  }, {
    "left" : "final boolean useHex",
    "right" : "final boolean useHex",
    "info" : "SingleVariableDeclaration[11656-11676]:SingleVariableDeclaration[11701-11721]"
  }, {
    "left" : "final byte pad",
    "right" : "final byte pad",
    "info" : "SingleVariableDeclaration[11678-11692]:SingleVariableDeclaration[11723-11737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11694-13175]:Block[11739-13220]"
  }, {
    "left" : "super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,\n                lineSeparator == null ? 0 : lineSeparator.length, pad);",
    "right" : "super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,\n                lineSeparator == null ? 0 : lineSeparator.length, pad);",
    "info" : "SuperConstructorInvocation[11704-11845]:SuperConstructorInvocation[11749-11890]"
  }, {
    "left" : "if (useHex)",
    "right" : "if (useHex)",
    "info" : "IfStatement[11854-12082]:IfStatement[11899-12127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11866-11975]:Block[11911-12020]"
  }, {
    "left" : "this.encodeTable = HEX_ENCODE_TABLE;",
    "right" : "this.encodeTable = HEX_ENCODE_TABLE;",
    "info" : "ExpressionStatement[11880-11916]:ExpressionStatement[11925-11961]"
  }, {
    "left" : "this.decodeTable = HEX_DECODE_TABLE;",
    "right" : "this.decodeTable = HEX_DECODE_TABLE;",
    "info" : "ExpressionStatement[11929-11965]:ExpressionStatement[11974-12010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11981-12082]:Block[12026-12127]"
  }, {
    "left" : "this.encodeTable = ENCODE_TABLE;",
    "right" : "this.encodeTable = ENCODE_TABLE;",
    "info" : "ExpressionStatement[11995-12027]:ExpressionStatement[12040-12072]"
  }, {
    "left" : "this.decodeTable = DECODE_TABLE;",
    "right" : "this.decodeTable = DECODE_TABLE;",
    "info" : "ExpressionStatement[12040-12072]:ExpressionStatement[12085-12117]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0)",
    "info" : "IfStatement[12091-12964]:IfStatement[12136-13009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12111-12853]:Block[12156-12898]"
  }, {
    "left" : "if (lineSeparator == null)",
    "right" : "if (lineSeparator == null)",
    "info" : "IfStatement[12125-12283]:IfStatement[12170-12328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12152-12283]:Block[12197-12328]"
  }, {
    "left" : "throw new IllegalArgumentException(\"lineLength \" + lineLength + \" > 0, but lineSeparator is null\");",
    "right" : "throw new IllegalArgumentException(\"lineLength \" + lineLength + \" > 0, but lineSeparator is null\");",
    "info" : "ThrowStatement[12170-12269]:ThrowStatement[12215-12314]"
  }, {
    "left" : "if (containsAlphabetOrPad(lineSeparator))",
    "right" : "if (containsAlphabetOrPad(lineSeparator))",
    "info" : "IfStatement[12354-12607]:IfStatement[12399-12652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12396-12607]:Block[12441-12652]"
  }, {
    "left" : "final String sep = StringUtils.newStringUtf8(lineSeparator);",
    "right" : "final String sep = StringUtils.newStringUtf8(lineSeparator);",
    "info" : "VariableDeclarationStatement[12414-12474]:VariableDeclarationStatement[12459-12519]"
  }, {
    "left" : "throw new IllegalArgumentException(\"lineSeparator must not contain Base32 characters: [
\" + sep + \"]\");",
    "right" : "throw new IllegalArgumentException(\"lineSeparator must not contain Base32 characters: [
\" + sep + \"]\");",
    "info" : "ThrowStatement[12491-12593]:ThrowStatement[12536-12638]"
  }, {
    "left" : "this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;",
    "right" : "this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;",
    "info" : "ExpressionStatement[12620-12685]:ExpressionStatement[12665-12730]"
  }, {
    "left" : "this.lineSeparator = new byte[lineSeparator.length];",
    "right" : "this.lineSeparator = new byte[lineSeparator.length];",
    "info" : "ExpressionStatement[12698-12750]:ExpressionStatement[12743-12795]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "info" : "ExpressionStatement[12763-12843]:ExpressionStatement[12808-12888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12859-12964]:Block[12904-13009]"
  }, {
    "left" : "this.encodeSize = BYTES_PER_ENCODED_BLOCK;",
    "right" : "this.encodeSize = BYTES_PER_ENCODED_BLOCK;",
    "info" : "ExpressionStatement[12873-12915]:ExpressionStatement[12918-12960]"
  }, {
    "left" : "this.lineSeparator = null;",
    "right" : "this.lineSeparator = null;",
    "info" : "ExpressionStatement[12928-12954]:ExpressionStatement[12973-12999]"
  }, {
    "left" : "this.decodeSize = this.encodeSize - 1;",
    "right" : "this.decodeSize = this.encodeSize - 1;",
    "info" : "ExpressionStatement[12973-13011]:ExpressionStatement[13018-13056]"
  }, {
    "left" : "if (isInAlphabet(pad) || isWhiteSpace(pad))",
    "right" : "if (isInAlphabet(pad) || isWhiteSpace(pad))",
    "info" : "IfStatement[13021-13169]:IfStatement[13066-13214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13065-13169]:Block[13110-13214]"
  }, {
    "left" : "throw new IllegalArgumentException(\"pad must not be in alphabet or whitespace\");",
    "right" : "throw new IllegalArgumentException(\"pad must not be in alphabet or whitespace\");",
    "info" : "ThrowStatement[13079-13159]:ThrowStatement[13124-13204]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14284-14293]:MarkerAnnotation[14329-14338]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14298-14302]:PrimitiveType[14343-14347]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[14303-14309]:SimpleName[14348-14354]"
  }, {
    "left" : "final byte[] in",
    "right" : "final byte[] in",
    "info" : "SingleVariableDeclaration[14310-14325]:SingleVariableDeclaration[14355-14370]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[14327-14336]:SingleVariableDeclaration[14372-14381]"
  }, {
    "left" : "final int inAvail",
    "right" : "final int inAvail",
    "info" : "SingleVariableDeclaration[14338-14355]:SingleVariableDeclaration[14383-14400]"
  }, {
    "left" : "final Context context",
    "right" : "final Context context",
    "info" : "SingleVariableDeclaration[14357-14378]:SingleVariableDeclaration[14402-14423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14380-18739]:Block[14425-18784]"
  }, {
    "left" : "if (context.eof)",
    "right" : "if (context.eof)",
    "info" : "IfStatement[14448-14496]:IfStatement[14493-14541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14465-14496]:Block[14510-14541]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[14479-14486]:ReturnStatement[14524-14531]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[14505-14565]:IfStatement[14550-14610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14522-14565]:Block[14567-14610]"
  }, {
    "left" : "context.eof = true;",
    "right" : "context.eof = true;",
    "info" : "ExpressionStatement[14536-14555]:ExpressionStatement[14581-14600]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[14574-15950]:ForStatement[14619-15995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14608-15950]:Block[14653-15995]"
  }, {
    "left" : "final byte b = in[inPos++];",
    "right" : "final byte b = in[inPos++];",
    "info" : "VariableDeclarationStatement[14622-14649]:VariableDeclarationStatement[14667-14694]"
  }, {
    "left" : "if (b == pad)",
    "right" : "if (b == pad)",
    "info" : "IfStatement[14662-15940]:IfStatement[14707-15985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14676-14781]:Block[14721-14826]"
  }, {
    "left" : "context.eof = true;",
    "right" : "context.eof = true;",
    "info" : "ExpressionStatement[14725-14744]:ExpressionStatement[14770-14789]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14761-14767]:BreakStatement[14806-14812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14787-15940]:Block[14832-15985]"
  }, {
    "left" : "final byte[] buffer = ensureBufferSize(decodeSize, context);",
    "right" : "final byte[] buffer = ensureBufferSize(decodeSize, context);",
    "info" : "VariableDeclarationStatement[14805-14865]:VariableDeclarationStatement[14850-14910]"
  }, {
    "left" : "if (b >= 0 && b < this.decodeTable.length)",
    "right" : "if (b >= 0 && b < this.decodeTable.length)",
    "info" : "IfStatement[14882-15926]:IfStatement[14927-15971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14925-15926]:Block[14970-15971]"
  }, {
    "left" : "final int result = this.decodeTable[b];",
    "right" : "final int result = this.decodeTable[b];",
    "info" : "VariableDeclarationStatement[14947-14986]:VariableDeclarationStatement[14992-15031]"
  }, {
    "left" : "if (result >= 0)",
    "right" : "if (result >= 0)",
    "info" : "IfStatement[15007-15908]:IfStatement[15052-15953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15024-15908]:Block[15069-15953]"
  }, {
    "left" : "context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;",
    "right" : "context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;",
    "info" : "ExpressionStatement[15050-15114]:ExpressionStatement[15095-15159]"
  }, {
    "left" : "context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;",
    "right" : "context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;",
    "info" : "ExpressionStatement[15188-15268]:ExpressionStatement[15233-15313]"
  }, {
    "left" : "if (context.modulus == 0)",
    "right" : "if (context.modulus == 0)",
    "info" : "IfStatement[15293-15886]:IfStatement[15338-15931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15319-15886]:Block[15364-15931]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);",
    "info" : "ExpressionStatement[15378-15453]:ExpressionStatement[15423-15498]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);",
    "info" : "ExpressionStatement[15482-15557]:ExpressionStatement[15527-15602]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[15586-15661]:ExpressionStatement[15631-15706]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[15690-15764]:ExpressionStatement[15735-15809]"
  }, {
    "left" : "buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);",
    "info" : "ExpressionStatement[15793-15860]:ExpressionStatement[15838-15905]"
  }, {
    "left" : "if (context.eof && context.modulus >= 2)",
    "right" : "if (context.eof && context.modulus >= 2)",
    "info" : "IfStatement[16188-18733]:IfStatement[16233-18778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16229-18733]:Block[16274-18778]"
  }, {
    "left" : "final byte[] buffer = ensureBufferSize(decodeSize, context);",
    "right" : "final byte[] buffer = ensureBufferSize(decodeSize, context);",
    "info" : "VariableDeclarationStatement[16276-16336]:VariableDeclarationStatement[16321-16381]"
  }, {
    "left" : "switch (context.modulus) {\n                case 2 : // 10 bits, drop 2 and output one byte\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);\n                    break;\n                case 3 : // 15 bits, drop 7 and output 1 byte\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);\n                    break;\n                case 4 : // 20 bits = 2*8 + 4\n                    context.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                case 5 : // 25bits = 3*8 + 1\n                    context.lbitWorkArea = context.lbitWorkArea >> 1;\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                case 6 : // 30bits = 3*8 + 6\n                    context.lbitWorkArea = context.lbitWorkArea >> 6;\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                case 7 : // 35 = 4*8 +3\n                    context.lbitWorkArea = context.lbitWorkArea >> 3;\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                default:\n                    // modulus can be 0-7, and we excluded 0,1 already\n                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n            }",
    "right" : "switch (context.modulus) {\n                case 2 : // 10 bits, drop 2 and output one byte\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);\n                    break;\n                case 3 : // 15 bits, drop 7 and output 1 byte\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);\n                    break;\n                case 4 : // 20 bits = 2*8 + 4\n                    context.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                case 5 : // 25bits = 3*8 + 1\n                    context.lbitWorkArea = context.lbitWorkArea >> 1;\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                case 6 : // 30bits = 3*8 + 6\n                    context.lbitWorkArea = context.lbitWorkArea >> 6;\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                case 7 : // 35 = 4*8 +3\n                    context.lbitWorkArea = context.lbitWorkArea >> 3;\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                    break;\n                default:\n                    // modulus can be 0-7, and we excluded 0,1 already\n                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n            }",
    "info" : "SwitchStatement[16422-18723]:SwitchStatement[16467-18768]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[16465-16473]:SwitchCase[16510-16518]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);",
    "info" : "ExpressionStatement[16533-16607]:ExpressionStatement[16578-16652]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16628-16634]:BreakStatement[16673-16679]"
  }, {
    "left" : "case 3 :",
    "right" : "case 3 :",
    "info" : "SwitchCase[16651-16659]:SwitchCase[16696-16704]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);",
    "info" : "ExpressionStatement[16717-16791]:ExpressionStatement[16762-16836]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16812-16818]:BreakStatement[16857-16863]"
  }, {
    "left" : "case 4 :",
    "right" : "case 4 :",
    "info" : "SwitchCase[16835-16843]:SwitchCase[16880-16888]"
  }, {
    "left" : "context.lbitWorkArea = context.lbitWorkArea >> 4;",
    "right" : "context.lbitWorkArea = context.lbitWorkArea >> 4;",
    "info" : "ExpressionStatement[16885-16934]:ExpressionStatement[16930-16979]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[16970-17044]:ExpressionStatement[17015-17089]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "info" : "ExpressionStatement[17065-17134]:ExpressionStatement[17110-17179]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17155-17161]:BreakStatement[17200-17206]"
  }, {
    "left" : "case 5 :",
    "right" : "case 5 :",
    "info" : "SwitchCase[17178-17186]:SwitchCase[17223-17231]"
  }, {
    "left" : "context.lbitWorkArea = context.lbitWorkArea >> 1;",
    "right" : "context.lbitWorkArea = context.lbitWorkArea >> 1;",
    "info" : "ExpressionStatement[17227-17276]:ExpressionStatement[17272-17321]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[17297-17372]:ExpressionStatement[17342-17417]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[17393-17467]:ExpressionStatement[17438-17512]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "info" : "ExpressionStatement[17488-17557]:ExpressionStatement[17533-17602]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17578-17584]:BreakStatement[17623-17629]"
  }, {
    "left" : "case 6 :",
    "right" : "case 6 :",
    "info" : "SwitchCase[17601-17609]:SwitchCase[17646-17654]"
  }, {
    "left" : "context.lbitWorkArea = context.lbitWorkArea >> 6;",
    "right" : "context.lbitWorkArea = context.lbitWorkArea >> 6;",
    "info" : "ExpressionStatement[17650-17699]:ExpressionStatement[17695-17744]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[17720-17795]:ExpressionStatement[17765-17840]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[17816-17890]:ExpressionStatement[17861-17935]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "info" : "ExpressionStatement[17911-17980]:ExpressionStatement[17956-18025]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18001-18007]:BreakStatement[18046-18052]"
  }, {
    "left" : "case 7 :",
    "right" : "case 7 :",
    "info" : "SwitchCase[18024-18032]:SwitchCase[18069-18077]"
  }, {
    "left" : "context.lbitWorkArea = context.lbitWorkArea >> 3;",
    "right" : "context.lbitWorkArea = context.lbitWorkArea >> 3;",
    "info" : "ExpressionStatement[18068-18117]:ExpressionStatement[18113-18162]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);",
    "info" : "ExpressionStatement[18138-18213]:ExpressionStatement[18183-18258]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[18234-18309]:ExpressionStatement[18279-18354]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[18330-18404]:ExpressionStatement[18375-18449]"
  }, {
    "left" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "right" : "buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);",
    "info" : "ExpressionStatement[18425-18494]:ExpressionStatement[18470-18539]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18515-18521]:BreakStatement[18560-18566]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[18538-18546]:SwitchCase[18583-18591]"
  }, {
    "left" : "throw new IllegalStateException(\"Impossible modulus \"+context.modulus);",
    "right" : "throw new IllegalStateException(\"Impossible modulus \"+context.modulus);",
    "info" : "ThrowStatement[18638-18709]:ThrowStatement[18683-18754]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19369-19378]:MarkerAnnotation[19414-19423]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19383-19387]:PrimitiveType[19428-19432]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[19388-19394]:SimpleName[19433-19439]"
  }, {
    "left" : "final byte[] in",
    "right" : "final byte[] in",
    "info" : "SingleVariableDeclaration[19395-19410]:SingleVariableDeclaration[19440-19455]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[19412-19421]:SingleVariableDeclaration[19457-19466]"
  }, {
    "left" : "final int inAvail",
    "right" : "final int inAvail",
    "info" : "SingleVariableDeclaration[19423-19440]:SingleVariableDeclaration[19468-19485]"
  }, {
    "left" : "final Context context",
    "right" : "final Context context",
    "info" : "SingleVariableDeclaration[19442-19463]:SingleVariableDeclaration[19487-19508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19465-25631]:Block[19510-25676]"
  }, {
    "left" : "if (context.eof)",
    "right" : "if (context.eof)",
    "info" : "IfStatement[19533-19581]:IfStatement[19578-19626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19550-19581]:Block[19595-19626]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[19564-19571]:ReturnStatement[19609-19616]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[19692-25625]:IfStatement[19737-25670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19709-23854]:Block[19754-23899]"
  }, {
    "left" : "context.eof = true;",
    "right" : "context.eof = true;",
    "info" : "ExpressionStatement[19723-19742]:ExpressionStatement[19768-19787]"
  }, {
    "left" : "if (0 == context.modulus && lineLength == 0)",
    "right" : "if (0 == context.modulus && lineLength == 0)",
    "info" : "IfStatement[19755-19889]:IfStatement[19800-19934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19800-19889]:Block[19845-19934]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[19818-19825]:ReturnStatement[19863-19870]"
  }, {
    "left" : "final byte[] buffer = ensureBufferSize(encodeSize, context);",
    "right" : "final byte[] buffer = ensureBufferSize(encodeSize, context);",
    "info" : "VariableDeclarationStatement[19902-19962]:VariableDeclarationStatement[19947-20007]"
  }, {
    "left" : "final int savedPos = context.pos;",
    "right" : "final int savedPos = context.pos;",
    "info" : "VariableDeclarationStatement[19975-20008]:VariableDeclarationStatement[20020-20053]"
  }, {
    "left" : "switch (context.modulus) { // % 5\n                case 0 :\n                    break;\n                case 1 : // Only 1 octet; take top 5 bits then remainder\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    break;\n                case 2 : // 2 octets = 16 bits to use\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    break;\n                case 3 : // 3 octets = 24 bits to use\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    break;\n                case 4 : // 4 octets = 32 bits to use\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3\n                    buffer[context.pos++] = pad;\n                    break;\n                default:\n                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n            }",
    "right" : "switch (context.modulus) { // % 5\n                case 0 :\n                    break;\n                case 1 : // Only 1 octet; take top 5 bits then remainder\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    break;\n                case 2 : // 2 octets = 16 bits to use\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    break;\n                case 3 : // 3 octets = 24 bits to use\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    buffer[context.pos++] = pad;\n                    break;\n                case 4 : // 4 octets = 32 bits to use\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2\n                    buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3\n                    buffer[context.pos++] = pad;\n                    break;\n                default:\n                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n            }",
    "info" : "SwitchStatement[20021-23400]:SwitchStatement[20066-23445]"
  }, {
    "left" : "case 0 :",
    "right" : "case 0 :",
    "info" : "SwitchCase[20071-20079]:SwitchCase[20116-20124]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20100-20106]:BreakStatement[20145-20151]"
  }, {
    "left" : "case 1 :",
    "right" : "case 1 :",
    "info" : "SwitchCase[20123-20131]:SwitchCase[20168-20176]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS];",
    "info" : "ExpressionStatement[20200-20283]:ExpressionStatement[20245-20328]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS];",
    "info" : "ExpressionStatement[20317-20400]:ExpressionStatement[20362-20445]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[20430-20458]:ExpressionStatement[20475-20503]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[20479-20507]:ExpressionStatement[20524-20552]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[20528-20556]:ExpressionStatement[20573-20601]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[20577-20605]:ExpressionStatement[20622-20650]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[20626-20654]:ExpressionStatement[20671-20699]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[20675-20703]:ExpressionStatement[20720-20748]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20724-20730]:BreakStatement[20769-20775]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[20747-20755]:SwitchCase[20792-20800]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS];",
    "info" : "ExpressionStatement[20805-20889]:ExpressionStatement[20850-20934]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS];",
    "info" : "ExpressionStatement[20925-21009]:ExpressionStatement[20970-21054]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS];",
    "info" : "ExpressionStatement[21044-21128]:ExpressionStatement[21089-21173]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS];",
    "info" : "ExpressionStatement[21163-21247]:ExpressionStatement[21208-21292]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[21279-21307]:ExpressionStatement[21324-21352]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[21328-21356]:ExpressionStatement[21373-21401]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[21377-21405]:ExpressionStatement[21422-21450]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[21426-21454]:ExpressionStatement[21471-21499]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21475-21481]:BreakStatement[21520-21526]"
  }, {
    "left" : "case 3 :",
    "right" : "case 3 :",
    "info" : "SwitchCase[21498-21506]:SwitchCase[21543-21551]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS];",
    "info" : "ExpressionStatement[21556-21640]:ExpressionStatement[21601-21685]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS];",
    "info" : "ExpressionStatement[21676-21760]:ExpressionStatement[21721-21805]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS];",
    "info" : "ExpressionStatement[21796-21880]:ExpressionStatement[21841-21925]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS];",
    "info" : "ExpressionStatement[21915-21999]:ExpressionStatement[21960-22044]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS];",
    "info" : "ExpressionStatement[22034-22118]:ExpressionStatement[22079-22163]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[22150-22178]:ExpressionStatement[22195-22223]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[22199-22227]:ExpressionStatement[22244-22272]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[22248-22276]:ExpressionStatement[22293-22321]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22297-22303]:BreakStatement[22342-22348]"
  }, {
    "left" : "case 4 :",
    "right" : "case 4 :",
    "info" : "SwitchCase[22320-22328]:SwitchCase[22365-22373]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS];",
    "info" : "ExpressionStatement[22378-22462]:ExpressionStatement[22423-22507]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS];",
    "info" : "ExpressionStatement[22498-22582]:ExpressionStatement[22543-22627]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS];",
    "info" : "ExpressionStatement[22618-22702]:ExpressionStatement[22663-22747]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS];",
    "info" : "ExpressionStatement[22738-22822]:ExpressionStatement[22783-22867]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS];",
    "info" : "ExpressionStatement[22858-22942]:ExpressionStatement[22903-22987]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS];",
    "info" : "ExpressionStatement[22978-23062]:ExpressionStatement[23023-23107]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS];",
    "info" : "ExpressionStatement[23098-23182]:ExpressionStatement[23143-23227]"
  }, {
    "left" : "buffer[context.pos++] = pad;",
    "right" : "buffer[context.pos++] = pad;",
    "info" : "ExpressionStatement[23214-23242]:ExpressionStatement[23259-23287]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23263-23269]:BreakStatement[23308-23314]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[23286-23294]:SwitchCase[23331-23339]"
  }, {
    "left" : "throw new IllegalStateException(\"Impossible modulus \"+context.modulus);",
    "right" : "throw new IllegalStateException(\"Impossible modulus \"+context.modulus);",
    "info" : "ThrowStatement[23315-23386]:ThrowStatement[23360-23431]"
  }, {
    "left" : "context.currentLinePos += context.pos - savedPos;",
    "right" : "context.currentLinePos += context.pos - savedPos;",
    "info" : "ExpressionStatement[23413-23462]:ExpressionStatement[23458-23507]"
  }, {
    "left" : "if (lineLength > 0 && context.currentLinePos > 0)",
    "right" : "if (lineLength > 0 && context.currentLinePos > 0)",
    "info" : "IfStatement[23597-23844]:IfStatement[23642-23889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23646-23844]:Block[23691-23889]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);",
    "info" : "ExpressionStatement[23699-23777]:ExpressionStatement[23744-23822]"
  }, {
    "left" : "context.pos += lineSeparator.length;",
    "right" : "context.pos += lineSeparator.length;",
    "info" : "ExpressionStatement[23794-23830]:ExpressionStatement[23839-23875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23860-25625]:Block[23905-25670]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[23874-25615]:ForStatement[23919-25660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23908-25615]:Block[23953-25660]"
  }, {
    "left" : "final byte[] buffer = ensureBufferSize(encodeSize, context);",
    "right" : "final byte[] buffer = ensureBufferSize(encodeSize, context);",
    "info" : "VariableDeclarationStatement[23926-23986]:VariableDeclarationStatement[23971-24031]"
  }, {
    "left" : "context.modulus = (context.modulus+1) % BYTES_PER_UNENCODED_BLOCK;",
    "right" : "context.modulus = (context.modulus+1) % BYTES_PER_UNENCODED_BLOCK;",
    "info" : "ExpressionStatement[24003-24069]:ExpressionStatement[24048-24114]"
  }, {
    "left" : "int b = in[inPos++];",
    "right" : "int b = in[inPos++];",
    "info" : "VariableDeclarationStatement[24086-24106]:VariableDeclarationStatement[24131-24151]"
  }, {
    "left" : "if (b < 0)",
    "right" : "if (b < 0)",
    "info" : "IfStatement[24123-24183]:IfStatement[24168-24228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24134-24183]:Block[24179-24228]"
  }, {
    "left" : "b += 256;",
    "right" : "b += 256;",
    "info" : "ExpressionStatement[24156-24165]:ExpressionStatement[24201-24210]"
  }, {
    "left" : "context.lbitWorkArea = (context.lbitWorkArea << 8) + b;",
    "right" : "context.lbitWorkArea = (context.lbitWorkArea << 8) + b;",
    "info" : "ExpressionStatement[24200-24255]:ExpressionStatement[24245-24300]"
  }, {
    "left" : "if (0 == context.modulus)",
    "right" : "if (0 == context.modulus)",
    "info" : "IfStatement[24289-25601]:IfStatement[24334-25646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24315-25601]:Block[24360-25646]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 35) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 35) & MASK_5BITS];",
    "info" : "ExpressionStatement[24382-24466]:ExpressionStatement[24427-24511]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 30) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 30) & MASK_5BITS];",
    "info" : "ExpressionStatement[24487-24571]:ExpressionStatement[24532-24616]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 25) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 25) & MASK_5BITS];",
    "info" : "ExpressionStatement[24592-24676]:ExpressionStatement[24637-24721]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 20) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 20) & MASK_5BITS];",
    "info" : "ExpressionStatement[24697-24781]:ExpressionStatement[24742-24826]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 15) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 15) & MASK_5BITS];",
    "info" : "ExpressionStatement[24802-24886]:ExpressionStatement[24847-24931]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 10) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 10) & MASK_5BITS];",
    "info" : "ExpressionStatement[24907-24991]:ExpressionStatement[24952-25036]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 5) & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 5) & MASK_5BITS];",
    "info" : "ExpressionStatement[25012-25095]:ExpressionStatement[25057-25140]"
  }, {
    "left" : "buffer[context.pos++] = encodeTable[(int)context.lbitWorkArea & MASK_5BITS];",
    "right" : "buffer[context.pos++] = encodeTable[(int)context.lbitWorkArea & MASK_5BITS];",
    "info" : "ExpressionStatement[25116-25192]:ExpressionStatement[25161-25237]"
  }, {
    "left" : "context.currentLinePos += BYTES_PER_ENCODED_BLOCK;",
    "right" : "context.currentLinePos += BYTES_PER_ENCODED_BLOCK;",
    "info" : "ExpressionStatement[25213-25263]:ExpressionStatement[25258-25308]"
  }, {
    "left" : "if (lineLength > 0 && lineLength <= context.currentLinePos)",
    "right" : "if (lineLength > 0 && lineLength <= context.currentLinePos)",
    "info" : "IfStatement[25284-25583]:IfStatement[25329-25628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25344-25583]:Block[25389-25628]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);",
    "info" : "ExpressionStatement[25370-25448]:ExpressionStatement[25415-25493]"
  }, {
    "left" : "context.pos += lineSeparator.length;",
    "right" : "context.pos += lineSeparator.length;",
    "info" : "ExpressionStatement[25473-25509]:ExpressionStatement[25518-25554]"
  }, {
    "left" : "context.currentLinePos = 0;",
    "right" : "context.currentLinePos = 0;",
    "info" : "ExpressionStatement[25534-25561]:ExpressionStatement[25579-25606]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[25895-25904]:MarkerAnnotation[25940-25949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25909-25915]:Modifier[25954-25960]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25916-25923]:PrimitiveType[25961-25968]"
  }, {
    "left" : "isInAlphabet",
    "right" : "isInAlphabet",
    "info" : "SimpleName[25924-25936]:SimpleName[25969-25981]"
  }, {
    "left" : "final byte octet",
    "right" : "final byte octet",
    "info" : "SingleVariableDeclaration[25937-25953]:SingleVariableDeclaration[25982-25998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25955-26047]:Block[26000-26092]"
  }, {
    "left" : "return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;",
    "right" : "return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;",
    "info" : "ReturnStatement[25965-26041]:ReturnStatement[26010-26086]"
  } ]
}