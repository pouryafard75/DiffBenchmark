{
  "matchedElements" : [
 {
    "left" : "class : AbstractLeastSquaresOptimizer",
    "right" : "class : AbstractLeastSquaresOptimizer",
    "info" : "TypeDeclaration[1777-10440]:TypeDeclaration[1777-10776]"
  }, {
    "left" : "weightMatrixSqrt",
    "right" : "weightMatrixSqrt",
    "info" : "FieldDeclaration[2027-2108]:FieldDeclaration[2027-2108]"
  }, {
    "left" : "cost",
    "right" : "cost",
    "info" : "FieldDeclaration[2113-2198]:FieldDeclaration[2113-2198]"
  }, {
    "left" : "protected AbstractLeastSquaresOptimizer(checker )",
    "right" : "protected AbstractLeastSquaresOptimizer(checker )",
    "info" : "MethodDeclaration[2204-2384]:MethodDeclaration[2204-2384]"
  }, {
    "left" : "protected computeWeightedJacobian(params ...) : ",
    "right" : "protected computeWeightedJacobian(params ...) : ",
    "info" : "MethodDeclaration[2390-2863]:MethodDeclaration[2390-2863]"
  }, {
    "left" : "protected computeCost(residuals ...) : double",
    "right" : "protected computeCost(residuals ...) : double",
    "info" : "MethodDeclaration[2869-3208]:MethodDeclaration[2869-3208]"
  }, {
    "left" : "public getRMS() : double",
    "right" : "public getRMS() : double",
    "info" : "MethodDeclaration[3214-3725]:MethodDeclaration[3214-3725]"
  }, {
    "left" : "public getChiSquare() : double",
    "right" : "public getChiSquare() : double",
    "info" : "MethodDeclaration[3731-4025]:MethodDeclaration[3731-4025]"
  }, {
    "left" : "public getWeightSquareRoot() : ",
    "right" : "public getWeightSquareRoot() : ",
    "info" : "MethodDeclaration[4031-4244]:MethodDeclaration[4031-4244]"
  }, {
    "left" : "protected setCost(cost double) : void",
    "right" : "protected setCost(cost double) : void",
    "info" : "MethodDeclaration[4250-4395]:MethodDeclaration[4250-4395]"
  }, {
    "left" : "public computeCovariances(params , threshold double) : ",
    "right" : "public computeCovariances(params , threshold double) : ",
    "info" : "MethodDeclaration[4401-5607]:MethodDeclaration[4401-5607]"
  }, {
    "left" : "public computeSigma(params , covarianceSingularityThreshold double) : ",
    "right" : "public computeSigma(params , covarianceSingularityThreshold double) : ",
    "info" : "MethodDeclaration[5613-6783]:MethodDeclaration[5613-6783]"
  }, {
    "left" : "public optimize() : ",
    "right" : "public optimize() : ",
    "info" : "MethodDeclaration[6789-8035]:MethodDeclaration[6789-8035]"
  }, {
    "left" : "protected computeResiduals(objectiveValue ) : ",
    "right" : "protected computeResiduals(objectiveValue ) : ",
    "info" : "MethodDeclaration[8041-9188]:MethodDeclaration[8041-9188]"
  }, {
    "left" : "private parseOptimizationData() : void",
    "right" : "private parseOptimizationData() : void",
    "info" : "MethodDeclaration[9194-10079]:MethodDeclaration[9194-10079]"
  }, {
    "left" : "private squareRoot(m ) : ",
    "right" : "private squareRoot(m ) : ",
    "info" : "MethodDeclaration[10085-10438]:MethodDeclaration[10085-10774]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1921-1927]:Modifier[1921-1927]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[1928-1936]:Modifier[1928-1936]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1937-1942]:TYPE_DECLARATION_KIND[1937-1942]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[2263-2272]:Modifier[2263-2272]"
  }, {
    "left" : "AbstractLeastSquaresOptimizer",
    "right" : "AbstractLeastSquaresOptimizer",
    "info" : "SimpleName[2273-2302]:SimpleName[2273-2302]"
  }, {
    "left" : "ConvergenceChecker<PointVectorValuePair> checker",
    "right" : "ConvergenceChecker<PointVectorValuePair> checker",
    "info" : "SingleVariableDeclaration[2303-2351]:SingleVariableDeclaration[2303-2351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2353-2384]:Block[2353-2384]"
  }, {
    "left" : "super(checker);",
    "right" : "super(checker);",
    "info" : "SuperConstructorInvocation[2363-2378]:SuperConstructorInvocation[2363-2378]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[2697-2706]:Modifier[2697-2706]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[2707-2717]:SimpleType[2707-2717]"
  }, {
    "left" : "computeWeightedJacobian",
    "right" : "computeWeightedJacobian",
    "info" : "SimpleName[2718-2741]:SimpleName[2718-2741]"
  }, {
    "left" : "double[] params",
    "right" : "double[] params",
    "info" : "SingleVariableDeclaration[2742-2757]:SingleVariableDeclaration[2742-2757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2759-2863]:Block[2759-2863]"
  }, {
    "left" : "return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));",
    "right" : "return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));",
    "info" : "ReturnStatement[2769-2857]:ReturnStatement[2769-2857]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[3018-3027]:Modifier[3018-3027]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[3028-3034]:PrimitiveType[3028-3034]"
  }, {
    "left" : "computeCost",
    "right" : "computeCost",
    "info" : "SimpleName[3035-3046]:SimpleName[3035-3046]"
  }, {
    "left" : "double[] residuals",
    "right" : "double[] residuals",
    "info" : "SingleVariableDeclaration[3047-3065]:SingleVariableDeclaration[3047-3065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3067-3208]:Block[3067-3208]"
  }, {
    "left" : "final ArrayRealVector r = new ArrayRealVector(residuals);",
    "right" : "final ArrayRealVector r = new ArrayRealVector(residuals);",
    "info" : "VariableDeclarationStatement[3077-3134]:VariableDeclarationStatement[3077-3134]"
  }, {
    "left" : "return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));",
    "right" : "return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));",
    "info" : "ReturnStatement[3143-3202]:ReturnStatement[3143-3202]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3631-3637]:Modifier[3631-3637]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[3638-3644]:PrimitiveType[3638-3644]"
  }, {
    "left" : "getRMS",
    "right" : "getRMS",
    "info" : "SimpleName[3645-3651]:SimpleName[3645-3651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3654-3725]:Block[3654-3725]"
  }, {
    "left" : "return FastMath.sqrt(getChiSquare() / getTargetSize());",
    "right" : "return FastMath.sqrt(getChiSquare() / getTargetSize());",
    "info" : "ReturnStatement[3664-3719]:ReturnStatement[3664-3719]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3961-3967]:Modifier[3961-3967]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[3968-3974]:PrimitiveType[3968-3974]"
  }, {
    "left" : "getChiSquare",
    "right" : "getChiSquare",
    "info" : "SimpleName[3975-3987]:SimpleName[3975-3987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3990-4025]:Block[3990-4025]"
  }, {
    "left" : "return cost * cost;",
    "right" : "return cost * cost;",
    "info" : "ReturnStatement[4000-4019]:ReturnStatement[4000-4019]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4157-4163]:Modifier[4157-4163]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[4164-4174]:SimpleType[4164-4174]"
  }, {
    "left" : "getWeightSquareRoot",
    "right" : "getWeightSquareRoot",
    "info" : "SimpleName[4175-4194]:SimpleName[4175-4194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4197-4244]:Block[4197-4244]"
  }, {
    "left" : "return weightMatrixSqrt.copy();",
    "right" : "return weightMatrixSqrt.copy();",
    "info" : "ReturnStatement[4207-4238]:ReturnStatement[4207-4238]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4326-4335]:Modifier[4326-4335]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4336-4340]:PrimitiveType[4336-4340]"
  }, {
    "left" : "setCost",
    "right" : "setCost",
    "info" : "SimpleName[4341-4348]:SimpleName[4341-4348]"
  }, {
    "left" : "double cost",
    "right" : "double cost",
    "info" : "SingleVariableDeclaration[4349-4360]:SingleVariableDeclaration[4349-4360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4362-4395]:Block[4362-4395]"
  }, {
    "left" : "this.cost = cost;",
    "right" : "this.cost = cost;",
    "info" : "ExpressionStatement[4372-4389]:ExpressionStatement[4372-4389]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5106-5112]:Modifier[5106-5112]"
  }, {
    "left" : "double[][]",
    "right" : "double[][]",
    "info" : "ArrayType[5113-5123]:ArrayType[5113-5123]"
  }, {
    "left" : "computeCovariances",
    "right" : "computeCovariances",
    "info" : "SimpleName[5124-5142]:SimpleName[5124-5142]"
  }, {
    "left" : "double[] params",
    "right" : "double[] params",
    "info" : "SingleVariableDeclaration[5143-5158]:SingleVariableDeclaration[5143-5158]"
  }, {
    "left" : "double threshold",
    "right" : "double threshold",
    "info" : "SingleVariableDeclaration[5201-5217]:SingleVariableDeclaration[5201-5217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5219-5607]:Block[5219-5607]"
  }, {
    "left" : "final RealMatrix j = computeWeightedJacobian(params);",
    "right" : "final RealMatrix j = computeWeightedJacobian(params);",
    "info" : "VariableDeclarationStatement[5261-5314]:VariableDeclarationStatement[5261-5314]"
  }, {
    "left" : "final RealMatrix jTj = j.transpose().multiply(j);",
    "right" : "final RealMatrix jTj = j.transpose().multiply(j);",
    "info" : "VariableDeclarationStatement[5358-5407]:VariableDeclarationStatement[5358-5407]"
  }, {
    "left" : "final DecompositionSolver solver\n            = new QRDecomposition(jTj, threshold).getSolver();",
    "right" : "final DecompositionSolver solver\n            = new QRDecomposition(jTj, threshold).getSolver();",
    "info" : "VariableDeclarationStatement[5460-5555]:VariableDeclarationStatement[5460-5555]"
  }, {
    "left" : "return solver.getInverse().getData();",
    "right" : "return solver.getInverse().getData();",
    "info" : "ReturnStatement[5564-5601]:ReturnStatement[5564-5601]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6368-6374]:Modifier[6368-6374]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[6375-6383]:ArrayType[6375-6383]"
  }, {
    "left" : "computeSigma",
    "right" : "computeSigma",
    "info" : "SimpleName[6384-6396]:SimpleName[6384-6396]"
  }, {
    "left" : "double[] params",
    "right" : "double[] params",
    "info" : "SingleVariableDeclaration[6397-6412]:SingleVariableDeclaration[6397-6412]"
  }, {
    "left" : "double covarianceSingularityThreshold",
    "right" : "double covarianceSingularityThreshold",
    "info" : "SingleVariableDeclaration[6447-6484]:SingleVariableDeclaration[6447-6484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6486-6783]:Block[6486-6783]"
  }, {
    "left" : "final int nC = params.length;",
    "right" : "final int nC = params.length;",
    "info" : "VariableDeclarationStatement[6496-6525]:VariableDeclarationStatement[6496-6525]"
  }, {
    "left" : "final double[] sig = new double[nC];",
    "right" : "final double[] sig = new double[nC];",
    "info" : "VariableDeclarationStatement[6534-6570]:VariableDeclarationStatement[6534-6570]"
  }, {
    "left" : "final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);",
    "right" : "final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);",
    "info" : "VariableDeclarationStatement[6579-6661]:VariableDeclarationStatement[6579-6661]"
  }, {
    "left" : "for (int i = 0; i < nC; ++i)",
    "right" : "for (int i = 0; i < nC; ++i)",
    "info" : "ForStatement[6670-6757]:ForStatement[6670-6757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6699-6757]:Block[6699-6757]"
  }, {
    "left" : "sig[i] = FastMath.sqrt(cov[i][i]);",
    "right" : "sig[i] = FastMath.sqrt(cov[i][i]);",
    "info" : "ExpressionStatement[6713-6747]:ExpressionStatement[6713-6747]"
  }, {
    "left" : "return sig;",
    "right" : "return sig;",
    "info" : "ReturnStatement[6766-6777]:ReturnStatement[6766-6777]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7741-7750]:MarkerAnnotation[7741-7750]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7755-7761]:Modifier[7755-7761]"
  }, {
    "left" : "PointVectorValuePair",
    "right" : "PointVectorValuePair",
    "info" : "SimpleType[7762-7782]:SimpleType[7762-7782]"
  }, {
    "left" : "optimize",
    "right" : "optimize",
    "info" : "SimpleName[7783-7791]:SimpleName[7783-7791]"
  }, {
    "left" : "OptimizationData... optData",
    "right" : "OptimizationData... optData",
    "info" : "SingleVariableDeclaration[7792-7819]:SingleVariableDeclaration[7792-7819]"
  }, {
    "left" : "TooManyEvaluationsException",
    "right" : "TooManyEvaluationsException",
    "info" : "SimpleType[7836-7863]:SimpleType[7836-7863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7864-8035]:Block[7864-8035]"
  }, {
    "left" : "parseOptimizationData(optData);",
    "right" : "parseOptimizationData(optData);",
    "info" : "ExpressionStatement[7904-7935]:ExpressionStatement[7904-7935]"
  }, {
    "left" : "return super.optimize(optData);",
    "right" : "return super.optimize(optData);",
    "info" : "ReturnStatement[7998-8029]:ReturnStatement[7998-8029]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8666-8675]:Modifier[8666-8675]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[8676-8684]:ArrayType[8676-8684]"
  }, {
    "left" : "computeResiduals",
    "right" : "computeResiduals",
    "info" : "SimpleName[8685-8701]:SimpleName[8685-8701]"
  }, {
    "left" : "double[] objectiveValue",
    "right" : "double[] objectiveValue",
    "info" : "SingleVariableDeclaration[8702-8725]:SingleVariableDeclaration[8702-8725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8727-9188]:Block[8727-9188]"
  }, {
    "left" : "final double[] target = getTarget();",
    "right" : "final double[] target = getTarget();",
    "info" : "VariableDeclarationStatement[8737-8773]:VariableDeclarationStatement[8737-8773]"
  }, {
    "left" : "if (objectiveValue.length != target.length)",
    "right" : "if (objectiveValue.length != target.length)",
    "info" : "IfStatement[8782-8974]:IfStatement[8782-8974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8826-8974]:Block[8826-8974]"
  }, {
    "left" : "throw new DimensionMismatchException(target.length,\n                                                 objectiveValue.length);",
    "right" : "throw new DimensionMismatchException(target.length,\n                                                 objectiveValue.length);",
    "info" : "ThrowStatement[8840-8964]:ThrowStatement[8840-8964]"
  }, {
    "left" : "final double[] residuals = new double[target.length];",
    "right" : "final double[] residuals = new double[target.length];",
    "info" : "VariableDeclarationStatement[8984-9037]:VariableDeclarationStatement[8984-9037]"
  }, {
    "left" : "for (int i = 0; i < target.length; i++)",
    "right" : "for (int i = 0; i < target.length; i++)",
    "info" : "ForStatement[9046-9155]:ForStatement[9046-9155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9086-9155]:Block[9086-9155]"
  }, {
    "left" : "residuals[i] = target[i] - objectiveValue[i];",
    "right" : "residuals[i] = target[i] - objectiveValue[i];",
    "info" : "ExpressionStatement[9100-9145]:ExpressionStatement[9100-9145]"
  }, {
    "left" : "return residuals;",
    "right" : "return residuals;",
    "info" : "ReturnStatement[9165-9182]:ReturnStatement[9165-9182]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9559-9566]:Modifier[9559-9566]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9567-9571]:PrimitiveType[9567-9571]"
  }, {
    "left" : "parseOptimizationData",
    "right" : "parseOptimizationData",
    "info" : "SimpleName[9572-9593]:SimpleName[9572-9593]"
  }, {
    "left" : "OptimizationData... optData",
    "right" : "OptimizationData... optData",
    "info" : "SingleVariableDeclaration[9594-9621]:SingleVariableDeclaration[9594-9621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9623-10079]:Block[9623-10079]"
  }, {
    "left" : "for (OptimizationData data : optData)",
    "right" : "for (OptimizationData data : optData)",
    "info" : "EnhancedForStatement[9754-10073]:EnhancedForStatement[9754-10073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9792-10073]:Block[9792-10073]"
  }, {
    "left" : "if (data instanceof Weight)",
    "right" : "if (data instanceof Weight)",
    "info" : "IfStatement[9806-10063]:IfStatement[9806-10063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9834-10063]:Block[9834-10063]"
  }, {
    "left" : "weightMatrixSqrt = squareRoot(((Weight) data).getWeight());",
    "right" : "weightMatrixSqrt = squareRoot(((Weight) data).getWeight());",
    "info" : "ExpressionStatement[9852-9911]:ExpressionStatement[9852-9911]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10043-10049]:BreakStatement[10043-10049]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10277-10284]:Modifier[10277-10284]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[10285-10295]:SimpleType[10285-10295]"
  }, {
    "left" : "squareRoot",
    "right" : "squareRoot",
    "info" : "SimpleName[10296-10306]:SimpleName[10296-10306]"
  }, {
    "left" : "RealMatrix m",
    "right" : "RealMatrix m",
    "info" : "SingleVariableDeclaration[10307-10319]:SingleVariableDeclaration[10307-10319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10321-10438]:Block[10647-10768]"
  }, {
    "left" : "final EigenDecomposition dec = new EigenDecomposition(m);",
    "right" : "final EigenDecomposition dec = new EigenDecomposition(m);",
    "info" : "VariableDeclarationStatement[10335-10392]:VariableDeclarationStatement[10661-10718]"
  }, {
    "left" : "return dec.getSquareRoot();",
    "right" : "return dec.getSquareRoot();",
    "info" : "ReturnStatement[10405-10432]:ReturnStatement[10731-10758]"
  } ]
}