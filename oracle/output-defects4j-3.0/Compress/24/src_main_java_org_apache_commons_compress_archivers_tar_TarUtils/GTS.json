{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "TypeDeclaration[1239-24654]:TypeDeclaration[1239-24562]"
    }, {
      "left" : "private static final int BYTE_MASK = 255;",
      "right" : "private static final int BYTE_MASK = 255;",
      "info" : "FieldDeclaration[1422-1463]:FieldDeclaration[1422-1463]"
    }, {
      "left" : "static final ZipEncoding DEFAULT_ENCODING =\n        ZipEncodingHelper.getZipEncoding(null);",
      "right" : "static final ZipEncoding DEFAULT_ENCODING =\n        ZipEncodingHelper.getZipEncoding(null);",
      "info" : "FieldDeclaration[1469-1560]:FieldDeclaration[1469-1560]"
    }, {
      "left" : "static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n            public boolean canEncode(String name) { return true; }\n\n            public ByteBuffer encode(String name) {\n                final int length = name.length();\n                byte[] buf = new byte[length];\n\n                // copy until end of input or output is reached.\n                for (int i = 0; i < length; ++i) {\n                    buf[i] = (byte) name.charAt(i);\n                }\n                return ByteBuffer.wrap(buf);\n            }\n\n            public String decode(byte[] buffer) {\n                final int length = buffer.length;\n                StringBuilder result = new StringBuilder(length);\n\n                for (int i = 0; i < length; ++i) {\n                    byte b = buffer[i];\n                    if (b == 0) { // Trailing null\n                        break;\n                    }\n                    result.append((char) (b & 0xFF)); // Allow for sign-extension\n                }\n\n                return result.toString();\n            }\n        };",
      "right" : "static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n            public boolean canEncode(String name) { return true; }\n\n            public ByteBuffer encode(String name) {\n                final int length = name.length();\n                byte[] buf = new byte[length];\n\n                // copy until end of input or output is reached.\n                for (int i = 0; i < length; ++i) {\n                    buf[i] = (byte) name.charAt(i);\n                }\n                return ByteBuffer.wrap(buf);\n            }\n\n            public String decode(byte[] buffer) {\n                final int length = buffer.length;\n                StringBuilder result = new StringBuilder(length);\n\n                for (int i = 0; i < length; ++i) {\n                    byte b = buffer[i];\n                    if (b == 0) { // Trailing null\n                        break;\n                    }\n                    result.append((char) (b & 0xFF)); // Allow for sign-extension\n                }\n\n                return result.toString();\n            }\n        };",
      "info" : "FieldDeclaration[1566-2730]:FieldDeclaration[1566-2730]"
    }, {
      "left" : "public boolean canEncode(String name)",
      "right" : "public boolean canEncode(String name)",
      "info" : "MethodDeclaration[1749-1803]:MethodDeclaration[1749-1803]"
    }, {
      "left" : "public ByteBuffer encode(String name)",
      "right" : "public ByteBuffer encode(String name)",
      "info" : "MethodDeclaration[1817-2199]:MethodDeclaration[1817-2199]"
    }, {
      "left" : "public String decode(byte[] buffer)",
      "right" : "public String decode(byte[] buffer)",
      "info" : "MethodDeclaration[2213-2719]:MethodDeclaration[2213-2719]"
    }, {
      "left" : "private TarUtils(",
      "right" : "private TarUtils(",
      "info" : "MethodDeclaration[2736-2840]:MethodDeclaration[2736-2840]"
    }, {
      "left" : "public static long parseOctal(final byte[] buffer, final int offset, final int length)",
      "right" : "public static long parseOctal(final byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[2846-5504]:MethodDeclaration[2846-5412]"
    }, {
      "left" : "public static long parseOctalOrBinary(final byte[] buffer, final int offset,\n                                          final int length)",
      "right" : "public static long parseOctalOrBinary(final byte[] buffer, final int offset,\n                                          final int length)",
      "info" : "MethodDeclaration[5510-6843]:MethodDeclaration[5418-6751]"
    }, {
      "left" : "private static long parseBinaryLong(final byte[] buffer, final int offset,\n                                        final int length,\n                                        final boolean negative)",
      "right" : "private static long parseBinaryLong(final byte[] buffer, final int offset,\n                                        final int length,\n                                        final boolean negative)",
      "info" : "MethodDeclaration[6849-7703]:MethodDeclaration[6757-7611]"
    }, {
      "left" : "private static long parseBinaryBigInteger(final byte[] buffer,\n                                              final int offset,\n                                              final int length,\n                                              final boolean negative)",
      "right" : "private static long parseBinaryBigInteger(final byte[] buffer,\n                                              final int offset,\n                                              final int length,\n                                              final boolean negative)",
      "info" : "MethodDeclaration[7709-8675]:MethodDeclaration[7617-8583]"
    }, {
      "left" : "public static boolean parseBoolean(final byte[] buffer, final int offset)",
      "right" : "public static boolean parseBoolean(final byte[] buffer, final int offset)",
      "info" : "MethodDeclaration[8681-9203]:MethodDeclaration[8589-9111]"
    }, {
      "left" : "private static String exceptionMessage(byte[] buffer, final int offset,\n            final int length, int current, final byte currentByte)",
      "right" : "private static String exceptionMessage(byte[] buffer, final int offset,\n            final int length, int current, final byte currentByte)",
      "info" : "MethodDeclaration[9264-10102]:MethodDeclaration[9172-10010]"
    }, {
      "left" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "right" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[10108-10914]:MethodDeclaration[10016-10822]"
    }, {
      "left" : "public static String parseName(byte[] buffer, final int offset,\n                                   final int length,\n                                   final ZipEncoding encoding)\n        throws IOException",
      "right" : "public static String parseName(byte[] buffer, final int offset,\n                                   final int length,\n                                   final ZipEncoding encoding)\n        throws IOException",
      "info" : "MethodDeclaration[10920-11918]:MethodDeclaration[10828-11826]"
    }, {
      "left" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[11924-13077]:MethodDeclaration[11832-12985]"
    }, {
      "left" : "public static int formatNameBytes(String name, byte[] buf, final int offset,\n                                      final int length,\n                                      final ZipEncoding encoding)\n        throws IOException",
      "right" : "public static int formatNameBytes(String name, byte[] buf, final int offset,\n                                      final int length,\n                                      final ZipEncoding encoding)\n        throws IOException",
      "info" : "MethodDeclaration[13083-14532]:MethodDeclaration[12991-14440]"
    }, {
      "left" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "right" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "info" : "MethodDeclaration[14538-15860]:MethodDeclaration[14446-15768]"
    }, {
      "left" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[15866-16827]:MethodDeclaration[15774-16735]"
    }, {
      "left" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[16833-17705]:MethodDeclaration[16741-17613]"
    }, {
      "left" : "public static int formatLongOctalOrBinaryBytes(\n        final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalOrBinaryBytes(\n        final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[17711-19163]:MethodDeclaration[17619-19071]"
    }, {
      "left" : "private static void formatLongBinary(final long value, byte[] buf,\n                                         final int offset, final int length,\n                                         final boolean negative)",
      "right" : "private static void formatLongBinary(final long value, byte[] buf,\n                                         final int offset, final int length,\n                                         final boolean negative)",
      "info" : "MethodDeclaration[19169-19910]:MethodDeclaration[19077-19818]"
    }, {
      "left" : "private static void formatBigIntegerBinary(final long value, byte[] buf,\n                                               final int offset,\n                                               final int length,\n                                               final boolean negative)",
      "right" : "private static void formatBigIntegerBinary(final long value, byte[] buf,\n                                               final int offset,\n                                               final int length,\n                                               final boolean negative)",
      "info" : "MethodDeclaration[19916-20563]:MethodDeclaration[19824-20471]"
    }, {
      "left" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[20569-21534]:MethodDeclaration[20477-21442]"
    }, {
      "left" : "public static long computeCheckSum(final byte[] buf)",
      "right" : "public static long computeCheckSum(final byte[] buf)",
      "info" : "MethodDeclaration[21540-21890]:MethodDeclaration[21448-21798]"
    }, {
      "left" : "public static boolean verifyCheckSum(byte[] header)",
      "right" : "public static boolean verifyCheckSum(byte[] header)",
      "info" : "MethodDeclaration[21896-24651]:MethodDeclaration[21804-24559]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1393-1399]:Modifier[1393-1399]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1400-1405]:TYPE_DECLARATION_KIND[1400-1405]"
    }, {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "SimpleName[1406-1414]:SimpleName[1406-1414]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1749-1755]:Modifier[1749-1755]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1756-1763]:PrimitiveType[1756-1763]"
    }, {
      "left" : "canEncode",
      "right" : "canEncode",
      "info" : "SimpleName[1764-1773]:SimpleName[1764-1773]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[1774-1785]:SingleVariableDeclaration[1774-1785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1787-1803]:Block[1787-1803]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1789-1801]:ReturnStatement[1789-1801]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1817-1823]:Modifier[1817-1823]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[1824-1834]:SimpleType[1824-1834]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[1835-1841]:SimpleName[1835-1841]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[1842-1853]:SingleVariableDeclaration[1842-1853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1855-2199]:Block[1855-2199]"
    }, {
      "left" : "final int length = name.length();",
      "right" : "final int length = name.length();",
      "info" : "VariableDeclarationStatement[1873-1906]:VariableDeclarationStatement[1873-1906]"
    }, {
      "left" : "byte[] buf = new byte[length];",
      "right" : "byte[] buf = new byte[length];",
      "info" : "VariableDeclarationStatement[1923-1953]:VariableDeclarationStatement[1923-1953]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)",
      "right" : "for (int i = 0; i < length; ++i)",
      "info" : "ForStatement[2036-2140]:ForStatement[2036-2140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2069-2140]:Block[2069-2140]"
    }, {
      "left" : "buf[i] = (byte) name.charAt(i);",
      "right" : "buf[i] = (byte) name.charAt(i);",
      "info" : "ExpressionStatement[2091-2122]:ExpressionStatement[2091-2122]"
    }, {
      "left" : "return ByteBuffer.wrap(buf);",
      "right" : "return ByteBuffer.wrap(buf);",
      "info" : "ReturnStatement[2157-2185]:ReturnStatement[2157-2185]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2213-2219]:Modifier[2213-2219]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2220-2226]:SimpleType[2220-2226]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[2227-2233]:SimpleName[2227-2233]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[2234-2247]:SingleVariableDeclaration[2234-2247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2249-2719]:Block[2249-2719]"
    }, {
      "left" : "final int length = buffer.length;",
      "right" : "final int length = buffer.length;",
      "info" : "VariableDeclarationStatement[2267-2300]:VariableDeclarationStatement[2267-2300]"
    }, {
      "left" : "StringBuilder result = new StringBuilder(length);",
      "right" : "StringBuilder result = new StringBuilder(length);",
      "info" : "VariableDeclarationStatement[2317-2366]:VariableDeclarationStatement[2317-2366]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)",
      "right" : "for (int i = 0; i < length; ++i)",
      "info" : "ForStatement[2384-2662]:ForStatement[2384-2662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2417-2662]:Block[2417-2662]"
    }, {
      "left" : "byte b = buffer[i];",
      "right" : "byte b = buffer[i];",
      "info" : "VariableDeclarationStatement[2439-2458]:VariableDeclarationStatement[2439-2458]"
    }, {
      "left" : "if (b == 0)",
      "right" : "if (b == 0)",
      "info" : "IfStatement[2479-2562]:IfStatement[2479-2562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2491-2562]:Block[2491-2562]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2534-2540]:BreakStatement[2534-2540]"
    }, {
      "left" : "result.append((char) (b & 0xFF));",
      "right" : "result.append((char) (b & 0xFF));",
      "info" : "ExpressionStatement[2583-2616]:ExpressionStatement[2583-2616]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[2680-2705]:ReturnStatement[2680-2705]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2815-2822]:Modifier[2815-2822]"
    }, {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "SimpleName[2823-2831]:SimpleName[2823-2831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2833-2840]:Block[2833-2840]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3781-3787]:Modifier[3781-3787]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3788-3794]:Modifier[3788-3794]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[3795-3799]:PrimitiveType[3795-3799]"
    }, {
      "left" : "parseOctal",
      "right" : "parseOctal",
      "info" : "SimpleName[3800-3810]:SimpleName[3800-3810]"
    }, {
      "left" : "final byte[] buffer",
      "right" : "final byte[] buffer",
      "info" : "SingleVariableDeclaration[3811-3830]:SingleVariableDeclaration[3811-3830]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[3832-3848]:SingleVariableDeclaration[3832-3848]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[3850-3866]:SingleVariableDeclaration[3850-3866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3868-5504]:Block[3868-5412]"
    }, {
      "left" : "long    result = 0;",
      "right" : "long    result = 0;",
      "info" : "VariableDeclarationStatement[3878-3897]:VariableDeclarationStatement[3878-3897]"
    }, {
      "left" : "int     end = offset + length;",
      "right" : "int     end = offset + length;",
      "info" : "VariableDeclarationStatement[3906-3936]:VariableDeclarationStatement[3906-3936]"
    }, {
      "left" : "int     start = offset;",
      "right" : "int     start = offset;",
      "info" : "VariableDeclarationStatement[3945-3968]:VariableDeclarationStatement[3945-3968]"
    }, {
      "left" : "if (length < 2)",
      "right" : "if (length < 2)",
      "info" : "IfStatement[3978-4092]:IfStatement[3978-4092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3993-4092]:Block[3993-4092]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");",
      "right" : "throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");",
      "info" : "ThrowStatement[4007-4082]:ThrowStatement[4007-4082]"
    }, {
      "left" : "if (buffer[start] == 0)",
      "right" : "if (buffer[start] == 0)",
      "info" : "IfStatement[4102-4160]:IfStatement[4102-4160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4126-4160]:Block[4126-4160]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[4140-4150]:ReturnStatement[4140-4150]"
    }, {
      "left" : "while (start < end)",
      "right" : "while (start < end)",
      "info" : "WhileStatement[4201-4353]:WhileStatement[4201-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4220-4353]:Block[4220-4353]"
    }, {
      "left" : "if (buffer[start] == ' ')",
      "right" : "if (buffer[start] == ' ')",
      "info" : "IfStatement[4234-4343]:IfStatement[4234-4343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4259-4299]:Block[4259-4299]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[4277-4285]:ExpressionStatement[4277-4285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4305-4343]:Block[4305-4343]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4323-4329]:BreakStatement[4323-4329]"
    }, {
      "left" : "byte trailer = buffer[end - 1];",
      "right" : "byte trailer = buffer[end - 1];",
      "info" : "VariableDeclarationStatement[4577-4608]:VariableDeclarationStatement[4577-4608]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[4712-4736]:SimpleType[4793-4817]"
    }, {
      "left" : "while (start < end - 1 && (trailer == 0 || trailer == ' '))",
      "right" : "while (start < end && (trailer == 0 || trailer == ' '))",
      "info" : "WhileStatement[4870-4999]:WhileStatement[4617-4742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4930-4999]:Block[4673-4742]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[4944-4950]:ExpressionStatement[4687-4693]"
    }, {
      "left" : "trailer = buffer[end - 1];",
      "right" : "trailer = buffer[end - 1];",
      "info" : "ExpressionStatement[4963-4989]:ExpressionStatement[4706-4732]"
    }, {
      "left" : "for ( ;start < end; start++)",
      "right" : "for ( ;start < end; start++)",
      "info" : "ForStatement[5009-5474]:ForStatement[4917-5382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5038-5474]:Block[4946-5382]"
    }, {
      "left" : "final byte currentByte = buffer[start];",
      "right" : "final byte currentByte = buffer[start];",
      "info" : "VariableDeclarationStatement[5052-5091]:VariableDeclarationStatement[4960-4999]"
    }, {
      "left" : "if (currentByte < '0' || currentByte > '7')",
      "right" : "if (currentByte < '0' || currentByte > '7')",
      "info" : "IfStatement[5146-5343]:IfStatement[5054-5251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5189-5343]:Block[5097-5251]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));",
      "right" : "throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));",
      "info" : "ThrowStatement[5207-5329]:ThrowStatement[5115-5237]"
    }, {
      "left" : "result = (result << 3) + (currentByte - '0');",
      "right" : "result = (result << 3) + (currentByte - '0');",
      "info" : "ExpressionStatement[5356-5401]:ExpressionStatement[5264-5309]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5484-5498]:ReturnStatement[5392-5406]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6347-6353]:Modifier[6255-6261]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6354-6360]:Modifier[6262-6268]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6361-6365]:PrimitiveType[6269-6273]"
    }, {
      "left" : "parseOctalOrBinary",
      "right" : "parseOctalOrBinary",
      "info" : "SimpleName[6366-6384]:SimpleName[6274-6292]"
    }, {
      "left" : "final byte[] buffer",
      "right" : "final byte[] buffer",
      "info" : "SingleVariableDeclaration[6385-6404]:SingleVariableDeclaration[6293-6312]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[6406-6422]:SingleVariableDeclaration[6314-6330]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[6466-6482]:SingleVariableDeclaration[6374-6390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6484-6843]:Block[6392-6751]"
    }, {
      "left" : "if ((buffer[offset] & 0x80) == 0)",
      "right" : "if ((buffer[offset] & 0x80) == 0)",
      "info" : "IfStatement[6495-6595]:IfStatement[6403-6503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6529-6595]:Block[6437-6503]"
    }, {
      "left" : "return parseOctal(buffer, offset, length);",
      "right" : "return parseOctal(buffer, offset, length);",
      "info" : "ReturnStatement[6543-6585]:ReturnStatement[6451-6493]"
    }, {
      "left" : "final boolean negative = buffer[offset] == (byte) 0xff;",
      "right" : "final boolean negative = buffer[offset] == (byte) 0xff;",
      "info" : "VariableDeclarationStatement[6604-6659]:VariableDeclarationStatement[6512-6567]"
    }, {
      "left" : "if (length < 9)",
      "right" : "if (length < 9)",
      "info" : "IfStatement[6668-6765]:IfStatement[6576-6673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6684-6765]:Block[6592-6673]"
    }, {
      "left" : "return parseBinaryLong(buffer, offset, length, negative);",
      "right" : "return parseBinaryLong(buffer, offset, length, negative);",
      "info" : "ReturnStatement[6698-6755]:ReturnStatement[6606-6663]"
    }, {
      "left" : "return parseBinaryBigInteger(buffer, offset, length, negative);",
      "right" : "return parseBinaryBigInteger(buffer, offset, length, negative);",
      "info" : "ReturnStatement[6774-6837]:ReturnStatement[6682-6745]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6849-6856]:Modifier[6757-6764]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6857-6863]:Modifier[6765-6771]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6864-6868]:PrimitiveType[6772-6776]"
    }, {
      "left" : "parseBinaryLong",
      "right" : "parseBinaryLong",
      "info" : "SimpleName[6869-6884]:SimpleName[6777-6792]"
    }, {
      "left" : "final byte[] buffer",
      "right" : "final byte[] buffer",
      "info" : "SingleVariableDeclaration[6885-6904]:SingleVariableDeclaration[6793-6812]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[6906-6922]:SingleVariableDeclaration[6814-6830]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[6964-6980]:SingleVariableDeclaration[6872-6888]"
    }, {
      "left" : "final boolean negative",
      "right" : "final boolean negative",
      "info" : "SingleVariableDeclaration[7022-7044]:SingleVariableDeclaration[6930-6952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7046-7703]:Block[6954-7611]"
    }, {
      "left" : "if (length >= 9)",
      "right" : "if (length >= 9)",
      "info" : "IfStatement[7056-7380]:IfStatement[6964-7288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7073-7380]:Block[6981-7288]"
    }, {
      "left" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "right" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "info" : "ThrowStatement[7087-7370]:ThrowStatement[6995-7278]"
    }, {
      "left" : "long val = 0;",
      "right" : "long val = 0;",
      "info" : "VariableDeclarationStatement[7389-7402]:VariableDeclarationStatement[7297-7310]"
    }, {
      "left" : "for (int i = 1; i < length; i++)",
      "right" : "for (int i = 1; i < length; i++)",
      "info" : "ForStatement[7411-7515]:ForStatement[7319-7423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7444-7515]:Block[7352-7423]"
    }, {
      "left" : "val = (val << 8) + (buffer[offset + i] & 0xff);",
      "right" : "val = (val << 8) + (buffer[offset + i] & 0xff);",
      "info" : "ExpressionStatement[7458-7505]:ExpressionStatement[7366-7413]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[7524-7659]:IfStatement[7432-7567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7538-7659]:Block[7446-7567]"
    }, {
      "left" : "val--;",
      "right" : "val--;",
      "info" : "ExpressionStatement[7582-7588]:ExpressionStatement[7490-7496]"
    }, {
      "left" : "val ^= (long) Math.pow(2, (length - 1) * 8) - 1;",
      "right" : "val ^= (long) Math.pow(2, (length - 1) * 8) - 1;",
      "info" : "ExpressionStatement[7601-7649]:ExpressionStatement[7509-7557]"
    }, {
      "left" : "return negative ? -val : val;",
      "right" : "return negative ? -val : val;",
      "info" : "ReturnStatement[7668-7697]:ReturnStatement[7576-7605]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7709-7716]:Modifier[7617-7624]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7717-7723]:Modifier[7625-7631]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[7724-7728]:PrimitiveType[7632-7636]"
    }, {
      "left" : "parseBinaryBigInteger",
      "right" : "parseBinaryBigInteger",
      "info" : "SimpleName[7729-7750]:SimpleName[7637-7658]"
    }, {
      "left" : "final byte[] buffer",
      "right" : "final byte[] buffer",
      "info" : "SingleVariableDeclaration[7751-7770]:SingleVariableDeclaration[7659-7678]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[7818-7834]:SingleVariableDeclaration[7726-7742]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[7882-7898]:SingleVariableDeclaration[7790-7806]"
    }, {
      "left" : "final boolean negative",
      "right" : "final boolean negative",
      "info" : "SingleVariableDeclaration[7946-7968]:SingleVariableDeclaration[7854-7876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7970-8675]:Block[7878-8583]"
    }, {
      "left" : "byte[] remainder = new byte[length - 1];",
      "right" : "byte[] remainder = new byte[length - 1];",
      "info" : "VariableDeclarationStatement[7980-8020]:VariableDeclarationStatement[7888-7928]"
    }, {
      "left" : "System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);",
      "right" : "System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);",
      "info" : "ExpressionStatement[8029-8092]:ExpressionStatement[7937-8000]"
    }, {
      "left" : "BigInteger val = new BigInteger(remainder);",
      "right" : "BigInteger val = new BigInteger(remainder);",
      "info" : "VariableDeclarationStatement[8101-8144]:VariableDeclarationStatement[8009-8052]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[8153-8265]:IfStatement[8061-8173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8167-8265]:Block[8075-8173]"
    }, {
      "left" : "val = val.add(BigInteger.valueOf(-1)).not();",
      "right" : "val = val.add(BigInteger.valueOf(-1)).not();",
      "info" : "ExpressionStatement[8211-8255]:ExpressionStatement[8119-8163]"
    }, {
      "left" : "if (val.bitLength() > 63)",
      "right" : "if (val.bitLength() > 63)",
      "info" : "IfStatement[8274-8607]:IfStatement[8182-8515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8300-8607]:Block[8208-8515]"
    }, {
      "left" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "right" : "throw new IllegalArgumentException(\"At offset \" + offset + \", \"\n                                               + length + \" byte binary number\"\n                                               + \" exceeds maximum signed long\"\n                                               + \" value\");",
      "info" : "ThrowStatement[8314-8597]:ThrowStatement[8222-8505]"
    }, {
      "left" : "return negative ? -val.longValue() : val.longValue();",
      "right" : "return negative ? -val.longValue() : val.longValue();",
      "info" : "ReturnStatement[8616-8669]:ReturnStatement[8524-8577]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9086-9092]:Modifier[8994-9000]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9093-9099]:Modifier[9001-9007]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9100-9107]:PrimitiveType[9008-9015]"
    }, {
      "left" : "parseBoolean",
      "right" : "parseBoolean",
      "info" : "SimpleName[9108-9120]:SimpleName[9016-9028]"
    }, {
      "left" : "final byte[] buffer",
      "right" : "final byte[] buffer",
      "info" : "SingleVariableDeclaration[9121-9140]:SingleVariableDeclaration[9029-9048]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[9142-9158]:SingleVariableDeclaration[9050-9066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9160-9203]:Block[9068-9111]"
    }, {
      "left" : "return buffer[offset] == 1;",
      "right" : "return buffer[offset] == 1;",
      "info" : "ReturnStatement[9170-9197]:ReturnStatement[9078-9105]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9264-9271]:Modifier[9172-9179]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9272-9278]:Modifier[9180-9186]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9279-9285]:SimpleType[9187-9193]"
    }, {
      "left" : "exceptionMessage",
      "right" : "exceptionMessage",
      "info" : "SimpleName[9286-9302]:SimpleName[9194-9210]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[9303-9316]:SingleVariableDeclaration[9211-9224]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[9318-9334]:SingleVariableDeclaration[9226-9242]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[9348-9364]:SingleVariableDeclaration[9256-9272]"
    }, {
      "left" : "int current",
      "right" : "int current",
      "info" : "SingleVariableDeclaration[9366-9377]:SingleVariableDeclaration[9274-9285]"
    }, {
      "left" : "final byte currentByte",
      "right" : "final byte currentByte",
      "info" : "SingleVariableDeclaration[9379-9401]:SingleVariableDeclaration[9287-9309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9403-10102]:Block[9311-10010]"
    }, {
      "left" : "String string = new String(buffer, offset, length);",
      "right" : "String string = new String(buffer, offset, length);",
      "info" : "VariableDeclarationStatement[9815-9866]:VariableDeclarationStatement[9723-9774]"
    }, {
      "left" : "string=string.replaceAll(\"\\0\", \"{NUL}\");",
      "right" : "string=string.replaceAll(\"\\0\", \"{NUL}\");",
      "info" : "ExpressionStatement[9876-9916]:ExpressionStatement[9784-9824]"
    }, {
      "left" : "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;",
      "right" : "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;",
      "info" : "VariableDeclarationStatement[9971-10078]:VariableDeclarationStatement[9879-9986]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[10087-10096]:ReturnStatement[9995-10004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10466-10472]:Modifier[10374-10380]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10473-10479]:Modifier[10381-10387]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10480-10486]:SimpleType[10388-10394]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[10487-10496]:SimpleName[10395-10404]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[10497-10510]:SingleVariableDeclaration[10405-10418]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[10512-10528]:SingleVariableDeclaration[10420-10436]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[10530-10546]:SingleVariableDeclaration[10438-10454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10548-10914]:Block[10456-10822]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10558-10908]:TryStatement[10466-10816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10562-10645]:Block[10470-10553]"
    }, {
      "left" : "return parseName(buffer, offset, length, DEFAULT_ENCODING);",
      "right" : "return parseName(buffer, offset, length, DEFAULT_ENCODING);",
      "info" : "ReturnStatement[10576-10635]:ReturnStatement[10484-10543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10669-10908]:Block[10577-10816]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10683-10898]:TryStatement[10591-10806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10687-10779]:Block[10595-10687]"
    }, {
      "left" : "return parseName(buffer, offset, length, FALLBACK_ENCODING);",
      "right" : "return parseName(buffer, offset, length, FALLBACK_ENCODING);",
      "info" : "ReturnStatement[10705-10765]:ReturnStatement[10613-10673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10804-10898]:Block[10712-10806]"
    }, {
      "left" : "throw new RuntimeException(ex2);",
      "right" : "throw new RuntimeException(ex2);",
      "info" : "ThrowStatement[10852-10884]:ThrowStatement[10760-10792]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11362-11368]:Modifier[11270-11276]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11369-11375]:Modifier[11277-11283]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11376-11382]:SimpleType[11284-11290]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[11383-11392]:SimpleName[11291-11300]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[11393-11406]:SingleVariableDeclaration[11301-11314]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[11408-11424]:SingleVariableDeclaration[11316-11332]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[11461-11477]:SingleVariableDeclaration[11369-11385]"
    }, {
      "left" : "final ZipEncoding encoding",
      "right" : "final ZipEncoding encoding",
      "info" : "SingleVariableDeclaration[11514-11540]:SingleVariableDeclaration[11422-11448]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11557-11568]:SimpleType[11465-11476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11569-11918]:Block[11477-11826]"
    }, {
      "left" : "int len = length;",
      "right" : "int len = length;",
      "info" : "VariableDeclarationStatement[11580-11597]:VariableDeclarationStatement[11488-11505]"
    }, {
      "left" : "for (; len > 0; len--)",
      "right" : "for (; len > 0; len--)",
      "info" : "ForStatement[11606-11726]:ForStatement[11514-11634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11629-11726]:Block[11537-11634]"
    }, {
      "left" : "if (buffer[offset + len - 1] != 0)",
      "right" : "if (buffer[offset + len - 1] != 0)",
      "info" : "IfStatement[11643-11716]:IfStatement[11551-11624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11678-11716]:Block[11586-11624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11696-11702]:BreakStatement[11604-11610]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[11735-11893]:IfStatement[11643-11801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11748-11893]:Block[11656-11801]"
    }, {
      "left" : "byte[] b = new byte[len];",
      "right" : "byte[] b = new byte[len];",
      "info" : "VariableDeclarationStatement[11762-11787]:VariableDeclarationStatement[11670-11695]"
    }, {
      "left" : "System.arraycopy(buffer, offset, b, 0, len);",
      "right" : "System.arraycopy(buffer, offset, b, 0, len);",
      "info" : "ExpressionStatement[11800-11844]:ExpressionStatement[11708-11752]"
    }, {
      "left" : "return encoding.decode(b);",
      "right" : "return encoding.decode(b);",
      "info" : "ReturnStatement[11857-11883]:ReturnStatement[11765-11791]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[11902-11912]:ReturnStatement[11810-11820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12559-12565]:Modifier[12467-12473]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12566-12572]:Modifier[12474-12480]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12573-12576]:PrimitiveType[12481-12484]"
    }, {
      "left" : "formatNameBytes",
      "right" : "formatNameBytes",
      "info" : "SimpleName[12577-12592]:SimpleName[12485-12500]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[12593-12604]:SingleVariableDeclaration[12501-12512]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[12606-12616]:SingleVariableDeclaration[12514-12524]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[12618-12634]:SingleVariableDeclaration[12526-12542]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[12636-12652]:SingleVariableDeclaration[12544-12560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12654-13077]:Block[12562-12985]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12664-13071]:TryStatement[12572-12979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12668-12760]:Block[12576-12668]"
    }, {
      "left" : "return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);",
      "right" : "return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING);",
      "info" : "ReturnStatement[12682-12750]:ReturnStatement[12590-12658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12784-13071]:Block[12692-12979]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12798-13061]:TryStatement[12706-12969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12802-12942]:Block[12710-12850]"
    }, {
      "left" : "return formatNameBytes(name, buf, offset, length,\n                                       FALLBACK_ENCODING);",
      "right" : "return formatNameBytes(name, buf, offset, length,\n                                       FALLBACK_ENCODING);",
      "info" : "ReturnStatement[12820-12928]:ReturnStatement[12728-12836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12967-13061]:Block[12875-12969]"
    }, {
      "left" : "throw new RuntimeException(ex2);",
      "right" : "throw new RuntimeException(ex2);",
      "info" : "ThrowStatement[13015-13047]:ThrowStatement[12923-12955]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13802-13808]:Modifier[13710-13716]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13809-13815]:Modifier[13717-13723]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13816-13819]:PrimitiveType[13724-13727]"
    }, {
      "left" : "formatNameBytes",
      "right" : "formatNameBytes",
      "info" : "SimpleName[13820-13835]:SimpleName[13728-13743]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13836-13847]:SingleVariableDeclaration[13744-13755]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[13849-13859]:SingleVariableDeclaration[13757-13767]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[13861-13877]:SingleVariableDeclaration[13769-13785]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[13917-13933]:SingleVariableDeclaration[13825-13841]"
    }, {
      "left" : "final ZipEncoding encoding",
      "right" : "final ZipEncoding encoding",
      "info" : "SingleVariableDeclaration[13973-13999]:SingleVariableDeclaration[13881-13907]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14016-14027]:SimpleType[13924-13935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14028-14532]:Block[13936-14440]"
    }, {
      "left" : "int len = name.length();",
      "right" : "int len = name.length();",
      "info" : "VariableDeclarationStatement[14038-14062]:VariableDeclarationStatement[13946-13970]"
    }, {
      "left" : "ByteBuffer b = encoding.encode(name);",
      "right" : "ByteBuffer b = encoding.encode(name);",
      "info" : "VariableDeclarationStatement[14071-14108]:VariableDeclarationStatement[13979-14016]"
    }, {
      "left" : "while (b.limit() > length && len > 0)",
      "right" : "while (b.limit() > length && len > 0)",
      "info" : "WhileStatement[14117-14225]:WhileStatement[14025-14133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14155-14225]:Block[14063-14133]"
    }, {
      "left" : "b = encoding.encode(name.substring(0, --len));",
      "right" : "b = encoding.encode(name.substring(0, --len));",
      "info" : "ExpressionStatement[14169-14215]:ExpressionStatement[14077-14123]"
    }, {
      "left" : "final int limit = b.limit() - b.position();",
      "right" : "final int limit = b.limit() - b.position();",
      "info" : "VariableDeclarationStatement[14234-14277]:VariableDeclarationStatement[14142-14185]"
    }, {
      "left" : "System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);",
      "right" : "System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);",
      "info" : "ExpressionStatement[14286-14351]:ExpressionStatement[14194-14259]"
    }, {
      "left" : "for (int i = limit; i < length; ++i)",
      "right" : "for (int i = limit; i < length; ++i)",
      "info" : "ForStatement[14412-14493]:ForStatement[14320-14401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14449-14493]:Block[14357-14401]"
    }, {
      "left" : "buf[offset + i] = 0;",
      "right" : "buf[offset + i] = 0;",
      "info" : "ExpressionStatement[14463-14483]:ExpressionStatement[14371-14391]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[14503-14526]:ReturnStatement[14411-14434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14919-14925]:Modifier[14827-14833]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14926-14932]:Modifier[14834-14840]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14933-14937]:PrimitiveType[14841-14845]"
    }, {
      "left" : "formatUnsignedOctalString",
      "right" : "formatUnsignedOctalString",
      "info" : "SimpleName[14938-14963]:SimpleName[14846-14871]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[14964-14980]:SingleVariableDeclaration[14872-14888]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[14982-14995]:SingleVariableDeclaration[14890-14903]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[15009-15025]:SingleVariableDeclaration[14917-14933]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[15027-15043]:SingleVariableDeclaration[14935-14951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15045-15860]:Block[14953-15768]"
    }, {
      "left" : "int remaining = length;",
      "right" : "int remaining = length;",
      "info" : "VariableDeclarationStatement[15055-15078]:VariableDeclarationStatement[14963-14986]"
    }, {
      "left" : "remaining--;",
      "right" : "remaining--;",
      "info" : "ExpressionStatement[15087-15099]:ExpressionStatement[14995-15007]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[15108-15727]:IfStatement[15016-15635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15124-15190]:Block[15032-15098]"
    }, {
      "left" : "buffer[offset + remaining--] = (byte) '0';",
      "right" : "buffer[offset + remaining--] = (byte) '0';",
      "info" : "ExpressionStatement[15138-15180]:ExpressionStatement[15046-15088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15196-15727]:Block[15104-15635]"
    }, {
      "left" : "long val = value;",
      "right" : "long val = value;",
      "info" : "VariableDeclarationStatement[15210-15227]:VariableDeclarationStatement[15118-15135]"
    }, {
      "left" : "for (; remaining >= 0 && val != 0; --remaining)",
      "right" : "for (; remaining >= 0 && val != 0; --remaining)",
      "info" : "ForStatement[15240-15512]:ForStatement[15148-15420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15288-15512]:Block[15196-15420]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "right" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "info" : "ExpressionStatement[15352-15420]:ExpressionStatement[15260-15328]"
    }, {
      "left" : "val = val >>> 3;",
      "right" : "val = val >>> 3;",
      "info" : "ExpressionStatement[15437-15453]:ExpressionStatement[15345-15361]"
    }, {
      "left" : "if (val != 0)",
      "right" : "if (val != 0)",
      "info" : "IfStatement[15525-15717]:IfStatement[15433-15625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15538-15717]:Block[15446-15625]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "right" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "info" : "ThrowStatement[15556-15703]:ThrowStatement[15464-15611]"
    }, {
      "left" : "for (; remaining >= 0; --remaining)",
      "right" : "for (; remaining >= 0; --remaining)",
      "info" : "ForStatement[15737-15854]:ForStatement[15645-15762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15773-15854]:Block[15681-15762]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) '0';",
      "right" : "buffer[offset + remaining] = (byte) '0';",
      "info" : "ExpressionStatement[15804-15844]:ExpressionStatement[15712-15752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16457-16463]:Modifier[16365-16371]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16464-16470]:Modifier[16372-16378]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16471-16474]:PrimitiveType[16379-16382]"
    }, {
      "left" : "formatOctalBytes",
      "right" : "formatOctalBytes",
      "info" : "SimpleName[16475-16491]:SimpleName[16383-16399]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[16492-16508]:SingleVariableDeclaration[16400-16416]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[16510-16520]:SingleVariableDeclaration[16418-16428]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[16522-16538]:SingleVariableDeclaration[16430-16446]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[16540-16556]:SingleVariableDeclaration[16448-16464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16558-16827]:Block[16466-16735]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[16569-16586]:VariableDeclarationStatement[16477-16494]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[16626-16677]:ExpressionStatement[16534-16585]"
    }, {
      "left" : "buf[offset + idx++] = (byte) ' ';",
      "right" : "buf[offset + idx++] = (byte) ' ';",
      "info" : "ExpressionStatement[16687-16720]:ExpressionStatement[16595-16628]"
    }, {
      "left" : "buf[offset + idx]   = 0;",
      "right" : "buf[offset + idx]   = 0;",
      "info" : "ExpressionStatement[16747-16771]:ExpressionStatement[16655-16679]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[16798-16821]:ReturnStatement[16706-16729]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17401-17407]:Modifier[17309-17315]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17408-17414]:Modifier[17316-17322]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17415-17418]:PrimitiveType[17323-17326]"
    }, {
      "left" : "formatLongOctalBytes",
      "right" : "formatLongOctalBytes",
      "info" : "SimpleName[17419-17439]:SimpleName[17327-17347]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[17440-17456]:SingleVariableDeclaration[17348-17364]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[17458-17468]:SingleVariableDeclaration[17366-17376]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[17470-17486]:SingleVariableDeclaration[17378-17394]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[17488-17504]:SingleVariableDeclaration[17396-17412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17506-17705]:Block[17414-17613]"
    }, {
      "left" : "int idx=length-1;",
      "right" : "int idx=length-1;",
      "info" : "VariableDeclarationStatement[17517-17534]:VariableDeclarationStatement[17425-17442]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[17557-17608]:ExpressionStatement[17465-17516]"
    }, {
      "left" : "buf[offset + idx] = (byte) ' ';",
      "right" : "buf[offset + idx] = (byte) ' ';",
      "info" : "ExpressionStatement[17617-17648]:ExpressionStatement[17525-17556]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[17676-17699]:ReturnStatement[17584-17607]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18386-18392]:Modifier[18294-18300]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18393-18399]:Modifier[18301-18307]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18400-18403]:PrimitiveType[18308-18311]"
    }, {
      "left" : "formatLongOctalOrBinaryBytes",
      "right" : "formatLongOctalOrBinaryBytes",
      "info" : "SimpleName[18404-18432]:SimpleName[18312-18340]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[18442-18458]:SingleVariableDeclaration[18350-18366]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[18460-18470]:SingleVariableDeclaration[18368-18378]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[18472-18488]:SingleVariableDeclaration[18380-18396]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[18490-18506]:SingleVariableDeclaration[18398-18414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18508-19163]:Block[18416-19071]"
    }, {
      "left" : "final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;",
      "right" : "final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;",
      "info" : "VariableDeclarationStatement[18586-18688]:VariableDeclarationStatement[18494-18596]"
    }, {
      "left" : "final boolean negative = value < 0;",
      "right" : "final boolean negative = value < 0;",
      "info" : "VariableDeclarationStatement[18698-18733]:VariableDeclarationStatement[18606-18641]"
    }, {
      "left" : "if (!negative && value <= maxAsOctalChar)",
      "right" : "if (!negative && value <= maxAsOctalChar)",
      "info" : "IfStatement[18742-18894]:IfStatement[18650-18802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18784-18894]:Block[18692-18802]"
    }, {
      "left" : "return formatLongOctalBytes(value, buf, offset, length);",
      "right" : "return formatLongOctalBytes(value, buf, offset, length);",
      "info" : "ReturnStatement[18828-18884]:ReturnStatement[18736-18792]"
    }, {
      "left" : "if (length < 9)",
      "right" : "if (length < 9)",
      "info" : "IfStatement[18904-18999]:IfStatement[18812-18907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18920-18999]:Block[18828-18907]"
    }, {
      "left" : "formatLongBinary(value, buf, offset, length, negative);",
      "right" : "formatLongBinary(value, buf, offset, length, negative);",
      "info" : "ExpressionStatement[18934-18989]:ExpressionStatement[18842-18897]"
    }, {
      "left" : "formatBigIntegerBinary(value, buf, offset, length, negative);",
      "right" : "formatBigIntegerBinary(value, buf, offset, length, negative);",
      "info" : "ExpressionStatement[19008-19069]:ExpressionStatement[18916-18977]"
    }, {
      "left" : "buf[offset] = (byte) (negative ? 0xff : 0x80);",
      "right" : "buf[offset] = (byte) (negative ? 0xff : 0x80);",
      "info" : "ExpressionStatement[19079-19125]:ExpressionStatement[18987-19033]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[19134-19157]:ReturnStatement[19042-19065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19169-19176]:Modifier[19077-19084]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19177-19183]:Modifier[19085-19091]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19184-19188]:PrimitiveType[19092-19096]"
    }, {
      "left" : "formatLongBinary",
      "right" : "formatLongBinary",
      "info" : "SimpleName[19189-19205]:SimpleName[19097-19113]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[19206-19222]:SingleVariableDeclaration[19114-19130]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[19224-19234]:SingleVariableDeclaration[19132-19142]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[19277-19293]:SingleVariableDeclaration[19185-19201]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[19295-19311]:SingleVariableDeclaration[19203-19219]"
    }, {
      "left" : "final boolean negative",
      "right" : "final boolean negative",
      "info" : "SingleVariableDeclaration[19354-19376]:SingleVariableDeclaration[19262-19284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19378-19910]:Block[19286-19818]"
    }, {
      "left" : "final int bits = (length - 1) * 8;",
      "right" : "final int bits = (length - 1) * 8;",
      "info" : "VariableDeclarationStatement[19388-19422]:VariableDeclarationStatement[19296-19330]"
    }, {
      "left" : "final long max = 1l << bits;",
      "right" : "final long max = 1l << bits;",
      "info" : "VariableDeclarationStatement[19431-19459]:VariableDeclarationStatement[19339-19367]"
    }, {
      "left" : "long val = Math.abs(value);",
      "right" : "long val = Math.abs(value);",
      "info" : "VariableDeclarationStatement[19468-19495]:VariableDeclarationStatement[19376-19403]"
    }, {
      "left" : "if (val >= max)",
      "right" : "if (val >= max)",
      "info" : "IfStatement[19504-19662]:IfStatement[19412-19570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19520-19662]:Block[19428-19570]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Value \" + value +\n                \" is too large for \" + length + \" byte field.\");",
      "right" : "throw new IllegalArgumentException(\"Value \" + value +\n                \" is too large for \" + length + \" byte field.\");",
      "info" : "ThrowStatement[19534-19652]:ThrowStatement[19442-19560]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[19671-19776]:IfStatement[19579-19684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19685-19776]:Block[19593-19684]"
    }, {
      "left" : "val ^= max - 1;",
      "right" : "val ^= max - 1;",
      "info" : "ExpressionStatement[19699-19714]:ExpressionStatement[19607-19622]"
    }, {
      "left" : "val |= 0xff << bits;",
      "right" : "val |= 0xff << bits;",
      "info" : "ExpressionStatement[19727-19747]:ExpressionStatement[19635-19655]"
    }, {
      "left" : "val++;",
      "right" : "val++;",
      "info" : "ExpressionStatement[19760-19766]:ExpressionStatement[19668-19674]"
    }, {
      "left" : "for (int i = offset + length - 1; i >= offset; i--)",
      "right" : "for (int i = offset + length - 1; i >= offset; i--)",
      "info" : "ForStatement[19785-19904]:ForStatement[19693-19812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19837-19904]:Block[19745-19812]"
    }, {
      "left" : "buf[i] = (byte) val;",
      "right" : "buf[i] = (byte) val;",
      "info" : "ExpressionStatement[19851-19871]:ExpressionStatement[19759-19779]"
    }, {
      "left" : "val >>= 8;",
      "right" : "val >>= 8;",
      "info" : "ExpressionStatement[19884-19894]:ExpressionStatement[19792-19802]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19916-19923]:Modifier[19824-19831]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19924-19930]:Modifier[19832-19838]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19931-19935]:PrimitiveType[19839-19843]"
    }, {
      "left" : "formatBigIntegerBinary",
      "right" : "formatBigIntegerBinary",
      "info" : "SimpleName[19936-19958]:SimpleName[19844-19866]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[19959-19975]:SingleVariableDeclaration[19867-19883]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[19977-19987]:SingleVariableDeclaration[19885-19895]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[20036-20052]:SingleVariableDeclaration[19944-19960]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[20101-20117]:SingleVariableDeclaration[20009-20025]"
    }, {
      "left" : "final boolean negative",
      "right" : "final boolean negative",
      "info" : "SingleVariableDeclaration[20166-20188]:SingleVariableDeclaration[20074-20096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20190-20563]:Block[20098-20471]"
    }, {
      "left" : "BigInteger val = BigInteger.valueOf(value);",
      "right" : "BigInteger val = BigInteger.valueOf(value);",
      "info" : "VariableDeclarationStatement[20200-20243]:VariableDeclarationStatement[20108-20151]"
    }, {
      "left" : "final byte[] b = val.toByteArray();",
      "right" : "final byte[] b = val.toByteArray();",
      "info" : "VariableDeclarationStatement[20252-20287]:VariableDeclarationStatement[20160-20195]"
    }, {
      "left" : "final int len = b.length;",
      "right" : "final int len = b.length;",
      "info" : "VariableDeclarationStatement[20296-20321]:VariableDeclarationStatement[20204-20229]"
    }, {
      "left" : "final int off = offset + length - len;",
      "right" : "final int off = offset + length - len;",
      "info" : "VariableDeclarationStatement[20330-20368]:VariableDeclarationStatement[20238-20276]"
    }, {
      "left" : "System.arraycopy(b, 0, buf, off, len);",
      "right" : "System.arraycopy(b, 0, buf, off, len);",
      "info" : "ExpressionStatement[20377-20415]:ExpressionStatement[20285-20323]"
    }, {
      "left" : "final byte fill = (byte) (negative ? 0xff : 0);",
      "right" : "final byte fill = (byte) (negative ? 0xff : 0);",
      "info" : "VariableDeclarationStatement[20424-20471]:VariableDeclarationStatement[20332-20379]"
    }, {
      "left" : "for (int i = offset + 1; i < off; i++)",
      "right" : "for (int i = offset + 1; i < off; i++)",
      "info" : "ForStatement[20480-20557]:ForStatement[20388-20465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20519-20557]:Block[20427-20465]"
    }, {
      "left" : "buf[i] = fill;",
      "right" : "buf[i] = fill;",
      "info" : "ExpressionStatement[20533-20547]:ExpressionStatement[20441-20455]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21162-21168]:Modifier[21070-21076]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21169-21175]:Modifier[21077-21083]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21176-21179]:PrimitiveType[21084-21087]"
    }, {
      "left" : "formatCheckSumOctalBytes",
      "right" : "formatCheckSumOctalBytes",
      "info" : "SimpleName[21180-21204]:SimpleName[21088-21112]"
    }, {
      "left" : "final long value",
      "right" : "final long value",
      "info" : "SingleVariableDeclaration[21205-21221]:SingleVariableDeclaration[21113-21129]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[21223-21233]:SingleVariableDeclaration[21131-21141]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[21235-21251]:SingleVariableDeclaration[21143-21159]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[21253-21269]:SingleVariableDeclaration[21161-21177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21271-21534]:Block[21179-21442]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[21282-21299]:VariableDeclarationStatement[21190-21207]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[21329-21380]:ExpressionStatement[21237-21288]"
    }, {
      "left" : "buf[offset + idx++]   = 0;",
      "right" : "buf[offset + idx++]   = 0;",
      "info" : "ExpressionStatement[21390-21416]:ExpressionStatement[21298-21324]"
    }, {
      "left" : "buf[offset + idx]     = (byte) ' ';",
      "right" : "buf[offset + idx]     = (byte) ' ';",
      "info" : "ExpressionStatement[21442-21477]:ExpressionStatement[21350-21385]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[21505-21528]:ReturnStatement[21413-21436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21701-21707]:Modifier[21609-21615]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21708-21714]:Modifier[21616-21622]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[21715-21719]:PrimitiveType[21623-21627]"
    }, {
      "left" : "computeCheckSum",
      "right" : "computeCheckSum",
      "info" : "SimpleName[21720-21735]:SimpleName[21628-21643]"
    }, {
      "left" : "final byte[] buf",
      "right" : "final byte[] buf",
      "info" : "SingleVariableDeclaration[21736-21752]:SingleVariableDeclaration[21644-21660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21754-21890]:Block[21662-21798]"
    }, {
      "left" : "long sum = 0;",
      "right" : "long sum = 0;",
      "info" : "VariableDeclarationStatement[21764-21777]:VariableDeclarationStatement[21672-21685]"
    }, {
      "left" : "for (byte element : buf)",
      "right" : "for (byte element : buf)",
      "info" : "EnhancedForStatement[21787-21863]:EnhancedForStatement[21695-21771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21812-21863]:Block[21720-21771]"
    }, {
      "left" : "sum += BYTE_MASK & element;",
      "right" : "sum += BYTE_MASK & element;",
      "info" : "ExpressionStatement[21826-21853]:ExpressionStatement[21734-21761]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[21873-21884]:ReturnStatement[21781-21792]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23831-23837]:Modifier[23739-23745]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23838-23844]:Modifier[23746-23752]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23845-23852]:PrimitiveType[23753-23760]"
    }, {
      "left" : "verifyCheckSum",
      "right" : "verifyCheckSum",
      "info" : "SimpleName[23853-23867]:SimpleName[23761-23775]"
    }, {
      "left" : "byte[] header",
      "right" : "byte[] header",
      "info" : "SingleVariableDeclaration[23868-23881]:SingleVariableDeclaration[23776-23789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23883-24651]:Block[23791-24559]"
    }, {
      "left" : "long storedSum = 0;",
      "right" : "long storedSum = 0;",
      "info" : "VariableDeclarationStatement[23893-23912]:VariableDeclarationStatement[23801-23820]"
    }, {
      "left" : "long unsignedSum = 0;",
      "right" : "long unsignedSum = 0;",
      "info" : "VariableDeclarationStatement[23921-23942]:VariableDeclarationStatement[23829-23850]"
    }, {
      "left" : "long signedSum = 0;",
      "right" : "long signedSum = 0;",
      "info" : "VariableDeclarationStatement[23951-23970]:VariableDeclarationStatement[23859-23878]"
    }, {
      "left" : "int digits = 0;",
      "right" : "int digits = 0;",
      "info" : "VariableDeclarationStatement[23980-23995]:VariableDeclarationStatement[23888-23903]"
    }, {
      "left" : "for (int i = 0; i < header.length; i++)",
      "right" : "for (int i = 0; i < header.length; i++)",
      "info" : "ForStatement[24004-24518]:ForStatement[23912-24426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24044-24518]:Block[23952-24426]"
    }, {
      "left" : "byte b = header[i];",
      "right" : "byte b = header[i];",
      "info" : "VariableDeclarationStatement[24058-24077]:VariableDeclarationStatement[23966-23985]"
    }, {
      "left" : "if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN)",
      "right" : "if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN)",
      "info" : "IfStatement[24090-24443]:IfStatement[23998-24351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24148-24443]:Block[24056-24351]"
    }, {
      "left" : "if ('0' <= b && b <= '7' && digits++ < 6)",
      "right" : "if ('0' <= b && b <= '7' && digits++ < 6)",
      "info" : "IfStatement[24166-24404]:IfStatement[24074-24312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24208-24284]:Block[24116-24192]"
    }, {
      "left" : "storedSum = storedSum * 8 + b - '0';",
      "right" : "storedSum = storedSum * 8 + b - '0';",
      "info" : "ExpressionStatement[24230-24266]:ExpressionStatement[24138-24174]"
    }, {
      "left" : "if (digits > 0)",
      "right" : "if (digits > 0)",
      "info" : "IfStatement[24290-24404]:IfStatement[24198-24312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24306-24404]:Block[24214-24312]"
    }, {
      "left" : "digits = 6;",
      "right" : "digits = 6;",
      "info" : "ExpressionStatement[24328-24339]:ExpressionStatement[24236-24247]"
    }, {
      "left" : "b = ' ';",
      "right" : "b = ' ';",
      "info" : "ExpressionStatement[24421-24429]:ExpressionStatement[24329-24337]"
    }, {
      "left" : "unsignedSum += 0xff & b;",
      "right" : "unsignedSum += 0xff & b;",
      "info" : "ExpressionStatement[24456-24480]:ExpressionStatement[24364-24388]"
    }, {
      "left" : "signedSum += b;",
      "right" : "signedSum += b;",
      "info" : "ExpressionStatement[24493-24508]:ExpressionStatement[24401-24416]"
    }, {
      "left" : "return storedSum == unsignedSum || storedSum == signedSum\n                || storedSum > unsignedSum;",
      "right" : "return storedSum == unsignedSum || storedSum == signedSum\n                || storedSum > unsignedSum;",
      "info" : "ReturnStatement[24528-24629]:ReturnStatement[24436-24537]"
    } ]
  },
  "interFileMappings" : { }
}