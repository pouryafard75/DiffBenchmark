{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Normalize",
      "right" : "Normalize",
      "info" : "TypeDeclaration[1096-20640]:TypeDeclaration[1096-21918]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2209-2249]:FieldDeclaration[2209-2249]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[2252-2289]:FieldDeclaration[2252-2289]"
    }, {
      "left" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "right" : "private static final boolean CONVERT_WHILE_TO_FOR = true;",
      "info" : "FieldDeclaration[2292-2349]:FieldDeclaration[2292-2349]"
    }, {
      "left" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "right" : "static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
      "info" : "FieldDeclaration[2352-2404]:FieldDeclaration[2352-2404]"
    }, {
      "left" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "Normalize(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[2408-2546]:MethodDeclaration[2408-2546]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[2550-2783]:MethodDeclaration[2550-2783]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2787-4152]:MethodDeclaration[2787-4152]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "TypeDeclaration[4156-5839]:TypeDeclaration[4156-5839]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[4281-4321]:FieldDeclaration[4281-4321]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[4326-4363]:FieldDeclaration[4326-4363]"
    }, {
      "left" : "public PropogateConstantAnnotations(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "right" : "public PropogateConstantAnnotations(\n        AbstractCompiler compiler, boolean forbidChanges)",
      "info" : "MethodDeclaration[4369-4546]:MethodDeclaration[4369-4546]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4552-4688]:MethodDeclaration[4552-4688]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4694-5835]:MethodDeclaration[4694-5835]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "TypeDeclaration[5843-8306]:TypeDeclaration[5843-8306]"
    }, {
      "left" : "final private AbstractCompiler compiler;",
      "right" : "final private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6032-6072]:FieldDeclaration[6032-6072]"
    }, {
      "left" : "final private boolean checkUserDeclarations;",
      "right" : "final private boolean checkUserDeclarations;",
      "info" : "FieldDeclaration[6077-6121]:FieldDeclaration[6077-6121]"
    }, {
      "left" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "right" : "VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations)",
      "info" : "MethodDeclaration[6127-6298]:MethodDeclaration[6127-6298]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[6304-6630]:MethodDeclaration[6304-6630]"
    }, {
      "left" : "private Map<String,Boolean> constantMap = Maps.newHashMap();",
      "right" : "private Map<String,Boolean> constantMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[6636-6696]:FieldDeclaration[6636-6696]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6702-8302]:MethodDeclaration[6702-8302]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "TypeDeclaration[8310-16748]:TypeDeclaration[8310-17565]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[8711-8751]:FieldDeclaration[8711-8751]"
    }, {
      "left" : "private final boolean assertOnChange;",
      "right" : "private final boolean assertOnChange;",
      "info" : "FieldDeclaration[8756-8793]:FieldDeclaration[8756-8793]"
    }, {
      "left" : "NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)",
      "right" : "NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange)",
      "info" : "MethodDeclaration[8799-8953]:MethodDeclaration[8799-8953]"
    }, {
      "left" : "private void reportCodeChange(String changeDescription)",
      "right" : "private void reportCodeChange(String changeDescription)",
      "info" : "MethodDeclaration[8959-9204]:MethodDeclaration[8959-9204]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9210-9366]:MethodDeclaration[9210-9366]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9372-9818]:MethodDeclaration[9372-9907]"
    }, {
      "left" : "private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[10499-11312]:MethodDeclaration[11316-12129]"
    }, {
      "left" : "private void normalizeLabels(Node n)",
      "right" : "private void normalizeLabels(Node n)",
      "info" : "MethodDeclaration[11411-12193]:MethodDeclaration[12228-13010]"
    }, {
      "left" : "private void extractForInitializer(\n        Node n, Node before, Node beforeParent)",
      "right" : "private void extractForInitializer(\n        Node n, Node before, Node beforeParent)",
      "info" : "MethodDeclaration[12199-13885]:MethodDeclaration[13016-14702]"
    }, {
      "left" : "private void splitVarDeclarations(Node n)",
      "right" : "private void splitVarDeclarations(Node n)",
      "info" : "MethodDeclaration[13891-14759]:MethodDeclaration[14708-15576]"
    }, {
      "left" : "private void moveNamedFunctions(Node functionBody)",
      "right" : "private void moveNamedFunctions(Node functionBody)",
      "info" : "MethodDeclaration[14765-16300]:MethodDeclaration[15582-17117]"
    }, {
      "left" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "right" : "private Node addToFront(Node parent, Node newChild, Node after)",
      "info" : "MethodDeclaration[16306-16744]:MethodDeclaration[17123-17561]"
    }, {
      "left" : "private void removeDuplicateDeclarations(Node root)",
      "right" : "private void removeDuplicateDeclarations(Node root)",
      "info" : "MethodDeclaration[16752-17123]:MethodDeclaration[17569-17940]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "TypeDeclaration[17127-19968]:TypeDeclaration[17944-21246]"
    }, {
      "left" : "public void onRedeclaration(\n        Scope s, String name, Node n, Node parent, Node gramps,\n        Node nodeWithLineNumber)",
      "right" : "public void onRedeclaration(\n        Scope s, String name, Node n, Node parent, Node gramps,\n        Node nodeWithLineNumber)",
      "info" : "MethodDeclaration[17303-17829]:MethodDeclaration[18120-19107]"
    }, {
      "left" : "private void replaceVarWithAssignment(Node n, Node parent, Node gramps)",
      "right" : "private void replaceVarWithAssignment(Node n, Node parent, Node gramps)",
      "info" : "MethodDeclaration[17835-19964]:MethodDeclaration[19113-21242]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "TypeDeclaration[19972-20637]:TypeDeclaration[21250-21915]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[20131-20301]:MethodDeclaration[21409-21579]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[20307-20391]:MethodDeclaration[21585-21669]"
    }, {
      "left" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent)",
      "info" : "MethodDeclaration[20397-20526]:MethodDeclaration[21675-21804]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[20532-20633]:MethodDeclaration[21810-21911]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2164-2169]:TYPE_DECLARATION_KIND[2164-2169]"
    }, {
      "left" : "Normalize",
      "right" : "Normalize",
      "info" : "SimpleName[2170-2179]:SimpleName[2170-2179]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[2191-2203]:SimpleType[2191-2203]"
    }, {
      "left" : "Normalize",
      "right" : "Normalize",
      "info" : "SimpleName[2408-2417]:SimpleName[2408-2417]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2418-2443]:SingleVariableDeclaration[2418-2443]"
    }, {
      "left" : "boolean assertOnChange",
      "right" : "boolean assertOnChange",
      "info" : "SingleVariableDeclaration[2445-2467]:SingleVariableDeclaration[2445-2467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2469-2546]:Block[2469-2546]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2475-2500]:ExpressionStatement[2475-2500]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[2505-2542]:ExpressionStatement[2505-2542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2550-2557]:Modifier[2550-2557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2558-2562]:PrimitiveType[2558-2562]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[2563-2579]:SimpleName[2563-2579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2606-2783]:Block[2606-2783]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[2612-2746]:IfStatement[2612-2746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2632-2746]:Block[2632-2746]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n          \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[2640-2740]:ThrowStatement[2640-2740]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[2751-2779]:ExpressionStatement[2751-2779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2787-2796]:MarkerAnnotation[2787-2796]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2799-2805]:Modifier[2799-2805]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2806-2810]:PrimitiveType[2806-2810]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2811-2818]:SimpleName[2811-2818]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2819-2831]:SingleVariableDeclaration[2819-2831]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2833-2842]:SingleVariableDeclaration[2833-2842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2844-4152]:Block[2844-4152]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root,\n        new NormalizeStatements(compiler, assertOnChange));",
      "right" : "NodeTraversal.traverse(compiler, root,\n        new NormalizeStatements(compiler, assertOnChange));",
      "info" : "ExpressionStatement[2850-2948]:ExpressionStatement[2850-2948]"
    }, {
      "left" : "if (MAKE_LOCAL_NAMES_UNIQUE)",
      "right" : "if (MAKE_LOCAL_NAMES_UNIQUE)",
      "info" : "IfStatement[2953-3160]:IfStatement[2953-3160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2982-3160]:Block[2982-3160]"
    }, {
      "left" : "MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();",
      "right" : "MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();",
      "info" : "VariableDeclarationStatement[2990-3054]:VariableDeclarationStatement[2990-3054]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, renamer);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, renamer);",
      "info" : "VariableDeclarationStatement[3061-3116]:VariableDeclarationStatement[3061-3116]"
    }, {
      "left" : "t.traverseRoots(externs, root);",
      "right" : "t.traverseRoots(externs, root);",
      "info" : "ExpressionStatement[3123-3154]:ExpressionStatement[3123-3154]"
    }, {
      "left" : "removeDuplicateDeclarations(root);",
      "right" : "removeDuplicateDeclarations(root);",
      "info" : "ExpressionStatement[4018-4052]:ExpressionStatement[4018-4052]"
    }, {
      "left" : "new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);",
      "right" : "new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);",
      "info" : "ExpressionStatement[4057-4148]:ExpressionStatement[4057-4148]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4156-4162]:Modifier[4156-4162]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4163-4169]:Modifier[4163-4169]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4170-4175]:TYPE_DECLARATION_KIND[4170-4175]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "SimpleName[4176-4204]:SimpleName[4176-4204]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[4219-4244]:SimpleType[4219-4244]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[4262-4274]:SimpleType[4262-4274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4369-4375]:Modifier[4369-4375]"
    }, {
      "left" : "PropogateConstantAnnotations",
      "right" : "PropogateConstantAnnotations",
      "info" : "SimpleName[4376-4404]:SimpleName[4376-4404]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4414-4439]:SingleVariableDeclaration[4414-4439]"
    }, {
      "left" : "boolean forbidChanges",
      "right" : "boolean forbidChanges",
      "info" : "SingleVariableDeclaration[4441-4462]:SingleVariableDeclaration[4441-4462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4464-4546]:Block[4464-4546]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4472-4497]:ExpressionStatement[4472-4497]"
    }, {
      "left" : "this.assertOnChange = forbidChanges;",
      "right" : "this.assertOnChange = forbidChanges;",
      "info" : "ExpressionStatement[4504-4540]:ExpressionStatement[4504-4540]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4552-4561]:MarkerAnnotation[4552-4561]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4566-4572]:Modifier[4566-4572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4573-4577]:PrimitiveType[4573-4577]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4578-4585]:SimpleName[4578-4585]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4586-4598]:SingleVariableDeclaration[4586-4598]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4600-4609]:SingleVariableDeclaration[4600-4609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4611-4688]:Block[4611-4688]"
    }, {
      "left" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "right" : "new NodeTraversal(compiler, this).traverseRoots(externs, root);",
      "info" : "ExpressionStatement[4619-4682]:ExpressionStatement[4619-4682]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4694-4703]:MarkerAnnotation[4694-4703]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4708-4714]:Modifier[4708-4714]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4715-4719]:PrimitiveType[4715-4719]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4720-4725]:SimpleName[4720-4725]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4726-4741]:SingleVariableDeclaration[4726-4741]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4743-4749]:SingleVariableDeclaration[4743-4749]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4751-4762]:SingleVariableDeclaration[4751-4762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4764-5835]:Block[4764-5835]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[4839-5829]:IfStatement[4839-5829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4870-5829]:Block[4870-5829]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[4880-4938]:IfStatement[4880-4938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4909-4938]:Block[4909-4938]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4921-4928]:ReturnStatement[4921-4928]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[4948-4970]:VariableDeclarationStatement[4948-4970]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[5035-5080]:VariableDeclarationStatement[5035-5080]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[5089-5154]:IfStatement[5089-5154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5106-5154]:Block[5106-5154]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[5118-5144]:ExpressionStatement[5118-5144]"
    }, {
      "left" : "if ((info != null && info.isConstant()) &&\n            !n.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if ((info != null && info.isConstant()) &&\n            !n.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[5164-5821]:IfStatement[5164-5821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5261-5821]:Block[5261-5821]"
    }, {
      "left" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "n.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[5273-5319]:ExpressionStatement[5273-5319]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[5330-5611]:IfStatement[5330-5611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5611]:Block[5350-5611]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5364-5392]:VariableDeclarationStatement[5364-5392]"
    }, {
      "left" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  gramps:\" + n.getParent().getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  gramps:\" + n.getParent().getParent().toStringTree());",
      "info" : "ThrowStatement[5405-5599]:ThrowStatement[5405-5599]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5932-5938]:Modifier[5932-5938]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5939-5944]:TYPE_DECLARATION_KIND[5939-5944]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "SimpleName[5945-5960]:SimpleName[5945-5960]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[5969-5994]:SimpleType[5969-5994]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[6012-6024]:SimpleType[6012-6024]"
    }, {
      "left" : "VerifyConstants",
      "right" : "VerifyConstants",
      "info" : "SimpleName[6127-6142]:SimpleName[6127-6142]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6143-6168]:SingleVariableDeclaration[6143-6168]"
    }, {
      "left" : "boolean checkUserDeclarations",
      "right" : "boolean checkUserDeclarations",
      "info" : "SingleVariableDeclaration[6170-6199]:SingleVariableDeclaration[6170-6199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6201-6298]:Block[6201-6298]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6209-6234]:ExpressionStatement[6209-6234]"
    }, {
      "left" : "this.checkUserDeclarations = checkUserDeclarations;",
      "right" : "this.checkUserDeclarations = checkUserDeclarations;",
      "info" : "ExpressionStatement[6241-6292]:ExpressionStatement[6241-6292]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6304-6313]:MarkerAnnotation[6304-6313]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6318-6324]:Modifier[6318-6324]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6325-6329]:PrimitiveType[6325-6329]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6330-6337]:SimpleName[6330-6337]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[6338-6350]:SingleVariableDeclaration[6338-6350]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[6352-6361]:SingleVariableDeclaration[6352-6361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6363-6630]:Block[6363-6630]"
    }, {
      "left" : "Node externsAndJs = root.getParent();",
      "right" : "Node externsAndJs = root.getParent();",
      "info" : "VariableDeclarationStatement[6371-6408]:VariableDeclarationStatement[6371-6408]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[6415-6462]:ExpressionStatement[6415-6462]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "right" : "Preconditions.checkState(externsAndJs.hasChild(externs));",
      "info" : "ExpressionStatement[6469-6526]:ExpressionStatement[6469-6526]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);",
      "info" : "ExpressionStatement[6534-6624]:ExpressionStatement[6534-6624]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6702-6711]:MarkerAnnotation[6702-6711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6716-6722]:Modifier[6716-6722]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6723-6727]:PrimitiveType[6723-6727]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[6728-6733]:SimpleName[6728-6733]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6734-6749]:SingleVariableDeclaration[6734-6749]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6751-6757]:SingleVariableDeclaration[6751-6757]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[6759-6770]:SingleVariableDeclaration[6759-6770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6772-8302]:Block[6772-8302]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[6780-8296]:IfStatement[6780-8296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6811-8296]:Block[6811-8296]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[6821-6849]:VariableDeclarationStatement[6821-6849]"
    }, {
      "left" : "if (n.getString().isEmpty())",
      "right" : "if (n.getString().isEmpty())",
      "info" : "IfStatement[6858-6916]:IfStatement[6858-6916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6887-6916]:Block[6887-6916]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6899-6906]:ReturnStatement[6899-6906]"
    }, {
      "left" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "VariableDeclarationStatement[6926-6984]:VariableDeclarationStatement[6926-6984]"
    }, {
      "left" : "if (checkUserDeclarations)",
      "right" : "if (checkUserDeclarations)",
      "info" : "IfStatement[6993-7972]:IfStatement[6993-7972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7020-7972]:Block[7020-7972]"
    }, {
      "left" : "boolean expectedConst = false;",
      "right" : "boolean expectedConst = false;",
      "info" : "VariableDeclarationStatement[7032-7062]:VariableDeclarationStatement[7032-7062]"
    }, {
      "left" : "if (NodeUtil.isConstantName(n)\n              || compiler.getCodingConvention().isConstant(n.getString()))",
      "right" : "if (NodeUtil.isConstantName(n)\n              || compiler.getCodingConvention().isConstant(n.getString()))",
      "info" : "IfStatement[7073-7622]:IfStatement[7073-7622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7179-7226]:Block[7179-7226]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[7193-7214]:ExpressionStatement[7193-7214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7232-7622]:Block[7232-7622]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[7246-7268]:ExpressionStatement[7246-7268]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[7282-7304]:VariableDeclarationStatement[7282-7304]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[7317-7362]:VariableDeclarationStatement[7317-7362]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[7375-7448]:IfStatement[7375-7448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7392-7448]:Block[7392-7448]"
    }, {
      "left" : "info = var.getJSDocInfo();",
      "right" : "info = var.getJSDocInfo();",
      "info" : "ExpressionStatement[7408-7434]:ExpressionStatement[7408-7434]"
    }, {
      "left" : "if (info != null && info.isConstant())",
      "right" : "if (info != null && info.isConstant())",
      "info" : "IfStatement[7462-7610]:IfStatement[7462-7610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7501-7552]:Block[7501-7552]"
    }, {
      "left" : "expectedConst = true;",
      "right" : "expectedConst = true;",
      "info" : "ExpressionStatement[7517-7538]:ExpressionStatement[7517-7538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7558-7610]:Block[7558-7610]"
    }, {
      "left" : "expectedConst = false;",
      "right" : "expectedConst = false;",
      "info" : "ExpressionStatement[7574-7596]:ExpressionStatement[7574-7596]"
    }, {
      "left" : "if (expectedConst)",
      "right" : "if (expectedConst)",
      "info" : "IfStatement[7634-7962]:IfStatement[7634-7962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7653-7801]:Block[7653-7801]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" is not annotated as constant.\");",
      "info" : "ExpressionStatement[7667-7789]:ExpressionStatement[7667-7789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7807-7962]:Block[7807-7962]"
    }, {
      "left" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "right" : "Preconditions.checkState(expectedConst == isConst,\n                \"The name \" + name + \" should not be annotated as constant.\");",
      "info" : "ExpressionStatement[7821-7950]:ExpressionStatement[7821-7950]"
    }, {
      "left" : "Boolean value = constantMap.get(name);",
      "right" : "Boolean value = constantMap.get(name);",
      "info" : "VariableDeclarationStatement[7982-8020]:VariableDeclarationStatement[7982-8020]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[8029-8288]:IfStatement[8029-8288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8048-8101]:Block[8048-8101]"
    }, {
      "left" : "constantMap.put(name, isConst);",
      "right" : "constantMap.put(name, isConst);",
      "info" : "ExpressionStatement[8060-8091]:ExpressionStatement[8060-8091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8107-8288]:Block[8107-8288]"
    }, {
      "left" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "right" : "Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name \" + name + \" is not consistently annotated as \" +\n              \"constant.\");",
      "info" : "ExpressionStatement[8119-8278]:ExpressionStatement[8119-8278]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8659-8664]:TYPE_DECLARATION_KIND[8659-8664]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "SimpleName[8665-8684]:SimpleName[8665-8684]"
    }, {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[8696-8704]:SimpleType[8696-8704]"
    }, {
      "left" : "NormalizeStatements",
      "right" : "NormalizeStatements",
      "info" : "SimpleName[8799-8818]:SimpleName[8799-8818]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[8819-8844]:SingleVariableDeclaration[8819-8844]"
    }, {
      "left" : "boolean assertOnChange",
      "right" : "boolean assertOnChange",
      "info" : "SingleVariableDeclaration[8846-8868]:SingleVariableDeclaration[8846-8868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8870-8953]:Block[8870-8953]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[8878-8903]:ExpressionStatement[8878-8903]"
    }, {
      "left" : "this.assertOnChange = assertOnChange;",
      "right" : "this.assertOnChange = assertOnChange;",
      "info" : "ExpressionStatement[8910-8947]:ExpressionStatement[8910-8947]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8959-8966]:Modifier[8959-8966]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8967-8971]:PrimitiveType[8967-8971]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[8972-8988]:SimpleName[8972-8988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9015-9204]:Block[9015-9204]"
    }, {
      "left" : "if (assertOnChange)",
      "right" : "if (assertOnChange)",
      "info" : "IfStatement[9023-9163]:IfStatement[9023-9163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9043-9163]:Block[9043-9163]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);",
      "right" : "throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);",
      "info" : "ThrowStatement[9053-9155]:ThrowStatement[9053-9155]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9170-9198]:ExpressionStatement[9170-9198]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9210-9219]:MarkerAnnotation[9210-9219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9224-9230]:Modifier[9224-9230]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9231-9238]:PrimitiveType[9231-9238]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[9239-9253]:SimpleName[9239-9253]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9254-9269]:SingleVariableDeclaration[9254-9269]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9271-9277]:SingleVariableDeclaration[9271-9277]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[9279-9290]:SingleVariableDeclaration[9279-9290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9292-9366]:Block[9292-9366]"
    }, {
      "left" : "doStatementNormalizations(t, n, parent);",
      "right" : "doStatementNormalizations(t, n, parent);",
      "info" : "ExpressionStatement[9300-9340]:ExpressionStatement[9300-9340]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9348-9360]:ReturnStatement[9348-9360]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9386-9392]:Modifier[9386-9392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9393-9397]:PrimitiveType[9393-9397]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[9398-9403]:SimpleName[9398-9403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9442-9818]:Block[9442-9907]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            n.addChildBefore(new Node(Token.EMPTY), expr);\n            n.addChildAfter(new Node(Token.EMPTY), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n      }",
      "right" : "switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            n.addChildBefore(new Node(Token.EMPTY), expr);\n            n.addChildAfter(new Node(Token.EMPTY), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n      }",
      "info" : "SwitchStatement[9450-9812]:SwitchStatement[9450-9901]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[9481-9498]:SwitchCase[9481-9498]"
    }, {
      "left" : "if (CONVERT_WHILE_TO_FOR)",
      "right" : "if (CONVERT_WHILE_TO_FOR)",
      "info" : "IfStatement[9509-9786]:IfStatement[9509-9786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9535-9786]:Block[9535-9786]"
    }, {
      "left" : "Node expr = n.getFirstChild();",
      "right" : "Node expr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9549-9579]:VariableDeclarationStatement[9549-9579]"
    }, {
      "left" : "n.setType(Token.FOR);",
      "right" : "n.setType(Token.FOR);",
      "info" : "ExpressionStatement[9592-9613]:ExpressionStatement[9592-9613]"
    }, {
      "left" : "n.addChildBefore(new Node(Token.EMPTY), expr);",
      "right" : "n.addChildBefore(new Node(Token.EMPTY), expr);",
      "info" : "ExpressionStatement[9626-9672]:ExpressionStatement[9626-9672]"
    }, {
      "left" : "n.addChildAfter(new Node(Token.EMPTY), expr);",
      "right" : "n.addChildAfter(new Node(Token.EMPTY), expr);",
      "info" : "ExpressionStatement[9685-9730]:ExpressionStatement[9685-9730]"
    }, {
      "left" : "reportCodeChange(\"WHILE node\");",
      "right" : "reportCodeChange(\"WHILE node\");",
      "info" : "ExpressionStatement[9743-9774]:ExpressionStatement[9743-9774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9797-9803]:BreakStatement[9797-9803]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10580-10587]:Modifier[11397-11404]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10588-10592]:PrimitiveType[11405-11409]"
    }, {
      "left" : "doStatementNormalizations",
      "right" : "doStatementNormalizations",
      "info" : "SimpleName[10593-10618]:SimpleName[11410-11435]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10628-10643]:SingleVariableDeclaration[11445-11460]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10645-10651]:SingleVariableDeclaration[11462-11468]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10653-10664]:SingleVariableDeclaration[11470-11481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10666-11312]:Block[11483-12129]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[10674-10743]:IfStatement[11491-11560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10706-10743]:Block[11523-11560]"
    }, {
      "left" : "normalizeLabels(n);",
      "right" : "normalizeLabels(n);",
      "info" : "ExpressionStatement[10716-10735]:ExpressionStatement[11533-11552]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "right" : "if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL)",
      "info" : "IfStatement[10893-11012]:IfStatement[11710-11829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10957-11012]:Block[11774-11829]"
    }, {
      "left" : "extractForInitializer(n, null, null);",
      "right" : "extractForInitializer(n, null, null);",
      "info" : "ExpressionStatement[10967-11004]:ExpressionStatement[11784-11821]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(n))",
      "right" : "if (NodeUtil.isStatementBlock(n))",
      "info" : "IfStatement[11132-11208]:IfStatement[11949-12025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11166-11208]:Block[11983-12025]"
    }, {
      "left" : "splitVarDeclarations(n);",
      "right" : "splitVarDeclarations(n);",
      "info" : "ExpressionStatement[11176-11200]:ExpressionStatement[11993-12017]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[11216-11306]:IfStatement[12033-12123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11251-11306]:Block[12068-12123]"
    }, {
      "left" : "moveNamedFunctions(n.getLastChild());",
      "right" : "moveNamedFunctions(n.getLastChild());",
      "info" : "ExpressionStatement[11261-11298]:ExpressionStatement[12078-12115]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11656-11663]:Modifier[12473-12480]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11664-11668]:PrimitiveType[12481-12485]"
    }, {
      "left" : "normalizeLabels",
      "right" : "normalizeLabels",
      "info" : "SimpleName[11669-11684]:SimpleName[12486-12501]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11685-11691]:SingleVariableDeclaration[12502-12508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11693-12193]:Block[12510-13010]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[11701-11757]:ExpressionStatement[12518-12574]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[11765-11794]:VariableDeclarationStatement[12582-12611]"
    }, {
      "left" : "switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }",
      "right" : "switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }",
      "info" : "SwitchStatement[11801-12187]:SwitchStatement[12618-13004]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[11835-11852]:SwitchCase[12652-12669]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[11861-11878]:SwitchCase[12678-12695]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[11887-11902]:SwitchCase[12704-12719]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[11911-11928]:SwitchCase[12728-12745]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[11937-11951]:SwitchCase[12754-12768]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11962-11969]:ReturnStatement[12779-12786]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11978-11986]:SwitchCase[12795-12803]"
    }, {
      "left" : "Node block = new Node(Token.BLOCK);",
      "right" : "Node block = new Node(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[11997-12032]:VariableDeclarationStatement[12814-12849]"
    }, {
      "left" : "n.replaceChild(last, block);",
      "right" : "n.replaceChild(last, block);",
      "info" : "ExpressionStatement[12043-12071]:ExpressionStatement[12860-12888]"
    }, {
      "left" : "block.addChildToFront(last);",
      "right" : "block.addChildToFront(last);",
      "info" : "ExpressionStatement[12082-12110]:ExpressionStatement[12899-12927]"
    }, {
      "left" : "reportCodeChange(\"LABEL normalization\");",
      "right" : "reportCodeChange(\"LABEL normalization\");",
      "info" : "ExpressionStatement[12121-12161]:ExpressionStatement[12938-12978]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12172-12179]:ReturnStatement[12989-12996]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12678-12685]:Modifier[13495-13502]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12686-12690]:PrimitiveType[13503-13507]"
    }, {
      "left" : "extractForInitializer",
      "right" : "extractForInitializer",
      "info" : "SimpleName[12691-12712]:SimpleName[13508-13529]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12722-12728]:SingleVariableDeclaration[13539-13545]"
    }, {
      "left" : "Node before",
      "right" : "Node before",
      "info" : "SingleVariableDeclaration[12730-12741]:SingleVariableDeclaration[13547-13558]"
    }, {
      "left" : "Node beforeParent",
      "right" : "Node beforeParent",
      "info" : "SingleVariableDeclaration[12743-12760]:SingleVariableDeclaration[13560-13577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12762-13885]:Block[13579-14702]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[12771-13879]:ForStatement[13588-14696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12831-13879]:Block[13648-14696]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[12841-12860]:ExpressionStatement[13658-13677]"
    }, {
      "left" : "Node insertBefore = (before == null) ? c : before;",
      "right" : "Node insertBefore = (before == null) ? c : before;",
      "info" : "VariableDeclarationStatement[12869-12919]:VariableDeclarationStatement[13686-13736]"
    }, {
      "left" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "right" : "Node insertBeforeParent = (before == null) ? n : beforeParent;",
      "info" : "VariableDeclarationStatement[12928-12990]:VariableDeclarationStatement[13745-13807]"
    }, {
      "left" : "switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              c.replaceChild(init, new Node(Token.EMPTY));\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }",
      "right" : "switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              c.replaceChild(init, new Node(Token.EMPTY));\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }",
      "info" : "SwitchStatement[12999-13871]:SwitchStatement[13816-14688]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[13032-13049]:SwitchCase[13849-13866]"
    }, {
      "left" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "right" : "extractForInitializer(c, insertBefore, insertBeforeParent);",
      "info" : "ExpressionStatement[13062-13121]:ExpressionStatement[13879-13938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13134-13140]:BreakStatement[13951-13957]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[13151-13166]:SwitchCase[13968-13983]"
    }, {
      "left" : "if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY)",
      "right" : "if (!NodeUtil.isForIn(c)\n                && c.getFirstChild().getType() != Token.EMPTY)",
      "info" : "IfStatement[13179-13842]:IfStatement[13996-14659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13267-13842]:Block[14084-14659]"
    }, {
      "left" : "Node init = c.getFirstChild();",
      "right" : "Node init = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[13283-13313]:VariableDeclarationStatement[14100-14130]"
    }, {
      "left" : "c.replaceChild(init, new Node(Token.EMPTY));",
      "right" : "c.replaceChild(init, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[13328-13372]:ExpressionStatement[14145-14189]"
    }, {
      "left" : "Node newStatement;",
      "right" : "Node newStatement;",
      "info" : "VariableDeclarationStatement[13388-13406]:VariableDeclarationStatement[14205-14223]"
    }, {
      "left" : "if (init.getType() == Token.VAR)",
      "right" : "if (init.getType() == Token.VAR)",
      "info" : "IfStatement[13534-13699]:IfStatement[14351-14516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13567-13621]:Block[14384-14438]"
    }, {
      "left" : "newStatement = init;",
      "right" : "newStatement = init;",
      "info" : "ExpressionStatement[13585-13605]:ExpressionStatement[14402-14422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13627-13699]:Block[14444-14516]"
    }, {
      "left" : "newStatement = NodeUtil.newExpr(init);",
      "right" : "newStatement = NodeUtil.newExpr(init);",
      "info" : "ExpressionStatement[13645-13683]:ExpressionStatement[14462-14500]"
    }, {
      "left" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "right" : "insertBeforeParent.addChildBefore(newStatement, insertBefore);",
      "info" : "ExpressionStatement[13715-13777]:ExpressionStatement[14532-14594]"
    }, {
      "left" : "reportCodeChange(\"FOR initializer\");",
      "right" : "reportCodeChange(\"FOR initializer\");",
      "info" : "ExpressionStatement[13792-13828]:ExpressionStatement[14609-14645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13855-13861]:BreakStatement[14672-14678]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14080-14087]:Modifier[14897-14904]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14088-14092]:PrimitiveType[14905-14909]"
    }, {
      "left" : "splitVarDeclarations",
      "right" : "splitVarDeclarations",
      "info" : "SimpleName[14093-14113]:SimpleName[14910-14930]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14114-14120]:SingleVariableDeclaration[14931-14937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14122-14759]:Block[14939-15576]"
    }, {
      "left" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node next, c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[14130-14753]:ForStatement[14947-15570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14190-14753]:Block[15007-15570]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[14200-14219]:ExpressionStatement[15017-15036]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[14228-14745]:IfStatement[15045-15562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14258-14745]:Block[15075-15562]"
    }, {
      "left" : "if (assertOnChange && !c.hasChildren())",
      "right" : "if (assertOnChange && !c.hasChildren())",
      "info" : "IfStatement[14270-14387]:IfStatement[15087-15204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14310-14387]:Block[15127-15204]"
    }, {
      "left" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "right" : "throw new IllegalStateException(\"Empty VAR node.\");",
      "info" : "ThrowStatement[14324-14375]:ThrowStatement[15141-15192]"
    }, {
      "left" : "while (c.getFirstChild() != c.getLastChild())",
      "right" : "while (c.getFirstChild() != c.getLastChild())",
      "info" : "WhileStatement[14399-14735]:WhileStatement[15216-15552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14445-14735]:Block[15262-15552]"
    }, {
      "left" : "Node name = c.getFirstChild();",
      "right" : "Node name = c.getFirstChild();",
      "info" : "VariableDeclarationStatement[14459-14489]:VariableDeclarationStatement[15276-15306]"
    }, {
      "left" : "c.removeChild(name);",
      "right" : "c.removeChild(name);",
      "info" : "ExpressionStatement[14502-14522]:ExpressionStatement[15319-15339]"
    }, {
      "left" : "Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());",
      "right" : "Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());",
      "info" : "VariableDeclarationStatement[14535-14622]:VariableDeclarationStatement[15352-15439]"
    }, {
      "left" : "n.addChildBefore(newVar, c);",
      "right" : "n.addChildBefore(newVar, c);",
      "info" : "ExpressionStatement[14635-14663]:ExpressionStatement[15452-15480]"
    }, {
      "left" : "reportCodeChange(\"VAR with multiple children\");",
      "right" : "reportCodeChange(\"VAR with multiple children\");",
      "info" : "ExpressionStatement[14676-14723]:ExpressionStatement[15493-15540]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14934-14941]:Modifier[15751-15758]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14942-14946]:PrimitiveType[15759-15763]"
    }, {
      "left" : "moveNamedFunctions",
      "right" : "moveNamedFunctions",
      "info" : "SimpleName[14947-14965]:SimpleName[15764-15782]"
    }, {
      "left" : "Node functionBody",
      "right" : "Node functionBody",
      "info" : "SingleVariableDeclaration[14966-14983]:SingleVariableDeclaration[15783-15800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14985-16300]:Block[15802-17117]"
    }, {
      "left" : "Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[14993-15083]:ExpressionStatement[15810-15900]"
    }, {
      "left" : "Node previous = null;",
      "right" : "Node previous = null;",
      "info" : "VariableDeclarationStatement[15090-15111]:VariableDeclarationStatement[15907-15928]"
    }, {
      "left" : "Node current = functionBody.getFirstChild();",
      "right" : "Node current = functionBody.getFirstChild();",
      "info" : "VariableDeclarationStatement[15118-15162]:VariableDeclarationStatement[15935-15979]"
    }, {
      "left" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "right" : "while (current != null && NodeUtil.isFunctionDeclaration(current))",
      "info" : "WhileStatement[15285-15426]:WhileStatement[16102-16243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15352-15426]:Block[16169-16243]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[15362-15381]:ExpressionStatement[16179-16198]"
    }, {
      "left" : "current = current.getNext();",
      "right" : "current = current.getNext();",
      "info" : "ExpressionStatement[15390-15418]:ExpressionStatement[16207-16235]"
    }, {
      "left" : "Node insertAfter = previous;",
      "right" : "Node insertAfter = previous;",
      "info" : "VariableDeclarationStatement[15490-15518]:VariableDeclarationStatement[16307-16335]"
    }, {
      "left" : "while (current != null)",
      "right" : "while (current != null)",
      "info" : "WhileStatement[15525-16294]:WhileStatement[16342-17111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15549-16294]:Block[16366-17111]"
    }, {
      "left" : "Node next = current.getNext();",
      "right" : "Node next = current.getNext();",
      "info" : "VariableDeclarationStatement[15628-15658]:VariableDeclarationStatement[16445-16475]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(current))",
      "right" : "if (NodeUtil.isFunctionDeclaration(current))",
      "info" : "IfStatement[15667-16262]:IfStatement[16484-17079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15712-16138]:Block[16529-16955]"
    }, {
      "left" : "Preconditions.checkNotNull(previous);",
      "right" : "Preconditions.checkNotNull(previous);",
      "info" : "ExpressionStatement[15775-15812]:ExpressionStatement[16592-16629]"
    }, {
      "left" : "functionBody.removeChildAfter(previous);",
      "right" : "functionBody.removeChildAfter(previous);",
      "info" : "ExpressionStatement[15823-15863]:ExpressionStatement[16640-16680]"
    }, {
      "left" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "right" : "insertAfter = addToFront(functionBody, current, insertAfter);",
      "info" : "ExpressionStatement[15987-16048]:ExpressionStatement[16804-16865]"
    }, {
      "left" : "reportCodeChange(\"Move function declaration not at top of function\");",
      "right" : "reportCodeChange(\"Move function declaration not at top of function\");",
      "info" : "ExpressionStatement[16059-16128]:ExpressionStatement[16876-16945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16144-16262]:Block[16961-17079]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[16233-16252]:ExpressionStatement[17050-17069]"
    }, {
      "left" : "current = next;",
      "right" : "current = next;",
      "info" : "ExpressionStatement[16271-16286]:ExpressionStatement[17088-17103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16511-16518]:Modifier[17328-17335]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16519-16523]:SimpleType[17336-17340]"
    }, {
      "left" : "addToFront",
      "right" : "addToFront",
      "info" : "SimpleName[16524-16534]:SimpleName[17341-17351]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[16535-16546]:SingleVariableDeclaration[17352-17363]"
    }, {
      "left" : "Node newChild",
      "right" : "Node newChild",
      "info" : "SingleVariableDeclaration[16548-16561]:SingleVariableDeclaration[17365-17378]"
    }, {
      "left" : "Node after",
      "right" : "Node after",
      "info" : "SingleVariableDeclaration[16563-16573]:SingleVariableDeclaration[17380-17390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16575-16744]:Block[17392-17561]"
    }, {
      "left" : "if (after == null)",
      "right" : "if (after == null)",
      "info" : "IfStatement[16583-16715]:IfStatement[17400-17532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16602-16653]:Block[17419-17470]"
    }, {
      "left" : "parent.addChildToFront(newChild);",
      "right" : "parent.addChildToFront(newChild);",
      "info" : "ExpressionStatement[16612-16645]:ExpressionStatement[17429-17462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16659-16715]:Block[17476-17532]"
    }, {
      "left" : "parent.addChildAfter(newChild, after);",
      "right" : "parent.addChildAfter(newChild, after);",
      "info" : "ExpressionStatement[16669-16707]:ExpressionStatement[17486-17524]"
    }, {
      "left" : "return newChild;",
      "right" : "return newChild;",
      "info" : "ReturnStatement[16722-16738]:ReturnStatement[17539-17555]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16804-16811]:Modifier[17621-17628]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16812-16816]:PrimitiveType[17629-17633]"
    }, {
      "left" : "removeDuplicateDeclarations",
      "right" : "removeDuplicateDeclarations",
      "info" : "SimpleName[16817-16844]:SimpleName[17634-17661]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[16845-16854]:SingleVariableDeclaration[17662-17671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16856-17123]:Block[17673-17940]"
    }, {
      "left" : "Callback tickler = new ScopeTicklingCallback();",
      "right" : "Callback tickler = new ScopeTicklingCallback();",
      "info" : "VariableDeclarationStatement[16862-16909]:VariableDeclarationStatement[17679-17726]"
    }, {
      "left" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "right" : "ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());",
      "info" : "VariableDeclarationStatement[16914-17023]:VariableDeclarationStatement[17731-17840]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);",
      "info" : "VariableDeclarationStatement[17028-17097]:VariableDeclarationStatement[17845-17914]"
    }, {
      "left" : "t.traverse(root);",
      "right" : "t.traverse(root);",
      "info" : "ExpressionStatement[17102-17119]:ExpressionStatement[17919-17936]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17188-17195]:Modifier[18005-18012]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[17202-17207]:TYPE_DECLARATION_KIND[18019-18024]"
    }, {
      "left" : "DuplicateDeclarationHandler",
      "right" : "DuplicateDeclarationHandler",
      "info" : "SimpleName[17208-17235]:SimpleName[18025-18052]"
    }, {
      "left" : "SyntacticScopeCreator.RedeclarationHandler",
      "right" : "SyntacticScopeCreator.RedeclarationHandler",
      "info" : "SimpleType[17253-17295]:SimpleType[18070-18112]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17427-17433]:Modifier[18244-18250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17434-17438]:PrimitiveType[18251-18255]"
    }, {
      "left" : "onRedeclaration",
      "right" : "onRedeclaration",
      "info" : "SimpleName[17439-17454]:SimpleName[18256-18271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17553-17829]:Block[18370-19107]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "right" : "Preconditions.checkState(n.getType() == Token.NAME);",
      "info" : "ExpressionStatement[17561-17613]:ExpressionStatement[18378-18430]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[17620-17823]:IfStatement[18947-19101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17655-17823]:Block[18982-19101]"
    }, {
      "left" : "Preconditions.checkState(parent.hasOneChild());",
      "right" : "Preconditions.checkState(parent.hasOneChild());",
      "info" : "ExpressionStatement[17714-17761]:ExpressionStatement[18992-19039]"
    }, {
      "left" : "replaceVarWithAssignment(n, parent, gramps);",
      "right" : "replaceVarWithAssignment(n, parent, gramps);",
      "info" : "ExpressionStatement[17771-17815]:ExpressionStatement[19049-19093]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18796-18803]:Modifier[20074-20081]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18804-18808]:PrimitiveType[20082-20086]"
    }, {
      "left" : "replaceVarWithAssignment",
      "right" : "replaceVarWithAssignment",
      "info" : "SimpleName[18809-18833]:SimpleName[20087-20111]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18834-18840]:SingleVariableDeclaration[20112-20118]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18842-18853]:SingleVariableDeclaration[20120-20131]"
    }, {
      "left" : "Node gramps",
      "right" : "Node gramps",
      "info" : "SingleVariableDeclaration[18855-18866]:SingleVariableDeclaration[20133-20144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18868-19964]:Block[20146-21242]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[18876-19905]:IfStatement[20154-21183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18897-19267]:Block[20175-20545]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[18971-18993]:ExpressionStatement[20249-20271]"
    }, {
      "left" : "Node value = n.getFirstChild();",
      "right" : "Node value = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19058-19089]:VariableDeclarationStatement[20336-20367]"
    }, {
      "left" : "n.removeChild(value);",
      "right" : "n.removeChild(value);",
      "info" : "ExpressionStatement[19098-19119]:ExpressionStatement[20376-20397]"
    }, {
      "left" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "right" : "Node replacement = new Node(Token.ASSIGN, n, value);",
      "info" : "VariableDeclarationStatement[19128-19180]:VariableDeclarationStatement[20406-20458]"
    }, {
      "left" : "gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));",
      "right" : "gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));",
      "info" : "ExpressionStatement[19189-19259]:ExpressionStatement[20467-20537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19273-19905]:Block[20551-21183]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(gramps))",
      "right" : "if (NodeUtil.isStatementBlock(gramps))",
      "info" : "IfStatement[19330-19897]:IfStatement[20608-21175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19369-19418]:Block[20647-20696]"
    }, {
      "left" : "gramps.removeChild(parent);",
      "right" : "gramps.removeChild(parent);",
      "info" : "ExpressionStatement[19381-19408]:ExpressionStatement[20659-20686]"
    }, {
      "left" : "if (gramps.getType() == Token.FOR)",
      "right" : "if (gramps.getType() == Token.FOR)",
      "info" : "IfStatement[19424-19897]:IfStatement[20702-21175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19459-19749]:Block[20737-21027]"
    }, {
      "left" : "parent.removeChild(n);",
      "right" : "parent.removeChild(n);",
      "info" : "ExpressionStatement[19675-19697]:ExpressionStatement[20953-20975]"
    }, {
      "left" : "gramps.replaceChild(parent, n);",
      "right" : "gramps.replaceChild(parent, n);",
      "info" : "ExpressionStatement[19708-19739]:ExpressionStatement[20986-21017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19755-19897]:Block[21033-21175]"
    }, {
      "left" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "right" : "Preconditions.checkState(gramps.getType() == Token.LABEL);",
      "info" : "ExpressionStatement[19767-19825]:ExpressionStatement[21045-21103]"
    }, {
      "left" : "gramps.replaceChild(parent, new Node(Token.EMPTY));",
      "right" : "gramps.replaceChild(parent, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[19836-19887]:ExpressionStatement[21114-21165]"
    }, {
      "left" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "right" : "reportCodeChange(\"Duplicate VAR declaration\");",
      "info" : "ExpressionStatement[19912-19958]:ExpressionStatement[21190-21236]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20037-20044]:Modifier[21315-21322]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[20045-20050]:Modifier[21323-21328]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20051-20056]:TYPE_DECLARATION_KIND[21329-21334]"
    }, {
      "left" : "ScopeTicklingCallback",
      "right" : "ScopeTicklingCallback",
      "info" : "SimpleName[20057-20078]:SimpleName[21335-21356]"
    }, {
      "left" : "NodeTraversal.ScopedCallback",
      "right" : "NodeTraversal.ScopedCallback",
      "info" : "SimpleType[20096-20124]:SimpleType[21374-21402]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20131-20140]:MarkerAnnotation[21409-21418]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20145-20151]:Modifier[21423-21429]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20152-20156]:PrimitiveType[21430-21434]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[20157-20167]:SimpleName[21435-21445]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20168-20183]:SingleVariableDeclaration[21446-21461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20185-20301]:Block[21463-21579]"
    }, {
      "left" : "t.getScope();",
      "right" : "t.getScope();",
      "info" : "ExpressionStatement[20282-20295]:ExpressionStatement[21560-21573]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20307-20316]:MarkerAnnotation[21585-21594]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20321-20327]:Modifier[21599-21605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20328-20332]:PrimitiveType[21606-21610]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[20333-20342]:SimpleName[21611-21620]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20343-20358]:SingleVariableDeclaration[21621-21636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20360-20391]:Block[21638-21669]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20397-20406]:MarkerAnnotation[21675-21684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20411-20417]:Modifier[21689-21695]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20418-20425]:PrimitiveType[21696-21703]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[20426-20440]:SimpleName[21704-21718]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[20450-20477]:SingleVariableDeclaration[21728-21755]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20479-20485]:SingleVariableDeclaration[21757-21763]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20487-20498]:SingleVariableDeclaration[21765-21776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20500-20526]:Block[21778-21804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20508-20520]:ReturnStatement[21786-21798]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20532-20541]:MarkerAnnotation[21810-21819]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20546-20552]:Modifier[21824-21830]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20553-20557]:PrimitiveType[21831-21835]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[20558-20563]:SimpleName[21836-21841]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20564-20579]:SingleVariableDeclaration[21842-21857]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20581-20587]:SingleVariableDeclaration[21859-21865]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[20589-20600]:SingleVariableDeclaration[21867-21878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20602-20633]:Block[21880-21911]"
    } ]
  },
  "interFileMappings" : { }
}