{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "TypeDeclaration[561-32007]:TypeDeclaration[561-32259]"
    }, {
      "left" : "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";",
      "right" : "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";",
      "info" : "FieldDeclaration[756-921]:FieldDeclaration[756-921]"
    }, {
      "left" : "enum : Feature",
      "right" : "enum : Feature",
      "info" : "EnumDeclaration[927-1990]:EnumDeclaration[927-1990]"
    }, {
      "left" : "final boolean _defaultState;",
      "right" : "final boolean _defaultState;",
      "info" : "FieldDeclaration[1142-1170]:FieldDeclaration[1142-1170]"
    }, {
      "left" : "final int _mask;",
      "right" : "final int _mask;",
      "info" : "FieldDeclaration[1179-1195]:FieldDeclaration[1179-1195]"
    }, {
      "left" : "public static int collectDefaults()",
      "right" : "public static int collectDefaults()",
      "info" : "MethodDeclaration[1213-1610]:MethodDeclaration[1213-1610]"
    }, {
      "left" : "private Feature(boolean defaultState)",
      "right" : "private Feature(boolean defaultState)",
      "info" : "MethodDeclaration[1628-1757]:MethodDeclaration[1628-1757]"
    }, {
      "left" : "public boolean enabledByDefault()",
      "right" : "public boolean enabledByDefault()",
      "info" : "MethodDeclaration[1767-1836]:MethodDeclaration[1767-1836]"
    }, {
      "left" : "public int getMask()",
      "right" : "public int getMask()",
      "info" : "MethodDeclaration[1845-1893]:MethodDeclaration[1845-1893]"
    }, {
      "left" : "public boolean enabledIn(int flags)",
      "right" : "public boolean enabledIn(int flags)",
      "info" : "MethodDeclaration[1902-1984]:MethodDeclaration[1902-1984]"
    }, {
      "left" : "protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;",
      "right" : "protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;",
      "info" : "FieldDeclaration[1996-2554]:FieldDeclaration[1996-2554]"
    }, {
      "left" : "protected int _formatFeatures;",
      "right" : "protected int _formatFeatures;",
      "info" : "FieldDeclaration[2725-2882]:FieldDeclaration[2725-2882]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[2888-2923]:FieldDeclaration[2888-2923]"
    }, {
      "left" : "protected boolean _closed;",
      "right" : "protected boolean _closed;",
      "info" : "FieldDeclaration[3090-3311]:FieldDeclaration[3090-3311]"
    }, {
      "left" : "final protected IOContext _ioContext;",
      "right" : "final protected IOContext _ioContext;",
      "info" : "FieldDeclaration[3317-3354]:FieldDeclaration[3317-3354]"
    }, {
      "left" : "protected XmlReadContext _parsingContext;",
      "right" : "protected XmlReadContext _parsingContext;",
      "info" : "FieldDeclaration[3525-3701]:FieldDeclaration[3525-3701]"
    }, {
      "left" : "protected final XmlTokenStream _xmlTokens;",
      "right" : "protected final XmlTokenStream _xmlTokens;",
      "info" : "FieldDeclaration[3707-3749]:FieldDeclaration[3707-3749]"
    }, {
      "left" : "protected boolean _mayBeLeaf;",
      "right" : "protected boolean _mayBeLeaf;",
      "info" : "FieldDeclaration[3754-3916]:FieldDeclaration[3754-3916]"
    }, {
      "left" : "protected JsonToken _nextToken;",
      "right" : "protected JsonToken _nextToken;",
      "info" : "FieldDeclaration[3922-3953]:FieldDeclaration[3922-3953]"
    }, {
      "left" : "protected String _currText;",
      "right" : "protected String _currText;",
      "info" : "FieldDeclaration[3959-3986]:FieldDeclaration[3959-3986]"
    }, {
      "left" : "protected Set<String> _namesToWrap;",
      "right" : "protected Set<String> _namesToWrap;",
      "info" : "FieldDeclaration[3992-4027]:FieldDeclaration[3992-4027]"
    }, {
      "left" : "protected ByteArrayBuilder _byteArrayBuilder = null;",
      "right" : "protected ByteArrayBuilder _byteArrayBuilder = null;",
      "info" : "FieldDeclaration[4213-4405]:FieldDeclaration[4213-4405]"
    }, {
      "left" : "protected byte[] _binaryValue;",
      "right" : "protected byte[] _binaryValue;",
      "info" : "FieldDeclaration[4411-4651]:FieldDeclaration[4411-4651]"
    }, {
      "left" : "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n            ObjectCodec codec, XMLStreamReader xmlReader)",
      "right" : "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n            ObjectCodec codec, XMLStreamReader xmlReader)",
      "info" : "MethodDeclaration[4819-5332]:MethodDeclaration[4819-5332]"
    }, {
      "left" : "public Version version()",
      "right" : "public Version version()",
      "info" : "MethodDeclaration[5338-5423]:MethodDeclaration[5338-5423]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[5433-5513]:MethodDeclaration[5433-5513]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[5519-5602]:MethodDeclaration[5519-5602]"
    }, {
      "left" : "public void setXMLTextElementName(String name)",
      "right" : "public void setXMLTextElementName(String name)",
      "info" : "MethodDeclaration[5608-5735]:MethodDeclaration[5608-5735]"
    }, {
      "left" : "public boolean requiresCustomCodec()",
      "right" : "public boolean requiresCustomCodec()",
      "info" : "MethodDeclaration[5745-6054]:MethodDeclaration[5745-6054]"
    }, {
      "left" : "public FromXmlParser enable(Feature f)",
      "right" : "public FromXmlParser enable(Feature f)",
      "info" : "MethodDeclaration[6243-6350]:MethodDeclaration[6243-6350]"
    }, {
      "left" : "public FromXmlParser disable(Feature f)",
      "right" : "public FromXmlParser disable(Feature f)",
      "info" : "MethodDeclaration[6356-6465]:MethodDeclaration[6356-6465]"
    }, {
      "left" : "public final boolean isEnabled(Feature f)",
      "right" : "public final boolean isEnabled(Feature f)",
      "info" : "MethodDeclaration[6471-6573]:MethodDeclaration[6471-6573]"
    }, {
      "left" : "public FromXmlParser configure(Feature f, boolean state)",
      "right" : "public FromXmlParser configure(Feature f, boolean state)",
      "info" : "MethodDeclaration[6579-6759]:MethodDeclaration[6579-6759]"
    }, {
      "left" : "public int getFormatFeatures()",
      "right" : "public int getFormatFeatures()",
      "info" : "MethodDeclaration[7162-7246]:MethodDeclaration[7162-7246]"
    }, {
      "left" : "public JsonParser overrideFormatFeatures(int values, int mask)",
      "right" : "public JsonParser overrideFormatFeatures(int values, int mask)",
      "info" : "MethodDeclaration[7252-7428]:MethodDeclaration[7252-7428]"
    }, {
      "left" : "public XMLStreamReader getStaxReader()",
      "right" : "public XMLStreamReader getStaxReader()",
      "info" : "MethodDeclaration[7634-8158]:MethodDeclaration[7634-8158]"
    }, {
      "left" : "public void addVirtualWrapping(Set<String> namesToWrap)",
      "right" : "public void addVirtualWrapping(Set<String> namesToWrap)",
      "info" : "MethodDeclaration[8328-9588]:MethodDeclaration[8328-9588]"
    }, {
      "left" : "public String getCurrentName() throws IOException",
      "right" : "public String getCurrentName() throws IOException",
      "info" : "MethodDeclaration[9765-10472]:MethodDeclaration[9765-10472]"
    }, {
      "left" : "public void overrideCurrentName(String name)",
      "right" : "public void overrideCurrentName(String name)",
      "info" : "MethodDeclaration[10478-10849]:MethodDeclaration[10478-10849]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[10859-11447]:MethodDeclaration[10859-11447]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[11453-11512]:MethodDeclaration[11453-11512]"
    }, {
      "left" : "public XmlReadContext getParsingContext()",
      "right" : "public XmlReadContext getParsingContext()",
      "info" : "MethodDeclaration[11518-11613]:MethodDeclaration[11518-11613]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[11619-11915]:MethodDeclaration[11619-11915]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[11921-12160]:MethodDeclaration[11921-12160]"
    }, {
      "left" : "public boolean isExpectedStartArrayToken()",
      "right" : "public boolean isExpectedStartArrayToken()",
      "info" : "MethodDeclaration[12166-13273]:MethodDeclaration[12166-13273]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[13868-20013]:MethodDeclaration[13868-20265]"
    }, {
      "left" : "public String nextTextValue() throws IOException",
      "right" : "public String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[20217-23907]:MethodDeclaration[20469-24159]"
    }, {
      "left" : "private void _updateState(JsonToken t)",
      "right" : "private void _updateState(JsonToken t)",
      "info" : "MethodDeclaration[23914-24565]:MethodDeclaration[24166-24817]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[24768-25123]:MethodDeclaration[25020-25375]"
    }, {
      "left" : "public final String getValueAsString() throws IOException",
      "right" : "public final String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[25147-25265]:MethodDeclaration[25399-25517]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException",
      "right" : "public String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[25271-26867]:MethodDeclaration[25523-27119]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[26877-27044]:MethodDeclaration[27129-27296]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[27050-27202]:MethodDeclaration[27302-27454]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[27208-27293]:MethodDeclaration[27460-27545]"
    }, {
      "left" : "public boolean hasTextCharacters()",
      "right" : "public boolean hasTextCharacters()",
      "info" : "MethodDeclaration[27299-27533]:MethodDeclaration[27551-27785]"
    }, {
      "left" : "public Object getEmbeddedObject() throws IOException",
      "right" : "public Object getEmbeddedObject() throws IOException",
      "info" : "MethodDeclaration[27738-27877]:MethodDeclaration[27990-28129]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[27883-28713]:MethodDeclaration[28135-28965]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[28719-29024]:MethodDeclaration[28971-29276]"
    }, {
      "left" : "public BigInteger getBigIntegerValue() throws IOException",
      "right" : "public BigInteger getBigIntegerValue() throws IOException",
      "info" : "MethodDeclaration[29203-29346]:MethodDeclaration[29455-29598]"
    }, {
      "left" : "public BigDecimal getDecimalValue() throws IOException",
      "right" : "public BigDecimal getDecimalValue() throws IOException",
      "info" : "MethodDeclaration[29352-29492]:MethodDeclaration[29604-29744]"
    }, {
      "left" : "public double getDoubleValue() throws IOException",
      "right" : "public double getDoubleValue() throws IOException",
      "info" : "MethodDeclaration[29498-29630]:MethodDeclaration[29750-29882]"
    }, {
      "left" : "public float getFloatValue() throws IOException",
      "right" : "public float getFloatValue() throws IOException",
      "info" : "MethodDeclaration[29636-29766]:MethodDeclaration[29888-30018]"
    }, {
      "left" : "public int getIntValue() throws IOException",
      "right" : "public int getIntValue() throws IOException",
      "info" : "MethodDeclaration[29772-29898]:MethodDeclaration[30024-30150]"
    }, {
      "left" : "public long getLongValue() throws IOException",
      "right" : "public long getLongValue() throws IOException",
      "info" : "MethodDeclaration[29904-30032]:MethodDeclaration[30156-30284]"
    }, {
      "left" : "public NumberType getNumberType() throws IOException",
      "right" : "public NumberType getNumberType() throws IOException",
      "info" : "MethodDeclaration[30038-30176]:MethodDeclaration[30290-30428]"
    }, {
      "left" : "public Number getNumberValue() throws IOException",
      "right" : "public Number getNumberValue() throws IOException",
      "info" : "MethodDeclaration[30182-30317]:MethodDeclaration[30434-30569]"
    }, {
      "left" : "protected void _handleEOF() throws JsonParseException",
      "right" : "protected void _handleEOF() throws JsonParseException",
      "info" : "MethodDeclaration[30522-31002]:MethodDeclaration[30774-31254]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[31180-31426]:MethodDeclaration[31432-31678]"
    }, {
      "left" : "protected ByteArrayBuilder _getByteArrayBuilder()",
      "right" : "protected ByteArrayBuilder _getByteArrayBuilder()",
      "info" : "MethodDeclaration[31432-31690]:MethodDeclaration[31684-31942]"
    }, {
      "left" : "protected boolean _isEmpty(String str)",
      "right" : "protected boolean _isEmpty(String str)",
      "info" : "MethodDeclaration[31696-32005]:MethodDeclaration[31948-32257]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[693-699]:Modifier[693-699]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[700-705]:TYPE_DECLARATION_KIND[700-705]"
    }, {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "SimpleName[706-719]:SimpleName[706-719]"
    }, {
      "left" : "ParserMinimalBase",
      "right" : "ParserMinimalBase",
      "info" : "SimpleType[732-749]:SimpleType[732-749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1343-1349]:Modifier[1343-1349]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1350-1356]:Modifier[1350-1356]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1357-1360]:PrimitiveType[1357-1360]"
    }, {
      "left" : "collectDefaults",
      "right" : "collectDefaults",
      "info" : "SimpleName[1361-1376]:SimpleName[1361-1376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1387-1610]:Block[1387-1610]"
    }, {
      "left" : "int flags = 0;",
      "right" : "int flags = 0;",
      "info" : "VariableDeclarationStatement[1401-1415]:VariableDeclarationStatement[1401-1415]"
    }, {
      "left" : "for (Feature f : values())",
      "right" : "for (Feature f : values())",
      "info" : "EnhancedForStatement[1428-1574]:EnhancedForStatement[1428-1574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1455-1574]:Block[1455-1574]"
    }, {
      "left" : "if (f.enabledByDefault())",
      "right" : "if (f.enabledByDefault())",
      "info" : "IfStatement[1473-1560]:IfStatement[1473-1560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1499-1560]:Block[1499-1560]"
    }, {
      "left" : "flags |= f.getMask();",
      "right" : "flags |= f.getMask();",
      "info" : "ExpressionStatement[1521-1542]:ExpressionStatement[1521-1542]"
    }, {
      "left" : "return flags;",
      "right" : "return flags;",
      "info" : "ReturnStatement[1587-1600]:ReturnStatement[1587-1600]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1628-1635]:Modifier[1628-1635]"
    }, {
      "left" : "Feature",
      "right" : "Feature",
      "info" : "SimpleName[1636-1643]:SimpleName[1636-1643]"
    }, {
      "left" : "boolean defaultState",
      "right" : "boolean defaultState",
      "info" : "SingleVariableDeclaration[1644-1664]:SingleVariableDeclaration[1644-1664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1666-1757]:Block[1666-1757]"
    }, {
      "left" : "_defaultState = defaultState;",
      "right" : "_defaultState = defaultState;",
      "info" : "ExpressionStatement[1680-1709]:ExpressionStatement[1680-1709]"
    }, {
      "left" : "_mask = (1 << ordinal());",
      "right" : "_mask = (1 << ordinal());",
      "info" : "ExpressionStatement[1722-1747]:ExpressionStatement[1722-1747]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1767-1776]:MarkerAnnotation[1767-1776]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1777-1783]:Modifier[1777-1783]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1784-1791]:PrimitiveType[1784-1791]"
    }, {
      "left" : "enabledByDefault",
      "right" : "enabledByDefault",
      "info" : "SimpleName[1792-1808]:SimpleName[1792-1808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1811-1836]:Block[1811-1836]"
    }, {
      "left" : "return _defaultState;",
      "right" : "return _defaultState;",
      "info" : "ReturnStatement[1813-1834]:ReturnStatement[1813-1834]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1845-1854]:MarkerAnnotation[1845-1854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1855-1861]:Modifier[1855-1861]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1862-1865]:PrimitiveType[1862-1865]"
    }, {
      "left" : "getMask",
      "right" : "getMask",
      "info" : "SimpleName[1866-1873]:SimpleName[1866-1873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1876-1893]:Block[1876-1893]"
    }, {
      "left" : "return _mask;",
      "right" : "return _mask;",
      "info" : "ReturnStatement[1878-1891]:ReturnStatement[1878-1891]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1902-1911]:MarkerAnnotation[1902-1911]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1912-1918]:Modifier[1912-1918]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1919-1926]:PrimitiveType[1919-1926]"
    }, {
      "left" : "enabledIn",
      "right" : "enabledIn",
      "info" : "SimpleName[1927-1936]:SimpleName[1927-1936]"
    }, {
      "left" : "int flags",
      "right" : "int flags",
      "info" : "SingleVariableDeclaration[1937-1946]:SingleVariableDeclaration[1937-1946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1948-1984]:Block[1948-1984]"
    }, {
      "left" : "return (flags & getMask()) != 0;",
      "right" : "return (flags & getMask()) != 0;",
      "info" : "ReturnStatement[1950-1982]:ReturnStatement[1950-1982]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4819-4825]:Modifier[4819-4825]"
    }, {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "SimpleName[4826-4839]:SimpleName[4826-4839]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[4840-4854]:SingleVariableDeclaration[4840-4854]"
    }, {
      "left" : "int genericParserFeatures",
      "right" : "int genericParserFeatures",
      "info" : "SingleVariableDeclaration[4856-4881]:SingleVariableDeclaration[4856-4881]"
    }, {
      "left" : "int xmlFeatures",
      "right" : "int xmlFeatures",
      "info" : "SingleVariableDeclaration[4883-4898]:SingleVariableDeclaration[4883-4898]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[4912-4929]:SingleVariableDeclaration[4912-4929]"
    }, {
      "left" : "XMLStreamReader xmlReader",
      "right" : "XMLStreamReader xmlReader",
      "info" : "SingleVariableDeclaration[4931-4956]:SingleVariableDeclaration[4931-4956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4962-5332]:Block[4962-5332]"
    }, {
      "left" : "super(genericParserFeatures);",
      "right" : "super(genericParserFeatures);",
      "info" : "SuperConstructorInvocation[4972-5001]:SuperConstructorInvocation[4972-5001]"
    }, {
      "left" : "_formatFeatures = xmlFeatures;",
      "right" : "_formatFeatures = xmlFeatures;",
      "info" : "ExpressionStatement[5010-5040]:ExpressionStatement[5010-5040]"
    }, {
      "left" : "_ioContext = ctxt;",
      "right" : "_ioContext = ctxt;",
      "info" : "ExpressionStatement[5049-5067]:ExpressionStatement[5049-5067]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[5076-5097]:ExpressionStatement[5076-5097]"
    }, {
      "left" : "_parsingContext = XmlReadContext.createRootContext(-1, -1);",
      "right" : "_parsingContext = XmlReadContext.createRootContext(-1, -1);",
      "info" : "ExpressionStatement[5106-5165]:ExpressionStatement[5106-5165]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[5211-5247]:ExpressionStatement[5211-5247]"
    }, {
      "left" : "_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());",
      "right" : "_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());",
      "info" : "ExpressionStatement[5256-5326]:ExpressionStatement[5256-5326]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5338-5347]:MarkerAnnotation[5338-5347]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5352-5358]:Modifier[5352-5358]"
    }, {
      "left" : "Version",
      "right" : "Version",
      "info" : "SimpleType[5359-5366]:SimpleType[5359-5366]"
    }, {
      "left" : "version",
      "right" : "version",
      "info" : "SimpleName[5367-5374]:SimpleName[5367-5374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5377-5423]:Block[5377-5423]"
    }, {
      "left" : "return PackageVersion.VERSION;",
      "right" : "return PackageVersion.VERSION;",
      "info" : "ReturnStatement[5387-5417]:ReturnStatement[5387-5417]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5433-5442]:MarkerAnnotation[5433-5442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5447-5453]:Modifier[5447-5453]"
    }, {
      "left" : "ObjectCodec",
      "right" : "ObjectCodec",
      "info" : "SimpleType[5454-5465]:SimpleType[5454-5465]"
    }, {
      "left" : "getCodec",
      "right" : "getCodec",
      "info" : "SimpleName[5466-5474]:SimpleName[5466-5474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5477-5513]:Block[5477-5513]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[5487-5507]:ReturnStatement[5487-5507]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5519-5528]:MarkerAnnotation[5519-5528]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5533-5539]:Modifier[5533-5539]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5540-5544]:PrimitiveType[5540-5544]"
    }, {
      "left" : "setCodec",
      "right" : "setCodec",
      "info" : "SimpleName[5545-5553]:SimpleName[5545-5553]"
    }, {
      "left" : "ObjectCodec c",
      "right" : "ObjectCodec c",
      "info" : "SingleVariableDeclaration[5554-5567]:SingleVariableDeclaration[5554-5567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-5602]:Block[5569-5602]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[5579-5596]:ExpressionStatement[5579-5596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5642-5648]:Modifier[5642-5648]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5649-5653]:PrimitiveType[5649-5653]"
    }, {
      "left" : "setXMLTextElementName",
      "right" : "setXMLTextElementName",
      "info" : "SimpleName[5654-5675]:SimpleName[5654-5675]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[5676-5687]:SingleVariableDeclaration[5676-5687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5689-5735]:Block[5689-5735]"
    }, {
      "left" : "_cfgNameForTextElement = name;",
      "right" : "_cfgNameForTextElement = name;",
      "info" : "ExpressionStatement[5699-5729]:ExpressionStatement[5699-5729]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5975-5984]:MarkerAnnotation[5975-5984]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5989-5995]:Modifier[5989-5995]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5996-6003]:PrimitiveType[5996-6003]"
    }, {
      "left" : "requiresCustomCodec",
      "right" : "requiresCustomCodec",
      "info" : "SimpleName[6004-6023]:SimpleName[6004-6023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6026-6054]:Block[6026-6054]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6036-6048]:ReturnStatement[6036-6048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6243-6249]:Modifier[6243-6249]"
    }, {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "SimpleType[6250-6263]:SimpleType[6250-6263]"
    }, {
      "left" : "enable",
      "right" : "enable",
      "info" : "SimpleName[6264-6270]:SimpleName[6264-6270]"
    }, {
      "left" : "Feature f",
      "right" : "Feature f",
      "info" : "SingleVariableDeclaration[6271-6280]:SingleVariableDeclaration[6271-6280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6282-6350]:Block[6282-6350]"
    }, {
      "left" : "_formatFeatures |= f.getMask();",
      "right" : "_formatFeatures |= f.getMask();",
      "info" : "ExpressionStatement[6292-6323]:ExpressionStatement[6292-6323]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6332-6344]:ReturnStatement[6332-6344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6356-6362]:Modifier[6356-6362]"
    }, {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "SimpleType[6363-6376]:SimpleType[6363-6376]"
    }, {
      "left" : "disable",
      "right" : "disable",
      "info" : "SimpleName[6377-6384]:SimpleName[6377-6384]"
    }, {
      "left" : "Feature f",
      "right" : "Feature f",
      "info" : "SingleVariableDeclaration[6385-6394]:SingleVariableDeclaration[6385-6394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6396-6465]:Block[6396-6465]"
    }, {
      "left" : "_formatFeatures &= ~f.getMask();",
      "right" : "_formatFeatures &= ~f.getMask();",
      "info" : "ExpressionStatement[6406-6438]:ExpressionStatement[6406-6438]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6447-6459]:ReturnStatement[6447-6459]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6471-6477]:Modifier[6471-6477]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6478-6483]:Modifier[6478-6483]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6484-6491]:PrimitiveType[6484-6491]"
    }, {
      "left" : "isEnabled",
      "right" : "isEnabled",
      "info" : "SimpleName[6492-6501]:SimpleName[6492-6501]"
    }, {
      "left" : "Feature f",
      "right" : "Feature f",
      "info" : "SingleVariableDeclaration[6502-6511]:SingleVariableDeclaration[6502-6511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6513-6573]:Block[6513-6573]"
    }, {
      "left" : "return (_formatFeatures & f.getMask()) != 0;",
      "right" : "return (_formatFeatures & f.getMask()) != 0;",
      "info" : "ReturnStatement[6523-6567]:ReturnStatement[6523-6567]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6579-6585]:Modifier[6579-6585]"
    }, {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "SimpleType[6586-6599]:SimpleType[6586-6599]"
    }, {
      "left" : "configure",
      "right" : "configure",
      "info" : "SimpleName[6600-6609]:SimpleName[6600-6609]"
    }, {
      "left" : "Feature f",
      "right" : "Feature f",
      "info" : "SingleVariableDeclaration[6610-6619]:SingleVariableDeclaration[6610-6619]"
    }, {
      "left" : "boolean state",
      "right" : "boolean state",
      "info" : "SingleVariableDeclaration[6621-6634]:SingleVariableDeclaration[6621-6634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6636-6759]:Block[6636-6759]"
    }, {
      "left" : "if (state)",
      "right" : "if (state)",
      "info" : "IfStatement[6646-6732]:IfStatement[6646-6732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6657-6691]:Block[6657-6691]"
    }, {
      "left" : "enable(f);",
      "right" : "enable(f);",
      "info" : "ExpressionStatement[6671-6681]:ExpressionStatement[6671-6681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-6732]:Block[6697-6732]"
    }, {
      "left" : "disable(f);",
      "right" : "disable(f);",
      "info" : "ExpressionStatement[6711-6722]:ExpressionStatement[6711-6722]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6741-6753]:ReturnStatement[6741-6753]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7162-7171]:MarkerAnnotation[7162-7171]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7176-7182]:Modifier[7176-7182]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7183-7186]:PrimitiveType[7183-7186]"
    }, {
      "left" : "getFormatFeatures",
      "right" : "getFormatFeatures",
      "info" : "SimpleName[7187-7204]:SimpleName[7187-7204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7207-7246]:Block[7207-7246]"
    }, {
      "left" : "return _formatFeatures;",
      "right" : "return _formatFeatures;",
      "info" : "ReturnStatement[7217-7240]:ReturnStatement[7217-7240]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7252-7261]:MarkerAnnotation[7252-7261]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7266-7272]:Modifier[7266-7272]"
    }, {
      "left" : "JsonParser",
      "right" : "JsonParser",
      "info" : "SimpleType[7273-7283]:SimpleType[7273-7283]"
    }, {
      "left" : "overrideFormatFeatures",
      "right" : "overrideFormatFeatures",
      "info" : "SimpleName[7284-7306]:SimpleName[7284-7306]"
    }, {
      "left" : "int values",
      "right" : "int values",
      "info" : "SingleVariableDeclaration[7307-7317]:SingleVariableDeclaration[7307-7317]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[7319-7327]:SingleVariableDeclaration[7319-7327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7329-7428]:Block[7329-7428]"
    }, {
      "left" : "_formatFeatures = (_formatFeatures & ~mask) | (values & mask);",
      "right" : "_formatFeatures = (_formatFeatures & ~mask) | (values & mask);",
      "info" : "ExpressionStatement[7339-7401]:ExpressionStatement[7339-7401]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7410-7422]:ReturnStatement[7410-7422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8070-8076]:Modifier[8070-8076]"
    }, {
      "left" : "XMLStreamReader",
      "right" : "XMLStreamReader",
      "info" : "SimpleType[8077-8092]:SimpleType[8077-8092]"
    }, {
      "left" : "getStaxReader",
      "right" : "getStaxReader",
      "info" : "SimpleName[8093-8106]:SimpleName[8093-8106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8109-8158]:Block[8109-8158]"
    }, {
      "left" : "return _xmlTokens.getXmlReader();",
      "right" : "return _xmlTokens.getXmlReader();",
      "info" : "ReturnStatement[8119-8152]:ReturnStatement[8119-8152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9125-9131]:Modifier[9125-9131]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9132-9136]:PrimitiveType[9132-9136]"
    }, {
      "left" : "addVirtualWrapping",
      "right" : "addVirtualWrapping",
      "info" : "SimpleName[9137-9155]:SimpleName[9137-9155]"
    }, {
      "left" : "Set<String> namesToWrap",
      "right" : "Set<String> namesToWrap",
      "info" : "SingleVariableDeclaration[9156-9179]:SingleVariableDeclaration[9156-9179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9185-9588]:Block[9185-9588]"
    }, {
      "left" : "String name = _xmlTokens.getLocalName();",
      "right" : "String name = _xmlTokens.getLocalName();",
      "info" : "VariableDeclarationStatement[9340-9380]:VariableDeclarationStatement[9340-9380]"
    }, {
      "left" : "if (name != null && namesToWrap.contains(name))",
      "right" : "if (name != null && namesToWrap.contains(name))",
      "info" : "IfStatement[9389-9493]:IfStatement[9389-9493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9437-9493]:Block[9437-9493]"
    }, {
      "left" : "_xmlTokens.repeatStartElement();",
      "right" : "_xmlTokens.repeatStartElement();",
      "info" : "ExpressionStatement[9451-9483]:ExpressionStatement[9451-9483]"
    }, {
      "left" : "_namesToWrap = namesToWrap;",
      "right" : "_namesToWrap = namesToWrap;",
      "info" : "ExpressionStatement[9502-9529]:ExpressionStatement[9502-9529]"
    }, {
      "left" : "_parsingContext.setNamesToWrap(namesToWrap);",
      "right" : "_parsingContext.setNamesToWrap(namesToWrap);",
      "info" : "ExpressionStatement[9538-9582]:ExpressionStatement[9538-9582]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9872-9881]:MarkerAnnotation[9872-9881]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9886-9892]:Modifier[9886-9892]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9893-9899]:SimpleType[9893-9899]"
    }, {
      "left" : "getCurrentName",
      "right" : "getCurrentName",
      "info" : "SimpleName[9900-9914]:SimpleName[9900-9914]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9924-9935]:SimpleType[9924-9935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9940-10472]:Block[9940-10472]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[10007-10019]:VariableDeclarationStatement[10007-10019]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[10028-10299]:IfStatement[10028-10299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10109-10229]:Block[10109-10229]"
    }, {
      "left" : "XmlReadContext parent = _parsingContext.getParent();",
      "right" : "XmlReadContext parent = _parsingContext.getParent();",
      "info" : "VariableDeclarationStatement[10123-10175]:VariableDeclarationStatement[10123-10175]"
    }, {
      "left" : "name = parent.getCurrentName();",
      "right" : "name = parent.getCurrentName();",
      "info" : "ExpressionStatement[10188-10219]:ExpressionStatement[10188-10219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10235-10299]:Block[10235-10299]"
    }, {
      "left" : "name = _parsingContext.getCurrentName();",
      "right" : "name = _parsingContext.getCurrentName();",
      "info" : "ExpressionStatement[10249-10289]:ExpressionStatement[10249-10289]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[10332-10445]:IfStatement[10332-10445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10350-10445]:Block[10350-10445]"
    }, {
      "left" : "throw new IllegalStateException(\"Missing name, in state: \"+_currToken);",
      "right" : "throw new IllegalStateException(\"Missing name, in state: \"+_currToken);",
      "info" : "ThrowStatement[10364-10435]:ThrowStatement[10364-10435]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[10454-10466]:ReturnStatement[10454-10466]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10478-10487]:MarkerAnnotation[10478-10487]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10492-10498]:Modifier[10492-10498]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10499-10503]:PrimitiveType[10499-10503]"
    }, {
      "left" : "overrideCurrentName",
      "right" : "overrideCurrentName",
      "info" : "SimpleName[10504-10523]:SimpleName[10504-10523]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10524-10535]:SingleVariableDeclaration[10524-10535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10541-10849]:Block[10541-10849]"
    }, {
      "left" : "XmlReadContext ctxt = _parsingContext;",
      "right" : "XmlReadContext ctxt = _parsingContext;",
      "info" : "VariableDeclarationStatement[10632-10670]:VariableDeclarationStatement[10632-10670]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[10679-10808]:IfStatement[10679-10808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10760-10808]:Block[10760-10808]"
    }, {
      "left" : "ctxt = ctxt.getParent();",
      "right" : "ctxt = ctxt.getParent();",
      "info" : "ExpressionStatement[10774-10798]:ExpressionStatement[10774-10798]"
    }, {
      "left" : "ctxt.setCurrentName(name);",
      "right" : "ctxt.setCurrentName(name);",
      "info" : "ExpressionStatement[10817-10843]:ExpressionStatement[10817-10843]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10859-10868]:MarkerAnnotation[10859-10868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10873-10879]:Modifier[10873-10879]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10880-10884]:PrimitiveType[10880-10884]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[10885-10890]:SimpleName[10885-10890]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10900-10911]:SimpleType[10900-10911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10916-11447]:Block[10916-11447]"
    }, {
      "left" : "if (!_closed)",
      "right" : "if (!_closed)",
      "info" : "IfStatement[10926-11441]:IfStatement[10926-11441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10940-11441]:Block[10940-11441]"
    }, {
      "left" : "_closed = true;",
      "right" : "_closed = true;",
      "info" : "ExpressionStatement[10954-10969]:ExpressionStatement[10954-10969]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10982-11431]:TryStatement[10982-11431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10986-11239]:Block[10986-11239]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[11004-11225]:IfStatement[11004-11225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11091-11160]:Block[11091-11160]"
    }, {
      "left" : "_xmlTokens.closeCompletely();",
      "right" : "_xmlTokens.closeCompletely();",
      "info" : "ExpressionStatement[11113-11142]:ExpressionStatement[11113-11142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11166-11225]:Block[11166-11225]"
    }, {
      "left" : "_xmlTokens.close();",
      "right" : "_xmlTokens.close();",
      "info" : "ExpressionStatement[11188-11207]:ExpressionStatement[11188-11207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11248-11431]:Block[11248-11431]"
    }, {
      "left" : "_releaseBuffers();",
      "right" : "_releaseBuffers();",
      "info" : "ExpressionStatement[11399-11417]:ExpressionStatement[11399-11417]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11453-11462]:MarkerAnnotation[11453-11462]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11467-11473]:Modifier[11467-11473]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11474-11481]:PrimitiveType[11474-11481]"
    }, {
      "left" : "isClosed",
      "right" : "isClosed",
      "info" : "SimpleName[11482-11490]:SimpleName[11482-11490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11493-11512]:Block[11493-11512]"
    }, {
      "left" : "return _closed;",
      "right" : "return _closed;",
      "info" : "ReturnStatement[11495-11510]:ReturnStatement[11495-11510]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11518-11527]:MarkerAnnotation[11518-11527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11532-11538]:Modifier[11532-11538]"
    }, {
      "left" : "XmlReadContext",
      "right" : "XmlReadContext",
      "info" : "SimpleType[11539-11553]:SimpleType[11539-11553]"
    }, {
      "left" : "getParsingContext",
      "right" : "getParsingContext",
      "info" : "SimpleName[11554-11571]:SimpleName[11554-11571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11574-11613]:Block[11574-11613]"
    }, {
      "left" : "return _parsingContext;",
      "right" : "return _parsingContext;",
      "info" : "ReturnStatement[11584-11607]:ReturnStatement[11584-11607]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11809-11818]:MarkerAnnotation[11809-11818]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11823-11829]:Modifier[11823-11829]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[11830-11842]:SimpleType[11830-11842]"
    }, {
      "left" : "getTokenLocation",
      "right" : "getTokenLocation",
      "info" : "SimpleName[11843-11859]:SimpleName[11843-11859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11862-11915]:Block[11862-11915]"
    }, {
      "left" : "return _xmlTokens.getTokenLocation();",
      "right" : "return _xmlTokens.getTokenLocation();",
      "info" : "ReturnStatement[11872-11909]:ReturnStatement[11872-11909]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12050-12059]:MarkerAnnotation[12050-12059]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12064-12070]:Modifier[12064-12070]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[12071-12083]:SimpleType[12071-12083]"
    }, {
      "left" : "getCurrentLocation",
      "right" : "getCurrentLocation",
      "info" : "SimpleName[12084-12102]:SimpleName[12084-12102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12105-12160]:Block[12105-12160]"
    }, {
      "left" : "return _xmlTokens.getCurrentLocation();",
      "right" : "return _xmlTokens.getCurrentLocation();",
      "info" : "ReturnStatement[12115-12154]:ReturnStatement[12115-12154]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12497-12506]:MarkerAnnotation[12497-12506]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12511-12517]:Modifier[12511-12517]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12518-12525]:PrimitiveType[12518-12525]"
    }, {
      "left" : "isExpectedStartArrayToken",
      "right" : "isExpectedStartArrayToken",
      "info" : "SimpleName[12526-12551]:SimpleName[12526-12551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12558-13273]:Block[12558-13273]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[12568-12593]:VariableDeclarationStatement[12568-12593]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[12602-13168]:IfStatement[12602-13168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12635-13168]:Block[12635-13168]"
    }, {
      "left" : "_currToken = JsonToken.START_ARRAY;",
      "right" : "_currToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[12658-12693]:ExpressionStatement[12658-12693]"
    }, {
      "left" : "_parsingContext.convertToArray();",
      "right" : "_parsingContext.convertToArray();",
      "info" : "ExpressionStatement[12773-12806]:ExpressionStatement[12773-12806]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[12997-13015]:ExpressionStatement[12997-13015]"
    }, {
      "left" : "_xmlTokens.skipAttributes();",
      "right" : "_xmlTokens.skipAttributes();",
      "info" : "ExpressionStatement[13105-13133]:ExpressionStatement[13105-13133]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13146-13158]:ReturnStatement[13146-13158]"
    }, {
      "left" : "return (t == JsonToken.START_ARRAY);",
      "right" : "return (t == JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[13231-13267]:ReturnStatement[13231-13267]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13868-13877]:MarkerAnnotation[13868-13877]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13882-13888]:Modifier[13882-13888]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[13889-13898]:SimpleType[13889-13898]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[13899-13908]:SimpleName[13899-13908]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13918-13929]:SimpleType[13918-13929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13934-20013]:Block[13934-20265]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[13944-13964]:ExpressionStatement[13944-13964]"
    }, {
      "left" : "if (_nextToken != null)",
      "right" : "if (_nextToken != null)",
      "info" : "IfStatement[13973-14865]:IfStatement[13973-14865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13997-14865]:Block[13997-14865]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[14011-14036]:VariableDeclarationStatement[14011-14036]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[14049-14064]:ExpressionStatement[14049-14064]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[14077-14095]:ExpressionStatement[14077-14095]"
    }, {
      "left" : "switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default: // VALUE_STRING, VALUE_NULL\n                // should be fine as is?\n            }",
      "right" : "switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default: // VALUE_STRING, VALUE_NULL\n                // should be fine as is?\n            }",
      "info" : "SwitchStatement[14108-14833]:SwitchStatement[14108-14833]"
    }, {
      "left" : "case START_OBJECT:",
      "right" : "case START_OBJECT:",
      "info" : "SwitchCase[14133-14151]:SwitchCase[14133-14151]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[14168-14235]:ExpressionStatement[14168-14235]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14252-14258]:BreakStatement[14252-14258]"
    }, {
      "left" : "case START_ARRAY:",
      "right" : "case START_ARRAY:",
      "info" : "SwitchCase[14271-14288]:SwitchCase[14271-14288]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "info" : "ExpressionStatement[14305-14371]:ExpressionStatement[14305-14371]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14388-14394]:BreakStatement[14388-14394]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[14407-14423]:SwitchCase[14407-14423]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[14436-14451]:SwitchCase[14436-14451]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[14468-14514]:ExpressionStatement[14468-14514]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[14531-14579]:ExpressionStatement[14531-14579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14596-14602]:BreakStatement[14596-14602]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[14615-14631]:SwitchCase[14615-14631]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[14648-14706]:ExpressionStatement[14648-14706]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14723-14729]:BreakStatement[14723-14729]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14742-14750]:SwitchCase[14742-14750]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[14846-14855]:ReturnStatement[14846-14855]"
    }, {
      "left" : "int token = _xmlTokens.next();",
      "right" : "int token = _xmlTokens.next();",
      "info" : "VariableDeclarationStatement[14874-14904]:VariableDeclarationStatement[14874-14904]"
    }, {
      "left" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "right" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "info" : "WhileStatement[15045-16441]:WhileStatement[15045-16441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15095-16441]:Block[15095-16441]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[15170-15465]:IfStatement[15170-15465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15186-15465]:Block[15186-15465]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[15271-15305]:ExpressionStatement[15271-15305]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[15322-15389]:ExpressionStatement[15322-15389]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[15406-15451]:ReturnStatement[15406-15451]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[15478-15789]:IfStatement[15478-15789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15509-15789]:Block[15509-15789]"
    }, {
      "left" : "token = _xmlTokens.next();",
      "right" : "token = _xmlTokens.next();",
      "info" : "ExpressionStatement[15688-15714]:ExpressionStatement[15688-15714]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[15731-15749]:ExpressionStatement[15731-15749]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15766-15775]:ContinueStatement[15766-15775]"
    }, {
      "left" : "String name = _xmlTokens.getLocalName();",
      "right" : "String name = _xmlTokens.getLocalName();",
      "info" : "VariableDeclarationStatement[15802-15842]:VariableDeclarationStatement[15802-15842]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[15855-15892]:ExpressionStatement[15855-15892]"
    }, {
      "left" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "right" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "info" : "IfStatement[16088-16209]:IfStatement[16088-16209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16145-16209]:Block[16145-16209]"
    }, {
      "left" : "_xmlTokens.repeatStartElement();",
      "right" : "_xmlTokens.repeatStartElement();",
      "info" : "ExpressionStatement[16163-16195]:ExpressionStatement[16163-16195]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[16223-16241]:ExpressionStatement[16223-16241]"
    }, {
      "left" : "return (_currToken = JsonToken.FIELD_NAME);",
      "right" : "return (_currToken = JsonToken.FIELD_NAME);",
      "info" : "ReturnStatement[16388-16431]:ReturnStatement[16388-16431]"
    }, {
      "left" : "switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            // Simple, except that if this is a leaf, need to suppress end:\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                    // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                    //    expose as empty Object, not null\n                return (_currToken = JsonToken.VALUE_NULL);\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            return _currToken;\n            \n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            return (_currToken = JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                /* One more refinement (pronunced like \"hack\") is that if\n                 * we had an empty String (or all white space), and we are\n                 * deserializing an array, we better hide the empty text.\n                 */\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                        //    expose as empty Object, not null (or, worse, as used to\n                        //    be done, by swallowing the token)\n                        _currToken = JsonToken.END_ARRAY;\n                        _parsingContext = _parsingContext.getParent();\n                        _namesToWrap = _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken = JsonToken.VALUE_STRING);\n            } else {\n                // [dataformat-xml#177]: empty text may also need to be skipped\n                if (_parsingContext.inObject()\n                        && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                    _currToken = JsonToken.END_OBJECT;\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            // If not a leaf (or otherwise ignorable), need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken = null);\n        }",
      "right" : "switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            // Simple, except that if this is a leaf, need to suppress end:\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                if (_parsingContext.inArray()) {\n                    // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                    //    expose as empty Object, not null\n                    _nextToken = JsonToken.END_OBJECT;\n                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                    return (_currToken = JsonToken.START_OBJECT);\n                }\n                return (_currToken = JsonToken.VALUE_NULL);\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            return _currToken;\n            \n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken = JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            return (_currToken = JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                /* One more refinement (pronunced like \"hack\") is that if\n                 * we had an empty String (or all white space), and we are\n                 * deserializing an array, we better hide the empty text.\n                 */\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                        //    expose as empty Object, not null (or, worse, as used to\n                        //    be done, by swallowing the token)\n                        _nextToken = JsonToken.END_OBJECT;\n                        _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                        return (_currToken = JsonToken.START_OBJECT);\n                    }\n                }\n                return (_currToken = JsonToken.VALUE_STRING);\n            } else {\n                // [dataformat-xml#177]: empty text may also need to be skipped\n                if (_parsingContext.inObject()\n                        && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                    _currToken = JsonToken.END_OBJECT;\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            // If not a leaf (or otherwise ignorable), need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            return (_currToken = JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken = null);\n        }",
      "info" : "SwitchStatement[16504-19918]:SwitchStatement[16504-20170]"
    }, {
      "left" : "case XmlTokenStream.XML_END_ELEMENT:",
      "right" : "case XmlTokenStream.XML_END_ELEMENT:",
      "info" : "SwitchCase[16529-16565]:SwitchCase[16529-16565]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[16654-16919]:IfStatement[16654-17195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16670-16919]:Block[16670-17195]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[16688-16707]:ExpressionStatement[16688-16707]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[16862-16905]:ReturnStatement[17138-17181]"
    }, {
      "left" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "right" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[16932-17016]:ExpressionStatement[17208-17292]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[17029-17075]:ExpressionStatement[17305-17351]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[17088-17136]:ExpressionStatement[17364-17412]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[17149-17167]:ReturnStatement[17425-17443]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "info" : "SwitchCase[17189-17228]:SwitchCase[17465-17504]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[17303-17617]:IfStatement[17579-17893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17319-17617]:Block[17595-17893]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[17337-17356]:ExpressionStatement[17613-17632]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[17373-17407]:ExpressionStatement[17649-17683]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[17424-17457]:ExpressionStatement[17700-17733]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[17474-17541]:ExpressionStatement[17750-17817]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[17558-17603]:ReturnStatement[17834-17879]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[17630-17688]:ExpressionStatement[17906-17964]"
    }, {
      "left" : "return (_currToken = JsonToken.FIELD_NAME);",
      "right" : "return (_currToken = JsonToken.FIELD_NAME);",
      "info" : "ReturnStatement[17701-17744]:ReturnStatement[17977-18020]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "info" : "SwitchCase[17753-17793]:SwitchCase[18029-18069]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[17806-17839]:ExpressionStatement[18082-18115]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[17852-17897]:ReturnStatement[18128-18173]"
    }, {
      "left" : "case XmlTokenStream.XML_TEXT:",
      "right" : "case XmlTokenStream.XML_TEXT:",
      "info" : "SwitchCase[17906-17935]:SwitchCase[18182-18211]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[17948-17981]:ExpressionStatement[18224-18257]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[17994-19568]:IfStatement[18270-19820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18010-19082]:Block[18286-19334]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[18028-18047]:ExpressionStatement[18304-18323]"
    }, {
      "left" : "_xmlTokens.skipEndElement();",
      "right" : "_xmlTokens.skipEndElement();",
      "info" : "ExpressionStatement[18364-18392]:ExpressionStatement[18640-18668]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[18409-19006]:IfStatement[18685-19258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18440-19006]:Block[18716-19258]"
    }, {
      "left" : "if (_isEmpty(_currText))",
      "right" : "if (_isEmpty(_currText))",
      "info" : "IfStatement[18462-18988]:IfStatement[18738-19240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18487-18988]:Block[18763-19240]"
    }, {
      "left" : "_currToken",
      "right" : "_nextToken",
      "info" : "SimpleName[18746-18756]:SimpleName[19022-19032]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_nextToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[18746-18779]:ExpressionStatement[19022-19056]"
    }, {
      "left" : "JsonToken.END_ARRAY",
      "right" : "JsonToken.END_OBJECT",
      "info" : "QualifiedName[18759-18778]:QualifiedName[19035-19055]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[19023-19068]:ReturnStatement[19275-19320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19088-19568]:Block[19340-19820]"
    }, {
      "left" : "if (_parsingContext.inObject()\n                        && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText))",
      "right" : "if (_parsingContext.inObject()\n                        && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText))",
      "info" : "IfStatement[19186-19554]:IfStatement[19438-19806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19305-19554]:Block[19557-19806]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[19327-19361]:ExpressionStatement[19579-19613]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[19382-19428]:ExpressionStatement[19634-19680]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[19449-19497]:ExpressionStatement[19701-19749]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[19518-19536]:ReturnStatement[19770-19788]"
    }, {
      "left" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "right" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "info" : "ExpressionStatement[19671-19726]:ExpressionStatement[19923-19978]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[19739-19775]:ExpressionStatement[19991-20027]"
    }, {
      "left" : "return (_currToken = JsonToken.FIELD_NAME);",
      "right" : "return (_currToken = JsonToken.FIELD_NAME);",
      "info" : "ReturnStatement[19788-19831]:ReturnStatement[20040-20083]"
    }, {
      "left" : "case XmlTokenStream.XML_END:",
      "right" : "case XmlTokenStream.XML_END:",
      "info" : "SwitchCase[19840-19868]:SwitchCase[20092-20120]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[19881-19908]:ReturnStatement[20133-20160]"
    }, {
      "left" : "_throwInternal();",
      "right" : "_throwInternal();",
      "info" : "ExpressionStatement[19969-19986]:ExpressionStatement[20221-20238]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19995-20007]:ReturnStatement[20247-20259]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20329-20338]:MarkerAnnotation[20581-20590]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20343-20349]:Modifier[20595-20601]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20350-20356]:SimpleType[20602-20608]"
    }, {
      "left" : "nextTextValue",
      "right" : "nextTextValue",
      "info" : "SimpleName[20357-20370]:SimpleName[20609-20622]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20380-20391]:SimpleType[20632-20643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20396-23907]:Block[20648-24159]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[20406-20426]:ExpressionStatement[20658-20678]"
    }, {
      "left" : "if (_nextToken != null)",
      "right" : "if (_nextToken != null)",
      "info" : "IfStatement[20435-20765]:IfStatement[20687-21017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20459-20765]:Block[20711-21017]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[20473-20498]:VariableDeclarationStatement[20725-20750]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[20511-20526]:ExpressionStatement[20763-20778]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[20539-20557]:ExpressionStatement[20791-20809]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[20619-20701]:IfStatement[20871-20953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20652-20701]:Block[20904-20953]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[20670-20687]:ReturnStatement[20922-20939]"
    }, {
      "left" : "_updateState(t);",
      "right" : "_updateState(t);",
      "info" : "ExpressionStatement[20714-20730]:ExpressionStatement[20966-20982]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20743-20755]:ReturnStatement[20995-21007]"
    }, {
      "left" : "int token = _xmlTokens.next();",
      "right" : "int token = _xmlTokens.next();",
      "info" : "VariableDeclarationStatement[20775-20805]:VariableDeclarationStatement[21027-21057]"
    }, {
      "left" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "right" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "info" : "WhileStatement[20859-21684]:WhileStatement[21111-21936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20909-21684]:Block[21161-21936]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[20923-21171]:IfStatement[21175-21423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20939-21171]:Block[21191-21423]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[20957-20991]:ExpressionStatement[21209-21243]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[21008-21075]:ExpressionStatement[21260-21327]"
    }, {
      "left" : "_currToken = JsonToken.START_OBJECT;",
      "right" : "_currToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[21092-21128]:ExpressionStatement[21344-21380]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21145-21157]:ReturnStatement[21397-21409]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[21184-21334]:IfStatement[21436-21586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21215-21334]:Block[21467-21586]"
    }, {
      "left" : "token = _xmlTokens.next();",
      "right" : "token = _xmlTokens.next();",
      "info" : "ExpressionStatement[21233-21259]:ExpressionStatement[21485-21511]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[21276-21294]:ExpressionStatement[21528-21546]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21311-21320]:ContinueStatement[21563-21572]"
    }, {
      "left" : "String name = _xmlTokens.getLocalName();",
      "right" : "String name = _xmlTokens.getLocalName();",
      "info" : "VariableDeclarationStatement[21347-21387]:VariableDeclarationStatement[21599-21639]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[21400-21437]:ExpressionStatement[21652-21689]"
    }, {
      "left" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "right" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "info" : "IfStatement[21450-21571]:IfStatement[21702-21823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21507-21571]:Block[21759-21823]"
    }, {
      "left" : "_xmlTokens.repeatStartElement();",
      "right" : "_xmlTokens.repeatStartElement();",
      "info" : "ExpressionStatement[21525-21557]:ExpressionStatement[21777-21809]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[21584-21602]:ExpressionStatement[21836-21854]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[21615-21649]:ExpressionStatement[21867-21901]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21662-21674]:ReturnStatement[21914-21926]"
    }, {
      "left" : "switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                // NOTE: this is different from nextToken() -- produce \"\", NOT null\n                _mayBeLeaf = false;\n                _currToken = JsonToken.VALUE_STRING;\n                return (_currText = \"\");\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n            \n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n            } else {\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                _currToken = JsonToken.FIELD_NAME;\n            }\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            _currToken = JsonToken.VALUE_STRING;\n            break;\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // NOTE: this is different from nextToken() -- NO work-around\n                // for otherwise empty List/array\n                _currToken = JsonToken.VALUE_STRING;\n                return _currText;\n            }\n            // If not a leaf, need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            _currToken = JsonToken.FIELD_NAME;\n            break;\n        case XmlTokenStream.XML_END:\n            _currToken = null;\n        }",
      "right" : "switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                // NOTE: this is different from nextToken() -- produce \"\", NOT null\n                _mayBeLeaf = false;\n                _currToken = JsonToken.VALUE_STRING;\n                return (_currText = \"\");\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n            \n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n            } else {\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                _currToken = JsonToken.FIELD_NAME;\n            }\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            _currToken = JsonToken.VALUE_STRING;\n            break;\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // NOTE: this is different from nextToken() -- NO work-around\n                // for otherwise empty List/array\n                _currToken = JsonToken.VALUE_STRING;\n                return _currText;\n            }\n            // If not a leaf, need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            _currToken = JsonToken.FIELD_NAME;\n            break;\n        case XmlTokenStream.XML_END:\n            _currToken = null;\n        }",
      "info" : "SwitchStatement[21747-23880]:SwitchStatement[21999-24132]"
    }, {
      "left" : "case XmlTokenStream.XML_END_ELEMENT:",
      "right" : "case XmlTokenStream.XML_END_ELEMENT:",
      "info" : "SwitchCase[21772-21808]:SwitchCase[22024-22060]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[21821-22066]:IfStatement[22073-22318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21837-22066]:Block[22089-22318]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[21939-21958]:ExpressionStatement[22191-22210]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[21975-22011]:ExpressionStatement[22227-22263]"
    }, {
      "left" : "return (_currText = \"\");",
      "right" : "return (_currText = \"\");",
      "info" : "ReturnStatement[22028-22052]:ReturnStatement[22280-22304]"
    }, {
      "left" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "right" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[22079-22163]:ExpressionStatement[22331-22415]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[22176-22222]:ExpressionStatement[22428-22474]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[22235-22283]:ExpressionStatement[22487-22535]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22296-22302]:BreakStatement[22548-22554]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "info" : "SwitchCase[22324-22363]:SwitchCase[22576-22615]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[22438-22890]:IfStatement[22690-23142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22454-22743]:Block[22706-22995]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[22472-22491]:ExpressionStatement[22724-22743]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[22508-22542]:ExpressionStatement[22760-22794]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[22559-22592]:ExpressionStatement[22811-22844]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[22609-22676]:ExpressionStatement[22861-22928]"
    }, {
      "left" : "_currToken = JsonToken.START_OBJECT;",
      "right" : "_currToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[22693-22729]:ExpressionStatement[22945-22981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22749-22890]:Block[23001-23142]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[22767-22825]:ExpressionStatement[23019-23077]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[22842-22876]:ExpressionStatement[23094-23128]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22903-22909]:BreakStatement[23155-23161]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "info" : "SwitchCase[22918-22958]:SwitchCase[23170-23210]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[22971-23004]:ExpressionStatement[23223-23256]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[23017-23053]:ExpressionStatement[23269-23305]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23066-23072]:BreakStatement[23318-23324]"
    }, {
      "left" : "case XmlTokenStream.XML_TEXT:",
      "right" : "case XmlTokenStream.XML_TEXT:",
      "info" : "SwitchCase[23081-23110]:SwitchCase[23333-23362]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[23123-23156]:ExpressionStatement[23375-23408]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[23169-23554]:IfStatement[23421-23806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23185-23554]:Block[23437-23806]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[23203-23222]:ExpressionStatement[23455-23474]"
    }, {
      "left" : "_xmlTokens.skipEndElement();",
      "right" : "_xmlTokens.skipEndElement();",
      "info" : "ExpressionStatement[23296-23324]:ExpressionStatement[23548-23576]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[23470-23506]:ExpressionStatement[23722-23758]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[23523-23540]:ReturnStatement[23775-23792]"
    }, {
      "left" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "right" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "info" : "ExpressionStatement[23632-23687]:ExpressionStatement[23884-23939]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[23700-23736]:ExpressionStatement[23952-23988]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[23749-23783]:ExpressionStatement[24001-24035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23796-23802]:BreakStatement[24048-24054]"
    }, {
      "left" : "case XmlTokenStream.XML_END:",
      "right" : "case XmlTokenStream.XML_END:",
      "info" : "SwitchCase[23811-23839]:SwitchCase[24063-24091]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[23852-23870]:ExpressionStatement[24104-24122]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23889-23901]:ReturnStatement[24141-24153]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23914-23921]:Modifier[24166-24173]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23922-23926]:PrimitiveType[24174-24178]"
    }, {
      "left" : "_updateState",
      "right" : "_updateState",
      "info" : "SimpleName[23927-23939]:SimpleName[24179-24191]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[23940-23951]:SingleVariableDeclaration[24192-24203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23957-24565]:Block[24209-24817]"
    }, {
      "left" : "switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default:\n        }",
      "right" : "switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default:\n        }",
      "info" : "SwitchStatement[23967-24559]:SwitchStatement[24219-24811]"
    }, {
      "left" : "case START_OBJECT:",
      "right" : "case START_OBJECT:",
      "info" : "SwitchCase[23988-24006]:SwitchCase[24240-24258]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[24019-24086]:ExpressionStatement[24271-24338]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24099-24105]:BreakStatement[24351-24357]"
    }, {
      "left" : "case START_ARRAY:",
      "right" : "case START_ARRAY:",
      "info" : "SwitchCase[24114-24131]:SwitchCase[24366-24383]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "info" : "ExpressionStatement[24144-24210]:ExpressionStatement[24396-24462]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24223-24229]:BreakStatement[24475-24481]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[24238-24254]:SwitchCase[24490-24506]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[24263-24278]:SwitchCase[24515-24530]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[24291-24337]:ExpressionStatement[24543-24589]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[24350-24398]:ExpressionStatement[24602-24650]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24411-24417]:BreakStatement[24663-24669]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[24426-24442]:SwitchCase[24678-24694]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[24455-24513]:ExpressionStatement[24707-24765]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24526-24532]:BreakStatement[24778-24784]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24541-24549]:SwitchCase[24793-24801]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24768-24777]:MarkerAnnotation[25020-25029]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24782-24788]:Modifier[25034-25040]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24789-24795]:SimpleType[25041-25047]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[24796-24803]:SimpleName[25048-25055]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24813-24824]:SimpleType[25065-25076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24829-25123]:Block[25081-25375]"
    }, {
      "left" : "if (_currToken == null)",
      "right" : "if (_currToken == null)",
      "info" : "IfStatement[24839-24899]:IfStatement[25091-25151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24863-24899]:Block[25115-25151]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24877-24889]:ReturnStatement[25129-25141]"
    }, {
      "left" : "switch (_currToken) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        default:\n            return _currToken.asString();\n        }",
      "right" : "switch (_currToken) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        default:\n            return _currToken.asString();\n        }",
      "info" : "SwitchStatement[24908-25117]:SwitchStatement[25160-25369]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[24938-24954]:SwitchCase[25190-25206]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[24967-24991]:ReturnStatement[25219-25243]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[25000-25018]:SwitchCase[25252-25270]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[25031-25048]:ReturnStatement[25283-25300]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25057-25065]:SwitchCase[25309-25317]"
    }, {
      "left" : "return _currToken.asString();",
      "right" : "return _currToken.asString();",
      "info" : "ReturnStatement[25078-25107]:ReturnStatement[25330-25359]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25147-25156]:MarkerAnnotation[25399-25408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25161-25167]:Modifier[25413-25419]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[25168-25173]:Modifier[25420-25425]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25174-25180]:SimpleType[25426-25432]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[25181-25197]:SimpleName[25433-25449]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25207-25218]:SimpleType[25459-25470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25219-25265]:Block[25471-25517]"
    }, {
      "left" : "return getValueAsString(null);",
      "right" : "return getValueAsString(null);",
      "info" : "ReturnStatement[25229-25259]:ReturnStatement[25481-25511]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25271-25280]:MarkerAnnotation[25523-25532]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25285-25291]:Modifier[25537-25543]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25292-25298]:SimpleType[25544-25550]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[25299-25315]:SimpleName[25551-25567]"
    }, {
      "left" : "String defValue",
      "right" : "String defValue",
      "info" : "SingleVariableDeclaration[25316-25331]:SingleVariableDeclaration[25568-25583]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25340-25351]:SimpleType[25592-25603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25356-26867]:Block[25608-27119]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[25366-25391]:VariableDeclarationStatement[25618-25643]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[25400-25451]:IfStatement[25652-25703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25415-25451]:Block[25667-25703]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25429-25441]:ReturnStatement[25681-25693]"
    }, {
      "left" : "switch (t) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        case START_OBJECT:\n            // the interesting case; may be able to convert certain kinds of\n            // elements (specifically, ones with attributes, CDATA only content)\n            // into VALUE_STRING\n            {\n                String str = _xmlTokens.convertToString();\n                if (str != null) {\n                    // need to convert token, as well as \"undo\" START_OBJECT\n                    // note: Should NOT update context, because we will still be getting\n                    // matching END_OBJECT, which will undo contexts properly\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    _currToken = JsonToken.VALUE_STRING;\n                    _nextToken = null;\n                    /* One more thing: must explicitly skip the END_OBJECT that\n                     * would follow.\n                     */\n                    _xmlTokens.skipEndElement();\n                    return (_currText = str);\n                }\n                \n            }\n            return null;\n        default:\n            if (_currToken.isScalarValue()) {\n                return _currToken.asString();\n            }\n        }",
      "right" : "switch (t) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        case START_OBJECT:\n            // the interesting case; may be able to convert certain kinds of\n            // elements (specifically, ones with attributes, CDATA only content)\n            // into VALUE_STRING\n            {\n                String str = _xmlTokens.convertToString();\n                if (str != null) {\n                    // need to convert token, as well as \"undo\" START_OBJECT\n                    // note: Should NOT update context, because we will still be getting\n                    // matching END_OBJECT, which will undo contexts properly\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    _currToken = JsonToken.VALUE_STRING;\n                    _nextToken = null;\n                    /* One more thing: must explicitly skip the END_OBJECT that\n                     * would follow.\n                     */\n                    _xmlTokens.skipEndElement();\n                    return (_currText = str);\n                }\n                \n            }\n            return null;\n        default:\n            if (_currToken.isScalarValue()) {\n                return _currToken.asString();\n            }\n        }",
      "info" : "SwitchStatement[25460-26836]:SwitchStatement[25712-27088]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[25481-25497]:SwitchCase[25733-25749]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[25510-25534]:ReturnStatement[25762-25786]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[25543-25561]:SwitchCase[25795-25813]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[25574-25591]:ReturnStatement[25826-25843]"
    }, {
      "left" : "case START_OBJECT:",
      "right" : "case START_OBJECT:",
      "info" : "SwitchCase[25600-25618]:SwitchCase[25852-25870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25822-26678]:Block[26074-26930]"
    }, {
      "left" : "String str = _xmlTokens.convertToString();",
      "right" : "String str = _xmlTokens.convertToString();",
      "info" : "VariableDeclarationStatement[25840-25882]:VariableDeclarationStatement[26092-26134]"
    }, {
      "left" : "if (str != null)",
      "right" : "if (str != null)",
      "info" : "IfStatement[25899-26647]:IfStatement[26151-26899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25916-26647]:Block[26168-26899]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[26182-26228]:ExpressionStatement[26434-26480]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[26249-26297]:ExpressionStatement[26501-26549]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[26318-26354]:ExpressionStatement[26570-26606]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[26375-26393]:ExpressionStatement[26627-26645]"
    }, {
      "left" : "_xmlTokens.skipEndElement();",
      "right" : "_xmlTokens.skipEndElement();",
      "info" : "ExpressionStatement[26555-26583]:ExpressionStatement[26807-26835]"
    }, {
      "left" : "return (_currText = str);",
      "right" : "return (_currText = str);",
      "info" : "ReturnStatement[26604-26629]:ReturnStatement[26856-26881]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26691-26703]:ReturnStatement[26943-26955]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26712-26720]:SwitchCase[26964-26972]"
    }, {
      "left" : "if (_currToken.isScalarValue())",
      "right" : "if (_currToken.isScalarValue())",
      "info" : "IfStatement[26733-26826]:IfStatement[26985-27078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26765-26826]:Block[27017-27078]"
    }, {
      "left" : "return _currToken.asString();",
      "right" : "return _currToken.asString();",
      "info" : "ReturnStatement[26783-26812]:ReturnStatement[27035-27064]"
    }, {
      "left" : "return defValue;",
      "right" : "return defValue;",
      "info" : "ReturnStatement[26845-26861]:ReturnStatement[27097-27113]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26877-26886]:MarkerAnnotation[27129-27138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26891-26897]:Modifier[27143-27149]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[26898-26904]:ArrayType[27150-27156]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[26905-26922]:SimpleName[27157-27174]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26932-26943]:SimpleType[27184-27195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26944-27044]:Block[27196-27296]"
    }, {
      "left" : "String text = getText();",
      "right" : "String text = getText();",
      "info" : "VariableDeclarationStatement[26954-26978]:VariableDeclarationStatement[27206-27230]"
    }, {
      "left" : "return (text == null)  ? null : text.toCharArray();",
      "right" : "return (text == null)  ? null : text.toCharArray();",
      "info" : "ReturnStatement[26987-27038]:ReturnStatement[27239-27290]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27050-27059]:MarkerAnnotation[27302-27311]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27064-27070]:Modifier[27316-27322]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27071-27074]:PrimitiveType[27323-27326]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[27075-27088]:SimpleName[27327-27340]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27098-27109]:SimpleType[27350-27361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27110-27202]:Block[27362-27454]"
    }, {
      "left" : "String text = getText();",
      "right" : "String text = getText();",
      "info" : "VariableDeclarationStatement[27120-27144]:VariableDeclarationStatement[27372-27396]"
    }, {
      "left" : "return (text == null)  ? 0 : text.length();",
      "right" : "return (text == null)  ? 0 : text.length();",
      "info" : "ReturnStatement[27153-27196]:ReturnStatement[27405-27448]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27208-27217]:MarkerAnnotation[27460-27469]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27222-27228]:Modifier[27474-27480]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27229-27232]:PrimitiveType[27481-27484]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[27233-27246]:SimpleName[27485-27498]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27256-27267]:SimpleType[27508-27519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27268-27293]:Block[27520-27545]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[27278-27287]:ReturnStatement[27530-27539]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27451-27460]:MarkerAnnotation[27703-27712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27465-27471]:Modifier[27717-27723]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27472-27479]:PrimitiveType[27724-27731]"
    }, {
      "left" : "hasTextCharacters",
      "right" : "hasTextCharacters",
      "info" : "SimpleName[27480-27497]:SimpleName[27732-27749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27504-27533]:Block[27756-27785]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27514-27527]:ReturnStatement[27766-27779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27738-27747]:MarkerAnnotation[27990-27999]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27752-27758]:Modifier[28004-28010]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[27759-27765]:SimpleType[28011-28017]"
    }, {
      "left" : "getEmbeddedObject",
      "right" : "getEmbeddedObject",
      "info" : "SimpleName[27766-27783]:SimpleName[28018-28035]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27793-27804]:SimpleType[28045-28056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27805-27877]:Block[28057-28129]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27859-27871]:ReturnStatement[28111-28123]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27883-27892]:MarkerAnnotation[28135-28144]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27897-27903]:Modifier[28149-28155]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[27904-27910]:ArrayType[28156-28162]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[27911-27925]:SimpleName[28163-28177]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[27926-27950]:SingleVariableDeclaration[28178-28202]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27959-27970]:SimpleType[28211-28222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27975-28713]:Block[28227-28965]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[27985-28257]:IfStatement[28237-28509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28118-28257]:Block[28370-28509]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[28132-28247]:ExpressionStatement[28384-28499]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[28372-28670]:IfStatement[28624-28922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28398-28670]:Block[28650-28922]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28412-28660]:TryStatement[28664-28912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28416-28489]:Block[28668-28741]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[28434-28475]:ExpressionStatement[28686-28727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28527-28660]:Block[28779-28912]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[28545-28646]:ThrowStatement[28797-28898]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[28687-28707]:ReturnStatement[28939-28959]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")",
      "right" : "@SuppressWarnings(\"resource\")",
      "info" : "SingleMemberAnnotation[28719-28748]:SingleMemberAnnotation[28971-29000]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[28753-28762]:Modifier[29005-29014]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[28763-28769]:ArrayType[29015-29021]"
    }, {
      "left" : "_decodeBase64",
      "right" : "_decodeBase64",
      "info" : "SimpleName[28770-28783]:SimpleName[29022-29035]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[28784-28808]:SingleVariableDeclaration[29036-29060]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28817-28828]:SimpleType[29069-29080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28833-29024]:Block[29085-29276]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[28843-28893]:VariableDeclarationStatement[29095-29145]"
    }, {
      "left" : "final String str = getText();",
      "right" : "final String str = getText();",
      "info" : "VariableDeclarationStatement[28902-28931]:VariableDeclarationStatement[29154-29183]"
    }, {
      "left" : "_decodeBase64(str, builder, b64variant);",
      "right" : "_decodeBase64(str, builder, b64variant);",
      "info" : "ExpressionStatement[28940-28980]:ExpressionStatement[29192-29232]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[28989-29018]:ReturnStatement[29241-29270]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29203-29212]:MarkerAnnotation[29455-29464]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29217-29223]:Modifier[29469-29475]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[29224-29234]:SimpleType[29476-29486]"
    }, {
      "left" : "getBigIntegerValue",
      "right" : "getBigIntegerValue",
      "info" : "SimpleName[29235-29253]:SimpleName[29487-29505]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29263-29274]:SimpleType[29515-29526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29275-29346]:Block[29527-29598]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29328-29340]:ReturnStatement[29580-29592]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29352-29361]:MarkerAnnotation[29604-29613]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29366-29372]:Modifier[29618-29624]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[29373-29383]:SimpleType[29625-29635]"
    }, {
      "left" : "getDecimalValue",
      "right" : "getDecimalValue",
      "info" : "SimpleName[29384-29399]:SimpleName[29636-29651]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29409-29420]:SimpleType[29661-29672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29421-29492]:Block[29673-29744]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29474-29486]:ReturnStatement[29726-29738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29498-29507]:MarkerAnnotation[29750-29759]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29512-29518]:Modifier[29764-29770]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[29519-29525]:PrimitiveType[29771-29777]"
    }, {
      "left" : "getDoubleValue",
      "right" : "getDoubleValue",
      "info" : "SimpleName[29526-29540]:SimpleName[29778-29792]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29550-29561]:SimpleType[29802-29813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29562-29630]:Block[29814-29882]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[29615-29624]:ReturnStatement[29867-29876]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29636-29645]:MarkerAnnotation[29888-29897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29650-29656]:Modifier[29902-29908]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[29657-29662]:PrimitiveType[29909-29914]"
    }, {
      "left" : "getFloatValue",
      "right" : "getFloatValue",
      "info" : "SimpleName[29663-29676]:SimpleName[29915-29928]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29686-29697]:SimpleType[29938-29949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29698-29766]:Block[29950-30018]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[29751-29760]:ReturnStatement[30003-30012]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29772-29781]:MarkerAnnotation[30024-30033]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29786-29792]:Modifier[30038-30044]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29793-29796]:PrimitiveType[30045-30048]"
    }, {
      "left" : "getIntValue",
      "right" : "getIntValue",
      "info" : "SimpleName[29797-29808]:SimpleName[30049-30060]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29818-29829]:SimpleType[30070-30081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29830-29898]:Block[30082-30150]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[29883-29892]:ReturnStatement[30135-30144]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29904-29913]:MarkerAnnotation[30156-30165]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29918-29924]:Modifier[30170-30176]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[29925-29929]:PrimitiveType[30177-30181]"
    }, {
      "left" : "getLongValue",
      "right" : "getLongValue",
      "info" : "SimpleName[29930-29942]:SimpleName[30182-30194]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29952-29963]:SimpleType[30204-30215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29964-30032]:Block[30216-30284]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[30017-30026]:ReturnStatement[30269-30278]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30038-30047]:MarkerAnnotation[30290-30299]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30052-30058]:Modifier[30304-30310]"
    }, {
      "left" : "NumberType",
      "right" : "NumberType",
      "info" : "SimpleType[30059-30069]:SimpleType[30311-30321]"
    }, {
      "left" : "getNumberType",
      "right" : "getNumberType",
      "info" : "SimpleName[30070-30083]:SimpleName[30322-30335]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30093-30104]:SimpleType[30345-30356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30105-30176]:Block[30357-30428]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30158-30170]:ReturnStatement[30410-30422]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30182-30191]:MarkerAnnotation[30434-30443]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30196-30202]:Modifier[30448-30454]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[30203-30209]:SimpleType[30455-30461]"
    }, {
      "left" : "getNumberValue",
      "right" : "getNumberValue",
      "info" : "SimpleName[30210-30224]:SimpleName[30462-30476]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30234-30245]:SimpleType[30486-30497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30246-30317]:Block[30498-30569]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30299-30311]:ReturnStatement[30551-30563]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30699-30708]:MarkerAnnotation[30951-30960]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[30713-30722]:Modifier[30965-30974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30723-30727]:PrimitiveType[30975-30979]"
    }, {
      "left" : "_handleEOF",
      "right" : "_handleEOF",
      "info" : "SimpleName[30728-30738]:SimpleName[30980-30990]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[30748-30766]:SimpleType[31000-31018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30771-31002]:Block[31023-31254]"
    }, {
      "left" : "if (!_parsingContext.inRoot())",
      "right" : "if (!_parsingContext.inRoot())",
      "info" : "IfStatement[30781-30996]:IfStatement[31033-31248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30812-30996]:Block[31064-31248]"
    }, {
      "left" : "_reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\");",
      "right" : "_reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\");",
      "info" : "ExpressionStatement[30826-30986]:ExpressionStatement[31078-31238]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31278-31287]:Modifier[31530-31539]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31288-31292]:PrimitiveType[31540-31544]"
    }, {
      "left" : "_releaseBuffers",
      "right" : "_releaseBuffers",
      "info" : "SimpleName[31293-31308]:SimpleName[31545-31560]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31318-31329]:SimpleType[31570-31581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31330-31426]:Block[31582-31678]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31432-31441]:Modifier[31684-31693]"
    }, {
      "left" : "ByteArrayBuilder",
      "right" : "ByteArrayBuilder",
      "info" : "SimpleType[31442-31458]:SimpleType[31694-31710]"
    }, {
      "left" : "_getByteArrayBuilder",
      "right" : "_getByteArrayBuilder",
      "info" : "SimpleName[31459-31479]:SimpleName[31711-31731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31486-31690]:Block[31738-31942]"
    }, {
      "left" : "if (_byteArrayBuilder == null)",
      "right" : "if (_byteArrayBuilder == null)",
      "info" : "IfStatement[31496-31650]:IfStatement[31748-31902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31527-31594]:Block[31779-31846]"
    }, {
      "left" : "_byteArrayBuilder = new ByteArrayBuilder();",
      "right" : "_byteArrayBuilder = new ByteArrayBuilder();",
      "info" : "ExpressionStatement[31541-31584]:ExpressionStatement[31793-31836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31600-31650]:Block[31852-31902]"
    }, {
      "left" : "_byteArrayBuilder.reset();",
      "right" : "_byteArrayBuilder.reset();",
      "info" : "ExpressionStatement[31614-31640]:ExpressionStatement[31866-31892]"
    }, {
      "left" : "return _byteArrayBuilder;",
      "right" : "return _byteArrayBuilder;",
      "info" : "ReturnStatement[31659-31684]:ReturnStatement[31911-31936]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[31696-31705]:Modifier[31948-31957]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31706-31713]:PrimitiveType[31958-31965]"
    }, {
      "left" : "_isEmpty",
      "right" : "_isEmpty",
      "info" : "SimpleName[31714-31722]:SimpleName[31966-31974]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[31723-31733]:SingleVariableDeclaration[31975-31985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31739-32005]:Block[31991-32257]"
    }, {
      "left" : "int len = (str == null) ? 0 : str.length();",
      "right" : "int len = (str == null) ? 0 : str.length();",
      "info" : "VariableDeclarationStatement[31749-31792]:VariableDeclarationStatement[32001-32044]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[31801-31978]:IfStatement[32053-32230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31814-31978]:Block[32066-32230]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[31828-31968]:ForStatement[32080-32220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31858-31968]:Block[32110-32220]"
    }, {
      "left" : "if (str.charAt(i) > ' ')",
      "right" : "if (str.charAt(i) > ' ')",
      "info" : "IfStatement[31876-31954]:IfStatement[32128-32206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31901-31954]:Block[32153-32206]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31923-31936]:ReturnStatement[32175-32188]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31987-31999]:ReturnStatement[32239-32251]"
    } ]
  },
  "interFileMappings" : { }
}