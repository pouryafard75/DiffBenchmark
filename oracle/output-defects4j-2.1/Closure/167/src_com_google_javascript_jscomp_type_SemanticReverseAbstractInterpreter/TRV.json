{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Function<TypePair, TypePair> EQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderEquality(p.typeB);\n      }\n    };",
      "right" : "private static final Function<TypePair, TypePair> EQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderEquality(p.typeB);\n      }\n    };",
      "info" : "FieldDeclaration[1709-2077]:FieldDeclaration[1709-2077]"
    }, {
      "left" : "public TypePair apply(TypePair p)",
      "right" : "public TypePair apply(TypePair p)",
      "info" : "MethodDeclaration[1873-2070]:MethodDeclaration[1873-2070]"
    }, {
      "left" : "private static final Function<TypePair, TypePair> NE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderInequality(p.typeB);\n      }\n    };",
      "right" : "private static final Function<TypePair, TypePair> NE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderInequality(p.typeB);\n      }\n    };",
      "info" : "FieldDeclaration[2081-2455]:FieldDeclaration[2081-2455]"
    }, {
      "left" : "public TypePair apply(TypePair p)",
      "right" : "public TypePair apply(TypePair p)",
      "info" : "MethodDeclaration[2249-2448]:MethodDeclaration[2249-2448]"
    }, {
      "left" : "private static final\n      Function<TypePair, TypePair> SHEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowEquality(p.typeB);\n      }\n    };",
      "right" : "private static final\n      Function<TypePair, TypePair> SHEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowEquality(p.typeB);\n      }\n    };",
      "info" : "FieldDeclaration[2459-2849]:FieldDeclaration[2459-2849]"
    }, {
      "left" : "public TypePair apply(TypePair p)",
      "right" : "public TypePair apply(TypePair p)",
      "info" : "MethodDeclaration[2638-2842]:MethodDeclaration[2638-2842]"
    }, {
      "left" : "private static final\n      Function<TypePair, TypePair> SHNE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowInequality(p.typeB);\n      }\n    };",
      "right" : "private static final\n      Function<TypePair, TypePair> SHNE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowInequality(p.typeB);\n      }\n    };",
      "info" : "FieldDeclaration[2853-3249]:FieldDeclaration[2853-3249]"
    }, {
      "left" : "public TypePair apply(TypePair p)",
      "right" : "public TypePair apply(TypePair p)",
      "info" : "MethodDeclaration[3036-3242]:MethodDeclaration[3036-3242]"
    }, {
      "left" : "private final\n      Function<TypePair, TypePair> INEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));\n      }\n    };",
      "right" : "private final\n      Function<TypePair, TypePair> INEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));\n      }\n    };",
      "info" : "FieldDeclaration[3253-3632]:FieldDeclaration[3253-3632]"
    }, {
      "left" : "public TypePair apply(TypePair p)",
      "right" : "public TypePair apply(TypePair p)",
      "info" : "MethodDeclaration[3432-3625]:MethodDeclaration[3432-3625]"
    }, {
      "left" : "public SemanticReverseAbstractInterpreter(CodingConvention convention,\n      JSTypeRegistry typeRegistry)",
      "right" : "public SemanticReverseAbstractInterpreter(CodingConvention convention,\n      JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[3636-3850]:MethodDeclaration[3636-3850]"
    }, {
      "left" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "right" : "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome)",
      "info" : "MethodDeclaration[3854-8500]:MethodDeclaration[3854-8500]"
    }, {
      "left" : "private FlowScope caseEquality(Node condition, FlowScope blindScope,\n      Function<TypePair, TypePair> merging)",
      "right" : "private FlowScope caseEquality(Node condition, FlowScope blindScope,\n      Function<TypePair, TypePair> merging)",
      "info" : "MethodDeclaration[8504-8745]:MethodDeclaration[8504-8745]"
    }, {
      "left" : "private FlowScope caseAndOrMaybeShortCircuiting(Node left, Node right,\n      FlowScope blindScope, boolean condition)",
      "right" : "private FlowScope caseAndOrMaybeShortCircuiting(Node left, Node right,\n      FlowScope blindScope, boolean condition)",
      "info" : "MethodDeclaration[11254-12226]:MethodDeclaration[11328-12300]"
    }, {
      "left" : "private FlowScope caseTypeOf(Node node, JSType type, String value,\n        boolean resultEqualsValue, FlowScope blindScope)",
      "right" : "private FlowScope caseTypeOf(Node node, JSType type, String value,\n        boolean resultEqualsValue, FlowScope blindScope)",
      "info" : "MethodDeclaration[14570-14831]:MethodDeclaration[14575-14836]"
    }, {
      "left" : "private FlowScope caseInstanceOf(Node left, Node right, FlowScope blindScope,\n      boolean outcome)",
      "right" : "private FlowScope caseInstanceOf(Node left, Node right, FlowScope blindScope,\n      boolean outcome)",
      "info" : "MethodDeclaration[14835-15618]:MethodDeclaration[14840-15623]"
    }, {
      "left" : "private FlowScope caseIn(Node object, String propertyName, FlowScope blindScope)",
      "right" : "private FlowScope caseIn(Node object, String propertyName, FlowScope blindScope)",
      "info" : "MethodDeclaration[15622-16990]:MethodDeclaration[15627-16995]"
    }, {
      "left" : "RestrictByTrueInstanceOfResultVisitor",
      "right" : "RestrictByTrueInstanceOfResultVisitor",
      "info" : "TypeDeclaration[16994-18378]:TypeDeclaration[16999-18383]"
    }, {
      "left" : "private final ObjectType target;",
      "right" : "private final ObjectType target;",
      "info" : "FieldDeclaration[17172-17204]:FieldDeclaration[17177-17209]"
    }, {
      "left" : "RestrictByTrueInstanceOfResultVisitor(ObjectType target)",
      "right" : "RestrictByTrueInstanceOfResultVisitor(ObjectType target)",
      "info" : "MethodDeclaration[17210-17302]:MethodDeclaration[17215-17307]"
    }, {
      "left" : "protected JSType caseTopType(JSType type)",
      "right" : "protected JSType caseTopType(JSType type)",
      "info" : "MethodDeclaration[17308-17414]:MethodDeclaration[17313-17419]"
    }, {
      "left" : "public JSType caseUnknownType()",
      "right" : "public JSType caseUnknownType()",
      "info" : "MethodDeclaration[17420-17700]:MethodDeclaration[17425-17705]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[17706-17816]:MethodDeclaration[17711-17821]"
    }, {
      "left" : "public JSType caseUnionType(UnionType type)",
      "right" : "public JSType caseUnionType(UnionType type)",
      "info" : "MethodDeclaration[17822-17930]:MethodDeclaration[17827-17935]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[17936-18042]:MethodDeclaration[17941-18047]"
    }, {
      "left" : "private JSType applyCommonRestriction(JSType type)",
      "right" : "private JSType applyCommonRestriction(JSType type)",
      "info" : "MethodDeclaration[18048-18374]:MethodDeclaration[18053-18379]"
    }, {
      "left" : "RestrictByFalseInstanceOfResultVisitor",
      "right" : "RestrictByFalseInstanceOfResultVisitor",
      "info" : "TypeDeclaration[18382-19534]:TypeDeclaration[18387-19539]"
    }, {
      "left" : "private final ObjectType target;",
      "right" : "private final ObjectType target;",
      "info" : "FieldDeclaration[18562-18594]:FieldDeclaration[18567-18599]"
    }, {
      "left" : "RestrictByFalseInstanceOfResultVisitor(ObjectType target)",
      "right" : "RestrictByFalseInstanceOfResultVisitor(ObjectType target)",
      "info" : "MethodDeclaration[18600-18693]:MethodDeclaration[18605-18698]"
    }, {
      "left" : "public JSType caseObjectType(ObjectType type)",
      "right" : "public JSType caseObjectType(ObjectType type)",
      "info" : "MethodDeclaration[18699-19079]:MethodDeclaration[18704-19084]"
    }, {
      "left" : "public JSType caseUnionType(UnionType type)",
      "right" : "public JSType caseUnionType(UnionType type)",
      "info" : "MethodDeclaration[19085-19418]:MethodDeclaration[19090-19423]"
    }, {
      "left" : "public JSType caseFunctionType(FunctionType type)",
      "right" : "public JSType caseFunctionType(FunctionType type)",
      "info" : "MethodDeclaration[19424-19530]:MethodDeclaration[19429-19535]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1923-2070]:Block[1923-2070]"
    }, {
      "left" : "if (p.typeA == null || p.typeB == null)",
      "right" : "if (p.typeA == null || p.typeB == null)",
      "info" : "IfStatement[1933-2007]:IfStatement[1933-2007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1973-2007]:Block[1973-2007]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[1985-1997]:ReturnStatement[1985-1997]"
    }, {
      "left" : "return p.typeA.getTypesUnderEquality(p.typeB);",
      "right" : "return p.typeA.getTypesUnderEquality(p.typeB);",
      "info" : "ReturnStatement[2016-2062]:ReturnStatement[2016-2062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2299-2448]:Block[2299-2448]"
    }, {
      "left" : "if (p.typeA == null || p.typeB == null)",
      "right" : "if (p.typeA == null || p.typeB == null)",
      "info" : "IfStatement[2309-2383]:IfStatement[2309-2383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2349-2383]:Block[2349-2383]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2361-2373]:ReturnStatement[2361-2373]"
    }, {
      "left" : "return p.typeA.getTypesUnderInequality(p.typeB);",
      "right" : "return p.typeA.getTypesUnderInequality(p.typeB);",
      "info" : "ReturnStatement[2392-2440]:ReturnStatement[2392-2440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2688-2842]:Block[2688-2842]"
    }, {
      "left" : "if (p.typeA == null || p.typeB == null)",
      "right" : "if (p.typeA == null || p.typeB == null)",
      "info" : "IfStatement[2698-2772]:IfStatement[2698-2772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2738-2772]:Block[2738-2772]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2750-2762]:ReturnStatement[2750-2762]"
    }, {
      "left" : "return p.typeA.getTypesUnderShallowEquality(p.typeB);",
      "right" : "return p.typeA.getTypesUnderShallowEquality(p.typeB);",
      "info" : "ReturnStatement[2781-2834]:ReturnStatement[2781-2834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3086-3242]:Block[3086-3242]"
    }, {
      "left" : "if (p.typeA == null || p.typeB == null)",
      "right" : "if (p.typeA == null || p.typeB == null)",
      "info" : "IfStatement[3096-3170]:IfStatement[3096-3170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3136-3170]:Block[3136-3170]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3148-3160]:ReturnStatement[3148-3160]"
    }, {
      "left" : "return p.typeA.getTypesUnderShallowInequality(p.typeB);",
      "right" : "return p.typeA.getTypesUnderShallowInequality(p.typeB);",
      "info" : "ReturnStatement[3179-3234]:ReturnStatement[3179-3234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3482-3625]:Block[3482-3625]"
    }, {
      "left" : "return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));",
      "right" : "return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));",
      "info" : "ReturnStatement[3492-3617]:ReturnStatement[3492-3617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3808-3850]:Block[3808-3850]"
    }, {
      "left" : "super(convention, typeRegistry);",
      "right" : "super(convention, typeRegistry);",
      "info" : "SuperConstructorInvocation[3814-3846]:SuperConstructorInvocation[3814-3846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3984-8500]:Block[3984-8500]"
    }, {
      "left" : "int operatorToken = condition.getType();",
      "right" : "int operatorToken = condition.getType();",
      "info" : "VariableDeclarationStatement[4028-4068]:VariableDeclarationStatement[4028-4068]"
    }, {
      "left" : "switch (operatorToken) {\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.CASE:\n        Node left;\n        Node right;\n        if (operatorToken == Token.CASE) {\n          left = condition.getParent().getFirstChild(); // the switch condition\n          right = condition.getFirstChild();\n        } else {\n          left = condition.getFirstChild();\n          right = condition.getLastChild();\n        }\n\n        Node typeOfNode = null;\n        Node stringNode = null;\n        if (left.isTypeOf() && right.isString()) {\n          typeOfNode = left;\n          stringNode = right;\n        } else if (right.isTypeOf() &&\n                   left.isString()) {\n          typeOfNode = right;\n          stringNode = left;\n        }\n        if (typeOfNode != null && stringNode != null) {\n          Node operandNode = typeOfNode.getFirstChild();\n          JSType operandType = getTypeIfRefinable(operandNode, blindScope);\n          if (operandType != null) {\n            boolean resultEqualsValue = operatorToken == Token.EQ ||\n                operatorToken == Token.SHEQ || operatorToken == Token.CASE;\n            if (!outcome) {\n              resultEqualsValue = !resultEqualsValue;\n            }\n            return caseTypeOf(operandNode, operandType, stringNode.getString(),\n                resultEqualsValue, blindScope);\n          }\n        }\n    }",
      "right" : "switch (operatorToken) {\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.CASE:\n        Node left;\n        Node right;\n        if (operatorToken == Token.CASE) {\n          left = condition.getParent().getFirstChild(); // the switch condition\n          right = condition.getFirstChild();\n        } else {\n          left = condition.getFirstChild();\n          right = condition.getLastChild();\n        }\n\n        Node typeOfNode = null;\n        Node stringNode = null;\n        if (left.isTypeOf() && right.isString()) {\n          typeOfNode = left;\n          stringNode = right;\n        } else if (right.isTypeOf() &&\n                   left.isString()) {\n          typeOfNode = right;\n          stringNode = left;\n        }\n        if (typeOfNode != null && stringNode != null) {\n          Node operandNode = typeOfNode.getFirstChild();\n          JSType operandType = getTypeIfRefinable(operandNode, blindScope);\n          if (operandType != null) {\n            boolean resultEqualsValue = operatorToken == Token.EQ ||\n                operatorToken == Token.SHEQ || operatorToken == Token.CASE;\n            if (!outcome) {\n              resultEqualsValue = !resultEqualsValue;\n            }\n            return caseTypeOf(operandNode, operandType, stringNode.getString(),\n                resultEqualsValue, blindScope);\n          }\n        }\n    }",
      "info" : "SwitchStatement[4073-5474]:SwitchStatement[4073-5474]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[4104-4118]:SwitchCase[4104-4118]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[4125-4139]:SwitchCase[4125-4139]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[4146-4162]:SwitchCase[4146-4162]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[4169-4185]:SwitchCase[4169-4185]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[4192-4208]:SwitchCase[4192-4208]"
    }, {
      "left" : "Node left;",
      "right" : "Node left;",
      "info" : "VariableDeclarationStatement[4217-4227]:VariableDeclarationStatement[4217-4227]"
    }, {
      "left" : "Node right;",
      "right" : "Node right;",
      "info" : "VariableDeclarationStatement[4236-4247]:VariableDeclarationStatement[4236-4247]"
    }, {
      "left" : "if (operatorToken == Token.CASE)",
      "right" : "if (operatorToken == Token.CASE)",
      "info" : "IfStatement[4256-4530]:IfStatement[4256-4530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4289-4425]:Block[4289-4425]"
    }, {
      "left" : "left = condition.getParent().getFirstChild();",
      "right" : "left = condition.getParent().getFirstChild();",
      "info" : "ExpressionStatement[4301-4346]:ExpressionStatement[4301-4346]"
    }, {
      "left" : "right = condition.getFirstChild();",
      "right" : "right = condition.getFirstChild();",
      "info" : "ExpressionStatement[4381-4415]:ExpressionStatement[4381-4415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4431-4530]:Block[4431-4530]"
    }, {
      "left" : "left = condition.getFirstChild();",
      "right" : "left = condition.getFirstChild();",
      "info" : "ExpressionStatement[4443-4476]:ExpressionStatement[4443-4476]"
    }, {
      "left" : "right = condition.getLastChild();",
      "right" : "right = condition.getLastChild();",
      "info" : "ExpressionStatement[4487-4520]:ExpressionStatement[4487-4520]"
    }, {
      "left" : "Node typeOfNode = null;",
      "right" : "Node typeOfNode = null;",
      "info" : "VariableDeclarationStatement[4540-4563]:VariableDeclarationStatement[4540-4563]"
    }, {
      "left" : "Node stringNode = null;",
      "right" : "Node stringNode = null;",
      "info" : "VariableDeclarationStatement[4572-4595]:VariableDeclarationStatement[4572-4595]"
    }, {
      "left" : "if (left.isTypeOf() && right.isString())",
      "right" : "if (left.isTypeOf() && right.isString())",
      "info" : "IfStatement[4604-4851]:IfStatement[4604-4851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4645-4715]:Block[4645-4715]"
    }, {
      "left" : "typeOfNode = left;",
      "right" : "typeOfNode = left;",
      "info" : "ExpressionStatement[4657-4675]:ExpressionStatement[4657-4675]"
    }, {
      "left" : "stringNode = right;",
      "right" : "stringNode = right;",
      "info" : "ExpressionStatement[4686-4705]:ExpressionStatement[4686-4705]"
    }, {
      "left" : "if (right.isTypeOf() &&\n                   left.isString())",
      "right" : "if (right.isTypeOf() &&\n                   left.isString())",
      "info" : "IfStatement[4721-4851]:IfStatement[4721-4851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4781-4851]:Block[4781-4851]"
    }, {
      "left" : "typeOfNode = right;",
      "right" : "typeOfNode = right;",
      "info" : "ExpressionStatement[4793-4812]:ExpressionStatement[4793-4812]"
    }, {
      "left" : "stringNode = left;",
      "right" : "stringNode = left;",
      "info" : "ExpressionStatement[4823-4841]:ExpressionStatement[4823-4841]"
    }, {
      "left" : "if (typeOfNode != null && stringNode != null)",
      "right" : "if (typeOfNode != null && stringNode != null)",
      "info" : "IfStatement[4860-5468]:IfStatement[4860-5468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4906-5468]:Block[4906-5468]"
    }, {
      "left" : "Node operandNode = typeOfNode.getFirstChild();",
      "right" : "Node operandNode = typeOfNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[4918-4964]:VariableDeclarationStatement[4918-4964]"
    }, {
      "left" : "JSType operandType = getTypeIfRefinable(operandNode, blindScope);",
      "right" : "JSType operandType = getTypeIfRefinable(operandNode, blindScope);",
      "info" : "VariableDeclarationStatement[4975-5040]:VariableDeclarationStatement[4975-5040]"
    }, {
      "left" : "if (operandType != null)",
      "right" : "if (operandType != null)",
      "info" : "IfStatement[5051-5458]:IfStatement[5051-5458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5076-5458]:Block[5076-5458]"
    }, {
      "left" : "boolean resultEqualsValue = operatorToken == Token.EQ ||\n                operatorToken == Token.SHEQ || operatorToken == Token.CASE;",
      "right" : "boolean resultEqualsValue = operatorToken == Token.EQ ||\n                operatorToken == Token.SHEQ || operatorToken == Token.CASE;",
      "info" : "VariableDeclarationStatement[5090-5222]:VariableDeclarationStatement[5090-5222]"
    }, {
      "left" : "if (!outcome)",
      "right" : "if (!outcome)",
      "info" : "IfStatement[5235-5318]:IfStatement[5235-5318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5249-5318]:Block[5249-5318]"
    }, {
      "left" : "resultEqualsValue = !resultEqualsValue;",
      "right" : "resultEqualsValue = !resultEqualsValue;",
      "info" : "ExpressionStatement[5265-5304]:ExpressionStatement[5265-5304]"
    }, {
      "left" : "return caseTypeOf(operandNode, operandType, stringNode.getString(),\n                resultEqualsValue, blindScope);",
      "right" : "return caseTypeOf(operandNode, operandType, stringNode.getString(),\n                resultEqualsValue, blindScope);",
      "info" : "ReturnStatement[5331-5446]:ReturnStatement[5331-5446]"
    }, {
      "left" : "switch (operatorToken) {\n      case Token.AND:\n        if (outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        }\n\n      case Token.OR:\n        if (!outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        }\n\n      case Token.EQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, EQ);\n        } else {\n          return caseEquality(condition, blindScope, NE);\n        }\n\n      case Token.NE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, NE);\n        } else {\n          return caseEquality(condition, blindScope, EQ);\n        }\n\n      case Token.SHEQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHEQ);\n        } else {\n          return caseEquality(condition, blindScope, SHNE);\n        }\n\n      case Token.SHNE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHNE);\n        } else {\n          return caseEquality(condition, blindScope, SHEQ);\n        }\n\n      case Token.NAME:\n      case Token.GETPROP:\n        return caseNameOrGetProp(condition, blindScope, outcome);\n\n      case Token.ASSIGN:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(),\n            firstPreciserScopeKnowingConditionOutcome(\n                condition.getFirstChild().getNext(), blindScope, outcome),\n            outcome);\n\n      case Token.NOT:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(), blindScope, !outcome);\n\n      case Token.LE:\n      case Token.LT:\n      case Token.GE:\n      case Token.GT:\n        if (outcome) {\n          return caseEquality(condition, blindScope, INEQ);\n        }\n        break;\n\n      case Token.INSTANCEOF:\n        return caseInstanceOf(\n            condition.getFirstChild(), condition.getLastChild(), blindScope,\n            outcome);\n\n      case Token.IN:\n        if (outcome && condition.getFirstChild().isString()) {\n          return caseIn(condition.getLastChild(),\n              condition.getFirstChild().getString(), blindScope);\n        }\n        break;\n\n      case Token.CASE:\n        Node left =\n            condition.getParent().getFirstChild(); // the switch condition\n        Node right = condition.getFirstChild();\n        if (outcome) {\n          return caseEquality(left, right, blindScope, SHEQ);\n        } else {\n          return caseEquality(left, right, blindScope, SHNE);\n        }\n    }",
      "right" : "switch (operatorToken) {\n      case Token.AND:\n        if (outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        }\n\n      case Token.OR:\n        if (!outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        }\n\n      case Token.EQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, EQ);\n        } else {\n          return caseEquality(condition, blindScope, NE);\n        }\n\n      case Token.NE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, NE);\n        } else {\n          return caseEquality(condition, blindScope, EQ);\n        }\n\n      case Token.SHEQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHEQ);\n        } else {\n          return caseEquality(condition, blindScope, SHNE);\n        }\n\n      case Token.SHNE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHNE);\n        } else {\n          return caseEquality(condition, blindScope, SHEQ);\n        }\n\n      case Token.NAME:\n      case Token.GETPROP:\n        return caseNameOrGetProp(condition, blindScope, outcome);\n\n      case Token.ASSIGN:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(),\n            firstPreciserScopeKnowingConditionOutcome(\n                condition.getFirstChild().getNext(), blindScope, outcome),\n            outcome);\n\n      case Token.NOT:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(), blindScope, !outcome);\n\n      case Token.LE:\n      case Token.LT:\n      case Token.GE:\n      case Token.GT:\n        if (outcome) {\n          return caseEquality(condition, blindScope, INEQ);\n        }\n        break;\n\n      case Token.INSTANCEOF:\n        return caseInstanceOf(\n            condition.getFirstChild(), condition.getLastChild(), blindScope,\n            outcome);\n\n      case Token.IN:\n        if (outcome && condition.getFirstChild().isString()) {\n          return caseIn(condition.getLastChild(),\n              condition.getFirstChild().getString(), blindScope);\n        }\n        break;\n\n      case Token.CASE:\n        Node left =\n            condition.getParent().getFirstChild(); // the switch condition\n        Node right = condition.getFirstChild();\n        if (outcome) {\n          return caseEquality(left, right, blindScope, SHEQ);\n        } else {\n          return caseEquality(left, right, blindScope, SHNE);\n        }\n    }",
      "info" : "SwitchStatement[5479-8402]:SwitchStatement[5479-8402]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[5510-5525]:SwitchCase[5510-5525]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[5534-5839]:IfStatement[5534-5839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5547-5689]:Block[5547-5689]"
    }, {
      "left" : "return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);",
      "right" : "return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);",
      "info" : "ReturnStatement[5559-5679]:ReturnStatement[5559-5679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-5839]:Block[5695-5839]"
    }, {
      "left" : "return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);",
      "right" : "return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);",
      "info" : "ReturnStatement[5707-5829]:ReturnStatement[5707-5829]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[5847-5861]:SwitchCase[5847-5861]"
    }, {
      "left" : "if (!outcome)",
      "right" : "if (!outcome)",
      "info" : "IfStatement[5870-6178]:IfStatement[5870-6178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5884-6027]:Block[5884-6027]"
    }, {
      "left" : "return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);",
      "right" : "return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);",
      "info" : "ReturnStatement[5896-6017]:ReturnStatement[5896-6017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6033-6178]:Block[6033-6178]"
    }, {
      "left" : "return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);",
      "right" : "return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);",
      "info" : "ReturnStatement[6045-6168]:ReturnStatement[6045-6168]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[6186-6200]:SwitchCase[6186-6200]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[6209-6366]:IfStatement[6209-6366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6222-6291]:Block[6222-6291]"
    }, {
      "left" : "return caseEquality(condition, blindScope, EQ);",
      "right" : "return caseEquality(condition, blindScope, EQ);",
      "info" : "ReturnStatement[6234-6281]:ReturnStatement[6234-6281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6297-6366]:Block[6297-6366]"
    }, {
      "left" : "return caseEquality(condition, blindScope, NE);",
      "right" : "return caseEquality(condition, blindScope, NE);",
      "info" : "ReturnStatement[6309-6356]:ReturnStatement[6309-6356]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[6374-6388]:SwitchCase[6374-6388]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[6397-6554]:IfStatement[6397-6554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6410-6479]:Block[6410-6479]"
    }, {
      "left" : "return caseEquality(condition, blindScope, NE);",
      "right" : "return caseEquality(condition, blindScope, NE);",
      "info" : "ReturnStatement[6422-6469]:ReturnStatement[6422-6469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6485-6554]:Block[6485-6554]"
    }, {
      "left" : "return caseEquality(condition, blindScope, EQ);",
      "right" : "return caseEquality(condition, blindScope, EQ);",
      "info" : "ReturnStatement[6497-6544]:ReturnStatement[6497-6544]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[6562-6578]:SwitchCase[6562-6578]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[6587-6748]:IfStatement[6587-6748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6600-6671]:Block[6600-6671]"
    }, {
      "left" : "return caseEquality(condition, blindScope, SHEQ);",
      "right" : "return caseEquality(condition, blindScope, SHEQ);",
      "info" : "ReturnStatement[6612-6661]:ReturnStatement[6612-6661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6677-6748]:Block[6677-6748]"
    }, {
      "left" : "return caseEquality(condition, blindScope, SHNE);",
      "right" : "return caseEquality(condition, blindScope, SHNE);",
      "info" : "ReturnStatement[6689-6738]:ReturnStatement[6689-6738]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[6756-6772]:SwitchCase[6756-6772]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[6781-6942]:IfStatement[6781-6942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6794-6865]:Block[6794-6865]"
    }, {
      "left" : "return caseEquality(condition, blindScope, SHNE);",
      "right" : "return caseEquality(condition, blindScope, SHNE);",
      "info" : "ReturnStatement[6806-6855]:ReturnStatement[6806-6855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6871-6942]:Block[6871-6942]"
    }, {
      "left" : "return caseEquality(condition, blindScope, SHEQ);",
      "right" : "return caseEquality(condition, blindScope, SHEQ);",
      "info" : "ReturnStatement[6883-6932]:ReturnStatement[6883-6932]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6950-6966]:SwitchCase[6950-6966]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[6973-6992]:SwitchCase[6973-6992]"
    }, {
      "left" : "return caseNameOrGetProp(condition, blindScope, outcome);",
      "right" : "return caseNameOrGetProp(condition, blindScope, outcome);",
      "info" : "ReturnStatement[7001-7058]:ReturnStatement[7001-7058]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[7066-7084]:SwitchCase[7066-7084]"
    }, {
      "left" : "return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(),\n            firstPreciserScopeKnowingConditionOutcome(\n                condition.getFirstChild().getNext(), blindScope, outcome),\n            outcome);",
      "right" : "return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(),\n            firstPreciserScopeKnowingConditionOutcome(\n                condition.getFirstChild().getNext(), blindScope, outcome),\n            outcome);",
      "info" : "ReturnStatement[7093-7333]:ReturnStatement[7093-7333]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[7341-7356]:SwitchCase[7341-7356]"
    }, {
      "left" : "return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(), blindScope, !outcome);",
      "right" : "return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(), blindScope, !outcome);",
      "info" : "ReturnStatement[7365-7476]:ReturnStatement[7365-7476]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[7484-7498]:SwitchCase[7484-7498]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[7505-7519]:SwitchCase[7505-7519]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[7526-7540]:SwitchCase[7526-7540]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[7547-7561]:SwitchCase[7547-7561]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[7570-7654]:IfStatement[7570-7654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7583-7654]:Block[7583-7654]"
    }, {
      "left" : "return caseEquality(condition, blindScope, INEQ);",
      "right" : "return caseEquality(condition, blindScope, INEQ);",
      "info" : "ReturnStatement[7595-7644]:ReturnStatement[7595-7644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7663-7669]:BreakStatement[7663-7669]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[7677-7699]:SwitchCase[7677-7699]"
    }, {
      "left" : "return caseInstanceOf(\n            condition.getFirstChild(), condition.getLastChild(), blindScope,\n            outcome);",
      "right" : "return caseInstanceOf(\n            condition.getFirstChild(), condition.getLastChild(), blindScope,\n            outcome);",
      "info" : "ReturnStatement[7708-7829]:ReturnStatement[7708-7829]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[7837-7851]:SwitchCase[7837-7851]"
    }, {
      "left" : "if (outcome && condition.getFirstChild().isString())",
      "right" : "if (outcome && condition.getFirstChild().isString())",
      "info" : "IfStatement[7860-8040]:IfStatement[7860-8040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7913-8040]:Block[7913-8040]"
    }, {
      "left" : "return caseIn(condition.getLastChild(),\n              condition.getFirstChild().getString(), blindScope);",
      "right" : "return caseIn(condition.getLastChild(),\n              condition.getFirstChild().getString(), blindScope);",
      "info" : "ReturnStatement[7925-8030]:ReturnStatement[7925-8030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8049-8055]:BreakStatement[8049-8055]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[8063-8079]:SwitchCase[8063-8079]"
    }, {
      "left" : "Node left =\n            condition.getParent().getFirstChild();",
      "right" : "Node left =\n            condition.getParent().getFirstChild();",
      "info" : "VariableDeclarationStatement[8088-8150]:VariableDeclarationStatement[8088-8150]"
    }, {
      "left" : "Node right = condition.getFirstChild();",
      "right" : "Node right = condition.getFirstChild();",
      "info" : "VariableDeclarationStatement[8183-8222]:VariableDeclarationStatement[8183-8222]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[8231-8396]:IfStatement[8231-8396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8244-8317]:Block[8244-8317]"
    }, {
      "left" : "return caseEquality(left, right, blindScope, SHEQ);",
      "right" : "return caseEquality(left, right, blindScope, SHEQ);",
      "info" : "ReturnStatement[8256-8307]:ReturnStatement[8256-8307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8323-8396]:Block[8323-8396]"
    }, {
      "left" : "return caseEquality(left, right, blindScope, SHNE);",
      "right" : "return caseEquality(left, right, blindScope, SHNE);",
      "info" : "ReturnStatement[8335-8386]:ReturnStatement[8335-8386]"
    }, {
      "left" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "right" : "return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);",
      "info" : "ReturnStatement[8407-8496]:ReturnStatement[8407-8496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8617-8745]:Block[8617-8745]"
    }, {
      "left" : "return caseEquality(condition.getFirstChild(), condition.getLastChild(),\n                        blindScope, merging);",
      "right" : "return caseEquality(condition.getFirstChild(), condition.getLastChild(),\n                        blindScope, merging);",
      "info" : "ReturnStatement[8623-8741]:ReturnStatement[8623-8741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11372-12226]:Block[11446-12300]"
    }, {
      "left" : "FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(\n        left, blindScope, !condition);",
      "right" : "FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(\n        left, blindScope, !condition);",
      "info" : "VariableDeclarationStatement[11378-11481]:VariableDeclarationStatement[11452-11555]"
    }, {
      "left" : "StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);",
      "right" : "StaticSlot<JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);",
      "info" : "VariableDeclarationStatement[11486-11559]:VariableDeclarationStatement[11560-11633]"
    }, {
      "left" : "if (leftVar == null)",
      "right" : "if (leftVar == null)",
      "info" : "IfStatement[11564-11617]:IfStatement[11638-11691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11585-11617]:Block[11659-11691]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[11593-11611]:ReturnStatement[11667-11685]"
    }, {
      "left" : "FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(\n        left, blindScope, condition);",
      "right" : "FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(\n        left, blindScope, condition);",
      "info" : "VariableDeclarationStatement[11622-11725]:VariableDeclarationStatement[11696-11799]"
    }, {
      "left" : "rightScope = firstPreciserScopeKnowingConditionOutcome(\n        right, rightScope, !condition);",
      "right" : "rightScope = firstPreciserScopeKnowingConditionOutcome(\n        right, rightScope, !condition);",
      "info" : "ExpressionStatement[11730-11825]:ExpressionStatement[11804-11899]"
    }, {
      "left" : "StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);",
      "right" : "StaticSlot<JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);",
      "info" : "VariableDeclarationStatement[11830-11905]:VariableDeclarationStatement[11904-11979]"
    }, {
      "left" : "if (rightVar == null || !leftVar.getName().equals(rightVar.getName()))",
      "right" : "if (rightVar == null || !leftVar.getName().equals(rightVar.getName()))",
      "info" : "IfStatement[11910-12013]:IfStatement[11984-12087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11981-12013]:Block[12055-12087]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[11989-12007]:ReturnStatement[12063-12081]"
    }, {
      "left" : "JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());",
      "right" : "JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());",
      "info" : "VariableDeclarationStatement[12018-12088]:VariableDeclarationStatement[12092-12162]"
    }, {
      "left" : "FlowScope informed = blindScope.createChildFlowScope();",
      "right" : "FlowScope informed = blindScope.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[12093-12148]:VariableDeclarationStatement[12167-12222]"
    }, {
      "left" : "informed.inferSlotType(leftVar.getName(), type);",
      "right" : "informed.inferSlotType(leftVar.getName(), type);",
      "info" : "ExpressionStatement[12153-12201]:ExpressionStatement[12227-12275]"
    }, {
      "left" : "return informed;",
      "right" : "return informed;",
      "info" : "ReturnStatement[12206-12222]:ReturnStatement[12280-12296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14694-14831]:Block[14699-14836]"
    }, {
      "left" : "return maybeRestrictName(\n        blindScope, node, type,\n        getRestrictedByTypeOfResult(type, value, resultEqualsValue));",
      "right" : "return maybeRestrictName(\n        blindScope, node, type,\n        getRestrictedByTypeOfResult(type, value, resultEqualsValue));",
      "info" : "ReturnStatement[14700-14827]:ReturnStatement[14705-14832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14936-15618]:Block[14941-15623]"
    }, {
      "left" : "JSType leftType = getTypeIfRefinable(left, blindScope);",
      "right" : "JSType leftType = getTypeIfRefinable(left, blindScope);",
      "info" : "VariableDeclarationStatement[14942-14997]:VariableDeclarationStatement[14947-15002]"
    }, {
      "left" : "if (leftType == null)",
      "right" : "if (leftType == null)",
      "info" : "IfStatement[15002-15056]:IfStatement[15007-15061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15024-15056]:Block[15029-15061]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[15032-15050]:ReturnStatement[15037-15055]"
    }, {
      "left" : "JSType rightType = right.getJSType();",
      "right" : "JSType rightType = right.getJSType();",
      "info" : "VariableDeclarationStatement[15061-15098]:VariableDeclarationStatement[15066-15103]"
    }, {
      "left" : "ObjectType targetType =\n        typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "ObjectType targetType =\n        typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[15103-15195]:VariableDeclarationStatement[15108-15200]"
    }, {
      "left" : "if (rightType != null && rightType.isFunctionType())",
      "right" : "if (rightType != null && rightType.isFunctionType())",
      "info" : "IfStatement[15200-15312]:IfStatement[15205-15317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15253-15312]:Block[15258-15317]"
    }, {
      "left" : "targetType = rightType.toMaybeFunctionType();",
      "right" : "targetType = rightType.toMaybeFunctionType();",
      "info" : "ExpressionStatement[15261-15306]:ExpressionStatement[15266-15311]"
    }, {
      "left" : "Visitor<JSType> visitor;",
      "right" : "Visitor<JSType> visitor;",
      "info" : "VariableDeclarationStatement[15317-15341]:VariableDeclarationStatement[15322-15346]"
    }, {
      "left" : "if (outcome)",
      "right" : "if (outcome)",
      "info" : "IfStatement[15346-15522]:IfStatement[15351-15527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15359-15437]:Block[15364-15442]"
    }, {
      "left" : "visitor = new RestrictByTrueInstanceOfResultVisitor(targetType);",
      "right" : "visitor = new RestrictByTrueInstanceOfResultVisitor(targetType);",
      "info" : "ExpressionStatement[15367-15431]:ExpressionStatement[15372-15436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15443-15522]:Block[15448-15527]"
    }, {
      "left" : "visitor = new RestrictByFalseInstanceOfResultVisitor(targetType);",
      "right" : "visitor = new RestrictByFalseInstanceOfResultVisitor(targetType);",
      "info" : "ExpressionStatement[15451-15516]:ExpressionStatement[15456-15521]"
    }, {
      "left" : "return maybeRestrictName(\n        blindScope, left, leftType, leftType.visit(visitor));",
      "right" : "return maybeRestrictName(\n        blindScope, left, leftType, leftType.visit(visitor));",
      "info" : "ReturnStatement[15527-15614]:ReturnStatement[15532-15619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16048-16990]:Block[16053-16995]"
    }, {
      "left" : "JSType jsType = object.getJSType();",
      "right" : "JSType jsType = object.getJSType();",
      "info" : "VariableDeclarationStatement[16054-16089]:VariableDeclarationStatement[16059-16094]"
    }, {
      "left" : "jsType = this.getRestrictedWithoutNull(jsType);",
      "right" : "jsType = this.getRestrictedWithoutNull(jsType);",
      "info" : "ExpressionStatement[16094-16141]:ExpressionStatement[16099-16146]"
    }, {
      "left" : "jsType = this.getRestrictedWithoutUndefined(jsType);",
      "right" : "jsType = this.getRestrictedWithoutUndefined(jsType);",
      "info" : "ExpressionStatement[16146-16198]:ExpressionStatement[16151-16203]"
    }, {
      "left" : "boolean hasProperty = false;",
      "right" : "boolean hasProperty = false;",
      "info" : "VariableDeclarationStatement[16204-16232]:VariableDeclarationStatement[16209-16237]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(jsType);",
      "right" : "ObjectType objectType = ObjectType.cast(jsType);",
      "info" : "VariableDeclarationStatement[16237-16285]:VariableDeclarationStatement[16242-16290]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[16290-16379]:IfStatement[16295-16384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16314-16379]:Block[16319-16384]"
    }, {
      "left" : "hasProperty = objectType.hasProperty(propertyName);",
      "right" : "hasProperty = objectType.hasProperty(propertyName);",
      "info" : "ExpressionStatement[16322-16373]:ExpressionStatement[16327-16378]"
    }, {
      "left" : "if (!hasProperty)",
      "right" : "if (!hasProperty)",
      "info" : "IfStatement[16384-16963]:IfStatement[16389-16968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16402-16963]:Block[16407-16968]"
    }, {
      "left" : "String qualifiedName = object.getQualifiedName();",
      "right" : "String qualifiedName = object.getQualifiedName();",
      "info" : "VariableDeclarationStatement[16410-16459]:VariableDeclarationStatement[16415-16464]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[16466-16957]:IfStatement[16471-16962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16493-16957]:Block[16498-16962]"
    }, {
      "left" : "String propertyQualifiedName = qualifiedName + \".\" + propertyName;",
      "right" : "String propertyQualifiedName = qualifiedName + \".\" + propertyName;",
      "info" : "VariableDeclarationStatement[16503-16569]:VariableDeclarationStatement[16508-16574]"
    }, {
      "left" : "if (blindScope.getSlot(propertyQualifiedName) == null)",
      "right" : "if (blindScope.getSlot(propertyQualifiedName) == null)",
      "info" : "IfStatement[16578-16949]:IfStatement[16583-16954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16633-16949]:Block[16638-16954]"
    }, {
      "left" : "FlowScope informed = blindScope.createChildFlowScope();",
      "right" : "FlowScope informed = blindScope.createChildFlowScope();",
      "info" : "VariableDeclarationStatement[16645-16700]:VariableDeclarationStatement[16650-16705]"
    }, {
      "left" : "JSType unknownType = typeRegistry.getNativeType(\n              JSTypeNative.UNKNOWN_TYPE);",
      "right" : "JSType unknownType = typeRegistry.getNativeType(\n              JSTypeNative.UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[16711-16801]:VariableDeclarationStatement[16716-16806]"
    }, {
      "left" : "informed.inferQualifiedSlot(\n              object, propertyQualifiedName, unknownType, unknownType);",
      "right" : "informed.inferQualifiedSlot(\n              object, propertyQualifiedName, unknownType, unknownType);",
      "info" : "ExpressionStatement[16812-16912]:ExpressionStatement[16817-16917]"
    }, {
      "left" : "return informed;",
      "right" : "return informed;",
      "info" : "ReturnStatement[16923-16939]:ReturnStatement[16928-16944]"
    }, {
      "left" : "return blindScope;",
      "right" : "return blindScope;",
      "info" : "ReturnStatement[16968-16986]:ReturnStatement[16973-16991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17267-17302]:Block[17272-17307]"
    }, {
      "left" : "this.target = target;",
      "right" : "this.target = target;",
      "info" : "ExpressionStatement[17275-17296]:ExpressionStatement[17280-17301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17364-17414]:Block[17369-17419]"
    }, {
      "left" : "return applyCommonRestriction(type);",
      "right" : "return applyCommonRestriction(type);",
      "info" : "ReturnStatement[17372-17408]:ReturnStatement[17377-17413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17466-17700]:Block[17471-17705]"
    }, {
      "left" : "FunctionType funcTarget = JSType.toMaybeFunctionType(target);",
      "right" : "FunctionType funcTarget = JSType.toMaybeFunctionType(target);",
      "info" : "VariableDeclarationStatement[17474-17535]:VariableDeclarationStatement[17479-17540]"
    }, {
      "left" : "if (funcTarget != null && funcTarget.hasInstanceType())",
      "right" : "if (funcTarget != null && funcTarget.hasInstanceType())",
      "info" : "IfStatement[17542-17652]:IfStatement[17547-17657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17598-17652]:Block[17603-17657]"
    }, {
      "left" : "return funcTarget.getInstanceType();",
      "right" : "return funcTarget.getInstanceType();",
      "info" : "ReturnStatement[17608-17644]:ReturnStatement[17613-17649]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[17659-17694]:ReturnStatement[17664-17699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17766-17816]:Block[17771-17821]"
    }, {
      "left" : "return applyCommonRestriction(type);",
      "right" : "return applyCommonRestriction(type);",
      "info" : "ReturnStatement[17774-17810]:ReturnStatement[17779-17815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17880-17930]:Block[17885-17935]"
    }, {
      "left" : "return applyCommonRestriction(type);",
      "right" : "return applyCommonRestriction(type);",
      "info" : "ReturnStatement[17888-17924]:ReturnStatement[17893-17929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18000-18042]:Block[18005-18047]"
    }, {
      "left" : "return caseObjectType(type);",
      "right" : "return caseObjectType(type);",
      "info" : "ReturnStatement[18008-18036]:ReturnStatement[18013-18041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18099-18374]:Block[18104-18379]"
    }, {
      "left" : "if (target.isUnknownType())",
      "right" : "if (target.isUnknownType())",
      "info" : "IfStatement[18107-18165]:IfStatement[18112-18170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18135-18165]:Block[18140-18170]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[18145-18157]:ReturnStatement[18150-18162]"
    }, {
      "left" : "FunctionType funcTarget = target.toMaybeFunctionType();",
      "right" : "FunctionType funcTarget = target.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[18173-18228]:VariableDeclarationStatement[18178-18233]"
    }, {
      "left" : "if (funcTarget.hasInstanceType())",
      "right" : "if (funcTarget.hasInstanceType())",
      "info" : "IfStatement[18235-18348]:IfStatement[18240-18353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18269-18348]:Block[18274-18353]"
    }, {
      "left" : "return type.getGreatestSubtype(funcTarget.getInstanceType());",
      "right" : "return type.getGreatestSubtype(funcTarget.getInstanceType());",
      "info" : "ReturnStatement[18279-18340]:ReturnStatement[18284-18345]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18356-18368]:ReturnStatement[18361-18373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18658-18693]:Block[18663-18698]"
    }, {
      "left" : "this.target = target;",
      "right" : "this.target = target;",
      "info" : "ExpressionStatement[18666-18687]:ExpressionStatement[18671-18692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18759-19079]:Block[18764-19084]"
    }, {
      "left" : "if (target.isUnknownType())",
      "right" : "if (target.isUnknownType())",
      "info" : "IfStatement[18767-18825]:IfStatement[18772-18830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18795-18825]:Block[18800-18830]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[18805-18817]:ReturnStatement[18810-18822]"
    }, {
      "left" : "FunctionType funcTarget = target.toMaybeFunctionType();",
      "right" : "FunctionType funcTarget = target.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[18833-18888]:VariableDeclarationStatement[18838-18893]"
    }, {
      "left" : "if (funcTarget.hasInstanceType())",
      "right" : "if (funcTarget.hasInstanceType())",
      "info" : "IfStatement[18895-19053]:IfStatement[18900-19058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18929-19053]:Block[18934-19058]"
    }, {
      "left" : "if (type.isSubtype(funcTarget.getInstanceType()))",
      "right" : "if (type.isSubtype(funcTarget.getInstanceType()))",
      "info" : "IfStatement[18939-19023]:IfStatement[18944-19028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18989-19023]:Block[18994-19028]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19001-19013]:ReturnStatement[19006-19018]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[19033-19045]:ReturnStatement[19038-19050]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19061-19073]:ReturnStatement[19066-19078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19143-19418]:Block[19148-19423]"
    }, {
      "left" : "if (target.isUnknownType())",
      "right" : "if (target.isUnknownType())",
      "info" : "IfStatement[19151-19209]:IfStatement[19156-19214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19179-19209]:Block[19184-19214]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[19189-19201]:ReturnStatement[19194-19206]"
    }, {
      "left" : "FunctionType funcTarget = target.toMaybeFunctionType();",
      "right" : "FunctionType funcTarget = target.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[19217-19272]:VariableDeclarationStatement[19222-19277]"
    }, {
      "left" : "if (funcTarget.hasInstanceType())",
      "right" : "if (funcTarget.hasInstanceType())",
      "info" : "IfStatement[19279-19392]:IfStatement[19284-19397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19313-19392]:Block[19318-19397]"
    }, {
      "left" : "return type.getRestrictedUnion(funcTarget.getInstanceType());",
      "right" : "return type.getRestrictedUnion(funcTarget.getInstanceType());",
      "info" : "ReturnStatement[19323-19384]:ReturnStatement[19328-19389]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19400-19412]:ReturnStatement[19405-19417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19488-19530]:Block[19493-19535]"
    }, {
      "left" : "return caseObjectType(type);",
      "right" : "return caseObjectType(type);",
      "info" : "ReturnStatement[19496-19524]:ReturnStatement[19501-19529]"
    } ]
  },
  "interFileMappings" : { }
}