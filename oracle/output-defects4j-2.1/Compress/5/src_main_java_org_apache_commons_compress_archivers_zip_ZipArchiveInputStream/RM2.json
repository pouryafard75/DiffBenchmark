{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "TypeDeclaration[1241-11429]:TypeDeclaration[1241-11589]"
    }, {
      "left" : "private static final int SHORT = 2;",
      "right" : "private static final int SHORT = 2;",
      "info" : "FieldDeclaration[1652-1687]:FieldDeclaration[1652-1687]"
    }, {
      "left" : "private static final int WORD = 4;",
      "right" : "private static final int WORD = 4;",
      "info" : "FieldDeclaration[1692-1726]:FieldDeclaration[1692-1726]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[1732-1853]:FieldDeclaration[1732-1853]"
    }, {
      "left" : "private final boolean useUnicodeExtraFields;",
      "right" : "private final boolean useUnicodeExtraFields;",
      "info" : "FieldDeclaration[1859-1976]:FieldDeclaration[1859-1976]"
    }, {
      "left" : "private final InputStream in;",
      "right" : "private final InputStream in;",
      "info" : "FieldDeclaration[1982-2011]:FieldDeclaration[1982-2011]"
    }, {
      "left" : "private final Inflater inf = new Inflater(true);",
      "right" : "private final Inflater inf = new Inflater(true);",
      "info" : "FieldDeclaration[2017-2065]:FieldDeclaration[2017-2065]"
    }, {
      "left" : "private final CRC32 crc = new CRC32();",
      "right" : "private final CRC32 crc = new CRC32();",
      "info" : "FieldDeclaration[2070-2108]:FieldDeclaration[2070-2108]"
    }, {
      "left" : "private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE];",
      "right" : "private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE];",
      "info" : "FieldDeclaration[2114-2186]:FieldDeclaration[2114-2186]"
    }, {
      "left" : "private ZipArchiveEntry current = null;",
      "right" : "private ZipArchiveEntry current = null;",
      "info" : "FieldDeclaration[2192-2231]:FieldDeclaration[2192-2231]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2236-2267]:FieldDeclaration[2236-2267]"
    }, {
      "left" : "private boolean hitCentralDirectory = false;",
      "right" : "private boolean hitCentralDirectory = false;",
      "info" : "FieldDeclaration[2272-2316]:FieldDeclaration[2272-2316]"
    }, {
      "left" : "private int readBytesOfEntry = 0, offsetInBuffer = 0;",
      "right" : "private int readBytesOfEntry = 0, offsetInBuffer = 0;",
      "info" : "FieldDeclaration[2321-2374]:FieldDeclaration[2321-2374]"
    }, {
      "left" : "private int bytesReadFromStream = 0;",
      "right" : "private int bytesReadFromStream = 0;",
      "info" : "FieldDeclaration[2379-2415]:FieldDeclaration[2379-2415]"
    }, {
      "left" : "private int lengthOfLastRead = 0;",
      "right" : "private int lengthOfLastRead = 0;",
      "info" : "FieldDeclaration[2420-2453]:FieldDeclaration[2420-2453]"
    }, {
      "left" : "private boolean hasDataDescriptor = false;",
      "right" : "private boolean hasDataDescriptor = false;",
      "info" : "FieldDeclaration[2458-2500]:FieldDeclaration[2458-2500]"
    }, {
      "left" : "private static final int LFH_LEN = 30;",
      "right" : "private static final int LFH_LEN = 30;",
      "info" : "FieldDeclaration[2506-2544]:FieldDeclaration[2506-2544]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream)",
      "info" : "MethodDeclaration[3084-3202]:MethodDeclaration[3084-3202]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields)",
      "info" : "MethodDeclaration[3208-3822]:MethodDeclaration[3208-3822]"
    }, {
      "left" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
      "right" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
      "info" : "MethodDeclaration[3828-6183]:MethodDeclaration[3828-6183]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[6189-6284]:MethodDeclaration[6189-6284]"
    }, {
      "left" : "public int read(byte[] buffer, int start, int length) throws IOException",
      "right" : "public int read(byte[] buffer, int start, int length) throws IOException",
      "info" : "MethodDeclaration[6290-8445]:MethodDeclaration[6290-8605]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[8451-8581]:MethodDeclaration[8611-8741]"
    }, {
      "left" : "public long skip(long value) throws IOException",
      "right" : "public long skip(long value) throws IOException",
      "info" : "MethodDeclaration[8587-9110]:MethodDeclaration[8747-9270]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[9313-9643]:MethodDeclaration[9473-9803]"
    }, {
      "left" : "private static boolean checksig(byte[] signature, byte[] expected",
      "right" : "private static boolean checksig(byte[] signature, byte[] expected",
      "info" : "MethodDeclaration[9649-9904]:MethodDeclaration[9809-10064]"
    }, {
      "left" : "private void closeEntry() throws IOException",
      "right" : "private void closeEntry() throws IOException",
      "info" : "MethodDeclaration[9910-10883]:MethodDeclaration[10070-11043]"
    }, {
      "left" : "private void fill() throws IOException",
      "right" : "private void fill() throws IOException",
      "info" : "MethodDeclaration[10889-11141]:MethodDeclaration[11049-11301]"
    }, {
      "left" : "private void readFully(byte[] b) throws IOException",
      "right" : "private void readFully(byte[] b) throws IOException",
      "info" : "MethodDeclaration[11147-11427]:MethodDeclaration[11307-11587]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3138-3202]:Block[3138-3202]"
    }, {
      "left" : "this(inputStream, ZipEncodingHelper.UTF8, true);",
      "right" : "this(inputStream, ZipEncodingHelper.UTF8, true);",
      "info" : "ConstructorInvocation[3148-3196]:ConstructorInvocation[3148-3196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3626-3822]:Block[3626-3822]"
    }, {
      "left" : "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[3636-3693]:ExpressionStatement[3636-3693]"
    }, {
      "left" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "right" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "info" : "ExpressionStatement[3702-3753]:ExpressionStatement[3702-3753]"
    }, {
      "left" : "in = new PushbackInputStream(inputStream, buf.length);",
      "right" : "in = new PushbackInputStream(inputStream, buf.length);",
      "info" : "ExpressionStatement[3762-3816]:ExpressionStatement[3762-3816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3888-6183]:Block[3888-6183]"
    }, {
      "left" : "if (closed || hitCentralDirectory)",
      "right" : "if (closed || hitCentralDirectory)",
      "info" : "IfStatement[3898-3969]:IfStatement[3898-3969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3933-3969]:Block[3933-3969]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3947-3959]:ReturnStatement[3947-3959]"
    }, {
      "left" : "if (current != null)",
      "right" : "if (current != null)",
      "info" : "IfStatement[3978-4036]:IfStatement[3978-4036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3999-4036]:Block[3999-4036]"
    }, {
      "left" : "closeEntry();",
      "right" : "closeEntry();",
      "info" : "ExpressionStatement[4013-4026]:ExpressionStatement[4013-4026]"
    }, {
      "left" : "byte[] lfh = new byte[LFH_LEN];",
      "right" : "byte[] lfh = new byte[LFH_LEN];",
      "info" : "VariableDeclarationStatement[4045-4076]:VariableDeclarationStatement[4045-4076]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4085-4188]:TryStatement[4085-4188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4089-4128]:Block[4089-4128]"
    }, {
      "left" : "readFully(lfh);",
      "right" : "readFully(lfh);",
      "info" : "ExpressionStatement[4103-4118]:ExpressionStatement[4103-4118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4152-4188]:Block[4152-4188]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4166-4178]:ReturnStatement[4166-4178]"
    }, {
      "left" : "ZipLong sig = new ZipLong(lfh);",
      "right" : "ZipLong sig = new ZipLong(lfh);",
      "info" : "VariableDeclarationStatement[4197-4228]:VariableDeclarationStatement[4197-4228]"
    }, {
      "left" : "if (sig.equals(ZipLong.CFH_SIG))",
      "right" : "if (sig.equals(ZipLong.CFH_SIG))",
      "info" : "IfStatement[4237-4346]:IfStatement[4237-4346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4270-4346]:Block[4270-4346]"
    }, {
      "left" : "hitCentralDirectory = true;",
      "right" : "hitCentralDirectory = true;",
      "info" : "ExpressionStatement[4284-4311]:ExpressionStatement[4284-4311]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4324-4336]:ReturnStatement[4324-4336]"
    }, {
      "left" : "if (!sig.equals(ZipLong.LFH_SIG))",
      "right" : "if (!sig.equals(ZipLong.LFH_SIG))",
      "info" : "IfStatement[4355-4425]:IfStatement[4355-4425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4389-4425]:Block[4389-4425]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4403-4415]:ReturnStatement[4403-4415]"
    }, {
      "left" : "int off = WORD;",
      "right" : "int off = WORD;",
      "info" : "VariableDeclarationStatement[4435-4450]:VariableDeclarationStatement[4435-4450]"
    }, {
      "left" : "current = new ZipArchiveEntry();",
      "right" : "current = new ZipArchiveEntry();",
      "info" : "ExpressionStatement[4459-4491]:ExpressionStatement[4459-4491]"
    }, {
      "left" : "int versionMadeBy = ZipShort.getValue(lfh, off);",
      "right" : "int versionMadeBy = ZipShort.getValue(lfh, off);",
      "info" : "VariableDeclarationStatement[4501-4549]:VariableDeclarationStatement[4501-4549]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[4558-4571]:ExpressionStatement[4558-4571]"
    }, {
      "left" : "current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)\n                            & ZipFile.NIBLET_MASK);",
      "right" : "current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)\n                            & ZipFile.NIBLET_MASK);",
      "info" : "ExpressionStatement[4580-4689]:ExpressionStatement[4580-4689]"
    }, {
      "left" : "final int generalPurposeFlag = ZipShort.getValue(lfh, off);",
      "right" : "final int generalPurposeFlag = ZipShort.getValue(lfh, off);",
      "info" : "VariableDeclarationStatement[4699-4758]:VariableDeclarationStatement[4699-4758]"
    }, {
      "left" : "final boolean hasEFS = \n            (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;",
      "right" : "final boolean hasEFS = \n            (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;",
      "info" : "VariableDeclarationStatement[4767-4863]:VariableDeclarationStatement[4767-4863]"
    }, {
      "left" : "final ZipEncoding entryEncoding =\n            hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "right" : "final ZipEncoding entryEncoding =\n            hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "info" : "VariableDeclarationStatement[4872-4977]:VariableDeclarationStatement[4872-4977]"
    }, {
      "left" : "hasDataDescriptor = (generalPurposeFlag & 8) != 0;",
      "right" : "hasDataDescriptor = (generalPurposeFlag & 8) != 0;",
      "info" : "ExpressionStatement[4986-5036]:ExpressionStatement[4986-5036]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[5046-5059]:ExpressionStatement[5046-5059]"
    }, {
      "left" : "current.setMethod(ZipShort.getValue(lfh, off));",
      "right" : "current.setMethod(ZipShort.getValue(lfh, off));",
      "info" : "ExpressionStatement[5069-5116]:ExpressionStatement[5069-5116]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[5125-5138]:ExpressionStatement[5125-5138]"
    }, {
      "left" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));",
      "right" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));",
      "info" : "VariableDeclarationStatement[5148-5210]:VariableDeclarationStatement[5148-5210]"
    }, {
      "left" : "current.setTime(time);",
      "right" : "current.setTime(time);",
      "info" : "ExpressionStatement[5219-5241]:ExpressionStatement[5219-5241]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[5250-5262]:ExpressionStatement[5250-5262]"
    }, {
      "left" : "if (!hasDataDescriptor)",
      "right" : "if (!hasDataDescriptor)",
      "info" : "IfStatement[5272-5610]:IfStatement[5272-5610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5296-5564]:Block[5296-5564]"
    }, {
      "left" : "current.setCrc(ZipLong.getValue(lfh, off));",
      "right" : "current.setCrc(ZipLong.getValue(lfh, off));",
      "info" : "ExpressionStatement[5310-5353]:ExpressionStatement[5310-5353]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[5366-5378]:ExpressionStatement[5366-5378]"
    }, {
      "left" : "current.setCompressedSize(ZipLong.getValue(lfh, off));",
      "right" : "current.setCompressedSize(ZipLong.getValue(lfh, off));",
      "info" : "ExpressionStatement[5392-5446]:ExpressionStatement[5392-5446]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[5459-5471]:ExpressionStatement[5459-5471]"
    }, {
      "left" : "current.setSize(ZipLong.getValue(lfh, off));",
      "right" : "current.setSize(ZipLong.getValue(lfh, off));",
      "info" : "ExpressionStatement[5485-5529]:ExpressionStatement[5485-5529]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[5542-5554]:ExpressionStatement[5542-5554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5570-5610]:Block[5570-5610]"
    }, {
      "left" : "off += 3 * WORD;",
      "right" : "off += 3 * WORD;",
      "info" : "ExpressionStatement[5584-5600]:ExpressionStatement[5584-5600]"
    }, {
      "left" : "int fileNameLen = ZipShort.getValue(lfh, off);",
      "right" : "int fileNameLen = ZipShort.getValue(lfh, off);",
      "info" : "VariableDeclarationStatement[5620-5666]:VariableDeclarationStatement[5620-5666]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[5676-5689]:ExpressionStatement[5676-5689]"
    }, {
      "left" : "int extraLen = ZipShort.getValue(lfh, off);",
      "right" : "int extraLen = ZipShort.getValue(lfh, off);",
      "info" : "VariableDeclarationStatement[5699-5742]:VariableDeclarationStatement[5699-5742]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[5751-5764]:ExpressionStatement[5751-5764]"
    }, {
      "left" : "byte[] fileName = new byte[fileNameLen];",
      "right" : "byte[] fileName = new byte[fileNameLen];",
      "info" : "VariableDeclarationStatement[5774-5814]:VariableDeclarationStatement[5774-5814]"
    }, {
      "left" : "readFully(fileName);",
      "right" : "readFully(fileName);",
      "info" : "ExpressionStatement[5823-5843]:ExpressionStatement[5823-5843]"
    }, {
      "left" : "current.setName(entryEncoding.decode(fileName));",
      "right" : "current.setName(entryEncoding.decode(fileName));",
      "info" : "ExpressionStatement[5852-5900]:ExpressionStatement[5852-5900]"
    }, {
      "left" : "byte[] extraData = new byte[extraLen];",
      "right" : "byte[] extraData = new byte[extraLen];",
      "info" : "VariableDeclarationStatement[5910-5948]:VariableDeclarationStatement[5910-5948]"
    }, {
      "left" : "readFully(extraData);",
      "right" : "readFully(extraData);",
      "info" : "ExpressionStatement[5957-5978]:ExpressionStatement[5957-5978]"
    }, {
      "left" : "current.setExtra(extraData);",
      "right" : "current.setExtra(extraData);",
      "info" : "ExpressionStatement[5987-6015]:ExpressionStatement[5987-6015]"
    }, {
      "left" : "if (!hasEFS && useUnicodeExtraFields)",
      "right" : "if (!hasEFS && useUnicodeExtraFields)",
      "info" : "IfStatement[6025-6153]:IfStatement[6025-6153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6063-6153]:Block[6063-6153]"
    }, {
      "left" : "ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);",
      "right" : "ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);",
      "info" : "ExpressionStatement[6077-6143]:ExpressionStatement[6077-6143]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[6162-6177]:ReturnStatement[6162-6177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6243-6284]:Block[6243-6284]"
    }, {
      "left" : "return getNextZipEntry();",
      "right" : "return getNextZipEntry();",
      "info" : "ReturnStatement[6253-6278]:ReturnStatement[6253-6278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6363-8445]:Block[6363-8605]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[6373-6455]:IfStatement[6373-6455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6385-6455]:Block[6385-6455]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[6399-6445]:ThrowStatement[6399-6445]"
    }, {
      "left" : "if (inf.finished() || current == null)",
      "right" : "if (inf.finished() || current == null)",
      "info" : "IfStatement[6464-6537]:IfStatement[6464-6537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6503-6537]:Block[6503-6537]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[6517-6527]:ReturnStatement[6517-6527]"
    }, {
      "left" : "if (start <= buffer.length && length >= 0 && start >= 0\n            && buffer.length - start >= length)",
      "right" : "if (start <= buffer.length && length >= 0 && start >= 0\n            && buffer.length - start >= length)",
      "info" : "IfStatement[6596-8387]:IfStatement[6596-8547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6700-8387]:Block[6700-8547]"
    }, {
      "left" : "if (current.getMethod() == ZipArchiveOutputStream.STORED)",
      "right" : "if (current.getMethod() == ZipArchiveOutputStream.STORED)",
      "info" : "IfStatement[6714-7803]:IfStatement[6714-7803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6772-7803]:Block[6772-7803]"
    }, {
      "left" : "int csize = (int) current.getSize();",
      "right" : "int csize = (int) current.getSize();",
      "info" : "VariableDeclarationStatement[6790-6826]:VariableDeclarationStatement[6790-6826]"
    }, {
      "left" : "if (readBytesOfEntry >= csize)",
      "right" : "if (readBytesOfEntry >= csize)",
      "info" : "IfStatement[6843-6924]:IfStatement[6843-6924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-6924]:Block[6874-6924]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[6896-6906]:ReturnStatement[6896-6906]"
    }, {
      "left" : "if (offsetInBuffer >= lengthOfLastRead)",
      "right" : "if (offsetInBuffer >= lengthOfLastRead)",
      "info" : "IfStatement[6941-7270]:IfStatement[6941-7270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6981-7270]:Block[6981-7270]"
    }, {
      "left" : "offsetInBuffer = 0;",
      "right" : "offsetInBuffer = 0;",
      "info" : "ExpressionStatement[7003-7022]:ExpressionStatement[7003-7022]"
    }, {
      "left" : "if ((lengthOfLastRead = in.read(buf)) == -1)",
      "right" : "if ((lengthOfLastRead = in.read(buf)) == -1)",
      "info" : "IfStatement[7043-7146]:IfStatement[7043-7146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7088-7146]:Block[7088-7146]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[7114-7124]:ReturnStatement[7114-7124]"
    }, {
      "left" : "count(lengthOfLastRead);",
      "right" : "count(lengthOfLastRead);",
      "info" : "ExpressionStatement[7167-7191]:ExpressionStatement[7167-7191]"
    }, {
      "left" : "bytesReadFromStream += lengthOfLastRead;",
      "right" : "bytesReadFromStream += lengthOfLastRead;",
      "info" : "ExpressionStatement[7212-7252]:ExpressionStatement[7212-7252]"
    }, {
      "left" : "int toRead = length > lengthOfLastRead\n                    ? lengthOfLastRead - offsetInBuffer\n                    : length;",
      "right" : "int toRead = length > lengthOfLastRead\n                    ? lengthOfLastRead - offsetInBuffer\n                    : length;",
      "info" : "VariableDeclarationStatement[7287-7411]:VariableDeclarationStatement[7287-7411]"
    }, {
      "left" : "if ((csize - readBytesOfEntry) < toRead)",
      "right" : "if ((csize - readBytesOfEntry) < toRead)",
      "info" : "IfStatement[7428-7543]:IfStatement[7428-7543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7469-7543]:Block[7469-7543]"
    }, {
      "left" : "toRead = csize - readBytesOfEntry;",
      "right" : "toRead = csize - readBytesOfEntry;",
      "info" : "ExpressionStatement[7491-7525]:ExpressionStatement[7491-7525]"
    }, {
      "left" : "System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);",
      "right" : "System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);",
      "info" : "ExpressionStatement[7560-7621]:ExpressionStatement[7560-7621]"
    }, {
      "left" : "offsetInBuffer += toRead;",
      "right" : "offsetInBuffer += toRead;",
      "info" : "ExpressionStatement[7638-7663]:ExpressionStatement[7638-7663]"
    }, {
      "left" : "readBytesOfEntry += toRead;",
      "right" : "readBytesOfEntry += toRead;",
      "info" : "ExpressionStatement[7680-7707]:ExpressionStatement[7680-7707]"
    }, {
      "left" : "crc.update(buffer, start, toRead);",
      "right" : "crc.update(buffer, start, toRead);",
      "info" : "ExpressionStatement[7724-7758]:ExpressionStatement[7724-7758]"
    }, {
      "left" : "return toRead;",
      "right" : "return toRead;",
      "info" : "ReturnStatement[7775-7789]:ReturnStatement[7775-7789]"
    }, {
      "left" : "if (inf.needsInput())",
      "right" : "if (inf.needsInput())",
      "info" : "IfStatement[7816-8000]:IfStatement[7816-8000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7838-8000]:Block[7838-8000]"
    }, {
      "left" : "fill();",
      "right" : "fill();",
      "info" : "ExpressionStatement[7856-7863]:ExpressionStatement[7856-7863]"
    }, {
      "left" : "if (lengthOfLastRead > 0)",
      "right" : "if (lengthOfLastRead > 0)",
      "info" : "IfStatement[7880-7986]:IfStatement[7880-7986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7906-7986]:Block[7906-7986]"
    }, {
      "left" : "bytesReadFromStream += lengthOfLastRead;",
      "right" : "bytesReadFromStream += lengthOfLastRead;",
      "info" : "ExpressionStatement[7928-7968]:ExpressionStatement[7928-7968]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[8013-8026]:VariableDeclarationStatement[8013-8026]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8039-8219]:TryStatement[8039-8219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8043-8117]:Block[8043-8117]"
    }, {
      "left" : "read = inf.inflate(buffer, start, length);",
      "right" : "read = inf.inflate(buffer, start, length);",
      "info" : "ExpressionStatement[8061-8103]:ExpressionStatement[8061-8103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8148-8219]:Block[8148-8219]"
    }, {
      "left" : "throw new ZipException(e.getMessage());",
      "right" : "throw new ZipException(e.getMessage());",
      "info" : "ThrowStatement[8166-8205]:ThrowStatement[8166-8205]"
    }, {
      "left" : "if (read == 0 && inf.finished())",
      "right" : "if (inf.finished())",
      "info" : "IfStatement[8232-8307]:IfStatement[8265-8453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8265-8307]:Block[8247-8467]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[8283-8293]:ReturnStatement[8307-8317]"
    }, {
      "left" : "crc.update(buffer, start, read);",
      "right" : "crc.update(buffer, start, read);",
      "info" : "ExpressionStatement[8320-8352]:ExpressionStatement[8480-8512]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[8365-8377]:ReturnStatement[8525-8537]"
    }, {
      "left" : "throw new ArrayIndexOutOfBoundsException();",
      "right" : "throw new ArrayIndexOutOfBoundsException();",
      "info" : "ThrowStatement[8396-8439]:ThrowStatement[8556-8599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8490-8581]:Block[8650-8741]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[8500-8575]:IfStatement[8660-8735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8513-8575]:Block[8673-8735]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[8527-8541]:ExpressionStatement[8687-8701]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[8554-8565]:ExpressionStatement[8714-8725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8635-9110]:Block[8795-9270]"
    }, {
      "left" : "if (value >= 0)",
      "right" : "if (value >= 0)",
      "info" : "IfStatement[8645-9058]:IfStatement[8805-9218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8661-9058]:Block[8821-9218]"
    }, {
      "left" : "long skipped = 0;",
      "right" : "long skipped = 0;",
      "info" : "VariableDeclarationStatement[8675-8692]:VariableDeclarationStatement[8835-8852]"
    }, {
      "left" : "byte[] b = new byte[1024];",
      "right" : "byte[] b = new byte[1024];",
      "info" : "VariableDeclarationStatement[8705-8731]:VariableDeclarationStatement[8865-8891]"
    }, {
      "left" : "while (skipped != value)",
      "right" : "while (skipped != value)",
      "info" : "WhileStatement[8744-9020]:WhileStatement[8904-9180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8769-9020]:Block[8929-9180]"
    }, {
      "left" : "long rem = value - skipped;",
      "right" : "long rem = value - skipped;",
      "info" : "VariableDeclarationStatement[8787-8814]:VariableDeclarationStatement[8947-8974]"
    }, {
      "left" : "int x = read(b, 0, (int) (b.length > rem ? rem : b.length));",
      "right" : "int x = read(b, 0, (int) (b.length > rem ? rem : b.length));",
      "info" : "VariableDeclarationStatement[8831-8891]:VariableDeclarationStatement[8991-9051]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[8908-8976]:IfStatement[9068-9136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8921-8976]:Block[9081-9136]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[8943-8958]:ReturnStatement[9103-9118]"
    }, {
      "left" : "skipped += x;",
      "right" : "skipped += x;",
      "info" : "ExpressionStatement[8993-9006]:ExpressionStatement[9153-9166]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[9033-9048]:ReturnStatement[9193-9208]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[9067-9104]:ThrowStatement[9227-9264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9373-9643]:Block[9533-9803]"
    }, {
      "left" : "if (length < ZipArchiveOutputStream.LFH_SIG.length)",
      "right" : "if (length < ZipArchiveOutputStream.LFH_SIG.length)",
      "info" : "IfStatement[9383-9472]:IfStatement[9543-9632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9435-9472]:Block[9595-9632]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9449-9462]:ReturnStatement[9609-9622]"
    }, {
      "left" : "return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file\n            || checksig(signature, ZipArchiveOutputStream.EOCD_SIG);",
      "right" : "return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file\n            || checksig(signature, ZipArchiveOutputStream.EOCD_SIG);",
      "info" : "ReturnStatement[9482-9624]:ReturnStatement[9642-9784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9715-9904]:Block[9875-10064]"
    }, {
      "left" : "for (int i = 0; i < expected.length; i++)",
      "right" : "for (int i = 0; i < expected.length; i++)",
      "info" : "ForStatement[9725-9869]:ForStatement[9885-10029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9767-9869]:Block[9927-10029]"
    }, {
      "left" : "if (signature[i] != expected[i])",
      "right" : "if (signature[i] != expected[i])",
      "info" : "IfStatement[9781-9859]:IfStatement[9941-10019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9814-9859]:Block[9974-10019]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9832-9845]:ReturnStatement[9992-10005]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9878-9890]:ReturnStatement[10038-10050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9955-10883]:Block[10115-11043]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[9965-10047]:IfStatement[10125-10207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9977-10047]:Block[10137-10207]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[9991-10037]:ThrowStatement[10151-10197]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[10056-10108]:IfStatement[10216-10268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10077-10108]:Block[10237-10268]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10091-10098]:ReturnStatement[10251-10258]"
    }, {
      "left" : "skip(Long.MAX_VALUE);",
      "right" : "skip(Long.MAX_VALUE);",
      "info" : "ExpressionStatement[10160-10181]:ExpressionStatement[10320-10341]"
    }, {
      "left" : "int inB;",
      "right" : "int inB;",
      "info" : "VariableDeclarationStatement[10190-10198]:VariableDeclarationStatement[10350-10358]"
    }, {
      "left" : "if (current.getMethod() == ZipArchiveOutputStream.DEFLATED)",
      "right" : "if (current.getMethod() == ZipArchiveOutputStream.DEFLATED)",
      "info" : "IfStatement[10207-10367]:IfStatement[10367-10527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10267-10314]:Block[10427-10474]"
    }, {
      "left" : "inB = inf.getTotalIn();",
      "right" : "inB = inf.getTotalIn();",
      "info" : "ExpressionStatement[10281-10304]:ExpressionStatement[10441-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10320-10367]:Block[10480-10527]"
    }, {
      "left" : "inB = readBytesOfEntry;",
      "right" : "inB = readBytesOfEntry;",
      "info" : "ExpressionStatement[10334-10357]:ExpressionStatement[10494-10517]"
    }, {
      "left" : "int diff = 0;",
      "right" : "int diff = 0;",
      "info" : "VariableDeclarationStatement[10376-10389]:VariableDeclarationStatement[10536-10549]"
    }, {
      "left" : "if ((diff = bytesReadFromStream - inB) != 0)",
      "right" : "if ((diff = bytesReadFromStream - inB) != 0)",
      "info" : "IfStatement[10438-10623]:IfStatement[10598-10783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10483-10623]:Block[10643-10783]"
    }, {
      "left" : "((PushbackInputStream) in).unread(buf,\n                                              lengthOfLastRead - diff, diff);",
      "right" : "((PushbackInputStream) in).unread(buf,\n                                              lengthOfLastRead - diff, diff);",
      "info" : "ExpressionStatement[10497-10613]:ExpressionStatement[10657-10773]"
    }, {
      "left" : "if (hasDataDescriptor)",
      "right" : "if (hasDataDescriptor)",
      "info" : "IfStatement[10633-10710]:IfStatement[10793-10870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10656-10710]:Block[10816-10870]"
    }, {
      "left" : "readFully(new byte[4 * WORD]);",
      "right" : "readFully(new byte[4 * WORD]);",
      "info" : "ExpressionStatement[10670-10700]:ExpressionStatement[10830-10860]"
    }, {
      "left" : "inf.reset();",
      "right" : "inf.reset();",
      "info" : "ExpressionStatement[10720-10732]:ExpressionStatement[10880-10892]"
    }, {
      "left" : "readBytesOfEntry = offsetInBuffer = bytesReadFromStream =\n            lengthOfLastRead = 0;",
      "right" : "readBytesOfEntry = offsetInBuffer = bytesReadFromStream =\n            lengthOfLastRead = 0;",
      "info" : "ExpressionStatement[10741-10832]:ExpressionStatement[10901-10992]"
    }, {
      "left" : "crc.reset();",
      "right" : "crc.reset();",
      "info" : "ExpressionStatement[10841-10853]:ExpressionStatement[11001-11013]"
    }, {
      "left" : "current = null;",
      "right" : "current = null;",
      "info" : "ExpressionStatement[10862-10877]:ExpressionStatement[11022-11037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10928-11141]:Block[11088-11301]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[10938-11020]:IfStatement[11098-11180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10950-11020]:Block[11110-11180]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[10964-11010]:ThrowStatement[11124-11170]"
    }, {
      "left" : "if ((lengthOfLastRead = in.read(buf)) > 0)",
      "right" : "if ((lengthOfLastRead = in.read(buf)) > 0)",
      "info" : "IfStatement[11029-11135]:IfStatement[11189-11295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11072-11135]:Block[11232-11295]"
    }, {
      "left" : "inf.setInput(buf, 0, lengthOfLastRead);",
      "right" : "inf.setInput(buf, 0, lengthOfLastRead);",
      "info" : "ExpressionStatement[11086-11125]:ExpressionStatement[11246-11285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11199-11427]:Block[11359-11587]"
    }, {
      "left" : "int count = 0, x = 0;",
      "right" : "int count = 0, x = 0;",
      "info" : "VariableDeclarationStatement[11209-11230]:VariableDeclarationStatement[11369-11390]"
    }, {
      "left" : "while (count != b.length)",
      "right" : "while (count != b.length)",
      "info" : "WhileStatement[11239-11421]:WhileStatement[11399-11581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11265-11421]:Block[11425-11581]"
    }, {
      "left" : "count += x = in.read(b, count, b.length - count);",
      "right" : "count += x = in.read(b, count, b.length - count);",
      "info" : "ExpressionStatement[11279-11328]:ExpressionStatement[11439-11488]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[11341-11411]:IfStatement[11501-11571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11354-11411]:Block[11514-11571]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[11372-11397]:ThrowStatement[11532-11557]"
    } ]
  },
  "interFileMappings" : { }
}