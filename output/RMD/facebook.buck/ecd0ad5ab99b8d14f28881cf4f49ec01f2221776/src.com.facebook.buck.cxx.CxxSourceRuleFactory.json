{
  "matchedElements" : [
 {
    "left" : "class : CxxSourceRuleFactory",
    "right" : "class : CxxSourceRuleFactory",
    "info" : "TypeDeclaration[1974-24222]:TypeDeclaration[2065-24621]"
  }, {
    "left" : "LOG",
    "right" : "LOG",
    "info" : "FieldDeclaration[2013-2086]:FieldDeclaration[2104-2177]"
  }, {
    "left" : "COMPILE_FLAVOR_PREFIX",
    "right" : "COMPILE_FLAVOR_PREFIX",
    "info" : "FieldDeclaration[2089-2152]:FieldDeclaration[2180-2243]"
  }, {
    "left" : "PREPROCESS_FLAVOR_PREFIX",
    "right" : "PREPROCESS_FLAVOR_PREFIX",
    "info" : "FieldDeclaration[2155-2224]:FieldDeclaration[2246-2315]"
  }, {
    "left" : "params",
    "right" : "params",
    "info" : "FieldDeclaration[2228-2265]:FieldDeclaration[2319-2356]"
  }, {
    "left" : "resolver",
    "right" : "resolver",
    "info" : "FieldDeclaration[2268-2309]:FieldDeclaration[2359-2400]"
  }, {
    "left" : "pathResolver",
    "right" : "pathResolver",
    "info" : "FieldDeclaration[2312-2358]:FieldDeclaration[2403-2449]"
  }, {
    "left" : "cxxPlatform",
    "right" : "cxxPlatform",
    "info" : "FieldDeclaration[2361-2399]:FieldDeclaration[2452-2490]"
  }, {
    "left" : "cxxPreprocessorInput",
    "right" : "cxxPreprocessorInput",
    "info" : "FieldDeclaration[2402-2473]:FieldDeclaration[2493-2564]"
  }, {
    "left" : "compilerFlags",
    "right" : "compilerFlags",
    "info" : "FieldDeclaration[2476-2526]:FieldDeclaration[2567-2617]"
  }, {
    "left" : "preprocessDeps",
    "right" : "preprocessDeps",
    "info" : "FieldDeclaration[2530-3661]:FieldDeclaration[2621-3752]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[2672-3651]:MethodDeclaration[2763-3742]"
  }, {
    "left" : "includeRoots",
    "right" : "includeRoots",
    "info" : "FieldDeclaration[3665-4059]:FieldDeclaration[3756-4150]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[3807-4045]:MethodDeclaration[3898-4136]"
  }, {
    "left" : "systemIncludeRoots",
    "right" : "systemIncludeRoots",
    "info" : "FieldDeclaration[4063-4470]:FieldDeclaration[4154-4561]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[4211-4456]:MethodDeclaration[4302-4547]"
  }, {
    "left" : "frameworkRoots",
    "right" : "frameworkRoots",
    "info" : "FieldDeclaration[4474-4872]:FieldDeclaration[4565-4963]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[4618-4858]:MethodDeclaration[4709-4949]"
  }, {
    "left" : "includes",
    "right" : "includes",
    "info" : "FieldDeclaration[4876-5274]:FieldDeclaration[4967-5365]"
  }, {
    "left" : "public get() : ",
    "right" : "public get() : ",
    "info" : "MethodDeclaration[5028-5260]:MethodDeclaration[5119-5351]"
  }, {
    "left" : "preprocessorFlags",
    "right" : "preprocessorFlags",
    "info" : "FieldDeclaration[5278-5927]:FieldDeclaration[5369-6018]"
  }, {
    "left" : "public load(type ) : ",
    "right" : "public load(type ) : ",
    "info" : "MethodDeclaration[5503-5909]:MethodDeclaration[5594-6000]"
  }, {
    "left" : "public CxxSourceRuleFactory(params , resolver , pathResolver , cxxPlatform , cxxPreprocessorInput , compilerFlags ...)",
    "right" : "public CxxSourceRuleFactory(params , resolver , pathResolver , cxxPlatform , cxxPreprocessorInput , compilerFlags ...)",
    "info" : "MethodDeclaration[5931-6451]:MethodDeclaration[6022-6542]"
  }, {
    "left" : "private getPreprocessOutputName(type , name ) : ",
    "right" : "private getPreprocessOutputName(type , name ) : ",
    "info" : "MethodDeclaration[6455-6762]:MethodDeclaration[6546-6853]"
  }, {
    "left" : "public createPreprocessBuildTarget(name , type , pic ) : ",
    "right" : "public createPreprocessBuildTarget(name , type , pic ) : ",
    "info" : "MethodDeclaration[6766-7485]:MethodDeclaration[6857-7576]"
  }, {
    "left" : "public isPreprocessFlavoredBuildTarget(target ) : boolean",
    "right" : "public isPreprocessFlavoredBuildTarget(target ) : boolean",
    "info" : "MethodDeclaration[7489-7771]:MethodDeclaration[7580-7862]"
  }, {
    "left" : "package getPreprocessOutputPath(target , type , name ) : ",
    "right" : "package getPreprocessOutputPath(target , type , name ) : ",
    "info" : "MethodDeclaration[7775-8085]:MethodDeclaration[7866-8176]"
  }, {
    "left" : "public createPreprocessBuildRule(resolver , name , source , pic ) : ",
    "right" : "public createPreprocessBuildRule(resolver , name , source , pic ) : ",
    "info" : "MethodDeclaration[8089-10915]:MethodDeclaration[8180-9749]"
  }, {
    "left" : "package requirePreprocessBuildRule(resolver , name , source , pic ) : ",
    "right" : "package requirePreprocessBuildRule(resolver , name , source , pic ) : ",
    "info" : "MethodDeclaration[10919-11455]:MethodDeclaration[9753-10289]"
  }, {
    "left" : "private getCompileOutputName(name ) : ",
    "right" : "private getCompileOutputName(name ) : ",
    "info" : "MethodDeclaration[11459-11610]:MethodDeclaration[10293-10444]"
  }, {
    "left" : "package getCompileOutputPath(target , name ) : ",
    "right" : "package getCompileOutputPath(target , name ) : ",
    "info" : "MethodDeclaration[11614-11891]:MethodDeclaration[10448-10725]"
  }, {
    "left" : "public createCompileBuildTarget(name , pic ) : ",
    "right" : "public createCompileBuildTarget(name , pic ) : ",
    "info" : "MethodDeclaration[11895-12568]:MethodDeclaration[10729-11402]"
  }, {
    "left" : "public isCompileFlavoredBuildTarget(target ) : boolean",
    "right" : "public isCompileFlavoredBuildTarget(target ) : boolean",
    "info" : "MethodDeclaration[12572-12848]:MethodDeclaration[11406-11682]"
  }, {
    "left" : "private getCompiler(type ) : ",
    "right" : "private getCompiler(type ) : ",
    "info" : "MethodDeclaration[12992-13158]:MethodDeclaration[11826-11992]"
  }, {
    "left" : "private getPlatformCompileFlags(type ) : ",
    "right" : "private getPlatformCompileFlags(type ) : ",
    "info" : "MethodDeclaration[13162-13974]:MethodDeclaration[11996-12808]"
  }, {
    "left" : "private getRuleCompileFlags(type ) : ",
    "right" : "private getRuleCompileFlags(type ) : ",
    "info" : "MethodDeclaration[13978-14455]:MethodDeclaration[12812-13289]"
  }, {
    "left" : "public createCompileBuildRule(resolver , name , source , pic ) : ",
    "right" : "public createCompileBuildRule(resolver , name , source , pic ) : ",
    "info" : "MethodDeclaration[14459-16652]:MethodDeclaration[13293-15486]"
  }, {
    "left" : "package requireCompileBuildRule(resolver , name , source , pic ) : ",
    "right" : "package requireCompileBuildRule(resolver , name , source , pic ) : ",
    "info" : "MethodDeclaration[16656-17165]:MethodDeclaration[15490-15999]"
  }, {
    "left" : "public createPreprocessAndCompileBuildRule(resolver , name , source , pic , strategy ) : ",
    "right" : "public createPreprocessAndCompileBuildRule(resolver , name , source , pic , strategy ) : ",
    "info" : "MethodDeclaration[17169-20047]:MethodDeclaration[18662-20446]"
  }, {
    "left" : "package requirePreprocessAndCompileBuildRule(resolver , name , source , pic , strategy ) : ",
    "right" : "package requirePreprocessAndCompileBuildRule(resolver , name , source , pic , strategy ) : ",
    "info" : "MethodDeclaration[20051-20630]:MethodDeclaration[20450-21029]"
  }, {
    "left" : "private requirePreprocessAndCompileRules(resolver , strategy , sources , pic ) : ",
    "right" : "private requirePreprocessAndCompileRules(resolver , strategy , sources , pic ) : ",
    "info" : "MethodDeclaration[20634-23075]:MethodDeclaration[21033-23474]"
  }, {
    "left" : "public apply(input ) : ",
    "right" : "public apply(input ) : ",
    "info" : "MethodDeclaration[22901-23059]:MethodDeclaration[23300-23458]"
  }, {
    "left" : "public requirePreprocessAndCompileRules(params , resolver , pathResolver , cxxPlatform , cxxPreprocessorInput , compilerFlags , strategy , sources , pic ) : ",
    "right" : "public requirePreprocessAndCompileRules(params , resolver , pathResolver , cxxPlatform , cxxPreprocessorInput , compilerFlags , strategy , sources , pic ) : ",
    "info" : "MethodDeclaration[23079-23834]:MethodDeclaration[23478-24233]"
  }, {
    "left" : "flags",
    "right" : "flags",
    "info" : "FieldDeclaration[24013-24055]:FieldDeclaration[24412-24454]"
  }, {
    "left" : "package PicType()",
    "right" : "package PicType()",
    "info" : "MethodDeclaration[24061-24141]:MethodDeclaration[24460-24540]"
  }, {
    "left" : "public getFlags() : ",
    "right" : "public getFlags() : ",
    "info" : "MethodDeclaration[24147-24214]:MethodDeclaration[24546-24613]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1974-1980]:Modifier[2065-2071]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1981-1986]:TYPE_DECLARATION_KIND[2072-2077]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2672-2681]:MarkerAnnotation[2763-2772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2690-2696]:Modifier[2781-2787]"
  }, {
    "left" : "ImmutableList<BuildRule>",
    "right" : "ImmutableList<BuildRule>",
    "info" : "ParameterizedType[2697-2721]:ParameterizedType[2788-2812]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[2722-2725]:SimpleName[2813-2816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2728-3651]:Block[2819-3742]"
  }, {
    "left" : "ImmutableList.Builder<BuildRule> builder = ImmutableList.builder();",
    "right" : "ImmutableList.Builder<BuildRule> builder = ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[2740-2807]:VariableDeclarationStatement[2831-2898]"
  }, {
    "left" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
    "right" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
    "info" : "EnhancedForStatement[2819-3606]:EnhancedForStatement[2910-3697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2875-3606]:Block[2966-3697]"
  }, {
    "left" : "builder.addAll(\n                pathResolver.filterBuildRuleInputs(\n                    ImmutableList.<SourcePath>builder()\n                        .addAll(input.getIncludes().getPrefixHeaders())\n                        .addAll(input.getIncludes().getNameToPathMap().values())\n                        .build()));",
    "right" : "builder.addAll(\n                pathResolver.filterBuildRuleInputs(\n                    ImmutableList.<SourcePath>builder()\n                        .addAll(input.getIncludes().getPrefixHeaders())\n                        .addAll(input.getIncludes().getNameToPathMap().values())\n                        .build()));",
    "info" : "ExpressionStatement[2980-3292]:ExpressionStatement[3071-3383]"
  }, {
    "left" : "builder.addAll(\n                BuildRules.toBuildRulesFor(\n                    params.getBuildTarget(),\n                    resolver,\n                    input.getRules()));",
    "right" : "builder.addAll(\n                BuildRules.toBuildRulesFor(\n                    params.getBuildTarget(),\n                    resolver,\n                    input.getRules()));",
    "info" : "ExpressionStatement[3420-3594]:ExpressionStatement[3511-3685]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[3618-3641]:ReturnStatement[3709-3732]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3807-3816]:MarkerAnnotation[3898-3907]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3829-3835]:Modifier[3920-3926]"
  }, {
    "left" : "ImmutableSet<Path>",
    "right" : "ImmutableSet<Path>",
    "info" : "ParameterizedType[3836-3854]:ParameterizedType[3927-3945]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[3855-3858]:SimpleName[3946-3949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3861-4045]:Block[3952-4136]"
  }, {
    "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_INCLUDE_ROOTS)\n                  .toSet();",
    "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_INCLUDE_ROOTS)\n                  .toSet();",
    "info" : "ReturnStatement[3877-4031]:ReturnStatement[3968-4122]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4211-4220]:MarkerAnnotation[4302-4311]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4233-4239]:Modifier[4324-4330]"
  }, {
    "left" : "ImmutableSet<Path>",
    "right" : "ImmutableSet<Path>",
    "info" : "ParameterizedType[4240-4258]:ParameterizedType[4331-4349]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[4259-4262]:SimpleName[4350-4353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4265-4456]:Block[4356-4547]"
  }, {
    "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_SYSTEM_INCLUDE_ROOTS)\n                  .toSet();",
    "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_SYSTEM_INCLUDE_ROOTS)\n                  .toSet();",
    "info" : "ReturnStatement[4281-4442]:ReturnStatement[4372-4533]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4618-4627]:MarkerAnnotation[4709-4718]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4640-4646]:Modifier[4731-4737]"
  }, {
    "left" : "ImmutableSet<Path>",
    "right" : "ImmutableSet<Path>",
    "info" : "ParameterizedType[4647-4665]:ParameterizedType[4738-4756]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[4666-4669]:SimpleName[4757-4760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4672-4858]:Block[4763-4949]"
  }, {
    "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_FRAMEWORK_ROOTS)\n                  .toSet();",
    "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_FRAMEWORK_ROOTS)\n                  .toSet();",
    "info" : "ReturnStatement[4688-4844]:ReturnStatement[4779-4935]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5028-5037]:MarkerAnnotation[5119-5128]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5050-5056]:Modifier[5141-5147]"
  }, {
    "left" : "ImmutableList<CxxHeaders>",
    "right" : "ImmutableList<CxxHeaders>",
    "info" : "ParameterizedType[5057-5082]:ParameterizedType[5148-5173]"
  }, {
    "left" : "get",
    "right" : "get",
    "info" : "SimpleName[5083-5086]:SimpleName[5174-5177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5089-5260]:Block[5180-5351]"
  }, {
    "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transform(CxxPreprocessorInput.GET_INCLUDES)\n                  .toList();",
    "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transform(CxxPreprocessorInput.GET_INCLUDES)\n                  .toList();",
    "info" : "ReturnStatement[5105-5246]:ReturnStatement[5196-5337]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5503-5512]:MarkerAnnotation[5594-5603]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5529-5535]:Modifier[5620-5626]"
  }, {
    "left" : "ImmutableList<String>",
    "right" : "ImmutableList<String>",
    "info" : "ParameterizedType[5536-5557]:ParameterizedType[5627-5648]"
  }, {
    "left" : "load",
    "right" : "load",
    "info" : "SimpleName[5558-5562]:SimpleName[5649-5653]"
  }, {
    "left" : "@Nonnull CxxSource.Type type",
    "right" : "@Nonnull CxxSource.Type type",
    "info" : "SingleVariableDeclaration[5563-5591]:SingleVariableDeclaration[5654-5682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5593-5909]:Block[5684-6000]"
  }, {
    "left" : "ImmutableList.Builder<String> builder = ImmutableList.builder();",
    "right" : "ImmutableList.Builder<String> builder = ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[5613-5677]:VariableDeclarationStatement[5704-5768]"
  }, {
    "left" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
    "right" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
    "info" : "EnhancedForStatement[5696-5849]:EnhancedForStatement[5787-5940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5752-5849]:Block[5843-5940]"
  }, {
    "left" : "builder.addAll(input.getPreprocessorFlags().get(type));",
    "right" : "builder.addAll(input.getPreprocessorFlags().get(type));",
    "info" : "ExpressionStatement[5774-5829]:ExpressionStatement[5865-5920]"
  }, {
    "left" : "return builder.build();",
    "right" : "return builder.build();",
    "info" : "ReturnStatement[5868-5891]:ReturnStatement[5959-5982]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[5931-5949]:MarkerAnnotation[6022-6040]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5952-5958]:Modifier[6043-6049]"
  }, {
    "left" : "CxxSourceRuleFactory",
    "right" : "CxxSourceRuleFactory",
    "info" : "SimpleName[5959-5979]:SimpleName[6050-6070]"
  }, {
    "left" : "BuildRuleParams params",
    "right" : "BuildRuleParams params",
    "info" : "SingleVariableDeclaration[5987-6009]:SingleVariableDeclaration[6078-6100]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[6017-6043]:SingleVariableDeclaration[6108-6134]"
  }, {
    "left" : "SourcePathResolver pathResolver",
    "right" : "SourcePathResolver pathResolver",
    "info" : "SingleVariableDeclaration[6051-6082]:SingleVariableDeclaration[6142-6173]"
  }, {
    "left" : "CxxPlatform cxxPlatform",
    "right" : "CxxPlatform cxxPlatform",
    "info" : "SingleVariableDeclaration[6090-6113]:SingleVariableDeclaration[6181-6204]"
  }, {
    "left" : "ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput",
    "right" : "ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput",
    "info" : "SingleVariableDeclaration[6121-6177]:SingleVariableDeclaration[6212-6268]"
  }, {
    "left" : "ImmutableList<String> compilerFlags",
    "right" : "ImmutableList<String> compilerFlags",
    "info" : "SingleVariableDeclaration[6185-6220]:SingleVariableDeclaration[6276-6311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6222-6451]:Block[6313-6542]"
  }, {
    "left" : "this.params = params;",
    "right" : "this.params = params;",
    "info" : "ExpressionStatement[6228-6249]:ExpressionStatement[6319-6340]"
  }, {
    "left" : "this.resolver = resolver;",
    "right" : "this.resolver = resolver;",
    "info" : "ExpressionStatement[6254-6279]:ExpressionStatement[6345-6370]"
  }, {
    "left" : "this.pathResolver = pathResolver;",
    "right" : "this.pathResolver = pathResolver;",
    "info" : "ExpressionStatement[6284-6317]:ExpressionStatement[6375-6408]"
  }, {
    "left" : "this.cxxPlatform = cxxPlatform;",
    "right" : "this.cxxPlatform = cxxPlatform;",
    "info" : "ExpressionStatement[6322-6353]:ExpressionStatement[6413-6444]"
  }, {
    "left" : "this.cxxPreprocessorInput = cxxPreprocessorInput;",
    "right" : "this.cxxPreprocessorInput = cxxPreprocessorInput;",
    "info" : "ExpressionStatement[6358-6407]:ExpressionStatement[6449-6498]"
  }, {
    "left" : "this.compilerFlags = compilerFlags;",
    "right" : "this.compilerFlags = compilerFlags;",
    "info" : "ExpressionStatement[6412-6447]:ExpressionStatement[6503-6538]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6534-6541]:Modifier[6625-6632]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6542-6548]:SimpleType[6633-6639]"
  }, {
    "left" : "getPreprocessOutputName",
    "right" : "getPreprocessOutputName",
    "info" : "SimpleName[6549-6572]:SimpleName[6640-6663]"
  }, {
    "left" : "CxxSource.Type type",
    "right" : "CxxSource.Type type",
    "info" : "SingleVariableDeclaration[6573-6592]:SingleVariableDeclaration[6664-6683]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[6594-6605]:SingleVariableDeclaration[6685-6696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6607-6762]:Block[6698-6853]"
  }, {
    "left" : "CxxSource.Type outputType = CxxSourceTypes.getPreprocessorOutputType(type);",
    "right" : "CxxSource.Type outputType = CxxSourceTypes.getPreprocessorOutputType(type);",
    "info" : "VariableDeclarationStatement[6613-6688]:VariableDeclarationStatement[6704-6779]"
  }, {
    "left" : "return name + \".\" + Iterables.get(outputType.getExtensions(), 0);",
    "right" : "return name + \".\" + Iterables.get(outputType.getExtensions(), 0);",
    "info" : "ReturnStatement[6693-6758]:ReturnStatement[6784-6849]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[6897-6915]:MarkerAnnotation[6988-7006]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6918-6924]:Modifier[7009-7015]"
  }, {
    "left" : "BuildTarget",
    "right" : "BuildTarget",
    "info" : "SimpleType[6925-6936]:SimpleType[7016-7027]"
  }, {
    "left" : "createPreprocessBuildTarget",
    "right" : "createPreprocessBuildTarget",
    "info" : "SimpleName[6937-6964]:SimpleName[7028-7055]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[6972-6983]:SingleVariableDeclaration[7063-7074]"
  }, {
    "left" : "CxxSource.Type type",
    "right" : "CxxSource.Type type",
    "info" : "SingleVariableDeclaration[6991-7010]:SingleVariableDeclaration[7082-7101]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[7018-7029]:SingleVariableDeclaration[7109-7120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7031-7485]:Block[7122-7576]"
  }, {
    "left" : "String outputName = Flavor.replaceInvalidCharacters(getPreprocessOutputName(type, name));",
    "right" : "String outputName = Flavor.replaceInvalidCharacters(getPreprocessOutputName(type, name));",
    "info" : "VariableDeclarationStatement[7037-7126]:VariableDeclarationStatement[7128-7217]"
  }, {
    "left" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    PREPROCESS_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
    "right" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    PREPROCESS_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
    "info" : "ReturnStatement[7131-7481]:ReturnStatement[7222-7572]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7489-7495]:Modifier[7580-7586]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7496-7502]:Modifier[7587-7593]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7503-7510]:PrimitiveType[7594-7601]"
  }, {
    "left" : "isPreprocessFlavoredBuildTarget",
    "right" : "isPreprocessFlavoredBuildTarget",
    "info" : "SimpleName[7511-7542]:SimpleName[7602-7633]"
  }, {
    "left" : "BuildTarget target",
    "right" : "BuildTarget target",
    "info" : "SingleVariableDeclaration[7543-7561]:SingleVariableDeclaration[7634-7652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7563-7771]:Block[7654-7862]"
  }, {
    "left" : "Set<Flavor> flavors = target.getFlavors();",
    "right" : "Set<Flavor> flavors = target.getFlavors();",
    "info" : "VariableDeclarationStatement[7569-7611]:VariableDeclarationStatement[7660-7702]"
  }, {
    "left" : "for (Flavor flavor : flavors)",
    "right" : "for (Flavor flavor : flavors)",
    "info" : "EnhancedForStatement[7616-7749]:EnhancedForStatement[7707-7840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7646-7749]:Block[7737-7840]"
  }, {
    "left" : "if (flavor.getName().startsWith(PREPROCESS_FLAVOR_PREFIX))",
    "right" : "if (flavor.getName().startsWith(PREPROCESS_FLAVOR_PREFIX))",
    "info" : "IfStatement[7654-7743]:IfStatement[7745-7834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7713-7743]:Block[7804-7834]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7723-7735]:ReturnStatement[7814-7826]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7754-7767]:ReturnStatement[7845-7858]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[7881-7899]:MarkerAnnotation[7972-7990]"
  }, {
    "left" : "Path",
    "right" : "Path",
    "info" : "SimpleType[7902-7906]:SimpleType[7993-7997]"
  }, {
    "left" : "getPreprocessOutputPath",
    "right" : "getPreprocessOutputPath",
    "info" : "SimpleName[7907-7930]:SimpleName[7998-8021]"
  }, {
    "left" : "BuildTarget target",
    "right" : "BuildTarget target",
    "info" : "SingleVariableDeclaration[7931-7949]:SingleVariableDeclaration[8022-8040]"
  }, {
    "left" : "CxxSource.Type type",
    "right" : "CxxSource.Type type",
    "info" : "SingleVariableDeclaration[7951-7970]:SingleVariableDeclaration[8042-8061]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[7972-7983]:SingleVariableDeclaration[8063-8074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7985-8085]:Block[8076-8176]"
  }, {
    "left" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getPreprocessOutputName(type, name));",
    "right" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getPreprocessOutputName(type, name));",
    "info" : "ReturnStatement[7991-8081]:ReturnStatement[8082-8172]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[8089-8107]:MarkerAnnotation[8180-8198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8110-8116]:Modifier[8201-8207]"
  }, {
    "left" : "CxxPreprocessAndCompile",
    "right" : "CxxPreprocessAndCompile",
    "info" : "SimpleType[8117-8140]:SimpleType[8208-8231]"
  }, {
    "left" : "createPreprocessBuildRule",
    "right" : "createPreprocessBuildRule",
    "info" : "SimpleName[8141-8166]:SimpleName[8232-8257]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[8174-8200]:SingleVariableDeclaration[8265-8291]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[8208-8219]:SingleVariableDeclaration[8299-8310]"
  }, {
    "left" : "CxxSource source",
    "right" : "CxxSource source",
    "info" : "SingleVariableDeclaration[8227-8243]:SingleVariableDeclaration[8318-8334]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[8251-8262]:SingleVariableDeclaration[8342-8353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8264-10915]:Block[8355-9749]"
  }, {
    "left" : "Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));",
    "right" : "Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));",
    "info" : "ExpressionStatement[8271-8354]:ExpressionStatement[8362-8445]"
  }, {
    "left" : "BuildTarget target = createPreprocessBuildTarget(name, source.getType(), pic);",
    "right" : "BuildTarget target = createPreprocessBuildTarget(name, source.getType(), pic);",
    "info" : "VariableDeclarationStatement[8360-8438]:VariableDeclarationStatement[8451-8529]"
  }, {
    "left" : "Preprocessor tool = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());",
    "right" : "Preprocessor tool = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());",
    "info" : "VariableDeclarationStatement[8443-8525]:VariableDeclarationStatement[8534-8616]"
  }, {
    "left" : "ImmutableSortedSet<BuildRule> dependencies =\n        ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the preprocessor.\n            .addAll(tool.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            // Depend on the rule that generates the sources and headers we're compiling.\n            .addAll(preprocessDeps.get())\n            .build();",
    "right" : "ImmutableSortedSet<BuildRule> dependencies =\n        computeSourcePreprocessorAndToolDeps(Optional.of((Tool) tool), source);",
    "info" : "VariableDeclarationStatement[8587-9131]:VariableDeclarationStatement[8678-8802]"
  }, {
    "left" : "ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the preprocessor.\n            .addAll(tool.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            // Depend on the rule that generates the sources and headers we're compiling.\n            .addAll(preprocessDeps.get())\n            .build()",
    "right" : "ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the preprocessor.\n            .addAll(toolInputs)\n                // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n                // Add in all preprocessor deps.\n            .addAll(preprocessDeps.get())\n            .build()",
    "info" : "MethodInvocation[8640-9130]:MethodInvocation[16335-16770]"
  }, {
    "left" : "tool",
    "right" : "tool",
    "info" : "SimpleName[8789-8793]:SimpleName[8787-8791]"
  }, {
    "left" : "source",
    "right" : "source",
    "info" : "SimpleName[8959-8965]:SimpleName[8794-8800]"
  }, {
    "left" : "ImmutableList<String> platformFlags =\n        ImmutableList.<String>builder()\n            // If we're using pic, add in the appropriate flag.\n            .addAll(pic.getFlags())\n            // Add in platform specific preprocessor flags.\n            .addAll(CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, source.getType()))\n            // Add in the platform specific compiler flags.\n            .addAll(getPlatformCompileFlags(\n              CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n            .build();",
    "right" : "ImmutableList<String> platformFlags = computePlatformFlags(pic, source);",
    "info" : "VariableDeclarationStatement[9205-9738]:VariableDeclarationStatement[8876-8948]"
  }, {
    "left" : "ImmutableList.<String>builder()\n            // If we're using pic, add in the appropriate flag.\n            .addAll(pic.getFlags())\n            // Add in platform specific preprocessor flags.\n            .addAll(CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, source.getType()))\n            // Add in the platform specific compiler flags.\n            .addAll(getPlatformCompileFlags(\n              CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n            .build()",
    "right" : "ImmutableList.<String>builder()\n        // If we're using pic, add in the appropriate flag.\n        .addAll(pic.getFlags())\n            // Add in platform specific preprocessor flags.\n        .addAll(CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, source.getType()))\n            // Add in the platform specific compiler flags.\n        .addAll(\n            getPlatformCompileFlags(\n                CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n        .build()",
    "info" : "MethodInvocation[9251-9737]:MethodInvocation[16887-17368]"
  }, {
    "left" : "ImmutableList<String> ruleFlags =\n        ImmutableList.<String>builder()\n            // Add custom preprocessor flags.\n            .addAll(preprocessorFlags.getUnchecked(source.getType()))\n            // Add custom compiler flags.\n            .addAll(getRuleCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n            // Add custom per-file flags.\n            .addAll(source.getFlags())\n            .build();",
    "right" : "ImmutableList<String> ruleFlags = computeRuleFlags(source);",
    "info" : "VariableDeclarationStatement[9744-10179]:VariableDeclarationStatement[8954-9013]"
  }, {
    "left" : "ImmutableList.<String>builder()\n            // Add custom preprocessor flags.\n            .addAll(preprocessorFlags.getUnchecked(source.getType()))\n            // Add custom compiler flags.\n            .addAll(getRuleCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n            // Add custom per-file flags.\n            .addAll(source.getFlags())\n            .build()",
    "right" : "ImmutableList.<String>builder()\n        // Add custom preprocessor flags.\n        .addAll(preprocessorFlags.getUnchecked(source.getType()))\n            // Add custom compiler flags.\n        .addAll(getRuleCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n            // Add custom per-file flags.\n        .addAll(source.getFlags())\n        .build()",
    "info" : "MethodInvocation[9786-10178]:MethodInvocation[17926-18298]"
  }, {
    "left" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.preprocess(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        tool,\n        platformFlags,\n        ruleFlags,\n        getPreprocessOutputPath(target, source.getType(), name),\n        source.getPath(),\n        source.getType(),\n        includeRoots.get(),\n        systemIncludeRoots.get(),\n        frameworkRoots.get(),\n        includes.get(),\n        cxxPlatform.getDebugPathSanitizer());",
    "right" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.preprocess(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        tool,\n        platformFlags,\n        ruleFlags,\n        getPreprocessOutputPath(target, source.getType(), name),\n        source.getPath(),\n        source.getType(),\n        includeRoots.get(),\n        systemIncludeRoots.get(),\n        frameworkRoots.get(),\n        includes.get(),\n        cxxPlatform.getDebugPathSanitizer());",
    "info" : "VariableDeclarationStatement[10263-10859]:VariableDeclarationStatement[9097-9693]"
  }, {
    "left" : "resolver.addToIndex(result);",
    "right" : "resolver.addToIndex(result);",
    "info" : "ExpressionStatement[10864-10892]:ExpressionStatement[9698-9726]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[10897-10911]:ReturnStatement[9731-9745]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[10919-10937]:MarkerAnnotation[9753-9771]"
  }, {
    "left" : "CxxPreprocessAndCompile",
    "right" : "CxxPreprocessAndCompile",
    "info" : "SimpleType[10940-10963]:SimpleType[9774-9797]"
  }, {
    "left" : "requirePreprocessBuildRule",
    "right" : "requirePreprocessBuildRule",
    "info" : "SimpleName[10964-10990]:SimpleName[9798-9824]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[10998-11024]:SingleVariableDeclaration[9832-9858]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[11032-11043]:SingleVariableDeclaration[9866-9877]"
  }, {
    "left" : "CxxSource source",
    "right" : "CxxSource source",
    "info" : "SingleVariableDeclaration[11051-11067]:SingleVariableDeclaration[9885-9901]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[11075-11086]:SingleVariableDeclaration[9909-9920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11088-11455]:Block[9922-10289]"
  }, {
    "left" : "BuildTarget target = createPreprocessBuildTarget(name, source.getType(), pic);",
    "right" : "BuildTarget target = createPreprocessBuildTarget(name, source.getType(), pic);",
    "info" : "VariableDeclarationStatement[11095-11173]:VariableDeclarationStatement[9929-10007]"
  }, {
    "left" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
    "right" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
    "info" : "VariableDeclarationStatement[11178-11308]:VariableDeclarationStatement[10012-10142]"
  }, {
    "left" : "if (existingRule.isPresent())",
    "right" : "if (existingRule.isPresent())",
    "info" : "IfStatement[11313-11383]:IfStatement[10147-10217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11343-11383]:Block[10177-10217]"
  }, {
    "left" : "return existingRule.get();",
    "right" : "return existingRule.get();",
    "info" : "ReturnStatement[11351-11377]:ReturnStatement[10185-10211]"
  }, {
    "left" : "return createPreprocessBuildRule(resolver, name, source, pic);",
    "right" : "return createPreprocessBuildRule(resolver, name, source, pic);",
    "info" : "ReturnStatement[11389-11451]:ReturnStatement[10223-10285]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11532-11539]:Modifier[10366-10373]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[11540-11546]:SimpleType[10374-10380]"
  }, {
    "left" : "getCompileOutputName",
    "right" : "getCompileOutputName",
    "info" : "SimpleName[11547-11567]:SimpleName[10381-10401]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[11568-11579]:SingleVariableDeclaration[10402-10413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11581-11610]:Block[10415-10444]"
  }, {
    "left" : "return name + \".o\";",
    "right" : "return name + \".o\";",
    "info" : "ReturnStatement[11587-11606]:ReturnStatement[10421-10440]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[11720-11738]:MarkerAnnotation[10554-10572]"
  }, {
    "left" : "Path",
    "right" : "Path",
    "info" : "SimpleType[11741-11745]:SimpleType[10575-10579]"
  }, {
    "left" : "getCompileOutputPath",
    "right" : "getCompileOutputPath",
    "info" : "SimpleName[11746-11766]:SimpleName[10580-10600]"
  }, {
    "left" : "BuildTarget target",
    "right" : "BuildTarget target",
    "info" : "SingleVariableDeclaration[11767-11785]:SingleVariableDeclaration[10601-10619]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[11787-11798]:SingleVariableDeclaration[10621-10632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11800-11891]:Block[10634-10725]"
  }, {
    "left" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getCompileOutputName(name));",
    "right" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getCompileOutputName(name));",
    "info" : "ReturnStatement[11806-11887]:ReturnStatement[10640-10721]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[12022-12040]:MarkerAnnotation[10856-10874]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12043-12049]:Modifier[10877-10883]"
  }, {
    "left" : "BuildTarget",
    "right" : "BuildTarget",
    "info" : "SimpleType[12050-12061]:SimpleType[10884-10895]"
  }, {
    "left" : "createCompileBuildTarget",
    "right" : "createCompileBuildTarget",
    "info" : "SimpleName[12062-12086]:SimpleName[10896-10920]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[12094-12105]:SingleVariableDeclaration[10928-10939]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[12113-12124]:SingleVariableDeclaration[10947-10958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12126-12568]:Block[10960-11402]"
  }, {
    "left" : "String outputName = Flavor.replaceInvalidCharacters(getCompileOutputName(name));",
    "right" : "String outputName = Flavor.replaceInvalidCharacters(getCompileOutputName(name));",
    "info" : "VariableDeclarationStatement[12132-12212]:VariableDeclarationStatement[10966-11046]"
  }, {
    "left" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    COMPILE_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
    "right" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    COMPILE_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
    "info" : "ReturnStatement[12217-12564]:ReturnStatement[11051-11398]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12572-12578]:Modifier[11406-11412]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12579-12585]:Modifier[11413-11419]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12586-12593]:PrimitiveType[11420-11427]"
  }, {
    "left" : "isCompileFlavoredBuildTarget",
    "right" : "isCompileFlavoredBuildTarget",
    "info" : "SimpleName[12594-12622]:SimpleName[11428-11456]"
  }, {
    "left" : "BuildTarget target",
    "right" : "BuildTarget target",
    "info" : "SingleVariableDeclaration[12623-12641]:SingleVariableDeclaration[11457-11475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12643-12848]:Block[11477-11682]"
  }, {
    "left" : "Set<Flavor> flavors = target.getFlavors();",
    "right" : "Set<Flavor> flavors = target.getFlavors();",
    "info" : "VariableDeclarationStatement[12649-12691]:VariableDeclarationStatement[11483-11525]"
  }, {
    "left" : "for (Flavor flavor : flavors)",
    "right" : "for (Flavor flavor : flavors)",
    "info" : "EnhancedForStatement[12696-12826]:EnhancedForStatement[11530-11660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12726-12826]:Block[11560-11660]"
  }, {
    "left" : "if (flavor.getName().startsWith(COMPILE_FLAVOR_PREFIX))",
    "right" : "if (flavor.getName().startsWith(COMPILE_FLAVOR_PREFIX))",
    "info" : "IfStatement[12734-12820]:IfStatement[11568-11654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12790-12820]:Block[11624-11654]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12800-12812]:ReturnStatement[11634-11646]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12831-12844]:ReturnStatement[11665-11678]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12992-12999]:Modifier[11826-11833]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleType[13000-13008]:SimpleType[11834-11842]"
  }, {
    "left" : "getCompiler",
    "right" : "getCompiler",
    "info" : "SimpleName[13009-13020]:SimpleName[11843-11854]"
  }, {
    "left" : "CxxSource.Type type",
    "right" : "CxxSource.Type type",
    "info" : "SingleVariableDeclaration[13021-13040]:SingleVariableDeclaration[11855-11874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13042-13158]:Block[11876-11992]"
  }, {
    "left" : "return CxxSourceTypes.needsCxxCompiler(type) ?\n        cxxPlatform.getCxx() :\n        cxxPlatform.getCc();",
    "right" : "return CxxSourceTypes.needsCxxCompiler(type) ?\n        cxxPlatform.getCxx() :\n        cxxPlatform.getCc();",
    "info" : "ReturnStatement[13048-13154]:ReturnStatement[11882-11988]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13162-13169]:Modifier[11996-12003]"
  }, {
    "left" : "ImmutableList<String>",
    "right" : "ImmutableList<String>",
    "info" : "ParameterizedType[13170-13191]:ParameterizedType[12004-12025]"
  }, {
    "left" : "getPlatformCompileFlags",
    "right" : "getPlatformCompileFlags",
    "info" : "SimpleName[13192-13215]:SimpleName[12026-12049]"
  }, {
    "left" : "CxxSource.Type type",
    "right" : "CxxSource.Type type",
    "info" : "SingleVariableDeclaration[13216-13235]:SingleVariableDeclaration[12050-12069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13237-13974]:Block[12071-12808]"
  }, {
    "left" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
    "right" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[13243-13304]:VariableDeclarationStatement[12077-12138]"
  }, {
    "left" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT)",
    "right" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT)",
    "info" : "IfStatement[13407-13549]:IfStatement[12241-12383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13498-13549]:Block[12332-12383]"
  }, {
    "left" : "args.addAll(cxxPlatform.getCflags());",
    "right" : "args.addAll(cxxPlatform.getCflags());",
    "info" : "ExpressionStatement[13506-13543]:ExpressionStatement[12340-12377]"
  }, {
    "left" : "if (type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
    "right" : "if (type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
    "info" : "IfStatement[13663-13811]:IfStatement[12497-12645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13758-13811]:Block[12592-12645]"
  }, {
    "left" : "args.addAll(cxxPlatform.getCxxflags());",
    "right" : "args.addAll(cxxPlatform.getCxxflags());",
    "info" : "ExpressionStatement[13766-13805]:ExpressionStatement[12600-12639]"
  }, {
    "left" : "args.addAll(cxxPlatform.getAsflags());",
    "right" : "args.addAll(cxxPlatform.getAsflags());",
    "info" : "ExpressionStatement[13906-13944]:ExpressionStatement[12740-12778]"
  }, {
    "left" : "return args.build();",
    "right" : "return args.build();",
    "info" : "ReturnStatement[13950-13970]:ReturnStatement[12784-12804]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13978-13985]:Modifier[12812-12819]"
  }, {
    "left" : "ImmutableList<String>",
    "right" : "ImmutableList<String>",
    "info" : "ParameterizedType[13986-14007]:ParameterizedType[12820-12841]"
  }, {
    "left" : "getRuleCompileFlags",
    "right" : "getRuleCompileFlags",
    "info" : "SimpleName[14008-14027]:SimpleName[12842-12861]"
  }, {
    "left" : "CxxSource.Type type",
    "right" : "CxxSource.Type type",
    "info" : "SingleVariableDeclaration[14028-14047]:SingleVariableDeclaration[12862-12881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14049-14455]:Block[12883-13289]"
  }, {
    "left" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
    "right" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[14055-14116]:VariableDeclarationStatement[12889-12950]"
  }, {
    "left" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT ||\n        type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
    "right" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT ||\n        type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
    "info" : "IfStatement[14192-14425]:IfStatement[13026-13259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14384-14425]:Block[13218-13259]"
  }, {
    "left" : "args.addAll(compilerFlags);",
    "right" : "args.addAll(compilerFlags);",
    "info" : "ExpressionStatement[14392-14419]:ExpressionStatement[13226-13253]"
  }, {
    "left" : "return args.build();",
    "right" : "return args.build();",
    "info" : "ReturnStatement[14431-14451]:ReturnStatement[13265-13285]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[14603-14621]:MarkerAnnotation[13437-13455]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14624-14630]:Modifier[13458-13464]"
  }, {
    "left" : "CxxPreprocessAndCompile",
    "right" : "CxxPreprocessAndCompile",
    "info" : "SimpleType[14631-14654]:SimpleType[13465-13488]"
  }, {
    "left" : "createCompileBuildRule",
    "right" : "createCompileBuildRule",
    "info" : "SimpleName[14655-14677]:SimpleName[13489-13511]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[14685-14711]:SingleVariableDeclaration[13519-13545]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[14719-14730]:SingleVariableDeclaration[13553-13564]"
  }, {
    "left" : "CxxSource source",
    "right" : "CxxSource source",
    "info" : "SingleVariableDeclaration[14738-14754]:SingleVariableDeclaration[13572-13588]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[14762-14773]:SingleVariableDeclaration[13596-13607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14775-16652]:Block[13609-15486]"
  }, {
    "left" : "Preconditions.checkArgument(CxxSourceTypes.isCompilableType(source.getType()));",
    "right" : "Preconditions.checkArgument(CxxSourceTypes.isCompilableType(source.getType()));",
    "info" : "ExpressionStatement[14782-14861]:ExpressionStatement[13616-13695]"
  }, {
    "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "info" : "VariableDeclarationStatement[14867-14924]:VariableDeclarationStatement[13701-13758]"
  }, {
    "left" : "Compiler compiler = getCompiler(source.getType());",
    "right" : "Compiler compiler = getCompiler(source.getType());",
    "info" : "VariableDeclarationStatement[14929-14979]:VariableDeclarationStatement[13763-13813]"
  }, {
    "left" : "ImmutableSortedSet<BuildRule> dependencies =\n        ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the compiler.\n            .addAll(compiler.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            .build();",
    "right" : "ImmutableSortedSet<BuildRule> dependencies =\n        ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the compiler.\n            .addAll(compiler.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            .build();",
    "info" : "VariableDeclarationStatement[14985-15397]:VariableDeclarationStatement[13819-14231]"
  }, {
    "left" : "ImmutableList<String> platformFlags =\n        ImmutableList.<String>builder()\n            // If we're using pic, add in the appropriate flag.\n            .addAll(pic.getFlags())\n            // Add in the platform specific compiler flags.\n            .addAll(getPlatformCompileFlags(source.getType()))\n            .build();",
    "right" : "ImmutableList<String> platformFlags =\n        ImmutableList.<String>builder()\n            // If we're using pic, add in the appropriate flag.\n            .addAll(pic.getFlags())\n            // Add in the platform specific compiler flags.\n            .addAll(getPlatformCompileFlags(source.getType()))\n            .build();",
    "info" : "VariableDeclarationStatement[15447-15769]:VariableDeclarationStatement[14281-14603]"
  }, {
    "left" : "ImmutableList<String> ruleFlags =\n        ImmutableList.<String>builder()\n            // Add custom compiler flags.\n            .addAll(getRuleCompileFlags(source.getType()))\n            // Add custom per-file flags.\n            .addAll(source.getFlags())\n            .build();",
    "right" : "ImmutableList<String> ruleFlags =\n        ImmutableList.<String>builder()\n            // Add custom compiler flags.\n            .addAll(getRuleCompileFlags(source.getType()))\n            // Add custom per-file flags.\n            .addAll(source.getFlags())\n            .build();",
    "info" : "VariableDeclarationStatement[15775-16052]:VariableDeclarationStatement[14609-14886]"
  }, {
    "left" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.compile(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        compiler,\n        platformFlags,\n        ruleFlags,\n        getCompileOutputPath(target, name),\n        source.getPath(),\n        source.getType(),\n        cxxPlatform.getDebugPathSanitizer());",
    "right" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.compile(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        compiler,\n        platformFlags,\n        ruleFlags,\n        getCompileOutputPath(target, name),\n        source.getPath(),\n        source.getType(),\n        cxxPlatform.getDebugPathSanitizer());",
    "info" : "VariableDeclarationStatement[16136-16596]:VariableDeclarationStatement[14970-15430]"
  }, {
    "left" : "resolver.addToIndex(result);",
    "right" : "resolver.addToIndex(result);",
    "info" : "ExpressionStatement[16601-16629]:ExpressionStatement[15435-15463]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[16634-16648]:ReturnStatement[15468-15482]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[16656-16674]:MarkerAnnotation[15490-15508]"
  }, {
    "left" : "CxxPreprocessAndCompile",
    "right" : "CxxPreprocessAndCompile",
    "info" : "SimpleType[16677-16700]:SimpleType[15511-15534]"
  }, {
    "left" : "requireCompileBuildRule",
    "right" : "requireCompileBuildRule",
    "info" : "SimpleName[16701-16724]:SimpleName[15535-15558]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[16732-16758]:SingleVariableDeclaration[15566-15592]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[16766-16777]:SingleVariableDeclaration[15600-15611]"
  }, {
    "left" : "CxxSource source",
    "right" : "CxxSource source",
    "info" : "SingleVariableDeclaration[16785-16801]:SingleVariableDeclaration[15619-15635]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[16809-16820]:SingleVariableDeclaration[15643-15654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16822-17165]:Block[15656-15999]"
  }, {
    "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "info" : "VariableDeclarationStatement[16829-16886]:VariableDeclarationStatement[15663-15720]"
  }, {
    "left" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
    "right" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
    "info" : "VariableDeclarationStatement[16891-17021]:VariableDeclarationStatement[15725-15855]"
  }, {
    "left" : "if (existingRule.isPresent())",
    "right" : "if (existingRule.isPresent())",
    "info" : "IfStatement[17026-17096]:IfStatement[15860-15930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17056-17096]:Block[15890-15930]"
  }, {
    "left" : "return existingRule.get();",
    "right" : "return existingRule.get();",
    "info" : "ReturnStatement[17064-17090]:ReturnStatement[15898-15924]"
  }, {
    "left" : "return createCompileBuildRule(resolver, name, source, pic);",
    "right" : "return createCompileBuildRule(resolver, name, source, pic);",
    "info" : "ReturnStatement[17102-17161]:ReturnStatement[15936-15995]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[17313-17331]:MarkerAnnotation[18806-18824]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17334-17340]:Modifier[18827-18833]"
  }, {
    "left" : "CxxPreprocessAndCompile",
    "right" : "CxxPreprocessAndCompile",
    "info" : "SimpleType[17341-17364]:SimpleType[18834-18857]"
  }, {
    "left" : "createPreprocessAndCompileBuildRule",
    "right" : "createPreprocessAndCompileBuildRule",
    "info" : "SimpleName[17365-17400]:SimpleName[18858-18893]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[17408-17434]:SingleVariableDeclaration[18901-18927]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[17442-17453]:SingleVariableDeclaration[18935-18946]"
  }, {
    "left" : "CxxSource source",
    "right" : "CxxSource source",
    "info" : "SingleVariableDeclaration[17461-17477]:SingleVariableDeclaration[18954-18970]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[17485-17496]:SingleVariableDeclaration[18978-18989]"
  }, {
    "left" : "CxxPreprocessMode strategy",
    "right" : "CxxPreprocessMode strategy",
    "info" : "SingleVariableDeclaration[17504-17530]:SingleVariableDeclaration[18997-19023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17532-20047]:Block[19025-20446]"
  }, {
    "left" : "Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));",
    "right" : "Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));",
    "info" : "ExpressionStatement[17539-17622]:ExpressionStatement[19032-19115]"
  }, {
    "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "info" : "VariableDeclarationStatement[17628-17685]:VariableDeclarationStatement[19121-19178]"
  }, {
    "left" : "Preprocessor preprocessor = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());",
    "right" : "Preprocessor preprocessor = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());",
    "info" : "VariableDeclarationStatement[17690-17780]:VariableDeclarationStatement[19183-19273]"
  }, {
    "left" : "Compiler compiler = getCompiler(source.getType());",
    "right" : "Compiler compiler = getCompiler(source.getType());",
    "info" : "VariableDeclarationStatement[17785-17835]:VariableDeclarationStatement[19278-19328]"
  }, {
    "left" : "ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the preprocessor.\n            .addAll(compiler.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            // Add in all preprocessor deps.\n            .addAll(preprocessDeps.get())\n            .build()",
    "right" : "ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the preprocessor.\n            .addAll(toolInputs)\n                // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n                // Add in all preprocessor deps.\n            .addAll(preprocessDeps.get())\n            .build()",
    "info" : "MethodInvocation[17894-18343]:MethodInvocation[16335-16770]"
  }, {
    "left" : "ImmutableList.<String>builder()\n        // If we're using pic, add in the appropriate flag.\n        .addAll(pic.getFlags())\n        // Add in the platform specific compiler flags.\n        .addAll(getPlatformCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n        .build()",
    "right" : "ImmutableList.<String>builder()\n        // If we're using pic, add in the appropriate flag.\n        .addAll(pic.getFlags())\n            // Add in the platform specific compiler flags.\n        .addAll(getPlatformCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n        .build()",
    "info" : "MethodInvocation[18440-18737]:MethodInvocation[17538-17839]"
  }, {
    "left" : "ImmutableList.<String>builder()\n        // Add custom compiler flags.\n        .addAll(getRuleCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n        // Add custom per-file flags.\n        .addAll(source.getFlags())\n        .build()",
    "right" : "ImmutableList.<String>builder()\n        // Add custom compiler flags.\n        .addAll(getRuleCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType())))\n            // Add custom per-file flags.\n        .addAll(source.getFlags())\n        .build()",
    "info" : "MethodInvocation[18786-19042]:MethodInvocation[18393-18653]"
  }, {
    "left" : "LOG.verbose(\"Creating preprocess and compile %s for %s\", target, source);",
    "right" : "LOG.verbose(\"Creating preprocess and compile %s for %s\", target, source);",
    "info" : "ExpressionStatement[19049-19122]:ExpressionStatement[19334-19407]"
  }, {
    "left" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.preprocessAndCompile(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        preprocessor,\n        CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, source.getType()),\n        preprocessorFlags.getUnchecked(source.getType()),\n        compiler,\n        platformCompilerFlags,\n        ruleCompilerFlags,\n        getCompileOutputPath(target, name),\n        source.getPath(),\n        source.getType(),\n        includeRoots.get(),\n        systemIncludeRoots.get(),\n        frameworkRoots.get(),\n        includes.get(),\n        cxxPlatform.getDebugPathSanitizer(),\n        strategy);",
    "right" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.preprocessAndCompile(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(\n                computeSourcePreprocessorAndToolDeps(Optional.of((Tool) compiler), source)),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        preprocessor,\n        CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, source.getType()),\n        preprocessorFlags.getUnchecked(source.getType()),\n        compiler,\n        computePlatformCompilerFlags(pic, source),\n        computeRuleCompilerFlags(source),\n        getCompileOutputPath(target, name),\n        source.getPath(),\n        source.getType(),\n        includeRoots.get(),\n        systemIncludeRoots.get(),\n        frameworkRoots.get(),\n        includes.get(),\n        cxxPlatform.getDebugPathSanitizer(),\n        strategy);",
    "info" : "VariableDeclarationStatement[19206-19991]:VariableDeclarationStatement[19491-20390]"
  }, {
    "left" : "resolver.addToIndex(result);",
    "right" : "resolver.addToIndex(result);",
    "info" : "ExpressionStatement[19996-20024]:ExpressionStatement[20395-20423]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[20029-20043]:ReturnStatement[20428-20442]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[20051-20069]:MarkerAnnotation[20450-20468]"
  }, {
    "left" : "CxxPreprocessAndCompile",
    "right" : "CxxPreprocessAndCompile",
    "info" : "SimpleType[20072-20095]:SimpleType[20471-20494]"
  }, {
    "left" : "requirePreprocessAndCompileBuildRule",
    "right" : "requirePreprocessAndCompileBuildRule",
    "info" : "SimpleName[20096-20132]:SimpleName[20495-20531]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[20140-20166]:SingleVariableDeclaration[20539-20565]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[20174-20185]:SingleVariableDeclaration[20573-20584]"
  }, {
    "left" : "CxxSource source",
    "right" : "CxxSource source",
    "info" : "SingleVariableDeclaration[20193-20209]:SingleVariableDeclaration[20592-20608]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[20217-20228]:SingleVariableDeclaration[20616-20627]"
  }, {
    "left" : "CxxPreprocessMode strategy",
    "right" : "CxxPreprocessMode strategy",
    "info" : "SingleVariableDeclaration[20236-20262]:SingleVariableDeclaration[20635-20661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20264-20630]:Block[20663-21029]"
  }, {
    "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
    "info" : "VariableDeclarationStatement[20271-20328]:VariableDeclarationStatement[20670-20727]"
  }, {
    "left" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
    "right" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
    "info" : "VariableDeclarationStatement[20333-20463]:VariableDeclarationStatement[20732-20862]"
  }, {
    "left" : "if (existingRule.isPresent())",
    "right" : "if (existingRule.isPresent())",
    "info" : "IfStatement[20468-20538]:IfStatement[20867-20937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20498-20538]:Block[20897-20937]"
  }, {
    "left" : "return existingRule.get();",
    "right" : "return existingRule.get();",
    "info" : "ReturnStatement[20506-20532]:ReturnStatement[20905-20931]"
  }, {
    "left" : "return createPreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
    "right" : "return createPreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
    "info" : "ReturnStatement[20544-20626]:ReturnStatement[20943-21025]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20634-20641]:Modifier[21033-21040]"
  }, {
    "left" : "ImmutableMap<CxxPreprocessAndCompile, SourcePath>",
    "right" : "ImmutableMap<CxxPreprocessAndCompile, SourcePath>",
    "info" : "ParameterizedType[20642-20691]:ParameterizedType[21041-21090]"
  }, {
    "left" : "requirePreprocessAndCompileRules",
    "right" : "requirePreprocessAndCompileRules",
    "info" : "SimpleName[20692-20724]:SimpleName[21091-21123]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[20732-20758]:SingleVariableDeclaration[21131-21157]"
  }, {
    "left" : "CxxPreprocessMode strategy",
    "right" : "CxxPreprocessMode strategy",
    "info" : "SingleVariableDeclaration[20766-20792]:SingleVariableDeclaration[21165-21191]"
  }, {
    "left" : "ImmutableMap<String, CxxSource> sources",
    "right" : "ImmutableMap<String, CxxSource> sources",
    "info" : "SingleVariableDeclaration[20800-20839]:SingleVariableDeclaration[21199-21238]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[20847-20858]:SingleVariableDeclaration[21246-21257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20860-23075]:Block[21259-23474]"
  }, {
    "left" : "ImmutableList.Builder<CxxPreprocessAndCompile> objects = ImmutableList.builder();",
    "right" : "ImmutableList.Builder<CxxPreprocessAndCompile> objects = ImmutableList.builder();",
    "info" : "VariableDeclarationStatement[20867-20948]:VariableDeclarationStatement[21266-21347]"
  }, {
    "left" : "for (Map.Entry<String, CxxSource> entry : sources.entrySet())",
    "right" : "for (Map.Entry<String, CxxSource> entry : sources.entrySet())",
    "info" : "EnhancedForStatement[20954-22763]:EnhancedForStatement[21353-23162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21016-22763]:Block[21415-23162]"
  }, {
    "left" : "String name = entry.getKey();",
    "right" : "String name = entry.getKey();",
    "info" : "VariableDeclarationStatement[21024-21053]:VariableDeclarationStatement[21423-21452]"
  }, {
    "left" : "CxxSource source = entry.getValue();",
    "right" : "CxxSource source = entry.getValue();",
    "info" : "VariableDeclarationStatement[21060-21096]:VariableDeclarationStatement[21459-21495]"
  }, {
    "left" : "Preconditions.checkState(\n          CxxSourceTypes.isPreprocessableType(source.getType()) ||\n              CxxSourceTypes.isCompilableType(source.getType()));",
    "right" : "Preconditions.checkState(\n          CxxSourceTypes.isPreprocessableType(source.getType()) ||\n              CxxSourceTypes.isCompilableType(source.getType()));",
    "info" : "ExpressionStatement[21104-21262]:ExpressionStatement[21503-21661]"
  }, {
    "left" : "switch (strategy) {\n\n        case PIPED:\n        case COMBINED: {\n          CxxPreprocessAndCompile rule;\n\n          // If it's a preprocessable source, use a combine preprocess-and-compile build rule.\n          // Otherwise, use a regular compile rule.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);\n          } else {\n            rule = requireCompileBuildRule(resolver, name, source, pic);\n          }\n\n          objects.add(rule);\n          break;\n        }\n\n        case SEPARATE: {\n\n          // If this is a preprocessable source, first create the preprocess build rule and\n          // update the source and name to represent its compilable output.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);\n            source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));\n          }\n\n          // Now build the compile build rule.\n          CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);\n          objects.add(rule);\n\n          break;\n        }\n\n        // $CASES-OMITTED$\n        default:\n          throw new IllegalStateException();\n      }",
    "right" : "switch (strategy) {\n\n        case PIPED:\n        case COMBINED: {\n          CxxPreprocessAndCompile rule;\n\n          // If it's a preprocessable source, use a combine preprocess-and-compile build rule.\n          // Otherwise, use a regular compile rule.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);\n          } else {\n            rule = requireCompileBuildRule(resolver, name, source, pic);\n          }\n\n          objects.add(rule);\n          break;\n        }\n\n        case SEPARATE: {\n\n          // If this is a preprocessable source, first create the preprocess build rule and\n          // update the source and name to represent its compilable output.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);\n            source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));\n          }\n\n          // Now build the compile build rule.\n          CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);\n          objects.add(rule);\n\n          break;\n        }\n\n        // $CASES-OMITTED$\n        default:\n          throw new IllegalStateException();\n      }",
    "info" : "SwitchStatement[21270-22757]:SwitchStatement[21669-23156]"
  }, {
    "left" : "case PIPED:",
    "right" : "case PIPED:",
    "info" : "SwitchCase[21299-21310]:SwitchCase[21698-21709]"
  }, {
    "left" : "case COMBINED:",
    "right" : "case COMBINED:",
    "info" : "SwitchCase[21319-21333]:SwitchCase[21718-21732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21334-21851]:Block[21733-22250]"
  }, {
    "left" : "CxxPreprocessAndCompile rule;",
    "right" : "CxxPreprocessAndCompile rule;",
    "info" : "VariableDeclarationStatement[21346-21375]:VariableDeclarationStatement[21745-21774]"
  }, {
    "left" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
    "right" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
    "info" : "IfStatement[21534-21794]:IfStatement[21933-22193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21593-21702]:Block[21992-22101]"
  }, {
    "left" : "rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
    "right" : "rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
    "info" : "ExpressionStatement[21607-21690]:ExpressionStatement[22006-22089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21708-21794]:Block[22107-22193]"
  }, {
    "left" : "rule = requireCompileBuildRule(resolver, name, source, pic);",
    "right" : "rule = requireCompileBuildRule(resolver, name, source, pic);",
    "info" : "ExpressionStatement[21722-21782]:ExpressionStatement[22121-22181]"
  }, {
    "left" : "objects.add(rule);",
    "right" : "objects.add(rule);",
    "info" : "ExpressionStatement[21806-21824]:ExpressionStatement[22205-22223]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21835-21841]:BreakStatement[22234-22240]"
  }, {
    "left" : "case SEPARATE:",
    "right" : "case SEPARATE:",
    "info" : "SwitchCase[21861-21875]:SwitchCase[22260-22274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21876-22659]:Block[22275-23058]"
  }, {
    "left" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
    "right" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
    "info" : "IfStatement[22057-22459]:IfStatement[22456-22858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22116-22459]:Block[22515-22858]"
  }, {
    "left" : "CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);",
    "right" : "CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);",
    "info" : "VariableDeclarationStatement[22130-22217]:VariableDeclarationStatement[22529-22616]"
  }, {
    "left" : "source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));",
    "right" : "source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));",
    "info" : "ExpressionStatement[22230-22447]:ExpressionStatement[22629-22846]"
  }, {
    "left" : "CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);",
    "right" : "CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);",
    "info" : "VariableDeclarationStatement[22518-22602]:VariableDeclarationStatement[22917-23001]"
  }, {
    "left" : "objects.add(rule);",
    "right" : "objects.add(rule);",
    "info" : "ExpressionStatement[22613-22631]:ExpressionStatement[23012-23030]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22643-22649]:BreakStatement[23042-23048]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[22696-22704]:SwitchCase[23095-23103]"
  }, {
    "left" : "throw new IllegalStateException();",
    "right" : "throw new IllegalStateException();",
    "info" : "ThrowStatement[22715-22749]:ThrowStatement[23114-23148]"
  }, {
    "left" : "return FluentIterable\n        .from(objects.build())\n        .toMap(new Function<CxxPreprocessAndCompile, SourcePath>() {\n          @Override\n          public SourcePath apply(CxxPreprocessAndCompile input) {\n            return new BuildTargetSourcePath(input.getBuildTarget());\n          }\n        });",
    "right" : "return FluentIterable\n        .from(objects.build())\n        .toMap(new Function<CxxPreprocessAndCompile, SourcePath>() {\n          @Override\n          public SourcePath apply(CxxPreprocessAndCompile input) {\n            return new BuildTargetSourcePath(input.getBuildTarget());\n          }\n        });",
    "info" : "ReturnStatement[22769-23071]:ReturnStatement[23168-23470]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[22901-22910]:MarkerAnnotation[23300-23309]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22921-22927]:Modifier[23320-23326]"
  }, {
    "left" : "SourcePath",
    "right" : "SourcePath",
    "info" : "SimpleType[22928-22938]:SimpleType[23327-23337]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[22939-22944]:SimpleName[23338-23343]"
  }, {
    "left" : "CxxPreprocessAndCompile input",
    "right" : "CxxPreprocessAndCompile input",
    "info" : "SingleVariableDeclaration[22945-22974]:SingleVariableDeclaration[23344-23373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22976-23059]:Block[23375-23458]"
  }, {
    "left" : "return new BuildTargetSourcePath(input.getBuildTarget());",
    "right" : "return new BuildTargetSourcePath(input.getBuildTarget());",
    "info" : "ReturnStatement[22990-23047]:ReturnStatement[23389-23446]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23079-23085]:Modifier[23478-23484]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23086-23092]:Modifier[23485-23491]"
  }, {
    "left" : "ImmutableMap<CxxPreprocessAndCompile, SourcePath>",
    "right" : "ImmutableMap<CxxPreprocessAndCompile, SourcePath>",
    "info" : "ParameterizedType[23093-23142]:ParameterizedType[23492-23541]"
  }, {
    "left" : "requirePreprocessAndCompileRules",
    "right" : "requirePreprocessAndCompileRules",
    "info" : "SimpleName[23143-23175]:SimpleName[23542-23574]"
  }, {
    "left" : "BuildRuleParams params",
    "right" : "BuildRuleParams params",
    "info" : "SingleVariableDeclaration[23183-23205]:SingleVariableDeclaration[23582-23604]"
  }, {
    "left" : "BuildRuleResolver resolver",
    "right" : "BuildRuleResolver resolver",
    "info" : "SingleVariableDeclaration[23213-23239]:SingleVariableDeclaration[23612-23638]"
  }, {
    "left" : "SourcePathResolver pathResolver",
    "right" : "SourcePathResolver pathResolver",
    "info" : "SingleVariableDeclaration[23247-23278]:SingleVariableDeclaration[23646-23677]"
  }, {
    "left" : "CxxPlatform cxxPlatform",
    "right" : "CxxPlatform cxxPlatform",
    "info" : "SingleVariableDeclaration[23286-23309]:SingleVariableDeclaration[23685-23708]"
  }, {
    "left" : "ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput",
    "right" : "ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput",
    "info" : "SingleVariableDeclaration[23317-23373]:SingleVariableDeclaration[23716-23772]"
  }, {
    "left" : "ImmutableList<String> compilerFlags",
    "right" : "ImmutableList<String> compilerFlags",
    "info" : "SingleVariableDeclaration[23381-23416]:SingleVariableDeclaration[23780-23815]"
  }, {
    "left" : "CxxPreprocessMode strategy",
    "right" : "CxxPreprocessMode strategy",
    "info" : "SingleVariableDeclaration[23424-23450]:SingleVariableDeclaration[23823-23849]"
  }, {
    "left" : "ImmutableMap<String, CxxSource> sources",
    "right" : "ImmutableMap<String, CxxSource> sources",
    "info" : "SingleVariableDeclaration[23458-23497]:SingleVariableDeclaration[23857-23896]"
  }, {
    "left" : "PicType pic",
    "right" : "PicType pic",
    "info" : "SingleVariableDeclaration[23505-23516]:SingleVariableDeclaration[23904-23915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23518-23834]:Block[23917-24233]"
  }, {
    "left" : "CxxSourceRuleFactory factory =\n        new CxxSourceRuleFactory(\n            params,\n            resolver,\n            pathResolver,\n            cxxPlatform,\n            cxxPreprocessorInput,\n            compilerFlags);",
    "right" : "CxxSourceRuleFactory factory =\n        new CxxSourceRuleFactory(\n            params,\n            resolver,\n            pathResolver,\n            cxxPlatform,\n            cxxPreprocessorInput,\n            compilerFlags);",
    "info" : "VariableDeclarationStatement[23524-23743]:VariableDeclarationStatement[23923-24142]"
  }, {
    "left" : "return factory.requirePreprocessAndCompileRules(resolver, strategy, sources, pic);",
    "right" : "return factory.requirePreprocessAndCompileRules(resolver, strategy, sources, pic);",
    "info" : "ReturnStatement[23748-23830]:ReturnStatement[24147-24229]"
  }, {
    "left" : "PicType",
    "right" : "PicType",
    "info" : "SimpleName[24061-24068]:SimpleName[24460-24467]"
  }, {
    "left" : "String... flags",
    "right" : "String... flags",
    "info" : "SingleVariableDeclaration[24069-24084]:SingleVariableDeclaration[24468-24483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24086-24141]:Block[24485-24540]"
  }, {
    "left" : "this.flags = ImmutableList.copyOf(flags);",
    "right" : "this.flags = ImmutableList.copyOf(flags);",
    "info" : "ExpressionStatement[24094-24135]:ExpressionStatement[24493-24534]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24147-24153]:Modifier[24546-24552]"
  }, {
    "left" : "ImmutableList<String>",
    "right" : "ImmutableList<String>",
    "info" : "ParameterizedType[24154-24175]:ParameterizedType[24553-24574]"
  }, {
    "left" : "getFlags",
    "right" : "getFlags",
    "info" : "SimpleName[24176-24184]:SimpleName[24575-24583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24187-24214]:Block[24586-24613]"
  }, {
    "left" : "return flags;",
    "right" : "return flags;",
    "info" : "ReturnStatement[24195-24208]:ReturnStatement[24594-24607]"
  } ]
}