{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "KafkaStreamImporter",
      "right" : "KafkaStreamImporter",
      "info" : "TypeDeclaration[2564-38518]:TypeDeclaration[2822-41161]"
    }, {
      "left" : "private Properties m_properties;",
      "right" : "private Properties m_properties;",
      "info" : "FieldDeclaration[2913-2945]:FieldDeclaration[3482-3514]"
    }, {
      "left" : "private String m_groupId;",
      "right" : "private String m_groupId;",
      "info" : "FieldDeclaration[2965-2990]:FieldDeclaration[3534-3559]"
    }, {
      "left" : "private String m_procedure;",
      "right" : "private String m_procedure;",
      "info" : "FieldDeclaration[3038-3065]:FieldDeclaration[3607-3634]"
    }, {
      "left" : "private int m_backpressureSleepMs = 200;",
      "right" : "private int m_backpressureSleepMs = 200;",
      "info" : "FieldDeclaration[3127-3167]:FieldDeclaration[3696-3736]"
    }, {
      "left" : "private List<String> m_topicList;",
      "right" : "private List<String> m_topicList;",
      "info" : "FieldDeclaration[3221-3254]:FieldDeclaration[3790-3823]"
    }, {
      "left" : "private final List<HostAndPort> m_brokerList = new ArrayList<HostAndPort>();",
      "right" : "private final List<HostAndPort> m_brokerList = new ArrayList<HostAndPort>();",
      "info" : "FieldDeclaration[3282-3358]:FieldDeclaration[3851-3927]"
    }, {
      "left" : "private int m_fetchSize = (2*1024*1024);",
      "right" : "private int m_fetchSize = (2*1024*1024);",
      "info" : "FieldDeclaration[3423-3463]:FieldDeclaration[3992-4032]"
    }, {
      "left" : "private int m_consumerSocketTimeout = 30000;",
      "right" : "private int m_consumerSocketTimeout = 30000;",
      "info" : "FieldDeclaration[3468-3512]:FieldDeclaration[4037-4081]"
    }, {
      "left" : "private static final String GROUP_ID = \"voltdb\";",
      "right" : "private static final String GROUP_ID = \"voltdb\";",
      "info" : "FieldDeclaration[3536-3584]:FieldDeclaration[4105-4153]"
    }, {
      "left" : "private static final String CLIENT_ID = \"voltdb-importer\";",
      "right" : "private static final String CLIENT_ID = \"voltdb-importer\";",
      "info" : "FieldDeclaration[3589-3647]:FieldDeclaration[4158-4216]"
    }, {
      "left" : "private static final int KAFKA_DEFAULT_BROKER_PORT = 9092;",
      "right" : "private static final int KAFKA_DEFAULT_BROKER_PORT = 9092;",
      "info" : "FieldDeclaration[3652-3710]:FieldDeclaration[4221-4279]"
    }, {
      "left" : "private final Semaphore m_done = new Semaphore(0);",
      "right" : "private final Semaphore m_done = new Semaphore(0);",
      "info" : "FieldDeclaration[3775-3825]:FieldDeclaration[4344-4394]"
    }, {
      "left" : "private boolean m_stopping = false;",
      "right" : "private boolean m_stopping = false;",
      "info" : "FieldDeclaration[3830-3865]:FieldDeclaration[4399-4434]"
    }, {
      "left" : "private final Map<String, List<TopicMetadata>> m_topicPartitionMetaData = new HashMap<String, List<TopicMetadata>>();",
      "right" : "private final Map<String, List<TopicMetadata>> m_topicPartitionMetaData = new HashMap<String, List<TopicMetadata>>();",
      "info" : "FieldDeclaration[3902-4019]:FieldDeclaration[4471-4588]"
    }, {
      "left" : "private final Map<String, List<Integer>> m_topicPartitions = new HashMap<String, List<Integer>>();",
      "right" : "private final Map<String, List<Integer>> m_topicPartitions = new HashMap<String, List<Integer>>();",
      "info" : "FieldDeclaration[4047-4145]:FieldDeclaration[4616-4714]"
    }, {
      "left" : "private final Map<String, HostAndPort> m_topicPartitionLeader = new HashMap<String, HostAndPort>();",
      "right" : "private final Map<String, HostAndPort> m_topicPartitionLeader = new HashMap<String, HostAndPort>();",
      "info" : "FieldDeclaration[4179-4278]:FieldDeclaration[4748-4847]"
    }, {
      "left" : "private final Map<String, TopicPartitionFetcher> m_fetchers = new HashMap<String, TopicPartitionFetcher>();",
      "right" : "private final Map<String, TopicPartitionFetcher> m_fetchers = new HashMap<String, TopicPartitionFetcher>();",
      "info" : "FieldDeclaration[4283-4390]:FieldDeclaration[4852-4959]"
    }, {
      "left" : "private ExecutorService m_es = null;",
      "right" : "private ExecutorService m_es = null;",
      "info" : "FieldDeclaration[4396-4432]:FieldDeclaration[4965-5001]"
    }, {
      "left" : "private static final Pattern legalTopicNamesPattern = Pattern.compile(\"[a-zA-Z0-9\\\\._\\\\-]+\");",
      "right" : "private static final Pattern legalTopicNamesPattern = Pattern.compile(\"[a-zA-Z0-9\\\\._\\\\-]+\");",
      "info" : "FieldDeclaration[4438-4531]:FieldDeclaration[5007-5100]"
    }, {
      "left" : "private static final int topicMaxNameLength = 255;",
      "right" : "private static final int topicMaxNameLength = 255;",
      "info" : "FieldDeclaration[4536-4586]:FieldDeclaration[5105-5155]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "TypeDeclaration[4700-6185]:TypeDeclaration[5269-6754]"
    }, {
      "left" : "private final String m_host;",
      "right" : "private final String m_host;",
      "info" : "FieldDeclaration[4743-4771]:FieldDeclaration[5312-5340]"
    }, {
      "left" : "private final int m_port;",
      "right" : "private final int m_port;",
      "info" : "FieldDeclaration[4780-4805]:FieldDeclaration[5349-5374]"
    }, {
      "left" : "private final String m_connectionString;",
      "right" : "private final String m_connectionString;",
      "info" : "FieldDeclaration[4814-4854]:FieldDeclaration[5383-5423]"
    }, {
      "left" : "public HostAndPort(String h, int p)",
      "right" : "public HostAndPort(String h, int p)",
      "info" : "MethodDeclaration[4864-5015]:MethodDeclaration[5433-5584]"
    }, {
      "left" : "public static HostAndPort fromString(String hap)",
      "right" : "public static HostAndPort fromString(String hap)",
      "info" : "MethodDeclaration[5025-5359]:MethodDeclaration[5594-5928]"
    }, {
      "left" : "public String getHost()",
      "right" : "public String getHost()",
      "info" : "MethodDeclaration[5369-5431]:MethodDeclaration[5938-6000]"
    }, {
      "left" : "public int getPort()",
      "right" : "public int getPort()",
      "info" : "MethodDeclaration[5441-5500]:MethodDeclaration[6010-6069]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[5510-5606]:MethodDeclaration[6079-6175]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[5616-5717]:MethodDeclaration[6185-6286]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[5727-6179]:MethodDeclaration[6296-6748]"
    }, {
      "left" : "public void start(BundleContext context) throws Exception",
      "right" : "public void start(BundleContext context) throws Exception",
      "info" : "MethodDeclaration[6235-6386]:MethodDeclaration[6804-6955]"
    }, {
      "left" : "public void stop(BundleContext context) throws Exception",
      "right" : "public void stop(BundleContext context) throws Exception",
      "info" : "MethodDeclaration[6392-6511]:MethodDeclaration[6961-7080]"
    }, {
      "left" : "public boolean isRunEveryWhere()",
      "right" : "public boolean isRunEveryWhere()",
      "info" : "MethodDeclaration[6517-6691]:MethodDeclaration[7086-7260]"
    }, {
      "left" : "private Set<URI> buildTopicLeaderMetadata(SimpleConsumer consumer)",
      "right" : "private Set<URI> buildTopicLeaderMetadata(SimpleConsumer consumer)",
      "info" : "MethodDeclaration[6799-8993]:MethodDeclaration[7368-9486]"
    }, {
      "left" : "public Set<URI> getAllResponsibleResources()",
      "right" : "public Set<URI> getAllResponsibleResources()",
      "info" : "MethodDeclaration[8999-9707]:MethodDeclaration[9492-10200]"
    }, {
      "left" : "public void stop()",
      "right" : "public void stop()",
      "info" : "MethodDeclaration[9713-10313]:MethodDeclaration[10206-10806]"
    }, {
      "left" : "public String getName()",
      "right" : "public String getName()",
      "info" : "MethodDeclaration[10319-10517]:MethodDeclaration[10812-11010]"
    }, {
      "left" : "public void configure(Properties p)",
      "right" : "public void configure(Properties p)",
      "info" : "MethodDeclaration[10523-13220]:MethodDeclaration[11016-13713]"
    }, {
      "left" : "TopicPartitionFetcher",
      "right" : "TopicPartitionFetcher",
      "info" : "TypeDeclaration[13285-34772]:TypeDeclaration[13778-36823]"
    }, {
      "left" : "private final URI m_url;",
      "right" : "private final URI m_url;",
      "info" : "FieldDeclaration[13384-13408]:FieldDeclaration[13877-13901]"
    }, {
      "left" : "private final HostAndPort m_leader;",
      "right" : "private HostAndPort m_leader;",
      "info" : "FieldDeclaration[13452-13487]:FieldDeclaration[13945-13974]"
    }, {
      "left" : "private HostAndPort m_coordinator;",
      "right" : "private HostAndPort m_coordinator;",
      "info" : "FieldDeclaration[13541-13575]:FieldDeclaration[14028-14062]"
    }, {
      "left" : "private boolean m_shutdown = false;",
      "right" : "private boolean m_shutdown = false;",
      "info" : "FieldDeclaration[13584-13619]:FieldDeclaration[14071-14106]"
    }, {
      "left" : "private volatile boolean m_hasBackPressure = false;",
      "right" : "private volatile boolean m_hasBackPressure = false;",
      "info" : "FieldDeclaration[13628-13679]:FieldDeclaration[14115-14166]"
    }, {
      "left" : "private final int m_fetchSize;",
      "right" : "private final int m_fetchSize;",
      "info" : "FieldDeclaration[13688-13718]:FieldDeclaration[14175-14205]"
    }, {
      "left" : "private final List<HostAndPort> m_brokers;",
      "right" : "private final List<HostAndPort> m_brokers;",
      "info" : "FieldDeclaration[13756-13798]:FieldDeclaration[14243-14285]"
    }, {
      "left" : "private final int m_consumerSocketTimeout;",
      "right" : "private final int m_consumerSocketTimeout;",
      "info" : "FieldDeclaration[13807-13849]:FieldDeclaration[14294-14336]"
    }, {
      "left" : "private final AtomicLong m_currentOffset = new AtomicLong(-1);",
      "right" : "private final AtomicLong m_currentOffset = new AtomicLong(-1);",
      "info" : "FieldDeclaration[13914-13976]:FieldDeclaration[14401-14463]"
    }, {
      "left" : "private final SortedSet<Long> m_pendingOffsets = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "right" : "private final SortedSet<Long> m_pendingOffsets = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "info" : "FieldDeclaration[13985-14089]:FieldDeclaration[14472-14576]"
    }, {
      "left" : "private final SortedSet<Long> m_seenOffset = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "right" : "private final SortedSet<Long> m_seenOffset = Collections.synchronizedSortedSet(new TreeSet<Long>());",
      "info" : "FieldDeclaration[14098-14198]:FieldDeclaration[14585-14685]"
    }, {
      "left" : "private final AtomicReference<SimpleConsumer> m_offsetManager = new AtomicReference<SimpleConsumer>();",
      "right" : "private final AtomicReference<SimpleConsumer> m_offsetManager = new AtomicReference<SimpleConsumer>();",
      "info" : "FieldDeclaration[14207-14309]:FieldDeclaration[14694-14796]"
    }, {
      "left" : "private final TopicAndPartition m_topicAndPartition;",
      "right" : "private final TopicAndPartition m_topicAndPartition;",
      "info" : "FieldDeclaration[14318-14370]:FieldDeclaration[14855-14907]"
    }, {
      "left" : "public TopicPartitionFetcher(List<HostAndPort> brokers, URI uri, String topic, int partition, HostAndPort leader, int fetchSize, int consumerSocketTimeout)",
      "right" : "public TopicPartitionFetcher(List<HostAndPort> brokers, URI uri, String topic, int partition, HostAndPort leader, int fetchSize, int consumerSocketTimeout)",
      "info" : "MethodDeclaration[14380-14845]:MethodDeclaration[14917-15382]"
    }, {
      "left" : "public final URI getUrl()",
      "right" : "public final URI getUrl()",
      "info" : "MethodDeclaration[14855-14918]:MethodDeclaration[15392-15455]"
    }, {
      "left" : "public void hasBackPressure(boolean flag)",
      "right" : "public void hasBackPressure(boolean flag)",
      "info" : "MethodDeclaration[14928-15019]:MethodDeclaration[15465-15556]"
    }, {
      "left" : "private PartitionMetadata findLeader()",
      "right" : "private PartitionMetadata findLeader()",
      "info" : "MethodDeclaration[15076-16605]:MethodDeclaration[15613-17130]"
    }, {
      "left" : "private HostAndPort findNewLeader()",
      "right" : "private HostAndPort findNewLeader()",
      "info" : "MethodDeclaration[16663-17798]:MethodDeclaration[17188-18323]"
    }, {
      "left" : "public void shutdown()",
      "right" : "public void shutdown()",
      "info" : "MethodDeclaration[17884-17949]:MethodDeclaration[18409-18474]"
    }, {
      "left" : "public void getOffsetCoordinator()",
      "right" : "public void getOffsetCoordinator()",
      "info" : "MethodDeclaration[17959-20125]:MethodDeclaration[18484-21374]"
    }, {
      "left" : "public long getLastOffset(long whichTime)",
      "right" : "public long getLastOffset()",
      "info" : "MethodDeclaration[20135-22343]:MethodDeclaration[24202-25093]"
    }, {
      "left" : "TopicPartitionInvocationCallback",
      "right" : "TopicPartitionInvocationCallback",
      "info" : "TypeDeclaration[22411-23281]:TypeDeclaration[25161-26031]"
    }, {
      "left" : "private final long m_offset;",
      "right" : "private final long m_offset;",
      "info" : "FieldDeclaration[22502-22530]:FieldDeclaration[25252-25280]"
    }, {
      "left" : "private final long m_nextOffset;",
      "right" : "private final long m_nextOffset;",
      "info" : "FieldDeclaration[22543-22575]:FieldDeclaration[25293-25325]"
    }, {
      "left" : "private final AtomicLong m_cbcnt;",
      "right" : "private final AtomicLong m_cbcnt;",
      "info" : "FieldDeclaration[22588-22621]:FieldDeclaration[25338-25371]"
    }, {
      "left" : "public TopicPartitionInvocationCallback(long offset, long noffset, AtomicLong cbcnt)",
      "right" : "public TopicPartitionInvocationCallback(long offset, long noffset, AtomicLong cbcnt)",
      "info" : "MethodDeclaration[22635-22843]:MethodDeclaration[25385-25593]"
    }, {
      "left" : "public void clientCallback(ClientResponse response) throws Exception",
      "right" : "public void clientCallback(ClientResponse response) throws Exception",
      "info" : "MethodDeclaration[22857-23270]:MethodDeclaration[25607-26020]"
    }, {
      "left" : "private int backoffSleep(int fetchFailedCount)",
      "right" : "private int backoffSleep(int fetchFailedCount)",
      "info" : "MethodDeclaration[23321-23618]:MethodDeclaration[26071-26368]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[23628-32223]:MethodDeclaration[27326-34032]"
    }, {
      "left" : "public boolean commitOffset()",
      "right" : "public boolean commitOffset()",
      "info" : "MethodDeclaration[32233-34765]:MethodDeclaration[34042-36816]"
    }, {
      "left" : "public void closeConsumer(SimpleConsumer consumer)",
      "right" : "public void closeConsumer(SimpleConsumer consumer)",
      "info" : "MethodDeclaration[34778-35038]:MethodDeclaration[36829-37089]"
    }, {
      "left" : "public void hasBackPressure(boolean flag)",
      "right" : "public void hasBackPressure(boolean flag)",
      "info" : "MethodDeclaration[35044-35260]:MethodDeclaration[37095-37311]"
    }, {
      "left" : "public void onChange(ImporterChannelAssignment assignment)",
      "right" : "public void onChange(ImporterChannelAssignment assignment)",
      "info" : "MethodDeclaration[35309-37921]:MethodDeclaration[37360-39960]"
    }, {
      "left" : "public void onClusterStateChange(VersionedOperationMode mode)",
      "right" : "public void onClusterStateChange(VersionedOperationMode mode)",
      "info" : "MethodDeclaration[37950-38093]:MethodDeclaration[39989-40132]"
    }, {
      "left" : "public void readyForData()",
      "right" : "public void readyForData()",
      "info" : "MethodDeclaration[38099-38515]:MethodDeclaration[40138-40554]"
    } ],
    "mappings" : [
 {
      "left" : "java.nio.channels.ClosedChannelException",
      "right" : "java.io.IOException",
      "info" : "QualifiedName[835-875]:QualifiedName[888-907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2785-2791]:Modifier[3043-3049]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2792-2797]:TYPE_DECLARATION_KIND[3050-3055]"
    }, {
      "left" : "KafkaStreamImporter",
      "right" : "KafkaStreamImporter",
      "info" : "SimpleName[2798-2817]:SimpleName[3056-3075]"
    }, {
      "left" : "ImportHandlerProxy",
      "right" : "ImportHandlerProxy",
      "info" : "SimpleType[2826-2844]:SimpleType[3084-3102]"
    }, {
      "left" : "BundleActivator",
      "right" : "BundleActivator",
      "info" : "SimpleType[2856-2871]:SimpleType[3114-3129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4700-4706]:Modifier[5269-5275]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4707-4713]:Modifier[5276-5282]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4714-4719]:TYPE_DECLARATION_KIND[5283-5288]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleName[4720-4731]:SimpleName[5289-5300]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4864-4870]:Modifier[5433-5439]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleName[4871-4882]:SimpleName[5440-5451]"
    }, {
      "left" : "String h",
      "right" : "String h",
      "info" : "SingleVariableDeclaration[4883-4891]:SingleVariableDeclaration[5452-5460]"
    }, {
      "left" : "int p",
      "right" : "int p",
      "info" : "SingleVariableDeclaration[4893-4898]:SingleVariableDeclaration[5462-5467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4900-5015]:Block[5469-5584]"
    }, {
      "left" : "m_host = h;",
      "right" : "m_host = h;",
      "info" : "ExpressionStatement[4914-4925]:ExpressionStatement[5483-5494]"
    }, {
      "left" : "m_port = p;",
      "right" : "m_port = p;",
      "info" : "ExpressionStatement[4938-4949]:ExpressionStatement[5507-5518]"
    }, {
      "left" : "m_connectionString = m_host + \":\" + m_port;",
      "right" : "m_connectionString = m_host + \":\" + m_port;",
      "info" : "ExpressionStatement[4962-5005]:ExpressionStatement[5531-5574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5025-5031]:Modifier[5594-5600]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5032-5038]:Modifier[5601-5607]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleType[5039-5050]:SimpleType[5608-5619]"
    }, {
      "left" : "fromString",
      "right" : "fromString",
      "info" : "SimpleName[5051-5061]:SimpleName[5620-5630]"
    }, {
      "left" : "String hap",
      "right" : "String hap",
      "info" : "SingleVariableDeclaration[5062-5072]:SingleVariableDeclaration[5631-5641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5074-5359]:Block[5643-5928]"
    }, {
      "left" : "String s[] = hap.split(\":\");",
      "right" : "String s[] = hap.split(\":\");",
      "info" : "VariableDeclarationStatement[5088-5116]:VariableDeclarationStatement[5657-5685]"
    }, {
      "left" : "int p = KAFKA_DEFAULT_BROKER_PORT;",
      "right" : "int p = KAFKA_DEFAULT_BROKER_PORT;",
      "info" : "VariableDeclarationStatement[5129-5163]:VariableDeclarationStatement[5698-5732]"
    }, {
      "left" : "if (s.length > 1 && s[1] != null && s[1].length() > 0)",
      "right" : "if (s.length > 1 && s[1] != null && s[1].length() > 0)",
      "info" : "IfStatement[5176-5297]:IfStatement[5745-5866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5231-5297]:Block[5800-5866]"
    }, {
      "left" : "p = Integer.parseInt(s[1].trim());",
      "right" : "p = Integer.parseInt(s[1].trim());",
      "info" : "ExpressionStatement[5249-5283]:ExpressionStatement[5818-5852]"
    }, {
      "left" : "return new HostAndPort(s[0].trim(), p);",
      "right" : "return new HostAndPort(s[0].trim(), p);",
      "info" : "ReturnStatement[5310-5349]:ReturnStatement[5879-5918]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5369-5375]:Modifier[5938-5944]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5376-5382]:SimpleType[5945-5951]"
    }, {
      "left" : "getHost",
      "right" : "getHost",
      "info" : "SimpleName[5383-5390]:SimpleName[5952-5959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5393-5431]:Block[5962-6000]"
    }, {
      "left" : "return m_host;",
      "right" : "return m_host;",
      "info" : "ReturnStatement[5407-5421]:ReturnStatement[5976-5990]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5441-5447]:Modifier[6010-6016]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5448-5451]:PrimitiveType[6017-6020]"
    }, {
      "left" : "getPort",
      "right" : "getPort",
      "info" : "SimpleName[5452-5459]:SimpleName[6021-6028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5462-5500]:Block[6031-6069]"
    }, {
      "left" : "return m_port;",
      "right" : "return m_port;",
      "info" : "ReturnStatement[5476-5490]:ReturnStatement[6045-6059]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5510-5519]:MarkerAnnotation[6079-6088]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5528-5534]:Modifier[6097-6103]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5535-5541]:SimpleType[6104-6110]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[5542-5550]:SimpleName[6111-6119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5553-5606]:Block[6122-6175]"
    }, {
      "left" : "return m_host + \":\" + m_port;",
      "right" : "return m_host + \":\" + m_port;",
      "info" : "ReturnStatement[5567-5596]:ReturnStatement[6136-6165]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5616-5625]:MarkerAnnotation[6185-6194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5634-5640]:Modifier[6203-6209]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5641-5644]:PrimitiveType[6210-6213]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[5645-5653]:SimpleName[6214-6222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5656-5717]:Block[6225-6286]"
    }, {
      "left" : "return m_connectionString.hashCode();",
      "right" : "return m_connectionString.hashCode();",
      "info" : "ReturnStatement[5670-5707]:ReturnStatement[6239-6276]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5727-5736]:MarkerAnnotation[6296-6305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5745-5751]:Modifier[6314-6320]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5752-5759]:PrimitiveType[6321-6328]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[5760-5766]:SimpleName[6329-6335]"
    }, {
      "left" : "Object o",
      "right" : "Object o",
      "info" : "SingleVariableDeclaration[5767-5775]:SingleVariableDeclaration[6336-6344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5777-6179]:Block[6346-6748]"
    }, {
      "left" : "if (!(o instanceof HostAndPort))",
      "right" : "if (!(o instanceof HostAndPort))",
      "info" : "IfStatement[5791-5869]:IfStatement[6360-6438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5869]:Block[6393-6438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5842-5855]:ReturnStatement[6411-6424]"
    }, {
      "left" : "if (this.getClass() != o.getClass())",
      "right" : "if (this.getClass() != o.getClass())",
      "info" : "IfStatement[5882-5964]:IfStatement[6451-6533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5919-5964]:Block[6488-6533]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5937-5950]:ReturnStatement[6506-6519]"
    }, {
      "left" : "HostAndPort hap = (HostAndPort )o;",
      "right" : "HostAndPort hap = (HostAndPort )o;",
      "info" : "VariableDeclarationStatement[5977-6011]:VariableDeclarationStatement[6546-6580]"
    }, {
      "left" : "if (hap == this)",
      "right" : "if (hap == this)",
      "info" : "IfStatement[6024-6085]:IfStatement[6593-6654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6041-6085]:Block[6610-6654]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6059-6071]:ReturnStatement[6628-6640]"
    }, {
      "left" : "return (hap.getHost().equals(getHost()) && hap.getPort() == getPort());",
      "right" : "return (hap.getHost().equals(getHost()) && hap.getPort() == getPort());",
      "info" : "ReturnStatement[6098-6169]:ReturnStatement[6667-6738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6235-6244]:MarkerAnnotation[6804-6813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6249-6255]:Modifier[6818-6824]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6256-6260]:PrimitiveType[6825-6829]"
    }, {
      "left" : "start",
      "right" : "start",
      "info" : "SimpleName[6261-6266]:SimpleName[6830-6835]"
    }, {
      "left" : "BundleContext context",
      "right" : "BundleContext context",
      "info" : "SingleVariableDeclaration[6267-6288]:SingleVariableDeclaration[6836-6857]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6297-6306]:SimpleType[6866-6875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6307-6386]:Block[6876-6955]"
    }, {
      "left" : "context.registerService(this.getClass().getName(), this, null);",
      "right" : "context.registerService(this.getClass().getName(), this, null);",
      "info" : "ExpressionStatement[6317-6380]:ExpressionStatement[6886-6949]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6392-6401]:MarkerAnnotation[6961-6970]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6406-6412]:Modifier[6975-6981]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6413-6417]:PrimitiveType[6982-6986]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[6418-6422]:SimpleName[6987-6991]"
    }, {
      "left" : "BundleContext context",
      "right" : "BundleContext context",
      "info" : "SingleVariableDeclaration[6423-6444]:SingleVariableDeclaration[6992-7013]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6453-6462]:SimpleType[7022-7031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6463-6511]:Block[7032-7080]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6517-6526]:MarkerAnnotation[7086-7095]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6531-6537]:Modifier[7100-7106]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6538-6545]:PrimitiveType[7107-7114]"
    }, {
      "left" : "isRunEveryWhere",
      "right" : "isRunEveryWhere",
      "info" : "SimpleName[6546-6561]:SimpleName[7115-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6564-6691]:Block[7133-7260]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6672-6685]:ReturnStatement[7241-7254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6799-6806]:Modifier[7368-7375]"
    }, {
      "left" : "Set<URI>",
      "right" : "Set<URI>",
      "info" : "ParameterizedType[6807-6815]:ParameterizedType[7376-7384]"
    }, {
      "left" : "buildTopicLeaderMetadata",
      "right" : "buildTopicLeaderMetadata",
      "info" : "SimpleName[6816-6840]:SimpleName[7385-7409]"
    }, {
      "left" : "SimpleConsumer consumer",
      "right" : "SimpleConsumer consumer",
      "info" : "SingleVariableDeclaration[6841-6864]:SingleVariableDeclaration[7410-7433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6866-8993]:Block[7435-9486]"
    }, {
      "left" : "Set<URI> availableResources = new TreeSet<URI>();",
      "right" : "Set<URI> availableResources = new TreeSet<URI>();",
      "info" : "VariableDeclarationStatement[6928-6977]:VariableDeclarationStatement[7497-7546]"
    }, {
      "left" : "for (String topic : m_topicList)",
      "right" : "for (String topic : m_topicList)",
      "info" : "EnhancedForStatement[6986-8646]:EnhancedForStatement[7555-9139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7019-8646]:Block[7588-9139]"
    }, {
      "left" : "TopicMetadataRequest req = new TopicMetadataRequest(Collections.singletonList(topic));",
      "right" : "TopicMetadataRequest req = new TopicMetadataRequest(singletonList(topic));",
      "info" : "VariableDeclarationStatement[7033-7119]:VariableDeclarationStatement[7602-7676]"
    }, {
      "left" : "kafka.javaapi.TopicMetadataResponse resp = null;",
      "right" : "kafka.javaapi.TopicMetadataResponse resp = null;",
      "info" : "VariableDeclarationStatement[7132-7180]:VariableDeclarationStatement[7689-7737]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7193-7441]:TryStatement[7750-7998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7197-7255]:Block[7754-7812]"
    }, {
      "left" : "resp = consumer.send(req);",
      "right" : "resp = consumer.send(req);",
      "info" : "ExpressionStatement[7215-7241]:ExpressionStatement[7772-7798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7277-7441]:Block[7834-7998]"
    }, {
      "left" : "error(ex, \"Failed to send topic metadata request for topic \" + topic);",
      "right" : "error(ex, \"Failed to send topic metadata request for topic \" + topic);",
      "info" : "ExpressionStatement[7331-7401]:ExpressionStatement[7888-7958]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7418-7427]:ContinueStatement[7975-7984]"
    }, {
      "left" : "List<TopicMetadata> metaData = resp.topicsMetadata();",
      "right" : "List<TopicMetadata> metaData = resp.topicsMetadata();",
      "info" : "VariableDeclarationStatement[7455-7508]:VariableDeclarationStatement[8012-8065]"
    }, {
      "left" : "if (metaData == null)",
      "right" : "if (metaData == null)",
      "info" : "IfStatement[7521-7689]:IfStatement[8078-8246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7543-7689]:Block[8100-8246]"
    }, {
      "left" : "error(\"Failed to get topic metadata for topic \" + topic);",
      "right" : "error(\"Failed to get topic metadata for topic \" + topic);",
      "info" : "ExpressionStatement[7592-7649]:ExpressionStatement[8149-8206]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7666-7675]:ContinueStatement[8223-8232]"
    }, {
      "left" : "m_topicPartitionMetaData.put(topic, metaData);",
      "right" : "m_topicPartitionMetaData.put(topic, metaData);",
      "info" : "ExpressionStatement[7702-7748]:ExpressionStatement[8259-8305]"
    }, {
      "left" : "List<Integer> partitions = m_topicPartitions.get(topic);",
      "right" : "List<Integer> partitions = m_topicPartitions.get(topic);",
      "info" : "VariableDeclarationStatement[7761-7817]:VariableDeclarationStatement[8318-8374]"
    }, {
      "left" : "if (partitions == null)",
      "right" : "if (partitions == null)",
      "info" : "IfStatement[7830-7982]:IfStatement[8387-8539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7854-7982]:Block[8411-8539]"
    }, {
      "left" : "partitions = new ArrayList<Integer>();",
      "right" : "partitions = new ArrayList<Integer>();",
      "info" : "ExpressionStatement[7872-7910]:ExpressionStatement[8429-8467]"
    }, {
      "left" : "m_topicPartitions.put(topic, partitions);",
      "right" : "m_topicPartitions.put(topic, partitions);",
      "info" : "ExpressionStatement[7927-7968]:ExpressionStatement[8484-8525]"
    }, {
      "left" : "for (TopicMetadata item : metaData)",
      "right" : "for (TopicMetadata item : metaData)",
      "info" : "EnhancedForStatement[7995-8636]:EnhancedForStatement[8552-9129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8031-8636]:Block[8588-9129]"
    }, {
      "left" : "for (PartitionMetadata part : item.partitionsMetadata())",
      "right" : "for (PartitionMetadata part : item.partitionsMetadata())",
      "info" : "EnhancedForStatement[8049-8622]:EnhancedForStatement[8606-9115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8106-8622]:Block[8663-9115]"
    }, {
      "left" : "partitions.add(part.partitionId());",
      "right" : "partitions.add(part.partitionId());",
      "info" : "ExpressionStatement[8128-8163]:ExpressionStatement[8685-8720]"
    }, {
      "left" : "part.replicas()",
      "right" : "part.leader()",
      "info" : "MethodInvocation[8220-8235]:MethodInvocation[8977-8990]"
    }, {
      "left" : "replicas",
      "right" : "leader",
      "info" : "SimpleName[8225-8233]:SimpleName[8982-8988]"
    }, {
      "left" : "String leaderKey = topic + \"-\" + part.partitionId();",
      "right" : "String leaderKey = topic + \"-\" + part.partitionId();",
      "info" : "VariableDeclarationStatement[8263-8315]:VariableDeclarationStatement[8888-8940]"
    }, {
      "left" : "m_topicPartitionLeader.put(leaderKey, new HostAndPort(replica.host(), replica.port()));",
      "right" : "m_topicPartitionLeader.put(leaderKey, new HostAndPort(leader.host(), leader.port()));",
      "info" : "ExpressionStatement[8340-8427]:ExpressionStatement[9012-9097]"
    }, {
      "left" : "replica",
      "right" : "leader",
      "info" : "SimpleName[8394-8401]:SimpleName[9066-9072]"
    }, {
      "left" : "replica",
      "right" : "leader",
      "info" : "SimpleName[8410-8417]:SimpleName[9081-9087]"
    }, {
      "left" : "URI uri = URI.create(\"kafka:/\" + topic + \"/partition/\" + part.partitionId());",
      "right" : "URI uri = URI.create(\"kafka:/\" + topic + \"/partition/\" + part.partitionId());",
      "info" : "VariableDeclarationStatement[8452-8529]:VariableDeclarationStatement[8741-8818]"
    }, {
      "left" : "availableResources.add(uri);",
      "right" : "availableResources.add(uri);",
      "info" : "ExpressionStatement[8554-8582]:ExpressionStatement[8839-8867]"
    }, {
      "left" : "info(\"Available Channels are: \" + availableResources);",
      "right" : "info(\"Available Channels are: \" + availableResources);",
      "info" : "ExpressionStatement[8656-8710]:ExpressionStatement[9149-9203]"
    }, {
      "left" : "m_es = Executors.newFixedThreadPool(availableResources.size() + 1,\n                getThreadFactory(\"KafkaImporter\", \"KafkaImporterTopicFetcher\", ImportHandlerProxy.MEDIUM_STACK_SIZE));",
      "right" : "m_es = Executors.newFixedThreadPool(availableResources.size() + 1,\n                getThreadFactory(\"KafkaImporter\", \"KafkaImporterTopicFetcher\", ImportHandlerProxy.MEDIUM_STACK_SIZE));",
      "info" : "ExpressionStatement[8767-8952]:ExpressionStatement[9260-9445]"
    }, {
      "left" : "return availableResources;",
      "right" : "return availableResources;",
      "info" : "ReturnStatement[8961-8987]:ReturnStatement[9454-9480]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8999-9008]:MarkerAnnotation[9492-9501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9013-9019]:Modifier[9506-9512]"
    }, {
      "left" : "Set<URI>",
      "right" : "Set<URI>",
      "info" : "ParameterizedType[9020-9028]:ParameterizedType[9513-9521]"
    }, {
      "left" : "getAllResponsibleResources",
      "right" : "getAllResponsibleResources",
      "info" : "SimpleName[9029-9055]:SimpleName[9522-9548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9058-9707]:Block[9551-10200]"
    }, {
      "left" : "SimpleConsumer simpleConsumer = null;",
      "right" : "SimpleConsumer simpleConsumer = null;",
      "info" : "VariableDeclarationStatement[9068-9105]:VariableDeclarationStatement[9561-9598]"
    }, {
      "left" : "Set<URI> availableResources = new TreeSet<URI>();",
      "right" : "Set<URI> availableResources = new TreeSet<URI>();",
      "info" : "VariableDeclarationStatement[9114-9163]:VariableDeclarationStatement[9607-9656]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9172-9666]:TryStatement[9665-10159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9176-9467]:Block[9669-9960]"
    }, {
      "left" : "simpleConsumer = new SimpleConsumer(m_brokerList.get(0).getHost(), m_brokerList.get(0).getPort(), m_consumerSocketTimeout, m_fetchSize, CLIENT_ID);",
      "right" : "simpleConsumer = new SimpleConsumer(m_brokerList.get(0).getHost(), m_brokerList.get(0).getPort(), m_consumerSocketTimeout, m_fetchSize, CLIENT_ID);",
      "info" : "ExpressionStatement[9190-9337]:ExpressionStatement[9683-9830]"
    }, {
      "left" : "availableResources = buildTopicLeaderMetadata(simpleConsumer);",
      "right" : "availableResources = buildTopicLeaderMetadata(simpleConsumer);",
      "info" : "ExpressionStatement[9395-9457]:ExpressionStatement[9888-9950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9489-9603]:Block[9982-10096]"
    }, {
      "left" : "VoltDB.crashLocalVoltDB(\"Failed to get available resources for kafka importer\", true, ex);",
      "right" : "VoltDB.crashLocalVoltDB(\"Failed to get available resources for kafka importer\", true, ex);",
      "info" : "ExpressionStatement[9503-9593]:ExpressionStatement[9996-10086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9612-9666]:Block[10105-10159]"
    }, {
      "left" : "closeConsumer(simpleConsumer);",
      "right" : "closeConsumer(simpleConsumer);",
      "info" : "ExpressionStatement[9626-9656]:ExpressionStatement[10119-10149]"
    }, {
      "left" : "return availableResources;",
      "right" : "return availableResources;",
      "info" : "ReturnStatement[9675-9701]:ReturnStatement[10168-10194]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9713-9722]:MarkerAnnotation[10206-10215]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9727-9733]:Modifier[10220-10226]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9734-9738]:PrimitiveType[10227-10231]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[9739-9743]:SimpleName[10232-10236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9746-10313]:Block[10239-10806]"
    }, {
      "left" : "m_stopping = true;",
      "right" : "m_stopping = true;",
      "info" : "ExpressionStatement[9756-9774]:ExpressionStatement[10249-10267]"
    }, {
      "left" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "right" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "info" : "EnhancedForStatement[9816-9917]:EnhancedForStatement[10309-10410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9874-9917]:Block[10367-10410]"
    }, {
      "left" : "fetcher.shutdown();",
      "right" : "fetcher.shutdown();",
      "info" : "ExpressionStatement[9888-9907]:ExpressionStatement[10381-10400]"
    }, {
      "left" : "if (m_es != null)",
      "right" : "if (m_es != null)",
      "info" : "IfStatement[9926-10253]:IfStatement[10419-10746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9944-10253]:Block[10437-10746]"
    }, {
      "left" : "m_es.shutdown();",
      "right" : "m_es.shutdown();",
      "info" : "ExpressionStatement[10008-10024]:ExpressionStatement[10501-10517]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10037-10243]:TryStatement[10530-10736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10041-10115]:Block[10534-10608]"
    }, {
      "left" : "m_es.awaitTermination(365, TimeUnit.DAYS);",
      "right" : "m_es.awaitTermination(365, TimeUnit.DAYS);",
      "info" : "ExpressionStatement[10059-10101]:ExpressionStatement[10552-10594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10148-10243]:Block[10641-10736]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[10208-10229]:ExpressionStatement[10701-10722]"
    }, {
      "left" : "m_fetchers.clear();",
      "right" : "m_fetchers.clear();",
      "info" : "ExpressionStatement[10262-10281]:ExpressionStatement[10755-10774]"
    }, {
      "left" : "m_done.release();",
      "right" : "m_done.release();",
      "info" : "ExpressionStatement[10290-10307]:ExpressionStatement[10783-10800]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10438-10447]:MarkerAnnotation[10931-10940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10452-10458]:Modifier[10945-10951]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10459-10465]:SimpleType[10952-10958]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[10466-10473]:SimpleName[10959-10966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10476-10517]:Block[10969-11010]"
    }, {
      "left" : "return \"KafkaImporter82\";",
      "right" : "return \"KafkaImporter82\";",
      "info" : "ReturnStatement[10486-10511]:ReturnStatement[10979-11004]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10672-10681]:MarkerAnnotation[11165-11174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10686-10692]:Modifier[11179-11185]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10693-10697]:PrimitiveType[11186-11190]"
    }, {
      "left" : "configure",
      "right" : "configure",
      "info" : "SimpleName[10698-10707]:SimpleName[11191-11200]"
    }, {
      "left" : "Properties p",
      "right" : "Properties p",
      "info" : "SingleVariableDeclaration[10708-10720]:SingleVariableDeclaration[11201-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10722-13220]:Block[11215-13713]"
    }, {
      "left" : "m_properties = (Properties) p.clone();",
      "right" : "m_properties = (Properties) p.clone();",
      "info" : "ExpressionStatement[10732-10770]:ExpressionStatement[11225-11263]"
    }, {
      "left" : "m_procedure = m_properties.getProperty(\"procedure\", \"\").trim();",
      "right" : "m_procedure = m_properties.getProperty(\"procedure\", \"\").trim();",
      "info" : "ExpressionStatement[10779-10842]:ExpressionStatement[11272-11335]"
    }, {
      "left" : "if (m_procedure.isEmpty())",
      "right" : "if (m_procedure.isEmpty())",
      "info" : "IfStatement[10851-10951]:IfStatement[11344-11444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10878-10951]:Block[11371-11444]"
    }, {
      "left" : "throw new RuntimeException(\"Missing procedure.\");",
      "right" : "throw new RuntimeException(\"Missing procedure.\");",
      "info" : "ThrowStatement[10892-10941]:ThrowStatement[11385-11434]"
    }, {
      "left" : "String topics = m_properties.getProperty(\"topics\", \"\").trim();",
      "right" : "String topics = m_properties.getProperty(\"topics\", \"\").trim();",
      "info" : "VariableDeclarationStatement[11001-11063]:VariableDeclarationStatement[11494-11556]"
    }, {
      "left" : "if (topics.isEmpty())",
      "right" : "if (topics.isEmpty())",
      "info" : "IfStatement[11072-11166]:IfStatement[11565-11659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11094-11166]:Block[11587-11659]"
    }, {
      "left" : "throw new RuntimeException(\"Missing topic(s).\");",
      "right" : "throw new RuntimeException(\"Missing topic(s).\");",
      "info" : "ThrowStatement[11108-11156]:ThrowStatement[11601-11649]"
    }, {
      "left" : "m_topicList = Arrays.asList(topics.split(\"\\\\s*,\\\\s*\"));",
      "right" : "m_topicList = Arrays.asList(topics.split(\"\\\\s*,\\\\s*\"));",
      "info" : "ExpressionStatement[11175-11230]:ExpressionStatement[11668-11723]"
    }, {
      "left" : "if (m_topicList == null || m_topicList.isEmpty())",
      "right" : "if (m_topicList == null || m_topicList.isEmpty())",
      "info" : "IfStatement[11239-11361]:IfStatement[11732-11854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11289-11361]:Block[11782-11854]"
    }, {
      "left" : "throw new RuntimeException(\"Missing topic(s).\");",
      "right" : "throw new RuntimeException(\"Missing topic(s).\");",
      "info" : "ThrowStatement[11303-11351]:ThrowStatement[11796-11844]"
    }, {
      "left" : "for (String topic : m_topicList)",
      "right" : "for (String topic : m_topicList)",
      "info" : "EnhancedForStatement[11370-12033]:EnhancedForStatement[11863-12526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11403-12033]:Block[11896-12526]"
    }, {
      "left" : "if (topic.contains(\"..\") || topic.contains(\".\"))",
      "right" : "if (topic.contains(\"..\") || topic.contains(\".\"))",
      "info" : "IfStatement[11417-11565]:IfStatement[11910-12058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11466-11565]:Block[11959-12058]"
    }, {
      "left" : "throw new RuntimeException(\"topic name cannot be \\\".\\\" or \\\"..\\\"\");",
      "right" : "throw new RuntimeException(\"topic name cannot be \\\".\\\" or \\\"..\\\"\");",
      "info" : "ThrowStatement[11484-11551]:ThrowStatement[11977-12044]"
    }, {
      "left" : "if (topic.length() > topicMaxNameLength)",
      "right" : "if (topic.length() > topicMaxNameLength)",
      "info" : "IfStatement[11578-11787]:IfStatement[12071-12280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-11787]:Block[12112-12280]"
    }, {
      "left" : "throw new RuntimeException(\"topic name is illegal, can't be longer than \"\n                        + topicMaxNameLength + \" characters\");",
      "right" : "throw new RuntimeException(\"topic name is illegal, can't be longer than \"\n                        + topicMaxNameLength + \" characters\");",
      "info" : "ThrowStatement[11637-11773]:ThrowStatement[12130-12266]"
    }, {
      "left" : "if (!legalTopicNamesPattern.matcher(topic).matches())",
      "right" : "if (!legalTopicNamesPattern.matcher(topic).matches())",
      "info" : "IfStatement[11800-12023]:IfStatement[12293-12516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11854-12023]:Block[12347-12516]"
    }, {
      "left" : "throw new RuntimeException(\"topic name \" + topic + \" is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'\");",
      "right" : "throw new RuntimeException(\"topic name \" + topic + \" is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'\");",
      "info" : "ThrowStatement[11872-12009]:ThrowStatement[12365-12502]"
    }, {
      "left" : "String brokers = m_properties.getProperty(\"brokers\", \"\").trim();",
      "right" : "String brokers = m_properties.getProperty(\"brokers\", \"\").trim();",
      "info" : "VariableDeclarationStatement[12042-12106]:VariableDeclarationStatement[12535-12599]"
    }, {
      "left" : "if (brokers.isEmpty())",
      "right" : "if (brokers.isEmpty())",
      "info" : "IfStatement[12115-12213]:IfStatement[12608-12706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12138-12213]:Block[12631-12706]"
    }, {
      "left" : "throw new RuntimeException(\"Missing kafka broker\");",
      "right" : "throw new RuntimeException(\"Missing kafka broker\");",
      "info" : "ThrowStatement[12152-12203]:ThrowStatement[12645-12696]"
    }, {
      "left" : "List<String> brokerList = Arrays.asList(brokers.split(\"\\\\s*,\\\\s*\"));",
      "right" : "List<String> brokerList = Arrays.asList(brokers.split(\"\\\\s*,\\\\s*\"));",
      "info" : "VariableDeclarationStatement[12222-12290]:VariableDeclarationStatement[12715-12783]"
    }, {
      "left" : "if (brokerList == null || brokerList.isEmpty())",
      "right" : "if (brokerList == null || brokerList.isEmpty())",
      "info" : "IfStatement[12299-12422]:IfStatement[12792-12915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12347-12422]:Block[12840-12915]"
    }, {
      "left" : "throw new RuntimeException(\"Missing kafka broker\");",
      "right" : "throw new RuntimeException(\"Missing kafka broker\");",
      "info" : "ThrowStatement[12361-12412]:ThrowStatement[12854-12905]"
    }, {
      "left" : "for (String broker : brokerList)",
      "right" : "for (String broker : brokerList)",
      "info" : "EnhancedForStatement[12431-12572]:EnhancedForStatement[12924-13065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12464-12572]:Block[12957-13065]"
    }, {
      "left" : "HostAndPort hap = HostAndPort.fromString(broker);",
      "right" : "HostAndPort hap = HostAndPort.fromString(broker);",
      "info" : "VariableDeclarationStatement[12478-12527]:VariableDeclarationStatement[12971-13020]"
    }, {
      "left" : "m_brokerList.add(hap);",
      "right" : "m_brokerList.add(hap);",
      "info" : "ExpressionStatement[12540-12562]:ExpressionStatement[13033-13055]"
    }, {
      "left" : "if (m_brokerList.isEmpty())",
      "right" : "if (m_brokerList.isEmpty())",
      "info" : "IfStatement[12581-12728]:IfStatement[13074-13221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12609-12728]:Block[13102-13221]"
    }, {
      "left" : "throw new RuntimeException(\"Missing or misconfigured kafka broker list. See brokers property\");",
      "right" : "throw new RuntimeException(\"Missing or misconfigured kafka broker list. See brokers property\");",
      "info" : "ThrowStatement[12623-12718]:ThrowStatement[13116-13211]"
    }, {
      "left" : "m_groupId = m_properties.getProperty(\"groupid\", GROUP_ID).trim();",
      "right" : "m_groupId = m_properties.getProperty(\"groupid\", GROUP_ID).trim();",
      "info" : "ExpressionStatement[12737-12802]:ExpressionStatement[13230-13295]"
    }, {
      "left" : "m_fetchSize = Integer.parseInt(m_properties.getProperty(\"fetch.message.max.bytes\", \"65536\"));",
      "right" : "m_fetchSize = Integer.parseInt(m_properties.getProperty(\"fetch.message.max.bytes\", \"65536\"));",
      "info" : "ExpressionStatement[12906-12999]:ExpressionStatement[13399-13492]"
    }, {
      "left" : "m_consumerSocketTimeout = Integer.parseInt(m_properties.getProperty(\"socket.timeout.ms\", \"30000\"));",
      "right" : "m_consumerSocketTimeout = Integer.parseInt(m_properties.getProperty(\"socket.timeout.ms\", \"30000\"));",
      "info" : "ExpressionStatement[13008-13107]:ExpressionStatement[13501-13600]"
    }, {
      "left" : "m_backpressureSleepMs = Integer.parseInt(m_properties.getProperty(\"backpressure.sleep.ms\", \"50\"));",
      "right" : "m_backpressureSleepMs = Integer.parseInt(m_properties.getProperty(\"backpressure.sleep.ms\", \"50\"));",
      "info" : "ExpressionStatement[13116-13214]:ExpressionStatement[13609-13707]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13285-13292]:Modifier[13778-13785]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[13293-13298]:TYPE_DECLARATION_KIND[13786-13791]"
    }, {
      "left" : "TopicPartitionFetcher",
      "right" : "TopicPartitionFetcher",
      "info" : "SimpleName[13299-13320]:SimpleName[13792-13813]"
    }, {
      "left" : "Runnable",
      "right" : "Runnable",
      "info" : "SimpleType[13332-13340]:SimpleType[13825-13833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14380-14386]:Modifier[14917-14923]"
    }, {
      "left" : "TopicPartitionFetcher",
      "right" : "TopicPartitionFetcher",
      "info" : "SimpleName[14387-14408]:SimpleName[14924-14945]"
    }, {
      "left" : "List<HostAndPort> brokers",
      "right" : "List<HostAndPort> brokers",
      "info" : "SingleVariableDeclaration[14409-14434]:SingleVariableDeclaration[14946-14971]"
    }, {
      "left" : "URI uri",
      "right" : "URI uri",
      "info" : "SingleVariableDeclaration[14436-14443]:SingleVariableDeclaration[14973-14980]"
    }, {
      "left" : "String topic",
      "right" : "String topic",
      "info" : "SingleVariableDeclaration[14445-14457]:SingleVariableDeclaration[14982-14994]"
    }, {
      "left" : "int partition",
      "right" : "int partition",
      "info" : "SingleVariableDeclaration[14459-14472]:SingleVariableDeclaration[14996-15009]"
    }, {
      "left" : "HostAndPort leader",
      "right" : "HostAndPort leader",
      "info" : "SingleVariableDeclaration[14474-14492]:SingleVariableDeclaration[15011-15029]"
    }, {
      "left" : "int fetchSize",
      "right" : "int fetchSize",
      "info" : "SingleVariableDeclaration[14494-14507]:SingleVariableDeclaration[15031-15044]"
    }, {
      "left" : "int consumerSocketTimeout",
      "right" : "int consumerSocketTimeout",
      "info" : "SingleVariableDeclaration[14509-14534]:SingleVariableDeclaration[15046-15071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14536-14845]:Block[15073-15382]"
    }, {
      "left" : "m_url = uri;",
      "right" : "m_url = uri;",
      "info" : "ExpressionStatement[14550-14562]:ExpressionStatement[15087-15099]"
    }, {
      "left" : "m_brokers = brokers;",
      "right" : "m_brokers = brokers;",
      "info" : "ExpressionStatement[14575-14595]:ExpressionStatement[15112-15132]"
    }, {
      "left" : "m_leader = leader;",
      "right" : "m_leader = leader;",
      "info" : "ExpressionStatement[14608-14626]:ExpressionStatement[15145-15163]"
    }, {
      "left" : "m_coordinator = leader;",
      "right" : "m_coordinator = leader;",
      "info" : "ExpressionStatement[14639-14662]:ExpressionStatement[15176-15199]"
    }, {
      "left" : "m_fetchSize = fetchSize;",
      "right" : "m_fetchSize = fetchSize;",
      "info" : "ExpressionStatement[14675-14699]:ExpressionStatement[15212-15236]"
    }, {
      "left" : "m_consumerSocketTimeout = consumerSocketTimeout;",
      "right" : "m_consumerSocketTimeout = consumerSocketTimeout;",
      "info" : "ExpressionStatement[14712-14760]:ExpressionStatement[15249-15297]"
    }, {
      "left" : "m_topicAndPartition = new TopicAndPartition(topic, partition);",
      "right" : "m_topicAndPartition = new TopicAndPartition(topic, partition);",
      "info" : "ExpressionStatement[14773-14835]:ExpressionStatement[15310-15372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14855-14861]:Modifier[15392-15398]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14862-14867]:Modifier[15399-15404]"
    }, {
      "left" : "URI",
      "right" : "URI",
      "info" : "SimpleType[14868-14871]:SimpleType[15405-15408]"
    }, {
      "left" : "getUrl",
      "right" : "getUrl",
      "info" : "SimpleName[14872-14878]:SimpleName[15409-15415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14881-14918]:Block[15418-15455]"
    }, {
      "left" : "return m_url;",
      "right" : "return m_url;",
      "info" : "ReturnStatement[14895-14908]:ReturnStatement[15432-15445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14928-14934]:Modifier[15465-15471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14935-14939]:PrimitiveType[15472-15476]"
    }, {
      "left" : "hasBackPressure",
      "right" : "hasBackPressure",
      "info" : "SimpleName[14940-14955]:SimpleName[15477-15492]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[14956-14968]:SingleVariableDeclaration[15493-15505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14970-15019]:Block[15507-15556]"
    }, {
      "left" : "m_hasBackPressure = flag;",
      "right" : "m_hasBackPressure = flag;",
      "info" : "ExpressionStatement[14984-15009]:ExpressionStatement[15521-15546]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15076-15083]:Modifier[15613-15620]"
    }, {
      "left" : "PartitionMetadata",
      "right" : "PartitionMetadata",
      "info" : "SimpleType[15084-15101]:SimpleType[15621-15638]"
    }, {
      "left" : "findLeader",
      "right" : "findLeader",
      "info" : "SimpleName[15102-15112]:SimpleName[15639-15649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15115-16605]:Block[15652-17130]"
    }, {
      "left" : "PartitionMetadata returnMetaData = null;",
      "right" : "PartitionMetadata returnMetaData = null;",
      "info" : "VariableDeclarationStatement[15129-15169]:VariableDeclarationStatement[15666-15706]"
    }, {
      "left" : "loop:\n            for (HostAndPort broker : m_brokers) {\n                SimpleConsumer consumer = null;\n                try {\n                    consumer = new SimpleConsumer(broker.getHost(), broker.getPort(), m_consumerSocketTimeout, m_fetchSize, \"findLeader\");\n\n                    List<String> topics = Collections.singletonList(m_topicAndPartition.topic());\n                    TopicMetadataRequest req = new TopicMetadataRequest(topics);\n                    kafka.javaapi.TopicMetadataResponse resp = consumer.send(req);\n\n                    List<TopicMetadata> metaData = resp.topicsMetadata();\n                    for (TopicMetadata item : metaData) {\n                        for (PartitionMetadata part : item.partitionsMetadata()) {\n                            if (part.partitionId() == m_topicAndPartition.partition()) {\n                                returnMetaData = part;\n                                break loop;\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    error(e, \"Error in finding leader for %s\", m_topicAndPartition);\n                } finally {\n                    closeConsumer(consumer);\n                }\n            }",
      "right" : "loop:\n            for (HostAndPort broker : m_brokers) {\n                SimpleConsumer consumer = null;\n                try {\n                    consumer = new SimpleConsumer(broker.getHost(), broker.getPort(), m_consumerSocketTimeout, m_fetchSize, \"findLeader\");\n\n                    List<String> topics = singletonList(m_topicAndPartition.topic());\n                    TopicMetadataRequest req = new TopicMetadataRequest(topics);\n                    kafka.javaapi.TopicMetadataResponse resp = consumer.send(req);\n\n                    List<TopicMetadata> metaData = resp.topicsMetadata();\n                    for (TopicMetadata item : metaData) {\n                        for (PartitionMetadata part : item.partitionsMetadata()) {\n                            if (part.partitionId() == m_topicAndPartition.partition()) {\n                                returnMetaData = part;\n                                break loop;\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    error(e, \"Error in finding leader for %s\", m_topicAndPartition);\n                } finally {\n                    closeConsumer(consumer);\n                }\n            }",
      "info" : "LabeledStatement[15182-16422]:LabeledStatement[15719-16947]"
    }, {
      "left" : "for (HostAndPort broker : m_brokers)",
      "right" : "for (HostAndPort broker : m_brokers)",
      "info" : "EnhancedForStatement[15200-16422]:EnhancedForStatement[15737-16947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15237-16422]:Block[15774-16947]"
    }, {
      "left" : "SimpleConsumer consumer = null;",
      "right" : "SimpleConsumer consumer = null;",
      "info" : "VariableDeclarationStatement[15255-15286]:VariableDeclarationStatement[15792-15823]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15303-16408]:TryStatement[15840-16933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15307-16210]:Block[15844-16735]"
    }, {
      "left" : "consumer = new SimpleConsumer(broker.getHost(), broker.getPort(), m_consumerSocketTimeout, m_fetchSize, \"findLeader\");",
      "right" : "consumer = new SimpleConsumer(broker.getHost(), broker.getPort(), m_consumerSocketTimeout, m_fetchSize, \"findLeader\");",
      "info" : "ExpressionStatement[15329-15447]:ExpressionStatement[15866-15984]"
    }, {
      "left" : "List<String> topics = Collections.singletonList(m_topicAndPartition.topic());",
      "right" : "List<String> topics = singletonList(m_topicAndPartition.topic());",
      "info" : "VariableDeclarationStatement[15469-15546]:VariableDeclarationStatement[16006-16071]"
    }, {
      "left" : "TopicMetadataRequest req = new TopicMetadataRequest(topics);",
      "right" : "TopicMetadataRequest req = new TopicMetadataRequest(topics);",
      "info" : "VariableDeclarationStatement[15567-15627]:VariableDeclarationStatement[16092-16152]"
    }, {
      "left" : "kafka.javaapi.TopicMetadataResponse resp = consumer.send(req);",
      "right" : "kafka.javaapi.TopicMetadataResponse resp = consumer.send(req);",
      "info" : "VariableDeclarationStatement[15648-15710]:VariableDeclarationStatement[16173-16235]"
    }, {
      "left" : "List<TopicMetadata> metaData = resp.topicsMetadata();",
      "right" : "List<TopicMetadata> metaData = resp.topicsMetadata();",
      "info" : "VariableDeclarationStatement[15732-15785]:VariableDeclarationStatement[16257-16310]"
    }, {
      "left" : "for (TopicMetadata item : metaData)",
      "right" : "for (TopicMetadata item : metaData)",
      "info" : "EnhancedForStatement[15806-16192]:EnhancedForStatement[16331-16717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15842-16192]:Block[16367-16717]"
    }, {
      "left" : "for (PartitionMetadata part : item.partitionsMetadata())",
      "right" : "for (PartitionMetadata part : item.partitionsMetadata())",
      "info" : "EnhancedForStatement[15868-16170]:EnhancedForStatement[16393-16695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15925-16170]:Block[16450-16695]"
    }, {
      "left" : "if (part.partitionId() == m_topicAndPartition.partition())",
      "right" : "if (part.partitionId() == m_topicAndPartition.partition())",
      "info" : "IfStatement[15955-16144]:IfStatement[16480-16669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16014-16144]:Block[16539-16669]"
    }, {
      "left" : "returnMetaData = part;",
      "right" : "returnMetaData = part;",
      "info" : "ExpressionStatement[16048-16070]:ExpressionStatement[16573-16595]"
    }, {
      "left" : "break loop;",
      "right" : "break loop;",
      "info" : "BreakStatement[16103-16114]:BreakStatement[16628-16639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16231-16335]:Block[16756-16860]"
    }, {
      "left" : "error(e, \"Error in finding leader for %s\", m_topicAndPartition);",
      "right" : "error(e, \"Error in finding leader for %s\", m_topicAndPartition);",
      "info" : "ExpressionStatement[16253-16317]:ExpressionStatement[16778-16842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16344-16408]:Block[16869-16933]"
    }, {
      "left" : "closeConsumer(consumer);",
      "right" : "closeConsumer(consumer);",
      "info" : "ExpressionStatement[16366-16390]:ExpressionStatement[16891-16915]"
    }, {
      "left" : "if (returnMetaData == null)",
      "right" : "if (returnMetaData == null)",
      "info" : "IfStatement[16435-16560]:IfStatement[16960-17085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16463-16560]:Block[16988-17085]"
    }, {
      "left" : "error(null, \"Failed to find Leader for %s\", m_topicAndPartition);",
      "right" : "error(null, \"Failed to find Leader for %s\", m_topicAndPartition);",
      "info" : "ExpressionStatement[16481-16546]:ExpressionStatement[17006-17071]"
    }, {
      "left" : "return returnMetaData;",
      "right" : "return returnMetaData;",
      "info" : "ReturnStatement[16573-16595]:ReturnStatement[17098-17120]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16663-16670]:Modifier[17188-17195]"
    }, {
      "left" : "HostAndPort",
      "right" : "HostAndPort",
      "info" : "SimpleType[16671-16682]:SimpleType[17196-17207]"
    }, {
      "left" : "findNewLeader",
      "right" : "findNewLeader",
      "info" : "SimpleName[16683-16696]:SimpleName[17208-17221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16699-17798]:Block[17224-18323]"
    }, {
      "left" : "for (int i = 0; i < 3; i++)",
      "right" : "for (int i = 0; i < 3; i++)",
      "info" : "ForStatement[16713-17627]:ForStatement[17238-18152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16741-17627]:Block[17266-18152]"
    }, {
      "left" : "boolean shouldSleep = false;",
      "right" : "boolean shouldSleep = false;",
      "info" : "VariableDeclarationStatement[16759-16787]:VariableDeclarationStatement[17284-17312]"
    }, {
      "left" : "PartitionMetadata metadata = findLeader();",
      "right" : "PartitionMetadata metadata = findLeader();",
      "info" : "VariableDeclarationStatement[16804-16846]:VariableDeclarationStatement[17329-17371]"
    }, {
      "left" : "if (metadata == null)",
      "right" : "if (metadata == null)",
      "info" : "IfStatement[16863-17521]:IfStatement[17388-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-16944]:Block[17410-17469]"
    }, {
      "left" : "shouldSleep = true;",
      "right" : "shouldSleep = true;",
      "info" : "ExpressionStatement[16907-16926]:ExpressionStatement[17432-17451]"
    }, {
      "left" : "if (metadata.leader() == null)",
      "right" : "if (metadata.leader() == null)",
      "info" : "IfStatement[16950-17521]:IfStatement[17475-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16981-17040]:Block[17506-17565]"
    }, {
      "left" : "shouldSleep = true;",
      "right" : "shouldSleep = true;",
      "info" : "ExpressionStatement[17003-17022]:ExpressionStatement[17528-17547]"
    }, {
      "left" : "if (m_leader.getHost().equalsIgnoreCase(metadata.leader().host()) && i == 0)",
      "right" : "if (m_leader.getHost().equalsIgnoreCase(metadata.leader().host()) && i == 0)",
      "info" : "IfStatement[17046-17521]:IfStatement[17571-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17123-17400]:Block[17648-17925]"
    }, {
      "left" : "shouldSleep = true;",
      "right" : "shouldSleep = true;",
      "info" : "ExpressionStatement[17363-17382]:ExpressionStatement[17888-17907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17406-17521]:Block[17931-18046]"
    }, {
      "left" : "return new HostAndPort(metadata.leader().host(), metadata.leader().port());",
      "right" : "return new HostAndPort(metadata.leader().host(), metadata.leader().port());",
      "info" : "ReturnStatement[17428-17503]:ReturnStatement[17953-18028]"
    }, {
      "left" : "if (shouldSleep)",
      "right" : "if (shouldSleep)",
      "info" : "IfStatement[17538-17613]:IfStatement[18063-18138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17555-17613]:Block[18080-18138]"
    }, {
      "left" : "backoffSleep(i+1);",
      "right" : "backoffSleep(i+1);",
      "info" : "ExpressionStatement[17577-17595]:ExpressionStatement[18102-18120]"
    }, {
      "left" : "error(null, \"Failed to find new leader for %s\", m_topicAndPartition);",
      "right" : "error(null, \"Failed to find new leader for %s\", m_topicAndPartition);",
      "info" : "ExpressionStatement[17694-17763]:ExpressionStatement[18219-18288]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17776-17788]:ReturnStatement[18301-18313]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17884-17890]:Modifier[18409-18415]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17891-17895]:PrimitiveType[18416-18420]"
    }, {
      "left" : "shutdown",
      "right" : "shutdown",
      "info" : "SimpleName[17896-17904]:SimpleName[18421-18429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17907-17949]:Block[18432-18474]"
    }, {
      "left" : "m_shutdown = true;",
      "right" : "m_shutdown = true;",
      "info" : "ExpressionStatement[17921-17939]:ExpressionStatement[18446-18464]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17959-17965]:Modifier[18484-18490]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17966-17970]:PrimitiveType[18491-18495]"
    }, {
      "left" : "getOffsetCoordinator",
      "right" : "getOffsetCoordinator",
      "info" : "SimpleName[17971-17991]:SimpleName[18496-18516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17994-20125]:Block[18519-21374]"
    }, {
      "left" : "BlockingChannel channel = null;",
      "right" : "BlockingChannel channel = null;",
      "info" : "VariableDeclarationStatement[18008-18039]:VariableDeclarationStatement[18757-18788]"
    }, {
      "left" : "int correlationId = 0;",
      "right" : "int correlationId = 0;",
      "info" : "VariableDeclarationStatement[18052-18074]:VariableDeclarationStatement[18597-18619]"
    }, {
      "left" : "for (int i = 0; i < 3; i++)",
      "right" : "for (int attempts = 0; attempts < 3; ++attempts)",
      "info" : "ForStatement[18087-20020]:ForStatement[18633-21364]"
    }, {
      "left" : "i",
      "right" : "attempts",
      "info" : "SimpleName[18096-18097]:SimpleName[18642-18650]"
    }, {
      "left" : "i",
      "right" : "attempts",
      "info" : "SimpleName[18103-18104]:SimpleName[18656-18664]"
    }, {
      "left" : "i",
      "right" : "attempts",
      "info" : "SimpleName[18110-18111]:SimpleName[18672-18680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18115-20020]:Block[18682-21364]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18133-20006]:TryStatement[18809-21097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18137-19638]:Block[18813-20690]"
    }, {
      "left" : "channel = new BlockingChannel(m_coordinator.getHost(), m_coordinator.getPort(),\n                            BlockingChannel.UseDefaultBufferSize(), BlockingChannel.UseDefaultBufferSize(), m_consumerSocketTimeout);",
      "right" : "channel = new BlockingChannel(hp.getHost(), hp.getPort(),\n                                BlockingChannel.UseDefaultBufferSize(), BlockingChannel.UseDefaultBufferSize(), m_consumerSocketTimeout);",
      "info" : "ExpressionStatement[18228-18441]:ExpressionStatement[18839-19034]"
    }, {
      "left" : "m_coordinator",
      "right" : "hp",
      "info" : "SimpleName[18258-18271]:SimpleName[18869-18871]"
    }, {
      "left" : "m_coordinator",
      "right" : "hp",
      "info" : "SimpleName[18283-18296]:SimpleName[18883-18885]"
    }, {
      "left" : "channel.connect();",
      "right" : "channel.connect();",
      "info" : "ExpressionStatement[18462-18480]:ExpressionStatement[19059-19077]"
    }, {
      "left" : "channel.send(new ConsumerMetadataRequest(m_groupId, ConsumerMetadataRequest.CurrentVersion(), correlationId++, CLIENT_ID));",
      "right" : "channel.send(new ConsumerMetadataRequest(m_groupId, ConsumerMetadataRequest.CurrentVersion(), correlationId++, CLIENT_ID));",
      "info" : "ExpressionStatement[18501-18624]:ExpressionStatement[19102-19225]"
    }, {
      "left" : "ConsumerMetadataResponse metadataResponse = ConsumerMetadataResponse.readFrom(channel.receive().buffer());",
      "right" : "ConsumerMetadataResponse metadataResponse = ConsumerMetadataResponse.readFrom(channel.receive().buffer());",
      "info" : "VariableDeclarationStatement[18645-18751]:VariableDeclarationStatement[19250-19356]"
    }, {
      "left" : "if (metadataResponse.errorCode() == ErrorMapping.NoError())",
      "right" : "if (metadataResponse.errorCode() == ErrorMapping.NoError())",
      "info" : "IfStatement[18773-19354]:IfStatement[19381-20407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18833-19354]:Block[19441-20407]"
    }, {
      "left" : "Broker offsetManager = metadataResponse.coordinator();",
      "right" : "Broker offsetManager = metadataResponse.coordinator();",
      "info" : "VariableDeclarationStatement[18859-18913]:VariableDeclarationStatement[19471-19525]"
    }, {
      "left" : "m_coordinator = new HostAndPort(offsetManager.host(), offsetManager.port());",
      "right" : "m_coordinator = new HostAndPort(offsetManager.host(), offsetManager.port());",
      "info" : "ExpressionStatement[18938-19014]:ExpressionStatement[19554-19630]"
    }, {
      "left" : "SimpleConsumer consumer = m_offsetManager.getAndSet(new SimpleConsumer(m_coordinator.getHost(), m_coordinator.getPort(), m_consumerSocketTimeout, m_fetchSize, CLIENT_ID) );",
      "right" : "SimpleConsumer consumer = m_offsetManager.getAndSet(\n                                    new SimpleConsumer(\n                                            m_coordinator.getHost(),\n                                            m_coordinator.getPort(),\n                                            m_consumerSocketTimeout,\n                                            m_fetchSize, CLIENT_ID\n                                            ));",
      "info" : "VariableDeclarationStatement[19039-19211]:VariableDeclarationStatement[19659-20089]"
    }, {
      "left" : "closeConsumer(consumer);",
      "right" : "closeConsumer(consumer);",
      "info" : "ExpressionStatement[19236-19260]:ExpressionStatement[20226-20250]"
    }, {
      "left" : "consumer = null;",
      "right" : "consumer = null;",
      "info" : "ExpressionStatement[19285-19301]:ExpressionStatement[20330-20346]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19326-19332]:BreakStatement[20375-20381]"
    }, {
      "left" : "m_topicAndPartition",
      "right" : "m_topicAndPartition",
      "info" : "SimpleName[19436-19455]:SimpleName[20614-20633]"
    }, {
      "left" : "null, msg, metadataResponse.errorCode()",
      "right" : "metadataResponse.errorCode()",
      "info" : "METHOD_INVOCATION_ARGUMENTS[19540-19579]:METHOD_INVOCATION_ARGUMENTS[20583-20611]"
    }, {
      "left" : "backoffSleep(i+1);",
      "right" : "backoffSleep(attempts+1);",
      "info" : "ExpressionStatement[19602-19620]:ExpressionStatement[21325-21350]"
    }, {
      "left" : "i",
      "right" : "attempts",
      "info" : "SimpleName[19615-19616]:SimpleName[21338-21346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19659-19867]:Block[20711-20942]"
    }, {
      "left" : "error(e, \"Failed to get Offset Coordinator for \" + m_topicAndPartition);",
      "right" : "error(probeException, \"Failed to query all brokers for the offeset coordinator for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[19738-19810]:ExpressionStatement[21182-21290]"
    }, {
      "left" : "e",
      "right" : "probeException",
      "info" : "SimpleName[19744-19745]:SimpleName[21188-21202]"
    }, {
      "left" : "\"Failed to get Offset Coordinator for \"",
      "right" : "\"Failed to query all brokers for the offeset coordinator for \"",
      "info" : "StringLiteral[19747-19786]:StringLiteral[21204-21266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19876-20006]:Block[20951-21097]"
    }, {
      "left" : "if (channel != null)",
      "right" : "if (channel != null)",
      "info" : "IfStatement[19898-19988]:IfStatement[20977-21075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19919-19988]:Block[20998-21075]"
    }, {
      "left" : "channel.disconnect();",
      "right" : "channel.disconnect();",
      "info" : "ExpressionStatement[19945-19966]:ExpressionStatement[21028-21049]"
    }, {
      "left" : "info(\"Coordinator for \" + m_topicAndPartition + \" consumer is: \" + m_coordinator);",
      "right" : "info(\"Offset Coordinator for \" + m_topicAndPartition + \" is \" + offsetManager);",
      "info" : "ExpressionStatement[20033-20115]:ExpressionStatement[20118-20197]"
    }, {
      "left" : "\"Coordinator for \"",
      "right" : "\"Offset Coordinator for \"",
      "info" : "StringLiteral[20038-20056]:StringLiteral[20123-20148]"
    }, {
      "left" : "\" consumer is: \"",
      "right" : "\" is \"",
      "info" : "StringLiteral[20081-20097]:StringLiteral[20173-20179]"
    }, {
      "left" : "m_coordinator",
      "right" : "offsetManager",
      "info" : "SimpleName[20100-20113]:SimpleName[20182-20195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20135-20141]:Modifier[24202-24208]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[20142-20146]:PrimitiveType[24209-24213]"
    }, {
      "left" : "getLastOffset",
      "right" : "getLastOffset",
      "info" : "SimpleName[20147-20160]:SimpleName[24214-24227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20177-22343]:Block[24230-25093]"
    }, {
      "left" : "if (m_offsetManager.get() == null)",
      "right" : "if (response == null)",
      "info" : "IfStatement[20191-20268]:IfStatement[24446-24479]"
    }, {
      "left" : "m_offsetManager",
      "right" : "m_offsetManager",
      "info" : "METHOD_INVOCATION_RECEIVER[20195-20210]:METHOD_INVOCATION_RECEIVER[23165-23180]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[20211-20214]:SimpleName[23181-23184]"
    }, {
      "left" : "return -1;",
      "right" : "return -1L;",
      "info" : "ReturnStatement[20244-20254]:ReturnStatement[24468-24479]"
    }, {
      "left" : "1",
      "right" : "1L",
      "info" : "NumberLiteral[20252-20253]:NumberLiteral[24476-24478]"
    }, {
      "left" : "m_offsetManager.get()",
      "right" : "ofr.offsets().get(m_topicAndPartition)",
      "info" : "MethodInvocation[20307-20328]:MethodInvocation[24903-24941]"
    }, {
      "left" : "kafka.api.OffsetRequest.CurrentVersion()",
      "right" : "kafka.api.OffsetRequest.CurrentVersion()",
      "info" : "MethodInvocation[20690-20730]:MethodInvocation[21751-21791]"
    }, {
      "left" : "CLIENT_ID",
      "right" : "CLIENT_ID",
      "info" : "SimpleName[20732-20741]:SimpleName[21793-21802]"
    }, {
      "left" : "OffsetResponse response = consumer.getOffsetsBefore(request);",
      "right" : "OffsetResponse response = getTopicOffset(EARLIEST_OFFSET);",
      "info" : "VariableDeclarationStatement[20760-20821]:VariableDeclarationStatement[24375-24433]"
    }, {
      "left" : "if (response.hasError())",
      "right" : "if (response.hasError())",
      "info" : "IfStatement[20839-22028]:IfStatement[22055-22328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20864-22028]:Block[22080-22266]"
    }, {
      "left" : "short code = response.errorCode(m_topicAndPartition.topic(), m_topicAndPartition.partition());",
      "right" : "short code = response.errorCode(topic, partition);",
      "info" : "VariableDeclarationStatement[20886-20980]:VariableDeclarationStatement[22102-22152]"
    }, {
      "left" : "m_topicAndPartition.topic()",
      "right" : "m_topicAndPartition.topic()",
      "info" : "MethodInvocation[20918-20945]:MethodInvocation[24333-24360]"
    }, {
      "left" : "m_topicAndPartition.partition()",
      "right" : "m_topicAndPartition.partition()",
      "info" : "MethodInvocation[20947-20978]:MethodInvocation[21491-21522]"
    }, {
      "left" : "code",
      "right" : "code",
      "info" : "SimpleName[21005-21009]:SimpleName[22207-22211]"
    }, {
      "left" : "code == ErrorMapping.UnknownTopicOrPartitionCode()",
      "right" : "code == ErrorMapping.UnknownTopicOrPartitionCode()",
      "info" : "InfixExpression[21057-21107]:InfixExpression[23556-23606]"
    }, {
      "left" : "closeConsumer(oconsumer);",
      "right" : "closeConsumer(m_consumer);",
      "info" : "ExpressionStatement[21574-21599]:ExpressionStatement[26469-26495]"
    }, {
      "left" : "oconsumer",
      "right" : "m_consumer",
      "info" : "SimpleName[21588-21597]:SimpleName[26483-26493]"
    }, {
      "left" : "oconsumer",
      "right" : "m_consumer",
      "info" : "SimpleName[21628-21637]:SimpleName[26508-26518]"
    }, {
      "left" : "oconsumer = null;",
      "right" : "m_consumer = null;",
      "info" : "ExpressionStatement[21628-21645]:ExpressionStatement[26508-26526]"
    }, {
      "left" : "info(\"Error fetching Offset Data from Broker \" + m_topicAndPartition.toString() +\n                            \" Reason: \" + response.errorCode(m_topicAndPartition.topic(), m_topicAndPartition.partition()) );",
      "right" : "info(\"[STEBUG] \" + \"Committed offset \" + offset + \" for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[21772-21979]:ExpressionStatement[35903-35984]"
    }, {
      "left" : "\"Error fetching Offset Data from Broker \"",
      "right" : "\"[STEBUG] \"",
      "info" : "StringLiteral[21777-21818]:StringLiteral[35908-35919]"
    }, {
      "left" : "+",
      "right" : "+",
      "info" : "INFIX_EXPRESSION_OPERATOR[21819-21820]:INFIX_EXPRESSION_OPERATOR[35920-35921]"
    }, {
      "left" : "m_topicAndPartition",
      "right" : "m_topicAndPartition",
      "info" : "SimpleName[21915-21934]:SimpleName[35963-35982]"
    }, {
      "left" : "m_topicAndPartition.partition()",
      "right" : "m_topicAndPartition.partition()",
      "info" : "MethodInvocation[21944-21975]:MethodInvocation[24267-24298]"
    }, {
      "left" : "return -1;",
      "right" : "return latest;",
      "info" : "ReturnStatement[22000-22010]:ReturnStatement[24751-24765]"
    }, {
      "left" : "m_topicAndPartition.topic()",
      "right" : "m_topicAndPartition.topic()",
      "info" : "MethodInvocation[22079-22106]:MethodInvocation[21557-21584]"
    }, {
      "left" : "return offsets[0];",
      "right" : "return -1L;",
      "info" : "ReturnStatement[22158-22176]:ReturnStatement[24637-24648]"
    }, {
      "left" : "error(ex, \"Failed to get last Offset for \" + m_topicAndPartition);",
      "right" : "error(fault, \"unable to fetch earliest offset for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[22230-22296]:ExpressionStatement[22556-22631]"
    }, {
      "left" : "ex",
      "right" : "fault",
      "info" : "SimpleName[22236-22238]:SimpleName[22562-22567]"
    }, {
      "left" : "\"Failed to get last Offset for \"",
      "right" : "\"unable to fetch earliest offset for \"",
      "info" : "StringLiteral[22240-22272]:StringLiteral[22569-22607]"
    }, {
      "left" : "return -1;",
      "right" : "return latest;",
      "info" : "ReturnStatement[22323-22333]:ReturnStatement[25069-25083]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22411-22418]:Modifier[25161-25168]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[22419-22424]:TYPE_DECLARATION_KIND[25169-25174]"
    }, {
      "left" : "TopicPartitionInvocationCallback",
      "right" : "TopicPartitionInvocationCallback",
      "info" : "SimpleName[22425-22457]:SimpleName[25175-25207]"
    }, {
      "left" : "ProcedureCallback",
      "right" : "ProcedureCallback",
      "info" : "SimpleType[22469-22486]:SimpleType[25219-25236]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22635-22641]:Modifier[25385-25391]"
    }, {
      "left" : "TopicPartitionInvocationCallback",
      "right" : "TopicPartitionInvocationCallback",
      "info" : "SimpleName[22642-22674]:SimpleName[25392-25424]"
    }, {
      "left" : "long offset",
      "right" : "long offset",
      "info" : "SingleVariableDeclaration[22675-22686]:SingleVariableDeclaration[25425-25436]"
    }, {
      "left" : "long noffset",
      "right" : "long noffset",
      "info" : "SingleVariableDeclaration[22688-22700]:SingleVariableDeclaration[25438-25450]"
    }, {
      "left" : "AtomicLong cbcnt",
      "right" : "AtomicLong cbcnt",
      "info" : "SingleVariableDeclaration[22702-22718]:SingleVariableDeclaration[25452-25468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22720-22843]:Block[25470-25593]"
    }, {
      "left" : "m_offset = offset;",
      "right" : "m_offset = offset;",
      "info" : "ExpressionStatement[22738-22756]:ExpressionStatement[25488-25506]"
    }, {
      "left" : "m_nextOffset = noffset;",
      "right" : "m_nextOffset = noffset;",
      "info" : "ExpressionStatement[22773-22796]:ExpressionStatement[25523-25546]"
    }, {
      "left" : "m_cbcnt = cbcnt;",
      "right" : "m_cbcnt = cbcnt;",
      "info" : "ExpressionStatement[22813-22829]:ExpressionStatement[25563-25579]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22857-22866]:MarkerAnnotation[25607-25616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22879-22885]:Modifier[25629-25635]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22886-22890]:PrimitiveType[25636-25640]"
    }, {
      "left" : "clientCallback",
      "right" : "clientCallback",
      "info" : "SimpleName[22891-22905]:SimpleName[25641-25655]"
    }, {
      "left" : "ClientResponse response",
      "right" : "ClientResponse response",
      "info" : "SingleVariableDeclaration[22906-22929]:SingleVariableDeclaration[25656-25679]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[22938-22947]:SimpleType[25688-25697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22948-23270]:Block[25698-26020]"
    }, {
      "left" : "assert(!m_pendingOffsets.isEmpty());",
      "right" : "assert(!m_pendingOffsets.isEmpty());",
      "info" : "AssertStatement[23034-23070]:AssertStatement[25784-25820]"
    }, {
      "left" : "m_cbcnt.incrementAndGet();",
      "right" : "m_cbcnt.incrementAndGet();",
      "info" : "ExpressionStatement[23087-23113]:ExpressionStatement[25837-25863]"
    }, {
      "left" : "m_pendingOffsets.remove(m_offset);",
      "right" : "m_pendingOffsets.remove(m_offset);",
      "info" : "ExpressionStatement[23130-23164]:ExpressionStatement[25880-25914]"
    }, {
      "left" : "m_seenOffset.add(m_nextOffset);",
      "right" : "m_seenOffset.add(m_nextOffset);",
      "info" : "ExpressionStatement[23225-23256]:ExpressionStatement[25975-26006]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23321-23328]:Modifier[26071-26078]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23329-23332]:PrimitiveType[26079-26082]"
    }, {
      "left" : "backoffSleep",
      "right" : "backoffSleep",
      "info" : "SimpleName[23333-23345]:SimpleName[26083-26095]"
    }, {
      "left" : "int fetchFailedCount",
      "right" : "int fetchFailedCount",
      "info" : "SingleVariableDeclaration[23346-23366]:SingleVariableDeclaration[26096-26116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23368-23618]:Block[26118-26368]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23382-23571]:TryStatement[26132-26321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23386-23523]:Block[26136-26273]"
    }, {
      "left" : "Thread.sleep(1000 * fetchFailedCount++);",
      "right" : "Thread.sleep(1000 * fetchFailedCount++);",
      "info" : "ExpressionStatement[23404-23444]:ExpressionStatement[26154-26194]"
    }, {
      "left" : "if (fetchFailedCount > 10)",
      "right" : "if (fetchFailedCount > 10)",
      "info" : "IfStatement[23461-23509]:IfStatement[26211-26259]"
    }, {
      "left" : "fetchFailedCount = 1;",
      "right" : "fetchFailedCount = 1;",
      "info" : "ExpressionStatement[23488-23509]:ExpressionStatement[26238-26259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23556-23571]:Block[26306-26321]"
    }, {
      "left" : "return fetchFailedCount;",
      "right" : "return fetchFailedCount;",
      "info" : "ReturnStatement[23584-23608]:ReturnStatement[26334-26358]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23628-23637]:MarkerAnnotation[27326-27335]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23646-23652]:Modifier[27344-27350]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23653-23657]:PrimitiveType[27351-27355]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[23658-23661]:SimpleName[27356-27359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23664-32223]:Block[27362-34032]"
    }, {
      "left" : "info(\"Starting partition fetcher for \" + m_topicAndPartition);",
      "right" : "info(\"Starting partition fetcher for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[23722-23784]:ExpressionStatement[27376-27438]"
    }, {
      "left" : "long submitCount = 0;",
      "right" : "long submitCount = 0;",
      "info" : "VariableDeclarationStatement[23797-23818]:VariableDeclarationStatement[27451-27472]"
    }, {
      "left" : "AtomicLong cbcnt = new AtomicLong(0);",
      "right" : "AtomicLong cbcnt = new AtomicLong(0);",
      "info" : "VariableDeclarationStatement[23831-23868]:VariableDeclarationStatement[27485-27522]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23881-32213]:TryStatement[27535-34022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23885-31885]:Block[27539-33690]"
    }, {
      "left" : "HostAndPort leaderBroker = m_leader;",
      "right" : "HostAndPort leaderBroker = m_leader;",
      "info" : "VariableDeclarationStatement[23952-23988]:VariableDeclarationStatement[26419-26455]"
    }, {
      "left" : "int sleepCounter = 1;",
      "right" : "int sleepCounter = 1;",
      "info" : "VariableDeclarationStatement[24005-24026]:VariableDeclarationStatement[27638-27659]"
    }, {
      "left" : "while (!m_shutdown)",
      "right" : "while (!m_shutdown)",
      "info" : "WhileStatement[24043-31536]:WhileStatement[27676-33341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24063-31536]:Block[27696-33341]"
    }, {
      "left" : "consumer",
      "right" : "m_consumer",
      "info" : "SimpleName[24133-24141]:SimpleName[27115-27125]"
    }, {
      "left" : "consumer = new SimpleConsumer(leaderBroker.getHost(), leaderBroker.getPort(), m_consumerSocketTimeout, m_fetchSize, CLIENT_ID);",
      "right" : "m_consumer = new SimpleConsumer(\n                    leaderBroker.getHost(), leaderBroker.getPort(),\n                    m_consumerSocketTimeout, m_fetchSize, CLIENT_ID\n                    );",
      "info" : "ExpressionStatement[24133-24260]:ExpressionStatement[27115-27306]"
    }, {
      "left" : "if (m_currentOffset.get() < 0)",
      "right" : "if (m_currentOffset.get() < 0)",
      "info" : "IfStatement[24379-25273]:IfStatement[27794-28529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24410-25273]:Block[27825-28529]"
    }, {
      "left" : "getOffsetCoordinator();",
      "right" : "getOffsetCoordinator();",
      "info" : "ExpressionStatement[24436-24459]:ExpressionStatement[27851-27874]"
    }, {
      "left" : "m_currentOffset.set(getLastOffset(kafka.api.OffsetRequest.LatestTime()));",
      "right" : "m_currentOffset.set(lastOffset);",
      "info" : "ExpressionStatement[24484-24557]:ExpressionStatement[27958-27990]"
    }, {
      "left" : "getLastOffset",
      "right" : "getLastOffset",
      "info" : "SimpleName[24504-24517]:SimpleName[27917-27930]"
    }, {
      "left" : "kafka.api.OffsetRequest.LatestTime()",
      "right" : "kafka.api.OffsetRequest.LatestTime()",
      "info" : "MethodInvocation[24518-24554]:MethodInvocation[3244-3280]"
    }, {
      "left" : "if (m_currentOffset.get() < 0)",
      "right" : "if (m_currentOffset.get() < 0)",
      "info" : "IfStatement[24582-25033]:IfStatement[28015-28507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24613-25033]:Block[28046-28507]"
    }, {
      "left" : "sleepCounter = backoffSleep(sleepCounter);",
      "right" : "sleepCounter = backoffSleep(sleepCounter);",
      "info" : "ExpressionStatement[24643-24685]:ExpressionStatement[28076-28118]"
    }, {
      "left" : "info(\"Latest offset not found for \" + m_topicAndPartition + \" using earliest offset.\");",
      "right" : "info(\"Latest offset not found for \" + m_topicAndPartition + \" using earliest offset.\");",
      "info" : "ExpressionStatement[24714-24801]:ExpressionStatement[28147-28234]"
    }, {
      "left" : "kafka.api.OffsetRequest.EarliestTime()",
      "right" : "kafka.api.OffsetRequest.EarliestTime()",
      "info" : "MethodInvocation[24966-25004]:MethodInvocation[3399-3437]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25242-25251]:ContinueStatement[28472-28481]"
    }, {
      "left" : "long currentFetchCount = 0;",
      "right" : "long currentFetchCount = 0;",
      "info" : "VariableDeclarationStatement[25294-25321]:VariableDeclarationStatement[28550-28577]"
    }, {
      "left" : "FetchRequest req = new FetchRequestBuilder().clientId(CLIENT_ID)\n                            .addFetch(m_topicAndPartition.topic(),\n                                    m_topicAndPartition.partition(), m_currentOffset.get(), m_fetchSize)\n                            .build();",
      "right" : "FetchRequest req = new FetchRequestBuilder().clientId(CLIENT_ID)\n                            .addFetch(m_topicAndPartition.topic(),\n                                    m_topicAndPartition.partition(), m_currentOffset.get(), m_fetchSize)\n                            .build();",
      "info" : "VariableDeclarationStatement[25440-25714]:VariableDeclarationStatement[28696-28970]"
    }, {
      "left" : "FetchResponse fetchResponse = null;",
      "right" : "FetchResponse fetchResponse = null;",
      "info" : "VariableDeclarationStatement[25735-25770]:VariableDeclarationStatement[28991-29026]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25791-27374]:TryStatement[29047-29890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25795-26067]:Block[29051-29325]"
    }, {
      "left" : "fetchResponse = consumer.fetch(req);",
      "right" : "fetchResponse = m_consumer.fetch(req);",
      "info" : "ExpressionStatement[25821-25857]:ExpressionStatement[29077-29115]"
    }, {
      "left" : "consumer",
      "right" : "m_consumer",
      "info" : "SimpleName[25837-25845]:SimpleName[29093-29103]"
    }, {
      "left" : "if (fetchResponse == null)",
      "right" : "if (fetchResponse == null)",
      "info" : "IfStatement[25882-26045]:IfStatement[29140-29303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25909-26045]:Block[29167-29303]"
    }, {
      "left" : "sleepCounter = backoffSleep(sleepCounter);",
      "right" : "sleepCounter = backoffSleep(sleepCounter);",
      "info" : "ExpressionStatement[25939-25981]:ExpressionStatement[29197-29239]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26010-26019]:ContinueStatement[29268-29277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26089-27374]:Block[29347-29890]"
    }, {
      "left" : "error(ex, \"Failed to fetch from %s\", m_topicAndPartition);",
      "right" : "error(ex, \"Failed to fetch from %s\", m_topicAndPartition);",
      "info" : "ExpressionStatement[26115-26173]:ExpressionStatement[29373-29431]"
    }, {
      "left" : "if (ex instanceof ClosedChannelException)",
      "right" : "if (ex instanceof IOException)",
      "info" : "IfStatement[26289-27251]:IfStatement[29547-29767]"
    }, {
      "left" : "ClosedChannelException",
      "right" : "IOException",
      "info" : "SimpleName[26307-26329]:SimpleName[29565-29576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26331-27251]:Block[29578-29767]"
    }, {
      "left" : "error(null, \"Fetch Failed to find leader continue with old leader: %s\", m_leader);",
      "right" : "error(null, \"Fetch Failed to find leader continue with old leader: %s\", m_leader);",
      "info" : "ExpressionStatement[26683-26765]:ExpressionStatement[26715-26797]"
    }, {
      "left" : "leaderBroker",
      "right" : "m_leader",
      "info" : "SimpleName[26798-26810]:SimpleName[27046-27054]"
    }, {
      "left" : "leaderBroker = m_leader;",
      "right" : "m_leader = leaderBroker;",
      "info" : "ExpressionStatement[26798-26822]:ExpressionStatement[27046-27070]"
    }, {
      "left" : "m_leader",
      "right" : "leaderBroker",
      "info" : "SimpleName[26813-26821]:SimpleName[27057-27069]"
    }, {
      "left" : "info(\"Fetch Found new leader for \" + m_topicAndPartition + \" New Leader: \" + leaderBroker);",
      "right" : "info(\"Fetch Found new leader for \" + m_topicAndPartition + \" New Leader: \" + leaderBroker);",
      "info" : "ExpressionStatement[26966-27057]:ExpressionStatement[26934-27025]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27216-27225]:ContinueStatement[29732-29741]"
    }, {
      "left" : "sleepCounter = backoffSleep(sleepCounter);",
      "right" : "sleepCounter = backoffSleep(sleepCounter);",
      "info" : "ExpressionStatement[27276-27318]:ExpressionStatement[29792-29834]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[27343-27352]:ContinueStatement[29859-29868]"
    }, {
      "left" : "if (fetchResponse.hasError())",
      "right" : "if (fetchResponse.hasError())",
      "info" : "IfStatement[27396-29054]:IfStatement[29912-30844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27426-29054]:Block[29942-30844]"
    }, {
      "left" : "short code = fetchResponse.errorCode(m_topicAndPartition.topic(), m_topicAndPartition.partition());",
      "right" : "short code = fetchResponse.errorCode(m_topicAndPartition.topic(), m_topicAndPartition.partition());",
      "info" : "VariableDeclarationStatement[27501-27600]:VariableDeclarationStatement[30017-30116]"
    }, {
      "left" : "warn(null, \"Failed to fetch messages for %s Code: %d\", m_topicAndPartition, code);",
      "right" : "warn(ErrorMapping.exceptionFor(code), \"Failed to fetch messages for %s\", m_topicAndPartition);",
      "info" : "ExpressionStatement[27625-27707]:ExpressionStatement[30141-30235]"
    }, {
      "left" : "code",
      "right" : "code",
      "info" : "SimpleName[27701-27705]:SimpleName[30172-30176]"
    }, {
      "left" : "sleepCounter = backoffSleep(sleepCounter);",
      "right" : "sleepCounter = backoffSleep(sleepCounter);",
      "info" : "ExpressionStatement[27732-27774]:ExpressionStatement[30260-30302]"
    }, {
      "left" : "if (code == ErrorMapping.OffsetOutOfRangeCode())",
      "right" : "if (code == ErrorMapping.OffsetOutOfRangeCode())",
      "info" : "IfStatement[27799-28269]:IfStatement[30327-30749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27848-28269]:Block[30376-30749]"
    }, {
      "left" : "info(\"Invalid offset requested for \" + m_topicAndPartition);",
      "right" : "info(\"Invalid offset requested for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[27991-28051]:ExpressionStatement[30519-30579]"
    }, {
      "left" : "getOffsetCoordinator();",
      "right" : "getOffsetCoordinator();",
      "info" : "ExpressionStatement[28080-28103]:ExpressionStatement[30608-30631]"
    }, {
      "left" : "m_currentOffset.set(getLastOffset(kafka.api.OffsetRequest.LatestTime()));",
      "right" : "m_currentOffset.set(-1L);",
      "info" : "ExpressionStatement[28132-28205]:ExpressionStatement[30660-30685]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28234-28243]:ContinueStatement[30714-30723]"
    }, {
      "left" : "leaderBroker = findNewLeader();",
      "right" : "leaderBroker = findNewLeader();",
      "info" : "ExpressionStatement[28384-28415]:ExpressionStatement[26539-26570]"
    }, {
      "left" : "if (leaderBroker == null)",
      "right" : "if (leaderBroker == null)",
      "info" : "IfStatement[28440-28998]:IfStatement[26583-27102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28466-28751]:Block[26609-26852]"
    }, {
      "left" : "error(null, \"Failed to find leader continue with old leader: %s\", m_leader);",
      "right" : "error(fault, \"unable to fetch earliest offset for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[28596-28672]:ExpressionStatement[24041-24116]"
    }, {
      "left" : "error(null, \"Failed to find leader continue with old leader: %s\", m_leader);",
      "right" : "error(null, \"Fetch Failed to find leader continue with old leader: %s\", m_leader);",
      "info" : "ExpressionStatement[28596-28672]:ExpressionStatement[26715-26797]"
    }, {
      "left" : "\"Failed to find leader continue with old leader: %s\"",
      "right" : "\"Fetch Failed to find leader continue with old leader: %s\"",
      "info" : "StringLiteral[28608-28660]:StringLiteral[26727-26785]"
    }, {
      "left" : "leaderBroker = m_leader;",
      "right" : "leaderBroker = m_leader;",
      "info" : "ExpressionStatement[28701-28725]:ExpressionStatement[26814-26838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28757-28998]:Block[26858-27102]"
    }, {
      "left" : "if (!leaderBroker.equals(m_leader))",
      "right" : "if (!leaderBroker.equals(m_leader))",
      "info" : "IfStatement[28787-28972]:IfStatement[26876-27088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28823-28972]:Block[26912-27088]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29023-29032]:ContinueStatement[30813-30822]"
    }, {
      "left" : "sleepCounter = 1;",
      "right" : "sleepCounter = 1;",
      "info" : "ExpressionStatement[29075-29092]:ExpressionStatement[30865-30882]"
    }, {
      "left" : "for (MessageAndOffset messageAndOffset : fetchResponse.messageSet(m_topicAndPartition.topic(), m_topicAndPartition.partition()))",
      "right" : "for (MessageAndOffset messageAndOffset : fetchResponse.messageSet(m_topicAndPartition.topic(), m_topicAndPartition.partition()))",
      "info" : "EnhancedForStatement[29113-31022]:EnhancedForStatement[30903-32827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29242-31022]:Block[31032-32827]"
    }, {
      "left" : "currentFetchCount++;",
      "right" : "currentFetchCount++;",
      "info" : "ExpressionStatement[29331-29351]:ExpressionStatement[31121-31141]"
    }, {
      "left" : "long currentOffset = messageAndOffset.offset();",
      "right" : "long currentOffset = messageAndOffset.offset();",
      "info" : "VariableDeclarationStatement[29376-29423]:VariableDeclarationStatement[31166-31213]"
    }, {
      "left" : "if (currentOffset < m_currentOffset.get())",
      "right" : "if (currentOffset < m_currentOffset.get())",
      "info" : "IfStatement[29561-29669]:IfStatement[31351-31459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29604-29669]:Block[31394-31459]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29634-29643]:ContinueStatement[31424-31433]"
    }, {
      "left" : "ByteBuffer payload = messageAndOffset.message().payload();",
      "right" : "ByteBuffer payload = messageAndOffset.message().payload();",
      "info" : "VariableDeclarationStatement[29694-29752]:VariableDeclarationStatement[31484-31542]"
    }, {
      "left" : "String line = new String(payload.array(),payload.arrayOffset(),payload.limit(),\"UTF-8\");",
      "right" : "String line = new String(payload.array(),payload.arrayOffset(),payload.limit(),StandardCharsets.UTF_8);",
      "info" : "VariableDeclarationStatement[29778-29866]:VariableDeclarationStatement[31568-31671]"
    }, {
      "left" : "CSVInvocation invocation = new CSVInvocation(m_procedure, line);",
      "right" : "CSVInvocation invocation = new CSVInvocation(m_procedure, line);",
      "info" : "VariableDeclarationStatement[29891-29955]:VariableDeclarationStatement[31696-31760]"
    }, {
      "left" : "TopicPartitionInvocationCallback cb = new TopicPartitionInvocationCallback(currentOffset, messageAndOffset.nextOffset(), cbcnt);",
      "right" : "TopicPartitionInvocationCallback cb = new TopicPartitionInvocationCallback(currentOffset, messageAndOffset.nextOffset(), cbcnt);",
      "info" : "VariableDeclarationStatement[29980-30108]:VariableDeclarationStatement[31785-31913]"
    }, {
      "left" : "m_pendingOffsets.add(currentOffset);",
      "right" : "m_pendingOffsets.add(currentOffset);",
      "info" : "ExpressionStatement[30133-30169]:ExpressionStatement[31938-31974]"
    }, {
      "left" : "if (!callProcedure(cb, invocation))",
      "right" : "if (!callProcedure(cb, invocation))",
      "info" : "IfStatement[30194-30782]:IfStatement[31999-32587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30230-30782]:Block[32035-32587]"
    }, {
      "left" : "if (isDebugEnabled())",
      "right" : "if (isDebugEnabled())",
      "info" : "IfStatement[30260-30411]:IfStatement[32065-32216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30282-30411]:Block[32087-32216]"
    }, {
      "left" : "debug(\"Failed to process Invocation possibly bad data: \" + line);",
      "right" : "debug(\"Failed to process Invocation possibly bad data: \" + line);",
      "info" : "ExpressionStatement[30316-30381]:ExpressionStatement[32121-32186]"
    }, {
      "left" : "synchronized(m_seenOffset) {\n                                //Make this failed offset known to seen offsets so committer can push ahead.\n                                m_seenOffset.add(messageAndOffset.nextOffset());\n                            }",
      "right" : "synchronized(m_seenOffset) {\n                                //Make this failed offset known to seen offsets so committer can push ahead.\n                                m_seenOffset.add(messageAndOffset.nextOffset());\n                            }",
      "info" : "SynchronizedStatement[30440-30688]:SynchronizedStatement[32245-32493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30467-30688]:Block[32272-32493]"
    }, {
      "left" : "m_seenOffset.add(messageAndOffset.nextOffset());",
      "right" : "m_seenOffset.add(messageAndOffset.nextOffset());",
      "info" : "ExpressionStatement[30610-30658]:ExpressionStatement[32415-32463]"
    }, {
      "left" : "m_pendingOffsets.remove(currentOffset);",
      "right" : "m_pendingOffsets.remove(currentOffset);",
      "info" : "ExpressionStatement[30717-30756]:ExpressionStatement[32522-32561]"
    }, {
      "left" : "submitCount++;",
      "right" : "submitCount++;",
      "info" : "ExpressionStatement[30807-30821]:ExpressionStatement[32612-32626]"
    }, {
      "left" : "m_currentOffset.set(messageAndOffset.nextOffset());",
      "right" : "m_currentOffset.set(messageAndOffset.nextOffset());",
      "info" : "ExpressionStatement[30846-30897]:ExpressionStatement[32651-32702]"
    }, {
      "left" : "if (m_shutdown)",
      "right" : "if (m_shutdown)",
      "info" : "IfStatement[30922-31000]:IfStatement[32727-32805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30938-31000]:Block[32743-32805]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30968-30974]:BreakStatement[32773-32779]"
    }, {
      "left" : "if (m_shutdown)",
      "right" : "if (m_shutdown)",
      "info" : "IfStatement[31043-31113]:IfStatement[32848-32918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31059-31113]:Block[32864-32918]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31085-31091]:BreakStatement[32890-32896]"
    }, {
      "left" : "if (currentFetchCount == 0 || m_hasBackPressure)",
      "right" : "if (currentFetchCount == 0 || m_hasBackPressure)",
      "info" : "IfStatement[31229-31482]:IfStatement[33034-33287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31278-31482]:Block[33083-33287]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31304-31460]:TryStatement[33109-33265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31308-31400]:Block[33113-33205]"
    }, {
      "left" : "Thread.sleep(m_backpressureSleepMs);",
      "right" : "Thread.sleep(m_backpressureSleepMs);",
      "info" : "ExpressionStatement[31338-31374]:ExpressionStatement[33143-33179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31433-31460]:Block[33238-33265]"
    }, {
      "left" : "commitOffset();",
      "right" : "commitOffset();",
      "info" : "ExpressionStatement[31503-31518]:ExpressionStatement[33308-33323]"
    }, {
      "left" : "info(\"Partition fecher stopped for \" + m_topicAndPartition\n                        + \" Last commit point is: \" + m_currentOffset.get()\n                        + \" Callback Rcvd: \" + cbcnt.get()\n                        + \" Submitted: \" + submitCount);",
      "right" : "info(\"Partition fecher stopped for \" + m_topicAndPartition\n                        + \" Last commit point is: \" + m_currentOffset.get()\n                        + \" Callback Rcvd: \" + cbcnt.get()\n                        + \" Submitted: \" + submitCount);",
      "info" : "ExpressionStatement[31621-31871]:ExpressionStatement[33426-33676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31907-32019]:Block[33712-33824]"
    }, {
      "left" : "error(\"Failed to start topic partition fetcher for \" + m_topicAndPartition, ex);",
      "right" : "error(\"Failed to start topic partition fetcher for \" + m_topicAndPartition, ex);",
      "info" : "ExpressionStatement[31925-32005]:ExpressionStatement[33730-33810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32028-32213]:Block[33833-34022]"
    }, {
      "left" : "commitOffset();",
      "right" : "commitOffset();",
      "info" : "ExpressionStatement[32046-32061]:ExpressionStatement[33851-33866]"
    }, {
      "left" : "closeConsumer(consumer);",
      "right" : "closeConsumer(m_consumer);",
      "info" : "ExpressionStatement[32078-32102]:ExpressionStatement[33883-33909]"
    }, {
      "left" : "consumer",
      "right" : "m_consumer",
      "info" : "SimpleName[32092-32100]:SimpleName[33897-33907]"
    }, {
      "left" : "consumer",
      "right" : "m_consumer",
      "info" : "SimpleName[32119-32127]:SimpleName[33926-33936]"
    }, {
      "left" : "consumer = null;",
      "right" : "m_consumer = null;",
      "info" : "ExpressionStatement[32119-32135]:ExpressionStatement[33926-33944]"
    }, {
      "left" : "closeConsumer(m_offsetManager.getAndSet(null));",
      "right" : "closeConsumer(m_offsetManager.getAndSet(null));",
      "info" : "ExpressionStatement[32152-32199]:ExpressionStatement[33961-34008]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32233-32239]:Modifier[34042-34048]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32240-32247]:PrimitiveType[34049-34056]"
    }, {
      "left" : "commitOffset",
      "right" : "commitOffset",
      "info" : "SimpleName[32248-32260]:SimpleName[34057-34069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32263-34765]:Block[34072-36816]"
    }, {
      "left" : "if (m_seenOffset.isEmpty())",
      "right" : "if (m_seenOffset.isEmpty())",
      "info" : "IfStatement[32278-32335]:IfStatement[34087-34144]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32322-32335]:ReturnStatement[34131-34144]"
    }, {
      "left" : "long offset = m_seenOffset.last();",
      "right" : "long offset = m_seenOffset.last();",
      "info" : "VariableDeclarationStatement[32348-32382]:VariableDeclarationStatement[34157-34191]"
    }, {
      "left" : "final int correlationId = m_topicAndPartition.partition();",
      "right" : "final int correlationId = m_topicAndPartition.partition();",
      "info" : "VariableDeclarationStatement[32395-32453]:VariableDeclarationStatement[34204-34262]"
    }, {
      "left" : "final short version = 1;",
      "right" : "final short version = 1;",
      "info" : "VariableDeclarationStatement[32466-32490]:VariableDeclarationStatement[34275-34299]"
    }, {
      "left" : "OffsetAndMetadata offsetMetdata = new OffsetAndMetadata(offset, \"commitRequest\", ErrorMapping.NoError());",
      "right" : "OffsetAndMetadata offsetMetdata = new OffsetAndMetadata(offset, \"commitRequest\", ErrorMapping.NoError());",
      "info" : "VariableDeclarationStatement[32504-32609]:VariableDeclarationStatement[34313-34418]"
    }, {
      "left" : "Map<TopicAndPartition, OffsetAndMetadata> reqMap = new HashMap<TopicAndPartition, OffsetAndMetadata>();",
      "right" : "Map<TopicAndPartition, OffsetAndMetadata> reqMap = new HashMap<TopicAndPartition, OffsetAndMetadata>();",
      "info" : "VariableDeclarationStatement[32622-32725]:VariableDeclarationStatement[34431-34534]"
    }, {
      "left" : "reqMap.put(m_topicAndPartition, offsetMetdata);",
      "right" : "reqMap.put(m_topicAndPartition, offsetMetdata);",
      "info" : "ExpressionStatement[32738-32785]:ExpressionStatement[34547-34594]"
    }, {
      "left" : "OffsetCommitRequest offsetCommitRequest = new OffsetCommitRequest(m_groupId, reqMap, correlationId, CLIENT_ID, version);",
      "right" : "OffsetCommitRequest offsetCommitRequest = new OffsetCommitRequest(m_groupId, reqMap, correlationId, CLIENT_ID, version);",
      "info" : "VariableDeclarationStatement[32798-32918]:VariableDeclarationStatement[34607-34727]"
    }, {
      "left" : "OffsetCommitResponse offsetCommitResponse = null;",
      "right" : "OffsetCommitResponse offsetCommitResponse = null;",
      "info" : "VariableDeclarationStatement[32931-32980]:VariableDeclarationStatement[34740-34789]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32993-34296]:TryStatement[34802-36347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32997-34150]:Block[34806-36201]"
    }, {
      "left" : "SimpleConsumer consumer = m_offsetManager.get();",
      "right" : "SimpleConsumer consumer = m_offsetManager.get();",
      "info" : "VariableDeclarationStatement[33015-33063]:VariableDeclarationStatement[34824-34872]"
    }, {
      "left" : "if (consumer == null)",
      "right" : "if (consumer == null)",
      "info" : "IfStatement[33080-33219]:IfStatement[34889-35028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33102-33219]:Block[34911-35028]"
    }, {
      "left" : "getOffsetCoordinator();",
      "right" : "getOffsetCoordinator();",
      "info" : "ExpressionStatement[33124-33147]:ExpressionStatement[34933-34956]"
    }, {
      "left" : "consumer = m_offsetManager.get();",
      "right" : "consumer = m_offsetManager.get();",
      "info" : "ExpressionStatement[33168-33201]:ExpressionStatement[34977-35010]"
    }, {
      "left" : "if (consumer != null)",
      "right" : "if (consumer != null)",
      "info" : "IfStatement[33236-34136]:IfStatement[35045-36187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33258-33973]:Block[35067-36024]"
    }, {
      "left" : "offsetCommitResponse = consumer.commitOffsets(offsetCommitRequest);",
      "right" : "offsetCommitResponse = consumer.commitOffsets(offsetCommitRequest);",
      "info" : "ExpressionStatement[33280-33347]:ExpressionStatement[35089-35156]"
    }, {
      "left" : "final short code = ((Short) offsetCommitResponse.errors().get(m_topicAndPartition));",
      "right" : "final short code = ((Short) offsetCommitResponse.errors().get(m_topicAndPartition));",
      "info" : "VariableDeclarationStatement[33368-33452]:VariableDeclarationStatement[35177-35261]"
    }, {
      "left" : "if (code == ErrorMapping.NotCoordinatorForConsumerCode())",
      "right" : "if (code == ErrorMapping.NotCoordinatorForConsumerCode())",
      "info" : "IfStatement[33473-33955]:IfStatement[35282-35764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33531-33955]:Block[35340-35764]"
    }, {
      "left" : "info(\"Not coordinator for committing offset for \" + m_topicAndPartition + \" Updating coordinator.\");",
      "right" : "info(\"Not coordinator for committing offset for \" + m_topicAndPartition + \" Updating coordinator.\");",
      "info" : "ExpressionStatement[33557-33657]:ExpressionStatement[35366-35466]"
    }, {
      "left" : "getOffsetCoordinator();",
      "right" : "getOffsetCoordinator();",
      "info" : "ExpressionStatement[33682-33705]:ExpressionStatement[35491-35514]"
    }, {
      "left" : "consumer = m_offsetManager.get();",
      "right" : "consumer = m_offsetManager.get();",
      "info" : "ExpressionStatement[33730-33763]:ExpressionStatement[35539-35572]"
    }, {
      "left" : "if (consumer != null)",
      "right" : "if (consumer != null)",
      "info" : "IfStatement[33788-33933]:IfStatement[35597-35742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33810-33933]:Block[35619-35742]"
    }, {
      "left" : "offsetCommitResponse = consumer.commitOffsets(offsetCommitRequest);",
      "right" : "offsetCommitResponse = consumer.commitOffsets(offsetCommitRequest);",
      "info" : "ExpressionStatement[33840-33907]:ExpressionStatement[35649-35716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33979-34136]:Block[36030-36187]"
    }, {
      "left" : "error(\"Commit Offset Failed to get offset coordinator for \" + m_topicAndPartition);",
      "right" : "error(\"Commit Offset Failed to get offset coordinator for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[34001-34084]:ExpressionStatement[36052-36135]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34105-34118]:ReturnStatement[36156-36169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34171-34296]:Block[36222-36347]"
    }, {
      "left" : "error(e, \"Failed to commit Offset for \" + m_topicAndPartition);",
      "right" : "error(e, \"Failed to commit Offset for \" + m_topicAndPartition);",
      "info" : "ExpressionStatement[34189-34252]:ExpressionStatement[36240-36303]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34269-34282]:ReturnStatement[36320-36333]"
    }, {
      "left" : "final short code = ((Short) offsetCommitResponse.errors().get(m_topicAndPartition));",
      "right" : "final short code = ((Short) offsetCommitResponse.errors().get(m_topicAndPartition));",
      "info" : "VariableDeclarationStatement[34309-34393]:VariableDeclarationStatement[36360-36444]"
    }, {
      "left" : "if (code != ErrorMapping.NoError())",
      "right" : "if (code != ErrorMapping.NoError())",
      "info" : "IfStatement[34406-34637]:IfStatement[36457-36688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34442-34637]:Block[36493-36688]"
    }, {
      "left" : "final String msg = \"Commit Offset Failed to commit for \" + m_topicAndPartition + \" Code: %d\";",
      "right" : "final String msg = \"Commit Offset Failed to commit for \" + m_topicAndPartition + \" Code: %d\";",
      "info" : "VariableDeclarationStatement[34460-34553]:VariableDeclarationStatement[36511-36604]"
    }, {
      "left" : "error(null, msg, code);",
      "right" : "error(null, msg, code);",
      "info" : "ExpressionStatement[34570-34593]:ExpressionStatement[36621-36644]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34610-34623]:ReturnStatement[36661-36674]"
    }, {
      "left" : "synchronized(m_seenOffset) {\n                m_seenOffset.clear();\n            }",
      "right" : "synchronized(m_seenOffset) {\n                m_seenOffset.clear();\n            }",
      "info" : "SynchronizedStatement[34650-34730]:SynchronizedStatement[36701-36781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34677-34730]:Block[36728-36781]"
    }, {
      "left" : "m_seenOffset.clear();",
      "right" : "m_seenOffset.clear();",
      "info" : "ExpressionStatement[34695-34716]:ExpressionStatement[36746-36767]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34743-34755]:ReturnStatement[36794-36806]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34778-34784]:Modifier[36829-36835]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34785-34789]:PrimitiveType[36836-36840]"
    }, {
      "left" : "closeConsumer",
      "right" : "closeConsumer",
      "info" : "SimpleName[34790-34803]:SimpleName[36841-36854]"
    }, {
      "left" : "SimpleConsumer consumer",
      "right" : "SimpleConsumer consumer",
      "info" : "SingleVariableDeclaration[34804-34827]:SingleVariableDeclaration[36855-36878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34829-35038]:Block[36880-37089]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34839-35032]:TryStatement[36890-37083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34843-34938]:Block[36894-36989]"
    }, {
      "left" : "if (consumer != null)",
      "right" : "if (consumer != null)",
      "info" : "IfStatement[34857-34928]:IfStatement[36908-36979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34879-34928]:Block[36930-36979]"
    }, {
      "left" : "consumer.close();",
      "right" : "consumer.close();",
      "info" : "ExpressionStatement[34897-34914]:ExpressionStatement[36948-36965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34959-35032]:Block[37010-37083]"
    }, {
      "left" : "error(\"Failed to close consumer connection.\", e);",
      "right" : "error(\"Failed to close consumer connection.\", e);",
      "info" : "ExpressionStatement[34973-35022]:ExpressionStatement[37024-37073]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35044-35053]:MarkerAnnotation[37095-37104]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35058-35064]:Modifier[37109-37115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35065-35069]:PrimitiveType[37116-37120]"
    }, {
      "left" : "hasBackPressure",
      "right" : "hasBackPressure",
      "info" : "SimpleName[35070-35085]:SimpleName[37121-37136]"
    }, {
      "left" : "boolean flag",
      "right" : "boolean flag",
      "info" : "SingleVariableDeclaration[35086-35098]:SingleVariableDeclaration[37137-37149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35100-35260]:Block[37151-37311]"
    }, {
      "left" : "if (m_stopping)",
      "right" : "if (m_stopping)",
      "info" : "IfStatement[35110-35133]:IfStatement[37161-37184]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35126-35133]:ReturnStatement[37177-37184]"
    }, {
      "left" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "right" : "for (TopicPartitionFetcher fetcher : m_fetchers.values())",
      "info" : "EnhancedForStatement[35142-35254]:EnhancedForStatement[37193-37305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35200-35254]:Block[37251-37305]"
    }, {
      "left" : "fetcher.hasBackPressure(flag);",
      "right" : "fetcher.hasBackPressure(flag);",
      "info" : "ExpressionStatement[35214-35244]:ExpressionStatement[37265-37295]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35309-35318]:MarkerAnnotation[37360-37369]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35323-35329]:Modifier[37374-37380]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35330-35334]:PrimitiveType[37381-37385]"
    }, {
      "left" : "onChange",
      "right" : "onChange",
      "info" : "SimpleName[35335-35343]:SimpleName[37386-37394]"
    }, {
      "left" : "ImporterChannelAssignment assignment",
      "right" : "ImporterChannelAssignment assignment",
      "info" : "SingleVariableDeclaration[35344-35380]:SingleVariableDeclaration[37395-37431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35382-37921]:Block[37433-39960]"
    }, {
      "left" : "if (m_stopping)",
      "right" : "if (m_stopping)",
      "info" : "IfStatement[35392-35516]:IfStatement[37443-37567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35408-35516]:Block[37459-37567]"
    }, {
      "left" : "info(\"Importer is stopping, ignoring the change notification.\");",
      "right" : "info(\"Importer is stopping, ignoring the change notification.\");",
      "info" : "ExpressionStatement[35422-35486]:ExpressionStatement[37473-37537]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35499-35506]:ReturnStatement[37550-37557]"
    }, {
      "left" : "if (m_es == null)",
      "right" : "if (m_es == null)",
      "info" : "IfStatement[35525-35729]:IfStatement[37576-37780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35543-35729]:Block[37594-37780]"
    }, {
      "left" : "VoltDB.crashLocalVoltDB(\"buildTopicLeaderMetadata must be called before getting an onChange\", false, null);",
      "right" : "VoltDB.crashLocalVoltDB(\"buildTopicLeaderMetadata must be called before getting an onChange\", false, null);",
      "info" : "ExpressionStatement[35612-35719]:ExpressionStatement[37663-37770]"
    }, {
      "left" : "for (URI nuri : assignment.getAdded())",
      "right" : "for (URI nuri : assignment.getAdded())",
      "info" : "EnhancedForStatement[35821-37473]:EnhancedForStatement[37872-39512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35860-37473]:Block[37911-39512]"
    }, {
      "left" : "Map<String, List<Integer>> topicMap = new HashMap<String, List<Integer>>();",
      "right" : "Map<String, List<Integer>> topicMap = new HashMap<String, List<Integer>>();",
      "info" : "VariableDeclarationStatement[35874-35949]:VariableDeclarationStatement[37925-38000]"
    }, {
      "left" : "for (String topic : m_topicList)",
      "right" : "for (String topic : m_topicList)",
      "info" : "EnhancedForStatement[35962-36077]:EnhancedForStatement[38013-38116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35995-36077]:Block[38046-38116]"
    }, {
      "left" : "topicMap.put(topic, Collections.singletonList(0));",
      "right" : "topicMap.put(topic, singletonList(0));",
      "info" : "ExpressionStatement[36013-36063]:ExpressionStatement[38064-38102]"
    }, {
      "left" : "for (String topic : m_topicList)",
      "right" : "for (String topic : m_topicList)",
      "info" : "EnhancedForStatement[36090-37463]:EnhancedForStatement[38129-39502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36123-37463]:Block[38162-39502]"
    }, {
      "left" : "List<Integer> topicPartitions = m_topicPartitions.get(topic);",
      "right" : "List<Integer> topicPartitions = m_topicPartitions.get(topic);",
      "info" : "VariableDeclarationStatement[36141-36202]:VariableDeclarationStatement[38180-38241]"
    }, {
      "left" : "if (topicPartitions == null)",
      "right" : "if (topicPartitions == null)",
      "info" : "IfStatement[36219-36457]:IfStatement[38258-38496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36248-36457]:Block[38287-38496]"
    }, {
      "left" : "VoltDB.crashLocalVoltDB(\"Unknown kafka topic added for this node\", false, null);",
      "right" : "VoltDB.crashLocalVoltDB(\"Unknown kafka topic added for this node\", false, null);",
      "info" : "ExpressionStatement[36359-36439]:ExpressionStatement[38398-38478]"
    }, {
      "left" : "for (int partition : topicPartitions)",
      "right" : "for (int partition : topicPartitions)",
      "info" : "EnhancedForStatement[36474-37449]:EnhancedForStatement[38513-39488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36512-37449]:Block[38551-39488]"
    }, {
      "left" : "String leaderKey = topic + \"-\" + partition;",
      "right" : "String leaderKey = topic + \"-\" + partition;",
      "info" : "VariableDeclarationStatement[36534-36577]:VariableDeclarationStatement[38573-38616]"
    }, {
      "left" : "URI assignedKey = URI.create(\"kafka:/\" + topic + \"/partition/\" + partition);",
      "right" : "URI assignedKey = URI.create(\"kafka:/\" + topic + \"/partition/\" + partition);",
      "info" : "VariableDeclarationStatement[36598-36674]:VariableDeclarationStatement[38637-38713]"
    }, {
      "left" : "if (!m_fetchers.containsKey(nuri.toString()) && nuri.equals(assignedKey))",
      "right" : "if (!m_fetchers.containsKey(nuri.toString()) && nuri.equals(assignedKey))",
      "info" : "IfStatement[36752-37431]:IfStatement[38791-39470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36826-37431]:Block[38865-39470]"
    }, {
      "left" : "info(\"Channel \" + assignedKey + \" mastership is assigned to this node.\");",
      "right" : "info(\"Channel \" + assignedKey + \" mastership is assigned to this node.\");",
      "info" : "ExpressionStatement[36852-36925]:ExpressionStatement[38891-38964]"
    }, {
      "left" : "HostAndPort hap = m_topicPartitionLeader.get(leaderKey);",
      "right" : "HostAndPort hap = m_topicPartitionLeader.get(leaderKey);",
      "info" : "VariableDeclarationStatement[36950-37006]:VariableDeclarationStatement[38989-39045]"
    }, {
      "left" : "TopicPartitionFetcher fetcher = new TopicPartitionFetcher(m_brokerList, assignedKey, topic, partition,\n                                hap, m_fetchSize, m_consumerSocketTimeout);",
      "right" : "TopicPartitionFetcher fetcher = new TopicPartitionFetcher(m_brokerList, assignedKey, topic, partition,\n                                hap, m_fetchSize, m_consumerSocketTimeout);",
      "info" : "VariableDeclarationStatement[37031-37209]:VariableDeclarationStatement[39070-39248]"
    }, {
      "left" : "m_fetchers.put(assignedKey.toString(), fetcher);",
      "right" : "m_fetchers.put(assignedKey.toString(), fetcher);",
      "info" : "ExpressionStatement[37234-37282]:ExpressionStatement[39273-39321]"
    }, {
      "left" : "m_es.submit(fetcher);",
      "right" : "m_es.submit(fetcher);",
      "info" : "ExpressionStatement[37307-37328]:ExpressionStatement[39346-39367]"
    }, {
      "left" : "info(\"KafkaImporter is fetching for resource: \" + nuri);",
      "right" : "info(\"KafkaImporter is fetching for resource: \" + nuri);",
      "info" : "ExpressionStatement[37353-37409]:ExpressionStatement[39392-39448]"
    }, {
      "left" : "for (URI r : assignment.getRemoved())",
      "right" : "for (URI r : assignment.getRemoved())",
      "info" : "EnhancedForStatement[37584-37915]:EnhancedForStatement[39623-39954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37622-37915]:Block[39661-39954]"
    }, {
      "left" : "TopicPartitionFetcher fetcher = m_fetchers.get(r.toString());",
      "right" : "TopicPartitionFetcher fetcher = m_fetchers.get(r.toString());",
      "info" : "VariableDeclarationStatement[37636-37697]:VariableDeclarationStatement[39675-39736]"
    }, {
      "left" : "if (fetcher != null)",
      "right" : "if (fetcher != null)",
      "info" : "IfStatement[37710-37905]:IfStatement[39749-39944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37731-37905]:Block[39770-39944]"
    }, {
      "left" : "fetcher.shutdown();",
      "right" : "fetcher.shutdown();",
      "info" : "ExpressionStatement[37749-37768]:ExpressionStatement[39788-39807]"
    }, {
      "left" : "info(\"KafkaImporter is NOT fetching for resource: \" + r);",
      "right" : "info(\"KafkaImporter is NOT fetching for resource: \" + r);",
      "info" : "ExpressionStatement[37785-37842]:ExpressionStatement[39824-39881]"
    }, {
      "left" : "m_fetchers.remove(r.toString());",
      "right" : "m_fetchers.remove(r.toString());",
      "info" : "ExpressionStatement[37859-37891]:ExpressionStatement[39898-39930]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37950-37959]:MarkerAnnotation[39989-39998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37964-37970]:Modifier[40003-40009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37971-37975]:PrimitiveType[40010-40014]"
    }, {
      "left" : "onClusterStateChange",
      "right" : "onClusterStateChange",
      "info" : "SimpleName[37976-37996]:SimpleName[40015-40035]"
    }, {
      "left" : "VersionedOperationMode mode",
      "right" : "VersionedOperationMode mode",
      "info" : "SingleVariableDeclaration[37997-38024]:SingleVariableDeclaration[40036-40063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38026-38093]:Block[40065-40132]"
    }, {
      "left" : "info(\"cluster state change notification: \" + mode);",
      "right" : "info(\"cluster state change notification: \" + mode);",
      "info" : "ExpressionStatement[38036-38087]:ExpressionStatement[40075-40126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38186-38195]:MarkerAnnotation[40225-40234]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38200-38206]:Modifier[40239-40245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38207-38211]:PrimitiveType[40246-40250]"
    }, {
      "left" : "readyForData",
      "right" : "readyForData",
      "info" : "SimpleName[38212-38224]:SimpleName[40251-40263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38227-38515]:Block[40266-40554]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38237-38509]:TryStatement[40276-40548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38241-38409]:Block[40280-40448]"
    }, {
      "left" : "info(\"Configured and ready with properties: \" + m_properties);",
      "right" : "info(\"Configured and ready with properties: \" + m_properties);",
      "info" : "ExpressionStatement[38255-38317]:ExpressionStatement[40294-40356]"
    }, {
      "left" : "m_done.acquire();",
      "right" : "m_done.acquire();",
      "info" : "ExpressionStatement[38382-38399]:ExpressionStatement[40421-40438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38431-38509]:Block[40470-40548]"
    }, {
      "left" : "error(\"Kafka Importer finished with exeception \", ex);",
      "right" : "error(\"Kafka Importer finished with exeception \", ex);",
      "info" : "ExpressionStatement[38445-38499]:ExpressionStatement[40484-40538]"
    } ]
  },
  "interFileMappings" : { }
}